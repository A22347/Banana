
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b4 d7 00 00       	call   c000d7d4 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 e9 01 00       	call   c001e998 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 74 f5 01 c0       	mov    ebx,0xc001f574
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 7c f5 01 c0    	cmp    ebx,0xc001f57c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 c8 b4 03 c0       	mov    eax,0xc003b4c8
c0000049:	3d c8 b4 03 c0       	cmp    eax,0xc003b4c8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 c8 b4 03 c0       	push   0xc003b4c8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 c8 b4 03 c0       	mov    eax,0xc003b4c8
c0000075:	2d c8 b4 03 c0       	sub    eax,0xc003b4c8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 c8 b4 03 c0       	push   0xc003b4c8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 b6 03 c0 00 	cmp    BYTE PTR ds:0xc003b668,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 84 f5 01 c0       	mov    ebx,0xc001f584
c00000bb:	81 eb 80 f5 01 c0    	sub    ebx,0xc001f580
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 80 f5 01 c0       	mov    esi,0xc001f580
c00000ca:	a1 6c b6 03 c0       	mov    eax,ds:0xc003b66c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c b6 03 c0       	mov    ds:0xc003b66c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c b6 03 c0       	mov    eax,ds:0xc003b66c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 c8 b4 03 c0       	push   0xc003b4c8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 b6 03 c0 01 	mov    BYTE PTR ds:0xc003b668,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 b6 03 c0       	push   0xc003b670
c000012c:	68 c8 b4 03 c0       	push   0xc003b4c8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	90                   	nop
c00001b3:	90                   	nop
c00001b4:	90                   	nop
c00001b5:	90                   	nop
c00001b6:	90                   	nop
c00001b7:	90                   	nop
c00001b8:	90                   	nop
c00001b9:	90                   	nop
c00001ba:	90                   	nop
c00001bb:	90                   	nop
c00001bc:	90                   	nop
c00001bd:	90                   	nop
c00001be:	90                   	nop
c00001bf:	90                   	nop
c00001c0:	90                   	nop
c00001c1:	90                   	nop
c00001c2:	90                   	nop
c00001c3:	90                   	nop
c00001c4:	90                   	nop
c00001c5:	90                   	nop
c00001c6:	90                   	nop
c00001c7:	90                   	nop
c00001c8:	90                   	nop
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	31 c0                	xor    eax,eax
c00001e1:	c3                   	ret    

c00001e2 <goToVM86>:
c00001e2:	fa                   	cli    
c00001e3:	55                   	push   ebp
c00001e4:	89 e5                	mov    ebp,esp
c00001e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001e9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001ef:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001f2:	25 ff ff 00 00       	and    eax,0xffff
c00001f7:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001fd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000203:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000209:	52                   	push   edx
c000020a:	51                   	push   ecx
c000020b:	68 02 02 02 00       	push   0x20202
c0000210:	53                   	push   ebx
c0000211:	50                   	push   eax
c0000212:	cf                   	iret   

c0000213 <goToUsermode>:
c0000213:	fa                   	cli    
c0000214:	55                   	push   ebp
c0000215:	89 e5                	mov    ebp,esp
c0000217:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000021a:	66 b8 23 00          	mov    ax,0x23
c000021e:	66 8e d8             	mov    ds,ax
c0000221:	66 8e c0             	mov    es,ax
c0000224:	66 8e e0             	mov    fs,ax
c0000227:	66 8e e8             	mov    gs,ax
c000022a:	89 e0                	mov    eax,esp
c000022c:	68 23 00 00 00       	push   0x23
c0000231:	50                   	push   eax
c0000232:	68 02 02 00 00       	push   0x202
c0000237:	68 1b 00 00 00       	push   0x1b
c000023c:	53                   	push   ebx
c000023d:	cf                   	iret   

c000023e <switchToThreadASMFirstTime>:
c000023e:	9c                   	pushf  
c000023f:	fa                   	cli    
c0000240:	50                   	push   eax
c0000241:	53                   	push   ebx
c0000242:	51                   	push   ecx
c0000243:	52                   	push   edx
c0000244:	56                   	push   esi
c0000245:	57                   	push   edi
c0000246:	55                   	push   ebp
c0000247:	e9 11 00 00 00       	jmp    c000025d <commonThreadSwitch>

c000024c <switchToThreadASM>:
c000024c:	9c                   	pushf  
c000024d:	50                   	push   eax
c000024e:	53                   	push   ebx
c000024f:	51                   	push   ecx
c0000250:	52                   	push   edx
c0000251:	56                   	push   esi
c0000252:	57                   	push   edi
c0000253:	55                   	push   ebp
c0000254:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000025a:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000025d <commonThreadSwitch>:
c000025d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000261:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000267:	8b 06                	mov    eax,DWORD PTR [esi]
c0000269:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000026c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000026f:	0f 20 d9             	mov    ecx,cr3
c0000272:	39 c8                	cmp    eax,ecx
c0000274:	74 03                	je     c0000279 <commonThreadSwitch.doneVAS>
c0000276:	0f 22 d8             	mov    cr3,eax

c0000279 <commonThreadSwitch.doneVAS>:
c0000279:	85 d2                	test   edx,edx
c000027b:	74 4e                	je     c00002cb <commonThreadSwitch.notFirstTime>
c000027d:	fa                   	cli    
c000027e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000281:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000286:	60                   	pusha  
c0000287:	e8 d2 20 01 00       	call   c001235e <mapVASFirstTime>
c000028c:	61                   	popa   
c000028d:	89 c4                	mov    esp,eax
c000028f:	56                   	push   esi
c0000290:	52                   	push   edx
c0000291:	e8 16 dd 00 00       	call   c000dfac <changeTSS>
c0000296:	5a                   	pop    edx
c0000297:	5e                   	pop    esi
c0000298:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000029f:	81 fa 01 00 00 00    	cmp    edx,0x1
c00002a5:	74 39                	je     c00002e0 <commonThreadSwitch.cameOffAFork>
c00002a7:	5d                   	pop    ebp
c00002a8:	5f                   	pop    edi
c00002a9:	5e                   	pop    esi
c00002aa:	59                   	pop    ecx
c00002ab:	59                   	pop    ecx
c00002ac:	5b                   	pop    ebx
c00002ad:	58                   	pop    eax
c00002ae:	81 c4 04 00 00 00    	add    esp,0x4
c00002b4:	6a 02                	push   0x2
c00002b6:	9d                   	popf   
c00002b7:	52                   	push   edx
c00002b8:	e8 02 e1 00 00       	call   c000e3bf <taskStartupFunction>
c00002bd:	5a                   	pop    edx
c00002be:	50                   	push   eax
c00002bf:	ff d2                	call   edx
c00002c1:	e8 a8 e8 00 00       	call   c000eb6e <taskReturned>
c00002c6:	e9 fb ff ff ff       	jmp    c00002c6 <commonThreadSwitch.doneVAS+0x4d>

c00002cb <commonThreadSwitch.notFirstTime>:
c00002cb:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ce:	56                   	push   esi
c00002cf:	52                   	push   edx
c00002d0:	e8 d7 dc 00 00       	call   c000dfac <changeTSS>
c00002d5:	5a                   	pop    edx
c00002d6:	5e                   	pop    esi
c00002d7:	5d                   	pop    ebp
c00002d8:	5f                   	pop    edi
c00002d9:	5e                   	pop    esi
c00002da:	5a                   	pop    edx
c00002db:	59                   	pop    ecx
c00002dc:	5b                   	pop    ebx
c00002dd:	58                   	pop    eax
c00002de:	9d                   	popf   
c00002df:	c3                   	ret    

c00002e0 <commonThreadSwitch.cameOffAFork>:
c00002e0:	31 c0                	xor    eax,eax
c00002e2:	31 d2                	xor    edx,edx
c00002e4:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002e7:	e9 a2 02 00 00       	jmp    c000058e <offAForkJumpThingy>

c00002ec <detectCPUID>:
c00002ec:	9c                   	pushf  
c00002ed:	9c                   	pushf  
c00002ee:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002f5:	9d                   	popf   
c00002f6:	9c                   	pushf  
c00002f7:	58                   	pop    eax
c00002f8:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002fb:	9d                   	popf   
c00002fc:	25 00 00 20 00       	and    eax,0x200000
c0000301:	c3                   	ret    

c0000302 <asmQuickAcquireLock>:
c0000302:	55                   	push   ebp
c0000303:	89 e5                	mov    ebp,esp
c0000305:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000308 <asmQuickAcquireLock.retry>:
c0000308:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030d:	72 02                	jb     c0000311 <asmQuickAcquireLock.spin_with_pause>
c000030f:	fa                   	cli    
c0000310:	c3                   	ret    

c0000311 <asmQuickAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmQuickAcquireLock.spin_with_pause>
c000031b:	e9 e8 ff ff ff       	jmp    c0000308 <asmQuickAcquireLock.retry>

c0000320 <asmQuickReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000032a:	5d                   	pop    ebp
c000032b:	c3                   	ret    

c000032c <asmAcquireLock>:
c000032c:	55                   	push   ebp
c000032d:	89 e5                	mov    ebp,esp
c000032f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000332 <asmAcquireLock.retry>:
c0000332:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000337:	72 05                	jb     c000033e <asmAcquireLock.spin_with_pause>
c0000339:	9c                   	pushf  
c000033a:	58                   	pop    eax
c000033b:	fa                   	cli    
c000033c:	5d                   	pop    ebp
c000033d:	c3                   	ret    

c000033e <asmAcquireLock.spin_with_pause>:
c000033e:	f3 90                	pause  
c0000340:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000346:	75 f6                	jne    c000033e <asmAcquireLock.spin_with_pause>
c0000348:	e9 e5 ff ff ff       	jmp    c0000332 <asmAcquireLock.retry>

c000034d <asmReleaseLock>:
c000034d:	55                   	push   ebp
c000034e:	89 e5                	mov    ebp,esp
c0000350:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000353:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000356:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000035c:	52                   	push   edx
c000035d:	9d                   	popf   
c000035e:	5d                   	pop    ebp
c000035f:	c3                   	ret    

c0000360 <loadGDT>:
c0000360:	0f 01 15 44 bc 03 c0 	lgdtd  ds:0xc003bc44
c0000367:	66 b8 10 00          	mov    ax,0x10
c000036b:	66 8e d8             	mov    ds,ax
c000036e:	66 8e c0             	mov    es,ax
c0000371:	66 8e e0             	mov    fs,ax
c0000374:	66 8e e8             	mov    gs,ax
c0000377:	66 8e d0             	mov    ss,ax
c000037a:	e9 00 00 00 00       	jmp    c000037f <flush2>

c000037f <flush2>:
c000037f:	c3                   	ret    

c0000380 <isr0>:
c0000380:	fa                   	cli    
c0000381:	68 00 00 00 00       	push   0x0
c0000386:	68 00 00 00 00       	push   0x0
c000038b:	e9 a2 01 00 00       	jmp    c0000532 <int_common_stub>

c0000390 <isr1>:
c0000390:	fa                   	cli    
c0000391:	6a 00                	push   0x0
c0000393:	6a 01                	push   0x1
c0000395:	e9 98 01 00 00       	jmp    c0000532 <int_common_stub>

c000039a <isr2>:
c000039a:	fa                   	cli    
c000039b:	6a 00                	push   0x0
c000039d:	6a 02                	push   0x2
c000039f:	e9 8e 01 00 00       	jmp    c0000532 <int_common_stub>

c00003a4 <isr3>:
c00003a4:	fa                   	cli    
c00003a5:	6a 00                	push   0x0
c00003a7:	6a 03                	push   0x3
c00003a9:	e9 84 01 00 00       	jmp    c0000532 <int_common_stub>

c00003ae <isr4>:
c00003ae:	fa                   	cli    
c00003af:	6a 00                	push   0x0
c00003b1:	6a 04                	push   0x4
c00003b3:	e9 7a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003b8 <isr5>:
c00003b8:	fa                   	cli    
c00003b9:	6a 00                	push   0x0
c00003bb:	6a 05                	push   0x5
c00003bd:	e9 70 01 00 00       	jmp    c0000532 <int_common_stub>

c00003c2 <isr6>:
c00003c2:	fa                   	cli    
c00003c3:	6a 00                	push   0x0
c00003c5:	6a 06                	push   0x6
c00003c7:	e9 66 01 00 00       	jmp    c0000532 <int_common_stub>

c00003cc <isr7>:
c00003cc:	fa                   	cli    
c00003cd:	6a 00                	push   0x0
c00003cf:	6a 07                	push   0x7
c00003d1:	e9 5c 01 00 00       	jmp    c0000532 <int_common_stub>

c00003d6 <isr8>:
c00003d6:	fa                   	cli    
c00003d7:	6a 08                	push   0x8
c00003d9:	e9 54 01 00 00       	jmp    c0000532 <int_common_stub>

c00003de <isr9>:
c00003de:	fa                   	cli    
c00003df:	6a 00                	push   0x0
c00003e1:	6a 09                	push   0x9
c00003e3:	e9 4a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003e8 <isr10>:
c00003e8:	fa                   	cli    
c00003e9:	6a 0a                	push   0xa
c00003eb:	e9 42 01 00 00       	jmp    c0000532 <int_common_stub>

c00003f0 <isr11>:
c00003f0:	fa                   	cli    
c00003f1:	6a 0b                	push   0xb
c00003f3:	e9 3a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003f8 <isr12>:
c00003f8:	fa                   	cli    
c00003f9:	6a 0c                	push   0xc
c00003fb:	e9 32 01 00 00       	jmp    c0000532 <int_common_stub>

c0000400 <isr13>:
c0000400:	fa                   	cli    
c0000401:	6a 0d                	push   0xd
c0000403:	e9 2a 01 00 00       	jmp    c0000532 <int_common_stub>

c0000408 <isr14>:
c0000408:	fa                   	cli    
c0000409:	6a 0e                	push   0xe
c000040b:	e9 22 01 00 00       	jmp    c0000532 <int_common_stub>

c0000410 <isr15>:
c0000410:	fa                   	cli    
c0000411:	6a 00                	push   0x0
c0000413:	6a 0f                	push   0xf
c0000415:	e9 18 01 00 00       	jmp    c0000532 <int_common_stub>

c000041a <isr16>:
c000041a:	fa                   	cli    
c000041b:	6a 00                	push   0x0
c000041d:	6a 10                	push   0x10
c000041f:	e9 0e 01 00 00       	jmp    c0000532 <int_common_stub>

c0000424 <isr17>:
c0000424:	fa                   	cli    
c0000425:	6a 00                	push   0x0
c0000427:	6a 11                	push   0x11
c0000429:	e9 04 01 00 00       	jmp    c0000532 <int_common_stub>

c000042e <isr18>:
c000042e:	fa                   	cli    
c000042f:	6a 00                	push   0x0
c0000431:	6a 12                	push   0x12
c0000433:	e9 fa 00 00 00       	jmp    c0000532 <int_common_stub>

c0000438 <isr96>:
c0000438:	fa                   	cli    
c0000439:	6a 00                	push   0x0
c000043b:	6a 60                	push   0x60
c000043d:	e9 20 01 00 00       	jmp    c0000562 <syscall_common_stub>

c0000442 <irq0>:
c0000442:	fa                   	cli    
c0000443:	6a 00                	push   0x0
c0000445:	6a 20                	push   0x20
c0000447:	e9 e6 00 00 00       	jmp    c0000532 <int_common_stub>

c000044c <irq1>:
c000044c:	fa                   	cli    
c000044d:	6a 00                	push   0x0
c000044f:	6a 21                	push   0x21
c0000451:	e9 dc 00 00 00       	jmp    c0000532 <int_common_stub>

c0000456 <irq2>:
c0000456:	fa                   	cli    
c0000457:	6a 00                	push   0x0
c0000459:	6a 22                	push   0x22
c000045b:	e9 d2 00 00 00       	jmp    c0000532 <int_common_stub>

c0000460 <irq3>:
c0000460:	fa                   	cli    
c0000461:	6a 00                	push   0x0
c0000463:	6a 23                	push   0x23
c0000465:	e9 c8 00 00 00       	jmp    c0000532 <int_common_stub>

c000046a <irq4>:
c000046a:	fa                   	cli    
c000046b:	6a 00                	push   0x0
c000046d:	6a 24                	push   0x24
c000046f:	e9 be 00 00 00       	jmp    c0000532 <int_common_stub>

c0000474 <irq5>:
c0000474:	fa                   	cli    
c0000475:	6a 00                	push   0x0
c0000477:	6a 25                	push   0x25
c0000479:	e9 b4 00 00 00       	jmp    c0000532 <int_common_stub>

c000047e <irq6>:
c000047e:	fa                   	cli    
c000047f:	6a 00                	push   0x0
c0000481:	6a 26                	push   0x26
c0000483:	e9 aa 00 00 00       	jmp    c0000532 <int_common_stub>

c0000488 <irq7>:
c0000488:	fa                   	cli    
c0000489:	6a 00                	push   0x0
c000048b:	6a 27                	push   0x27
c000048d:	e9 a0 00 00 00       	jmp    c0000532 <int_common_stub>

c0000492 <irq8>:
c0000492:	fa                   	cli    
c0000493:	6a 00                	push   0x0
c0000495:	6a 28                	push   0x28
c0000497:	e9 96 00 00 00       	jmp    c0000532 <int_common_stub>

c000049c <irq9>:
c000049c:	fa                   	cli    
c000049d:	6a 00                	push   0x0
c000049f:	6a 29                	push   0x29
c00004a1:	e9 8c 00 00 00       	jmp    c0000532 <int_common_stub>

c00004a6 <irq10>:
c00004a6:	fa                   	cli    
c00004a7:	6a 00                	push   0x0
c00004a9:	6a 2a                	push   0x2a
c00004ab:	e9 82 00 00 00       	jmp    c0000532 <int_common_stub>

c00004b0 <irq11>:
c00004b0:	fa                   	cli    
c00004b1:	6a 00                	push   0x0
c00004b3:	6a 2b                	push   0x2b
c00004b5:	e9 78 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ba <irq12>:
c00004ba:	fa                   	cli    
c00004bb:	6a 00                	push   0x0
c00004bd:	6a 2c                	push   0x2c
c00004bf:	e9 6e 00 00 00       	jmp    c0000532 <int_common_stub>

c00004c4 <irq13>:
c00004c4:	fa                   	cli    
c00004c5:	6a 00                	push   0x0
c00004c7:	6a 2d                	push   0x2d
c00004c9:	e9 64 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ce <irq14>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 2e                	push   0x2e
c00004d3:	e9 5a 00 00 00       	jmp    c0000532 <int_common_stub>

c00004d8 <irq15>:
c00004d8:	fa                   	cli    
c00004d9:	6a 00                	push   0x0
c00004db:	6a 2f                	push   0x2f
c00004dd:	e9 50 00 00 00       	jmp    c0000532 <int_common_stub>

c00004e2 <irq16>:
c00004e2:	fa                   	cli    
c00004e3:	6a 00                	push   0x0
c00004e5:	6a 30                	push   0x30
c00004e7:	e9 46 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ec <irq17>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 31                	push   0x31
c00004f1:	e9 3c 00 00 00       	jmp    c0000532 <int_common_stub>

c00004f6 <irq18>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 32                	push   0x32
c00004fb:	e9 32 00 00 00       	jmp    c0000532 <int_common_stub>

c0000500 <irq19>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 33                	push   0x33
c0000505:	e9 28 00 00 00       	jmp    c0000532 <int_common_stub>

c000050a <irq20>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 34                	push   0x34
c000050f:	e9 1e 00 00 00       	jmp    c0000532 <int_common_stub>

c0000514 <irq21>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 35                	push   0x35
c0000519:	e9 14 00 00 00       	jmp    c0000532 <int_common_stub>

c000051e <irq22>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 36                	push   0x36
c0000523:	e9 0a 00 00 00       	jmp    c0000532 <int_common_stub>

c0000528 <irq23>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 37                	push   0x37
c000052d:	e9 00 00 00 00       	jmp    c0000532 <int_common_stub>

c0000532 <int_common_stub>:
c0000532:	60                   	pusha  
c0000533:	1e                   	push   ds
c0000534:	06                   	push   es
c0000535:	0f a0                	push   fs
c0000537:	0f a8                	push   gs
c0000539:	66 b8 10 00          	mov    ax,0x10
c000053d:	66 8e d8             	mov    ds,ax
c0000540:	66 8e c0             	mov    es,ax
c0000543:	66 8e e0             	mov    fs,ax
c0000546:	66 8e e8             	mov    gs,ax
c0000549:	89 e1                	mov    ecx,esp
c000054b:	51                   	push   ecx
c000054c:	b9 21 40 01 c0       	mov    ecx,0xc0014021
c0000551:	ff d1                	call   ecx
c0000553:	59                   	pop    ecx
c0000554:	0f a9                	pop    gs
c0000556:	0f a1                	pop    fs
c0000558:	07                   	pop    es
c0000559:	1f                   	pop    ds
c000055a:	61                   	popa   
c000055b:	81 c4 08 00 00 00    	add    esp,0x8
c0000561:	cf                   	iret   

c0000562 <syscall_common_stub>:
c0000562:	60                   	pusha  
c0000563:	1e                   	push   ds
c0000564:	06                   	push   es
c0000565:	0f a0                	push   fs
c0000567:	0f a8                	push   gs
c0000569:	66 b8 10 00          	mov    ax,0x10
c000056d:	66 8e d8             	mov    ds,ax
c0000570:	66 8e c0             	mov    es,ax
c0000573:	66 8e e0             	mov    fs,ax
c0000576:	66 8e e8             	mov    gs,ax
c0000579:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000057f:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000582:	89 e1                	mov    ecx,esp
c0000584:	51                   	push   ecx
c0000585:	fb                   	sti    
c0000586:	b9 21 40 01 c0       	mov    ecx,0xc0014021
c000058b:	ff d1                	call   ecx
c000058d:	59                   	pop    ecx

c000058e <offAForkJumpThingy>:
c000058e:	0f a9                	pop    gs
c0000590:	0f a1                	pop    fs
c0000592:	07                   	pop    es
c0000593:	1f                   	pop    ds
c0000594:	61                   	popa   
c0000595:	81 c4 08 00 00 00    	add    esp,0x8
c000059b:	cf                   	iret   

c000059c <memcmp>:
c000059c:	55                   	push   ebp
c000059d:	89 e5                	mov    ebp,esp
c000059f:	83 ec 10             	sub    esp,0x10
c00005a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00005a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00005ab:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c00005ae:	eb 06                	jmp    c00005b6 <memcmp+0x1a>
c00005b0:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00005b3:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c00005b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00005b9:	8d 50 ff             	lea    edx,[eax-0x1]
c00005bc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c00005bf:	85 c0                	test   eax,eax
c00005c1:	74 0e                	je     c00005d1 <memcmp+0x35>
c00005c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00005c8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005cb:	8a 00                	mov    al,BYTE PTR [eax]
c00005cd:	38 c2                	cmp    dl,al
c00005cf:	74 df                	je     c00005b0 <memcmp+0x14>
c00005d1:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c00005d5:	74 16                	je     c00005ed <memcmp+0x51>
c00005d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005da:	8a 00                	mov    al,BYTE PTR [eax]
c00005dc:	0f b6 d0             	movzx  edx,al
c00005df:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005e2:	8a 00                	mov    al,BYTE PTR [eax]
c00005e4:	0f b6 c0             	movzx  eax,al
c00005e7:	29 c2                	sub    edx,eax
c00005e9:	89 d0                	mov    eax,edx
c00005eb:	eb 05                	jmp    c00005f2 <memcmp+0x56>
c00005ed:	b8 00 00 00 00       	mov    eax,0x0
c00005f2:	c9                   	leave  
c00005f3:	c3                   	ret    

c00005f4 <memmove>:
c00005f4:	55                   	push   ebp
c00005f5:	89 e5                	mov    ebp,esp
c00005f7:	83 ec 10             	sub    esp,0x10
c00005fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000600:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000603:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0000606:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000609:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c000060c:	76 1d                	jbe    c000062b <memmove+0x37>
c000060e:	eb 13                	jmp    c0000623 <memmove+0x2f>
c0000610:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000613:	8a 10                	mov    dl,BYTE PTR [eax]
c0000615:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000618:	88 10                	mov    BYTE PTR [eax],dl
c000061a:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000061d:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c0000620:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000623:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000627:	75 e7                	jne    c0000610 <memmove+0x1c>
c0000629:	eb 31                	jmp    c000065c <memmove+0x68>
c000062b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c000062e:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c0000631:	73 29                	jae    c000065c <memmove+0x68>
c0000633:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000636:	48                   	dec    eax
c0000637:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
c000063a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000063d:	48                   	dec    eax
c000063e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
c0000641:	eb 13                	jmp    c0000656 <memmove+0x62>
c0000643:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000646:	8a 10                	mov    dl,BYTE PTR [eax]
c0000648:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000064b:	88 10                	mov    BYTE PTR [eax],dl
c000064d:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000650:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
c0000653:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000656:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000065a:	75 e7                	jne    c0000643 <memmove+0x4f>
c000065c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000065f:	c9                   	leave  
c0000660:	c3                   	ret    

c0000661 <memcpy>:
c0000661:	55                   	push   ebp
c0000662:	89 e5                	mov    ebp,esp
c0000664:	57                   	push   edi
c0000665:	56                   	push   esi
c0000666:	83 ec 20             	sub    esp,0x20
c0000669:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000066c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000066f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000672:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0000675:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000678:	83 e0 03             	and    eax,0x3
c000067b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000067e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000681:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0000684:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0000687:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000068a:	c1 e8 02             	shr    eax,0x2
c000068d:	89 c1                	mov    ecx,eax
c000068f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000692:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000695:	89 c6                	mov    esi,eax
c0000697:	89 d7                	mov    edi,edx
c0000699:	fc                   	cld    
c000069a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000069c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00006a3:	eb 21                	jmp    c00006c6 <memcpy+0x65>
c00006a5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00006a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00006ab:	01 c2                	add    edx,eax
c00006ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00006b0:	01 d0                	add    eax,edx
c00006b2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00006b5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00006b8:	01 d1                	add    ecx,edx
c00006ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00006bd:	01 ca                	add    edx,ecx
c00006bf:	8a 00                	mov    al,BYTE PTR [eax]
c00006c1:	88 02                	mov    BYTE PTR [edx],al
c00006c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00006c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00006c9:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
c00006cc:	72 d7                	jb     c00006a5 <memcpy+0x44>
c00006ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00006d1:	83 c4 20             	add    esp,0x20
c00006d4:	5e                   	pop    esi
c00006d5:	5f                   	pop    edi
c00006d6:	5d                   	pop    ebp
c00006d7:	c3                   	ret    

c00006d8 <memset>:
c00006d8:	55                   	push   ebp
c00006d9:	89 e5                	mov    ebp,esp
c00006db:	83 ec 10             	sub    esp,0x10
c00006de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00006e4:	eb 10                	jmp    c00006f6 <memset+0x1e>
c00006e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00006e9:	88 c2                	mov    dl,al
c00006eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00006ee:	88 10                	mov    BYTE PTR [eax],dl
c00006f0:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00006f3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00006f6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00006fa:	75 ea                	jne    c00006e6 <memset+0xe>
c00006fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006ff:	c9                   	leave  
c0000700:	c3                   	ret    

c0000701 <strlen>:
c0000701:	55                   	push   ebp
c0000702:	89 e5                	mov    ebp,esp
c0000704:	83 ec 10             	sub    esp,0x10
c0000707:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c000070e:	eb 06                	jmp    c0000716 <strlen+0x15>
c0000710:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000713:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000719:	8a 00                	mov    al,BYTE PTR [eax]
c000071b:	84 c0                	test   al,al
c000071d:	75 f1                	jne    c0000710 <strlen+0xf>
c000071f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000722:	c9                   	leave  
c0000723:	c3                   	ret    

c0000724 <strpbrk>:
c0000724:	55                   	push   ebp
c0000725:	89 e5                	mov    ebp,esp
c0000727:	83 ec 10             	sub    esp,0x10
c000072a:	eb 2a                	jmp    c0000756 <strpbrk+0x32>
c000072c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000072f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000732:	eb 16                	jmp    c000074a <strpbrk+0x26>
c0000734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000737:	8a 10                	mov    dl,BYTE PTR [eax]
c0000739:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000073c:	8a 00                	mov    al,BYTE PTR [eax]
c000073e:	38 c2                	cmp    dl,al
c0000740:	75 05                	jne    c0000747 <strpbrk+0x23>
c0000742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000745:	eb 1d                	jmp    c0000764 <strpbrk+0x40>
c0000747:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000074a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000074d:	8a 00                	mov    al,BYTE PTR [eax]
c000074f:	84 c0                	test   al,al
c0000751:	75 e1                	jne    c0000734 <strpbrk+0x10>
c0000753:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000759:	8a 00                	mov    al,BYTE PTR [eax]
c000075b:	84 c0                	test   al,al
c000075d:	75 cd                	jne    c000072c <strpbrk+0x8>
c000075f:	b8 00 00 00 00       	mov    eax,0x0
c0000764:	c9                   	leave  
c0000765:	c3                   	ret    

c0000766 <strtok>:
c0000766:	55                   	push   ebp
c0000767:	89 e5                	mov    ebp,esp
c0000769:	83 ec 10             	sub    esp,0x10
c000076c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000076f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000772:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c0000776:	75 18                	jne    c0000790 <strtok+0x2a>
c0000778:	a1 88 b6 03 c0       	mov    eax,ds:0xc003b688
c000077d:	85 c0                	test   eax,eax
c000077f:	75 07                	jne    c0000788 <strtok+0x22>
c0000781:	b8 00 00 00 00       	mov    eax,0x0
c0000786:	eb 6a                	jmp    c00007f2 <strtok+0x8c>
c0000788:	a1 88 b6 03 c0       	mov    eax,ds:0xc003b688
c000078d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000790:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000793:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000796:	e8 89 ff ff ff       	call   c0000724 <strpbrk>
c000079b:	83 c4 08             	add    esp,0x8
c000079e:	a3 88 b6 03 c0       	mov    ds:0xc003b688,eax
c00007a3:	eb 1f                	jmp    c00007c4 <strtok+0x5e>
c00007a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007a8:	8d 50 01             	lea    edx,[eax+0x1]
c00007ab:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00007ae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00007b4:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00007b7:	e8 68 ff ff ff       	call   c0000724 <strpbrk>
c00007bc:	83 c4 08             	add    esp,0x8
c00007bf:	a3 88 b6 03 c0       	mov    ds:0xc003b688,eax
c00007c4:	a1 88 b6 03 c0       	mov    eax,ds:0xc003b688
c00007c9:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c00007cc:	74 d7                	je     c00007a5 <strtok+0x3f>
c00007ce:	a1 88 b6 03 c0       	mov    eax,ds:0xc003b688
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 16                	je     c00007ed <strtok+0x87>
c00007d7:	a1 88 b6 03 c0       	mov    eax,ds:0xc003b688
c00007dc:	8d 50 01             	lea    edx,[eax+0x1]
c00007df:	89 15 88 b6 03 c0    	mov    DWORD PTR ds:0xc003b688,edx
c00007e5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007eb:	eb 05                	jmp    c00007f2 <strtok+0x8c>
c00007ed:	b8 00 00 00 00       	mov    eax,0x0
c00007f2:	c9                   	leave  
c00007f3:	c3                   	ret    

c00007f4 <strcpy>:
c00007f4:	55                   	push   ebp
c00007f5:	89 e5                	mov    ebp,esp
c00007f7:	83 ec 10             	sub    esp,0x10
c00007fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00007fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000800:	eb 10                	jmp    c0000812 <strcpy+0x1e>
c0000802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000805:	8a 10                	mov    dl,BYTE PTR [eax]
c0000807:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000080a:	88 10                	mov    BYTE PTR [eax],dl
c000080c:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000080f:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000812:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000815:	8a 00                	mov    al,BYTE PTR [eax]
c0000817:	84 c0                	test   al,al
c0000819:	75 e7                	jne    c0000802 <strcpy+0xe>
c000081b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000081e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000824:	c9                   	leave  
c0000825:	c3                   	ret    

c0000826 <strncpy>:
c0000826:	55                   	push   ebp
c0000827:	89 e5                	mov    ebp,esp
c0000829:	83 ec 10             	sub    esp,0x10
c000082c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000082f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000835:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000838:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000083c:	74 2a                	je     c0000868 <strncpy+0x42>
c000083e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000841:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000844:	8d 42 01             	lea    eax,[edx+0x1]
c0000847:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000084a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000084d:	8d 48 01             	lea    ecx,[eax+0x1]
c0000850:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000853:	8a 12                	mov    dl,BYTE PTR [edx]
c0000855:	88 10                	mov    BYTE PTR [eax],dl
c0000857:	8a 00                	mov    al,BYTE PTR [eax]
c0000859:	84 c0                	test   al,al
c000085b:	75 db                	jne    c0000838 <strncpy+0x12>
c000085d:	eb 09                	jmp    c0000868 <strncpy+0x42>
c000085f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000862:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000865:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000868:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000086b:	8d 50 ff             	lea    edx,[eax-0x1]
c000086e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c0000871:	85 c0                	test   eax,eax
c0000873:	75 ea                	jne    c000085f <strncpy+0x39>
c0000875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000878:	c9                   	leave  
c0000879:	c3                   	ret    

c000087a <strcmp>:
c000087a:	55                   	push   ebp
c000087b:	89 e5                	mov    ebp,esp
c000087d:	eb 19                	jmp    c0000898 <strcmp+0x1e>
c000087f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000882:	8d 50 01             	lea    edx,[eax+0x1]
c0000885:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c0000888:	8a 00                	mov    al,BYTE PTR [eax]
c000088a:	84 c0                	test   al,al
c000088c:	75 07                	jne    c0000895 <strcmp+0x1b>
c000088e:	b8 00 00 00 00       	mov    eax,0x0
c0000893:	eb 25                	jmp    c00008ba <strcmp+0x40>
c0000895:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000089b:	8a 10                	mov    dl,BYTE PTR [eax]
c000089d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008a0:	8a 00                	mov    al,BYTE PTR [eax]
c00008a2:	38 c2                	cmp    dl,al
c00008a4:	74 d9                	je     c000087f <strcmp+0x5>
c00008a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008a9:	8a 00                	mov    al,BYTE PTR [eax]
c00008ab:	0f b6 d0             	movzx  edx,al
c00008ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008b1:	8a 00                	mov    al,BYTE PTR [eax]
c00008b3:	0f b6 c0             	movzx  eax,al
c00008b6:	29 c2                	sub    edx,eax
c00008b8:	89 d0                	mov    eax,edx
c00008ba:	5d                   	pop    ebp
c00008bb:	c3                   	ret    

c00008bc <strchr>:
c00008bc:	55                   	push   ebp
c00008bd:	89 e5                	mov    ebp,esp
c00008bf:	eb 14                	jmp    c00008d5 <strchr+0x19>
c00008c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008c4:	8a 00                	mov    al,BYTE PTR [eax]
c00008c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00008c9:	38 d0                	cmp    al,dl
c00008cb:	75 05                	jne    c00008d2 <strchr+0x16>
c00008cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008d0:	eb 11                	jmp    c00008e3 <strchr+0x27>
c00008d2:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c00008d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008d8:	8a 00                	mov    al,BYTE PTR [eax]
c00008da:	84 c0                	test   al,al
c00008dc:	75 e3                	jne    c00008c1 <strchr+0x5>
c00008de:	b8 00 00 00 00       	mov    eax,0x0
c00008e3:	5d                   	pop    ebp
c00008e4:	c3                   	ret    

c00008e5 <strncmp>:
c00008e5:	55                   	push   ebp
c00008e6:	89 e5                	mov    ebp,esp
c00008e8:	eb 19                	jmp    c0000903 <strncmp+0x1e>
c00008ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008ed:	8d 50 01             	lea    edx,[eax+0x1]
c00008f0:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c00008f3:	8a 00                	mov    al,BYTE PTR [eax]
c00008f5:	84 c0                	test   al,al
c00008f7:	75 07                	jne    c0000900 <strncmp+0x1b>
c00008f9:	b8 00 00 00 00       	mov    eax,0x0
c00008fe:	eb 3f                	jmp    c000093f <strncmp+0x5a>
c0000900:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000903:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000906:	8d 50 ff             	lea    edx,[eax-0x1]
c0000909:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c000090c:	85 c0                	test   eax,eax
c000090e:	74 0e                	je     c000091e <strncmp+0x39>
c0000910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000913:	8a 10                	mov    dl,BYTE PTR [eax]
c0000915:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000918:	8a 00                	mov    al,BYTE PTR [eax]
c000091a:	38 c2                	cmp    dl,al
c000091c:	74 cc                	je     c00008ea <strncmp+0x5>
c000091e:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c0000922:	74 16                	je     c000093a <strncmp+0x55>
c0000924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000927:	8a 00                	mov    al,BYTE PTR [eax]
c0000929:	0f b6 d0             	movzx  edx,al
c000092c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000092f:	8a 00                	mov    al,BYTE PTR [eax]
c0000931:	0f b6 c0             	movzx  eax,al
c0000934:	29 c2                	sub    edx,eax
c0000936:	89 d0                	mov    eax,edx
c0000938:	eb 05                	jmp    c000093f <strncmp+0x5a>
c000093a:	b8 00 00 00 00       	mov    eax,0x0
c000093f:	5d                   	pop    ebp
c0000940:	c3                   	ret    

c0000941 <strcat>:
c0000941:	55                   	push   ebp
c0000942:	89 e5                	mov    ebp,esp
c0000944:	83 ec 10             	sub    esp,0x10
c0000947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000094a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000094d:	90                   	nop
c000094e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000951:	8d 50 01             	lea    edx,[eax+0x1]
c0000954:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0000957:	8a 00                	mov    al,BYTE PTR [eax]
c0000959:	84 c0                	test   al,al
c000095b:	75 f1                	jne    c000094e <strcat+0xd>
c000095d:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000960:	90                   	nop
c0000961:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000964:	8d 42 01             	lea    eax,[edx+0x1]
c0000967:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000096a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000096d:	8d 48 01             	lea    ecx,[eax+0x1]
c0000970:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000973:	8a 12                	mov    dl,BYTE PTR [edx]
c0000975:	88 10                	mov    BYTE PTR [eax],dl
c0000977:	8a 00                	mov    al,BYTE PTR [eax]
c0000979:	84 c0                	test   al,al
c000097b:	75 e4                	jne    c0000961 <strcat+0x20>
c000097d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000980:	c9                   	leave  
c0000981:	c3                   	ret    

c0000982 <strncat>:
c0000982:	55                   	push   ebp
c0000983:	89 e5                	mov    ebp,esp
c0000985:	83 ec 10             	sub    esp,0x10
c0000988:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000098c:	74 4b                	je     c00009d9 <strncat+0x57>
c000098e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000991:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000994:	90                   	nop
c0000995:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000998:	8d 50 01             	lea    edx,[eax+0x1]
c000099b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000099e:	8a 00                	mov    al,BYTE PTR [eax]
c00009a0:	84 c0                	test   al,al
c00009a2:	75 f1                	jne    c0000995 <strncat+0x13>
c00009a4:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c00009a7:	90                   	nop
c00009a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00009ab:	8d 42 01             	lea    eax,[edx+0x1]
c00009ae:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00009b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009b4:	8d 48 01             	lea    ecx,[eax+0x1]
c00009b7:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c00009ba:	8a 12                	mov    dl,BYTE PTR [edx]
c00009bc:	88 10                	mov    BYTE PTR [eax],dl
c00009be:	8a 00                	mov    al,BYTE PTR [eax]
c00009c0:	84 c0                	test   al,al
c00009c2:	74 09                	je     c00009cd <strncat+0x4b>
c00009c4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00009c7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009cb:	75 db                	jne    c00009a8 <strncat+0x26>
c00009cd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009d1:	75 06                	jne    c00009d9 <strncat+0x57>
c00009d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009d6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00009d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009dc:	c9                   	leave  
c00009dd:	c3                   	ret    

c00009de <strstr>:
c00009de:	55                   	push   ebp
c00009df:	89 e5                	mov    ebp,esp
c00009e1:	83 ec 10             	sub    esp,0x10
c00009e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00009e7:	e8 15 fd ff ff       	call   c0000701 <strlen>
c00009ec:	83 c4 04             	add    esp,0x4
c00009ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00009f2:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c00009f6:	75 22                	jne    c0000a1a <strstr+0x3c>
c00009f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009fb:	eb 32                	jmp    c0000a2f <strstr+0x51>
c00009fd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000a00:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000a03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0000a06:	e8 91 fb ff ff       	call   c000059c <memcmp>
c0000a0b:	83 c4 0c             	add    esp,0xc
c0000a0e:	85 c0                	test   eax,eax
c0000a10:	75 05                	jne    c0000a17 <strstr+0x39>
c0000a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a15:	eb 18                	jmp    c0000a2f <strstr+0x51>
c0000a17:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000a1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0000a1d:	e8 df fc ff ff       	call   c0000701 <strlen>
c0000a22:	83 c4 04             	add    esp,0x4
c0000a25:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c0000a28:	76 d3                	jbe    c00009fd <strstr+0x1f>
c0000a2a:	b8 00 00 00 00       	mov    eax,0x0
c0000a2f:	c9                   	leave  
c0000a30:	c3                   	ret    

c0000a31 <toupper>:
c0000a31:	55                   	push   ebp
c0000a32:	89 e5                	mov    ebp,esp
c0000a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a37:	0f b6 c0             	movzx  eax,al
c0000a3a:	8a 80 a0 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0a60]
c0000a40:	0f b6 c0             	movzx  eax,al
c0000a43:	83 e0 02             	and    eax,0x2
c0000a46:	85 c0                	test   eax,eax
c0000a48:	74 08                	je     c0000a52 <toupper+0x21>
c0000a4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a4d:	83 e8 20             	sub    eax,0x20
c0000a50:	eb 03                	jmp    c0000a55 <toupper+0x24>
c0000a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a55:	5d                   	pop    ebp
c0000a56:	c3                   	ret    

c0000a57 <tolower>:
c0000a57:	55                   	push   ebp
c0000a58:	89 e5                	mov    ebp,esp
c0000a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a5d:	0f b6 c0             	movzx  eax,al
c0000a60:	8a 80 a0 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0a60]
c0000a66:	0f b6 c0             	movzx  eax,al
c0000a69:	83 e0 01             	and    eax,0x1
c0000a6c:	85 c0                	test   eax,eax
c0000a6e:	74 08                	je     c0000a78 <tolower+0x21>
c0000a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a73:	83 c0 20             	add    eax,0x20
c0000a76:	eb 03                	jmp    c0000a7b <tolower+0x24>
c0000a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a7b:	5d                   	pop    ebp
c0000a7c:	c3                   	ret    

c0000a7d <simple_strtoul>:
c0000a7d:	55                   	push   ebp
c0000a7e:	89 e5                	mov    ebp,esp
c0000a80:	83 ec 28             	sub    esp,0x28
c0000a83:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0000a8a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000a91:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0000a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a9b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0000a9e:	eb 03                	jmp    c0000aa3 <simple_strtoul+0x26>
c0000aa0:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000aa6:	8a 00                	mov    al,BYTE PTR [eax]
c0000aa8:	0f b6 c0             	movzx  eax,al
c0000aab:	8a 80 a0 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0a60]
c0000ab1:	0f b6 c0             	movzx  eax,al
c0000ab4:	83 e0 08             	and    eax,0x8
c0000ab7:	85 c0                	test   eax,eax
c0000ab9:	75 e5                	jne    c0000aa0 <simple_strtoul+0x23>
c0000abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000abe:	8a 00                	mov    al,BYTE PTR [eax]
c0000ac0:	3c 09                	cmp    al,0x9
c0000ac2:	74 dc                	je     c0000aa0 <simple_strtoul+0x23>
c0000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ac7:	8a 00                	mov    al,BYTE PTR [eax]
c0000ac9:	3c 2d                	cmp    al,0x2d
c0000acb:	75 0c                	jne    c0000ad9 <simple_strtoul+0x5c>
c0000acd:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
c0000ad4:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ad7:	eb 1c                	jmp    c0000af5 <simple_strtoul+0x78>
c0000ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000adc:	8a 00                	mov    al,BYTE PTR [eax]
c0000ade:	3c 2b                	cmp    al,0x2b
c0000ae0:	75 0c                	jne    c0000aee <simple_strtoul+0x71>
c0000ae2:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ae5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000aec:	eb 07                	jmp    c0000af5 <simple_strtoul+0x78>
c0000aee:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000af5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000af9:	75 43                	jne    c0000b3e <simple_strtoul+0xc1>
c0000afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000afe:	8a 00                	mov    al,BYTE PTR [eax]
c0000b00:	3c 30                	cmp    al,0x30
c0000b02:	75 31                	jne    c0000b35 <simple_strtoul+0xb8>
c0000b04:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b0a:	8a 00                	mov    al,BYTE PTR [eax]
c0000b0c:	0f be c0             	movsx  eax,al
c0000b0f:	83 ec 0c             	sub    esp,0xc
c0000b12:	50                   	push   eax
c0000b13:	e8 3f ff ff ff       	call   c0000a57 <tolower>
c0000b18:	83 c4 10             	add    esp,0x10
c0000b1b:	83 f8 78             	cmp    eax,0x78
c0000b1e:	75 0c                	jne    c0000b2c <simple_strtoul+0xaf>
c0000b20:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
c0000b27:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b2a:	eb 26                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b2c:	c7 45 10 08 00 00 00 	mov    DWORD PTR [ebp+0x10],0x8
c0000b33:	eb 1d                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b35:	c7 45 10 0a 00 00 00 	mov    DWORD PTR [ebp+0x10],0xa
c0000b3c:	eb 14                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b3e:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
c0000b42:	0f 86 07 01 00 00    	jbe    c0000c4f <simple_strtoul+0x1d2>
c0000b48:	83 7d 10 24          	cmp    DWORD PTR [ebp+0x10],0x24
c0000b4c:	0f 87 fd 00 00 00    	ja     c0000c4f <simple_strtoul+0x1d2>
c0000b52:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
c0000b56:	75 0c                	jne    c0000b64 <simple_strtoul+0xe7>
c0000b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b5b:	8a 00                	mov    al,BYTE PTR [eax]
c0000b5d:	3c 30                	cmp    al,0x30
c0000b5f:	75 03                	jne    c0000b64 <simple_strtoul+0xe7>
c0000b61:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b64:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
c0000b68:	0f 85 d2 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b71:	8a 00                	mov    al,BYTE PTR [eax]
c0000b73:	3c 30                	cmp    al,0x30
c0000b75:	0f 85 c5 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b7b:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b81:	8a 00                	mov    al,BYTE PTR [eax]
c0000b83:	0f be c0             	movsx  eax,al
c0000b86:	83 ec 0c             	sub    esp,0xc
c0000b89:	50                   	push   eax
c0000b8a:	e8 c8 fe ff ff       	call   c0000a57 <tolower>
c0000b8f:	83 c4 10             	add    esp,0x10
c0000b92:	83 f8 78             	cmp    eax,0x78
c0000b95:	0f 85 a5 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b9b:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b9e:	e9 9d 00 00 00       	jmp    c0000c40 <simple_strtoul+0x1c3>
c0000ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ba6:	8a 00                	mov    al,BYTE PTR [eax]
c0000ba8:	0f b6 c0             	movzx  eax,al
c0000bab:	8a 80 a0 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0a60]
c0000bb1:	0f b6 c0             	movzx  eax,al
c0000bb4:	83 e0 04             	and    eax,0x4
c0000bb7:	85 c0                	test   eax,eax
c0000bb9:	74 10                	je     c0000bcb <simple_strtoul+0x14e>
c0000bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0000bc0:	0f b6 c0             	movzx  eax,al
c0000bc3:	83 e8 30             	sub    eax,0x30
c0000bc6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000bc9:	eb 31                	jmp    c0000bfc <simple_strtoul+0x17f>
c0000bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000bce:	8a 00                	mov    al,BYTE PTR [eax]
c0000bd0:	0f be c0             	movsx  eax,al
c0000bd3:	83 ec 0c             	sub    esp,0xc
c0000bd6:	50                   	push   eax
c0000bd7:	e8 55 fe ff ff       	call   c0000a31 <toupper>
c0000bdc:	83 c4 10             	add    esp,0x10
c0000bdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000be2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000be5:	0f b6 c0             	movzx  eax,al
c0000be8:	8a 80 a0 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0a60]
c0000bee:	0f b6 c0             	movzx  eax,al
c0000bf1:	83 e0 01             	and    eax,0x1
c0000bf4:	85 c0                	test   eax,eax
c0000bf6:	74 5a                	je     c0000c52 <simple_strtoul+0x1d5>
c0000bf8:	83 6d f0 37          	sub    DWORD PTR [ebp-0x10],0x37
c0000bfc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000bff:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
c0000c02:	73 51                	jae    c0000c55 <simple_strtoul+0x1d8>
c0000c04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c07:	f7 d0                	not    eax
c0000c09:	ba 00 00 00 00       	mov    edx,0x0
c0000c0e:	f7 75 10             	div    DWORD PTR [ebp+0x10]
c0000c11:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0000c14:	76 10                	jbe    c0000c26 <simple_strtoul+0x1a9>
c0000c16:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
c0000c1d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000c24:	eb 17                	jmp    c0000c3d <simple_strtoul+0x1c0>
c0000c26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c29:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
c0000c2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0000c30:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c33:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0000c36:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
c0000c3d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000c43:	8a 00                	mov    al,BYTE PTR [eax]
c0000c45:	84 c0                	test   al,al
c0000c47:	0f 85 56 ff ff ff    	jne    c0000ba3 <simple_strtoul+0x126>
c0000c4d:	eb 07                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c4f:	90                   	nop
c0000c50:	eb 04                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c52:	90                   	nop
c0000c53:	eb 01                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c55:	90                   	nop
c0000c56:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
c0000c5a:	74 24                	je     c0000c80 <simple_strtoul+0x203>
c0000c5c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0000c60:	75 16                	jne    c0000c78 <simple_strtoul+0x1fb>
c0000c62:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0000c66:	75 10                	jne    c0000c78 <simple_strtoul+0x1fb>
c0000c68:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0000c6c:	74 0a                	je     c0000c78 <simple_strtoul+0x1fb>
c0000c6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c71:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0000c74:	89 10                	mov    DWORD PTR [eax],edx
c0000c76:	eb 08                	jmp    c0000c80 <simple_strtoul+0x203>
c0000c78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000c7e:	89 10                	mov    DWORD PTR [eax],edx
c0000c80:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
c0000c84:	75 07                	jne    c0000c8d <simple_strtoul+0x210>
c0000c86:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
c0000c8d:	83 7d ec 01          	cmp    DWORD PTR [ebp-0x14],0x1
c0000c91:	75 03                	jne    c0000c96 <simple_strtoul+0x219>
c0000c93:	f7 5d e8             	neg    DWORD PTR [ebp-0x18]
c0000c96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c99:	c9                   	leave  
c0000c9a:	c3                   	ret    

c0000c9b <largebin_index>:
c0000c9b:	89 c2                	mov    edx,eax
c0000c9d:	c1 ea 08             	shr    edx,0x8
c0000ca0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ca6:	77 10                	ja     c0000cb8 <largebin_index+0x1d>
c0000ca8:	0f bd d2             	bsr    edx,edx
c0000cab:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cae:	d3 e8                	shr    eax,cl
c0000cb0:	83 e0 03             	and    eax,0x3
c0000cb3:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cb7:	c3                   	ret    
c0000cb8:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cbd:	c3                   	ret    

c0000cbe <malloc_init_state>:
c0000cbe:	53                   	push   ebx
c0000cbf:	8d 50 34             	lea    edx,[eax+0x34]
c0000cc2:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cc8:	89 d1                	mov    ecx,edx
c0000cca:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000ccd:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000cd0:	83 c2 08             	add    edx,0x8
c0000cd3:	39 da                	cmp    edx,ebx
c0000cd5:	75 f3                	jne    c0000cca <malloc_init_state+0xc>
c0000cd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd9:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ce3:	83 e2 03             	and    edx,0x3
c0000ce6:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cf0:	83 ca 48             	or     edx,0x48
c0000cf3:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cfd:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d07:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d0e:	89 10                	mov    DWORD PTR [eax],edx
c0000d10:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d13:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d1d:	5b                   	pop    ebx
c0000d1e:	c3                   	ret    

c0000d1f <malloc_consolidate>:
c0000d1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d21:	85 d2                	test   edx,edx
c0000d23:	0f 84 d8 00 00 00    	je     c0000e01 <malloc_consolidate+0xe2>
c0000d29:	55                   	push   ebp
c0000d2a:	83 e2 fd             	and    edx,0xfffffffd
c0000d2d:	57                   	push   edi
c0000d2e:	89 c5                	mov    ebp,eax
c0000d30:	56                   	push   esi
c0000d31:	8d 78 34             	lea    edi,[eax+0x34]
c0000d34:	53                   	push   ebx
c0000d35:	83 ec 10             	sub    esp,0x10
c0000d38:	89 10                	mov    DWORD PTR [eax],edx
c0000d3a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d3e:	c1 ea 03             	shr    edx,0x3
c0000d41:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d45:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d49:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d4c:	85 d2                	test   edx,edx
c0000d4e:	0f 84 98 00 00 00    	je     c0000dec <malloc_consolidate+0xcd>
c0000d54:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d5b:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d5e:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d65:	89 f9                	mov    ecx,edi
c0000d67:	83 e1 fe             	and    ecx,0xfffffffe
c0000d6a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d6d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d70:	83 e3 fc             	and    ebx,0xfffffffc
c0000d73:	83 e7 01             	and    edi,0x1
c0000d76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d79:	75 14                	jne    c0000d8f <malloc_consolidate+0x70>
c0000d7b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d7d:	29 fa                	sub    edx,edi
c0000d7f:	01 f9                	add    ecx,edi
c0000d81:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d84:	89 fb                	mov    ebx,edi
c0000d86:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d89:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d8c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d8f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d92:	74 40                	je     c0000dd4 <malloc_consolidate+0xb5>
c0000d94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d97:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d9a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d9e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000da1:	83 e7 01             	and    edi,0x1
c0000da4:	75 0e                	jne    c0000db4 <malloc_consolidate+0x95>
c0000da6:	01 d9                	add    ecx,ebx
c0000da8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000dab:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000dae:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000db1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000db4:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000db7:	89 ce                	mov    esi,ecx
c0000db9:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000dbc:	83 ce 01             	or     esi,0x1
c0000dbf:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000dc2:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000dc5:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dc8:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dcc:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000dcf:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dd2:	eb 0c                	jmp    c0000de0 <malloc_consolidate+0xc1>
c0000dd4:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000dd7:	83 c9 01             	or     ecx,0x1
c0000dda:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ddd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000de0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000de4:	85 d2                	test   edx,edx
c0000de6:	0f 85 6f ff ff ff    	jne    c0000d5b <malloc_consolidate+0x3c>
c0000dec:	83 c5 04             	add    ebp,0x4
c0000def:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000df3:	0f 85 50 ff ff ff    	jne    c0000d49 <malloc_consolidate+0x2a>
c0000df9:	83 c4 10             	add    esp,0x10
c0000dfc:	5b                   	pop    ebx
c0000dfd:	5e                   	pop    esi
c0000dfe:	5f                   	pop    edi
c0000dff:	5d                   	pop    ebp
c0000e00:	c3                   	ret    
c0000e01:	e9 b8 fe ff ff       	jmp    c0000cbe <malloc_init_state>

c0000e06 <dlfree>:
c0000e06:	57                   	push   edi
c0000e07:	56                   	push   esi
c0000e08:	53                   	push   ebx
c0000e09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e0d:	85 db                	test   ebx,ebx
c0000e0f:	0f 84 e2 00 00 00    	je     c0000ef7 <dlfree+0xf1>
c0000e15:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e18:	8b 0d a0 b6 03 c0    	mov    ecx,DWORD PTR ds:0xc003b6a0
c0000e1e:	89 f0                	mov    eax,esi
c0000e20:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e23:	83 e0 fc             	and    eax,0xfffffffc
c0000e26:	39 c1                	cmp    ecx,eax
c0000e28:	72 24                	jb     c0000e4e <dlfree+0x48>
c0000e2a:	83 c9 03             	or     ecx,0x3
c0000e2d:	c1 e8 03             	shr    eax,0x3
c0000e30:	89 0d a0 b6 03 c0    	mov    DWORD PTR ds:0xc003b6a0,ecx
c0000e36:	83 e8 02             	sub    eax,0x2
c0000e39:	8b 0c 85 a4 b6 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc495c]
c0000e40:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e42:	89 14 85 a4 b6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc495c],edx
c0000e49:	e9 a9 00 00 00       	jmp    c0000ef7 <dlfree+0xf1>
c0000e4e:	83 e6 02             	and    esi,0x2
c0000e51:	0f 85 a0 00 00 00    	jne    c0000ef7 <dlfree+0xf1>
c0000e57:	83 c9 01             	or     ecx,0x1
c0000e5a:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e5d:	89 0d a0 b6 03 c0    	mov    DWORD PTR ds:0xc003b6a0,ecx
c0000e63:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e66:	83 e1 fc             	and    ecx,0xfffffffc
c0000e69:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e6d:	75 13                	jne    c0000e82 <dlfree+0x7c>
c0000e6f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e72:	29 da                	sub    edx,ebx
c0000e74:	01 d8                	add    eax,ebx
c0000e76:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e79:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e7c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e7f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e82:	39 35 cc b6 03 c0    	cmp    DWORD PTR ds:0xc003b6cc,esi
c0000e88:	74 40                	je     c0000eca <dlfree+0xc4>
c0000e8a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e8e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e91:	80 e3 01             	and    bl,0x1
c0000e94:	75 0e                	jne    c0000ea4 <dlfree+0x9e>
c0000e96:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e99:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e9c:	01 c8                	add    eax,ecx
c0000e9e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ea1:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000ea4:	8b 0d dc b6 03 c0    	mov    ecx,DWORD PTR ds:0xc003b6dc
c0000eaa:	c7 42 0c d4 b6 03 c0 	mov    DWORD PTR [edx+0xc],0xc003b6d4
c0000eb1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000eb4:	89 15 dc b6 03 c0    	mov    DWORD PTR ds:0xc003b6dc,edx
c0000eba:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ebd:	89 c1                	mov    ecx,eax
c0000ebf:	83 c9 01             	or     ecx,0x1
c0000ec2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ec5:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ec8:	eb 10                	jmp    c0000eda <dlfree+0xd4>
c0000eca:	01 c8                	add    eax,ecx
c0000ecc:	89 c1                	mov    ecx,eax
c0000ece:	83 c9 01             	or     ecx,0x1
c0000ed1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ed4:	89 15 cc b6 03 c0    	mov    DWORD PTR ds:0xc003b6cc,edx
c0000eda:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000edf:	76 16                	jbe    c0000ef7 <dlfree+0xf1>
c0000ee1:	f6 05 a0 b6 03 c0 02 	test   BYTE PTR ds:0xc003b6a0,0x2
c0000ee8:	74 0d                	je     c0000ef7 <dlfree+0xf1>
c0000eea:	5b                   	pop    ebx
c0000eeb:	b8 a0 b6 03 c0       	mov    eax,0xc003b6a0
c0000ef0:	5e                   	pop    esi
c0000ef1:	5f                   	pop    edi
c0000ef2:	e9 28 fe ff ff       	jmp    c0000d1f <malloc_consolidate>
c0000ef7:	5b                   	pop    ebx
c0000ef8:	5e                   	pop    esi
c0000ef9:	5f                   	pop    edi
c0000efa:	c3                   	ret    

c0000efb <sYSMALLOc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	89 d3                	mov    ebx,edx
c0000f01:	83 ec 2c             	sub    esp,0x2c
c0000f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f08:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000f0e:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000f11:	8d 42 ff             	lea    eax,[edx-0x1]
c0000f14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f18:	74 1f                	je     c0000f39 <sYSMALLOc+0x3e>
c0000f1a:	89 d8                	mov    eax,ebx
c0000f1c:	e8 fe fd ff ff       	call   c0000d1f <malloc_consolidate>
c0000f21:	83 ec 0c             	sub    esp,0xc
c0000f24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f28:	83 e8 07             	sub    eax,0x7
c0000f2b:	50                   	push   eax
c0000f2c:	e8 30 02 00 00       	call   c0001161 <dlmalloc>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	e9 20 02 00 00       	jmp    c0001159 <sYSMALLOc+0x25e>
c0000f39:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f3c:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f42:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f45:	83 e0 fc             	and    eax,0xfffffffc
c0000f48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f50:	83 c0 10             	add    eax,0x10
c0000f53:	01 c1                	add    ecx,eax
c0000f55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f59:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f60:	74 04                	je     c0000f66 <sYSMALLOc+0x6b>
c0000f62:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f66:	f7 da                	neg    edx
c0000f68:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f70:	21 d1                	and    ecx,edx
c0000f72:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f76:	7f 07                	jg     c0000f7f <sYSMALLOc+0x84>
c0000f78:	31 c0                	xor    eax,eax
c0000f7a:	e9 da 01 00 00       	jmp    c0001159 <sYSMALLOc+0x25e>
c0000f7f:	83 ec 0c             	sub    esp,0xc
c0000f82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f86:	e8 a7 c3 00 00       	call   c000d332 <sbrk>
c0000f8b:	83 c4 10             	add    esp,0x10
c0000f8e:	89 c6                	mov    esi,eax
c0000f90:	83 f8 ff             	cmp    eax,0xffffffff
c0000f93:	74 e3                	je     c0000f78 <sYSMALLOc+0x7d>
c0000f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f99:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f9d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000fa0:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000fa6:	39 f1                	cmp    ecx,esi
c0000fa8:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000fae:	75 13                	jne    c0000fc3 <sYSMALLOc+0xc8>
c0000fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb8:	83 c8 01             	or     eax,0x1
c0000fbb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fbe:	e9 3e 01 00 00       	jmp    c0001101 <sYSMALLOc+0x206>
c0000fc3:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000fc9:	88 d0                	mov    al,dl
c0000fcb:	83 e0 01             	and    eax,0x1
c0000fce:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fd3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000fd7:	0f 95 c0             	setne  al
c0000fda:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000fde:	39 f1                	cmp    ecx,esi
c0000fe0:	76 12                	jbe    c0000ff4 <sYSMALLOc+0xf9>
c0000fe2:	84 c0                	test   al,al
c0000fe4:	74 0e                	je     c0000ff4 <sYSMALLOc+0xf9>
c0000fe6:	83 e2 fe             	and    edx,0xfffffffe
c0000fe9:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fef:	e9 83 00 00 00       	jmp    c0001077 <sYSMALLOc+0x17c>
c0000ff4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ff9:	74 7c                	je     c0001077 <sYSMALLOc+0x17c>
c0000ffb:	84 c0                	test   al,al
c0000ffd:	74 0c                	je     c000100b <sYSMALLOc+0x110>
c0000fff:	89 f0                	mov    eax,esi
c0001001:	29 c8                	sub    eax,ecx
c0001003:	01 e8                	add    eax,ebp
c0001005:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c000100b:	89 f2                	mov    edx,esi
c000100d:	83 e2 07             	and    edx,0x7
c0001010:	74 0c                	je     c000101e <sYSMALLOc+0x123>
c0001012:	b8 08 00 00 00       	mov    eax,0x8
c0001017:	29 d0                	sub    eax,edx
c0001019:	8d 2c 06             	lea    ebp,[esi+eax*1]
c000101c:	eb 04                	jmp    c0001022 <sYSMALLOc+0x127>
c000101e:	89 f5                	mov    ebp,esi
c0001020:	31 c0                	xor    eax,eax
c0001022:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001026:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000102a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000102e:	01 c1                	add    ecx,eax
c0001030:	83 ec 0c             	sub    esp,0xc
c0001033:	01 f1                	add    ecx,esi
c0001035:	01 ca                	add    edx,ecx
c0001037:	29 c8                	sub    eax,ecx
c0001039:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c000103d:	01 c2                	add    edx,eax
c000103f:	52                   	push   edx
c0001040:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001044:	e8 e9 c2 00 00       	call   c000d332 <sbrk>
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001053:	75 0f                	jne    c0001064 <sYSMALLOc+0x169>
c0001055:	83 ec 0c             	sub    esp,0xc
c0001058:	6a 00                	push   0x0
c000105a:	e8 d3 c2 00 00       	call   c000d332 <sbrk>
c000105f:	83 c4 10             	add    esp,0x10
c0001062:	eb 30                	jmp    c0001094 <sYSMALLOc+0x199>
c0001064:	39 c6                	cmp    esi,eax
c0001066:	76 33                	jbe    c000109b <sYSMALLOc+0x1a0>
c0001068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000106c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001073:	01 f0                	add    eax,esi
c0001075:	eb 1d                	jmp    c0001094 <sYSMALLOc+0x199>
c0001077:	83 ec 0c             	sub    esp,0xc
c000107a:	89 f5                	mov    ebp,esi
c000107c:	6a 00                	push   0x0
c000107e:	e8 af c2 00 00       	call   c000d332 <sbrk>
c0001083:	89 c2                	mov    edx,eax
c0001085:	29 f2                	sub    edx,esi
c0001087:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000108b:	83 c4 10             	add    esp,0x10
c000108e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001094:	31 d2                	xor    edx,edx
c0001096:	83 f8 ff             	cmp    eax,0xffffffff
c0001099:	74 66                	je     c0001101 <sYSMALLOc+0x206>
c000109b:	29 e8                	sub    eax,ebp
c000109d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00010a0:	01 d0                	add    eax,edx
c00010a2:	83 c8 01             	or     eax,0x1
c00010a5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00010a8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010ae:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010b3:	74 4c                	je     c0001101 <sYSMALLOc+0x206>
c00010b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010b9:	83 e8 0c             	sub    eax,0xc
c00010bc:	83 e0 f8             	and    eax,0xfffffff8
c00010bf:	89 c2                	mov    edx,eax
c00010c1:	83 ca 01             	or     edx,0x1
c00010c4:	83 f8 0f             	cmp    eax,0xf
c00010c7:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00010ca:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00010d2:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010da:	76 25                	jbe    c0001101 <sYSMALLOc+0x206>
c00010dc:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010e2:	83 ec 0c             	sub    esp,0xc
c00010e5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ef:	83 c7 08             	add    edi,0x8
c00010f2:	57                   	push   edi
c00010f3:	e8 0e fd ff ff       	call   c0000e06 <dlfree>
c00010f8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010fe:	83 c4 10             	add    esp,0x10
c0001101:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001107:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000110d:	73 06                	jae    c0001115 <sYSMALLOc+0x21a>
c000110f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001115:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000111b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001121:	73 06                	jae    c0001129 <sYSMALLOc+0x22e>
c0001123:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001129:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000112c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000112f:	83 e2 fc             	and    edx,0xfffffffc
c0001132:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001136:	0f 82 3c fe ff ff    	jb     c0000f78 <sYSMALLOc+0x7d>
c000113c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001140:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001143:	29 fa                	sub    edx,edi
c0001145:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001148:	83 ca 01             	or     edx,0x1
c000114b:	89 fb                	mov    ebx,edi
c000114d:	83 c0 08             	add    eax,0x8
c0001150:	83 cb 01             	or     ebx,0x1
c0001153:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001156:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001159:	83 c4 2c             	add    esp,0x2c
c000115c:	5b                   	pop    ebx
c000115d:	5e                   	pop    esi
c000115e:	5f                   	pop    edi
c000115f:	5d                   	pop    ebp
c0001160:	c3                   	ret    

c0001161 <dlmalloc>:
c0001161:	55                   	push   ebp
c0001162:	57                   	push   edi
c0001163:	56                   	push   esi
c0001164:	53                   	push   ebx
c0001165:	83 ec 1c             	sub    esp,0x1c
c0001168:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000116c:	83 f8 df             	cmp    eax,0xffffffdf
c000116f:	0f 87 70 03 00 00    	ja     c00014e5 <dlmalloc+0x384>
c0001175:	83 c0 0b             	add    eax,0xb
c0001178:	be 10 00 00 00       	mov    esi,0x10
c000117d:	83 f8 0f             	cmp    eax,0xf
c0001180:	76 05                	jbe    c0001187 <dlmalloc+0x26>
c0001182:	83 e0 f8             	and    eax,0xfffffff8
c0001185:	89 c6                	mov    esi,eax
c0001187:	8b 3d a0 b6 03 c0    	mov    edi,DWORD PTR ds:0xc003b6a0
c000118d:	f7 c7 01 00 00 00    	test   edi,0x1
c0001193:	75 17                	jne    c00011ac <dlmalloc+0x4b>
c0001195:	85 ff                	test   edi,edi
c0001197:	0f 85 05 03 00 00    	jne    c00014a2 <dlmalloc+0x341>
c000119d:	b8 a0 b6 03 c0       	mov    eax,0xc003b6a0
c00011a2:	e8 78 fb ff ff       	call   c0000d1f <malloc_consolidate>
c00011a7:	e9 f6 02 00 00       	jmp    c00014a2 <dlmalloc+0x341>
c00011ac:	39 f7                	cmp    edi,esi
c00011ae:	72 1f                	jb     c00011cf <dlmalloc+0x6e>
c00011b0:	89 f2                	mov    edx,esi
c00011b2:	c1 ea 03             	shr    edx,0x3
c00011b5:	83 ea 02             	sub    edx,0x2
c00011b8:	8b 04 95 a4 b6 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc495c]
c00011bf:	85 c0                	test   eax,eax
c00011c1:	74 0c                	je     c00011cf <dlmalloc+0x6e>
c00011c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011c6:	89 0c 95 a4 b6 03 c0 	mov    DWORD PTR [edx*4-0x3ffc495c],ecx
c00011cd:	eb 30                	jmp    c00011ff <dlmalloc+0x9e>
c00011cf:	89 f0                	mov    eax,esi
c00011d1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d7:	77 2e                	ja     c0001207 <dlmalloc+0xa6>
c00011d9:	c1 e8 03             	shr    eax,0x3
c00011dc:	8d 14 c5 d4 b6 03 c0 	lea    edx,[eax*8-0x3ffc492c]
c00011e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011e7:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011ea:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ed:	39 c3                	cmp    ebx,eax
c00011ef:	74 2e                	je     c000121f <dlmalloc+0xbe>
c00011f1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011f4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011f9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011fc:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011ff:	83 c0 08             	add    eax,0x8
c0001202:	e9 e0 02 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001207:	e8 8f fa ff ff       	call   c0000c9b <largebin_index>
c000120c:	83 e7 02             	and    edi,0x2
c000120f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001213:	74 0a                	je     c000121f <dlmalloc+0xbe>
c0001215:	b8 a0 b6 03 c0       	mov    eax,0xc003b6a0
c000121a:	e8 00 fb ff ff       	call   c0000d1f <malloc_consolidate>
c000121f:	8d 46 10             	lea    eax,[esi+0x10]
c0001222:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001226:	8b 1d e0 b6 03 c0    	mov    ebx,DWORD PTR ds:0xc003b6e0
c000122c:	81 fb d4 b6 03 c0    	cmp    ebx,0xc003b6d4
c0001232:	0f 84 13 01 00 00    	je     c000134b <dlmalloc+0x1ea>
c0001238:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000123b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000123e:	83 e7 fc             	and    edi,0xfffffffc
c0001241:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001247:	77 4c                	ja     c0001295 <dlmalloc+0x134>
c0001249:	3d d4 b6 03 c0       	cmp    eax,0xc003b6d4
c000124e:	75 45                	jne    c0001295 <dlmalloc+0x134>
c0001250:	39 1d d0 b6 03 c0    	cmp    DWORD PTR ds:0xc003b6d0,ebx
c0001256:	75 3d                	jne    c0001295 <dlmalloc+0x134>
c0001258:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000125c:	73 37                	jae    c0001295 <dlmalloc+0x134>
c000125e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001261:	89 fa                	mov    edx,edi
c0001263:	a3 dc b6 03 c0       	mov    ds:0xc003b6dc,eax
c0001268:	a3 e0 b6 03 c0       	mov    ds:0xc003b6e0,eax
c000126d:	a3 d0 b6 03 c0       	mov    ds:0xc003b6d0,eax
c0001272:	29 f2                	sub    edx,esi
c0001274:	c7 40 08 d4 b6 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b6d4
c000127b:	c7 40 0c d4 b6 03 c0 	mov    DWORD PTR [eax+0xc],0xc003b6d4
c0001282:	83 ce 01             	or     esi,0x1
c0001285:	89 d1                	mov    ecx,edx
c0001287:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000128a:	83 c9 01             	or     ecx,0x1
c000128d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001290:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001293:	eb 15                	jmp    c00012aa <dlmalloc+0x149>
c0001295:	a3 e0 b6 03 c0       	mov    ds:0xc003b6e0,eax
c000129a:	39 fe                	cmp    esi,edi
c000129c:	c7 40 08 d4 b6 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b6d4
c00012a3:	75 0d                	jne    c00012b2 <dlmalloc+0x151>
c00012a5:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012aa:	8d 43 08             	lea    eax,[ebx+0x8]
c00012ad:	e9 35 02 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c00012b2:	89 f8                	mov    eax,edi
c00012b4:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012ba:	77 19                	ja     c00012d5 <dlmalloc+0x174>
c00012bc:	c1 e8 03             	shr    eax,0x3
c00012bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00012c2:	83 c2 0d             	add    edx,0xd
c00012c5:	8d 2c 95 98 b6 03 c0 	lea    ebp,[edx*4-0x3ffc4968]
c00012cc:	8b 14 95 a0 b6 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4960]
c00012d3:	eb 46                	jmp    c000131b <dlmalloc+0x1ba>
c00012d5:	e8 c1 f9 ff ff       	call   c0000c9b <largebin_index>
c00012da:	8d 14 00             	lea    edx,[eax+eax*1]
c00012dd:	83 c2 0d             	add    edx,0xd
c00012e0:	8d 0c 95 a0 b6 03 c0 	lea    ecx,[edx*4-0x3ffc4960]
c00012e7:	8b 14 95 a0 b6 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4960]
c00012ee:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012f1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012f5:	89 d5                	mov    ebp,edx
c00012f7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012fb:	74 1e                	je     c000131b <dlmalloc+0x1ba>
c00012fd:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001300:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001303:	77 12                	ja     c0001317 <dlmalloc+0x1b6>
c0001305:	83 cf 01             	or     edi,0x1
c0001308:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000130b:	76 05                	jbe    c0001312 <dlmalloc+0x1b1>
c000130d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001310:	eb f6                	jmp    c0001308 <dlmalloc+0x1a7>
c0001312:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001315:	eb 04                	jmp    c000131b <dlmalloc+0x1ba>
c0001317:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000131b:	89 c7                	mov    edi,eax
c000131d:	88 c1                	mov    cl,al
c000131f:	c1 ff 05             	sar    edi,0x5
c0001322:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001326:	bf 01 00 00 00       	mov    edi,0x1
c000132b:	d3 e7                	shl    edi,cl
c000132d:	89 f8                	mov    eax,edi
c000132f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001333:	09 04 bd d4 b9 03 c0 	or     DWORD PTR [edi*4-0x3ffc462c],eax
c000133a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000133d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001340:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001343:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001346:	e9 db fe ff ff       	jmp    c0001226 <dlmalloc+0xc5>
c000134b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001351:	76 78                	jbe    c00013cb <dlmalloc+0x26a>
c0001353:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001357:	8d 04 c5 d4 b6 03 c0 	lea    eax,[eax*8-0x3ffc492c]
c000135e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001361:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001364:	39 ca                	cmp    edx,ecx
c0001366:	74 63                	je     c00013cb <dlmalloc+0x26a>
c0001368:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000136b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000136e:	83 e3 fc             	and    ebx,0xfffffffc
c0001371:	39 de                	cmp    esi,ebx
c0001373:	77 52                	ja     c00013c7 <dlmalloc+0x266>
c0001375:	89 df                	mov    edi,ebx
c0001377:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000137a:	29 f7                	sub    edi,esi
c000137c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000137f:	01 d3                	add    ebx,edx
c0001381:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001384:	83 ff 0f             	cmp    edi,0xf
c0001387:	8d 42 08             	lea    eax,[edx+0x8]
c000138a:	77 09                	ja     c0001395 <dlmalloc+0x234>
c000138c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001390:	e9 52 01 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001395:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001398:	83 ce 01             	or     esi,0x1
c000139b:	89 0d dc b6 03 c0    	mov    DWORD PTR ds:0xc003b6dc,ecx
c00013a1:	89 0d e0 b6 03 c0    	mov    DWORD PTR ds:0xc003b6e0,ecx
c00013a7:	c7 41 08 d4 b6 03 c0 	mov    DWORD PTR [ecx+0x8],0xc003b6d4
c00013ae:	c7 41 0c d4 b6 03 c0 	mov    DWORD PTR [ecx+0xc],0xc003b6d4
c00013b5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013b8:	89 fa                	mov    edx,edi
c00013ba:	83 ca 01             	or     edx,0x1
c00013bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013c0:	89 3b                	mov    DWORD PTR [ebx],edi
c00013c2:	e9 20 01 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c00013c7:	89 c2                	mov    edx,eax
c00013c9:	eb 99                	jmp    c0001364 <dlmalloc+0x203>
c00013cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013cf:	b8 01 00 00 00       	mov    eax,0x1
c00013d4:	41                   	inc    ecx
c00013d5:	89 cb                	mov    ebx,ecx
c00013d7:	8d 14 cd cc b6 03 c0 	lea    edx,[ecx*8-0x3ffc4934]
c00013de:	c1 eb 05             	shr    ebx,0x5
c00013e1:	d3 e0                	shl    eax,cl
c00013e3:	8b 3c 9d d4 b9 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc462c]
c00013ea:	39 f8                	cmp    eax,edi
c00013ec:	77 04                	ja     c00013f2 <dlmalloc+0x291>
c00013ee:	85 c0                	test   eax,eax
c00013f0:	75 26                	jne    c0001418 <dlmalloc+0x2b7>
c00013f2:	43                   	inc    ebx
c00013f3:	83 fb 02             	cmp    ebx,0x2
c00013f6:	0f 87 a6 00 00 00    	ja     c00014a2 <dlmalloc+0x341>
c00013fc:	8b 3c 9d d4 b9 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc462c]
c0001403:	85 ff                	test   edi,edi
c0001405:	74 eb                	je     c00013f2 <dlmalloc+0x291>
c0001407:	89 d8                	mov    eax,ebx
c0001409:	c1 e0 06             	shl    eax,0x6
c000140c:	8d 14 85 cc b6 03 c0 	lea    edx,[eax*4-0x3ffc4934]
c0001413:	b8 01 00 00 00       	mov    eax,0x1
c0001418:	85 f8                	test   eax,edi
c000141a:	75 07                	jne    c0001423 <dlmalloc+0x2c2>
c000141c:	83 c2 08             	add    edx,0x8
c000141f:	01 c0                	add    eax,eax
c0001421:	eb f5                	jmp    c0001418 <dlmalloc+0x2b7>
c0001423:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001426:	39 ca                	cmp    edx,ecx
c0001428:	75 14                	jne    c000143e <dlmalloc+0x2dd>
c000142a:	89 c1                	mov    ecx,eax
c000142c:	83 c2 08             	add    edx,0x8
c000142f:	f7 d1                	not    ecx
c0001431:	01 c0                	add    eax,eax
c0001433:	21 cf                	and    edi,ecx
c0001435:	89 3c 9d d4 b9 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc462c],edi
c000143c:	eb ac                	jmp    c00013ea <dlmalloc+0x289>
c000143e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001441:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001444:	83 e0 fc             	and    eax,0xfffffffc
c0001447:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000144a:	89 c3                	mov    ebx,eax
c000144c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000144f:	29 f3                	sub    ebx,esi
c0001451:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001454:	83 fb 0f             	cmp    ebx,0xf
c0001457:	8d 41 08             	lea    eax,[ecx+0x8]
c000145a:	77 09                	ja     c0001465 <dlmalloc+0x304>
c000145c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001460:	e9 82 00 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001465:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001468:	81 fe ff 00 00 00    	cmp    esi,0xff
c000146e:	89 3d dc b6 03 c0    	mov    DWORD PTR ds:0xc003b6dc,edi
c0001474:	89 3d e0 b6 03 c0    	mov    DWORD PTR ds:0xc003b6e0,edi
c000147a:	c7 47 08 d4 b6 03 c0 	mov    DWORD PTR [edi+0x8],0xc003b6d4
c0001481:	c7 47 0c d4 b6 03 c0 	mov    DWORD PTR [edi+0xc],0xc003b6d4
c0001488:	77 06                	ja     c0001490 <dlmalloc+0x32f>
c000148a:	89 3d d0 b6 03 c0    	mov    DWORD PTR ds:0xc003b6d0,edi
c0001490:	83 ce 01             	or     esi,0x1
c0001493:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001496:	89 d9                	mov    ecx,ebx
c0001498:	83 c9 01             	or     ecx,0x1
c000149b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000149e:	89 1a                	mov    DWORD PTR [edx],ebx
c00014a0:	eb 45                	jmp    c00014e7 <dlmalloc+0x386>
c00014a2:	a1 cc b6 03 c0       	mov    eax,ds:0xc003b6cc
c00014a7:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014ad:	83 e2 fc             	and    edx,0xfffffffc
c00014b0:	39 d1                	cmp    ecx,edx
c00014b2:	77 1e                	ja     c00014d2 <dlmalloc+0x371>
c00014b4:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014b7:	89 f3                	mov    ebx,esi
c00014b9:	89 0d cc b6 03 c0    	mov    DWORD PTR ds:0xc003b6cc,ecx
c00014bf:	83 cb 01             	or     ebx,0x1
c00014c2:	29 f2                	sub    edx,esi
c00014c4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c7:	83 ca 01             	or     edx,0x1
c00014ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014cd:	e9 2d fd ff ff       	jmp    c00011ff <dlmalloc+0x9e>
c00014d2:	83 c4 1c             	add    esp,0x1c
c00014d5:	89 f0                	mov    eax,esi
c00014d7:	5b                   	pop    ebx
c00014d8:	ba a0 b6 03 c0       	mov    edx,0xc003b6a0
c00014dd:	5e                   	pop    esi
c00014de:	5f                   	pop    edi
c00014df:	5d                   	pop    ebp
c00014e0:	e9 16 fa ff ff       	jmp    c0000efb <sYSMALLOc>
c00014e5:	31 c0                	xor    eax,eax
c00014e7:	83 c4 1c             	add    esp,0x1c
c00014ea:	5b                   	pop    ebx
c00014eb:	5e                   	pop    esi
c00014ec:	5f                   	pop    edi
c00014ed:	5d                   	pop    ebp
c00014ee:	c3                   	ret    

c00014ef <iALLOc>:
c00014ef:	55                   	push   ebp
c00014f0:	89 c5                	mov    ebp,eax
c00014f2:	57                   	push   edi
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	83 ec 2c             	sub    esp,0x2c
c00014f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014fc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001500:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001504:	83 3d a0 b6 03 c0 00 	cmp    DWORD PTR ds:0xc003b6a0,0x0
c000150b:	75 12                	jne    c000151f <iALLOc+0x30>
c000150d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001511:	b8 a0 b6 03 c0       	mov    eax,0xc003b6a0
c0001516:	e8 04 f8 ff ff       	call   c0000d1f <malloc_consolidate>
c000151b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000151f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001524:	74 12                	je     c0001538 <iALLOc+0x49>
c0001526:	85 ed                	test   ebp,ebp
c0001528:	0f 84 64 01 00 00    	je     c0001692 <iALLOc+0x1a3>
c000152e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001536:	eb 33                	jmp    c000156b <iALLOc+0x7c>
c0001538:	85 ed                	test   ebp,ebp
c000153a:	75 14                	jne    c0001550 <iALLOc+0x61>
c000153c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001544:	83 c4 2c             	add    esp,0x2c
c0001547:	5b                   	pop    ebx
c0001548:	5e                   	pop    esi
c0001549:	5f                   	pop    edi
c000154a:	5d                   	pop    ebp
c000154b:	e9 11 fc ff ff       	jmp    c0001161 <dlmalloc>
c0001550:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001557:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000155f:	83 f8 0f             	cmp    eax,0xf
c0001562:	76 07                	jbe    c000156b <iALLOc+0x7c>
c0001564:	83 e0 f8             	and    eax,0xfffffff8
c0001567:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000156b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001570:	75 09                	jne    c000157b <iALLOc+0x8c>
c0001572:	89 d0                	mov    eax,edx
c0001574:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001577:	31 f6                	xor    esi,esi
c0001579:	eb 3b                	jmp    c00015b6 <iALLOc+0xc7>
c000157b:	8b 02                	mov    eax,DWORD PTR [edx]
c000157d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001585:	83 c0 0b             	add    eax,0xb
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 07                	jbe    c0001594 <iALLOc+0xa5>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001594:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001598:	0f af f5             	imul   esi,ebp
c000159b:	eb 25                	jmp    c00015c2 <iALLOc+0xd3>
c000159d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000159f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015a2:	bb 10 00 00 00       	mov    ebx,0x10
c00015a7:	83 f9 0f             	cmp    ecx,0xf
c00015aa:	76 05                	jbe    c00015b1 <iALLOc+0xc2>
c00015ac:	83 e1 f8             	and    ecx,0xfffffff8
c00015af:	89 cb                	mov    ebx,ecx
c00015b1:	01 de                	add    esi,ebx
c00015b3:	83 c0 04             	add    eax,0x4
c00015b6:	39 c7                	cmp    edi,eax
c00015b8:	75 e3                	jne    c000159d <iALLOc+0xae>
c00015ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015c6:	8b 1d f4 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9f4
c00015cc:	83 ec 0c             	sub    esp,0xc
c00015cf:	c7 05 f4 b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b9f4,0x0
c00015d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015dd:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015e1:	50                   	push   eax
c00015e2:	e8 7a fb ff ff       	call   c0001161 <dlmalloc>
c00015e7:	83 c4 10             	add    esp,0x10
c00015ea:	89 1d f4 b9 03 c0    	mov    DWORD PTR ds:0xc003b9f4,ebx
c00015f0:	85 c0                	test   eax,eax
c00015f2:	0f 84 92 00 00 00    	je     c000168a <iALLOc+0x19b>
c00015f8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015fb:	8d 78 f8             	lea    edi,[eax-0x8]
c00015fe:	83 e3 fc             	and    ebx,0xfffffffc
c0001601:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001605:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000160a:	74 1e                	je     c000162a <iALLOc+0x13b>
c000160c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001610:	89 d9                	mov    ecx,ebx
c0001612:	52                   	push   edx
c0001613:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001617:	83 e9 04             	sub    ecx,0x4
c000161a:	51                   	push   ecx
c000161b:	6a 00                	push   0x0
c000161d:	50                   	push   eax
c000161e:	e8 b5 f0 ff ff       	call   c00006d8 <memset>
c0001623:	83 c4 10             	add    esp,0x10
c0001626:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000162a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000162f:	75 14                	jne    c0001645 <iALLOc+0x156>
c0001631:	8d 04 37             	lea    eax,[edi+esi*1]
c0001634:	29 f3                	sub    ebx,esi
c0001636:	8d 48 08             	lea    ecx,[eax+0x8]
c0001639:	83 cb 01             	or     ebx,0x1
c000163c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001640:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001643:	89 f3                	mov    ebx,esi
c0001645:	31 c0                	xor    eax,eax
c0001647:	4d                   	dec    ebp
c0001648:	8d 4f 08             	lea    ecx,[edi+0x8]
c000164b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000164f:	39 c5                	cmp    ebp,eax
c0001651:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001654:	74 2c                	je     c0001682 <iALLOc+0x193>
c0001656:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000165a:	85 c9                	test   ecx,ecx
c000165c:	75 15                	jne    c0001673 <iALLOc+0x184>
c000165e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001661:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001664:	b9 10 00 00 00       	mov    ecx,0x10
c0001669:	83 fe 0f             	cmp    esi,0xf
c000166c:	76 05                	jbe    c0001673 <iALLOc+0x184>
c000166e:	83 e6 f8             	and    esi,0xfffffff8
c0001671:	89 f1                	mov    ecx,esi
c0001673:	89 ce                	mov    esi,ecx
c0001675:	29 cb                	sub    ebx,ecx
c0001677:	83 ce 01             	or     esi,0x1
c000167a:	40                   	inc    eax
c000167b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000167e:	01 cf                	add    edi,ecx
c0001680:	eb c6                	jmp    c0001648 <iALLOc+0x159>
c0001682:	83 cb 01             	or     ebx,0x1
c0001685:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001688:	eb 08                	jmp    c0001692 <iALLOc+0x1a3>
c000168a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001696:	83 c4 2c             	add    esp,0x2c
c0001699:	5b                   	pop    ebx
c000169a:	5e                   	pop    esi
c000169b:	5f                   	pop    edi
c000169c:	5d                   	pop    ebp
c000169d:	c3                   	ret    

c000169e <dlrealloc>:
c000169e:	55                   	push   ebp
c000169f:	57                   	push   edi
c00016a0:	56                   	push   esi
c00016a1:	53                   	push   ebx
c00016a2:	83 ec 1c             	sub    esp,0x1c
c00016a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016ad:	85 db                	test   ebx,ebx
c00016af:	75 10                	jne    c00016c1 <dlrealloc+0x23>
c00016b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016b5:	83 c4 1c             	add    esp,0x1c
c00016b8:	5b                   	pop    ebx
c00016b9:	5e                   	pop    esi
c00016ba:	5f                   	pop    edi
c00016bb:	5d                   	pop    ebp
c00016bc:	e9 a0 fa ff ff       	jmp    c0001161 <dlmalloc>
c00016c1:	83 f8 df             	cmp    eax,0xffffffdf
c00016c4:	76 07                	jbe    c00016cd <dlrealloc+0x2f>
c00016c6:	31 db                	xor    ebx,ebx
c00016c8:	e9 7c 01 00 00       	jmp    c0001849 <dlrealloc+0x1ab>
c00016cd:	83 c0 0b             	add    eax,0xb
c00016d0:	bf 10 00 00 00       	mov    edi,0x10
c00016d5:	83 f8 0f             	cmp    eax,0xf
c00016d8:	76 05                	jbe    c00016df <dlrealloc+0x41>
c00016da:	83 e0 f8             	and    eax,0xfffffff8
c00016dd:	89 c7                	mov    edi,eax
c00016df:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016e2:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016e5:	89 c6                	mov    esi,eax
c00016e7:	83 e6 fc             	and    esi,0xfffffffc
c00016ea:	a8 02                	test   al,0x2
c00016ec:	75 d8                	jne    c00016c6 <dlrealloc+0x28>
c00016ee:	39 f7                	cmp    edi,esi
c00016f0:	0f 86 15 01 00 00    	jbe    c000180b <dlrealloc+0x16d>
c00016f6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016fa:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016fd:	39 15 cc b6 03 c0    	cmp    DWORD PTR ds:0xc003b6cc,edx
c0001703:	75 33                	jne    c0001738 <dlrealloc+0x9a>
c0001705:	83 e1 fc             	and    ecx,0xfffffffc
c0001708:	01 f1                	add    ecx,esi
c000170a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000170e:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001711:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001715:	77 49                	ja     c0001760 <dlrealloc+0xc2>
c0001717:	01 fd                	add    ebp,edi
c0001719:	83 e0 01             	and    eax,0x1
c000171c:	09 f8                	or     eax,edi
c000171e:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001721:	89 2d cc b6 03 c0    	mov    DWORD PTR ds:0xc003b6cc,ebp
c0001727:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000172b:	29 f8                	sub    eax,edi
c000172d:	83 c8 01             	or     eax,0x1
c0001730:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001733:	e9 11 01 00 00       	jmp    c0001849 <dlrealloc+0x1ab>
c0001738:	89 c8                	mov    eax,ecx
c000173a:	83 e0 fe             	and    eax,0xfffffffe
c000173d:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001742:	75 1c                	jne    c0001760 <dlrealloc+0xc2>
c0001744:	83 e1 fc             	and    ecx,0xfffffffc
c0001747:	01 f1                	add    ecx,esi
c0001749:	39 cf                	cmp    edi,ecx
c000174b:	77 13                	ja     c0001760 <dlrealloc+0xc2>
c000174d:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001750:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001753:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001756:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001759:	89 ce                	mov    esi,ecx
c000175b:	e9 ab 00 00 00       	jmp    c000180b <dlrealloc+0x16d>
c0001760:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001764:	8d 47 f9             	lea    eax,[edi-0x7]
c0001767:	83 ec 0c             	sub    esp,0xc
c000176a:	50                   	push   eax
c000176b:	e8 f1 f9 ff ff       	call   c0001161 <dlmalloc>
c0001770:	83 c4 10             	add    esp,0x10
c0001773:	89 c1                	mov    ecx,eax
c0001775:	85 c0                	test   eax,eax
c0001777:	0f 84 49 ff ff ff    	je     c00016c6 <dlrealloc+0x28>
c000177d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001780:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001784:	39 c2                	cmp    edx,eax
c0001786:	75 0a                	jne    c0001792 <dlrealloc+0xf4>
c0001788:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000178b:	83 e0 fc             	and    eax,0xfffffffc
c000178e:	01 c6                	add    esi,eax
c0001790:	eb 79                	jmp    c000180b <dlrealloc+0x16d>
c0001792:	83 ee 04             	sub    esi,0x4
c0001795:	83 fe 27             	cmp    esi,0x27
c0001798:	76 16                	jbe    c00017b0 <dlrealloc+0x112>
c000179a:	50                   	push   eax
c000179b:	56                   	push   esi
c000179c:	53                   	push   ebx
c000179d:	51                   	push   ecx
c000179e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00017a2:	e8 ba ee ff ff       	call   c0000661 <memcpy>
c00017a7:	83 c4 10             	add    esp,0x10
c00017aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017ae:	eb 43                	jmp    c00017f3 <dlrealloc+0x155>
c00017b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00017b2:	83 fe 13             	cmp    esi,0x13
c00017b5:	89 01                	mov    DWORD PTR [ecx],eax
c00017b7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00017ba:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00017bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00017c0:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00017c3:	76 2e                	jbe    c00017f3 <dlrealloc+0x155>
c00017c5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00017c8:	83 fe 1b             	cmp    esi,0x1b
c00017cb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00017ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00017d1:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00017d4:	76 1d                	jbe    c00017f3 <dlrealloc+0x155>
c00017d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00017d9:	83 fe 23             	cmp    esi,0x23
c00017dc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00017df:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017e2:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017e5:	76 0c                	jbe    c00017f3 <dlrealloc+0x155>
c00017e7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017ea:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017f0:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017f7:	83 ec 0c             	sub    esp,0xc
c00017fa:	53                   	push   ebx
c00017fb:	e8 06 f6 ff ff       	call   c0000e06 <dlfree>
c0001800:	83 c4 10             	add    esp,0x10
c0001803:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001807:	89 cb                	mov    ebx,ecx
c0001809:	eb 3e                	jmp    c0001849 <dlrealloc+0x1ab>
c000180b:	89 f2                	mov    edx,esi
c000180d:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001810:	29 fa                	sub    edx,edi
c0001812:	83 e1 01             	and    ecx,0x1
c0001815:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001819:	83 fa 0f             	cmp    edx,0xf
c000181c:	77 0b                	ja     c0001829 <dlrealloc+0x18b>
c000181e:	09 ce                	or     esi,ecx
c0001820:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001823:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001827:	eb 20                	jmp    c0001849 <dlrealloc+0x1ab>
c0001829:	01 fd                	add    ebp,edi
c000182b:	83 ec 0c             	sub    esp,0xc
c000182e:	09 cf                	or     edi,ecx
c0001830:	83 ca 01             	or     edx,0x1
c0001833:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001836:	83 c5 08             	add    ebp,0x8
c0001839:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000183c:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001840:	55                   	push   ebp
c0001841:	e8 c0 f5 ff ff       	call   c0000e06 <dlfree>
c0001846:	83 c4 10             	add    esp,0x10
c0001849:	83 c4 1c             	add    esp,0x1c
c000184c:	89 d8                	mov    eax,ebx
c000184e:	5b                   	pop    ebx
c000184f:	5e                   	pop    esi
c0001850:	5f                   	pop    edi
c0001851:	5d                   	pop    ebp
c0001852:	c3                   	ret    

c0001853 <dlmemalign>:
c0001853:	55                   	push   ebp
c0001854:	57                   	push   edi
c0001855:	56                   	push   esi
c0001856:	53                   	push   ebx
c0001857:	83 ec 0c             	sub    esp,0xc
c000185a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000185e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001862:	83 fa 08             	cmp    edx,0x8
c0001865:	77 10                	ja     c0001877 <dlmemalign+0x24>
c0001867:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000186b:	83 c4 0c             	add    esp,0xc
c000186e:	5b                   	pop    ebx
c000186f:	5e                   	pop    esi
c0001870:	5f                   	pop    edi
c0001871:	5d                   	pop    ebp
c0001872:	e9 ea f8 ff ff       	jmp    c0001161 <dlmalloc>
c0001877:	bf 10 00 00 00       	mov    edi,0x10
c000187c:	83 fa 0f             	cmp    edx,0xf
c000187f:	76 13                	jbe    c0001894 <dlmemalign+0x41>
c0001881:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001884:	85 d1                	test   ecx,edx
c0001886:	75 04                	jne    c000188c <dlmemalign+0x39>
c0001888:	89 d7                	mov    edi,edx
c000188a:	eb 08                	jmp    c0001894 <dlmemalign+0x41>
c000188c:	39 d7                	cmp    edi,edx
c000188e:	73 04                	jae    c0001894 <dlmemalign+0x41>
c0001890:	01 ff                	add    edi,edi
c0001892:	eb f8                	jmp    c000188c <dlmemalign+0x39>
c0001894:	83 f8 df             	cmp    eax,0xffffffdf
c0001897:	76 07                	jbe    c00018a0 <dlmemalign+0x4d>
c0001899:	31 c0                	xor    eax,eax
c000189b:	e9 ce 00 00 00       	jmp    c000196e <dlmemalign+0x11b>
c00018a0:	83 c0 0b             	add    eax,0xb
c00018a3:	bd 10 00 00 00       	mov    ebp,0x10
c00018a8:	83 f8 0f             	cmp    eax,0xf
c00018ab:	76 05                	jbe    c00018b2 <dlmemalign+0x5f>
c00018ad:	83 e0 f8             	and    eax,0xfffffff8
c00018b0:	89 c5                	mov    ebp,eax
c00018b2:	83 ec 0c             	sub    esp,0xc
c00018b5:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018b9:	50                   	push   eax
c00018ba:	e8 a2 f8 ff ff       	call   c0001161 <dlmalloc>
c00018bf:	83 c4 10             	add    esp,0x10
c00018c2:	89 c1                	mov    ecx,eax
c00018c4:	85 c0                	test   eax,eax
c00018c6:	74 d1                	je     c0001899 <dlmemalign+0x46>
c00018c8:	31 d2                	xor    edx,edx
c00018ca:	8d 70 f8             	lea    esi,[eax-0x8]
c00018cd:	f7 f7                	div    edi
c00018cf:	85 d2                	test   edx,edx
c00018d1:	74 62                	je     c0001935 <dlmemalign+0xe2>
c00018d3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018d7:	89 f8                	mov    eax,edi
c00018d9:	f7 d8                	neg    eax
c00018db:	21 c3                	and    ebx,eax
c00018dd:	83 eb 08             	sub    ebx,0x8
c00018e0:	89 d8                	mov    eax,ebx
c00018e2:	29 f0                	sub    eax,esi
c00018e4:	83 f8 0f             	cmp    eax,0xf
c00018e7:	77 02                	ja     c00018eb <dlmemalign+0x98>
c00018e9:	01 fb                	add    ebx,edi
c00018eb:	89 d8                	mov    eax,ebx
c00018ed:	29 f0                	sub    eax,esi
c00018ef:	89 c6                	mov    esi,eax
c00018f1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018f4:	89 c2                	mov    edx,eax
c00018f6:	83 e2 fc             	and    edx,0xfffffffc
c00018f9:	29 f2                	sub    edx,esi
c00018fb:	a8 02                	test   al,0x2
c00018fd:	74 10                	je     c000190f <dlmemalign+0xbc>
c00018ff:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001902:	83 ca 02             	or     edx,0x2
c0001905:	8d 43 08             	lea    eax,[ebx+0x8]
c0001908:	89 33                	mov    DWORD PTR [ebx],esi
c000190a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000190d:	eb 5f                	jmp    c000196e <dlmemalign+0x11b>
c000190f:	83 ec 0c             	sub    esp,0xc
c0001912:	89 d0                	mov    eax,edx
c0001914:	83 c8 01             	or     eax,0x1
c0001917:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000191a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000191f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001922:	83 e0 01             	and    eax,0x1
c0001925:	09 f0                	or     eax,esi
c0001927:	89 de                	mov    esi,ebx
c0001929:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000192c:	51                   	push   ecx
c000192d:	e8 d4 f4 ff ff       	call   c0000e06 <dlfree>
c0001932:	83 c4 10             	add    esp,0x10
c0001935:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001938:	a8 02                	test   al,0x2
c000193a:	75 2f                	jne    c000196b <dlmemalign+0x118>
c000193c:	83 e0 fc             	and    eax,0xfffffffc
c000193f:	8d 55 10             	lea    edx,[ebp+0x10]
c0001942:	39 c2                	cmp    edx,eax
c0001944:	73 25                	jae    c000196b <dlmemalign+0x118>
c0001946:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001949:	83 ec 0c             	sub    esp,0xc
c000194c:	29 e8                	sub    eax,ebp
c000194e:	83 c2 08             	add    edx,0x8
c0001951:	83 c8 01             	or     eax,0x1
c0001954:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001957:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000195a:	83 e0 01             	and    eax,0x1
c000195d:	09 c5                	or     ebp,eax
c000195f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001962:	52                   	push   edx
c0001963:	e8 9e f4 ff ff       	call   c0000e06 <dlfree>
c0001968:	83 c4 10             	add    esp,0x10
c000196b:	8d 46 08             	lea    eax,[esi+0x8]
c000196e:	83 c4 0c             	add    esp,0xc
c0001971:	5b                   	pop    ebx
c0001972:	5e                   	pop    esi
c0001973:	5f                   	pop    edi
c0001974:	5d                   	pop    ebp
c0001975:	c3                   	ret    

c0001976 <dlcalloc>:
c0001976:	53                   	push   ebx
c0001977:	83 ec 14             	sub    esp,0x14
c000197a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000197e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001983:	50                   	push   eax
c0001984:	e8 d8 f7 ff ff       	call   c0001161 <dlmalloc>
c0001989:	83 c4 10             	add    esp,0x10
c000198c:	89 c3                	mov    ebx,eax
c000198e:	85 c0                	test   eax,eax
c0001990:	74 77                	je     c0001a09 <dlcalloc+0x93>
c0001992:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001995:	89 d0                	mov    eax,edx
c0001997:	83 e0 fc             	and    eax,0xfffffffc
c000199a:	80 e2 02             	and    dl,0x2
c000199d:	75 5a                	jne    c00019f9 <dlcalloc+0x83>
c000199f:	83 e8 04             	sub    eax,0x4
c00019a2:	83 f8 27             	cmp    eax,0x27
c00019a5:	76 03                	jbe    c00019aa <dlcalloc+0x34>
c00019a7:	51                   	push   ecx
c00019a8:	eb 53                	jmp    c00019fd <dlcalloc+0x87>
c00019aa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019b0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019b7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019be:	83 f8 13             	cmp    eax,0x13
c00019c1:	76 46                	jbe    c0001a09 <dlcalloc+0x93>
c00019c3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019ca:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019d1:	83 f8 1b             	cmp    eax,0x1b
c00019d4:	76 33                	jbe    c0001a09 <dlcalloc+0x93>
c00019d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019dd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019e4:	83 f8 23             	cmp    eax,0x23
c00019e7:	76 20                	jbe    c0001a09 <dlcalloc+0x93>
c00019e9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019f0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019f7:	eb 10                	jmp    c0001a09 <dlcalloc+0x93>
c00019f9:	83 e8 08             	sub    eax,0x8
c00019fc:	52                   	push   edx
c00019fd:	50                   	push   eax
c00019fe:	6a 00                	push   0x0
c0001a00:	53                   	push   ebx
c0001a01:	e8 d2 ec ff ff       	call   c00006d8 <memset>
c0001a06:	83 c4 10             	add    esp,0x10
c0001a09:	89 d8                	mov    eax,ebx
c0001a0b:	83 c4 08             	add    esp,0x8
c0001a0e:	5b                   	pop    ebx
c0001a0f:	c3                   	ret    

c0001a10 <dlcfree>:
c0001a10:	e9 f1 f3 ff ff       	jmp    c0000e06 <dlfree>

c0001a15 <dlindependent_calloc>:
c0001a15:	83 ec 28             	sub    esp,0x28
c0001a18:	b9 03 00 00 00       	mov    ecx,0x3
c0001a1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a31:	e8 b9 fa ff ff       	call   c00014ef <iALLOc>
c0001a36:	83 c4 2c             	add    esp,0x2c
c0001a39:	c3                   	ret    

c0001a3a <dlindependent_comalloc>:
c0001a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a42:	31 c9                	xor    ecx,ecx
c0001a44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a4c:	e9 9e fa ff ff       	jmp    c00014ef <iALLOc>

c0001a51 <dlvalloc>:
c0001a51:	83 ec 0c             	sub    esp,0xc
c0001a54:	83 3d a0 b6 03 c0 00 	cmp    DWORD PTR ds:0xc003b6a0,0x0
c0001a5b:	75 0a                	jne    c0001a67 <dlvalloc+0x16>
c0001a5d:	b8 a0 b6 03 c0       	mov    eax,0xc003b6a0
c0001a62:	e8 b8 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001a67:	50                   	push   eax
c0001a68:	50                   	push   eax
c0001a69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a6d:	ff 35 fc b9 03 c0    	push   DWORD PTR ds:0xc003b9fc
c0001a73:	e8 db fd ff ff       	call   c0001853 <dlmemalign>
c0001a78:	83 c4 1c             	add    esp,0x1c
c0001a7b:	c3                   	ret    

c0001a7c <dlpvalloc>:
c0001a7c:	83 ec 0c             	sub    esp,0xc
c0001a7f:	83 3d a0 b6 03 c0 00 	cmp    DWORD PTR ds:0xc003b6a0,0x0
c0001a86:	75 0a                	jne    c0001a92 <dlpvalloc+0x16>
c0001a88:	b8 a0 b6 03 c0       	mov    eax,0xc003b6a0
c0001a8d:	e8 8d f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001a92:	a1 fc b9 03 c0       	mov    eax,ds:0xc003b9fc
c0001a97:	89 c1                	mov    ecx,eax
c0001a99:	52                   	push   edx
c0001a9a:	f7 d9                	neg    ecx
c0001a9c:	52                   	push   edx
c0001a9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001aa1:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001aa5:	21 ca                	and    edx,ecx
c0001aa7:	52                   	push   edx
c0001aa8:	50                   	push   eax
c0001aa9:	e8 a5 fd ff ff       	call   c0001853 <dlmemalign>
c0001aae:	83 c4 1c             	add    esp,0x1c
c0001ab1:	c3                   	ret    

c0001ab2 <dlmalloc_trim>:
c0001ab2:	b8 a0 b6 03 c0       	mov    eax,0xc003b6a0
c0001ab7:	e8 63 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001abc:	31 c0                	xor    eax,eax
c0001abe:	c3                   	ret    

c0001abf <dlmalloc_usable_size>:
c0001abf:	53                   	push   ebx
c0001ac0:	31 c0                	xor    eax,eax
c0001ac2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001ac6:	85 c9                	test   ecx,ecx
c0001ac8:	74 24                	je     c0001aee <dlmalloc_usable_size+0x2f>
c0001aca:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001acd:	f6 c2 02             	test   dl,0x2
c0001ad0:	74 08                	je     c0001ada <dlmalloc_usable_size+0x1b>
c0001ad2:	83 e2 fc             	and    edx,0xfffffffc
c0001ad5:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ad8:	eb 14                	jmp    c0001aee <dlmalloc_usable_size+0x2f>
c0001ada:	89 d3                	mov    ebx,edx
c0001adc:	31 c0                	xor    eax,eax
c0001ade:	83 e3 fe             	and    ebx,0xfffffffe
c0001ae1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ae6:	74 06                	je     c0001aee <dlmalloc_usable_size+0x2f>
c0001ae8:	83 e2 fc             	and    edx,0xfffffffc
c0001aeb:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aee:	5b                   	pop    ebx
c0001aef:	c3                   	ret    

c0001af0 <dlmallinfo>:
c0001af0:	55                   	push   ebp
c0001af1:	57                   	push   edi
c0001af2:	56                   	push   esi
c0001af3:	53                   	push   ebx
c0001af4:	83 ec 08             	sub    esp,0x8
c0001af7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001afb:	83 3d cc b6 03 c0 00 	cmp    DWORD PTR ds:0xc003b6cc,0x0
c0001b02:	75 0a                	jne    c0001b0e <dlmallinfo+0x1e>
c0001b04:	b8 a0 b6 03 c0       	mov    eax,0xc003b6a0
c0001b09:	e8 11 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001b0e:	a1 cc b6 03 c0       	mov    eax,ds:0xc003b6cc
c0001b13:	31 ed                	xor    ebp,ebp
c0001b15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b18:	31 c9                	xor    ecx,ecx
c0001b1a:	83 e0 fc             	and    eax,0xfffffffc
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	8b 14 85 a4 b6 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc495c]
c0001b2a:	85 d2                	test   edx,edx
c0001b2c:	74 0e                	je     c0001b3c <dlmallinfo+0x4c>
c0001b2e:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b31:	45                   	inc    ebp
c0001b32:	83 e6 fc             	and    esi,0xfffffffc
c0001b35:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b38:	01 f1                	add    ecx,esi
c0001b3a:	eb ee                	jmp    c0001b2a <dlmallinfo+0x3a>
c0001b3c:	40                   	inc    eax
c0001b3d:	83 f8 0a             	cmp    eax,0xa
c0001b40:	75 e1                	jne    c0001b23 <dlmallinfo+0x33>
c0001b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b46:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b4d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b50:	b8 d4 b6 03 c0       	mov    eax,0xc003b6d4
c0001b55:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b58:	39 f0                	cmp    eax,esi
c0001b5a:	74 10                	je     c0001b6c <dlmallinfo+0x7c>
c0001b5c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b5f:	ff 04 24             	inc    DWORD PTR [esp]
c0001b62:	83 e7 fc             	and    edi,0xfffffffc
c0001b65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b68:	01 fa                	add    edx,edi
c0001b6a:	eb ec                	jmp    c0001b58 <dlmallinfo+0x68>
c0001b6c:	83 c0 08             	add    eax,0x8
c0001b6f:	3d cc b9 03 c0       	cmp    eax,0xc003b9cc
c0001b74:	75 df                	jne    c0001b55 <dlmallinfo+0x65>
c0001b76:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b79:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b7c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b7f:	a1 08 ba 03 c0       	mov    eax,ds:0xc003ba08
c0001b84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b87:	89 03                	mov    DWORD PTR [ebx],eax
c0001b89:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b8c:	8b 35 f0 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b9f0
c0001b92:	29 d0                	sub    eax,edx
c0001b94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b97:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b9a:	8b 35 04 ba 03 c0    	mov    esi,DWORD PTR ds:0xc003ba04
c0001ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ba4:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ba7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001baa:	8b 35 14 ba 03 c0    	mov    esi,DWORD PTR ds:0xc003ba14
c0001bb0:	89 d8                	mov    eax,ebx
c0001bb2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001bb5:	83 c4 08             	add    esp,0x8
c0001bb8:	5b                   	pop    ebx
c0001bb9:	5e                   	pop    esi
c0001bba:	5f                   	pop    edi
c0001bbb:	5d                   	pop    ebp
c0001bbc:	c2 04 00             	ret    0x4

c0001bbf <dlmalloc_stats>:
c0001bbf:	83 ec 30             	sub    esp,0x30
c0001bc2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bc6:	50                   	push   eax
c0001bc7:	e8 24 ff ff ff       	call   c0001af0 <dlmallinfo>
c0001bcc:	83 c4 30             	add    esp,0x30
c0001bcf:	c3                   	ret    

c0001bd0 <dlmallopt>:
c0001bd0:	56                   	push   esi
c0001bd1:	b8 a0 b6 03 c0       	mov    eax,0xc003b6a0
c0001bd6:	53                   	push   ebx
c0001bd7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bdf:	e8 3b f1 ff ff       	call   c0000d1f <malloc_consolidate>
c0001be4:	8d 46 04             	lea    eax,[esi+0x4]
c0001be7:	83 f8 05             	cmp    eax,0x5
c0001bea:	77 67                	ja     c0001c53 <dlmallopt+0x83>
c0001bec:	ff 24 85 a4 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe095c]
c0001bf3:	83 fb 50             	cmp    ebx,0x50
c0001bf6:	77 5b                	ja     c0001c53 <dlmallopt+0x83>
c0001bf8:	ba 08 00 00 00       	mov    edx,0x8
c0001bfd:	85 db                	test   ebx,ebx
c0001bff:	74 12                	je     c0001c13 <dlmallopt+0x43>
c0001c01:	83 c3 0b             	add    ebx,0xb
c0001c04:	ba 10 00 00 00       	mov    edx,0x10
c0001c09:	83 fb 0f             	cmp    ebx,0xf
c0001c0c:	76 05                	jbe    c0001c13 <dlmallopt+0x43>
c0001c0e:	89 da                	mov    edx,ebx
c0001c10:	83 e2 f8             	and    edx,0xfffffff8
c0001c13:	a1 a0 b6 03 c0       	mov    eax,ds:0xc003b6a0
c0001c18:	83 e0 03             	and    eax,0x3
c0001c1b:	09 d0                	or     eax,edx
c0001c1d:	a3 a0 b6 03 c0       	mov    ds:0xc003b6a0,eax
c0001c22:	eb 31                	jmp    c0001c55 <dlmallopt+0x85>
c0001c24:	89 1d e4 b9 03 c0    	mov    DWORD PTR ds:0xc003b9e4,ebx
c0001c2a:	eb 06                	jmp    c0001c32 <dlmallopt+0x62>
c0001c2c:	89 1d e8 b9 03 c0    	mov    DWORD PTR ds:0xc003b9e8,ebx
c0001c32:	be 01 00 00 00       	mov    esi,0x1
c0001c37:	eb 1c                	jmp    c0001c55 <dlmallopt+0x85>
c0001c39:	89 1d ec b9 03 c0    	mov    DWORD PTR ds:0xc003b9ec,ebx
c0001c3f:	eb f1                	jmp    c0001c32 <dlmallopt+0x62>
c0001c41:	31 f6                	xor    esi,esi
c0001c43:	85 db                	test   ebx,ebx
c0001c45:	75 0e                	jne    c0001c55 <dlmallopt+0x85>
c0001c47:	c7 05 f4 b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b9f4,0x0
c0001c51:	eb df                	jmp    c0001c32 <dlmallopt+0x62>
c0001c53:	31 f6                	xor    esi,esi
c0001c55:	89 f0                	mov    eax,esi
c0001c57:	5b                   	pop    ebx
c0001c58:	5e                   	pop    esi
c0001c59:	c3                   	ret    

c0001c5a <disk_status>:
c0001c5a:	31 c0                	xor    eax,eax
c0001c5c:	c3                   	ret    

c0001c5d <disk_initialize>:
c0001c5d:	31 c0                	xor    eax,eax
c0001c5f:	c3                   	ret    

c0001c60 <disk_read>:
c0001c60:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c65:	0f b6 04 85 00 c9 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3700]
c0001c6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c71:	e9 22 7a 01 00       	jmp    c0019698 <fatWrapperReadDisk>

c0001c76 <disk_write>:
c0001c76:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c7b:	0f b6 04 85 00 c9 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3700]
c0001c83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c87:	e9 53 7a 01 00       	jmp    c00196df <fatWrapperWriteDisk>

c0001c8c <disk_ioctl>:
c0001c8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c95:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c9a:	0f b6 04 85 00 c9 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3700]
c0001ca2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ca6:	e9 7b 7a 01 00       	jmp    c0019726 <fatWrapperIoctl>

c0001cab <ld_word>:
c0001cab:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001caf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cb2:	c1 e2 08             	shl    edx,0x8
c0001cb5:	09 d0                	or     eax,edx
c0001cb7:	c3                   	ret    

c0001cb8 <ld_dword>:
c0001cb8:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001cbc:	89 d1                	mov    ecx,edx
c0001cbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cc2:	c1 e1 08             	shl    ecx,0x8
c0001cc5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc8:	09 ca                	or     edx,ecx
c0001cca:	c1 e2 08             	shl    edx,0x8
c0001ccd:	09 d0                	or     eax,edx
c0001ccf:	c3                   	ret    

c0001cd0 <ld_qword>:
c0001cd0:	57                   	push   edi
c0001cd1:	56                   	push   esi
c0001cd2:	53                   	push   ebx
c0001cd3:	31 db                	xor    ebx,ebx
c0001cd5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001cd8:	89 df                	mov    edi,ebx
c0001cda:	89 ce                	mov    esi,ecx
c0001cdc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ce0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ce4:	c1 e6 08             	shl    esi,0x8
c0001ce7:	09 f2                	or     edx,esi
c0001ce9:	89 d6                	mov    esi,edx
c0001ceb:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cef:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cf3:	c1 e6 08             	shl    esi,0x8
c0001cf6:	09 f2                	or     edx,esi
c0001cf8:	89 d6                	mov    esi,edx
c0001cfa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cfe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001d02:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d05:	c1 e6 08             	shl    esi,0x8
c0001d08:	89 fb                	mov    ebx,edi
c0001d0a:	09 f2                	or     edx,esi
c0001d0c:	89 d1                	mov    ecx,edx
c0001d0e:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001d12:	c1 e1 08             	shl    ecx,0x8
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	09 c8                	or     eax,ecx
c0001d19:	5b                   	pop    ebx
c0001d1a:	5e                   	pop    esi
c0001d1b:	5f                   	pop    edi
c0001d1c:	c3                   	ret    

c0001d1d <st_word>:
c0001d1d:	66 89 10             	mov    WORD PTR [eax],dx
c0001d20:	c3                   	ret    

c0001d21 <st_dword>:
c0001d21:	89 10                	mov    DWORD PTR [eax],edx
c0001d23:	c3                   	ret    

c0001d24 <st_qword>:
c0001d24:	89 10                	mov    DWORD PTR [eax],edx
c0001d26:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001d29:	c3                   	ret    

c0001d2a <mem_cpy>:
c0001d2a:	85 c9                	test   ecx,ecx
c0001d2c:	74 10                	je     c0001d3e <mem_cpy+0x14>
c0001d2e:	57                   	push   edi
c0001d2f:	01 c1                	add    ecx,eax
c0001d31:	56                   	push   esi
c0001d32:	89 c7                	mov    edi,eax
c0001d34:	89 d6                	mov    esi,edx
c0001d36:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d37:	39 f9                	cmp    ecx,edi
c0001d39:	75 fb                	jne    c0001d36 <mem_cpy+0xc>
c0001d3b:	5e                   	pop    esi
c0001d3c:	5f                   	pop    edi
c0001d3d:	c3                   	ret    
c0001d3e:	c3                   	ret    

c0001d3f <mem_set>:
c0001d3f:	01 c1                	add    ecx,eax
c0001d41:	40                   	inc    eax
c0001d42:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d45:	39 c8                	cmp    eax,ecx
c0001d47:	75 f8                	jne    c0001d41 <mem_set+0x2>
c0001d49:	c3                   	ret    

c0001d4a <mem_cmp>:
c0001d4a:	57                   	push   edi
c0001d4b:	56                   	push   esi
c0001d4c:	89 c6                	mov    esi,eax
c0001d4e:	53                   	push   ebx
c0001d4f:	46                   	inc    esi
c0001d50:	42                   	inc    edx
c0001d51:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d55:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d59:	29 fb                	sub    ebx,edi
c0001d5b:	89 cf                	mov    edi,ecx
c0001d5d:	29 f7                	sub    edi,esi
c0001d5f:	01 c7                	add    edi,eax
c0001d61:	74 04                	je     c0001d67 <mem_cmp+0x1d>
c0001d63:	85 db                	test   ebx,ebx
c0001d65:	74 e8                	je     c0001d4f <mem_cmp+0x5>
c0001d67:	89 d8                	mov    eax,ebx
c0001d69:	5b                   	pop    ebx
c0001d6a:	5e                   	pop    esi
c0001d6b:	5f                   	pop    edi
c0001d6c:	c3                   	ret    

c0001d6d <chk_chr>:
c0001d6d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d70:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d73:	74 07                	je     c0001d7c <chk_chr+0xf>
c0001d75:	39 d1                	cmp    ecx,edx
c0001d77:	74 03                	je     c0001d7c <chk_chr+0xf>
c0001d79:	40                   	inc    eax
c0001d7a:	eb f1                	jmp    c0001d6d <chk_chr>
c0001d7c:	89 c8                	mov    eax,ecx
c0001d7e:	c3                   	ret    

c0001d7f <dbc_1st>:
c0001d7f:	31 c0                	xor    eax,eax
c0001d81:	c3                   	ret    

c0001d82 <dbc_2nd>:
c0001d82:	31 c0                	xor    eax,eax
c0001d84:	c3                   	ret    

c0001d85 <tchar2uni>:
c0001d85:	57                   	push   edi
c0001d86:	89 c7                	mov    edi,eax
c0001d88:	56                   	push   esi
c0001d89:	53                   	push   ebx
c0001d8a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d8c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d8e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d91:	84 c9                	test   cl,cl
c0001d93:	78 0a                	js     c0001d9f <tchar2uni+0x1a>
c0001d95:	0f b6 d1             	movzx  edx,cl
c0001d98:	89 f3                	mov    ebx,esi
c0001d9a:	e9 9f 00 00 00       	jmp    c0001e3e <tchar2uni+0xb9>
c0001d9f:	88 ca                	mov    dl,cl
c0001da1:	83 e2 e0             	and    edx,0xffffffe0
c0001da4:	80 fa c0             	cmp    dl,0xc0
c0001da7:	75 0c                	jne    c0001db5 <tchar2uni+0x30>
c0001da9:	89 ca                	mov    edx,ecx
c0001dab:	b9 01 00 00 00       	mov    ecx,0x1
c0001db0:	83 e2 1f             	and    edx,0x1f
c0001db3:	eb 2e                	jmp    c0001de3 <tchar2uni+0x5e>
c0001db5:	88 ca                	mov    dl,cl
c0001db7:	83 e2 f0             	and    edx,0xfffffff0
c0001dba:	80 fa e0             	cmp    dl,0xe0
c0001dbd:	75 0c                	jne    c0001dcb <tchar2uni+0x46>
c0001dbf:	89 ca                	mov    edx,ecx
c0001dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0001dc6:	83 e2 0f             	and    edx,0xf
c0001dc9:	eb 18                	jmp    c0001de3 <tchar2uni+0x5e>
c0001dcb:	88 ca                	mov    dl,cl
c0001dcd:	83 e2 f8             	and    edx,0xfffffff8
c0001dd0:	88 d0                	mov    al,dl
c0001dd2:	83 ca ff             	or     edx,0xffffffff
c0001dd5:	3c f0                	cmp    al,0xf0
c0001dd7:	75 6c                	jne    c0001e45 <tchar2uni+0xc0>
c0001dd9:	89 ca                	mov    edx,ecx
c0001ddb:	b9 03 00 00 00       	mov    ecx,0x3
c0001de0:	83 e2 07             	and    edx,0x7
c0001de3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001de7:	46                   	inc    esi
c0001de8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001deb:	88 c8                	mov    al,cl
c0001ded:	83 e0 c0             	and    eax,0xffffffc0
c0001df0:	3c 80                	cmp    al,0x80
c0001df2:	75 4e                	jne    c0001e42 <tchar2uni+0xbd>
c0001df4:	c1 e2 06             	shl    edx,0x6
c0001df7:	83 e1 3f             	and    ecx,0x3f
c0001dfa:	09 ca                	or     edx,ecx
c0001dfc:	39 de                	cmp    esi,ebx
c0001dfe:	75 e7                	jne    c0001de7 <tchar2uni+0x62>
c0001e00:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e03:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e09:	77 37                	ja     c0001e42 <tchar2uni+0xbd>
c0001e0b:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e11:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e17:	76 29                	jbe    c0001e42 <tchar2uni+0xbd>
c0001e19:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e1f:	76 1d                	jbe    c0001e3e <tchar2uni+0xb9>
c0001e21:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e27:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e2d:	c1 e1 06             	shl    ecx,0x6
c0001e30:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e36:	09 ca                	or     edx,ecx
c0001e38:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e3e:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e40:	eb 03                	jmp    c0001e45 <tchar2uni+0xc0>
c0001e42:	83 ca ff             	or     edx,0xffffffff
c0001e45:	5b                   	pop    ebx
c0001e46:	89 d0                	mov    eax,edx
c0001e48:	5e                   	pop    esi
c0001e49:	5f                   	pop    edi
c0001e4a:	c3                   	ret    

c0001e4b <put_utf>:
c0001e4b:	53                   	push   ebx
c0001e4c:	83 f8 7f             	cmp    eax,0x7f
c0001e4f:	89 c3                	mov    ebx,eax
c0001e51:	b0 00                	mov    al,0x0
c0001e53:	77 11                	ja     c0001e66 <put_utf+0x1b>
c0001e55:	85 c9                	test   ecx,ecx
c0001e57:	0f 84 e5 00 00 00    	je     c0001f42 <put_utf+0xf7>
c0001e5d:	88 1a                	mov    BYTE PTR [edx],bl
c0001e5f:	b0 01                	mov    al,0x1
c0001e61:	e9 dc 00 00 00       	jmp    c0001f42 <put_utf+0xf7>
c0001e66:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e6c:	77 23                	ja     c0001e91 <put_utf+0x46>
c0001e6e:	83 f9 01             	cmp    ecx,0x1
c0001e71:	0f 86 cb 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	83 e3 3f             	and    ebx,0x3f
c0001e7c:	c1 e8 06             	shr    eax,0x6
c0001e7f:	83 cb 80             	or     ebx,0xffffff80
c0001e82:	83 c8 c0             	or     eax,0xffffffc0
c0001e85:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e88:	88 02                	mov    BYTE PTR [edx],al
c0001e8a:	b0 02                	mov    al,0x2
c0001e8c:	e9 b1 00 00 00       	jmp    c0001f42 <put_utf+0xf7>
c0001e91:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e97:	77 40                	ja     c0001ed9 <put_utf+0x8e>
c0001e99:	83 f9 02             	cmp    ecx,0x2
c0001e9c:	0f 86 a0 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001ea2:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ea8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eae:	0f 86 8e 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001eb4:	89 d8                	mov    eax,ebx
c0001eb6:	c1 e8 0c             	shr    eax,0xc
c0001eb9:	83 c8 e0             	or     eax,0xffffffe0
c0001ebc:	88 02                	mov    BYTE PTR [edx],al
c0001ebe:	89 d8                	mov    eax,ebx
c0001ec0:	83 e3 3f             	and    ebx,0x3f
c0001ec3:	c1 e8 06             	shr    eax,0x6
c0001ec6:	83 cb 80             	or     ebx,0xffffff80
c0001ec9:	83 e0 3f             	and    eax,0x3f
c0001ecc:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ecf:	83 c8 80             	or     eax,0xffffff80
c0001ed2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ed5:	b0 03                	mov    al,0x3
c0001ed7:	eb 69                	jmp    c0001f42 <put_utf+0xf7>
c0001ed9:	83 f9 03             	cmp    ecx,0x3
c0001edc:	76 64                	jbe    c0001f42 <put_utf+0xf7>
c0001ede:	89 d9                	mov    ecx,ebx
c0001ee0:	0f b7 c3             	movzx  eax,bx
c0001ee3:	66 31 c9             	xor    cx,cx
c0001ee6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eec:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ef2:	c1 e9 06             	shr    ecx,0x6
c0001ef5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001efb:	77 43                	ja     c0001f40 <put_utf+0xf5>
c0001efd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f03:	77 3b                	ja     c0001f40 <put_utf+0xf5>
c0001f05:	09 cb                	or     ebx,ecx
c0001f07:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f0d:	89 d8                	mov    eax,ebx
c0001f0f:	c1 e8 12             	shr    eax,0x12
c0001f12:	83 c8 f0             	or     eax,0xfffffff0
c0001f15:	88 02                	mov    BYTE PTR [edx],al
c0001f17:	89 d8                	mov    eax,ebx
c0001f19:	c1 e8 0c             	shr    eax,0xc
c0001f1c:	83 e0 3f             	and    eax,0x3f
c0001f1f:	83 c8 80             	or     eax,0xffffff80
c0001f22:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f25:	89 d8                	mov    eax,ebx
c0001f27:	83 e3 3f             	and    ebx,0x3f
c0001f2a:	c1 e8 06             	shr    eax,0x6
c0001f2d:	83 cb 80             	or     ebx,0xffffff80
c0001f30:	83 e0 3f             	and    eax,0x3f
c0001f33:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f36:	83 c8 80             	or     eax,0xffffff80
c0001f39:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f3c:	b0 04                	mov    al,0x4
c0001f3e:	eb 02                	jmp    c0001f42 <put_utf+0xf7>
c0001f40:	31 c0                	xor    eax,eax
c0001f42:	5b                   	pop    ebx
c0001f43:	c3                   	ret    

c0001f44 <clst2sect>:
c0001f44:	89 c1                	mov    ecx,eax
c0001f46:	83 ea 02             	sub    edx,0x2
c0001f49:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f4c:	83 e8 02             	sub    eax,0x2
c0001f4f:	39 d0                	cmp    eax,edx
c0001f51:	76 0d                	jbe    c0001f60 <clst2sect+0x1c>
c0001f53:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f57:	f7 e2                	mul    edx
c0001f59:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f5c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f5f:	c3                   	ret    
c0001f60:	31 c0                	xor    eax,eax
c0001f62:	31 d2                	xor    edx,edx
c0001f64:	c3                   	ret    

c0001f65 <clmt_clust>:
c0001f65:	57                   	push   edi
c0001f66:	89 cf                	mov    edi,ecx
c0001f68:	56                   	push   esi
c0001f69:	89 d6                	mov    esi,edx
c0001f6b:	53                   	push   ebx
c0001f6c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f70:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f73:	89 f2                	mov    edx,esi
c0001f75:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f77:	c1 ef 09             	shr    edi,0x9
c0001f7a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f7e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f81:	89 f9                	mov    ecx,edi
c0001f83:	31 ff                	xor    edi,edi
c0001f85:	57                   	push   edi
c0001f86:	56                   	push   esi
c0001f87:	51                   	push   ecx
c0001f88:	52                   	push   edx
c0001f89:	e8 ae c7 01 00       	call   c001e73c <__udivdi3>
c0001f8e:	83 c4 10             	add    esp,0x10
c0001f91:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f93:	85 d2                	test   edx,edx
c0001f95:	74 10                	je     c0001fa7 <clmt_clust+0x42>
c0001f97:	39 d0                	cmp    eax,edx
c0001f99:	72 07                	jb     c0001fa2 <clmt_clust+0x3d>
c0001f9b:	29 d0                	sub    eax,edx
c0001f9d:	83 c3 08             	add    ebx,0x8
c0001fa0:	eb ef                	jmp    c0001f91 <clmt_clust+0x2c>
c0001fa2:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001fa5:	89 c2                	mov    edx,eax
c0001fa7:	5b                   	pop    ebx
c0001fa8:	89 d0                	mov    eax,edx
c0001faa:	5e                   	pop    esi
c0001fab:	5f                   	pop    edi
c0001fac:	c3                   	ret    

c0001fad <pick_lfn>:
c0001fad:	55                   	push   ebp
c0001fae:	57                   	push   edi
c0001faf:	56                   	push   esi
c0001fb0:	89 d6                	mov    esi,edx
c0001fb2:	53                   	push   ebx
c0001fb3:	89 c3                	mov    ebx,eax
c0001fb5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fb8:	e8 ee fc ff ff       	call   c0001cab <ld_word>
c0001fbd:	66 85 c0             	test   ax,ax
c0001fc0:	74 04                	je     c0001fc6 <pick_lfn+0x19>
c0001fc2:	31 c0                	xor    eax,eax
c0001fc4:	eb 5c                	jmp    c0002022 <pick_lfn+0x75>
c0001fc6:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fc9:	bd 01 00 00 00       	mov    ebp,0x1
c0001fce:	83 e1 bf             	and    ecx,0xffffffbf
c0001fd1:	31 ff                	xor    edi,edi
c0001fd3:	49                   	dec    ecx
c0001fd4:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fd7:	0f b6 87 c0 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0840]
c0001fde:	01 f0                	add    eax,esi
c0001fe0:	e8 c6 fc ff ff       	call   c0001cab <ld_word>
c0001fe5:	66 85 ed             	test   bp,bp
c0001fe8:	74 11                	je     c0001ffb <pick_lfn+0x4e>
c0001fea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ff0:	77 d0                	ja     c0001fc2 <pick_lfn+0x15>
c0001ff2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ff6:	89 c5                	mov    ebp,eax
c0001ff8:	41                   	inc    ecx
c0001ff9:	eb 04                	jmp    c0001fff <pick_lfn+0x52>
c0001ffb:	66 40                	inc    ax
c0001ffd:	75 c3                	jne    c0001fc2 <pick_lfn+0x15>
c0001fff:	47                   	inc    edi
c0002000:	83 ff 0d             	cmp    edi,0xd
c0002003:	75 d2                	jne    c0001fd7 <pick_lfn+0x2a>
c0002005:	f6 06 40             	test   BYTE PTR [esi],0x40
c0002008:	74 13                	je     c000201d <pick_lfn+0x70>
c000200a:	66 85 ed             	test   bp,bp
c000200d:	74 0e                	je     c000201d <pick_lfn+0x70>
c000200f:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002015:	77 ab                	ja     c0001fc2 <pick_lfn+0x15>
c0002017:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000201d:	b8 01 00 00 00       	mov    eax,0x1
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <put_lfn>:
c0002027:	55                   	push   ebp
c0002028:	31 ed                	xor    ebp,ebp
c000202a:	57                   	push   edi
c000202b:	89 d7                	mov    edi,edx
c000202d:	56                   	push   esi
c000202e:	31 f6                	xor    esi,esi
c0002030:	53                   	push   ebx
c0002031:	83 ec 08             	sub    esp,0x8
c0002034:	89 04 24             	mov    DWORD PTR [esp],eax
c0002037:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c000203b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000203f:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002045:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002048:	8d 42 1a             	lea    eax,[edx+0x1a]
c000204b:	31 d2                	xor    edx,edx
c000204d:	e8 cb fc ff ff       	call   c0001d1d <st_word>
c0002052:	0f b6 d9             	movzx  ebx,cl
c0002055:	4b                   	dec    ebx
c0002056:	6b db 0d             	imul   ebx,ebx,0xd
c0002059:	66 83 fe ff          	cmp    si,0xffff
c000205d:	74 08                	je     c0002067 <put_lfn+0x40>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002066:	43                   	inc    ebx
c0002067:	0f b6 85 c0 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0840]
c000206e:	0f b7 d6             	movzx  edx,si
c0002071:	01 f8                	add    eax,edi
c0002073:	e8 a5 fc ff ff       	call   c0001d1d <st_word>
c0002078:	66 85 f6             	test   si,si
c000207b:	75 03                	jne    c0002080 <put_lfn+0x59>
c000207d:	83 ce ff             	or     esi,0xffffffff
c0002080:	45                   	inc    ebp
c0002081:	83 fd 0d             	cmp    ebp,0xd
c0002084:	75 d3                	jne    c0002059 <put_lfn+0x32>
c0002086:	66 46                	inc    si
c0002088:	74 0a                	je     c0002094 <put_lfn+0x6d>
c000208a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000208d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002092:	75 09                	jne    c000209d <put_lfn+0x76>
c0002094:	88 c8                	mov    al,cl
c0002096:	83 c8 40             	or     eax,0x40
c0002099:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000209d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00020a1:	88 07                	mov    BYTE PTR [edi],al
c00020a3:	83 c4 08             	add    esp,0x8
c00020a6:	5b                   	pop    ebx
c00020a7:	5e                   	pop    esi
c00020a8:	5f                   	pop    edi
c00020a9:	5d                   	pop    ebp
c00020aa:	c3                   	ret    

c00020ab <gen_numname>:
c00020ab:	57                   	push   edi
c00020ac:	89 cf                	mov    edi,ecx
c00020ae:	56                   	push   esi
c00020af:	b9 0b 00 00 00       	mov    ecx,0xb
c00020b4:	53                   	push   ebx
c00020b5:	89 c6                	mov    esi,eax
c00020b7:	83 ec 10             	sub    esp,0x10
c00020ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020be:	e8 67 fc ff ff       	call   c0001d2a <mem_cpy>
c00020c3:	83 fb 05             	cmp    ebx,0x5
c00020c6:	76 2d                	jbe    c00020f5 <gen_numname+0x4a>
c00020c8:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020cb:	66 85 c0             	test   ax,ax
c00020ce:	74 25                	je     c00020f5 <gen_numname+0x4a>
c00020d0:	83 c7 02             	add    edi,0x2
c00020d3:	ba 10 00 00 00       	mov    edx,0x10
c00020d8:	01 db                	add    ebx,ebx
c00020da:	89 c1                	mov    ecx,eax
c00020dc:	66 d1 e8             	shr    ax,1
c00020df:	83 e1 01             	and    ecx,0x1
c00020e2:	01 cb                	add    ebx,ecx
c00020e4:	0f ba e3 10          	bt     ebx,0x10
c00020e8:	73 06                	jae    c00020f0 <gen_numname+0x45>
c00020ea:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020f0:	4a                   	dec    edx
c00020f1:	75 e5                	jne    c00020d8 <gen_numname+0x2d>
c00020f3:	eb d3                	jmp    c00020c8 <gen_numname+0x1d>
c00020f5:	b8 07 00 00 00       	mov    eax,0x7
c00020fa:	88 d9                	mov    cl,bl
c00020fc:	83 e1 0f             	and    ecx,0xf
c00020ff:	8d 51 30             	lea    edx,[ecx+0x30]
c0002102:	80 fa 39             	cmp    dl,0x39
c0002105:	76 03                	jbe    c000210a <gen_numname+0x5f>
c0002107:	8d 51 37             	lea    edx,[ecx+0x37]
c000210a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000210d:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002111:	89 da                	mov    edx,ebx
c0002113:	c1 ea 04             	shr    edx,0x4
c0002116:	83 fb 0f             	cmp    ebx,0xf
c0002119:	76 06                	jbe    c0002121 <gen_numname+0x76>
c000211b:	89 c8                	mov    eax,ecx
c000211d:	89 d3                	mov    ebx,edx
c000211f:	eb d9                	jmp    c00020fa <gen_numname+0x4f>
c0002121:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002126:	31 d2                	xor    edx,edx
c0002128:	8d 58 fe             	lea    ebx,[eax-0x2]
c000212b:	8d 04 16             	lea    eax,[esi+edx*1]
c000212e:	39 ca                	cmp    edx,ecx
c0002130:	73 18                	jae    c000214a <gen_numname+0x9f>
c0002132:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002135:	3c 20                	cmp    al,0x20
c0002137:	74 11                	je     c000214a <gen_numname+0x9f>
c0002139:	e8 41 fc ff ff       	call   c0001d7f <dbc_1st>
c000213e:	85 c0                	test   eax,eax
c0002140:	74 05                	je     c0002147 <gen_numname+0x9c>
c0002142:	39 d3                	cmp    ebx,edx
c0002144:	74 04                	je     c000214a <gen_numname+0x9f>
c0002146:	42                   	inc    edx
c0002147:	42                   	inc    edx
c0002148:	eb e1                	jmp    c000212b <gen_numname+0x80>
c000214a:	b0 20                	mov    al,0x20
c000214c:	83 f9 07             	cmp    ecx,0x7
c000214f:	77 05                	ja     c0002156 <gen_numname+0xab>
c0002151:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002155:	41                   	inc    ecx
c0002156:	42                   	inc    edx
c0002157:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000215b:	83 fa 07             	cmp    edx,0x7
c000215e:	76 ea                	jbe    c000214a <gen_numname+0x9f>
c0002160:	83 c4 10             	add    esp,0x10
c0002163:	5b                   	pop    ebx
c0002164:	5e                   	pop    esi
c0002165:	5f                   	pop    edi
c0002166:	c3                   	ret    

c0002167 <sum_sfn>:
c0002167:	31 c9                	xor    ecx,ecx
c0002169:	31 d2                	xor    edx,edx
c000216b:	d0 ca                	ror    dl,1
c000216d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002170:	41                   	inc    ecx
c0002171:	83 f9 0b             	cmp    ecx,0xb
c0002174:	75 f5                	jne    c000216b <sum_sfn+0x4>
c0002176:	88 d0                	mov    al,dl
c0002178:	c3                   	ret    

c0002179 <xdir_sum>:
c0002179:	56                   	push   esi
c000217a:	31 c9                	xor    ecx,ecx
c000217c:	53                   	push   ebx
c000217d:	31 d2                	xor    edx,edx
c000217f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002183:	43                   	inc    ebx
c0002184:	c1 e3 05             	shl    ebx,0x5
c0002187:	83 fa 02             	cmp    edx,0x2
c000218a:	74 0b                	je     c0002197 <xdir_sum+0x1e>
c000218c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002190:	66 d1 c9             	ror    cx,1
c0002193:	01 f1                	add    ecx,esi
c0002195:	eb 05                	jmp    c000219c <xdir_sum+0x23>
c0002197:	ba 03 00 00 00       	mov    edx,0x3
c000219c:	42                   	inc    edx
c000219d:	39 d3                	cmp    ebx,edx
c000219f:	77 e6                	ja     c0002187 <xdir_sum+0xe>
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	c3                   	ret    

c00021a6 <xsum32>:
c00021a6:	d1 ca                	ror    edx,1
c00021a8:	0f b6 c0             	movzx  eax,al
c00021ab:	01 d0                	add    eax,edx
c00021ad:	c3                   	ret    

c00021ae <get_xfileinfo>:
c00021ae:	55                   	push   ebp
c00021af:	31 c9                	xor    ecx,ecx
c00021b1:	57                   	push   edi
c00021b2:	bd 40 00 00 00       	mov    ebp,0x40
c00021b7:	56                   	push   esi
c00021b8:	31 ff                	xor    edi,edi
c00021ba:	53                   	push   ebx
c00021bb:	89 c6                	mov    esi,eax
c00021bd:	83 ec 0c             	sub    esp,0xc
c00021c0:	89 d3                	mov    ebx,edx
c00021c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021c9:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00021cd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00021d0:	76 6d                	jbe    c000223f <get_xfileinfo+0x91>
c00021d2:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00021d8:	76 0b                	jbe    c00021e5 <get_xfileinfo+0x37>
c00021da:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00021de:	bf 01 00 00 00       	mov    edi,0x1
c00021e3:	eb 63                	jmp    c0002248 <get_xfileinfo+0x9a>
c00021e5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021eb:	75 03                	jne    c00021f0 <get_xfileinfo+0x42>
c00021ed:	83 c5 02             	add    ebp,0x2
c00021f0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021f3:	83 c5 02             	add    ebp,0x2
c00021f6:	e8 b0 fa ff ff       	call   c0001cab <ld_word>
c00021fb:	ff 04 24             	inc    DWORD PTR [esp]
c00021fe:	66 85 c9             	test   cx,cx
c0002201:	75 0d                	jne    c0002210 <get_xfileinfo+0x62>
c0002203:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002209:	66 81 fa ff 07       	cmp    dx,0x7ff
c000220e:	76 2b                	jbe    c000223b <get_xfileinfo+0x8d>
c0002210:	c1 e1 10             	shl    ecx,0x10
c0002213:	ba ff 00 00 00       	mov    edx,0xff
c0002218:	0f b7 c0             	movzx  eax,ax
c000221b:	29 fa                	sub    edx,edi
c000221d:	09 c8                	or     eax,ecx
c000221f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0002223:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0002227:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000222b:	e8 1b fc ff ff       	call   c0001e4b <put_utf>
c0002230:	84 c0                	test   al,al
c0002232:	74 a6                	je     c00021da <get_xfileinfo+0x2c>
c0002234:	0f b6 c0             	movzx  eax,al
c0002237:	01 c7                	add    edi,eax
c0002239:	31 c0                	xor    eax,eax
c000223b:	89 c1                	mov    ecx,eax
c000223d:	eb 8a                	jmp    c00021c9 <get_xfileinfo+0x1b>
c000223f:	85 ff                	test   edi,edi
c0002241:	74 97                	je     c00021da <get_xfileinfo+0x2c>
c0002243:	66 85 c9             	test   cx,cx
c0002246:	75 92                	jne    c00021da <get_xfileinfo+0x2c>
c0002248:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000224d:	31 c0                	xor    eax,eax
c000224f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002253:	31 d2                	xor    edx,edx
c0002255:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002258:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000225b:	80 e1 10             	and    cl,0x10
c000225e:	75 08                	jne    c0002268 <get_xfileinfo+0xba>
c0002260:	8d 46 38             	lea    eax,[esi+0x38]
c0002263:	e8 68 fa ff ff       	call   c0001cd0 <ld_qword>
c0002268:	89 03                	mov    DWORD PTR [ebx],eax
c000226a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000226d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002270:	e8 36 fa ff ff       	call   c0001cab <ld_word>
c0002275:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002279:	8d 46 0e             	lea    eax,[esi+0xe]
c000227c:	e8 2a fa ff ff       	call   c0001cab <ld_word>
c0002281:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002285:	83 c4 0c             	add    esp,0xc
c0002288:	5b                   	pop    ebx
c0002289:	5e                   	pop    esi
c000228a:	5f                   	pop    edi
c000228b:	5d                   	pop    ebp
c000228c:	c3                   	ret    

c000228d <get_ldnumber>:
c000228d:	8b 10                	mov    edx,DWORD PTR [eax]
c000228f:	85 d2                	test   edx,edx
c0002291:	74 14                	je     c00022a7 <get_ldnumber+0x1a>
c0002293:	56                   	push   esi
c0002294:	53                   	push   ebx
c0002295:	89 d3                	mov    ebx,edx
c0002297:	43                   	inc    ebx
c0002298:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000229b:	80 f9 1f             	cmp    cl,0x1f
c000229e:	76 0d                	jbe    c00022ad <get_ldnumber+0x20>
c00022a0:	80 f9 3a             	cmp    cl,0x3a
c00022a3:	75 f2                	jne    c0002297 <get_ldnumber+0xa>
c00022a5:	eb 0a                	jmp    c00022b1 <get_ldnumber+0x24>
c00022a7:	83 c9 ff             	or     ecx,0xffffffff
c00022aa:	89 c8                	mov    eax,ecx
c00022ac:	c3                   	ret    
c00022ad:	31 c9                	xor    ecx,ecx
c00022af:	eb 24                	jmp    c00022d5 <get_ldnumber+0x48>
c00022b1:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00022b4:	8d 4e d0             	lea    ecx,[esi-0x30]
c00022b7:	80 f9 09             	cmp    cl,0x9
c00022ba:	77 16                	ja     c00022d2 <get_ldnumber+0x45>
c00022bc:	83 c2 02             	add    edx,0x2
c00022bf:	83 c9 ff             	or     ecx,0xffffffff
c00022c2:	39 d3                	cmp    ebx,edx
c00022c4:	75 0f                	jne    c00022d5 <get_ldnumber+0x48>
c00022c6:	89 f2                	mov    edx,esi
c00022c8:	89 18                	mov    DWORD PTR [eax],ebx
c00022ca:	0f be ca             	movsx  ecx,dl
c00022cd:	83 e9 30             	sub    ecx,0x30
c00022d0:	eb 03                	jmp    c00022d5 <get_ldnumber+0x48>
c00022d2:	83 c9 ff             	or     ecx,0xffffffff
c00022d5:	89 c8                	mov    eax,ecx
c00022d7:	5b                   	pop    ebx
c00022d8:	5e                   	pop    esi
c00022d9:	c3                   	ret    

c00022da <crc32>:
c00022da:	56                   	push   esi
c00022db:	89 d6                	mov    esi,edx
c00022dd:	53                   	push   ebx
c00022de:	b2 01                	mov    dl,0x1
c00022e0:	bb 08 00 00 00       	mov    ebx,0x8
c00022e5:	89 f1                	mov    ecx,esi
c00022e7:	84 d1                	test   cl,dl
c00022e9:	0f 95 c1             	setne  cl
c00022ec:	0f b6 c9             	movzx  ecx,cl
c00022ef:	31 c1                	xor    ecx,eax
c00022f1:	89 c8                	mov    eax,ecx
c00022f3:	d1 e8                	shr    eax,1
c00022f5:	80 e1 01             	and    cl,0x1
c00022f8:	74 05                	je     c00022ff <crc32+0x25>
c00022fa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022ff:	d1 e2                	shl    edx,1
c0002301:	4b                   	dec    ebx
c0002302:	75 e1                	jne    c00022e5 <crc32+0xb>
c0002304:	5b                   	pop    ebx
c0002305:	5e                   	pop    esi
c0002306:	c3                   	ret    

c0002307 <test_gpt_header>:
c0002307:	55                   	push   ebp
c0002308:	b9 10 00 00 00       	mov    ecx,0x10
c000230d:	57                   	push   edi
c000230e:	ba c0 f6 01 c0       	mov    edx,0xc001f6c0
c0002313:	56                   	push   esi
c0002314:	31 ff                	xor    edi,edi
c0002316:	53                   	push   ebx
c0002317:	89 c3                	mov    ebx,eax
c0002319:	e8 2c fa ff ff       	call   c0001d4a <mem_cmp>
c000231e:	85 c0                	test   eax,eax
c0002320:	75 55                	jne    c0002377 <test_gpt_header+0x70>
c0002322:	89 c7                	mov    edi,eax
c0002324:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002329:	83 ce ff             	or     esi,0xffffffff
c000232c:	31 d2                	xor    edx,edx
c000232e:	83 fd 03             	cmp    ebp,0x3
c0002331:	76 05                	jbe    c0002338 <test_gpt_header+0x31>
c0002333:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002338:	89 f0                	mov    eax,esi
c000233a:	45                   	inc    ebp
c000233b:	e8 9a ff ff ff       	call   c00022da <crc32>
c0002340:	83 fd 4c             	cmp    ebp,0x4c
c0002343:	89 c6                	mov    esi,eax
c0002345:	75 e5                	jne    c000232c <test_gpt_header+0x25>
c0002347:	8d 43 10             	lea    eax,[ebx+0x10]
c000234a:	f7 d6                	not    esi
c000234c:	e8 67 f9 ff ff       	call   c0001cb8 <ld_dword>
c0002351:	39 c6                	cmp    esi,eax
c0002353:	75 22                	jne    c0002377 <test_gpt_header+0x70>
c0002355:	8d 43 54             	lea    eax,[ebx+0x54]
c0002358:	e8 5b f9 ff ff       	call   c0001cb8 <ld_dword>
c000235d:	83 c0 80             	add    eax,0xffffff80
c0002360:	75 15                	jne    c0002377 <test_gpt_header+0x70>
c0002362:	8d 43 50             	lea    eax,[ebx+0x50]
c0002365:	e8 4e f9 ff ff       	call   c0001cb8 <ld_dword>
c000236a:	3d 80 00 00 00       	cmp    eax,0x80
c000236f:	0f 96 c0             	setbe  al
c0002372:	0f b6 c0             	movzx  eax,al
c0002375:	89 c7                	mov    edi,eax
c0002377:	5b                   	pop    ebx
c0002378:	89 f8                	mov    eax,edi
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <make_rand>:
c000237e:	56                   	push   esi
c000237f:	85 c0                	test   eax,eax
c0002381:	53                   	push   ebx
c0002382:	75 05                	jne    c0002389 <make_rand+0xb>
c0002384:	b8 01 00 00 00       	mov    eax,0x1
c0002389:	01 d1                	add    ecx,edx
c000238b:	bb 08 00 00 00       	mov    ebx,0x8
c0002390:	89 c6                	mov    esi,eax
c0002392:	d1 e8                	shr    eax,1
c0002394:	83 e6 01             	and    esi,0x1
c0002397:	85 f6                	test   esi,esi
c0002399:	74 05                	je     c00023a0 <make_rand+0x22>
c000239b:	35 00 00 00 a3       	xor    eax,0xa3000000
c00023a0:	4b                   	dec    ebx
c00023a1:	75 ed                	jne    c0002390 <make_rand+0x12>
c00023a3:	42                   	inc    edx
c00023a4:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00023a7:	39 ca                	cmp    edx,ecx
c00023a9:	75 e0                	jne    c000238b <make_rand+0xd>
c00023ab:	5b                   	pop    ebx
c00023ac:	5e                   	pop    esi
c00023ad:	c3                   	ret    

c00023ae <validate>:
c00023ae:	56                   	push   esi
c00023af:	53                   	push   ebx
c00023b0:	89 d6                	mov    esi,edx
c00023b2:	51                   	push   ecx
c00023b3:	85 c0                	test   eax,eax
c00023b5:	75 09                	jne    c00023c0 <validate+0x12>
c00023b7:	b8 09 00 00 00       	mov    eax,0x9
c00023bc:	31 c9                	xor    ecx,ecx
c00023be:	eb 2f                	jmp    c00023ef <validate+0x41>
c00023c0:	89 c3                	mov    ebx,eax
c00023c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00023c4:	85 c0                	test   eax,eax
c00023c6:	74 ef                	je     c00023b7 <validate+0x9>
c00023c8:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023cb:	74 ea                	je     c00023b7 <validate+0x9>
c00023cd:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00023d1:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00023d5:	75 e0                	jne    c00023b7 <validate+0x9>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023de:	50                   	push   eax
c00023df:	e8 76 f8 ff ff       	call   c0001c5a <disk_status>
c00023e4:	83 c4 10             	add    esp,0x10
c00023e7:	a8 01                	test   al,0x1
c00023e9:	75 cc                	jne    c00023b7 <validate+0x9>
c00023eb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ed:	31 c0                	xor    eax,eax
c00023ef:	89 0e                	mov    DWORD PTR [esi],ecx
c00023f1:	5a                   	pop    edx
c00023f2:	5b                   	pop    ebx
c00023f3:	5e                   	pop    esi
c00023f4:	c3                   	ret    

c00023f5 <sync_window>:
c00023f5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023f9:	0f 84 85 00 00 00    	je     c0002484 <sync_window+0x8f>
c00023ff:	55                   	push   ebp
c0002400:	8d 68 54             	lea    ebp,[eax+0x54]
c0002403:	57                   	push   edi
c0002404:	56                   	push   esi
c0002405:	53                   	push   ebx
c0002406:	89 c3                	mov    ebx,eax
c0002408:	83 ec 28             	sub    esp,0x28
c000240b:	6a 01                	push   0x1
c000240d:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002410:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002413:	55                   	push   ebp
c0002414:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002418:	50                   	push   eax
c0002419:	e8 58 f8 ff ff       	call   c0001c76 <disk_write>
c000241e:	83 c4 20             	add    esp,0x20
c0002421:	ba 01 00 00 00       	mov    edx,0x1
c0002426:	85 c0                	test   eax,eax
c0002428:	75 50                	jne    c000247a <sync_window+0x85>
c000242a:	31 ff                	xor    edi,edi
c000242c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000242f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002433:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002437:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000243a:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000243d:	89 c6                	mov    esi,eax
c000243f:	89 d7                	mov    edi,edx
c0002441:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002444:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002448:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000244b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000244f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002453:	73 23                	jae    c0002478 <sync_window+0x83>
c0002455:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002459:	75 1d                	jne    c0002478 <sync_window+0x83>
c000245b:	83 ec 0c             	sub    esp,0xc
c000245e:	6a 01                	push   0x1
c0002460:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002464:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002468:	52                   	push   edx
c0002469:	50                   	push   eax
c000246a:	55                   	push   ebp
c000246b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 01 f8 ff ff       	call   c0001c76 <disk_write>
c0002475:	83 c4 20             	add    esp,0x20
c0002478:	31 d2                	xor    edx,edx
c000247a:	83 c4 1c             	add    esp,0x1c
c000247d:	89 d0                	mov    eax,edx
c000247f:	5b                   	pop    ebx
c0002480:	5e                   	pop    esi
c0002481:	5f                   	pop    edi
c0002482:	5d                   	pop    ebp
c0002483:	c3                   	ret    
c0002484:	31 d2                	xor    edx,edx
c0002486:	89 d0                	mov    eax,edx
c0002488:	c3                   	ret    

c0002489 <move_window>:
c0002489:	56                   	push   esi
c000248a:	53                   	push   ebx
c000248b:	89 c3                	mov    ebx,eax
c000248d:	83 ec 14             	sub    esp,0x14
c0002490:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002493:	75 07                	jne    c000249c <move_window+0x13>
c0002495:	31 f6                	xor    esi,esi
c0002497:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000249a:	74 59                	je     c00024f5 <move_window+0x6c>
c000249c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00024a4:	89 d8                	mov    eax,ebx
c00024a6:	e8 4a ff ff ff       	call   c00023f5 <sync_window>
c00024ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024af:	89 c6                	mov    esi,eax
c00024b1:	85 c0                	test   eax,eax
c00024b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024b7:	75 3c                	jne    c00024f5 <move_window+0x6c>
c00024b9:	83 ec 0c             	sub    esp,0xc
c00024bc:	8d 43 54             	lea    eax,[ebx+0x54]
c00024bf:	6a 01                	push   0x1
c00024c1:	51                   	push   ecx
c00024c2:	52                   	push   edx
c00024c3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00024c7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00024cb:	50                   	push   eax
c00024cc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024d0:	50                   	push   eax
c00024d1:	e8 8a f7 ff ff       	call   c0001c60 <disk_read>
c00024d6:	83 c4 20             	add    esp,0x20
c00024d9:	85 c0                	test   eax,eax
c00024db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024e3:	74 0a                	je     c00024ef <move_window+0x66>
c00024e5:	83 ca ff             	or     edx,0xffffffff
c00024e8:	be 01 00 00 00       	mov    esi,0x1
c00024ed:	89 d1                	mov    ecx,edx
c00024ef:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024f2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024f5:	89 f0                	mov    eax,esi
c00024f7:	83 c4 14             	add    esp,0x14
c00024fa:	5b                   	pop    ebx
c00024fb:	5e                   	pop    esi
c00024fc:	c3                   	ret    

c00024fd <check_fs>:
c00024fd:	53                   	push   ebx
c00024fe:	89 c3                	mov    ebx,eax
c0002500:	83 ec 08             	sub    esp,0x8
c0002503:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002507:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000250e:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002515:	e8 6f ff ff ff       	call   c0002489 <move_window>
c000251a:	ba 04 00 00 00       	mov    edx,0x4
c000251f:	85 c0                	test   eax,eax
c0002521:	0f 85 89 00 00 00    	jne    c00025b0 <check_fs+0xb3>
c0002527:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000252d:	e8 79 f7 ff ff       	call   c0001cab <ld_word>
c0002532:	ba 03 00 00 00       	mov    edx,0x3
c0002537:	66 3d 55 aa          	cmp    ax,0xaa55
c000253b:	75 73                	jne    c00025b0 <check_fs+0xb3>
c000253d:	ba e0 f7 01 c0       	mov    edx,0xc001f7e0
c0002542:	8d 43 54             	lea    eax,[ebx+0x54]
c0002545:	b9 0b 00 00 00       	mov    ecx,0xb
c000254a:	e8 fb f7 ff ff       	call   c0001d4a <mem_cmp>
c000254f:	ba 01 00 00 00       	mov    edx,0x1
c0002554:	85 c0                	test   eax,eax
c0002556:	74 58                	je     c00025b0 <check_fs+0xb3>
c0002558:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000255b:	8d 50 18             	lea    edx,[eax+0x18]
c000255e:	80 fa 01             	cmp    dl,0x1
c0002561:	76 09                	jbe    c000256c <check_fs+0x6f>
c0002563:	ba 02 00 00 00       	mov    edx,0x2
c0002568:	3c eb                	cmp    al,0xeb
c000256a:	75 44                	jne    c00025b0 <check_fs+0xb3>
c000256c:	ba 54 a5 03 c0       	mov    edx,0xc003a554
c0002571:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002577:	b9 03 00 00 00       	mov    ecx,0x3
c000257c:	e8 c9 f7 ff ff       	call   c0001d4a <mem_cmp>
c0002581:	31 d2                	xor    edx,edx
c0002583:	85 c0                	test   eax,eax
c0002585:	74 29                	je     c00025b0 <check_fs+0xb3>
c0002587:	ba ec f7 01 c0       	mov    edx,0xc001f7ec
c000258c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002592:	b9 05 00 00 00       	mov    ecx,0x5
c0002597:	e8 ae f7 ff ff       	call   c0001d4a <mem_cmp>
c000259c:	31 d2                	xor    edx,edx
c000259e:	85 c0                	test   eax,eax
c00025a0:	74 0e                	je     c00025b0 <check_fs+0xb3>
c00025a2:	31 d2                	xor    edx,edx
c00025a4:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c00025ab:	0f 95 c2             	setne  dl
c00025ae:	01 d2                	add    edx,edx
c00025b0:	89 d0                	mov    eax,edx
c00025b2:	83 c4 08             	add    esp,0x8
c00025b5:	5b                   	pop    ebx
c00025b6:	c3                   	ret    

c00025b7 <find_volume>:
c00025b7:	55                   	push   ebp
c00025b8:	31 c9                	xor    ecx,ecx
c00025ba:	57                   	push   edi
c00025bb:	56                   	push   esi
c00025bc:	89 d6                	mov    esi,edx
c00025be:	53                   	push   ebx
c00025bf:	31 d2                	xor    edx,edx
c00025c1:	83 ec 3c             	sub    esp,0x3c
c00025c4:	89 c3                	mov    ebx,eax
c00025c6:	e8 32 ff ff ff       	call   c00024fd <check_fs>
c00025cb:	83 f8 02             	cmp    eax,0x2
c00025ce:	74 0e                	je     c00025de <find_volume+0x27>
c00025d0:	0f 87 5d 01 00 00    	ja     c0002733 <find_volume+0x17c>
c00025d6:	85 f6                	test   esi,esi
c00025d8:	0f 84 55 01 00 00    	je     c0002733 <find_volume+0x17c>
c00025de:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025e5:	0f 85 dd 00 00 00    	jne    c00026c8 <find_volume+0x111>
c00025eb:	31 c9                	xor    ecx,ecx
c00025ed:	ba 01 00 00 00       	mov    edx,0x1
c00025f2:	89 d8                	mov    eax,ebx
c00025f4:	e8 90 fe ff ff       	call   c0002489 <move_window>
c00025f9:	85 c0                	test   eax,eax
c00025fb:	74 0a                	je     c0002607 <find_volume+0x50>
c00025fd:	b8 04 00 00 00       	mov    eax,0x4
c0002602:	e9 2c 01 00 00       	jmp    c0002733 <find_volume+0x17c>
c0002607:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000260a:	89 e8                	mov    eax,ebp
c000260c:	e8 f6 fc ff ff       	call   c0002307 <test_gpt_header>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 0a                	jne    c000261f <find_volume+0x68>
c0002615:	b8 03 00 00 00       	mov    eax,0x3
c000261a:	e9 14 01 00 00       	jmp    c0002733 <find_volume+0x17c>
c000261f:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002625:	e8 8e f6 ff ff       	call   c0001cb8 <ld_dword>
c000262a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000262e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002634:	e8 97 f6 ff ff       	call   c0001cd0 <ld_qword>
c0002639:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002641:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002645:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002649:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002651:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002655:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002659:	74 ba                	je     c0002615 <find_volume+0x5e>
c000265b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000265f:	31 c9                	xor    ecx,ecx
c0002661:	c1 e7 07             	shl    edi,0x7
c0002664:	89 d8                	mov    eax,ebx
c0002666:	89 fa                	mov    edx,edi
c0002668:	c1 ea 09             	shr    edx,0x9
c000266b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000266f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002673:	e8 11 fe ff ff       	call   c0002489 <move_window>
c0002678:	85 c0                	test   eax,eax
c000267a:	75 81                	jne    c00025fd <find_volume+0x46>
c000267c:	81 e7 80 01 00 00    	and    edi,0x180
c0002682:	b9 10 00 00 00       	mov    ecx,0x10
c0002687:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000268b:	ba d0 f7 01 c0       	mov    edx,0xc001f7d0
c0002690:	e8 b5 f6 ff ff       	call   c0001d4a <mem_cmp>
c0002695:	85 c0                	test   eax,eax
c0002697:	75 29                	jne    c00026c2 <find_volume+0x10b>
c0002699:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000269d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00026a1:	e8 2a f6 ff ff       	call   c0001cd0 <ld_qword>
c00026a6:	89 d1                	mov    ecx,edx
c00026a8:	89 c2                	mov    edx,eax
c00026aa:	89 d8                	mov    eax,ebx
c00026ac:	e8 4c fe ff ff       	call   c00024fd <check_fs>
c00026b1:	85 f6                	test   esi,esi
c00026b3:	75 07                	jne    c00026bc <find_volume+0x105>
c00026b5:	83 f8 01             	cmp    eax,0x1
c00026b8:	77 08                	ja     c00026c2 <find_volume+0x10b>
c00026ba:	eb 77                	jmp    c0002733 <find_volume+0x17c>
c00026bc:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026c0:	74 71                	je     c0002733 <find_volume+0x17c>
c00026c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00026c6:	eb 89                	jmp    c0002651 <find_volume+0x9a>
c00026c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00026cc:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00026d2:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00026d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026dc:	89 cd                	mov    ebp,ecx
c00026de:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026e2:	89 f8                	mov    eax,edi
c00026e4:	83 c7 10             	add    edi,0x10
c00026e7:	e8 cc f5 ff ff       	call   c0001cb8 <ld_dword>
c00026ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026f0:	89 01                	mov    DWORD PTR [ecx],eax
c00026f2:	83 c1 04             	add    ecx,0x4
c00026f5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026f9:	75 e3                	jne    c00026de <find_volume+0x127>
c00026fb:	31 ff                	xor    edi,edi
c00026fd:	85 f6                	test   esi,esi
c00026ff:	74 03                	je     c0002704 <find_volume+0x14d>
c0002701:	8d 7e ff             	lea    edi,[esi-0x1]
c0002704:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002708:	85 d2                	test   edx,edx
c000270a:	74 14                	je     c0002720 <find_volume+0x169>
c000270c:	31 c9                	xor    ecx,ecx
c000270e:	89 d8                	mov    eax,ebx
c0002710:	e8 e8 fd ff ff       	call   c00024fd <check_fs>
c0002715:	83 f8 01             	cmp    eax,0x1
c0002718:	76 19                	jbe    c0002733 <find_volume+0x17c>
c000271a:	85 f6                	test   esi,esi
c000271c:	74 0f                	je     c000272d <find_volume+0x176>
c000271e:	eb 13                	jmp    c0002733 <find_volume+0x17c>
c0002720:	85 f6                	test   esi,esi
c0002722:	0f 85 ed fe ff ff    	jne    c0002615 <find_volume+0x5e>
c0002728:	b8 03 00 00 00       	mov    eax,0x3
c000272d:	47                   	inc    edi
c000272e:	83 ff 03             	cmp    edi,0x3
c0002731:	76 d1                	jbe    c0002704 <find_volume+0x14d>
c0002733:	83 c4 3c             	add    esp,0x3c
c0002736:	5b                   	pop    ebx
c0002737:	5e                   	pop    esi
c0002738:	5f                   	pop    edi
c0002739:	5d                   	pop    ebp
c000273a:	c3                   	ret    

c000273b <mount_volume>:
c000273b:	55                   	push   ebp
c000273c:	57                   	push   edi
c000273d:	89 cf                	mov    edi,ecx
c000273f:	56                   	push   esi
c0002740:	53                   	push   ebx
c0002741:	bb 0b 00 00 00       	mov    ebx,0xb
c0002746:	83 ec 3c             	sub    esp,0x3c
c0002749:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000274f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002753:	e8 35 fb ff ff       	call   c000228d <get_ldnumber>
c0002758:	85 c0                	test   eax,eax
c000275a:	0f 88 3a 05 00 00    	js     c0002c9a <mount_volume+0x55f>
c0002760:	8b 2c 85 40 ba 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc45c0]
c0002767:	89 c6                	mov    esi,eax
c0002769:	bb 0c 00 00 00       	mov    ebx,0xc
c000276e:	85 ed                	test   ebp,ebp
c0002770:	0f 84 24 05 00 00    	je     c0002c9a <mount_volume+0x55f>
c0002776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000277a:	83 e7 fe             	and    edi,0xfffffffe
c000277d:	89 2a                	mov    DWORD PTR [edx],ebp
c000277f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002783:	74 32                	je     c00027b7 <mount_volume+0x7c>
c0002785:	83 ec 0c             	sub    esp,0xc
c0002788:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000278c:	50                   	push   eax
c000278d:	e8 c8 f4 ff ff       	call   c0001c5a <disk_status>
c0002792:	83 c4 10             	add    esp,0x10
c0002795:	a8 01                	test   al,0x1
c0002797:	75 1e                	jne    c00027b7 <mount_volume+0x7c>
c0002799:	31 db                	xor    ebx,ebx
c000279b:	89 f9                	mov    ecx,edi
c000279d:	84 c9                	test   cl,cl
c000279f:	0f 84 f5 04 00 00    	je     c0002c9a <mount_volume+0x55f>
c00027a5:	a8 04                	test   al,0x4
c00027a7:	0f 84 ed 04 00 00    	je     c0002c9a <mount_volume+0x55f>
c00027ad:	bb 0a 00 00 00       	mov    ebx,0xa
c00027b2:	e9 e3 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c00027b7:	83 ec 0c             	sub    esp,0xc
c00027ba:	89 f0                	mov    eax,esi
c00027bc:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00027c0:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00027c3:	0f b6 f0             	movzx  esi,al
c00027c6:	bb 03 00 00 00       	mov    ebx,0x3
c00027cb:	56                   	push   esi
c00027cc:	e8 8c f4 ff ff       	call   c0001c5d <disk_initialize>
c00027d1:	83 c4 10             	add    esp,0x10
c00027d4:	a8 01                	test   al,0x1
c00027d6:	0f 85 be 04 00 00    	jne    c0002c9a <mount_volume+0x55f>
c00027dc:	89 f9                	mov    ecx,edi
c00027de:	84 c9                	test   cl,cl
c00027e0:	74 04                	je     c00027e6 <mount_volume+0xab>
c00027e2:	a8 04                	test   al,0x4
c00027e4:	75 c7                	jne    c00027ad <mount_volume+0x72>
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 e8                	mov    eax,ebp
c00027ea:	e8 c8 fd ff ff       	call   c00025b7 <find_volume>
c00027ef:	83 f8 04             	cmp    eax,0x4
c00027f2:	75 0a                	jne    c00027fe <mount_volume+0xc3>
c00027f4:	bb 01 00 00 00       	mov    ebx,0x1
c00027f9:	e9 9c 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c00027fe:	83 f8 01             	cmp    eax,0x1
c0002801:	76 0a                	jbe    c000280d <mount_volume+0xd2>
c0002803:	bb 0d 00 00 00       	mov    ebx,0xd
c0002808:	e9 8d 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c000280d:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002810:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002817:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000281b:	75 17                	jne    c0002834 <mount_volume+0xf9>
c000281d:	b8 0b 00 00 00       	mov    eax,0xb
c0002822:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002827:	75 da                	jne    c0002803 <mount_volume+0xc8>
c0002829:	40                   	inc    eax
c000282a:	83 f8 40             	cmp    eax,0x40
c000282d:	75 f3                	jne    c0002822 <mount_volume+0xe7>
c000282f:	e9 5a 02 00 00       	jmp    c0002a8e <mount_volume+0x353>
c0002834:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002837:	e8 6f f4 ff ff       	call   c0001cab <ld_word>
c000283c:	66 3d 00 02          	cmp    ax,0x200
c0002840:	75 c1                	jne    c0002803 <mount_volume+0xc8>
c0002842:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002845:	e8 61 f4 ff ff       	call   c0001cab <ld_word>
c000284a:	0f b7 c0             	movzx  eax,ax
c000284d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002851:	85 c0                	test   eax,eax
c0002853:	75 0c                	jne    c0002861 <mount_volume+0x126>
c0002855:	8d 45 78             	lea    eax,[ebp+0x78]
c0002858:	e8 5b f4 ff ff       	call   c0001cb8 <ld_dword>
c000285d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002865:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002868:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000286b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000286f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002872:	48                   	dec    eax
c0002873:	3c 01                	cmp    al,0x1
c0002875:	77 8c                	ja     c0002803 <mount_volume+0xc8>
c0002877:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000287b:	89 c3                	mov    ebx,eax
c000287d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002881:	66 85 c0             	test   ax,ax
c0002884:	0f 84 79 ff ff ff    	je     c0002803 <mount_volume+0xc8>
c000288a:	8d 40 ff             	lea    eax,[eax-0x1]
c000288d:	85 d8                	test   eax,ebx
c000288f:	0f 85 6e ff ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002895:	8d 45 65             	lea    eax,[ebp+0x65]
c0002898:	e8 0e f4 ff ff       	call   c0001cab <ld_word>
c000289d:	89 c7                	mov    edi,eax
c000289f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00028a3:	a8 0f                	test   al,0xf
c00028a5:	0f 85 58 ff ff ff    	jne    c0002803 <mount_volume+0xc8>
c00028ab:	8d 45 67             	lea    eax,[ebp+0x67]
c00028ae:	e8 f8 f3 ff ff       	call   c0001cab <ld_word>
c00028b3:	0f b7 f0             	movzx  esi,ax
c00028b6:	85 f6                	test   esi,esi
c00028b8:	75 0a                	jne    c00028c4 <mount_volume+0x189>
c00028ba:	8d 45 74             	lea    eax,[ebp+0x74]
c00028bd:	e8 f6 f3 ff ff       	call   c0001cb8 <ld_dword>
c00028c2:	89 c6                	mov    esi,eax
c00028c4:	8d 45 62             	lea    eax,[ebp+0x62]
c00028c7:	e8 df f3 ff ff       	call   c0001cab <ld_word>
c00028cc:	66 85 c0             	test   ax,ax
c00028cf:	0f 84 2e ff ff ff    	je     c0002803 <mount_volume+0xc8>
c00028d5:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00028da:	0f b7 c8             	movzx  ecx,ax
c00028dd:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028e6:	89 fa                	mov    edx,edi
c00028e8:	66 c1 ea 04          	shr    dx,0x4
c00028ec:	0f b7 d2             	movzx  edx,dx
c00028ef:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028f3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028fa:	39 c6                	cmp    esi,eax
c00028fc:	0f 82 01 ff ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002902:	29 c6                	sub    esi,eax
c0002904:	31 d2                	xor    edx,edx
c0002906:	89 f0                	mov    eax,esi
c0002908:	f7 f3                	div    ebx
c000290a:	39 de                	cmp    esi,ebx
c000290c:	0f 82 f1 fe ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002912:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002917:	0f 87 e6 fe ff ff    	ja     c0002803 <mount_volume+0xc8>
c000291d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002922:	0f 86 63 03 00 00    	jbe    c0002c8b <mount_volume+0x550>
c0002928:	bb 03 00 00 00       	mov    ebx,0x3
c000292d:	8d 70 02             	lea    esi,[eax+0x2]
c0002930:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002938:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000293b:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000293e:	31 d2                	xor    edx,edx
c0002940:	89 c8                	mov    eax,ecx
c0002942:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002945:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002949:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000294d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002951:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002955:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002958:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000295b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000295f:	31 d2                	xor    edx,edx
c0002961:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002965:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002969:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000296c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000296f:	83 fb 03             	cmp    ebx,0x3
c0002972:	75 2b                	jne    c000299f <mount_volume+0x264>
c0002974:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002977:	e8 2f f3 ff ff       	call   c0001cab <ld_word>
c000297c:	66 09 c7             	or     di,ax
c000297f:	0f 85 7e fe ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002985:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000298b:	c1 e6 02             	shl    esi,0x2
c000298e:	e8 25 f3 ff ff       	call   c0001cb8 <ld_dword>
c0002993:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000299a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000299d:	eb 30                	jmp    c00029cf <mount_volume+0x294>
c000299f:	66 85 ff             	test   di,di
c00029a2:	0f 84 5b fe ff ff    	je     c0002803 <mount_volume+0xc8>
c00029a8:	31 d2                	xor    edx,edx
c00029aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029ae:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00029b2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00029b6:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00029b9:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c00029bc:	83 fb 02             	cmp    ebx,0x2
c00029bf:	75 04                	jne    c00029c5 <mount_volume+0x28a>
c00029c1:	01 f6                	add    esi,esi
c00029c3:	eb 0a                	jmp    c00029cf <mount_volume+0x294>
c00029c5:	8d 04 76             	lea    eax,[esi+esi*2]
c00029c8:	83 e6 01             	and    esi,0x1
c00029cb:	d1 e8                	shr    eax,1
c00029cd:	01 c6                	add    esi,eax
c00029cf:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00029d5:	c1 ee 09             	shr    esi,0x9
c00029d8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00029dc:	0f 87 21 fe ff ff    	ja     c0002803 <mount_volume+0xc8>
c00029e2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029f0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029f4:	83 fb 03             	cmp    ebx,0x3
c00029f7:	75 7a                	jne    c0002a73 <mount_volume+0x338>
c00029f9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029ff:	e8 a7 f2 ff ff       	call   c0001cab <ld_word>
c0002a04:	66 48                	dec    ax
c0002a06:	75 6b                	jne    c0002a73 <mount_volume+0x338>
c0002a08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002a0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a10:	83 c2 01             	add    edx,0x1
c0002a13:	89 e8                	mov    eax,ebp
c0002a15:	83 d1 00             	adc    ecx,0x0
c0002a18:	e8 6c fa ff ff       	call   c0002489 <move_window>
c0002a1d:	85 c0                	test   eax,eax
c0002a1f:	75 52                	jne    c0002a73 <mount_volume+0x338>
c0002a21:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002a25:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002a2b:	e8 7b f2 ff ff       	call   c0001cab <ld_word>
c0002a30:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a34:	75 3d                	jne    c0002a73 <mount_volume+0x338>
c0002a36:	8d 45 54             	lea    eax,[ebp+0x54]
c0002a39:	e8 7a f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a3e:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a43:	75 2e                	jne    c0002a73 <mount_volume+0x338>
c0002a45:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a4b:	e8 68 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a50:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a55:	75 1c                	jne    c0002a73 <mount_volume+0x338>
c0002a57:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a5d:	e8 56 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a62:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a65:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a6b:	e8 48 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a70:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a73:	66 a1 20 ba 03 c0    	mov    ax,ds:0xc003ba20
c0002a79:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a7c:	40                   	inc    eax
c0002a7d:	31 db                	xor    ebx,ebx
c0002a7f:	66 a3 20 ba 03 c0    	mov    ds:0xc003ba20,ax
c0002a85:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a89:	e9 0c 02 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c0002a8e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a94:	e8 12 f2 ff ff       	call   c0001cab <ld_word>
c0002a99:	66 3d 00 01          	cmp    ax,0x100
c0002a9d:	0f 85 60 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002aa3:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002aaa:	0f 85 53 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002ab0:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002ab6:	e8 15 f2 ff ff       	call   c0001cd0 <ld_qword>
c0002abb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002abf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002ac3:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002ac9:	e8 ea f1 ff ff       	call   c0001cb8 <ld_dword>
c0002ace:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002ad1:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002ad7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002ada:	fe c8                	dec    al
c0002adc:	0f 85 21 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002ae2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002ae9:	bb 01 00 00 00       	mov    ebx,0x1
c0002aee:	d3 e3                	shl    ebx,cl
c0002af0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002af4:	66 85 db             	test   bx,bx
c0002af7:	0f 84 06 fd ff ff    	je     c0002803 <mount_volume+0xc8>
c0002afd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002b03:	e8 b0 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b08:	89 c6                	mov    esi,eax
c0002b0a:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002b0f:	0f 87 ee fc ff ff    	ja     c0002803 <mount_volume+0xc8>
c0002b15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b19:	8d 40 02             	lea    eax,[eax+0x2]
c0002b1c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002b1f:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002b22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b26:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002b29:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002b2f:	e8 84 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b34:	31 d2                	xor    edx,edx
c0002b36:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b3a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b46:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b49:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b4c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b52:	e8 61 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b57:	31 d2                	xor    edx,edx
c0002b59:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b5d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b61:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b65:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b68:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b6b:	0f b7 c3             	movzx  eax,bx
c0002b6e:	31 d2                	xor    edx,edx
c0002b70:	0f af f0             	imul   esi,eax
c0002b73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b77:	89 f0                	mov    eax,esi
c0002b79:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b7d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b81:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b85:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b89:	39 c1                	cmp    ecx,eax
c0002b8b:	89 df                	mov    edi,ebx
c0002b8d:	19 d7                	sbb    edi,edx
c0002b8f:	0f 82 6e fc ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002b95:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b9b:	31 db                	xor    ebx,ebx
c0002b9d:	e8 16 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002ba2:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002ba9:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002bac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002bb4:	85 db                	test   ebx,ebx
c0002bb6:	75 39                	jne    c0002bf1 <mount_volume+0x4b6>
c0002bb8:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bbc:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002bc0:	0f 86 3d fc ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002bc6:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002bc9:	31 ff                	xor    edi,edi
c0002bcb:	89 e8                	mov    eax,ebp
c0002bcd:	e8 72 f3 ff ff       	call   c0001f44 <clst2sect>
c0002bd2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002bd6:	01 c6                	add    esi,eax
c0002bd8:	89 e8                	mov    eax,ebp
c0002bda:	11 d7                	adc    edi,edx
c0002bdc:	89 f2                	mov    edx,esi
c0002bde:	89 f9                	mov    ecx,edi
c0002be0:	e8 a4 f8 ff ff       	call   c0002489 <move_window>
c0002be5:	85 c0                	test   eax,eax
c0002be7:	0f 85 07 fc ff ff    	jne    c00027f4 <mount_volume+0xb9>
c0002bed:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bf1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bf6:	74 0b                	je     c0002c03 <mount_volume+0x4c8>
c0002bf8:	83 c3 20             	add    ebx,0x20
c0002bfb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002c01:	eb b1                	jmp    c0002bb4 <mount_volume+0x479>
c0002c03:	8d 75 54             	lea    esi,[ebp+0x54]
c0002c06:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002c0a:	e8 a9 f0 ff ff       	call   c0001cb8 <ld_dword>
c0002c0f:	89 c3                	mov    ebx,eax
c0002c11:	83 f8 01             	cmp    eax,0x1
c0002c14:	0f 86 e9 fb ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002c1a:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002c1d:	0f 86 e0 fb ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002c23:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002c26:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002c2a:	0f af c2             	imul   eax,edx
c0002c2d:	31 d2                	xor    edx,edx
c0002c2f:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002c32:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002c35:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002c38:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002c3b:	31 c9                	xor    ecx,ecx
c0002c3d:	89 da                	mov    edx,ebx
c0002c3f:	89 e8                	mov    eax,ebp
c0002c41:	c1 ea 07             	shr    edx,0x7
c0002c44:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c47:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c4a:	e8 3a f8 ff ff       	call   c0002489 <move_window>
c0002c4f:	85 c0                	test   eax,eax
c0002c51:	0f 85 9d fb ff ff    	jne    c00027f4 <mount_volume+0xb9>
c0002c57:	89 d8                	mov    eax,ebx
c0002c59:	83 e0 7f             	and    eax,0x7f
c0002c5c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c5f:	e8 54 f0 ff ff       	call   c0001cb8 <ld_dword>
c0002c64:	83 f8 ff             	cmp    eax,0xffffffff
c0002c67:	74 0a                	je     c0002c73 <mount_volume+0x538>
c0002c69:	43                   	inc    ebx
c0002c6a:	39 d8                	cmp    eax,ebx
c0002c6c:	74 cd                	je     c0002c3b <mount_volume+0x500>
c0002c6e:	e9 90 fb ff ff       	jmp    c0002803 <mount_volume+0xc8>
c0002c73:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c7a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c81:	bb 04 00 00 00       	mov    ebx,0x4
c0002c86:	e9 e8 fd ff ff       	jmp    c0002a73 <mount_volume+0x338>
c0002c8b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c90:	19 db                	sbb    ebx,ebx
c0002c92:	83 c3 02             	add    ebx,0x2
c0002c95:	e9 93 fc ff ff       	jmp    c000292d <mount_volume+0x1f2>
c0002c9a:	83 c4 3c             	add    esp,0x3c
c0002c9d:	89 d8                	mov    eax,ebx
c0002c9f:	5b                   	pop    ebx
c0002ca0:	5e                   	pop    esi
c0002ca1:	5f                   	pop    edi
c0002ca2:	5d                   	pop    ebp
c0002ca3:	c3                   	ret    

c0002ca4 <find_bitmap>:
c0002ca4:	55                   	push   ebp
c0002ca5:	57                   	push   edi
c0002ca6:	89 c7                	mov    edi,eax
c0002ca8:	56                   	push   esi
c0002ca9:	8d 72 fe             	lea    esi,[edx-0x2]
c0002cac:	53                   	push   ebx
c0002cad:	83 ec 1c             	sub    esp,0x1c
c0002cb0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002cb3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002cb7:	83 e8 02             	sub    eax,0x2
c0002cba:	39 f0                	cmp    eax,esi
c0002cbc:	77 02                	ja     c0002cc0 <find_bitmap+0x1c>
c0002cbe:	31 f6                	xor    esi,esi
c0002cc0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002cc4:	89 f3                	mov    ebx,esi
c0002cc6:	31 ed                	xor    ebp,ebp
c0002cc8:	31 c9                	xor    ecx,ecx
c0002cca:	89 da                	mov    edx,ebx
c0002ccc:	89 f8                	mov    eax,edi
c0002cce:	c1 ea 0c             	shr    edx,0xc
c0002cd1:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002cd4:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002cd7:	e8 ad f7 ff ff       	call   c0002489 <move_window>
c0002cdc:	85 c0                	test   eax,eax
c0002cde:	75 68                	jne    c0002d48 <find_bitmap+0xa4>
c0002ce0:	89 da                	mov    edx,ebx
c0002ce2:	89 d9                	mov    ecx,ebx
c0002ce4:	c1 ea 03             	shr    edx,0x3
c0002ce7:	83 e1 07             	and    ecx,0x7
c0002cea:	b8 01 00 00 00       	mov    eax,0x1
c0002cef:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cf5:	d3 e0                	shl    eax,cl
c0002cf7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cfa:	83 e9 02             	sub    ecx,0x2
c0002cfd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d01:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002d05:	43                   	inc    ebx
c0002d06:	21 c1                	and    ecx,eax
c0002d08:	d1 e0                	shl    eax,1
c0002d0a:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002d0e:	77 09                	ja     c0002d19 <find_bitmap+0x75>
c0002d10:	31 db                	xor    ebx,ebx
c0002d12:	ba 00 02 00 00       	mov    edx,0x200
c0002d17:	31 c0                	xor    eax,eax
c0002d19:	84 c9                	test   cl,cl
c0002d1b:	75 10                	jne    c0002d2d <find_bitmap+0x89>
c0002d1d:	45                   	inc    ebp
c0002d1e:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002d22:	75 0f                	jne    c0002d33 <find_bitmap+0x8f>
c0002d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d28:	83 c0 02             	add    eax,0x2
c0002d2b:	eb 22                	jmp    c0002d4f <find_bitmap+0xab>
c0002d2d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002d31:	31 ed                	xor    ebp,ebp
c0002d33:	39 de                	cmp    esi,ebx
c0002d35:	74 16                	je     c0002d4d <find_bitmap+0xa9>
c0002d37:	84 c0                	test   al,al
c0002d39:	75 c6                	jne    c0002d01 <find_bitmap+0x5d>
c0002d3b:	42                   	inc    edx
c0002d3c:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d42:	77 84                	ja     c0002cc8 <find_bitmap+0x24>
c0002d44:	b0 01                	mov    al,0x1
c0002d46:	eb b9                	jmp    c0002d01 <find_bitmap+0x5d>
c0002d48:	83 c8 ff             	or     eax,0xffffffff
c0002d4b:	eb 02                	jmp    c0002d4f <find_bitmap+0xab>
c0002d4d:	31 c0                	xor    eax,eax
c0002d4f:	83 c4 1c             	add    esp,0x1c
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	5f                   	pop    edi
c0002d55:	5d                   	pop    ebp
c0002d56:	c3                   	ret    

c0002d57 <change_bitmap>:
c0002d57:	55                   	push   ebp
c0002d58:	89 cd                	mov    ebp,ecx
c0002d5a:	57                   	push   edi
c0002d5b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d5e:	56                   	push   esi
c0002d5f:	89 c7                	mov    edi,eax
c0002d61:	53                   	push   ebx
c0002d62:	89 c8                	mov    eax,ecx
c0002d64:	83 ec 1c             	sub    esp,0x1c
c0002d67:	31 d2                	xor    edx,edx
c0002d69:	89 ce                	mov    esi,ecx
c0002d6b:	c1 e8 0c             	shr    eax,0xc
c0002d6e:	bb 01 00 00 00       	mov    ebx,0x1
c0002d73:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d76:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d79:	c1 ee 03             	shr    esi,0x3
c0002d7c:	83 e1 07             	and    ecx,0x7
c0002d7f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d85:	d3 e3                	shl    ebx,cl
c0002d87:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d8b:	89 c1                	mov    ecx,eax
c0002d8d:	89 d3                	mov    ebx,edx
c0002d8f:	83 c1 01             	add    ecx,0x1
c0002d92:	83 d3 00             	adc    ebx,0x0
c0002d95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d99:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d9d:	89 d1                	mov    ecx,edx
c0002d9f:	89 c2                	mov    edx,eax
c0002da1:	89 f8                	mov    eax,edi
c0002da3:	e8 e1 f6 ff ff       	call   c0002489 <move_window>
c0002da8:	89 c1                	mov    ecx,eax
c0002daa:	85 c0                	test   eax,eax
c0002dac:	75 48                	jne    c0002df6 <change_bitmap+0x9f>
c0002dae:	31 d2                	xor    edx,edx
c0002db0:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002db4:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002db8:	0f 95 c2             	setne  dl
c0002dbb:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002dbf:	74 3c                	je     c0002dfd <change_bitmap+0xa6>
c0002dc1:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002dc5:	4d                   	dec    ebp
c0002dc6:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002dca:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002dce:	74 32                	je     c0002e02 <change_bitmap+0xab>
c0002dd0:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002dd4:	75 d8                	jne    c0002dae <change_bitmap+0x57>
c0002dd6:	8d 46 01             	lea    eax,[esi+0x1]
c0002dd9:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002dde:	89 c3                	mov    ebx,eax
c0002de0:	31 f6                	xor    esi,esi
c0002de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002dea:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002df0:	74 99                	je     c0002d8b <change_bitmap+0x34>
c0002df2:	89 de                	mov    esi,ebx
c0002df4:	eb b8                	jmp    c0002dae <change_bitmap+0x57>
c0002df6:	b9 01 00 00 00       	mov    ecx,0x1
c0002dfb:	eb 05                	jmp    c0002e02 <change_bitmap+0xab>
c0002dfd:	b9 02 00 00 00       	mov    ecx,0x2
c0002e02:	83 c4 1c             	add    esp,0x1c
c0002e05:	89 c8                	mov    eax,ecx
c0002e07:	5b                   	pop    ebx
c0002e08:	5e                   	pop    esi
c0002e09:	5f                   	pop    edi
c0002e0a:	5d                   	pop    ebp
c0002e0b:	c3                   	ret    

c0002e0c <put_fat>:
c0002e0c:	83 fa 01             	cmp    edx,0x1
c0002e0f:	0f 86 7b 01 00 00    	jbe    c0002f90 <put_fat+0x184>
c0002e15:	55                   	push   ebp
c0002e16:	57                   	push   edi
c0002e17:	89 cf                	mov    edi,ecx
c0002e19:	56                   	push   esi
c0002e1a:	b9 02 00 00 00       	mov    ecx,0x2
c0002e1f:	53                   	push   ebx
c0002e20:	89 c6                	mov    esi,eax
c0002e22:	83 ec 1c             	sub    esp,0x1c
c0002e25:	89 d3                	mov    ebx,edx
c0002e27:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002e2a:	0f 86 68 01 00 00    	jbe    c0002f98 <put_fat+0x18c>
c0002e30:	8a 00                	mov    al,BYTE PTR [eax]
c0002e32:	3c 02                	cmp    al,0x2
c0002e34:	0f 84 c7 00 00 00    	je     c0002f01 <put_fat+0xf5>
c0002e3a:	77 09                	ja     c0002e45 <put_fat+0x39>
c0002e3c:	fe c8                	dec    al
c0002e3e:	74 17                	je     c0002e57 <put_fat+0x4b>
c0002e40:	e9 53 01 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002e45:	b9 02 00 00 00       	mov    ecx,0x2
c0002e4a:	3c 04                	cmp    al,0x4
c0002e4c:	0f 86 e1 00 00 00    	jbe    c0002f33 <put_fat+0x127>
c0002e52:	e9 41 01 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002e57:	89 d5                	mov    ebp,edx
c0002e59:	31 c9                	xor    ecx,ecx
c0002e5b:	d1 ed                	shr    ebp,1
c0002e5d:	89 f0                	mov    eax,esi
c0002e5f:	01 d5                	add    ebp,edx
c0002e61:	89 ea                	mov    edx,ebp
c0002e63:	c1 ea 09             	shr    edx,0x9
c0002e66:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e69:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e6c:	e8 18 f6 ff ff       	call   c0002489 <move_window>
c0002e71:	89 c1                	mov    ecx,eax
c0002e73:	85 c0                	test   eax,eax
c0002e75:	0f 85 1d 01 00 00    	jne    c0002f98 <put_fat+0x18c>
c0002e7b:	8d 46 54             	lea    eax,[esi+0x54]
c0002e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e82:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e85:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e8f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e93:	89 f8                	mov    eax,edi
c0002e95:	83 e3 01             	and    ebx,0x1
c0002e98:	74 0d                	je     c0002ea7 <put_fat+0x9b>
c0002e9a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e9d:	89 fa                	mov    edx,edi
c0002e9f:	83 e0 0f             	and    eax,0xf
c0002ea2:	c1 e2 04             	shl    edx,0x4
c0002ea5:	09 d0                	or     eax,edx
c0002ea7:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002eaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002eae:	31 c9                	xor    ecx,ecx
c0002eb0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb4:	c1 ea 09             	shr    edx,0x9
c0002eb7:	89 f0                	mov    eax,esi
c0002eb9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ebc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebf:	e8 c5 f5 ff ff       	call   c0002489 <move_window>
c0002ec4:	89 c1                	mov    ecx,eax
c0002ec6:	85 c0                	test   eax,eax
c0002ec8:	0f 85 ca 00 00 00    	jne    c0002f98 <put_fat+0x18c>
c0002ece:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ed2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002ed8:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002edc:	85 db                	test   ebx,ebx
c0002ede:	74 07                	je     c0002ee7 <put_fat+0xdb>
c0002ee0:	c1 ef 04             	shr    edi,0x4
c0002ee3:	89 fa                	mov    edx,edi
c0002ee5:	eb 0e                	jmp    c0002ef5 <put_fat+0xe9>
c0002ee7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002eea:	c1 ef 08             	shr    edi,0x8
c0002eed:	83 e2 f0             	and    edx,0xfffffff0
c0002ef0:	83 e7 0f             	and    edi,0xf
c0002ef3:	09 fa                	or     edx,edi
c0002ef5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ef8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002efc:	e9 97 00 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002f01:	31 c9                	xor    ecx,ecx
c0002f03:	c1 ea 08             	shr    edx,0x8
c0002f06:	89 f0                	mov    eax,esi
c0002f08:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f0b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f0e:	e8 76 f5 ff ff       	call   c0002489 <move_window>
c0002f13:	89 c1                	mov    ecx,eax
c0002f15:	85 c0                	test   eax,eax
c0002f17:	75 7f                	jne    c0002f98 <put_fat+0x18c>
c0002f19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1d:	01 db                	add    ebx,ebx
c0002f1f:	0f b7 d7             	movzx  edx,di
c0002f22:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002f28:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002f2c:	e8 ec ed ff ff       	call   c0001d1d <st_word>
c0002f31:	eb 53                	jmp    c0002f86 <put_fat+0x17a>
c0002f33:	31 c9                	xor    ecx,ecx
c0002f35:	c1 ea 07             	shr    edx,0x7
c0002f38:	89 f0                	mov    eax,esi
c0002f3a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f3d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f40:	e8 44 f5 ff ff       	call   c0002489 <move_window>
c0002f45:	89 c1                	mov    ecx,eax
c0002f47:	85 c0                	test   eax,eax
c0002f49:	75 4d                	jne    c0002f98 <put_fat+0x18c>
c0002f4b:	c1 e3 02             	shl    ebx,0x2
c0002f4e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f54:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f57:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f5b:	74 1c                	je     c0002f79 <put_fat+0x16d>
c0002f5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f61:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f67:	89 d8                	mov    eax,ebx
c0002f69:	e8 4a ed ff ff       	call   c0001cb8 <ld_dword>
c0002f6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f72:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f77:	09 c7                	or     edi,eax
c0002f79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f7d:	89 fa                	mov    edx,edi
c0002f7f:	89 d8                	mov    eax,ebx
c0002f81:	e8 9b ed ff ff       	call   c0001d21 <st_dword>
c0002f86:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8e:	eb 08                	jmp    c0002f98 <put_fat+0x18c>
c0002f90:	b9 02 00 00 00       	mov    ecx,0x2
c0002f95:	89 c8                	mov    eax,ecx
c0002f97:	c3                   	ret    
c0002f98:	83 c4 1c             	add    esp,0x1c
c0002f9b:	89 c8                	mov    eax,ecx
c0002f9d:	5b                   	pop    ebx
c0002f9e:	5e                   	pop    esi
c0002f9f:	5f                   	pop    edi
c0002fa0:	5d                   	pop    ebp
c0002fa1:	c3                   	ret    

c0002fa2 <fill_last_frag>:
c0002fa2:	57                   	push   edi
c0002fa3:	89 cf                	mov    edi,ecx
c0002fa5:	56                   	push   esi
c0002fa6:	89 d6                	mov    esi,edx
c0002fa8:	53                   	push   ebx
c0002fa9:	89 c3                	mov    ebx,eax
c0002fab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002fae:	85 c0                	test   eax,eax
c0002fb0:	74 21                	je     c0002fd3 <fill_last_frag+0x31>
c0002fb2:	89 f9                	mov    ecx,edi
c0002fb4:	83 f8 01             	cmp    eax,0x1
c0002fb7:	76 05                	jbe    c0002fbe <fill_last_frag+0x1c>
c0002fb9:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002fbc:	29 c1                	sub    ecx,eax
c0002fbe:	8d 56 01             	lea    edx,[esi+0x1]
c0002fc1:	29 c2                	sub    edx,eax
c0002fc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fc5:	e8 42 fe ff ff       	call   c0002e0c <put_fat>
c0002fca:	85 c0                	test   eax,eax
c0002fcc:	75 05                	jne    c0002fd3 <fill_last_frag+0x31>
c0002fce:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002fd1:	eb d8                	jmp    c0002fab <fill_last_frag+0x9>
c0002fd3:	5b                   	pop    ebx
c0002fd4:	5e                   	pop    esi
c0002fd5:	5f                   	pop    edi
c0002fd6:	c3                   	ret    

c0002fd7 <fill_first_frag>:
c0002fd7:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002fdb:	75 2d                	jne    c000300a <fill_first_frag+0x33>
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	89 c3                	mov    ebx,eax
c0002fe2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fe5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fe8:	01 d7                	add    edi,edx
c0002fea:	39 fa                	cmp    edx,edi
c0002fec:	74 14                	je     c0003002 <fill_first_frag+0x2b>
c0002fee:	8d 72 01             	lea    esi,[edx+0x1]
c0002ff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ff3:	89 f1                	mov    ecx,esi
c0002ff5:	e8 12 fe ff ff       	call   c0002e0c <put_fat>
c0002ffa:	89 f2                	mov    edx,esi
c0002ffc:	85 c0                	test   eax,eax
c0002ffe:	74 ea                	je     c0002fea <fill_first_frag+0x13>
c0003000:	eb 0b                	jmp    c000300d <fill_first_frag+0x36>
c0003002:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003006:	31 c0                	xor    eax,eax
c0003008:	eb 03                	jmp    c000300d <fill_first_frag+0x36>
c000300a:	31 c0                	xor    eax,eax
c000300c:	c3                   	ret    
c000300d:	5b                   	pop    ebx
c000300e:	5e                   	pop    esi
c000300f:	5f                   	pop    edi
c0003010:	c3                   	ret    

c0003011 <get_fat>:
c0003011:	83 fa 01             	cmp    edx,0x1
c0003014:	0f 86 db 01 00 00    	jbe    c00031f5 <get_fat+0x1e4>
c000301a:	55                   	push   ebp
c000301b:	b9 01 00 00 00       	mov    ecx,0x1
c0003020:	57                   	push   edi
c0003021:	56                   	push   esi
c0003022:	53                   	push   ebx
c0003023:	83 ec 1c             	sub    esp,0x1c
c0003026:	8b 38                	mov    edi,DWORD PTR [eax]
c0003028:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c000302b:	0f 86 cc 01 00 00    	jbe    c00031fd <get_fat+0x1ec>
c0003031:	89 c3                	mov    ebx,eax
c0003033:	89 d6                	mov    esi,edx
c0003035:	8a 07                	mov    al,BYTE PTR [edi]
c0003037:	3c 02                	cmp    al,0x2
c0003039:	0f 84 99 00 00 00    	je     c00030d8 <get_fat+0xc7>
c000303f:	77 09                	ja     c000304a <get_fat+0x39>
c0003041:	fe c8                	dec    al
c0003043:	74 1a                	je     c000305f <get_fat+0x4e>
c0003045:	e9 b3 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c000304a:	3c 03                	cmp    al,0x3
c000304c:	0f 84 b5 00 00 00    	je     c0003107 <get_fat+0xf6>
c0003052:	3c 04                	cmp    al,0x4
c0003054:	0f 84 e3 00 00 00    	je     c000313d <get_fat+0x12c>
c000305a:	e9 9e 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c000305f:	89 d3                	mov    ebx,edx
c0003061:	31 c9                	xor    ecx,ecx
c0003063:	d1 eb                	shr    ebx,1
c0003065:	89 f8                	mov    eax,edi
c0003067:	01 d3                	add    ebx,edx
c0003069:	89 da                	mov    edx,ebx
c000306b:	c1 ea 09             	shr    edx,0x9
c000306e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003071:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003074:	e8 10 f4 ff ff       	call   c0002489 <move_window>
c0003079:	85 c0                	test   eax,eax
c000307b:	74 08                	je     c0003085 <get_fat+0x74>
c000307d:	83 c9 ff             	or     ecx,0xffffffff
c0003080:	e9 78 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c0003085:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003088:	31 c9                	xor    ecx,ecx
c000308a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003090:	89 ea                	mov    edx,ebp
c0003092:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003096:	c1 ea 09             	shr    edx,0x9
c0003099:	89 f8                	mov    eax,edi
c000309b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000309e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a1:	e8 e3 f3 ff ff       	call   c0002489 <move_window>
c00030a6:	85 c0                	test   eax,eax
c00030a8:	75 d3                	jne    c000307d <get_fat+0x6c>
c00030aa:	0f b6 c3             	movzx  eax,bl
c00030ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00030b3:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c00030b8:	c1 e3 08             	shl    ebx,0x8
c00030bb:	09 c3                	or     ebx,eax
c00030bd:	89 d9                	mov    ecx,ebx
c00030bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00030c5:	83 e6 01             	and    esi,0x1
c00030c8:	0f 84 2f 01 00 00    	je     c00031fd <get_fat+0x1ec>
c00030ce:	89 d9                	mov    ecx,ebx
c00030d0:	c1 e9 04             	shr    ecx,0x4
c00030d3:	e9 25 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c00030d8:	31 c9                	xor    ecx,ecx
c00030da:	c1 ea 08             	shr    edx,0x8
c00030dd:	89 f8                	mov    eax,edi
c00030df:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030e2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030e5:	e8 9f f3 ff ff       	call   c0002489 <move_window>
c00030ea:	85 c0                	test   eax,eax
c00030ec:	75 8f                	jne    c000307d <get_fat+0x6c>
c00030ee:	01 f6                	add    esi,esi
c00030f0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030f6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030fa:	e8 ac eb ff ff       	call   c0001cab <ld_word>
c00030ff:	0f b7 c8             	movzx  ecx,ax
c0003102:	e9 f6 00 00 00       	jmp    c00031fd <get_fat+0x1ec>
c0003107:	31 c9                	xor    ecx,ecx
c0003109:	c1 ea 07             	shr    edx,0x7
c000310c:	89 f8                	mov    eax,edi
c000310e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003111:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003114:	e8 70 f3 ff ff       	call   c0002489 <move_window>
c0003119:	85 c0                	test   eax,eax
c000311b:	0f 85 5c ff ff ff    	jne    c000307d <get_fat+0x6c>
c0003121:	c1 e6 02             	shl    esi,0x2
c0003124:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000312a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000312e:	e8 85 eb ff ff       	call   c0001cb8 <ld_dword>
c0003133:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003138:	e9 b4 00 00 00       	jmp    c00031f1 <get_fat+0x1e0>
c000313d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003140:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003143:	89 d1                	mov    ecx,edx
c0003145:	09 c1                	or     ecx,eax
c0003147:	74 06                	je     c000314f <get_fat+0x13e>
c0003149:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000314d:	75 0f                	jne    c000315e <get_fat+0x14d>
c000314f:	b9 01 00 00 00       	mov    ecx,0x1
c0003154:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003158:	0f 85 9f 00 00 00    	jne    c00031fd <get_fat+0x1ec>
c000315e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003162:	89 f5                	mov    ebp,esi
c0003164:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003169:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000316c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000316f:	80 f9 02             	cmp    cl,0x2
c0003172:	75 35                	jne    c00031a9 <get_fat+0x198>
c0003174:	83 c0 ff             	add    eax,0xffffffff
c0003177:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000317c:	83 d2 ff             	adc    edx,0xffffffff
c000317f:	31 db                	xor    ebx,ebx
c0003181:	0f ac d0 09          	shrd   eax,edx,0x9
c0003185:	53                   	push   ebx
c0003186:	c1 ea 09             	shr    edx,0x9
c0003189:	51                   	push   ecx
c000318a:	52                   	push   edx
c000318b:	50                   	push   eax
c000318c:	e8 ab b5 01 00       	call   c001e73c <__udivdi3>
c0003191:	83 c4 10             	add    esp,0x10
c0003194:	b9 01 00 00 00       	mov    ecx,0x1
c0003199:	39 c5                	cmp    ebp,eax
c000319b:	77 60                	ja     c00031fd <get_fat+0x1ec>
c000319d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00031a2:	74 59                	je     c00031fd <get_fat+0x1ec>
c00031a4:	8d 4e 01             	lea    ecx,[esi+0x1]
c00031a7:	eb 54                	jmp    c00031fd <get_fat+0x1ec>
c00031a9:	80 f9 03             	cmp    cl,0x3
c00031ac:	75 05                	jne    c00031b3 <get_fat+0x1a2>
c00031ae:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c00031b1:	77 f1                	ja     c00031a4 <get_fat+0x193>
c00031b3:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00031b8:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c00031bc:	75 3f                	jne    c00031fd <get_fat+0x1ec>
c00031be:	31 c9                	xor    ecx,ecx
c00031c0:	89 f2                	mov    edx,esi
c00031c2:	89 f8                	mov    eax,edi
c00031c4:	c1 ea 07             	shr    edx,0x7
c00031c7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00031ca:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00031cd:	e8 b7 f2 ff ff       	call   c0002489 <move_window>
c00031d2:	85 c0                	test   eax,eax
c00031d4:	0f 85 a3 fe ff ff    	jne    c000307d <get_fat+0x6c>
c00031da:	c1 e6 02             	shl    esi,0x2
c00031dd:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031e7:	e8 cc ea ff ff       	call   c0001cb8 <ld_dword>
c00031ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031f1:	89 c1                	mov    ecx,eax
c00031f3:	eb 08                	jmp    c00031fd <get_fat+0x1ec>
c00031f5:	b9 01 00 00 00       	mov    ecx,0x1
c00031fa:	89 c8                	mov    eax,ecx
c00031fc:	c3                   	ret    
c00031fd:	83 c4 1c             	add    esp,0x1c
c0003200:	89 c8                	mov    eax,ecx
c0003202:	5b                   	pop    ebx
c0003203:	5e                   	pop    esi
c0003204:	5f                   	pop    edi
c0003205:	5d                   	pop    ebp
c0003206:	c3                   	ret    

c0003207 <dir_sdi>:
c0003207:	55                   	push   ebp
c0003208:	57                   	push   edi
c0003209:	56                   	push   esi
c000320a:	53                   	push   ebx
c000320b:	89 c3                	mov    ebx,eax
c000320d:	83 ec 1c             	sub    esp,0x1c
c0003210:	8b 38                	mov    edi,DWORD PTR [eax]
c0003212:	31 c0                	xor    eax,eax
c0003214:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003217:	0f 94 c0             	sete   al
c000321a:	48                   	dec    eax
c000321b:	25 00 00 20 f0       	and    eax,0xf0200000
c0003220:	05 00 00 00 10       	add    eax,0x10000000
c0003225:	39 d0                	cmp    eax,edx
c0003227:	77 0a                	ja     c0003233 <dir_sdi+0x2c>
c0003229:	b8 02 00 00 00       	mov    eax,0x2
c000322e:	e9 c4 00 00 00       	jmp    c00032f7 <dir_sdi+0xf0>
c0003233:	89 d6                	mov    esi,edx
c0003235:	f6 c2 1f             	test   dl,0x1f
c0003238:	75 ef                	jne    c0003229 <dir_sdi+0x22>
c000323a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000323d:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003240:	85 c9                	test   ecx,ecx
c0003242:	75 2d                	jne    c0003271 <dir_sdi+0x6a>
c0003244:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003247:	77 1b                	ja     c0003264 <dir_sdi+0x5d>
c0003249:	89 f2                	mov    edx,esi
c000324b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000324f:	c1 ea 05             	shr    edx,0x5
c0003252:	39 c2                	cmp    edx,eax
c0003254:	73 d3                	jae    c0003229 <dir_sdi+0x22>
c0003256:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003259:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000325c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003262:	eb 4b                	jmp    c00032af <dir_sdi+0xa8>
c0003264:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003267:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000326b:	85 c0                	test   eax,eax
c000326d:	74 da                	je     c0003249 <dir_sdi+0x42>
c000326f:	89 c1                	mov    ecx,eax
c0003271:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003275:	c1 e5 09             	shl    ebp,0x9
c0003278:	89 ca                	mov    edx,ecx
c000327a:	39 ee                	cmp    esi,ebp
c000327c:	72 1c                	jb     c000329a <dir_sdi+0x93>
c000327e:	89 d8                	mov    eax,ebx
c0003280:	e8 8c fd ff ff       	call   c0003011 <get_fat>
c0003285:	89 c1                	mov    ecx,eax
c0003287:	83 f8 ff             	cmp    eax,0xffffffff
c000328a:	74 66                	je     c00032f2 <dir_sdi+0xeb>
c000328c:	83 f8 01             	cmp    eax,0x1
c000328f:	76 98                	jbe    c0003229 <dir_sdi+0x22>
c0003291:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003294:	76 93                	jbe    c0003229 <dir_sdi+0x22>
c0003296:	29 ee                	sub    esi,ebp
c0003298:	eb de                	jmp    c0003278 <dir_sdi+0x71>
c000329a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329e:	89 f8                	mov    eax,edi
c00032a0:	e8 9f ec ff ff       	call   c0001f44 <clst2sect>
c00032a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00032a9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032ac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032af:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00032b2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00032b5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00032b8:	89 d1                	mov    ecx,edx
c00032ba:	09 c1                	or     ecx,eax
c00032bc:	0f 84 67 ff ff ff    	je     c0003229 <dir_sdi+0x22>
c00032c2:	89 f1                	mov    ecx,esi
c00032c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00032cc:	c1 e9 09             	shr    ecx,0x9
c00032cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00032d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00032db:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032de:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032e4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032e7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032eb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ee:	31 c0                	xor    eax,eax
c00032f0:	eb 05                	jmp    c00032f7 <dir_sdi+0xf0>
c00032f2:	b8 01 00 00 00       	mov    eax,0x1
c00032f7:	83 c4 1c             	add    esp,0x1c
c00032fa:	5b                   	pop    ebx
c00032fb:	5e                   	pop    esi
c00032fc:	5f                   	pop    edi
c00032fd:	5d                   	pop    ebp
c00032fe:	c3                   	ret    

c00032ff <create_chain>:
c00032ff:	55                   	push   ebp
c0003300:	89 c5                	mov    ebp,eax
c0003302:	57                   	push   edi
c0003303:	56                   	push   esi
c0003304:	53                   	push   ebx
c0003305:	83 ec 1c             	sub    esp,0x1c
c0003308:	85 d2                	test   edx,edx
c000330a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000330e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003310:	75 0e                	jne    c0003320 <create_chain+0x21>
c0003312:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003315:	85 ff                	test   edi,edi
c0003317:	74 39                	je     c0003352 <create_chain+0x53>
c0003319:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c000331c:	77 39                	ja     c0003357 <create_chain+0x58>
c000331e:	eb 32                	jmp    c0003352 <create_chain+0x53>
c0003320:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003324:	e8 e8 fc ff ff       	call   c0003011 <get_fat>
c0003329:	89 c3                	mov    ebx,eax
c000332b:	83 f8 01             	cmp    eax,0x1
c000332e:	77 0a                	ja     c000333a <create_chain+0x3b>
c0003330:	bb 01 00 00 00       	mov    ebx,0x1
c0003335:	e9 ba 01 00 00       	jmp    c00034f4 <create_chain+0x1f5>
c000333a:	83 f8 ff             	cmp    eax,0xffffffff
c000333d:	0f 84 62 01 00 00    	je     c00034a5 <create_chain+0x1a6>
c0003343:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003346:	0f 87 a8 01 00 00    	ja     c00034f4 <create_chain+0x1f5>
c000334c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003350:	eb 05                	jmp    c0003357 <create_chain+0x58>
c0003352:	bf 01 00 00 00       	mov    edi,0x1
c0003357:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000335b:	75 07                	jne    c0003364 <create_chain+0x65>
c000335d:	31 db                	xor    ebx,ebx
c000335f:	e9 90 01 00 00       	jmp    c00034f4 <create_chain+0x1f5>
c0003364:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003367:	75 74                	jne    c00033dd <create_chain+0xde>
c0003369:	b9 01 00 00 00       	mov    ecx,0x1
c000336e:	89 fa                	mov    edx,edi
c0003370:	89 f0                	mov    eax,esi
c0003372:	e8 2d f9 ff ff       	call   c0002ca4 <find_bitmap>
c0003377:	89 c3                	mov    ebx,eax
c0003379:	8d 40 ff             	lea    eax,[eax-0x1]
c000337c:	83 f8 fd             	cmp    eax,0xfffffffd
c000337f:	0f 87 6f 01 00 00    	ja     c00034f4 <create_chain+0x1f5>
c0003385:	83 ec 0c             	sub    esp,0xc
c0003388:	b9 01 00 00 00       	mov    ecx,0x1
c000338d:	6a 01                	push   0x1
c000338f:	89 da                	mov    edx,ebx
c0003391:	89 f0                	mov    eax,esi
c0003393:	e8 bf f9 ff ff       	call   c0002d57 <change_bitmap>
c0003398:	83 c4 10             	add    esp,0x10
c000339b:	83 f8 02             	cmp    eax,0x2
c000339e:	74 90                	je     c0003330 <create_chain+0x31>
c00033a0:	83 f8 01             	cmp    eax,0x1
c00033a3:	0f 84 fc 00 00 00    	je     c00034a5 <create_chain+0x1a6>
c00033a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ae:	75 09                	jne    c00033b9 <create_chain+0xba>
c00033b0:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c00033b4:	e9 0c 01 00 00       	jmp    c00034c5 <create_chain+0x1c6>
c00033b9:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00033bd:	0f 85 e7 00 00 00    	jne    c00034aa <create_chain+0x1ab>
c00033c3:	8d 57 01             	lea    edx,[edi+0x1]
c00033c6:	39 da                	cmp    edx,ebx
c00033c8:	0f 84 f7 00 00 00    	je     c00034c5 <create_chain+0x1c6>
c00033ce:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00033d1:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00033d5:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00033d8:	e9 cd 00 00 00       	jmp    c00034aa <create_chain+0x1ab>
c00033dd:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033e1:	75 41                	jne    c0003424 <create_chain+0x125>
c00033e3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033e6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e9:	77 05                	ja     c00033f0 <create_chain+0xf1>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 18 fc ff ff       	call   c0003011 <get_fat>
c00033f9:	83 f8 01             	cmp    eax,0x1
c00033fc:	0f 84 2e ff ff ff    	je     c0003330 <create_chain+0x31>
c0003402:	83 f8 ff             	cmp    eax,0xffffffff
c0003405:	0f 84 9a 00 00 00    	je     c00034a5 <create_chain+0x1a6>
c000340b:	85 c0                	test   eax,eax
c000340d:	74 11                	je     c0003420 <create_chain+0x121>
c000340f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	76 0d                	jbe    c0003424 <create_chain+0x125>
c0003417:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000341a:	76 08                	jbe    c0003424 <create_chain+0x125>
c000341c:	89 c7                	mov    edi,eax
c000341e:	eb 04                	jmp    c0003424 <create_chain+0x125>
c0003420:	85 db                	test   ebx,ebx
c0003422:	75 38                	jne    c000345c <create_chain+0x15d>
c0003424:	89 fb                	mov    ebx,edi
c0003426:	43                   	inc    ebx
c0003427:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000342a:	77 0e                	ja     c000343a <create_chain+0x13b>
c000342c:	83 ff 01             	cmp    edi,0x1
c000342f:	0f 86 28 ff ff ff    	jbe    c000335d <create_chain+0x5e>
c0003435:	bb 02 00 00 00       	mov    ebx,0x2
c000343a:	89 da                	mov    edx,ebx
c000343c:	89 e8                	mov    eax,ebp
c000343e:	e8 ce fb ff ff       	call   c0003011 <get_fat>
c0003443:	85 c0                	test   eax,eax
c0003445:	74 15                	je     c000345c <create_chain+0x15d>
c0003447:	83 f8 01             	cmp    eax,0x1
c000344a:	0f 84 e0 fe ff ff    	je     c0003330 <create_chain+0x31>
c0003450:	40                   	inc    eax
c0003451:	74 52                	je     c00034a5 <create_chain+0x1a6>
c0003453:	39 fb                	cmp    ebx,edi
c0003455:	75 cf                	jne    c0003426 <create_chain+0x127>
c0003457:	e9 01 ff ff ff       	jmp    c000335d <create_chain+0x5e>
c000345c:	83 c9 ff             	or     ecx,0xffffffff
c000345f:	89 da                	mov    edx,ebx
c0003461:	89 f0                	mov    eax,esi
c0003463:	e8 a4 f9 ff ff       	call   c0002e0c <put_fat>
c0003468:	85 c0                	test   eax,eax
c000346a:	75 32                	jne    c000349e <create_chain+0x19f>
c000346c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003471:	74 11                	je     c0003484 <create_chain+0x185>
c0003473:	89 d9                	mov    ecx,ebx
c0003475:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003479:	89 f0                	mov    eax,esi
c000347b:	e8 8c f9 ff ff       	call   c0002e0c <put_fat>
c0003480:	85 c0                	test   eax,eax
c0003482:	75 1a                	jne    c000349e <create_chain+0x19f>
c0003484:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003487:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000348a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000348d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003490:	39 d0                	cmp    eax,edx
c0003492:	77 04                	ja     c0003498 <create_chain+0x199>
c0003494:	48                   	dec    eax
c0003495:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003498:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000349c:	eb 56                	jmp    c00034f4 <create_chain+0x1f5>
c000349e:	48                   	dec    eax
c000349f:	0f 85 8b fe ff ff    	jne    c0003330 <create_chain+0x31>
c00034a5:	83 cb ff             	or     ebx,0xffffffff
c00034a8:	eb 4a                	jmp    c00034f4 <create_chain+0x1f5>
c00034aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034ae:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00034b1:	41                   	inc    ecx
c00034b2:	39 d9                	cmp    ecx,ebx
c00034b4:	75 19                	jne    c00034cf <create_chain+0x1d0>
c00034b6:	b9 02 00 00 00       	mov    ecx,0x2
c00034bb:	85 d2                	test   edx,edx
c00034bd:	74 03                	je     c00034c2 <create_chain+0x1c3>
c00034bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00034c2:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00034c5:	85 c0                	test   eax,eax
c00034c7:	0f 85 63 fe ff ff    	jne    c0003330 <create_chain+0x31>
c00034cd:	eb b5                	jmp    c0003484 <create_chain+0x185>
c00034cf:	85 d2                	test   edx,edx
c00034d1:	75 07                	jne    c00034da <create_chain+0x1db>
c00034d3:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034da:	89 d9                	mov    ecx,ebx
c00034dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034e0:	89 e8                	mov    eax,ebp
c00034e2:	e8 bb fa ff ff       	call   c0002fa2 <fill_last_frag>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	75 b3                	jne    c000349e <create_chain+0x19f>
c00034eb:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034f2:	eb 90                	jmp    c0003484 <create_chain+0x185>
c00034f4:	83 c4 1c             	add    esp,0x1c
c00034f7:	89 d8                	mov    eax,ebx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <remove_chain>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	83 ec 1c             	sub    esp,0x1c
c0003505:	83 fa 01             	cmp    edx,0x1
c0003508:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000350c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000350e:	77 0a                	ja     c000351a <remove_chain+0x1c>
c0003510:	b8 02 00 00 00       	mov    eax,0x2
c0003515:	e9 24 01 00 00       	jmp    c000363e <remove_chain+0x140>
c000351a:	89 d6                	mov    esi,edx
c000351c:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000351f:	76 ef                	jbe    c0003510 <remove_chain+0x12>
c0003521:	89 c7                	mov    edi,eax
c0003523:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003528:	75 06                	jne    c0003530 <remove_chain+0x32>
c000352a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000352e:	eb 54                	jmp    c0003584 <remove_chain+0x86>
c0003530:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003533:	75 06                	jne    c000353b <remove_chain+0x3d>
c0003535:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003539:	74 ef                	je     c000352a <remove_chain+0x2c>
c000353b:	83 c9 ff             	or     ecx,0xffffffff
c000353e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003542:	89 d8                	mov    eax,ebx
c0003544:	e8 c3 f8 ff ff       	call   c0002e0c <put_fat>
c0003549:	85 c0                	test   eax,eax
c000354b:	74 dd                	je     c000352a <remove_chain+0x2c>
c000354d:	e9 ec 00 00 00       	jmp    c000363e <remove_chain+0x140>
c0003552:	83 f8 01             	cmp    eax,0x1
c0003555:	74 b9                	je     c0003510 <remove_chain+0x12>
c0003557:	83 f8 ff             	cmp    eax,0xffffffff
c000355a:	74 6d                	je     c00035c9 <remove_chain+0xcb>
c000355c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000355f:	75 6f                	jne    c00035d0 <remove_chain+0xd2>
c0003561:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003564:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003567:	8d 51 fe             	lea    edx,[ecx-0x2]
c000356a:	39 d0                	cmp    eax,edx
c000356c:	73 08                	jae    c0003576 <remove_chain+0x78>
c000356e:	40                   	inc    eax
c000356f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003573:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003576:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003579:	39 e9                	cmp    ecx,ebp
c000357b:	75 64                	jne    c00035e1 <remove_chain+0xe3>
c000357d:	89 ee                	mov    esi,ebp
c000357f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003582:	76 0f                	jbe    c0003593 <remove_chain+0x95>
c0003584:	89 f2                	mov    edx,esi
c0003586:	89 f8                	mov    eax,edi
c0003588:	e8 84 fa ff ff       	call   c0003011 <get_fat>
c000358d:	89 c5                	mov    ebp,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	75 bf                	jne    c0003552 <remove_chain+0x54>
c0003593:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003596:	0f 85 a0 00 00 00    	jne    c000363c <remove_chain+0x13e>
c000359c:	eb 6c                	jmp    c000360a <remove_chain+0x10c>
c000359e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00035a1:	84 c0                	test   al,al
c00035a3:	75 7d                	jne    c0003622 <remove_chain+0x124>
c00035a5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00035a8:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c00035ac:	0f 84 86 00 00 00    	je     c0003638 <remove_chain+0x13a>
c00035b2:	89 da                	mov    edx,ebx
c00035b4:	89 f8                	mov    eax,edi
c00035b6:	e8 56 fa ff ff       	call   c0003011 <get_fat>
c00035bb:	83 f8 01             	cmp    eax,0x1
c00035be:	0f 86 4c ff ff ff    	jbe    c0003510 <remove_chain+0x12>
c00035c4:	83 f8 ff             	cmp    eax,0xffffffff
c00035c7:	75 4e                	jne    c0003617 <remove_chain+0x119>
c00035c9:	b8 01 00 00 00       	mov    eax,0x1
c00035ce:	eb 6e                	jmp    c000363e <remove_chain+0x140>
c00035d0:	31 c9                	xor    ecx,ecx
c00035d2:	89 f2                	mov    edx,esi
c00035d4:	89 d8                	mov    eax,ebx
c00035d6:	e8 31 f8 ff ff       	call   c0002e0c <put_fat>
c00035db:	85 c0                	test   eax,eax
c00035dd:	74 82                	je     c0003561 <remove_chain+0x63>
c00035df:	eb 5d                	jmp    c000363e <remove_chain+0x140>
c00035e1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035e4:	75 1b                	jne    c0003601 <remove_chain+0x103>
c00035e6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035ea:	89 d8                	mov    eax,ebx
c00035ec:	83 ec 0c             	sub    esp,0xc
c00035ef:	6a 00                	push   0x0
c00035f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035f5:	e8 5d f7 ff ff       	call   c0002d57 <change_bitmap>
c00035fa:	83 c4 10             	add    esp,0x10
c00035fd:	85 c0                	test   eax,eax
c00035ff:	75 3d                	jne    c000363e <remove_chain+0x140>
c0003601:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003605:	e9 73 ff ff ff       	jmp    c000357d <remove_chain+0x7f>
c000360a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000360f:	75 8d                	jne    c000359e <remove_chain+0xa0>
c0003611:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003615:	eb 25                	jmp    c000363c <remove_chain+0x13e>
c0003617:	8d 53 01             	lea    edx,[ebx+0x1]
c000361a:	89 c3                	mov    ebx,eax
c000361c:	39 c2                	cmp    edx,eax
c000361e:	74 88                	je     c00035a8 <remove_chain+0xaa>
c0003620:	eb 1a                	jmp    c000363c <remove_chain+0x13e>
c0003622:	3c 03                	cmp    al,0x3
c0003624:	75 16                	jne    c000363c <remove_chain+0x13e>
c0003626:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003629:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000362d:	77 0d                	ja     c000363c <remove_chain+0x13e>
c000362f:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003632:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003636:	72 04                	jb     c000363c <remove_chain+0x13e>
c0003638:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000363c:	31 c0                	xor    eax,eax
c000363e:	83 c4 1c             	add    esp,0x1c
c0003641:	5b                   	pop    ebx
c0003642:	5e                   	pop    esi
c0003643:	5f                   	pop    edi
c0003644:	5d                   	pop    ebp
c0003645:	c3                   	ret    

c0003646 <dir_clear>:
c0003646:	55                   	push   ebp
c0003647:	57                   	push   edi
c0003648:	56                   	push   esi
c0003649:	89 c6                	mov    esi,eax
c000364b:	53                   	push   ebx
c000364c:	83 ec 1c             	sub    esp,0x1c
c000364f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003653:	e8 9d ed ff ff       	call   c00023f5 <sync_window>
c0003658:	85 c0                	test   eax,eax
c000365a:	0f 85 de 00 00 00    	jne    c000373e <dir_clear+0xf8>
c0003660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003664:	89 f0                	mov    eax,esi
c0003666:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003669:	e8 d6 e8 ff ff       	call   c0001f44 <clst2sect>
c000366e:	b9 00 02 00 00       	mov    ecx,0x200
c0003673:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003677:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000367b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000367e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003681:	89 e8                	mov    eax,ebp
c0003683:	31 d2                	xor    edx,edx
c0003685:	e8 b5 e6 ff ff       	call   c0001d3f <mem_set>
c000368a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000368e:	c1 e3 09             	shl    ebx,0x9
c0003691:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003697:	76 1f                	jbe    c00036b8 <dir_clear+0x72>
c0003699:	bb 00 80 00 00       	mov    ebx,0x8000
c000369e:	eb 18                	jmp    c00036b8 <dir_clear+0x72>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	53                   	push   ebx
c00036a4:	e8 35 4e 00 00       	call   c00084de <ff_memalloc>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	89 c7                	mov    edi,eax
c00036ae:	85 c0                	test   eax,eax
c00036b0:	0f 85 8f 00 00 00    	jne    c0003745 <dir_clear+0xff>
c00036b6:	d1 eb                	shr    ebx,1
c00036b8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00036be:	77 e0                	ja     c00036a0 <dir_clear+0x5a>
c00036c0:	31 db                	xor    ebx,ebx
c00036c2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036c6:	39 d8                	cmp    eax,ebx
c00036c8:	76 66                	jbe    c0003730 <dir_clear+0xea>
c00036ca:	83 ec 0c             	sub    esp,0xc
c00036cd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036d1:	6a 01                	push   0x1
c00036d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036db:	55                   	push   ebp
c00036dc:	50                   	push   eax
c00036dd:	e8 94 e5 ff ff       	call   c0001c76 <disk_write>
c00036e2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036e7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036ec:	83 c4 20             	add    esp,0x20
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 3d                	jne    c0003730 <dir_clear+0xea>
c00036f3:	43                   	inc    ebx
c00036f4:	eb cc                	jmp    c00036c2 <dir_clear+0x7c>
c00036f6:	83 ec 0c             	sub    esp,0xc
c00036f9:	31 d2                	xor    edx,edx
c00036fb:	55                   	push   ebp
c00036fc:	89 d8                	mov    eax,ebx
c00036fe:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003702:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003706:	52                   	push   edx
c0003707:	50                   	push   eax
c0003708:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000370c:	57                   	push   edi
c000370d:	50                   	push   eax
c000370e:	e8 63 e5 ff ff       	call   c0001c76 <disk_write>
c0003713:	83 c4 20             	add    esp,0x20
c0003716:	85 c0                	test   eax,eax
c0003718:	75 0a                	jne    c0003724 <dir_clear+0xde>
c000371a:	01 eb                	add    ebx,ebp
c000371c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003720:	39 d8                	cmp    eax,ebx
c0003722:	77 d2                	ja     c00036f6 <dir_clear+0xb0>
c0003724:	83 ec 0c             	sub    esp,0xc
c0003727:	57                   	push   edi
c0003728:	e8 c7 4d 00 00       	call   c00084f4 <ff_memfree>
c000372d:	83 c4 10             	add    esp,0x10
c0003730:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003734:	39 d8                	cmp    eax,ebx
c0003736:	0f 95 c0             	setne  al
c0003739:	0f b6 c0             	movzx  eax,al
c000373c:	eb 19                	jmp    c0003757 <dir_clear+0x111>
c000373e:	b8 01 00 00 00       	mov    eax,0x1
c0003743:	eb 12                	jmp    c0003757 <dir_clear+0x111>
c0003745:	89 d9                	mov    ecx,ebx
c0003747:	31 d2                	xor    edx,edx
c0003749:	c1 eb 09             	shr    ebx,0x9
c000374c:	e8 ee e5 ff ff       	call   c0001d3f <mem_set>
c0003751:	89 dd                	mov    ebp,ebx
c0003753:	31 db                	xor    ebx,ebx
c0003755:	eb c5                	jmp    c000371c <dir_clear+0xd6>
c0003757:	83 c4 1c             	add    esp,0x1c
c000375a:	5b                   	pop    ebx
c000375b:	5e                   	pop    esi
c000375c:	5f                   	pop    edi
c000375d:	5d                   	pop    ebp
c000375e:	c3                   	ret    

c000375f <dir_next>:
c000375f:	55                   	push   ebp
c0003760:	57                   	push   edi
c0003761:	56                   	push   esi
c0003762:	53                   	push   ebx
c0003763:	89 c3                	mov    ebx,eax
c0003765:	83 ec 1c             	sub    esp,0x1c
c0003768:	8b 28                	mov    ebp,DWORD PTR [eax]
c000376a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000376e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003771:	8d 78 20             	lea    edi,[eax+0x20]
c0003774:	31 c0                	xor    eax,eax
c0003776:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000377a:	0f 94 c0             	sete   al
c000377d:	48                   	dec    eax
c000377e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003783:	05 00 00 00 10       	add    eax,0x10000000
c0003788:	39 f8                	cmp    eax,edi
c000378a:	77 0e                	ja     c000379a <dir_next+0x3b>
c000378c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003793:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000379a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a0:	b8 04 00 00 00       	mov    eax,0x4
c00037a5:	89 ce                	mov    esi,ecx
c00037a7:	09 d6                	or     esi,edx
c00037a9:	0f 84 da 00 00 00    	je     c0003889 <dir_next+0x12a>
c00037af:	89 f8                	mov    eax,edi
c00037b1:	25 ff 01 00 00       	and    eax,0x1ff
c00037b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037ba:	0f 85 b9 00 00 00    	jne    c0003879 <dir_next+0x11a>
c00037c0:	83 c2 01             	add    edx,0x1
c00037c3:	83 d1 00             	adc    ecx,0x0
c00037c6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00037c9:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00037cc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037cf:	85 d2                	test   edx,edx
c00037d1:	75 29                	jne    c00037fc <dir_next+0x9d>
c00037d3:	89 fa                	mov    edx,edi
c00037d5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037d9:	c1 ea 05             	shr    edx,0x5
c00037dc:	39 c2                	cmp    edx,eax
c00037de:	0f 82 95 00 00 00    	jb     c0003879 <dir_next+0x11a>
c00037e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037f2:	b8 04 00 00 00       	mov    eax,0x4
c00037f7:	e9 8d 00 00 00       	jmp    c0003889 <dir_next+0x12a>
c00037fc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003800:	89 f9                	mov    ecx,edi
c0003802:	48                   	dec    eax
c0003803:	c1 e9 09             	shr    ecx,0x9
c0003806:	85 c8                	test   eax,ecx
c0003808:	75 6f                	jne    c0003879 <dir_next+0x11a>
c000380a:	89 d8                	mov    eax,ebx
c000380c:	e8 00 f8 ff ff       	call   c0003011 <get_fat>
c0003811:	89 c6                	mov    esi,eax
c0003813:	83 f8 01             	cmp    eax,0x1
c0003816:	77 07                	ja     c000381f <dir_next+0xc0>
c0003818:	b8 02 00 00 00       	mov    eax,0x2
c000381d:	eb 6a                	jmp    c0003889 <dir_next+0x12a>
c000381f:	83 f8 ff             	cmp    eax,0xffffffff
c0003822:	75 07                	jne    c000382b <dir_next+0xcc>
c0003824:	b8 01 00 00 00       	mov    eax,0x1
c0003829:	eb 5e                	jmp    c0003889 <dir_next+0x12a>
c000382b:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000382e:	77 37                	ja     c0003867 <dir_next+0x108>
c0003830:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003835:	74 ad                	je     c00037e4 <dir_next+0x85>
c0003837:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 be fa ff ff       	call   c00032ff <create_chain>
c0003841:	89 c6                	mov    esi,eax
c0003843:	b8 07 00 00 00       	mov    eax,0x7
c0003848:	85 f6                	test   esi,esi
c000384a:	74 3d                	je     c0003889 <dir_next+0x12a>
c000384c:	83 fe 01             	cmp    esi,0x1
c000384f:	74 c7                	je     c0003818 <dir_next+0xb9>
c0003851:	83 fe ff             	cmp    esi,0xffffffff
c0003854:	74 ce                	je     c0003824 <dir_next+0xc5>
c0003856:	89 f2                	mov    edx,esi
c0003858:	89 e8                	mov    eax,ebp
c000385a:	e8 e7 fd ff ff       	call   c0003646 <dir_clear>
c000385f:	85 c0                	test   eax,eax
c0003861:	75 c1                	jne    c0003824 <dir_next+0xc5>
c0003863:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003867:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000386a:	89 f2                	mov    edx,esi
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 d1 e6 ff ff       	call   c0001f44 <clst2sect>
c0003873:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003876:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000387d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003880:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003884:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003887:	31 c0                	xor    eax,eax
c0003889:	83 c4 1c             	add    esp,0x1c
c000388c:	5b                   	pop    ebx
c000388d:	5e                   	pop    esi
c000388e:	5f                   	pop    edi
c000388f:	5d                   	pop    ebp
c0003890:	c3                   	ret    

c0003891 <load_xdir>:
c0003891:	55                   	push   ebp
c0003892:	57                   	push   edi
c0003893:	56                   	push   esi
c0003894:	89 c6                	mov    esi,eax
c0003896:	53                   	push   ebx
c0003897:	83 ec 1c             	sub    esp,0x1c
c000389a:	8b 00                	mov    eax,DWORD PTR [eax]
c000389c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00038a2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038a5:	e8 df eb ff ff       	call   c0002489 <move_window>
c00038aa:	89 c3                	mov    ebx,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 0c 01 00 00    	jne    c00039c0 <load_xdir+0x12f>
c00038b4:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b7:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c00038ba:	0f 85 fb 00 00 00    	jne    c00039bb <load_xdir+0x12a>
c00038c0:	89 f8                	mov    eax,edi
c00038c2:	b9 20 00 00 00       	mov    ecx,0x20
c00038c7:	e8 5e e4 ff ff       	call   c0001d2a <mem_cpy>
c00038cc:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00038d0:	40                   	inc    eax
c00038d1:	c1 e0 05             	shl    eax,0x5
c00038d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038d8:	83 e8 60             	sub    eax,0x60
c00038db:	3d 00 02 00 00       	cmp    eax,0x200
c00038e0:	0f 87 d5 00 00 00    	ja     c00039bb <load_xdir+0x12a>
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 f0                	mov    eax,esi
c00038ea:	e8 70 fe ff ff       	call   c000375f <dir_next>
c00038ef:	89 c3                	mov    ebx,eax
c00038f1:	83 f8 04             	cmp    eax,0x4
c00038f4:	0f 84 c1 00 00 00    	je     c00039bb <load_xdir+0x12a>
c00038fa:	85 c0                	test   eax,eax
c00038fc:	0f 85 be 00 00 00    	jne    c00039c0 <load_xdir+0x12f>
c0003902:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003905:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003908:	8b 06                	mov    eax,DWORD PTR [esi]
c000390a:	e8 7a eb ff ff       	call   c0002489 <move_window>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	85 c0                	test   eax,eax
c0003913:	0f 85 a7 00 00 00    	jne    c00039c0 <load_xdir+0x12f>
c0003919:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000391c:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000391f:	0f 85 96 00 00 00    	jne    c00039bb <load_xdir+0x12a>
c0003925:	8d 47 20             	lea    eax,[edi+0x20]
c0003928:	b9 20 00 00 00       	mov    ecx,0x20
c000392d:	e8 f8 e3 ff ff       	call   c0001d2a <mem_cpy>
c0003932:	31 d2                	xor    edx,edx
c0003934:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003938:	b9 0f 00 00 00       	mov    ecx,0xf
c000393d:	83 c0 2c             	add    eax,0x2c
c0003940:	f7 f1                	div    ecx
c0003942:	c1 e0 05             	shl    eax,0x5
c0003945:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003949:	77 70                	ja     c00039bb <load_xdir+0x12a>
c000394b:	bd 40 00 00 00       	mov    ebp,0x40
c0003950:	31 d2                	xor    edx,edx
c0003952:	89 f0                	mov    eax,esi
c0003954:	e8 06 fe ff ff       	call   c000375f <dir_next>
c0003959:	89 c3                	mov    ebx,eax
c000395b:	83 f8 04             	cmp    eax,0x4
c000395e:	74 5b                	je     c00039bb <load_xdir+0x12a>
c0003960:	85 c0                	test   eax,eax
c0003962:	75 5c                	jne    c00039c0 <load_xdir+0x12f>
c0003964:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003967:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000396a:	8b 06                	mov    eax,DWORD PTR [esi]
c000396c:	e8 18 eb ff ff       	call   c0002489 <move_window>
c0003971:	89 c3                	mov    ebx,eax
c0003973:	85 c0                	test   eax,eax
c0003975:	75 49                	jne    c00039c0 <load_xdir+0x12f>
c0003977:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000397a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000397d:	75 3c                	jne    c00039bb <load_xdir+0x12a>
c000397f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003985:	77 0d                	ja     c0003994 <load_xdir+0x103>
c0003987:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000398a:	b9 20 00 00 00       	mov    ecx,0x20
c000398f:	e8 96 e3 ff ff       	call   c0001d2a <mem_cpy>
c0003994:	83 c5 20             	add    ebp,0x20
c0003997:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000399b:	77 b3                	ja     c0003950 <load_xdir+0xbf>
c000399d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00039a3:	77 1b                	ja     c00039c0 <load_xdir+0x12f>
c00039a5:	89 f8                	mov    eax,edi
c00039a7:	e8 cd e7 ff ff       	call   c0002179 <xdir_sum>
c00039ac:	89 c1                	mov    ecx,eax
c00039ae:	8d 47 02             	lea    eax,[edi+0x2]
c00039b1:	e8 f5 e2 ff ff       	call   c0001cab <ld_word>
c00039b6:	66 39 c1             	cmp    cx,ax
c00039b9:	74 05                	je     c00039c0 <load_xdir+0x12f>
c00039bb:	bb 02 00 00 00       	mov    ebx,0x2
c00039c0:	83 c4 1c             	add    esp,0x1c
c00039c3:	89 d8                	mov    eax,ebx
c00039c5:	5b                   	pop    ebx
c00039c6:	5e                   	pop    esi
c00039c7:	5f                   	pop    edi
c00039c8:	5d                   	pop    ebp
c00039c9:	c3                   	ret    

c00039ca <load_obj_xdir>:
c00039ca:	53                   	push   ebx
c00039cb:	89 c3                	mov    ebx,eax
c00039cd:	83 ec 08             	sub    esp,0x8
c00039d0:	8b 02                	mov    eax,DWORD PTR [edx]
c00039d2:	89 03                	mov    DWORD PTR [ebx],eax
c00039d4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00039d7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039da:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039dd:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039e0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039ea:	30 c0                	xor    al,al
c00039ec:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039f3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039f6:	89 d8                	mov    eax,ebx
c00039f8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039fb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039fe:	e8 04 f8 ff ff       	call   c0003207 <dir_sdi>
c0003a03:	85 c0                	test   eax,eax
c0003a05:	75 0b                	jne    c0003a12 <load_obj_xdir+0x48>
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	83 c4 08             	add    esp,0x8
c0003a0c:	5b                   	pop    ebx
c0003a0d:	e9 7f fe ff ff       	jmp    c0003891 <load_xdir>
c0003a12:	83 c4 08             	add    esp,0x8
c0003a15:	5b                   	pop    ebx
c0003a16:	c3                   	ret    

c0003a17 <dir_read>:
c0003a17:	55                   	push   ebp
c0003a18:	bd 04 00 00 00       	mov    ebp,0x4
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a24:	53                   	push   ebx
c0003a25:	89 c3                	mov    ebx,eax
c0003a27:	83 ec 1c             	sub    esp,0x1c
c0003a2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a2e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a30:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a35:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a38:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3b:	89 c8                	mov    eax,ecx
c0003a3d:	09 d0                	or     eax,edx
c0003a3f:	0f 84 25 01 00 00    	je     c0003b6a <dir_read+0x153>
c0003a45:	89 f8                	mov    eax,edi
c0003a47:	e8 3d ea ff ff       	call   c0002489 <move_window>
c0003a4c:	89 c5                	mov    ebp,eax
c0003a4e:	85 c0                	test   eax,eax
c0003a50:	0f 85 23 01 00 00    	jne    c0003b79 <dir_read+0x162>
c0003a56:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a59:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a5b:	84 c9                	test   cl,cl
c0003a5d:	0f 84 11 01 00 00    	je     c0003b74 <dir_read+0x15d>
c0003a63:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a66:	75 48                	jne    c0003ab0 <dir_read+0x99>
c0003a68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a6d:	74 10                	je     c0003a7f <dir_read+0x68>
c0003a6f:	80 f9 83             	cmp    cl,0x83
c0003a72:	0f 85 dd 00 00 00    	jne    c0003b55 <dir_read+0x13e>
c0003a78:	31 ed                	xor    ebp,ebp
c0003a7a:	e9 08 01 00 00       	jmp    c0003b87 <dir_read+0x170>
c0003a7f:	80 f9 85             	cmp    cl,0x85
c0003a82:	0f 85 cd 00 00 00    	jne    c0003b55 <dir_read+0x13e>
c0003a88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a8b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a8e:	89 d8                	mov    eax,ebx
c0003a90:	e8 fc fd ff ff       	call   c0003891 <load_xdir>
c0003a95:	89 c5                	mov    ebp,eax
c0003a97:	85 c0                	test   eax,eax
c0003a99:	0f 85 da 00 00 00    	jne    c0003b79 <dir_read+0x162>
c0003a9f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003aa2:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003aa5:	83 e0 3f             	and    eax,0x3f
c0003aa8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003aab:	e9 d7 00 00 00       	jmp    c0003b87 <dir_read+0x170>
c0003ab0:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003ab3:	83 e0 3f             	and    eax,0x3f
c0003ab6:	80 f9 2e             	cmp    cl,0x2e
c0003ab9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003abd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ac0:	0f 84 8a 00 00 00    	je     c0003b50 <dir_read+0x139>
c0003ac6:	80 f9 e5             	cmp    cl,0xe5
c0003ac9:	0f 84 81 00 00 00    	je     c0003b50 <dir_read+0x139>
c0003acf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ad3:	83 e0 1f             	and    eax,0x1f
c0003ad6:	83 f8 08             	cmp    eax,0x8
c0003ad9:	0f 94 c0             	sete   al
c0003adc:	0f b6 c0             	movzx  eax,al
c0003adf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003ae3:	75 6b                	jne    c0003b50 <dir_read+0x139>
c0003ae5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aea:	75 44                	jne    c0003b30 <dir_read+0x119>
c0003aec:	f6 c1 40             	test   cl,0x40
c0003aef:	74 12                	je     c0003b03 <dir_read+0xec>
c0003af1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003af4:	83 e1 bf             	and    ecx,0xffffffbf
c0003af7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003afb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003afe:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003b01:	eb 06                	jmp    c0003b09 <dir_read+0xf2>
c0003b03:	89 f0                	mov    eax,esi
c0003b05:	38 c8                	cmp    al,cl
c0003b07:	75 47                	jne    c0003b50 <dir_read+0x139>
c0003b09:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b0d:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b12:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003b15:	75 3e                	jne    c0003b55 <dir_read+0x13e>
c0003b17:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b1b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b1e:	e8 8a e4 ff ff       	call   c0001fad <pick_lfn>
c0003b23:	85 c0                	test   eax,eax
c0003b25:	74 2e                	je     c0003b55 <dir_read+0x13e>
c0003b27:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b2b:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003b2e:	eb 25                	jmp    c0003b55 <dir_read+0x13e>
c0003b30:	89 f0                	mov    eax,esi
c0003b32:	84 c0                	test   al,al
c0003b34:	75 11                	jne    c0003b47 <dir_read+0x130>
c0003b36:	89 d0                	mov    eax,edx
c0003b38:	e8 2a e6 ff ff       	call   c0002167 <sum_sfn>
c0003b3d:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b41:	0f 84 31 ff ff ff    	je     c0003a78 <dir_read+0x61>
c0003b47:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b4e:	eb 37                	jmp    c0003b87 <dir_read+0x170>
c0003b50:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b55:	31 d2                	xor    edx,edx
c0003b57:	89 d8                	mov    eax,ebx
c0003b59:	e8 01 fc ff ff       	call   c000375f <dir_next>
c0003b5e:	89 c5                	mov    ebp,eax
c0003b60:	85 c0                	test   eax,eax
c0003b62:	0f 84 cd fe ff ff    	je     c0003a35 <dir_read+0x1e>
c0003b68:	eb 0f                	jmp    c0003b79 <dir_read+0x162>
c0003b6a:	85 ed                	test   ebp,ebp
c0003b6c:	0f 84 06 ff ff ff    	je     c0003a78 <dir_read+0x61>
c0003b72:	eb 05                	jmp    c0003b79 <dir_read+0x162>
c0003b74:	bd 04 00 00 00       	mov    ebp,0x4
c0003b79:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b80:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b87:	83 c4 1c             	add    esp,0x1c
c0003b8a:	89 e8                	mov    eax,ebp
c0003b8c:	5b                   	pop    ebx
c0003b8d:	5e                   	pop    esi
c0003b8e:	5f                   	pop    edi
c0003b8f:	5d                   	pop    ebp
c0003b90:	c3                   	ret    

c0003b91 <dir_alloc>:
c0003b91:	55                   	push   ebp
c0003b92:	89 d5                	mov    ebp,edx
c0003b94:	57                   	push   edi
c0003b95:	31 d2                	xor    edx,edx
c0003b97:	56                   	push   esi
c0003b98:	53                   	push   ebx
c0003b99:	89 c3                	mov    ebx,eax
c0003b9b:	83 ec 0c             	sub    esp,0xc
c0003b9e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ba0:	e8 62 f6 ff ff       	call   c0003207 <dir_sdi>
c0003ba5:	85 c0                	test   eax,eax
c0003ba7:	75 4e                	jne    c0003bf7 <dir_alloc+0x66>
c0003ba9:	31 f6                	xor    esi,esi
c0003bab:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003bae:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 d1 e8 ff ff       	call   c0002489 <move_window>
c0003bb8:	85 c0                	test   eax,eax
c0003bba:	75 3b                	jne    c0003bf7 <dir_alloc+0x66>
c0003bbc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003bbf:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003bc2:	8a 12                	mov    dl,BYTE PTR [edx]
c0003bc4:	75 07                	jne    c0003bcd <dir_alloc+0x3c>
c0003bc6:	f7 d2                	not    edx
c0003bc8:	c0 ea 07             	shr    dl,0x7
c0003bcb:	eb 0d                	jmp    c0003bda <dir_alloc+0x49>
c0003bcd:	84 d2                	test   dl,dl
c0003bcf:	0f 94 c1             	sete   cl
c0003bd2:	80 fa e5             	cmp    dl,0xe5
c0003bd5:	0f 94 c2             	sete   dl
c0003bd8:	09 ca                	or     edx,ecx
c0003bda:	84 d2                	test   dl,dl
c0003bdc:	74 07                	je     c0003be5 <dir_alloc+0x54>
c0003bde:	46                   	inc    esi
c0003bdf:	39 ee                	cmp    esi,ebp
c0003be1:	75 04                	jne    c0003be7 <dir_alloc+0x56>
c0003be3:	eb 1c                	jmp    c0003c01 <dir_alloc+0x70>
c0003be5:	31 f6                	xor    esi,esi
c0003be7:	ba 01 00 00 00       	mov    edx,0x1
c0003bec:	89 d8                	mov    eax,ebx
c0003bee:	e8 6c fb ff ff       	call   c000375f <dir_next>
c0003bf3:	85 c0                	test   eax,eax
c0003bf5:	74 b4                	je     c0003bab <dir_alloc+0x1a>
c0003bf7:	83 f8 04             	cmp    eax,0x4
c0003bfa:	75 05                	jne    c0003c01 <dir_alloc+0x70>
c0003bfc:	b8 07 00 00 00       	mov    eax,0x7
c0003c01:	83 c4 0c             	add    esp,0xc
c0003c04:	5b                   	pop    ebx
c0003c05:	5e                   	pop    esi
c0003c06:	5f                   	pop    edi
c0003c07:	5d                   	pop    ebp
c0003c08:	c3                   	ret    

c0003c09 <store_xdir>:
c0003c09:	55                   	push   ebp
c0003c0a:	57                   	push   edi
c0003c0b:	89 c7                	mov    edi,eax
c0003c0d:	56                   	push   esi
c0003c0e:	53                   	push   ebx
c0003c0f:	83 ec 0c             	sub    esp,0xc
c0003c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0003c14:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003c17:	89 e8                	mov    eax,ebp
c0003c19:	e8 5b e5 ff ff       	call   c0002179 <xdir_sum>
c0003c1e:	0f b7 d0             	movzx  edx,ax
c0003c21:	8d 45 02             	lea    eax,[ebp+0x2]
c0003c24:	e8 f4 e0 ff ff       	call   c0001d1d <st_word>
c0003c29:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003c2d:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003c30:	89 f8                	mov    eax,edi
c0003c32:	e8 d0 f5 ff ff       	call   c0003207 <dir_sdi>
c0003c37:	89 c6                	mov    esi,eax
c0003c39:	85 f6                	test   esi,esi
c0003c3b:	75 3d                	jne    c0003c7a <store_xdir+0x71>
c0003c3d:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c40:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c43:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c45:	e8 3f e8 ff ff       	call   c0002489 <move_window>
c0003c4a:	89 c6                	mov    esi,eax
c0003c4c:	85 c0                	test   eax,eax
c0003c4e:	75 2a                	jne    c0003c7a <store_xdir+0x71>
c0003c50:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c53:	b9 20 00 00 00       	mov    ecx,0x20
c0003c58:	89 ea                	mov    edx,ebp
c0003c5a:	e8 cb e0 ff ff       	call   c0001d2a <mem_cpy>
c0003c5f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c61:	85 db                	test   ebx,ebx
c0003c63:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c67:	74 11                	je     c0003c7a <store_xdir+0x71>
c0003c69:	31 d2                	xor    edx,edx
c0003c6b:	89 f8                	mov    eax,edi
c0003c6d:	83 c5 20             	add    ebp,0x20
c0003c70:	e8 ea fa ff ff       	call   c000375f <dir_next>
c0003c75:	4b                   	dec    ebx
c0003c76:	89 c6                	mov    esi,eax
c0003c78:	eb bf                	jmp    c0003c39 <store_xdir+0x30>
c0003c7a:	89 f0                	mov    eax,esi
c0003c7c:	83 fe 02             	cmp    esi,0x2
c0003c7f:	76 05                	jbe    c0003c86 <store_xdir+0x7d>
c0003c81:	b8 02 00 00 00       	mov    eax,0x2
c0003c86:	83 c4 0c             	add    esp,0xc
c0003c89:	5b                   	pop    ebx
c0003c8a:	5e                   	pop    esi
c0003c8b:	5f                   	pop    edi
c0003c8c:	5d                   	pop    ebp
c0003c8d:	c3                   	ret    

c0003c8e <dir_remove>:
c0003c8e:	57                   	push   edi
c0003c8f:	56                   	push   esi
c0003c90:	53                   	push   ebx
c0003c91:	89 c3                	mov    ebx,eax
c0003c93:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c96:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c98:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c9b:	83 fa ff             	cmp    edx,0xffffffff
c0003c9e:	74 09                	je     c0003ca9 <dir_remove+0x1b>
c0003ca0:	e8 62 f5 ff ff       	call   c0003207 <dir_sdi>
c0003ca5:	85 c0                	test   eax,eax
c0003ca7:	75 41                	jne    c0003cea <dir_remove+0x5c>
c0003ca9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003cac:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003caf:	89 f0                	mov    eax,esi
c0003cb1:	e8 d3 e7 ff ff       	call   c0002489 <move_window>
c0003cb6:	85 c0                	test   eax,eax
c0003cb8:	75 26                	jne    c0003ce0 <dir_remove+0x52>
c0003cba:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003cbd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003cc0:	75 05                	jne    c0003cc7 <dir_remove+0x39>
c0003cc2:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003cc5:	eb 03                	jmp    c0003cca <dir_remove+0x3c>
c0003cc7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003cca:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003cce:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003cd1:	73 17                	jae    c0003cea <dir_remove+0x5c>
c0003cd3:	31 d2                	xor    edx,edx
c0003cd5:	89 d8                	mov    eax,ebx
c0003cd7:	e8 83 fa ff ff       	call   c000375f <dir_next>
c0003cdc:	85 c0                	test   eax,eax
c0003cde:	74 c9                	je     c0003ca9 <dir_remove+0x1b>
c0003ce0:	83 f8 04             	cmp    eax,0x4
c0003ce3:	75 05                	jne    c0003cea <dir_remove+0x5c>
c0003ce5:	b8 02 00 00 00       	mov    eax,0x2
c0003cea:	5b                   	pop    ebx
c0003ceb:	5e                   	pop    esi
c0003cec:	5f                   	pop    edi
c0003ced:	c3                   	ret    

c0003cee <create_name>:
c0003cee:	55                   	push   ebp
c0003cef:	89 d5                	mov    ebp,edx
c0003cf1:	57                   	push   edi
c0003cf2:	89 c7                	mov    edi,eax
c0003cf4:	56                   	push   esi
c0003cf5:	31 f6                	xor    esi,esi
c0003cf7:	53                   	push   ebx
c0003cf8:	83 ec 3c             	sub    esp,0x3c
c0003cfb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003d03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003d06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003d0a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003d0e:	e8 72 e0 ff ff       	call   c0001d85 <tchar2uni>
c0003d13:	89 c3                	mov    ebx,eax
c0003d15:	83 f8 ff             	cmp    eax,0xffffffff
c0003d18:	75 0a                	jne    c0003d24 <create_name+0x36>
c0003d1a:	b8 06 00 00 00       	mov    eax,0x6
c0003d1f:	e9 9e 02 00 00       	jmp    c0003fc2 <create_name+0x2d4>
c0003d24:	3d ff ff 00 00       	cmp    eax,0xffff
c0003d29:	76 0c                	jbe    c0003d37 <create_name+0x49>
c0003d2b:	c1 e8 10             	shr    eax,0x10
c0003d2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003d32:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003d36:	46                   	inc    esi
c0003d37:	66 83 fb 1f          	cmp    bx,0x1f
c0003d3b:	76 4f                	jbe    c0003d8c <create_name+0x9e>
c0003d3d:	66 83 fb 5c          	cmp    bx,0x5c
c0003d41:	74 35                	je     c0003d78 <create_name+0x8a>
c0003d43:	66 83 fb 2f          	cmp    bx,0x2f
c0003d47:	74 2f                	je     c0003d78 <create_name+0x8a>
c0003d49:	66 83 fb 7f          	cmp    bx,0x7f
c0003d4d:	77 11                	ja     c0003d60 <create_name+0x72>
c0003d4f:	0f b7 d3             	movzx  edx,bx
c0003d52:	b8 f2 f7 01 c0       	mov    eax,0xc001f7f2
c0003d57:	e8 11 e0 ff ff       	call   c0001d6d <chk_chr>
c0003d5c:	85 c0                	test   eax,eax
c0003d5e:	75 ba                	jne    c0003d1a <create_name+0x2c>
c0003d60:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d66:	77 b2                	ja     c0003d1a <create_name+0x2c>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d70:	46                   	inc    esi
c0003d71:	eb 97                	jmp    c0003d0a <create_name+0x1c>
c0003d73:	40                   	inc    eax
c0003d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d7c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d7e:	80 fa 2f             	cmp    dl,0x2f
c0003d81:	74 f0                	je     c0003d73 <create_name+0x85>
c0003d83:	80 fa 5c             	cmp    dl,0x5c
c0003d86:	74 eb                	je     c0003d73 <create_name+0x85>
c0003d88:	31 db                	xor    ebx,ebx
c0003d8a:	eb 02                	jmp    c0003d8e <create_name+0xa0>
c0003d8c:	b3 04                	mov    bl,0x4
c0003d8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d92:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d95:	85 f6                	test   esi,esi
c0003d97:	74 18                	je     c0003db1 <create_name+0xc3>
c0003d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d9d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003da2:	66 83 f8 20          	cmp    ax,0x20
c0003da6:	74 06                	je     c0003dae <create_name+0xc0>
c0003da8:	66 83 f8 2e          	cmp    ax,0x2e
c0003dac:	75 03                	jne    c0003db1 <create_name+0xc3>
c0003dae:	4e                   	dec    esi
c0003daf:	eb e4                	jmp    c0003d95 <create_name+0xa7>
c0003db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003db5:	31 ed                	xor    ebp,ebp
c0003db7:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003dbd:	85 f6                	test   esi,esi
c0003dbf:	0f 84 55 ff ff ff    	je     c0003d1a <create_name+0x2c>
c0003dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dc9:	8d 55 01             	lea    edx,[ebp+0x1]
c0003dcc:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003dd0:	66 83 f8 20          	cmp    ax,0x20
c0003dd4:	75 04                	jne    c0003dda <create_name+0xec>
c0003dd6:	89 d5                	mov    ebp,edx
c0003dd8:	eb eb                	jmp    c0003dc5 <create_name+0xd7>
c0003dda:	85 ed                	test   ebp,ebp
c0003ddc:	75 06                	jne    c0003de4 <create_name+0xf6>
c0003dde:	66 83 f8 2e          	cmp    ax,0x2e
c0003de2:	75 08                	jne    c0003dec <create_name+0xfe>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	eb 03                	jmp    c0003dec <create_name+0xfe>
c0003de9:	4e                   	dec    esi
c0003dea:	74 0c                	je     c0003df8 <create_name+0x10a>
c0003dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003df0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003df6:	75 f1                	jne    c0003de9 <create_name+0xfb>
c0003df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003e00:	ba 20 00 00 00       	mov    edx,0x20
c0003e05:	e8 35 df ff ff       	call   c0001d3f <mem_set>
c0003e0a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003e12:	31 c9                	xor    ecx,ecx
c0003e14:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003e19:	8d 45 01             	lea    eax,[ebp+0x1]
c0003e1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003e24:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003e28:	66 85 ed             	test   bp,bp
c0003e2b:	0f 84 30 01 00 00    	je     c0003f61 <create_name+0x273>
c0003e31:	66 83 fd 20          	cmp    bp,0x20
c0003e35:	74 10                	je     c0003e47 <create_name+0x159>
c0003e37:	66 83 fd 2e          	cmp    bp,0x2e
c0003e3b:	75 13                	jne    c0003e50 <create_name+0x162>
c0003e3d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e41:	0f 84 6b 01 00 00    	je     c0003fb2 <create_name+0x2c4>
c0003e47:	83 cb 03             	or     ebx,0x3
c0003e4a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e4e:	eb c9                	jmp    c0003e19 <create_name+0x12b>
c0003e50:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e54:	73 0b                	jae    c0003e61 <create_name+0x173>
c0003e56:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e5a:	75 47                	jne    c0003ea3 <create_name+0x1b5>
c0003e5c:	e9 51 01 00 00       	jmp    c0003fb2 <create_name+0x2c4>
c0003e61:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e66:	75 10                	jne    c0003e78 <create_name+0x18a>
c0003e68:	83 cb 03             	or     ebx,0x3
c0003e6b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e73:	e9 e9 00 00 00       	jmp    c0003f61 <create_name+0x273>
c0003e78:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e7c:	74 0d                	je     c0003e8b <create_name+0x19d>
c0003e7e:	83 cb 03             	or     ebx,0x3
c0003e81:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e85:	0f 87 d6 00 00 00    	ja     c0003f61 <create_name+0x273>
c0003e8b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e90:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e94:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e9c:	b9 08 00 00 00       	mov    ecx,0x8
c0003ea1:	eb a7                	jmp    c0003e4a <create_name+0x15c>
c0003ea3:	66 83 fd 7f          	cmp    bp,0x7f
c0003ea7:	76 68                	jbe    c0003f11 <create_name+0x223>
c0003ea9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003ead:	88 da                	mov    dl,bl
c0003eaf:	83 ca 02             	or     edx,0x2
c0003eb2:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003eb6:	50                   	push   eax
c0003eb7:	50                   	push   eax
c0003eb8:	68 b5 01 00 00       	push   0x1b5
c0003ebd:	55                   	push   ebp
c0003ebe:	e8 48 46 00 00       	call   c000850b <ff_uni2oem>
c0003ec3:	83 c4 10             	add    esp,0x10
c0003ec6:	89 c5                	mov    ebp,eax
c0003ec8:	a8 80                	test   al,0x80
c0003eca:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ece:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ed2:	74 0c                	je     c0003ee0 <create_name+0x1f2>
c0003ed4:	83 e5 7f             	and    ebp,0x7f
c0003ed7:	0f b6 ad 40 f7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe08c0]
c0003ede:	eb 2a                	jmp    c0003f0a <create_name+0x21c>
c0003ee0:	66 3d ff 00          	cmp    ax,0xff
c0003ee4:	76 24                	jbe    c0003f0a <create_name+0x21c>
c0003ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eea:	48                   	dec    eax
c0003eeb:	39 c8                	cmp    eax,ecx
c0003eed:	77 0c                	ja     c0003efb <create_name+0x20d>
c0003eef:	83 cb 03             	or     ebx,0x3
c0003ef2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef6:	e9 4f ff ff ff       	jmp    c0003e4a <create_name+0x15c>
c0003efb:	89 e8                	mov    eax,ebp
c0003efd:	88 d3                	mov    bl,dl
c0003eff:	66 c1 e8 08          	shr    ax,0x8
c0003f03:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f07:	41                   	inc    ecx
c0003f08:	eb 4b                	jmp    c0003f55 <create_name+0x267>
c0003f0a:	88 d3                	mov    bl,dl
c0003f0c:	66 85 ed             	test   bp,bp
c0003f0f:	74 19                	je     c0003f2a <create_name+0x23c>
c0003f11:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003f15:	0f b7 d5             	movzx  edx,bp
c0003f18:	b8 fb f7 01 c0       	mov    eax,0xc001f7fb
c0003f1d:	e8 4b de ff ff       	call   c0001d6d <chk_chr>
c0003f22:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003f26:	85 c0                	test   eax,eax
c0003f28:	74 0a                	je     c0003f34 <create_name+0x246>
c0003f2a:	83 cb 03             	or     ebx,0x3
c0003f2d:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003f32:	eb 21                	jmp    c0003f55 <create_name+0x267>
c0003f34:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003f37:	66 83 f8 19          	cmp    ax,0x19
c0003f3b:	77 07                	ja     c0003f44 <create_name+0x256>
c0003f3d:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f42:	eb 11                	jmp    c0003f55 <create_name+0x267>
c0003f44:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f47:	66 83 f8 19          	cmp    ax,0x19
c0003f4b:	77 08                	ja     c0003f55 <create_name+0x267>
c0003f4d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f52:	83 ed 20             	sub    ebp,0x20
c0003f55:	89 e8                	mov    eax,ebp
c0003f57:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f5b:	41                   	inc    ecx
c0003f5c:	e9 e9 fe ff ff       	jmp    c0003e4a <create_name+0x15c>
c0003f61:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f65:	75 04                	jne    c0003f6b <create_name+0x27d>
c0003f67:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f6b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f70:	75 05                	jne    c0003f77 <create_name+0x289>
c0003f72:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f77:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f7b:	83 e0 0c             	and    eax,0xc
c0003f7e:	3c 0c                	cmp    al,0xc
c0003f80:	74 0b                	je     c0003f8d <create_name+0x29f>
c0003f82:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f86:	83 e0 03             	and    eax,0x3
c0003f89:	3c 03                	cmp    al,0x3
c0003f8b:	75 05                	jne    c0003f92 <create_name+0x2a4>
c0003f8d:	83 cb 02             	or     ebx,0x2
c0003f90:	eb 19                	jmp    c0003fab <create_name+0x2bd>
c0003f92:	f6 c3 02             	test   bl,0x2
c0003f95:	75 14                	jne    c0003fab <create_name+0x2bd>
c0003f97:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f9c:	74 03                	je     c0003fa1 <create_name+0x2b3>
c0003f9e:	83 cb 10             	or     ebx,0x10
c0003fa1:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003fa6:	74 03                	je     c0003fab <create_name+0x2bd>
c0003fa8:	83 cb 08             	or     ebx,0x8
c0003fab:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003fae:	31 c0                	xor    eax,eax
c0003fb0:	eb 10                	jmp    c0003fc2 <create_name+0x2d4>
c0003fb2:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003fb7:	0f 85 ce fe ff ff    	jne    c0003e8b <create_name+0x19d>
c0003fbd:	e9 a6 fe ff ff       	jmp    c0003e68 <create_name+0x17a>
c0003fc2:	83 c4 3c             	add    esp,0x3c
c0003fc5:	5b                   	pop    ebx
c0003fc6:	5e                   	pop    esi
c0003fc7:	5f                   	pop    edi
c0003fc8:	5d                   	pop    ebp
c0003fc9:	c3                   	ret    

c0003fca <xname_sum>:
c0003fca:	56                   	push   esi
c0003fcb:	53                   	push   ebx
c0003fcc:	89 c6                	mov    esi,eax
c0003fce:	51                   	push   ecx
c0003fcf:	31 db                	xor    ebx,ebx
c0003fd1:	83 c6 02             	add    esi,0x2
c0003fd4:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003fd8:	66 85 c0             	test   ax,ax
c0003fdb:	74 1f                	je     c0003ffc <xname_sum+0x32>
c0003fdd:	83 ec 0c             	sub    esp,0xc
c0003fe0:	66 d1 cb             	ror    bx,1
c0003fe3:	50                   	push   eax
c0003fe4:	e8 1e 46 00 00       	call   c0008607 <ff_wtoupper>
c0003fe9:	83 c4 10             	add    esp,0x10
c0003fec:	0f b6 d0             	movzx  edx,al
c0003fef:	66 c1 e8 08          	shr    ax,0x8
c0003ff3:	01 d3                	add    ebx,edx
c0003ff5:	66 d1 cb             	ror    bx,1
c0003ff8:	01 c3                	add    ebx,eax
c0003ffa:	eb d5                	jmp    c0003fd1 <xname_sum+0x7>
c0003ffc:	89 d8                	mov    eax,ebx
c0003ffe:	5a                   	pop    edx
c0003fff:	5b                   	pop    ebx
c0004000:	5e                   	pop    esi
c0004001:	c3                   	ret    

c0004002 <create_xdir>:
c0004002:	55                   	push   ebp
c0004003:	b9 40 00 00 00       	mov    ecx,0x40
c0004008:	57                   	push   edi
c0004009:	bd 01 00 00 00       	mov    ebp,0x1
c000400e:	56                   	push   esi
c000400f:	31 ff                	xor    edi,edi
c0004011:	53                   	push   ebx
c0004012:	be 40 00 00 00       	mov    esi,0x40
c0004017:	89 c3                	mov    ebx,eax
c0004019:	83 ec 1c             	sub    esp,0x1c
c000401c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0004020:	31 d2                	xor    edx,edx
c0004022:	e8 18 dd ff ff       	call   c0001d3f <mem_set>
c0004027:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c000402a:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c000402e:	31 c9                	xor    ecx,ecx
c0004030:	8d 46 01             	lea    eax,[esi+0x1]
c0004033:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0004037:	83 c6 02             	add    esi,0x2
c000403a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000403e:	66 85 ed             	test   bp,bp
c0004041:	74 12                	je     c0004055 <create_xdir+0x53>
c0004043:	0f b6 c1             	movzx  eax,cl
c0004046:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000404a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000404e:	66 83 fd 01          	cmp    bp,0x1
c0004052:	80 d9 ff             	sbb    cl,0xff
c0004055:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004058:	0f b7 d5             	movzx  edx,bp
c000405b:	83 c6 02             	add    esi,0x2
c000405e:	e8 ba dc ff ff       	call   c0001d1d <st_word>
c0004063:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004069:	75 d3                	jne    c000403e <create_xdir+0x3c>
c000406b:	8d 47 01             	lea    eax,[edi+0x1]
c000406e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004072:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004076:	0f b6 c1             	movzx  eax,cl
c0004079:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000407e:	74 07                	je     c0004087 <create_xdir+0x85>
c0004080:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004085:	eb a9                	jmp    c0004030 <create_xdir+0x2e>
c0004087:	8d 47 02             	lea    eax,[edi+0x2]
c000408a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000408d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004090:	89 d0                	mov    eax,edx
c0004092:	e8 33 ff ff ff       	call   c0003fca <xname_sum>
c0004097:	83 c4 1c             	add    esp,0x1c
c000409a:	0f b7 d0             	movzx  edx,ax
c000409d:	8d 43 24             	lea    eax,[ebx+0x24]
c00040a0:	5b                   	pop    ebx
c00040a1:	5e                   	pop    esi
c00040a2:	5f                   	pop    edi
c00040a3:	5d                   	pop    ebp
c00040a4:	e9 74 dc ff ff       	jmp    c0001d1d <st_word>

c00040a9 <cmp_lfn>:
c00040a9:	55                   	push   ebp
c00040aa:	57                   	push   edi
c00040ab:	89 d7                	mov    edi,edx
c00040ad:	56                   	push   esi
c00040ae:	53                   	push   ebx
c00040af:	83 ec 1c             	sub    esp,0x1c
c00040b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00040b6:	8d 42 1a             	lea    eax,[edx+0x1a]
c00040b9:	e8 ed db ff ff       	call   c0001cab <ld_word>
c00040be:	66 85 c0             	test   ax,ax
c00040c1:	74 07                	je     c00040ca <cmp_lfn+0x21>
c00040c3:	31 c0                	xor    eax,eax
c00040c5:	e9 9a 00 00 00       	jmp    c0004164 <cmp_lfn+0xbb>
c00040ca:	8a 1f                	mov    bl,BYTE PTR [edi]
c00040cc:	bd 01 00 00 00       	mov    ebp,0x1
c00040d1:	83 e3 3f             	and    ebx,0x3f
c00040d4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00040dc:	4b                   	dec    ebx
c00040dd:	6b db 0d             	imul   ebx,ebx,0xd
c00040e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040e4:	0f b6 80 c0 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0840]
c00040eb:	01 f8                	add    eax,edi
c00040ed:	e8 b9 db ff ff       	call   c0001cab <ld_word>
c00040f2:	66 85 ed             	test   bp,bp
c00040f5:	89 c6                	mov    esi,eax
c00040f7:	74 3c                	je     c0004135 <cmp_lfn+0x8c>
c00040f9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040ff:	77 c2                	ja     c00040c3 <cmp_lfn+0x1a>
c0004101:	83 ec 0c             	sub    esp,0xc
c0004104:	0f b7 c0             	movzx  eax,ax
c0004107:	50                   	push   eax
c0004108:	e8 fa 44 00 00       	call   c0008607 <ff_wtoupper>
c000410d:	89 c5                	mov    ebp,eax
c000410f:	8d 43 01             	lea    eax,[ebx+0x1]
c0004112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000411a:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000411e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004121:	e8 e1 44 00 00       	call   c0008607 <ff_wtoupper>
c0004126:	83 c4 10             	add    esp,0x10
c0004129:	39 c5                	cmp    ebp,eax
c000412b:	75 96                	jne    c00040c3 <cmp_lfn+0x1a>
c000412d:	89 f5                	mov    ebp,esi
c000412f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0004133:	eb 04                	jmp    c0004139 <cmp_lfn+0x90>
c0004135:	66 46                	inc    si
c0004137:	75 8a                	jne    c00040c3 <cmp_lfn+0x1a>
c0004139:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c000413d:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004142:	75 9c                	jne    c00040e0 <cmp_lfn+0x37>
c0004144:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004147:	74 16                	je     c000415f <cmp_lfn+0xb6>
c0004149:	66 85 ed             	test   bp,bp
c000414c:	74 11                	je     c000415f <cmp_lfn+0xb6>
c000414e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004152:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004157:	0f 94 c0             	sete   al
c000415a:	0f b6 c0             	movzx  eax,al
c000415d:	eb 05                	jmp    c0004164 <cmp_lfn+0xbb>
c000415f:	b8 01 00 00 00       	mov    eax,0x1
c0004164:	83 c4 1c             	add    esp,0x1c
c0004167:	5b                   	pop    ebx
c0004168:	5e                   	pop    esi
c0004169:	5f                   	pop    edi
c000416a:	5d                   	pop    ebp
c000416b:	c3                   	ret    

c000416c <dir_find>:
c000416c:	55                   	push   ebp
c000416d:	31 d2                	xor    edx,edx
c000416f:	57                   	push   edi
c0004170:	56                   	push   esi
c0004171:	53                   	push   ebx
c0004172:	89 c3                	mov    ebx,eax
c0004174:	83 ec 1c             	sub    esp,0x1c
c0004177:	8b 30                	mov    esi,DWORD PTR [eax]
c0004179:	e8 89 f0 ff ff       	call   c0003207 <dir_sdi>
c000417e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004181:	85 c0                	test   eax,eax
c0004183:	0f 85 9e 01 00 00    	jne    c0004327 <dir_find+0x1bb>
c0004189:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000418c:	0f 85 8d 00 00 00    	jne    c000421f <dir_find+0xb3>
c0004192:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004195:	e8 30 fe ff ff       	call   c0003fca <xname_sum>
c000419a:	89 c7                	mov    edi,eax
c000419c:	31 d2                	xor    edx,edx
c000419e:	89 d8                	mov    eax,ebx
c00041a0:	e8 72 f8 ff ff       	call   c0003a17 <dir_read>
c00041a5:	85 c0                	test   eax,eax
c00041a7:	0f 85 5e 01 00 00    	jne    c000430b <dir_find+0x19f>
c00041ad:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00041b0:	8d 41 24             	lea    eax,[ecx+0x24]
c00041b3:	e8 f3 da ff ff       	call   c0001cab <ld_word>
c00041b8:	66 39 f8             	cmp    ax,di
c00041bb:	75 df                	jne    c000419c <dir_find+0x30>
c00041bd:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c00041c0:	31 ed                	xor    ebp,ebp
c00041c2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00041c6:	ba 40 00 00 00       	mov    edx,0x40
c00041cb:	89 e9                	mov    ecx,ebp
c00041cd:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c00041d1:	0f 84 42 01 00 00    	je     c0004319 <dir_find+0x1ad>
c00041d7:	f6 c2 1f             	test   dl,0x1f
c00041da:	75 03                	jne    c00041df <dir_find+0x73>
c00041dc:	83 c2 02             	add    edx,0x2
c00041df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041e3:	89 d0                	mov    eax,edx
c00041e5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041e8:	e8 be da ff ff       	call   c0001cab <ld_word>
c00041ed:	83 ec 0c             	sub    esp,0xc
c00041f0:	0f b7 c0             	movzx  eax,ax
c00041f3:	50                   	push   eax
c00041f4:	e8 0e 44 00 00       	call   c0008607 <ff_wtoupper>
c00041f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041fd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004200:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004204:	89 04 24             	mov    DWORD PTR [esp],eax
c0004207:	e8 fb 43 00 00       	call   c0008607 <ff_wtoupper>
c000420c:	83 c4 10             	add    esp,0x10
c000420f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0004213:	75 87                	jne    c000419c <dir_find+0x30>
c0004215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004219:	45                   	inc    ebp
c000421a:	83 c2 02             	add    edx,0x2
c000421d:	eb ac                	jmp    c00041cb <dir_find+0x5f>
c000421f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004226:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c000422b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004230:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004233:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004236:	89 f0                	mov    eax,esi
c0004238:	e8 4c e2 ff ff       	call   c0002489 <move_window>
c000423d:	85 c0                	test   eax,eax
c000423f:	0f 85 c6 00 00 00    	jne    c000430b <dir_find+0x19f>
c0004245:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004248:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000424b:	84 c9                	test   cl,cl
c000424d:	0f 84 bd 00 00 00    	je     c0004310 <dir_find+0x1a4>
c0004253:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004256:	88 d0                	mov    al,dl
c0004258:	83 e0 3f             	and    eax,0x3f
c000425b:	80 f9 e5             	cmp    cl,0xe5
c000425e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004261:	0f 84 87 00 00 00    	je     c00042ee <dir_find+0x182>
c0004267:	80 e2 08             	and    dl,0x8
c000426a:	74 06                	je     c0004272 <dir_find+0x106>
c000426c:	3c 0f                	cmp    al,0xf
c000426e:	75 7e                	jne    c00042ee <dir_find+0x182>
c0004270:	eb 04                	jmp    c0004276 <dir_find+0x10a>
c0004272:	3c 0f                	cmp    al,0xf
c0004274:	75 4c                	jne    c00042c2 <dir_find+0x156>
c0004276:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000427a:	75 7e                	jne    c00042fa <dir_find+0x18e>
c000427c:	f6 c1 40             	test   cl,0x40
c000427f:	74 12                	je     c0004293 <dir_find+0x127>
c0004281:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004284:	83 e1 bf             	and    ecx,0xffffffbf
c0004287:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000428b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000428e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004291:	eb 06                	jmp    c0004299 <dir_find+0x12d>
c0004293:	89 f8                	mov    eax,edi
c0004295:	38 c8                	cmp    al,cl
c0004297:	75 5c                	jne    c00042f5 <dir_find+0x189>
c0004299:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000429d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042a2:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c00042a5:	75 53                	jne    c00042fa <dir_find+0x18e>
c00042a7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c00042ab:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042ae:	89 ea                	mov    edx,ebp
c00042b0:	e8 f4 fd ff ff       	call   c00040a9 <cmp_lfn>
c00042b5:	85 c0                	test   eax,eax
c00042b7:	74 41                	je     c00042fa <dir_find+0x18e>
c00042b9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c00042bd:	8d 79 ff             	lea    edi,[ecx-0x1]
c00042c0:	eb 38                	jmp    c00042fa <dir_find+0x18e>
c00042c2:	89 f8                	mov    eax,edi
c00042c4:	84 c0                	test   al,al
c00042c6:	75 0d                	jne    c00042d5 <dir_find+0x169>
c00042c8:	89 e8                	mov    eax,ebp
c00042ca:	e8 98 de ff ff       	call   c0002167 <sum_sfn>
c00042cf:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c00042d3:	74 52                	je     c0004327 <dir_find+0x1bb>
c00042d5:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00042d9:	75 13                	jne    c00042ee <dir_find+0x182>
c00042db:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00042de:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e3:	89 e8                	mov    eax,ebp
c00042e5:	e8 60 da ff ff       	call   c0001d4a <mem_cmp>
c00042ea:	85 c0                	test   eax,eax
c00042ec:	74 39                	je     c0004327 <dir_find+0x1bb>
c00042ee:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042f5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042fa:	31 d2                	xor    edx,edx
c00042fc:	89 d8                	mov    eax,ebx
c00042fe:	e8 5c f4 ff ff       	call   c000375f <dir_next>
c0004303:	85 c0                	test   eax,eax
c0004305:	0f 84 25 ff ff ff    	je     c0004230 <dir_find+0xc4>
c000430b:	89 04 24             	mov    DWORD PTR [esp],eax
c000430e:	eb 17                	jmp    c0004327 <dir_find+0x1bb>
c0004310:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004317:	eb 0e                	jmp    c0004327 <dir_find+0x1bb>
c0004319:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000431c:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004321:	0f 85 75 fe ff ff    	jne    c000419c <dir_find+0x30>
c0004327:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000432a:	83 c4 1c             	add    esp,0x1c
c000432d:	5b                   	pop    ebx
c000432e:	5e                   	pop    esi
c000432f:	5f                   	pop    edi
c0004330:	5d                   	pop    ebp
c0004331:	c3                   	ret    

c0004332 <dir_register>:
c0004332:	55                   	push   ebp
c0004333:	57                   	push   edi
c0004334:	56                   	push   esi
c0004335:	be 06 00 00 00       	mov    esi,0x6
c000433a:	53                   	push   ebx
c000433b:	83 ec 6c             	sub    esp,0x6c
c000433e:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004342:	0f 85 62 02 00 00    	jne    c00045aa <dir_register+0x278>
c0004348:	8b 28                	mov    ebp,DWORD PTR [eax]
c000434a:	31 ff                	xor    edi,edi
c000434c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000434f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004354:	74 03                	je     c0004359 <dir_register+0x27>
c0004356:	47                   	inc    edi
c0004357:	eb f6                	jmp    c000434f <dir_register+0x1d>
c0004359:	89 c3                	mov    ebx,eax
c000435b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000435f:	0f 85 e1 00 00 00    	jne    c0004446 <dir_register+0x114>
c0004365:	83 c7 0e             	add    edi,0xe
c0004368:	b9 0f 00 00 00       	mov    ecx,0xf
c000436d:	89 f8                	mov    eax,edi
c000436f:	31 d2                	xor    edx,edx
c0004371:	f7 f1                	div    ecx
c0004373:	8d 50 02             	lea    edx,[eax+0x2]
c0004376:	89 c7                	mov    edi,eax
c0004378:	89 d8                	mov    eax,ebx
c000437a:	e8 12 f8 ff ff       	call   c0003b91 <dir_alloc>
c000437f:	89 c6                	mov    esi,eax
c0004381:	85 c0                	test   eax,eax
c0004383:	0f 85 21 02 00 00    	jne    c00045aa <dir_register+0x278>
c0004389:	81 c7 01 00 00 08    	add    edi,0x8000001
c000438f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004392:	c1 e7 05             	shl    edi,0x5
c0004395:	29 f8                	sub    eax,edi
c0004397:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000439a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000439d:	a8 04                	test   al,0x4
c000439f:	0f 84 91 00 00 00    	je     c0004436 <dir_register+0x104>
c00043a5:	83 e0 fb             	and    eax,0xfffffffb
c00043a8:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 25 ec ff ff       	call   c0002fd7 <fill_first_frag>
c00043b2:	85 c0                	test   eax,eax
c00043b4:	0f 85 ee 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043ba:	83 c9 ff             	or     ecx,0xffffffff
c00043bd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00043c0:	89 d8                	mov    eax,ebx
c00043c2:	e8 db eb ff ff       	call   c0002fa2 <fill_last_frag>
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 85 d9 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043cf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043d3:	74 61                	je     c0004436 <dir_register+0x104>
c00043d5:	89 da                	mov    edx,ebx
c00043d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043db:	e8 ea f5 ff ff       	call   c00039ca <load_obj_xdir>
c00043e0:	85 c0                	test   eax,eax
c00043e2:	0f 85 c0 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043e8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043ec:	31 c9                	xor    ecx,ecx
c00043ee:	c1 e2 09             	shl    edx,0x9
c00043f1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043f4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043f7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043fa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004400:	83 c0 38             	add    eax,0x38
c0004403:	e8 1c d9 ff ff       	call   c0001d24 <st_qword>
c0004408:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000440b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000440e:	83 c0 28             	add    eax,0x28
c0004411:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004414:	e8 0b d9 ff ff       	call   c0001d24 <st_qword>
c0004419:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000441c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000441f:	83 c8 01             	or     eax,0x1
c0004422:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004425:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004429:	e8 db f7 ff ff       	call   c0003c09 <store_xdir>
c000442e:	85 c0                	test   eax,eax
c0004430:	0f 85 72 01 00 00    	jne    c00045a8 <dir_register+0x276>
c0004436:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004439:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000443c:	e8 c1 fb ff ff       	call   c0004002 <create_xdir>
c0004441:	e9 64 01 00 00       	jmp    c00045aa <dir_register+0x278>
c0004446:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004449:	b9 0c 00 00 00       	mov    ecx,0xc
c000444e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004452:	89 c2                	mov    edx,eax
c0004454:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004458:	e8 cd d8 ff ff       	call   c0001d2a <mem_cpy>
c000445d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004462:	74 58                	je     c00044bc <dir_register+0x18a>
c0004464:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004468:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004470:	83 ec 0c             	sub    esp,0xc
c0004473:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000447a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000447e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004482:	e8 24 dc ff ff       	call   c00020ab <gen_numname>
c0004487:	89 d8                	mov    eax,ebx
c0004489:	e8 de fc ff ff       	call   c000416c <dir_find>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	89 c6                	mov    esi,eax
c0004493:	85 c0                	test   eax,eax
c0004495:	75 15                	jne    c00044ac <dir_register+0x17a>
c0004497:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000449b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00044a0:	75 ce                	jne    c0004470 <dir_register+0x13e>
c00044a2:	be 07 00 00 00       	mov    esi,0x7
c00044a7:	e9 fe 00 00 00       	jmp    c00045aa <dir_register+0x278>
c00044ac:	83 f8 04             	cmp    eax,0x4
c00044af:	0f 85 f5 00 00 00    	jne    c00045aa <dir_register+0x278>
c00044b5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00044b9:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c00044bc:	b9 01 00 00 00       	mov    ecx,0x1
c00044c1:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00044c6:	74 0f                	je     c00044d7 <dir_register+0x1a5>
c00044c8:	b9 0d 00 00 00       	mov    ecx,0xd
c00044cd:	8d 47 0c             	lea    eax,[edi+0xc]
c00044d0:	31 d2                	xor    edx,edx
c00044d2:	f7 f1                	div    ecx
c00044d4:	8d 48 01             	lea    ecx,[eax+0x1]
c00044d7:	89 ca                	mov    edx,ecx
c00044d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 ad f6 ff ff       	call   c0003b91 <dir_alloc>
c00044e4:	89 c6                	mov    esi,eax
c00044e6:	85 c0                	test   eax,eax
c00044e8:	0f 85 bc 00 00 00    	jne    c00045aa <dir_register+0x278>
c00044ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044f2:	49                   	dec    ecx
c00044f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044f7:	74 6a                	je     c0004563 <dir_register+0x231>
c00044f9:	89 c8                	mov    eax,ecx
c00044fb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044fe:	c1 e0 05             	shl    eax,0x5
c0004501:	29 c2                	sub    edx,eax
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 fd ec ff ff       	call   c0003207 <dir_sdi>
c000450a:	89 c6                	mov    esi,eax
c000450c:	85 c0                	test   eax,eax
c000450e:	0f 85 96 00 00 00    	jne    c00045aa <dir_register+0x278>
c0004514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004518:	e8 4a dc ff ff       	call   c0002167 <sum_sfn>
c000451d:	0f b6 f8             	movzx  edi,al
c0004520:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004523:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004526:	89 e8                	mov    eax,ebp
c0004528:	e8 5c df ff ff       	call   c0002489 <move_window>
c000452d:	89 c6                	mov    esi,eax
c000452f:	85 c0                	test   eax,eax
c0004531:	75 77                	jne    c00045aa <dir_register+0x278>
c0004533:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004538:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000453b:	83 ec 0c             	sub    esp,0xc
c000453e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004541:	57                   	push   edi
c0004542:	e8 e0 da ff ff       	call   c0002027 <put_lfn>
c0004547:	31 d2                	xor    edx,edx
c0004549:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000454d:	89 d8                	mov    eax,ebx
c000454f:	e8 0b f2 ff ff       	call   c000375f <dir_next>
c0004554:	83 c4 10             	add    esp,0x10
c0004557:	89 c6                	mov    esi,eax
c0004559:	85 c0                	test   eax,eax
c000455b:	75 4d                	jne    c00045aa <dir_register+0x278>
c000455d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004561:	75 bd                	jne    c0004520 <dir_register+0x1ee>
c0004563:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004566:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004569:	89 e8                	mov    eax,ebp
c000456b:	e8 19 df ff ff       	call   c0002489 <move_window>
c0004570:	89 c6                	mov    esi,eax
c0004572:	85 c0                	test   eax,eax
c0004574:	75 34                	jne    c00045aa <dir_register+0x278>
c0004576:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004579:	b9 20 00 00 00       	mov    ecx,0x20
c000457e:	31 d2                	xor    edx,edx
c0004580:	e8 ba d7 ff ff       	call   c0001d3f <mem_set>
c0004585:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004588:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000458c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004591:	e8 94 d7 ff ff       	call   c0001d2a <mem_cpy>
c0004596:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004599:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000459c:	83 e0 18             	and    eax,0x18
c000459f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00045a2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00045a6:	eb 02                	jmp    c00045aa <dir_register+0x278>
c00045a8:	89 c6                	mov    esi,eax
c00045aa:	83 c4 6c             	add    esp,0x6c
c00045ad:	89 f0                	mov    eax,esi
c00045af:	5b                   	pop    ebx
c00045b0:	5e                   	pop    esi
c00045b1:	5f                   	pop    edi
c00045b2:	5d                   	pop    ebp
c00045b3:	c3                   	ret    

c00045b4 <sync_fs>:
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	53                   	push   ebx
c00045b7:	89 c3                	mov    ebx,eax
c00045b9:	e8 37 de ff ff       	call   c00023f5 <sync_window>
c00045be:	85 c0                	test   eax,eax
c00045c0:	0f 85 b1 00 00 00    	jne    c0004677 <sync_fs+0xc3>
c00045c6:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00045c9:	0f 85 8e 00 00 00    	jne    c000465d <sync_fs+0xa9>
c00045cf:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00045d3:	0f 85 84 00 00 00    	jne    c000465d <sync_fs+0xa9>
c00045d9:	b9 00 02 00 00       	mov    ecx,0x200
c00045de:	8d 73 54             	lea    esi,[ebx+0x54]
c00045e1:	31 d2                	xor    edx,edx
c00045e3:	89 f0                	mov    eax,esi
c00045e5:	e8 55 d7 ff ff       	call   c0001d3f <mem_set>
c00045ea:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045f0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045f5:	e8 23 d7 ff ff       	call   c0001d1d <st_word>
c00045fa:	ba 52 52 61 41       	mov    edx,0x41615252
c00045ff:	89 f0                	mov    eax,esi
c0004601:	e8 1b d7 ff ff       	call   c0001d21 <st_dword>
c0004606:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000460c:	ba 72 72 41 61       	mov    edx,0x61417272
c0004611:	e8 0b d7 ff ff       	call   c0001d21 <st_dword>
c0004616:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004619:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000461f:	e8 fd d6 ff ff       	call   c0001d21 <st_dword>
c0004624:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004627:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c000462d:	e8 ef d6 ff ff       	call   c0001d21 <st_dword>
c0004632:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004635:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004638:	83 c0 01             	add    eax,0x1
c000463b:	83 d2 00             	adc    edx,0x0
c000463e:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004641:	83 ec 0c             	sub    esp,0xc
c0004644:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004647:	6a 01                	push   0x1
c0004649:	52                   	push   edx
c000464a:	50                   	push   eax
c000464b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000464f:	56                   	push   esi
c0004650:	50                   	push   eax
c0004651:	e8 20 d6 ff ff       	call   c0001c76 <disk_write>
c0004656:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000465a:	83 c4 20             	add    esp,0x20
c000465d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004661:	51                   	push   ecx
c0004662:	6a 00                	push   0x0
c0004664:	6a 00                	push   0x0
c0004666:	50                   	push   eax
c0004667:	e8 20 d6 ff ff       	call   c0001c8c <disk_ioctl>
c000466c:	83 c4 10             	add    esp,0x10
c000466f:	85 c0                	test   eax,eax
c0004671:	0f 95 c0             	setne  al
c0004674:	0f b6 c0             	movzx  eax,al
c0004677:	5a                   	pop    edx
c0004678:	5b                   	pop    ebx
c0004679:	5e                   	pop    esi
c000467a:	c3                   	ret    

c000467b <create_partition>:
c000467b:	55                   	push   ebp
c000467c:	0f b6 c0             	movzx  eax,al
c000467f:	57                   	push   edi
c0004680:	56                   	push   esi
c0004681:	53                   	push   ebx
c0004682:	83 ec 60             	sub    esp,0x60
c0004685:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004689:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000468d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004691:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004695:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004699:	50                   	push   eax
c000469a:	6a 01                	push   0x1
c000469c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00046a0:	e8 e7 d5 ff ff       	call   c0001c8c <disk_ioctl>
c00046a5:	83 c4 10             	add    esp,0x10
c00046a8:	85 c0                	test   eax,eax
c00046aa:	74 0a                	je     c00046b6 <create_partition+0x3b>
c00046ac:	b8 01 00 00 00       	mov    eax,0x1
c00046b1:	e9 67 05 00 00       	jmp    c0004c1d <create_partition+0x5a2>
c00046b6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ba:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00046be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00046c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00046c6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00046cb:	0f 86 ed 03 00 00    	jbe    c0004abe <create_partition+0x443>
c00046d1:	83 c0 df             	add    eax,0xffffffdf
c00046d4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00046dc:	83 d2 ff             	adc    edx,0xffffffff
c00046df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ef:	83 c0 bd             	add    eax,0xffffffbd
c00046f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046f9:	83 d2 ff             	adc    edx,0xffffffff
c00046fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004700:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004704:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000470c:	be 22 00 00 00       	mov    esi,0x22
c0004711:	31 ff                	xor    edi,edi
c0004713:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c000471b:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004723:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000472b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000472f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004735:	75 0e                	jne    c0004745 <create_partition+0xca>
c0004737:	b9 00 02 00 00       	mov    ecx,0x200
c000473c:	31 d2                	xor    edx,edx
c000473e:	89 d8                	mov    eax,ebx
c0004740:	e8 fa d5 ff ff       	call   c0001d3f <mem_set>
c0004745:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004749:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000474d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004751:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004754:	0f 84 23 01 00 00    	je     c000487d <create_partition+0x202>
c000475a:	89 f0                	mov    eax,esi
c000475c:	89 fa                	mov    edx,edi
c000475e:	05 ff 07 00 00       	add    eax,0x7ff
c0004763:	83 d2 00             	adc    edx,0x0
c0004766:	89 c1                	mov    ecx,eax
c0004768:	89 d7                	mov    edi,edx
c000476a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004770:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004774:	89 ce                	mov    esi,ecx
c0004776:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000477a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000477e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004782:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004785:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004789:	89 04 24             	mov    DWORD PTR [esp],eax
c000478c:	b8 64 00 00 00       	mov    eax,0x64
c0004791:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004794:	b8 00 00 00 00       	mov    eax,0x0
c0004799:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000479d:	72 41                	jb     c00047e0 <create_partition+0x165>
c000479f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00047a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a7:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c00047ab:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00047b0:	01 c1                	add    ecx,eax
c00047b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00047b6:	f7 24 24             	mul    DWORD PTR [esp]
c00047b9:	6a 00                	push   0x0
c00047bb:	01 ca                	add    edx,ecx
c00047bd:	6a 64                	push   0x64
c00047bf:	52                   	push   edx
c00047c0:	50                   	push   eax
c00047c1:	e8 76 9f 01 00       	call   c001e73c <__udivdi3>
c00047c6:	83 c4 10             	add    esp,0x10
c00047c9:	05 ff 07 00 00       	add    eax,0x7ff
c00047ce:	83 d2 00             	adc    edx,0x0
c00047d1:	89 c1                	mov    ecx,eax
c00047d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047d7:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00047dd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047e7:	01 f0                	add    eax,esi
c00047e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ed:	11 fa                	adc    edx,edi
c00047ef:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047f3:	19 d1                	sbb    ecx,edx
c00047f5:	73 2e                	jae    c0004825 <create_partition+0x1aa>
c00047f7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047fb:	89 f8                	mov    eax,edi
c00047fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004804:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004808:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004810:	73 6b                	jae    c000487d <create_partition+0x202>
c0004812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000481a:	29 f0                	sub    eax,esi
c000481c:	19 fa                	sbb    edx,edi
c000481e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004821:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004829:	0b 04 24             	or     eax,DWORD PTR [esp]
c000482c:	74 4f                	je     c000487d <create_partition+0x202>
c000482e:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004831:	b9 10 00 00 00       	mov    ecx,0x10
c0004836:	ba d0 f7 01 c0       	mov    edx,0xc001f7d0
c000483b:	e8 ea d4 ff ff       	call   c0001d2a <mem_cpy>
c0004840:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004844:	b9 10 00 00 00       	mov    ecx,0x10
c0004849:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000484d:	e8 2c db ff ff       	call   c000237e <make_rand>
c0004852:	89 f2                	mov    edx,esi
c0004854:	89 f9                	mov    ecx,edi
c0004856:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000485a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000485e:	e8 c1 d4 ff ff       	call   c0001d24 <st_qword>
c0004863:	03 34 24             	add    esi,DWORD PTR [esp]
c0004866:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000486a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000486e:	89 f2                	mov    edx,esi
c0004870:	89 f9                	mov    ecx,edi
c0004872:	83 c2 ff             	add    edx,0xffffffff
c0004875:	83 d1 ff             	adc    ecx,0xffffffff
c0004878:	e8 a7 d4 ff ff       	call   c0001d24 <st_qword>
c000487d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004881:	83 e8 80             	sub    eax,0xffffff80
c0004884:	89 c5                	mov    ebp,eax
c0004886:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000488a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004890:	75 6b                	jne    c00048fd <create_partition+0x282>
c0004892:	45                   	inc    ebp
c0004893:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004897:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000489c:	e8 39 da ff ff       	call   c00022da <crc32>
c00048a1:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00048a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00048ab:	75 e5                	jne    c0004892 <create_partition+0x217>
c00048ad:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00048b1:	31 d2                	xor    edx,edx
c00048b3:	83 ec 0c             	sub    esp,0xc
c00048b6:	c1 ed 09             	shr    ebp,0x9
c00048b9:	6a 01                	push   0x1
c00048bb:	8d 45 02             	lea    eax,[ebp+0x2]
c00048be:	52                   	push   edx
c00048bf:	50                   	push   eax
c00048c0:	53                   	push   ebx
c00048c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c5:	e8 ac d3 ff ff       	call   c0001c76 <disk_write>
c00048ca:	83 c4 20             	add    esp,0x20
c00048cd:	85 c0                	test   eax,eax
c00048cf:	0f 85 d7 fd ff ff    	jne    c00046ac <create_partition+0x31>
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	31 d2                	xor    edx,edx
c00048da:	6a 01                	push   0x1
c00048dc:	89 e8                	mov    eax,ebp
c00048de:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048e2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048e6:	52                   	push   edx
c00048e7:	50                   	push   eax
c00048e8:	53                   	push   ebx
c00048e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ed:	e8 84 d3 ff ff       	call   c0001c76 <disk_write>
c00048f2:	83 c4 20             	add    esp,0x20
c00048f5:	85 c0                	test   eax,eax
c00048f7:	0f 85 af fd ff ff    	jne    c00046ac <create_partition+0x31>
c00048fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004901:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004905:	3d 00 40 00 00       	cmp    eax,0x4000
c000490a:	74 0d                	je     c0004919 <create_partition+0x29e>
c000490c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004910:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004914:	e9 12 fe ff ff       	jmp    c000472b <create_partition+0xb0>
c0004919:	31 d2                	xor    edx,edx
c000491b:	b9 00 02 00 00       	mov    ecx,0x200
c0004920:	89 d8                	mov    eax,ebx
c0004922:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004925:	e8 15 d4 ff ff       	call   c0001d3f <mem_set>
c000492a:	8d 7b 48             	lea    edi,[ebx+0x48]
c000492d:	b9 10 00 00 00       	mov    ecx,0x10
c0004932:	ba c0 f6 01 c0       	mov    edx,0xc001f6c0
c0004937:	89 d8                	mov    eax,ebx
c0004939:	e8 ec d3 ff ff       	call   c0001d2a <mem_cpy>
c000493e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004942:	8d 43 58             	lea    eax,[ebx+0x58]
c0004945:	f7 d2                	not    edx
c0004947:	e8 d5 d3 ff ff       	call   c0001d21 <st_dword>
c000494c:	8d 43 18             	lea    eax,[ebx+0x18]
c000494f:	31 c9                	xor    ecx,ecx
c0004951:	89 04 24             	mov    DWORD PTR [esp],eax
c0004954:	ba 01 00 00 00       	mov    edx,0x1
c0004959:	e8 c6 d3 ff ff       	call   c0001d24 <st_qword>
c000495e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004962:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004966:	83 c2 ff             	add    edx,0xffffffff
c0004969:	89 e8                	mov    eax,ebp
c000496b:	83 d1 ff             	adc    ecx,0xffffffff
c000496e:	e8 b1 d3 ff ff       	call   c0001d24 <st_qword>
c0004973:	31 c9                	xor    ecx,ecx
c0004975:	8d 43 28             	lea    eax,[ebx+0x28]
c0004978:	ba 22 00 00 00       	mov    edx,0x22
c000497d:	e8 a2 d3 ff ff       	call   c0001d24 <st_qword>
c0004982:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004986:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000498a:	83 c2 de             	add    edx,0xffffffde
c000498d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004990:	83 d1 ff             	adc    ecx,0xffffffff
c0004993:	31 f6                	xor    esi,esi
c0004995:	e8 8a d3 ff ff       	call   c0001d24 <st_qword>
c000499a:	8d 43 54             	lea    eax,[ebx+0x54]
c000499d:	ba 80 00 00 00       	mov    edx,0x80
c00049a2:	e8 7a d3 ff ff       	call   c0001d21 <st_dword>
c00049a7:	8d 43 50             	lea    eax,[ebx+0x50]
c00049aa:	ba 80 00 00 00       	mov    edx,0x80
c00049af:	e8 6d d3 ff ff       	call   c0001d21 <st_dword>
c00049b4:	ba 02 00 00 00       	mov    edx,0x2
c00049b9:	89 f8                	mov    eax,edi
c00049bb:	e8 61 d3 ff ff       	call   c0001d21 <st_dword>
c00049c0:	8d 53 38             	lea    edx,[ebx+0x38]
c00049c3:	b9 10 00 00 00       	mov    ecx,0x10
c00049c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00049cc:	e8 ad d9 ff ff       	call   c000237e <make_rand>
c00049d1:	83 c8 ff             	or     eax,0xffffffff
c00049d4:	46                   	inc    esi
c00049d5:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00049da:	e8 fb d8 ff ff       	call   c00022da <crc32>
c00049df:	83 fe 5c             	cmp    esi,0x5c
c00049e2:	75 f0                	jne    c00049d4 <create_partition+0x359>
c00049e4:	f7 d0                	not    eax
c00049e6:	8d 73 10             	lea    esi,[ebx+0x10]
c00049e9:	89 c2                	mov    edx,eax
c00049eb:	89 f0                	mov    eax,esi
c00049ed:	e8 2f d3 ff ff       	call   c0001d21 <st_dword>
c00049f2:	83 ec 0c             	sub    esp,0xc
c00049f5:	6a 01                	push   0x1
c00049f7:	6a 00                	push   0x0
c00049f9:	6a 01                	push   0x1
c00049fb:	53                   	push   ebx
c00049fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a00:	e8 71 d2 ff ff       	call   c0001c76 <disk_write>
c0004a05:	83 c4 20             	add    esp,0x20
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 9c fc ff ff    	jne    c00046ac <create_partition+0x31>
c0004a10:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004a14:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004a18:	83 c2 ff             	add    edx,0xffffffff
c0004a1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a1e:	83 d1 ff             	adc    ecx,0xffffffff
c0004a21:	e8 fe d2 ff ff       	call   c0001d24 <st_qword>
c0004a26:	ba 01 00 00 00       	mov    edx,0x1
c0004a2b:	31 c9                	xor    ecx,ecx
c0004a2d:	89 e8                	mov    eax,ebp
c0004a2f:	e8 f0 d2 ff ff       	call   c0001d24 <st_qword>
c0004a34:	89 f8                	mov    eax,edi
c0004a36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004a3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	e8 df d2 ff ff       	call   c0001d24 <st_qword>
c0004a45:	89 f0                	mov    eax,esi
c0004a47:	31 d2                	xor    edx,edx
c0004a49:	e8 d3 d2 ff ff       	call   c0001d21 <st_dword>
c0004a4e:	83 c8 ff             	or     eax,0xffffffff
c0004a51:	47                   	inc    edi
c0004a52:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a57:	e8 7e d8 ff ff       	call   c00022da <crc32>
c0004a5c:	83 ff 5c             	cmp    edi,0x5c
c0004a5f:	75 f0                	jne    c0004a51 <create_partition+0x3d6>
c0004a61:	f7 d0                	not    eax
c0004a63:	89 c2                	mov    edx,eax
c0004a65:	89 f0                	mov    eax,esi
c0004a67:	e8 b5 d2 ff ff       	call   c0001d21 <st_dword>
c0004a6c:	83 ec 0c             	sub    esp,0xc
c0004a6f:	6a 01                	push   0x1
c0004a71:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a75:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a79:	83 c0 ff             	add    eax,0xffffffff
c0004a7c:	83 d2 ff             	adc    edx,0xffffffff
c0004a7f:	52                   	push   edx
c0004a80:	50                   	push   eax
c0004a81:	53                   	push   ebx
c0004a82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a86:	e8 eb d1 ff ff       	call   c0001c76 <disk_write>
c0004a8b:	83 c4 20             	add    esp,0x20
c0004a8e:	85 c0                	test   eax,eax
c0004a90:	0f 85 16 fc ff ff    	jne    c00046ac <create_partition+0x31>
c0004a96:	31 d2                	xor    edx,edx
c0004a98:	89 d8                	mov    eax,ebx
c0004a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0004a9f:	e8 9b d2 ff ff       	call   c0001d3f <mem_set>
c0004aa4:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004aaa:	b9 10 00 00 00       	mov    ecx,0x10
c0004aaf:	ba d0 f6 01 c0       	mov    edx,0xc001f6d0
c0004ab4:	e8 71 d2 ff ff       	call   c0001d2a <mem_cpy>
c0004ab9:	e9 21 01 00 00       	jmp    c0004bdf <create_partition+0x564>
c0004abe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004ac2:	b9 05 00 00 00       	mov    ecx,0x5
c0004ac7:	89 04 24             	mov    DWORD PTR [esp],eax
c0004aca:	bf 08 00 00 00       	mov    edi,0x8
c0004acf:	89 f8                	mov    eax,edi
c0004ad1:	31 d2                	xor    edx,edx
c0004ad3:	0f b6 f0             	movzx  esi,al
c0004ad6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ad9:	f7 f6                	div    esi
c0004adb:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004ae0:	76 0a                	jbe    c0004aec <create_partition+0x471>
c0004ae2:	d1 e7                	shl    edi,1
c0004ae4:	49                   	dec    ecx
c0004ae5:	75 e8                	jne    c0004acf <create_partition+0x454>
c0004ae7:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aec:	b9 00 02 00 00       	mov    ecx,0x200
c0004af1:	31 d2                	xor    edx,edx
c0004af3:	89 d8                	mov    eax,ebx
c0004af5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004afb:	e8 3f d2 ff ff       	call   c0001d3f <mem_set>
c0004b00:	b9 64 00 00 00       	mov    ecx,0x64
c0004b05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b08:	31 d2                	xor    edx,edx
c0004b0a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004b12:	f7 f1                	div    ecx
c0004b14:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004b19:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004b1d:	89 f8                	mov    eax,edi
c0004b1f:	0f b6 c0             	movzx  eax,al
c0004b22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004b26:	e9 80 00 00 00       	jmp    c0004bab <create_partition+0x530>
c0004b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b2e:	29 cf                	sub    edi,ecx
c0004b30:	89 ca                	mov    edx,ecx
c0004b32:	89 f0                	mov    eax,esi
c0004b34:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b39:	e8 e3 d1 ff ff       	call   c0001d21 <st_dword>
c0004b3e:	8d 46 04             	lea    eax,[esi+0x4]
c0004b41:	89 fa                	mov    edx,edi
c0004b43:	83 c6 10             	add    esi,0x10
c0004b46:	e8 d6 d1 ff ff       	call   c0001d21 <st_dword>
c0004b4b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b4f:	31 d2                	xor    edx,edx
c0004b51:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b54:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b58:	89 c8                	mov    eax,ecx
c0004b5a:	01 f9                	add    ecx,edi
c0004b5c:	f7 f5                	div    ebp
c0004b5e:	89 d5                	mov    ebp,edx
c0004b60:	31 d2                	xor    edx,edx
c0004b62:	45                   	inc    ebp
c0004b63:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b67:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b6a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b6d:	89 c2                	mov    edx,eax
c0004b6f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b72:	c1 ea 02             	shr    edx,0x2
c0004b75:	83 e2 c0             	and    edx,0xffffffc0
c0004b78:	09 ea                	or     edx,ebp
c0004b7a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b7f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b82:	31 d2                	xor    edx,edx
c0004b84:	f7 f5                	div    ebp
c0004b86:	89 d7                	mov    edi,edx
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	47                   	inc    edi
c0004b8b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b8f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b92:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b95:	89 c5                	mov    ebp,eax
c0004b97:	c1 ed 02             	shr    ebp,0x2
c0004b9a:	83 e5 c0             	and    ebp,0xffffffc0
c0004b9d:	09 ef                	or     edi,ebp
c0004b9f:	89 fa                	mov    edx,edi
c0004ba1:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004ba4:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004ba9:	74 34                	je     c0004bdf <create_partition+0x564>
c0004bab:	85 c9                	test   ecx,ecx
c0004bad:	74 30                	je     c0004bdf <create_partition+0x564>
c0004baf:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004bb2:	76 2b                	jbe    c0004bdf <create_partition+0x564>
c0004bb4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004bb8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004bbc:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004bbf:	83 ff 64             	cmp    edi,0x64
c0004bc2:	76 4b                	jbe    c0004c0f <create_partition+0x594>
c0004bc4:	89 f8                	mov    eax,edi
c0004bc6:	01 c8                	add    eax,ecx
c0004bc8:	0f 82 5d ff ff ff    	jb     c0004b2b <create_partition+0x4b0>
c0004bce:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004bd1:	0f 87 54 ff ff ff    	ja     c0004b2b <create_partition+0x4b0>
c0004bd7:	85 ff                	test   edi,edi
c0004bd9:	0f 85 51 ff ff ff    	jne    c0004b30 <create_partition+0x4b5>
c0004bdf:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004be5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004bea:	e8 2e d1 ff ff       	call   c0001d1d <st_word>
c0004bef:	83 ec 0c             	sub    esp,0xc
c0004bf2:	6a 01                	push   0x1
c0004bf4:	6a 00                	push   0x0
c0004bf6:	6a 00                	push   0x0
c0004bf8:	53                   	push   ebx
c0004bf9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bfd:	e8 74 d0 ff ff       	call   c0001c76 <disk_write>
c0004c02:	83 c4 20             	add    esp,0x20
c0004c05:	85 c0                	test   eax,eax
c0004c07:	0f 95 c0             	setne  al
c0004c0a:	0f b6 c0             	movzx  eax,al
c0004c0d:	eb 0e                	jmp    c0004c1d <create_partition+0x5a2>
c0004c0f:	74 07                	je     c0004c18 <create_partition+0x59d>
c0004c11:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004c16:	eb ac                	jmp    c0004bc4 <create_partition+0x549>
c0004c18:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004c1b:	eb a7                	jmp    c0004bc4 <create_partition+0x549>
c0004c1d:	83 c4 5c             	add    esp,0x5c
c0004c20:	5b                   	pop    ebx
c0004c21:	5e                   	pop    esi
c0004c22:	5f                   	pop    edi
c0004c23:	5d                   	pop    ebp
c0004c24:	c3                   	ret    

c0004c25 <get_fileinfo>:
c0004c25:	55                   	push   ebp
c0004c26:	57                   	push   edi
c0004c27:	56                   	push   esi
c0004c28:	53                   	push   ebx
c0004c29:	83 ec 1c             	sub    esp,0x1c
c0004c2c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c2e:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004c32:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004c36:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004c39:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004c3c:	0f 84 dc 01 00 00    	je     c0004e1e <get_fileinfo+0x1f9>
c0004c42:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c45:	75 0f                	jne    c0004c56 <get_fileinfo+0x31>
c0004c47:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c4a:	83 c4 1c             	add    esp,0x1c
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	5f                   	pop    edi
c0004c50:	5d                   	pop    ebp
c0004c51:	e9 58 d5 ff ff       	jmp    c00021ae <get_xfileinfo>
c0004c56:	89 d3                	mov    ebx,edx
c0004c58:	89 c6                	mov    esi,eax
c0004c5a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c5e:	74 6a                	je     c0004cca <get_fileinfo+0xa5>
c0004c60:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c68:	31 ed                	xor    ebp,ebp
c0004c6a:	31 ff                	xor    edi,edi
c0004c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c77:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c7b:	66 85 d2             	test   dx,dx
c0004c7e:	74 3e                	je     c0004cbe <get_fileinfo+0x99>
c0004c80:	66 85 ed             	test   bp,bp
c0004c83:	75 0c                	jne    c0004c91 <get_fileinfo+0x6c>
c0004c85:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c8b:	66 3d ff 07          	cmp    ax,0x7ff
c0004c8f:	76 22                	jbe    c0004cb3 <get_fileinfo+0x8e>
c0004c91:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c96:	89 e8                	mov    eax,ebp
c0004c98:	29 f9                	sub    ecx,edi
c0004c9a:	c1 e0 10             	shl    eax,0x10
c0004c9d:	09 d0                	or     eax,edx
c0004c9f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004ca3:	e8 a3 d1 ff ff       	call   c0001e4b <put_utf>
c0004ca8:	84 c0                	test   al,al
c0004caa:	74 10                	je     c0004cbc <get_fileinfo+0x97>
c0004cac:	0f b6 c0             	movzx  eax,al
c0004caf:	31 d2                	xor    edx,edx
c0004cb1:	01 c7                	add    edi,eax
c0004cb3:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004cb8:	89 d5                	mov    ebp,edx
c0004cba:	eb b0                	jmp    c0004c6c <get_fileinfo+0x47>
c0004cbc:	31 ff                	xor    edi,edi
c0004cbe:	66 85 ed             	test   bp,bp
c0004cc1:	74 02                	je     c0004cc5 <get_fileinfo+0xa0>
c0004cc3:	31 ff                	xor    edi,edi
c0004cc5:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004cca:	31 ff                	xor    edi,edi
c0004ccc:	31 c9                	xor    ecx,ecx
c0004cce:	83 f9 0a             	cmp    ecx,0xa
c0004cd1:	0f 87 ad 00 00 00    	ja     c0004d84 <get_fileinfo+0x15f>
c0004cd7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cda:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004cdd:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ce1:	66 83 fa 20          	cmp    dx,0x20
c0004ce5:	0f 84 92 00 00 00    	je     c0004d7d <get_fileinfo+0x158>
c0004ceb:	66 83 fa 05          	cmp    dx,0x5
c0004cef:	75 05                	jne    c0004cf6 <get_fileinfo+0xd1>
c0004cf1:	ba e5 00 00 00       	mov    edx,0xe5
c0004cf6:	83 ff 0b             	cmp    edi,0xb
c0004cf9:	77 0b                	ja     c0004d06 <get_fileinfo+0xe1>
c0004cfb:	83 fd 09             	cmp    ebp,0x9
c0004cfe:	75 06                	jne    c0004d06 <get_fileinfo+0xe1>
c0004d00:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004d05:	47                   	inc    edi
c0004d06:	0f b7 c2             	movzx  eax,dx
c0004d09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0d:	e8 6d d0 ff ff       	call   c0001d7f <dbc_1st>
c0004d12:	85 c0                	test   eax,eax
c0004d14:	74 2f                	je     c0004d45 <get_fileinfo+0x120>
c0004d16:	83 fd 08             	cmp    ebp,0x8
c0004d19:	74 2a                	je     c0004d45 <get_fileinfo+0x120>
c0004d1b:	83 fd 0b             	cmp    ebp,0xb
c0004d1e:	74 25                	je     c0004d45 <get_fileinfo+0x120>
c0004d20:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d23:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004d27:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004d2b:	e8 52 d0 ff ff       	call   c0001d82 <dbc_2nd>
c0004d30:	85 c0                	test   eax,eax
c0004d32:	74 11                	je     c0004d45 <get_fileinfo+0x120>
c0004d34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004d38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004d3d:	c1 e2 08             	shl    edx,0x8
c0004d40:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d43:	09 c2                	or     edx,eax
c0004d45:	0f b7 d2             	movzx  edx,dx
c0004d48:	50                   	push   eax
c0004d49:	50                   	push   eax
c0004d4a:	68 b5 01 00 00       	push   0x1b5
c0004d4f:	52                   	push   edx
c0004d50:	e8 46 38 00 00       	call   c000859b <ff_oem2uni>
c0004d55:	83 c4 10             	add    esp,0x10
c0004d58:	66 85 c0             	test   ax,ax
c0004d5b:	75 04                	jne    c0004d61 <get_fileinfo+0x13c>
c0004d5d:	31 ff                	xor    edi,edi
c0004d5f:	eb 23                	jmp    c0004d84 <get_fileinfo+0x15f>
c0004d61:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d66:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d6a:	29 f9                	sub    ecx,edi
c0004d6c:	0f b7 c0             	movzx  eax,ax
c0004d6f:	e8 d7 d0 ff ff       	call   c0001e4b <put_utf>
c0004d74:	84 c0                	test   al,al
c0004d76:	74 e5                	je     c0004d5d <get_fileinfo+0x138>
c0004d78:	0f b6 c0             	movzx  eax,al
c0004d7b:	01 c7                	add    edi,eax
c0004d7d:	89 e9                	mov    ecx,ebp
c0004d7f:	e9 4a ff ff ff       	jmp    c0004cce <get_fileinfo+0xa9>
c0004d84:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d89:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d8d:	75 54                	jne    c0004de3 <get_fileinfo+0x1be>
c0004d8f:	85 ff                	test   edi,edi
c0004d91:	75 0b                	jne    c0004d9e <get_fileinfo+0x179>
c0004d93:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d97:	ba 01 00 00 00       	mov    edx,0x1
c0004d9c:	eb 33                	jmp    c0004dd1 <get_fileinfo+0x1ac>
c0004d9e:	b1 08                	mov    cl,0x8
c0004da0:	31 d2                	xor    edx,edx
c0004da2:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004da8:	84 c0                	test   al,al
c0004daa:	74 25                	je     c0004dd1 <get_fileinfo+0x1ac>
c0004dac:	66 83 f8 2e          	cmp    ax,0x2e
c0004db0:	74 16                	je     c0004dc8 <get_fileinfo+0x1a3>
c0004db2:	8d 78 bf             	lea    edi,[eax-0x41]
c0004db5:	66 83 ff 19          	cmp    di,0x19
c0004db9:	77 0f                	ja     c0004dca <get_fileinfo+0x1a5>
c0004dbb:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004dbe:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004dc1:	74 07                	je     c0004dca <get_fileinfo+0x1a5>
c0004dc3:	83 c0 20             	add    eax,0x20
c0004dc6:	eb 02                	jmp    c0004dca <get_fileinfo+0x1a5>
c0004dc8:	b1 10                	mov    cl,0x10
c0004dca:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004dce:	42                   	inc    edx
c0004dcf:	eb d1                	jmp    c0004da2 <get_fileinfo+0x17d>
c0004dd1:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004dd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ddd:	75 04                	jne    c0004de3 <get_fileinfo+0x1be>
c0004ddf:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004de3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004de6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004de9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004dec:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004def:	83 c0 1c             	add    eax,0x1c
c0004df2:	e8 c1 ce ff ff       	call   c0001cb8 <ld_dword>
c0004df7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dfe:	89 03                	mov    DWORD PTR [ebx],eax
c0004e00:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004e03:	83 c0 16             	add    eax,0x16
c0004e06:	e8 a0 ce ff ff       	call   c0001cab <ld_word>
c0004e0b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004e0f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004e12:	83 c0 18             	add    eax,0x18
c0004e15:	e8 91 ce ff ff       	call   c0001cab <ld_word>
c0004e1a:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004e1e:	83 c4 1c             	add    esp,0x1c
c0004e21:	5b                   	pop    ebx
c0004e22:	5e                   	pop    esi
c0004e23:	5f                   	pop    edi
c0004e24:	5d                   	pop    ebp
c0004e25:	c3                   	ret    

c0004e26 <ld_clust.isra.0>:
c0004e26:	56                   	push   esi
c0004e27:	89 c6                	mov    esi,eax
c0004e29:	53                   	push   ebx
c0004e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004e2d:	89 d3                	mov    ebx,edx
c0004e2f:	e8 77 ce ff ff       	call   c0001cab <ld_word>
c0004e34:	0f b7 c8             	movzx  ecx,ax
c0004e37:	89 f0                	mov    eax,esi
c0004e39:	3c 03                	cmp    al,0x3
c0004e3b:	75 0d                	jne    c0004e4a <ld_clust.isra.0+0x24>
c0004e3d:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e40:	e8 66 ce ff ff       	call   c0001cab <ld_word>
c0004e45:	c1 e0 10             	shl    eax,0x10
c0004e48:	09 c1                	or     ecx,eax
c0004e4a:	89 c8                	mov    eax,ecx
c0004e4c:	5b                   	pop    ebx
c0004e4d:	5e                   	pop    esi
c0004e4e:	c3                   	ret    

c0004e4f <st_clust.isra.1>:
c0004e4f:	56                   	push   esi
c0004e50:	89 c6                	mov    esi,eax
c0004e52:	53                   	push   ebx
c0004e53:	89 d3                	mov    ebx,edx
c0004e55:	0f b7 d1             	movzx  edx,cx
c0004e58:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e5b:	e8 bd ce ff ff       	call   c0001d1d <st_word>
c0004e60:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e63:	75 0f                	jne    c0004e74 <st_clust.isra.1+0x25>
c0004e65:	c1 e9 10             	shr    ecx,0x10
c0004e68:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e6b:	89 ca                	mov    edx,ecx
c0004e6d:	5b                   	pop    ebx
c0004e6e:	5e                   	pop    esi
c0004e6f:	e9 a9 ce ff ff       	jmp    c0001d1d <st_word>
c0004e74:	5b                   	pop    ebx
c0004e75:	5e                   	pop    esi
c0004e76:	c3                   	ret    

c0004e77 <init_alloc_info.isra.2>:
c0004e77:	56                   	push   esi
c0004e78:	53                   	push   ebx
c0004e79:	89 c6                	mov    esi,eax
c0004e7b:	89 d3                	mov    ebx,edx
c0004e7d:	51                   	push   ecx
c0004e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e80:	83 c0 34             	add    eax,0x34
c0004e83:	e8 30 ce ff ff       	call   c0001cb8 <ld_dword>
c0004e88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e8d:	83 c0 38             	add    eax,0x38
c0004e90:	e8 3b ce ff ff       	call   c0001cd0 <ld_qword>
c0004e95:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e98:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e9b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e9d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004ea0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea7:	83 e0 02             	and    eax,0x2
c0004eaa:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004ead:	5b                   	pop    ebx
c0004eae:	5b                   	pop    ebx
c0004eaf:	5e                   	pop    esi
c0004eb0:	c3                   	ret    

c0004eb1 <follow_path>:
c0004eb1:	56                   	push   esi
c0004eb2:	53                   	push   ebx
c0004eb3:	89 c3                	mov    ebx,eax
c0004eb5:	83 ec 14             	sub    esp,0x14
c0004eb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ebc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ec2:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ec4:	80 fa 5c             	cmp    dl,0x5c
c0004ec7:	75 07                	jne    c0004ed0 <follow_path+0x1f>
c0004ec9:	40                   	inc    eax
c0004eca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ece:	eb ee                	jmp    c0004ebe <follow_path+0xd>
c0004ed0:	80 fa 2f             	cmp    dl,0x2f
c0004ed3:	74 f4                	je     c0004ec9 <follow_path+0x18>
c0004ed5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004edc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ee3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ee6:	77 52                	ja     c0004f3a <follow_path+0x89>
c0004ee8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eec:	31 d2                	xor    edx,edx
c0004eee:	89 d8                	mov    eax,ebx
c0004ef0:	e8 12 e3 ff ff       	call   c0003207 <dir_sdi>
c0004ef5:	eb 7c                	jmp    c0004f73 <follow_path+0xc2>
c0004ef7:	89 d8                	mov    eax,ebx
c0004ef9:	e8 6e f2 ff ff       	call   c000416c <dir_find>
c0004efe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004f01:	85 c0                	test   eax,eax
c0004f03:	75 46                	jne    c0004f4b <follow_path+0x9a>
c0004f05:	80 e2 04             	and    dl,0x4
c0004f08:	75 69                	jne    c0004f73 <follow_path+0xc2>
c0004f0a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004f0e:	74 5e                	je     c0004f6e <follow_path+0xbd>
c0004f10:	8a 06                	mov    al,BYTE PTR [esi]
c0004f12:	3c 04                	cmp    al,0x4
c0004f14:	75 41                	jne    c0004f57 <follow_path+0xa6>
c0004f16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f19:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004f1d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004f23:	30 c0                	xor    al,al
c0004f25:	09 d0                	or     eax,edx
c0004f27:	89 da                	mov    edx,ebx
c0004f29:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f2c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004f2f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f32:	8d 46 10             	lea    eax,[esi+0x10]
c0004f35:	e8 3d ff ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c0004f3a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004f3e:	89 d8                	mov    eax,ebx
c0004f40:	e8 a9 ed ff ff       	call   c0003cee <create_name>
c0004f45:	85 c0                	test   eax,eax
c0004f47:	74 ae                	je     c0004ef7 <follow_path+0x46>
c0004f49:	eb 28                	jmp    c0004f73 <follow_path+0xc2>
c0004f4b:	83 f8 04             	cmp    eax,0x4
c0004f4e:	75 23                	jne    c0004f73 <follow_path+0xc2>
c0004f50:	80 e2 04             	and    dl,0x4
c0004f53:	74 19                	je     c0004f6e <follow_path+0xbd>
c0004f55:	eb 1c                	jmp    c0004f73 <follow_path+0xc2>
c0004f57:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f5a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f60:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f64:	e8 bd fe ff ff       	call   c0004e26 <ld_clust.isra.0>
c0004f69:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f6c:	eb cc                	jmp    c0004f3a <follow_path+0x89>
c0004f6e:	b8 05 00 00 00       	mov    eax,0x5
c0004f73:	83 c4 14             	add    esp,0x14
c0004f76:	5b                   	pop    ebx
c0004f77:	5e                   	pop    esi
c0004f78:	c3                   	ret    

c0004f79 <f_mount>:
c0004f79:	53                   	push   ebx
c0004f7a:	83 ec 18             	sub    esp,0x18
c0004f7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f81:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f8d:	e8 fb d2 ff ff       	call   c000228d <get_ldnumber>
c0004f92:	89 c2                	mov    edx,eax
c0004f94:	b8 0b 00 00 00       	mov    eax,0xb
c0004f99:	85 d2                	test   edx,edx
c0004f9b:	78 39                	js     c0004fd6 <f_mount+0x5d>
c0004f9d:	8b 04 95 40 ba 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc45c0]
c0004fa4:	85 c0                	test   eax,eax
c0004fa6:	74 03                	je     c0004fab <f_mount+0x32>
c0004fa8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004faf:	85 c0                	test   eax,eax
c0004fb1:	74 03                	je     c0004fb6 <f_mount+0x3d>
c0004fb3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fba:	89 04 95 40 ba 03 c0 	mov    DWORD PTR [edx*4-0x3ffc45c0],eax
c0004fc1:	31 c0                	xor    eax,eax
c0004fc3:	84 db                	test   bl,bl
c0004fc5:	74 0f                	je     c0004fd6 <f_mount+0x5d>
c0004fc7:	31 c9                	xor    ecx,ecx
c0004fc9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fcd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fd1:	e8 65 d7 ff ff       	call   c000273b <mount_volume>
c0004fd6:	83 c4 18             	add    esp,0x18
c0004fd9:	5b                   	pop    ebx
c0004fda:	c3                   	ret    

c0004fdb <f_open>:
c0004fdb:	55                   	push   ebp
c0004fdc:	bd 09 00 00 00       	mov    ebp,0x9
c0004fe1:	57                   	push   edi
c0004fe2:	56                   	push   esi
c0004fe3:	53                   	push   ebx
c0004fe4:	83 ec 7c             	sub    esp,0x7c
c0004fe7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fee:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ff5:	85 db                	test   ebx,ebx
c0004ff7:	0f 84 10 04 00 00    	je     c000540d <f_open+0x432>
c0004ffd:	89 fe                	mov    esi,edi
c0004fff:	8d 54 24 20          	lea    edx,[esp+0x20]
c0005003:	83 e6 3f             	and    esi,0x3f
c0005006:	89 f0                	mov    eax,esi
c0005008:	0f b6 c8             	movzx  ecx,al
c000500b:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0005012:	e8 24 d7 ff ff       	call   c000273b <mount_volume>
c0005017:	89 c5                	mov    ebp,eax
c0005019:	85 c0                	test   eax,eax
c000501b:	0f 85 e6 03 00 00    	jne    c0005407 <f_open+0x42c>
c0005021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005025:	bd 11 00 00 00       	mov    ebp,0x11
c000502a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000502e:	83 ec 0c             	sub    esp,0xc
c0005031:	68 60 04 00 00       	push   0x460
c0005036:	e8 a3 34 00 00       	call   c00084de <ff_memalloc>
c000503b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000503f:	83 c4 10             	add    esp,0x10
c0005042:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005047:	0f 84 c0 03 00 00    	je     c000540d <f_open+0x432>
c000504d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005051:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005055:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c000505b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000505e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005061:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005068:	8d 44 24 24          	lea    eax,[esp+0x24]
c000506c:	e8 40 fe ff ff       	call   c0004eb1 <follow_path>
c0005071:	89 c5                	mov    ebp,eax
c0005073:	85 c0                	test   eax,eax
c0005075:	75 0c                	jne    c0005083 <f_open+0xa8>
c0005077:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000507c:	79 05                	jns    c0005083 <f_open+0xa8>
c000507e:	bd 06 00 00 00       	mov    ebp,0x6
c0005083:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005089:	0f 84 84 01 00 00    	je     c0005213 <f_open+0x238>
c000508f:	85 ed                	test   ebp,ebp
c0005091:	74 20                	je     c00050b3 <f_open+0xd8>
c0005093:	83 fd 04             	cmp    ebp,0x4
c0005096:	0f 85 58 03 00 00    	jne    c00053f4 <f_open+0x419>
c000509c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a0:	83 ce 08             	or     esi,0x8
c00050a3:	e8 8a f2 ff ff       	call   c0004332 <dir_register>
c00050a8:	89 c5                	mov    ebp,eax
c00050aa:	85 c0                	test   eax,eax
c00050ac:	74 2f                	je     c00050dd <f_open+0x102>
c00050ae:	e9 41 03 00 00       	jmp    c00053f4 <f_open+0x419>
c00050b3:	bd 07 00 00 00       	mov    ebp,0x7
c00050b8:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c00050bd:	0f 85 31 03 00 00    	jne    c00053f4 <f_open+0x419>
c00050c3:	bd 08 00 00 00       	mov    ebp,0x8
c00050c8:	f7 c7 04 00 00 00    	test   edi,0x4
c00050ce:	0f 85 20 03 00 00    	jne    c00053f4 <f_open+0x419>
c00050d4:	83 e7 08             	and    edi,0x8
c00050d7:	0f 84 65 01 00 00    	je     c0005242 <f_open+0x267>
c00050dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050e1:	8a 02                	mov    al,BYTE PTR [edx]
c00050e3:	3c 04                	cmp    al,0x4
c00050e5:	0f 85 97 00 00 00    	jne    c0005182 <f_open+0x1a7>
c00050eb:	8d 42 10             	lea    eax,[edx+0x10]
c00050ee:	89 13                	mov    DWORD PTR [ebx],edx
c00050f0:	89 da                	mov    edx,ebx
c00050f2:	e8 80 fd ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00050f7:	31 d2                	xor    edx,edx
c00050f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050fd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0005102:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005105:	83 c0 02             	add    eax,0x2
c0005108:	e8 32 cc ff ff       	call   c0001d3f <mem_set>
c000510d:	b9 1a 00 00 00       	mov    ecx,0x1a
c0005112:	31 d2                	xor    edx,edx
c0005114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005118:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000511b:	83 c0 26             	add    eax,0x26
c000511e:	e8 1c cc ff ff       	call   c0001d3f <mem_set>
c0005123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005127:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000512a:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c000512e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005136:	83 c0 08             	add    eax,0x8
c0005139:	e8 e3 cb ff ff       	call   c0001d21 <st_dword>
c000513e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005142:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005145:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005149:	8d 44 24 24          	lea    eax,[esp+0x24]
c000514d:	e8 b7 ea ff ff       	call   c0003c09 <store_xdir>
c0005152:	89 c5                	mov    ebp,eax
c0005154:	85 c0                	test   eax,eax
c0005156:	0f 85 98 02 00 00    	jne    c00053f4 <f_open+0x419>
c000515c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000515f:	85 d2                	test   edx,edx
c0005161:	0f 84 db 00 00 00    	je     c0005242 <f_open+0x267>
c0005167:	31 c9                	xor    ecx,ecx
c0005169:	89 d8                	mov    eax,ebx
c000516b:	e8 8e e3 ff ff       	call   c00034fe <remove_chain>
c0005170:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005174:	89 c5                	mov    ebp,eax
c0005176:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005179:	48                   	dec    eax
c000517a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000517d:	e9 b8 00 00 00       	jmp    c000523a <f_open+0x25f>
c0005182:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005186:	89 ea                	mov    edx,ebp
c0005188:	e8 99 fc ff ff       	call   c0004e26 <ld_clust.isra.0>
c000518d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005192:	89 c7                	mov    edi,eax
c0005194:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005197:	e8 85 cb ff ff       	call   c0001d21 <st_dword>
c000519c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00051a0:	31 c9                	xor    ecx,ecx
c00051a2:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00051a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051aa:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00051ae:	e8 9c fc ff ff       	call   c0004e4f <st_clust.isra.1>
c00051b3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00051b7:	31 d2                	xor    edx,edx
c00051b9:	83 c0 1c             	add    eax,0x1c
c00051bc:	e8 60 cb ff ff       	call   c0001d21 <st_dword>
c00051c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c5:	85 ff                	test   edi,edi
c00051c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051cb:	74 75                	je     c0005242 <f_open+0x267>
c00051cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051d1:	31 c9                	xor    ecx,ecx
c00051d3:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c00051d6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c00051d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051e1:	89 fa                	mov    edx,edi
c00051e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051e7:	e8 12 e3 ff ff       	call   c00034fe <remove_chain>
c00051ec:	89 c5                	mov    ebp,eax
c00051ee:	85 c0                	test   eax,eax
c00051f0:	0f 85 fe 01 00 00    	jne    c00053f4 <f_open+0x419>
c00051f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005202:	4f                   	dec    edi
c0005203:	e8 81 d2 ff ff       	call   c0002489 <move_window>
c0005208:	89 c5                	mov    ebp,eax
c000520a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000520e:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0005211:	eb 27                	jmp    c000523a <f_open+0x25f>
c0005213:	85 ed                	test   ebp,ebp
c0005215:	0f 85 d9 01 00 00    	jne    c00053f4 <f_open+0x419>
c000521b:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000521f:	bd 04 00 00 00       	mov    ebp,0x4
c0005224:	a8 10                	test   al,0x10
c0005226:	0f 85 c8 01 00 00    	jne    c00053f4 <f_open+0x419>
c000522c:	83 e7 02             	and    edi,0x2
c000522f:	74 11                	je     c0005242 <f_open+0x267>
c0005231:	bd 07 00 00 00       	mov    ebp,0x7
c0005236:	a8 01                	test   al,0x1
c0005238:	eb 02                	jmp    c000523c <f_open+0x261>
c000523a:	85 ed                	test   ebp,ebp
c000523c:	0f 85 b2 01 00 00    	jne    c00053f4 <f_open+0x419>
c0005242:	f7 c6 08 00 00 00    	test   esi,0x8
c0005248:	74 03                	je     c000524d <f_open+0x272>
c000524a:	83 ce 40             	or     esi,0x40
c000524d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005251:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005254:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005257:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000525a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000525d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005261:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005264:	8a 02                	mov    al,BYTE PTR [edx]
c0005266:	3c 04                	cmp    al,0x4
c0005268:	75 2a                	jne    c0005294 <f_open+0x2b9>
c000526a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000526e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005273:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000527a:	30 c0                	xor    al,al
c000527c:	09 c8                	or     eax,ecx
c000527e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005281:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005285:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005288:	8d 42 10             	lea    eax,[edx+0x10]
c000528b:	89 da                	mov    edx,ebx
c000528d:	e8 e5 fb ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c0005292:	eb 1c                	jmp    c00052b0 <f_open+0x2d5>
c0005294:	89 fa                	mov    edx,edi
c0005296:	e8 8b fb ff ff       	call   c0004e26 <ld_clust.isra.0>
c000529b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000529e:	8d 47 1c             	lea    eax,[edi+0x1c]
c00052a1:	e8 12 ca ff ff       	call   c0001cb8 <ld_dword>
c00052a6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00052ad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00052b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052b4:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c00052bb:	89 03                	mov    DWORD PTR [ebx],eax
c00052bd:	31 d2                	xor    edx,edx
c00052bf:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00052c3:	b9 00 02 00 00       	mov    ecx,0x200
c00052c8:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00052cc:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c00052d0:	89 f0                	mov    eax,esi
c00052d2:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00052d9:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00052dc:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052e3:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ed:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052f8:	e8 42 ca ff ff       	call   c0001d3f <mem_set>
c00052fd:	83 e6 20             	and    esi,0x20
c0005300:	75 07                	jne    c0005309 <f_open+0x32e>
c0005302:	31 ed                	xor    ebp,ebp
c0005304:	e9 eb 00 00 00       	jmp    c00053f4 <f_open+0x419>
c0005309:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005313:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000531b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000531f:	74 e1                	je     c0005302 <f_open+0x327>
c0005321:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005329:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000532c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000532f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005333:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005336:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000533a:	31 ff                	xor    edi,edi
c000533c:	c1 e5 09             	shl    ebp,0x9
c000533f:	89 ee                	mov    esi,ebp
c0005341:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005345:	89 f8                	mov    eax,edi
c0005347:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000534b:	73 22                	jae    c000536f <f_open+0x394>
c000534d:	89 d8                	mov    eax,ebx
c000534f:	e8 bd dc ff ff       	call   c0003011 <get_fat>
c0005354:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005358:	89 c2                	mov    edx,eax
c000535a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000535e:	83 f8 01             	cmp    eax,0x1
c0005361:	76 10                	jbe    c0005373 <f_open+0x398>
c0005363:	83 f8 ff             	cmp    eax,0xffffffff
c0005366:	75 d9                	jne    c0005341 <f_open+0x366>
c0005368:	bd 01 00 00 00       	mov    ebp,0x1
c000536d:	eb 09                	jmp    c0005378 <f_open+0x39d>
c000536f:	31 ed                	xor    ebp,ebp
c0005371:	eb 05                	jmp    c0005378 <f_open+0x39d>
c0005373:	bd 02 00 00 00       	mov    ebp,0x2
c0005378:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000537b:	85 ed                	test   ebp,ebp
c000537d:	75 75                	jne    c00053f4 <f_open+0x419>
c000537f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005383:	25 ff 01 00 00       	and    eax,0x1ff
c0005388:	0f 84 74 ff ff ff    	je     c0005302 <f_open+0x327>
c000538e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005392:	bd 02 00 00 00       	mov    ebp,0x2
c0005397:	89 c8                	mov    eax,ecx
c0005399:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000539d:	e8 a2 cb ff ff       	call   c0001f44 <clst2sect>
c00053a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00053a6:	89 d7                	mov    edi,edx
c00053a8:	09 c7                	or     edi,eax
c00053aa:	74 48                	je     c00053f4 <f_open+0x419>
c00053ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00053b0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00053b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00053bc:	0f ac fe 09          	shrd   esi,edi,0x9
c00053c0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00053c4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00053c8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00053cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00053cf:	83 ec 0c             	sub    esp,0xc
c00053d2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00053d5:	6a 01                	push   0x1
c00053d7:	52                   	push   edx
c00053d8:	50                   	push   eax
c00053d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00053dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053e1:	50                   	push   eax
c00053e2:	e8 79 c8 ff ff       	call   c0001c60 <disk_read>
c00053e7:	83 c4 20             	add    esp,0x20
c00053ea:	85 c0                	test   eax,eax
c00053ec:	0f 95 c0             	setne  al
c00053ef:	0f b6 c0             	movzx  eax,al
c00053f2:	89 c5                	mov    ebp,eax
c00053f4:	83 ec 0c             	sub    esp,0xc
c00053f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053fb:	e8 f4 30 00 00       	call   c00084f4 <ff_memfree>
c0005400:	83 c4 10             	add    esp,0x10
c0005403:	85 ed                	test   ebp,ebp
c0005405:	74 06                	je     c000540d <f_open+0x432>
c0005407:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000540d:	83 c4 7c             	add    esp,0x7c
c0005410:	89 e8                	mov    eax,ebp
c0005412:	5b                   	pop    ebx
c0005413:	5e                   	pop    esi
c0005414:	5f                   	pop    edi
c0005415:	5d                   	pop    ebp
c0005416:	c3                   	ret    

c0005417 <f_read>:
c0005417:	55                   	push   ebp
c0005418:	57                   	push   edi
c0005419:	56                   	push   esi
c000541a:	53                   	push   ebx
c000541b:	83 ec 2c             	sub    esp,0x2c
c000541e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005422:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005426:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000542c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005430:	89 d8                	mov    eax,ebx
c0005432:	e8 77 cf ff ff       	call   c00023ae <validate>
c0005437:	89 c5                	mov    ebp,eax
c0005439:	85 c0                	test   eax,eax
c000543b:	0f 85 4c 02 00 00    	jne    c000568d <f_read+0x276>
c0005441:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005445:	85 ed                	test   ebp,ebp
c0005447:	0f 85 40 02 00 00    	jne    c000568d <f_read+0x276>
c000544d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005451:	0f 84 31 02 00 00    	je     c0005688 <f_read+0x271>
c0005457:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000545a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000545d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005460:	bf 00 00 00 00       	mov    edi,0x0
c0005465:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005468:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000546c:	89 d1                	mov    ecx,edx
c000546e:	19 f9                	sbb    ecx,edi
c0005470:	0f 83 cf 00 00 00    	jae    c0005545 <f_read+0x12e>
c0005476:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547a:	e9 c6 00 00 00       	jmp    c0005545 <f_read+0x12e>
c000547f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005482:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005485:	89 d0                	mov    eax,edx
c0005487:	25 ff 01 00 00       	and    eax,0x1ff
c000548c:	0f 85 c9 01 00 00    	jne    c000565b <f_read+0x244>
c0005492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005496:	89 d6                	mov    esi,edx
c0005498:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549c:	89 cf                	mov    edi,ecx
c000549e:	48                   	dec    eax
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	21 f0                	and    eax,esi
c00054a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054a9:	0f 84 a6 00 00 00    	je     c0005555 <f_read+0x13e>
c00054af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054b3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054b6:	89 c8                	mov    eax,ecx
c00054b8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00054bb:	e8 84 ca ff ff       	call   c0001f44 <clst2sect>
c00054c0:	89 d7                	mov    edi,edx
c00054c2:	09 c7                	or     edi,eax
c00054c4:	0f 84 b4 00 00 00    	je     c000557e <f_read+0x167>
c00054ca:	31 ff                	xor    edi,edi
c00054cc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054d0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00054d3:	01 c6                	add    esi,eax
c00054d5:	11 d7                	adc    edi,edx
c00054d7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054df:	0f 86 fd 00 00 00    	jbe    c00055e2 <f_read+0x1cb>
c00054e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ed:	c1 e8 09             	shr    eax,0x9
c00054f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054f3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054f7:	03 14 24             	add    edx,DWORD PTR [esp]
c00054fa:	39 c2                	cmp    edx,eax
c00054fc:	76 07                	jbe    c0005505 <f_read+0xee>
c00054fe:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005502:	89 04 24             	mov    DWORD PTR [esp],eax
c0005505:	83 ec 0c             	sub    esp,0xc
c0005508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000550c:	57                   	push   edi
c000550d:	56                   	push   esi
c000550e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005512:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005516:	50                   	push   eax
c0005517:	e8 44 c7 ff ff       	call   c0001c60 <disk_read>
c000551c:	83 c4 20             	add    esp,0x20
c000551f:	85 c0                	test   eax,eax
c0005521:	75 6e                	jne    c0005591 <f_read+0x17a>
c0005523:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005527:	78 7e                	js     c00055a7 <f_read+0x190>
c0005529:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000552c:	c1 e6 09             	shl    esi,0x9
c000552f:	31 ff                	xor    edi,edi
c0005531:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005535:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005539:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000553d:	01 30                	add    DWORD PTR [eax],esi
c000553f:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005542:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005545:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000554a:	0f 85 2f ff ff ff    	jne    c000547f <f_read+0x68>
c0005550:	e9 38 01 00 00       	jmp    c000568d <f_read+0x276>
c0005555:	89 c8                	mov    eax,ecx
c0005557:	09 d0                	or     eax,edx
c0005559:	75 05                	jne    c0005560 <f_read+0x149>
c000555b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000555e:	eb 19                	jmp    c0005579 <f_read+0x162>
c0005560:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005564:	74 09                	je     c000556f <f_read+0x158>
c0005566:	89 d8                	mov    eax,ebx
c0005568:	e8 f8 c9 ff ff       	call   c0001f65 <clmt_clust>
c000556d:	eb 0a                	jmp    c0005579 <f_read+0x162>
c000556f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005572:	89 d8                	mov    eax,ebx
c0005574:	e8 98 da ff ff       	call   c0003011 <get_fat>
c0005579:	83 f8 01             	cmp    eax,0x1
c000557c:	77 0e                	ja     c000558c <f_read+0x175>
c000557e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005582:	bd 02 00 00 00       	mov    ebp,0x2
c0005587:	e9 01 01 00 00       	jmp    c000568d <f_read+0x276>
c000558c:	83 f8 ff             	cmp    eax,0xffffffff
c000558f:	75 0e                	jne    c000559f <f_read+0x188>
c0005591:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005595:	bd 01 00 00 00       	mov    ebp,0x1
c000559a:	e9 ee 00 00 00       	jmp    c000568d <f_read+0x276>
c000559f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055a2:	e9 08 ff ff ff       	jmp    c00054af <f_read+0x98>
c00055a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055aa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055ad:	29 f0                	sub    eax,esi
c00055af:	19 fa                	sbb    edx,edi
c00055b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00055b4:	89 d7                	mov    edi,edx
c00055b6:	ba 00 00 00 00       	mov    edx,0x0
c00055bb:	89 f9                	mov    ecx,edi
c00055bd:	19 d1                	sbb    ecx,edx
c00055bf:	0f 83 64 ff ff ff    	jae    c0005529 <f_read+0x112>
c00055c5:	89 c7                	mov    edi,eax
c00055c7:	8d 53 50             	lea    edx,[ebx+0x50]
c00055ca:	c1 e7 09             	shl    edi,0x9
c00055cd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055d1:	b9 00 02 00 00       	mov    ecx,0x200
c00055d6:	01 f8                	add    eax,edi
c00055d8:	e8 4d c7 ff ff       	call   c0001d2a <mem_cpy>
c00055dd:	e9 47 ff ff ff       	jmp    c0005529 <f_read+0x112>
c00055e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055e5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00055eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ef:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055f3:	75 05                	jne    c00055fa <f_read+0x1e3>
c00055f5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055f8:	74 5b                	je     c0005655 <f_read+0x23e>
c00055fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00055fd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005605:	79 2a                	jns    c0005631 <f_read+0x21a>
c0005607:	83 ec 0c             	sub    esp,0xc
c000560a:	6a 01                	push   0x1
c000560c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005614:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005618:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000561c:	50                   	push   eax
c000561d:	e8 54 c6 ff ff       	call   c0001c76 <disk_write>
c0005622:	83 c4 20             	add    esp,0x20
c0005625:	85 c0                	test   eax,eax
c0005627:	0f 85 64 ff ff ff    	jne    c0005591 <f_read+0x17a>
c000562d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005631:	83 ec 0c             	sub    esp,0xc
c0005634:	6a 01                	push   0x1
c0005636:	57                   	push   edi
c0005637:	56                   	push   esi
c0005638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000563c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005640:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005644:	50                   	push   eax
c0005645:	e8 16 c6 ff ff       	call   c0001c60 <disk_read>
c000564a:	83 c4 20             	add    esp,0x20
c000564d:	85 c0                	test   eax,eax
c000564f:	0f 85 3c ff ff ff    	jne    c0005591 <f_read+0x17a>
c0005655:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005658:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000565b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000565e:	ba 00 02 00 00       	mov    edx,0x200
c0005663:	25 ff 01 00 00       	and    eax,0x1ff
c0005668:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000566c:	29 c2                	sub    edx,eax
c000566e:	39 d6                	cmp    esi,edx
c0005670:	76 02                	jbe    c0005674 <f_read+0x25d>
c0005672:	89 d6                	mov    esi,edx
c0005674:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005678:	89 f1                	mov    ecx,esi
c000567a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000567e:	e8 a7 c6 ff ff       	call   c0001d2a <mem_cpy>
c0005683:	e9 a7 fe ff ff       	jmp    c000552f <f_read+0x118>
c0005688:	bd 07 00 00 00       	mov    ebp,0x7
c000568d:	83 c4 2c             	add    esp,0x2c
c0005690:	89 e8                	mov    eax,ebp
c0005692:	5b                   	pop    ebx
c0005693:	5e                   	pop    esi
c0005694:	5f                   	pop    edi
c0005695:	5d                   	pop    ebp
c0005696:	c3                   	ret    

c0005697 <f_write>:
c0005697:	55                   	push   ebp
c0005698:	57                   	push   edi
c0005699:	56                   	push   esi
c000569a:	53                   	push   ebx
c000569b:	83 ec 2c             	sub    esp,0x2c
c000569e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00056a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00056ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00056b0:	89 d8                	mov    eax,ebx
c00056b2:	e8 f7 cc ff ff       	call   c00023ae <validate>
c00056b7:	89 c5                	mov    ebp,eax
c00056b9:	85 c0                	test   eax,eax
c00056bb:	0f 85 86 02 00 00    	jne    c0005947 <f_write+0x2b0>
c00056c1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00056c5:	85 ed                	test   ebp,ebp
c00056c7:	0f 85 7a 02 00 00    	jne    c0005947 <f_write+0x2b0>
c00056cd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00056d1:	0f 84 6b 02 00 00    	je     c0005942 <f_write+0x2ab>
c00056d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056db:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056de:	0f 84 43 01 00 00    	je     c0005827 <f_write+0x190>
c00056e4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056e7:	89 c1                	mov    ecx,eax
c00056e9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ed:	0f 83 34 01 00 00    	jae    c0005827 <f_write+0x190>
c00056f3:	f7 d0                	not    eax
c00056f5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056f9:	e9 29 01 00 00       	jmp    c0005827 <f_write+0x190>
c00056fe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005701:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005704:	89 d0                	mov    eax,edx
c0005706:	25 ff 01 00 00       	and    eax,0x1ff
c000570b:	0f 85 00 02 00 00    	jne    c0005911 <f_write+0x27a>
c0005711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005715:	89 d6                	mov    esi,edx
c0005717:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000571b:	89 cf                	mov    edi,ecx
c000571d:	48                   	dec    eax
c000571e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005722:	21 f0                	and    eax,esi
c0005724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005728:	0f 84 06 01 00 00    	je     c0005834 <f_write+0x19d>
c000572e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005732:	0f 88 6e 01 00 00    	js     c00058a6 <f_write+0x20f>
c0005738:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000573c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000573f:	89 c8                	mov    eax,ecx
c0005741:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005745:	e8 fa c7 ff ff       	call   c0001f44 <clst2sect>
c000574a:	89 d1                	mov    ecx,edx
c000574c:	09 c1                	or     ecx,eax
c000574e:	0f 84 1c 01 00 00    	je     c0005870 <f_write+0x1d9>
c0005754:	31 ff                	xor    edi,edi
c0005756:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000575a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000575e:	01 c6                	add    esi,eax
c0005760:	11 d7                	adc    edi,edx
c0005762:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000576a:	0f 86 63 01 00 00    	jbe    c00058d3 <f_write+0x23c>
c0005770:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005774:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005778:	c1 e8 09             	shr    eax,0x9
c000577b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000577f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005783:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005787:	39 c2                	cmp    edx,eax
c0005789:	76 08                	jbe    c0005793 <f_write+0xfc>
c000578b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000578f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000579a:	57                   	push   edi
c000579b:	56                   	push   esi
c000579c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00057a0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a4:	50                   	push   eax
c00057a5:	e8 cc c4 ff ff       	call   c0001c76 <disk_write>
c00057aa:	83 c4 20             	add    esp,0x20
c00057ad:	85 c0                	test   eax,eax
c00057af:	0f 85 ce 00 00 00    	jne    c0005883 <f_write+0x1ec>
c00057b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00057b8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00057bb:	29 f0                	sub    eax,esi
c00057bd:	19 fa                	sbb    edx,edi
c00057bf:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00057c3:	89 d7                	mov    edi,edx
c00057c5:	ba 00 00 00 00       	mov    edx,0x0
c00057ca:	89 f9                	mov    ecx,edi
c00057cc:	19 d1                	sbb    ecx,edx
c00057ce:	73 1c                	jae    c00057ec <f_write+0x155>
c00057d0:	89 c7                	mov    edi,eax
c00057d2:	b9 00 02 00 00       	mov    ecx,0x200
c00057d7:	c1 e7 09             	shl    edi,0x9
c00057da:	8d 43 50             	lea    eax,[ebx+0x50]
c00057dd:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057e1:	89 fa                	mov    edx,edi
c00057e3:	e8 42 c5 ff ff       	call   c0001d2a <mem_cpy>
c00057e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057ec:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057f0:	c1 e6 09             	shl    esi,0x9
c00057f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057f7:	31 ff                	xor    edi,edi
c00057f9:	01 30                	add    DWORD PTR [eax],esi
c00057fb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057ff:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005809:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000580c:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000580f:	89 c1                	mov    ecx,eax
c0005811:	39 f2                	cmp    edx,esi
c0005813:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005816:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005819:	19 f9                	sbb    ecx,edi
c000581b:	73 04                	jae    c0005821 <f_write+0x18a>
c000581d:	89 f2                	mov    edx,esi
c000581f:	89 f8                	mov    eax,edi
c0005821:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005824:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005827:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000582c:	0f 85 cc fe ff ff    	jne    c00056fe <f_write+0x67>
c0005832:	eb 2e                	jmp    c0005862 <f_write+0x1cb>
c0005834:	89 c8                	mov    eax,ecx
c0005836:	09 d0                	or     eax,edx
c0005838:	75 0b                	jne    c0005845 <f_write+0x1ae>
c000583a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000583d:	31 d2                	xor    edx,edx
c000583f:	85 c0                	test   eax,eax
c0005841:	75 28                	jne    c000586b <f_write+0x1d4>
c0005843:	eb 12                	jmp    c0005857 <f_write+0x1c0>
c0005845:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005849:	74 09                	je     c0005854 <f_write+0x1bd>
c000584b:	89 d8                	mov    eax,ebx
c000584d:	e8 13 c7 ff ff       	call   c0001f65 <clmt_clust>
c0005852:	eb 0a                	jmp    c000585e <f_write+0x1c7>
c0005854:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005857:	89 d8                	mov    eax,ebx
c0005859:	e8 a1 da ff ff       	call   c00032ff <create_chain>
c000585e:	85 c0                	test   eax,eax
c0005860:	75 09                	jne    c000586b <f_write+0x1d4>
c0005862:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005866:	e9 dc 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c000586b:	83 f8 01             	cmp    eax,0x1
c000586e:	75 0e                	jne    c000587e <f_write+0x1e7>
c0005870:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005874:	bd 02 00 00 00       	mov    ebp,0x2
c0005879:	e9 c9 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c000587e:	83 f8 ff             	cmp    eax,0xffffffff
c0005881:	75 0e                	jne    c0005891 <f_write+0x1fa>
c0005883:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005887:	bd 01 00 00 00       	mov    ebp,0x1
c000588c:	e9 b6 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c0005891:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005894:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005898:	0f 85 90 fe ff ff    	jne    c000572e <f_write+0x97>
c000589e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00058a1:	e9 88 fe ff ff       	jmp    c000572e <f_write+0x97>
c00058a6:	83 ec 0c             	sub    esp,0xc
c00058a9:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ac:	6a 01                	push   0x1
c00058ae:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00058b1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00058b4:	50                   	push   eax
c00058b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00058b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00058bd:	50                   	push   eax
c00058be:	e8 b3 c3 ff ff       	call   c0001c76 <disk_write>
c00058c3:	83 c4 20             	add    esp,0x20
c00058c6:	85 c0                	test   eax,eax
c00058c8:	75 b9                	jne    c0005883 <f_write+0x1ec>
c00058ca:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00058ce:	e9 65 fe ff ff       	jmp    c0005738 <f_write+0xa1>
c00058d3:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00058d6:	75 05                	jne    c00058dd <f_write+0x246>
c00058d8:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00058db:	74 2e                	je     c000590b <f_write+0x274>
c00058dd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058e3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058e6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058e9:	73 20                	jae    c000590b <f_write+0x274>
c00058eb:	83 ec 0c             	sub    esp,0xc
c00058ee:	8d 43 50             	lea    eax,[ebx+0x50]
c00058f1:	6a 01                	push   0x1
c00058f3:	57                   	push   edi
c00058f4:	56                   	push   esi
c00058f5:	50                   	push   eax
c00058f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058fa:	50                   	push   eax
c00058fb:	e8 60 c3 ff ff       	call   c0001c60 <disk_read>
c0005900:	83 c4 20             	add    esp,0x20
c0005903:	85 c0                	test   eax,eax
c0005905:	0f 85 78 ff ff ff    	jne    c0005883 <f_write+0x1ec>
c000590b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000590e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005911:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005914:	ba 00 02 00 00       	mov    edx,0x200
c0005919:	25 ff 01 00 00       	and    eax,0x1ff
c000591e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005922:	29 c2                	sub    edx,eax
c0005924:	39 d6                	cmp    esi,edx
c0005926:	76 02                	jbe    c000592a <f_write+0x293>
c0005928:	89 d6                	mov    esi,edx
c000592a:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c000592e:	89 f1                	mov    ecx,esi
c0005930:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005934:	e8 f1 c3 ff ff       	call   c0001d2a <mem_cpy>
c0005939:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000593d:	e9 b1 fe ff ff       	jmp    c00057f3 <f_write+0x15c>
c0005942:	bd 07 00 00 00       	mov    ebp,0x7
c0005947:	83 c4 2c             	add    esp,0x2c
c000594a:	89 e8                	mov    eax,ebp
c000594c:	5b                   	pop    ebx
c000594d:	5e                   	pop    esi
c000594e:	5f                   	pop    edi
c000594f:	5d                   	pop    ebp
c0005950:	c3                   	ret    

c0005951 <f_sync>:
c0005951:	56                   	push   esi
c0005952:	53                   	push   ebx
c0005953:	83 ec 64             	sub    esp,0x64
c0005956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000595a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000595e:	89 d8                	mov    eax,ebx
c0005960:	e8 49 ca ff ff       	call   c00023ae <validate>
c0005965:	85 c0                	test   eax,eax
c0005967:	0f 85 ba 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c000596d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005970:	f6 c2 40             	test   dl,0x40
c0005973:	0f 84 ae 01 00 00    	je     c0005b27 <f_sync+0x1d6>
c0005979:	84 d2                	test   dl,dl
c000597b:	79 33                	jns    c00059b0 <f_sync+0x5f>
c000597d:	83 ec 0c             	sub    esp,0xc
c0005980:	8d 43 50             	lea    eax,[ebx+0x50]
c0005983:	6a 01                	push   0x1
c0005985:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005988:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000598b:	50                   	push   eax
c000598c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005990:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005994:	50                   	push   eax
c0005995:	e8 dc c2 ff ff       	call   c0001c76 <disk_write>
c000599a:	83 c4 20             	add    esp,0x20
c000599d:	89 c2                	mov    edx,eax
c000599f:	b8 01 00 00 00       	mov    eax,0x1
c00059a4:	85 d2                	test   edx,edx
c00059a6:	0f 85 7b 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059ac:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00059b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00059b7:	0f 85 11 01 00 00    	jne    c0005ace <f_sync+0x17d>
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 13 d6 ff ff       	call   c0002fd7 <fill_first_frag>
c00059c4:	85 c0                	test   eax,eax
c00059c6:	0f 85 5b 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059cc:	83 c9 ff             	or     ecx,0xffffffff
c00059cf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00059d2:	89 d8                	mov    eax,ebx
c00059d4:	e8 c9 d5 ff ff       	call   c0002fa2 <fill_last_frag>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 46 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059e1:	83 ec 0c             	sub    esp,0xc
c00059e4:	68 60 04 00 00       	push   0x460
c00059e9:	e8 f0 2a 00 00       	call   c00084de <ff_memalloc>
c00059ee:	83 c4 10             	add    esp,0x10
c00059f1:	89 c6                	mov    esi,eax
c00059f3:	b8 11 00 00 00       	mov    eax,0x11
c00059f8:	85 f6                	test   esi,esi
c00059fa:	0f 84 27 01 00 00    	je     c0005b27 <f_sync+0x1d6>
c0005a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a04:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005a0a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005a0d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005a10:	89 da                	mov    edx,ebx
c0005a12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a16:	e8 af df ff ff       	call   c00039ca <load_obj_xdir>
c0005a1b:	85 c0                	test   eax,eax
c0005a1d:	0f 85 95 00 00 00    	jne    c0005ab8 <f_sync+0x167>
c0005a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a27:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a2a:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005a2e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005a31:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005a34:	83 ca 01             	or     edx,0x1
c0005a37:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005a3a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005a3d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a40:	83 c0 34             	add    eax,0x34
c0005a43:	e8 d9 c2 ff ff       	call   c0001d21 <st_dword>
c0005a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a4c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a52:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a55:	83 c0 38             	add    eax,0x38
c0005a58:	e8 c7 c2 ff ff       	call   c0001d24 <st_qword>
c0005a5d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a67:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a6a:	83 c0 28             	add    eax,0x28
c0005a6d:	e8 b2 c2 ff ff       	call   c0001d24 <st_qword>
c0005a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a76:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a7e:	83 c0 0c             	add    eax,0xc
c0005a81:	e8 9b c2 ff ff       	call   c0001d21 <st_dword>
c0005a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a8d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a91:	31 d2                	xor    edx,edx
c0005a93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a96:	83 c0 10             	add    eax,0x10
c0005a99:	e8 83 c2 ff ff       	call   c0001d21 <st_dword>
c0005a9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005aa2:	e8 62 e1 ff ff       	call   c0003c09 <store_xdir>
c0005aa7:	85 c0                	test   eax,eax
c0005aa9:	75 0d                	jne    c0005ab8 <f_sync+0x167>
c0005aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aaf:	e8 00 eb ff ff       	call   c00045b4 <sync_fs>
c0005ab4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	56                   	push   esi
c0005ac0:	e8 2f 2a 00 00       	call   c00084f4 <ff_memfree>
c0005ac5:	83 c4 10             	add    esp,0x10
c0005ac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005acc:	eb 59                	jmp    c0005b27 <f_sync+0x1d6>
c0005ace:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005ad1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005ad4:	e8 b0 c9 ff ff       	call   c0002489 <move_window>
c0005ad9:	85 c0                	test   eax,eax
c0005adb:	75 4a                	jne    c0005b27 <f_sync+0x1d6>
c0005add:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005ae0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005ae4:	89 f2                	mov    edx,esi
c0005ae6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005ae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aeb:	e8 5f f3 ff ff       	call   c0004e4f <st_clust.isra.1>
c0005af0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005af3:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005af6:	e8 26 c2 ff ff       	call   c0001d21 <st_dword>
c0005afb:	8d 46 16             	lea    eax,[esi+0x16]
c0005afe:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b03:	e8 19 c2 ff ff       	call   c0001d21 <st_dword>
c0005b08:	8d 46 12             	lea    eax,[esi+0x12]
c0005b0b:	31 d2                	xor    edx,edx
c0005b0d:	e8 0b c2 ff ff       	call   c0001d1d <st_word>
c0005b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b16:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b1e:	e8 91 ea ff ff       	call   c00045b4 <sync_fs>
c0005b23:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005b27:	83 c4 64             	add    esp,0x64
c0005b2a:	5b                   	pop    ebx
c0005b2b:	5e                   	pop    esi
c0005b2c:	c3                   	ret    

c0005b2d <f_close>:
c0005b2d:	53                   	push   ebx
c0005b2e:	83 ec 24             	sub    esp,0x24
c0005b31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005b35:	53                   	push   ebx
c0005b36:	e8 16 fe ff ff       	call   c0005951 <f_sync>
c0005b3b:	83 c4 10             	add    esp,0x10
c0005b3e:	85 c0                	test   eax,eax
c0005b40:	75 15                	jne    c0005b57 <f_close+0x2a>
c0005b42:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b46:	89 d8                	mov    eax,ebx
c0005b48:	e8 61 c8 ff ff       	call   c00023ae <validate>
c0005b4d:	85 c0                	test   eax,eax
c0005b4f:	75 06                	jne    c0005b57 <f_close+0x2a>
c0005b51:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b57:	83 c4 18             	add    esp,0x18
c0005b5a:	5b                   	pop    ebx
c0005b5b:	c3                   	ret    

c0005b5c <f_lseek>:
c0005b5c:	55                   	push   ebp
c0005b5d:	57                   	push   edi
c0005b5e:	56                   	push   esi
c0005b5f:	53                   	push   ebx
c0005b60:	83 ec 3c             	sub    esp,0x3c
c0005b63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b67:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b6b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b72:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b7c:	e8 2d c8 ff ff       	call   c00023ae <validate>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	85 c0                	test   eax,eax
c0005b87:	0f 85 7a 04 00 00    	jne    c0006007 <f_lseek+0x4ab>
c0005b8d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b95:	85 c0                	test   eax,eax
c0005b97:	0f 85 6a 04 00 00    	jne    c0006007 <f_lseek+0x4ab>
c0005b9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ba1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005ba4:	74 0c                	je     c0005bb2 <f_lseek+0x56>
c0005ba6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005ba9:	85 c0                	test   eax,eax
c0005bab:	75 1f                	jne    c0005bcc <f_lseek+0x70>
c0005bad:	e9 b5 01 00 00       	jmp    c0005d67 <f_lseek+0x20b>
c0005bb2:	83 c9 ff             	or     ecx,0xffffffff
c0005bb5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005bb8:	89 d8                	mov    eax,ebx
c0005bba:	e8 e3 d3 ff ff       	call   c0002fa2 <fill_last_frag>
c0005bbf:	85 c0                	test   eax,eax
c0005bc1:	74 e3                	je     c0005ba6 <f_lseek+0x4a>
c0005bc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005bc7:	e9 3b 04 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005bcc:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005bd1:	0f 85 ac 00 00 00    	jne    c0005c83 <f_lseek+0x127>
c0005bd7:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005bdb:	0f 85 a2 00 00 00    	jne    c0005c83 <f_lseek+0x127>
c0005be1:	8d 78 04             	lea    edi,[eax+0x4]
c0005be4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005be9:	be 02 00 00 00       	mov    esi,0x2
c0005bee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	74 73                	je     c0005c69 <f_lseek+0x10d>
c0005bf6:	89 e9                	mov    ecx,ebp
c0005bf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bff:	ff 04 24             	inc    DWORD PTR [esp]
c0005c02:	89 ca                	mov    edx,ecx
c0005c04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c08:	89 d8                	mov    eax,ebx
c0005c0a:	e8 02 d4 ff ff       	call   c0003011 <get_fat>
c0005c0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c13:	83 f8 01             	cmp    eax,0x1
c0005c16:	77 11                	ja     c0005c29 <f_lseek+0xcd>
c0005c18:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005c1c:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005c24:	e9 de 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c29:	83 f8 ff             	cmp    eax,0xffffffff
c0005c2c:	75 11                	jne    c0005c3f <f_lseek+0xe3>
c0005c2e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005c32:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005c3a:	e9 c8 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c3f:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c42:	89 c1                	mov    ecx,eax
c0005c44:	39 c2                	cmp    edx,eax
c0005c46:	74 b7                	je     c0005bff <f_lseek+0xa3>
c0005c48:	83 c6 02             	add    esi,0x2
c0005c4b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c4f:	72 0b                	jb     c0005c5c <f_lseek+0x100>
c0005c51:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c54:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c57:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c59:	83 c7 08             	add    edi,0x8
c0005c5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c60:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c63:	76 04                	jbe    c0005c69 <f_lseek+0x10d>
c0005c65:	89 c5                	mov    ebp,eax
c0005c67:	eb 8d                	jmp    c0005bf6 <f_lseek+0x9a>
c0005c69:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c6c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c70:	89 30                	mov    DWORD PTR [eax],esi
c0005c72:	0f 87 87 03 00 00    	ja     c0005fff <f_lseek+0x4a3>
c0005c78:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c7e:	e9 84 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c95:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c9c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005ca0:	73 0f                	jae    c0005cb1 <f_lseek+0x155>
c0005ca2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005cad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005cb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cb9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005cbc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005cc7:	0f 84 3a 03 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005ccd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005cd1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005cd5:	83 c6 ff             	add    esi,0xffffffff
c0005cd8:	89 d8                	mov    eax,ebx
c0005cda:	83 d7 ff             	adc    edi,0xffffffff
c0005cdd:	89 f2                	mov    edx,esi
c0005cdf:	89 f9                	mov    ecx,edi
c0005ce1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ce5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ce8:	e8 78 c2 ff ff       	call   c0001f65 <clmt_clust>
c0005ced:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005cf1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cf4:	89 c2                	mov    edx,eax
c0005cf6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cfa:	89 c8                	mov    eax,ecx
c0005cfc:	e8 43 c2 ff ff       	call   c0001f44 <clst2sect>
c0005d01:	89 d7                	mov    edi,edx
c0005d03:	09 c7                	or     edi,eax
c0005d05:	0f 84 0d ff ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005d0b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005d0f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005d15:	0f 84 ec 02 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005d1b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005d23:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d26:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005d2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d2e:	4d                   	dec    ebp
c0005d2f:	31 ff                	xor    edi,edi
c0005d31:	21 ee                	and    esi,ebp
c0005d33:	01 c6                	add    esi,eax
c0005d35:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d38:	11 d7                	adc    edi,edx
c0005d3a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3d:	39 fa                	cmp    edx,edi
c0005d3f:	75 08                	jne    c0005d49 <f_lseek+0x1ed>
c0005d41:	39 f0                	cmp    eax,esi
c0005d43:	0f 84 be 02 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005d49:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d50:	0f 89 80 02 00 00    	jns    c0005fd6 <f_lseek+0x47a>
c0005d56:	83 ec 0c             	sub    esp,0xc
c0005d59:	6a 01                	push   0x1
c0005d5b:	52                   	push   edx
c0005d5c:	50                   	push   eax
c0005d5d:	55                   	push   ebp
c0005d5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d62:	e9 5a 02 00 00       	jmp    c0005fc1 <f_lseek+0x465>
c0005d67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d6b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d6e:	74 16                	je     c0005d86 <f_lseek+0x22a>
c0005d70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d75:	76 0f                	jbe    c0005d86 <f_lseek+0x22a>
c0005d77:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d7e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d86:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d8c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d8f:	89 c7                	mov    edi,eax
c0005d91:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d95:	73 0d                	jae    c0005da4 <f_lseek+0x248>
c0005d97:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d9b:	75 07                	jne    c0005da4 <f_lseek+0x248>
c0005d9d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005da0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005da4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005da7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005daa:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005dae:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005db5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005dbc:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005dbf:	75 09                	jne    c0005dca <f_lseek+0x26e>
c0005dc1:	31 f6                	xor    esi,esi
c0005dc3:	31 ff                	xor    edi,edi
c0005dc5:	e9 af 01 00 00       	jmp    c0005f79 <f_lseek+0x41d>
c0005dca:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005dce:	89 d7                	mov    edi,edx
c0005dd0:	c1 e1 09             	shl    ecx,0x9
c0005dd3:	09 c7                	or     edi,eax
c0005dd5:	89 cd                	mov    ebp,ecx
c0005dd7:	74 6d                	je     c0005e46 <f_lseek+0x2ea>
c0005dd9:	83 c0 ff             	add    eax,0xffffffff
c0005ddc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005de0:	83 d2 ff             	adc    edx,0xffffffff
c0005de3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005de6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005dea:	83 c0 ff             	add    eax,0xffffffff
c0005ded:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005df1:	83 d2 ff             	adc    edx,0xffffffff
c0005df4:	31 ff                	xor    edi,edi
c0005df6:	57                   	push   edi
c0005df7:	51                   	push   ecx
c0005df8:	52                   	push   edx
c0005df9:	50                   	push   eax
c0005dfa:	e8 3d 89 01 00       	call   c001e73c <__udivdi3>
c0005dff:	83 c4 10             	add    esp,0x10
c0005e02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005e06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005e0a:	57                   	push   edi
c0005e0b:	55                   	push   ebp
c0005e0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e14:	e8 23 89 01 00       	call   c001e73c <__udivdi3>
c0005e19:	83 c4 10             	add    esp,0x10
c0005e1c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005e20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e24:	19 d1                	sbb    ecx,edx
c0005e26:	72 1e                	jb     c0005e46 <f_lseek+0x2ea>
c0005e28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005e2c:	89 e9                	mov    ecx,ebp
c0005e2e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005e31:	f7 d9                	neg    ecx
c0005e33:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005e36:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005e3a:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005e3d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e40:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e44:	eb 28                	jmp    c0005e6e <f_lseek+0x312>
c0005e46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e49:	85 c0                	test   eax,eax
c0005e4b:	75 1e                	jne    c0005e6b <f_lseek+0x30f>
c0005e4d:	31 d2                	xor    edx,edx
c0005e4f:	89 d8                	mov    eax,ebx
c0005e51:	e8 a9 d4 ff ff       	call   c00032ff <create_chain>
c0005e56:	83 f8 01             	cmp    eax,0x1
c0005e59:	0f 84 b9 fd ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005e5f:	83 f8 ff             	cmp    eax,0xffffffff
c0005e62:	0f 84 c6 fd ff ff    	je     c0005c2e <f_lseek+0xd2>
c0005e68:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e6e:	85 c0                	test   eax,eax
c0005e70:	0f 84 4b ff ff ff    	je     c0005dc1 <f_lseek+0x265>
c0005e76:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e7a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e82:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e85:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e89:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e8c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e8f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e93:	0f 83 9d 00 00 00    	jae    c0005f36 <f_lseek+0x3da>
c0005e99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e9d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005ea1:	29 34 24             	sub    DWORD PTR [esp],esi
c0005ea4:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005ea8:	01 f2                	add    edx,esi
c0005eaa:	11 f9                	adc    ecx,edi
c0005eac:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005eb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005eb4:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005eb7:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005eba:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ebd:	f6 c1 02             	test   cl,0x2
c0005ec0:	74 35                	je     c0005ef7 <f_lseek+0x39b>
c0005ec2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ec6:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005ec9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ecc:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ed0:	73 16                	jae    c0005ee8 <f_lseek+0x38c>
c0005ed2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005ed6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005eda:	88 ca                	mov    dl,cl
c0005edc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005edf:	83 ca 40             	or     edx,0x40
c0005ee2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ee5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ee8:	89 c2                	mov    edx,eax
c0005eea:	89 d8                	mov    eax,ebx
c0005eec:	e8 0e d4 ff ff       	call   c00032ff <create_chain>
c0005ef1:	85 c0                	test   eax,eax
c0005ef3:	75 0b                	jne    c0005f00 <f_lseek+0x3a4>
c0005ef5:	eb 30                	jmp    c0005f27 <f_lseek+0x3cb>
c0005ef7:	89 c2                	mov    edx,eax
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 11 d1 ff ff       	call   c0003011 <get_fat>
c0005f00:	83 f8 ff             	cmp    eax,0xffffffff
c0005f03:	0f 84 25 fd ff ff    	je     c0005c2e <f_lseek+0xd2>
c0005f09:	83 f8 01             	cmp    eax,0x1
c0005f0c:	0f 86 06 fd ff ff    	jbe    c0005c18 <f_lseek+0xbc>
c0005f12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005f16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005f19:	0f 86 f9 fc ff ff    	jbe    c0005c18 <f_lseek+0xbc>
c0005f1f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005f22:	e9 5b ff ff ff       	jmp    c0005e82 <f_lseek+0x326>
c0005f27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005f2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005f36:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005f39:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005f3d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f40:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f43:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f46:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f4c:	0f 84 6f fe ff ff    	je     c0005dc1 <f_lseek+0x265>
c0005f52:	89 c2                	mov    edx,eax
c0005f54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f58:	e8 e7 bf ff ff       	call   c0001f44 <clst2sect>
c0005f5d:	89 d7                	mov    edi,edx
c0005f5f:	09 c7                	or     edi,eax
c0005f61:	0f 84 b1 fc ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005f67:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f6e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f72:	c1 ef 09             	shr    edi,0x9
c0005f75:	01 c6                	add    esi,eax
c0005f77:	11 d7                	adc    edi,edx
c0005f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f7c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f7f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f82:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f85:	19 d1                	sbb    ecx,edx
c0005f87:	73 0a                	jae    c0005f93 <f_lseek+0x437>
c0005f89:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f8c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f8f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f93:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f98:	74 6d                	je     c0006007 <f_lseek+0x4ab>
c0005f9a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f9d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005fa0:	39 fa                	cmp    edx,edi
c0005fa2:	75 04                	jne    c0005fa8 <f_lseek+0x44c>
c0005fa4:	39 f0                	cmp    eax,esi
c0005fa6:	74 5f                	je     c0006007 <f_lseek+0x4ab>
c0005fa8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005fab:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005faf:	79 25                	jns    c0005fd6 <f_lseek+0x47a>
c0005fb1:	83 ec 0c             	sub    esp,0xc
c0005fb4:	6a 01                	push   0x1
c0005fb6:	52                   	push   edx
c0005fb7:	50                   	push   eax
c0005fb8:	55                   	push   ebp
c0005fb9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fbd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fc1:	50                   	push   eax
c0005fc2:	e8 af bc ff ff       	call   c0001c76 <disk_write>
c0005fc7:	83 c4 20             	add    esp,0x20
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	0f 85 5c fc ff ff    	jne    c0005c2e <f_lseek+0xd2>
c0005fd2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005fd6:	83 ec 0c             	sub    esp,0xc
c0005fd9:	6a 01                	push   0x1
c0005fdb:	57                   	push   edi
c0005fdc:	56                   	push   esi
c0005fdd:	55                   	push   ebp
c0005fde:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fe2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fe6:	50                   	push   eax
c0005fe7:	e8 74 bc ff ff       	call   c0001c60 <disk_read>
c0005fec:	83 c4 20             	add    esp,0x20
c0005fef:	85 c0                	test   eax,eax
c0005ff1:	0f 85 37 fc ff ff    	jne    c0005c2e <f_lseek+0xd2>
c0005ff7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ffa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ffd:	eb 08                	jmp    c0006007 <f_lseek+0x4ab>
c0005fff:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0006007:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000600b:	83 c4 3c             	add    esp,0x3c
c000600e:	5b                   	pop    ebx
c000600f:	5e                   	pop    esi
c0006010:	5f                   	pop    edi
c0006011:	5d                   	pop    ebp
c0006012:	c3                   	ret    

c0006013 <f_opendir>:
c0006013:	56                   	push   esi
c0006014:	b8 09 00 00 00       	mov    eax,0x9
c0006019:	53                   	push   ebx
c000601a:	83 ec 24             	sub    esp,0x24
c000601d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006021:	85 db                	test   ebx,ebx
c0006023:	0f 84 e6 00 00 00    	je     c000610f <f_opendir+0xfc>
c0006029:	31 c9                	xor    ecx,ecx
c000602b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000602f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006033:	e8 03 c7 ff ff       	call   c000273b <mount_volume>
c0006038:	85 c0                	test   eax,eax
c000603a:	0f 85 c9 00 00 00    	jne    c0006109 <f_opendir+0xf6>
c0006040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006044:	83 ec 0c             	sub    esp,0xc
c0006047:	89 03                	mov    DWORD PTR [ebx],eax
c0006049:	68 60 04 00 00       	push   0x460
c000604e:	e8 8b 24 00 00       	call   c00084de <ff_memalloc>
c0006053:	83 c4 10             	add    esp,0x10
c0006056:	89 c6                	mov    esi,eax
c0006058:	b8 11 00 00 00       	mov    eax,0x11
c000605d:	85 f6                	test   esi,esi
c000605f:	0f 84 aa 00 00 00    	je     c000610f <f_opendir+0xfc>
c0006065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006069:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000606f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006072:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006075:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006079:	89 d8                	mov    eax,ebx
c000607b:	e8 31 ee ff ff       	call   c0004eb1 <follow_path>
c0006080:	85 c0                	test   eax,eax
c0006082:	75 61                	jne    c00060e5 <f_opendir+0xd2>
c0006084:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006088:	78 46                	js     c00060d0 <f_opendir+0xbd>
c000608a:	b8 05 00 00 00       	mov    eax,0x5
c000608f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006093:	74 50                	je     c00060e5 <f_opendir+0xd2>
c0006095:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006099:	8a 01                	mov    al,BYTE PTR [ecx]
c000609b:	3c 04                	cmp    al,0x4
c000609d:	75 26                	jne    c00060c5 <f_opendir+0xb2>
c000609f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00060a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00060a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00060a8:	30 d2                	xor    dl,dl
c00060aa:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c00060ae:	09 c2                	or     edx,eax
c00060b0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00060b3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00060b6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00060b9:	89 da                	mov    edx,ebx
c00060bb:	8d 41 10             	lea    eax,[ecx+0x10]
c00060be:	e8 b4 ed ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00060c3:	eb 0b                	jmp    c00060d0 <f_opendir+0xbd>
c00060c5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00060c8:	e8 59 ed ff ff       	call   c0004e26 <ld_clust.isra.0>
c00060cd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00060d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00060da:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00060de:	89 d8                	mov    eax,ebx
c00060e0:	e8 22 d1 ff ff       	call   c0003207 <dir_sdi>
c00060e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060e9:	83 ec 0c             	sub    esp,0xc
c00060ec:	56                   	push   esi
c00060ed:	e8 02 24 00 00       	call   c00084f4 <ff_memfree>
c00060f2:	83 c4 10             	add    esp,0x10
c00060f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f9:	83 f8 04             	cmp    eax,0x4
c00060fc:	74 06                	je     c0006104 <f_opendir+0xf1>
c00060fe:	85 c0                	test   eax,eax
c0006100:	74 0d                	je     c000610f <f_opendir+0xfc>
c0006102:	eb 05                	jmp    c0006109 <f_opendir+0xf6>
c0006104:	b8 05 00 00 00       	mov    eax,0x5
c0006109:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000610f:	83 c4 24             	add    esp,0x24
c0006112:	5b                   	pop    ebx
c0006113:	5e                   	pop    esi
c0006114:	c3                   	ret    

c0006115 <f_closedir>:
c0006115:	53                   	push   ebx
c0006116:	83 ec 18             	sub    esp,0x18
c0006119:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000611d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006121:	89 d8                	mov    eax,ebx
c0006123:	e8 86 c2 ff ff       	call   c00023ae <validate>
c0006128:	85 c0                	test   eax,eax
c000612a:	75 06                	jne    c0006132 <f_closedir+0x1d>
c000612c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0006132:	83 c4 18             	add    esp,0x18
c0006135:	5b                   	pop    ebx
c0006136:	c3                   	ret    

c0006137 <f_readdir>:
c0006137:	57                   	push   edi
c0006138:	56                   	push   esi
c0006139:	53                   	push   ebx
c000613a:	83 ec 20             	sub    esp,0x20
c000613d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006141:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006145:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006149:	89 d8                	mov    eax,ebx
c000614b:	e8 5e c2 ff ff       	call   c00023ae <validate>
c0006150:	85 c0                	test   eax,eax
c0006152:	75 77                	jne    c00061cb <f_readdir+0x94>
c0006154:	85 ff                	test   edi,edi
c0006156:	75 0b                	jne    c0006163 <f_readdir+0x2c>
c0006158:	31 d2                	xor    edx,edx
c000615a:	89 d8                	mov    eax,ebx
c000615c:	e8 a6 d0 ff ff       	call   c0003207 <dir_sdi>
c0006161:	eb 68                	jmp    c00061cb <f_readdir+0x94>
c0006163:	83 ec 0c             	sub    esp,0xc
c0006166:	68 60 04 00 00       	push   0x460
c000616b:	e8 6e 23 00 00       	call   c00084de <ff_memalloc>
c0006170:	83 c4 10             	add    esp,0x10
c0006173:	89 c6                	mov    esi,eax
c0006175:	b8 11 00 00 00       	mov    eax,0x11
c000617a:	85 f6                	test   esi,esi
c000617c:	74 4d                	je     c00061cb <f_readdir+0x94>
c000617e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006182:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006188:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000618b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000618e:	31 d2                	xor    edx,edx
c0006190:	89 d8                	mov    eax,ebx
c0006192:	e8 80 d8 ff ff       	call   c0003a17 <dir_read>
c0006197:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000619c:	75 19                	jne    c00061b7 <f_readdir+0x80>
c000619e:	89 fa                	mov    edx,edi
c00061a0:	89 d8                	mov    eax,ebx
c00061a2:	e8 7e ea ff ff       	call   c0004c25 <get_fileinfo>
c00061a7:	31 d2                	xor    edx,edx
c00061a9:	89 d8                	mov    eax,ebx
c00061ab:	e8 af d5 ff ff       	call   c000375f <dir_next>
c00061b0:	83 f8 04             	cmp    eax,0x4
c00061b3:	75 02                	jne    c00061b7 <f_readdir+0x80>
c00061b5:	31 c0                	xor    eax,eax
c00061b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061bb:	83 ec 0c             	sub    esp,0xc
c00061be:	56                   	push   esi
c00061bf:	e8 30 23 00 00       	call   c00084f4 <ff_memfree>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061cb:	83 c4 20             	add    esp,0x20
c00061ce:	5b                   	pop    ebx
c00061cf:	5e                   	pop    esi
c00061d0:	5f                   	pop    edi
c00061d1:	c3                   	ret    

c00061d2 <f_stat>:
c00061d2:	57                   	push   edi
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	56                   	push   esi
c00061d6:	53                   	push   ebx
c00061d7:	83 ec 50             	sub    esp,0x50
c00061da:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00061de:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061e2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061e6:	e8 50 c5 ff ff       	call   c000273b <mount_volume>
c00061eb:	89 c3                	mov    ebx,eax
c00061ed:	85 c0                	test   eax,eax
c00061ef:	75 67                	jne    c0006258 <f_stat+0x86>
c00061f1:	83 ec 0c             	sub    esp,0xc
c00061f4:	bb 11 00 00 00       	mov    ebx,0x11
c00061f9:	68 60 04 00 00       	push   0x460
c00061fe:	e8 db 22 00 00       	call   c00084de <ff_memalloc>
c0006203:	83 c4 10             	add    esp,0x10
c0006206:	89 c6                	mov    esi,eax
c0006208:	85 c0                	test   eax,eax
c000620a:	74 4c                	je     c0006258 <f_stat+0x86>
c000620c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006210:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006216:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006219:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000621c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0006220:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006224:	e8 88 ec ff ff       	call   c0004eb1 <follow_path>
c0006229:	89 c3                	mov    ebx,eax
c000622b:	85 c0                	test   eax,eax
c000622d:	75 1d                	jne    c000624c <f_stat+0x7a>
c000622f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0006234:	78 11                	js     c0006247 <f_stat+0x75>
c0006236:	85 ff                	test   edi,edi
c0006238:	74 12                	je     c000624c <f_stat+0x7a>
c000623a:	89 fa                	mov    edx,edi
c000623c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006240:	e8 e0 e9 ff ff       	call   c0004c25 <get_fileinfo>
c0006245:	eb 05                	jmp    c000624c <f_stat+0x7a>
c0006247:	bb 06 00 00 00       	mov    ebx,0x6
c000624c:	83 ec 0c             	sub    esp,0xc
c000624f:	56                   	push   esi
c0006250:	e8 9f 22 00 00       	call   c00084f4 <ff_memfree>
c0006255:	83 c4 10             	add    esp,0x10
c0006258:	83 c4 50             	add    esp,0x50
c000625b:	89 d8                	mov    eax,ebx
c000625d:	5b                   	pop    ebx
c000625e:	5e                   	pop    esi
c000625f:	5f                   	pop    edi
c0006260:	c3                   	ret    

c0006261 <f_getfree>:
c0006261:	55                   	push   ebp
c0006262:	31 c9                	xor    ecx,ecx
c0006264:	57                   	push   edi
c0006265:	56                   	push   esi
c0006266:	53                   	push   ebx
c0006267:	83 ec 5c             	sub    esp,0x5c
c000626a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000626e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006272:	e8 c4 c4 ff ff       	call   c000273b <mount_volume>
c0006277:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000627b:	85 c0                	test   eax,eax
c000627d:	0f 85 9d 01 00 00    	jne    c0006420 <f_getfree+0x1bf>
c0006283:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006287:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000628b:	89 02                	mov    DWORD PTR [edx],eax
c000628d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006290:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006293:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006296:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000629a:	39 f2                	cmp    edx,esi
c000629c:	77 0b                	ja     c00062a9 <f_getfree+0x48>
c000629e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062a2:	89 10                	mov    DWORD PTR [eax],edx
c00062a4:	e9 77 01 00 00       	jmp    c0006420 <f_getfree+0x1bf>
c00062a9:	8a 10                	mov    dl,BYTE PTR [eax]
c00062ab:	80 fa 01             	cmp    dl,0x1
c00062ae:	75 3a                	jne    c00062ea <f_getfree+0x89>
c00062b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00062b4:	be 02 00 00 00       	mov    esi,0x2
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	89 f2                	mov    edx,esi
c00062bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00062c1:	e8 4b cd ff ff       	call   c0003011 <get_fat>
c00062c6:	83 f8 ff             	cmp    eax,0xffffffff
c00062c9:	0f 84 28 01 00 00    	je     c00063f7 <f_getfree+0x196>
c00062cf:	83 f8 01             	cmp    eax,0x1
c00062d2:	0f 84 29 01 00 00    	je     c0006401 <f_getfree+0x1a0>
c00062d8:	83 d3 00             	adc    ebx,0x0
c00062db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062df:	46                   	inc    esi
c00062e0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062e3:	77 d6                	ja     c00062bb <f_getfree+0x5a>
c00062e5:	e9 25 01 00 00       	jmp    c000640f <f_getfree+0x1ae>
c00062ea:	80 fa 04             	cmp    dl,0x4
c00062ed:	0f 85 88 00 00 00    	jne    c000637b <f_getfree+0x11a>
c00062f3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062f6:	31 ed                	xor    ebp,ebp
c00062f8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006303:	31 db                	xor    ebx,ebx
c0006305:	85 ed                	test   ebp,ebp
c0006307:	75 3f                	jne    c0006348 <f_getfree+0xe7>
c0006309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000630d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006311:	83 c0 01             	add    eax,0x1
c0006314:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006318:	83 d2 00             	adc    edx,0x0
c000631b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000631f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006323:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006327:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000632b:	e8 59 c1 ff ff       	call   c0002489 <move_window>
c0006330:	85 c0                	test   eax,eax
c0006332:	0f 85 d3 00 00 00    	jne    c000640b <f_getfree+0x1aa>
c0006338:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000633c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006340:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006344:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006348:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000634f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006353:	89 cf                	mov    edi,ecx
c0006355:	85 f6                	test   esi,esi
c0006357:	74 12                	je     c000636b <f_getfree+0x10a>
c0006359:	88 c1                	mov    cl,al
c000635b:	83 e1 01             	and    ecx,0x1
c000635e:	80 f9 01             	cmp    cl,0x1
c0006361:	83 d3 00             	adc    ebx,0x0
c0006364:	d0 e8                	shr    al,1
c0006366:	4e                   	dec    esi
c0006367:	39 fe                	cmp    esi,edi
c0006369:	75 ea                	jne    c0006355 <f_getfree+0xf4>
c000636b:	45                   	inc    ebp
c000636c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006372:	85 f6                	test   esi,esi
c0006374:	75 8f                	jne    c0006305 <f_getfree+0xa4>
c0006376:	e9 94 00 00 00       	jmp    c000640f <f_getfree+0x1ae>
c000637b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000637e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006381:	31 f6                	xor    esi,esi
c0006383:	31 db                	xor    ebx,ebx
c0006385:	85 f6                	test   esi,esi
c0006387:	75 1b                	jne    c00063a4 <f_getfree+0x143>
c0006389:	89 d7                	mov    edi,edx
c000638b:	89 cd                	mov    ebp,ecx
c000638d:	83 c7 01             	add    edi,0x1
c0006390:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006394:	83 d5 00             	adc    ebp,0x0
c0006397:	e8 ed c0 ff ff       	call   c0002489 <move_window>
c000639c:	85 c0                	test   eax,eax
c000639e:	75 6b                	jne    c000640b <f_getfree+0x1aa>
c00063a0:	89 fa                	mov    edx,edi
c00063a2:	89 e9                	mov    ecx,ebp
c00063a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063a8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00063ac:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c00063b0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00063b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00063b7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00063bb:	75 11                	jne    c00063ce <f_getfree+0x16d>
c00063bd:	e8 e9 b8 ff ff       	call   c0001cab <ld_word>
c00063c2:	66 83 f8 01          	cmp    ax,0x1
c00063c6:	83 d3 00             	adc    ebx,0x0
c00063c9:	83 c6 02             	add    esi,0x2
c00063cc:	eb 13                	jmp    c00063e1 <f_getfree+0x180>
c00063ce:	e8 e5 b8 ff ff       	call   c0001cb8 <ld_dword>
c00063d3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00063d8:	83 f8 01             	cmp    eax,0x1
c00063db:	83 d3 00             	adc    ebx,0x0
c00063de:	83 c6 04             	add    esi,0x4
c00063e1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ef:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063f3:	75 90                	jne    c0006385 <f_getfree+0x124>
c00063f5:	eb 18                	jmp    c000640f <f_getfree+0x1ae>
c00063f7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063ff:	eb 0e                	jmp    c000640f <f_getfree+0x1ae>
c0006401:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006409:	eb 04                	jmp    c000640f <f_getfree+0x1ae>
c000640b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006413:	89 18                	mov    DWORD PTR [eax],ebx
c0006415:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006419:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000641c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006424:	83 c4 5c             	add    esp,0x5c
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <f_truncate>:
c000642c:	56                   	push   esi
c000642d:	53                   	push   ebx
c000642e:	83 ec 14             	sub    esp,0x14
c0006431:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006435:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006439:	89 d8                	mov    eax,ebx
c000643b:	e8 6e bf ff ff       	call   c00023ae <validate>
c0006440:	89 c6                	mov    esi,eax
c0006442:	85 c0                	test   eax,eax
c0006444:	0f 85 d2 00 00 00    	jne    c000651c <f_truncate+0xf0>
c000644a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000644e:	85 f6                	test   esi,esi
c0006450:	0f 85 c6 00 00 00    	jne    c000651c <f_truncate+0xf0>
c0006456:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000645a:	0f 84 b7 00 00 00    	je     c0006517 <f_truncate+0xeb>
c0006460:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006463:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006466:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006469:	89 d1                	mov    ecx,edx
c000646b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000646e:	0f 83 a8 00 00 00    	jae    c000651c <f_truncate+0xf0>
c0006474:	09 c2                	or     edx,eax
c0006476:	75 15                	jne    c000648d <f_truncate+0x61>
c0006478:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000647b:	31 c9                	xor    ecx,ecx
c000647d:	89 d8                	mov    eax,ebx
c000647f:	e8 7a d0 ff ff       	call   c00034fe <remove_chain>
c0006484:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000648b:	eb 35                	jmp    c00064c2 <f_truncate+0x96>
c000648d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006490:	89 d8                	mov    eax,ebx
c0006492:	e8 7a cb ff ff       	call   c0003011 <get_fat>
c0006497:	89 c2                	mov    edx,eax
c0006499:	b8 01 00 00 00       	mov    eax,0x1
c000649e:	83 fa ff             	cmp    edx,0xffffffff
c00064a1:	74 1f                	je     c00064c2 <f_truncate+0x96>
c00064a3:	b8 02 00 00 00       	mov    eax,0x2
c00064a8:	83 fa 01             	cmp    edx,0x1
c00064ab:	74 15                	je     c00064c2 <f_truncate+0x96>
c00064ad:	31 c0                	xor    eax,eax
c00064af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00064b3:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c00064b6:	76 0a                	jbe    c00064c2 <f_truncate+0x96>
c00064b8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00064bb:	89 d8                	mov    eax,ebx
c00064bd:	e8 3c d0 ff ff       	call   c00034fe <remove_chain>
c00064c2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00064c5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00064c8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00064cb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00064ce:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00064d1:	83 ca 40             	or     edx,0x40
c00064d4:	85 c0                	test   eax,eax
c00064d6:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00064d9:	75 35                	jne    c0006510 <f_truncate+0xe4>
c00064db:	84 d2                	test   dl,dl
c00064dd:	79 3d                	jns    c000651c <f_truncate+0xf0>
c00064df:	83 ec 0c             	sub    esp,0xc
c00064e2:	8d 43 50             	lea    eax,[ebx+0x50]
c00064e5:	6a 01                	push   0x1
c00064e7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064ea:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ed:	50                   	push   eax
c00064ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064f2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064f6:	50                   	push   eax
c00064f7:	e8 7a b7 ff ff       	call   c0001c76 <disk_write>
c00064fc:	83 c4 20             	add    esp,0x20
c00064ff:	85 c0                	test   eax,eax
c0006501:	75 08                	jne    c000650b <f_truncate+0xdf>
c0006503:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006507:	31 f6                	xor    esi,esi
c0006509:	eb 11                	jmp    c000651c <f_truncate+0xf0>
c000650b:	b8 01 00 00 00       	mov    eax,0x1
c0006510:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006513:	89 c6                	mov    esi,eax
c0006515:	eb 05                	jmp    c000651c <f_truncate+0xf0>
c0006517:	be 07 00 00 00       	mov    esi,0x7
c000651c:	89 f0                	mov    eax,esi
c000651e:	83 c4 14             	add    esp,0x14
c0006521:	5b                   	pop    ebx
c0006522:	5e                   	pop    esi
c0006523:	c3                   	ret    

c0006524 <f_unlink>:
c0006524:	56                   	push   esi
c0006525:	b9 02 00 00 00       	mov    ecx,0x2
c000652a:	53                   	push   ebx
c000652b:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006531:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006535:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000653c:	e8 fa c1 ff ff       	call   c000273b <mount_volume>
c0006541:	85 c0                	test   eax,eax
c0006543:	0f 85 55 01 00 00    	jne    c000669e <f_unlink+0x17a>
c0006549:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000654d:	83 ec 0c             	sub    esp,0xc
c0006550:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006554:	68 60 04 00 00       	push   0x460
c0006559:	e8 80 1f 00 00       	call   c00084de <ff_memalloc>
c000655e:	83 c4 10             	add    esp,0x10
c0006561:	89 c3                	mov    ebx,eax
c0006563:	b8 11 00 00 00       	mov    eax,0x11
c0006568:	85 db                	test   ebx,ebx
c000656a:	0f 84 2e 01 00 00    	je     c000669e <f_unlink+0x17a>
c0006570:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006574:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000657a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000657d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006580:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006587:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658b:	e8 21 e9 ff ff       	call   c0004eb1 <follow_path>
c0006590:	85 c0                	test   eax,eax
c0006592:	0f 85 f2 00 00 00    	jne    c000668a <f_unlink+0x166>
c0006598:	b8 06 00 00 00       	mov    eax,0x6
c000659d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00065a5:	0f 88 df 00 00 00    	js     c000668a <f_unlink+0x166>
c00065ab:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00065b0:	74 0a                	je     c00065bc <f_unlink+0x98>
c00065b2:	b8 07 00 00 00       	mov    eax,0x7
c00065b7:	e9 ce 00 00 00       	jmp    c000668a <f_unlink+0x166>
c00065bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00065c0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00065c4:	8a 02                	mov    al,BYTE PTR [edx]
c00065c6:	3c 04                	cmp    al,0x4
c00065c8:	75 12                	jne    c00065dc <f_unlink+0xb8>
c00065ca:	8d 42 10             	lea    eax,[edx+0x10]
c00065cd:	8d 54 24 20          	lea    edx,[esp+0x20]
c00065d1:	e8 a1 e8 ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00065d6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00065da:	eb 0e                	jmp    c00065ea <f_unlink+0xc6>
c00065dc:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065e3:	e8 3e e8 ff ff       	call   c0004e26 <ld_clust.isra.0>
c00065e8:	89 c6                	mov    esi,eax
c00065ea:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ef:	75 12                	jne    c0006603 <f_unlink+0xdf>
c00065f1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065f5:	e8 94 d6 ff ff       	call   c0003c8e <dir_remove>
c00065fa:	85 c0                	test   eax,eax
c00065fc:	74 6c                	je     c000666a <f_unlink+0x146>
c00065fe:	e9 87 00 00 00       	jmp    c000668a <f_unlink+0x166>
c0006603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006607:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000660e:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006615:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006618:	75 21                	jne    c000663b <f_unlink+0x117>
c000661a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000661e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006622:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006629:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006630:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006634:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000663b:	31 d2                	xor    edx,edx
c000663d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006644:	e8 be cb ff ff       	call   c0003207 <dir_sdi>
c0006649:	85 c0                	test   eax,eax
c000664b:	75 3d                	jne    c000668a <f_unlink+0x166>
c000664d:	31 d2                	xor    edx,edx
c000664f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006656:	e8 bc d3 ff ff       	call   c0003a17 <dir_read>
c000665b:	85 c0                	test   eax,eax
c000665d:	0f 84 4f ff ff ff    	je     c00065b2 <f_unlink+0x8e>
c0006663:	83 f8 04             	cmp    eax,0x4
c0006666:	75 22                	jne    c000668a <f_unlink+0x166>
c0006668:	eb 87                	jmp    c00065f1 <f_unlink+0xcd>
c000666a:	85 f6                	test   esi,esi
c000666c:	75 0b                	jne    c0006679 <f_unlink+0x155>
c000666e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006672:	e8 3d df ff ff       	call   c00045b4 <sync_fs>
c0006677:	eb 11                	jmp    c000668a <f_unlink+0x166>
c0006679:	31 c9                	xor    ecx,ecx
c000667b:	89 f2                	mov    edx,esi
c000667d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006681:	e8 78 ce ff ff       	call   c00034fe <remove_chain>
c0006686:	85 c0                	test   eax,eax
c0006688:	74 e4                	je     c000666e <f_unlink+0x14a>
c000668a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000668e:	83 ec 0c             	sub    esp,0xc
c0006691:	53                   	push   ebx
c0006692:	e8 5d 1e 00 00       	call   c00084f4 <ff_memfree>
c0006697:	83 c4 10             	add    esp,0x10
c000669a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000669e:	81 c4 e4 00 00 00    	add    esp,0xe4
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	c3                   	ret    

c00066a7 <f_mkdir>:
c00066a7:	57                   	push   edi
c00066a8:	b9 02 00 00 00       	mov    ecx,0x2
c00066ad:	56                   	push   esi
c00066ae:	53                   	push   ebx
c00066af:	83 c4 80             	add    esp,0xffffff80
c00066b2:	8d 54 24 08          	lea    edx,[esp+0x8]
c00066b6:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00066bd:	e8 79 c0 ff ff       	call   c000273b <mount_volume>
c00066c2:	89 c3                	mov    ebx,eax
c00066c4:	85 c0                	test   eax,eax
c00066c6:	0f 85 fe 01 00 00    	jne    c00068ca <f_mkdir+0x223>
c00066cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d0:	bb 11 00 00 00       	mov    ebx,0x11
c00066d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00066d9:	83 ec 0c             	sub    esp,0xc
c00066dc:	68 60 04 00 00       	push   0x460
c00066e1:	e8 f8 1d 00 00       	call   c00084de <ff_memalloc>
c00066e6:	83 c4 10             	add    esp,0x10
c00066e9:	89 c7                	mov    edi,eax
c00066eb:	85 c0                	test   eax,eax
c00066ed:	0f 84 d7 01 00 00    	je     c00068ca <f_mkdir+0x223>
c00066f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006700:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006703:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000670a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000670e:	e8 9e e7 ff ff       	call   c0004eb1 <follow_path>
c0006713:	89 c3                	mov    ebx,eax
c0006715:	85 c0                	test   eax,eax
c0006717:	74 3e                	je     c0006757 <f_mkdir+0xb0>
c0006719:	83 f8 04             	cmp    eax,0x4
c000671c:	75 3e                	jne    c000675c <f_mkdir+0xb5>
c000671e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006722:	31 d2                	xor    edx,edx
c0006724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000672c:	e8 ce cb ff ff       	call   c00032ff <create_chain>
c0006731:	89 c6                	mov    esi,eax
c0006733:	85 c0                	test   eax,eax
c0006735:	74 0c                	je     c0006743 <f_mkdir+0x9c>
c0006737:	bb 02 00 00 00       	mov    ebx,0x2
c000673c:	83 f8 01             	cmp    eax,0x1
c000673f:	74 07                	je     c0006748 <f_mkdir+0xa1>
c0006741:	eb 2a                	jmp    c000676d <f_mkdir+0xc6>
c0006743:	bb 07 00 00 00       	mov    ebx,0x7
c0006748:	31 c9                	xor    ecx,ecx
c000674a:	89 f2                	mov    edx,esi
c000674c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006750:	e8 a9 cd ff ff       	call   c00034fe <remove_chain>
c0006755:	eb 05                	jmp    c000675c <f_mkdir+0xb5>
c0006757:	bb 08 00 00 00       	mov    ebx,0x8
c000675c:	83 ec 0c             	sub    esp,0xc
c000675f:	57                   	push   edi
c0006760:	e8 8f 1d 00 00       	call   c00084f4 <ff_memfree>
c0006765:	83 c4 10             	add    esp,0x10
c0006768:	e9 5d 01 00 00       	jmp    c00068ca <f_mkdir+0x223>
c000676d:	bb 01 00 00 00       	mov    ebx,0x1
c0006772:	83 f8 ff             	cmp    eax,0xffffffff
c0006775:	74 d1                	je     c0006748 <f_mkdir+0xa1>
c0006777:	89 f2                	mov    edx,esi
c0006779:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677d:	e8 c4 ce ff ff       	call   c0003646 <dir_clear>
c0006782:	89 c3                	mov    ebx,eax
c0006784:	85 c0                	test   eax,eax
c0006786:	75 c0                	jne    c0006748 <f_mkdir+0xa1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000678f:	74 69                	je     c00067fa <f_mkdir+0x153>
c0006791:	b9 0b 00 00 00       	mov    ecx,0xb
c0006796:	83 c0 54             	add    eax,0x54
c0006799:	ba 20 00 00 00       	mov    edx,0x20
c000679e:	e8 9c b5 ff ff       	call   c0001d3f <mem_set>
c00067a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067ac:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c00067b0:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c00067b4:	83 c0 6a             	add    eax,0x6a
c00067b7:	e8 65 b5 ff ff       	call   c0001d21 <st_dword>
c00067bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c0:	89 f1                	mov    ecx,esi
c00067c2:	8d 50 54             	lea    edx,[eax+0x54]
c00067c5:	e8 85 e6 ff ff       	call   c0004e4f <st_clust.isra.1>
c00067ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ce:	b9 20 00 00 00       	mov    ecx,0x20
c00067d3:	8d 50 54             	lea    edx,[eax+0x54]
c00067d6:	83 c0 74             	add    eax,0x74
c00067d9:	e8 4c b5 ff ff       	call   c0001d2a <mem_cpy>
c00067de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067e6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067ea:	8d 50 74             	lea    edx,[eax+0x74]
c00067ed:	e8 5d e6 ff ff       	call   c0004e4f <st_clust.isra.1>
c00067f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067fa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067fe:	e8 2f db ff ff       	call   c0004332 <dir_register>
c0006803:	89 c3                	mov    ebx,eax
c0006805:	85 c0                	test   eax,eax
c0006807:	0f 85 3b ff ff ff    	jne    c0006748 <f_mkdir+0xa1>
c000680d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006811:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006814:	75 74                	jne    c000688a <f_mkdir+0x1e3>
c0006816:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006819:	ba 00 00 21 50       	mov    edx,0x50210000
c000681e:	83 c0 0c             	add    eax,0xc
c0006821:	e8 fb b4 ff ff       	call   c0001d21 <st_dword>
c0006826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000682a:	89 f2                	mov    edx,esi
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	83 c0 34             	add    eax,0x34
c0006832:	e8 ea b4 ff ff       	call   c0001d21 <st_dword>
c0006837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000683f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006842:	c1 e2 09             	shl    edx,0x9
c0006845:	83 c0 38             	add    eax,0x38
c0006848:	e8 d4 b4 ff ff       	call   c0001d21 <st_dword>
c000684d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006851:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006855:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006858:	c1 e2 09             	shl    edx,0x9
c000685b:	83 c0 28             	add    eax,0x28
c000685e:	e8 be b4 ff ff       	call   c0001d21 <st_dword>
c0006863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006867:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000686a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000686e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006871:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006875:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006879:	e8 8b d3 ff ff       	call   c0003c09 <store_xdir>
c000687e:	89 c3                	mov    ebx,eax
c0006880:	85 c0                	test   eax,eax
c0006882:	0f 85 d4 fe ff ff    	jne    c000675c <f_mkdir+0xb5>
c0006888:	eb 30                	jmp    c00068ba <f_mkdir+0x213>
c000688a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000688e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006893:	83 c0 16             	add    eax,0x16
c0006896:	e8 86 b4 ff ff       	call   c0001d21 <st_dword>
c000689b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000689f:	89 f1                	mov    ecx,esi
c00068a1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00068a5:	e8 a5 e5 ff ff       	call   c0004e4f <st_clust.isra.1>
c00068aa:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00068ae:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00068b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00068b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00068be:	e8 f1 dc ff ff       	call   c00045b4 <sync_fs>
c00068c3:	89 c3                	mov    ebx,eax
c00068c5:	e9 92 fe ff ff       	jmp    c000675c <f_mkdir+0xb5>
c00068ca:	83 ec 80             	sub    esp,0xffffff80
c00068cd:	89 d8                	mov    eax,ebx
c00068cf:	5b                   	pop    ebx
c00068d0:	5e                   	pop    esi
c00068d1:	5f                   	pop    edi
c00068d2:	c3                   	ret    

c00068d3 <f_rename>:
c00068d3:	55                   	push   ebp
c00068d4:	57                   	push   edi
c00068d5:	56                   	push   esi
c00068d6:	53                   	push   ebx
c00068d7:	81 ec fc 00 00 00    	sub    esp,0xfc
c00068dd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068e4:	e8 a4 b9 ff ff       	call   c000228d <get_ldnumber>
c00068e9:	b9 02 00 00 00       	mov    ecx,0x2
c00068ee:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068f2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068f9:	e8 3d be ff ff       	call   c000273b <mount_volume>
c00068fe:	85 c0                	test   eax,eax
c0006900:	0f 85 b5 02 00 00    	jne    c0006bbb <f_rename+0x2e8>
c0006906:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690a:	83 ec 0c             	sub    esp,0xc
c000690d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006911:	68 60 04 00 00       	push   0x460
c0006916:	e8 c3 1b 00 00       	call   c00084de <ff_memalloc>
c000691b:	83 c4 10             	add    esp,0x10
c000691e:	89 c3                	mov    ebx,eax
c0006920:	b8 11 00 00 00       	mov    eax,0x11
c0006925:	85 db                	test   ebx,ebx
c0006927:	0f 84 8e 02 00 00    	je     c0006bbb <f_rename+0x2e8>
c000692d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006931:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006937:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000693a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000693d:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006944:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006948:	e8 64 e5 ff ff       	call   c0004eb1 <follow_path>
c000694d:	85 c0                	test   eax,eax
c000694f:	0f 85 52 02 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006955:	b8 06 00 00 00       	mov    eax,0x6
c000695a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006962:	0f 85 3f 02 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000696c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000696f:	0f 85 05 01 00 00    	jne    c0006a7a <f_rename+0x1a7>
c0006975:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006978:	b9 40 00 00 00       	mov    ecx,0x40
c000697d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006981:	e8 a4 b3 ff ff       	call   c0001d2a <mem_cpy>
c0006986:	b9 4c 00 00 00       	mov    ecx,0x4c
c000698b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000698f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006996:	e8 8f b3 ff ff       	call   c0001d2a <mem_cpy>
c000699b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 03 e5 ff ff       	call   c0004eb1 <follow_path>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	75 29                	jne    c00069db <f_rename+0x108>
c00069b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00069b6:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00069bd:	74 0a                	je     c00069c9 <f_rename+0xf6>
c00069bf:	b8 08 00 00 00       	mov    eax,0x8
c00069c4:	e9 de 01 00 00       	jmp    c0006ba7 <f_rename+0x2d4>
c00069c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069d0:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069d7:	75 e6                	jne    c00069bf <f_rename+0xec>
c00069d9:	eb 09                	jmp    c00069e4 <f_rename+0x111>
c00069db:	83 f8 04             	cmp    eax,0x4
c00069de:	0f 85 c3 01 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c00069e4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069eb:	e8 42 d9 ff ff       	call   c0004332 <dir_register>
c00069f0:	85 c0                	test   eax,eax
c00069f2:	0f 85 af 01 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c00069f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069fc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069ff:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006a02:	89 c5                	mov    ebp,eax
c0006a04:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006a07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006a0b:	8d 46 24             	lea    eax,[esi+0x24]
c0006a0e:	e8 98 b2 ff ff       	call   c0001cab <ld_word>
c0006a13:	b9 40 00 00 00       	mov    ecx,0x40
c0006a18:	89 c7                	mov    edi,eax
c0006a1a:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006a1e:	89 f0                	mov    eax,esi
c0006a20:	e8 05 b3 ff ff       	call   c0001d2a <mem_cpy>
c0006a25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a29:	89 e9                	mov    ecx,ebp
c0006a2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a2e:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006a31:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006a35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a39:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a3c:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006a3f:	0f b7 d7             	movzx  edx,di
c0006a42:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a45:	83 c0 24             	add    eax,0x24
c0006a48:	e8 d0 b2 ff ff       	call   c0001d1d <st_word>
c0006a4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a51:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a54:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a57:	a8 10                	test   al,0x10
c0006a59:	75 06                	jne    c0006a61 <f_rename+0x18e>
c0006a5b:	83 c8 20             	or     eax,0x20
c0006a5e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 9c d1 ff ff       	call   c0003c09 <store_xdir>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	0f 84 1c 01 00 00    	je     c0006b91 <f_rename+0x2be>
c0006a75:	e9 2d 01 00 00       	jmp    c0006ba7 <f_rename+0x2d4>
c0006a7a:	b9 20 00 00 00       	mov    ecx,0x20
c0006a7f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a8a:	e8 9b b2 ff ff       	call   c0001d2a <mem_cpy>
c0006a8f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a94:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a98:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a9f:	e8 86 b2 ff ff       	call   c0001d2a <mem_cpy>
c0006aa4:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006aab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab2:	e8 fa e3 ff ff       	call   c0004eb1 <follow_path>
c0006ab7:	85 c0                	test   eax,eax
c0006ab9:	75 27                	jne    c0006ae2 <f_rename+0x20f>
c0006abb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006abf:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006ac6:	0f 85 f3 fe ff ff    	jne    c00069bf <f_rename+0xec>
c0006acc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ad3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006ada:	0f 85 df fe ff ff    	jne    c00069bf <f_rename+0xec>
c0006ae0:	eb 09                	jmp    c0006aeb <f_rename+0x218>
c0006ae2:	83 f8 04             	cmp    eax,0x4
c0006ae5:	0f 85 bc 00 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006aeb:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006af2:	e8 3b d8 ff ff       	call   c0004332 <dir_register>
c0006af7:	85 c0                	test   eax,eax
c0006af9:	0f 85 a8 00 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006aff:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006b06:	b9 13 00 00 00       	mov    ecx,0x13
c0006b0b:	8d 46 0d             	lea    eax,[esi+0xd]
c0006b0e:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006b12:	e8 13 b2 ff ff       	call   c0001d2a <mem_cpy>
c0006b17:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006b1b:	a8 10                	test   al,0x10
c0006b1d:	75 03                	jne    c0006b22 <f_rename+0x24f>
c0006b1f:	83 c8 20             	or     eax,0x20
c0006b22:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006b25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b29:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b2d:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006b31:	74 5e                	je     c0006b91 <f_rename+0x2be>
c0006b33:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006b3a:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006b3e:	74 51                	je     c0006b91 <f_rename+0x2be>
c0006b40:	89 f2                	mov    edx,esi
c0006b42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b46:	8a 07                	mov    al,BYTE PTR [edi]
c0006b48:	e8 d9 e2 ff ff       	call   c0004e26 <ld_clust.isra.0>
c0006b4d:	89 c2                	mov    edx,eax
c0006b4f:	89 f8                	mov    eax,edi
c0006b51:	e8 ee b3 ff ff       	call   c0001f44 <clst2sect>
c0006b56:	89 c6                	mov    esi,eax
c0006b58:	89 d1                	mov    ecx,edx
c0006b5a:	b8 02 00 00 00       	mov    eax,0x2
c0006b5f:	09 f2                	or     edx,esi
c0006b61:	74 44                	je     c0006ba7 <f_rename+0x2d4>
c0006b63:	89 f2                	mov    edx,esi
c0006b65:	89 f8                	mov    eax,edi
c0006b67:	e8 1d b9 ff ff       	call   c0002489 <move_window>
c0006b6c:	85 c0                	test   eax,eax
c0006b6e:	75 37                	jne    c0006ba7 <f_rename+0x2d4>
c0006b70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b74:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b78:	75 17                	jne    c0006b91 <f_rename+0x2be>
c0006b7a:	8d 50 74             	lea    edx,[eax+0x74]
c0006b7d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b84:	e8 c6 e2 ff ff       	call   c0004e4f <st_clust.isra.1>
c0006b89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b8d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b91:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b95:	e8 f4 d0 ff ff       	call   c0003c8e <dir_remove>
c0006b9a:	85 c0                	test   eax,eax
c0006b9c:	75 09                	jne    c0006ba7 <f_rename+0x2d4>
c0006b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ba2:	e8 0d da ff ff       	call   c00045b4 <sync_fs>
c0006ba7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	53                   	push   ebx
c0006baf:	e8 40 19 00 00       	call   c00084f4 <ff_memfree>
c0006bb4:	83 c4 10             	add    esp,0x10
c0006bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bbb:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006bc1:	5b                   	pop    ebx
c0006bc2:	5e                   	pop    esi
c0006bc3:	5f                   	pop    edi
c0006bc4:	5d                   	pop    ebp
c0006bc5:	c3                   	ret    

c0006bc6 <f_chmod>:
c0006bc6:	57                   	push   edi
c0006bc7:	b9 02 00 00 00       	mov    ecx,0x2
c0006bcc:	56                   	push   esi
c0006bcd:	53                   	push   ebx
c0006bce:	83 ec 60             	sub    esp,0x60
c0006bd1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006bd5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006bd9:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006bdd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006be1:	e8 55 bb ff ff       	call   c000273b <mount_volume>
c0006be6:	85 c0                	test   eax,eax
c0006be8:	0f 85 af 00 00 00    	jne    c0006c9d <f_chmod+0xd7>
c0006bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf2:	83 ec 0c             	sub    esp,0xc
c0006bf5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bf9:	68 60 04 00 00       	push   0x460
c0006bfe:	e8 db 18 00 00       	call   c00084de <ff_memalloc>
c0006c03:	83 c4 10             	add    esp,0x10
c0006c06:	89 c6                	mov    esi,eax
c0006c08:	b8 11 00 00 00       	mov    eax,0x11
c0006c0d:	85 f6                	test   esi,esi
c0006c0f:	0f 84 88 00 00 00    	je     c0006c9d <f_chmod+0xd7>
c0006c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006c1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006c22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c25:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c29:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c2d:	e8 7f e2 ff ff       	call   c0004eb1 <follow_path>
c0006c32:	85 c0                	test   eax,eax
c0006c34:	75 53                	jne    c0006c89 <f_chmod+0xc3>
c0006c36:	b8 06 00 00 00       	mov    eax,0x6
c0006c3b:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c40:	75 47                	jne    c0006c89 <f_chmod+0xc3>
c0006c42:	89 f9                	mov    ecx,edi
c0006c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c48:	83 e1 27             	and    ecx,0x27
c0006c4b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c4e:	75 1d                	jne    c0006c6d <f_chmod+0xa7>
c0006c50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c53:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c56:	21 cb                	and    ebx,ecx
c0006c58:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c5b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c62:	e8 a2 cf ff ff       	call   c0003c09 <store_xdir>
c0006c67:	85 c0                	test   eax,eax
c0006c69:	75 1e                	jne    c0006c89 <f_chmod+0xc3>
c0006c6b:	eb 13                	jmp    c0006c80 <f_chmod+0xba>
c0006c6d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c71:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c74:	21 cb                	and    ebx,ecx
c0006c76:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c79:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c84:	e8 2b d9 ff ff       	call   c00045b4 <sync_fs>
c0006c89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c8d:	83 ec 0c             	sub    esp,0xc
c0006c90:	56                   	push   esi
c0006c91:	e8 5e 18 00 00       	call   c00084f4 <ff_memfree>
c0006c96:	83 c4 10             	add    esp,0x10
c0006c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c9d:	83 c4 60             	add    esp,0x60
c0006ca0:	5b                   	pop    ebx
c0006ca1:	5e                   	pop    esi
c0006ca2:	5f                   	pop    edi
c0006ca3:	c3                   	ret    

c0006ca4 <f_utime>:
c0006ca4:	56                   	push   esi
c0006ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0006caa:	53                   	push   ebx
c0006cab:	83 ec 64             	sub    esp,0x64
c0006cae:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006cb2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006cb6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006cba:	e8 7c ba ff ff       	call   c000273b <mount_volume>
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	0f 85 b5 00 00 00    	jne    c0006d7c <f_utime+0xd8>
c0006cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ccb:	83 ec 0c             	sub    esp,0xc
c0006cce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006cd2:	68 60 04 00 00       	push   0x460
c0006cd7:	e8 02 18 00 00       	call   c00084de <ff_memalloc>
c0006cdc:	83 c4 10             	add    esp,0x10
c0006cdf:	89 c3                	mov    ebx,eax
c0006ce1:	b8 11 00 00 00       	mov    eax,0x11
c0006ce6:	85 db                	test   ebx,ebx
c0006ce8:	0f 84 8e 00 00 00    	je     c0006d7c <f_utime+0xd8>
c0006cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cf8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cfb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cfe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006d02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d06:	e8 a6 e1 ff ff       	call   c0004eb1 <follow_path>
c0006d0b:	85 c0                	test   eax,eax
c0006d0d:	75 59                	jne    c0006d68 <f_utime+0xc4>
c0006d0f:	b8 06 00 00 00       	mov    eax,0x6
c0006d14:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006d19:	75 4d                	jne    c0006d68 <f_utime+0xc4>
c0006d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d1f:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006d23:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006d27:	c1 e2 10             	shl    edx,0x10
c0006d2a:	09 ca                	or     edx,ecx
c0006d2c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d2f:	75 1a                	jne    c0006d4b <f_utime+0xa7>
c0006d31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006d34:	83 c0 0c             	add    eax,0xc
c0006d37:	e8 e5 af ff ff       	call   c0001d21 <st_dword>
c0006d3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d40:	e8 c4 ce ff ff       	call   c0003c09 <store_xdir>
c0006d45:	85 c0                	test   eax,eax
c0006d47:	75 1f                	jne    c0006d68 <f_utime+0xc4>
c0006d49:	eb 14                	jmp    c0006d5f <f_utime+0xbb>
c0006d4b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d4f:	83 c0 16             	add    eax,0x16
c0006d52:	e8 ca af ff ff       	call   c0001d21 <st_dword>
c0006d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d63:	e8 4c d8 ff ff       	call   c00045b4 <sync_fs>
c0006d68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d6c:	83 ec 0c             	sub    esp,0xc
c0006d6f:	53                   	push   ebx
c0006d70:	e8 7f 17 00 00       	call   c00084f4 <ff_memfree>
c0006d75:	83 c4 10             	add    esp,0x10
c0006d78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d7c:	83 c4 64             	add    esp,0x64
c0006d7f:	5b                   	pop    ebx
c0006d80:	5e                   	pop    esi
c0006d81:	c3                   	ret    

c0006d82 <f_getlabel>:
c0006d82:	55                   	push   ebp
c0006d83:	31 c9                	xor    ecx,ecx
c0006d85:	57                   	push   edi
c0006d86:	56                   	push   esi
c0006d87:	53                   	push   ebx
c0006d88:	83 ec 6c             	sub    esp,0x6c
c0006d8b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d8f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d96:	e8 a0 b9 ff ff       	call   c000273b <mount_volume>
c0006d9b:	89 c6                	mov    esi,eax
c0006d9d:	85 c0                	test   eax,eax
c0006d9f:	0f 85 c1 01 00 00    	jne    c0006f66 <f_getlabel+0x1e4>
c0006da5:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006dad:	0f 84 5f 01 00 00    	je     c0006f12 <f_getlabel+0x190>
c0006db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006db7:	31 d2                	xor    edx,edx
c0006db9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006dbd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006dc5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006dc9:	e8 39 c4 ff ff       	call   c0003207 <dir_sdi>
c0006dce:	85 c0                	test   eax,eax
c0006dd0:	0f 85 2d 01 00 00    	jne    c0006f03 <f_getlabel+0x181>
c0006dd6:	ba 01 00 00 00       	mov    edx,0x1
c0006ddb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ddf:	e8 33 cc ff ff       	call   c0003a17 <dir_read>
c0006de4:	85 c0                	test   eax,eax
c0006de6:	0f 85 17 01 00 00    	jne    c0006f03 <f_getlabel+0x181>
c0006dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006df3:	74 09                	je     c0006dfe <f_getlabel+0x7c>
c0006df5:	31 db                	xor    ebx,ebx
c0006df7:	31 c9                	xor    ecx,ecx
c0006df9:	e9 c8 00 00 00       	jmp    c0006ec6 <f_getlabel+0x144>
c0006dfe:	31 ed                	xor    ebp,ebp
c0006e00:	31 db                	xor    ebx,ebx
c0006e02:	31 ff                	xor    edi,edi
c0006e04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006e08:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006e0c:	39 fa                	cmp    edx,edi
c0006e0e:	76 4b                	jbe    c0006e5b <f_getlabel+0xd9>
c0006e10:	47                   	inc    edi
c0006e11:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006e14:	01 d0                	add    eax,edx
c0006e16:	e8 90 ae ff ff       	call   c0001cab <ld_word>
c0006e1b:	66 85 ed             	test   bp,bp
c0006e1e:	75 0d                	jne    c0006e2d <f_getlabel+0xab>
c0006e20:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006e26:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006e2b:	76 28                	jbe    c0006e55 <f_getlabel+0xd3>
c0006e2d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e34:	89 e9                	mov    ecx,ebp
c0006e36:	01 da                	add    edx,ebx
c0006e38:	c1 e1 10             	shl    ecx,0x10
c0006e3b:	0f b7 c0             	movzx  eax,ax
c0006e3e:	09 c8                	or     eax,ecx
c0006e40:	b9 04 00 00 00       	mov    ecx,0x4
c0006e45:	e8 01 b0 ff ff       	call   c0001e4b <put_utf>
c0006e4a:	84 c0                	test   al,al
c0006e4c:	74 0b                	je     c0006e59 <f_getlabel+0xd7>
c0006e4e:	0f b6 c0             	movzx  eax,al
c0006e51:	01 c3                	add    ebx,eax
c0006e53:	31 c0                	xor    eax,eax
c0006e55:	89 c5                	mov    ebp,eax
c0006e57:	eb ab                	jmp    c0006e04 <f_getlabel+0x82>
c0006e59:	31 db                	xor    ebx,ebx
c0006e5b:	66 85 ed             	test   bp,bp
c0006e5e:	74 02                	je     c0006e62 <f_getlabel+0xe0>
c0006e60:	31 db                	xor    ebx,ebx
c0006e62:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e69:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e6d:	e9 a0 00 00 00       	jmp    c0006f12 <f_getlabel+0x190>
c0006e72:	83 ff 0b             	cmp    edi,0xb
c0006e75:	74 11                	je     c0006e88 <f_getlabel+0x106>
c0006e77:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e80:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e83:	c1 e0 08             	shl    eax,0x8
c0006e86:	09 c2                	or     edx,eax
c0006e88:	0f b7 d2             	movzx  edx,dx
c0006e8b:	50                   	push   eax
c0006e8c:	50                   	push   eax
c0006e8d:	68 b5 01 00 00       	push   0x1b5
c0006e92:	52                   	push   edx
c0006e93:	e8 03 17 00 00       	call   c000859b <ff_oem2uni>
c0006e98:	83 c4 10             	add    esp,0x10
c0006e9b:	66 85 c0             	test   ax,ax
c0006e9e:	74 46                	je     c0006ee6 <f_getlabel+0x164>
c0006ea0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ea7:	0f b7 c0             	movzx  eax,ax
c0006eaa:	01 da                	add    edx,ebx
c0006eac:	b9 04 00 00 00       	mov    ecx,0x4
c0006eb1:	e8 95 af ff ff       	call   c0001e4b <put_utf>
c0006eb6:	84 c0                	test   al,al
c0006eb8:	74 2c                	je     c0006ee6 <f_getlabel+0x164>
c0006eba:	0f b6 c0             	movzx  eax,al
c0006ebd:	01 c3                	add    ebx,eax
c0006ebf:	83 ff 0b             	cmp    edi,0xb
c0006ec2:	74 24                	je     c0006ee8 <f_getlabel+0x166>
c0006ec4:	89 f9                	mov    ecx,edi
c0006ec6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006eca:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ecd:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ed2:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006edb:	e8 9f ae ff ff       	call   c0001d7f <dbc_1st>
c0006ee0:	85 c0                	test   eax,eax
c0006ee2:	74 a4                	je     c0006e88 <f_getlabel+0x106>
c0006ee4:	eb 8c                	jmp    c0006e72 <f_getlabel+0xf0>
c0006ee6:	31 db                	xor    ebx,ebx
c0006ee8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006eef:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ef2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ef9:	74 17                	je     c0006f12 <f_getlabel+0x190>
c0006efb:	4b                   	dec    ebx
c0006efc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eff:	74 ee                	je     c0006eef <f_getlabel+0x16d>
c0006f01:	eb 0f                	jmp    c0006f12 <f_getlabel+0x190>
c0006f03:	83 f8 04             	cmp    eax,0x4
c0006f06:	75 5c                	jne    c0006f64 <f_getlabel+0x1e2>
c0006f08:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006f0f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006f12:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006f1a:	74 4a                	je     c0006f66 <f_getlabel+0x1e4>
c0006f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f20:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006f23:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006f26:	e8 5e b5 ff ff       	call   c0002489 <move_window>
c0006f2b:	89 c6                	mov    esi,eax
c0006f2d:	85 c0                	test   eax,eax
c0006f2f:	75 35                	jne    c0006f66 <f_getlabel+0x1e4>
c0006f31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006f35:	b8 43 00 00 00       	mov    eax,0x43
c0006f3a:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006f3c:	80 f9 03             	cmp    cl,0x3
c0006f3f:	74 0f                	je     c0006f50 <f_getlabel+0x1ce>
c0006f41:	31 c0                	xor    eax,eax
c0006f43:	80 f9 04             	cmp    cl,0x4
c0006f46:	0f 94 c0             	sete   al
c0006f49:	48                   	dec    eax
c0006f4a:	83 e0 c3             	and    eax,0xffffffc3
c0006f4d:	83 c0 64             	add    eax,0x64
c0006f50:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f54:	e8 5f ad ff ff       	call   c0001cb8 <ld_dword>
c0006f59:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f60:	89 07                	mov    DWORD PTR [edi],eax
c0006f62:	eb 02                	jmp    c0006f66 <f_getlabel+0x1e4>
c0006f64:	89 c6                	mov    esi,eax
c0006f66:	83 c4 6c             	add    esp,0x6c
c0006f69:	89 f0                	mov    eax,esi
c0006f6b:	5b                   	pop    ebx
c0006f6c:	5e                   	pop    esi
c0006f6d:	5f                   	pop    edi
c0006f6e:	5d                   	pop    ebp
c0006f6f:	c3                   	ret    

c0006f70 <f_setlabel>:
c0006f70:	56                   	push   esi
c0006f71:	b9 02 00 00 00       	mov    ecx,0x2
c0006f76:	53                   	push   ebx
c0006f77:	83 ec 74             	sub    esp,0x74
c0006f7a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f7e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f85:	e8 b1 b7 ff ff       	call   c000273b <mount_volume>
c0006f8a:	89 c6                	mov    esi,eax
c0006f8c:	85 c0                	test   eax,eax
c0006f8e:	0f 85 41 02 00 00    	jne    c00071d5 <f_setlabel+0x265>
c0006f94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f9b:	0f 85 8e 00 00 00    	jne    c000702f <f_setlabel+0xbf>
c0006fa1:	b9 16 00 00 00       	mov    ecx,0x16
c0006fa6:	31 d2                	xor    edx,edx
c0006fa8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fac:	31 db                	xor    ebx,ebx
c0006fae:	e8 8c ad ff ff       	call   c0001d3f <mem_set>
c0006fb3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fba:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fbd:	0f 86 0a 01 00 00    	jbe    c00070cd <f_setlabel+0x15d>
c0006fc3:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fca:	e8 b6 ad ff ff       	call   c0001d85 <tchar2uni>
c0006fcf:	89 c6                	mov    esi,eax
c0006fd1:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fd6:	76 2a                	jbe    c0007002 <f_setlabel+0x92>
c0006fd8:	83 f8 ff             	cmp    eax,0xffffffff
c0006fdb:	74 05                	je     c0006fe2 <f_setlabel+0x72>
c0006fdd:	83 fb 09             	cmp    ebx,0x9
c0006fe0:	76 0a                	jbe    c0006fec <f_setlabel+0x7c>
c0006fe2:	be 06 00 00 00       	mov    esi,0x6
c0006fe7:	e9 e9 01 00 00       	jmp    c00071d5 <f_setlabel+0x265>
c0006fec:	89 c2                	mov    edx,eax
c0006fee:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ff2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ff5:	c1 ea 10             	shr    edx,0x10
c0006ff8:	01 c8                	add    eax,ecx
c0006ffa:	43                   	inc    ebx
c0006ffb:	e8 1d ad ff ff       	call   c0001d1d <st_word>
c0007000:	eb 04                	jmp    c0007006 <f_setlabel+0x96>
c0007002:	85 c0                	test   eax,eax
c0007004:	74 dc                	je     c0006fe2 <f_setlabel+0x72>
c0007006:	89 f2                	mov    edx,esi
c0007008:	b8 17 f7 01 c0       	mov    eax,0xc001f717
c000700d:	e8 5b ad ff ff       	call   c0001d6d <chk_chr>
c0007012:	85 c0                	test   eax,eax
c0007014:	75 cc                	jne    c0006fe2 <f_setlabel+0x72>
c0007016:	83 fb 0a             	cmp    ebx,0xa
c0007019:	77 c7                	ja     c0006fe2 <f_setlabel+0x72>
c000701b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000701e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0007022:	0f b7 d6             	movzx  edx,si
c0007025:	01 c8                	add    eax,ecx
c0007027:	43                   	inc    ebx
c0007028:	e8 f0 ac ff ff       	call   c0001d1d <st_word>
c000702d:	eb 84                	jmp    c0006fb3 <f_setlabel+0x43>
c000702f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007034:	ba 20 00 00 00       	mov    edx,0x20
c0007039:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000703d:	31 db                	xor    ebx,ebx
c000703f:	e8 fb ac ff ff       	call   c0001d3f <mem_set>
c0007044:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000704b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000704e:	76 60                	jbe    c00070b0 <f_setlabel+0x140>
c0007050:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007057:	e8 29 ad ff ff       	call   c0001d85 <tchar2uni>
c000705c:	3d ff ff 00 00       	cmp    eax,0xffff
c0007061:	0f 87 7b ff ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c0007067:	83 ec 0c             	sub    esp,0xc
c000706a:	50                   	push   eax
c000706b:	e8 97 15 00 00       	call   c0008607 <ff_wtoupper>
c0007070:	5a                   	pop    edx
c0007071:	59                   	pop    ecx
c0007072:	68 b5 01 00 00       	push   0x1b5
c0007077:	50                   	push   eax
c0007078:	e8 8e 14 00 00       	call   c000850b <ff_uni2oem>
c000707d:	83 c4 10             	add    esp,0x10
c0007080:	89 c6                	mov    esi,eax
c0007082:	66 85 c0             	test   ax,ax
c0007085:	0f 84 57 ff ff ff    	je     c0006fe2 <f_setlabel+0x72>
c000708b:	0f b7 d0             	movzx  edx,ax
c000708e:	b8 10 f7 01 c0       	mov    eax,0xc001f710
c0007093:	e8 d5 ac ff ff       	call   c0001d6d <chk_chr>
c0007098:	85 c0                	test   eax,eax
c000709a:	0f 85 42 ff ff ff    	jne    c0006fe2 <f_setlabel+0x72>
c00070a0:	66 81 fe ff 00       	cmp    si,0xff
c00070a5:	0f 87 14 01 00 00    	ja     c00071bf <f_setlabel+0x24f>
c00070ab:	e9 fa 00 00 00       	jmp    c00071aa <f_setlabel+0x23a>
c00070b0:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c00070b5:	0f 84 27 ff ff ff    	je     c0006fe2 <f_setlabel+0x72>
c00070bb:	85 db                	test   ebx,ebx
c00070bd:	74 0e                	je     c00070cd <f_setlabel+0x15d>
c00070bf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00070c2:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c00070c7:	75 04                	jne    c00070cd <f_setlabel+0x15d>
c00070c9:	89 c3                	mov    ebx,eax
c00070cb:	eb ee                	jmp    c00070bb <f_setlabel+0x14b>
c00070cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070d1:	31 d2                	xor    edx,edx
c00070d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00070d7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00070df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070e3:	e8 1f c1 ff ff       	call   c0003207 <dir_sdi>
c00070e8:	89 c6                	mov    esi,eax
c00070ea:	85 c0                	test   eax,eax
c00070ec:	0f 85 e3 00 00 00    	jne    c00071d5 <f_setlabel+0x265>
c00070f2:	ba 01 00 00 00       	mov    edx,0x1
c00070f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070fb:	e8 17 c9 ff ff       	call   c0003a17 <dir_read>
c0007100:	85 c0                	test   eax,eax
c0007102:	75 21                	jne    c0007125 <f_setlabel+0x1b5>
c0007104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000710f:	74 5d                	je     c000716e <f_setlabel+0x1fe>
c0007111:	85 db                	test   ebx,ebx
c0007113:	74 0b                	je     c0007120 <f_setlabel+0x1b0>
c0007115:	b9 0b 00 00 00       	mov    ecx,0xb
c000711a:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000711e:	eb 70                	jmp    c0007190 <f_setlabel+0x220>
c0007120:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0007123:	eb 70                	jmp    c0007195 <f_setlabel+0x225>
c0007125:	83 f8 04             	cmp    eax,0x4
c0007128:	75 7c                	jne    c00071a6 <f_setlabel+0x236>
c000712a:	85 db                	test   ebx,ebx
c000712c:	0f 84 a3 00 00 00    	je     c00071d5 <f_setlabel+0x265>
c0007132:	ba 01 00 00 00       	mov    edx,0x1
c0007137:	8d 44 24 24          	lea    eax,[esp+0x24]
c000713b:	e8 51 ca ff ff       	call   c0003b91 <dir_alloc>
c0007140:	89 c6                	mov    esi,eax
c0007142:	85 c0                	test   eax,eax
c0007144:	0f 85 8b 00 00 00    	jne    c00071d5 <f_setlabel+0x265>
c000714a:	31 d2                	xor    edx,edx
c000714c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007150:	b9 20 00 00 00       	mov    ecx,0x20
c0007155:	e8 e5 ab ff ff       	call   c0001d3f <mem_set>
c000715a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007161:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007165:	75 18                	jne    c000717f <f_setlabel+0x20f>
c0007167:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000716a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000716e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007171:	b9 16 00 00 00       	mov    ecx,0x16
c0007176:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000717a:	83 c0 02             	add    eax,0x2
c000717d:	eb 9b                	jmp    c000711a <f_setlabel+0x1aa>
c000717f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007183:	b9 0b 00 00 00       	mov    ecx,0xb
c0007188:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000718c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007190:	e8 95 ab ff ff       	call   c0001d2a <mem_cpy>
c0007195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007199:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000719d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a1:	e8 0e d4 ff ff       	call   c00045b4 <sync_fs>
c00071a6:	89 c6                	mov    esi,eax
c00071a8:	eb 2b                	jmp    c00071d5 <f_setlabel+0x265>
c00071aa:	83 fb 0a             	cmp    ebx,0xa
c00071ad:	0f 87 2f fe ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c00071b3:	89 f0                	mov    eax,esi
c00071b5:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071b9:	43                   	inc    ebx
c00071ba:	e9 85 fe ff ff       	jmp    c0007044 <f_setlabel+0xd4>
c00071bf:	83 fb 09             	cmp    ebx,0x9
c00071c2:	0f 87 1a fe ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c00071c8:	89 f0                	mov    eax,esi
c00071ca:	66 c1 e8 08          	shr    ax,0x8
c00071ce:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071d2:	43                   	inc    ebx
c00071d3:	eb de                	jmp    c00071b3 <f_setlabel+0x243>
c00071d5:	89 f0                	mov    eax,esi
c00071d7:	83 c4 74             	add    esp,0x74
c00071da:	5b                   	pop    ebx
c00071db:	5e                   	pop    esi
c00071dc:	c3                   	ret    

c00071dd <f_forward>:
c00071dd:	55                   	push   ebp
c00071de:	57                   	push   edi
c00071df:	56                   	push   esi
c00071e0:	53                   	push   ebx
c00071e1:	83 ec 2c             	sub    esp,0x2c
c00071e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071e8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071f6:	89 d8                	mov    eax,ebx
c00071f8:	e8 b1 b1 ff ff       	call   c00023ae <validate>
c00071fd:	89 c5                	mov    ebp,eax
c00071ff:	85 c0                	test   eax,eax
c0007201:	0f 85 aa 01 00 00    	jne    c00073b1 <f_forward+0x1d4>
c0007207:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000720b:	85 ed                	test   ebp,ebp
c000720d:	0f 85 9e 01 00 00    	jne    c00073b1 <f_forward+0x1d4>
c0007213:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007217:	0f 84 8f 01 00 00    	je     c00073ac <f_forward+0x1cf>
c000721d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007220:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007223:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007226:	bf 00 00 00 00       	mov    edi,0x0
c000722b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000722e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007232:	89 d1                	mov    ecx,edx
c0007234:	19 f9                	sbb    ecx,edi
c0007236:	0f 83 cf 00 00 00    	jae    c000730b <f_forward+0x12e>
c000723c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007240:	e9 c6 00 00 00       	jmp    c000730b <f_forward+0x12e>
c0007245:	50                   	push   eax
c0007246:	50                   	push   eax
c0007247:	6a 00                	push   0x0
c0007249:	6a 00                	push   0x0
c000724b:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000724f:	83 c4 10             	add    esp,0x10
c0007252:	85 c0                	test   eax,eax
c0007254:	0f 84 57 01 00 00    	je     c00073b1 <f_forward+0x1d4>
c000725a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000725d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007261:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007264:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007268:	89 d7                	mov    edi,edx
c000726a:	8d 4e ff             	lea    ecx,[esi-0x1]
c000726d:	89 c6                	mov    esi,eax
c000726f:	0f ac fe 09          	shrd   esi,edi,0x9
c0007273:	21 ce                	and    esi,ecx
c0007275:	89 c1                	mov    ecx,eax
c0007277:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000727d:	0f 84 98 00 00 00    	je     c000731b <f_forward+0x13e>
c0007283:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007287:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000728a:	89 c8                	mov    eax,ecx
c000728c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007290:	e8 af ac ff ff       	call   c0001f44 <clst2sect>
c0007295:	89 d7                	mov    edi,edx
c0007297:	09 c7                	or     edi,eax
c0007299:	0f 84 9e 00 00 00    	je     c000733d <f_forward+0x160>
c000729f:	31 ff                	xor    edi,edi
c00072a1:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00072a4:	01 c6                	add    esi,eax
c00072a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00072aa:	11 d7                	adc    edi,edx
c00072ac:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00072af:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00072b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072b6:	39 fa                	cmp    edx,edi
c00072b8:	0f 85 a2 00 00 00    	jne    c0007360 <f_forward+0x183>
c00072be:	39 f0                	cmp    eax,esi
c00072c0:	0f 85 9a 00 00 00    	jne    c0007360 <f_forward+0x183>
c00072c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00072c9:	ba 00 02 00 00       	mov    edx,0x200
c00072ce:	25 ff 01 00 00       	and    eax,0x1ff
c00072d3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00072d7:	29 c2                	sub    edx,eax
c00072d9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00072dc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00072df:	39 d1                	cmp    ecx,edx
c00072e1:	76 02                	jbe    c00072e5 <f_forward+0x108>
c00072e3:	89 d1                	mov    ecx,edx
c00072e5:	8d 73 50             	lea    esi,[ebx+0x50]
c00072e8:	52                   	push   edx
c00072e9:	01 c6                	add    esi,eax
c00072eb:	52                   	push   edx
c00072ec:	51                   	push   ecx
c00072ed:	56                   	push   esi
c00072ee:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	85 c0                	test   eax,eax
c00072f7:	74 44                	je     c000733d <f_forward+0x160>
c00072f9:	31 ff                	xor    edi,edi
c00072fb:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072fe:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007301:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007305:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007309:	01 07                	add    DWORD PTR [edi],eax
c000730b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007310:	0f 85 2f ff ff ff    	jne    c0007245 <f_forward+0x68>
c0007316:	e9 96 00 00 00       	jmp    c00073b1 <f_forward+0x1d4>
c000731b:	85 f6                	test   esi,esi
c000731d:	0f 85 60 ff ff ff    	jne    c0007283 <f_forward+0xa6>
c0007323:	89 d7                	mov    edi,edx
c0007325:	09 c7                	or     edi,eax
c0007327:	75 05                	jne    c000732e <f_forward+0x151>
c0007329:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000732c:	eb 0a                	jmp    c0007338 <f_forward+0x15b>
c000732e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007331:	89 d8                	mov    eax,ebx
c0007333:	e8 d9 bc ff ff       	call   c0003011 <get_fat>
c0007338:	83 f8 01             	cmp    eax,0x1
c000733b:	77 0b                	ja     c0007348 <f_forward+0x16b>
c000733d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007341:	bd 02 00 00 00       	mov    ebp,0x2
c0007346:	eb 69                	jmp    c00073b1 <f_forward+0x1d4>
c0007348:	83 f8 ff             	cmp    eax,0xffffffff
c000734b:	75 0b                	jne    c0007358 <f_forward+0x17b>
c000734d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007351:	bd 01 00 00 00       	mov    ebp,0x1
c0007356:	eb 59                	jmp    c00073b1 <f_forward+0x1d4>
c0007358:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000735b:	e9 23 ff ff ff       	jmp    c0007283 <f_forward+0xa6>
c0007360:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007364:	79 20                	jns    c0007386 <f_forward+0x1a9>
c0007366:	83 ec 0c             	sub    esp,0xc
c0007369:	6a 01                	push   0x1
c000736b:	52                   	push   edx
c000736c:	50                   	push   eax
c000736d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007371:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007375:	50                   	push   eax
c0007376:	e8 fb a8 ff ff       	call   c0001c76 <disk_write>
c000737b:	83 c4 20             	add    esp,0x20
c000737e:	85 c0                	test   eax,eax
c0007380:	75 cb                	jne    c000734d <f_forward+0x170>
c0007382:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007386:	83 ec 0c             	sub    esp,0xc
c0007389:	6a 01                	push   0x1
c000738b:	57                   	push   edi
c000738c:	56                   	push   esi
c000738d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007391:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007395:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007399:	50                   	push   eax
c000739a:	e8 c1 a8 ff ff       	call   c0001c60 <disk_read>
c000739f:	83 c4 20             	add    esp,0x20
c00073a2:	85 c0                	test   eax,eax
c00073a4:	0f 84 1c ff ff ff    	je     c00072c6 <f_forward+0xe9>
c00073aa:	eb a1                	jmp    c000734d <f_forward+0x170>
c00073ac:	bd 07 00 00 00       	mov    ebp,0x7
c00073b1:	83 c4 2c             	add    esp,0x2c
c00073b4:	89 e8                	mov    eax,ebp
c00073b6:	5b                   	pop    ebx
c00073b7:	5e                   	pop    esi
c00073b8:	5f                   	pop    edi
c00073b9:	5d                   	pop    ebp
c00073ba:	c3                   	ret    

c00073bb <f_mkfs>:
c00073bb:	55                   	push   ebp
c00073bc:	57                   	push   edi
c00073bd:	56                   	push   esi
c00073be:	53                   	push   ebx
c00073bf:	bb 0b 00 00 00       	mov    ebx,0xb
c00073c4:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00073ca:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00073d1:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00073d8:	e8 b0 ae ff ff       	call   c000228d <get_ldnumber>
c00073dd:	85 c0                	test   eax,eax
c00073df:	0f 88 ec 10 00 00    	js     c00084d1 <f_mkfs+0x1116>
c00073e5:	8b 14 85 40 ba 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc45c0]
c00073ec:	85 d2                	test   edx,edx
c00073ee:	74 03                	je     c00073f3 <f_mkfs+0x38>
c00073f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073f3:	85 f6                	test   esi,esi
c00073f5:	75 05                	jne    c00073fc <f_mkfs+0x41>
c00073f7:	be 00 f7 01 c0       	mov    esi,0xc001f700
c00073fc:	83 ec 0c             	sub    esp,0xc
c00073ff:	0f b6 c0             	movzx  eax,al
c0007402:	bb 03 00 00 00       	mov    ebx,0x3
c0007407:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000740b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000740f:	e8 49 a8 ff ff       	call   c0001c5d <disk_initialize>
c0007414:	83 c4 10             	add    esp,0x10
c0007417:	a8 01                	test   al,0x1
c0007419:	0f 85 b2 10 00 00    	jne    c00084d1 <f_mkfs+0x1116>
c000741f:	bb 0a 00 00 00       	mov    ebx,0xa
c0007424:	a8 04                	test   al,0x4
c0007426:	0f 85 a5 10 00 00    	jne    c00084d1 <f_mkfs+0x1116>
c000742c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000742f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007433:	85 c0                	test   eax,eax
c0007435:	75 20                	jne    c0007457 <f_mkfs+0x9c>
c0007437:	51                   	push   ecx
c0007438:	8d 44 24 78          	lea    eax,[esp+0x78]
c000743c:	50                   	push   eax
c000743d:	6a 03                	push   0x3
c000743f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007443:	e8 44 a8 ff ff       	call   c0001c8c <disk_ioctl>
c0007448:	83 c4 10             	add    esp,0x10
c000744b:	85 c0                	test   eax,eax
c000744d:	74 08                	je     c0007457 <f_mkfs+0x9c>
c000744f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007457:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000745b:	8d 42 ff             	lea    eax,[edx-0x1]
c000745e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007463:	77 04                	ja     c0007469 <f_mkfs+0xae>
c0007465:	85 c2                	test   edx,eax
c0007467:	74 08                	je     c0007471 <f_mkfs+0xb6>
c0007469:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007471:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007474:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007478:	48                   	dec    eax
c0007479:	3c 01                	cmp    al,0x1
c000747b:	76 05                	jbe    c0007482 <f_mkfs+0xc7>
c000747d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007482:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007489:	48                   	dec    eax
c000748a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000748f:	77 07                	ja     c0007498 <f_mkfs+0xdd>
c0007491:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007496:	74 08                	je     c00074a0 <f_mkfs+0xe5>
c0007498:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00074a0:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00074a3:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00074a9:	77 07                	ja     c00074b2 <f_mkfs+0xf7>
c00074ab:	8d 43 ff             	lea    eax,[ebx-0x1]
c00074ae:	85 d8                	test   eax,ebx
c00074b0:	74 02                	je     c00074b4 <f_mkfs+0xf9>
c00074b2:	31 db                	xor    ebx,ebx
c00074b4:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00074bf:	77 0a                	ja     c00074cb <f_mkfs+0x110>
c00074c1:	bb 11 00 00 00       	mov    ebx,0x11
c00074c6:	e9 06 10 00 00       	jmp    c00084d1 <f_mkfs+0x1116>
c00074cb:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00074d2:	8b 36                	mov    esi,DWORD PTR [esi]
c00074d4:	85 ed                	test   ebp,ebp
c00074d6:	75 1e                	jne    c00074f6 <f_mkfs+0x13b>
c00074d8:	83 ec 0c             	sub    esp,0xc
c00074db:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074e2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074e7:	50                   	push   eax
c00074e8:	e8 f1 0f 00 00       	call   c00084de <ff_memalloc>
c00074ed:	83 c4 10             	add    esp,0x10
c00074f0:	89 c5                	mov    ebp,eax
c00074f2:	85 c0                	test   eax,eax
c00074f4:	74 cb                	je     c00074c1 <f_mkfs+0x106>
c00074f6:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074fe:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007506:	52                   	push   edx
c0007507:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000750b:	50                   	push   eax
c000750c:	6a 01                	push   0x1
c000750e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007512:	e8 75 a7 ff ff       	call   c0001c8c <disk_ioctl>
c0007517:	83 c4 10             	add    esp,0x10
c000751a:	85 c0                	test   eax,eax
c000751c:	0f 85 4a 0f 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007522:	89 f1                	mov    ecx,esi
c0007524:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000752c:	83 e1 0f             	and    ecx,0xf
c000752f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007537:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000753b:	83 e6 08             	and    esi,0x8
c000753e:	75 56                	jne    c0007596 <f_mkfs+0x1db>
c0007540:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007544:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007548:	83 ff 00             	cmp    edi,0x0
c000754b:	76 20                	jbe    c000756d <f_mkfs+0x1b2>
c000754d:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007552:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000755a:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007560:	83 d7 ff             	adc    edi,0xffffffff
c0007563:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007567:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000756b:	eb 21                	jmp    c000758e <f_mkfs+0x1d3>
c000756d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007572:	39 f2                	cmp    edx,esi
c0007574:	19 f8                	sbb    eax,edi
c0007576:	73 1e                	jae    c0007596 <f_mkfs+0x1db>
c0007578:	83 c6 c1             	add    esi,0xffffffc1
c000757b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007583:	83 d7 ff             	adc    edi,0xffffffff
c0007586:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000758a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000758e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007596:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000759a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000759e:	89 04 24             	mov    DWORD PTR [esp],eax
c00075a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00075a5:	31 c0                	xor    eax,eax
c00075a7:	ba 7f 00 00 00       	mov    edx,0x7f
c00075ac:	89 c7                	mov    edi,eax
c00075ae:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075b1:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075b5:	0f 83 c5 0a 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c00075bb:	89 df                	mov    edi,ebx
c00075bd:	c1 ef 09             	shr    edi,0x9
c00075c0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00075c4:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00075cb:	c1 ef 09             	shr    edi,0x9
c00075ce:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00075d3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00075d7:	74 29                	je     c0007602 <f_mkfs+0x247>
c00075d9:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075df:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075e4:	0f 97 c2             	seta   dl
c00075e7:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ee:	0f 92 c0             	setb   al
c00075f1:	08 c2                	or     dl,al
c00075f3:	75 5b                	jne    c0007650 <f_mkfs+0x295>
c00075f5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075f9:	83 e0 07             	and    eax,0x7
c00075fc:	3c 04                	cmp    al,0x4
c00075fe:	74 50                	je     c0007650 <f_mkfs+0x295>
c0007600:	eb 1b                	jmp    c000761d <f_mkfs+0x262>
c0007602:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007607:	0f 87 73 0a 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c000760d:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007613:	76 08                	jbe    c000761d <f_mkfs+0x262>
c0007615:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000761d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007621:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007625:	83 e0 01             	and    eax,0x1
c0007628:	80 e1 02             	and    cl,0x2
c000762b:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000762f:	74 0d                	je     c000763e <f_mkfs+0x283>
c0007631:	84 c0                	test   al,al
c0007633:	0f 84 53 09 00 00    	je     c0007f8c <f_mkfs+0xbd1>
c0007639:	e9 12 08 00 00       	jmp    c0007e50 <f_mkfs+0xa95>
c000763e:	bb 13 00 00 00       	mov    ebx,0x13
c0007643:	84 c0                	test   al,al
c0007645:	0f 85 05 08 00 00    	jne    c0007e50 <f_mkfs+0xa95>
c000764b:	e9 39 0e 00 00       	jmp    c0008489 <f_mkfs+0x10ce>
c0007650:	31 c0                	xor    eax,eax
c0007652:	ba ff 0f 00 00       	mov    edx,0xfff
c0007657:	89 c7                	mov    edi,eax
c0007659:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000765c:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007660:	0f 83 1a 0a 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c0007666:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000766c:	77 39                	ja     c00076a7 <f_mkfs+0x2ec>
c000766e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007673:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000767b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000767e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007682:	73 08                	jae    c000768c <f_mkfs+0x2d1>
c0007684:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000768c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007691:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007694:	b8 00 00 00 00       	mov    eax,0x0
c0007699:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000769d:	73 08                	jae    c00076a7 <f_mkfs+0x2ec>
c000769f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00076a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00076af:	83 c0 20             	add    eax,0x20
c00076b2:	83 d2 00             	adc    edx,0x0
c00076b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00076b9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00076bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076c1:	31 d2                	xor    edx,edx
c00076c3:	31 ff                	xor    edi,edi
c00076c5:	52                   	push   edx
c00076c6:	89 fb                	mov    ebx,edi
c00076c8:	50                   	push   eax
c00076c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076d1:	e8 66 70 01 00       	call   c001e73c <__udivdi3>
c00076d6:	83 c4 10             	add    esp,0x10
c00076d9:	c1 e0 02             	shl    eax,0x2
c00076dc:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076e0:	05 07 02 00 00       	add    eax,0x207
c00076e5:	89 f1                	mov    ecx,esi
c00076e7:	c1 e8 09             	shr    eax,0x9
c00076ea:	83 c1 ff             	add    ecx,0xffffffff
c00076ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076f1:	83 d3 ff             	adc    ebx,0xffffffff
c00076f4:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076f8:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	01 c8                	add    eax,ecx
c0007700:	11 da                	adc    edx,ebx
c0007702:	89 c1                	mov    ecx,eax
c0007704:	f7 de                	neg    esi
c0007706:	89 d0                	mov    eax,edx
c0007708:	83 d7 00             	adc    edi,0x0
c000770b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000770f:	f7 df                	neg    edi
c0007711:	21 f1                	and    ecx,esi
c0007713:	21 f8                	and    eax,edi
c0007715:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000771d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007721:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007725:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007729:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000772c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007730:	0f ac d0 01          	shrd   eax,edx,0x1
c0007734:	89 df                	mov    edi,ebx
c0007736:	d1 ea                	shr    edx,1
c0007738:	39 c1                	cmp    ecx,eax
c000773a:	19 d7                	sbb    edi,edx
c000773c:	0f 83 3e 09 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c0007742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007746:	31 d2                	xor    edx,edx
c0007748:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000774c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007750:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007754:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007757:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000775b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000775f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007763:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007767:	83 f8 0f             	cmp    eax,0xf
c000776a:	0f 86 10 09 00 00    	jbe    c0008080 <f_mkfs+0xcc5>
c0007770:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007778:	0f 87 02 09 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c000777e:	31 d2                	xor    edx,edx
c0007780:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007784:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000778c:	83 c0 07             	add    eax,0x7
c000778f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007797:	c1 e8 03             	shr    eax,0x3
c000779a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00077a1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00077a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a9:	c1 e0 09             	shl    eax,0x9
c00077ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00077b0:	48                   	dec    eax
c00077b1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00077b5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00077b9:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00077bd:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00077c1:	31 d2                	xor    edx,edx
c00077c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00077c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00077ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00077d7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00077db:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00077df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077e3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077e7:	31 ff                	xor    edi,edi
c00077e9:	31 f6                	xor    esi,esi
c00077eb:	31 db                	xor    ebx,ebx
c00077ed:	85 ff                	test   edi,edi
c00077ef:	74 05                	je     c00077f6 <f_mkfs+0x43b>
c00077f1:	4f                   	dec    edi
c00077f2:	74 44                	je     c0007838 <f_mkfs+0x47d>
c00077f4:	eb 4f                	jmp    c0007845 <f_mkfs+0x48a>
c00077f6:	83 ec 0c             	sub    esp,0xc
c00077f9:	0f b7 c3             	movzx  eax,bx
c00077fc:	50                   	push   eax
c00077fd:	e8 05 0e 00 00       	call   c0008607 <ff_wtoupper>
c0007802:	83 c4 10             	add    esp,0x10
c0007805:	89 c1                	mov    ecx,eax
c0007807:	8d 53 01             	lea    edx,[ebx+0x1]
c000780a:	66 39 c3             	cmp    bx,ax
c000780d:	75 3e                	jne    c000784d <f_mkfs+0x492>
c000780f:	be 01 00 00 00       	mov    esi,0x1
c0007814:	89 df                	mov    edi,ebx
c0007816:	66 01 f7             	add    di,si
c0007819:	75 07                	jne    c0007822 <f_mkfs+0x467>
c000781b:	83 fe 7f             	cmp    esi,0x7f
c000781e:	77 31                	ja     c0007851 <f_mkfs+0x496>
c0007820:	eb 16                	jmp    c0007838 <f_mkfs+0x47d>
c0007822:	83 ec 0c             	sub    esp,0xc
c0007825:	0f b7 ff             	movzx  edi,di
c0007828:	57                   	push   edi
c0007829:	e8 d9 0d 00 00       	call   c0008607 <ff_wtoupper>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	39 c7                	cmp    edi,eax
c0007833:	75 e6                	jne    c000781b <f_mkfs+0x460>
c0007835:	46                   	inc    esi
c0007836:	eb dc                	jmp    c0007814 <f_mkfs+0x459>
c0007838:	31 c0                	xor    eax,eax
c000783a:	89 d9                	mov    ecx,ebx
c000783c:	4e                   	dec    esi
c000783d:	0f 95 c0             	setne  al
c0007840:	43                   	inc    ebx
c0007841:	89 c7                	mov    edi,eax
c0007843:	eb 14                	jmp    c0007859 <f_mkfs+0x49e>
c0007845:	89 f1                	mov    ecx,esi
c0007847:	01 f3                	add    ebx,esi
c0007849:	31 ff                	xor    edi,edi
c000784b:	eb 0c                	jmp    c0007859 <f_mkfs+0x49e>
c000784d:	89 d3                	mov    ebx,edx
c000784f:	eb 08                	jmp    c0007859 <f_mkfs+0x49e>
c0007851:	bf 02 00 00 00       	mov    edi,0x2
c0007856:	83 c9 ff             	or     ecx,0xffffffff
c0007859:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000785d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007860:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007864:	0f b6 c1             	movzx  eax,cl
c0007867:	e8 3a a9 ff ff       	call   c00021a6 <xsum32>
c000786c:	66 c1 e9 08          	shr    cx,0x8
c0007870:	89 c2                	mov    edx,eax
c0007872:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007875:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007879:	0f b7 c1             	movzx  eax,cx
c000787c:	e8 25 a9 ff ff       	call   c00021a6 <xsum32>
c0007881:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007886:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000788a:	66 85 db             	test   bx,bx
c000788d:	74 1f                	je     c00078ae <f_mkfs+0x4f3>
c000788f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007892:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007899:	83 c0 02             	add    eax,0x2
c000789c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00078a2:	39 c2                	cmp    edx,eax
c00078a4:	74 08                	je     c00078ae <f_mkfs+0x4f3>
c00078a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a9:	e9 3f ff ff ff       	jmp    c00077ed <f_mkfs+0x432>
c00078ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078b1:	83 ec 0c             	sub    esp,0xc
c00078b4:	05 01 02 00 00       	add    eax,0x201
c00078b9:	c1 e8 09             	shr    eax,0x9
c00078bc:	50                   	push   eax
c00078bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00078c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078c9:	55                   	push   ebp
c00078ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078ce:	e8 a3 a3 ff ff       	call   c0001c76 <disk_write>
c00078d3:	83 c4 20             	add    esp,0x20
c00078d6:	85 c0                	test   eax,eax
c00078d8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00078db:	0f 85 8b 0b 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00078e1:	89 d0                	mov    eax,edx
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078e9:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ed:	66 85 db             	test   bx,bx
c00078f0:	74 04                	je     c00078f6 <f_mkfs+0x53b>
c00078f2:	31 c0                	xor    eax,eax
c00078f4:	eb b0                	jmp    c00078a6 <f_mkfs+0x4eb>
c00078f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fa:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078fe:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007902:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007908:	31 d2                	xor    edx,edx
c000790a:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007915:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007919:	c1 eb 09             	shr    ebx,0x9
c000791c:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007923:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007927:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000792b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000792f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007933:	8d 70 01             	lea    esi,[eax+0x1]
c0007936:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000793a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000793e:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007945:	31 d2                	xor    edx,edx
c0007947:	25 00 fe ff ff       	and    eax,0xfffffe00
c000794c:	89 04 24             	mov    DWORD PTR [esp],eax
c000794f:	89 c1                	mov    ecx,eax
c0007951:	89 e8                	mov    eax,ebp
c0007953:	e8 e7 a3 ff ff       	call   c0001d3f <mem_set>
c0007958:	31 c0                	xor    eax,eax
c000795a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000795d:	76 10                	jbe    c000796f <f_mkfs+0x5b4>
c000795f:	83 fe 07             	cmp    esi,0x7
c0007962:	76 0b                	jbe    c000796f <f_mkfs+0x5b4>
c0007964:	40                   	inc    eax
c0007965:	83 ee 08             	sub    esi,0x8
c0007968:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000796d:	eb eb                	jmp    c000795a <f_mkfs+0x59f>
c000796f:	b2 01                	mov    dl,0x1
c0007971:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007975:	85 f6                	test   esi,esi
c0007977:	74 0c                	je     c0007985 <f_mkfs+0x5ca>
c0007979:	39 04 24             	cmp    DWORD PTR [esp],eax
c000797c:	76 07                	jbe    c0007985 <f_mkfs+0x5ca>
c000797e:	08 11                	or     BYTE PTR [ecx],dl
c0007980:	4e                   	dec    esi
c0007981:	d1 e2                	shl    edx,1
c0007983:	eb f0                	jmp    c0007975 <f_mkfs+0x5ba>
c0007985:	89 df                	mov    edi,ebx
c0007987:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000798b:	76 04                	jbe    c0007991 <f_mkfs+0x5d6>
c000798d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007991:	83 ec 0c             	sub    esp,0xc
c0007994:	57                   	push   edi
c0007995:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000799d:	55                   	push   ebp
c000799e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079a2:	e8 cf a2 ff ff       	call   c0001c76 <disk_write>
c00079a7:	83 c4 20             	add    esp,0x20
c00079aa:	85 c0                	test   eax,eax
c00079ac:	0f 85 ba 0a 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00079b2:	31 d2                	xor    edx,edx
c00079b4:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00079b8:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00079bc:	29 fb                	sub    ebx,edi
c00079be:	0f 85 7a ff ff ff    	jne    c000793e <f_mkfs+0x583>
c00079c4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00079c8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00079d0:	31 f6                	xor    esi,esi
c00079d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079d6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00079d9:	31 d2                	xor    edx,edx
c00079db:	89 e8                	mov    eax,ebp
c00079dd:	e8 5d a3 ff ff       	call   c0001d3f <mem_set>
c00079e2:	31 c9                	xor    ecx,ecx
c00079e4:	85 db                	test   ebx,ebx
c00079e6:	75 40                	jne    c0007a28 <f_mkfs+0x66d>
c00079e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ed:	89 e8                	mov    eax,ebp
c00079ef:	bb 02 00 00 00       	mov    ebx,0x2
c00079f4:	e8 28 a3 ff ff       	call   c0001d21 <st_dword>
c00079f9:	8d 45 04             	lea    eax,[ebp+0x4]
c00079fc:	83 ca ff             	or     edx,0xffffffff
c00079ff:	e8 1d a3 ff ff       	call   c0001d21 <st_dword>
c0007a04:	b9 08 00 00 00       	mov    ecx,0x8
c0007a09:	eb 1d                	jmp    c0007a28 <f_mkfs+0x66d>
c0007a0b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a0e:	76 3b                	jbe    c0007a4b <f_mkfs+0x690>
c0007a10:	43                   	inc    ebx
c0007a11:	83 fe 01             	cmp    esi,0x1
c0007a14:	89 da                	mov    edx,ebx
c0007a16:	77 03                	ja     c0007a1b <f_mkfs+0x660>
c0007a18:	83 ca ff             	or     edx,0xffffffff
c0007a1b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007a1f:	4e                   	dec    esi
c0007a20:	e8 fc a2 ff ff       	call   c0001d21 <st_dword>
c0007a25:	83 c1 04             	add    ecx,0x4
c0007a28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a2c:	85 f6                	test   esi,esi
c0007a2e:	75 db                	jne    c0007a0b <f_mkfs+0x650>
c0007a30:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007a35:	77 14                	ja     c0007a4b <f_mkfs+0x690>
c0007a37:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007a3b:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a42:	85 f6                	test   esi,esi
c0007a44:	74 05                	je     c0007a4b <f_mkfs+0x690>
c0007a46:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a49:	77 dd                	ja     c0007a28 <f_mkfs+0x66d>
c0007a4b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a4f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a53:	39 cf                	cmp    edi,ecx
c0007a55:	76 02                	jbe    c0007a59 <f_mkfs+0x69e>
c0007a57:	89 cf                	mov    edi,ecx
c0007a59:	83 ec 0c             	sub    esp,0xc
c0007a5c:	57                   	push   edi
c0007a5d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a61:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a65:	55                   	push   ebp
c0007a66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a6a:	e8 07 a2 ff ff       	call   c0001c76 <disk_write>
c0007a6f:	83 c4 20             	add    esp,0x20
c0007a72:	85 c0                	test   eax,eax
c0007a74:	0f 85 f2 09 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007a7a:	31 d2                	xor    edx,edx
c0007a7c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a80:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a84:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a88:	0f 85 48 ff ff ff    	jne    c00079d6 <f_mkfs+0x61b>
c0007a8e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a91:	31 d2                	xor    edx,edx
c0007a93:	89 e8                	mov    eax,ebp
c0007a95:	31 ff                	xor    edi,edi
c0007a97:	e8 a3 a2 ff ff       	call   c0001d3f <mem_set>
c0007a9c:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a9f:	ba 02 00 00 00       	mov    edx,0x2
c0007aa4:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007aa8:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007aac:	e8 70 a2 ff ff       	call   c0001d21 <st_dword>
c0007ab1:	8d 45 38             	lea    eax,[ebp+0x38]
c0007ab4:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007ab8:	e8 64 a2 ff ff       	call   c0001d21 <st_dword>
c0007abd:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ac0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ac4:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ac8:	e8 54 a2 ff ff       	call   c0001d21 <st_dword>
c0007acd:	8d 45 54             	lea    eax,[ebp+0x54]
c0007ad0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007ad4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ad8:	83 c2 02             	add    edx,0x2
c0007adb:	e8 41 a2 ff ff       	call   c0001d21 <st_dword>
c0007ae0:	8d 45 58             	lea    eax,[ebp+0x58]
c0007ae3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007ae7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aeb:	e8 31 a2 ff ff       	call   c0001d21 <st_dword>
c0007af0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007af4:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007af9:	89 c6                	mov    esi,eax
c0007afb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aff:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b06:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007b0a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007b0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b11:	39 cb                	cmp    ebx,ecx
c0007b13:	76 02                	jbe    c0007b17 <f_mkfs+0x75c>
c0007b15:	89 cb                	mov    ebx,ecx
c0007b17:	83 ec 0c             	sub    esp,0xc
c0007b1a:	53                   	push   ebx
c0007b1b:	57                   	push   edi
c0007b1c:	56                   	push   esi
c0007b1d:	55                   	push   ebp
c0007b1e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b22:	e8 4f a1 ff ff       	call   c0001c76 <disk_write>
c0007b27:	83 c4 20             	add    esp,0x20
c0007b2a:	85 c0                	test   eax,eax
c0007b2c:	0f 85 3a 09 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007b32:	31 d2                	xor    edx,edx
c0007b34:	b9 00 02 00 00       	mov    ecx,0x200
c0007b39:	89 e8                	mov    eax,ebp
c0007b3b:	e8 ff a1 ff ff       	call   c0001d3f <mem_set>
c0007b40:	31 d2                	xor    edx,edx
c0007b42:	01 de                	add    esi,ebx
c0007b44:	11 d7                	adc    edi,edx
c0007b46:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b49:	75 bf                	jne    c0007b0a <f_mkfs+0x74f>
c0007b4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b4f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b53:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b5b:	b9 00 02 00 00       	mov    ecx,0x200
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	89 e8                	mov    eax,ebp
c0007b64:	e8 d6 a1 ff ff       	call   c0001d3f <mem_set>
c0007b69:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b6e:	ba e0 f7 01 c0       	mov    edx,0xc001f7e0
c0007b73:	89 e8                	mov    eax,ebp
c0007b75:	e8 b0 a1 ff ff       	call   c0001d2a <mem_cpy>
c0007b7a:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b81:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b85:	e8 9a a1 ff ff       	call   c0001d24 <st_qword>
c0007b8a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b8e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b95:	e8 8a a1 ff ff       	call   c0001d24 <st_qword>
c0007b9a:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b9d:	ba 20 00 00 00       	mov    edx,0x20
c0007ba2:	e8 7a a1 ff ff       	call   c0001d21 <st_dword>
c0007ba7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007bab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007baf:	e8 6d a1 ff ff       	call   c0001d21 <st_dword>
c0007bb4:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007bb8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007bbc:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007bc0:	e8 5c a1 ff ff       	call   c0001d21 <st_dword>
c0007bc5:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007bc8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007bcc:	e8 50 a1 ff ff       	call   c0001d21 <st_dword>
c0007bd1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007bd5:	8d 50 02             	lea    edx,[eax+0x2]
c0007bd8:	8d 45 60             	lea    eax,[ebp+0x60]
c0007bdb:	e8 41 a1 ff ff       	call   c0001d21 <st_dword>
c0007be0:	8d 45 64             	lea    eax,[ebp+0x64]
c0007be3:	ba 00 00 21 50       	mov    edx,0x50210000
c0007be8:	e8 34 a1 ff ff       	call   c0001d21 <st_dword>
c0007bed:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bf0:	ba 00 01 00 00       	mov    edx,0x100
c0007bf5:	e8 23 a1 ff ff       	call   c0001d1d <st_word>
c0007bfa:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bfe:	b8 0a 00 00 00       	mov    eax,0xa
c0007c03:	48                   	dec    eax
c0007c04:	74 05                	je     c0007c0b <f_mkfs+0x850>
c0007c06:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007c09:	eb f8                	jmp    c0007c03 <f_mkfs+0x848>
c0007c0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c0f:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007c13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c17:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007c1b:	74 05                	je     c0007c22 <f_mkfs+0x867>
c0007c1d:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007c20:	eb f5                	jmp    c0007c17 <f_mkfs+0x85c>
c0007c22:	8d 45 78             	lea    eax,[ebp+0x78]
c0007c25:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007c2a:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	e8 e6 a0 ff ff       	call   c0001d1d <st_word>
c0007c37:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007c3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c45:	e8 d3 a0 ff ff       	call   c0001d1d <st_word>
c0007c4a:	31 c9                	xor    ecx,ecx
c0007c4c:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c4f:	83 f8 01             	cmp    eax,0x1
c0007c52:	76 13                	jbe    c0007c67 <f_mkfs+0x8ac>
c0007c54:	83 f9 70             	cmp    ecx,0x70
c0007c57:	74 0e                	je     c0007c67 <f_mkfs+0x8ac>
c0007c59:	89 da                	mov    edx,ebx
c0007c5b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c60:	e8 41 a5 ff ff       	call   c00021a6 <xsum32>
c0007c65:	89 c3                	mov    ebx,eax
c0007c67:	41                   	inc    ecx
c0007c68:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c6e:	75 dc                	jne    c0007c4c <f_mkfs+0x891>
c0007c70:	89 f0                	mov    eax,esi
c0007c72:	89 fa                	mov    edx,edi
c0007c74:	83 c0 01             	add    eax,0x1
c0007c77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c7b:	83 d2 00             	adc    edx,0x0
c0007c7e:	83 ec 0c             	sub    esp,0xc
c0007c81:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c85:	6a 01                	push   0x1
c0007c87:	57                   	push   edi
c0007c88:	56                   	push   esi
c0007c89:	55                   	push   ebp
c0007c8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c8e:	e8 e3 9f ff ff       	call   c0001c76 <disk_write>
c0007c93:	83 c4 20             	add    esp,0x20
c0007c96:	85 c0                	test   eax,eax
c0007c98:	0f 85 ce 07 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007c9e:	31 d2                	xor    edx,edx
c0007ca0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ca5:	89 e8                	mov    eax,ebp
c0007ca7:	e8 93 a0 ff ff       	call   c0001d3f <mem_set>
c0007cac:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007cb1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cb4:	e8 64 a0 ff ff       	call   c0001d1d <st_word>
c0007cb9:	89 f0                	mov    eax,esi
c0007cbb:	89 fa                	mov    edx,edi
c0007cbd:	83 c0 09             	add    eax,0x9
c0007cc0:	83 d2 00             	adc    edx,0x0
c0007cc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cc6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007cca:	31 c9                	xor    ecx,ecx
c0007ccc:	41                   	inc    ecx
c0007ccd:	89 da                	mov    edx,ebx
c0007ccf:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cd4:	e8 cd a4 ff ff       	call   c00021a6 <xsum32>
c0007cd9:	89 c3                	mov    ebx,eax
c0007cdb:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ce1:	75 e9                	jne    c0007ccc <f_mkfs+0x911>
c0007ce3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ce7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ceb:	83 c0 01             	add    eax,0x1
c0007cee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cf2:	83 d2 00             	adc    edx,0x0
c0007cf5:	83 ec 0c             	sub    esp,0xc
c0007cf8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cfc:	6a 01                	push   0x1
c0007cfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007d02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007d06:	55                   	push   ebp
c0007d07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d0b:	e8 66 9f ff ff       	call   c0001c76 <disk_write>
c0007d10:	83 c4 20             	add    esp,0x20
c0007d13:	85 c0                	test   eax,eax
c0007d15:	0f 85 51 07 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007d1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d1f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007d23:	75 09                	jne    c0007d2e <f_mkfs+0x973>
c0007d25:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d28:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007d2c:	74 12                	je     c0007d40 <f_mkfs+0x985>
c0007d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007d36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007d3e:	eb 8a                	jmp    c0007cca <f_mkfs+0x90f>
c0007d40:	31 d2                	xor    edx,edx
c0007d42:	b9 00 02 00 00       	mov    ecx,0x200
c0007d47:	89 e8                	mov    eax,ebp
c0007d49:	e8 f1 9f ff ff       	call   c0001d3f <mem_set>
c0007d4e:	83 c6 0b             	add    esi,0xb
c0007d51:	83 d7 00             	adc    edi,0x0
c0007d54:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d58:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d5c:	31 c9                	xor    ecx,ecx
c0007d5e:	41                   	inc    ecx
c0007d5f:	89 da                	mov    edx,ebx
c0007d61:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d66:	e8 3b a4 ff ff       	call   c00021a6 <xsum32>
c0007d6b:	89 c3                	mov    ebx,eax
c0007d6d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d73:	75 e9                	jne    c0007d5e <f_mkfs+0x9a3>
c0007d75:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d78:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d7c:	83 c6 01             	add    esi,0x1
c0007d7f:	83 d7 00             	adc    edi,0x0
c0007d82:	83 ec 0c             	sub    esp,0xc
c0007d85:	6a 01                	push   0x1
c0007d87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d8f:	55                   	push   ebp
c0007d90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d94:	e8 dd 9e ff ff       	call   c0001c76 <disk_write>
c0007d99:	83 c4 20             	add    esp,0x20
c0007d9c:	85 c0                	test   eax,eax
c0007d9e:	0f 85 c8 06 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007da4:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007da8:	75 06                	jne    c0007db0 <f_mkfs+0x9f5>
c0007daa:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007dae:	74 09                	je     c0007db9 <f_mkfs+0x9fe>
c0007db0:	89 34 24             	mov    DWORD PTR [esp],esi
c0007db3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007db7:	eb a3                	jmp    c0007d5c <f_mkfs+0x9a1>
c0007db9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007dbd:	89 da                	mov    edx,ebx
c0007dbf:	01 e8                	add    eax,ebp
c0007dc1:	e8 5b 9f ff ff       	call   c0001d21 <st_dword>
c0007dc6:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007dcb:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007dd3:	75 e4                	jne    c0007db9 <f_mkfs+0x9fe>
c0007dd5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007dd8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ddc:	83 c6 02             	add    esi,0x2
c0007ddf:	83 d7 00             	adc    edi,0x0
c0007de2:	83 ec 0c             	sub    esp,0xc
c0007de5:	6a 01                	push   0x1
c0007de7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007deb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007def:	55                   	push   ebp
c0007df0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df4:	e8 7d 9e ff ff       	call   c0001c76 <disk_write>
c0007df9:	83 c4 20             	add    esp,0x20
c0007dfc:	85 c0                	test   eax,eax
c0007dfe:	0f 85 68 06 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007e04:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007e09:	74 0d                	je     c0007e18 <f_mkfs+0xa5d>
c0007e0b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007e13:	e9 43 fd ff ff       	jmp    c0007b5b <f_mkfs+0x7a0>
c0007e18:	b1 07                	mov    cl,0x7
c0007e1a:	e9 e3 05 00 00       	jmp    c0008402 <f_mkfs+0x1047>
c0007e1f:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007e24:	0f 85 4f 02 00 00    	jne    c0008079 <f_mkfs+0xcbe>
c0007e2a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e2f:	0f 86 22 02 00 00    	jbe    c0008057 <f_mkfs+0xc9c>
c0007e35:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e3a:	0f 85 81 06 00 00    	jne    c00084c1 <f_mkfs+0x1106>
c0007e40:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e47:	83 f8 40             	cmp    eax,0x40
c0007e4a:	0f 87 51 06 00 00    	ja     c00084a1 <f_mkfs+0x10e6>
c0007e50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e54:	85 ff                	test   edi,edi
c0007e56:	75 1c                	jne    c0007e74 <f_mkfs+0xab9>
c0007e58:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e5b:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c0007e60:	c1 e9 0c             	shr    ecx,0xc
c0007e63:	bf 01 00 00 00       	mov    edi,0x1
c0007e68:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e6b:	66 85 c0             	test   ax,ax
c0007e6e:	0f 85 95 01 00 00    	jne    c0008009 <f_mkfs+0xc4e>
c0007e74:	31 d2                	xor    edx,edx
c0007e76:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e79:	f7 f7                	div    edi
c0007e7b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e80:	0f 86 95 01 00 00    	jbe    c000801b <f_mkfs+0xc60>
c0007e86:	83 c0 02             	add    eax,0x2
c0007e89:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e8e:	01 c0                	add    eax,eax
c0007e90:	05 ff 01 00 00       	add    eax,0x1ff
c0007e95:	be 01 00 00 00       	mov    esi,0x1
c0007e9a:	c1 e8 09             	shr    eax,0x9
c0007e9d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007ea1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ea5:	c1 e0 05             	shl    eax,0x5
c0007ea8:	c1 e8 09             	shr    eax,0x9
c0007eab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007eaf:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007eb4:	31 d2                	xor    edx,edx
c0007eb6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007eba:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ebe:	89 f0                	mov    eax,esi
c0007ec0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ec4:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007ec8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007ecc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007ed0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007ed4:	31 d2                	xor    edx,edx
c0007ed6:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007edb:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007edf:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ee3:	31 db                	xor    ebx,ebx
c0007ee5:	01 c8                	add    eax,ecx
c0007ee7:	11 da                	adc    edx,ebx
c0007ee9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eed:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ef1:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ef5:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ef9:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007efd:	f7 da                	neg    edx
c0007eff:	21 d1                	and    ecx,edx
c0007f01:	29 d9                	sub    ecx,ebx
c0007f03:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f08:	0f 85 20 01 00 00    	jne    c000802e <f_mkfs+0xc73>
c0007f0e:	31 db                	xor    ebx,ebx
c0007f10:	01 ce                	add    esi,ecx
c0007f12:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007f16:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 f8                	mov    eax,edi
c0007f1e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007f22:	c1 e0 04             	shl    eax,0x4
c0007f25:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007f29:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007f2d:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007f31:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007f35:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007f38:	19 d3                	sbb    ebx,edx
c0007f3a:	0f 82 40 01 00 00    	jb     c0008080 <f_mkfs+0xcc5>
c0007f40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f43:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f47:	89 c8                	mov    eax,ecx
c0007f49:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f4e:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f52:	29 f0                	sub    eax,esi
c0007f54:	29 d0                	sub    eax,edx
c0007f56:	31 d2                	xor    edx,edx
c0007f58:	f7 f7                	div    edi
c0007f5a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f5f:	89 c3                	mov    ebx,eax
c0007f61:	0f 85 b8 fe ff ff    	jne    c0007e1f <f_mkfs+0xa64>
c0007f67:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f6c:	0f 87 1d 01 00 00    	ja     c000808f <f_mkfs+0xcd4>
c0007f72:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f77:	0f 85 03 01 00 00    	jne    c0008080 <f_mkfs+0xcc5>
c0007f7d:	83 ff 01             	cmp    edi,0x1
c0007f80:	0f 86 fa 00 00 00    	jbe    c0008080 <f_mkfs+0xcc5>
c0007f86:	d1 ef                	shr    edi,1
c0007f88:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f8c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f90:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f93:	85 db                	test   ebx,ebx
c0007f95:	75 2d                	jne    c0007fc4 <f_mkfs+0xc09>
c0007f97:	89 cb                	mov    ebx,ecx
c0007f99:	ba f0 f6 01 c0       	mov    edx,0xc001f6f0
c0007f9e:	c1 eb 11             	shr    ebx,0x11
c0007fa1:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007fa9:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007fac:	66 85 c0             	test   ax,ax
c0007faf:	74 11                	je     c0007fc2 <f_mkfs+0xc07>
c0007fb1:	83 c2 02             	add    edx,0x2
c0007fb4:	39 d8                	cmp    eax,ebx
c0007fb6:	77 0a                	ja     c0007fc2 <f_mkfs+0xc07>
c0007fb8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007fbc:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007fc0:	eb e7                	jmp    c0007fa9 <f_mkfs+0xbee>
c0007fc2:	31 db                	xor    ebx,ebx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	89 c8                	mov    eax,ecx
c0007fc8:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007fcc:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007fd3:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007fd8:	c1 ea 09             	shr    edx,0x9
c0007fdb:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fe0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fe4:	0f 87 96 00 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c0007fea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fee:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007ff6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007ffa:	be 20 00 00 00       	mov    esi,0x20
c0007fff:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0008004:	e9 a6 fe ff ff       	jmp    c0007eaf <f_mkfs+0xaf4>
c0008009:	83 c2 02             	add    edx,0x2
c000800c:	39 c8                	cmp    eax,ecx
c000800e:	0f 87 60 fe ff ff    	ja     c0007e74 <f_mkfs+0xab9>
c0008014:	01 ff                	add    edi,edi
c0008016:	e9 4d fe ff ff       	jmp    c0007e68 <f_mkfs+0xaad>
c000801b:	8d 04 40             	lea    eax,[eax+eax*2]
c000801e:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008023:	40                   	inc    eax
c0008024:	d1 e8                	shr    eax,1
c0008026:	83 c0 03             	add    eax,0x3
c0008029:	e9 62 fe ff ff       	jmp    c0007e90 <f_mkfs+0xad5>
c000802e:	31 d2                	xor    edx,edx
c0008030:	89 c8                	mov    eax,ecx
c0008032:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008036:	85 d2                	test   edx,edx
c0008038:	74 0c                	je     c0008046 <f_mkfs+0xc8b>
c000803a:	49                   	dec    ecx
c000803b:	46                   	inc    esi
c000803c:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008041:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008046:	89 c8                	mov    eax,ecx
c0008048:	31 d2                	xor    edx,edx
c000804a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000804e:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008052:	e9 c3 fe ff ff       	jmp    c0007f1a <f_mkfs+0xb5f>
c0008057:	3d f5 0f 00 00       	cmp    eax,0xff5
c000805c:	77 31                	ja     c000808f <f_mkfs+0xcd4>
c000805e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008063:	75 1b                	jne    c0008080 <f_mkfs+0xcc5>
c0008065:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000806c:	3d 80 00 00 00       	cmp    eax,0x80
c0008071:	0f 86 d9 fd ff ff    	jbe    c0007e50 <f_mkfs+0xa95>
c0008077:	eb 07                	jmp    c0008080 <f_mkfs+0xcc5>
c0008079:	3d f5 0f 00 00       	cmp    eax,0xff5
c000807e:	76 0a                	jbe    c000808a <f_mkfs+0xccf>
c0008080:	bb 0e 00 00 00       	mov    ebx,0xe
c0008085:	e9 ff 03 00 00       	jmp    c0008489 <f_mkfs+0x10ce>
c000808a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000808f:	31 d2                	xor    edx,edx
c0008091:	b9 00 02 00 00       	mov    ecx,0x200
c0008096:	89 e8                	mov    eax,ebp
c0008098:	e8 a2 9c ff ff       	call   c0001d3f <mem_set>
c000809d:	b9 0b 00 00 00       	mov    ecx,0xb
c00080a2:	ba 02 f8 01 c0       	mov    edx,0xc001f802
c00080a7:	89 e8                	mov    eax,ebp
c00080a9:	e8 7c 9c ff ff       	call   c0001d2a <mem_cpy>
c00080ae:	8d 45 0b             	lea    eax,[ebp+0xb]
c00080b1:	ba 00 02 00 00       	mov    edx,0x200
c00080b6:	e8 62 9c ff ff       	call   c0001d1d <st_word>
c00080bb:	89 f8                	mov    eax,edi
c00080bd:	0f b7 d6             	movzx  edx,si
c00080c0:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00080c3:	8d 45 0e             	lea    eax,[ebp+0xe]
c00080c6:	e8 52 9c ff ff       	call   c0001d1d <st_word>
c00080cb:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00080cf:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080d4:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00080d7:	75 08                	jne    c00080e1 <f_mkfs+0xd26>
c00080d9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080e1:	8d 45 11             	lea    eax,[ebp+0x11]
c00080e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080e8:	e8 30 9c ff ff       	call   c0001d1d <st_word>
c00080ed:	b8 ff ff 00 00       	mov    eax,0xffff
c00080f2:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080f6:	39 d0                	cmp    eax,edx
c00080f8:	b8 00 00 00 00       	mov    eax,0x0
c00080fd:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008101:	72 0a                	jb     c000810d <f_mkfs+0xd52>
c0008103:	8d 45 13             	lea    eax,[ebp+0x13]
c0008106:	e8 12 9c ff ff       	call   c0001d1d <st_word>
c000810b:	eb 08                	jmp    c0008115 <f_mkfs+0xd5a>
c000810d:	8d 45 20             	lea    eax,[ebp+0x20]
c0008110:	e8 0c 9c ff ff       	call   c0001d21 <st_dword>
c0008115:	8d 45 18             	lea    eax,[ebp+0x18]
c0008118:	ba 3f 00 00 00       	mov    edx,0x3f
c000811d:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008121:	e8 f7 9b ff ff       	call   c0001d1d <st_word>
c0008126:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008129:	ba ff 00 00 00       	mov    edx,0xff
c000812e:	e8 ea 9b ff ff       	call   c0001d1d <st_word>
c0008133:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008136:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000813a:	e8 e2 9b ff ff       	call   c0001d21 <st_dword>
c000813f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008144:	75 57                	jne    c000819d <f_mkfs+0xde2>
c0008146:	8d 45 43             	lea    eax,[ebp+0x43]
c0008149:	ba 00 00 21 50       	mov    edx,0x50210000
c000814e:	e8 ce 9b ff ff       	call   c0001d21 <st_dword>
c0008153:	8d 45 24             	lea    eax,[ebp+0x24]
c0008156:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000815a:	e8 c2 9b ff ff       	call   c0001d21 <st_dword>
c000815f:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008162:	ba 02 00 00 00       	mov    edx,0x2
c0008167:	e8 b5 9b ff ff       	call   c0001d21 <st_dword>
c000816c:	8d 45 30             	lea    eax,[ebp+0x30]
c000816f:	ba 01 00 00 00       	mov    edx,0x1
c0008174:	e8 a4 9b ff ff       	call   c0001d1d <st_word>
c0008179:	8d 45 32             	lea    eax,[ebp+0x32]
c000817c:	ba 06 00 00 00       	mov    edx,0x6
c0008181:	e8 97 9b ff ff       	call   c0001d1d <st_word>
c0008186:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000818a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000818e:	8d 45 47             	lea    eax,[ebp+0x47]
c0008191:	b9 13 00 00 00       	mov    ecx,0x13
c0008196:	ba 0e f8 01 c0       	mov    edx,0xc001f80e
c000819b:	eb 2f                	jmp    c00081cc <f_mkfs+0xe11>
c000819d:	8d 45 27             	lea    eax,[ebp+0x27]
c00081a0:	ba 00 00 21 50       	mov    edx,0x50210000
c00081a5:	e8 77 9b ff ff       	call   c0001d21 <st_dword>
c00081aa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00081af:	8d 45 16             	lea    eax,[ebp+0x16]
c00081b2:	e8 66 9b ff ff       	call   c0001d1d <st_word>
c00081b7:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00081bb:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00081bf:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00081c2:	b9 13 00 00 00       	mov    ecx,0x13
c00081c7:	ba 22 f8 01 c0       	mov    edx,0xc001f822
c00081cc:	e8 59 9b ff ff       	call   c0001d2a <mem_cpy>
c00081d1:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00081d7:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081dc:	89 f0                	mov    eax,esi
c00081de:	e8 3a 9b ff ff       	call   c0001d1d <st_word>
c00081e3:	83 ec 0c             	sub    esp,0xc
c00081e6:	6a 01                	push   0x1
c00081e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081f0:	55                   	push   ebp
c00081f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081f5:	e8 7c 9a ff ff       	call   c0001c76 <disk_write>
c00081fa:	83 c4 20             	add    esp,0x20
c00081fd:	85 c0                	test   eax,eax
c00081ff:	0f 85 67 02 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0008205:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000820a:	0f 85 b7 00 00 00    	jne    c00082c7 <f_mkfs+0xf0c>
c0008210:	83 ec 0c             	sub    esp,0xc
c0008213:	6a 01                	push   0x1
c0008215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008219:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000821d:	83 c0 06             	add    eax,0x6
c0008220:	83 d2 00             	adc    edx,0x0
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	55                   	push   ebp
c0008226:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000822a:	e8 47 9a ff ff       	call   c0001c76 <disk_write>
c000822f:	83 c4 20             	add    esp,0x20
c0008232:	b9 00 02 00 00       	mov    ecx,0x200
c0008237:	31 d2                	xor    edx,edx
c0008239:	89 e8                	mov    eax,ebp
c000823b:	e8 ff 9a ff ff       	call   c0001d3f <mem_set>
c0008240:	ba 52 52 61 41       	mov    edx,0x41615252
c0008245:	89 e8                	mov    eax,ebp
c0008247:	e8 d5 9a ff ff       	call   c0001d21 <st_dword>
c000824c:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008252:	ba 72 72 41 61       	mov    edx,0x61417272
c0008257:	e8 c5 9a ff ff       	call   c0001d21 <st_dword>
c000825c:	8d 53 ff             	lea    edx,[ebx-0x1]
c000825f:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008265:	e8 b7 9a ff ff       	call   c0001d21 <st_dword>
c000826a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008270:	ba 02 00 00 00       	mov    edx,0x2
c0008275:	e8 a7 9a ff ff       	call   c0001d21 <st_dword>
c000827a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000827f:	89 f0                	mov    eax,esi
c0008281:	e8 97 9a ff ff       	call   c0001d1d <st_word>
c0008286:	83 ec 0c             	sub    esp,0xc
c0008289:	6a 01                	push   0x1
c000828b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000828f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008293:	83 c0 07             	add    eax,0x7
c0008296:	83 d2 00             	adc    edx,0x0
c0008299:	52                   	push   edx
c000829a:	50                   	push   eax
c000829b:	55                   	push   ebp
c000829c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082a0:	e8 d1 99 ff ff       	call   c0001c76 <disk_write>
c00082a5:	83 c4 14             	add    esp,0x14
c00082a8:	6a 01                	push   0x1
c00082aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082b2:	83 c0 01             	add    eax,0x1
c00082b5:	83 d2 00             	adc    edx,0x0
c00082b8:	52                   	push   edx
c00082b9:	50                   	push   eax
c00082ba:	55                   	push   ebp
c00082bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082bf:	e8 b2 99 ff ff       	call   c0001c76 <disk_write>
c00082c4:	83 c4 20             	add    esp,0x20
c00082c7:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00082ce:	31 d2                	xor    edx,edx
c00082d0:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00082d6:	31 db                	xor    ebx,ebx
c00082d8:	89 e8                	mov    eax,ebp
c00082da:	e8 60 9a ff ff       	call   c0001d3f <mem_set>
c00082df:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082eb:	0f 94 c3             	sete   bl
c00082ee:	4b                   	dec    ebx
c00082ef:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082f5:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	75 21                	jne    c0008323 <f_mkfs+0xf68>
c0008302:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008307:	89 e8                	mov    eax,ebp
c0008309:	e8 13 9a ff ff       	call   c0001d21 <st_dword>
c000830e:	8d 45 04             	lea    eax,[ebp+0x4]
c0008311:	83 ca ff             	or     edx,0xffffffff
c0008314:	e8 08 9a ff ff       	call   c0001d21 <st_dword>
c0008319:	8d 45 08             	lea    eax,[ebp+0x8]
c000831c:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008321:	eb 04                	jmp    c0008327 <f_mkfs+0xf6c>
c0008323:	89 da                	mov    edx,ebx
c0008325:	89 e8                	mov    eax,ebp
c0008327:	e8 f5 99 ff ff       	call   c0001d21 <st_dword>
c000832c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008334:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008338:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000833c:	39 ce                	cmp    esi,ecx
c000833e:	76 02                	jbe    c0008342 <f_mkfs+0xf87>
c0008340:	89 ce                	mov    esi,ecx
c0008342:	83 ec 0c             	sub    esp,0xc
c0008345:	56                   	push   esi
c0008346:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834e:	55                   	push   ebp
c000834f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008353:	e8 1e 99 ff ff       	call   c0001c76 <disk_write>
c0008358:	83 c4 20             	add    esp,0x20
c000835b:	85 c0                	test   eax,eax
c000835d:	0f 85 09 01 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0008363:	31 d2                	xor    edx,edx
c0008365:	b9 00 02 00 00       	mov    ecx,0x200
c000836a:	89 e8                	mov    eax,ebp
c000836c:	e8 ce 99 ff ff       	call   c0001d3f <mem_set>
c0008371:	31 d2                	xor    edx,edx
c0008373:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008377:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000837b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000837f:	75 b3                	jne    c0008334 <f_mkfs+0xf79>
c0008381:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008384:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000838b:	40                   	inc    eax
c000838c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008390:	0f 87 65 ff ff ff    	ja     c00082fb <f_mkfs+0xf40>
c0008396:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000839b:	74 04                	je     c00083a1 <f_mkfs+0xfe6>
c000839d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00083a1:	89 fb                	mov    ebx,edi
c00083a3:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00083a7:	76 04                	jbe    c00083ad <f_mkfs+0xff2>
c00083a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00083ad:	83 ec 0c             	sub    esp,0xc
c00083b0:	53                   	push   ebx
c00083b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00083b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00083b9:	55                   	push   ebp
c00083ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083be:	e8 b3 98 ff ff       	call   c0001c76 <disk_write>
c00083c3:	83 c4 20             	add    esp,0x20
c00083c6:	85 c0                	test   eax,eax
c00083c8:	0f 85 9e 00 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00083ce:	31 d2                	xor    edx,edx
c00083d0:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00083d4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00083d8:	29 df                	sub    edi,ebx
c00083da:	75 c5                	jne    c00083a1 <f_mkfs+0xfe6>
c00083dc:	b1 0c                	mov    cl,0xc
c00083de:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e3:	74 1d                	je     c0008402 <f_mkfs+0x1047>
c00083e5:	b8 ff ff 00 00       	mov    eax,0xffff
c00083ea:	b1 06                	mov    cl,0x6
c00083ec:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083f0:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083f4:	72 0c                	jb     c0008402 <f_mkfs+0x1047>
c00083f6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083fb:	0f 94 c1             	sete   cl
c00083fe:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008402:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008407:	75 4c                	jne    c0008455 <f_mkfs+0x109a>
c0008409:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000840d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008411:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008418:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000841f:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000842a:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008435:	0f b6 c9             	movzx  ecx,cl
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	55                   	push   ebp
c000843c:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008443:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008447:	e8 2f c2 ff ff       	call   c000467b <create_partition>
c000844c:	83 c4 10             	add    esp,0x10
c000844f:	89 c3                	mov    ebx,eax
c0008451:	85 c0                	test   eax,eax
c0008453:	75 34                	jne    c0008489 <f_mkfs+0x10ce>
c0008455:	31 db                	xor    ebx,ebx
c0008457:	50                   	push   eax
c0008458:	6a 00                	push   0x0
c000845a:	6a 00                	push   0x0
c000845c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008460:	e8 27 98 ff ff       	call   c0001c8c <disk_ioctl>
c0008465:	83 c4 10             	add    esp,0x10
c0008468:	85 c0                	test   eax,eax
c000846a:	74 1d                	je     c0008489 <f_mkfs+0x10ce>
c000846c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008474:	75 0c                	jne    c0008482 <f_mkfs+0x10c7>
c0008476:	83 ec 0c             	sub    esp,0xc
c0008479:	55                   	push   ebp
c000847a:	e8 75 00 00 00       	call   c00084f4 <ff_memfree>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	bb 01 00 00 00       	mov    ebx,0x1
c0008487:	eb 48                	jmp    c00084d1 <f_mkfs+0x1116>
c0008489:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008491:	75 3e                	jne    c00084d1 <f_mkfs+0x1116>
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	55                   	push   ebp
c0008497:	e8 58 00 00 00       	call   c00084f4 <ff_memfree>
c000849c:	83 c4 10             	add    esp,0x10
c000849f:	eb 30                	jmp    c00084d1 <f_mkfs+0x1116>
c00084a1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084a6:	0f 85 eb fa ff ff    	jne    c0007f97 <f_mkfs+0xbdc>
c00084ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00084b0:	81 ff 80 00 00 00    	cmp    edi,0x80
c00084b6:	0f 86 b8 f9 ff ff    	jbe    c0007e74 <f_mkfs+0xab9>
c00084bc:	e9 bf fb ff ff       	jmp    c0008080 <f_mkfs+0xcc5>
c00084c1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084c6:	0f 85 c0 fa ff ff    	jne    c0007f8c <f_mkfs+0xbd1>
c00084cc:	e9 af fb ff ff       	jmp    c0008080 <f_mkfs+0xcc5>
c00084d1:	81 c4 9c 00 00 00    	add    esp,0x9c
c00084d7:	89 d8                	mov    eax,ebx
c00084d9:	5b                   	pop    ebx
c00084da:	5e                   	pop    esi
c00084db:	5f                   	pop    edi
c00084dc:	5d                   	pop    ebp
c00084dd:	c3                   	ret    

c00084de <ff_memalloc>:
c00084de:	83 ec 0c             	sub    esp,0xc
c00084e1:	83 ec 0c             	sub    esp,0xc
c00084e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e8:	e8 f8 4f 00 00       	call   c000d4e5 <malloc>
c00084ed:	83 c4 10             	add    esp,0x10
c00084f0:	83 c4 0c             	add    esp,0xc
c00084f3:	c3                   	ret    

c00084f4 <ff_memfree>:
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	83 ec 0c             	sub    esp,0xc
c00084fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084fe:	e8 f2 4f 00 00       	call   c000d4f5 <free>
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	90                   	nop
c0008507:	83 c4 0c             	add    esp,0xc
c000850a:	c3                   	ret    

c000850b <ff_uni2oem>:
c000850b:	83 ec 14             	sub    esp,0x14
c000850e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008512:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008516:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000851d:	c7 44 24 0c 40 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fb40
c0008525:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000852a:	77 0b                	ja     c0008537 <ff_uni2oem+0x2c>
c000852c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008530:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008535:	eb 5b                	jmp    c0008592 <ff_uni2oem+0x87>
c0008537:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000853f:	77 51                	ja     c0008592 <ff_uni2oem+0x87>
c0008541:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008547:	75 49                	jne    c0008592 <ff_uni2oem+0x87>
c0008549:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008550:	eb 0b                	jmp    c000855d <ff_uni2oem+0x52>
c0008552:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008557:	40                   	inc    eax
c0008558:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000855d:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008563:	77 1b                	ja     c0008580 <ff_uni2oem+0x75>
c0008565:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000856a:	01 c0                	add    eax,eax
c000856c:	89 c2                	mov    edx,eax
c000856e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008572:	01 d0                	add    eax,edx
c0008574:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008577:	0f b7 c0             	movzx  eax,ax
c000857a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000857e:	75 d2                	jne    c0008552 <ff_uni2oem+0x47>
c0008580:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008585:	83 e8 80             	sub    eax,0xffffff80
c0008588:	25 ff 00 00 00       	and    eax,0xff
c000858d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008592:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008597:	83 c4 14             	add    esp,0x14
c000859a:	c3                   	ret    

c000859b <ff_oem2uni>:
c000859b:	83 ec 18             	sub    esp,0x18
c000859e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00085a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085a6:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00085ab:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085af:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00085b6:	c7 44 24 10 40 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb40
c00085be:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00085c4:	77 0b                	ja     c00085d1 <ff_oem2uni+0x36>
c00085c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ca:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085cf:	eb 2d                	jmp    c00085fe <ff_oem2uni+0x63>
c00085d1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00085d7:	75 25                	jne    c00085fe <ff_oem2uni+0x63>
c00085d9:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085e0:	77 1c                	ja     c00085fe <ff_oem2uni+0x63>
c00085e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085e7:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085ec:	01 c0                	add    eax,eax
c00085ee:	89 c2                	mov    edx,eax
c00085f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f4:	01 d0                	add    eax,edx
c00085f6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085fe:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008603:	83 c4 18             	add    esp,0x18
c0008606:	c3                   	ret    

c0008607 <ff_wtoupper>:
c0008607:	83 ec 10             	sub    esp,0x10
c000860a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008612:	0f 87 3e 01 00 00    	ja     c0008756 <ff_wtoupper+0x14f>
c0008618:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000861c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008621:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008628:	77 07                	ja     c0008631 <ff_wtoupper+0x2a>
c000862a:	b8 40 f9 01 c0       	mov    eax,0xc001f940
c000862f:	eb 05                	jmp    c0008636 <ff_wtoupper+0x2f>
c0008631:	b8 80 f8 01 c0       	mov    eax,0xc001f880
c0008636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000863a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000863e:	8d 50 02             	lea    edx,[eax+0x2]
c0008641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008645:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008648:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000864d:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008653:	0f 84 f4 00 00 00    	je     c000874d <ff_wtoupper+0x146>
c0008659:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000865e:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008663:	0f 82 e4 00 00 00    	jb     c000874d <ff_wtoupper+0x146>
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	8d 50 02             	lea    edx,[eax+0x2]
c0008670:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008674:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008677:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000867c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008681:	66 c1 e8 08          	shr    ax,0x8
c0008685:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000868a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008691:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008696:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000869b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00086a0:	01 ca                	add    edx,ecx
c00086a2:	39 d0                	cmp    eax,edx
c00086a4:	0f 8d 86 00 00 00    	jge    c0008730 <ff_wtoupper+0x129>
c00086aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086af:	83 f8 08             	cmp    eax,0x8
c00086b2:	0f 87 94 00 00 00    	ja     c000874c <ff_wtoupper+0x145>
c00086b8:	8b 04 85 40 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe07c0]
c00086bf:	ff e0                	jmp    eax
c00086c1:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00086c6:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00086cb:	29 c2                	sub    edx,eax
c00086cd:	89 d0                	mov    eax,edx
c00086cf:	01 c0                	add    eax,eax
c00086d1:	89 c2                	mov    edx,eax
c00086d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086d7:	01 d0                	add    eax,edx
c00086d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086dc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086e1:	eb 4b                	jmp    c000872e <ff_wtoupper+0x127>
c00086e3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086e8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086ec:	83 e0 01             	and    eax,0x1
c00086ef:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086f4:	eb 38                	jmp    c000872e <ff_wtoupper+0x127>
c00086f6:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086fc:	eb 30                	jmp    c000872e <ff_wtoupper+0x127>
c00086fe:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008704:	eb 28                	jmp    c000872e <ff_wtoupper+0x127>
c0008706:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000870c:	eb 20                	jmp    c000872e <ff_wtoupper+0x127>
c000870e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008714:	eb 18                	jmp    c000872e <ff_wtoupper+0x127>
c0008716:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000871c:	eb 10                	jmp    c000872e <ff_wtoupper+0x127>
c000871e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008724:	eb 08                	jmp    c000872e <ff_wtoupper+0x127>
c0008726:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000872d:	90                   	nop
c000872e:	eb 1c                	jmp    c000874c <ff_wtoupper+0x145>
c0008730:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008736:	0f 85 fe fe ff ff    	jne    c000863a <ff_wtoupper+0x33>
c000873c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008741:	01 c0                	add    eax,eax
c0008743:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008747:	e9 ee fe ff ff       	jmp    c000863a <ff_wtoupper+0x33>
c000874c:	90                   	nop
c000874d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008752:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000875a:	83 c4 10             	add    esp,0x10
c000875d:	c3                   	ret    

c000875e <is_bad_src_ratio>:
c000875e:	83 ec 0c             	sub    esp,0xc
c0008761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008765:	89 04 24             	mov    DWORD PTR [esp],eax
c0008768:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000876c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008770:	dd 04 24             	fld    QWORD PTR [esp]
c0008773:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c0008779:	de d9                	fcompp 
c000877b:	df e0                	fnstsw ax
c000877d:	f6 c4 45             	test   ah,0x45
c0008780:	74 10                	je     c0008792 <is_bad_src_ratio+0x34>
c0008782:	dd 04 24             	fld    QWORD PTR [esp]
c0008785:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c000878b:	df e0                	fnstsw ax
c000878d:	f6 c4 45             	test   ah,0x45
c0008790:	75 07                	jne    c0008799 <is_bad_src_ratio+0x3b>
c0008792:	b8 01 00 00 00       	mov    eax,0x1
c0008797:	eb 05                	jmp    c000879e <is_bad_src_ratio+0x40>
c0008799:	b8 00 00 00 00       	mov    eax,0x0
c000879e:	83 c4 0c             	add    esp,0xc
c00087a1:	c3                   	ret    

c00087a2 <psrc_set_converter>:
c00087a2:	56                   	push   esi
c00087a3:	89 d6                	mov    esi,edx
c00087a5:	53                   	push   ebx
c00087a6:	89 c3                	mov    ebx,eax
c00087a8:	83 ec 0c             	sub    esp,0xc
c00087ab:	52                   	push   edx
c00087ac:	50                   	push   eax
c00087ad:	e8 33 24 00 00       	call   c000abe5 <sinc_set_converter>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	85 c0                	test   eax,eax
c00087b7:	74 25                	je     c00087de <psrc_set_converter+0x3c>
c00087b9:	50                   	push   eax
c00087ba:	50                   	push   eax
c00087bb:	56                   	push   esi
c00087bc:	53                   	push   ebx
c00087bd:	e8 39 29 00 00       	call   c000b0fb <zoh_set_converter>
c00087c2:	83 c4 10             	add    esp,0x10
c00087c5:	85 c0                	test   eax,eax
c00087c7:	74 15                	je     c00087de <psrc_set_converter+0x3c>
c00087c9:	51                   	push   ecx
c00087ca:	51                   	push   ecx
c00087cb:	56                   	push   esi
c00087cc:	53                   	push   ebx
c00087cd:	e8 10 0a 00 00       	call   c00091e2 <linear_set_converter>
c00087d2:	83 c4 10             	add    esp,0x10
c00087d5:	ba 0a 00 00 00       	mov    edx,0xa
c00087da:	85 c0                	test   eax,eax
c00087dc:	75 02                	jne    c00087e0 <psrc_set_converter+0x3e>
c00087de:	31 d2                	xor    edx,edx
c00087e0:	89 d0                	mov    eax,edx
c00087e2:	5a                   	pop    edx
c00087e3:	5b                   	pop    ebx
c00087e4:	5e                   	pop    esi
c00087e5:	c3                   	ret    

c00087e6 <src_delete>:
c00087e6:	53                   	push   ebx
c00087e7:	83 ec 08             	sub    esp,0x8
c00087ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ee:	85 db                	test   ebx,ebx
c00087f0:	74 29                	je     c000881b <src_delete+0x35>
c00087f2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f5:	85 c0                	test   eax,eax
c00087f7:	74 0c                	je     c0008805 <src_delete+0x1f>
c00087f9:	83 ec 0c             	sub    esp,0xc
c00087fc:	50                   	push   eax
c00087fd:	e8 f3 4c 00 00       	call   c000d4f5 <free>
c0008802:	83 c4 10             	add    esp,0x10
c0008805:	50                   	push   eax
c0008806:	6a 3c                	push   0x3c
c0008808:	6a 00                	push   0x0
c000880a:	53                   	push   ebx
c000880b:	e8 c8 7e ff ff       	call   c00006d8 <memset>
c0008810:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008813:	e8 dd 4c 00 00       	call   c000d4f5 <free>
c0008818:	83 c4 10             	add    esp,0x10
c000881b:	31 c0                	xor    eax,eax
c000881d:	83 c4 08             	add    esp,0x8
c0008820:	5b                   	pop    ebx
c0008821:	c3                   	ret    

c0008822 <src_process>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	53                   	push   ebx
c0008825:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008829:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000882d:	85 f6                	test   esi,esi
c000882f:	0f 84 e2 00 00 00    	je     c0008917 <src_process+0xf5>
c0008835:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008839:	0f 84 df 00 00 00    	je     c000891e <src_process+0xfc>
c000883f:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008843:	0f 84 d5 00 00 00    	je     c000891e <src_process+0xfc>
c0008849:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008850:	0f 85 cf 00 00 00    	jne    c0008925 <src_process+0x103>
c0008856:	85 db                	test   ebx,ebx
c0008858:	0f 84 ce 00 00 00    	je     c000892c <src_process+0x10a>
c000885e:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008861:	0f 84 cc 00 00 00    	je     c0008933 <src_process+0x111>
c0008867:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000886b:	0f 84 c2 00 00 00    	je     c0008933 <src_process+0x111>
c0008871:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008874:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008877:	e8 e2 fe ff ff       	call   c000875e <is_bad_src_ratio>
c000887c:	5a                   	pop    edx
c000887d:	85 c0                	test   eax,eax
c000887f:	59                   	pop    ecx
c0008880:	0f 85 b4 00 00 00    	jne    c000893a <src_process+0x118>
c0008886:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000888a:	79 07                	jns    c0008893 <src_process+0x71>
c000888c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008893:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008897:	79 07                	jns    c00088a0 <src_process+0x7e>
c0008899:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00088a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00088a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00088a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00088a8:	39 ca                	cmp    edx,ecx
c00088aa:	73 0b                	jae    c00088b7 <src_process+0x95>
c00088ac:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c00088b0:	8d 04 82             	lea    eax,[edx+eax*4]
c00088b3:	39 c1                	cmp    ecx,eax
c00088b5:	eb 09                	jmp    c00088c0 <src_process+0x9e>
c00088b7:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00088bb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00088be:	39 c2                	cmp    edx,eax
c00088c0:	72 7f                	jb     c0008941 <src_process+0x11f>
c00088c2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088c9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d0:	d9 05 20 01 02 c0    	fld    DWORD PTR ds:0xc0020120
c00088d6:	dc 1e                	fcomp  QWORD PTR [esi]
c00088d8:	df e0                	fnstsw ax
c00088da:	9e                   	sahf   
c00088db:	76 05                	jbe    c00088e2 <src_process+0xc0>
c00088dd:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00088e0:	dd 1e                	fstp   QWORD PTR [esi]
c00088e2:	83 ec 10             	sub    esp,0x10
c00088e5:	dd 06                	fld    QWORD PTR [esi]
c00088e7:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00088ea:	dd 1c 24             	fstp   QWORD PTR [esp]
c00088ed:	e8 6e 60 01 00       	call   c001e960 <fabs>
c00088f2:	83 c4 10             	add    esp,0x10
c00088f5:	dd 05 10 01 02 c0    	fld    QWORD PTR ds:0xc0020110
c00088fb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00088ff:	de d9                	fcompp 
c0008901:	df e0                	fnstsw ax
c0008903:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008907:	9e                   	sahf   
c0008908:	76 05                	jbe    c000890f <src_process+0xed>
c000890a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000890d:	eb 03                	jmp    c0008912 <src_process+0xf0>
c000890f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008912:	59                   	pop    ecx
c0008913:	5b                   	pop    ebx
c0008914:	5e                   	pop    esi
c0008915:	ff e0                	jmp    eax
c0008917:	b8 02 00 00 00       	mov    eax,0x2
c000891c:	eb 28                	jmp    c0008946 <src_process+0x124>
c000891e:	b8 07 00 00 00       	mov    eax,0x7
c0008923:	eb 21                	jmp    c0008946 <src_process+0x124>
c0008925:	b8 12 00 00 00       	mov    eax,0x12
c000892a:	eb 1a                	jmp    c0008946 <src_process+0x124>
c000892c:	b8 03 00 00 00       	mov    eax,0x3
c0008931:	eb 13                	jmp    c0008946 <src_process+0x124>
c0008933:	b8 04 00 00 00       	mov    eax,0x4
c0008938:	eb 0c                	jmp    c0008946 <src_process+0x124>
c000893a:	b8 06 00 00 00       	mov    eax,0x6
c000893f:	eb 05                	jmp    c0008946 <src_process+0x124>
c0008941:	b8 10 00 00 00       	mov    eax,0x10
c0008946:	5a                   	pop    edx
c0008947:	5b                   	pop    ebx
c0008948:	5e                   	pop    esi
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 4c             	sub    esp,0x4c
c0008951:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008955:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008959:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000895d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008961:	85 ff                	test   edi,edi
c0008963:	0f 8e 36 01 00 00    	jle    c0008a9f <src_callback_read+0x155>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 2e 01 00 00    	je     c0008a9f <src_callback_read+0x155>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 19 01 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 07 01 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00089a1:	50                   	push   eax
c00089a2:	e8 31 7d ff ff       	call   c00006d8 <memset>
c00089a7:	5e                   	pop    esi
c00089a8:	5d                   	pop    ebp
c00089a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089b1:	e8 a8 fd ff ff       	call   c000875e <is_bad_src_ratio>
c00089b6:	83 c4 10             	add    esp,0x10
c00089b9:	85 c0                	test   eax,eax
c00089bb:	74 0c                	je     c00089c9 <src_callback_read+0x7f>
c00089bd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089c4:	e9 d6 00 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c00089c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00089cd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00089d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00089d5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00089d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089dc:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00089e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089e4:	31 f6                	xor    esi,esi
c00089e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089e9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00089f2:	75 30                	jne    c0008a24 <src_callback_read+0xda>
c00089f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00089f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00089fc:	52                   	push   edx
c00089fd:	52                   	push   edx
c00089fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008a02:	50                   	push   eax
c0008a03:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a06:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008a0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008a15:	83 c4 10             	add    esp,0x10
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	75 08                	jne    c0008a24 <src_callback_read+0xda>
c0008a1c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008a24:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a2b:	50                   	push   eax
c0008a2c:	50                   	push   eax
c0008a2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008a31:	50                   	push   eax
c0008a32:	53                   	push   ebx
c0008a33:	e8 ea fd ff ff       	call   c0008822 <src_process>
c0008a38:	83 c4 10             	add    esp,0x10
c0008a3b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a42:	85 c0                	test   eax,eax
c0008a44:	75 42                	jne    c0008a88 <src_callback_read+0x13e>
c0008a46:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0008a4a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a4d:	89 e9                	mov    ecx,ebp
c0008a4f:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008a53:	0f af ca             	imul   ecx,edx
c0008a56:	c1 e1 02             	shl    ecx,0x2
c0008a59:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008a5d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008a61:	0f af d1             	imul   edx,ecx
c0008a64:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008a68:	c1 e2 02             	shl    edx,0x2
c0008a6b:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008a6f:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a72:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008a77:	75 04                	jne    c0008a7d <src_callback_read+0x133>
c0008a79:	85 c9                	test   ecx,ecx
c0008a7b:	74 0b                	je     c0008a88 <src_callback_read+0x13e>
c0008a7d:	39 d7                	cmp    edi,edx
c0008a7f:	7e 09                	jle    c0008a8a <src_callback_read+0x140>
c0008a81:	89 d6                	mov    esi,edx
c0008a83:	e9 65 ff ff ff       	jmp    c00089ed <src_callback_read+0xa3>
c0008a88:	89 f2                	mov    edx,esi
c0008a8a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008a8e:	85 c0                	test   eax,eax
c0008a90:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a93:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008a97:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a9a:	74 05                	je     c0008aa1 <src_callback_read+0x157>
c0008a9c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9f:	31 d2                	xor    edx,edx
c0008aa1:	83 c4 4c             	add    esp,0x4c
c0008aa4:	89 d0                	mov    eax,edx
c0008aa6:	5b                   	pop    ebx
c0008aa7:	5e                   	pop    esi
c0008aa8:	5f                   	pop    edi
c0008aa9:	5d                   	pop    ebp
c0008aaa:	c3                   	ret    

c0008aab <src_set_ratio>:
c0008aab:	53                   	push   ebx
c0008aac:	b8 02 00 00 00       	mov    eax,0x2
c0008ab1:	83 ec 08             	sub    esp,0x8
c0008ab4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab8:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008abc:	85 db                	test   ebx,ebx
c0008abe:	74 33                	je     c0008af3 <src_set_ratio+0x48>
c0008ac0:	b8 07 00 00 00       	mov    eax,0x7
c0008ac5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ac9:	74 2c                	je     c0008af7 <src_set_ratio+0x4c>
c0008acb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008acf:	74 2a                	je     c0008afb <src_set_ratio+0x50>
c0008ad1:	50                   	push   eax
c0008ad2:	50                   	push   eax
c0008ad3:	dd 14 24             	fst    QWORD PTR [esp]
c0008ad6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008ada:	e8 7f fc ff ff       	call   c000875e <is_bad_src_ratio>
c0008adf:	5a                   	pop    edx
c0008ae0:	85 c0                	test   eax,eax
c0008ae2:	59                   	pop    ecx
c0008ae3:	75 07                	jne    c0008aec <src_set_ratio+0x41>
c0008ae5:	dd 04 24             	fld    QWORD PTR [esp]
c0008ae8:	dd 1b                	fstp   QWORD PTR [ebx]
c0008aea:	eb 11                	jmp    c0008afd <src_set_ratio+0x52>
c0008aec:	b8 06 00 00 00       	mov    eax,0x6
c0008af1:	eb 0a                	jmp    c0008afd <src_set_ratio+0x52>
c0008af3:	dd d8                	fstp   st(0)
c0008af5:	eb 06                	jmp    c0008afd <src_set_ratio+0x52>
c0008af7:	dd d8                	fstp   st(0)
c0008af9:	eb 02                	jmp    c0008afd <src_set_ratio+0x52>
c0008afb:	dd d8                	fstp   st(0)
c0008afd:	83 c4 08             	add    esp,0x8
c0008b00:	5b                   	pop    ebx
c0008b01:	c3                   	ret    

c0008b02 <src_get_channels>:
c0008b02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b06:	b8 02 00 00 00       	mov    eax,0x2
c0008b0b:	85 d2                	test   edx,edx
c0008b0d:	74 14                	je     c0008b23 <src_get_channels+0x21>
c0008b0f:	b8 07 00 00 00       	mov    eax,0x7
c0008b14:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b18:	74 09                	je     c0008b23 <src_get_channels+0x21>
c0008b1a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b1e:	74 03                	je     c0008b23 <src_get_channels+0x21>
c0008b20:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b23:	c3                   	ret    

c0008b24 <src_reset>:
c0008b24:	53                   	push   ebx
c0008b25:	b8 02 00 00 00       	mov    eax,0x2
c0008b2a:	83 ec 08             	sub    esp,0x8
c0008b2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b31:	85 db                	test   ebx,ebx
c0008b33:	74 2e                	je     c0008b63 <src_reset+0x3f>
c0008b35:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	74 09                	je     c0008b45 <src_reset+0x21>
c0008b3c:	83 ec 0c             	sub    esp,0xc
c0008b3f:	53                   	push   ebx
c0008b40:	ff d0                	call   eax
c0008b42:	83 c4 10             	add    esp,0x10
c0008b45:	d9 ee                	fldz   
c0008b47:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b4e:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008b51:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b58:	dd 1b                	fstp   QWORD PTR [ebx]
c0008b5a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b61:	31 c0                	xor    eax,eax
c0008b63:	83 c4 08             	add    esp,0x8
c0008b66:	5b                   	pop    ebx
c0008b67:	c3                   	ret    

c0008b68 <src_new>:
c0008b68:	57                   	push   edi
c0008b69:	56                   	push   esi
c0008b6a:	53                   	push   ebx
c0008b6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b73:	85 f6                	test   esi,esi
c0008b75:	74 73                	je     c0008bea <src_new+0x82>
c0008b77:	85 ff                	test   edi,edi
c0008b79:	7f 08                	jg     c0008b83 <src_new+0x1b>
c0008b7b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b81:	eb 1e                	jmp    c0008ba1 <src_new+0x39>
c0008b83:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b89:	50                   	push   eax
c0008b8a:	50                   	push   eax
c0008b8b:	6a 3c                	push   0x3c
c0008b8d:	6a 01                	push   0x1
c0008b8f:	e8 81 49 00 00       	call   c000d515 <calloc>
c0008b94:	83 c4 10             	add    esp,0x10
c0008b97:	89 c3                	mov    ebx,eax
c0008b99:	85 c0                	test   eax,eax
c0008b9b:	75 10                	jne    c0008bad <src_new+0x45>
c0008b9d:	85 f6                	test   esi,esi
c0008b9f:	75 04                	jne    c0008ba5 <src_new+0x3d>
c0008ba1:	31 db                	xor    ebx,ebx
c0008ba3:	eb 4b                	jmp    c0008bf0 <src_new+0x88>
c0008ba5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bab:	eb 43                	jmp    c0008bf0 <src_new+0x88>
c0008bad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bb0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bbb:	e8 e2 fb ff ff       	call   c00087a2 <psrc_set_converter>
c0008bc0:	85 c0                	test   eax,eax
c0008bc2:	74 18                	je     c0008bdc <src_new+0x74>
c0008bc4:	85 f6                	test   esi,esi
c0008bc6:	74 06                	je     c0008bce <src_new+0x66>
c0008bc8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bce:	83 ec 0c             	sub    esp,0xc
c0008bd1:	53                   	push   ebx
c0008bd2:	31 db                	xor    ebx,ebx
c0008bd4:	e8 1c 49 00 00       	call   c000d4f5 <free>
c0008bd9:	83 c4 10             	add    esp,0x10
c0008bdc:	83 ec 0c             	sub    esp,0xc
c0008bdf:	53                   	push   ebx
c0008be0:	e8 3f ff ff ff       	call   c0008b24 <src_reset>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	eb 06                	jmp    c0008bf0 <src_new+0x88>
c0008bea:	85 ff                	test   edi,edi
c0008bec:	7f 9b                	jg     c0008b89 <src_new+0x21>
c0008bee:	eb b1                	jmp    c0008ba1 <src_new+0x39>
c0008bf0:	89 d8                	mov    eax,ebx
c0008bf2:	5b                   	pop    ebx
c0008bf3:	5e                   	pop    esi
c0008bf4:	5f                   	pop    edi
c0008bf5:	c3                   	ret    

c0008bf6 <src_callback_new>:
c0008bf6:	56                   	push   esi
c0008bf7:	53                   	push   ebx
c0008bf8:	53                   	push   ebx
c0008bf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c01:	85 f6                	test   esi,esi
c0008c03:	75 0e                	jne    c0008c13 <src_callback_new+0x1d>
c0008c05:	31 db                	xor    ebx,ebx
c0008c07:	85 c0                	test   eax,eax
c0008c09:	74 47                	je     c0008c52 <src_callback_new+0x5c>
c0008c0b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c11:	eb 3f                	jmp    c0008c52 <src_callback_new+0x5c>
c0008c13:	85 c0                	test   eax,eax
c0008c15:	74 06                	je     c0008c1d <src_callback_new+0x27>
c0008c17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1d:	51                   	push   ecx
c0008c1e:	50                   	push   eax
c0008c1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c27:	e8 3c ff ff ff       	call   c0008b68 <src_new>
c0008c2c:	83 c4 10             	add    esp,0x10
c0008c2f:	89 c3                	mov    ebx,eax
c0008c31:	85 c0                	test   eax,eax
c0008c33:	74 1d                	je     c0008c52 <src_callback_new+0x5c>
c0008c35:	83 ec 0c             	sub    esp,0xc
c0008c38:	50                   	push   eax
c0008c39:	e8 e6 fe ff ff       	call   c0008b24 <src_reset>
c0008c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c42:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c49:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c4c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4f:	83 c4 10             	add    esp,0x10
c0008c52:	89 d8                	mov    eax,ebx
c0008c54:	5a                   	pop    edx
c0008c55:	5b                   	pop    ebx
c0008c56:	5e                   	pop    esi
c0008c57:	c3                   	ret    

c0008c58 <src_get_name>:
c0008c58:	53                   	push   ebx
c0008c59:	83 ec 14             	sub    esp,0x14
c0008c5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c60:	53                   	push   ebx
c0008c61:	e8 59 1f 00 00       	call   c000abbf <sinc_get_name>
c0008c66:	83 c4 10             	add    esp,0x10
c0008c69:	85 c0                	test   eax,eax
c0008c6b:	75 1d                	jne    c0008c8a <src_get_name+0x32>
c0008c6d:	83 ec 0c             	sub    esp,0xc
c0008c70:	53                   	push   ebx
c0008c71:	e8 67 24 00 00       	call   c000b0dd <zoh_get_name>
c0008c76:	83 c4 10             	add    esp,0x10
c0008c79:	85 c0                	test   eax,eax
c0008c7b:	75 0d                	jne    c0008c8a <src_get_name+0x32>
c0008c7d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c81:	83 c4 08             	add    esp,0x8
c0008c84:	5b                   	pop    ebx
c0008c85:	e9 3a 05 00 00       	jmp    c00091c4 <linear_get_name>
c0008c8a:	83 c4 08             	add    esp,0x8
c0008c8d:	5b                   	pop    ebx
c0008c8e:	c3                   	ret    

c0008c8f <src_get_description>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 35 1f 00 00       	call   c000abd2 <sinc_get_description>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_description+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 3f 24 00 00       	call   c000b0ec <zoh_get_description>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_description+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 12 05 00 00       	jmp    c00091d3 <linear_get_description>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_version>:
c0008cc6:	b8 40 fc 01 c0       	mov    eax,0xc001fc40
c0008ccb:	c3                   	ret    

c0008ccc <src_is_valid_ratio>:
c0008ccc:	50                   	push   eax
c0008ccd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cd5:	e8 84 fa ff ff       	call   c000875e <is_bad_src_ratio>
c0008cda:	85 c0                	test   eax,eax
c0008cdc:	0f 94 c0             	sete   al
c0008cdf:	83 c4 0c             	add    esp,0xc
c0008ce2:	0f b6 c0             	movzx  eax,al
c0008ce5:	c3                   	ret    

c0008ce6 <src_error>:
c0008ce6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cea:	31 c0                	xor    eax,eax
c0008cec:	85 d2                	test   edx,edx
c0008cee:	74 03                	je     c0008cf3 <src_error+0xd>
c0008cf0:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008cf3:	c3                   	ret    

c0008cf4 <src_strerror>:
c0008cf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cf8:	31 c0                	xor    eax,eax
c0008cfa:	83 fa 17             	cmp    edx,0x17
c0008cfd:	77 07                	ja     c0008d06 <src_strerror+0x12>
c0008cff:	8b 04 95 a0 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff60]
c0008d06:	c3                   	ret    

c0008d07 <src_simple>:
c0008d07:	56                   	push   esi
c0008d08:	53                   	push   ebx
c0008d09:	83 ec 18             	sub    esp,0x18
c0008d0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d10:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d14:	50                   	push   eax
c0008d15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d1d:	e8 46 fe ff ff       	call   c0008b68 <src_new>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	85 c0                	test   eax,eax
c0008d27:	75 06                	jne    c0008d2f <src_simple+0x28>
c0008d29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d2d:	eb 25                	jmp    c0008d54 <src_simple+0x4d>
c0008d2f:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d36:	89 c3                	mov    ebx,eax
c0008d38:	50                   	push   eax
c0008d39:	50                   	push   eax
c0008d3a:	56                   	push   esi
c0008d3b:	53                   	push   ebx
c0008d3c:	e8 e1 fa ff ff       	call   c0008822 <src_process>
c0008d41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d48:	e8 99 fa ff ff       	call   c00087e6 <src_delete>
c0008d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	83 c4 14             	add    esp,0x14
c0008d57:	5b                   	pop    ebx
c0008d58:	5e                   	pop    esi
c0008d59:	c3                   	ret    

c0008d5a <src_short_to_float_array>:
c0008d5a:	83 ec 0c             	sub    esp,0xc
c0008d5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008d69:	85 c0                	test   eax,eax
c0008d6b:	74 0f                	je     c0008d7c <src_short_to_float_array+0x22>
c0008d6d:	48                   	dec    eax
c0008d6e:	d9 05 24 01 02 c0    	fld    DWORD PTR ds:0xc0020124
c0008d74:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008d77:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008d7a:	eb ed                	jmp    c0008d69 <src_short_to_float_array+0xf>
c0008d7c:	83 c4 0c             	add    esp,0xc
c0008d7f:	c3                   	ret    

c0008d80 <src_float_to_short_array>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	52                   	push   edx
c0008d83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008d87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008d8b:	85 db                	test   ebx,ebx
c0008d8d:	74 51                	je     c0008de0 <src_float_to_short_array+0x60>
c0008d8f:	4b                   	dec    ebx
c0008d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d94:	d9 05 28 01 02 c0    	fld    DWORD PTR ds:0xc0020128
c0008d9a:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008d9d:	dc 15 18 01 02 c0    	fcom   QWORD PTR ds:0xc0020118
c0008da3:	df e0                	fnstsw ax
c0008da5:	9e                   	sahf   
c0008da6:	72 0a                	jb     c0008db2 <src_float_to_short_array+0x32>
c0008da8:	dd d8                	fstp   st(0)
c0008daa:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008db0:	eb d9                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008db2:	d9 05 2c 01 02 c0    	fld    DWORD PTR ds:0xc002012c
c0008db8:	d8 d9                	fcomp  st(1)
c0008dba:	df e0                	fnstsw ax
c0008dbc:	9e                   	sahf   
c0008dbd:	72 0a                	jb     c0008dc9 <src_float_to_short_array+0x49>
c0008dbf:	dd d8                	fstp   st(0)
c0008dc1:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008dc7:	eb c2                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008dc9:	83 ec 10             	sub    esp,0x10
c0008dcc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dcf:	e8 ac 5b 01 00       	call   c001e980 <lrint>
c0008dd4:	83 c4 10             	add    esp,0x10
c0008dd7:	c1 f8 10             	sar    eax,0x10
c0008dda:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008dde:	eb ab                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008de0:	58                   	pop    eax
c0008de1:	5b                   	pop    ebx
c0008de2:	5e                   	pop    esi
c0008de3:	c3                   	ret    

c0008de4 <src_int_to_float_array>:
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008deb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008def:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 0f                	je     c0008e06 <src_int_to_float_array+0x22>
c0008df7:	48                   	dec    eax
c0008df8:	d9 05 30 01 02 c0    	fld    DWORD PTR ds:0xc0020130
c0008dfe:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008e01:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008e04:	eb ed                	jmp    c0008df3 <src_int_to_float_array+0xf>
c0008e06:	83 c4 0c             	add    esp,0xc
c0008e09:	c3                   	ret    

c0008e0a <src_float_to_int_array>:
c0008e0a:	56                   	push   esi
c0008e0b:	53                   	push   ebx
c0008e0c:	52                   	push   edx
c0008e0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008e11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008e15:	85 db                	test   ebx,ebx
c0008e17:	74 4f                	je     c0008e68 <src_float_to_int_array+0x5e>
c0008e19:	4b                   	dec    ebx
c0008e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e1e:	d9 05 28 01 02 c0    	fld    DWORD PTR ds:0xc0020128
c0008e24:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008e27:	dc 15 18 01 02 c0    	fcom   QWORD PTR ds:0xc0020118
c0008e2d:	df e0                	fnstsw ax
c0008e2f:	9e                   	sahf   
c0008e30:	72 0b                	jb     c0008e3d <src_float_to_int_array+0x33>
c0008e32:	dd d8                	fstp   st(0)
c0008e34:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008e3b:	eb d8                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e3d:	d9 05 2c 01 02 c0    	fld    DWORD PTR ds:0xc002012c
c0008e43:	d8 d9                	fcomp  st(1)
c0008e45:	df e0                	fnstsw ax
c0008e47:	9e                   	sahf   
c0008e48:	72 0b                	jb     c0008e55 <src_float_to_int_array+0x4b>
c0008e4a:	dd d8                	fstp   st(0)
c0008e4c:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008e53:	eb c0                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e55:	83 ec 10             	sub    esp,0x10
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	e8 20 5b 01 00       	call   c001e980 <lrint>
c0008e60:	83 c4 10             	add    esp,0x10
c0008e63:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008e66:	eb ad                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e68:	58                   	pop    eax
c0008e69:	5b                   	pop    ebx
c0008e6a:	5e                   	pop    esi
c0008e6b:	c3                   	ret    

c0008e6c <is_bad_src_ratio>:
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e73:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008e7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e7e:	dd 04 24             	fld    QWORD PTR [esp]
c0008e81:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c0008e87:	de d9                	fcompp 
c0008e89:	df e0                	fnstsw ax
c0008e8b:	f6 c4 45             	test   ah,0x45
c0008e8e:	74 10                	je     c0008ea0 <is_bad_src_ratio+0x34>
c0008e90:	dd 04 24             	fld    QWORD PTR [esp]
c0008e93:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c0008e99:	df e0                	fnstsw ax
c0008e9b:	f6 c4 45             	test   ah,0x45
c0008e9e:	75 07                	jne    c0008ea7 <is_bad_src_ratio+0x3b>
c0008ea0:	b8 01 00 00 00       	mov    eax,0x1
c0008ea5:	eb 05                	jmp    c0008eac <is_bad_src_ratio+0x40>
c0008ea7:	b8 00 00 00 00       	mov    eax,0x0
c0008eac:	83 c4 0c             	add    esp,0xc
c0008eaf:	c3                   	ret    

c0008eb0 <fmod_one>:
c0008eb0:	83 ec 2c             	sub    esp,0x2c
c0008eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008eb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ec3:	83 ec 08             	sub    esp,0x8
c0008ec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ece:	e8 ad 5a 01 00       	call   c001e980 <lrint>
c0008ed3:	83 c4 10             	add    esp,0x10
c0008ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008eda:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008ede:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ee2:	de e1                	fsubrp st(1),st
c0008ee4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008ee8:	d9 ee                	fldz   
c0008eea:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008eee:	df e0                	fnstsw ax
c0008ef0:	f6 c4 45             	test   ah,0x45
c0008ef3:	75 0a                	jne    c0008eff <fmod_one+0x4f>
c0008ef5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ef9:	d9 e8                	fld1   
c0008efb:	de c1                	faddp  st(1),st
c0008efd:	eb 04                	jmp    c0008f03 <fmod_one+0x53>
c0008eff:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008f03:	83 c4 2c             	add    esp,0x2c
c0008f06:	c3                   	ret    

c0008f07 <linear_vari_process>:
c0008f07:	55                   	push   ebp
c0008f08:	57                   	push   edi
c0008f09:	56                   	push   esi
c0008f0a:	53                   	push   ebx
c0008f0b:	83 ec 2c             	sub    esp,0x2c
c0008f0e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008f12:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008f16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008f1e:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008f22:	0f 8e 5e 02 00 00    	jle    c0009186 <linear_vari_process+0x27f>
c0008f28:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008f2b:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008f33:	85 db                	test   ebx,ebx
c0008f35:	0f 84 4b 02 00 00    	je     c0009186 <linear_vari_process+0x27f>
c0008f3b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008f3e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008f42:	74 19                	je     c0008f5d <linear_vari_process+0x56>
c0008f44:	31 d2                	xor    edx,edx
c0008f46:	39 c2                	cmp    edx,eax
c0008f48:	7d 0c                	jge    c0008f56 <linear_vari_process+0x4f>
c0008f4a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008f4c:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008f4f:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f53:	42                   	inc    edx
c0008f54:	eb f0                	jmp    c0008f46 <linear_vari_process+0x3f>
c0008f56:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008f5d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008f60:	0f af d0             	imul   edx,eax
c0008f63:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f66:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f6a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f71:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f74:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f7b:	dd 07                	fld    QWORD PTR [edi]
c0008f7d:	dd 14 24             	fst    QWORD PTR [esp]
c0008f80:	50                   	push   eax
c0008f81:	50                   	push   eax
c0008f82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008f85:	e8 e2 fe ff ff       	call   c0008e6c <is_bad_src_ratio>
c0008f8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f8e:	5a                   	pop    edx
c0008f8f:	59                   	pop    ecx
c0008f90:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008f95:	0f 85 e3 01 00 00    	jne    c000917e <linear_vari_process+0x277>
c0008f9b:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008f9e:	d9 e8                	fld1   
c0008fa0:	d8 d1                	fcom   st(1)
c0008fa2:	df e0                	fnstsw ax
c0008fa4:	9e                   	sahf   
c0008fa5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008fa9:	0f 86 99 00 00 00    	jbe    c0009048 <linear_vari_process+0x141>
c0008faf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008fb2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008fb5:	0f 8d 8d 00 00 00    	jge    c0009048 <linear_vari_process+0x141>
c0008fbb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008fbf:	d8 c1                	fadd   st,st(1)
c0008fc1:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008fc4:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008fc7:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008fca:	df e0                	fnstsw ax
c0008fcc:	9e                   	sahf   
c0008fcd:	73 79                	jae    c0009048 <linear_vari_process+0x141>
c0008fcf:	85 d2                	test   edx,edx
c0008fd1:	7e 38                	jle    c000900b <linear_vari_process+0x104>
c0008fd3:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008fd7:	83 ec 10             	sub    esp,0x10
c0008fda:	dd 07                	fld    QWORD PTR [edi]
c0008fdc:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008fdf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008fe2:	e8 79 59 01 00       	call   c001e960 <fabs>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c0008ff0:	df e0                	fnstsw ax
c0008ff2:	9e                   	sahf   
c0008ff3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008ff7:	76 12                	jbe    c000900b <linear_vari_process+0x104>
c0008ff9:	dd 07                	fld    QWORD PTR [edi]
c0008ffb:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ffe:	d8 e1                	fsub   st,st(1)
c0009000:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0009003:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0009006:	de c1                	faddp  st(1),st
c0009008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000900b:	31 c0                	xor    eax,eax
c000900d:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0009010:	7e 1f                	jle    c0009031 <linear_vari_process+0x12a>
c0009012:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0009016:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009018:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000901b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000901f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009022:	d8 e1                	fsub   st,st(1)
c0009024:	40                   	inc    eax
c0009025:	d8 ca                	fmul   st,st(2)
c0009027:	de c1                	faddp  st(1),st
c0009029:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000902c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000902f:	eb dc                	jmp    c000900d <linear_vari_process+0x106>
c0009031:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009035:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009038:	de c1                	faddp  st(1),st
c000903a:	e9 5f ff ff ff       	jmp    c0008f9e <linear_vari_process+0x97>
c000903f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009043:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009046:	de c1                	faddp  st(1),st
c0009048:	83 ec 10             	sub    esp,0x10
c000904b:	dd 14 24             	fst    QWORD PTR [esp]
c000904e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009052:	e8 59 fe ff ff       	call   c0008eb0 <fmod_one>
c0009057:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000905a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000905e:	d8 e1                	fsub   st,st(1)
c0009060:	d9 c9                	fxch   st(1)
c0009062:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009066:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009069:	e8 12 59 01 00       	call   c001e980 <lrint>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	0f af e8             	imul   ebp,eax
c0009074:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009078:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000907b:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000907e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0009081:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0009084:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0009087:	0f 8d 97 00 00 00    	jge    c0009124 <linear_vari_process+0x21d>
c000908d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009091:	d9 c0                	fld    st(0)
c0009093:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0009096:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000909a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000909e:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c00090a2:	de d9                	fcompp 
c00090a4:	df e0                	fnstsw ax
c00090a6:	9e                   	sahf   
c00090a7:	76 7b                	jbe    c0009124 <linear_vari_process+0x21d>
c00090a9:	85 ed                	test   ebp,ebp
c00090ab:	7e 38                	jle    c00090e5 <linear_vari_process+0x1de>
c00090ad:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090b1:	83 ec 10             	sub    esp,0x10
c00090b4:	dd 07                	fld    QWORD PTR [edi]
c00090b6:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c00090b9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090bc:	e8 9f 58 01 00       	call   c001e960 <fabs>
c00090c1:	83 c4 10             	add    esp,0x10
c00090c4:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c00090ca:	df e0                	fnstsw ax
c00090cc:	9e                   	sahf   
c00090cd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00090d1:	76 12                	jbe    c00090e5 <linear_vari_process+0x1de>
c00090d3:	dd 07                	fld    QWORD PTR [edi]
c00090d5:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c00090d8:	d8 e1                	fsub   st,st(1)
c00090da:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c00090dd:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c00090e0:	de c1                	faddp  st(1),st
c00090e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090e5:	31 c0                	xor    eax,eax
c00090e7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00090ea:	39 c2                	cmp    edx,eax
c00090ec:	0f 8e 4d ff ff ff    	jle    c000903f <linear_vari_process+0x138>
c00090f2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00090f4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00090f7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00090fb:	89 e9                	mov    ecx,ebp
c00090fd:	01 c5                	add    ebp,eax
c00090ff:	29 d1                	sub    ecx,edx
c0009101:	89 ca                	mov    edx,ecx
c0009103:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009107:	01 c2                	add    edx,eax
c0009109:	40                   	inc    eax
c000910a:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000910d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0009110:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0009113:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009116:	d8 e1                	fsub   st,st(1)
c0009118:	d8 ca                	fmul   st,st(2)
c000911a:	de c1                	faddp  st(1),st
c000911c:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c000911f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009122:	eb c3                	jmp    c00090e7 <linear_vari_process+0x1e0>
c0009124:	39 d1                	cmp    ecx,edx
c0009126:	7d 13                	jge    c000913b <linear_vari_process+0x234>
c0009128:	89 d0                	mov    eax,edx
c000912a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000912d:	29 c8                	sub    eax,ecx
c000912f:	99                   	cdq    
c0009130:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009137:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c000913b:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000913e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009141:	85 c0                	test   eax,eax
c0009143:	7f 1b                	jg     c0009160 <linear_vari_process+0x259>
c0009145:	dd 04 24             	fld    QWORD PTR [esp]
c0009148:	dd 1f                	fstp   QWORD PTR [edi]
c000914a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000914d:	99                   	cdq    
c000914e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009151:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009154:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009157:	99                   	cdq    
c0009158:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000915b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000915e:	eb 26                	jmp    c0009186 <linear_vari_process+0x27f>
c0009160:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009163:	31 d2                	xor    edx,edx
c0009165:	29 c8                	sub    eax,ecx
c0009167:	c1 e0 02             	shl    eax,0x2
c000916a:	39 d1                	cmp    ecx,edx
c000916c:	7e d7                	jle    c0009145 <linear_vari_process+0x23e>
c000916e:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009170:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0009174:	83 c0 04             	add    eax,0x4
c0009177:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000917b:	42                   	inc    edx
c000917c:	eb ec                	jmp    c000916a <linear_vari_process+0x263>
c000917e:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0009186:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000918a:	83 c4 2c             	add    esp,0x2c
c000918d:	5b                   	pop    ebx
c000918e:	5e                   	pop    esi
c000918f:	5f                   	pop    edi
c0009190:	5d                   	pop    ebp
c0009191:	c3                   	ret    

c0009192 <linear_reset>:
c0009192:	83 ec 0c             	sub    esp,0xc
c0009195:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009199:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000919c:	85 c0                	test   eax,eax
c000919e:	74 20                	je     c00091c0 <linear_reset+0x2e>
c00091a0:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00091a3:	83 c0 1c             	add    eax,0x1c
c00091a6:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00091a9:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00091b0:	c1 e2 02             	shl    edx,0x2
c00091b3:	51                   	push   ecx
c00091b4:	52                   	push   edx
c00091b5:	6a 00                	push   0x0
c00091b7:	50                   	push   eax
c00091b8:	e8 1b 75 ff ff       	call   c00006d8 <memset>
c00091bd:	83 c4 10             	add    esp,0x10
c00091c0:	83 c4 0c             	add    esp,0xc
c00091c3:	c3                   	ret    

c00091c4 <linear_get_name>:
c00091c4:	31 c0                	xor    eax,eax
c00091c6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091cb:	75 05                	jne    c00091d2 <linear_get_name+0xe>
c00091cd:	b8 34 01 02 c0       	mov    eax,0xc0020134
c00091d2:	c3                   	ret    

c00091d3 <linear_get_description>:
c00091d3:	31 c0                	xor    eax,eax
c00091d5:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091da:	75 05                	jne    c00091e1 <linear_get_description+0xe>
c00091dc:	b8 48 01 02 c0       	mov    eax,0xc0020148
c00091e1:	c3                   	ret    

c00091e2 <linear_set_converter>:
c00091e2:	53                   	push   ebx
c00091e3:	b8 0a 00 00 00       	mov    eax,0xa
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091ef:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c00091f4:	75 6e                	jne    c0009264 <linear_set_converter+0x82>
c00091f6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00091f9:	85 c0                	test   eax,eax
c00091fb:	74 13                	je     c0009210 <linear_set_converter+0x2e>
c00091fd:	83 ec 0c             	sub    esp,0xc
c0009200:	50                   	push   eax
c0009201:	e8 ef 42 00 00       	call   c000d4f5 <free>
c0009206:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000920d:	83 c4 10             	add    esp,0x10
c0009210:	50                   	push   eax
c0009211:	50                   	push   eax
c0009212:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009215:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000921c:	50                   	push   eax
c000921d:	6a 01                	push   0x1
c000921f:	e8 f1 42 00 00       	call   c000d515 <calloc>
c0009224:	83 c4 10             	add    esp,0x10
c0009227:	89 c2                	mov    edx,eax
c0009229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000922c:	85 d2                	test   edx,edx
c000922e:	b8 01 00 00 00       	mov    eax,0x1
c0009233:	74 2f                	je     c0009264 <linear_set_converter+0x82>
c0009235:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000923b:	83 ec 0c             	sub    esp,0xc
c000923e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009241:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009244:	c7 43 24 07 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008f07
c000924b:	c7 43 20 07 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008f07
c0009252:	c7 43 28 92 91 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009192
c0009259:	53                   	push   ebx
c000925a:	e8 33 ff ff ff       	call   c0009192 <linear_reset>
c000925f:	83 c4 10             	add    esp,0x10
c0009262:	31 c0                	xor    eax,eax
c0009264:	83 c4 08             	add    esp,0x8
c0009267:	5b                   	pop    ebx
c0009268:	c3                   	ret    

c0009269 <is_bad_src_ratio>:
c0009269:	83 ec 0c             	sub    esp,0xc
c000926c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009270:	89 04 24             	mov    DWORD PTR [esp],eax
c0009273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009277:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000927b:	dd 04 24             	fld    QWORD PTR [esp]
c000927e:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c0009284:	de d9                	fcompp 
c0009286:	df e0                	fnstsw ax
c0009288:	f6 c4 45             	test   ah,0x45
c000928b:	74 10                	je     c000929d <is_bad_src_ratio+0x34>
c000928d:	dd 04 24             	fld    QWORD PTR [esp]
c0009290:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c0009296:	df e0                	fnstsw ax
c0009298:	f6 c4 45             	test   ah,0x45
c000929b:	75 07                	jne    c00092a4 <is_bad_src_ratio+0x3b>
c000929d:	b8 01 00 00 00       	mov    eax,0x1
c00092a2:	eb 05                	jmp    c00092a9 <is_bad_src_ratio+0x40>
c00092a4:	b8 00 00 00 00       	mov    eax,0x0
c00092a9:	83 c4 0c             	add    esp,0xc
c00092ac:	c3                   	ret    

c00092ad <int_to_fp>:
c00092ad:	c1 e0 0c             	shl    eax,0xc
c00092b0:	c3                   	ret    

c00092b1 <fp_to_int>:
c00092b1:	c1 f8 0c             	sar    eax,0xc
c00092b4:	c3                   	ret    

c00092b5 <fp_fraction_part>:
c00092b5:	25 ff 0f 00 00       	and    eax,0xfff
c00092ba:	c3                   	ret    

c00092bb <fp_to_double>:
c00092bb:	83 ec 0c             	sub    esp,0xc
c00092be:	e8 f2 ff ff ff       	call   c00092b5 <fp_fraction_part>
c00092c3:	d9 05 40 88 03 c0    	fld    DWORD PTR ds:0xc0038840
c00092c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092cd:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c00092d1:	83 c4 0c             	add    esp,0xc
c00092d4:	c3                   	ret    

c00092d5 <calc_output_single>:
c00092d5:	55                   	push   ebp
c00092d6:	57                   	push   edi
c00092d7:	89 c7                	mov    edi,eax
c00092d9:	56                   	push   esi
c00092da:	53                   	push   ebx
c00092db:	89 d3                	mov    ebx,edx
c00092dd:	83 ec 24             	sub    esp,0x24
c00092e0:	89 de                	mov    esi,ebx
c00092e2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092e5:	e8 c3 ff ff ff       	call   c00092ad <int_to_fp>
c00092ea:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00092ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00092f8:	29 c8                	sub    eax,ecx
c00092fa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009302:	99                   	cdq    
c0009303:	f7 fb                	idiv   ebx
c0009305:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009308:	0f af f0             	imul   esi,eax
c000930b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000930f:	01 ce                	add    esi,ecx
c0009311:	29 c2                	sub    edx,eax
c0009313:	8d 14 97             	lea    edx,[edi+edx*4]
c0009316:	89 f0                	mov    eax,esi
c0009318:	e8 9e ff ff ff       	call   c00092bb <fp_to_double>
c000931d:	89 f0                	mov    eax,esi
c000931f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009323:	e8 89 ff ff ff       	call   c00092b1 <fp_to_int>
c0009328:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000932c:	83 c2 04             	add    edx,0x4
c000932f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009333:	d8 e1                	fsub   st,st(1)
c0009335:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009339:	de c9                	fmulp  st(1),st
c000933b:	de c1                	faddp  st(1),st
c000933d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009343:	29 de                	sub    esi,ebx
c0009345:	dc 04 24             	fadd   QWORD PTR [esp]
c0009348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000934b:	79 c9                	jns    c0009316 <calc_output_single+0x41>
c000934d:	89 d8                	mov    eax,ebx
c000934f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009353:	29 c8                	sub    eax,ecx
c0009355:	d9 ee                	fldz   
c0009357:	89 c1                	mov    ecx,eax
c0009359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000935d:	29 c8                	sub    eax,ecx
c000935f:	99                   	cdq    
c0009360:	f7 fb                	idiv   ebx
c0009362:	89 da                	mov    edx,ebx
c0009364:	0f af d0             	imul   edx,eax
c0009367:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000936b:	01 d1                	add    ecx,edx
c000936d:	8d 14 87             	lea    edx,[edi+eax*4]
c0009370:	89 c8                	mov    eax,ecx
c0009372:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009376:	e8 40 ff ff ff       	call   c00092bb <fp_to_double>
c000937b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000937f:	89 c8                	mov    eax,ecx
c0009381:	e8 2b ff ff ff       	call   c00092b1 <fp_to_int>
c0009386:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000938a:	29 d9                	sub    ecx,ebx
c000938c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009390:	83 ea 04             	sub    edx,0x4
c0009393:	d8 e1                	fsub   st,st(1)
c0009395:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009399:	de c9                	fmulp  st(1),st
c000939b:	de c1                	faddp  st(1),st
c000939d:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c00093a3:	85 c9                	test   ecx,ecx
c00093a5:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00093a9:	de c1                	faddp  st(1),st
c00093ab:	7f c3                	jg     c0009370 <calc_output_single+0x9b>
c00093ad:	dd 04 24             	fld    QWORD PTR [esp]
c00093b0:	83 c4 24             	add    esp,0x24
c00093b3:	de c1                	faddp  st(1),st
c00093b5:	5b                   	pop    ebx
c00093b6:	5e                   	pop    esi
c00093b7:	5f                   	pop    edi
c00093b8:	5d                   	pop    ebp
c00093b9:	c3                   	ret    

c00093ba <calc_output_stereo>:
c00093ba:	55                   	push   ebp
c00093bb:	57                   	push   edi
c00093bc:	89 c7                	mov    edi,eax
c00093be:	56                   	push   esi
c00093bf:	53                   	push   ebx
c00093c0:	89 d3                	mov    ebx,edx
c00093c2:	83 ec 44             	sub    esp,0x44
c00093c5:	89 de                	mov    esi,ebx
c00093c7:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00093cb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093ce:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093d2:	e8 d6 fe ff ff       	call   c00092ad <int_to_fp>
c00093d7:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093de:	d9 ee                	fldz   
c00093e0:	29 c8                	sub    eax,ecx
c00093e2:	dd 14 24             	fst    QWORD PTR [esp]
c00093e5:	99                   	cdq    
c00093e6:	f7 fb                	idiv   ebx
c00093e8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093eb:	0f af f0             	imul   esi,eax
c00093ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00093f2:	01 ce                	add    esi,ecx
c00093f4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093f7:	0f af c2             	imul   eax,edx
c00093fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00093fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009402:	29 c2                	sub    edx,eax
c0009404:	8d 14 97             	lea    edx,[edi+edx*4]
c0009407:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000940b:	89 f0                	mov    eax,esi
c000940d:	e8 a9 fe ff ff       	call   c00092bb <fp_to_double>
c0009412:	89 f0                	mov    eax,esi
c0009414:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009418:	e8 94 fe ff ff       	call   c00092b1 <fp_to_int>
c000941d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009421:	83 c2 08             	add    edx,0x8
c0009424:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009428:	d8 e1                	fsub   st,st(1)
c000942a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000942e:	de c9                	fmulp  st(1),st
c0009430:	de c1                	faddp  st(1),st
c0009432:	d9 c0                	fld    st(0)
c0009434:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000943a:	dc 04 24             	fadd   QWORD PTR [esp]
c000943d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009440:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009446:	29 de                	sub    esi,ebx
c0009448:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000944c:	de c1                	faddp  st(1),st
c000944e:	79 b7                	jns    c0009407 <calc_output_stereo+0x4d>
c0009450:	89 d8                	mov    eax,ebx
c0009452:	d9 ee                	fldz   
c0009454:	d9 ee                	fldz   
c0009456:	29 c8                	sub    eax,ecx
c0009458:	89 c1                	mov    ecx,eax
c000945a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000945e:	29 c8                	sub    eax,ecx
c0009460:	99                   	cdq    
c0009461:	f7 fb                	idiv   ebx
c0009463:	89 da                	mov    edx,ebx
c0009465:	0f af d0             	imul   edx,eax
c0009468:	40                   	inc    eax
c0009469:	01 d1                	add    ecx,edx
c000946b:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009470:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009474:	8d 14 87             	lea    edx,[edi+eax*4]
c0009477:	eb 04                	jmp    c000947d <calc_output_stereo+0xc3>
c0009479:	d9 ca                	fxch   st(2)
c000947b:	d9 c9                	fxch   st(1)
c000947d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009481:	d9 c9                	fxch   st(1)
c0009483:	89 c8                	mov    eax,ecx
c0009485:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009489:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948d:	e8 29 fe ff ff       	call   c00092bb <fp_to_double>
c0009492:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009496:	89 c8                	mov    eax,ecx
c0009498:	e8 14 fe ff ff       	call   c00092b1 <fp_to_int>
c000949d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094a1:	29 d9                	sub    ecx,ebx
c00094a3:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094a7:	83 ea 08             	sub    edx,0x8
c00094aa:	d8 e1                	fsub   st,st(1)
c00094ac:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00094b0:	de c9                	fmulp  st(1),st
c00094b2:	de c1                	faddp  st(1),st
c00094b4:	d9 c0                	fld    st(0)
c00094b6:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c00094bc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00094c0:	de c1                	faddp  st(1),st
c00094c2:	d9 c9                	fxch   st(1)
c00094c4:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00094ca:	85 c9                	test   ecx,ecx
c00094cc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00094d0:	de c1                	faddp  st(1),st
c00094d2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00094d6:	7f a1                	jg     c0009479 <calc_output_stereo+0xbf>
c00094d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00094dc:	dd 04 24             	fld    QWORD PTR [esp]
c00094df:	de c3                	faddp  st(3),st
c00094e1:	d9 ca                	fxch   st(2)
c00094e3:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094e7:	d9 18                	fstp   DWORD PTR [eax]
c00094e9:	de c1                	faddp  st(1),st
c00094eb:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094ef:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00094f2:	83 c4 44             	add    esp,0x44
c00094f5:	5b                   	pop    ebx
c00094f6:	5e                   	pop    esi
c00094f7:	5f                   	pop    edi
c00094f8:	5d                   	pop    ebp
c00094f9:	c3                   	ret    

c00094fa <calc_output_quad>:
c00094fa:	55                   	push   ebp
c00094fb:	57                   	push   edi
c00094fc:	56                   	push   esi
c00094fd:	89 c6                	mov    esi,eax
c00094ff:	53                   	push   ebx
c0009500:	89 d3                	mov    ebx,edx
c0009502:	83 ec 5c             	sub    esp,0x5c
c0009505:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009509:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000950c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000950f:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009513:	e8 95 fd ff ff       	call   c00092ad <int_to_fp>
c0009518:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000951b:	d9 ee                	fldz   
c000951d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009521:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009525:	29 c8                	sub    eax,ecx
c0009527:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000952b:	99                   	cdq    
c000952c:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009530:	f7 fb                	idiv   ebx
c0009532:	89 da                	mov    edx,ebx
c0009534:	0f af d0             	imul   edx,eax
c0009537:	01 ca                	add    edx,ecx
c0009539:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000953d:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009540:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009544:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009547:	0f af c2             	imul   eax,edx
c000954a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000954e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009552:	29 c2                	sub    edx,eax
c0009554:	8d 14 96             	lea    edx,[esi+edx*4]
c0009557:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000955b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000955f:	e8 57 fd ff ff       	call   c00092bb <fp_to_double>
c0009564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009568:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000956c:	e8 40 fd ff ff       	call   c00092b1 <fp_to_int>
c0009571:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009575:	83 c2 10             	add    edx,0x10
c0009578:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000957c:	d8 e1                	fsub   st,st(1)
c000957e:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009582:	de c9                	fmulp  st(1),st
c0009584:	de c1                	faddp  st(1),st
c0009586:	d9 c0                	fld    st(0)
c0009588:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000958e:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009592:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009596:	d9 c0                	fld    st(0)
c0009598:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000959e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c00095a2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00095a6:	d9 c0                	fld    st(0)
c00095a8:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00095ae:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095b2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00095b6:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00095bc:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00095c0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095c4:	de c1                	faddp  st(1),st
c00095c6:	79 8f                	jns    c0009557 <calc_output_quad+0x5d>
c00095c8:	89 d8                	mov    eax,ebx
c00095ca:	d9 ee                	fldz   
c00095cc:	29 c8                	sub    eax,ecx
c00095ce:	d9 ee                	fldz   
c00095d0:	89 c1                	mov    ecx,eax
c00095d2:	d9 ee                	fldz   
c00095d4:	d9 ee                	fldz   
c00095d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00095da:	29 c8                	sub    eax,ecx
c00095dc:	99                   	cdq    
c00095dd:	f7 fb                	idiv   ebx
c00095df:	89 da                	mov    edx,ebx
c00095e1:	0f af d0             	imul   edx,eax
c00095e4:	40                   	inc    eax
c00095e5:	01 d1                	add    ecx,edx
c00095e7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00095ec:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00095f0:	8d 14 86             	lea    edx,[esi+eax*4]
c00095f3:	eb 0a                	jmp    c00095ff <calc_output_quad+0x105>
c00095f5:	d9 cc                	fxch   st(4)
c00095f7:	d9 ca                	fxch   st(2)
c00095f9:	d9 c9                	fxch   st(1)
c00095fb:	d9 cb                	fxch   st(3)
c00095fd:	d9 c9                	fxch   st(1)
c00095ff:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009603:	d9 c9                	fxch   st(1)
c0009605:	89 c8                	mov    eax,ecx
c0009607:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000960b:	d9 c9                	fxch   st(1)
c000960d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009611:	d9 c9                	fxch   st(1)
c0009613:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009617:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000961b:	e8 9b fc ff ff       	call   c00092bb <fp_to_double>
c0009620:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009624:	89 c8                	mov    eax,ecx
c0009626:	e8 86 fc ff ff       	call   c00092b1 <fp_to_int>
c000962b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000962f:	29 d9                	sub    ecx,ebx
c0009631:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009635:	83 ea 10             	sub    edx,0x10
c0009638:	d8 e1                	fsub   st,st(1)
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	de c9                	fmulp  st(1),st
c0009640:	de c1                	faddp  st(1),st
c0009642:	d9 c0                	fld    st(0)
c0009644:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000964a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000964e:	de c1                	faddp  st(1),st
c0009650:	d9 c1                	fld    st(1)
c0009652:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c0009658:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000965c:	de c1                	faddp  st(1),st
c000965e:	d9 c2                	fld    st(2)
c0009660:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009666:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000966a:	de c1                	faddp  st(1),st
c000966c:	d9 cb                	fxch   st(3)
c000966e:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009674:	85 c9                	test   ecx,ecx
c0009676:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000967a:	de c1                	faddp  st(1),st
c000967c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009680:	0f 8f 6f ff ff ff    	jg     c00095f5 <calc_output_quad+0xfb>
c0009686:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000968a:	de c4                	faddp  st(4),st
c000968c:	d9 cb                	fxch   st(3)
c000968e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009691:	d9 1f                	fstp   DWORD PTR [edi]
c0009693:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009697:	de c2                	faddp  st(2),st
c0009699:	d9 c9                	fxch   st(1)
c000969b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000969e:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c00096a1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00096a5:	de c3                	faddp  st(3),st
c00096a7:	d9 ca                	fxch   st(2)
c00096a9:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096ac:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c00096af:	de c1                	faddp  st(1),st
c00096b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096b4:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c00096b7:	83 c4 5c             	add    esp,0x5c
c00096ba:	5b                   	pop    ebx
c00096bb:	5e                   	pop    esi
c00096bc:	5f                   	pop    edi
c00096bd:	5d                   	pop    ebp
c00096be:	c3                   	ret    

c00096bf <calc_output_hex>:
c00096bf:	55                   	push   ebp
c00096c0:	57                   	push   edi
c00096c1:	89 c7                	mov    edi,eax
c00096c3:	56                   	push   esi
c00096c4:	53                   	push   ebx
c00096c5:	89 d3                	mov    ebx,edx
c00096c7:	83 ec 7c             	sub    esp,0x7c
c00096ca:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00096d1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00096d7:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00096de:	e8 ca fb ff ff       	call   c00092ad <int_to_fp>
c00096e3:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00096e6:	d9 ee                	fldz   
c00096e8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00096ec:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00096f0:	29 c8                	sub    eax,ecx
c00096f2:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00096f6:	99                   	cdq    
c00096f7:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00096fb:	f7 fb                	idiv   ebx
c00096fd:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0009701:	89 da                	mov    edx,ebx
c0009703:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009707:	0f af d0             	imul   edx,eax
c000970a:	01 ca                	add    edx,ecx
c000970c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009710:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009713:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009717:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000971a:	0f af c2             	imul   eax,edx
c000971d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009721:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009725:	29 c2                	sub    edx,eax
c0009727:	8d 14 97             	lea    edx,[edi+edx*4]
c000972a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000972e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009732:	e8 84 fb ff ff       	call   c00092bb <fp_to_double>
c0009737:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000973b:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000973f:	e8 6d fb ff ff       	call   c00092b1 <fp_to_int>
c0009744:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009748:	83 c2 18             	add    edx,0x18
c000974b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000974f:	d8 e1                	fsub   st,st(1)
c0009751:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009755:	de c9                	fmulp  st(1),st
c0009757:	de c1                	faddp  st(1),st
c0009759:	d9 c0                	fld    st(0)
c000975b:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009761:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009765:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009769:	d9 c0                	fld    st(0)
c000976b:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009771:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009775:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009779:	d9 c0                	fld    st(0)
c000977b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009781:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009785:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009789:	d9 c0                	fld    st(0)
c000978b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009791:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009795:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009799:	d9 c0                	fld    st(0)
c000979b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00097a1:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00097a5:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00097a9:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00097af:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c00097b3:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00097b7:	de c1                	faddp  st(1),st
c00097b9:	0f 89 6b ff ff ff    	jns    c000972a <calc_output_hex+0x6b>
c00097bf:	d9 ee                	fldz   
c00097c1:	d9 ee                	fldz   
c00097c3:	89 d8                	mov    eax,ebx
c00097c5:	29 c8                	sub    eax,ecx
c00097c7:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00097cb:	89 c1                	mov    ecx,eax
c00097cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00097d1:	29 c8                	sub    eax,ecx
c00097d3:	99                   	cdq    
c00097d4:	f7 fb                	idiv   ebx
c00097d6:	89 da                	mov    edx,ebx
c00097d8:	0f af d0             	imul   edx,eax
c00097db:	40                   	inc    eax
c00097dc:	01 d1                	add    ecx,edx
c00097de:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00097e3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00097e7:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00097eb:	8d 14 87             	lea    edx,[edi+eax*4]
c00097ee:	d9 ee                	fldz   
c00097f0:	d9 ee                	fldz   
c00097f2:	d9 ca                	fxch   st(2)
c00097f4:	eb 08                	jmp    c00097fe <calc_output_hex+0x13f>
c00097f6:	d9 cc                	fxch   st(4)
c00097f8:	d9 cb                	fxch   st(3)
c00097fa:	d9 ca                	fxch   st(2)
c00097fc:	d9 c9                	fxch   st(1)
c00097fe:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009802:	89 c8                	mov    eax,ecx
c0009804:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009808:	d9 ca                	fxch   st(2)
c000980a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000980e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009812:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009816:	e8 a0 fa ff ff       	call   c00092bb <fp_to_double>
c000981b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000981f:	89 c8                	mov    eax,ecx
c0009821:	e8 8b fa ff ff       	call   c00092b1 <fp_to_int>
c0009826:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000982a:	29 d9                	sub    ecx,ebx
c000982c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009830:	83 ea 18             	sub    edx,0x18
c0009833:	d8 e1                	fsub   st,st(1)
c0009835:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009839:	de c9                	fmulp  st(1),st
c000983b:	de c1                	faddp  st(1),st
c000983d:	d9 c0                	fld    st(0)
c000983f:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009845:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009849:	de c1                	faddp  st(1),st
c000984b:	d9 c1                	fld    st(1)
c000984d:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009853:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0009857:	de c1                	faddp  st(1),st
c0009859:	d9 c2                	fld    st(2)
c000985b:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009861:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009865:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009869:	d9 c2                	fld    st(2)
c000986b:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009871:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009875:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009879:	d9 c2                	fld    st(2)
c000987b:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009881:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009885:	de c1                	faddp  st(1),st
c0009887:	d9 cb                	fxch   st(3)
c0009889:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000988f:	85 c9                	test   ecx,ecx
c0009891:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009895:	de c1                	faddp  st(1),st
c0009897:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000989b:	0f 8f 55 ff ff ff    	jg     c00097f6 <calc_output_hex+0x137>
c00098a1:	d9 cb                	fxch   st(3)
c00098a3:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00098a7:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098aa:	d9 1e                	fstp   DWORD PTR [esi]
c00098ac:	d9 c9                	fxch   st(1)
c00098ae:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00098b2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098b5:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c00098b8:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098bc:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00098c0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098c3:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00098c6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00098ca:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00098ce:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098d1:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00098d4:	d9 ca                	fxch   st(2)
c00098d6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00098da:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098dd:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00098e0:	de c1                	faddp  st(1),st
c00098e2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098e5:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00098e8:	83 c4 7c             	add    esp,0x7c
c00098eb:	5b                   	pop    ebx
c00098ec:	5e                   	pop    esi
c00098ed:	5f                   	pop    edi
c00098ee:	5d                   	pop    ebp
c00098ef:	c3                   	ret    

c00098f0 <calc_output_multi>:
c00098f0:	55                   	push   ebp
c00098f1:	57                   	push   edi
c00098f2:	8d 78 44             	lea    edi,[eax+0x44]
c00098f5:	56                   	push   esi
c00098f6:	89 c6                	mov    esi,eax
c00098f8:	53                   	push   ebx
c00098f9:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00098ff:	83 ec 4c             	sub    esp,0x4c
c0009902:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009906:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000990a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000990e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009912:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000991a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000991d:	e8 8b f9 ff ff       	call   c00092ad <int_to_fp>
c0009922:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009925:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009929:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000992d:	99                   	cdq    
c000992e:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009936:	0f af d0             	imul   edx,eax
c0009939:	0f af c3             	imul   eax,ebx
c000993c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009940:	29 c5                	sub    ebp,eax
c0009942:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009946:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000994a:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009951:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009955:	52                   	push   edx
c0009956:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000995a:	6a 00                	push   0x0
c000995c:	57                   	push   edi
c000995d:	e8 76 6d ff ff       	call   c00006d8 <memset>
c0009962:	83 c4 10             	add    esp,0x10
c0009965:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009969:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000996d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009971:	e8 45 f9 ff ff       	call   c00092bb <fp_to_double>
c0009976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000997a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000997e:	e8 2e f9 ff ff       	call   c00092b1 <fp_to_int>
c0009983:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009986:	89 d9                	mov    ecx,ebx
c0009988:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000998b:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000998f:	d8 e1                	fsub   st,st(1)
c0009991:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009995:	de c9                	fmulp  st(1),st
c0009997:	de c1                	faddp  st(1),st
c0009999:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000999d:	89 c8                	mov    eax,ecx
c000999f:	bd 08 00 00 00       	mov    ebp,0x8
c00099a4:	99                   	cdq    
c00099a5:	f7 fd                	idiv   ebp
c00099a7:	4a                   	dec    edx
c00099a8:	83 fa 06             	cmp    edx,0x6
c00099ab:	77 07                	ja     c00099b4 <calc_output_multi+0xc4>
c00099ad:	ff 24 95 80 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe80]
c00099b4:	49                   	dec    ecx
c00099b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099b9:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099bc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099c3:	d9 c1                	fld    st(1)
c00099c5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099c9:	dc 00                	fadd   QWORD PTR [eax]
c00099cb:	dd 18                	fstp   QWORD PTR [eax]
c00099cd:	49                   	dec    ecx
c00099ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099d2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099d5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099dc:	d9 c1                	fld    st(1)
c00099de:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e2:	dc 00                	fadd   QWORD PTR [eax]
c00099e4:	dd 18                	fstp   QWORD PTR [eax]
c00099e6:	49                   	dec    ecx
c00099e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099eb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099ee:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099f5:	d9 c1                	fld    st(1)
c00099f7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099fb:	dc 00                	fadd   QWORD PTR [eax]
c00099fd:	dd 18                	fstp   QWORD PTR [eax]
c00099ff:	49                   	dec    ecx
c0009a00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a04:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a07:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a0e:	d9 c1                	fld    st(1)
c0009a10:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a14:	dc 00                	fadd   QWORD PTR [eax]
c0009a16:	dd 18                	fstp   QWORD PTR [eax]
c0009a18:	49                   	dec    ecx
c0009a19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a1d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a20:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a27:	d9 c1                	fld    st(1)
c0009a29:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a2d:	dc 00                	fadd   QWORD PTR [eax]
c0009a2f:	dd 18                	fstp   QWORD PTR [eax]
c0009a31:	49                   	dec    ecx
c0009a32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a36:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a39:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a40:	d9 c1                	fld    st(1)
c0009a42:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a46:	dc 00                	fadd   QWORD PTR [eax]
c0009a48:	dd 18                	fstp   QWORD PTR [eax]
c0009a4a:	49                   	dec    ecx
c0009a4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a4f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a52:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a59:	d9 c1                	fld    st(1)
c0009a5b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a5f:	dc 00                	fadd   QWORD PTR [eax]
c0009a61:	dd 18                	fstp   QWORD PTR [eax]
c0009a63:	49                   	dec    ecx
c0009a64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a68:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a6b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a72:	d9 c1                	fld    st(1)
c0009a74:	85 c9                	test   ecx,ecx
c0009a76:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a7a:	dc 00                	fadd   QWORD PTR [eax]
c0009a7c:	dd 18                	fstp   QWORD PTR [eax]
c0009a7e:	0f 8f 19 ff ff ff    	jg     c000999d <calc_output_multi+0xad>
c0009a84:	dd d9                	fstp   st(1)
c0009a86:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c0009a8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a8e:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009a92:	0f 89 d1 fe ff ff    	jns    c0009969 <calc_output_multi+0x79>
c0009a98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a9c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009aa0:	89 d1                	mov    ecx,edx
c0009aa2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009aa6:	29 c8                	sub    eax,ecx
c0009aa8:	99                   	cdq    
c0009aa9:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009aad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009ab1:	0f af d0             	imul   edx,eax
c0009ab4:	40                   	inc    eax
c0009ab5:	01 d1                	add    ecx,edx
c0009ab7:	0f af c3             	imul   eax,ebx
c0009aba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009abe:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009ac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ac5:	50                   	push   eax
c0009ac6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aca:	6a 00                	push   0x0
c0009acc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ad0:	e8 03 6c ff ff       	call   c00006d8 <memset>
c0009ad5:	83 c4 10             	add    esp,0x10
c0009ad8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009adc:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009ae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ae4:	e8 d2 f7 ff ff       	call   c00092bb <fp_to_double>
c0009ae9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009aed:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009af1:	e8 bb f7 ff ff       	call   c00092b1 <fp_to_int>
c0009af6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009af9:	89 d9                	mov    ecx,ebx
c0009afb:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009afe:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009b02:	d8 e1                	fsub   st,st(1)
c0009b04:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b08:	de c9                	fmulp  st(1),st
c0009b0a:	de c1                	faddp  st(1),st
c0009b0c:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009b10:	89 c8                	mov    eax,ecx
c0009b12:	bd 08 00 00 00       	mov    ebp,0x8
c0009b17:	99                   	cdq    
c0009b18:	f7 fd                	idiv   ebp
c0009b1a:	4a                   	dec    edx
c0009b1b:	83 fa 06             	cmp    edx,0x6
c0009b1e:	77 07                	ja     c0009b27 <calc_output_multi+0x237>
c0009b20:	ff 24 95 9c 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe64]
c0009b27:	49                   	dec    ecx
c0009b28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b30:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b33:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b3a:	d9 c1                	fld    st(1)
c0009b3c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b40:	dc 00                	fadd   QWORD PTR [eax]
c0009b42:	dd 18                	fstp   QWORD PTR [eax]
c0009b44:	49                   	dec    ecx
c0009b45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b4d:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b50:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b57:	d9 c1                	fld    st(1)
c0009b59:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b5d:	dc 00                	fadd   QWORD PTR [eax]
c0009b5f:	dd 18                	fstp   QWORD PTR [eax]
c0009b61:	49                   	dec    ecx
c0009b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b6a:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b6d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b74:	d9 c1                	fld    st(1)
c0009b76:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b7a:	dc 00                	fadd   QWORD PTR [eax]
c0009b7c:	dd 18                	fstp   QWORD PTR [eax]
c0009b7e:	49                   	dec    ecx
c0009b7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b87:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b8a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b91:	d9 c1                	fld    st(1)
c0009b93:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b97:	dc 00                	fadd   QWORD PTR [eax]
c0009b99:	dd 18                	fstp   QWORD PTR [eax]
c0009b9b:	49                   	dec    ecx
c0009b9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ba0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ba4:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009ba7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bae:	d9 c1                	fld    st(1)
c0009bb0:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bb4:	dc 00                	fadd   QWORD PTR [eax]
c0009bb6:	dd 18                	fstp   QWORD PTR [eax]
c0009bb8:	49                   	dec    ecx
c0009bb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bc1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bc4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bcb:	d9 c1                	fld    st(1)
c0009bcd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bd1:	dc 00                	fadd   QWORD PTR [eax]
c0009bd3:	dd 18                	fstp   QWORD PTR [eax]
c0009bd5:	49                   	dec    ecx
c0009bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bde:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009be1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009be8:	d9 c1                	fld    st(1)
c0009bea:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bee:	dc 00                	fadd   QWORD PTR [eax]
c0009bf0:	dd 18                	fstp   QWORD PTR [eax]
c0009bf2:	49                   	dec    ecx
c0009bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bf7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bfb:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bfe:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009c05:	d9 c1                	fld    st(1)
c0009c07:	85 c9                	test   ecx,ecx
c0009c09:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009c0d:	dc 00                	fadd   QWORD PTR [eax]
c0009c0f:	dd 18                	fstp   QWORD PTR [eax]
c0009c11:	0f 8f f9 fe ff ff    	jg     c0009b10 <calc_output_multi+0x220>
c0009c17:	dd d9                	fstp   st(1)
c0009c19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009c1d:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009c21:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009c25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009c2a:	0f 8f ac fe ff ff    	jg     c0009adc <calc_output_multi+0x1ec>
c0009c30:	b9 08 00 00 00       	mov    ecx,0x8
c0009c35:	89 d8                	mov    eax,ebx
c0009c37:	99                   	cdq    
c0009c38:	f7 f9                	idiv   ecx
c0009c3a:	4a                   	dec    edx
c0009c3b:	83 fa 06             	cmp    edx,0x6
c0009c3e:	77 07                	ja     c0009c47 <calc_output_multi+0x357>
c0009c40:	ff 24 95 b8 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe48]
c0009c47:	4b                   	dec    ebx
c0009c48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c4c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c4f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c52:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c56:	d8 c9                	fmul   st,st(1)
c0009c58:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c5b:	4b                   	dec    ebx
c0009c5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c60:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c63:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c66:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c6a:	d8 c9                	fmul   st,st(1)
c0009c6c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c6f:	4b                   	dec    ebx
c0009c70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c74:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c77:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c7a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c7e:	d8 c9                	fmul   st,st(1)
c0009c80:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c83:	4b                   	dec    ebx
c0009c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c88:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c8b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c8e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c92:	d8 c9                	fmul   st,st(1)
c0009c94:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c97:	4b                   	dec    ebx
c0009c98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c9c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c9f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ca2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ca6:	d8 c9                	fmul   st,st(1)
c0009ca8:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cab:	4b                   	dec    ebx
c0009cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cb0:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cb3:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cb6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cba:	d8 c9                	fmul   st,st(1)
c0009cbc:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cbf:	4b                   	dec    ebx
c0009cc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cc4:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cc7:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cca:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cce:	d8 c9                	fmul   st,st(1)
c0009cd0:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cd3:	4b                   	dec    ebx
c0009cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cd8:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cdb:	85 db                	test   ebx,ebx
c0009cdd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ce0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ce4:	d8 c9                	fmul   st,st(1)
c0009ce6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ce9:	0f 8f 46 ff ff ff    	jg     c0009c35 <calc_output_multi+0x345>
c0009cef:	dd d8                	fstp   st(0)
c0009cf1:	83 c4 4c             	add    esp,0x4c
c0009cf4:	5b                   	pop    ebx
c0009cf5:	5e                   	pop    esi
c0009cf6:	5f                   	pop    edi
c0009cf7:	5d                   	pop    ebp
c0009cf8:	c3                   	ret    

c0009cf9 <sinc_reset>:
c0009cf9:	56                   	push   esi
c0009cfa:	53                   	push   ebx
c0009cfb:	51                   	push   ecx
c0009cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d00:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009d03:	85 db                	test   ebx,ebx
c0009d05:	74 51                	je     c0009d58 <sinc_reset+0x5f>
c0009d07:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009d0e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009d15:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009d1c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009d22:	d9 ee                	fldz   
c0009d24:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009d27:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009d2a:	52                   	push   edx
c0009d2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d2e:	c1 e0 02             	shl    eax,0x2
c0009d31:	50                   	push   eax
c0009d32:	6a 00                	push   0x0
c0009d34:	56                   	push   esi
c0009d35:	e8 9e 69 ff ff       	call   c00006d8 <memset>
c0009d3a:	83 c4 0c             	add    esp,0xc
c0009d3d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009d40:	c1 e0 02             	shl    eax,0x2
c0009d43:	50                   	push   eax
c0009d44:	68 aa 00 00 00       	push   0xaa
c0009d49:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d4c:	8d 04 86             	lea    eax,[esi+eax*4]
c0009d4f:	50                   	push   eax
c0009d50:	e8 83 69 ff ff       	call   c00006d8 <memset>
c0009d55:	83 c4 10             	add    esp,0x10
c0009d58:	58                   	pop    eax
c0009d59:	5b                   	pop    ebx
c0009d5a:	5e                   	pop    esi
c0009d5b:	c3                   	ret    

c0009d5c <double_to_fp>:
c0009d5c:	d9 05 44 88 03 c0    	fld    DWORD PTR ds:0xc0038844
c0009d62:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009d66:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009d6a:	e9 11 4c 01 00       	jmp    c001e980 <lrint>

c0009d6f <fmod_one>:
c0009d6f:	83 ec 2c             	sub    esp,0x2c
c0009d72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d82:	83 ec 08             	sub    esp,0x8
c0009d85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d8d:	e8 ee 4b 01 00       	call   c001e980 <lrint>
c0009d92:	83 c4 10             	add    esp,0x10
c0009d95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009d99:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009d9d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009da1:	de e1                	fsubrp st(1),st
c0009da3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009da7:	d9 ee                	fldz   
c0009da9:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009dad:	df e0                	fnstsw ax
c0009daf:	f6 c4 45             	test   ah,0x45
c0009db2:	75 0a                	jne    c0009dbe <fmod_one+0x4f>
c0009db4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009db8:	d9 e8                	fld1   
c0009dba:	de c1                	faddp  st(1),st
c0009dbc:	eb 04                	jmp    c0009dc2 <fmod_one+0x53>
c0009dbe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009dc2:	83 c4 2c             	add    esp,0x2c
c0009dc5:	c3                   	ret    

c0009dc6 <prepare_data>:
c0009dc6:	55                   	push   ebp
c0009dc7:	57                   	push   edi
c0009dc8:	56                   	push   esi
c0009dc9:	53                   	push   ebx
c0009dca:	83 ec 1c             	sub    esp,0x1c
c0009dcd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009dd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009dd5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009dd9:	0f 89 57 01 00 00    	jns    c0009f36 <prepare_data+0x170>
c0009ddf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009de2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009de5:	85 d2                	test   edx,edx
c0009de7:	75 0d                	jne    c0009df6 <prepare_data+0x30>
c0009de9:	8d 14 36             	lea    edx,[esi+esi*1]
c0009dec:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009def:	29 d0                	sub    eax,edx
c0009df1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009df4:	eb 44                	jmp    c0009e3a <prepare_data+0x74>
c0009df6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009df9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009dfc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009dff:	39 c1                	cmp    ecx,eax
c0009e01:	7d 04                	jge    c0009e07 <prepare_data+0x41>
c0009e03:	29 d0                	sub    eax,edx
c0009e05:	eb 2d                	jmp    c0009e34 <prepare_data+0x6e>
c0009e07:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009e0d:	29 d7                	sub    edi,edx
c0009e0f:	01 f7                	add    edi,esi
c0009e11:	51                   	push   ecx
c0009e12:	29 f2                	sub    edx,esi
c0009e14:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009e1b:	8d 14 90             	lea    edx,[eax+edx*4]
c0009e1e:	51                   	push   ecx
c0009e1f:	52                   	push   edx
c0009e20:	50                   	push   eax
c0009e21:	e8 ce 67 ff ff       	call   c00005f4 <memmove>
c0009e26:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009e29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009e2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009e2f:	29 f0                	sub    eax,esi
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	29 f0                	sub    eax,esi
c0009e36:	79 02                	jns    c0009e3a <prepare_data+0x74>
c0009e38:	31 c0                	xor    eax,eax
c0009e3a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009e3d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009e40:	29 ef                	sub    edi,ebp
c0009e42:	39 c7                	cmp    edi,eax
c0009e44:	7e 02                	jle    c0009e48 <prepare_data+0x82>
c0009e46:	89 c7                	mov    edi,eax
c0009e48:	89 f8                	mov    eax,edi
c0009e4a:	99                   	cdq    
c0009e4b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e4e:	b8 15 00 00 00       	mov    eax,0x15
c0009e53:	29 d7                	sub    edi,edx
c0009e55:	0f 88 dd 00 00 00    	js     c0009f38 <prepare_data+0x172>
c0009e5b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009e5e:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009e61:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009e64:	0f 8f ce 00 00 00    	jg     c0009f38 <prepare_data+0x172>
c0009e6a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009e70:	50                   	push   eax
c0009e71:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009e78:	50                   	push   eax
c0009e79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009e7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e7f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009e82:	50                   	push   eax
c0009e83:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009e86:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009e8a:	50                   	push   eax
c0009e8b:	e8 d1 67 ff ff       	call   c0000661 <memcpy>
c0009e90:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009e93:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009e96:	01 fd                	add    ebp,edi
c0009e98:	01 f9                	add    ecx,edi
c0009e9a:	83 c4 10             	add    esp,0x10
c0009e9d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009ea0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009ea3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009ea6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009eaa:	0f 85 86 00 00 00    	jne    c0009f36 <prepare_data+0x170>
c0009eb0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009eb3:	89 e8                	mov    eax,ebp
c0009eb5:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009eb8:	29 c8                	sub    eax,ecx
c0009eba:	39 f8                	cmp    eax,edi
c0009ebc:	7d 78                	jge    c0009f36 <prepare_data+0x170>
c0009ebe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ec2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ec6:	74 6e                	je     c0009f36 <prepare_data+0x170>
c0009ec8:	8d 7e 04             	lea    edi,[esi+0x4]
c0009ecb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009ecf:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009ed2:	29 ef                	sub    edi,ebp
c0009ed4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009ed8:	7c 29                	jl     c0009f03 <prepare_data+0x13d>
c0009eda:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009edd:	29 f1                	sub    ecx,esi
c0009edf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009ee6:	55                   	push   ebp
c0009ee7:	50                   	push   eax
c0009ee8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009eeb:	50                   	push   eax
c0009eec:	52                   	push   edx
c0009eed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ef1:	e8 fe 66 ff ff       	call   c00005f4 <memmove>
c0009ef6:	83 c4 10             	add    esp,0x10
c0009ef9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009efc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009eff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009f06:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009f09:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009f0c:	83 c6 05             	add    esi,0x5
c0009f0f:	78 07                	js     c0009f18 <prepare_data+0x152>
c0009f11:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009f14:	39 cf                	cmp    edi,ecx
c0009f16:	7e 04                	jle    c0009f1c <prepare_data+0x156>
c0009f18:	89 ce                	mov    esi,ecx
c0009f1a:	29 c6                	sub    esi,eax
c0009f1c:	8d 04 82             	lea    eax,[edx+eax*4]
c0009f1f:	51                   	push   ecx
c0009f20:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009f27:	51                   	push   ecx
c0009f28:	6a 00                	push   0x0
c0009f2a:	50                   	push   eax
c0009f2b:	e8 a8 67 ff ff       	call   c00006d8 <memset>
c0009f30:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	31 c0                	xor    eax,eax
c0009f38:	83 c4 1c             	add    esp,0x1c
c0009f3b:	5b                   	pop    ebx
c0009f3c:	5e                   	pop    esi
c0009f3d:	5f                   	pop    edi
c0009f3e:	5d                   	pop    ebp
c0009f3f:	c3                   	ret    

c0009f40 <sinc_multichan_vari_process>:
c0009f40:	55                   	push   ebp
c0009f41:	b8 05 00 00 00       	mov    eax,0x5
c0009f46:	57                   	push   edi
c0009f47:	56                   	push   esi
c0009f48:	53                   	push   ebx
c0009f49:	83 ec 3c             	sub    esp,0x3c
c0009f4c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f50:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f54:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f57:	85 db                	test   ebx,ebx
c0009f59:	0f 84 5d 02 00 00    	je     c000a1bc <sinc_multichan_vari_process+0x27c>
c0009f5f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f65:	0f af d0             	imul   edx,eax
c0009f68:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f6b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f6f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f79:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f80:	dd 06                	fld    QWORD PTR [esi]
c0009f82:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f86:	55                   	push   ebp
c0009f87:	55                   	push   ebp
c0009f88:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f8b:	e8 d9 f2 ff ff       	call   c0009269 <is_bad_src_ratio>
c0009f90:	89 c2                	mov    edx,eax
c0009f92:	58                   	pop    eax
c0009f93:	85 d2                	test   edx,edx
c0009f95:	59                   	pop    ecx
c0009f96:	b8 16 00 00 00       	mov    eax,0x16
c0009f9b:	0f 85 1b 02 00 00    	jne    c000a1bc <sinc_multichan_vari_process+0x27c>
c0009fa1:	d9 05 48 88 03 c0    	fld    DWORD PTR ds:0xc0038848
c0009fa7:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009faa:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fad:	dd 06                	fld    QWORD PTR [esi]
c0009faf:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fb2:	d8 d1                	fcom   st(1)
c0009fb4:	df e0                	fnstsw ax
c0009fb6:	9e                   	sahf   
c0009fb7:	76 0f                	jbe    c0009fc8 <sinc_multichan_vari_process+0x88>
c0009fb9:	dd d8                	fstp   st(0)
c0009fbb:	d9 e8                	fld1   
c0009fbd:	d8 d9                	fcomp  st(1)
c0009fbf:	df e0                	fnstsw ax
c0009fc1:	9e                   	sahf   
c0009fc2:	77 0f                	ja     c0009fd3 <sinc_multichan_vari_process+0x93>
c0009fc4:	dd d8                	fstp   st(0)
c0009fc6:	eb 11                	jmp    c0009fd9 <sinc_multichan_vari_process+0x99>
c0009fc8:	dd d9                	fstp   st(1)
c0009fca:	d9 e8                	fld1   
c0009fcc:	d8 d9                	fcomp  st(1)
c0009fce:	df e0                	fnstsw ax
c0009fd0:	9e                   	sahf   
c0009fd1:	76 04                	jbe    c0009fd7 <sinc_multichan_vari_process+0x97>
c0009fd3:	de f9                	fdivp  st(1),st
c0009fd5:	eb 02                	jmp    c0009fd9 <sinc_multichan_vari_process+0x99>
c0009fd7:	dd d8                	fstp   st(0)
c0009fd9:	83 ec 10             	sub    esp,0x10
c0009fdc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fdf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fe2:	e8 99 49 01 00       	call   c001e980 <lrint>
c0009fe7:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fea:	40                   	inc    eax
c0009feb:	dd 14 24             	fst    QWORD PTR [esp]
c0009fee:	0f af c5             	imul   eax,ebp
c0009ff1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ff5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ff9:	e8 71 fd ff ff       	call   c0009d6f <fmod_one>
c0009ffe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a001:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a005:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a008:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a00c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a010:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a014:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a017:	e8 64 49 01 00       	call   c001e980 <lrint>
c000a01c:	0f af e8             	imul   ebp,eax
c000a01f:	d9 e8                	fld1   
c000a021:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a025:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a029:	01 e8                	add    eax,ebp
c000a02b:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000a031:	99                   	cdq    
c000a032:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a036:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a03c:	83 c4 10             	add    esp,0x10
c000a03f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a042:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a045:	7d 4b                	jge    c000a092 <sinc_multichan_vari_process+0x152>
c000a047:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a04a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a04d:	01 c8                	add    eax,ecx
c000a04f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a052:	99                   	cdq    
c000a053:	f7 f9                	idiv   ecx
c000a055:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a059:	7d 09                	jge    c000a064 <sinc_multichan_vari_process+0x124>
c000a05b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a05e:	85 c0                	test   eax,eax
c000a060:	79 57                	jns    c000a0b9 <sinc_multichan_vari_process+0x179>
c000a062:	eb 70                	jmp    c000a0d4 <sinc_multichan_vari_process+0x194>
c000a064:	51                   	push   ecx
c000a065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a069:	57                   	push   edi
c000a06a:	53                   	push   ebx
c000a06b:	e8 56 fd ff ff       	call   c0009dc6 <prepare_data>
c000a070:	83 c4 10             	add    esp,0x10
c000a073:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a076:	85 c0                	test   eax,eax
c000a078:	0f 85 3e 01 00 00    	jne    c000a1bc <sinc_multichan_vari_process+0x27c>
c000a07e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a081:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a084:	01 c8                	add    eax,ecx
c000a086:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a089:	99                   	cdq    
c000a08a:	f7 f9                	idiv   ecx
c000a08c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a090:	7c c9                	jl     c000a05b <sinc_multichan_vari_process+0x11b>
c000a092:	dd 04 24             	fld    QWORD PTR [esp]
c000a095:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a098:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a09c:	dd 1e                	fstp   QWORD PTR [esi]
c000a09e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0a1:	99                   	cdq    
c000a0a2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0ab:	99                   	cdq    
c000a0ac:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0af:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0b2:	31 c0                	xor    eax,eax
c000a0b4:	e9 03 01 00 00       	jmp    c000a1bc <sinc_multichan_vari_process+0x27c>
c000a0b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0bd:	dd 04 24             	fld    QWORD PTR [esp]
c000a0c0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0c3:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0c7:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0cb:	d9 c9                	fxch   st(1)
c000a0cd:	de d9                	fcompp 
c000a0cf:	df e0                	fnstsw ax
c000a0d1:	9e                   	sahf   
c000a0d2:	73 be                	jae    c000a092 <sinc_multichan_vari_process+0x152>
c000a0d4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0d8:	7e 31                	jle    c000a10b <sinc_multichan_vari_process+0x1cb>
c000a0da:	83 ec 10             	sub    esp,0x10
c000a0dd:	dd 06                	fld    QWORD PTR [esi]
c000a0df:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0e5:	e8 76 48 01 00       	call   c001e960 <fabs>
c000a0ea:	83 c4 10             	add    esp,0x10
c000a0ed:	dc 1d 38 88 03 c0    	fcomp  QWORD PTR ds:0xc0038838
c000a0f3:	df e0                	fnstsw ax
c000a0f5:	9e                   	sahf   
c000a0f6:	76 13                	jbe    c000a10b <sinc_multichan_vari_process+0x1cb>
c000a0f8:	dd 06                	fld    QWORD PTR [esi]
c000a0fa:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0fd:	d8 e1                	fsub   st,st(1)
c000a0ff:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a102:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a105:	de c1                	faddp  st(1),st
c000a107:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a10b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a10e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a112:	d9 e8                	fld1   
c000a114:	d8 d9                	fcomp  st(1)
c000a116:	df e0                	fnstsw ax
c000a118:	9e                   	sahf   
c000a119:	77 04                	ja     c000a11f <sinc_multichan_vari_process+0x1df>
c000a11b:	dd d8                	fstp   st(0)
c000a11d:	d9 e8                	fld1   
c000a11f:	de c9                	fmulp  st(1),st
c000a121:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a125:	50                   	push   eax
c000a126:	50                   	push   eax
c000a127:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12f:	e8 28 fc ff ff       	call   c0009d5c <double_to_fp>
c000a134:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a138:	89 c5                	mov    ebp,eax
c000a13a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a13e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a141:	e8 16 fc ff ff       	call   c0009d5c <double_to_fp>
c000a146:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a149:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a14c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a14f:	89 c1                	mov    ecx,eax
c000a151:	52                   	push   edx
c000a152:	89 d8                	mov    eax,ebx
c000a154:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c000a158:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a15b:	52                   	push   edx
c000a15c:	52                   	push   edx
c000a15d:	89 ea                	mov    edx,ebp
c000a15f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a162:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a165:	e8 86 f7 ff ff       	call   c00098f0 <calc_output_multi>
c000a16a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000a16d:	d9 e8                	fld1   
c000a16f:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000a172:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c000a176:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a17a:	83 c4 10             	add    esp,0x10
c000a17d:	dd 14 24             	fst    QWORD PTR [esp]
c000a180:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a184:	e8 e6 fb ff ff       	call   c0009d6f <fmod_one>
c000a189:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a18c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a190:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a193:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a197:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a19b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a19f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1a2:	e8 d9 47 01 00       	call   c001e980 <lrint>
c000a1a7:	0f af e8             	imul   ebp,eax
c000a1aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1ae:	01 e8                	add    eax,ebp
c000a1b0:	99                   	cdq    
c000a1b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1b7:	e9 80 fe ff ff       	jmp    c000a03c <sinc_multichan_vari_process+0xfc>
c000a1bc:	83 c4 3c             	add    esp,0x3c
c000a1bf:	5b                   	pop    ebx
c000a1c0:	5e                   	pop    esi
c000a1c1:	5f                   	pop    edi
c000a1c2:	5d                   	pop    ebp
c000a1c3:	c3                   	ret    

c000a1c4 <sinc_hex_vari_process>:
c000a1c4:	55                   	push   ebp
c000a1c5:	b8 05 00 00 00       	mov    eax,0x5
c000a1ca:	57                   	push   edi
c000a1cb:	56                   	push   esi
c000a1cc:	53                   	push   ebx
c000a1cd:	83 ec 3c             	sub    esp,0x3c
c000a1d0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1d4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1d8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1db:	85 db                	test   ebx,ebx
c000a1dd:	0f 84 58 02 00 00    	je     c000a43b <sinc_hex_vari_process+0x277>
c000a1e3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1e6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1e9:	0f af d0             	imul   edx,eax
c000a1ec:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1ef:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1f3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1fd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a204:	dd 06                	fld    QWORD PTR [esi]
c000a206:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a20a:	55                   	push   ebp
c000a20b:	55                   	push   ebp
c000a20c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a20f:	e8 55 f0 ff ff       	call   c0009269 <is_bad_src_ratio>
c000a214:	89 c2                	mov    edx,eax
c000a216:	58                   	pop    eax
c000a217:	85 d2                	test   edx,edx
c000a219:	59                   	pop    ecx
c000a21a:	b8 16 00 00 00       	mov    eax,0x16
c000a21f:	0f 85 16 02 00 00    	jne    c000a43b <sinc_hex_vari_process+0x277>
c000a225:	d9 05 48 88 03 c0    	fld    DWORD PTR ds:0xc0038848
c000a22b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a22e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a231:	dd 06                	fld    QWORD PTR [esi]
c000a233:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a236:	d8 d1                	fcom   st(1)
c000a238:	df e0                	fnstsw ax
c000a23a:	9e                   	sahf   
c000a23b:	76 0f                	jbe    c000a24c <sinc_hex_vari_process+0x88>
c000a23d:	dd d8                	fstp   st(0)
c000a23f:	d9 e8                	fld1   
c000a241:	d8 d9                	fcomp  st(1)
c000a243:	df e0                	fnstsw ax
c000a245:	9e                   	sahf   
c000a246:	77 0f                	ja     c000a257 <sinc_hex_vari_process+0x93>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	eb 11                	jmp    c000a25d <sinc_hex_vari_process+0x99>
c000a24c:	dd d9                	fstp   st(1)
c000a24e:	d9 e8                	fld1   
c000a250:	d8 d9                	fcomp  st(1)
c000a252:	df e0                	fnstsw ax
c000a254:	9e                   	sahf   
c000a255:	76 04                	jbe    c000a25b <sinc_hex_vari_process+0x97>
c000a257:	de f9                	fdivp  st(1),st
c000a259:	eb 02                	jmp    c000a25d <sinc_hex_vari_process+0x99>
c000a25b:	dd d8                	fstp   st(0)
c000a25d:	83 ec 10             	sub    esp,0x10
c000a260:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a263:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a266:	e8 15 47 01 00       	call   c001e980 <lrint>
c000a26b:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a26e:	40                   	inc    eax
c000a26f:	dd 14 24             	fst    QWORD PTR [esp]
c000a272:	0f af c5             	imul   eax,ebp
c000a275:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a279:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a27d:	e8 ed fa ff ff       	call   c0009d6f <fmod_one>
c000a282:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a285:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a289:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a28c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a290:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a294:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a298:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a29b:	e8 e0 46 01 00       	call   c001e980 <lrint>
c000a2a0:	0f af e8             	imul   ebp,eax
c000a2a3:	d9 e8                	fld1   
c000a2a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2a9:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2ad:	01 e8                	add    eax,ebp
c000a2af:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000a2b5:	99                   	cdq    
c000a2b6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ba:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2bd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2c0:	83 c4 10             	add    esp,0x10
c000a2c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2c6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2c9:	7d 4b                	jge    c000a316 <sinc_hex_vari_process+0x152>
c000a2cb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2d1:	01 c8                	add    eax,ecx
c000a2d3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2d6:	99                   	cdq    
c000a2d7:	f7 f9                	idiv   ecx
c000a2d9:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2dd:	7d 09                	jge    c000a2e8 <sinc_hex_vari_process+0x124>
c000a2df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2e2:	85 c0                	test   eax,eax
c000a2e4:	79 57                	jns    c000a33d <sinc_hex_vari_process+0x179>
c000a2e6:	eb 70                	jmp    c000a358 <sinc_hex_vari_process+0x194>
c000a2e8:	51                   	push   ecx
c000a2e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2ed:	57                   	push   edi
c000a2ee:	53                   	push   ebx
c000a2ef:	e8 d2 fa ff ff       	call   c0009dc6 <prepare_data>
c000a2f4:	83 c4 10             	add    esp,0x10
c000a2f7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2fa:	85 c0                	test   eax,eax
c000a2fc:	0f 85 39 01 00 00    	jne    c000a43b <sinc_hex_vari_process+0x277>
c000a302:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a305:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a308:	01 c8                	add    eax,ecx
c000a30a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a30d:	99                   	cdq    
c000a30e:	f7 f9                	idiv   ecx
c000a310:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a314:	7c c9                	jl     c000a2df <sinc_hex_vari_process+0x11b>
c000a316:	dd 04 24             	fld    QWORD PTR [esp]
c000a319:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a31c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a320:	dd 1e                	fstp   QWORD PTR [esi]
c000a322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a325:	99                   	cdq    
c000a326:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a329:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a32c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a32f:	99                   	cdq    
c000a330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a333:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a336:	31 c0                	xor    eax,eax
c000a338:	e9 fe 00 00 00       	jmp    c000a43b <sinc_hex_vari_process+0x277>
c000a33d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a341:	dd 04 24             	fld    QWORD PTR [esp]
c000a344:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a347:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a34b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a34f:	d9 c9                	fxch   st(1)
c000a351:	de d9                	fcompp 
c000a353:	df e0                	fnstsw ax
c000a355:	9e                   	sahf   
c000a356:	73 be                	jae    c000a316 <sinc_hex_vari_process+0x152>
c000a358:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a35c:	7e 31                	jle    c000a38f <sinc_hex_vari_process+0x1cb>
c000a35e:	83 ec 10             	sub    esp,0x10
c000a361:	dd 06                	fld    QWORD PTR [esi]
c000a363:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a366:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a369:	e8 f2 45 01 00       	call   c001e960 <fabs>
c000a36e:	83 c4 10             	add    esp,0x10
c000a371:	dc 1d 38 88 03 c0    	fcomp  QWORD PTR ds:0xc0038838
c000a377:	df e0                	fnstsw ax
c000a379:	9e                   	sahf   
c000a37a:	76 13                	jbe    c000a38f <sinc_hex_vari_process+0x1cb>
c000a37c:	dd 06                	fld    QWORD PTR [esi]
c000a37e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a381:	d8 e1                	fsub   st,st(1)
c000a383:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a386:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a389:	de c1                	faddp  st(1),st
c000a38b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a38f:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a392:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a396:	d9 e8                	fld1   
c000a398:	d8 d9                	fcomp  st(1)
c000a39a:	df e0                	fnstsw ax
c000a39c:	9e                   	sahf   
c000a39d:	77 04                	ja     c000a3a3 <sinc_hex_vari_process+0x1df>
c000a39f:	dd d8                	fstp   st(0)
c000a3a1:	d9 e8                	fld1   
c000a3a3:	de c9                	fmulp  st(1),st
c000a3a5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3a9:	50                   	push   eax
c000a3aa:	50                   	push   eax
c000a3ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3b3:	e8 a4 f9 ff ff       	call   c0009d5c <double_to_fp>
c000a3b8:	89 c5                	mov    ebp,eax
c000a3ba:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3be:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3c2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3c5:	e8 92 f9 ff ff       	call   c0009d5c <double_to_fp>
c000a3ca:	83 c4 0c             	add    esp,0xc
c000a3cd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3d0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3d3:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3d6:	89 c1                	mov    ecx,eax
c000a3d8:	52                   	push   edx
c000a3d9:	89 d8                	mov    eax,ebx
c000a3db:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3df:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3e2:	52                   	push   edx
c000a3e3:	52                   	push   edx
c000a3e4:	89 ea                	mov    edx,ebp
c000a3e6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3e9:	e8 d1 f2 ff ff       	call   c00096bf <calc_output_hex>
c000a3ee:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a3f2:	d9 e8                	fld1   
c000a3f4:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3f8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3fc:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ff:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a403:	e8 67 f9 ff ff       	call   c0009d6f <fmod_one>
c000a408:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a40b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a40f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a412:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a416:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a41a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a41e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a421:	e8 5a 45 01 00       	call   c001e980 <lrint>
c000a426:	0f af e8             	imul   ebp,eax
c000a429:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a42d:	01 e8                	add    eax,ebp
c000a42f:	99                   	cdq    
c000a430:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a433:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a436:	e9 85 fe ff ff       	jmp    c000a2c0 <sinc_hex_vari_process+0xfc>
c000a43b:	83 c4 3c             	add    esp,0x3c
c000a43e:	5b                   	pop    ebx
c000a43f:	5e                   	pop    esi
c000a440:	5f                   	pop    edi
c000a441:	5d                   	pop    ebp
c000a442:	c3                   	ret    

c000a443 <sinc_quad_vari_process>:
c000a443:	55                   	push   ebp
c000a444:	b8 05 00 00 00       	mov    eax,0x5
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 3c             	sub    esp,0x3c
c000a44f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a453:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a457:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a45a:	85 db                	test   ebx,ebx
c000a45c:	0f 84 58 02 00 00    	je     c000a6ba <sinc_quad_vari_process+0x277>
c000a462:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a465:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a468:	0f af d0             	imul   edx,eax
c000a46b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a46e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a472:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a479:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a47c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a483:	dd 06                	fld    QWORD PTR [esi]
c000a485:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a489:	55                   	push   ebp
c000a48a:	55                   	push   ebp
c000a48b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a48e:	e8 d6 ed ff ff       	call   c0009269 <is_bad_src_ratio>
c000a493:	89 c2                	mov    edx,eax
c000a495:	58                   	pop    eax
c000a496:	85 d2                	test   edx,edx
c000a498:	59                   	pop    ecx
c000a499:	b8 16 00 00 00       	mov    eax,0x16
c000a49e:	0f 85 16 02 00 00    	jne    c000a6ba <sinc_quad_vari_process+0x277>
c000a4a4:	d9 05 48 88 03 c0    	fld    DWORD PTR ds:0xc0038848
c000a4aa:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4ad:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4b0:	dd 06                	fld    QWORD PTR [esi]
c000a4b2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4b5:	d8 d1                	fcom   st(1)
c000a4b7:	df e0                	fnstsw ax
c000a4b9:	9e                   	sahf   
c000a4ba:	76 0f                	jbe    c000a4cb <sinc_quad_vari_process+0x88>
c000a4bc:	dd d8                	fstp   st(0)
c000a4be:	d9 e8                	fld1   
c000a4c0:	d8 d9                	fcomp  st(1)
c000a4c2:	df e0                	fnstsw ax
c000a4c4:	9e                   	sahf   
c000a4c5:	77 0f                	ja     c000a4d6 <sinc_quad_vari_process+0x93>
c000a4c7:	dd d8                	fstp   st(0)
c000a4c9:	eb 11                	jmp    c000a4dc <sinc_quad_vari_process+0x99>
c000a4cb:	dd d9                	fstp   st(1)
c000a4cd:	d9 e8                	fld1   
c000a4cf:	d8 d9                	fcomp  st(1)
c000a4d1:	df e0                	fnstsw ax
c000a4d3:	9e                   	sahf   
c000a4d4:	76 04                	jbe    c000a4da <sinc_quad_vari_process+0x97>
c000a4d6:	de f9                	fdivp  st(1),st
c000a4d8:	eb 02                	jmp    c000a4dc <sinc_quad_vari_process+0x99>
c000a4da:	dd d8                	fstp   st(0)
c000a4dc:	83 ec 10             	sub    esp,0x10
c000a4df:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4e5:	e8 96 44 01 00       	call   c001e980 <lrint>
c000a4ea:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4ed:	40                   	inc    eax
c000a4ee:	dd 14 24             	fst    QWORD PTR [esp]
c000a4f1:	0f af c5             	imul   eax,ebp
c000a4f4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4fc:	e8 6e f8 ff ff       	call   c0009d6f <fmod_one>
c000a501:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a504:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a508:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a50b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a50f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a513:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a517:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a51a:	e8 61 44 01 00       	call   c001e980 <lrint>
c000a51f:	0f af e8             	imul   ebp,eax
c000a522:	d9 e8                	fld1   
c000a524:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a528:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a52c:	01 e8                	add    eax,ebp
c000a52e:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000a534:	99                   	cdq    
c000a535:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a539:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a53c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a53f:	83 c4 10             	add    esp,0x10
c000a542:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a545:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a548:	7d 4b                	jge    c000a595 <sinc_quad_vari_process+0x152>
c000a54a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a54d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a550:	01 c8                	add    eax,ecx
c000a552:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a555:	99                   	cdq    
c000a556:	f7 f9                	idiv   ecx
c000a558:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a55c:	7d 09                	jge    c000a567 <sinc_quad_vari_process+0x124>
c000a55e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a561:	85 c0                	test   eax,eax
c000a563:	79 57                	jns    c000a5bc <sinc_quad_vari_process+0x179>
c000a565:	eb 70                	jmp    c000a5d7 <sinc_quad_vari_process+0x194>
c000a567:	51                   	push   ecx
c000a568:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a56c:	57                   	push   edi
c000a56d:	53                   	push   ebx
c000a56e:	e8 53 f8 ff ff       	call   c0009dc6 <prepare_data>
c000a573:	83 c4 10             	add    esp,0x10
c000a576:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a579:	85 c0                	test   eax,eax
c000a57b:	0f 85 39 01 00 00    	jne    c000a6ba <sinc_quad_vari_process+0x277>
c000a581:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a584:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a587:	01 c8                	add    eax,ecx
c000a589:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a58c:	99                   	cdq    
c000a58d:	f7 f9                	idiv   ecx
c000a58f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a593:	7c c9                	jl     c000a55e <sinc_quad_vari_process+0x11b>
c000a595:	dd 04 24             	fld    QWORD PTR [esp]
c000a598:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a59b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a59f:	dd 1e                	fstp   QWORD PTR [esi]
c000a5a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5a4:	99                   	cdq    
c000a5a5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5a8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5ab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5ae:	99                   	cdq    
c000a5af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5b2:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	e9 fe 00 00 00       	jmp    c000a6ba <sinc_quad_vari_process+0x277>
c000a5bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5c0:	dd 04 24             	fld    QWORD PTR [esp]
c000a5c3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5c6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5ca:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5ce:	d9 c9                	fxch   st(1)
c000a5d0:	de d9                	fcompp 
c000a5d2:	df e0                	fnstsw ax
c000a5d4:	9e                   	sahf   
c000a5d5:	73 be                	jae    c000a595 <sinc_quad_vari_process+0x152>
c000a5d7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5db:	7e 31                	jle    c000a60e <sinc_quad_vari_process+0x1cb>
c000a5dd:	83 ec 10             	sub    esp,0x10
c000a5e0:	dd 06                	fld    QWORD PTR [esi]
c000a5e2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5e5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5e8:	e8 73 43 01 00       	call   c001e960 <fabs>
c000a5ed:	83 c4 10             	add    esp,0x10
c000a5f0:	dc 1d 38 88 03 c0    	fcomp  QWORD PTR ds:0xc0038838
c000a5f6:	df e0                	fnstsw ax
c000a5f8:	9e                   	sahf   
c000a5f9:	76 13                	jbe    c000a60e <sinc_quad_vari_process+0x1cb>
c000a5fb:	dd 06                	fld    QWORD PTR [esi]
c000a5fd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a600:	d8 e1                	fsub   st,st(1)
c000a602:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a605:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a608:	de c1                	faddp  st(1),st
c000a60a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a60e:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a611:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a615:	d9 e8                	fld1   
c000a617:	d8 d9                	fcomp  st(1)
c000a619:	df e0                	fnstsw ax
c000a61b:	9e                   	sahf   
c000a61c:	77 04                	ja     c000a622 <sinc_quad_vari_process+0x1df>
c000a61e:	dd d8                	fstp   st(0)
c000a620:	d9 e8                	fld1   
c000a622:	de c9                	fmulp  st(1),st
c000a624:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a628:	50                   	push   eax
c000a629:	50                   	push   eax
c000a62a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a62e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a632:	e8 25 f7 ff ff       	call   c0009d5c <double_to_fp>
c000a637:	89 c5                	mov    ebp,eax
c000a639:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a63d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a641:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a644:	e8 13 f7 ff ff       	call   c0009d5c <double_to_fp>
c000a649:	83 c4 0c             	add    esp,0xc
c000a64c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a64f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a652:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a655:	89 c1                	mov    ecx,eax
c000a657:	52                   	push   edx
c000a658:	89 d8                	mov    eax,ebx
c000a65a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a65e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a661:	52                   	push   edx
c000a662:	52                   	push   edx
c000a663:	89 ea                	mov    edx,ebp
c000a665:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a668:	e8 8d ee ff ff       	call   c00094fa <calc_output_quad>
c000a66d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a671:	d9 e8                	fld1   
c000a673:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a677:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a67b:	dd 14 24             	fst    QWORD PTR [esp]
c000a67e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a682:	e8 e8 f6 ff ff       	call   c0009d6f <fmod_one>
c000a687:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a68a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a68e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a691:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a695:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a699:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a69d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6a0:	e8 db 42 01 00       	call   c001e980 <lrint>
c000a6a5:	0f af e8             	imul   ebp,eax
c000a6a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6ac:	01 e8                	add    eax,ebp
c000a6ae:	99                   	cdq    
c000a6af:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6b2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6b5:	e9 85 fe ff ff       	jmp    c000a53f <sinc_quad_vari_process+0xfc>
c000a6ba:	83 c4 3c             	add    esp,0x3c
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	5d                   	pop    ebp
c000a6c1:	c3                   	ret    

c000a6c2 <sinc_stereo_vari_process>:
c000a6c2:	55                   	push   ebp
c000a6c3:	b8 05 00 00 00       	mov    eax,0x5
c000a6c8:	57                   	push   edi
c000a6c9:	56                   	push   esi
c000a6ca:	53                   	push   ebx
c000a6cb:	83 ec 3c             	sub    esp,0x3c
c000a6ce:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6d2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6d6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6d9:	85 db                	test   ebx,ebx
c000a6db:	0f 84 58 02 00 00    	je     c000a939 <sinc_stereo_vari_process+0x277>
c000a6e1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6e4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6e7:	0f af d0             	imul   edx,eax
c000a6ea:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6ed:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6f1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a702:	dd 06                	fld    QWORD PTR [esi]
c000a704:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a708:	55                   	push   ebp
c000a709:	55                   	push   ebp
c000a70a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a70d:	e8 57 eb ff ff       	call   c0009269 <is_bad_src_ratio>
c000a712:	89 c2                	mov    edx,eax
c000a714:	58                   	pop    eax
c000a715:	85 d2                	test   edx,edx
c000a717:	59                   	pop    ecx
c000a718:	b8 16 00 00 00       	mov    eax,0x16
c000a71d:	0f 85 16 02 00 00    	jne    c000a939 <sinc_stereo_vari_process+0x277>
c000a723:	d9 05 48 88 03 c0    	fld    DWORD PTR ds:0xc0038848
c000a729:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a72c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a72f:	dd 06                	fld    QWORD PTR [esi]
c000a731:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a734:	d8 d1                	fcom   st(1)
c000a736:	df e0                	fnstsw ax
c000a738:	9e                   	sahf   
c000a739:	76 0f                	jbe    c000a74a <sinc_stereo_vari_process+0x88>
c000a73b:	dd d8                	fstp   st(0)
c000a73d:	d9 e8                	fld1   
c000a73f:	d8 d9                	fcomp  st(1)
c000a741:	df e0                	fnstsw ax
c000a743:	9e                   	sahf   
c000a744:	77 0f                	ja     c000a755 <sinc_stereo_vari_process+0x93>
c000a746:	dd d8                	fstp   st(0)
c000a748:	eb 11                	jmp    c000a75b <sinc_stereo_vari_process+0x99>
c000a74a:	dd d9                	fstp   st(1)
c000a74c:	d9 e8                	fld1   
c000a74e:	d8 d9                	fcomp  st(1)
c000a750:	df e0                	fnstsw ax
c000a752:	9e                   	sahf   
c000a753:	76 04                	jbe    c000a759 <sinc_stereo_vari_process+0x97>
c000a755:	de f9                	fdivp  st(1),st
c000a757:	eb 02                	jmp    c000a75b <sinc_stereo_vari_process+0x99>
c000a759:	dd d8                	fstp   st(0)
c000a75b:	83 ec 10             	sub    esp,0x10
c000a75e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a761:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a764:	e8 17 42 01 00       	call   c001e980 <lrint>
c000a769:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a76c:	40                   	inc    eax
c000a76d:	dd 14 24             	fst    QWORD PTR [esp]
c000a770:	0f af c5             	imul   eax,ebp
c000a773:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a777:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a77b:	e8 ef f5 ff ff       	call   c0009d6f <fmod_one>
c000a780:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a783:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a787:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a78a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a78e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a792:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a796:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a799:	e8 e2 41 01 00       	call   c001e980 <lrint>
c000a79e:	0f af e8             	imul   ebp,eax
c000a7a1:	d9 e8                	fld1   
c000a7a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a7a7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7ab:	01 e8                	add    eax,ebp
c000a7ad:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000a7b3:	99                   	cdq    
c000a7b4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a7b8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7bb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7be:	83 c4 10             	add    esp,0x10
c000a7c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7c4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7c7:	7d 4b                	jge    c000a814 <sinc_stereo_vari_process+0x152>
c000a7c9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7cc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7cf:	01 c8                	add    eax,ecx
c000a7d1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7d4:	99                   	cdq    
c000a7d5:	f7 f9                	idiv   ecx
c000a7d7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a7db:	7d 09                	jge    c000a7e6 <sinc_stereo_vari_process+0x124>
c000a7dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7e0:	85 c0                	test   eax,eax
c000a7e2:	79 57                	jns    c000a83b <sinc_stereo_vari_process+0x179>
c000a7e4:	eb 70                	jmp    c000a856 <sinc_stereo_vari_process+0x194>
c000a7e6:	51                   	push   ecx
c000a7e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7eb:	57                   	push   edi
c000a7ec:	53                   	push   ebx
c000a7ed:	e8 d4 f5 ff ff       	call   c0009dc6 <prepare_data>
c000a7f2:	83 c4 10             	add    esp,0x10
c000a7f5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7f8:	85 c0                	test   eax,eax
c000a7fa:	0f 85 39 01 00 00    	jne    c000a939 <sinc_stereo_vari_process+0x277>
c000a800:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a803:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a806:	01 c8                	add    eax,ecx
c000a808:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a80b:	99                   	cdq    
c000a80c:	f7 f9                	idiv   ecx
c000a80e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a812:	7c c9                	jl     c000a7dd <sinc_stereo_vari_process+0x11b>
c000a814:	dd 04 24             	fld    QWORD PTR [esp]
c000a817:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a81a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a81e:	dd 1e                	fstp   QWORD PTR [esi]
c000a820:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a823:	99                   	cdq    
c000a824:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a827:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a82a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a82d:	99                   	cdq    
c000a82e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a831:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a834:	31 c0                	xor    eax,eax
c000a836:	e9 fe 00 00 00       	jmp    c000a939 <sinc_stereo_vari_process+0x277>
c000a83b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a83f:	dd 04 24             	fld    QWORD PTR [esp]
c000a842:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a845:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a849:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a84d:	d9 c9                	fxch   st(1)
c000a84f:	de d9                	fcompp 
c000a851:	df e0                	fnstsw ax
c000a853:	9e                   	sahf   
c000a854:	73 be                	jae    c000a814 <sinc_stereo_vari_process+0x152>
c000a856:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a85a:	7e 31                	jle    c000a88d <sinc_stereo_vari_process+0x1cb>
c000a85c:	83 ec 10             	sub    esp,0x10
c000a85f:	dd 06                	fld    QWORD PTR [esi]
c000a861:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a864:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a867:	e8 f4 40 01 00       	call   c001e960 <fabs>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	dc 1d 38 88 03 c0    	fcomp  QWORD PTR ds:0xc0038838
c000a875:	df e0                	fnstsw ax
c000a877:	9e                   	sahf   
c000a878:	76 13                	jbe    c000a88d <sinc_stereo_vari_process+0x1cb>
c000a87a:	dd 06                	fld    QWORD PTR [esi]
c000a87c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a87f:	d8 e1                	fsub   st,st(1)
c000a881:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a884:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a887:	de c1                	faddp  st(1),st
c000a889:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a88d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a890:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a894:	d9 e8                	fld1   
c000a896:	d8 d9                	fcomp  st(1)
c000a898:	df e0                	fnstsw ax
c000a89a:	9e                   	sahf   
c000a89b:	77 04                	ja     c000a8a1 <sinc_stereo_vari_process+0x1df>
c000a89d:	dd d8                	fstp   st(0)
c000a89f:	d9 e8                	fld1   
c000a8a1:	de c9                	fmulp  st(1),st
c000a8a3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a8a7:	50                   	push   eax
c000a8a8:	50                   	push   eax
c000a8a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b1:	e8 a6 f4 ff ff       	call   c0009d5c <double_to_fp>
c000a8b6:	89 c5                	mov    ebp,eax
c000a8b8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8bc:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a8c0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8c3:	e8 94 f4 ff ff       	call   c0009d5c <double_to_fp>
c000a8c8:	83 c4 0c             	add    esp,0xc
c000a8cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8ce:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a8d1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a8d4:	89 c1                	mov    ecx,eax
c000a8d6:	52                   	push   edx
c000a8d7:	89 d8                	mov    eax,ebx
c000a8d9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8dd:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8e0:	52                   	push   edx
c000a8e1:	52                   	push   edx
c000a8e2:	89 ea                	mov    edx,ebp
c000a8e4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8e7:	e8 ce ea ff ff       	call   c00093ba <calc_output_stereo>
c000a8ec:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a8f0:	d9 e8                	fld1   
c000a8f2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8f6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8fa:	dd 14 24             	fst    QWORD PTR [esp]
c000a8fd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a901:	e8 69 f4 ff ff       	call   c0009d6f <fmod_one>
c000a906:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a909:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a90d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a910:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a914:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a918:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a91c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a91f:	e8 5c 40 01 00       	call   c001e980 <lrint>
c000a924:	0f af e8             	imul   ebp,eax
c000a927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a92b:	01 e8                	add    eax,ebp
c000a92d:	99                   	cdq    
c000a92e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a931:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a934:	e9 85 fe ff ff       	jmp    c000a7be <sinc_stereo_vari_process+0xfc>
c000a939:	83 c4 3c             	add    esp,0x3c
c000a93c:	5b                   	pop    ebx
c000a93d:	5e                   	pop    esi
c000a93e:	5f                   	pop    edi
c000a93f:	5d                   	pop    ebp
c000a940:	c3                   	ret    

c000a941 <sinc_mono_vari_process>:
c000a941:	55                   	push   ebp
c000a942:	b8 05 00 00 00       	mov    eax,0x5
c000a947:	57                   	push   edi
c000a948:	56                   	push   esi
c000a949:	53                   	push   ebx
c000a94a:	83 ec 3c             	sub    esp,0x3c
c000a94d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a951:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a955:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a958:	85 db                	test   ebx,ebx
c000a95a:	0f 84 57 02 00 00    	je     c000abb7 <sinc_mono_vari_process+0x276>
c000a960:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a963:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a966:	0f af d0             	imul   edx,eax
c000a969:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a96c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a970:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a977:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a97a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a981:	dd 06                	fld    QWORD PTR [esi]
c000a983:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a987:	51                   	push   ecx
c000a988:	51                   	push   ecx
c000a989:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a98c:	e8 d8 e8 ff ff       	call   c0009269 <is_bad_src_ratio>
c000a991:	5d                   	pop    ebp
c000a992:	89 c2                	mov    edx,eax
c000a994:	58                   	pop    eax
c000a995:	85 d2                	test   edx,edx
c000a997:	b8 16 00 00 00       	mov    eax,0x16
c000a99c:	0f 85 15 02 00 00    	jne    c000abb7 <sinc_mono_vari_process+0x276>
c000a9a2:	d9 05 48 88 03 c0    	fld    DWORD PTR ds:0xc0038848
c000a9a8:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a9ab:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a9ae:	dd 06                	fld    QWORD PTR [esi]
c000a9b0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a9b3:	d8 d1                	fcom   st(1)
c000a9b5:	df e0                	fnstsw ax
c000a9b7:	9e                   	sahf   
c000a9b8:	76 0f                	jbe    c000a9c9 <sinc_mono_vari_process+0x88>
c000a9ba:	dd d8                	fstp   st(0)
c000a9bc:	d9 e8                	fld1   
c000a9be:	d8 d9                	fcomp  st(1)
c000a9c0:	df e0                	fnstsw ax
c000a9c2:	9e                   	sahf   
c000a9c3:	77 0f                	ja     c000a9d4 <sinc_mono_vari_process+0x93>
c000a9c5:	dd d8                	fstp   st(0)
c000a9c7:	eb 11                	jmp    c000a9da <sinc_mono_vari_process+0x99>
c000a9c9:	dd d9                	fstp   st(1)
c000a9cb:	d9 e8                	fld1   
c000a9cd:	d8 d9                	fcomp  st(1)
c000a9cf:	df e0                	fnstsw ax
c000a9d1:	9e                   	sahf   
c000a9d2:	76 04                	jbe    c000a9d8 <sinc_mono_vari_process+0x97>
c000a9d4:	de f9                	fdivp  st(1),st
c000a9d6:	eb 02                	jmp    c000a9da <sinc_mono_vari_process+0x99>
c000a9d8:	dd d8                	fstp   st(0)
c000a9da:	83 ec 10             	sub    esp,0x10
c000a9dd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a9e0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a9e3:	e8 98 3f 01 00       	call   c001e980 <lrint>
c000a9e8:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a9eb:	40                   	inc    eax
c000a9ec:	dd 14 24             	fst    QWORD PTR [esp]
c000a9ef:	0f af e8             	imul   ebp,eax
c000a9f2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a9f6:	e8 74 f3 ff ff       	call   c0009d6f <fmod_one>
c000a9fb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a9fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aa02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000aa06:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000aa0a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa0d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000aa11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aa15:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aa18:	e8 63 3f 01 00       	call   c001e980 <lrint>
c000aa1d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aa22:	d9 e8                	fld1   
c000aa24:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa28:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000aa2c:	99                   	cdq    
c000aa2d:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000aa33:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000aa36:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000aa3a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000aa3d:	83 c4 10             	add    esp,0x10
c000aa40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000aa43:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000aa46:	7d 44                	jge    c000aa8c <sinc_mono_vari_process+0x14b>
c000aa48:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa4b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa4e:	01 c8                	add    eax,ecx
c000aa50:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa53:	99                   	cdq    
c000aa54:	f7 f9                	idiv   ecx
c000aa56:	39 d5                	cmp    ebp,edx
c000aa58:	7d 09                	jge    c000aa63 <sinc_mono_vari_process+0x122>
c000aa5a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000aa5d:	85 c0                	test   eax,eax
c000aa5f:	79 52                	jns    c000aab3 <sinc_mono_vari_process+0x172>
c000aa61:	eb 6b                	jmp    c000aace <sinc_mono_vari_process+0x18d>
c000aa63:	52                   	push   edx
c000aa64:	55                   	push   ebp
c000aa65:	57                   	push   edi
c000aa66:	53                   	push   ebx
c000aa67:	e8 5a f3 ff ff       	call   c0009dc6 <prepare_data>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000aa72:	85 c0                	test   eax,eax
c000aa74:	0f 85 3d 01 00 00    	jne    c000abb7 <sinc_mono_vari_process+0x276>
c000aa7a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa7d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa80:	01 c8                	add    eax,ecx
c000aa82:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa85:	99                   	cdq    
c000aa86:	f7 f9                	idiv   ecx
c000aa88:	39 d5                	cmp    ebp,edx
c000aa8a:	7c ce                	jl     c000aa5a <sinc_mono_vari_process+0x119>
c000aa8c:	dd 04 24             	fld    QWORD PTR [esp]
c000aa8f:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000aa92:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa96:	dd 1e                	fstp   QWORD PTR [esi]
c000aa98:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000aa9b:	99                   	cdq    
c000aa9c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aa9f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000aaa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000aaa5:	99                   	cdq    
c000aaa6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aaa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaac:	31 c0                	xor    eax,eax
c000aaae:	e9 04 01 00 00       	jmp    c000abb7 <sinc_mono_vari_process+0x276>
c000aab3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab7:	dd 04 24             	fld    QWORD PTR [esp]
c000aaba:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000aabd:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000aac1:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000aac5:	d9 c9                	fxch   st(1)
c000aac7:	de d9                	fcompp 
c000aac9:	df e0                	fnstsw ax
c000aacb:	9e                   	sahf   
c000aacc:	77 be                	ja     c000aa8c <sinc_mono_vari_process+0x14b>
c000aace:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000aad2:	7e 31                	jle    c000ab05 <sinc_mono_vari_process+0x1c4>
c000aad4:	83 ec 10             	sub    esp,0x10
c000aad7:	dd 06                	fld    QWORD PTR [esi]
c000aad9:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000aadc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aadf:	e8 7c 3e 01 00       	call   c001e960 <fabs>
c000aae4:	83 c4 10             	add    esp,0x10
c000aae7:	dc 1d 38 88 03 c0    	fcomp  QWORD PTR ds:0xc0038838
c000aaed:	df e0                	fnstsw ax
c000aaef:	9e                   	sahf   
c000aaf0:	76 13                	jbe    c000ab05 <sinc_mono_vari_process+0x1c4>
c000aaf2:	dd 06                	fld    QWORD PTR [esi]
c000aaf4:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000aaf7:	d8 e1                	fsub   st,st(1)
c000aaf9:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000aafc:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000aaff:	de c1                	faddp  st(1),st
c000ab01:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000ab05:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000ab08:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ab0c:	d9 e8                	fld1   
c000ab0e:	d8 d9                	fcomp  st(1)
c000ab10:	df e0                	fnstsw ax
c000ab12:	9e                   	sahf   
c000ab13:	77 04                	ja     c000ab19 <sinc_mono_vari_process+0x1d8>
c000ab15:	dd d8                	fstp   st(0)
c000ab17:	d9 e8                	fld1   
c000ab19:	de c9                	fmulp  st(1),st
c000ab1b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab1f:	50                   	push   eax
c000ab20:	50                   	push   eax
c000ab21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab29:	e8 2e f2 ff ff       	call   c0009d5c <double_to_fp>
c000ab2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab32:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab36:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab3a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab3d:	e8 1a f2 ff ff       	call   c0009d5c <double_to_fp>
c000ab42:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ab46:	89 c1                	mov    ecx,eax
c000ab48:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000ab4c:	89 d8                	mov    eax,ebx
c000ab4e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000ab51:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000ab55:	e8 7b e7 ff ff       	call   c00092d5 <calc_output_single>
c000ab5a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab5d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ab60:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab64:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000ab67:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000ab6a:	d9 e8                	fld1   
c000ab6c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000ab70:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000ab74:	dd 14 24             	fst    QWORD PTR [esp]
c000ab77:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000ab7b:	e8 ef f1 ff ff       	call   c0009d6f <fmod_one>
c000ab80:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ab83:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab8b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000ab8f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab92:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000ab96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab9a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab9d:	e8 de 3d 01 00       	call   c001e980 <lrint>
c000aba2:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aba7:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000abab:	99                   	cdq    
c000abac:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000abaf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000abb2:	e9 86 fe ff ff       	jmp    c000aa3d <sinc_mono_vari_process+0xfc>
c000abb7:	83 c4 3c             	add    esp,0x3c
c000abba:	5b                   	pop    ebx
c000abbb:	5e                   	pop    esi
c000abbc:	5f                   	pop    edi
c000abbd:	5d                   	pop    ebp
c000abbe:	c3                   	ret    

c000abbf <sinc_get_name>:
c000abbf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abc3:	31 c0                	xor    eax,eax
c000abc5:	83 fa 02             	cmp    edx,0x2
c000abc8:	77 07                	ja     c000abd1 <sinc_get_name+0x12>
c000abca:	8b 04 95 e0 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe20]
c000abd1:	c3                   	ret    

c000abd2 <sinc_get_description>:
c000abd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abd6:	31 c0                	xor    eax,eax
c000abd8:	83 fa 02             	cmp    edx,0x2
c000abdb:	77 07                	ja     c000abe4 <sinc_get_description+0x12>
c000abdd:	8b 04 95 d4 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe2c]
c000abe4:	c3                   	ret    

c000abe5 <sinc_set_converter>:
c000abe5:	55                   	push   ebp
c000abe6:	57                   	push   edi
c000abe7:	56                   	push   esi
c000abe8:	53                   	push   ebx
c000abe9:	81 ec 5c 08 00 00    	sub    esp,0x85c
c000abef:	8b 9c 24 70 08 00 00 	mov    ebx,DWORD PTR [esp+0x870]
c000abf6:	8b ac 24 74 08 00 00 	mov    ebp,DWORD PTR [esp+0x874]
c000abfd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ac00:	85 c0                	test   eax,eax
c000ac02:	74 13                	je     c000ac17 <sinc_set_converter+0x32>
c000ac04:	83 ec 0c             	sub    esp,0xc
c000ac07:	50                   	push   eax
c000ac08:	e8 e8 28 00 00       	call   c000d4f5 <free>
c000ac0d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	56                   	push   esi
c000ac18:	68 44 08 00 00       	push   0x844
c000ac1d:	6a 00                	push   0x0
c000ac1f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ac23:	56                   	push   esi
c000ac24:	e8 af 5a ff ff       	call   c00006d8 <memset>
c000ac29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac2c:	c7 44 24 1c 50 50 6a 02 	mov    DWORD PTR [esp+0x1c],0x26a5050
c000ac34:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ac38:	b8 0b 00 00 00       	mov    eax,0xb
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	81 fa 80 00 00 00    	cmp    edx,0x80
c000ac46:	0f 8f 58 01 00 00    	jg     c000ada4 <sinc_set_converter+0x1bf>
c000ac4c:	83 fa 01             	cmp    edx,0x1
c000ac4f:	75 10                	jne    c000ac61 <sinc_set_converter+0x7c>
c000ac51:	c7 43 24 41 a9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a941
c000ac58:	c7 43 20 41 a9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a941
c000ac5f:	eb 4d                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac61:	83 fa 02             	cmp    edx,0x2
c000ac64:	75 10                	jne    c000ac76 <sinc_set_converter+0x91>
c000ac66:	c7 43 24 c2 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6c2
c000ac6d:	c7 43 20 c2 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6c2
c000ac74:	eb 38                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac76:	83 fa 04             	cmp    edx,0x4
c000ac79:	75 10                	jne    c000ac8b <sinc_set_converter+0xa6>
c000ac7b:	c7 43 24 43 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a443
c000ac82:	c7 43 20 43 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a443
c000ac89:	eb 23                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac8b:	83 fa 06             	cmp    edx,0x6
c000ac8e:	75 10                	jne    c000aca0 <sinc_set_converter+0xbb>
c000ac90:	c7 43 24 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1c4
c000ac97:	c7 43 20 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1c4
c000ac9e:	eb 0e                	jmp    c000acae <sinc_set_converter+0xc9>
c000aca0:	c7 43 24 40 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f40
c000aca7:	c7 43 20 40 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f40
c000acae:	c7 43 28 f9 9c 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009cf9
c000acb5:	83 fd 01             	cmp    ebp,0x1
c000acb8:	74 28                	je     c000ace2 <sinc_set_converter+0xfd>
c000acba:	b8 0a 00 00 00       	mov    eax,0xa
c000acbf:	83 fd 02             	cmp    ebp,0x2
c000acc2:	0f 85 dc 00 00 00    	jne    c000ada4 <sinc_set_converter+0x1bf>
c000acc8:	c7 44 24 3c a4 60 03 c0 	mov    DWORD PTR [esp+0x3c],0xc00360a4
c000acd0:	c7 44 24 24 9e 09 00 00 	mov    DWORD PTR [esp+0x24],0x99e
c000acd8:	c7 44 24 28 80 00 00 00 	mov    DWORD PTR [esp+0x28],0x80
c000ace0:	eb 18                	jmp    c000acfa <sinc_set_converter+0x115>
c000ace2:	c7 44 24 3c 04 02 02 c0 	mov    DWORD PTR [esp+0x3c],0xc0020204
c000acea:	c7 44 24 24 a4 57 00 00 	mov    DWORD PTR [esp+0x24],0x57a4
c000acf2:	c7 44 24 28 eb 01 00 00 	mov    DWORD PTR [esp+0x28],0x1eb
c000acfa:	83 ec 10             	sub    esp,0x10
c000acfd:	d9 05 4c 88 03 c0    	fld    DWORD PTR ds:0xc003884c
c000ad03:	da 4c 24 34          	fimul  DWORD PTR [esp+0x34]
c000ad07:	da 74 24 38          	fidiv  DWORD PTR [esp+0x38]
c000ad0b:	d8 0d 50 88 03 c0    	fmul   DWORD PTR ds:0xc0038850
c000ad11:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ad14:	e8 67 3c 01 00       	call   c001e980 <lrint>
c000ad19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ad1d:	83 c4 10             	add    esp,0x10
c000ad20:	3d 00 10 00 00       	cmp    eax,0x1000
c000ad25:	7d 05                	jge    c000ad2c <sinc_set_converter+0x147>
c000ad27:	b8 00 10 00 00       	mov    eax,0x1000
c000ad2c:	0f af c2             	imul   eax,edx
c000ad2f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ad33:	51                   	push   ecx
c000ad34:	8d 84 02 11 02 00 00 	lea    eax,[edx+eax*1+0x211]
c000ad3b:	51                   	push   ecx
c000ad3c:	c1 e0 02             	shl    eax,0x2
c000ad3f:	50                   	push   eax
c000ad40:	6a 01                	push   0x1
c000ad42:	e8 ce 27 00 00       	call   c000d515 <calloc>
c000ad47:	83 c4 10             	add    esp,0x10
c000ad4a:	89 c5                	mov    ebp,eax
c000ad4c:	b8 01 00 00 00       	mov    eax,0x1
c000ad51:	85 ed                	test   ebp,ebp
c000ad53:	74 4f                	je     c000ada4 <sinc_set_converter+0x1bf>
c000ad55:	b9 11 02 00 00       	mov    ecx,0x211
c000ad5a:	fc                   	cld    
c000ad5b:	89 ef                	mov    edi,ebp
c000ad5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad5f:	50                   	push   eax
c000ad60:	68 44 08 00 00       	push   0x844
c000ad65:	68 ee 00 00 00       	push   0xee
c000ad6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ad6e:	50                   	push   eax
c000ad6f:	e8 64 59 ff ff       	call   c00006d8 <memset>
c000ad74:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000ad77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad7a:	e8 7a ef ff ff       	call   c0009cf9 <sinc_reset>
c000ad7f:	bb 01 00 00 00       	mov    ebx,0x1
c000ad84:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	31 c9                	xor    ecx,ecx
c000ad8c:	89 da                	mov    edx,ebx
c000ad8e:	d3 e2                	shl    edx,cl
c000ad90:	39 c2                	cmp    edx,eax
c000ad92:	7d 05                	jge    c000ad99 <sinc_set_converter+0x1b4>
c000ad94:	09 d0                	or     eax,edx
c000ad96:	41                   	inc    ecx
c000ad97:	eb f3                	jmp    c000ad8c <sinc_set_converter+0x1a7>
c000ad99:	31 c0                	xor    eax,eax
c000ad9b:	83 f9 15             	cmp    ecx,0x15
c000ad9e:	0f 9d c0             	setge  al
c000ada1:	8d 04 c0             	lea    eax,[eax+eax*8]
c000ada4:	81 c4 5c 08 00 00    	add    esp,0x85c
c000adaa:	5b                   	pop    ebx
c000adab:	5e                   	pop    esi
c000adac:	5f                   	pop    edi
c000adad:	5d                   	pop    ebp
c000adae:	c3                   	ret    

c000adaf <is_bad_src_ratio>:
c000adaf:	83 ec 0c             	sub    esp,0xc
c000adb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc1:	dd 04 24             	fld    QWORD PTR [esp]
c000adc4:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c000adca:	de d9                	fcompp 
c000adcc:	df e0                	fnstsw ax
c000adce:	f6 c4 45             	test   ah,0x45
c000add1:	74 10                	je     c000ade3 <is_bad_src_ratio+0x34>
c000add3:	dd 04 24             	fld    QWORD PTR [esp]
c000add6:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c000addc:	df e0                	fnstsw ax
c000adde:	f6 c4 45             	test   ah,0x45
c000ade1:	75 07                	jne    c000adea <is_bad_src_ratio+0x3b>
c000ade3:	b8 01 00 00 00       	mov    eax,0x1
c000ade8:	eb 05                	jmp    c000adef <is_bad_src_ratio+0x40>
c000adea:	b8 00 00 00 00       	mov    eax,0x0
c000adef:	83 c4 0c             	add    esp,0xc
c000adf2:	c3                   	ret    

c000adf3 <fmod_one>:
c000adf3:	83 ec 2c             	sub    esp,0x2c
c000adf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ae02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae06:	83 ec 08             	sub    esp,0x8
c000ae09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae11:	e8 6a 3b 01 00       	call   c001e980 <lrint>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae1d:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000ae21:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ae25:	de e1                	fsubrp st(1),st
c000ae27:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ae2b:	d9 ee                	fldz   
c000ae2d:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000ae31:	df e0                	fnstsw ax
c000ae33:	f6 c4 45             	test   ah,0x45
c000ae36:	75 0a                	jne    c000ae42 <fmod_one+0x4f>
c000ae38:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae3c:	d9 e8                	fld1   
c000ae3e:	de c1                	faddp  st(1),st
c000ae40:	eb 04                	jmp    c000ae46 <fmod_one+0x53>
c000ae42:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae46:	83 c4 2c             	add    esp,0x2c
c000ae49:	c3                   	ret    

c000ae4a <zoh_vari_process>:
c000ae4a:	55                   	push   ebp
c000ae4b:	57                   	push   edi
c000ae4c:	56                   	push   esi
c000ae4d:	53                   	push   ebx
c000ae4e:	83 ec 2c             	sub    esp,0x2c
c000ae51:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000ae55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ae59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ae61:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000ae65:	0f 8e 34 02 00 00    	jle    c000b09f <zoh_vari_process+0x255>
c000ae6b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000ae6e:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ae76:	85 db                	test   ebx,ebx
c000ae78:	0f 84 21 02 00 00    	je     c000b09f <zoh_vari_process+0x255>
c000ae7e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ae81:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ae85:	74 19                	je     c000aea0 <zoh_vari_process+0x56>
c000ae87:	31 d2                	xor    edx,edx
c000ae89:	39 c2                	cmp    edx,eax
c000ae8b:	7d 0c                	jge    c000ae99 <zoh_vari_process+0x4f>
c000ae8d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae8f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ae92:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ae96:	42                   	inc    edx
c000ae97:	eb f0                	jmp    c000ae89 <zoh_vari_process+0x3f>
c000ae99:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aea0:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aea3:	0f af d0             	imul   edx,eax
c000aea6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aea9:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aead:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aeb4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aeb7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aebe:	dd 07                	fld    QWORD PTR [edi]
c000aec0:	dd 14 24             	fst    QWORD PTR [esp]
c000aec3:	50                   	push   eax
c000aec4:	50                   	push   eax
c000aec5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aec8:	e8 e2 fe ff ff       	call   c000adaf <is_bad_src_ratio>
c000aecd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aed1:	5a                   	pop    edx
c000aed2:	59                   	pop    ecx
c000aed3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aed8:	0f 85 b9 01 00 00    	jne    c000b097 <zoh_vari_process+0x24d>
c000aede:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aee1:	d9 e8                	fld1   
c000aee3:	d8 d1                	fcom   st(1)
c000aee5:	df e0                	fnstsw ax
c000aee7:	9e                   	sahf   
c000aee8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aeec:	0f 86 85 00 00 00    	jbe    c000af77 <zoh_vari_process+0x12d>
c000aef2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aef5:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aef8:	7d 7d                	jge    c000af77 <zoh_vari_process+0x12d>
c000aefa:	d9 c0                	fld    st(0)
c000aefc:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aeff:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000af02:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000af05:	df e0                	fnstsw ax
c000af07:	9e                   	sahf   
c000af08:	73 6d                	jae    c000af77 <zoh_vari_process+0x12d>
c000af0a:	85 d2                	test   edx,edx
c000af0c:	7e 38                	jle    c000af46 <zoh_vari_process+0xfc>
c000af0e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000af12:	83 ec 10             	sub    esp,0x10
c000af15:	dd 07                	fld    QWORD PTR [edi]
c000af17:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000af1a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af1d:	e8 3e 3a 01 00       	call   c001e960 <fabs>
c000af22:	83 c4 10             	add    esp,0x10
c000af25:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c000af2b:	df e0                	fnstsw ax
c000af2d:	9e                   	sahf   
c000af2e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000af32:	76 12                	jbe    c000af46 <zoh_vari_process+0xfc>
c000af34:	dd 07                	fld    QWORD PTR [edi]
c000af36:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000af39:	d8 e1                	fsub   st,st(1)
c000af3b:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000af3e:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000af41:	de c1                	faddp  st(1),st
c000af43:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af46:	31 c0                	xor    eax,eax
c000af48:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000af4b:	7e 13                	jle    c000af60 <zoh_vari_process+0x116>
c000af4d:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000af51:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000af54:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000af57:	40                   	inc    eax
c000af58:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000af5b:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000af5e:	eb e8                	jmp    c000af48 <zoh_vari_process+0xfe>
c000af60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af64:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af67:	de c1                	faddp  st(1),st
c000af69:	e9 73 ff ff ff       	jmp    c000aee1 <zoh_vari_process+0x97>
c000af6e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af72:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af75:	de c1                	faddp  st(1),st
c000af77:	83 ec 10             	sub    esp,0x10
c000af7a:	dd 14 24             	fst    QWORD PTR [esp]
c000af7d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af81:	e8 6d fe ff ff       	call   c000adf3 <fmod_one>
c000af86:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000af89:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000af8d:	d8 e1                	fsub   st,st(1)
c000af8f:	d9 c9                	fxch   st(1)
c000af91:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af95:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af98:	e8 e3 39 01 00       	call   c001e980 <lrint>
c000af9d:	83 c4 10             	add    esp,0x10
c000afa0:	0f af e8             	imul   ebp,eax
c000afa3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000afa6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000afa9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000afad:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000afb0:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000afb3:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000afb6:	0f 8d 82 00 00 00    	jge    c000b03e <zoh_vari_process+0x1f4>
c000afbc:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000afc0:	d9 c0                	fld    st(0)
c000afc2:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000afc5:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000afc9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000afcd:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000afd1:	de d9                	fcompp 
c000afd3:	df e0                	fnstsw ax
c000afd5:	9e                   	sahf   
c000afd6:	72 66                	jb     c000b03e <zoh_vari_process+0x1f4>
c000afd8:	85 d2                	test   edx,edx
c000afda:	7e 38                	jle    c000b014 <zoh_vari_process+0x1ca>
c000afdc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000afe0:	83 ec 10             	sub    esp,0x10
c000afe3:	dd 07                	fld    QWORD PTR [edi]
c000afe5:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000afe8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000afeb:	e8 70 39 01 00       	call   c001e960 <fabs>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c000aff9:	df e0                	fnstsw ax
c000affb:	9e                   	sahf   
c000affc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000b000:	76 12                	jbe    c000b014 <zoh_vari_process+0x1ca>
c000b002:	dd 07                	fld    QWORD PTR [edi]
c000b004:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000b007:	d8 e1                	fsub   st,st(1)
c000b009:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000b00c:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000b00f:	de c1                	faddp  st(1),st
c000b011:	dd 1c 24             	fstp   QWORD PTR [esp]
c000b014:	31 d2                	xor    edx,edx
c000b016:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b019:	39 d0                	cmp    eax,edx
c000b01b:	0f 8e 4d ff ff ff    	jle    c000af6e <zoh_vari_process+0x124>
c000b021:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000b024:	29 c1                	sub    ecx,eax
c000b026:	89 c8                	mov    eax,ecx
c000b028:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b02a:	01 d0                	add    eax,edx
c000b02c:	42                   	inc    edx
c000b02d:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000b030:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000b033:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b036:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000b039:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000b03c:	eb d8                	jmp    c000b016 <zoh_vari_process+0x1cc>
c000b03e:	39 e9                	cmp    ecx,ebp
c000b040:	7d 13                	jge    c000b055 <zoh_vari_process+0x20b>
c000b042:	89 e8                	mov    eax,ebp
c000b044:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000b047:	29 c8                	sub    eax,ecx
c000b049:	99                   	cdq    
c000b04a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b04d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b051:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000b055:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000b058:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b05b:	85 c0                	test   eax,eax
c000b05d:	7f 1b                	jg     c000b07a <zoh_vari_process+0x230>
c000b05f:	dd 04 24             	fld    QWORD PTR [esp]
c000b062:	dd 1f                	fstp   QWORD PTR [edi]
c000b064:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b067:	99                   	cdq    
c000b068:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b06b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000b06e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b071:	99                   	cdq    
c000b072:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b075:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000b078:	eb 25                	jmp    c000b09f <zoh_vari_process+0x255>
c000b07a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b07d:	31 d2                	xor    edx,edx
c000b07f:	29 e8                	sub    eax,ebp
c000b081:	c1 e0 02             	shl    eax,0x2
c000b084:	39 d5                	cmp    ebp,edx
c000b086:	7e d7                	jle    c000b05f <zoh_vari_process+0x215>
c000b088:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b08a:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000b08d:	83 c0 04             	add    eax,0x4
c000b090:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000b094:	42                   	inc    edx
c000b095:	eb ed                	jmp    c000b084 <zoh_vari_process+0x23a>
c000b097:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000b09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a3:	83 c4 2c             	add    esp,0x2c
c000b0a6:	5b                   	pop    ebx
c000b0a7:	5e                   	pop    esi
c000b0a8:	5f                   	pop    edi
c000b0a9:	5d                   	pop    ebp
c000b0aa:	c3                   	ret    

c000b0ab <zoh_reset>:
c000b0ab:	83 ec 0c             	sub    esp,0xc
c000b0ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000b0b5:	85 c0                	test   eax,eax
c000b0b7:	74 20                	je     c000b0d9 <zoh_reset+0x2e>
c000b0b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000b0bc:	83 c0 1c             	add    eax,0x1c
c000b0bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000b0c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000b0c9:	c1 e2 02             	shl    edx,0x2
c000b0cc:	51                   	push   ecx
c000b0cd:	52                   	push   edx
c000b0ce:	6a 00                	push   0x0
c000b0d0:	50                   	push   eax
c000b0d1:	e8 02 56 ff ff       	call   c00006d8 <memset>
c000b0d6:	83 c4 10             	add    esp,0x10
c000b0d9:	83 c4 0c             	add    esp,0xc
c000b0dc:	c3                   	ret    

c000b0dd <zoh_get_name>:
c000b0dd:	31 c0                	xor    eax,eax
c000b0df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0e4:	75 05                	jne    c000b0eb <zoh_get_name+0xe>
c000b0e6:	b8 54 88 03 c0       	mov    eax,0xc0038854
c000b0eb:	c3                   	ret    

c000b0ec <zoh_get_description>:
c000b0ec:	31 c0                	xor    eax,eax
c000b0ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0f3:	75 05                	jne    c000b0fa <zoh_get_description+0xe>
c000b0f5:	b8 65 88 03 c0       	mov    eax,0xc0038865
c000b0fa:	c3                   	ret    

c000b0fb <zoh_set_converter>:
c000b0fb:	53                   	push   ebx
c000b0fc:	b8 0a 00 00 00       	mov    eax,0xa
c000b101:	83 ec 08             	sub    esp,0x8
c000b104:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b108:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000b10d:	75 6e                	jne    c000b17d <zoh_set_converter+0x82>
c000b10f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b112:	85 c0                	test   eax,eax
c000b114:	74 13                	je     c000b129 <zoh_set_converter+0x2e>
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	50                   	push   eax
c000b11a:	e8 d6 23 00 00       	call   c000d4f5 <free>
c000b11f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b126:	83 c4 10             	add    esp,0x10
c000b129:	50                   	push   eax
c000b12a:	50                   	push   eax
c000b12b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b12e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000b135:	50                   	push   eax
c000b136:	6a 01                	push   0x1
c000b138:	e8 d8 23 00 00       	call   c000d515 <calloc>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	89 c2                	mov    edx,eax
c000b142:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000b145:	85 d2                	test   edx,edx
c000b147:	b8 01 00 00 00       	mov    eax,0x1
c000b14c:	74 2f                	je     c000b17d <zoh_set_converter+0x82>
c000b14e:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b15a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b15d:	c7 43 24 4a ae 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ae4a
c000b164:	c7 43 20 4a ae 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ae4a
c000b16b:	c7 43 28 ab b0 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000b0ab
c000b172:	53                   	push   ebx
c000b173:	e8 33 ff ff ff       	call   c000b0ab <zoh_reset>
c000b178:	83 c4 10             	add    esp,0x10
c000b17b:	31 c0                	xor    eax,eax
c000b17d:	83 c4 08             	add    esp,0x8
c000b180:	5b                   	pop    ebx
c000b181:	c3                   	ret    

c000b182 <Computer::close(int, int, void*)>:
c000b182:	57                   	push   edi
c000b183:	56                   	push   esi
c000b184:	53                   	push   ebx
c000b185:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b189:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b18d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b191:	83 ec 0c             	sub    esp,0xc
c000b194:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000b19a:	e8 7b 87 00 00       	call   c001391a <Device::closeAll()>
c000b19f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1aa:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000b1ae:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000b1b6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b1ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1be:	5b                   	pop    ebx
c000b1bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000b1c2:	5e                   	pop    esi
c000b1c3:	5f                   	pop    edi
c000b1c4:	ff e0                	jmp    eax

c000b1c6 <Computer::Computer()>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	83 ec 08             	sub    esp,0x8
c000b1d0:	68 9c 88 03 c0       	push   0xc003889c
c000b1d5:	50                   	push   eax
c000b1d6:	e8 b9 87 00 00       	call   c0013994 <Device::Device(char const*)>
c000b1db:	83 c4 10             	add    esp,0x10
c000b1de:	ba 18 89 03 c0       	mov    edx,0xc0038918
c000b1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e7:	89 10                	mov    DWORD PTR [eax],edx
c000b1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ed:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fb:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000b205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b209:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000b20f:	83 ca 04             	or     edx,0x4
c000b212:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000b218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b222:	0f b6 d0             	movzx  edx,al
c000b225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b229:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000b230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b234:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b23a:	0f b6 d0             	movzx  edx,al
c000b23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b241:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000b246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b24a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b250:	8d 50 01             	lea    edx,[eax+0x1]
c000b253:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b257:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b25d:	0f b6 d0             	movzx  edx,al
c000b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b264:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b268:	83 e1 3f             	and    ecx,0x3f
c000b26b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b279:	0f b6 d0             	movzx  edx,al
c000b27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b280:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000b287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b291:	0f b6 d0             	movzx  edx,al
c000b294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b298:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2a7:	8d 50 01             	lea    edx,[eax+0x1]
c000b2aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b2b4:	0f b6 d0             	movzx  edx,al
c000b2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b2bf:	83 e1 3f             	and    ecx,0x3f
c000b2c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2d0:	0f b6 d0             	movzx  edx,al
c000b2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000b2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2e8:	0f b6 d0             	movzx  edx,al
c000b2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ef:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2fe:	8d 50 01             	lea    edx,[eax+0x1]
c000b301:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b305:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b30b:	0f b6 d0             	movzx  edx,al
c000b30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b312:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b316:	83 e1 3f             	and    ecx,0x3f
c000b319:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b31d:	90                   	nop
c000b31e:	83 c4 0c             	add    esp,0xc
c000b321:	c3                   	ret    

c000b322 <Computer::setBootMessage(char const*)>:
c000b322:	c3                   	ret    
c000b323:	90                   	nop

c000b324 <Computer::start()>:
c000b324:	56                   	push   esi
c000b325:	53                   	push   ebx
c000b326:	50                   	push   eax
c000b327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b32b:	e8 5c 30 00 00       	call   c000e38c <lockScheduler()>
c000b330:	e8 8b 33 00 00       	call   c000e6c0 <schedule()>
c000b335:	e8 54 30 00 00       	call   c000e38e <unlockScheduler()>
c000b33a:	fb                   	sti    
c000b33b:	83 ec 0c             	sub    esp,0xc
c000b33e:	68 3b 07 00 00       	push   0x73b
c000b343:	e8 52 71 00 00       	call   c001249a <operator new(unsigned long)>
c000b348:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b34f:	89 c6                	mov    esi,eax
c000b351:	ff 35 fc bc 03 c0    	push   DWORD PTR ds:0xc003bcfc
c000b357:	68 a5 88 03 c0       	push   0xc00388a5
c000b35c:	6a 01                	push   0x1
c000b35e:	50                   	push   eax
c000b35f:	e8 88 2e 00 00       	call   c000e1ec <Process::Process(bool, char const*, Process*, char**)>
c000b364:	83 c4 20             	add    esp,0x20
c000b367:	68 ff 00 00 00       	push   0xff
c000b36c:	6a 00                	push   0x0
c000b36e:	68 59 c9 00 c0       	push   0xc000c959
c000b373:	56                   	push   esi
c000b374:	e8 3d 31 00 00       	call   c000e4b6 <Process::createThread(void (*)(void*), void*, int)>
c000b379:	6a 7a                	push   0x7a
c000b37b:	6a 00                	push   0x0
c000b37d:	68 fc ee 00 c0       	push   0xc000eefc
c000b382:	ff 35 fc bc 03 c0    	push   DWORD PTR ds:0xc003bcfc
c000b388:	e8 29 31 00 00       	call   c000e4b6 <Process::createThread(void (*)(void*), void*, int)>
c000b38d:	83 c4 20             	add    esp,0x20
c000b390:	a3 b0 bc 03 c0       	mov    ds:0xc003bcb0,eax
c000b395:	c6 05 ad ba 03 c0 01 	mov    BYTE PTR ds:0xc003baad,0x1
c000b39c:	e8 53 73 00 00       	call   c00126f4 <initVFS()>
c000b3a1:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b3a7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3a9:	6a 00                	push   0x0
c000b3ab:	6a 00                	push   0x0
c000b3ad:	6a 00                	push   0x0
c000b3af:	50                   	push   eax
c000b3b0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b3b3:	e8 e1 48 00 00       	call   c000fc99 <setupSystemCalls()>
c000b3b8:	e8 35 7e 00 00       	call   c00131f2 <loadClockSettings()>
c000b3bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3c0:	e8 29 85 00 00       	call   c00138ee <Device::loadDriversForAll()>
c000b3c5:	c7 04 24 b2 88 03 c0 	mov    DWORD PTR [esp],0xc00388b2
c000b3cc:	8b 1d a8 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003baa8
c000b3d2:	e8 f4 12 00 00       	call   c000c6cb <loadDLL(char const*)>
c000b3d7:	5a                   	pop    edx
c000b3d8:	59                   	pop    ecx
c000b3d9:	53                   	push   ebx
c000b3da:	50                   	push   eax
c000b3db:	e8 b4 13 00 00       	call   c000c794 <executeDLL(unsigned long, void*)>
c000b3e0:	c7 04 24 94 a0 03 c0 	mov    DWORD PTR [esp],0xc003a094
c000b3e7:	e8 fe 1a 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000b3ec:	83 c4 10             	add    esp,0x10
c000b3ef:	83 ec 0c             	sub    esp,0xc
c000b3f2:	6a 02                	push   0x2
c000b3f4:	e8 92 35 00 00       	call   c000e98b <blockTask(TaskState)>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	eb f1                	jmp    c000b3ef <Computer::start()+0xcb>

c000b3fe <firstTask()>:
c000b3fe:	83 ec 18             	sub    esp,0x18
c000b401:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c000b407:	e8 18 ff ff ff       	call   c000b324 <Computer::start()>

c000b40c <Computer::detectFeatures()>:
c000b40c:	55                   	push   ebp
c000b40d:	57                   	push   edi
c000b40e:	56                   	push   esi
c000b40f:	53                   	push   ebx
c000b410:	83 ec 1c             	sub    esp,0x1c
c000b413:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b417:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b421:	e8 c6 4e ff ff       	call   c00002ec <detectCPUID>
c000b426:	85 c0                	test   eax,eax
c000b428:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b42e:	0f 95 c2             	setne  dl
c000b431:	83 e0 fd             	and    eax,0xfffffffd
c000b434:	d1 e2                	shl    edx,1
c000b436:	09 d0                	or     eax,edx
c000b438:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b43e:	a8 02                	test   al,0x2
c000b440:	75 46                	jne    c000b488 <Computer::detectFeatures()+0x7c>
c000b442:	f6 05 55 bc 03 c0 04 	test   BYTE PTR ds:0xc003bc55,0x4
c000b449:	74 07                	je     c000b452 <Computer::detectFeatures()+0x46>
c000b44b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b452:	e8 af 2f 01 00       	call   c001e406 <x87Detect>
c000b457:	83 e0 01             	and    eax,0x1
c000b45a:	c1 e0 04             	shl    eax,0x4
c000b45d:	88 c2                	mov    dl,al
c000b45f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b465:	83 e0 ef             	and    eax,0xffffffef
c000b468:	09 d0                	or     eax,edx
c000b46a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b470:	a8 10                	test   al,0x10
c000b472:	0f 85 10 01 00 00    	jne    c000b588 <Computer::detectFeatures()+0x17c>
c000b478:	84 c0                	test   al,al
c000b47a:	0f 88 2b 01 00 00    	js     c000b5ab <Computer::detectFeatures()+0x19f>
c000b480:	83 c4 1c             	add    esp,0x1c
c000b483:	5b                   	pop    ebx
c000b484:	5e                   	pop    esi
c000b485:	5f                   	pop    edi
c000b486:	5d                   	pop    ebp
c000b487:	c3                   	ret    
c000b488:	83 ec 0c             	sub    esp,0xc
c000b48b:	6a 20                	push   0x20
c000b48d:	e8 87 bc 00 00       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c000b492:	83 e0 01             	and    eax,0x1
c000b495:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b49c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b4a2:	83 e0 f7             	and    eax,0xfffffff7
c000b4a5:	09 d0                	or     eax,edx
c000b4a7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b4ad:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b4b4:	e8 60 bc 00 00       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c000b4b9:	83 e0 01             	and    eax,0x1
c000b4bc:	88 c2                	mov    dl,al
c000b4be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4c4:	83 e0 fe             	and    eax,0xfffffffe
c000b4c7:	09 d0                	or     eax,edx
c000b4c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4cf:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b4d6:	e8 3e bc 00 00       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c000b4db:	c1 e0 07             	shl    eax,0x7
c000b4de:	88 c2                	mov    dl,al
c000b4e0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4e6:	83 e0 7f             	and    eax,0x7f
c000b4e9:	09 d0                	or     eax,edx
c000b4eb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4f1:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b4f8:	e8 1c bc 00 00       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	83 e0 01             	and    eax,0x1
c000b503:	c1 e0 05             	shl    eax,0x5
c000b506:	88 c2                	mov    dl,al
c000b508:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b50e:	83 e0 df             	and    eax,0xffffffdf
c000b511:	09 d0                	or     eax,edx
c000b513:	f7 05 54 bc 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003bc54,0x401
c000b51d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b523:	0f 84 a8 00 00 00    	je     c000b5d1 <Computer::detectFeatures()+0x1c5>
c000b529:	83 ec 0c             	sub    esp,0xc
c000b52c:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b533:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b537:	50                   	push   eax
c000b538:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b53c:	55                   	push   ebp
c000b53d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b541:	57                   	push   edi
c000b542:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b546:	56                   	push   esi
c000b547:	68 00 00 00 80       	push   0x80000000
c000b54c:	e8 45 bb 00 00       	call   c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b551:	83 c4 20             	add    esp,0x20
c000b554:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b55b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b55f:	0f 86 dd fe ff ff    	jbe    c000b442 <Computer::detectFeatures()+0x36>
c000b565:	83 ec 0c             	sub    esp,0xc
c000b568:	50                   	push   eax
c000b569:	55                   	push   ebp
c000b56a:	57                   	push   edi
c000b56b:	56                   	push   esi
c000b56c:	68 01 00 00 80       	push   0x80000001
c000b571:	e8 20 bb 00 00       	call   c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b576:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b580:	83 c4 20             	add    esp,0x20
c000b583:	e9 ba fe ff ff       	jmp    c000b442 <Computer::detectFeatures()+0x36>
c000b588:	e8 33 2e 01 00       	call   c001e3c0 <sseDetect>
c000b58d:	88 c2                	mov    dl,al
c000b58f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b595:	c1 e2 07             	shl    edx,0x7
c000b598:	83 e0 7f             	and    eax,0x7f
c000b59b:	09 d0                	or     eax,edx
c000b59d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b5a3:	84 c0                	test   al,al
c000b5a5:	0f 89 d5 fe ff ff    	jns    c000b480 <Computer::detectFeatures()+0x74>
c000b5ab:	e8 00 2e 01 00       	call   c001e3b0 <avxDetect>
c000b5b0:	83 e0 01             	and    eax,0x1
c000b5b3:	c1 e0 05             	shl    eax,0x5
c000b5b6:	88 c2                	mov    dl,al
c000b5b8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b5be:	83 e0 df             	and    eax,0xffffffdf
c000b5c1:	09 d0                	or     eax,edx
c000b5c3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b5c9:	83 c4 1c             	add    esp,0x1c
c000b5cc:	5b                   	pop    ebx
c000b5cd:	5e                   	pop    esi
c000b5ce:	5f                   	pop    edi
c000b5cf:	5d                   	pop    ebp
c000b5d0:	c3                   	ret    
c000b5d1:	83 ec 0c             	sub    esp,0xc
c000b5d4:	68 00 02 00 00       	push   0x200
c000b5d9:	e8 3b bb 00 00       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c000b5de:	83 c4 10             	add    esp,0x10
c000b5e1:	e9 43 ff ff ff       	jmp    c000b529 <Computer::detectFeatures()+0x11d>

c000b5e6 <Computer::displayFeatures()>:
c000b5e6:	c3                   	ret    
c000b5e7:	90                   	nop

c000b5e8 <Computer::rdmsr(unsigned int)>:
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5f6:	74 0a                	je     c000b602 <Computer::rdmsr(unsigned int)+0x1a>
c000b5f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5fc:	0f 32                	rdmsr  
c000b5fe:	83 c4 0c             	add    esp,0xc
c000b601:	c3                   	ret    
c000b602:	83 ec 0c             	sub    esp,0xc
c000b605:	68 ce 88 03 c0       	push   0xc00388ce
c000b60a:	e8 f9 19 00 00       	call   c000d008 <panic(char const*)>
c000b60f:	83 c4 10             	add    esp,0x10
c000b612:	eb e4                	jmp    c000b5f8 <Computer::rdmsr(unsigned int)+0x10>

c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b614:	57                   	push   edi
c000b615:	56                   	push   esi
c000b616:	52                   	push   edx
c000b617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b61b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b61f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b623:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b62a:	74 0e                	je     c000b63a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b62c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b630:	89 f0                	mov    eax,esi
c000b632:	89 fa                	mov    edx,edi
c000b634:	0f 30                	wrmsr  
c000b636:	58                   	pop    eax
c000b637:	5e                   	pop    esi
c000b638:	5f                   	pop    edi
c000b639:	c3                   	ret    
c000b63a:	83 ec 0c             	sub    esp,0xc
c000b63d:	68 d4 88 03 c0       	push   0xc00388d4
c000b642:	e8 c1 19 00 00       	call   c000d008 <panic(char const*)>
c000b647:	83 c4 10             	add    esp,0x10
c000b64a:	eb e0                	jmp    c000b62c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b64c <Computer::nmiEnabled()>:
c000b64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b650:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b656:	c3                   	ret    
c000b657:	90                   	nop

c000b658 <Computer::readCMOS(unsigned char)>:
c000b658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b663:	19 c0                	sbb    eax,eax
c000b665:	83 e0 80             	and    eax,0xffffff80
c000b668:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b66c:	e6 70                	out    0x70,al
c000b66e:	e4 71                	in     al,0x71
c000b670:	c3                   	ret    
c000b671:	90                   	nop

c000b672 <Computer::enableNMI(bool)>:
c000b672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b67a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b680:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b688:	eb ce                	jmp    c000b658 <Computer::readCMOS(unsigned char)>

c000b68a <Computer::open(int, int, void*)>:
c000b68a:	56                   	push   esi
c000b68b:	53                   	push   ebx
c000b68c:	83 ec 10             	sub    esp,0x10
c000b68f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b693:	f6 05 54 bc 03 c0 04 	test   BYTE PTR ds:0xc003bc54,0x4
c000b69a:	68 68 22 00 00       	push   0x2268
c000b69f:	0f 94 05 e0 ae 03 c0 	sete   BYTE PTR ds:0xc003aee0
c000b6a6:	e8 ef 6d 00 00       	call   c001249a <operator new(unsigned long)>
c000b6ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6ae:	89 c6                	mov    esi,eax
c000b6b0:	e8 23 b1 00 00       	call   c00167d8 <ACPI::ACPI()>
c000b6b5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b6bb:	58                   	pop    eax
c000b6bc:	5a                   	pop    edx
c000b6bd:	56                   	push   esi
c000b6be:	53                   	push   ebx
c000b6bf:	e8 e0 80 00 00       	call   c00137a4 <Device::addChild(Device*)>
c000b6c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6c7:	e8 40 fd ff ff       	call   c000b40c <Computer::detectFeatures()>
c000b6cc:	59                   	pop    ecx
c000b6cd:	5e                   	pop    esi
c000b6ce:	6a 01                	push   0x1
c000b6d0:	53                   	push   ebx
c000b6d1:	e8 9c ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b6d6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6dd:	e8 b8 6d 00 00       	call   c001249a <operator new(unsigned long)>
c000b6e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6e5:	89 c6                	mov    esi,eax
c000b6e7:	e8 f8 ba 00 00       	call   c00171e4 <CPU::CPU()>
c000b6ec:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6f2:	58                   	pop    eax
c000b6f3:	5a                   	pop    edx
c000b6f4:	56                   	push   esi
c000b6f5:	53                   	push   ebx
c000b6f6:	e8 a9 80 00 00       	call   c00137a4 <Device::addChild(Device*)>
c000b6fb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b701:	8b 10                	mov    edx,DWORD PTR [eax]
c000b703:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b707:	6a 00                	push   0x0
c000b709:	6a 00                	push   0x0
c000b70b:	50                   	push   eax
c000b70c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b70f:	83 c4 20             	add    esp,0x20
c000b712:	e8 f5 85 00 00       	call   c0013d0c <setupFPU()>
c000b717:	83 ec 08             	sub    esp,0x8
c000b71a:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b720:	50                   	push   eax
c000b721:	53                   	push   ebx
c000b722:	e8 7d 80 00 00       	call   c00137a4 <Device::addChild(Device*)>
c000b727:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b72d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b72f:	6a 00                	push   0x0
c000b731:	6a 00                	push   0x0
c000b733:	6a 00                	push   0x0
c000b735:	50                   	push   eax
c000b736:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b739:	83 c4 14             	add    esp,0x14
c000b73c:	68 fe b3 00 c0       	push   0xc000b3fe
c000b741:	e8 70 2e 00 00       	call   c000e5b6 <setupMultitasking(void (*)())>
c000b746:	83 c4 14             	add    esp,0x14
c000b749:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b74e:	5b                   	pop    ebx
c000b74f:	5e                   	pop    esi
c000b750:	c3                   	ret    
c000b751:	90                   	nop

c000b752 <Computer::disableNMI()>:
c000b752:	6a 00                	push   0x0
c000b754:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b758:	e8 15 ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b75d:	58                   	pop    eax
c000b75e:	5a                   	pop    edx
c000b75f:	c3                   	ret    

c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b764:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b76b:	19 c0                	sbb    eax,eax
c000b76d:	83 e0 80             	and    eax,0xffffff80
c000b770:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b774:	e6 70                	out    0x70,al
c000b776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b77a:	e6 71                	out    0x71,al
c000b77c:	c3                   	ret    
c000b77d:	90                   	nop

c000b77e <Computer::handleNMI()>:
c000b77e:	56                   	push   esi
c000b77f:	53                   	push   ebx
c000b780:	83 ec 10             	sub    esp,0x10
c000b783:	e4 92                	in     al,0x92
c000b785:	89 c6                	mov    esi,eax
c000b787:	e4 61                	in     al,0x61
c000b789:	68 da 88 03 c0       	push   0xc00388da
c000b78e:	88 c3                	mov    bl,al
c000b790:	e8 55 17 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000b795:	83 c4 10             	add    esp,0x10
c000b798:	83 e6 10             	and    esi,0x10
c000b79b:	75 0d                	jne    c000b7aa <Computer::handleNMI()+0x2c>
c000b79d:	f6 c3 40             	test   bl,0x40
c000b7a0:	75 1d                	jne    c000b7bf <Computer::handleNMI()+0x41>
c000b7a2:	84 db                	test   bl,bl
c000b7a4:	78 2d                	js     c000b7d3 <Computer::handleNMI()+0x55>
c000b7a6:	58                   	pop    eax
c000b7a7:	5b                   	pop    ebx
c000b7a8:	5e                   	pop    esi
c000b7a9:	c3                   	ret    
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 eb 88 03 c0       	push   0xc00388eb
c000b7b2:	e8 51 18 00 00       	call   c000d008 <panic(char const*)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	f6 c3 40             	test   bl,0x40
c000b7bd:	74 e3                	je     c000b7a2 <Computer::handleNMI()+0x24>
c000b7bf:	83 ec 0c             	sub    esp,0xc
c000b7c2:	68 f8 88 03 c0       	push   0xc00388f8
c000b7c7:	e8 3c 18 00 00       	call   c000d008 <panic(char const*)>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	84 db                	test   bl,bl
c000b7d1:	79 d3                	jns    c000b7a6 <Computer::handleNMI()+0x28>
c000b7d3:	c7 44 24 10 02 89 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038902
c000b7db:	5a                   	pop    edx
c000b7dc:	5b                   	pop    ebx
c000b7dd:	5e                   	pop    esi
c000b7de:	e9 25 18 00 00       	jmp    c000d008 <panic(char const*)>
c000b7e3:	90                   	nop

c000b7e4 <Computer::setDiskActivityLight(int, bool)>:
c000b7e4:	56                   	push   esi
c000b7e5:	53                   	push   ebx
c000b7e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7ea:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7ef:	77 1b                	ja     c000b80c <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7f1:	e4 92                	in     al,0x92
c000b7f3:	bb 40 00 00 00       	mov    ebx,0x40
c000b7f8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7fc:	89 da                	mov    edx,ebx
c000b7fe:	d3 e2                	shl    edx,cl
c000b800:	89 f1                	mov    ecx,esi
c000b802:	f7 d2                	not    edx
c000b804:	d3 e3                	shl    ebx,cl
c000b806:	21 d0                	and    eax,edx
c000b808:	09 d8                	or     eax,ebx
c000b80a:	e6 92                	out    0x92,al
c000b80c:	5b                   	pop    ebx
c000b80d:	5e                   	pop    esi
c000b80e:	c3                   	ret    

c000b80f <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b80f:	55                   	push   ebp
c000b810:	89 e5                	mov    ebp,esp
c000b812:	57                   	push   edi
c000b813:	56                   	push   esi
c000b814:	53                   	push   ebx
c000b815:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b81b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b81e:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b821:	85 c0                	test   eax,eax
c000b823:	0f 95 c1             	setne  cl
c000b826:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b82a:	0f 94 c2             	sete   dl
c000b82d:	84 d1                	test   cl,dl
c000b82f:	74 26                	je     c000b857 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b831:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b838:	74 1d                	je     c000b857 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b83a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b83d:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b843:	89 d6                	mov    esi,edx
c000b845:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b84b:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b851:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b854:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b857:	83 ec 0c             	sub    esp,0xc
c000b85a:	05 ff 0f 00 00       	add    eax,0xfff
c000b85f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b862:	6a 01                	push   0x1
c000b864:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b86a:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b870:	e8 94 5a 00 00       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	89 c6                	mov    esi,eax
c000b87a:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b880:	0f 86 21 01 00 00    	jbe    c000b9a7 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b886:	c1 eb 0c             	shr    ebx,0xc
c000b889:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b893:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b899:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b89c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b89f:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b8a5:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b8a8:	29 d8                	sub    eax,ebx
c000b8aa:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b8b0:	0f 83 f4 00 00 00    	jae    c000b9aa <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b8b6:	83 ec 0c             	sub    esp,0xc
c000b8b9:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b8bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b8c2:	3d 00 10 00 00       	cmp    eax,0x1000
c000b8c7:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b8c9:	52                   	push   edx
c000b8ca:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b8d0:	52                   	push   edx
c000b8d1:	76 05                	jbe    c000b8d8 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b8d3:	b8 00 10 00 00       	mov    eax,0x1000
c000b8d8:	31 d2                	xor    edx,edx
c000b8da:	52                   	push   edx
c000b8db:	50                   	push   eax
c000b8dc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b8df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b8e2:	83 c4 20             	add    esp,0x20
c000b8e5:	85 c0                	test   eax,eax
c000b8e7:	74 1f                	je     c000b908 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b8e9:	51                   	push   ecx
c000b8ea:	51                   	push   ecx
c000b8eb:	50                   	push   eax
c000b8ec:	68 3c 89 03 c0       	push   0xc003893c
c000b8f1:	e8 f4 15 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000b8f6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b8f9:	e8 41 5d 00 00       	call   c001163f <Virt::freeKernelVirtualPages(unsigned long)>
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	31 c0                	xor    eax,eax
c000b903:	e9 7c 01 00 00       	jmp    c000ba84 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b908:	e8 7f 2a 00 00       	call   c000e38c <lockScheduler()>
c000b90d:	e8 7d 21 00 00       	call   c000da8f <Phys::allocatePage()>
c000b912:	6a 07                	push   0x7
c000b914:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b91a:	56                   	push   esi
c000b91b:	50                   	push   eax
c000b91c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b922:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b925:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b92b:	e8 10 60 00 00       	call   c0011940 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b930:	83 c4 0c             	add    esp,0xc
c000b933:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b939:	6a 00                	push   0x0
c000b93b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b941:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b944:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b94a:	e8 4f 5e 00 00       	call   c001179e <VAS::mapOtherVASIn(bool, VAS*)>
c000b94f:	58                   	pop    eax
c000b950:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b956:	5a                   	pop    edx
c000b957:	68 07 04 00 00       	push   0x407
c000b95c:	53                   	push   ebx
c000b95d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b963:	50                   	push   eax
c000b964:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b96a:	6a 00                	push   0x0
c000b96c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b971:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b974:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b97a:	e8 c1 66 00 00       	call   c0012040 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b97f:	83 c4 1c             	add    esp,0x1c
c000b982:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b988:	68 00 10 00 00       	push   0x1000
c000b98d:	50                   	push   eax
c000b98e:	56                   	push   esi
c000b98f:	e8 cd 4c ff ff       	call   c0000661 <memcpy>
c000b994:	e8 f5 29 00 00       	call   c000e38e <unlockScheduler()>
c000b999:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b99f:	83 c4 10             	add    esp,0x10
c000b9a2:	e9 f5 fe ff ff       	jmp    c000b89c <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b9a7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b9aa:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b9b4:	0f 86 bc 00 00 00    	jbe    c000ba76 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b9ba:	e8 cd 29 00 00       	call   c000e38c <lockScheduler()>
c000b9bf:	51                   	push   ecx
c000b9c0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b9c6:	6a 00                	push   0x0
c000b9c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b9cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b9d0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b9d6:	e8 c3 5d 00 00       	call   c001179e <VAS::mapOtherVASIn(bool, VAS*)>
c000b9db:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b9e1:	83 c4 10             	add    esp,0x10
c000b9e4:	c1 e8 0c             	shr    eax,0xc
c000b9e7:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b9f1:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b9f7:	e8 93 20 00 00       	call   c000da8f <Phys::allocatePage()>
c000b9fc:	6a 07                	push   0x7
c000b9fe:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000ba04:	56                   	push   esi
c000ba05:	50                   	push   eax
c000ba06:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ba0c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000ba0f:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000ba15:	e8 26 5f 00 00       	call   c0011940 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ba1a:	58                   	pop    eax
c000ba1b:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000ba21:	5a                   	pop    edx
c000ba22:	68 07 04 00 00       	push   0x407
c000ba27:	53                   	push   ebx
c000ba28:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ba2e:	50                   	push   eax
c000ba2f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000ba35:	6a 00                	push   0x0
c000ba37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ba3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ba3f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ba45:	e8 f6 65 00 00       	call   c0012040 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000ba4a:	83 c4 1c             	add    esp,0x1c
c000ba4d:	68 00 10 00 00       	push   0x1000
c000ba52:	6a 00                	push   0x0
c000ba54:	56                   	push   esi
c000ba55:	e8 7e 4c ff ff       	call   c00006d8 <memset>
c000ba5a:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000ba60:	83 c4 10             	add    esp,0x10
c000ba63:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000ba69:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000ba6f:	77 86                	ja     c000b9f7 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000ba71:	e8 18 29 00 00       	call   c000e38e <unlockScheduler()>
c000ba76:	83 ec 0c             	sub    esp,0xc
c000ba79:	56                   	push   esi
c000ba7a:	e8 c0 5b 00 00       	call   c001163f <Virt::freeKernelVirtualPages(unsigned long)>
c000ba7f:	83 c4 10             	add    esp,0x10
c000ba82:	b0 01                	mov    al,0x1
c000ba84:	8d 65 f4             	lea    esp,[ebp-0xc]
c000ba87:	5b                   	pop    ebx
c000ba88:	5e                   	pop    esi
c000ba89:	5f                   	pop    edi
c000ba8a:	5d                   	pop    ebp
c000ba8b:	c3                   	ret    

c000ba8c <loadProgramIntoMemory(Process*, char const*)>:
c000ba8c:	55                   	push   ebp
c000ba8d:	57                   	push   edi
c000ba8e:	56                   	push   esi
c000ba8f:	53                   	push   ebx
c000ba90:	83 ec 48             	sub    esp,0x48
c000ba93:	68 14 01 00 00       	push   0x114
c000ba98:	e8 fd 69 00 00       	call   c001249a <operator new(unsigned long)>
c000ba9d:	83 c4 0c             	add    esp,0xc
c000baa0:	89 c6                	mov    esi,eax
c000baa2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000baa6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000baaa:	50                   	push   eax
c000baab:	e8 18 6e 00 00       	call   c00128c8 <File::File(char const*, Process*)>
c000bab0:	58                   	pop    eax
c000bab1:	5a                   	pop    edx
c000bab2:	6a 01                	push   0x1
c000bab4:	56                   	push   esi
c000bab5:	e8 72 6e 00 00       	call   c001292c <File::open(FileOpenMode)>
c000baba:	83 c4 10             	add    esp,0x10
c000babd:	85 c0                	test   eax,eax
c000babf:	0f 85 47 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bac5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	6a 34                	push   0x34
c000bad2:	e8 0e 1a 00 00       	call   c000d4e5 <malloc>
c000bad7:	89 c3                	mov    ebx,eax
c000bad9:	58                   	pop    eax
c000bada:	8b 06                	mov    eax,DWORD PTR [esi]
c000badc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000bae0:	57                   	push   edi
c000bae1:	53                   	push   ebx
c000bae2:	6a 00                	push   0x0
c000bae4:	6a 34                	push   0x34
c000bae6:	56                   	push   esi
c000bae7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000baea:	83 c4 20             	add    esp,0x20
c000baed:	85 c0                	test   eax,eax
c000baef:	0f 85 17 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000baf5:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000bafb:	0f 85 0b 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb01:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000bb04:	85 c0                	test   eax,eax
c000bb06:	0f 84 00 01 00 00    	je     c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb0c:	31 d2                	xor    edx,edx
c000bb0e:	55                   	push   ebp
c000bb0f:	52                   	push   edx
c000bb10:	50                   	push   eax
c000bb11:	56                   	push   esi
c000bb12:	e8 d3 6e 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000bb17:	83 c4 10             	add    esp,0x10
c000bb1a:	85 c0                	test   eax,eax
c000bb1c:	0f 85 ea 00 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000bb28:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb30:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb34:	0f af c2             	imul   eax,edx
c000bb37:	50                   	push   eax
c000bb38:	e8 a8 19 00 00       	call   c000d4e5 <malloc>
c000bb3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb44:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb4a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb4e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb52:	0f af c2             	imul   eax,edx
c000bb55:	99                   	cdq    
c000bb56:	52                   	push   edx
c000bb57:	50                   	push   eax
c000bb58:	56                   	push   esi
c000bb59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bb5c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000bb5f:	83 c4 20             	add    esp,0x20
c000bb62:	85 c0                	test   eax,eax
c000bb64:	0f 84 a2 00 00 00    	je     c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb6a:	31 d2                	xor    edx,edx
c000bb6c:	51                   	push   ecx
c000bb6d:	52                   	push   edx
c000bb6e:	50                   	push   eax
c000bb6f:	56                   	push   esi
c000bb70:	e8 75 6e 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000bb75:	83 c4 10             	add    esp,0x10
c000bb78:	85 c0                	test   eax,eax
c000bb7a:	0f 85 8c 00 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb80:	83 ec 0c             	sub    esp,0xc
c000bb83:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bb87:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bb8b:	31 ed                	xor    ebp,ebp
c000bb8d:	0f af c2             	imul   eax,edx
c000bb90:	50                   	push   eax
c000bb91:	e8 4f 19 00 00       	call   c000d4e5 <malloc>
c000bb96:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb9d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bba7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bbab:	0f af c2             	imul   eax,edx
c000bbae:	99                   	cdq    
c000bbaf:	52                   	push   edx
c000bbb0:	50                   	push   eax
c000bbb1:	56                   	push   esi
c000bbb2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bbb5:	83 c4 20             	add    esp,0x20
c000bbb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bbc0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000bbc4:	0f 86 80 00 00 00    	jbe    c000bc4a <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000bbca:	0f b7 fd             	movzx  edi,bp
c000bbcd:	c1 e7 05             	shl    edi,0x5
c000bbd0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000bbd4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000bbd7:	75 6b                	jne    c000bc44 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bbd9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bbdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbe0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000bbe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbe7:	52                   	push   edx
c000bbe8:	31 d2                	xor    edx,edx
c000bbea:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bbed:	52                   	push   edx
c000bbee:	50                   	push   eax
c000bbef:	56                   	push   esi
c000bbf0:	e8 f5 6d 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000bbf5:	83 c4 10             	add    esp,0x10
c000bbf8:	85 c0                	test   eax,eax
c000bbfa:	74 17                	je     c000bc13 <loadProgramIntoMemory(Process*, char const*)+0x187>
c000bbfc:	83 ec 0c             	sub    esp,0xc
c000bbff:	68 67 89 03 c0       	push   0xc0038967
c000bc04:	e8 e1 12 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	31 c0                	xor    eax,eax
c000bc0e:	e9 87 00 00 00       	jmp    c000bc9a <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000bc13:	83 ec 0c             	sub    esp,0xc
c000bc16:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000bc19:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000bc1c:	50                   	push   eax
c000bc1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc25:	56                   	push   esi
c000bc26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000bc2a:	e8 e0 fb ff ff       	call   c000b80f <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000bc2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bc33:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000bc37:	83 c4 20             	add    esp,0x20
c000bc3a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000bc3e:	73 04                	jae    c000bc44 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bc40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc44:	45                   	inc    ebp
c000bc45:	e9 76 ff ff ff       	jmp    c000bbc0 <loadProgramIntoMemory(Process*, char const*)+0x134>
c000bc4a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000bc4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bc52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc56:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000bc65:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc6a:	05 00 10 00 00       	add    eax,0x1000
c000bc6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000bc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc76:	e8 7a 18 00 00       	call   c000d4f5 <free>
c000bc7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc7e:	e8 72 18 00 00       	call   c000d4f5 <free>
c000bc83:	58                   	pop    eax
c000bc84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc88:	e8 68 18 00 00       	call   c000d4f5 <free>
c000bc8d:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc90:	e8 f5 6c 00 00       	call   c001298a <File::close()>
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	b0 01                	mov    al,0x1
c000bc9a:	83 c4 3c             	add    esp,0x3c
c000bc9d:	5b                   	pop    ebx
c000bc9e:	5e                   	pop    esi
c000bc9f:	5f                   	pop    edi
c000bca0:	5d                   	pop    ebp
c000bca1:	c3                   	ret    

c000bca2 <runtimeReferenceHelper()>:
c000bca2:	83 ec 18             	sub    esp,0x18
c000bca5:	68 6f 89 03 c0       	push   0xc003896f
c000bcaa:	e8 3b 12 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000bcaf:	fa                   	cli    
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	eb fe                	jmp    c000bcb3 <runtimeReferenceHelper()+0x11>

c000bcb5 <getAddressOfKernelSymbol(char const*)>:
c000bcb5:	57                   	push   edi
c000bcb6:	56                   	push   esi
c000bcb7:	53                   	push   ebx
c000bcb8:	31 db                	xor    ebx,ebx
c000bcba:	39 1d 40 bc 03 c0    	cmp    DWORD PTR ds:0xc003bc40,ebx
c000bcc0:	7e 3c                	jle    c000bcfe <getAddressOfKernelSymbol(char const*)+0x49>
c000bcc2:	8b 34 9d c0 bb 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc4440]
c000bcc9:	31 ff                	xor    edi,edi
c000bccb:	39 3c 9d c0 ba 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc4540],edi
c000bcd2:	7e 27                	jle    c000bcfb <getAddressOfKernelSymbol(char const*)+0x46>
c000bcd4:	50                   	push   eax
c000bcd5:	50                   	push   eax
c000bcd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcda:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcdc:	03 04 9d 40 bb 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc44c0]
c000bce3:	50                   	push   eax
c000bce4:	e8 91 4b ff ff       	call   c000087a <strcmp>
c000bce9:	83 c4 10             	add    esp,0x10
c000bcec:	85 c0                	test   eax,eax
c000bcee:	75 05                	jne    c000bcf5 <getAddressOfKernelSymbol(char const*)+0x40>
c000bcf0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000bcf3:	eb 0b                	jmp    c000bd00 <getAddressOfKernelSymbol(char const*)+0x4b>
c000bcf5:	83 c6 10             	add    esi,0x10
c000bcf8:	47                   	inc    edi
c000bcf9:	eb d0                	jmp    c000bccb <getAddressOfKernelSymbol(char const*)+0x16>
c000bcfb:	43                   	inc    ebx
c000bcfc:	eb bc                	jmp    c000bcba <getAddressOfKernelSymbol(char const*)+0x5>
c000bcfe:	31 c0                	xor    eax,eax
c000bd00:	5b                   	pop    ebx
c000bd01:	5e                   	pop    esi
c000bd02:	5f                   	pop    edi
c000bd03:	c3                   	ret    

c000bd04 <loadKernelSymbolTable(char const*)>:
c000bd04:	55                   	push   ebp
c000bd05:	57                   	push   edi
c000bd06:	56                   	push   esi
c000bd07:	53                   	push   ebx
c000bd08:	83 ec 68             	sub    esp,0x68
c000bd0b:	8b 35 fc bc 03 c0    	mov    esi,DWORD PTR ds:0xc003bcfc
c000bd11:	68 14 01 00 00       	push   0x114
c000bd16:	e8 7f 67 00 00       	call   c001249a <operator new(unsigned long)>
c000bd1b:	83 c4 0c             	add    esp,0xc
c000bd1e:	89 c3                	mov    ebx,eax
c000bd20:	56                   	push   esi
c000bd21:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000bd25:	50                   	push   eax
c000bd26:	e8 9d 6b 00 00       	call   c00128c8 <File::File(char const*, Process*)>
c000bd2b:	5e                   	pop    esi
c000bd2c:	5f                   	pop    edi
c000bd2d:	6a 01                	push   0x1
c000bd2f:	53                   	push   ebx
c000bd30:	e8 f7 6b 00 00       	call   c001292c <File::open(FileOpenMode)>
c000bd35:	83 c4 10             	add    esp,0x10
c000bd38:	31 d2                	xor    edx,edx
c000bd3a:	85 c0                	test   eax,eax
c000bd3c:	0f 85 79 02 00 00    	jne    c000bfbb <loadKernelSymbolTable(char const*)+0x2b7>
c000bd42:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000bd4a:	83 ec 0c             	sub    esp,0xc
c000bd4d:	6a 34                	push   0x34
c000bd4f:	e8 91 17 00 00       	call   c000d4e5 <malloc>
c000bd54:	59                   	pop    ecx
c000bd55:	89 c7                	mov    edi,eax
c000bd57:	8d 74 24 34          	lea    esi,[esp+0x34]
c000bd5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd5d:	56                   	push   esi
c000bd5e:	57                   	push   edi
c000bd5f:	6a 00                	push   0x0
c000bd61:	6a 34                	push   0x34
c000bd63:	53                   	push   ebx
c000bd64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bd67:	83 c4 20             	add    esp,0x20
c000bd6a:	85 c0                	test   eax,eax
c000bd6c:	74 17                	je     c000bd85 <loadKernelSymbolTable(char const*)+0x81>
c000bd6e:	83 ec 0c             	sub    esp,0xc
c000bd71:	68 91 89 03 c0       	push   0xc0038991
c000bd76:	e8 8d 12 00 00       	call   c000d008 <panic(char const*)>
c000bd7b:	83 c4 10             	add    esp,0x10
c000bd7e:	31 d2                	xor    edx,edx
c000bd80:	e9 36 02 00 00       	jmp    c000bfbb <loadKernelSymbolTable(char const*)+0x2b7>
c000bd85:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bd8b:	75 e1                	jne    c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bd8d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bd90:	85 c0                	test   eax,eax
c000bd92:	74 da                	je     c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bd94:	52                   	push   edx
c000bd95:	31 d2                	xor    edx,edx
c000bd97:	52                   	push   edx
c000bd98:	50                   	push   eax
c000bd99:	53                   	push   ebx
c000bd9a:	e8 4b 6c 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000bd9f:	83 c4 10             	add    esp,0x10
c000bda2:	85 c0                	test   eax,eax
c000bda4:	75 c8                	jne    c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bda6:	83 ec 0c             	sub    esp,0xc
c000bda9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bdad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bdb1:	31 ed                	xor    ebp,ebp
c000bdb3:	0f af c2             	imul   eax,edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 29 17 00 00       	call   c000d4e5 <malloc>
c000bdbc:	89 34 24             	mov    DWORD PTR [esp],esi
c000bdbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000bdc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bdc9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bdcd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bdd1:	0f af c2             	imul   eax,edx
c000bdd4:	99                   	cdq    
c000bdd5:	52                   	push   edx
c000bdd6:	50                   	push   eax
c000bdd7:	53                   	push   ebx
c000bdd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bddb:	83 c4 20             	add    esp,0x20
c000bdde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bde6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bdee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bdf6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bdfe:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000be02:	0f 86 aa 00 00 00    	jbe    c000beb2 <loadKernelSymbolTable(char const*)+0x1ae>
c000be08:	0f b7 f5             	movzx  esi,bp
c000be0b:	6b f6 28             	imul   esi,esi,0x28
c000be0e:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000be12:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000be15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be19:	50                   	push   eax
c000be1a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000be1e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000be22:	8b 16                	mov    edx,DWORD PTR [esi]
c000be24:	6b c0 28             	imul   eax,eax,0x28
c000be27:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000be2b:	89 d0                	mov    eax,edx
c000be2d:	31 d2                	xor    edx,edx
c000be2f:	52                   	push   edx
c000be30:	50                   	push   eax
c000be31:	53                   	push   ebx
c000be32:	e8 b3 6b 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000be37:	83 c4 0c             	add    esp,0xc
c000be3a:	6a 20                	push   0x20
c000be3c:	6a 00                	push   0x0
c000be3e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be42:	52                   	push   edx
c000be43:	e8 90 48 ff ff       	call   c00006d8 <memset>
c000be48:	58                   	pop    eax
c000be49:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be4b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000be4f:	51                   	push   ecx
c000be50:	8d 54 24 40          	lea    edx,[esp+0x40]
c000be54:	52                   	push   edx
c000be55:	6a 00                	push   0x0
c000be57:	6a 1f                	push   0x1f
c000be59:	53                   	push   ebx
c000be5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be5d:	83 c4 18             	add    esp,0x18
c000be60:	68 a8 89 03 c0       	push   0xc00389a8
c000be65:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be69:	52                   	push   edx
c000be6a:	e8 0b 4a ff ff       	call   c000087a <strcmp>
c000be6f:	83 c4 10             	add    esp,0x10
c000be72:	85 c0                	test   eax,eax
c000be74:	75 0f                	jne    c000be85 <loadKernelSymbolTable(char const*)+0x181>
c000be76:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be85:	50                   	push   eax
c000be86:	50                   	push   eax
c000be87:	68 b0 89 03 c0       	push   0xc00389b0
c000be8c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000be90:	50                   	push   eax
c000be91:	e8 e4 49 ff ff       	call   c000087a <strcmp>
c000be96:	83 c4 10             	add    esp,0x10
c000be99:	85 c0                	test   eax,eax
c000be9b:	75 0f                	jne    c000beac <loadKernelSymbolTable(char const*)+0x1a8>
c000be9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bea0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000beac:	45                   	inc    ebp
c000bead:	e9 4c ff ff ff       	jmp    c000bdfe <loadKernelSymbolTable(char const*)+0xfa>
c000beb2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000beb7:	75 10                	jne    c000bec9 <loadKernelSymbolTable(char const*)+0x1c5>
c000beb9:	83 ec 0c             	sub    esp,0xc
c000bebc:	68 b8 89 03 c0       	push   0xc00389b8
c000bec1:	e8 42 11 00 00       	call   c000d008 <panic(char const*)>
c000bec6:	83 c4 10             	add    esp,0x10
c000bec9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bece:	75 10                	jne    c000bee0 <loadKernelSymbolTable(char const*)+0x1dc>
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	68 b8 89 03 c0       	push   0xc00389b8
c000bed8:	e8 2b 11 00 00       	call   c000d008 <panic(char const*)>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	31 d2                	xor    edx,edx
c000bee2:	50                   	push   eax
c000bee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bee7:	52                   	push   edx
c000bee8:	50                   	push   eax
c000bee9:	53                   	push   ebx
c000beea:	e8 fb 6a 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000beef:	5a                   	pop    edx
c000bef0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef4:	e8 ec 15 00 00       	call   c000d4e5 <malloc>
c000bef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf01:	89 c1                	mov    ecx,eax
c000bf03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bf0b:	5e                   	pop    esi
c000bf0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf0e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000bf12:	55                   	push   ebp
c000bf13:	51                   	push   ecx
c000bf14:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000bf18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf20:	53                   	push   ebx
c000bf21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf24:	83 c4 14             	add    esp,0x14
c000bf27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf2b:	e8 b5 15 00 00       	call   c000d4e5 <malloc>
c000bf30:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf33:	89 c6                	mov    esi,eax
c000bf35:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf37:	56                   	push   esi
c000bf38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf40:	53                   	push   ebx
c000bf41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bf48:	8b 15 40 bc 03 c0    	mov    edx,DWORD PTR ds:0xc003bc40
c000bf4e:	83 c4 1c             	add    esp,0x1c
c000bf51:	c1 e8 04             	shr    eax,0x4
c000bf54:	89 04 95 c0 ba 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4540],eax
c000bf5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf5f:	31 d2                	xor    edx,edx
c000bf61:	52                   	push   edx
c000bf62:	50                   	push   eax
c000bf63:	53                   	push   ebx
c000bf64:	e8 81 6a 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000bf69:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf6c:	31 d2                	xor    edx,edx
c000bf6e:	56                   	push   esi
c000bf6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf73:	52                   	push   edx
c000bf74:	50                   	push   eax
c000bf75:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf77:	53                   	push   ebx
c000bf78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf7b:	83 c4 14             	add    esp,0x14
c000bf7e:	53                   	push   ebx
c000bf7f:	e8 06 6a 00 00       	call   c001298a <File::close()>
c000bf84:	5d                   	pop    ebp
c000bf85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf89:	e8 67 15 00 00       	call   c000d4f5 <free>
c000bf8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bf91:	e8 5f 15 00 00       	call   c000d4f5 <free>
c000bf96:	a1 40 bc 03 c0       	mov    eax,ds:0xc003bc40
c000bf9b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bf9f:	8d 50 01             	lea    edx,[eax+0x1]
c000bfa2:	89 0c 85 c0 bb 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4440],ecx
c000bfa9:	89 15 40 bc 03 c0    	mov    DWORD PTR ds:0xc003bc40,edx
c000bfaf:	89 34 85 40 bb 03 c0 	mov    DWORD PTR [eax*4-0x3ffc44c0],esi
c000bfb6:	83 c4 10             	add    esp,0x10
c000bfb9:	b2 01                	mov    dl,0x1
c000bfbb:	83 c4 5c             	add    esp,0x5c
c000bfbe:	88 d0                	mov    al,dl
c000bfc0:	5b                   	pop    ebx
c000bfc1:	5e                   	pop    esi
c000bfc2:	5f                   	pop    edi
c000bfc3:	5d                   	pop    ebp
c000bfc4:	c3                   	ret    

c000bfc5 <loadDriverIntoMemory(char const*, unsigned long)>:
c000bfc5:	55                   	push   ebp
c000bfc6:	57                   	push   edi
c000bfc7:	56                   	push   esi
c000bfc8:	53                   	push   ebx
c000bfc9:	81 ec 68 05 00 00    	sub    esp,0x568
c000bfcf:	8b 1d fc bc 03 c0    	mov    ebx,DWORD PTR ds:0xc003bcfc
c000bfd5:	68 14 01 00 00       	push   0x114
c000bfda:	e8 bb 64 00 00       	call   c001249a <operator new(unsigned long)>
c000bfdf:	83 c4 0c             	add    esp,0xc
c000bfe2:	89 c5                	mov    ebp,eax
c000bfe4:	53                   	push   ebx
c000bfe5:	ff b4 24 78 05 00 00 	push   DWORD PTR [esp+0x578]
c000bfec:	50                   	push   eax
c000bfed:	e8 d6 68 00 00       	call   c00128c8 <File::File(char const*, Process*)>
c000bff2:	5e                   	pop    esi
c000bff3:	5f                   	pop    edi
c000bff4:	6a 01                	push   0x1
c000bff6:	55                   	push   ebp
c000bff7:	e8 30 69 00 00       	call   c001292c <File::open(FileOpenMode)>
c000bffc:	83 c4 10             	add    esp,0x10
c000bfff:	85 c0                	test   eax,eax
c000c001:	0f 85 5f 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c007:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000c00f:	83 ec 0c             	sub    esp,0xc
c000c012:	6a 34                	push   0x34
c000c014:	e8 cc 14 00 00       	call   c000d4e5 <malloc>
c000c019:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c01d:	5b                   	pop    ebx
c000c01e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c021:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c025:	53                   	push   ebx
c000c026:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02a:	6a 00                	push   0x0
c000c02c:	6a 34                	push   0x34
c000c02e:	55                   	push   ebp
c000c02f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c032:	83 c4 20             	add    esp,0x20
c000c035:	85 c0                	test   eax,eax
c000c037:	0f 85 29 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c03d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c041:	81 38 7f 45 4c 46    	cmp    DWORD PTR [eax],0x464c457f
c000c047:	0f 85 19 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c04d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c050:	85 c0                	test   eax,eax
c000c052:	0f 84 0e 01 00 00    	je     c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c058:	31 d2                	xor    edx,edx
c000c05a:	51                   	push   ecx
c000c05b:	52                   	push   edx
c000c05c:	50                   	push   eax
c000c05d:	55                   	push   ebp
c000c05e:	e8 87 69 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	85 c0                	test   eax,eax
c000c068:	0f 85 f8 00 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c072:	83 ec 0c             	sub    esp,0xc
c000c075:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000c078:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c07c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c084:	0f b7 51 2e          	movzx  edx,WORD PTR [ecx+0x2e]
c000c088:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c000c08c:	0f af c2             	imul   eax,edx
c000c08f:	50                   	push   eax
c000c090:	e8 50 14 00 00       	call   c000d4e5 <malloc>
c000c095:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c098:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c09c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c09f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c0a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0ab:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c000c0af:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000c0b3:	0f af c2             	imul   eax,edx
c000c0b6:	99                   	cdq    
c000c0b7:	52                   	push   edx
c000c0b8:	50                   	push   eax
c000c0b9:	55                   	push   ebp
c000c0ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c0bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c0c1:	83 c4 20             	add    esp,0x20
c000c0c4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000c0c7:	85 c0                	test   eax,eax
c000c0c9:	0f 84 97 00 00 00    	je     c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c0cf:	52                   	push   edx
c000c0d0:	31 d2                	xor    edx,edx
c000c0d2:	52                   	push   edx
c000c0d3:	50                   	push   eax
c000c0d4:	55                   	push   ebp
c000c0d5:	e8 10 69 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000c0da:	83 c4 10             	add    esp,0x10
c000c0dd:	85 c0                	test   eax,eax
c000c0df:	0f 85 81 00 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c0e5:	83 ec 0c             	sub    esp,0xc
c000c0e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f0:	0f b7 51 2a          	movzx  edx,WORD PTR [ecx+0x2a]
c000c0f4:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c000c0f8:	0f af c2             	imul   eax,edx
c000c0fb:	50                   	push   eax
c000c0fc:	e8 e4 13 00 00       	call   c000d4e5 <malloc>
c000c101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c104:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c108:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c10b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c10f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c113:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c117:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000c11b:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c000c11f:	31 ff                	xor    edi,edi
c000c121:	0f af c2             	imul   eax,edx
c000c124:	99                   	cdq    
c000c125:	52                   	push   edx
c000c126:	50                   	push   eax
c000c127:	55                   	push   ebp
c000c128:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c12b:	83 c4 20             	add    esp,0x20
c000c12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c132:	66 39 78 2c          	cmp    WORD PTR [eax+0x2c],di
c000c136:	76 7c                	jbe    c000c1b4 <loadDriverIntoMemory(char const*, unsigned long)+0x1ef>
c000c138:	0f b7 df             	movzx  ebx,di
c000c13b:	c1 e3 05             	shl    ebx,0x5
c000c13e:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
c000c142:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000c145:	75 67                	jne    c000c1ae <loadDriverIntoMemory(char const*, unsigned long)+0x1e9>
c000c147:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c14a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000c14d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c151:	31 d2                	xor    edx,edx
c000c153:	50                   	push   eax
c000c154:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c157:	52                   	push   edx
c000c158:	50                   	push   eax
c000c159:	55                   	push   ebp
c000c15a:	e8 8b 68 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	85 c0                	test   eax,eax
c000c164:	74 07                	je     c000c16d <loadDriverIntoMemory(char const*, unsigned long)+0x1a8>
c000c166:	31 c0                	xor    eax,eax
c000c168:	e9 53 05 00 00       	jmp    c000c6c0 <loadDriverIntoMemory(char const*, unsigned long)+0x6fb>
c000c16d:	8b 84 24 74 05 00 00 	mov    eax,DWORD PTR [esp+0x574]
c000c174:	31 d2                	xor    edx,edx
c000c176:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000c17a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c17d:	83 ec 0c             	sub    esp,0xc
c000c180:	01 c6                	add    esi,eax
c000c182:	8d 84 24 5c 03 00 00 	lea    eax,[esp+0x35c]
c000c189:	50                   	push   eax
c000c18a:	56                   	push   esi
c000c18b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c18f:	52                   	push   edx
c000c190:	50                   	push   eax
c000c191:	55                   	push   ebp
c000c192:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c195:	83 c4 1c             	add    esp,0x1c
c000c198:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c19b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000c19e:	50                   	push   eax
c000c19f:	6a 00                	push   0x0
c000c1a1:	03 74 24 14          	add    esi,DWORD PTR [esp+0x14]
c000c1a5:	56                   	push   esi
c000c1a6:	e8 2d 45 ff ff       	call   c00006d8 <memset>
c000c1ab:	83 c4 10             	add    esp,0x10
c000c1ae:	47                   	inc    edi
c000c1af:	e9 7a ff ff ff       	jmp    c000c12e <loadDriverIntoMemory(char const*, unsigned long)+0x169>
c000c1b4:	31 db                	xor    ebx,ebx
c000c1b6:	50                   	push   eax
c000c1b7:	68 00 02 00 00       	push   0x200
c000c1bc:	6a 00                	push   0x0
c000c1be:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000c1c5:	50                   	push   eax
c000c1c6:	e8 0d 45 ff ff       	call   c00006d8 <memset>
c000c1cb:	83 c4 0c             	add    esp,0xc
c000c1ce:	68 00 02 00 00       	push   0x200
c000c1d3:	6a 00                	push   0x0
c000c1d5:	8d 84 24 5c 03 00 00 	lea    eax,[esp+0x35c]
c000c1dc:	50                   	push   eax
c000c1dd:	e8 f6 44 ff ff       	call   c00006d8 <memset>
c000c1e2:	83 c4 10             	add    esp,0x10
c000c1e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c1ed:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c1f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c1fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c205:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c20d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c211:	66 39 58 30          	cmp    WORD PTR [eax+0x30],bx
c000c215:	0f 86 2e 01 00 00    	jbe    c000c349 <loadDriverIntoMemory(char const*, unsigned long)+0x384>
c000c21b:	0f b7 f3             	movzx  esi,bx
c000c21e:	6b f6 28             	imul   esi,esi,0x28
c000c221:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c000c225:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000c228:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c22c:	50                   	push   eax
c000c22d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c235:	0f b7 50 32          	movzx  edx,WORD PTR [eax+0x32]
c000c239:	8b 06                	mov    eax,DWORD PTR [esi]
c000c23b:	6b d2 28             	imul   edx,edx,0x28
c000c23e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c000c242:	31 d2                	xor    edx,edx
c000c244:	52                   	push   edx
c000c245:	50                   	push   eax
c000c246:	55                   	push   ebp
c000c247:	e8 9e 67 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000c24c:	83 c4 0c             	add    esp,0xc
c000c24f:	6a 20                	push   0x20
c000c251:	6a 00                	push   0x0
c000c253:	8d 7c 24 5c          	lea    edi,[esp+0x5c]
c000c257:	57                   	push   edi
c000c258:	e8 7b 44 ff ff       	call   c00006d8 <memset>
c000c25d:	58                   	pop    eax
c000c25e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c261:	8d 54 24 58          	lea    edx,[esp+0x58]
c000c265:	52                   	push   edx
c000c266:	57                   	push   edi
c000c267:	6a 00                	push   0x0
c000c269:	6a 1f                	push   0x1f
c000c26b:	55                   	push   ebp
c000c26c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c26f:	83 c4 18             	add    esp,0x18
c000c272:	57                   	push   edi
c000c273:	68 d2 89 03 c0       	push   0xc00389d2
c000c278:	e8 6d 0c 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000c27d:	83 c4 0c             	add    esp,0xc
c000c280:	6a 09                	push   0x9
c000c282:	68 df 89 03 c0       	push   0xc00389df
c000c287:	57                   	push   edi
c000c288:	e8 0f 43 ff ff       	call   c000059c <memcmp>
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	85 c0                	test   eax,eax
c000c292:	75 24                	jne    c000c2b8 <loadDriverIntoMemory(char const*, unsigned long)+0x2f3>
c000c294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c298:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c29c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c2a0:	89 bc 84 50 01 00 00 	mov    DWORD PTR [esp+eax*4+0x150],edi
c000c2a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2aa:	89 84 94 50 03 00 00 	mov    DWORD PTR [esp+edx*4+0x350],eax
c000c2b1:	89 d0                	mov    eax,edx
c000c2b3:	40                   	inc    eax
c000c2b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2b8:	50                   	push   eax
c000c2b9:	6a 09                	push   0x9
c000c2bb:	68 e9 89 03 c0       	push   0xc00389e9
c000c2c0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c2c4:	50                   	push   eax
c000c2c5:	e8 d2 42 ff ff       	call   c000059c <memcmp>
c000c2ca:	83 c4 10             	add    esp,0x10
c000c2cd:	85 c0                	test   eax,eax
c000c2cf:	75 24                	jne    c000c2f5 <loadDriverIntoMemory(char const*, unsigned long)+0x330>
c000c2d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c2d5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c2d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c2dd:	89 8c 84 50 01 00 00 	mov    DWORD PTR [esp+eax*4+0x150],ecx
c000c2e4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2e7:	89 84 bc 50 03 00 00 	mov    DWORD PTR [esp+edi*4+0x350],eax
c000c2ee:	89 f8                	mov    eax,edi
c000c2f0:	40                   	inc    eax
c000c2f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2f5:	50                   	push   eax
c000c2f6:	50                   	push   eax
c000c2f7:	68 a8 89 03 c0       	push   0xc00389a8
c000c2fc:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c300:	50                   	push   eax
c000c301:	e8 74 45 ff ff       	call   c000087a <strcmp>
c000c306:	83 c4 10             	add    esp,0x10
c000c309:	85 c0                	test   eax,eax
c000c30b:	75 0f                	jne    c000c31c <loadDriverIntoMemory(char const*, unsigned long)+0x357>
c000c30d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c310:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c318:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c31c:	57                   	push   edi
c000c31d:	57                   	push   edi
c000c31e:	68 b0 89 03 c0       	push   0xc00389b0
c000c323:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c327:	50                   	push   eax
c000c328:	e8 4d 45 ff ff       	call   c000087a <strcmp>
c000c32d:	83 c4 10             	add    esp,0x10
c000c330:	85 c0                	test   eax,eax
c000c332:	75 0f                	jne    c000c343 <loadDriverIntoMemory(char const*, unsigned long)+0x37e>
c000c334:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c337:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c33b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c33f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c343:	43                   	inc    ebx
c000c344:	e9 c4 fe ff ff       	jmp    c000c20d <loadDriverIntoMemory(char const*, unsigned long)+0x248>
c000c349:	52                   	push   edx
c000c34a:	31 d2                	xor    edx,edx
c000c34c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c350:	52                   	push   edx
c000c351:	50                   	push   eax
c000c352:	55                   	push   ebp
c000c353:	e8 92 66 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000c358:	59                   	pop    ecx
c000c359:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c35d:	e8 83 11 00 00       	call   c000d4e5 <malloc>
c000c362:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c365:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c369:	31 d2                	xor    edx,edx
c000c36b:	5b                   	pop    ebx
c000c36c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c370:	53                   	push   ebx
c000c371:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c375:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c379:	52                   	push   edx
c000c37a:	50                   	push   eax
c000c37b:	55                   	push   ebp
c000c37c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c37f:	83 c4 14             	add    esp,0x14
c000c382:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c386:	e8 5a 11 00 00       	call   c000d4e5 <malloc>
c000c38b:	31 d2                	xor    edx,edx
c000c38d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c391:	83 c4 0c             	add    esp,0xc
c000c394:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c398:	52                   	push   edx
c000c399:	50                   	push   eax
c000c39a:	55                   	push   ebp
c000c39b:	e8 4a 66 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000c3a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c3a3:	31 d2                	xor    edx,edx
c000c3a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3a9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c3ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3b0:	52                   	push   edx
c000c3b1:	50                   	push   eax
c000c3b2:	55                   	push   ebp
c000c3b3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c3b6:	83 c4 20             	add    esp,0x20
c000c3b9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c3c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c3c5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000c3c9:	0f 84 c5 02 00 00    	je     c000c694 <loadDriverIntoMemory(char const*, unsigned long)+0x6cf>
c000c3cf:	8b 84 94 50 03 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x350]
c000c3d6:	31 d2                	xor    edx,edx
c000c3d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3dc:	c1 e8 03             	shr    eax,0x3
c000c3df:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c3e3:	50                   	push   eax
c000c3e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3e8:	8b 84 84 54 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x154]
c000c3ef:	52                   	push   edx
c000c3f0:	50                   	push   eax
c000c3f1:	55                   	push   ebp
c000c3f2:	e8 f3 65 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000c3f7:	58                   	pop    eax
c000c3f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3fc:	ff b4 84 5c 03 00 00 	push   DWORD PTR [esp+eax*4+0x35c]
c000c403:	e8 dd 10 00 00       	call   c000d4e5 <malloc>
c000c408:	31 d2                	xor    edx,edx
c000c40a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c40e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c411:	58                   	pop    eax
c000c412:	8d 44 24 58          	lea    eax,[esp+0x58]
c000c416:	50                   	push   eax
c000c417:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c41b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c41f:	8b 84 84 64 03 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x364]
c000c426:	52                   	push   edx
c000c427:	50                   	push   eax
c000c428:	55                   	push   ebp
c000c429:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c42c:	83 c4 20             	add    esp,0x20
c000c42f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c437:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c43b:	39 4c 24 20          	cmp    DWORD PTR [esp+0x20],ecx
c000c43f:	0f 8d 37 02 00 00    	jge    c000c67c <loadDriverIntoMemory(char const*, unsigned long)+0x6b7>
c000c445:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c449:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c44d:	83 ec 0c             	sub    esp,0xc
c000c450:	8b 04 f8             	mov    eax,DWORD PTR [eax+edi*8]
c000c453:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c457:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c45b:	8b 44 f8 04          	mov    eax,DWORD PTR [eax+edi*8+0x4]
c000c45f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c463:	c1 e8 08             	shr    eax,0x8
c000c466:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c46a:	89 c6                	mov    esi,eax
c000c46c:	c1 e6 04             	shl    esi,0x4
c000c46f:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
c000c473:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c000c476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c47a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c47e:	53                   	push   ebx
c000c47f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c483:	03 06                	add    eax,DWORD PTR [esi]
c000c485:	50                   	push   eax
c000c486:	68 f3 89 03 c0       	push   0xc00389f3
c000c48b:	e8 5a 0a 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000c490:	83 c4 20             	add    esp,0x20
c000c493:	85 db                	test   ebx,ebx
c000c495:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000c49a:	0f 85 fb 00 00 00    	jne    c000c59b <loadDriverIntoMemory(char const*, unsigned long)+0x5d6>
c000c4a0:	83 ec 0c             	sub    esp,0xc
c000c4a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4a7:	03 06                	add    eax,DWORD PTR [esi]
c000c4a9:	50                   	push   eax
c000c4aa:	e8 06 f8 ff ff       	call   c000bcb5 <getAddressOfKernelSymbol(char const*)>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 c3                	mov    ebx,eax
c000c4b4:	c6 44 24 27 01       	mov    BYTE PTR [esp+0x27],0x1
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 85 da 00 00 00    	jne    c000c59b <loadDriverIntoMemory(char const*, unsigned long)+0x5d6>
c000c4c1:	50                   	push   eax
c000c4c2:	50                   	push   eax
c000c4c3:	68 25 8a 03 c0       	push   0xc0038a25
c000c4c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4cc:	03 06                	add    eax,DWORD PTR [esi]
c000c4ce:	50                   	push   eax
c000c4cf:	e8 a6 43 ff ff       	call   c000087a <strcmp>
c000c4d4:	83 c4 10             	add    esp,0x10
c000c4d7:	85 c0                	test   eax,eax
c000c4d9:	75 0a                	jne    c000c4e5 <loadDriverIntoMemory(char const*, unsigned long)+0x520>
c000c4db:	bb 3c e7 01 c0       	mov    ebx,0xc001e73c
c000c4e0:	e9 b1 00 00 00       	jmp    c000c596 <loadDriverIntoMemory(char const*, unsigned long)+0x5d1>
c000c4e5:	50                   	push   eax
c000c4e6:	50                   	push   eax
c000c4e7:	68 2f 8a 03 c0       	push   0xc0038a2f
c000c4ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4f0:	03 06                	add    eax,DWORD PTR [esi]
c000c4f2:	50                   	push   eax
c000c4f3:	e8 82 43 ff ff       	call   c000087a <strcmp>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	85 c0                	test   eax,eax
c000c4fd:	75 0a                	jne    c000c509 <loadDriverIntoMemory(char const*, unsigned long)+0x544>
c000c4ff:	bb 70 e4 01 c0       	mov    ebx,0xc001e470
c000c504:	e9 8d 00 00 00       	jmp    c000c596 <loadDriverIntoMemory(char const*, unsigned long)+0x5d1>
c000c509:	50                   	push   eax
c000c50a:	50                   	push   eax
c000c50b:	68 38 8a 03 c0       	push   0xc0038a38
c000c510:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c514:	03 06                	add    eax,DWORD PTR [esi]
c000c516:	50                   	push   eax
c000c517:	e8 5e 43 ff ff       	call   c000087a <strcmp>
c000c51c:	83 c4 10             	add    esp,0x10
c000c51f:	85 c0                	test   eax,eax
c000c521:	75 07                	jne    c000c52a <loadDriverIntoMemory(char const*, unsigned long)+0x565>
c000c523:	bb 3c e8 01 c0       	mov    ebx,0xc001e83c
c000c528:	eb 6c                	jmp    c000c596 <loadDriverIntoMemory(char const*, unsigned long)+0x5d1>
c000c52a:	57                   	push   edi
c000c52b:	57                   	push   edi
c000c52c:	68 42 8a 03 c0       	push   0xc0038a42
c000c531:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c535:	03 06                	add    eax,DWORD PTR [esi]
c000c537:	50                   	push   eax
c000c538:	e8 3d 43 ff ff       	call   c000087a <strcmp>
c000c53d:	83 c4 10             	add    esp,0x10
c000c540:	85 c0                	test   eax,eax
c000c542:	74 4d                	je     c000c591 <loadDriverIntoMemory(char const*, unsigned long)+0x5cc>
c000c544:	51                   	push   ecx
c000c545:	51                   	push   ecx
c000c546:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c54a:	03 06                	add    eax,DWORD PTR [esi]
c000c54c:	50                   	push   eax
c000c54d:	68 4b 8a 03 c0       	push   0xc0038a4b
c000c552:	e8 93 09 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000c557:	5f                   	pop    edi
c000c558:	58                   	pop    eax
c000c559:	68 65 8a 03 c0       	push   0xc0038a65
c000c55e:	8d 7c 24 5c          	lea    edi,[esp+0x5c]
c000c562:	57                   	push   edi
c000c563:	e8 8c 42 ff ff       	call   c00007f4 <strcpy>
c000c568:	58                   	pop    eax
c000c569:	5a                   	pop    edx
c000c56a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c56e:	03 06                	add    eax,DWORD PTR [esi]
c000c570:	50                   	push   eax
c000c571:	57                   	push   edi
c000c572:	e8 ca 43 ff ff       	call   c0000941 <strcat>
c000c577:	59                   	pop    ecx
c000c578:	5e                   	pop    esi
c000c579:	68 45 8b 03 c0       	push   0xc0038b45
c000c57e:	57                   	push   edi
c000c57f:	e8 bd 43 ff ff       	call   c0000941 <strcat>
c000c584:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c587:	e8 7c 0a 00 00       	call   c000d008 <panic(char const*)>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	eb 0a                	jmp    c000c59b <loadDriverIntoMemory(char const*, unsigned long)+0x5d6>
c000c591:	bb bc e5 01 c0       	mov    ebx,0xc001e5bc
c000c596:	c6 44 24 27 01       	mov    BYTE PTR [esp+0x27],0x1
c000c59b:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c000c5a0:	75 72                	jne    c000c614 <loadDriverIntoMemory(char const*, unsigned long)+0x64f>
c000c5a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5a6:	8b b4 24 74 05 00 00 	mov    esi,DWORD PTR [esp+0x574]
c000c5ad:	2b 74 24 1c          	sub    esi,DWORD PTR [esp+0x1c]
c000c5b1:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c000c5b6:	8d 3c 30             	lea    edi,[eax+esi*1]
c000c5b9:	8b 07                	mov    eax,DWORD PTR [edi]
c000c5bb:	74 05                	je     c000c5c2 <loadDriverIntoMemory(char const*, unsigned long)+0x5fd>
c000c5bd:	8d 34 18             	lea    esi,[eax+ebx*1]
c000c5c0:	eb 4e                	jmp    c000c610 <loadDriverIntoMemory(char const*, unsigned long)+0x64b>
c000c5c2:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c5ca:	75 04                	jne    c000c5d0 <loadDriverIntoMemory(char const*, unsigned long)+0x60b>
c000c5cc:	01 c6                	add    esi,eax
c000c5ce:	eb 40                	jmp    c000c610 <loadDriverIntoMemory(char const*, unsigned long)+0x64b>
c000c5d0:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c5d8:	74 0e                	je     c000c5e8 <loadDriverIntoMemory(char const*, unsigned long)+0x623>
c000c5da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c5de:	0f b7 51 30          	movzx  edx,WORD PTR [ecx+0x30]
c000c5e2:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000c5e6:	76 24                	jbe    c000c60c <loadDriverIntoMemory(char const*, unsigned long)+0x647>
c000c5e8:	52                   	push   edx
c000c5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ed:	53                   	push   ebx
c000c5ee:	ff b4 24 80 05 00 00 	push   DWORD PTR [esp+0x580]
c000c5f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5f9:	50                   	push   eax
c000c5fa:	57                   	push   edi
c000c5fb:	68 7c 8a 03 c0       	push   0xc0038a7c
c000c600:	e8 e5 08 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000c605:	03 37                	add    esi,DWORD PTR [edi]
c000c607:	83 c4 20             	add    esp,0x20
c000c60a:	eb 04                	jmp    c000c610 <loadDriverIntoMemory(char const*, unsigned long)+0x64b>
c000c60c:	01 c6                	add    esi,eax
c000c60e:	01 de                	add    esi,ebx
c000c610:	89 37                	mov    DWORD PTR [edi],esi
c000c612:	eb 5f                	jmp    c000c673 <loadDriverIntoMemory(char const*, unsigned long)+0x6ae>
c000c614:	80 7c 24 10 02       	cmp    BYTE PTR [esp+0x10],0x2
c000c619:	75 37                	jne    c000c652 <loadDriverIntoMemory(char const*, unsigned long)+0x68d>
c000c61b:	8b 94 24 74 05 00 00 	mov    edx,DWORD PTR [esp+0x574]
c000c622:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
c000c626:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000c62a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c000c62f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c631:	74 13                	je     c000c646 <loadDriverIntoMemory(char const*, unsigned long)+0x681>
c000c633:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c637:	2b 84 24 74 05 00 00 	sub    eax,DWORD PTR [esp+0x574]
c000c63e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000c642:	01 c8                	add    eax,ecx
c000c644:	eb 06                	jmp    c000c64c <loadDriverIntoMemory(char const*, unsigned long)+0x687>
c000c646:	89 c8                	mov    eax,ecx
c000c648:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000c64c:	01 c3                	add    ebx,eax
c000c64e:	89 1a                	mov    DWORD PTR [edx],ebx
c000c650:	eb 21                	jmp    c000c673 <loadDriverIntoMemory(char const*, unsigned long)+0x6ae>
c000c652:	53                   	push   ebx
c000c653:	53                   	push   ebx
c000c654:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c659:	50                   	push   eax
c000c65a:	68 fe 8a 03 c0       	push   0xc0038afe
c000c65f:	e8 86 08 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000c664:	c7 04 24 09 8b 03 c0 	mov    DWORD PTR [esp],0xc0038b09
c000c66b:	e8 98 09 00 00       	call   c000d008 <panic(char const*)>
c000c670:	83 c4 10             	add    esp,0x10
c000c673:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c000c677:	e9 bb fd ff ff       	jmp    c000c437 <loadDriverIntoMemory(char const*, unsigned long)+0x472>
c000c67c:	83 ec 0c             	sub    esp,0xc
c000c67f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c683:	e8 6d 0e 00 00       	call   c000d4f5 <free>
c000c688:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000c68c:	83 c4 10             	add    esp,0x10
c000c68f:	e9 2d fd ff ff       	jmp    c000c3c1 <loadDriverIntoMemory(char const*, unsigned long)+0x3fc>
c000c694:	83 ec 0c             	sub    esp,0xc
c000c697:	55                   	push   ebp
c000c698:	e8 ed 62 00 00       	call   c001298a <File::close()>
c000c69d:	58                   	pop    eax
c000c69e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a2:	e8 4e 0e 00 00       	call   c000d4f5 <free>
c000c6a7:	5a                   	pop    edx
c000c6a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c6ac:	e8 44 0e 00 00       	call   c000d4f5 <free>
c000c6b1:	59                   	pop    ecx
c000c6b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6b6:	e8 3a 0e 00 00       	call   c000d4f5 <free>
c000c6bb:	83 c4 10             	add    esp,0x10
c000c6be:	b0 01                	mov    al,0x1
c000c6c0:	81 c4 5c 05 00 00    	add    esp,0x55c
c000c6c6:	5b                   	pop    ebx
c000c6c7:	5e                   	pop    esi
c000c6c8:	5f                   	pop    edi
c000c6c9:	5d                   	pop    ebp
c000c6ca:	c3                   	ret    

c000c6cb <loadDLL(char const*)>:
c000c6cb:	57                   	push   edi
c000c6cc:	56                   	push   esi
c000c6cd:	53                   	push   ebx
c000c6ce:	81 ec 18 01 00 00    	sub    esp,0x118
c000c6d4:	8b 9c 24 28 01 00 00 	mov    ebx,DWORD PTR [esp+0x128]
c000c6db:	53                   	push   ebx
c000c6dc:	68 21 8b 03 c0       	push   0xc0038b21
c000c6e1:	e8 04 08 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000c6e6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c6ed:	e8 a8 5d 00 00       	call   c001249a <operator new(unsigned long)>
c000c6f2:	83 c4 0c             	add    esp,0xc
c000c6f5:	89 c6                	mov    esi,eax
c000c6f7:	ff 35 fc bc 03 c0    	push   DWORD PTR ds:0xc003bcfc
c000c6fd:	53                   	push   ebx
c000c6fe:	50                   	push   eax
c000c6ff:	e8 c4 61 00 00       	call   c00128c8 <File::File(char const*, Process*)>
c000c704:	83 c4 0c             	add    esp,0xc
c000c707:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c70b:	50                   	push   eax
c000c70c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c710:	50                   	push   eax
c000c711:	56                   	push   esi
c000c712:	e8 c1 64 00 00       	call   c0012bd8 <File::stat(unsigned long long*, bool*)>
c000c717:	83 c4 10             	add    esp,0x10
c000c71a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c71f:	75 0a                	jne    c000c72b <loadDLL(char const*)+0x60>
c000c721:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c725:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c729:	75 32                	jne    c000c75d <loadDLL(char const*)+0x92>
c000c72b:	50                   	push   eax
c000c72c:	50                   	push   eax
c000c72d:	68 32 8b 03 c0       	push   0xc0038b32
c000c732:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000c736:	57                   	push   edi
c000c737:	e8 b8 40 ff ff       	call   c00007f4 <strcpy>
c000c73c:	58                   	pop    eax
c000c73d:	5a                   	pop    edx
c000c73e:	53                   	push   ebx
c000c73f:	57                   	push   edi
c000c740:	e8 fc 41 ff ff       	call   c0000941 <strcat>
c000c745:	59                   	pop    ecx
c000c746:	58                   	pop    eax
c000c747:	68 45 8b 03 c0       	push   0xc0038b45
c000c74c:	57                   	push   edi
c000c74d:	e8 ef 41 ff ff       	call   c0000941 <strcat>
c000c752:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c755:	e8 ae 08 00 00       	call   c000d008 <panic(char const*)>
c000c75a:	83 c4 10             	add    esp,0x10
c000c75d:	83 ec 0c             	sub    esp,0xc
c000c760:	8b 06                	mov    eax,DWORD PTR [esi]
c000c762:	56                   	push   esi
c000c763:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c766:	58                   	pop    eax
c000c767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c76b:	e8 75 0d 00 00       	call   c000d4e5 <malloc>
c000c770:	5a                   	pop    edx
c000c771:	89 c6                	mov    esi,eax
c000c773:	59                   	pop    ecx
c000c774:	50                   	push   eax
c000c775:	68 47 8b 03 c0       	push   0xc0038b47
c000c77a:	e8 6b 07 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000c77f:	5f                   	pop    edi
c000c780:	58                   	pop    eax
c000c781:	56                   	push   esi
c000c782:	53                   	push   ebx
c000c783:	e8 3d f8 ff ff       	call   c000bfc5 <loadDriverIntoMemory(char const*, unsigned long)>
c000c788:	81 c4 20 01 00 00    	add    esp,0x120
c000c78e:	89 f0                	mov    eax,esi
c000c790:	5b                   	pop    ebx
c000c791:	5e                   	pop    esi
c000c792:	5f                   	pop    edi
c000c793:	c3                   	ret    

c000c794 <executeDLL(unsigned long, void*)>:
c000c794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c79c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c7a0:	ff e0                	jmp    eax

c000c7a2 <GDTEntry::setBase(unsigned int)>:
c000c7a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c7a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c7aa:	89 c1                	mov    ecx,eax
c000c7ac:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c7b0:	c1 e9 10             	shr    ecx,0x10
c000c7b3:	c1 e8 18             	shr    eax,0x18
c000c7b6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c7b9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c7bc:	c3                   	ret    
c000c7bd:	90                   	nop

c000c7be <GDTEntry::setLimit(unsigned int)>:
c000c7be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c7c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c7c6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c7c9:	66 89 01             	mov    WORD PTR [ecx],ax
c000c7cc:	83 e2 f0             	and    edx,0xfffffff0
c000c7cf:	c1 e8 10             	shr    eax,0x10
c000c7d2:	83 e0 0f             	and    eax,0xf
c000c7d5:	09 d0                	or     eax,edx
c000c7d7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c7da:	c3                   	ret    
c000c7db:	90                   	nop

c000c7dc <GDT::GDT()>:
c000c7dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7f0:	90                   	nop
c000c7f1:	c3                   	ret    

c000c7f2 <GDT::addEntry(GDTEntry)>:
c000c7f2:	53                   	push   ebx
c000c7f3:	83 ec 0c             	sub    esp,0xc
c000c7f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c7fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7fc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c803:	52                   	push   edx
c000c804:	50                   	push   eax
c000c805:	68 66 8b 03 c0       	push   0xc0038b66
c000c80a:	e8 db 06 00 00       	call   c000ceea <kprintf(char const*, ...)>
c000c80f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c811:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c815:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c819:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c81d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c821:	8d 50 01             	lea    edx,[eax+0x1]
c000c824:	c1 e0 03             	shl    eax,0x3
c000c827:	89 13                	mov    DWORD PTR [ebx],edx
c000c829:	83 c4 18             	add    esp,0x18
c000c82c:	5b                   	pop    ebx
c000c82d:	c3                   	ret    

c000c82e <GDT::getNumberOfEntries()>:
c000c82e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c832:	8b 00                	mov    eax,DWORD PTR [eax]
c000c834:	c3                   	ret    
c000c835:	90                   	nop

c000c836 <GDT::flush()>:
c000c836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c83a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c83c:	83 c0 04             	add    eax,0x4
c000c83f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c846:	a3 46 bc 03 c0       	mov    ds:0xc003bc46,eax
c000c84b:	66 89 15 44 bc 03 c0 	mov    WORD PTR ds:0xc003bc44,dx
c000c852:	e9 09 3b ff ff       	jmp    c0000360 <loadGDT>
c000c857:	90                   	nop

c000c858 <GDT::setup()>:
c000c858:	55                   	push   ebp
c000c859:	57                   	push   edi
c000c85a:	56                   	push   esi
c000c85b:	53                   	push   ebx
c000c85c:	83 ec 3c             	sub    esp,0x3c
c000c85f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c863:	6a 00                	push   0x0
c000c865:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c869:	53                   	push   ebx
c000c86a:	e8 33 ff ff ff       	call   c000c7a2 <GDTEntry::setBase(unsigned int)>
c000c86f:	6a 00                	push   0x0
c000c871:	53                   	push   ebx
c000c872:	e8 47 ff ff ff       	call   c000c7be <GDTEntry::setLimit(unsigned int)>
c000c877:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c87f:	6a 00                	push   0x0
c000c881:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c885:	53                   	push   ebx
c000c886:	e8 17 ff ff ff       	call   c000c7a2 <GDTEntry::setBase(unsigned int)>
c000c88b:	68 ff ff ff 00       	push   0xffffff
c000c890:	53                   	push   ebx
c000c891:	e8 28 ff ff ff       	call   c000c7be <GDTEntry::setLimit(unsigned int)>
c000c896:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c89a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c89f:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c8a4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c8a8:	83 c4 20             	add    esp,0x20
c000c8ab:	6a 00                	push   0x0
c000c8ad:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c8b1:	53                   	push   ebx
c000c8b2:	e8 eb fe ff ff       	call   c000c7a2 <GDTEntry::setBase(unsigned int)>
c000c8b7:	68 ff ff ff 00       	push   0xffffff
c000c8bc:	53                   	push   ebx
c000c8bd:	e8 fc fe ff ff       	call   c000c7be <GDTEntry::setLimit(unsigned int)>
c000c8c2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c8c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8ca:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c8ce:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c8d2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c8d6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c8db:	0d 00 92 c0 00       	or     eax,0xc09200
c000c8e0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c8e4:	89 d8                	mov    eax,ebx
c000c8e6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c8ea:	80 cc 60             	or     ah,0x60
c000c8ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c8f1:	83 c4 0c             	add    esp,0xc
c000c8f4:	89 f8                	mov    eax,edi
c000c8f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8fa:	80 cc 60             	or     ah,0x60
c000c8fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c901:	89 c7                	mov    edi,eax
c000c903:	55                   	push   ebp
c000c904:	e8 e9 fe ff ff       	call   c000c7f2 <GDT::addEntry(GDTEntry)>
c000c909:	83 c4 0c             	add    esp,0xc
c000c90c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c910:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c914:	55                   	push   ebp
c000c915:	e8 d8 fe ff ff       	call   c000c7f2 <GDT::addEntry(GDTEntry)>
c000c91a:	83 c4 0c             	add    esp,0xc
c000c91d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c921:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c925:	55                   	push   ebp
c000c926:	e8 c7 fe ff ff       	call   c000c7f2 <GDT::addEntry(GDTEntry)>
c000c92b:	83 c4 0c             	add    esp,0xc
c000c92e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c932:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c936:	53                   	push   ebx
c000c937:	51                   	push   ecx
c000c938:	55                   	push   ebp
c000c939:	e8 b4 fe ff ff       	call   c000c7f2 <GDT::addEntry(GDTEntry)>
c000c93e:	83 c4 0c             	add    esp,0xc
c000c941:	57                   	push   edi
c000c942:	56                   	push   esi
c000c943:	55                   	push   ebp
c000c944:	e8 a9 fe ff ff       	call   c000c7f2 <GDT::addEntry(GDTEntry)>
c000c949:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c94c:	e8 e5 fe ff ff       	call   c000c836 <GDT::flush()>
c000c951:	83 c4 4c             	add    esp,0x4c
c000c954:	5b                   	pop    ebx
c000c955:	5e                   	pop    esi
c000c956:	5f                   	pop    edi
c000c957:	5d                   	pop    ebp
c000c958:	c3                   	ret    

c000c959 <idleFunction(void*)>:
c000c959:	53                   	push   ebx
c000c95a:	83 ec 08             	sub    esp,0x8
c000c95d:	e8 2c 1a 00 00       	call   c000e38e <unlockScheduler()>
c000c962:	e8 69 a8 00 00       	call   c00171d0 <thisCPU()>
c000c967:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c96e:	74 41                	je     c000c9b1 <idleFunction(void*)+0x58>
c000c970:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c000c975:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c97c:	74 33                	je     c000c9b1 <idleFunction(void*)+0x58>
c000c97e:	31 db                	xor    ebx,ebx
c000c980:	52                   	push   edx
c000c981:	52                   	push   edx
c000c982:	68 e1 00 00 00       	push   0xe1
c000c987:	50                   	push   eax
c000c988:	e8 5b ec ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c000c98d:	53                   	push   ebx
c000c98e:	83 e0 02             	and    eax,0x2
c000c991:	50                   	push   eax
c000c992:	68 e1 00 00 00       	push   0xe1
c000c997:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c000c99d:	e8 72 ec ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c9a2:	83 c4 20             	add    esp,0x20
c000c9a5:	e8 a6 37 ff ff       	call   c0000150 <doTPAUSE>
c000c9aa:	e8 51 20 01 00       	call   c001ea00 <idleCommon()>
c000c9af:	eb f4                	jmp    c000c9a5 <idleFunction(void*)+0x4c>
c000c9b1:	fb                   	sti    
c000c9b2:	f4                   	hlt    
c000c9b3:	e8 48 20 01 00       	call   c001ea00 <idleCommon()>
c000c9b8:	eb f7                	jmp    c000c9b1 <idleFunction(void*)+0x58>

c000c9ba <IDTEntry::IDTEntry(bool)>:
c000c9ba:	83 ec 04             	sub    esp,0x4
c000c9bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9c1:	88 04 24             	mov    BYTE PTR [esp],al
c000c9c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9c8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c9ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9d2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9da:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9dd:	83 e2 f0             	and    edx,0xfffffff0
c000c9e0:	83 ca 0e             	or     edx,0xe
c000c9e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9ed:	83 e2 ef             	and    edx,0xffffffef
c000c9f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9f3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000c9f7:	74 04                	je     c000c9fd <IDTEntry::IDTEntry(bool)+0x43>
c000c9f9:	b2 03                	mov    dl,0x3
c000c9fb:	eb 02                	jmp    c000c9ff <IDTEntry::IDTEntry(bool)+0x45>
c000c9fd:	b2 00                	mov    dl,0x0
c000c9ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca03:	83 e2 03             	and    edx,0x3
c000ca06:	88 d1                	mov    cl,dl
c000ca08:	c1 e1 05             	shl    ecx,0x5
c000ca0b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ca0e:	83 e2 9f             	and    edx,0xffffff9f
c000ca11:	09 ca                	or     edx,ecx
c000ca13:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ca16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca1a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ca1d:	83 ca 80             	or     edx,0xffffff80
c000ca20:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ca23:	90                   	nop
c000ca24:	83 c4 04             	add    esp,0x4
c000ca27:	c3                   	ret    

c000ca28 <IDTEntry::setOffset(unsigned int)>:
c000ca28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca30:	66 89 02             	mov    WORD PTR [edx],ax
c000ca33:	c1 e8 10             	shr    eax,0x10
c000ca36:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ca3a:	c3                   	ret    
c000ca3b:	90                   	nop

c000ca3c <IDT::IDT()>:
c000ca3c:	90                   	nop
c000ca3d:	c3                   	ret    

c000ca3e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ca3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca42:	83 c0 30             	add    eax,0x30
c000ca45:	c3                   	ret    

c000ca46 <IDT::addEntry(IDTEntry, int)>:
c000ca46:	53                   	push   ebx
c000ca47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ca4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca57:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ca5a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ca5e:	5b                   	pop    ebx
c000ca5f:	c3                   	ret    

c000ca60 <IDT::addEntry(int, void (*)(), bool)>:
c000ca60:	53                   	push   ebx
c000ca61:	83 ec 10             	sub    esp,0x10
c000ca64:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ca69:	50                   	push   eax
c000ca6a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ca6e:	53                   	push   ebx
c000ca6f:	e8 46 ff ff ff       	call   c000c9ba <IDTEntry::IDTEntry(bool)>
c000ca74:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ca78:	53                   	push   ebx
c000ca79:	e8 aa ff ff ff       	call   c000ca28 <IDTEntry::setOffset(unsigned int)>
c000ca7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8e:	e8 b3 ff ff ff       	call   c000ca46 <IDT::addEntry(IDTEntry, int)>
c000ca93:	83 c4 30             	add    esp,0x30
c000ca96:	5b                   	pop    ebx
c000ca97:	c3                   	ret    

c000ca98 <IDT::flush()>:
c000ca98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca9c:	66 c7 05 4c bc 03 c0 ff 07 	mov    WORD PTR ds:0xc003bc4c,0x7ff
c000caa5:	a3 4e bc 03 c0       	mov    ds:0xc003bc4e,eax
c000caaa:	0f 01 1d 4c bc 03 c0 	lidtd  ds:0xc003bc4c
c000cab1:	c3                   	ret    

c000cab2 <IDT::setup()>:
c000cab2:	57                   	push   edi
c000cab3:	56                   	push   esi
c000cab4:	53                   	push   ebx
c000cab5:	83 ec 10             	sub    esp,0x10
c000cab8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cabc:	6a 00                	push   0x0
c000cabe:	68 80 03 00 c0       	push   0xc0000380
c000cac3:	6a 00                	push   0x0
c000cac5:	53                   	push   ebx
c000cac6:	e8 95 ff ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cacb:	6a 00                	push   0x0
c000cacd:	68 90 03 00 c0       	push   0xc0000390
c000cad2:	6a 01                	push   0x1
c000cad4:	53                   	push   ebx
c000cad5:	e8 86 ff ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cada:	83 c4 20             	add    esp,0x20
c000cadd:	6a 00                	push   0x0
c000cadf:	68 9a 03 00 c0       	push   0xc000039a
c000cae4:	6a 02                	push   0x2
c000cae6:	53                   	push   ebx
c000cae7:	e8 74 ff ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000caec:	6a 00                	push   0x0
c000caee:	68 a4 03 00 c0       	push   0xc00003a4
c000caf3:	6a 03                	push   0x3
c000caf5:	53                   	push   ebx
c000caf6:	e8 65 ff ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cafb:	83 c4 20             	add    esp,0x20
c000cafe:	6a 00                	push   0x0
c000cb00:	68 ae 03 00 c0       	push   0xc00003ae
c000cb05:	6a 04                	push   0x4
c000cb07:	53                   	push   ebx
c000cb08:	e8 53 ff ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cb0d:	6a 00                	push   0x0
c000cb0f:	68 b8 03 00 c0       	push   0xc00003b8
c000cb14:	6a 05                	push   0x5
c000cb16:	53                   	push   ebx
c000cb17:	e8 44 ff ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cb1c:	83 c4 20             	add    esp,0x20
c000cb1f:	6a 00                	push   0x0
c000cb21:	68 c2 03 00 c0       	push   0xc00003c2
c000cb26:	6a 06                	push   0x6
c000cb28:	53                   	push   ebx
c000cb29:	e8 32 ff ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cb2e:	6a 00                	push   0x0
c000cb30:	68 cc 03 00 c0       	push   0xc00003cc
c000cb35:	6a 07                	push   0x7
c000cb37:	53                   	push   ebx
c000cb38:	e8 23 ff ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cb3d:	83 c4 20             	add    esp,0x20
c000cb40:	6a 00                	push   0x0
c000cb42:	68 d6 03 00 c0       	push   0xc00003d6
c000cb47:	6a 08                	push   0x8
c000cb49:	53                   	push   ebx
c000cb4a:	e8 11 ff ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cb4f:	6a 00                	push   0x0
c000cb51:	68 de 03 00 c0       	push   0xc00003de
c000cb56:	6a 09                	push   0x9
c000cb58:	53                   	push   ebx
c000cb59:	e8 02 ff ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cb5e:	83 c4 20             	add    esp,0x20
c000cb61:	6a 00                	push   0x0
c000cb63:	68 e8 03 00 c0       	push   0xc00003e8
c000cb68:	6a 0a                	push   0xa
c000cb6a:	53                   	push   ebx
c000cb6b:	e8 f0 fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cb70:	6a 00                	push   0x0
c000cb72:	68 f0 03 00 c0       	push   0xc00003f0
c000cb77:	6a 0b                	push   0xb
c000cb79:	53                   	push   ebx
c000cb7a:	e8 e1 fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cb7f:	83 c4 20             	add    esp,0x20
c000cb82:	6a 00                	push   0x0
c000cb84:	68 f8 03 00 c0       	push   0xc00003f8
c000cb89:	6a 0c                	push   0xc
c000cb8b:	53                   	push   ebx
c000cb8c:	e8 cf fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cb91:	6a 00                	push   0x0
c000cb93:	68 00 04 00 c0       	push   0xc0000400
c000cb98:	6a 0d                	push   0xd
c000cb9a:	53                   	push   ebx
c000cb9b:	e8 c0 fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cba0:	83 c4 20             	add    esp,0x20
c000cba3:	6a 00                	push   0x0
c000cba5:	68 08 04 00 c0       	push   0xc0000408
c000cbaa:	6a 0e                	push   0xe
c000cbac:	53                   	push   ebx
c000cbad:	e8 ae fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cbb2:	6a 00                	push   0x0
c000cbb4:	68 10 04 00 c0       	push   0xc0000410
c000cbb9:	6a 0f                	push   0xf
c000cbbb:	53                   	push   ebx
c000cbbc:	e8 9f fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cbc1:	83 c4 20             	add    esp,0x20
c000cbc4:	6a 00                	push   0x0
c000cbc6:	68 1a 04 00 c0       	push   0xc000041a
c000cbcb:	6a 10                	push   0x10
c000cbcd:	53                   	push   ebx
c000cbce:	e8 8d fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cbd3:	6a 00                	push   0x0
c000cbd5:	68 24 04 00 c0       	push   0xc0000424
c000cbda:	6a 11                	push   0x11
c000cbdc:	53                   	push   ebx
c000cbdd:	e8 7e fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cbe2:	83 c4 20             	add    esp,0x20
c000cbe5:	6a 00                	push   0x0
c000cbe7:	68 2e 04 00 c0       	push   0xc000042e
c000cbec:	6a 12                	push   0x12
c000cbee:	53                   	push   ebx
c000cbef:	e8 6c fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cbf4:	6a 01                	push   0x1
c000cbf6:	68 38 04 00 c0       	push   0xc0000438
c000cbfb:	6a 60                	push   0x60
c000cbfd:	53                   	push   ebx
c000cbfe:	e8 5d fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cc03:	83 c4 20             	add    esp,0x20
c000cc06:	6a 00                	push   0x0
c000cc08:	68 42 04 00 c0       	push   0xc0000442
c000cc0d:	6a 20                	push   0x20
c000cc0f:	53                   	push   ebx
c000cc10:	e8 4b fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cc15:	6a 00                	push   0x0
c000cc17:	68 4c 04 00 c0       	push   0xc000044c
c000cc1c:	6a 21                	push   0x21
c000cc1e:	53                   	push   ebx
c000cc1f:	e8 3c fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cc24:	83 c4 20             	add    esp,0x20
c000cc27:	6a 00                	push   0x0
c000cc29:	68 56 04 00 c0       	push   0xc0000456
c000cc2e:	6a 22                	push   0x22
c000cc30:	53                   	push   ebx
c000cc31:	e8 2a fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cc36:	6a 00                	push   0x0
c000cc38:	68 60 04 00 c0       	push   0xc0000460
c000cc3d:	6a 23                	push   0x23
c000cc3f:	53                   	push   ebx
c000cc40:	e8 1b fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cc45:	83 c4 20             	add    esp,0x20
c000cc48:	6a 00                	push   0x0
c000cc4a:	68 6a 04 00 c0       	push   0xc000046a
c000cc4f:	6a 24                	push   0x24
c000cc51:	53                   	push   ebx
c000cc52:	e8 09 fe ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cc57:	6a 00                	push   0x0
c000cc59:	68 74 04 00 c0       	push   0xc0000474
c000cc5e:	6a 25                	push   0x25
c000cc60:	53                   	push   ebx
c000cc61:	e8 fa fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cc66:	83 c4 20             	add    esp,0x20
c000cc69:	6a 00                	push   0x0
c000cc6b:	68 7e 04 00 c0       	push   0xc000047e
c000cc70:	6a 26                	push   0x26
c000cc72:	53                   	push   ebx
c000cc73:	e8 e8 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cc78:	6a 00                	push   0x0
c000cc7a:	68 88 04 00 c0       	push   0xc0000488
c000cc7f:	6a 27                	push   0x27
c000cc81:	53                   	push   ebx
c000cc82:	e8 d9 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cc87:	83 c4 20             	add    esp,0x20
c000cc8a:	6a 00                	push   0x0
c000cc8c:	68 92 04 00 c0       	push   0xc0000492
c000cc91:	6a 28                	push   0x28
c000cc93:	53                   	push   ebx
c000cc94:	e8 c7 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cc99:	6a 00                	push   0x0
c000cc9b:	68 9c 04 00 c0       	push   0xc000049c
c000cca0:	6a 29                	push   0x29
c000cca2:	53                   	push   ebx
c000cca3:	e8 b8 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cca8:	83 c4 20             	add    esp,0x20
c000ccab:	6a 00                	push   0x0
c000ccad:	68 a6 04 00 c0       	push   0xc00004a6
c000ccb2:	6a 2a                	push   0x2a
c000ccb4:	53                   	push   ebx
c000ccb5:	e8 a6 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000ccba:	6a 00                	push   0x0
c000ccbc:	68 b0 04 00 c0       	push   0xc00004b0
c000ccc1:	6a 2b                	push   0x2b
c000ccc3:	53                   	push   ebx
c000ccc4:	e8 97 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000ccc9:	83 c4 20             	add    esp,0x20
c000cccc:	6a 00                	push   0x0
c000ccce:	68 ba 04 00 c0       	push   0xc00004ba
c000ccd3:	6a 2c                	push   0x2c
c000ccd5:	53                   	push   ebx
c000ccd6:	e8 85 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000ccdb:	6a 00                	push   0x0
c000ccdd:	68 c4 04 00 c0       	push   0xc00004c4
c000cce2:	6a 2d                	push   0x2d
c000cce4:	53                   	push   ebx
c000cce5:	e8 76 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000ccea:	83 c4 20             	add    esp,0x20
c000cced:	6a 00                	push   0x0
c000ccef:	68 ce 04 00 c0       	push   0xc00004ce
c000ccf4:	6a 2e                	push   0x2e
c000ccf6:	53                   	push   ebx
c000ccf7:	e8 64 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000ccfc:	6a 00                	push   0x0
c000ccfe:	68 d8 04 00 c0       	push   0xc00004d8
c000cd03:	6a 2f                	push   0x2f
c000cd05:	53                   	push   ebx
c000cd06:	e8 55 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cd0b:	83 c4 20             	add    esp,0x20
c000cd0e:	6a 00                	push   0x0
c000cd10:	68 e2 04 00 c0       	push   0xc00004e2
c000cd15:	6a 30                	push   0x30
c000cd17:	53                   	push   ebx
c000cd18:	e8 43 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cd1d:	6a 00                	push   0x0
c000cd1f:	68 ec 04 00 c0       	push   0xc00004ec
c000cd24:	6a 31                	push   0x31
c000cd26:	53                   	push   ebx
c000cd27:	e8 34 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cd2c:	83 c4 20             	add    esp,0x20
c000cd2f:	6a 00                	push   0x0
c000cd31:	68 f6 04 00 c0       	push   0xc00004f6
c000cd36:	6a 32                	push   0x32
c000cd38:	53                   	push   ebx
c000cd39:	e8 22 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cd3e:	6a 00                	push   0x0
c000cd40:	68 00 05 00 c0       	push   0xc0000500
c000cd45:	6a 33                	push   0x33
c000cd47:	53                   	push   ebx
c000cd48:	e8 13 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cd4d:	83 c4 20             	add    esp,0x20
c000cd50:	6a 00                	push   0x0
c000cd52:	68 0a 05 00 c0       	push   0xc000050a
c000cd57:	6a 34                	push   0x34
c000cd59:	53                   	push   ebx
c000cd5a:	e8 01 fd ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cd5f:	6a 00                	push   0x0
c000cd61:	68 14 05 00 c0       	push   0xc0000514
c000cd66:	6a 35                	push   0x35
c000cd68:	53                   	push   ebx
c000cd69:	e8 f2 fc ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cd6e:	83 c4 20             	add    esp,0x20
c000cd71:	6a 00                	push   0x0
c000cd73:	68 1e 05 00 c0       	push   0xc000051e
c000cd78:	6a 36                	push   0x36
c000cd7a:	53                   	push   ebx
c000cd7b:	e8 e0 fc ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cd80:	6a 00                	push   0x0
c000cd82:	68 28 05 00 c0       	push   0xc0000528
c000cd87:	6a 37                	push   0x37
c000cd89:	53                   	push   ebx
c000cd8a:	e8 d1 fc ff ff       	call   c000ca60 <IDT::addEntry(int, void (*)(), bool)>
c000cd8f:	83 c4 20             	add    esp,0x20
c000cd92:	e8 02 47 00 00       	call   c0011499 <Virt::getAKernelVAS()>
c000cd97:	52                   	push   edx
c000cd98:	6a 03                	push   0x3
c000cd9a:	6a 02                	push   0x2
c000cd9c:	50                   	push   eax
c000cd9d:	e8 9e 4c 00 00       	call   c0011a40 <VAS::allocatePages(int, int)>
c000cda2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cda9:	89 c6                	mov    esi,eax
c000cdab:	e8 ea 56 00 00       	call   c001249a <operator new(unsigned long)>
c000cdb0:	81 c6 00 20 00 00    	add    esi,0x2000
c000cdb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdb9:	89 c7                	mov    edi,eax
c000cdbb:	e8 30 40 00 00       	call   c0010df0 <TSS::TSS()>
c000cdc0:	83 c4 0c             	add    esp,0xc
c000cdc3:	68 d6 03 00 c0       	push   0xc00003d6
c000cdc8:	56                   	push   esi
c000cdc9:	57                   	push   edi
c000cdca:	e8 61 40 00 00       	call   c0010e30 <TSS::setup(unsigned long, unsigned long)>
c000cdcf:	59                   	pop    ecx
c000cdd0:	89 c6                	mov    esi,eax
c000cdd2:	5f                   	pop    edi
c000cdd3:	6a 00                	push   0x0
c000cdd5:	8d 44 24 14          	lea    eax,[esp+0x14]
c000cdd9:	50                   	push   eax
c000cdda:	e8 db fb ff ff       	call   c000c9ba <IDTEntry::IDTEntry(bool)>
c000cddf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cde3:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000cde8:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000cdef:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000cdf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cdf9:	80 ce 05             	or     dh,0x5
c000cdfc:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000cdff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ce07:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ce0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce0d:	e8 86 fc ff ff       	call   c000ca98 <IDT::flush()>
c000ce12:	83 c4 20             	add    esp,0x20
c000ce15:	5b                   	pop    ebx
c000ce16:	5e                   	pop    esi
c000ce17:	5f                   	pop    edi
c000ce18:	c3                   	ret    

c000ce19 <stringifyxWithBase(unsigned int, char*, int)>:
c000ce19:	57                   	push   edi
c000ce1a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ce1f:	56                   	push   esi
c000ce20:	be 84 8b 03 c0       	mov    esi,0xc0038b84
c000ce25:	53                   	push   ebx
c000ce26:	83 ec 40             	sub    esp,0x40
c000ce29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ce2d:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ce31:	fc                   	cld    
c000ce32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ce34:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ce38:	83 f9 3e             	cmp    ecx,0x3e
c000ce3b:	7e 05                	jle    c000ce42 <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ce3d:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ce42:	89 df                	mov    edi,ebx
c000ce44:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ce48:	eb 02                	jmp    c000ce4c <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ce4a:	89 c7                	mov    edi,eax
c000ce4c:	31 d2                	xor    edx,edx
c000ce4e:	46                   	inc    esi
c000ce4f:	89 f8                	mov    eax,edi
c000ce51:	f7 f1                	div    ecx
c000ce53:	39 cf                	cmp    edi,ecx
c000ce55:	73 f3                	jae    c000ce4a <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ce57:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce5a:	eb 02                	jmp    c000ce5e <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ce5c:	89 c3                	mov    ebx,eax
c000ce5e:	31 d2                	xor    edx,edx
c000ce60:	4e                   	dec    esi
c000ce61:	89 d8                	mov    eax,ebx
c000ce63:	f7 f1                	div    ecx
c000ce65:	39 cb                	cmp    ebx,ecx
c000ce67:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ce6b:	88 16                	mov    BYTE PTR [esi],dl
c000ce6d:	73 ed                	jae    c000ce5c <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ce6f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce73:	83 c4 40             	add    esp,0x40
c000ce76:	5b                   	pop    ebx
c000ce77:	5e                   	pop    esi
c000ce78:	5f                   	pop    edi
c000ce79:	c3                   	ret    

c000ce7a <logc(char)>:
c000ce7a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce7e:	ba fd 03 00 00       	mov    edx,0x3fd
c000ce83:	ec                   	in     al,dx
c000ce84:	a8 20                	test   al,0x20
c000ce86:	74 fb                	je     c000ce83 <logc(char)+0x9>
c000ce88:	ba f8 03 00 00       	mov    edx,0x3f8
c000ce8d:	88 c8                	mov    al,cl
c000ce8f:	ee                   	out    dx,al
c000ce90:	c3                   	ret    

c000ce91 <logs(char*)>:
c000ce91:	53                   	push   ebx
c000ce92:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ce96:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ce99:	84 c0                	test   al,al
c000ce9b:	74 0f                	je     c000ceac <logs(char*)+0x1b>
c000ce9d:	50                   	push   eax
c000ce9e:	43                   	inc    ebx
c000ce9f:	e8 d6 ff ff ff       	call   c000ce7a <logc(char)>
c000cea4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cea7:	5a                   	pop    edx
c000cea8:	84 c0                	test   al,al
c000ceaa:	75 f1                	jne    c000ce9d <logs(char*)+0xc>
c000ceac:	5b                   	pop    ebx
c000cead:	c3                   	ret    

c000ceae <logWriteInt(unsigned int)>:
c000ceae:	83 ec 10             	sub    esp,0x10
c000ceb1:	6a 0a                	push   0xa
c000ceb3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ceb7:	50                   	push   eax
c000ceb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cebc:	e8 58 ff ff ff       	call   c000ce19 <stringifyxWithBase(unsigned int, char*, int)>
c000cec1:	50                   	push   eax
c000cec2:	e8 ca ff ff ff       	call   c000ce91 <logs(char*)>
c000cec7:	83 c4 20             	add    esp,0x20
c000ceca:	c3                   	ret    

c000cecb <logWriteIntBase(unsigned int, int)>:
c000cecb:	83 ec 10             	sub    esp,0x10
c000cece:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ced2:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ced6:	50                   	push   eax
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 39 ff ff ff       	call   c000ce19 <stringifyxWithBase(unsigned int, char*, int)>
c000cee0:	50                   	push   eax
c000cee1:	e8 ab ff ff ff       	call   c000ce91 <logs(char*)>
c000cee6:	83 c4 20             	add    esp,0x20
c000cee9:	c3                   	ret    

c000ceea <kprintf(char const*, ...)>:
c000ceea:	55                   	push   ebp
c000ceeb:	57                   	push   edi
c000ceec:	56                   	push   esi
c000ceed:	53                   	push   ebx
c000ceee:	83 ec 0c             	sub    esp,0xc
c000cef1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cef5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cef9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cefd:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cf00:	84 c0                	test   al,al
c000cf02:	74 4a                	je     c000cf4e <kprintf(char const*, ...)+0x64>
c000cf04:	31 db                	xor    ebx,ebx
c000cf06:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cf09:	3c 25                	cmp    al,0x25
c000cf0b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cf0e:	0f 85 e4 00 00 00    	jne    c000cff8 <kprintf(char const*, ...)+0x10e>
c000cf14:	83 c3 02             	add    ebx,0x2
c000cf17:	8a 07                	mov    al,BYTE PTR [edi]
c000cf19:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cf1c:	83 e8 25             	sub    eax,0x25
c000cf1f:	3c 53                	cmp    al,0x53
c000cf21:	0f 87 ba 00 00 00    	ja     c000cfe1 <kprintf(char const*, ...)+0xf7>
c000cf27:	0f b6 c0             	movzx  eax,al
c000cf2a:	ff 24 85 d8 8c 03 c0 	jmp    DWORD PTR [eax*4-0x3ffc7328]
c000cf31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf35:	89 c8                	mov    eax,ecx
c000cf37:	83 c1 04             	add    ecx,0x4
c000cf3a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf3e:	ff 30                	push   DWORD PTR [eax]
c000cf40:	e8 4c ff ff ff       	call   c000ce91 <logs(char*)>
c000cf45:	58                   	pop    eax
c000cf46:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cf4a:	84 c0                	test   al,al
c000cf4c:	75 b8                	jne    c000cf06 <kprintf(char const*, ...)+0x1c>
c000cf4e:	83 c4 0c             	add    esp,0xc
c000cf51:	5b                   	pop    ebx
c000cf52:	5e                   	pop    esi
c000cf53:	5f                   	pop    edi
c000cf54:	5d                   	pop    ebp
c000cf55:	c3                   	ret    
c000cf56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf5a:	89 d0                	mov    eax,edx
c000cf5c:	83 c2 04             	add    edx,0x4
c000cf5f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf63:	ff 30                	push   DWORD PTR [eax]
c000cf65:	e8 44 ff ff ff       	call   c000ceae <logWriteInt(unsigned int)>
c000cf6a:	58                   	pop    eax
c000cf6b:	eb d9                	jmp    c000cf46 <kprintf(char const*, ...)+0x5c>
c000cf6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf71:	89 d0                	mov    eax,edx
c000cf73:	83 c2 04             	add    edx,0x4
c000cf76:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cf79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf7d:	50                   	push   eax
c000cf7e:	e8 f7 fe ff ff       	call   c000ce7a <logc(char)>
c000cf83:	58                   	pop    eax
c000cf84:	eb c0                	jmp    c000cf46 <kprintf(char const*, ...)+0x5c>
c000cf86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf8a:	89 c8                	mov    eax,ecx
c000cf8c:	83 c1 04             	add    ecx,0x4
c000cf8f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf93:	ff 30                	push   DWORD PTR [eax]
c000cf95:	e8 14 ff ff ff       	call   c000ceae <logWriteInt(unsigned int)>
c000cf9a:	5f                   	pop    edi
c000cf9b:	eb a9                	jmp    c000cf46 <kprintf(char const*, ...)+0x5c>
c000cf9d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfa1:	89 c8                	mov    eax,ecx
c000cfa3:	83 c1 04             	add    ecx,0x4
c000cfa6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cfaa:	6a 10                	push   0x10
c000cfac:	ff 30                	push   DWORD PTR [eax]
c000cfae:	e8 18 ff ff ff       	call   c000cecb <logWriteIntBase(unsigned int, int)>
c000cfb3:	59                   	pop    ecx
c000cfb4:	5f                   	pop    edi
c000cfb5:	eb 8f                	jmp    c000cf46 <kprintf(char const*, ...)+0x5c>
c000cfb7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cfbb:	89 d0                	mov    eax,edx
c000cfbd:	83 c2 08             	add    edx,0x8
c000cfc0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cfc4:	6a 10                	push   0x10
c000cfc6:	ff 30                	push   DWORD PTR [eax]
c000cfc8:	e8 fe fe ff ff       	call   c000cecb <logWriteIntBase(unsigned int, int)>
c000cfcd:	58                   	pop    eax
c000cfce:	5a                   	pop    edx
c000cfcf:	e9 72 ff ff ff       	jmp    c000cf46 <kprintf(char const*, ...)+0x5c>
c000cfd4:	6a 25                	push   0x25
c000cfd6:	e8 9f fe ff ff       	call   c000ce7a <logc(char)>
c000cfdb:	58                   	pop    eax
c000cfdc:	e9 65 ff ff ff       	jmp    c000cf46 <kprintf(char const*, ...)+0x5c>
c000cfe1:	6a 25                	push   0x25
c000cfe3:	e8 92 fe ff ff       	call   c000ce7a <logc(char)>
c000cfe8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cfeb:	50                   	push   eax
c000cfec:	e8 89 fe ff ff       	call   c000ce7a <logc(char)>
c000cff1:	5a                   	pop    edx
c000cff2:	59                   	pop    ecx
c000cff3:	e9 4e ff ff ff       	jmp    c000cf46 <kprintf(char const*, ...)+0x5c>
c000cff8:	50                   	push   eax
c000cff9:	89 eb                	mov    ebx,ebp
c000cffb:	e8 7a fe ff ff       	call   c000ce7a <logc(char)>
c000d000:	89 fd                	mov    ebp,edi
c000d002:	58                   	pop    eax
c000d003:	e9 3e ff ff ff       	jmp    c000cf46 <kprintf(char const*, ...)+0x5c>

c000d008 <panic(char const*)>:
c000d008:	55                   	push   ebp
c000d009:	89 e5                	mov    ebp,esp
c000d00b:	53                   	push   ebx
c000d00c:	50                   	push   eax
c000d00d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000d010:	fa                   	cli    
c000d011:	c6 05 52 bc 03 c0 01 	mov    BYTE PTR ds:0xc003bc52,0x1
c000d018:	53                   	push   ebx
c000d019:	c6 05 e0 ae 03 c0 00 	mov    BYTE PTR ds:0xc003aee0,0x0
c000d020:	68 28 8e 03 c0       	push   0xc0038e28
c000d025:	e8 c0 fe ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000d02a:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d02f:	52                   	push   edx
c000d030:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d036:	e8 36 36 00 00       	call   c0010671 <setActiveTerminal(VgaText*)>
c000d03b:	83 c4 0c             	add    esp,0xc
c000d03e:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d043:	6a 01                	push   0x1
c000d045:	6a 0f                	push   0xf
c000d047:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d04d:	e8 5e 30 00 00       	call   c00100b0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d052:	59                   	pop    ecx
c000d053:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d058:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d05e:	e8 af 38 00 00       	call   c0010912 <VgaText::clearScreen()>
c000d063:	58                   	pop    eax
c000d064:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d069:	5a                   	pop    edx
c000d06a:	68 41 8e 03 c0       	push   0xc0038e41
c000d06f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d075:	e8 16 3a 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d07a:	59                   	pop    ecx
c000d07b:	58                   	pop    eax
c000d07c:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d081:	68 c4 8b 03 c0       	push   0xc0038bc4
c000d086:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d08c:	e8 ff 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d091:	58                   	pop    eax
c000d092:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d097:	5a                   	pop    edx
c000d098:	68 5d 8e 03 c0       	push   0xc0038e5d
c000d09d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0a3:	e8 e8 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d0a8:	59                   	pop    ecx
c000d0a9:	58                   	pop    eax
c000d0aa:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d0af:	53                   	push   ebx
c000d0b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0b6:	e8 d5 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d0bb:	58                   	pop    eax
c000d0bc:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d0c1:	5a                   	pop    edx
c000d0c2:	68 7d 8e 03 c0       	push   0xc0038e7d
c000d0c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0cd:	e8 be 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d0d2:	59                   	pop    ecx
c000d0d3:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d0d8:	5b                   	pop    ebx
c000d0d9:	68 00 8c 03 c0       	push   0xc0038c00
c000d0de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0e4:	e8 a7 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d0e9:	58                   	pop    eax
c000d0ea:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d0ef:	5a                   	pop    edx
c000d0f0:	68 5d 8e 03 c0       	push   0xc0038e5d
c000d0f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0fb:	e8 90 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d100:	59                   	pop    ecx
c000d101:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d106:	5b                   	pop    ebx
c000d107:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d10a:	83 c0 0c             	add    eax,0xc
c000d10d:	50                   	push   eax
c000d10e:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d113:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d119:	e8 72 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d11e:	58                   	pop    eax
c000d11f:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d124:	5a                   	pop    edx
c000d125:	68 7c 8e 03 c0       	push   0xc0038e7c
c000d12a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d130:	e8 5b 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d135:	59                   	pop    ecx
c000d136:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d13b:	5b                   	pop    ebx
c000d13c:	68 2c 8c 03 c0       	push   0xc0038c2c
c000d141:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d147:	e8 44 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d14c:	58                   	pop    eax
c000d14d:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d152:	5a                   	pop    edx
c000d153:	68 6c 8c 03 c0       	push   0xc0038c6c
c000d158:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d15e:	e8 2d 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d163:	59                   	pop    ecx
c000d164:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d169:	5b                   	pop    ebx
c000d16a:	68 68 8e 03 c0       	push   0xc0038e68
c000d16f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d175:	e8 16 39 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d17a:	58                   	pop    eax
c000d17b:	5a                   	pop    edx
c000d17c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d17f:	68 80 8e 03 c0       	push   0xc0038e80
c000d184:	e8 61 fd ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000d189:	59                   	pop    ecx
c000d18a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d18d:	5b                   	pop    ebx
c000d18e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d191:	68 89 8e 03 c0       	push   0xc0038e89
c000d196:	e8 4f fd ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000d19b:	5a                   	pop    edx
c000d19c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d19f:	59                   	pop    ecx
c000d1a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1a2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d1a5:	68 19 9d 03 c0       	push   0xc0039d19
c000d1aa:	e8 3b fd ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000d1af:	5b                   	pop    ebx
c000d1b0:	58                   	pop    eax
c000d1b1:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d1b6:	68 b0 8c 03 c0       	push   0xc0038cb0
c000d1bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1c1:	e8 ca 38 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d1c6:	58                   	pop    eax
c000d1c7:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d1cc:	5a                   	pop    edx
c000d1cd:	68 92 8e 03 c0       	push   0xc0038e92
c000d1d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1d8:	e8 b3 38 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d1dd:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d1e2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d1e8:	e8 28 18 01 00       	call   c001ea15 <CPU::readCR0()>
c000d1ed:	59                   	pop    ecx
c000d1ee:	5a                   	pop    edx
c000d1ef:	50                   	push   eax
c000d1f0:	53                   	push   ebx
c000d1f1:	e8 c0 38 00 00       	call   c0010ab6 <VgaText::putx(unsigned int)>
c000d1f6:	59                   	pop    ecx
c000d1f7:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d1fc:	5b                   	pop    ebx
c000d1fd:	68 9c 8e 03 c0       	push   0xc0038e9c
c000d202:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d208:	e8 83 38 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d20d:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d212:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d218:	e8 0a 18 01 00       	call   c001ea27 <CPU::readCR2()>
c000d21d:	5a                   	pop    edx
c000d21e:	59                   	pop    ecx
c000d21f:	50                   	push   eax
c000d220:	53                   	push   ebx
c000d221:	e8 90 38 00 00       	call   c0010ab6 <VgaText::putx(unsigned int)>
c000d226:	5b                   	pop    ebx
c000d227:	58                   	pop    eax
c000d228:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d22d:	68 a6 8e 03 c0       	push   0xc0038ea6
c000d232:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d238:	e8 53 38 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d23d:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d242:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d248:	e8 ec 17 01 00       	call   c001ea39 <CPU::readCR3()>
c000d24d:	5a                   	pop    edx
c000d24e:	59                   	pop    ecx
c000d24f:	50                   	push   eax
c000d250:	53                   	push   ebx
c000d251:	e8 60 38 00 00       	call   c0010ab6 <VgaText::putx(unsigned int)>
c000d256:	5b                   	pop    ebx
c000d257:	58                   	pop    eax
c000d258:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d25d:	68 b9 8e 03 c0       	push   0xc0038eb9
c000d262:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d268:	e8 23 38 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d26d:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d272:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d278:	e8 ce 17 01 00       	call   c001ea4b <CPU::readCR4()>
c000d27d:	5a                   	pop    edx
c000d27e:	59                   	pop    ecx
c000d27f:	50                   	push   eax
c000d280:	53                   	push   ebx
c000d281:	e8 30 38 00 00       	call   c0010ab6 <VgaText::putx(unsigned int)>
c000d286:	5b                   	pop    ebx
c000d287:	58                   	pop    eax
c000d288:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d28d:	68 c3 8e 03 c0       	push   0xc0038ec3
c000d292:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d298:	e8 f3 37 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d29d:	5a                   	pop    edx
c000d29e:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d2a3:	59                   	pop    ecx
c000d2a4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d2aa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2ad:	50                   	push   eax
c000d2ae:	e8 03 38 00 00       	call   c0010ab6 <VgaText::putx(unsigned int)>
c000d2b3:	5b                   	pop    ebx
c000d2b4:	58                   	pop    eax
c000d2b5:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d2ba:	68 da 8e 03 c0       	push   0xc0038eda
c000d2bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d2c5:	e8 c6 37 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d2ca:	5a                   	pop    edx
c000d2cb:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d2d0:	59                   	pop    ecx
c000d2d1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d2d7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d2da:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d2dd:	50                   	push   eax
c000d2de:	e8 d3 37 00 00       	call   c0010ab6 <VgaText::putx(unsigned int)>
c000d2e3:	5b                   	pop    ebx
c000d2e4:	58                   	pop    eax
c000d2e5:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d2ea:	68 da 8e 03 c0       	push   0xc0038eda
c000d2ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d2f5:	e8 96 37 00 00       	call   c0010a90 <VgaText::puts(char const*)>
c000d2fa:	59                   	pop    ecx
c000d2fb:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c000d300:	5b                   	pop    ebx
c000d301:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d307:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d30a:	8b 12                	mov    edx,DWORD PTR [edx]
c000d30c:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d30f:	50                   	push   eax
c000d310:	e8 a1 37 00 00       	call   c0010ab6 <VgaText::putx(unsigned int)>
c000d315:	83 c4 10             	add    esp,0x10
c000d318:	b2 fe                	mov    dl,0xfe
c000d31a:	e4 60                	in     al,0x60
c000d31c:	3c 1c                	cmp    al,0x1c
c000d31e:	74 04                	je     c000d324 <panic(char const*)+0x31c>
c000d320:	3c 5a                	cmp    al,0x5a
c000d322:	75 f6                	jne    c000d31a <panic(char const*)+0x312>
c000d324:	e4 64                	in     al,0x64
c000d326:	a8 02                	test   al,0x2
c000d328:	75 fa                	jne    c000d324 <panic(char const*)+0x31c>
c000d32a:	88 d0                	mov    al,dl
c000d32c:	e6 64                	out    0x64,al
c000d32e:	fa                   	cli    
c000d32f:	f4                   	hlt    
c000d330:	eb e8                	jmp    c000d31a <panic(char const*)+0x312>

c000d332 <sbrk>:
c000d332:	55                   	push   ebp
c000d333:	57                   	push   edi
c000d334:	56                   	push   esi
c000d335:	53                   	push   ebx
c000d336:	83 ec 1c             	sub    esp,0x1c
c000d339:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d33d:	85 db                	test   ebx,ebx
c000d33f:	74 37                	je     c000d378 <sbrk+0x46>
c000d341:	78 3f                	js     c000d382 <sbrk+0x50>
c000d343:	e8 88 9e 00 00       	call   c00171d0 <thisCPU()>
c000d348:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000d34e:	83 e0 01             	and    eax,0x1
c000d351:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d355:	a1 d0 ae 03 c0       	mov    eax,ds:0xc003aed0
c000d35a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d35e:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000d364:	89 d8                	mov    eax,ebx
c000d366:	78 35                	js     c000d39d <sbrk+0x6b>
c000d368:	c1 f8 0c             	sar    eax,0xc
c000d36b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d36f:	89 c7                	mov    edi,eax
c000d371:	be 00 00 00 00       	mov    esi,0x0
c000d376:	eb 3c                	jmp    c000d3b4 <sbrk+0x82>
c000d378:	a1 d0 ae 03 c0       	mov    eax,ds:0xc003aed0
c000d37d:	e9 ad 00 00 00       	jmp    c000d42f <sbrk+0xfd>
c000d382:	83 ec 08             	sub    esp,0x8
c000d385:	53                   	push   ebx
c000d386:	68 e0 8e 03 c0       	push   0xc0038ee0
c000d38b:	e8 5a fb ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000d390:	83 c4 10             	add    esp,0x10
c000d393:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d398:	e9 92 00 00 00       	jmp    c000d42f <sbrk+0xfd>
c000d39d:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000d3a3:	eb c3                	jmp    c000d368 <sbrk+0x36>
c000d3a5:	81 05 d0 ae 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc003aed0,0x1000
c000d3af:	46                   	inc    esi
c000d3b0:	39 f7                	cmp    edi,esi
c000d3b2:	74 34                	je     c000d3e8 <sbrk+0xb6>
c000d3b4:	e8 e0 40 00 00       	call   c0011499 <Virt::getAKernelVAS()>
c000d3b9:	89 c3                	mov    ebx,eax
c000d3bb:	8b 2d d0 ae 03 c0    	mov    ebp,DWORD PTR ds:0xc003aed0
c000d3c1:	e8 c9 06 00 00       	call   c000da8f <Phys::allocatePage()>
c000d3c6:	68 01 04 00 00       	push   0x401
c000d3cb:	55                   	push   ebp
c000d3cc:	50                   	push   eax
c000d3cd:	53                   	push   ebx
c000d3ce:	e8 6d 45 00 00       	call   c0011940 <VAS::mapPage(unsigned long, unsigned long, int)>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d3db:	74 c8                	je     c000d3a5 <sbrk+0x73>
c000d3dd:	8b 1d d0 ae 03 c0    	mov    ebx,DWORD PTR ds:0xc003aed0
c000d3e3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d3e6:	eb bd                	jmp    c000d3a5 <sbrk+0x73>
c000d3e8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d3ed:	74 48                	je     c000d437 <sbrk+0x105>
c000d3ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3f3:	89 d3                	mov    ebx,edx
c000d3f5:	c1 eb 0a             	shr    ebx,0xa
c000d3f8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000d3fe:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000d404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d408:	c1 e0 0c             	shl    eax,0xc
c000d40b:	01 d0                	add    eax,edx
c000d40d:	c1 e8 0a             	shr    eax,0xa
c000d410:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d415:	2d 00 00 40 00       	sub    eax,0x400000
c000d41a:	39 c3                	cmp    ebx,eax
c000d41c:	77 0d                	ja     c000d42b <sbrk+0xf9>
c000d41e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d421:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d427:	39 d8                	cmp    eax,ebx
c000d429:	73 f3                	jae    c000d41e <sbrk+0xec>
c000d42b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d42f:	83 c4 1c             	add    esp,0x1c
c000d432:	5b                   	pop    ebx
c000d433:	5e                   	pop    esi
c000d434:	5f                   	pop    edi
c000d435:	5d                   	pop    ebp
c000d436:	c3                   	ret    
c000d437:	e8 fd 15 01 00       	call   c001ea39 <CPU::readCR3()>
c000d43c:	83 ec 0c             	sub    esp,0xc
c000d43f:	50                   	push   eax
c000d440:	e8 18 16 01 00       	call   c001ea5d <CPU::writeCR3(unsigned long)>
c000d445:	83 c4 10             	add    esp,0x10
c000d448:	eb e1                	jmp    c000d42b <sbrk+0xf9>

c000d44a <mmap>:
c000d44a:	83 ec 18             	sub    esp,0x18
c000d44d:	68 10 8f 03 c0       	push   0xc0038f10
c000d452:	e8 b1 fb ff ff       	call   c000d008 <panic(char const*)>
c000d457:	b8 00 00 00 00       	mov    eax,0x0
c000d45c:	83 c4 1c             	add    esp,0x1c
c000d45f:	c3                   	ret    

c000d460 <munmap>:
c000d460:	83 ec 18             	sub    esp,0x18
c000d463:	68 15 8f 03 c0       	push   0xc0038f15
c000d468:	e8 9b fb ff ff       	call   c000d008 <panic(char const*)>
c000d46d:	b8 00 00 00 00       	mov    eax,0x0
c000d472:	83 c4 1c             	add    esp,0x1c
c000d475:	c3                   	ret    

c000d476 <liballoc_lock()>:
c000d476:	83 ec 0c             	sub    esp,0xc
c000d479:	e8 0e 0f 00 00       	call   c000e38c <lockScheduler()>
c000d47e:	b8 00 00 00 00       	mov    eax,0x0
c000d483:	83 c4 0c             	add    esp,0xc
c000d486:	c3                   	ret    

c000d487 <liballoc_unlock()>:
c000d487:	83 ec 0c             	sub    esp,0xc
c000d48a:	e8 ff 0e 00 00       	call   c000e38e <unlockScheduler()>
c000d48f:	b8 00 00 00 00       	mov    eax,0x0
c000d494:	83 c4 0c             	add    esp,0xc
c000d497:	c3                   	ret    

c000d498 <liballoc_alloc(int)>:
c000d498:	83 ec 0c             	sub    esp,0xc
c000d49b:	e8 f9 3f 00 00       	call   c0011499 <Virt::getAKernelVAS()>
c000d4a0:	83 ec 04             	sub    esp,0x4
c000d4a3:	6a 01                	push   0x1
c000d4a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4a9:	50                   	push   eax
c000d4aa:	e8 91 45 00 00       	call   c0011a40 <VAS::allocatePages(int, int)>
c000d4af:	83 c4 1c             	add    esp,0x1c
c000d4b2:	c3                   	ret    

c000d4b3 <liballoc_free(void*, int)>:
c000d4b3:	83 ec 0c             	sub    esp,0xc
c000d4b6:	e8 de 3f 00 00       	call   c0011499 <Virt::getAKernelVAS()>
c000d4bb:	83 ec 08             	sub    esp,0x8
c000d4be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4c2:	50                   	push   eax
c000d4c3:	e8 9a 42 00 00       	call   c0011762 <VAS::freeAllocatedPages(unsigned long)>
c000d4c8:	b8 00 00 00 00       	mov    eax,0x0
c000d4cd:	83 c4 1c             	add    esp,0x1c
c000d4d0:	c3                   	ret    

c000d4d1 <realloc>:
c000d4d1:	83 ec 14             	sub    esp,0x14
c000d4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4dc:	e8 bd 41 ff ff       	call   c000169e <dlrealloc>
c000d4e1:	83 c4 1c             	add    esp,0x1c
c000d4e4:	c3                   	ret    

c000d4e5 <malloc>:
c000d4e5:	83 ec 18             	sub    esp,0x18
c000d4e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4ec:	e8 70 3c ff ff       	call   c0001161 <dlmalloc>
c000d4f1:	83 c4 1c             	add    esp,0x1c
c000d4f4:	c3                   	ret    

c000d4f5 <free>:
c000d4f5:	83 ec 18             	sub    esp,0x18
c000d4f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4fc:	e8 05 39 ff ff       	call   c0000e06 <dlfree>
c000d501:	83 c4 1c             	add    esp,0x1c
c000d504:	c3                   	ret    

c000d505 <rfree>:
c000d505:	83 ec 18             	sub    esp,0x18
c000d508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d50c:	e8 e4 ff ff ff       	call   c000d4f5 <free>
c000d511:	83 c4 1c             	add    esp,0x1c
c000d514:	c3                   	ret    

c000d515 <calloc>:
c000d515:	56                   	push   esi
c000d516:	53                   	push   ebx
c000d517:	83 ec 10             	sub    esp,0x10
c000d51a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d51e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d523:	53                   	push   ebx
c000d524:	e8 bc ff ff ff       	call   c000d4e5 <malloc>
c000d529:	89 c6                	mov    esi,eax
c000d52b:	83 c4 0c             	add    esp,0xc
c000d52e:	53                   	push   ebx
c000d52f:	6a 00                	push   0x0
c000d531:	50                   	push   eax
c000d532:	e8 a1 31 ff ff       	call   c00006d8 <memset>
c000d537:	89 f0                	mov    eax,esi
c000d539:	83 c4 14             	add    esp,0x14
c000d53c:	5b                   	pop    ebx
c000d53d:	5e                   	pop    esi
c000d53e:	c3                   	ret    

c000d53f <hwTextMode_loadInData(VgaText*)>:
c000d53f:	57                   	push   edi
c000d540:	56                   	push   esi
c000d541:	53                   	push   ebx
c000d542:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d546:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d54c:	85 c0                	test   eax,eax
c000d54e:	7e 30                	jle    c000d580 <hwTextMode_loadInData(VgaText*)+0x41>
c000d550:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d553:	31 f6                	xor    esi,esi
c000d555:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d558:	31 c0                	xor    eax,eax
c000d55a:	c1 e1 05             	shl    ecx,0x5
c000d55d:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d563:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d567:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d56b:	40                   	inc    eax
c000d56c:	83 f8 50             	cmp    eax,0x50
c000d56f:	75 f2                	jne    c000d563 <hwTextMode_loadInData(VgaText*)+0x24>
c000d571:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d577:	46                   	inc    esi
c000d578:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d57e:	7f d5                	jg     c000d555 <hwTextMode_loadInData(VgaText*)+0x16>
c000d580:	5b                   	pop    ebx
c000d581:	5e                   	pop    esi
c000d582:	5f                   	pop    edi
c000d583:	c3                   	ret    

c000d584 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d584:	56                   	push   esi
c000d585:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d58a:	53                   	push   ebx
c000d58b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d58f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d593:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d599:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d59f:	c1 e0 04             	shl    eax,0x4
c000d5a2:	83 e6 0f             	and    esi,0xf
c000d5a5:	0f b6 c0             	movzx  eax,al
c000d5a8:	41                   	inc    ecx
c000d5a9:	09 f0                	or     eax,esi
c000d5ab:	83 c2 02             	add    edx,0x2
c000d5ae:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d5b2:	c1 e0 08             	shl    eax,0x8
c000d5b5:	09 f0                	or     eax,esi
c000d5b7:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d5bb:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d5c1:	75 d0                	jne    c000d593 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d5c3:	5b                   	pop    ebx
c000d5c4:	5e                   	pop    esi
c000d5c5:	c3                   	ret    

c000d5c6 <hwTextMode_showCursor(VgaText*, bool)>:
c000d5c6:	56                   	push   esi
c000d5c7:	53                   	push   ebx
c000d5c8:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d5cd:	74 38                	je     c000d607 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d5cf:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d5d4:	b0 0a                	mov    al,0xa
c000d5d6:	89 da                	mov    edx,ebx
c000d5d8:	ee                   	out    dx,al
c000d5d9:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d5de:	89 ca                	mov    edx,ecx
c000d5e0:	ec                   	in     al,dx
c000d5e1:	b2 0f                	mov    dl,0xf
c000d5e3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d5e7:	83 e0 c0             	and    eax,0xffffffc0
c000d5ea:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d5f0:	09 d0                	or     eax,edx
c000d5f2:	89 ca                	mov    edx,ecx
c000d5f4:	ee                   	out    dx,al
c000d5f5:	b0 0b                	mov    al,0xb
c000d5f7:	89 da                	mov    edx,ebx
c000d5f9:	ee                   	out    dx,al
c000d5fa:	89 ca                	mov    edx,ecx
c000d5fc:	ec                   	in     al,dx
c000d5fd:	83 e0 e0             	and    eax,0xffffffe0
c000d600:	83 c8 0f             	or     eax,0xf
c000d603:	ee                   	out    dx,al
c000d604:	5b                   	pop    ebx
c000d605:	5e                   	pop    esi
c000d606:	c3                   	ret    
c000d607:	b0 0a                	mov    al,0xa
c000d609:	ba d4 03 00 00       	mov    edx,0x3d4
c000d60e:	ee                   	out    dx,al
c000d60f:	b0 20                	mov    al,0x20
c000d611:	ba d5 03 00 00       	mov    edx,0x3d5
c000d616:	ee                   	out    dx,al
c000d617:	5b                   	pop    ebx
c000d618:	5e                   	pop    esi
c000d619:	c3                   	ret    

c000d61a <hwTextMode_update(VgaText*)>:
c000d61a:	c3                   	ret    

c000d61b <hwTextMode_updateCursor(VgaText*)>:
c000d61b:	56                   	push   esi
c000d61c:	b9 19 00 00 00       	mov    ecx,0x19
c000d621:	53                   	push   ebx
c000d622:	be d4 03 00 00       	mov    esi,0x3d4
c000d627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d62b:	89 f2                	mov    edx,esi
c000d62d:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d633:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d639:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d63c:	c1 e1 04             	shl    ecx,0x4
c000d63f:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d645:	b0 0f                	mov    al,0xf
c000d647:	ee                   	out    dx,al
c000d648:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d64d:	88 c8                	mov    al,cl
c000d64f:	89 da                	mov    edx,ebx
c000d651:	ee                   	out    dx,al
c000d652:	b0 0e                	mov    al,0xe
c000d654:	89 f2                	mov    edx,esi
c000d656:	ee                   	out    dx,al
c000d657:	89 c8                	mov    eax,ecx
c000d659:	89 da                	mov    edx,ebx
c000d65b:	66 c1 e8 08          	shr    ax,0x8
c000d65f:	ee                   	out    dx,al
c000d660:	5b                   	pop    ebx
c000d661:	5e                   	pop    esi
c000d662:	c3                   	ret    

c000d663 <hwTextMode_disableBlink(VgaText*, bool)>:
c000d663:	ba da 03 00 00       	mov    edx,0x3da
c000d668:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d66d:	75 18                	jne    c000d687 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d66f:	ec                   	in     al,dx
c000d670:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d675:	b0 30                	mov    al,0x30
c000d677:	89 ca                	mov    edx,ecx
c000d679:	ee                   	out    dx,al
c000d67a:	ba c1 03 00 00       	mov    edx,0x3c1
c000d67f:	ec                   	in     al,dx
c000d680:	83 c8 08             	or     eax,0x8
c000d683:	89 ca                	mov    edx,ecx
c000d685:	ee                   	out    dx,al
c000d686:	c3                   	ret    
c000d687:	ec                   	in     al,dx
c000d688:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d68d:	b0 30                	mov    al,0x30
c000d68f:	89 ca                	mov    edx,ecx
c000d691:	ee                   	out    dx,al
c000d692:	ba c1 03 00 00       	mov    edx,0x3c1
c000d697:	ec                   	in     al,dx
c000d698:	83 e0 f7             	and    eax,0xfffffff7
c000d69b:	89 ca                	mov    edx,ecx
c000d69d:	ee                   	out    dx,al
c000d69e:	c3                   	ret    

c000d69f <hwTextMode_scrollScreen(VgaText*)>:
c000d69f:	55                   	push   ebp
c000d6a0:	bd 02 00 00 00       	mov    ebp,0x2
c000d6a5:	57                   	push   edi
c000d6a6:	56                   	push   esi
c000d6a7:	53                   	push   ebx
c000d6a8:	83 ec 1c             	sub    esp,0x1c
c000d6ab:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d6b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d6b7:	31 c0                	xor    eax,eax
c000d6b9:	eb 0b                	jmp    c000d6c6 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d6bb:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d6c1:	74 57                	je     c000d71a <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d6c3:	43                   	inc    ebx
c000d6c4:	89 f0                	mov    eax,esi
c000d6c6:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d6cc:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d6d2:	88 13                	mov    BYTE PTR [ebx],dl
c000d6d4:	8d 70 01             	lea    esi,[eax+0x1]
c000d6d7:	83 fd 18             	cmp    ebp,0x18
c000d6da:	75 df                	jne    c000d6bb <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d6dc:	a8 01                	test   al,0x1
c000d6de:	75 13                	jne    c000d6f3 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d6e0:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d6e3:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d6e9:	75 d8                	jne    c000d6c3 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d6eb:	83 c4 1c             	add    esp,0x1c
c000d6ee:	5b                   	pop    ebx
c000d6ef:	5e                   	pop    esi
c000d6f0:	5f                   	pop    edi
c000d6f1:	5d                   	pop    ebp
c000d6f2:	c3                   	ret    
c000d6f3:	83 ec 08             	sub    esp,0x8
c000d6f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6fa:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d701:	50                   	push   eax
c000d702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d706:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d70d:	50                   	push   eax
c000d70e:	e8 bd 29 00 00       	call   c00100d0 <VgaText::combineColours(unsigned char, unsigned char)>
c000d713:	83 c4 10             	add    esp,0x10
c000d716:	88 07                	mov    BYTE PTR [edi],al
c000d718:	eb c9                	jmp    c000d6e3 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d71a:	45                   	inc    ebp
c000d71b:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d723:	eb 8e                	jmp    c000d6b3 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d725 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d725:	56                   	push   esi
c000d726:	53                   	push   ebx
c000d727:	83 ec 0c             	sub    esp,0xc
c000d72a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d72e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d732:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d737:	50                   	push   eax
c000d738:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d73d:	50                   	push   eax
c000d73e:	e8 8d 29 00 00       	call   c00100d0 <VgaText::combineColours(unsigned char, unsigned char)>
c000d743:	5a                   	pop    edx
c000d744:	0f b6 c0             	movzx  eax,al
c000d747:	59                   	pop    ecx
c000d748:	50                   	push   eax
c000d749:	89 f0                	mov    eax,esi
c000d74b:	0f be f0             	movsx  esi,al
c000d74e:	56                   	push   esi
c000d74f:	e8 22 2a 00 00       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c000d754:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d758:	ba 19 00 00 00       	mov    edx,0x19
c000d75d:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d763:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d766:	8d 14 92             	lea    edx,[edx+edx*4]
c000d769:	c1 e1 04             	shl    ecx,0x4
c000d76c:	c1 e2 04             	shl    edx,0x4
c000d76f:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d773:	01 ca                	add    edx,ecx
c000d775:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d77d:	83 c4 14             	add    esp,0x14
c000d780:	5b                   	pop    ebx
c000d781:	5e                   	pop    esi
c000d782:	c3                   	ret    

c000d783 <setupTextMode()>:
c000d783:	c7 05 38 bf 03 c0 63 d6 00 c0 	mov    DWORD PTR ds:0xc003bf38,0xc000d663
c000d78d:	c7 05 24 bf 03 c0 3f d5 00 c0 	mov    DWORD PTR ds:0xc003bf24,0xc000d53f
c000d797:	c7 05 20 bf 03 c0 84 d5 00 c0 	mov    DWORD PTR ds:0xc003bf20,0xc000d584
c000d7a1:	c7 05 2c bf 03 c0 9f d6 00 c0 	mov    DWORD PTR ds:0xc003bf2c,0xc000d69f
c000d7ab:	c7 05 34 bf 03 c0 c6 d5 00 c0 	mov    DWORD PTR ds:0xc003bf34,0xc000d5c6
c000d7b5:	c7 05 28 bf 03 c0 1a d6 00 c0 	mov    DWORD PTR ds:0xc003bf28,0xc000d61a
c000d7bf:	c7 05 30 bf 03 c0 1b d6 00 c0 	mov    DWORD PTR ds:0xc003bf30,0xc000d61b
c000d7c9:	c7 05 3c bf 03 c0 25 d7 00 c0 	mov    DWORD PTR ds:0xc003bf3c,0xc000d725
c000d7d3:	c3                   	ret    

c000d7d4 <kernel_main>:
c000d7d4:	57                   	push   edi
c000d7d5:	bf f9 03 00 00       	mov    edi,0x3f9
c000d7da:	56                   	push   esi
c000d7db:	31 f6                	xor    esi,esi
c000d7dd:	53                   	push   ebx
c000d7de:	83 ec 10             	sub    esp,0x10
c000d7e1:	e8 44 27 00 00       	call   c000ff2a <installVgaTextImplementation()>
c000d7e6:	e8 98 ff ff ff       	call   c000d783 <setupTextMode()>
c000d7eb:	89 f0                	mov    eax,esi
c000d7ed:	89 fa                	mov    edx,edi
c000d7ef:	ee                   	out    dx,al
c000d7f0:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d7f5:	b0 80                	mov    al,0x80
c000d7f7:	89 da                	mov    edx,ebx
c000d7f9:	ee                   	out    dx,al
c000d7fa:	b1 03                	mov    cl,0x3
c000d7fc:	ba f8 03 00 00       	mov    edx,0x3f8
c000d801:	88 c8                	mov    al,cl
c000d803:	ee                   	out    dx,al
c000d804:	89 f0                	mov    eax,esi
c000d806:	89 fa                	mov    edx,edi
c000d808:	ee                   	out    dx,al
c000d809:	88 c8                	mov    al,cl
c000d80b:	89 da                	mov    edx,ebx
c000d80d:	ee                   	out    dx,al
c000d80e:	b0 c7                	mov    al,0xc7
c000d810:	ba fa 03 00 00       	mov    edx,0x3fa
c000d815:	ee                   	out    dx,al
c000d816:	b0 0b                	mov    al,0xb
c000d818:	ba fc 03 00 00       	mov    edx,0x3fc
c000d81d:	ee                   	out    dx,al
c000d81e:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d823:	83 ec 0c             	sub    esp,0xc
c000d826:	05 ff 0f 00 00       	add    eax,0xfff
c000d82b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d830:	50                   	push   eax
c000d831:	e8 4d 03 00 00       	call   c000db83 <Phys::physicalMemorySetup(unsigned int)>
c000d836:	e8 df 3b 00 00       	call   c001141a <Virt::virtualMemorySetup()>
c000d83b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d841:	83 c4 10             	add    esp,0x10
c000d844:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d84a:	75 0e                	jne    c000d85a <kernel_main+0x86>
c000d84c:	89 d8                	mov    eax,ebx
c000d84e:	25 48 03 00 00       	and    eax,0x348
c000d853:	3d 00 03 00 00       	cmp    eax,0x300
c000d858:	74 10                	je     c000d86a <kernel_main+0x96>
c000d85a:	83 ec 0c             	sub    esp,0xc
c000d85d:	68 7f 8e 03 c0       	push   0xc0038e7f
c000d862:	e8 a1 f7 ff ff       	call   c000d008 <panic(char const*)>
c000d867:	83 c4 10             	add    esp,0x10
c000d86a:	83 ec 0c             	sub    esp,0xc
c000d86d:	89 1d 54 bc 03 c0    	mov    DWORD PTR ds:0xc003bc54,ebx
c000d873:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d877:	53                   	push   ebx
c000d878:	e8 47 3d 00 00       	call   c00115c4 <VAS::VAS()>
c000d87d:	89 1d 5c bf 03 c0    	mov    DWORD PTR ds:0xc003bf5c,ebx
c000d883:	e8 98 27 ff ff       	call   c0000020 <callGlobalConstructors>
c000d888:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d88f:	e8 06 4c 00 00       	call   c001249a <operator new(unsigned long)>
c000d894:	89 04 24             	mov    DWORD PTR [esp],eax
c000d897:	89 c6                	mov    esi,eax
c000d899:	e8 28 d9 ff ff       	call   c000b1c6 <Computer::Computer()>
c000d89e:	6a 00                	push   0x0
c000d8a0:	89 35 a8 ba 03 c0    	mov    DWORD PTR ds:0xc003baa8,esi
c000d8a6:	6a 00                	push   0x0
c000d8a8:	6a 00                	push   0x0
c000d8aa:	56                   	push   esi
c000d8ab:	e8 da dd ff ff       	call   c000b68a <Computer::open(int, int, void*)>
c000d8b0:	83 c4 14             	add    esp,0x14
c000d8b3:	53                   	push   ebx
c000d8b4:	e8 1b 3f 00 00       	call   c00117d4 <VAS::~VAS()>
c000d8b9:	c7 04 24 1c 8f 03 c0 	mov    DWORD PTR [esp],0xc0038f1c
c000d8c0:	e8 43 f7 ff ff       	call   c000d008 <panic(char const*)>
c000d8c5:	83 c4 20             	add    esp,0x20
c000d8c8:	5b                   	pop    ebx
c000d8c9:	5e                   	pop    esi
c000d8ca:	5f                   	pop    edi
c000d8cb:	c3                   	ret    

c000d8cc <Phys::allocateDMA(unsigned long)>:
c000d8cc:	55                   	push   ebp
c000d8cd:	31 d2                	xor    edx,edx
c000d8cf:	57                   	push   edi
c000d8d0:	31 ed                	xor    ebp,ebp
c000d8d2:	56                   	push   esi
c000d8d3:	31 c9                	xor    ecx,ecx
c000d8d5:	53                   	push   ebx
c000d8d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d8da:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d8e0:	31 c0                	xor    eax,eax
c000d8e2:	c1 ee 0c             	shr    esi,0xc
c000d8e5:	eb 17                	jmp    c000d8fe <Phys::allocateDMA(unsigned long)+0x32>
c000d8e7:	85 c9                	test   ecx,ecx
c000d8e9:	75 04                	jne    c000d8ef <Phys::allocateDMA(unsigned long)+0x23>
c000d8eb:	89 d5                	mov    ebp,edx
c000d8ed:	89 d0                	mov    eax,edx
c000d8ef:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d8f2:	39 de                	cmp    esi,ebx
c000d8f4:	74 20                	je     c000d916 <Phys::allocateDMA(unsigned long)+0x4a>
c000d8f6:	42                   	inc    edx
c000d8f7:	89 d9                	mov    ecx,ebx
c000d8f9:	83 fa 2f             	cmp    edx,0x2f
c000d8fc:	7f 11                	jg     c000d90f <Phys::allocateDMA(unsigned long)+0x43>
c000d8fe:	80 ba 80 bc 03 c0 00 	cmp    BYTE PTR [edx-0x3ffc4380],0x0
c000d905:	74 e0                	je     c000d8e7 <Phys::allocateDMA(unsigned long)+0x1b>
c000d907:	31 c9                	xor    ecx,ecx
c000d909:	42                   	inc    edx
c000d90a:	83 fa 2f             	cmp    edx,0x2f
c000d90d:	7e ef                	jle    c000d8fe <Phys::allocateDMA(unsigned long)+0x32>
c000d90f:	5b                   	pop    ebx
c000d910:	31 c0                	xor    eax,eax
c000d912:	5e                   	pop    esi
c000d913:	5f                   	pop    edi
c000d914:	5d                   	pop    ebp
c000d915:	c3                   	ret    
c000d916:	8d 14 30             	lea    edx,[eax+esi*1]
c000d919:	89 d7                	mov    edi,edx
c000d91b:	4f                   	dec    edi
c000d91c:	79 03                	jns    c000d921 <Phys::allocateDMA(unsigned long)+0x55>
c000d91e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d921:	c1 ff 04             	sar    edi,0x4
c000d924:	89 c2                	mov    edx,eax
c000d926:	c1 fa 04             	sar    edx,0x4
c000d929:	39 fa                	cmp    edx,edi
c000d92b:	75 2f                	jne    c000d95c <Phys::allocateDMA(unsigned long)+0x90>
c000d92d:	85 db                	test   ebx,ebx
c000d92f:	74 1a                	je     c000d94b <Phys::allocateDMA(unsigned long)+0x7f>
c000d931:	be 80 bc 03 c0       	mov    esi,0xc003bc80
c000d936:	8d 90 80 bc 03 c0    	lea    edx,[eax-0x3ffc4380]
c000d93c:	f7 d6                	not    esi
c000d93e:	29 c6                	sub    esi,eax
c000d940:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d943:	42                   	inc    edx
c000d944:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d947:	39 d9                	cmp    ecx,ebx
c000d949:	7f f5                	jg     c000d940 <Phys::allocateDMA(unsigned long)+0x74>
c000d94b:	85 ff                	test   edi,edi
c000d94d:	74 13                	je     c000d962 <Phys::allocateDMA(unsigned long)+0x96>
c000d94f:	5b                   	pop    ebx
c000d950:	05 50 20 0c 00       	add    eax,0xc2050
c000d955:	5e                   	pop    esi
c000d956:	c1 e0 0c             	shl    eax,0xc
c000d959:	5f                   	pop    edi
c000d95a:	5d                   	pop    ebp
c000d95b:	c3                   	ret    
c000d95c:	89 ea                	mov    edx,ebp
c000d95e:	31 c9                	xor    ecx,ecx
c000d960:	eb a7                	jmp    c000d909 <Phys::allocateDMA(unsigned long)+0x3d>
c000d962:	5b                   	pop    ebx
c000d963:	c1 e0 0c             	shl    eax,0xc
c000d966:	5e                   	pop    esi
c000d967:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d96c:	5f                   	pop    edi
c000d96d:	5d                   	pop    ebp
c000d96e:	c3                   	ret    

c000d96f <Phys::freeDMA(unsigned long, unsigned long)>:
c000d96f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d973:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d977:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d97d:	c1 e9 0c             	shr    ecx,0xc
c000d980:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d985:	76 25                	jbe    c000d9ac <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d987:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d98c:	c1 e8 0c             	shr    eax,0xc
c000d98f:	8d 50 10             	lea    edx,[eax+0x10]
c000d992:	85 c9                	test   ecx,ecx
c000d994:	74 15                	je     c000d9ab <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d996:	8d 82 80 bc 03 c0    	lea    eax,[edx-0x3ffc4380]
c000d99c:	8d 94 11 80 bc 03 c0 	lea    edx,[ecx+edx*1-0x3ffc4380]
c000d9a3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d9a6:	40                   	inc    eax
c000d9a7:	39 d0                	cmp    eax,edx
c000d9a9:	75 f8                	jne    c000d9a3 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d9ab:	c3                   	ret    
c000d9ac:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d9b2:	c1 ea 0c             	shr    edx,0xc
c000d9b5:	eb db                	jmp    c000d992 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d9b7 <Phys::setPageState(unsigned long, bool)>:
c000d9b7:	56                   	push   esi
c000d9b8:	ba 01 00 00 00       	mov    edx,0x1
c000d9bd:	53                   	push   ebx
c000d9be:	8b 35 d4 ae 03 c0    	mov    esi,DWORD PTR ds:0xc003aed4
c000d9c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d9c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d9cc:	89 c8                	mov    eax,ecx
c000d9ce:	83 e1 07             	and    ecx,0x7
c000d9d1:	c1 e8 03             	shr    eax,0x3
c000d9d4:	d3 e3                	shl    ebx,cl
c000d9d6:	01 c6                	add    esi,eax
c000d9d8:	d3 e2                	shl    edx,cl
c000d9da:	f7 d2                	not    edx
c000d9dc:	20 16                	and    BYTE PTR [esi],dl
c000d9de:	03 05 d4 ae 03 c0    	add    eax,DWORD PTR ds:0xc003aed4
c000d9e4:	08 18                	or     BYTE PTR [eax],bl
c000d9e6:	5b                   	pop    ebx
c000d9e7:	5e                   	pop    esi
c000d9e8:	c3                   	ret    

c000d9e9 <Phys::getPageState(unsigned long)>:
c000d9e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d9ed:	8b 15 d4 ae 03 c0    	mov    edx,DWORD PTR ds:0xc003aed4
c000d9f3:	89 c8                	mov    eax,ecx
c000d9f5:	83 e1 07             	and    ecx,0x7
c000d9f8:	c1 e8 03             	shr    eax,0x3
c000d9fb:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000d9ff:	d3 f8                	sar    eax,cl
c000da01:	83 e0 01             	and    eax,0x1
c000da04:	c3                   	ret    

c000da05 <Phys::freePage(unsigned long)>:
c000da05:	53                   	push   ebx
c000da06:	83 ec 08             	sub    esp,0x8
c000da09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000da0d:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000da13:	76 57                	jbe    c000da6c <Phys::freePage(unsigned long)+0x67>
c000da15:	c1 eb 0c             	shr    ebx,0xc
c000da18:	53                   	push   ebx
c000da19:	e8 cb ff ff ff       	call   c000d9e9 <Phys::getPageState(unsigned long)>
c000da1e:	5a                   	pop    edx
c000da1f:	84 c0                	test   al,al
c000da21:	74 5b                	je     c000da7e <Phys::freePage(unsigned long)+0x79>
c000da23:	a1 6c bc 03 c0       	mov    eax,ds:0xc003bc6c
c000da28:	48                   	dec    eax
c000da29:	a3 6c bc 03 c0       	mov    ds:0xc003bc6c,eax
c000da2e:	8d 04 80             	lea    eax,[eax+eax*4]
c000da31:	8d 04 80             	lea    eax,[eax+eax*4]
c000da34:	c1 e0 02             	shl    eax,0x2
c000da37:	99                   	cdq    
c000da38:	f7 3d 70 bc 03 c0    	idiv   DWORD PTR ds:0xc003bc70
c000da3e:	39 05 68 bc 03 c0    	cmp    DWORD PTR ds:0xc003bc68,eax
c000da44:	75 13                	jne    c000da59 <Phys::freePage(unsigned long)+0x54>
c000da46:	83 ec 08             	sub    esp,0x8
c000da49:	6a 00                	push   0x0
c000da4b:	53                   	push   ebx
c000da4c:	e8 66 ff ff ff       	call   c000d9b7 <Phys::setPageState(unsigned long, bool)>
c000da51:	83 c4 10             	add    esp,0x10
c000da54:	83 c4 08             	add    esp,0x8
c000da57:	5b                   	pop    ebx
c000da58:	c3                   	ret    
c000da59:	83 ec 0c             	sub    esp,0xc
c000da5c:	a3 68 bc 03 c0       	mov    ds:0xc003bc68,eax
c000da61:	50                   	push   eax
c000da62:	e8 57 28 00 00       	call   c00102be <VgaText::updateRAMUsageDisplay(int)>
c000da67:	83 c4 10             	add    esp,0x10
c000da6a:	eb da                	jmp    c000da46 <Phys::freePage(unsigned long)+0x41>
c000da6c:	68 00 10 00 00       	push   0x1000
c000da71:	53                   	push   ebx
c000da72:	e8 f8 fe ff ff       	call   c000d96f <Phys::freeDMA(unsigned long, unsigned long)>
c000da77:	59                   	pop    ecx
c000da78:	5b                   	pop    ebx
c000da79:	83 c4 08             	add    esp,0x8
c000da7c:	5b                   	pop    ebx
c000da7d:	c3                   	ret    
c000da7e:	c7 44 24 10 37 8f 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038f37
c000da86:	83 c4 08             	add    esp,0x8
c000da89:	5b                   	pop    ebx
c000da8a:	e9 79 f5 ff ff       	jmp    c000d008 <panic(char const*)>

c000da8f <Phys::allocatePage()>:
c000da8f:	56                   	push   esi
c000da90:	53                   	push   ebx
c000da91:	51                   	push   ecx
c000da92:	8b 35 60 bc 03 c0    	mov    esi,DWORD PTR ds:0xc003bc60
c000da98:	89 f3                	mov    ebx,esi
c000da9a:	eb 0a                	jmp    c000daa6 <Phys::allocatePage()+0x17>
c000da9c:	89 1d 60 bc 03 c0    	mov    DWORD PTR ds:0xc003bc60,ebx
c000daa2:	39 de                	cmp    esi,ebx
c000daa4:	74 24                	je     c000daca <Phys::allocatePage()+0x3b>
c000daa6:	53                   	push   ebx
c000daa7:	e8 3d ff ff ff       	call   c000d9e9 <Phys::getPageState(unsigned long)>
c000daac:	5a                   	pop    edx
c000daad:	84 c0                	test   al,al
c000daaf:	74 4e                	je     c000daff <Phys::allocatePage()+0x70>
c000dab1:	43                   	inc    ebx
c000dab2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000dab8:	75 e2                	jne    c000da9c <Phys::allocatePage()+0xd>
c000daba:	31 db                	xor    ebx,ebx
c000dabc:	c7 05 60 bc 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bc60,0x0
c000dac6:	39 de                	cmp    esi,ebx
c000dac8:	75 dc                	jne    c000daa6 <Phys::allocatePage()+0x17>
c000daca:	83 ec 0c             	sub    esp,0xc
c000dacd:	68 00 10 00 00       	push   0x1000
c000dad2:	e8 f5 fd ff ff       	call   c000d8cc <Phys::allocateDMA(unsigned long)>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	85 c0                	test   eax,eax
c000dadc:	75 56                	jne    c000db34 <Phys::allocatePage()+0xa5>
c000dade:	83 ec 0c             	sub    esp,0xc
c000dae1:	68 4d 8f 03 c0       	push   0xc0038f4d
c000dae6:	e8 1d f5 ff ff       	call   c000d008 <panic(char const*)>
c000daeb:	83 c4 10             	add    esp,0x10
c000daee:	8b 1d 60 bc 03 c0    	mov    ebx,DWORD PTR ds:0xc003bc60
c000daf4:	53                   	push   ebx
c000daf5:	e8 ef fe ff ff       	call   c000d9e9 <Phys::getPageState(unsigned long)>
c000dafa:	5a                   	pop    edx
c000dafb:	84 c0                	test   al,al
c000dafd:	75 b2                	jne    c000dab1 <Phys::allocatePage()+0x22>
c000daff:	6a 01                	push   0x1
c000db01:	53                   	push   ebx
c000db02:	e8 b0 fe ff ff       	call   c000d9b7 <Phys::setPageState(unsigned long, bool)>
c000db07:	a1 6c bc 03 c0       	mov    eax,ds:0xc003bc6c
c000db0c:	59                   	pop    ecx
c000db0d:	40                   	inc    eax
c000db0e:	5b                   	pop    ebx
c000db0f:	a3 6c bc 03 c0       	mov    ds:0xc003bc6c,eax
c000db14:	8d 04 80             	lea    eax,[eax+eax*4]
c000db17:	8d 04 80             	lea    eax,[eax+eax*4]
c000db1a:	c1 e0 02             	shl    eax,0x2
c000db1d:	99                   	cdq    
c000db1e:	f7 3d 70 bc 03 c0    	idiv   DWORD PTR ds:0xc003bc70
c000db24:	39 05 68 bc 03 c0    	cmp    DWORD PTR ds:0xc003bc68,eax
c000db2a:	75 0c                	jne    c000db38 <Phys::allocatePage()+0xa9>
c000db2c:	a1 60 bc 03 c0       	mov    eax,ds:0xc003bc60
c000db31:	c1 e0 0c             	shl    eax,0xc
c000db34:	5a                   	pop    edx
c000db35:	5b                   	pop    ebx
c000db36:	5e                   	pop    esi
c000db37:	c3                   	ret    
c000db38:	83 ec 0c             	sub    esp,0xc
c000db3b:	a3 68 bc 03 c0       	mov    ds:0xc003bc68,eax
c000db40:	50                   	push   eax
c000db41:	e8 78 27 00 00       	call   c00102be <VgaText::updateRAMUsageDisplay(int)>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	eb e1                	jmp    c000db2c <Phys::allocatePage()+0x9d>

c000db4b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000db4b:	56                   	push   esi
c000db4c:	53                   	push   ebx
c000db4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db51:	39 1d 64 bc 03 c0    	cmp    DWORD PTR ds:0xc003bc64,ebx
c000db57:	73 06                	jae    c000db5f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000db59:	89 1d 64 bc 03 c0    	mov    DWORD PTR ds:0xc003bc64,ebx
c000db5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db63:	c1 eb 0c             	shr    ebx,0xc
c000db66:	c1 e8 0c             	shr    eax,0xc
c000db69:	39 d8                	cmp    eax,ebx
c000db6b:	73 13                	jae    c000db80 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000db6d:	6a 00                	push   0x0
c000db6f:	8d 70 01             	lea    esi,[eax+0x1]
c000db72:	50                   	push   eax
c000db73:	e8 3f fe ff ff       	call   c000d9b7 <Phys::setPageState(unsigned long, bool)>
c000db78:	5a                   	pop    edx
c000db79:	89 f0                	mov    eax,esi
c000db7b:	59                   	pop    ecx
c000db7c:	39 f3                	cmp    ebx,esi
c000db7e:	75 ed                	jne    c000db6d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000db80:	5b                   	pop    ebx
c000db81:	5e                   	pop    esi
c000db82:	c3                   	ret    

c000db83 <Phys::physicalMemorySetup(unsigned int)>:
c000db83:	55                   	push   ebp
c000db84:	57                   	push   edi
c000db85:	56                   	push   esi
c000db86:	53                   	push   ebx
c000db87:	31 db                	xor    ebx,ebx
c000db89:	83 ec 30             	sub    esp,0x30
c000db8c:	6a 30                	push   0x30
c000db8e:	6a 00                	push   0x0
c000db90:	68 80 bc 03 c0       	push   0xc003bc80
c000db95:	e8 3e 2b ff ff       	call   c00006d8 <memset>
c000db9a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000db9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000dba3:	05 00 10 00 00       	add    eax,0x1000
c000dba8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbac:	83 c4 10             	add    esp,0x10
c000dbaf:	83 ec 08             	sub    esp,0x8
c000dbb2:	6a 01                	push   0x1
c000dbb4:	53                   	push   ebx
c000dbb5:	43                   	inc    ebx
c000dbb6:	e8 fc fd ff ff       	call   c000d9b7 <Phys::setPageState(unsigned long, bool)>
c000dbbb:	83 c4 10             	add    esp,0x10
c000dbbe:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000dbc4:	75 e9                	jne    c000dbaf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000dbc6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000dbcd:	66 85 c0             	test   ax,ax
c000dbd0:	0f 84 28 01 00 00    	je     c000dcfe <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000dbd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbda:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000dbe0:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000dbe5:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000dbeb:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000dbf1:	89 f1                	mov    ecx,esi
c000dbf3:	89 fb                	mov    ebx,edi
c000dbf5:	01 c1                	add    ecx,eax
c000dbf7:	89 d5                	mov    ebp,edx
c000dbf9:	11 d3                	adc    ebx,edx
c000dbfb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dbfe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dc02:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc06:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000dc0c:	09 dd                	or     ebp,ebx
c000dc0e:	0f 85 fa 00 00 00    	jne    c000dd0e <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dc18:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc20:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000dc28:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc2c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000dc34:	eb 45                	jmp    c000dc7b <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000dc36:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000dc3a:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000dc3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc43:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000dc47:	0f 84 c1 00 00 00    	je     c000dd0e <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc4d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dc51:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc54:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc57:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000dc5a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000dc5d:	89 c1                	mov    ecx,eax
c000dc5f:	89 d3                	mov    ebx,edx
c000dc61:	01 f1                	add    ecx,esi
c000dc63:	11 fb                	adc    ebx,edi
c000dc65:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dc68:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dc6c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000dc6f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc73:	09 d3                	or     ebx,edx
c000dc75:	0f 85 93 00 00 00    	jne    c000dd0e <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc7b:	49                   	dec    ecx
c000dc7c:	75 b8                	jne    c000dc36 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc7e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000dc81:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc85:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc89:	39 e9                	cmp    ecx,ebp
c000dc8b:	89 d9                	mov    ecx,ebx
c000dc8d:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dc91:	72 a3                	jb     c000dc36 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc93:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000dc98:	39 f1                	cmp    ecx,esi
c000dc9a:	b9 00 00 00 00       	mov    ecx,0x0
c000dc9f:	19 f9                	sbb    ecx,edi
c000dca1:	73 93                	jae    c000dc36 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dca3:	39 e8                	cmp    eax,ebp
c000dca5:	89 d1                	mov    ecx,edx
c000dca7:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dcab:	73 13                	jae    c000dcc0 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000dcad:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcb0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dcb4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000dcb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dcbc:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000dcc0:	83 ec 08             	sub    esp,0x8
c000dcc3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 7e fe ff ff       	call   c000db4b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000dccd:	83 c4 0c             	add    esp,0xc
c000dcd0:	89 fa                	mov    edx,edi
c000dcd2:	89 f0                	mov    eax,esi
c000dcd4:	0f ac d0 0c          	shrd   eax,edx,0xc
c000dcd8:	03 05 70 bc 03 c0    	add    eax,DWORD PTR ds:0xc003bc70
c000dcde:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dce5:	a3 70 bc 03 c0       	mov    ds:0xc003bc70,eax
c000dcea:	52                   	push   edx
c000dceb:	50                   	push   eax
c000dcec:	68 69 8f 03 c0       	push   0xc0038f69
c000dcf1:	e8 f4 f1 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000dcf6:	83 c4 10             	add    esp,0x10
c000dcf9:	e9 38 ff ff ff       	jmp    c000dc36 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dcfe:	83 ec 0c             	sub    esp,0xc
c000dd01:	68 5b 8f 03 c0       	push   0xc0038f5b
c000dd06:	e8 fd f2 ff ff       	call   c000d008 <panic(char const*)>
c000dd0b:	83 c4 10             	add    esp,0x10
c000dd0e:	bb 40 01 00 00       	mov    ebx,0x140
c000dd13:	83 ec 08             	sub    esp,0x8
c000dd16:	6a 00                	push   0x0
c000dd18:	53                   	push   ebx
c000dd19:	43                   	inc    ebx
c000dd1a:	e8 98 fc ff ff       	call   c000d9b7 <Phys::setPageState(unsigned long, bool)>
c000dd1f:	ff 05 70 bc 03 c0    	inc    DWORD PTR ds:0xc003bc70
c000dd25:	83 c4 10             	add    esp,0x10
c000dd28:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000dd2e:	75 e3                	jne    c000dd13 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000dd30:	83 c4 2c             	add    esp,0x2c
c000dd33:	5b                   	pop    ebx
c000dd34:	5e                   	pop    esi
c000dd35:	5f                   	pop    edi
c000dd36:	5d                   	pop    ebp
c000dd37:	c3                   	ret    

c000dd38 <Pipe::isAtty()>:
c000dd38:	31 c0                	xor    eax,eax
c000dd3a:	c3                   	ret    
c000dd3b:	90                   	nop

c000dd3c <Pipe::~Pipe()>:
c000dd3c:	83 ec 0c             	sub    esp,0xc
c000dd3f:	ba c8 8f 03 c0       	mov    edx,0xc0038fc8
c000dd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd48:	89 10                	mov    DWORD PTR [eax],edx
c000dd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd4e:	83 ec 0c             	sub    esp,0xc
c000dd51:	50                   	push   eax
c000dd52:	e8 d3 33 00 00       	call   c001112a <UnixFile::~UnixFile()>
c000dd57:	83 c4 10             	add    esp,0x10
c000dd5a:	90                   	nop
c000dd5b:	83 c4 0c             	add    esp,0xc
c000dd5e:	c3                   	ret    
c000dd5f:	90                   	nop

c000dd60 <Pipe::~Pipe()>:
c000dd60:	83 ec 0c             	sub    esp,0xc
c000dd63:	83 ec 0c             	sub    esp,0xc
c000dd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd6a:	e8 cd ff ff ff       	call   c000dd3c <Pipe::~Pipe()>
c000dd6f:	83 c4 10             	add    esp,0x10
c000dd72:	83 ec 08             	sub    esp,0x8
c000dd75:	6a 20                	push   0x20
c000dd77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd7b:	e8 29 47 00 00       	call   c00124a9 <operator delete(void*, unsigned long)>
c000dd80:	83 c4 10             	add    esp,0x10
c000dd83:	83 c4 0c             	add    esp,0xc
c000dd86:	c3                   	ret    
c000dd87:	90                   	nop

c000dd88 <Pipe::read(unsigned long long, void*, int*)>:
c000dd88:	55                   	push   ebp
c000dd89:	57                   	push   edi
c000dd8a:	56                   	push   esi
c000dd8b:	53                   	push   ebx
c000dd8c:	83 ec 1c             	sub    esp,0x1c
c000dd8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd93:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dd97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd9b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dd9e:	89 c8                	mov    eax,ecx
c000dda0:	99                   	cdq    
c000dda1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000dda5:	74 19                	je     c000ddc0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dda7:	39 f9                	cmp    ecx,edi
c000dda9:	89 d1                	mov    ecx,edx
c000ddab:	19 f1                	sbb    ecx,esi
c000ddad:	73 11                	jae    c000ddc0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ddaf:	e8 d8 05 00 00       	call   c000e38c <lockScheduler()>
c000ddb4:	e8 07 09 00 00       	call   c000e6c0 <schedule()>
c000ddb9:	e8 d0 05 00 00       	call   c000e38e <unlockScheduler()>
c000ddbe:	eb db                	jmp    c000dd9b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ddc0:	39 f8                	cmp    eax,edi
c000ddc2:	89 d1                	mov    ecx,edx
c000ddc4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ddc8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000ddcc:	19 f1                	sbb    ecx,esi
c000ddce:	73 08                	jae    c000ddd8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000ddd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dddb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ddde:	29 c6                	sub    esi,eax
c000dde0:	89 f1                	mov    ecx,esi
c000dde2:	c1 f9 1f             	sar    ecx,0x1f
c000dde5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000dde9:	89 ca                	mov    edx,ecx
c000ddeb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ddef:	19 d1                	sbb    ecx,edx
c000ddf1:	73 04                	jae    c000ddf7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000ddf3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ddf7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ddfb:	89 fd                	mov    ebp,edi
c000ddfd:	29 f5                	sub    ebp,esi
c000ddff:	85 f6                	test   esi,esi
c000de01:	74 12                	je     c000de15 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000de03:	52                   	push   edx
c000de04:	56                   	push   esi
c000de05:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000de08:	50                   	push   eax
c000de09:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000de0d:	e8 4f 28 ff ff       	call   c0000661 <memcpy>
c000de12:	83 c4 10             	add    esp,0x10
c000de15:	85 ed                	test   ebp,ebp
c000de17:	74 12                	je     c000de2b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000de19:	50                   	push   eax
c000de1a:	55                   	push   ebp
c000de1b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de1e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000de22:	56                   	push   esi
c000de23:	e8 39 28 ff ff       	call   c0000661 <memcpy>
c000de28:	83 c4 10             	add    esp,0x10
c000de2b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000de2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de31:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000de34:	99                   	cdq    
c000de35:	89 f7                	mov    edi,esi
c000de37:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de3b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000de3f:	c1 ff 1f             	sar    edi,0x1f
c000de42:	57                   	push   edi
c000de43:	56                   	push   esi
c000de44:	52                   	push   edx
c000de45:	50                   	push   eax
c000de46:	e8 f1 09 01 00       	call   c001e83c <__umoddi3>
c000de4b:	83 c4 10             	add    esp,0x10
c000de4e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000de51:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000de56:	75 10                	jne    c000de68 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000de58:	83 ec 0c             	sub    esp,0xc
c000de5b:	68 85 8f 03 c0       	push   0xc0038f85
c000de60:	e8 a3 f1 ff ff       	call   c000d008 <panic(char const*)>
c000de65:	83 c4 10             	add    esp,0x10
c000de68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000de70:	89 10                	mov    DWORD PTR [eax],edx
c000de72:	83 c4 1c             	add    esp,0x1c
c000de75:	31 c0                	xor    eax,eax
c000de77:	5b                   	pop    ebx
c000de78:	5e                   	pop    esi
c000de79:	5f                   	pop    edi
c000de7a:	5d                   	pop    ebp
c000de7b:	c3                   	ret    

c000de7c <Pipe::write(unsigned long long, void*, int*)>:
c000de7c:	55                   	push   ebp
c000de7d:	57                   	push   edi
c000de7e:	56                   	push   esi
c000de7f:	53                   	push   ebx
c000de80:	83 ec 1c             	sub    esp,0x1c
c000de83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de87:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000de8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000de92:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000de95:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000de98:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de9c:	89 de                	mov    esi,ebx
c000de9e:	89 df                	mov    edi,ebx
c000dea0:	c1 ff 1f             	sar    edi,0x1f
c000dea3:	01 c6                	add    esi,eax
c000dea5:	89 c8                	mov    eax,ecx
c000dea7:	11 d7                	adc    edi,edx
c000dea9:	99                   	cdq    
c000deaa:	39 f1                	cmp    ecx,esi
c000deac:	89 d0                	mov    eax,edx
c000deae:	19 f8                	sbb    eax,edi
c000deb0:	b8 01 00 00 00       	mov    eax,0x1
c000deb5:	0f 82 80 00 00 00    	jb     c000df3b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000debb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000debe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dec1:	01 d8                	add    eax,ebx
c000dec3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dec7:	99                   	cdq    
c000dec8:	f7 f9                	idiv   ecx
c000deca:	29 d1                	sub    ecx,edx
c000decc:	89 d7                	mov    edi,edx
c000dece:	89 c8                	mov    eax,ecx
c000ded0:	99                   	cdq    
c000ded1:	39 ce                	cmp    esi,ecx
c000ded3:	19 d3                	sbb    ebx,edx
c000ded5:	bb 00 00 00 00       	mov    ebx,0x0
c000deda:	72 04                	jb     c000dee0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000dedc:	89 f3                	mov    ebx,esi
c000dede:	29 cb                	sub    ebx,ecx
c000dee0:	89 f1                	mov    ecx,esi
c000dee2:	29 d9                	sub    ecx,ebx
c000dee4:	74 1a                	je     c000df00 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000dee6:	52                   	push   edx
c000dee7:	51                   	push   ecx
c000dee8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000deec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000def0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000def3:	57                   	push   edi
c000def4:	e8 68 27 ff ff       	call   c0000661 <memcpy>
c000def9:	83 c4 10             	add    esp,0x10
c000defc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df00:	85 db                	test   ebx,ebx
c000df02:	74 12                	je     c000df16 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000df04:	50                   	push   eax
c000df05:	53                   	push   ebx
c000df06:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000df0a:	51                   	push   ecx
c000df0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000df0e:	e8 4e 27 ff ff       	call   c0000661 <memcpy>
c000df13:	83 c4 10             	add    esp,0x10
c000df16:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000df19:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000df1e:	75 10                	jne    c000df30 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000df20:	83 ec 0c             	sub    esp,0xc
c000df23:	68 a1 8f 03 c0       	push   0xc0038fa1
c000df28:	e8 db f0 ff ff       	call   c000d008 <panic(char const*)>
c000df2d:	83 c4 10             	add    esp,0x10
c000df30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000df37:	89 38                	mov    DWORD PTR [eax],edi
c000df39:	31 c0                	xor    eax,eax
c000df3b:	83 c4 1c             	add    esp,0x1c
c000df3e:	5b                   	pop    ebx
c000df3f:	5e                   	pop    esi
c000df40:	5f                   	pop    edi
c000df41:	5d                   	pop    ebp
c000df42:	c3                   	ret    
c000df43:	90                   	nop

c000df44 <Pipe::Pipe(int)>:
c000df44:	83 ec 0c             	sub    esp,0xc
c000df47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4b:	83 ec 08             	sub    esp,0x8
c000df4e:	6a 00                	push   0x0
c000df50:	50                   	push   eax
c000df51:	e8 70 31 00 00       	call   c00110c6 <UnixFile::UnixFile(int)>
c000df56:	83 c4 10             	add    esp,0x10
c000df59:	ba c8 8f 03 c0       	mov    edx,0xc0038fc8
c000df5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df62:	89 10                	mov    DWORD PTR [eax],edx
c000df64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df6c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000df6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df73:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000df7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000df85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df89:	83 ec 0c             	sub    esp,0xc
c000df8c:	50                   	push   eax
c000df8d:	e8 53 f5 ff ff       	call   c000d4e5 <malloc>
c000df92:	83 c4 10             	add    esp,0x10
c000df95:	89 c2                	mov    edx,eax
c000df97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000dfa6:	90                   	nop
c000dfa7:	83 c4 0c             	add    esp,0xc
c000dfaa:	c3                   	ret    
c000dfab:	90                   	nop

c000dfac <changeTSS>:
c000dfac:	83 ec 0c             	sub    esp,0xc
c000dfaf:	e8 1c 92 00 00       	call   c00171d0 <thisCPU()>
c000dfb4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dfba:	83 ec 08             	sub    esp,0x8
c000dfbd:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000dfc0:	05 7c 11 00 00       	add    eax,0x117c
c000dfc5:	c1 e1 15             	shl    ecx,0x15
c000dfc8:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000dfcd:	29 ca                	sub    edx,ecx
c000dfcf:	52                   	push   edx
c000dfd0:	50                   	push   eax
c000dfd1:	e8 28 2e 00 00       	call   c0010dfe <TSS::setESP(unsigned long)>
c000dfd6:	83 c4 1c             	add    esp,0x1c
c000dfd9:	c3                   	ret    

c000dfda <Process::addArgs(char**)>:
c000dfda:	57                   	push   edi
c000dfdb:	56                   	push   esi
c000dfdc:	53                   	push   ebx
c000dfdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfe1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dfe5:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000dfef:	85 ff                	test   edi,edi
c000dff1:	74 3d                	je     c000e030 <Process::addArgs(char**)+0x56>
c000dff3:	8b 07                	mov    eax,DWORD PTR [edi]
c000dff5:	85 c0                	test   eax,eax
c000dff7:	74 37                	je     c000e030 <Process::addArgs(char**)+0x56>
c000dff9:	31 db                	xor    ebx,ebx
c000dffb:	83 ec 0c             	sub    esp,0xc
c000dffe:	50                   	push   eax
c000dfff:	e8 fd 26 ff ff       	call   c0000701 <strlen>
c000e004:	40                   	inc    eax
c000e005:	89 04 24             	mov    DWORD PTR [esp],eax
c000e008:	e8 d8 f4 ff ff       	call   c000d4e5 <malloc>
c000e00d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000e014:	5a                   	pop    edx
c000e015:	59                   	pop    ecx
c000e016:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000e019:	43                   	inc    ebx
c000e01a:	50                   	push   eax
c000e01b:	e8 d4 27 ff ff       	call   c00007f4 <strcpy>
c000e020:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000e026:	83 c4 10             	add    esp,0x10
c000e029:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000e02c:	85 c0                	test   eax,eax
c000e02e:	75 cb                	jne    c000dffb <Process::addArgs(char**)+0x21>
c000e030:	5b                   	pop    ebx
c000e031:	5e                   	pop    esi
c000e032:	5f                   	pop    edi
c000e033:	c3                   	ret    

c000e034 <Process::Process(char const*, Process*, char**)>:
c000e034:	56                   	push   esi
c000e035:	53                   	push   ebx
c000e036:	83 ec 14             	sub    esp,0x14
c000e039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e03d:	05 0c 02 00 00       	add    eax,0x20c
c000e042:	bb 07 00 00 00       	mov    ebx,0x7
c000e047:	89 c6                	mov    esi,eax
c000e049:	85 db                	test   ebx,ebx
c000e04b:	78 12                	js     c000e05f <Process::Process(char const*, Process*, char**)+0x2b>
c000e04d:	83 ec 0c             	sub    esp,0xc
c000e050:	56                   	push   esi
c000e051:	e8 12 0a 01 00       	call   c001ea68 <ThreadControlBlock::ThreadControlBlock()>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	83 c6 63             	add    esi,0x63
c000e05c:	4b                   	dec    ebx
c000e05d:	eb ea                	jmp    c000e049 <Process::Process(char const*, Process*, char**)+0x15>
c000e05f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e063:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e06a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e06e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e077:	a1 d8 ae 03 c0       	mov    eax,ds:0xc003aed8
c000e07c:	8d 50 01             	lea    edx,[eax+0x1]
c000e07f:	89 15 d8 ae 03 c0    	mov    DWORD PTR ds:0xc003aed8,edx
c000e085:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e089:	89 02                	mov    DWORD PTR [edx],eax
c000e08b:	83 ec 0c             	sub    esp,0xc
c000e08e:	6a 10                	push   0x10
c000e090:	e8 05 44 00 00       	call   c001249a <operator new(unsigned long)>
c000e095:	83 c4 10             	add    esp,0x10
c000e098:	89 c3                	mov    ebx,eax
c000e09a:	83 ec 08             	sub    esp,0x8
c000e09d:	6a 00                	push   0x0
c000e09f:	53                   	push   ebx
c000e0a0:	e8 89 40 00 00       	call   c001212e <VAS::VAS(bool)>
c000e0a5:	83 c4 10             	add    esp,0x10
c000e0a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ac:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e0b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0b6:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e0c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e0c8:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e0ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0d2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e0d8:	85 c0                	test   eax,eax
c000e0da:	74 42                	je     c000e11e <Process::Process(char const*, Process*, char**)+0xea>
c000e0dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0e0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e0e6:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e0ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0f0:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e0f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0fa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e100:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e10a:	05 0c 01 00 00       	add    eax,0x10c
c000e10f:	83 ec 08             	sub    esp,0x8
c000e112:	52                   	push   edx
c000e113:	50                   	push   eax
c000e114:	e8 db 26 ff ff       	call   c00007f4 <strcpy>
c000e119:	83 c4 10             	add    esp,0x10
c000e11c:	eb 5c                	jmp    c000e17a <Process::Process(char const*, Process*, char**)+0x146>
c000e11e:	83 ec 0c             	sub    esp,0xc
c000e121:	68 60 12 00 00       	push   0x1260
c000e126:	e8 6f 43 00 00       	call   c001249a <operator new(unsigned long)>
c000e12b:	83 c4 10             	add    esp,0x10
c000e12e:	89 c3                	mov    ebx,eax
c000e130:	83 ec 08             	sub    esp,0x8
c000e133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e137:	53                   	push   ebx
c000e138:	e8 bf 29 00 00       	call   c0010afc <VgaText::VgaText(char const*)>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e144:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e14a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e14e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e154:	83 ec 0c             	sub    esp,0xc
c000e157:	50                   	push   eax
c000e158:	e8 a0 1d 00 00       	call   c000fefd <addToTerminalCycle(VgaText*)>
c000e15d:	83 c4 10             	add    esp,0x10
c000e160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e164:	05 0c 01 00 00       	add    eax,0x10c
c000e169:	83 ec 08             	sub    esp,0x8
c000e16c:	68 dc 8f 03 c0       	push   0xc0038fdc
c000e171:	50                   	push   eax
c000e172:	e8 7d 26 ff ff       	call   c00007f4 <strcpy>
c000e177:	83 c4 10             	add    esp,0x10
c000e17a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e17e:	83 c0 0c             	add    eax,0xc
c000e181:	83 ec 08             	sub    esp,0x8
c000e184:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e188:	50                   	push   eax
c000e189:	e8 66 26 ff ff       	call   c00007f4 <strcpy>
c000e18e:	83 c4 10             	add    esp,0x10
c000e191:	83 ec 08             	sub    esp,0x8
c000e194:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e198:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e19c:	e8 39 fe ff ff       	call   c000dfda <Process::addArgs(char**)>
c000e1a1:	83 c4 10             	add    esp,0x10
c000e1a4:	83 ec 08             	sub    esp,0x8
c000e1a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1af:	e8 d8 d8 ff ff       	call   c000ba8c <loadProgramIntoMemory(Process*, char const*)>
c000e1b4:	83 c4 10             	add    esp,0x10
c000e1b7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e1bb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e1bf:	83 f0 01             	xor    eax,0x1
c000e1c2:	88 c2                	mov    dl,al
c000e1c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1c8:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000e1ce:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e1d3:	83 ec 08             	sub    esp,0x8
c000e1d6:	50                   	push   eax
c000e1d7:	68 30 90 03 c0       	push   0xc0039030
c000e1dc:	e8 09 ed ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000e1e1:	83 c4 10             	add    esp,0x10
c000e1e4:	90                   	nop
c000e1e5:	83 c4 14             	add    esp,0x14
c000e1e8:	5b                   	pop    ebx
c000e1e9:	5e                   	pop    esi
c000e1ea:	c3                   	ret    
c000e1eb:	90                   	nop

c000e1ec <Process::Process(bool, char const*, Process*, char**)>:
c000e1ec:	56                   	push   esi
c000e1ed:	53                   	push   ebx
c000e1ee:	83 ec 14             	sub    esp,0x14
c000e1f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e1f5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e1f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1fd:	05 0c 02 00 00       	add    eax,0x20c
c000e202:	bb 07 00 00 00       	mov    ebx,0x7
c000e207:	89 c6                	mov    esi,eax
c000e209:	85 db                	test   ebx,ebx
c000e20b:	78 12                	js     c000e21f <Process::Process(bool, char const*, Process*, char**)+0x33>
c000e20d:	83 ec 0c             	sub    esp,0xc
c000e210:	56                   	push   esi
c000e211:	e8 52 08 01 00       	call   c001ea68 <ThreadControlBlock::ThreadControlBlock()>
c000e216:	83 c4 10             	add    esp,0x10
c000e219:	83 c6 63             	add    esi,0x63
c000e21c:	4b                   	dec    ebx
c000e21d:	eb ea                	jmp    c000e209 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000e21f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e223:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e22a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e237:	a1 d8 ae 03 c0       	mov    eax,ds:0xc003aed8
c000e23c:	8d 50 01             	lea    edx,[eax+0x1]
c000e23f:	89 15 d8 ae 03 c0    	mov    DWORD PTR ds:0xc003aed8,edx
c000e245:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e249:	89 02                	mov    DWORD PTR [edx],eax
c000e24b:	83 ec 0c             	sub    esp,0xc
c000e24e:	6a 10                	push   0x10
c000e250:	e8 45 42 00 00       	call   c001249a <operator new(unsigned long)>
c000e255:	83 c4 10             	add    esp,0x10
c000e258:	89 c3                	mov    ebx,eax
c000e25a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000e25f:	83 ec 08             	sub    esp,0x8
c000e262:	50                   	push   eax
c000e263:	53                   	push   ebx
c000e264:	e8 c5 3e 00 00       	call   c001212e <VAS::VAS(bool)>
c000e269:	83 c4 10             	add    esp,0x10
c000e26c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e270:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e27a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e288:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e28c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e296:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e29c:	85 c0                	test   eax,eax
c000e29e:	74 42                	je     c000e2e2 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000e2a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2a4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e2aa:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e2b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2b4:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e2ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2be:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e2c4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e2ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ce:	05 0c 01 00 00       	add    eax,0x10c
c000e2d3:	83 ec 08             	sub    esp,0x8
c000e2d6:	52                   	push   edx
c000e2d7:	50                   	push   eax
c000e2d8:	e8 17 25 ff ff       	call   c00007f4 <strcpy>
c000e2dd:	83 c4 10             	add    esp,0x10
c000e2e0:	eb 5c                	jmp    c000e33e <Process::Process(bool, char const*, Process*, char**)+0x152>
c000e2e2:	83 ec 0c             	sub    esp,0xc
c000e2e5:	68 60 12 00 00       	push   0x1260
c000e2ea:	e8 ab 41 00 00       	call   c001249a <operator new(unsigned long)>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	89 c3                	mov    ebx,eax
c000e2f4:	83 ec 08             	sub    esp,0x8
c000e2f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e2fb:	53                   	push   ebx
c000e2fc:	e8 fb 27 00 00       	call   c0010afc <VgaText::VgaText(char const*)>
c000e301:	83 c4 10             	add    esp,0x10
c000e304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e308:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e30e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e312:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e318:	83 ec 0c             	sub    esp,0xc
c000e31b:	50                   	push   eax
c000e31c:	e8 dc 1b 00 00       	call   c000fefd <addToTerminalCycle(VgaText*)>
c000e321:	83 c4 10             	add    esp,0x10
c000e324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e328:	05 0c 01 00 00       	add    eax,0x10c
c000e32d:	83 ec 08             	sub    esp,0x8
c000e330:	68 dc 8f 03 c0       	push   0xc0038fdc
c000e335:	50                   	push   eax
c000e336:	e8 b9 24 ff ff       	call   c00007f4 <strcpy>
c000e33b:	83 c4 10             	add    esp,0x10
c000e33e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e342:	83 c0 0c             	add    eax,0xc
c000e345:	83 ec 08             	sub    esp,0x8
c000e348:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e34c:	50                   	push   eax
c000e34d:	e8 a2 24 ff ff       	call   c00007f4 <strcpy>
c000e352:	83 c4 10             	add    esp,0x10
c000e355:	83 ec 08             	sub    esp,0x8
c000e358:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e35c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e360:	e8 75 fc ff ff       	call   c000dfda <Process::addArgs(char**)>
c000e365:	83 c4 10             	add    esp,0x10
c000e368:	90                   	nop
c000e369:	83 c4 14             	add    esp,0x14
c000e36c:	5b                   	pop    ebx
c000e36d:	5e                   	pop    esi
c000e36e:	c3                   	ret    

c000e36f <disableIRQs()>:
c000e36f:	fa                   	cli    
c000e370:	ff 05 d4 bc 03 c0    	inc    DWORD PTR ds:0xc003bcd4
c000e376:	c3                   	ret    

c000e377 <getIRQNestingLevel()>:
c000e377:	a1 d4 bc 03 c0       	mov    eax,ds:0xc003bcd4
c000e37c:	c3                   	ret    

c000e37d <enableIRQs()>:
c000e37d:	a1 d4 bc 03 c0       	mov    eax,ds:0xc003bcd4
c000e382:	48                   	dec    eax
c000e383:	a3 d4 bc 03 c0       	mov    ds:0xc003bcd4,eax
c000e388:	75 01                	jne    c000e38b <enableIRQs()+0xe>
c000e38a:	fb                   	sti    
c000e38b:	c3                   	ret    

c000e38c <lockScheduler()>:
c000e38c:	eb e1                	jmp    c000e36f <disableIRQs()>

c000e38e <unlockScheduler()>:
c000e38e:	eb ed                	jmp    c000e37d <enableIRQs()>

c000e390 <userModeEntryPoint(void*)>:
c000e390:	83 ec 0c             	sub    esp,0xc
c000e393:	e8 f6 ff ff ff       	call   c000e38e <unlockScheduler()>
c000e398:	fb                   	sti    
c000e399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e39e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e3a1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e3a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e3ab:	83 c4 0c             	add    esp,0xc
c000e3ae:	e9 60 1e ff ff       	jmp    c0000213 <goToUsermode>

c000e3b3 <lockStuff()>:
c000e3b3:	e8 b7 ff ff ff       	call   c000e36f <disableIRQs()>
c000e3b8:	ff 05 d0 bc 03 c0    	inc    DWORD PTR ds:0xc003bcd0
c000e3be:	c3                   	ret    

c000e3bf <taskStartupFunction>:
c000e3bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e3c4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000e3c7:	c3                   	ret    

c000e3c8 <updateTimeUsed()>:
c000e3c8:	57                   	push   edi
c000e3c9:	56                   	push   esi
c000e3ca:	53                   	push   ebx
c000e3cb:	e8 00 8e 00 00       	call   c00171d0 <thisCPU()>
c000e3d0:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000e3d7:	74 49                	je     c000e422 <updateTimeUsed()+0x5a>
c000e3d9:	0f 31                	rdtsc  
c000e3db:	89 c1                	mov    ecx,eax
c000e3dd:	a3 10 bd 03 c0       	mov    ds:0xc003bd10,eax
c000e3e2:	2b 0d 00 bd 03 c0    	sub    ecx,DWORD PTR ds:0xc003bd00
c000e3e8:	89 d3                	mov    ebx,edx
c000e3ea:	89 0d 08 bd 03 c0    	mov    DWORD PTR ds:0xc003bd08,ecx
c000e3f0:	1b 1d 04 bd 03 c0    	sbb    ebx,DWORD PTR ds:0xc003bd04
c000e3f6:	a3 00 bd 03 c0       	mov    ds:0xc003bd00,eax
c000e3fb:	89 1d 0c bd 03 c0    	mov    DWORD PTR ds:0xc003bd0c,ebx
c000e401:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e406:	89 15 14 bd 03 c0    	mov    DWORD PTR ds:0xc003bd14,edx
c000e40c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000e40f:	89 15 04 bd 03 c0    	mov    DWORD PTR ds:0xc003bd04,edx
c000e415:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000e418:	01 f1                	add    ecx,esi
c000e41a:	11 fb                	adc    ebx,edi
c000e41c:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000e41f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e422:	5b                   	pop    ebx
c000e423:	5e                   	pop    esi
c000e424:	5f                   	pop    edi
c000e425:	c3                   	ret    

c000e426 <switchToThread(ThreadControlBlock*)>:
c000e426:	53                   	push   ebx
c000e427:	83 ec 08             	sub    esp,0x8
c000e42a:	a1 d0 bc 03 c0       	mov    eax,ds:0xc003bcd0
c000e42f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e433:	85 c0                	test   eax,eax
c000e435:	75 30                	jne    c000e467 <switchToThread(ThreadControlBlock*)+0x41>
c000e437:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e43a:	3c ff                	cmp    al,0xff
c000e43c:	74 25                	je     c000e463 <switchToThread(ThreadControlBlock*)+0x3d>
c000e43e:	0f b6 d0             	movzx  edx,al
c000e441:	b8 84 03 00 00       	mov    eax,0x384
c000e446:	29 d0                	sub    eax,edx
c000e448:	c1 e0 10             	shl    eax,0x10
c000e44b:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e44e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e451:	e8 72 ff ff ff       	call   c000e3c8 <updateTimeUsed()>
c000e456:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e45a:	83 c4 08             	add    esp,0x8
c000e45d:	5b                   	pop    ebx
c000e45e:	e9 e9 1d ff ff       	jmp    c000024c <switchToThreadASM>
c000e463:	31 c0                	xor    eax,eax
c000e465:	eb e7                	jmp    c000e44e <switchToThread(ThreadControlBlock*)+0x28>
c000e467:	c7 05 cc bc 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bccc,0x1
c000e471:	83 c4 08             	add    esp,0x8
c000e474:	5b                   	pop    ebx
c000e475:	c3                   	ret    

c000e476 <Semaphore::Semaphore(int)>:
c000e476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e47a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e47e:	89 10                	mov    DWORD PTR [eax],edx
c000e480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e484:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e48b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e48f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e49a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e4a1:	90                   	nop
c000e4a2:	c3                   	ret    
c000e4a3:	90                   	nop

c000e4a4 <Mutex::Mutex()>:
c000e4a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a8:	6a 01                	push   0x1
c000e4aa:	50                   	push   eax
c000e4ab:	e8 c6 ff ff ff       	call   c000e476 <Semaphore::Semaphore(int)>
c000e4b0:	83 c4 08             	add    esp,0x8
c000e4b3:	90                   	nop
c000e4b4:	c3                   	ret    
c000e4b5:	90                   	nop

c000e4b6 <Process::createThread(void (*)(void*), void*, int)>:
c000e4b6:	55                   	push   ebp
c000e4b7:	31 c9                	xor    ecx,ecx
c000e4b9:	57                   	push   edi
c000e4ba:	56                   	push   esi
c000e4bb:	53                   	push   ebx
c000e4bc:	83 ec 1c             	sub    esp,0x1c
c000e4bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e4c3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e4ca:	89 f2                	mov    edx,esi
c000e4cc:	0f b7 c2             	movzx  eax,dx
c000e4cf:	83 e2 01             	and    edx,0x1
c000e4d2:	74 14                	je     c000e4e8 <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e4d4:	d1 f8                	sar    eax,1
c000e4d6:	41                   	inc    ecx
c000e4d7:	89 c2                	mov    edx,eax
c000e4d9:	83 f9 10             	cmp    ecx,0x10
c000e4dc:	75 ee                	jne    c000e4cc <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e4de:	83 c4 1c             	add    esp,0x1c
c000e4e1:	31 c0                	xor    eax,eax
c000e4e3:	5b                   	pop    ebx
c000e4e4:	5e                   	pop    esi
c000e4e5:	5f                   	pop    edi
c000e4e6:	5d                   	pop    ebp
c000e4e7:	c3                   	ret    
c000e4e8:	83 ec 08             	sub    esp,0x8
c000e4eb:	b8 01 00 00 00       	mov    eax,0x1
c000e4f0:	d3 e0                	shl    eax,cl
c000e4f2:	09 c6                	or     esi,eax
c000e4f4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e4fa:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e501:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e504:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e507:	01 ce                	add    esi,ecx
c000e509:	89 f0                	mov    eax,esi
c000e50b:	c1 e0 05             	shl    eax,0x5
c000e50e:	01 c6                	add    esi,eax
c000e510:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e513:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e519:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e51f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e523:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e529:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e52f:	89 ca                	mov    edx,ecx
c000e531:	f7 da                	neg    edx
c000e533:	c1 e2 15             	shl    edx,0x15
c000e536:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e53c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e542:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e546:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e550:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e556:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e55a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e560:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e56a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e574:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e57b:	50                   	push   eax
c000e57c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e580:	68 f0 bc 03 c0       	push   0xc003bcf0
c000e585:	e8 74 05 01 00       	call   c001eafe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e58a:	83 c4 10             	add    esp,0x10
c000e58d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e591:	83 c4 1c             	add    esp,0x1c
c000e594:	5b                   	pop    ebx
c000e595:	5e                   	pop    esi
c000e596:	5f                   	pop    edi
c000e597:	5d                   	pop    ebp
c000e598:	c3                   	ret    
c000e599:	90                   	nop

c000e59a <Process::createUserThread()>:
c000e59a:	83 ec 0c             	sub    esp,0xc
c000e59d:	68 80 00 00 00       	push   0x80
c000e5a2:	6a 00                	push   0x0
c000e5a4:	68 90 e3 00 c0       	push   0xc000e390
c000e5a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ad:	e8 04 ff ff ff       	call   c000e4b6 <Process::createThread(void (*)(void*), void*, int)>
c000e5b2:	83 c4 1c             	add    esp,0x1c
c000e5b5:	c3                   	ret    

c000e5b6 <setupMultitasking(void (*)())>:
c000e5b6:	56                   	push   esi
c000e5b7:	53                   	push   ebx
c000e5b8:	53                   	push   ebx
c000e5b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5bd:	eb 10                	jmp    c000e5cf <setupMultitasking(void (*)())+0x19>
c000e5bf:	83 ec 0c             	sub    esp,0xc
c000e5c2:	68 f0 bc 03 c0       	push   0xc003bcf0
c000e5c7:	e8 22 06 01 00       	call   c001ebee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e5cc:	83 c4 10             	add    esp,0x10
c000e5cf:	83 ec 0c             	sub    esp,0xc
c000e5d2:	68 f0 bc 03 c0       	push   0xc003bcf0
c000e5d7:	e8 f6 05 01 00       	call   c001ebd2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e5dc:	83 c4 10             	add    esp,0x10
c000e5df:	84 c0                	test   al,al
c000e5e1:	74 dc                	je     c000e5bf <setupMultitasking(void (*)())+0x9>
c000e5e3:	83 ec 0c             	sub    esp,0xc
c000e5e6:	68 3b 07 00 00       	push   0x73b
c000e5eb:	e8 aa 3e 00 00       	call   c001249a <operator new(unsigned long)>
c000e5f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e5f7:	89 c3                	mov    ebx,eax
c000e5f9:	6a 00                	push   0x0
c000e5fb:	68 e0 8f 03 c0       	push   0xc0038fe0
c000e600:	6a 01                	push   0x1
c000e602:	50                   	push   eax
c000e603:	e8 e4 fb ff ff       	call   c000e1ec <Process::Process(bool, char const*, Process*, char**)>
c000e608:	83 c4 18             	add    esp,0x18
c000e60b:	89 1d fc bc 03 c0    	mov    DWORD PTR ds:0xc003bcfc,ebx
c000e611:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e617:	68 58 90 03 c0       	push   0xc0039058
c000e61c:	e8 c9 e8 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000e621:	58                   	pop    eax
c000e622:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e628:	e8 44 20 00 00       	call   c0010671 <setActiveTerminal(VgaText*)>
c000e62d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e635:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e63b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e63e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e648:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e64e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e654:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e65e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e668:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e672:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e678:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e67e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e688:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e68e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e698:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e69e:	5a                   	pop    edx
c000e69f:	59                   	pop    ecx
c000e6a0:	68 dc 8f 03 c0       	push   0xc0038fdc
c000e6a5:	50                   	push   eax
c000e6a6:	e8 49 21 ff ff       	call   c00007f4 <strcpy>
c000e6ab:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e6b2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e6b6:	83 c4 14             	add    esp,0x14
c000e6b9:	5b                   	pop    ebx
c000e6ba:	5e                   	pop    esi
c000e6bb:	e9 7e 1b ff ff       	jmp    c000023e <switchToThreadASMFirstTime>

c000e6c0 <schedule()>:
c000e6c0:	a1 d0 bc 03 c0       	mov    eax,ds:0xc003bcd0
c000e6c5:	85 c0                	test   eax,eax
c000e6c7:	74 0b                	je     c000e6d4 <schedule()+0x14>
c000e6c9:	c7 05 cc bc 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bccc,0x1
c000e6d3:	c3                   	ret    
c000e6d4:	53                   	push   ebx
c000e6d5:	83 ec 14             	sub    esp,0x14
c000e6d8:	68 f0 bc 03 c0       	push   0xc003bcf0
c000e6dd:	e8 f0 04 01 00       	call   c001ebd2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e6e2:	83 c4 10             	add    esp,0x10
c000e6e5:	84 c0                	test   al,al
c000e6e7:	75 38                	jne    c000e721 <schedule()+0x61>
c000e6e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e6f1:	4a                   	dec    edx
c000e6f2:	74 32                	je     c000e726 <schedule()+0x66>
c000e6f4:	83 ec 0c             	sub    esp,0xc
c000e6f7:	68 f0 bc 03 c0       	push   0xc003bcf0
c000e6fc:	e8 9b 05 01 00       	call   c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e701:	c7 04 24 f0 bc 03 c0 	mov    DWORD PTR [esp],0xc003bcf0
c000e708:	89 c3                	mov    ebx,eax
c000e70a:	e8 df 04 01 00       	call   c001ebee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e70f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e716:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e719:	e8 08 fd ff ff       	call   c000e426 <switchToThread(ThreadControlBlock*)>
c000e71e:	83 c4 10             	add    esp,0x10
c000e721:	83 c4 08             	add    esp,0x8
c000e724:	5b                   	pop    ebx
c000e725:	c3                   	ret    
c000e726:	83 ec 08             	sub    esp,0x8
c000e729:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e730:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e736:	68 f0 bc 03 c0       	push   0xc003bcf0
c000e73b:	e8 be 03 01 00       	call   c001eafe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e740:	83 c4 10             	add    esp,0x10
c000e743:	eb af                	jmp    c000e6f4 <schedule()+0x34>

c000e745 <unlockStuff()>:
c000e745:	a1 d0 bc 03 c0       	mov    eax,ds:0xc003bcd0
c000e74a:	48                   	dec    eax
c000e74b:	a3 d0 bc 03 c0       	mov    ds:0xc003bcd0,eax
c000e750:	75 09                	jne    c000e75b <unlockStuff()+0x16>
c000e752:	a1 cc bc 03 c0       	mov    eax,ds:0xc003bccc
c000e757:	85 c0                	test   eax,eax
c000e759:	75 05                	jne    c000e760 <unlockStuff()+0x1b>
c000e75b:	e9 1d fc ff ff       	jmp    c000e37d <enableIRQs()>
c000e760:	83 ec 0c             	sub    esp,0xc
c000e763:	c7 05 cc bc 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bccc,0x0
c000e76d:	e8 4e ff ff ff       	call   c000e6c0 <schedule()>
c000e772:	83 c4 0c             	add    esp,0xc
c000e775:	e9 03 fc ff ff       	jmp    c000e37d <enableIRQs()>

c000e77a <forkProcess(regs*)>:
c000e77a:	56                   	push   esi
c000e77b:	53                   	push   ebx
c000e77c:	50                   	push   eax
c000e77d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e782:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e785:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e78d:	0f 85 3e 01 00 00    	jne    c000e8d1 <forkProcess(regs*)+0x157>
c000e793:	e8 1b fc ff ff       	call   c000e3b3 <lockStuff()>
c000e798:	83 ec 0c             	sub    esp,0xc
c000e79b:	68 3b 07 00 00       	push   0x73b
c000e7a0:	e8 f5 3c 00 00       	call   c001249a <operator new(unsigned long)>
c000e7a5:	89 c3                	mov    ebx,eax
c000e7a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e7b6:	50                   	push   eax
c000e7b7:	83 c0 0c             	add    eax,0xc
c000e7ba:	50                   	push   eax
c000e7bb:	6a 00                	push   0x0
c000e7bd:	53                   	push   ebx
c000e7be:	e8 29 fa ff ff       	call   c000e1ec <Process::Process(bool, char const*, Process*, char**)>
c000e7c3:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e7c9:	83 c4 20             	add    esp,0x20
c000e7cc:	85 f6                	test   esi,esi
c000e7ce:	74 16                	je     c000e7e6 <forkProcess(regs*)+0x6c>
c000e7d0:	83 ec 0c             	sub    esp,0xc
c000e7d3:	56                   	push   esi
c000e7d4:	e8 fb 2f 00 00       	call   c00117d4 <VAS::~VAS()>
c000e7d9:	59                   	pop    ecx
c000e7da:	58                   	pop    eax
c000e7db:	6a 10                	push   0x10
c000e7dd:	56                   	push   esi
c000e7de:	e8 c6 3c 00 00       	call   c00124a9 <operator delete(void*, unsigned long)>
c000e7e3:	83 c4 10             	add    esp,0x10
c000e7e6:	83 ec 0c             	sub    esp,0xc
c000e7e9:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e7f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7fa:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e800:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e806:	6a 10                	push   0x10
c000e808:	e8 8d 3c 00 00       	call   c001249a <operator new(unsigned long)>
c000e80d:	59                   	pop    ecx
c000e80e:	89 c6                	mov    esi,eax
c000e810:	58                   	pop    eax
c000e811:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e816:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e819:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e81f:	56                   	push   esi
c000e820:	e8 d1 34 00 00       	call   c0011cf6 <VAS::VAS(VAS*)>
c000e825:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e82b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e82e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e830:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e836:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e83b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e83e:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e844:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e849:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e84c:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e852:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e857:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e85a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e864:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e86a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e870:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e876:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e87b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e87e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e885:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e888:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e88f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e896:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8a2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e8a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e8a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e8b0:	58                   	pop    eax
c000e8b1:	5a                   	pop    edx
c000e8b2:	53                   	push   ebx
c000e8b3:	68 f0 bc 03 c0       	push   0xc003bcf0
c000e8b8:	e8 41 02 01 00       	call   c001eafe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e8bd:	e8 83 fe ff ff       	call   c000e745 <unlockStuff()>
c000e8c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8c7:	83 c4 10             	add    esp,0x10
c000e8ca:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e8cd:	5a                   	pop    edx
c000e8ce:	5b                   	pop    ebx
c000e8cf:	5e                   	pop    esi
c000e8d0:	c3                   	ret    
c000e8d1:	83 ec 0c             	sub    esp,0xc
c000e8d4:	68 8c 90 03 c0       	push   0xc003908c
c000e8d9:	e8 0c e6 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000e8de:	83 c4 10             	add    esp,0x10
c000e8e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e8e6:	eb e5                	jmp    c000e8cd <forkProcess(regs*)+0x153>

c000e8e8 <Semaphore::tryAcquire()>:
c000e8e8:	83 ec 0c             	sub    esp,0xc
c000e8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ef:	e8 bf fa ff ff       	call   c000e3b3 <lockStuff()>
c000e8f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e8f7:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e8f9:	7c 0b                	jl     c000e906 <Semaphore::tryAcquire()+0x1e>
c000e8fb:	e8 45 fe ff ff       	call   c000e745 <unlockStuff()>
c000e900:	31 c0                	xor    eax,eax
c000e902:	83 c4 0c             	add    esp,0xc
c000e905:	c3                   	ret    
c000e906:	42                   	inc    edx
c000e907:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e90a:	e8 36 fe ff ff       	call   c000e745 <unlockStuff()>
c000e90f:	b0 01                	mov    al,0x1
c000e911:	83 c4 0c             	add    esp,0xc
c000e914:	c3                   	ret    
c000e915:	90                   	nop

c000e916 <Semaphore::assertLocked(char const*)>:
c000e916:	83 ec 0c             	sub    esp,0xc
c000e919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e91d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e921:	e8 8d fa ff ff       	call   c000e3b3 <lockStuff()>
c000e926:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e928:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e92b:	7c 08                	jl     c000e935 <Semaphore::assertLocked(char const*)+0x1f>
c000e92d:	83 c4 0c             	add    esp,0xc
c000e930:	e9 10 fe ff ff       	jmp    c000e745 <unlockStuff()>
c000e935:	83 ec 0c             	sub    esp,0xc
c000e938:	52                   	push   edx
c000e939:	e8 ca e6 ff ff       	call   c000d008 <panic(char const*)>
c000e93e:	83 c4 10             	add    esp,0x10
c000e941:	83 c4 0c             	add    esp,0xc
c000e944:	e9 fc fd ff ff       	jmp    c000e745 <unlockStuff()>

c000e949 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e949:	83 ec 0c             	sub    esp,0xc
c000e94c:	e8 26 fa ff ff       	call   c000e377 <getIRQNestingLevel()>
c000e951:	83 ec 08             	sub    esp,0x8
c000e954:	50                   	push   eax
c000e955:	68 b8 90 03 c0       	push   0xc00390b8
c000e95a:	e8 8b e5 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000e95f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e968:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e96b:	e8 50 fd ff ff       	call   c000e6c0 <schedule()>
c000e970:	e8 19 fa ff ff       	call   c000e38e <unlockScheduler()>
c000e975:	e8 fd f9 ff ff       	call   c000e377 <getIRQNestingLevel()>
c000e97a:	5a                   	pop    edx
c000e97b:	59                   	pop    ecx
c000e97c:	50                   	push   eax
c000e97d:	68 ec 90 03 c0       	push   0xc00390ec
c000e982:	e8 63 e5 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000e987:	83 c4 1c             	add    esp,0x1c
c000e98a:	c3                   	ret    

c000e98b <blockTask(TaskState)>:
c000e98b:	83 ec 0c             	sub    esp,0xc
c000e98e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e992:	e8 f5 f9 ff ff       	call   c000e38c <lockScheduler()>
c000e997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e99c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e99f:	e8 1c fd ff ff       	call   c000e6c0 <schedule()>
c000e9a4:	83 c4 0c             	add    esp,0xc
c000e9a7:	e9 e2 f9 ff ff       	jmp    c000e38e <unlockScheduler()>

c000e9ac <waitTask(int, int*, int)>:
c000e9ac:	83 ec 18             	sub    esp,0x18
c000e9af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9b8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e9bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e9bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9c4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e9c7:	6a 07                	push   0x7
c000e9c9:	e8 bd ff ff ff       	call   c000e98b <blockTask(TaskState)>
c000e9ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e9d9:	85 d2                	test   edx,edx
c000e9db:	74 0a                	je     c000e9e7 <waitTask(int, int*, int)+0x3b>
c000e9dd:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e9e0:	89 02                	mov    DWORD PTR [edx],eax
c000e9e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9e7:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000e9ea:	83 c4 0c             	add    esp,0xc
c000e9ed:	c3                   	ret    

c000e9ee <nanoSleepUntil(unsigned long long)>:
c000e9ee:	83 ec 0c             	sub    esp,0xc
c000e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e9f9:	3b 05 70 c4 03 c0    	cmp    eax,DWORD PTR ds:0xc003c470
c000e9ff:	89 d1                	mov    ecx,edx
c000ea01:	1b 0d 74 c4 03 c0    	sbb    ecx,DWORD PTR ds:0xc003c474
c000ea07:	73 04                	jae    c000ea0d <nanoSleepUntil(unsigned long long)+0x1f>
c000ea09:	83 c4 0c             	add    esp,0xc
c000ea0c:	c3                   	ret    
c000ea0d:	e8 a1 f9 ff ff       	call   c000e3b3 <lockStuff()>
c000ea12:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ea18:	83 ec 08             	sub    esp,0x8
c000ea1b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000ea1e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000ea21:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000ea27:	68 e4 bc 03 c0       	push   0xc003bce4
c000ea2c:	e8 cd 00 01 00       	call   c001eafe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ea31:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ea38:	e8 4e ff ff ff       	call   c000e98b <blockTask(TaskState)>
c000ea3d:	83 c4 1c             	add    esp,0x1c
c000ea40:	e9 00 fd ff ff       	jmp    c000e745 <unlockStuff()>

c000ea45 <nanoSleep(unsigned long long)>:
c000ea45:	a1 70 c4 03 c0       	mov    eax,ds:0xc003c470
c000ea4a:	8b 15 74 c4 03 c0    	mov    edx,DWORD PTR ds:0xc003c474
c000ea50:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000ea54:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000ea58:	eb 94                	jmp    c000e9ee <nanoSleepUntil(unsigned long long)>

c000ea5a <sleep(unsigned long long)>:
c000ea5a:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000ea62:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000ea67:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000ea6b:	01 ca                	add    edx,ecx
c000ea6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ea71:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ea75:	eb ce                	jmp    c000ea45 <nanoSleep(unsigned long long)>
c000ea77:	90                   	nop

c000ea78 <Semaphore::acquire()>:
c000ea78:	83 ec 0c             	sub    esp,0xc
c000ea7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7f:	e8 2f f9 ff ff       	call   c000e3b3 <lockStuff()>
c000ea84:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ea87:	3b 10                	cmp    edx,DWORD PTR [eax]
c000ea89:	7d 0c                	jge    c000ea97 <Semaphore::acquire()+0x1f>
c000ea8b:	42                   	inc    edx
c000ea8c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ea8f:	83 c4 0c             	add    esp,0xc
c000ea92:	e9 ae fc ff ff       	jmp    c000e745 <unlockStuff()>
c000ea97:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea9d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000eaa4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eaa7:	85 d2                	test   edx,edx
c000eaa9:	74 2a                	je     c000ead5 <Semaphore::acquire()+0x5d>
c000eaab:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000eaae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000eab4:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000eab7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000eabd:	83 ec 0c             	sub    esp,0xc
c000eac0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000eac3:	6a 05                	push   0x5
c000eac5:	e8 c1 fe ff ff       	call   c000e98b <blockTask(TaskState)>
c000eaca:	83 c4 10             	add    esp,0x10
c000eacd:	83 c4 0c             	add    esp,0xc
c000ead0:	e9 70 fc ff ff       	jmp    c000e745 <unlockStuff()>
c000ead5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000eadb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eade:	eb d7                	jmp    c000eab7 <Semaphore::acquire()+0x3f>

c000eae0 <execveProcess(char const*, char* const*, char* const*)>:
c000eae0:	56                   	push   esi
c000eae1:	53                   	push   ebx
c000eae2:	50                   	push   eax
c000eae3:	e8 cb f8 ff ff       	call   c000e3b3 <lockStuff()>
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eaf0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eaf3:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000eaf9:	68 3b 07 00 00       	push   0x73b
c000eafe:	e8 97 39 00 00       	call   c001249a <operator new(unsigned long)>
c000eb03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb07:	89 c3                	mov    ebx,eax
c000eb09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb11:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000eb17:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eb1b:	53                   	push   ebx
c000eb1c:	e8 13 f5 ff ff       	call   c000e034 <Process::Process(char const*, Process*, char**)>
c000eb21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb26:	83 c4 20             	add    esp,0x20
c000eb29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb2c:	85 f6                	test   esi,esi
c000eb2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb30:	89 03                	mov    DWORD PTR [ebx],eax
c000eb32:	74 06                	je     c000eb3a <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000eb34:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000eb3a:	83 ec 0c             	sub    esp,0xc
c000eb3d:	53                   	push   ebx
c000eb3e:	e8 57 fa ff ff       	call   c000e59a <Process::createUserThread()>
c000eb43:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eb4a:	e8 3c fe ff ff       	call   c000e98b <blockTask(TaskState)>
c000eb4f:	e8 f1 fb ff ff       	call   c000e745 <unlockStuff()>
c000eb54:	e8 33 f8 ff ff       	call   c000e38c <lockScheduler()>
c000eb59:	e8 62 fb ff ff       	call   c000e6c0 <schedule()>
c000eb5e:	e8 2b f8 ff ff       	call   c000e38e <unlockScheduler()>
c000eb63:	83 c4 14             	add    esp,0x14
c000eb66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb6b:	5b                   	pop    ebx
c000eb6c:	5e                   	pop    esi
c000eb6d:	c3                   	ret    

c000eb6e <taskReturned>:
c000eb6e:	83 ec 0c             	sub    esp,0xc
c000eb71:	e8 18 f8 ff ff       	call   c000e38e <unlockScheduler()>
c000eb76:	83 ec 08             	sub    esp,0x8
c000eb79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb81:	83 c0 0c             	add    eax,0xc
c000eb84:	50                   	push   eax
c000eb85:	68 e7 8f 03 c0       	push   0xc0038fe7
c000eb8a:	e8 5b e3 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000eb8f:	83 c4 10             	add    esp,0x10
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	6a 02                	push   0x2
c000eb97:	e8 ef fd ff ff       	call   c000e98b <blockTask(TaskState)>
c000eb9c:	e8 eb f7 ff ff       	call   c000e38c <lockScheduler()>
c000eba1:	e8 1a fb ff ff       	call   c000e6c0 <schedule()>
c000eba6:	e8 e3 f7 ff ff       	call   c000e38e <unlockScheduler()>
c000ebab:	83 c4 10             	add    esp,0x10
c000ebae:	eb e2                	jmp    c000eb92 <taskReturned+0x24>

c000ebb0 <unblockTask(ThreadControlBlock*)>:
c000ebb0:	53                   	push   ebx
c000ebb1:	83 ec 08             	sub    esp,0x8
c000ebb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebb8:	e8 cf f7 ff ff       	call   c000e38c <lockScheduler()>
c000ebbd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ebc0:	85 c0                	test   eax,eax
c000ebc2:	74 5c                	je     c000ec20 <unblockTask(ThreadControlBlock*)+0x70>
c000ebc4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ebc7:	48                   	dec    eax
c000ebc8:	74 31                	je     c000ebfb <unblockTask(ThreadControlBlock*)+0x4b>
c000ebca:	83 ec 0c             	sub    esp,0xc
c000ebcd:	68 f0 bc 03 c0       	push   0xc003bcf0
c000ebd2:	e8 c5 00 01 00       	call   c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ebd7:	83 c4 10             	add    esp,0x10
c000ebda:	85 c0                	test   eax,eax
c000ebdc:	75 17                	jne    c000ebf5 <unblockTask(ThreadControlBlock*)+0x45>
c000ebde:	eb 65                	jmp    c000ec45 <unblockTask(ThreadControlBlock*)+0x95>
c000ebe0:	83 ec 08             	sub    esp,0x8
c000ebe3:	50                   	push   eax
c000ebe4:	68 f0 bc 03 c0       	push   0xc003bcf0
c000ebe9:	e8 b6 00 01 00       	call   c001eca4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000ebee:	83 c4 10             	add    esp,0x10
c000ebf1:	85 c0                	test   eax,eax
c000ebf3:	74 50                	je     c000ec45 <unblockTask(ThreadControlBlock*)+0x95>
c000ebf5:	39 c3                	cmp    ebx,eax
c000ebf7:	75 e7                	jne    c000ebe0 <unblockTask(ThreadControlBlock*)+0x30>
c000ebf9:	eb 1c                	jmp    c000ec17 <unblockTask(ThreadControlBlock*)+0x67>
c000ebfb:	83 ec 0c             	sub    esp,0xc
c000ebfe:	68 dc 91 03 c0       	push   0xc00391dc
c000ec03:	e8 e2 e2 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000ec08:	c7 04 24 68 91 03 c0 	mov    DWORD PTR [esp],0xc0039168
c000ec0f:	e8 d6 e2 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000ec14:	83 c4 10             	add    esp,0x10
c000ec17:	83 c4 08             	add    esp,0x8
c000ec1a:	5b                   	pop    ebx
c000ec1b:	e9 6e f7 ff ff       	jmp    c000e38e <unlockScheduler()>
c000ec20:	83 ec 0c             	sub    esp,0xc
c000ec23:	68 20 91 03 c0       	push   0xc0039120
c000ec28:	e8 bd e2 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000ec2d:	c7 04 24 68 91 03 c0 	mov    DWORD PTR [esp],0xc0039168
c000ec34:	e8 b1 e2 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	83 c4 08             	add    esp,0x8
c000ec3f:	5b                   	pop    ebx
c000ec40:	e9 49 f7 ff ff       	jmp    c000e38e <unlockScheduler()>
c000ec45:	83 ec 08             	sub    esp,0x8
c000ec48:	53                   	push   ebx
c000ec49:	68 f0 bc 03 c0       	push   0xc003bcf0
c000ec4e:	e8 ab fe 00 00       	call   c001eafe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ec53:	83 c4 10             	add    esp,0x10
c000ec56:	83 c4 08             	add    esp,0x8
c000ec59:	5b                   	pop    ebx
c000ec5a:	e9 2f f7 ff ff       	jmp    c000e38e <unlockScheduler()>

c000ec5f <cleanupTerminatedTask(ThreadControlBlock*)>:
c000ec5f:	55                   	push   ebp
c000ec60:	57                   	push   edi
c000ec61:	56                   	push   esi
c000ec62:	53                   	push   ebx
c000ec63:	83 ec 1c             	sub    esp,0x1c
c000ec66:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ec6a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec6d:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000ec73:	85 c9                	test   ecx,ecx
c000ec75:	7e 20                	jle    c000ec97 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000ec77:	31 f6                	xor    esi,esi
c000ec79:	83 ec 0c             	sub    esp,0xc
c000ec7c:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000ec83:	46                   	inc    esi
c000ec84:	e8 6c e8 ff ff       	call   c000d4f5 <free>
c000ec89:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec8c:	83 c4 10             	add    esp,0x10
c000ec8f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000ec95:	7f e2                	jg     c000ec79 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000ec97:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000eca1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000eca6:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000eca9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ecac:	d3 c0                	rol    eax,cl
c000ecae:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000ecb5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ecb8:	89 f7                	mov    edi,esi
c000ecba:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000ecc2:	0f 85 4f 01 00 00    	jne    c000ee17 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000ecc8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ecce:	85 c0                	test   eax,eax
c000ecd0:	0f 84 aa 00 00 00    	je     c000ed80 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ecd6:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000ecd9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ecdd:	31 c9                	xor    ecx,ecx
c000ecdf:	eb 10                	jmp    c000ecf1 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000ece1:	41                   	inc    ecx
c000ece2:	83 f9 10             	cmp    ecx,0x10
c000ece5:	0f 84 95 00 00 00    	je     c000ed80 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000eceb:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ecf1:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000ecf8:	d3 fa                	sar    edx,cl
c000ecfa:	83 e2 01             	and    edx,0x1
c000ecfd:	74 e2                	je     c000ece1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ecff:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000ed02:	01 ca                	add    edx,ecx
c000ed04:	89 d5                	mov    ebp,edx
c000ed06:	c1 e5 05             	shl    ebp,0x5
c000ed09:	01 ea                	add    edx,ebp
c000ed0b:	01 d0                	add    eax,edx
c000ed0d:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000ed13:	83 fd 07             	cmp    ebp,0x7
c000ed16:	75 c9                	jne    c000ece1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ed18:	05 40 02 00 00       	add    eax,0x240
c000ed1d:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000ed20:	83 fd ff             	cmp    ebp,0xffffffff
c000ed23:	0f 8c 01 01 00 00    	jl     c000ee2a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000ed29:	0f 84 b2 01 00 00    	je     c000eee1 <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000ed2f:	85 ed                	test   ebp,ebp
c000ed31:	0f 84 99 01 00 00    	je     c000eed0 <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000ed37:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000ed39:	75 a6                	jne    c000ece1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ed3b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ed41:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ed45:	01 d0                	add    eax,edx
c000ed47:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ed4b:	83 ec 0c             	sub    esp,0xc
c000ed4e:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000ed54:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed57:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ed5d:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000ed64:	50                   	push   eax
c000ed65:	e8 46 fe ff ff       	call   c000ebb0 <unblockTask(ThreadControlBlock*)>
c000ed6a:	83 c4 10             	add    esp,0x10
c000ed6d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ed70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed74:	89 f7                	mov    edi,esi
c000ed76:	41                   	inc    ecx
c000ed77:	83 f9 10             	cmp    ecx,0x10
c000ed7a:	0f 85 6b ff ff ff    	jne    c000eceb <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000ed80:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000ed86:	85 c0                	test   eax,eax
c000ed88:	74 5d                	je     c000ede7 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ed8a:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000ed90:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000ed96:	74 4f                	je     c000ede7 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ed98:	83 ec 0c             	sub    esp,0xc
c000ed9b:	68 f0 bc 03 c0       	push   0xc003bcf0
c000eda0:	e8 f7 fe 00 00       	call   c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eda5:	c7 04 24 f0 bc 03 c0 	mov    DWORD PTR [esp],0xc003bcf0
c000edac:	89 c7                	mov    edi,eax
c000edae:	e8 1f fe 00 00       	call   c001ebd2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000edb3:	83 c4 10             	add    esp,0x10
c000edb6:	84 c0                	test   al,al
c000edb8:	0f 84 dd 00 00 00    	je     c000ee9b <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000edbe:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000edc1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000edc7:	85 d2                	test   edx,edx
c000edc9:	74 0f                	je     c000edda <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000edcb:	83 ec 0c             	sub    esp,0xc
c000edce:	8b 02                	mov    eax,DWORD PTR [edx]
c000edd0:	52                   	push   edx
c000edd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000edd4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000edd7:	83 c4 10             	add    esp,0x10
c000edda:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000ede4:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ede7:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000eded:	85 f6                	test   esi,esi
c000edef:	74 16                	je     c000ee07 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000edf1:	83 ec 0c             	sub    esp,0xc
c000edf4:	56                   	push   esi
c000edf5:	e8 da 29 00 00       	call   c00117d4 <VAS::~VAS()>
c000edfa:	58                   	pop    eax
c000edfb:	5a                   	pop    edx
c000edfc:	6a 10                	push   0x10
c000edfe:	56                   	push   esi
c000edff:	e8 a5 36 00 00       	call   c00124a9 <operator delete(void*, unsigned long)>
c000ee04:	83 c4 10             	add    esp,0x10
c000ee07:	83 ec 0c             	sub    esp,0xc
c000ee0a:	68 03 90 03 c0       	push   0xc0039003
c000ee0f:	e8 d6 e0 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000ee14:	83 c4 10             	add    esp,0x10
c000ee17:	83 ec 08             	sub    esp,0x8
c000ee1a:	6a 63                	push   0x63
c000ee1c:	53                   	push   ebx
c000ee1d:	e8 87 36 00 00       	call   c00124a9 <operator delete(void*, unsigned long)>
c000ee22:	83 c4 2c             	add    esp,0x2c
c000ee25:	5b                   	pop    ebx
c000ee26:	5e                   	pop    esi
c000ee27:	5f                   	pop    edi
c000ee28:	5d                   	pop    ebp
c000ee29:	c3                   	ret    
c000ee2a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ee2e:	83 ec 0c             	sub    esp,0xc
c000ee31:	68 20 92 03 c0       	push   0xc0039220
c000ee36:	e8 cd e1 ff ff       	call   c000d008 <panic(char const*)>
c000ee3b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ee3e:	83 c4 10             	add    esp,0x10
c000ee41:	89 f7                	mov    edi,esi
c000ee43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee47:	e9 95 fe ff ff       	jmp    c000ece1 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ee4c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000ee52:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000ee58:	75 1c                	jne    c000ee76 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee5a:	83 ec 0c             	sub    esp,0xc
c000ee5d:	68 88 92 03 c0       	push   0xc0039288
c000ee62:	e8 83 e0 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000ee67:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ee6e:	e8 18 fb ff ff       	call   c000e98b <blockTask(TaskState)>
c000ee73:	83 c4 10             	add    esp,0x10
c000ee76:	83 ec 08             	sub    esp,0x8
c000ee79:	56                   	push   esi
c000ee7a:	68 f0 bc 03 c0       	push   0xc003bcf0
c000ee7f:	e8 7a fc 00 00       	call   c001eafe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ee84:	c7 04 24 f0 bc 03 c0 	mov    DWORD PTR [esp],0xc003bcf0
c000ee8b:	e8 0c fe 00 00       	call   c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ee90:	83 c4 10             	add    esp,0x10
c000ee93:	39 f8                	cmp    eax,edi
c000ee95:	0f 84 23 ff ff ff    	je     c000edbe <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000ee9b:	83 ec 0c             	sub    esp,0xc
c000ee9e:	68 f0 bc 03 c0       	push   0xc003bcf0
c000eea3:	e8 f4 fd 00 00       	call   c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eea8:	c7 04 24 f0 bc 03 c0 	mov    DWORD PTR [esp],0xc003bcf0
c000eeaf:	89 c6                	mov    esi,eax
c000eeb1:	e8 38 fd 00 00       	call   c001ebee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000eeb6:	83 c4 10             	add    esp,0x10
c000eeb9:	39 f3                	cmp    ebx,esi
c000eebb:	74 b9                	je     c000ee76 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eebd:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000eec0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eec3:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000eec9:	75 ab                	jne    c000ee76 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eecb:	e9 7c ff ff ff       	jmp    c000ee4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000eed0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eed4:	83 ec 0c             	sub    esp,0xc
c000eed7:	68 54 92 03 c0       	push   0xc0039254
c000eedc:	e9 55 ff ff ff       	jmp    c000ee36 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000eee1:	8b 36                	mov    esi,DWORD PTR [esi]
c000eee3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eee7:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000eeea:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eeed:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000eef3:	01 d7                	add    edi,edx
c000eef5:	89 f8                	mov    eax,edi
c000eef7:	e9 4b fe ff ff       	jmp    c000ed47 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000eefc <cleanerTaskFunction(void*)>:
c000eefc:	53                   	push   ebx
c000eefd:	83 ec 08             	sub    esp,0x8
c000ef00:	e8 89 f4 ff ff       	call   c000e38e <unlockScheduler()>
c000ef05:	e8 82 f4 ff ff       	call   c000e38c <lockScheduler()>
c000ef0a:	80 3d b4 bc 03 c0 00 	cmp    BYTE PTR ds:0xc003bcb4,0x0
c000ef11:	75 72                	jne    c000ef85 <cleanerTaskFunction(void*)+0x89>
c000ef13:	83 ec 0c             	sub    esp,0xc
c000ef16:	6a 02                	push   0x2
c000ef18:	e8 2c fa ff ff       	call   c000e949 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000ef1d:	83 c4 10             	add    esp,0x10
c000ef20:	c6 05 b4 bc 03 c0 00 	mov    BYTE PTR ds:0xc003bcb4,0x0
c000ef27:	e8 87 f4 ff ff       	call   c000e3b3 <lockStuff()>
c000ef2c:	e8 5b f4 ff ff       	call   c000e38c <lockScheduler()>
c000ef31:	83 ec 0c             	sub    esp,0xc
c000ef34:	68 d8 bc 03 c0       	push   0xc003bcd8
c000ef39:	e8 94 fc 00 00       	call   c001ebd2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ef3e:	83 c4 10             	add    esp,0x10
c000ef41:	84 c0                	test   al,al
c000ef43:	75 28                	jne    c000ef6d <cleanerTaskFunction(void*)+0x71>
c000ef45:	83 ec 0c             	sub    esp,0xc
c000ef48:	68 d8 bc 03 c0       	push   0xc003bcd8
c000ef4d:	e8 4a fd 00 00       	call   c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ef52:	c7 04 24 d8 bc 03 c0 	mov    DWORD PTR [esp],0xc003bcd8
c000ef59:	89 c3                	mov    ebx,eax
c000ef5b:	e8 8e fc 00 00       	call   c001ebee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ef60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef63:	e8 f7 fc ff ff       	call   c000ec5f <cleanupTerminatedTask(ThreadControlBlock*)>
c000ef68:	83 c4 10             	add    esp,0x10
c000ef6b:	eb c4                	jmp    c000ef31 <cleanerTaskFunction(void*)+0x35>
c000ef6d:	e8 1c f4 ff ff       	call   c000e38e <unlockScheduler()>
c000ef72:	e8 ce f7 ff ff       	call   c000e745 <unlockStuff()>
c000ef77:	e8 10 f4 ff ff       	call   c000e38c <lockScheduler()>
c000ef7c:	80 3d b4 bc 03 c0 00 	cmp    BYTE PTR ds:0xc003bcb4,0x0
c000ef83:	74 8e                	je     c000ef13 <cleanerTaskFunction(void*)+0x17>
c000ef85:	e8 04 f4 ff ff       	call   c000e38e <unlockScheduler()>
c000ef8a:	eb 94                	jmp    c000ef20 <cleanerTaskFunction(void*)+0x24>

c000ef8c <terminateTask(int)>:
c000ef8c:	83 ec 0c             	sub    esp,0xc
c000ef8f:	e8 1f f4 ff ff       	call   c000e3b3 <lockStuff()>
c000ef94:	e8 f3 f3 ff ff       	call   c000e38c <lockScheduler()>
c000ef99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efa2:	83 ec 08             	sub    esp,0x8
c000efa5:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000efa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efad:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000efb0:	50                   	push   eax
c000efb1:	68 d8 bc 03 c0       	push   0xc003bcd8
c000efb6:	e8 43 fb 00 00       	call   c001eafe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000efbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efc0:	83 c4 10             	add    esp,0x10
c000efc3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000efca:	a1 b0 bc 03 c0       	mov    eax,ds:0xc003bcb0
c000efcf:	85 c0                	test   eax,eax
c000efd1:	74 2e                	je     c000f001 <terminateTask(int)+0x75>
c000efd3:	83 ec 0c             	sub    esp,0xc
c000efd6:	c6 05 b4 bc 03 c0 01 	mov    BYTE PTR ds:0xc003bcb4,0x1
c000efdd:	50                   	push   eax
c000efde:	e8 cd fb ff ff       	call   c000ebb0 <unblockTask(ThreadControlBlock*)>
c000efe3:	83 c4 10             	add    esp,0x10
c000efe6:	e8 a3 f3 ff ff       	call   c000e38e <unlockScheduler()>
c000efeb:	e8 55 f7 ff ff       	call   c000e745 <unlockStuff()>
c000eff0:	e8 97 f3 ff ff       	call   c000e38c <lockScheduler()>
c000eff5:	e8 c6 f6 ff ff       	call   c000e6c0 <schedule()>
c000effa:	e8 8f f3 ff ff       	call   c000e38e <unlockScheduler()>
c000efff:	eb ef                	jmp    c000eff0 <terminateTask(int)+0x64>
c000f001:	83 ec 0c             	sub    esp,0xc
c000f004:	68 11 90 03 c0       	push   0xc0039011
c000f009:	e8 dc de ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000f00e:	83 c4 10             	add    esp,0x10
c000f011:	eb d3                	jmp    c000efe6 <terminateTask(int)+0x5a>
c000f013:	90                   	nop

c000f014 <Semaphore::release()>:
c000f014:	83 ec 0c             	sub    esp,0xc
c000f017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f01b:	e8 93 f3 ff ff       	call   c000e3b3 <lockStuff()>
c000f020:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f023:	85 d2                	test   edx,edx
c000f025:	74 1a                	je     c000f041 <Semaphore::release()+0x2d>
c000f027:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000f02a:	83 ec 0c             	sub    esp,0xc
c000f02d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000f030:	52                   	push   edx
c000f031:	e8 7a fb ff ff       	call   c000ebb0 <unblockTask(ThreadControlBlock*)>
c000f036:	83 c4 10             	add    esp,0x10
c000f039:	83 c4 0c             	add    esp,0xc
c000f03c:	e9 04 f7 ff ff       	jmp    c000e745 <unlockStuff()>
c000f041:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000f044:	83 c4 0c             	add    esp,0xc
c000f047:	e9 f9 f6 ff ff       	jmp    c000e745 <unlockStuff()>

c000f04c <__static_initialization_and_destruction_0(int, int)>:
c000f04c:	83 ec 0c             	sub    esp,0xc
c000f04f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f054:	0f 85 88 00 00 00    	jne    c000f0e2 <__static_initialization_and_destruction_0(int, int)+0x96>
c000f05a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000f062:	75 7e                	jne    c000f0e2 <__static_initialization_and_destruction_0(int, int)+0x96>
c000f064:	83 ec 0c             	sub    esp,0xc
c000f067:	68 f0 bc 03 c0       	push   0xc003bcf0
c000f06c:	e8 35 fa 00 00       	call   c001eaa6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f071:	83 c4 10             	add    esp,0x10
c000f074:	83 ec 04             	sub    esp,0x4
c000f077:	68 cc ae 03 c0       	push   0xc003aecc
c000f07c:	68 f0 bc 03 c0       	push   0xc003bcf0
c000f081:	68 66 ea 01 c0       	push   0xc001ea66
c000f086:	e8 9a 33 00 00       	call   c0012425 <__cxa_atexit>
c000f08b:	83 c4 10             	add    esp,0x10
c000f08e:	83 ec 0c             	sub    esp,0xc
c000f091:	68 e4 bc 03 c0       	push   0xc003bce4
c000f096:	e8 0b fa 00 00       	call   c001eaa6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f09b:	83 c4 10             	add    esp,0x10
c000f09e:	83 ec 04             	sub    esp,0x4
c000f0a1:	68 cc ae 03 c0       	push   0xc003aecc
c000f0a6:	68 e4 bc 03 c0       	push   0xc003bce4
c000f0ab:	68 66 ea 01 c0       	push   0xc001ea66
c000f0b0:	e8 70 33 00 00       	call   c0012425 <__cxa_atexit>
c000f0b5:	83 c4 10             	add    esp,0x10
c000f0b8:	83 ec 0c             	sub    esp,0xc
c000f0bb:	68 d8 bc 03 c0       	push   0xc003bcd8
c000f0c0:	e8 e1 f9 00 00       	call   c001eaa6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f0c5:	83 c4 10             	add    esp,0x10
c000f0c8:	83 ec 04             	sub    esp,0x4
c000f0cb:	68 cc ae 03 c0       	push   0xc003aecc
c000f0d0:	68 d8 bc 03 c0       	push   0xc003bcd8
c000f0d5:	68 66 ea 01 c0       	push   0xc001ea66
c000f0da:	e8 46 33 00 00       	call   c0012425 <__cxa_atexit>
c000f0df:	83 c4 10             	add    esp,0x10
c000f0e2:	90                   	nop
c000f0e3:	83 c4 0c             	add    esp,0xc
c000f0e6:	c3                   	ret    

c000f0e7 <_GLOBAL__sub_I_kernelProcess>:
c000f0e7:	83 ec 0c             	sub    esp,0xc
c000f0ea:	83 ec 08             	sub    esp,0x8
c000f0ed:	68 ff ff 00 00       	push   0xffff
c000f0f2:	6a 01                	push   0x1
c000f0f4:	e8 53 ff ff ff       	call   c000f04c <__static_initialization_and_destruction_0(int, int)>
c000f0f9:	83 c4 10             	add    esp,0x10
c000f0fc:	83 c4 0c             	add    esp,0xc
c000f0ff:	c3                   	ret    

c000f100 <sysCallGetPID(regs*)>:
c000f100:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f105:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f108:	8b 00                	mov    eax,DWORD PTR [eax]
c000f10a:	99                   	cdq    
c000f10b:	c3                   	ret    

c000f10c <sysCallSeekDir(regs*)>:
c000f10c:	31 c0                	xor    eax,eax
c000f10e:	31 d2                	xor    edx,edx
c000f110:	c3                   	ret    

c000f111 <sysCallTellDir(regs*)>:
c000f111:	31 c0                	xor    eax,eax
c000f113:	31 d2                	xor    edx,edx
c000f115:	c3                   	ret    

c000f116 <sysCallVerify(regs*)>:
c000f116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f11a:	31 d2                	xor    edx,edx
c000f11c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f11f:	c3                   	ret    

c000f120 <sysCallGetArgc(regs*)>:
c000f120:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f125:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f128:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000f12e:	99                   	cdq    
c000f12f:	c3                   	ret    

c000f130 <sysFormatDisk(regs*)>:
c000f130:	56                   	push   esi
c000f131:	53                   	push   ebx
c000f132:	53                   	push   ebx
c000f133:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f137:	8b 1d 60 bf 03 c0    	mov    ebx,DWORD PTR ds:0xc003bf60
c000f13d:	eb 25                	jmp    c000f164 <sysFormatDisk(regs*)+0x34>
c000f13f:	83 ec 0c             	sub    esp,0xc
c000f142:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f145:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f147:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f14a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f14d:	50                   	push   eax
c000f14e:	ff 34 85 00 c4 03 c0 	push   DWORD PTR [eax*4-0x3ffc3c00]
c000f155:	53                   	push   ebx
c000f156:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000f159:	83 c4 20             	add    esp,0x20
c000f15c:	83 f8 08             	cmp    eax,0x8
c000f15f:	75 12                	jne    c000f173 <sysFormatDisk(regs*)+0x43>
c000f161:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f164:	85 db                	test   ebx,ebx
c000f166:	75 d7                	jne    c000f13f <sysFormatDisk(regs*)+0xf>
c000f168:	59                   	pop    ecx
c000f169:	b8 03 00 00 00       	mov    eax,0x3
c000f16e:	31 d2                	xor    edx,edx
c000f170:	5b                   	pop    ebx
c000f171:	5e                   	pop    esi
c000f172:	c3                   	ret    
c000f173:	85 c0                	test   eax,eax
c000f175:	74 1b                	je     c000f192 <sysFormatDisk(regs*)+0x62>
c000f177:	83 f8 09             	cmp    eax,0x9
c000f17a:	74 0b                	je     c000f187 <sysFormatDisk(regs*)+0x57>
c000f17c:	59                   	pop    ecx
c000f17d:	b8 02 00 00 00       	mov    eax,0x2
c000f182:	31 d2                	xor    edx,edx
c000f184:	5b                   	pop    ebx
c000f185:	5e                   	pop    esi
c000f186:	c3                   	ret    
c000f187:	59                   	pop    ecx
c000f188:	b8 01 00 00 00       	mov    eax,0x1
c000f18d:	31 d2                	xor    edx,edx
c000f18f:	5b                   	pop    ebx
c000f190:	5e                   	pop    esi
c000f191:	c3                   	ret    
c000f192:	59                   	pop    ecx
c000f193:	31 c0                	xor    eax,eax
c000f195:	31 d2                	xor    edx,edx
c000f197:	5b                   	pop    ebx
c000f198:	5e                   	pop    esi
c000f199:	c3                   	ret    

c000f19a <sysSetDiskVolumeLabel(regs*)>:
c000f19a:	56                   	push   esi
c000f19b:	53                   	push   ebx
c000f19c:	53                   	push   ebx
c000f19d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f1a1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f1a4:	83 f8 19             	cmp    eax,0x19
c000f1a7:	77 29                	ja     c000f1d2 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f1a9:	8b 0c 85 00 c4 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc3c00]
c000f1b0:	85 c9                	test   ecx,ecx
c000f1b2:	74 1e                	je     c000f1d2 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f1b4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000f1b7:	85 d2                	test   edx,edx
c000f1b9:	74 17                	je     c000f1d2 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f1bb:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000f1c1:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f1c3:	52                   	push   edx
c000f1c4:	50                   	push   eax
c000f1c5:	51                   	push   ecx
c000f1c6:	53                   	push   ebx
c000f1c7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000f1ca:	83 c4 10             	add    esp,0x10
c000f1cd:	99                   	cdq    
c000f1ce:	59                   	pop    ecx
c000f1cf:	5b                   	pop    ebx
c000f1d0:	5e                   	pop    esi
c000f1d1:	c3                   	ret    
c000f1d2:	59                   	pop    ecx
c000f1d3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f1d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1dd:	5b                   	pop    ebx
c000f1de:	5e                   	pop    esi
c000f1df:	c3                   	ret    

c000f1e0 <sysGetDiskVolumeLabel(regs*)>:
c000f1e0:	57                   	push   edi
c000f1e1:	56                   	push   esi
c000f1e2:	53                   	push   ebx
c000f1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1e7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f1ea:	83 fa 19             	cmp    edx,0x19
c000f1ed:	77 34                	ja     c000f223 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1ef:	8b 0c 95 00 c4 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc3c00]
c000f1f6:	85 c9                	test   ecx,ecx
c000f1f8:	74 29                	je     c000f223 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f1fa:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f1fd:	85 db                	test   ebx,ebx
c000f1ff:	74 22                	je     c000f223 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f201:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f204:	85 c0                	test   eax,eax
c000f206:	74 1b                	je     c000f223 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f208:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000f20e:	83 ec 0c             	sub    esp,0xc
c000f211:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f213:	50                   	push   eax
c000f214:	53                   	push   ebx
c000f215:	52                   	push   edx
c000f216:	51                   	push   ecx
c000f217:	56                   	push   esi
c000f218:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000f21b:	83 c4 20             	add    esp,0x20
c000f21e:	99                   	cdq    
c000f21f:	5b                   	pop    ebx
c000f220:	5e                   	pop    esi
c000f221:	5f                   	pop    edi
c000f222:	c3                   	ret    
c000f223:	5b                   	pop    ebx
c000f224:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f229:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f22e:	5e                   	pop    esi
c000f22f:	5f                   	pop    edi
c000f230:	c3                   	ret    

c000f231 <sysShutdown(regs*)>:
c000f231:	83 ec 0c             	sub    esp,0xc
c000f234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f238:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f23b:	85 c0                	test   eax,eax
c000f23d:	74 24                	je     c000f263 <sysShutdown(regs*)+0x32>
c000f23f:	48                   	dec    eax
c000f240:	74 0e                	je     c000f250 <sysShutdown(regs*)+0x1f>
c000f242:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f247:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f24c:	83 c4 0c             	add    esp,0xc
c000f24f:	c3                   	ret    
c000f250:	a1 80 c4 03 c0       	mov    eax,ds:0xc003c480
c000f255:	85 c0                	test   eax,eax
c000f257:	74 02                	je     c000f25b <sysShutdown(regs*)+0x2a>
c000f259:	ff d0                	call   eax
c000f25b:	31 c0                	xor    eax,eax
c000f25d:	31 d2                	xor    edx,edx
c000f25f:	83 c4 0c             	add    esp,0xc
c000f262:	c3                   	ret    
c000f263:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c000f268:	8b 10                	mov    edx,DWORD PTR [eax]
c000f26a:	6a 00                	push   0x0
c000f26c:	6a 00                	push   0x0
c000f26e:	6a 00                	push   0x0
c000f270:	50                   	push   eax
c000f271:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f274:	83 c4 10             	add    esp,0x10
c000f277:	eb c9                	jmp    c000f242 <sysShutdown(regs*)+0x11>

c000f279 <sysCallGetCwd(regs*)>:
c000f279:	83 ec 10             	sub    esp,0x10
c000f27c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f280:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f283:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f28b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f28e:	e8 a6 39 00 00       	call   c0012c39 <getcwd(Process*, char*, int)>
c000f293:	83 c4 1c             	add    esp,0x1c
c000f296:	99                   	cdq    
c000f297:	c3                   	ret    

c000f298 <sysCallSetCwd(regs*)>:
c000f298:	83 ec 14             	sub    esp,0x14
c000f29b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f29f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f2a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f2a7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f2aa:	e8 b4 39 00 00       	call   c0012c63 <setcwd(Process*, char*)>
c000f2af:	83 c4 1c             	add    esp,0x1c
c000f2b2:	99                   	cdq    
c000f2b3:	c3                   	ret    

c000f2b4 <sysCallRealpath(regs*)>:
c000f2b4:	83 ec 0c             	sub    esp,0xc
c000f2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2bb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000f2be:	85 d2                	test   edx,edx
c000f2c0:	74 07                	je     c000f2c9 <sysCallRealpath(regs*)+0x15>
c000f2c2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f2c5:	85 c0                	test   eax,eax
c000f2c7:	75 0b                	jne    c000f2d4 <sysCallRealpath(regs*)+0x20>
c000f2c9:	b8 01 00 00 00       	mov    eax,0x1
c000f2ce:	31 d2                	xor    edx,edx
c000f2d0:	83 c4 0c             	add    esp,0xc
c000f2d3:	c3                   	ret    
c000f2d4:	51                   	push   ecx
c000f2d5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f2db:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f2de:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000f2e4:	51                   	push   ecx
c000f2e5:	52                   	push   edx
c000f2e6:	50                   	push   eax
c000f2e7:	e8 32 34 00 00       	call   c001271e <standardiseFiles(char*, char const*, char const*)>
c000f2ec:	83 c4 10             	add    esp,0x10
c000f2ef:	31 c0                	xor    eax,eax
c000f2f1:	31 d2                	xor    edx,edx
c000f2f3:	83 c4 0c             	add    esp,0xc
c000f2f6:	c3                   	ret    

c000f2f7 <sysCallOpen(regs*)>:
c000f2f7:	56                   	push   esi
c000f2f8:	53                   	push   ebx
c000f2f9:	81 ec 04 01 00 00    	sub    esp,0x104
c000f2ff:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000f306:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f309:	85 d2                	test   edx,edx
c000f30b:	0f 84 c3 00 00 00    	je     c000f3d4 <sysCallOpen(regs*)+0xdd>
c000f311:	50                   	push   eax
c000f312:	68 57 93 03 c0       	push   0xc0039357
c000f317:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f31a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f31e:	56                   	push   esi
c000f31f:	e8 fa 33 00 00       	call   c001271e <standardiseFiles(char*, char const*, char const*)>
c000f324:	89 34 24             	mov    DWORD PTR [esp],esi
c000f327:	e8 d5 13 ff ff       	call   c0000701 <strlen>
c000f32c:	83 c4 10             	add    esp,0x10
c000f32f:	48                   	dec    eax
c000f330:	74 1d                	je     c000f34f <sysCallOpen(regs*)+0x58>
c000f332:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000f335:	eb 0f                	jmp    c000f346 <sysCallOpen(regs*)+0x4f>
c000f337:	80 fa 3a             	cmp    dl,0x3a
c000f33a:	74 0f                	je     c000f34b <sysCallOpen(regs*)+0x54>
c000f33c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000f340:	48                   	dec    eax
c000f341:	74 0c                	je     c000f34f <sysCallOpen(regs*)+0x58>
c000f343:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000f346:	80 fa 2e             	cmp    dl,0x2e
c000f349:	75 ec                	jne    c000f337 <sysCallOpen(regs*)+0x40>
c000f34b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000f34f:	83 ec 0c             	sub    esp,0xc
c000f352:	68 14 01 00 00       	push   0x114
c000f357:	e8 3e 31 00 00       	call   c001249a <operator new(unsigned long)>
c000f35c:	83 c4 0c             	add    esp,0xc
c000f35f:	89 c6                	mov    esi,eax
c000f361:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f366:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f369:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f36c:	56                   	push   esi
c000f36d:	e8 56 35 00 00       	call   c00128c8 <File::File(char const*, Process*)>
c000f372:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f375:	83 c4 10             	add    esp,0x10
c000f378:	0f b6 d0             	movzx  edx,al
c000f37b:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000f37e:	89 c2                	mov    edx,eax
c000f380:	83 e2 01             	and    edx,0x1
c000f383:	a8 02                	test   al,0x2
c000f385:	74 03                	je     c000f38a <sysCallOpen(regs*)+0x93>
c000f387:	83 ca 02             	or     edx,0x2
c000f38a:	a8 04                	test   al,0x4
c000f38c:	74 03                	je     c000f391 <sysCallOpen(regs*)+0x9a>
c000f38e:	83 ca 04             	or     edx,0x4
c000f391:	a8 08                	test   al,0x8
c000f393:	74 03                	je     c000f398 <sysCallOpen(regs*)+0xa1>
c000f395:	83 ca 0a             	or     edx,0xa
c000f398:	a8 10                	test   al,0x10
c000f39a:	74 03                	je     c000f39f <sysCallOpen(regs*)+0xa8>
c000f39c:	83 ca 12             	or     edx,0x12
c000f39f:	83 ec 08             	sub    esp,0x8
c000f3a2:	52                   	push   edx
c000f3a3:	56                   	push   esi
c000f3a4:	e8 83 35 00 00       	call   c001292c <File::open(FileOpenMode)>
c000f3a9:	83 c4 10             	add    esp,0x10
c000f3ac:	85 c0                	test   eax,eax
c000f3ae:	75 24                	jne    c000f3d4 <sysCallOpen(regs*)+0xdd>
c000f3b0:	83 ec 0c             	sub    esp,0xc
c000f3b3:	56                   	push   esi
c000f3b4:	e8 05 1d 00 00       	call   c00110be <UnixFile::getFileDescriptor()>
c000f3b9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f3bc:	83 c4 10             	add    esp,0x10
c000f3bf:	89 02                	mov    DWORD PTR [edx],eax
c000f3c1:	c1 f8 1f             	sar    eax,0x1f
c000f3c4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f3c7:	81 c4 04 01 00 00    	add    esp,0x104
c000f3cd:	31 c0                	xor    eax,eax
c000f3cf:	31 d2                	xor    edx,edx
c000f3d1:	5b                   	pop    ebx
c000f3d2:	5e                   	pop    esi
c000f3d3:	c3                   	ret    
c000f3d4:	81 c4 04 01 00 00    	add    esp,0x104
c000f3da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3df:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f3e4:	5b                   	pop    ebx
c000f3e5:	5e                   	pop    esi
c000f3e6:	c3                   	ret    

c000f3e7 <sysCallReadDir(regs*)>:
c000f3e7:	53                   	push   ebx
c000f3e8:	83 ec 18             	sub    esp,0x18
c000f3eb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3ef:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f3f2:	83 f8 02             	cmp    eax,0x2
c000f3f5:	77 0c                	ja     c000f403 <sysCallReadDir(regs*)+0x1c>
c000f3f7:	b8 01 00 00 00       	mov    eax,0x1
c000f3fc:	31 d2                	xor    edx,edx
c000f3fe:	83 c4 18             	add    esp,0x18
c000f401:	5b                   	pop    ebx
c000f402:	c3                   	ret    
c000f403:	83 ec 0c             	sub    esp,0xc
c000f406:	50                   	push   eax
c000f407:	e8 17 1e 00 00       	call   c0011223 <getFromFileDescriptor(int)>
c000f40c:	83 c4 10             	add    esp,0x10
c000f40f:	85 c0                	test   eax,eax
c000f411:	74 37                	je     c000f44a <sysCallReadDir(regs*)+0x63>
c000f413:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f41b:	83 ec 0c             	sub    esp,0xc
c000f41e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f420:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f424:	51                   	push   ecx
c000f425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f428:	6a 00                	push   0x0
c000f42a:	68 10 01 00 00       	push   0x110
c000f42f:	50                   	push   eax
c000f430:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f433:	83 c4 20             	add    esp,0x20
c000f436:	85 c0                	test   eax,eax
c000f438:	74 0c                	je     c000f446 <sysCallReadDir(regs*)+0x5f>
c000f43a:	83 f8 07             	cmp    eax,0x7
c000f43d:	74 b8                	je     c000f3f7 <sysCallReadDir(regs*)+0x10>
c000f43f:	b8 02 00 00 00       	mov    eax,0x2
c000f444:	eb b6                	jmp    c000f3fc <sysCallReadDir(regs*)+0x15>
c000f446:	31 c0                	xor    eax,eax
c000f448:	eb b2                	jmp    c000f3fc <sysCallReadDir(regs*)+0x15>
c000f44a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f44f:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f454:	eb a8                	jmp    c000f3fe <sysCallReadDir(regs*)+0x17>

c000f456 <sysCallIsATTY(regs*)>:
c000f456:	83 ec 0c             	sub    esp,0xc
c000f459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f45d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f460:	83 f8 02             	cmp    eax,0x2
c000f463:	77 26                	ja     c000f48b <sysCallIsATTY(regs*)+0x35>
c000f465:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f46a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f46d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f473:	85 c0                	test   eax,eax
c000f475:	74 24                	je     c000f49b <sysCallIsATTY(regs*)+0x45>
c000f477:	83 ec 0c             	sub    esp,0xc
c000f47a:	8b 10                	mov    edx,DWORD PTR [eax]
c000f47c:	50                   	push   eax
c000f47d:	ff 12                	call   DWORD PTR [edx]
c000f47f:	31 d2                	xor    edx,edx
c000f481:	0f b6 c0             	movzx  eax,al
c000f484:	83 c4 10             	add    esp,0x10
c000f487:	83 c4 0c             	add    esp,0xc
c000f48a:	c3                   	ret    
c000f48b:	83 ec 0c             	sub    esp,0xc
c000f48e:	50                   	push   eax
c000f48f:	e8 8f 1d 00 00       	call   c0011223 <getFromFileDescriptor(int)>
c000f494:	83 c4 10             	add    esp,0x10
c000f497:	85 c0                	test   eax,eax
c000f499:	75 dc                	jne    c000f477 <sysCallIsATTY(regs*)+0x21>
c000f49b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4a5:	83 c4 0c             	add    esp,0xc
c000f4a8:	c3                   	ret    

c000f4a9 <sysCallSeek(regs*)>:
c000f4a9:	53                   	push   ebx
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f4b1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f4b4:	83 f8 02             	cmp    eax,0x2
c000f4b7:	76 32                	jbe    c000f4eb <sysCallSeek(regs*)+0x42>
c000f4b9:	83 ec 0c             	sub    esp,0xc
c000f4bc:	50                   	push   eax
c000f4bd:	e8 61 1d 00 00       	call   c0011223 <getFromFileDescriptor(int)>
c000f4c2:	83 c4 0c             	add    esp,0xc
c000f4c5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f4c8:	31 db                	xor    ebx,ebx
c000f4ca:	53                   	push   ebx
c000f4cb:	51                   	push   ecx
c000f4cc:	50                   	push   eax
c000f4cd:	e8 18 35 00 00       	call   c00129ea <File::seek(unsigned long long)>
c000f4d2:	83 c4 10             	add    esp,0x10
c000f4d5:	85 c0                	test   eax,eax
c000f4d7:	0f 95 c0             	setne  al
c000f4da:	31 d2                	xor    edx,edx
c000f4dc:	0f b6 c0             	movzx  eax,al
c000f4df:	f7 d8                	neg    eax
c000f4e1:	83 d2 00             	adc    edx,0x0
c000f4e4:	83 c4 08             	add    esp,0x8
c000f4e7:	f7 da                	neg    edx
c000f4e9:	5b                   	pop    ebx
c000f4ea:	c3                   	ret    
c000f4eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4f5:	83 c4 08             	add    esp,0x8
c000f4f8:	5b                   	pop    ebx
c000f4f9:	c3                   	ret    

c000f4fa <sysCallTell(regs*)>:
c000f4fa:	53                   	push   ebx
c000f4fb:	83 ec 08             	sub    esp,0x8
c000f4fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f502:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f505:	83 f8 02             	cmp    eax,0x2
c000f508:	76 2d                	jbe    c000f537 <sysCallTell(regs*)+0x3d>
c000f50a:	83 ec 0c             	sub    esp,0xc
c000f50d:	50                   	push   eax
c000f50e:	e8 10 1d 00 00       	call   c0011223 <getFromFileDescriptor(int)>
c000f513:	5a                   	pop    edx
c000f514:	59                   	pop    ecx
c000f515:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f518:	50                   	push   eax
c000f519:	e8 22 35 00 00       	call   c0012a40 <File::tell(unsigned long long*)>
c000f51e:	83 c4 10             	add    esp,0x10
c000f521:	85 c0                	test   eax,eax
c000f523:	0f 95 c0             	setne  al
c000f526:	31 d2                	xor    edx,edx
c000f528:	0f b6 c0             	movzx  eax,al
c000f52b:	f7 d8                	neg    eax
c000f52d:	83 d2 00             	adc    edx,0x0
c000f530:	83 c4 08             	add    esp,0x8
c000f533:	f7 da                	neg    edx
c000f535:	5b                   	pop    ebx
c000f536:	c3                   	ret    
c000f537:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f53c:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f541:	83 c4 08             	add    esp,0x8
c000f544:	5b                   	pop    ebx
c000f545:	c3                   	ret    

c000f546 <sysCallSizeFromFilename(regs*)>:
c000f546:	57                   	push   edi
c000f547:	56                   	push   esi
c000f548:	53                   	push   ebx
c000f549:	83 ec 10             	sub    esp,0x10
c000f54c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f550:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f553:	83 ff 02             	cmp    edi,0x2
c000f556:	76 56                	jbe    c000f5ae <sysCallSizeFromFilename(regs*)+0x68>
c000f558:	83 ec 0c             	sub    esp,0xc
c000f55b:	68 14 01 00 00       	push   0x114
c000f560:	e8 35 2f 00 00       	call   c001249a <operator new(unsigned long)>
c000f565:	83 c4 0c             	add    esp,0xc
c000f568:	89 c3                	mov    ebx,eax
c000f56a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f56f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f572:	57                   	push   edi
c000f573:	53                   	push   ebx
c000f574:	e8 4f 33 00 00       	call   c00128c8 <File::File(char const*, Process*)>
c000f579:	83 c4 0c             	add    esp,0xc
c000f57c:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f580:	50                   	push   eax
c000f581:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f584:	53                   	push   ebx
c000f585:	e8 4e 36 00 00       	call   c0012bd8 <File::stat(unsigned long long*, bool*)>
c000f58a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f58d:	89 c6                	mov    esi,eax
c000f58f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f591:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f594:	83 c4 10             	add    esp,0x10
c000f597:	31 c0                	xor    eax,eax
c000f599:	85 f6                	test   esi,esi
c000f59b:	0f 95 c0             	setne  al
c000f59e:	31 d2                	xor    edx,edx
c000f5a0:	f7 d8                	neg    eax
c000f5a2:	83 d2 00             	adc    edx,0x0
c000f5a5:	83 c4 10             	add    esp,0x10
c000f5a8:	f7 da                	neg    edx
c000f5aa:	5b                   	pop    ebx
c000f5ab:	5e                   	pop    esi
c000f5ac:	5f                   	pop    edi
c000f5ad:	c3                   	ret    
c000f5ae:	83 c4 10             	add    esp,0x10
c000f5b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f5b6:	5b                   	pop    ebx
c000f5b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f5bc:	5e                   	pop    esi
c000f5bd:	5f                   	pop    edi
c000f5be:	c3                   	ret    

c000f5bf <sysCallSize(regs*)>:
c000f5bf:	53                   	push   ebx
c000f5c0:	83 ec 18             	sub    esp,0x18
c000f5c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f5ca:	83 f8 02             	cmp    eax,0x2
c000f5cd:	76 33                	jbe    c000f602 <sysCallSize(regs*)+0x43>
c000f5cf:	83 ec 0c             	sub    esp,0xc
c000f5d2:	50                   	push   eax
c000f5d3:	e8 4b 1c 00 00       	call   c0011223 <getFromFileDescriptor(int)>
c000f5d8:	83 c4 0c             	add    esp,0xc
c000f5db:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f5df:	52                   	push   edx
c000f5e0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f5e3:	50                   	push   eax
c000f5e4:	e8 ef 35 00 00       	call   c0012bd8 <File::stat(unsigned long long*, bool*)>
c000f5e9:	83 c4 10             	add    esp,0x10
c000f5ec:	85 c0                	test   eax,eax
c000f5ee:	0f 95 c0             	setne  al
c000f5f1:	31 d2                	xor    edx,edx
c000f5f3:	0f b6 c0             	movzx  eax,al
c000f5f6:	f7 d8                	neg    eax
c000f5f8:	83 d2 00             	adc    edx,0x0
c000f5fb:	83 c4 18             	add    esp,0x18
c000f5fe:	f7 da                	neg    edx
c000f600:	5b                   	pop    ebx
c000f601:	c3                   	ret    
c000f602:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f607:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f60c:	83 c4 18             	add    esp,0x18
c000f60f:	5b                   	pop    ebx
c000f610:	c3                   	ret    

c000f611 <sysCallClose(regs*)>:
c000f611:	53                   	push   ebx
c000f612:	83 ec 08             	sub    esp,0x8
c000f615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f619:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f61c:	83 f8 02             	cmp    eax,0x2
c000f61f:	76 2f                	jbe    c000f650 <sysCallClose(regs*)+0x3f>
c000f621:	83 ec 0c             	sub    esp,0xc
c000f624:	50                   	push   eax
c000f625:	e8 f9 1b 00 00       	call   c0011223 <getFromFileDescriptor(int)>
c000f62a:	89 c3                	mov    ebx,eax
c000f62c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f62f:	e8 56 33 00 00       	call   c001298a <File::close()>
c000f634:	83 c4 10             	add    esp,0x10
c000f637:	85 db                	test   ebx,ebx
c000f639:	74 0c                	je     c000f647 <sysCallClose(regs*)+0x36>
c000f63b:	83 ec 0c             	sub    esp,0xc
c000f63e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f640:	53                   	push   ebx
c000f641:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	31 c0                	xor    eax,eax
c000f649:	31 d2                	xor    edx,edx
c000f64b:	83 c4 08             	add    esp,0x8
c000f64e:	5b                   	pop    ebx
c000f64f:	c3                   	ret    
c000f650:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f655:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f65a:	83 c4 08             	add    esp,0x8
c000f65d:	5b                   	pop    ebx
c000f65e:	c3                   	ret    

c000f65f <sysCallOpenDir(regs*)>:
c000f65f:	56                   	push   esi
c000f660:	53                   	push   ebx
c000f661:	53                   	push   ebx
c000f662:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f666:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f669:	85 f6                	test   esi,esi
c000f66b:	74 51                	je     c000f6be <sysCallOpenDir(regs*)+0x5f>
c000f66d:	83 ec 0c             	sub    esp,0xc
c000f670:	68 14 01 00 00       	push   0x114
c000f675:	e8 20 2e 00 00       	call   c001249a <operator new(unsigned long)>
c000f67a:	83 c4 0c             	add    esp,0xc
c000f67d:	89 c6                	mov    esi,eax
c000f67f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f684:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f687:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f68a:	56                   	push   esi
c000f68b:	e8 fa 36 00 00       	call   c0012d8a <Directory::Directory(char const*, Process*)>
c000f690:	89 34 24             	mov    DWORD PTR [esp],esi
c000f693:	e8 56 37 00 00       	call   c0012dee <Directory::open()>
c000f698:	83 c4 10             	add    esp,0x10
c000f69b:	85 c0                	test   eax,eax
c000f69d:	75 1f                	jne    c000f6be <sysCallOpenDir(regs*)+0x5f>
c000f69f:	83 ec 0c             	sub    esp,0xc
c000f6a2:	56                   	push   esi
c000f6a3:	e8 16 1a 00 00       	call   c00110be <UnixFile::getFileDescriptor()>
c000f6a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f6ab:	83 c4 10             	add    esp,0x10
c000f6ae:	89 02                	mov    DWORD PTR [edx],eax
c000f6b0:	c1 f8 1f             	sar    eax,0x1f
c000f6b3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f6b6:	31 c0                	xor    eax,eax
c000f6b8:	59                   	pop    ecx
c000f6b9:	31 d2                	xor    edx,edx
c000f6bb:	5b                   	pop    ebx
c000f6bc:	5e                   	pop    esi
c000f6bd:	c3                   	ret    
c000f6be:	59                   	pop    ecx
c000f6bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f6c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f6c9:	5b                   	pop    ebx
c000f6ca:	5e                   	pop    esi
c000f6cb:	c3                   	ret    

c000f6cc <sysCallMakeDir(regs*)>:
c000f6cc:	56                   	push   esi
c000f6cd:	53                   	push   ebx
c000f6ce:	83 ec 10             	sub    esp,0x10
c000f6d1:	68 14 01 00 00       	push   0x114
c000f6d6:	e8 bf 2d 00 00       	call   c001249a <operator new(unsigned long)>
c000f6db:	83 c4 0c             	add    esp,0xc
c000f6de:	89 c3                	mov    ebx,eax
c000f6e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6e5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f6e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6ec:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f6ef:	53                   	push   ebx
c000f6f0:	e8 95 36 00 00       	call   c0012d8a <Directory::Directory(char const*, Process*)>
c000f6f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6f8:	e8 d1 38 00 00       	call   c0012fce <Directory::create()>
c000f6fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f700:	89 c6                	mov    esi,eax
c000f702:	e8 43 37 00 00       	call   c0012e4a <Directory::close()>
c000f707:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f709:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f70c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f70f:	31 c0                	xor    eax,eax
c000f711:	85 f6                	test   esi,esi
c000f713:	0f 95 c0             	setne  al
c000f716:	31 d2                	xor    edx,edx
c000f718:	f7 d8                	neg    eax
c000f71a:	83 d2 00             	adc    edx,0x0
c000f71d:	83 c4 14             	add    esp,0x14
c000f720:	f7 da                	neg    edx
c000f722:	5b                   	pop    ebx
c000f723:	5e                   	pop    esi
c000f724:	c3                   	ret    

c000f725 <sysCallCloseDir(regs*)>:
c000f725:	53                   	push   ebx
c000f726:	83 ec 08             	sub    esp,0x8
c000f729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f72d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f730:	83 f8 02             	cmp    eax,0x2
c000f733:	76 2f                	jbe    c000f764 <sysCallCloseDir(regs*)+0x3f>
c000f735:	83 ec 0c             	sub    esp,0xc
c000f738:	50                   	push   eax
c000f739:	e8 e5 1a 00 00       	call   c0011223 <getFromFileDescriptor(int)>
c000f73e:	89 c3                	mov    ebx,eax
c000f740:	89 04 24             	mov    DWORD PTR [esp],eax
c000f743:	e8 02 37 00 00       	call   c0012e4a <Directory::close()>
c000f748:	83 c4 10             	add    esp,0x10
c000f74b:	85 db                	test   ebx,ebx
c000f74d:	74 0c                	je     c000f75b <sysCallCloseDir(regs*)+0x36>
c000f74f:	83 ec 0c             	sub    esp,0xc
c000f752:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f754:	53                   	push   ebx
c000f755:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f758:	83 c4 10             	add    esp,0x10
c000f75b:	31 c0                	xor    eax,eax
c000f75d:	31 d2                	xor    edx,edx
c000f75f:	83 c4 08             	add    esp,0x8
c000f762:	5b                   	pop    ebx
c000f763:	c3                   	ret    
c000f764:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f769:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f76e:	83 c4 08             	add    esp,0x8
c000f771:	5b                   	pop    ebx
c000f772:	c3                   	ret    

c000f773 <sysCallWait(regs*)>:
c000f773:	83 ec 10             	sub    esp,0x10
c000f776:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f77a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f77d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f780:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f783:	e8 24 f2 ff ff       	call   c000e9ac <waitTask(int, int*, int)>
c000f788:	83 c4 1c             	add    esp,0x1c
c000f78b:	99                   	cdq    
c000f78c:	c3                   	ret    

c000f78d <sysCallFork(regs*)>:
c000f78d:	83 ec 18             	sub    esp,0x18
c000f790:	68 5b 93 03 c0       	push   0xc003935b
c000f795:	e8 50 d7 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000f79a:	58                   	pop    eax
c000f79b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f79f:	e8 d6 ef ff ff       	call   c000e77a <forkProcess(regs*)>
c000f7a4:	83 c4 1c             	add    esp,0x1c
c000f7a7:	99                   	cdq    
c000f7a8:	c3                   	ret    

c000f7a9 <sysCallExecve(regs*)>:
c000f7a9:	53                   	push   ebx
c000f7aa:	81 ec 24 01 00 00    	sub    esp,0x124
c000f7b0:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f7b7:	68 69 93 03 c0       	push   0xc0039369
c000f7bc:	e8 29 d7 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000f7c1:	83 c4 0c             	add    esp,0xc
c000f7c4:	68 00 01 00 00       	push   0x100
c000f7c9:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f7cd:	50                   	push   eax
c000f7ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7d3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f7d6:	e8 5e 34 00 00       	call   c0012c39 <getcwd(Process*, char*, int)>
c000f7db:	83 c4 0c             	add    esp,0xc
c000f7de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f7e1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f7e4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f7e7:	e8 f4 f2 ff ff       	call   c000eae0 <execveProcess(char const*, char* const*, char* const*)>
c000f7ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f7f6:	81 c4 28 01 00 00    	add    esp,0x128
c000f7fc:	5b                   	pop    ebx
c000f7fd:	c3                   	ret    

c000f7fe <sysCallRmdir(regs*)>:
c000f7fe:	56                   	push   esi
c000f7ff:	53                   	push   ebx
c000f800:	83 ec 10             	sub    esp,0x10
c000f803:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f807:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f80a:	68 14 01 00 00       	push   0x114
c000f80f:	e8 86 2c 00 00       	call   c001249a <operator new(unsigned long)>
c000f814:	83 c4 0c             	add    esp,0xc
c000f817:	89 c3                	mov    ebx,eax
c000f819:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f81e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f821:	56                   	push   esi
c000f822:	53                   	push   ebx
c000f823:	e8 a0 30 00 00       	call   c00128c8 <File::File(char const*, Process*)>
c000f828:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f82b:	e8 74 32 00 00       	call   c0012aa4 <File::unlink()>
c000f830:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f833:	89 c6                	mov    esi,eax
c000f835:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f837:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f83a:	31 c0                	xor    eax,eax
c000f83c:	85 f6                	test   esi,esi
c000f83e:	0f 95 c0             	setne  al
c000f841:	31 d2                	xor    edx,edx
c000f843:	f7 d8                	neg    eax
c000f845:	83 d2 00             	adc    edx,0x0
c000f848:	83 c4 14             	add    esp,0x14
c000f84b:	f7 da                	neg    edx
c000f84d:	5b                   	pop    ebx
c000f84e:	5e                   	pop    esi
c000f84f:	c3                   	ret    

c000f850 <sysCallUnlink(regs*)>:
c000f850:	56                   	push   esi
c000f851:	53                   	push   ebx
c000f852:	83 ec 10             	sub    esp,0x10
c000f855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f859:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f85c:	68 14 01 00 00       	push   0x114
c000f861:	e8 34 2c 00 00       	call   c001249a <operator new(unsigned long)>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	89 c3                	mov    ebx,eax
c000f86b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f870:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	e8 4e 30 00 00       	call   c00128c8 <File::File(char const*, Process*)>
c000f87a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f87d:	e8 22 32 00 00       	call   c0012aa4 <File::unlink()>
c000f882:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f885:	89 c6                	mov    esi,eax
c000f887:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f889:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f88c:	31 c0                	xor    eax,eax
c000f88e:	85 f6                	test   esi,esi
c000f890:	0f 95 c0             	setne  al
c000f893:	31 d2                	xor    edx,edx
c000f895:	f7 d8                	neg    eax
c000f897:	83 d2 00             	adc    edx,0x0
c000f89a:	83 c4 14             	add    esp,0x14
c000f89d:	f7 da                	neg    edx
c000f89f:	5b                   	pop    ebx
c000f8a0:	5e                   	pop    esi
c000f8a1:	c3                   	ret    

c000f8a2 <sysCallGetArgv(regs*)>:
c000f8a2:	83 ec 0c             	sub    esp,0xc
c000f8a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8a9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f8ac:	85 c0                	test   eax,eax
c000f8ae:	78 2b                	js     c000f8db <sysCallGetArgv(regs*)+0x39>
c000f8b0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f8b6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f8b9:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f8bf:	7d 1a                	jge    c000f8db <sysCallGetArgv(regs*)+0x39>
c000f8c1:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f8c8:	85 c0                	test   eax,eax
c000f8ca:	74 17                	je     c000f8e3 <sysCallGetArgv(regs*)+0x41>
c000f8cc:	83 ec 08             	sub    esp,0x8
c000f8cf:	50                   	push   eax
c000f8d0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f8d3:	e8 1c 0f ff ff       	call   c00007f4 <strcpy>
c000f8d8:	83 c4 10             	add    esp,0x10
c000f8db:	31 c0                	xor    eax,eax
c000f8dd:	31 d2                	xor    edx,edx
c000f8df:	83 c4 0c             	add    esp,0xc
c000f8e2:	c3                   	ret    
c000f8e3:	b8 01 00 00 00       	mov    eax,0x1
c000f8e8:	31 d2                	xor    edx,edx
c000f8ea:	83 c4 0c             	add    esp,0xc
c000f8ed:	c3                   	ret    

c000f8ee <sysCallTTYName(regs*)>:
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	53                   	push   ebx
c000f8f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f8f5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f8f8:	85 c0                	test   eax,eax
c000f8fa:	74 58                	je     c000f954 <sysCallTTYName(regs*)+0x66>
c000f8fc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f8ff:	83 f8 02             	cmp    eax,0x2
c000f902:	77 3e                	ja     c000f942 <sysCallTTYName(regs*)+0x54>
c000f904:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f909:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f90c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f912:	85 db                	test   ebx,ebx
c000f914:	74 3e                	je     c000f954 <sysCallTTYName(regs*)+0x66>
c000f916:	83 ec 0c             	sub    esp,0xc
c000f919:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f91b:	53                   	push   ebx
c000f91c:	ff 10                	call   DWORD PTR [eax]
c000f91e:	83 c4 10             	add    esp,0x10
c000f921:	84 c0                	test   al,al
c000f923:	74 3a                	je     c000f95f <sysCallTTYName(regs*)+0x71>
c000f925:	83 ec 08             	sub    esp,0x8
c000f928:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f92e:	53                   	push   ebx
c000f92f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f932:	e8 bd 0e ff ff       	call   c00007f4 <strcpy>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	31 c0                	xor    eax,eax
c000f93c:	59                   	pop    ecx
c000f93d:	31 d2                	xor    edx,edx
c000f93f:	5b                   	pop    ebx
c000f940:	5e                   	pop    esi
c000f941:	c3                   	ret    
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	50                   	push   eax
c000f946:	e8 d8 18 00 00       	call   c0011223 <getFromFileDescriptor(int)>
c000f94b:	83 c4 10             	add    esp,0x10
c000f94e:	89 c3                	mov    ebx,eax
c000f950:	85 db                	test   ebx,ebx
c000f952:	75 c2                	jne    c000f916 <sysCallTTYName(regs*)+0x28>
c000f954:	59                   	pop    ecx
c000f955:	b8 01 00 00 00       	mov    eax,0x1
c000f95a:	31 d2                	xor    edx,edx
c000f95c:	5b                   	pop    ebx
c000f95d:	5e                   	pop    esi
c000f95e:	c3                   	ret    
c000f95f:	59                   	pop    ecx
c000f960:	b8 02 00 00 00       	mov    eax,0x2
c000f965:	31 d2                	xor    edx,edx
c000f967:	5b                   	pop    ebx
c000f968:	5e                   	pop    esi
c000f969:	c3                   	ret    

c000f96a <sysCallGetEnv(regs*)>:
c000f96a:	83 ec 0c             	sub    esp,0xc
c000f96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f971:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f974:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f977:	85 c9                	test   ecx,ecx
c000f979:	75 0c                	jne    c000f987 <sysCallGetEnv(regs*)+0x1d>
c000f97b:	85 d2                	test   edx,edx
c000f97d:	74 14                	je     c000f993 <sysCallGetEnv(regs*)+0x29>
c000f97f:	31 c0                	xor    eax,eax
c000f981:	31 d2                	xor    edx,edx
c000f983:	83 c4 0c             	add    esp,0xc
c000f986:	c3                   	ret    
c000f987:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f98a:	85 d2                	test   edx,edx
c000f98c:	74 1b                	je     c000f9a9 <sysCallGetEnv(regs*)+0x3f>
c000f98e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f991:	eb ec                	jmp    c000f97f <sysCallGetEnv(regs*)+0x15>
c000f993:	83 ec 0c             	sub    esp,0xc
c000f996:	68 b4 93 03 c0       	push   0xc00393b4
c000f99b:	e8 61 0d ff ff       	call   c0000701 <strlen>
c000f9a0:	83 c4 10             	add    esp,0x10
c000f9a3:	31 d2                	xor    edx,edx
c000f9a5:	83 c4 0c             	add    esp,0xc
c000f9a8:	c3                   	ret    
c000f9a9:	83 ec 08             	sub    esp,0x8
c000f9ac:	68 b4 93 03 c0       	push   0xc00393b4
c000f9b1:	50                   	push   eax
c000f9b2:	e8 3d 0e ff ff       	call   c00007f4 <strcpy>
c000f9b7:	83 c4 10             	add    esp,0x10
c000f9ba:	eb c3                	jmp    c000f97f <sysCallGetEnv(regs*)+0x15>

c000f9bc <sysCallUSleep(regs*)>:
c000f9bc:	83 ec 14             	sub    esp,0x14
c000f9bf:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f9c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9c8:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f9cf:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f9d2:	01 ca                	add    edx,ecx
c000f9d4:	52                   	push   edx
c000f9d5:	50                   	push   eax
c000f9d6:	e8 6a f0 ff ff       	call   c000ea45 <nanoSleep(unsigned long long)>
c000f9db:	31 c0                	xor    eax,eax
c000f9dd:	31 d2                	xor    edx,edx
c000f9df:	83 c4 1c             	add    esp,0x1c
c000f9e2:	c3                   	ret    

c000f9e3 <sysCallSpawn(regs*)>:
c000f9e3:	56                   	push   esi
c000f9e4:	53                   	push   ebx
c000f9e5:	53                   	push   ebx
c000f9e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9ea:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000f9ed:	85 f6                	test   esi,esi
c000f9ef:	75 08                	jne    c000f9f9 <sysCallSpawn(regs*)+0x16>
c000f9f1:	59                   	pop    ecx
c000f9f2:	31 c0                	xor    eax,eax
c000f9f4:	31 d2                	xor    edx,edx
c000f9f6:	5b                   	pop    ebx
c000f9f7:	5e                   	pop    esi
c000f9f8:	c3                   	ret    
c000f9f9:	83 ec 0c             	sub    esp,0xc
c000f9fc:	68 79 93 03 c0       	push   0xc0039379
c000fa01:	e8 e4 d4 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000fa06:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000fa0d:	e8 88 2a 00 00       	call   c001249a <operator new(unsigned long)>
c000fa12:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000fa15:	89 c6                	mov    esi,eax
c000fa17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa1c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000fa1f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000fa22:	56                   	push   esi
c000fa23:	e8 0c e6 ff ff       	call   c000e034 <Process::Process(char const*, Process*, char**)>
c000fa28:	83 c4 20             	add    esp,0x20
c000fa2b:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000fa32:	75 bd                	jne    c000f9f1 <sysCallSpawn(regs*)+0xe>
c000fa34:	83 ec 0c             	sub    esp,0xc
c000fa37:	68 84 93 03 c0       	push   0xc0039384
c000fa3c:	e8 a9 d4 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000fa41:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa44:	e8 51 eb ff ff       	call   c000e59a <Process::createUserThread()>
c000fa49:	8b 06                	mov    eax,DWORD PTR [esi]
c000fa4b:	83 c4 10             	add    esp,0x10
c000fa4e:	99                   	cdq    
c000fa4f:	59                   	pop    ecx
c000fa50:	5b                   	pop    ebx
c000fa51:	5e                   	pop    esi
c000fa52:	c3                   	ret    

c000fa53 <sysAppSettings(regs*)>:
c000fa53:	53                   	push   ebx
c000fa54:	83 ec 08             	sub    esp,0x8
c000fa57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa5b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000fa5e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000fa64:	25 e0 1f 00 00       	and    eax,0x1fe0
c000fa69:	66 3d c0 09          	cmp    ax,0x9c0
c000fa6d:	75 2f                	jne    c000fa9e <sysAppSettings(regs*)+0x4b>
c000fa6f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000fa75:	83 e0 1f             	and    eax,0x1f
c000fa78:	3c 01                	cmp    al,0x1
c000fa7a:	74 2e                	je     c000faaa <sysAppSettings(regs*)+0x57>
c000fa7c:	3c 07                	cmp    al,0x7
c000fa7e:	0f 84 bd 00 00 00    	je     c000fb41 <sysAppSettings(regs*)+0xee>
c000fa84:	84 c0                	test   al,al
c000fa86:	0f 84 dc 00 00 00    	je     c000fb68 <sysAppSettings(regs*)+0x115>
c000fa8c:	3c 08                	cmp    al,0x8
c000fa8e:	74 6d                	je     c000fafd <sysAppSettings(regs*)+0xaa>
c000fa90:	0f b6 c0             	movzx  eax,al
c000fa93:	83 c4 08             	add    esp,0x8
c000fa96:	05 e8 03 00 00       	add    eax,0x3e8
c000fa9b:	5b                   	pop    ebx
c000fa9c:	99                   	cdq    
c000fa9d:	c3                   	ret    
c000fa9e:	b8 01 00 00 00       	mov    eax,0x1
c000faa3:	31 d2                	xor    edx,edx
c000faa5:	83 c4 08             	add    esp,0x8
c000faa8:	5b                   	pop    ebx
c000faa9:	c3                   	ret    
c000faaa:	51                   	push   ecx
c000faab:	68 00 01 00 00       	push   0x100
c000fab0:	6a 00                	push   0x0
c000fab2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fab7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000faba:	83 c0 0c             	add    eax,0xc
c000fabd:	50                   	push   eax
c000fabe:	e8 15 0c ff ff       	call   c00006d8 <memset>
c000fac3:	83 c4 0c             	add    esp,0xc
c000fac6:	68 ff 00 00 00       	push   0xff
c000facb:	53                   	push   ebx
c000facc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fad1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fad4:	83 c0 0c             	add    eax,0xc
c000fad7:	50                   	push   eax
c000fad8:	e8 84 0b ff ff       	call   c0000661 <memcpy>
c000fadd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fae2:	5b                   	pop    ebx
c000fae3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fae6:	5a                   	pop    edx
c000fae7:	8d 50 0c             	lea    edx,[eax+0xc]
c000faea:	52                   	push   edx
c000faeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000faf1:	e8 ee 09 00 00       	call   c00104e4 <VgaText::setTitle(char*)>
c000faf6:	83 c4 10             	add    esp,0x10
c000faf9:	31 c0                	xor    eax,eax
c000fafb:	eb a6                	jmp    c000faa3 <sysAppSettings(regs*)+0x50>
c000fafd:	83 ec 08             	sub    esp,0x8
c000fb00:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fb06:	83 e0 0f             	and    eax,0xf
c000fb09:	50                   	push   eax
c000fb0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fb12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fb18:	e8 b7 09 00 00       	call   c00104d4 <VgaText::setTitleColour(VgaColour)>
c000fb1d:	58                   	pop    eax
c000fb1e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fb24:	5a                   	pop    edx
c000fb25:	c1 e8 04             	shr    eax,0x4
c000fb28:	83 e0 0f             	and    eax,0xf
c000fb2b:	50                   	push   eax
c000fb2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fb34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fb3a:	e8 85 09 00 00       	call   c00104c4 <VgaText::setTitleTextColour(VgaColour)>
c000fb3f:	eb b5                	jmp    c000faf6 <sysAppSettings(regs*)+0xa3>
c000fb41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fb49:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000fb4f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000fb55:	c0 e8 06             	shr    al,0x6
c000fb58:	83 e0 01             	and    eax,0x1
c000fb5b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000fb61:	31 c0                	xor    eax,eax
c000fb63:	e9 3b ff ff ff       	jmp    c000faa3 <sysAppSettings(regs*)+0x50>
c000fb68:	b8 02 00 00 00       	mov    eax,0x2
c000fb6d:	e9 31 ff ff ff       	jmp    c000faa3 <sysAppSettings(regs*)+0x50>

c000fb72 <sysSetFatAttrib(regs*)>:
c000fb72:	57                   	push   edi
c000fb73:	56                   	push   esi
c000fb74:	53                   	push   ebx
c000fb75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb79:	83 ec 0c             	sub    esp,0xc
c000fb7c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000fb7f:	68 14 01 00 00       	push   0x114
c000fb84:	e8 11 29 00 00       	call   c001249a <operator new(unsigned long)>
c000fb89:	83 c4 0c             	add    esp,0xc
c000fb8c:	89 c3                	mov    ebx,eax
c000fb8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb93:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000fb96:	57                   	push   edi
c000fb97:	53                   	push   ebx
c000fb98:	e8 2b 2d 00 00       	call   c00128c8 <File::File(char const*, Process*)>
c000fb9d:	83 c4 0c             	add    esp,0xc
c000fba0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000fba3:	0f b6 d4             	movzx  edx,ah
c000fba6:	0f b6 c0             	movzx  eax,al
c000fba9:	52                   	push   edx
c000fbaa:	50                   	push   eax
c000fbab:	53                   	push   ebx
c000fbac:	e8 8d 2f 00 00       	call   c0012b3e <File::chfatattr(unsigned char, unsigned char)>
c000fbb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb4:	89 c6                	mov    esi,eax
c000fbb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fbb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fbbb:	83 c4 10             	add    esp,0x10
c000fbbe:	31 c0                	xor    eax,eax
c000fbc0:	5b                   	pop    ebx
c000fbc1:	85 f6                	test   esi,esi
c000fbc3:	5e                   	pop    esi
c000fbc4:	0f 95 c0             	setne  al
c000fbc7:	5f                   	pop    edi
c000fbc8:	31 d2                	xor    edx,edx
c000fbca:	f7 d8                	neg    eax
c000fbcc:	83 d2 00             	adc    edx,0x0
c000fbcf:	f7 da                	neg    edx
c000fbd1:	c3                   	ret    

c000fbd2 <sysPanic(regs*)>:
c000fbd2:	83 ec 18             	sub    esp,0x18
c000fbd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbd9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000fbdc:	e8 27 d4 ff ff       	call   c000d008 <panic(char const*)>
c000fbe1:	c7 04 24 91 93 03 c0 	mov    DWORD PTR [esp],0xc0039391
c000fbe8:	e8 1b d4 ff ff       	call   c000d008 <panic(char const*)>
c000fbed:	b8 01 00 00 00       	mov    eax,0x1
c000fbf2:	31 d2                	xor    edx,edx
c000fbf4:	83 c4 1c             	add    esp,0x1c
c000fbf7:	c3                   	ret    

c000fbf8 <sysPipe(regs*)>:
c000fbf8:	57                   	push   edi
c000fbf9:	56                   	push   esi
c000fbfa:	53                   	push   ebx
c000fbfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbff:	83 ec 0c             	sub    esp,0xc
c000fc02:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000fc05:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000fc08:	6a 20                	push   0x20
c000fc0a:	e8 8b 28 00 00       	call   c001249a <operator new(unsigned long)>
c000fc0f:	89 c3                	mov    ebx,eax
c000fc11:	58                   	pop    eax
c000fc12:	5a                   	pop    edx
c000fc13:	68 00 50 00 00       	push   0x5000
c000fc18:	53                   	push   ebx
c000fc19:	e8 26 e3 ff ff       	call   c000df44 <Pipe::Pipe(int)>
c000fc1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc21:	e8 98 14 00 00       	call   c00110be <UnixFile::getFileDescriptor()>
c000fc26:	89 07                	mov    DWORD PTR [edi],eax
c000fc28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc2b:	e8 8e 14 00 00       	call   c00110be <UnixFile::getFileDescriptor()>
c000fc30:	83 c4 10             	add    esp,0x10
c000fc33:	89 06                	mov    DWORD PTR [esi],eax
c000fc35:	31 d2                	xor    edx,edx
c000fc37:	5b                   	pop    ebx
c000fc38:	31 c0                	xor    eax,eax
c000fc3a:	5e                   	pop    esi
c000fc3b:	5f                   	pop    edi
c000fc3c:	c3                   	ret    

c000fc3d <sysGetUnixTime(regs*)>:
c000fc3d:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c000fc42:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fc48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fc4c:	e9 3f 36 00 00       	jmp    c0013290 <Clock::timeInSecondsLocal()>

c000fc51 <string_ends_with(char const*, char const*)>:
c000fc51:	57                   	push   edi
c000fc52:	56                   	push   esi
c000fc53:	53                   	push   ebx
c000fc54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc58:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc5c:	83 ec 0c             	sub    esp,0xc
c000fc5f:	53                   	push   ebx
c000fc60:	e8 9c 0a ff ff       	call   c0000701 <strlen>
c000fc65:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc68:	89 c6                	mov    esi,eax
c000fc6a:	e8 92 0a ff ff       	call   c0000701 <strlen>
c000fc6f:	83 c4 10             	add    esp,0x10
c000fc72:	39 c6                	cmp    esi,eax
c000fc74:	7d 06                	jge    c000fc7c <string_ends_with(char const*, char const*)+0x2b>
c000fc76:	5b                   	pop    ebx
c000fc77:	31 c0                	xor    eax,eax
c000fc79:	5e                   	pop    esi
c000fc7a:	5f                   	pop    edi
c000fc7b:	c3                   	ret    
c000fc7c:	83 ec 08             	sub    esp,0x8
c000fc7f:	29 c6                	sub    esi,eax
c000fc81:	57                   	push   edi
c000fc82:	01 f3                	add    ebx,esi
c000fc84:	53                   	push   ebx
c000fc85:	e8 f0 0b ff ff       	call   c000087a <strcmp>
c000fc8a:	83 c4 10             	add    esp,0x10
c000fc8d:	85 c0                	test   eax,eax
c000fc8f:	5b                   	pop    ebx
c000fc90:	0f 94 c0             	sete   al
c000fc93:	5e                   	pop    esi
c000fc94:	0f b6 c0             	movzx  eax,al
c000fc97:	5f                   	pop    edi
c000fc98:	c3                   	ret    

c000fc99 <setupSystemCalls()>:
c000fc99:	c7 05 20 bd 03 c0 16 85 01 c0 	mov    DWORD PTR ds:0xc003bd20,0xc0018516
c000fca3:	c7 05 24 bd 03 c0 d9 83 01 c0 	mov    DWORD PTR ds:0xc003bd24,0xc00183d9
c000fcad:	c7 05 28 bd 03 c0 59 84 01 c0 	mov    DWORD PTR ds:0xc003bd28,0xc0018459
c000fcb7:	c7 05 2c bd 03 c0 ae 84 01 c0 	mov    DWORD PTR ds:0xc003bd2c,0xc00184ae
c000fcc1:	c7 05 30 bd 03 c0 f1 83 01 c0 	mov    DWORD PTR ds:0xc003bd30,0xc00183f1
c000fccb:	c7 05 34 bd 03 c0 00 f1 00 c0 	mov    DWORD PTR ds:0xc003bd34,0xc000f100
c000fcd5:	c7 05 38 bd 03 c0 79 f2 00 c0 	mov    DWORD PTR ds:0xc003bd38,0xc000f279
c000fcdf:	c7 05 3c bd 03 c0 98 f2 00 c0 	mov    DWORD PTR ds:0xc003bd3c,0xc000f298
c000fce9:	c7 05 44 bd 03 c0 11 f6 00 c0 	mov    DWORD PTR ds:0xc003bd44,0xc000f611
c000fcf3:	c7 05 40 bd 03 c0 f7 f2 00 c0 	mov    DWORD PTR ds:0xc003bd40,0xc000f2f7
c000fcfd:	c7 05 48 bd 03 c0 5f f6 00 c0 	mov    DWORD PTR ds:0xc003bd48,0xc000f65f
c000fd07:	c7 05 4c bd 03 c0 e7 f3 00 c0 	mov    DWORD PTR ds:0xc003bd4c,0xc000f3e7
c000fd11:	c7 05 50 bd 03 c0 0c f1 00 c0 	mov    DWORD PTR ds:0xc003bd50,0xc000f10c
c000fd1b:	c7 05 54 bd 03 c0 11 f1 00 c0 	mov    DWORD PTR ds:0xc003bd54,0xc000f111
c000fd25:	c7 05 58 bd 03 c0 cc f6 00 c0 	mov    DWORD PTR ds:0xc003bd58,0xc000f6cc
c000fd2f:	c7 05 5c bd 03 c0 25 f7 00 c0 	mov    DWORD PTR ds:0xc003bd5c,0xc000f725
c000fd39:	c7 05 60 bd 03 c0 a9 f4 00 c0 	mov    DWORD PTR ds:0xc003bd60,0xc000f4a9
c000fd43:	c7 05 64 bd 03 c0 fa f4 00 c0 	mov    DWORD PTR ds:0xc003bd64,0xc000f4fa
c000fd4d:	c7 05 68 bd 03 c0 bf f5 00 c0 	mov    DWORD PTR ds:0xc003bd68,0xc000f5bf
c000fd57:	c7 05 6c bd 03 c0 16 f1 00 c0 	mov    DWORD PTR ds:0xc003bd6c,0xc000f116
c000fd61:	c7 05 70 bd 03 c0 73 f7 00 c0 	mov    DWORD PTR ds:0xc003bd70,0xc000f773
c000fd6b:	c7 05 74 bd 03 c0 8d f7 00 c0 	mov    DWORD PTR ds:0xc003bd74,0xc000f78d
c000fd75:	c7 05 78 bd 03 c0 a9 f7 00 c0 	mov    DWORD PTR ds:0xc003bd78,0xc000f7a9
c000fd7f:	c7 05 7c bd 03 c0 fe f7 00 c0 	mov    DWORD PTR ds:0xc003bd7c,0xc000f7fe
c000fd89:	c7 05 80 bd 03 c0 50 f8 00 c0 	mov    DWORD PTR ds:0xc003bd80,0xc000f850
c000fd93:	c7 05 84 bd 03 c0 20 f1 00 c0 	mov    DWORD PTR ds:0xc003bd84,0xc000f120
c000fd9d:	c7 05 88 bd 03 c0 a2 f8 00 c0 	mov    DWORD PTR ds:0xc003bd88,0xc000f8a2
c000fda7:	c7 05 8c bd 03 c0 b4 f2 00 c0 	mov    DWORD PTR ds:0xc003bd8c,0xc000f2b4
c000fdb1:	c7 05 90 bd 03 c0 ee f8 00 c0 	mov    DWORD PTR ds:0xc003bd90,0xc000f8ee
c000fdbb:	c7 05 94 bd 03 c0 56 f4 00 c0 	mov    DWORD PTR ds:0xc003bd94,0xc000f456
c000fdc5:	c7 05 98 bd 03 c0 bc f9 00 c0 	mov    DWORD PTR ds:0xc003bd98,0xc000f9bc
c000fdcf:	c7 05 9c bd 03 c0 46 f5 00 c0 	mov    DWORD PTR ds:0xc003bd9c,0xc000f546
c000fdd9:	c7 05 a0 bd 03 c0 e3 f9 00 c0 	mov    DWORD PTR ds:0xc003bda0,0xc000f9e3
c000fde3:	c7 05 a4 bd 03 c0 6a f9 00 c0 	mov    DWORD PTR ds:0xc003bda4,0xc000f96a
c000fded:	c7 05 a8 bd 03 c0 53 fa 00 c0 	mov    DWORD PTR ds:0xc003bda8,0xc000fa53
c000fdf7:	c7 05 ac bd 03 c0 30 f1 00 c0 	mov    DWORD PTR ds:0xc003bdac,0xc000f130
c000fe01:	c7 05 b0 bd 03 c0 9a f1 00 c0 	mov    DWORD PTR ds:0xc003bdb0,0xc000f19a
c000fe0b:	c7 05 b4 bd 03 c0 e0 f1 00 c0 	mov    DWORD PTR ds:0xc003bdb4,0xc000f1e0
c000fe15:	c7 05 b8 bd 03 c0 72 fb 00 c0 	mov    DWORD PTR ds:0xc003bdb8,0xc000fb72
c000fe1f:	c7 05 bc bd 03 c0 d2 fb 00 c0 	mov    DWORD PTR ds:0xc003bdbc,0xc000fbd2
c000fe29:	c7 05 c0 bd 03 c0 31 f2 00 c0 	mov    DWORD PTR ds:0xc003bdc0,0xc000f231
c000fe33:	c7 05 c4 bd 03 c0 f8 fb 00 c0 	mov    DWORD PTR ds:0xc003bdc4,0xc000fbf8
c000fe3d:	c7 05 c8 bd 03 c0 3d fc 00 c0 	mov    DWORD PTR ds:0xc003bdc8,0xc000fc3d
c000fe47:	c3                   	ret    

c000fe48 <systemCall(regs*, void*)>:
c000fe48:	53                   	push   ebx
c000fe49:	83 ec 08             	sub    esp,0x8
c000fe4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe50:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fe53:	83 f8 7f             	cmp    eax,0x7f
c000fe56:	77 16                	ja     c000fe6e <systemCall(regs*, void*)+0x26>
c000fe58:	8b 14 85 20 bd 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc42e0]
c000fe5f:	85 d2                	test   edx,edx
c000fe61:	74 0b                	je     c000fe6e <systemCall(regs*, void*)+0x26>
c000fe63:	83 ec 0c             	sub    esp,0xc
c000fe66:	53                   	push   ebx
c000fe67:	ff d2                	call   edx
c000fe69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fe6c:	eb 0d                	jmp    c000fe7b <systemCall(regs*, void*)+0x33>
c000fe6e:	52                   	push   edx
c000fe6f:	52                   	push   edx
c000fe70:	50                   	push   eax
c000fe71:	68 a0 93 03 c0       	push   0xc00393a0
c000fe76:	e8 6f d0 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c000fe7b:	83 c4 10             	add    esp,0x10
c000fe7e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fe83:	31 d2                	xor    edx,edx
c000fe85:	83 c4 08             	add    esp,0x8
c000fe88:	5b                   	pop    ebx
c000fe89:	c3                   	ret    

c000fe8a <VgaText::isAtty()>:
c000fe8a:	b0 01                	mov    al,0x1
c000fe8c:	c3                   	ret    
c000fe8d:	90                   	nop

c000fe8e <VgaText::~VgaText()>:
c000fe8e:	83 ec 0c             	sub    esp,0xc
c000fe91:	ba a8 94 03 c0       	mov    edx,0xc00394a8
c000fe96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe9a:	89 10                	mov    DWORD PTR [eax],edx
c000fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea0:	83 ec 0c             	sub    esp,0xc
c000fea3:	50                   	push   eax
c000fea4:	e8 81 12 00 00       	call   c001112a <UnixFile::~UnixFile()>
c000fea9:	83 c4 10             	add    esp,0x10
c000feac:	90                   	nop
c000fead:	83 c4 0c             	add    esp,0xc
c000feb0:	c3                   	ret    
c000feb1:	90                   	nop

c000feb2 <VgaText::~VgaText()>:
c000feb2:	83 ec 0c             	sub    esp,0xc
c000feb5:	83 ec 0c             	sub    esp,0xc
c000feb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000febc:	e8 cd ff ff ff       	call   c000fe8e <VgaText::~VgaText()>
c000fec1:	83 c4 10             	add    esp,0x10
c000fec4:	83 ec 08             	sub    esp,0x8
c000fec7:	68 60 12 00 00       	push   0x1260
c000fecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fed0:	e8 d4 25 00 00       	call   c00124a9 <operator delete(void*, unsigned long)>
c000fed5:	83 c4 10             	add    esp,0x10
c000fed8:	83 c4 0c             	add    esp,0xc
c000fedb:	c3                   	ret    

c000fedc <VgaText::read(unsigned long long, void*, int*)>:
c000fedc:	83 ec 10             	sub    esp,0x10
c000fedf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fee3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feeb:	e8 34 4f 00 00       	call   c0014e24 <readKeyboard(VgaText*, char*, unsigned long)>
c000fef0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fef4:	89 02                	mov    DWORD PTR [edx],eax
c000fef6:	31 c0                	xor    eax,eax
c000fef8:	83 c4 1c             	add    esp,0x1c
c000fefb:	c3                   	ret    

c000fefc <setTerminalScrollLock(bool)>:
c000fefc:	c3                   	ret    

c000fefd <addToTerminalCycle(VgaText*)>:
c000fefd:	8b 15 40 bf 03 c0    	mov    edx,DWORD PTR ds:0xc003bf40
c000ff03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff07:	85 d2                	test   edx,edx
c000ff09:	75 0c                	jne    c000ff17 <addToTerminalCycle(VgaText*)+0x1a>
c000ff0b:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000ff11:	a3 40 bf 03 c0       	mov    ds:0xc003bf40,eax
c000ff16:	c3                   	ret    
c000ff17:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000ff1d:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000ff23:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000ff29:	c3                   	ret    

c000ff2a <installVgaTextImplementation()>:
c000ff2a:	83 ec 10             	sub    esp,0x10
c000ff2d:	6a 20                	push   0x20
c000ff2f:	6a 00                	push   0x0
c000ff31:	68 20 bf 03 c0       	push   0xc003bf20
c000ff36:	e8 9d 07 ff ff       	call   c00006d8 <memset>
c000ff3b:	83 c4 1c             	add    esp,0x1c
c000ff3e:	c3                   	ret    

c000ff3f <scrollTerminalScrollLock(int)>:
c000ff3f:	c3                   	ret    

c000ff40 <VgaText::load()>:
c000ff40:	53                   	push   ebx
c000ff41:	31 c0                	xor    eax,eax
c000ff43:	83 ec 58             	sub    esp,0x58
c000ff46:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ff4a:	89 e2                	mov    edx,esp
c000ff4c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ff50:	40                   	inc    eax
c000ff51:	83 f8 50             	cmp    eax,0x50
c000ff54:	75 f6                	jne    c000ff4c <VgaText::load()+0xc>
c000ff56:	31 c0                	xor    eax,eax
c000ff58:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000ff5f:	84 c9                	test   cl,cl
c000ff61:	74 06                	je     c000ff69 <VgaText::load()+0x29>
c000ff63:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ff66:	40                   	inc    eax
c000ff67:	eb ef                	jmp    c000ff58 <VgaText::load()+0x18>
c000ff69:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000ff6f:	85 c0                	test   eax,eax
c000ff71:	74 09                	je     c000ff7c <VgaText::load()+0x3c>
c000ff73:	51                   	push   ecx
c000ff74:	51                   	push   ecx
c000ff75:	52                   	push   edx
c000ff76:	53                   	push   ebx
c000ff77:	ff d0                	call   eax
c000ff79:	83 c4 10             	add    esp,0x10
c000ff7c:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000ff82:	85 c0                	test   eax,eax
c000ff84:	74 09                	je     c000ff8f <VgaText::load()+0x4f>
c000ff86:	83 ec 0c             	sub    esp,0xc
c000ff89:	53                   	push   ebx
c000ff8a:	ff d0                	call   eax
c000ff8c:	83 c4 10             	add    esp,0x10
c000ff8f:	83 c4 58             	add    esp,0x58
c000ff92:	5b                   	pop    ebx
c000ff93:	c3                   	ret    

c000ff94 <VgaText::updateCursor()>:
c000ff94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff98:	39 05 44 bf 03 c0    	cmp    DWORD PTR ds:0xc003bf44,eax
c000ff9e:	75 0c                	jne    c000ffac <VgaText::updateCursor()+0x18>
c000ffa0:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000ffa6:	85 c0                	test   eax,eax
c000ffa8:	74 02                	je     c000ffac <VgaText::updateCursor()+0x18>
c000ffaa:	ff e0                	jmp    eax
c000ffac:	c3                   	ret    
c000ffad:	90                   	nop

c000ffae <VgaText::showCursor(bool)>:
c000ffae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffb6:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000ffbc:	c3                   	ret    
c000ffbd:	90                   	nop

c000ffbe <VgaText::disableBlink(bool)>:
c000ffbe:	56                   	push   esi
c000ffbf:	53                   	push   ebx
c000ffc0:	51                   	push   ecx
c000ffc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffc5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ffc9:	39 1d 44 bf 03 c0    	cmp    DWORD PTR ds:0xc003bf44,ebx
c000ffcf:	75 18                	jne    c000ffe9 <VgaText::disableBlink(bool)+0x2b>
c000ffd1:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ffd7:	85 c0                	test   eax,eax
c000ffd9:	74 0e                	je     c000ffe9 <VgaText::disableBlink(bool)+0x2b>
c000ffdb:	89 f1                	mov    ecx,esi
c000ffdd:	52                   	push   edx
c000ffde:	52                   	push   edx
c000ffdf:	0f b6 d1             	movzx  edx,cl
c000ffe2:	52                   	push   edx
c000ffe3:	53                   	push   ebx
c000ffe4:	ff d0                	call   eax
c000ffe6:	83 c4 10             	add    esp,0x10
c000ffe9:	89 f0                	mov    eax,esi
c000ffeb:	83 f0 01             	xor    eax,0x1
c000ffee:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fff4:	58                   	pop    eax
c000fff5:	5b                   	pop    ebx
c000fff6:	5e                   	pop    esi
c000fff7:	c3                   	ret    

c000fff8 <VgaText::doANSI_SGR(int)>:
c000fff8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010000:	85 d2                	test   edx,edx
c0010002:	75 14                	jne    c0010018 <VgaText::doANSI_SGR(int)+0x20>
c0010004:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001000a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010010:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010016:	eb 65                	jmp    c001007d <VgaText::doANSI_SGR(int)+0x85>
c0010018:	83 fa 07             	cmp    edx,0x7
c001001b:	75 14                	jne    c0010031 <VgaText::doANSI_SGR(int)+0x39>
c001001d:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010023:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010029:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001002f:	eb 4c                	jmp    c001007d <VgaText::doANSI_SGR(int)+0x85>
c0010031:	83 fa 1b             	cmp    edx,0x1b
c0010034:	74 ce                	je     c0010004 <VgaText::doANSI_SGR(int)+0xc>
c0010036:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010039:	83 f9 07             	cmp    ecx,0x7
c001003c:	77 09                	ja     c0010047 <VgaText::doANSI_SGR(int)+0x4f>
c001003e:	8b 14 8d 00 af 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc5100]
c0010045:	eb 20                	jmp    c0010067 <VgaText::doANSI_SGR(int)+0x6f>
c0010047:	8d 4a d8             	lea    ecx,[edx-0x28]
c001004a:	83 f9 07             	cmp    ecx,0x7
c001004d:	77 09                	ja     c0010058 <VgaText::doANSI_SGR(int)+0x60>
c001004f:	8b 14 8d 00 af 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc5100]
c0010056:	eb 25                	jmp    c001007d <VgaText::doANSI_SGR(int)+0x85>
c0010058:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001005b:	83 f9 07             	cmp    ecx,0x7
c001005e:	77 0e                	ja     c001006e <VgaText::doANSI_SGR(int)+0x76>
c0010060:	8b 14 95 b8 ad 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5248]
c0010067:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001006d:	c3                   	ret    
c001006e:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010071:	83 f9 07             	cmp    ecx,0x7
c0010074:	77 0d                	ja     c0010083 <VgaText::doANSI_SGR(int)+0x8b>
c0010076:	8b 14 95 90 ad 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5270]
c001007d:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010083:	c3                   	ret    

c0010084 <VgaText::setDefaultBgColour(VgaColour)>:
c0010084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010088:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001008c:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010092:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010098:	c3                   	ret    
c0010099:	90                   	nop

c001009a <VgaText::setDefaultFgColour(VgaColour)>:
c001009a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001009e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100a2:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00100a8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00100ae:	c3                   	ret    
c00100af:	90                   	nop

c00100b0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00100b0:	53                   	push   ebx
c00100b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00100b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00100b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00100bd:	51                   	push   ecx
c00100be:	e8 c1 ff ff ff       	call   c0010084 <VgaText::setDefaultBgColour(VgaColour)>
c00100c3:	58                   	pop    eax
c00100c4:	5a                   	pop    edx
c00100c5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00100c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00100cd:	5b                   	pop    ebx
c00100ce:	eb ca                	jmp    c001009a <VgaText::setDefaultFgColour(VgaColour)>

c00100d0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00100d0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00100d4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00100d9:	83 e0 0f             	and    eax,0xf
c00100dc:	c1 e2 04             	shl    edx,0x4
c00100df:	09 d0                	or     eax,edx
c00100e1:	c3                   	ret    

c00100e2 <VgaText::scrollScreen()>:
c00100e2:	57                   	push   edi
c00100e3:	56                   	push   esi
c00100e4:	be 01 00 00 00       	mov    esi,0x1
c00100e9:	53                   	push   ebx
c00100ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100ee:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00100f4:	31 ff                	xor    edi,edi
c00100f6:	01 d9                	add    ecx,ebx
c00100f8:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00100fb:	83 fe 17             	cmp    esi,0x17
c00100fe:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010104:	75 28                	jne    c001012e <VgaText::scrollScreen()+0x4c>
c0010106:	f7 c7 01 00 00 00    	test   edi,0x1
c001010c:	74 1c                	je     c001012a <VgaText::scrollScreen()+0x48>
c001010e:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010115:	50                   	push   eax
c0010116:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001011d:	50                   	push   eax
c001011e:	e8 ad ff ff ff       	call   c00100d0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010123:	5a                   	pop    edx
c0010124:	5a                   	pop    edx
c0010125:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010128:	eb 04                	jmp    c001012e <VgaText::scrollScreen()+0x4c>
c001012a:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001012e:	47                   	inc    edi
c001012f:	41                   	inc    ecx
c0010130:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010136:	75 c0                	jne    c00100f8 <VgaText::scrollScreen()+0x16>
c0010138:	46                   	inc    esi
c0010139:	83 fe 18             	cmp    esi,0x18
c001013c:	75 b0                	jne    c00100ee <VgaText::scrollScreen()+0xc>
c001013e:	39 1d 44 bf 03 c0    	cmp    DWORD PTR ds:0xc003bf44,ebx
c0010144:	75 24                	jne    c001016a <VgaText::scrollScreen()+0x88>
c0010146:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001014d:	74 08                	je     c0010157 <VgaText::scrollScreen()+0x75>
c001014f:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010155:	eb 13                	jmp    c001016a <VgaText::scrollScreen()+0x88>
c0010157:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001015d:	85 c0                	test   eax,eax
c001015f:	74 09                	je     c001016a <VgaText::scrollScreen()+0x88>
c0010161:	83 ec 0c             	sub    esp,0xc
c0010164:	53                   	push   ebx
c0010165:	ff d0                	call   eax
c0010167:	83 c4 10             	add    esp,0x10
c001016a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001016e:	5b                   	pop    ebx
c001016f:	5e                   	pop    esi
c0010170:	5f                   	pop    edi
c0010171:	e9 1e fe ff ff       	jmp    c000ff94 <VgaText::updateCursor()>

c0010176 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010176:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001017b:	c1 e0 08             	shl    eax,0x8
c001017e:	89 c2                	mov    edx,eax
c0010180:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010185:	09 d0                	or     eax,edx
c0010187:	c3                   	ret    

c0010188 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010188:	53                   	push   ebx
c0010189:	83 ec 08             	sub    esp,0x8
c001018c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010190:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010195:	50                   	push   eax
c0010196:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001019b:	50                   	push   eax
c001019c:	e8 2f ff ff ff       	call   c00100d0 <VgaText::combineColours(unsigned char, unsigned char)>
c00101a1:	5a                   	pop    edx
c00101a2:	0f b6 c0             	movzx  eax,al
c00101a5:	5b                   	pop    ebx
c00101a6:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00101ab:	50                   	push   eax
c00101ac:	53                   	push   ebx
c00101ad:	e8 c4 ff ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c00101b2:	5a                   	pop    edx
c00101b3:	5a                   	pop    edx
c00101b4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00101ba:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00101be:	0f b7 d2             	movzx  edx,dx
c00101c1:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00101c6:	39 0d 44 bf 03 c0    	cmp    DWORD PTR ds:0xc003bf44,ecx
c00101cc:	75 14                	jne    c00101e2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00101ce:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00101d4:	85 c0                	test   eax,eax
c00101d6:	74 0a                	je     c00101e2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00101d8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00101dc:	83 c4 08             	add    esp,0x8
c00101df:	5b                   	pop    ebx
c00101e0:	ff e0                	jmp    eax
c00101e2:	83 c4 08             	add    esp,0x8
c00101e5:	5b                   	pop    ebx
c00101e6:	c3                   	ret    
c00101e7:	90                   	nop

c00101e8 <VgaText::getCursorX()>:
c00101e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ec:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00101f2:	c3                   	ret    
c00101f3:	90                   	nop

c00101f4 <VgaText::getCursorY()>:
c00101f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101f8:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00101fe:	c3                   	ret    
c00101ff:	90                   	nop

c0010200 <VgaText::setCursor(int, int)>:
c0010200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010204:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010208:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001020e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010212:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010218:	e9 77 fd ff ff       	jmp    c000ff94 <VgaText::updateCursor()>
c001021d:	90                   	nop

c001021e <VgaText::setCursorX(int)>:
c001021e:	83 ec 10             	sub    esp,0x10
c0010221:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010225:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001022b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001022f:	50                   	push   eax
c0010230:	e8 cb ff ff ff       	call   c0010200 <VgaText::setCursor(int, int)>
c0010235:	83 c4 1c             	add    esp,0x1c
c0010238:	c3                   	ret    
c0010239:	90                   	nop

c001023a <VgaText::setCursorY(int)>:
c001023a:	83 ec 10             	sub    esp,0x10
c001023d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010241:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010245:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001024b:	50                   	push   eax
c001024c:	e8 af ff ff ff       	call   c0010200 <VgaText::setCursor(int, int)>
c0010251:	83 c4 1c             	add    esp,0x1c
c0010254:	c3                   	ret    
c0010255:	90                   	nop

c0010256 <VgaText::incrementCursor(bool)>:
c0010256:	56                   	push   esi
c0010257:	53                   	push   ebx
c0010258:	51                   	push   ecx
c0010259:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001025d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010261:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010267:	40                   	inc    eax
c0010268:	83 f8 50             	cmp    eax,0x50
c001026b:	74 08                	je     c0010275 <VgaText::incrementCursor(bool)+0x1f>
c001026d:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010273:	eb 33                	jmp    c00102a8 <VgaText::incrementCursor(bool)+0x52>
c0010275:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001027b:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010285:	8d 50 01             	lea    edx,[eax+0x1]
c0010288:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001028e:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010294:	75 12                	jne    c00102a8 <VgaText::incrementCursor(bool)+0x52>
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001029f:	53                   	push   ebx
c00102a0:	e8 3d fe ff ff       	call   c00100e2 <VgaText::scrollScreen()>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	89 f0                	mov    eax,esi
c00102aa:	84 c0                	test   al,al
c00102ac:	74 0c                	je     c00102ba <VgaText::incrementCursor(bool)+0x64>
c00102ae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00102b2:	5a                   	pop    edx
c00102b3:	5b                   	pop    ebx
c00102b4:	5e                   	pop    esi
c00102b5:	e9 da fc ff ff       	jmp    c000ff94 <VgaText::updateCursor()>
c00102ba:	58                   	pop    eax
c00102bb:	5b                   	pop    ebx
c00102bc:	5e                   	pop    esi
c00102bd:	c3                   	ret    

c00102be <VgaText::updateRAMUsageDisplay(int)>:
c00102be:	53                   	push   ebx
c00102bf:	bb 0a 00 00 00       	mov    ebx,0xa
c00102c4:	6a 0f                	push   0xf
c00102c6:	6a 00                	push   0x0
c00102c8:	e8 03 fe ff ff       	call   c00100d0 <VgaText::combineColours(unsigned char, unsigned char)>
c00102cd:	5a                   	pop    edx
c00102ce:	59                   	pop    ecx
c00102cf:	0f b6 c8             	movzx  ecx,al
c00102d2:	51                   	push   ecx
c00102d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102d7:	99                   	cdq    
c00102d8:	f7 fb                	idiv   ebx
c00102da:	89 d3                	mov    ebx,edx
c00102dc:	83 c0 30             	add    eax,0x30
c00102df:	83 c3 30             	add    ebx,0x30
c00102e2:	0f be c0             	movsx  eax,al
c00102e5:	0f b6 db             	movzx  ebx,bl
c00102e8:	50                   	push   eax
c00102e9:	e8 88 fe ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c00102ee:	5a                   	pop    edx
c00102ef:	5a                   	pop    edx
c00102f0:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00102f6:	51                   	push   ecx
c00102f7:	53                   	push   ebx
c00102f8:	e8 79 fe ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c00102fd:	5b                   	pop    ebx
c00102fe:	5a                   	pop    edx
c00102ff:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010305:	51                   	push   ecx
c0010306:	6a 25                	push   0x25
c0010308:	e8 69 fe ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c001030d:	59                   	pop    ecx
c001030e:	5b                   	pop    ebx
c001030f:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010315:	5b                   	pop    ebx
c0010316:	c3                   	ret    
c0010317:	90                   	nop

c0010318 <VgaText::updateDiskUsage()>:
c0010318:	55                   	push   ebp
c0010319:	bd 10 27 00 00       	mov    ebp,0x2710
c001031e:	57                   	push   edi
c001031f:	56                   	push   esi
c0010320:	53                   	push   ebx
c0010321:	6a 0f                	push   0xf
c0010323:	6a 00                	push   0x0
c0010325:	e8 a6 fd ff ff       	call   c00100d0 <VgaText::combineColours(unsigned char, unsigned char)>
c001032a:	5a                   	pop    edx
c001032b:	0f b6 d8             	movzx  ebx,al
c001032e:	59                   	pop    ecx
c001032f:	a1 88 d1 03 c0       	mov    eax,ds:0xc003d188
c0010334:	53                   	push   ebx
c0010335:	b9 0a 00 00 00       	mov    ecx,0xa
c001033a:	99                   	cdq    
c001033b:	f7 fd                	idiv   ebp
c001033d:	99                   	cdq    
c001033e:	f7 f9                	idiv   ecx
c0010340:	8d 42 30             	lea    eax,[edx+0x30]
c0010343:	0f b6 c0             	movzx  eax,al
c0010346:	50                   	push   eax
c0010347:	e8 2a fe ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c001034c:	5e                   	pop    esi
c001034d:	5f                   	pop    edi
c001034e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010354:	bf e8 03 00 00       	mov    edi,0x3e8
c0010359:	53                   	push   ebx
c001035a:	a1 88 d1 03 c0       	mov    eax,ds:0xc003d188
c001035f:	99                   	cdq    
c0010360:	f7 ff                	idiv   edi
c0010362:	99                   	cdq    
c0010363:	f7 f9                	idiv   ecx
c0010365:	8d 42 30             	lea    eax,[edx+0x30]
c0010368:	0f b6 c0             	movzx  eax,al
c001036b:	50                   	push   eax
c001036c:	e8 05 fe ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c0010371:	5a                   	pop    edx
c0010372:	5e                   	pop    esi
c0010373:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010379:	be 64 00 00 00       	mov    esi,0x64
c001037e:	53                   	push   ebx
c001037f:	a1 88 d1 03 c0       	mov    eax,ds:0xc003d188
c0010384:	99                   	cdq    
c0010385:	f7 fe                	idiv   esi
c0010387:	99                   	cdq    
c0010388:	f7 f9                	idiv   ecx
c001038a:	8d 42 30             	lea    eax,[edx+0x30]
c001038d:	0f b6 c0             	movzx  eax,al
c0010390:	50                   	push   eax
c0010391:	e8 e0 fd ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c0010396:	5a                   	pop    edx
c0010397:	5a                   	pop    edx
c0010398:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001039e:	53                   	push   ebx
c001039f:	a1 88 d1 03 c0       	mov    eax,ds:0xc003d188
c00103a4:	99                   	cdq    
c00103a5:	f7 f9                	idiv   ecx
c00103a7:	99                   	cdq    
c00103a8:	f7 f9                	idiv   ecx
c00103aa:	8d 42 30             	lea    eax,[edx+0x30]
c00103ad:	0f b6 c0             	movzx  eax,al
c00103b0:	50                   	push   eax
c00103b1:	e8 c0 fd ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c00103b6:	5a                   	pop    edx
c00103b7:	5a                   	pop    edx
c00103b8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00103be:	53                   	push   ebx
c00103bf:	a1 88 d1 03 c0       	mov    eax,ds:0xc003d188
c00103c4:	99                   	cdq    
c00103c5:	f7 f9                	idiv   ecx
c00103c7:	8d 42 30             	lea    eax,[edx+0x30]
c00103ca:	0f b6 c0             	movzx  eax,al
c00103cd:	50                   	push   eax
c00103ce:	e8 a3 fd ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c00103d3:	5a                   	pop    edx
c00103d4:	5a                   	pop    edx
c00103d5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00103db:	53                   	push   ebx
c00103dc:	a1 84 d1 03 c0       	mov    eax,ds:0xc003d184
c00103e1:	99                   	cdq    
c00103e2:	f7 fd                	idiv   ebp
c00103e4:	99                   	cdq    
c00103e5:	f7 f9                	idiv   ecx
c00103e7:	8d 42 30             	lea    eax,[edx+0x30]
c00103ea:	0f b6 c0             	movzx  eax,al
c00103ed:	50                   	push   eax
c00103ee:	e8 83 fd ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c00103f3:	5d                   	pop    ebp
c00103f4:	5a                   	pop    edx
c00103f5:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00103fb:	53                   	push   ebx
c00103fc:	a1 84 d1 03 c0       	mov    eax,ds:0xc003d184
c0010401:	99                   	cdq    
c0010402:	f7 ff                	idiv   edi
c0010404:	99                   	cdq    
c0010405:	f7 f9                	idiv   ecx
c0010407:	8d 42 30             	lea    eax,[edx+0x30]
c001040a:	0f b6 c0             	movzx  eax,al
c001040d:	50                   	push   eax
c001040e:	e8 63 fd ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c0010413:	5f                   	pop    edi
c0010414:	5d                   	pop    ebp
c0010415:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001041b:	53                   	push   ebx
c001041c:	a1 84 d1 03 c0       	mov    eax,ds:0xc003d184
c0010421:	99                   	cdq    
c0010422:	f7 fe                	idiv   esi
c0010424:	99                   	cdq    
c0010425:	f7 f9                	idiv   ecx
c0010427:	8d 42 30             	lea    eax,[edx+0x30]
c001042a:	0f b6 c0             	movzx  eax,al
c001042d:	50                   	push   eax
c001042e:	e8 43 fd ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c0010433:	5a                   	pop    edx
c0010434:	5e                   	pop    esi
c0010435:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001043b:	53                   	push   ebx
c001043c:	a1 84 d1 03 c0       	mov    eax,ds:0xc003d184
c0010441:	99                   	cdq    
c0010442:	f7 f9                	idiv   ecx
c0010444:	99                   	cdq    
c0010445:	f7 f9                	idiv   ecx
c0010447:	8d 42 30             	lea    eax,[edx+0x30]
c001044a:	0f b6 c0             	movzx  eax,al
c001044d:	50                   	push   eax
c001044e:	e8 23 fd ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c0010453:	5f                   	pop    edi
c0010454:	5d                   	pop    ebp
c0010455:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001045b:	53                   	push   ebx
c001045c:	a1 84 d1 03 c0       	mov    eax,ds:0xc003d184
c0010461:	99                   	cdq    
c0010462:	f7 f9                	idiv   ecx
c0010464:	83 c2 30             	add    edx,0x30
c0010467:	0f b6 d2             	movzx  edx,dl
c001046a:	52                   	push   edx
c001046b:	e8 06 fd ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c0010470:	5a                   	pop    edx
c0010471:	59                   	pop    ecx
c0010472:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010478:	5b                   	pop    ebx
c0010479:	5e                   	pop    esi
c001047a:	5f                   	pop    edi
c001047b:	5d                   	pop    ebp
c001047c:	c3                   	ret    
c001047d:	90                   	nop

c001047e <VgaText::updateTitle()>:
c001047e:	53                   	push   ebx
c001047f:	31 c0                	xor    eax,eax
c0010481:	83 ec 58             	sub    esp,0x58
c0010484:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010488:	89 e1                	mov    ecx,esp
c001048a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001048e:	40                   	inc    eax
c001048f:	83 f8 50             	cmp    eax,0x50
c0010492:	75 f6                	jne    c001048a <VgaText::updateTitle()+0xc>
c0010494:	31 c0                	xor    eax,eax
c0010496:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001049d:	84 db                	test   bl,bl
c001049f:	74 06                	je     c00104a7 <VgaText::updateTitle()+0x29>
c00104a1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00104a4:	40                   	inc    eax
c00104a5:	eb ef                	jmp    c0010496 <VgaText::updateTitle()+0x18>
c00104a7:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00104ad:	85 c0                	test   eax,eax
c00104af:	74 09                	je     c00104ba <VgaText::updateTitle()+0x3c>
c00104b1:	53                   	push   ebx
c00104b2:	53                   	push   ebx
c00104b3:	51                   	push   ecx
c00104b4:	52                   	push   edx
c00104b5:	ff d0                	call   eax
c00104b7:	83 c4 10             	add    esp,0x10
c00104ba:	e8 59 fe ff ff       	call   c0010318 <VgaText::updateDiskUsage()>
c00104bf:	83 c4 58             	add    esp,0x58
c00104c2:	5b                   	pop    ebx
c00104c3:	c3                   	ret    

c00104c4 <VgaText::setTitleTextColour(VgaColour)>:
c00104c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104cc:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00104d2:	eb aa                	jmp    c001047e <VgaText::updateTitle()>

c00104d4 <VgaText::setTitleColour(VgaColour)>:
c00104d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104dc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00104e2:	eb 9a                	jmp    c001047e <VgaText::updateTitle()>

c00104e4 <VgaText::setTitle(char*)>:
c00104e4:	53                   	push   ebx
c00104e5:	83 ec 10             	sub    esp,0x10
c00104e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00104ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00104f6:	50                   	push   eax
c00104f7:	e8 f8 02 ff ff       	call   c00007f4 <strcpy>
c00104fc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010500:	83 c4 18             	add    esp,0x18
c0010503:	5b                   	pop    ebx
c0010504:	e9 75 ff ff ff       	jmp    c001047e <VgaText::updateTitle()>
c0010509:	90                   	nop

c001050a <VgaText::decrementCursor(bool)>:
c001050a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001050e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010512:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010518:	85 c0                	test   eax,eax
c001051a:	74 07                	je     c0010523 <VgaText::decrementCursor(bool)+0x19>
c001051c:	48                   	dec    eax
c001051d:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010523:	84 c9                	test   cl,cl
c0010525:	74 09                	je     c0010530 <VgaText::decrementCursor(bool)+0x26>
c0010527:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001052b:	e9 64 fa ff ff       	jmp    c000ff94 <VgaText::updateCursor()>
c0010530:	c3                   	ret    
c0010531:	90                   	nop

c0010532 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010532:	53                   	push   ebx
c0010533:	83 ec 08             	sub    esp,0x8
c0010536:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001053a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001053e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010542:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010546:	3c 07                	cmp    al,0x7
c0010548:	75 2a                	jne    c0010574 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001054a:	a1 64 bf 03 c0       	mov    eax,ds:0xc003bf64
c001054f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010557:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001055f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010567:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001056b:	83 c4 08             	add    esp,0x8
c001056e:	5b                   	pop    ebx
c001056f:	e9 10 2c 00 00       	jmp    c0013184 <Buzzer::beep(int, int, bool)>
c0010574:	3c 0d                	cmp    al,0xd
c0010576:	75 0c                	jne    c0010584 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010578:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010582:	eb 3b                	jmp    c00105bf <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010584:	3c 0a                	cmp    al,0xa
c0010586:	75 40                	jne    c00105c8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010588:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001058e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010598:	8d 50 01             	lea    edx,[eax+0x1]
c001059b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00105a1:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00105a7:	75 12                	jne    c00105bb <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00105a9:	83 ec 0c             	sub    esp,0xc
c00105ac:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00105b2:	53                   	push   ebx
c00105b3:	e8 2a fb ff ff       	call   c00100e2 <VgaText::scrollScreen()>
c00105b8:	83 c4 10             	add    esp,0x10
c00105bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105bf:	83 c4 08             	add    esp,0x8
c00105c2:	5b                   	pop    ebx
c00105c3:	e9 cc f9 ff ff       	jmp    c000ff94 <VgaText::updateCursor()>
c00105c8:	3c 08                	cmp    al,0x8
c00105ca:	75 31                	jne    c00105fd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00105cc:	50                   	push   eax
c00105cd:	50                   	push   eax
c00105ce:	6a 01                	push   0x1
c00105d0:	53                   	push   ebx
c00105d1:	e8 34 ff ff ff       	call   c001050a <VgaText::decrementCursor(bool)>
c00105d6:	5a                   	pop    edx
c00105d7:	59                   	pop    ecx
c00105d8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00105de:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00105e4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00105ea:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00105f0:	6a 20                	push   0x20
c00105f2:	53                   	push   ebx
c00105f3:	e8 90 fb ff ff       	call   c0010188 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105f8:	83 c4 28             	add    esp,0x28
c00105fb:	5b                   	pop    ebx
c00105fc:	c3                   	ret    
c00105fd:	83 ec 08             	sub    esp,0x8
c0010600:	0f be c0             	movsx  eax,al
c0010603:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010609:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001060f:	51                   	push   ecx
c0010610:	52                   	push   edx
c0010611:	50                   	push   eax
c0010612:	53                   	push   ebx
c0010613:	e8 70 fb ff ff       	call   c0010188 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010618:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001061c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010624:	83 c4 28             	add    esp,0x28
c0010627:	5b                   	pop    ebx
c0010628:	e9 29 fc ff ff       	jmp    c0010256 <VgaText::incrementCursor(bool)>
c001062d:	90                   	nop

c001062e <VgaText::isShowingCursor()>:
c001062e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010632:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010638:	c3                   	ret    
c0010639:	90                   	nop

c001063a <VgaText::isBlinkDisabled()>:
c001063a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001063e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010644:	83 f0 01             	xor    eax,0x1
c0010647:	c3                   	ret    

c0010648 <VgaText::setCursorHeight(int)>:
c0010648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001064c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010650:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010656:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001065d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010661:	e9 48 f9 ff ff       	jmp    c000ffae <VgaText::showCursor(bool)>

c0010666 <VgaText::getCursorHeight()>:
c0010666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010670:	c3                   	ret    

c0010671 <setActiveTerminal(VgaText*)>:
c0010671:	53                   	push   ebx
c0010672:	83 ec 08             	sub    esp,0x8
c0010675:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010679:	85 db                	test   ebx,ebx
c001067b:	75 11                	jne    c001068e <setActiveTerminal(VgaText*)+0x1d>
c001067d:	c7 44 24 10 00 94 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039400
c0010685:	83 c4 08             	add    esp,0x8
c0010688:	5b                   	pop    ebx
c0010689:	e9 7a c9 ff ff       	jmp    c000d008 <panic(char const*)>
c001068e:	50                   	push   eax
c001068f:	50                   	push   eax
c0010690:	53                   	push   ebx
c0010691:	68 0e 94 03 c0       	push   0xc003940e
c0010696:	e8 4f c8 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001069b:	a1 44 bf 03 c0       	mov    eax,ds:0xc003bf44
c00106a0:	83 c4 10             	add    esp,0x10
c00106a3:	85 c0                	test   eax,eax
c00106a5:	74 0c                	je     c00106b3 <setActiveTerminal(VgaText*)+0x42>
c00106a7:	83 ec 0c             	sub    esp,0xc
c00106aa:	50                   	push   eax
c00106ab:	e8 e4 f8 ff ff       	call   c000ff94 <VgaText::updateCursor()>
c00106b0:	83 c4 10             	add    esp,0x10
c00106b3:	89 1d 44 bf 03 c0    	mov    DWORD PTR ds:0xc003bf44,ebx
c00106b9:	51                   	push   ecx
c00106ba:	51                   	push   ecx
c00106bb:	53                   	push   ebx
c00106bc:	68 26 94 03 c0       	push   0xc0039426
c00106c1:	e8 24 c8 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00106c6:	83 c4 0c             	add    esp,0xc
c00106c9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00106cf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00106d5:	53                   	push   ebx
c00106d6:	e8 25 fb ff ff       	call   c0010200 <VgaText::setCursor(int, int)>
c00106db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106de:	e8 57 ff ff ff       	call   c001063a <VgaText::isBlinkDisabled()>
c00106e3:	5a                   	pop    edx
c00106e4:	0f b6 c0             	movzx  eax,al
c00106e7:	59                   	pop    ecx
c00106e8:	50                   	push   eax
c00106e9:	53                   	push   ebx
c00106ea:	e8 cf f8 ff ff       	call   c000ffbe <VgaText::disableBlink(bool)>
c00106ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106f2:	e8 6f ff ff ff       	call   c0010666 <VgaText::getCursorHeight()>
c00106f7:	5a                   	pop    edx
c00106f8:	59                   	pop    ecx
c00106f9:	50                   	push   eax
c00106fa:	53                   	push   ebx
c00106fb:	e8 48 ff ff ff       	call   c0010648 <VgaText::setCursorHeight(int)>
c0010700:	83 c4 10             	add    esp,0x10
c0010703:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001070a:	75 0a                	jne    c0010716 <setActiveTerminal(VgaText*)+0xa5>
c001070c:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010716:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001071a:	83 c4 08             	add    esp,0x8
c001071d:	5b                   	pop    ebx
c001071e:	e9 1d f8 ff ff       	jmp    c000ff40 <VgaText::load()>

c0010723 <doTerminalCycle()>:
c0010723:	83 ec 18             	sub    esp,0x18
c0010726:	a1 40 bf 03 c0       	mov    eax,ds:0xc003bf40
c001072b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010731:	50                   	push   eax
c0010732:	a3 40 bf 03 c0       	mov    ds:0xc003bf40,eax
c0010737:	e8 35 ff ff ff       	call   c0010671 <setActiveTerminal(VgaText*)>
c001073c:	83 c4 1c             	add    esp,0x1c
c001073f:	c3                   	ret    

c0010740 <VgaText::doUpdate()>:
c0010740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010744:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001074a:	85 c0                	test   eax,eax
c001074c:	74 02                	je     c0010750 <VgaText::doUpdate()+0x10>
c001074e:	ff e0                	jmp    eax
c0010750:	c3                   	ret    
c0010751:	90                   	nop

c0010752 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010752:	55                   	push   ebp
c0010753:	57                   	push   edi
c0010754:	56                   	push   esi
c0010755:	53                   	push   ebx
c0010756:	83 ec 1c             	sub    esp,0x1c
c0010759:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001075d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010762:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010769:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001076c:	50                   	push   eax
c001076d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010772:	50                   	push   eax
c0010773:	e8 58 f9 ff ff       	call   c00100d0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010778:	59                   	pop    ecx
c0010779:	0f b6 c0             	movzx  eax,al
c001077c:	5b                   	pop    ebx
c001077d:	31 c9                	xor    ecx,ecx
c001077f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010787:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001078b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010791:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010795:	0f b7 db             	movzx  ebx,bx
c0010798:	01 db                	add    ebx,ebx
c001079a:	01 fb                	add    ebx,edi
c001079c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001079f:	84 c0                	test   al,al
c00107a1:	0f 84 38 01 00 00    	je     c00108df <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00107a7:	3c 0d                	cmp    al,0xd
c00107a9:	75 0f                	jne    c00107ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00107ab:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00107b5:	e9 1f 01 00 00       	jmp    c00108d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00107ba:	3c 0a                	cmp    al,0xa
c00107bc:	75 5b                	jne    c0010819 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00107be:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00107c4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00107ce:	8d 48 01             	lea    ecx,[eax+0x1]
c00107d1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00107d7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00107dd:	75 12                	jne    c00107f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00107df:	83 ec 0c             	sub    esp,0xc
c00107e2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00107e8:	55                   	push   ebp
c00107e9:	e8 f4 f8 ff ff       	call   c00100e2 <VgaText::scrollScreen()>
c00107ee:	83 c4 10             	add    esp,0x10
c00107f1:	83 ec 0c             	sub    esp,0xc
c00107f4:	55                   	push   ebp
c00107f5:	e8 9a f7 ff ff       	call   c000ff94 <VgaText::updateCursor()>
c00107fa:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010802:	83 c4 10             	add    esp,0x10
c0010805:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001080b:	31 c9                	xor    ecx,ecx
c001080d:	0f b7 db             	movzx  ebx,bx
c0010810:	01 db                	add    ebx,ebx
c0010812:	01 fb                	add    ebx,edi
c0010814:	e9 c0 00 00 00       	jmp    c00108d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010819:	3c 08                	cmp    al,0x8
c001081b:	75 4e                	jne    c001086b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c001081d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010821:	53                   	push   ebx
c0010822:	53                   	push   ebx
c0010823:	6a 01                	push   0x1
c0010825:	55                   	push   ebp
c0010826:	e8 df fc ff ff       	call   c001050a <VgaText::decrementCursor(bool)>
c001082b:	58                   	pop    eax
c001082c:	5a                   	pop    edx
c001082d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010833:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010839:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c001083f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010845:	6a 20                	push   0x20
c0010847:	55                   	push   ebp
c0010848:	e8 3b f9 ff ff       	call   c0010188 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001084d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010855:	83 c4 20             	add    esp,0x20
c0010858:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001085e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010862:	0f b7 db             	movzx  ebx,bx
c0010865:	01 db                	add    ebx,ebx
c0010867:	01 fb                	add    ebx,edi
c0010869:	eb 6e                	jmp    c00108d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001086b:	51                   	push   ecx
c001086c:	51                   	push   ecx
c001086d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010871:	50                   	push   eax
c0010872:	e8 ff f8 ff ff       	call   c0010176 <VgaText::combineCharAndColour(char, unsigned char)>
c0010877:	83 c4 10             	add    esp,0x10
c001087a:	66 89 03             	mov    WORD PTR [ebx],ax
c001087d:	39 2d 44 bf 03 c0    	cmp    DWORD PTR ds:0xc003bf44,ebp
c0010883:	75 2a                	jne    c00108af <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010885:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c001088b:	85 c0                	test   eax,eax
c001088d:	74 20                	je     c00108af <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001088f:	52                   	push   edx
c0010890:	52                   	push   edx
c0010891:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010897:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001089d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108a5:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00108a8:	51                   	push   ecx
c00108a9:	55                   	push   ebp
c00108aa:	ff d0                	call   eax
c00108ac:	83 c4 20             	add    esp,0x20
c00108af:	83 c3 02             	add    ebx,0x2
c00108b2:	50                   	push   eax
c00108b3:	50                   	push   eax
c00108b4:	6a 00                	push   0x0
c00108b6:	55                   	push   ebp
c00108b7:	e8 9a f9 ff ff       	call   c0010256 <VgaText::incrementCursor(bool)>
c00108bc:	83 c4 10             	add    esp,0x10
c00108bf:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00108c6:	75 0f                	jne    c00108d7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00108c8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00108d0:	0f b7 db             	movzx  ebx,bx
c00108d3:	01 db                	add    ebx,ebx
c00108d5:	01 fb                	add    ebx,edi
c00108d7:	b1 01                	mov    cl,0x1
c00108d9:	46                   	inc    esi
c00108da:	e9 bd fe ff ff       	jmp    c001079c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00108df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00108e3:	83 ec 0c             	sub    esp,0xc
c00108e6:	55                   	push   ebp
c00108e7:	e8 a8 f6 ff ff       	call   c000ff94 <VgaText::updateCursor()>
c00108ec:	83 c4 10             	add    esp,0x10
c00108ef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00108f3:	84 c9                	test   cl,cl
c00108f5:	74 0c                	je     c0010903 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00108f7:	83 ec 0c             	sub    esp,0xc
c00108fa:	55                   	push   ebp
c00108fb:	e8 40 fe ff ff       	call   c0010740 <VgaText::doUpdate()>
c0010900:	83 c4 10             	add    esp,0x10
c0010903:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001090a:	83 c4 1c             	add    esp,0x1c
c001090d:	5b                   	pop    ebx
c001090e:	5e                   	pop    esi
c001090f:	5f                   	pop    edi
c0010910:	5d                   	pop    ebp
c0010911:	c3                   	ret    

c0010912 <VgaText::clearScreen()>:
c0010912:	57                   	push   edi
c0010913:	56                   	push   esi
c0010914:	31 f6                	xor    esi,esi
c0010916:	53                   	push   ebx
c0010917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001091b:	52                   	push   edx
c001091c:	6a 00                	push   0x0
c001091e:	6a 00                	push   0x0
c0010920:	53                   	push   ebx
c0010921:	e8 da f8 ff ff       	call   c0010200 <VgaText::setCursor(int, int)>
c0010926:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001092d:	83 c4 10             	add    esp,0x10
c0010930:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010936:	7e 26                	jle    c001095e <VgaText::clearScreen()+0x4c>
c0010938:	31 ff                	xor    edi,edi
c001093a:	50                   	push   eax
c001093b:	50                   	push   eax
c001093c:	56                   	push   esi
c001093d:	57                   	push   edi
c001093e:	47                   	inc    edi
c001093f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010945:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001094b:	6a 20                	push   0x20
c001094d:	53                   	push   ebx
c001094e:	e8 35 f8 ff ff       	call   c0010188 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010953:	83 c4 20             	add    esp,0x20
c0010956:	83 ff 50             	cmp    edi,0x50
c0010959:	75 df                	jne    c001093a <VgaText::clearScreen()+0x28>
c001095b:	46                   	inc    esi
c001095c:	eb d2                	jmp    c0010930 <VgaText::clearScreen()+0x1e>
c001095e:	83 ec 0c             	sub    esp,0xc
c0010961:	53                   	push   ebx
c0010962:	e8 d9 fd ff ff       	call   c0010740 <VgaText::doUpdate()>
c0010967:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	5b                   	pop    ebx
c0010972:	5e                   	pop    esi
c0010973:	5f                   	pop    edi
c0010974:	c3                   	ret    
c0010975:	90                   	nop

c0010976 <VgaText::putchar(char)>:
c0010976:	56                   	push   esi
c0010977:	53                   	push   ebx
c0010978:	83 ec 14             	sub    esp,0x14
c001097b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001097f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010983:	3c 5b                	cmp    al,0x5b
c0010985:	75 21                	jne    c00109a8 <VgaText::putchar(char)+0x32>
c0010987:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001098e:	74 28                	je     c00109b8 <VgaText::putchar(char)+0x42>
c0010990:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010999:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00109a3:	e9 e2 00 00 00       	jmp    c0010a8a <VgaText::putchar(char)+0x114>
c00109a8:	3c 1b                	cmp    al,0x1b
c00109aa:	75 0c                	jne    c00109b8 <VgaText::putchar(char)+0x42>
c00109ac:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00109b3:	e9 d2 00 00 00       	jmp    c0010a8a <VgaText::putchar(char)+0x114>
c00109b8:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00109be:	84 c9                	test   cl,cl
c00109c0:	0f 84 ab 00 00 00    	je     c0010a71 <VgaText::putchar(char)+0xfb>
c00109c6:	8d 50 c0             	lea    edx,[eax-0x40]
c00109c9:	80 fa 3e             	cmp    dl,0x3e
c00109cc:	0f 87 82 00 00 00    	ja     c0010a54 <VgaText::putchar(char)+0xde>
c00109d2:	3c 6d                	cmp    al,0x6d
c00109d4:	75 4d                	jne    c0010a23 <VgaText::putchar(char)+0xad>
c00109d6:	31 f6                	xor    esi,esi
c00109d8:	31 d2                	xor    edx,edx
c00109da:	31 c0                	xor    eax,eax
c00109dc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00109e2:	7e 30                	jle    c0010a14 <VgaText::putchar(char)+0x9e>
c00109e4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00109ec:	80 fa 3b             	cmp    dl,0x3b
c00109ef:	75 17                	jne    c0010a08 <VgaText::putchar(char)+0x92>
c00109f1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109f5:	50                   	push   eax
c00109f6:	53                   	push   ebx
c00109f7:	e8 fc f5 ff ff       	call   c000fff8 <VgaText::doANSI_SGR(int)>
c00109fc:	59                   	pop    ecx
c00109fd:	31 d2                	xor    edx,edx
c00109ff:	58                   	pop    eax
c0010a00:	31 c0                	xor    eax,eax
c0010a02:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a06:	eb 09                	jmp    c0010a11 <VgaText::putchar(char)+0x9b>
c0010a08:	6b c0 0a             	imul   eax,eax,0xa
c0010a0b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a0f:	88 ca                	mov    dl,cl
c0010a11:	46                   	inc    esi
c0010a12:	eb c8                	jmp    c00109dc <VgaText::putchar(char)+0x66>
c0010a14:	84 d2                	test   dl,dl
c0010a16:	74 31                	je     c0010a49 <VgaText::putchar(char)+0xd3>
c0010a18:	50                   	push   eax
c0010a19:	53                   	push   ebx
c0010a1a:	e8 d9 f5 ff ff       	call   c000fff8 <VgaText::doANSI_SGR(int)>
c0010a1f:	58                   	pop    eax
c0010a20:	5a                   	pop    edx
c0010a21:	eb 26                	jmp    c0010a49 <VgaText::putchar(char)+0xd3>
c0010a23:	3c 4a                	cmp    al,0x4a
c0010a25:	75 22                	jne    c0010a49 <VgaText::putchar(char)+0xd3>
c0010a27:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010a2e:	75 19                	jne    c0010a49 <VgaText::putchar(char)+0xd3>
c0010a30:	83 ec 0c             	sub    esp,0xc
c0010a33:	53                   	push   ebx
c0010a34:	e8 d9 fe ff ff       	call   c0010912 <VgaText::clearScreen()>
c0010a39:	83 c4 0c             	add    esp,0xc
c0010a3c:	6a 00                	push   0x0
c0010a3e:	6a 00                	push   0x0
c0010a40:	53                   	push   ebx
c0010a41:	e8 ba f7 ff ff       	call   c0010200 <VgaText::setCursor(int, int)>
c0010a46:	83 c4 10             	add    esp,0x10
c0010a49:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010a52:	eb 36                	jmp    c0010a8a <VgaText::putchar(char)+0x114>
c0010a54:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010a5a:	83 fa 0e             	cmp    edx,0xe
c0010a5d:	7f 2b                	jg     c0010a8a <VgaText::putchar(char)+0x114>
c0010a5f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a62:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010a68:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010a6f:	eb 19                	jmp    c0010a8a <VgaText::putchar(char)+0x114>
c0010a71:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a77:	0f be c0             	movsx  eax,al
c0010a7a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a80:	50                   	push   eax
c0010a81:	53                   	push   ebx
c0010a82:	e8 ab fa ff ff       	call   c0010532 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a87:	83 c4 10             	add    esp,0x10
c0010a8a:	83 c4 14             	add    esp,0x14
c0010a8d:	5b                   	pop    ebx
c0010a8e:	5e                   	pop    esi
c0010a8f:	c3                   	ret    

c0010a90 <VgaText::puts(char const*)>:
c0010a90:	53                   	push   ebx
c0010a91:	83 ec 08             	sub    esp,0x8
c0010a94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a98:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010a9b:	84 c0                	test   al,al
c0010a9d:	74 12                	je     c0010ab1 <VgaText::puts(char const*)+0x21>
c0010a9f:	43                   	inc    ebx
c0010aa0:	51                   	push   ecx
c0010aa1:	51                   	push   ecx
c0010aa2:	50                   	push   eax
c0010aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aa7:	e8 ca fe ff ff       	call   c0010976 <VgaText::putchar(char)>
c0010aac:	83 c4 10             	add    esp,0x10
c0010aaf:	eb e7                	jmp    c0010a98 <VgaText::puts(char const*)+0x8>
c0010ab1:	83 c4 08             	add    esp,0x8
c0010ab4:	5b                   	pop    ebx
c0010ab5:	c3                   	ret    

c0010ab6 <VgaText::putx(unsigned int)>:
c0010ab6:	57                   	push   edi
c0010ab7:	b9 11 00 00 00       	mov    ecx,0x11
c0010abc:	56                   	push   esi
c0010abd:	be 42 94 03 c0       	mov    esi,0xc0039442
c0010ac2:	53                   	push   ebx
c0010ac3:	83 ec 20             	sub    esp,0x20
c0010ac6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010aca:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010ace:	fc                   	cld    
c0010acf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ad1:	be 08 00 00 00       	mov    esi,0x8
c0010ad6:	50                   	push   eax
c0010ad7:	50                   	push   eax
c0010ad8:	89 d8                	mov    eax,ebx
c0010ada:	c1 e3 04             	shl    ebx,0x4
c0010add:	c1 e8 1c             	shr    eax,0x1c
c0010ae0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ae5:	50                   	push   eax
c0010ae6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010aea:	e8 87 fe ff ff       	call   c0010976 <VgaText::putchar(char)>
c0010aef:	83 c4 10             	add    esp,0x10
c0010af2:	4e                   	dec    esi
c0010af3:	75 e1                	jne    c0010ad6 <VgaText::putx(unsigned int)+0x20>
c0010af5:	83 c4 20             	add    esp,0x20
c0010af8:	5b                   	pop    ebx
c0010af9:	5e                   	pop    esi
c0010afa:	5f                   	pop    edi
c0010afb:	c3                   	ret    

c0010afc <VgaText::VgaText(char const*)>:
c0010afc:	57                   	push   edi
c0010afd:	56                   	push   esi
c0010afe:	53                   	push   ebx
c0010aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b03:	83 ec 08             	sub    esp,0x8
c0010b06:	6a 00                	push   0x0
c0010b08:	50                   	push   eax
c0010b09:	e8 b8 05 00 00       	call   c00110c6 <UnixFile::UnixFile(int)>
c0010b0e:	83 c4 10             	add    esp,0x10
c0010b11:	ba a8 94 03 c0       	mov    edx,0xc00394a8
c0010b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1a:	89 10                	mov    DWORD PTR [eax],edx
c0010b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b20:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b47:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b52:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b60:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b79:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b84:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010b8a:	bb 20 bf 03 c0       	mov    ebx,0xc003bf20
c0010b8f:	b8 08 00 00 00       	mov    eax,0x8
c0010b94:	fc                   	cld    
c0010b95:	89 d7                	mov    edi,edx
c0010b97:	89 de                	mov    esi,ebx
c0010b99:	89 c1                	mov    ecx,eax
c0010b9b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba1:	05 1e 10 00 00       	add    eax,0x101e
c0010ba6:	83 ec 08             	sub    esp,0x8
c0010ba9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bad:	50                   	push   eax
c0010bae:	e8 41 fc fe ff       	call   c00007f4 <strcpy>
c0010bb3:	83 c4 10             	add    esp,0x10
c0010bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bba:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc8:	83 c0 0c             	add    eax,0xc
c0010bcb:	83 ec 04             	sub    esp,0x4
c0010bce:	68 00 0f 00 00       	push   0xf00
c0010bd3:	6a 00                	push   0x0
c0010bd5:	50                   	push   eax
c0010bd6:	e8 fd fa fe ff       	call   c00006d8 <memset>
c0010bdb:	83 c4 10             	add    esp,0x10
c0010bde:	83 ec 04             	sub    esp,0x4
c0010be1:	6a 00                	push   0x0
c0010be3:	6a 07                	push   0x7
c0010be5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be9:	e8 c2 f4 ff ff       	call   c00100b0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010bee:	83 c4 10             	add    esp,0x10
c0010bf1:	83 ec 08             	sub    esp,0x8
c0010bf4:	6a 02                	push   0x2
c0010bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bfa:	e8 49 fa ff ff       	call   c0010648 <VgaText::setCursorHeight(int)>
c0010bff:	83 c4 10             	add    esp,0x10
c0010c02:	83 ec 04             	sub    esp,0x4
c0010c05:	6a 00                	push   0x0
c0010c07:	6a 00                	push   0x0
c0010c09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c0d:	e8 ee f5 ff ff       	call   c0010200 <VgaText::setCursor(int, int)>
c0010c12:	83 c4 10             	add    esp,0x10
c0010c15:	83 ec 08             	sub    esp,0x8
c0010c18:	6a 01                	push   0x1
c0010c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c1e:	e8 8b f3 ff ff       	call   c000ffae <VgaText::showCursor(bool)>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	83 ec 08             	sub    esp,0x8
c0010c29:	6a 01                	push   0x1
c0010c2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c2f:	e8 8a f3 ff ff       	call   c000ffbe <VgaText::disableBlink(bool)>
c0010c34:	83 c4 10             	add    esp,0x10
c0010c37:	83 ec 0c             	sub    esp,0xc
c0010c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c3e:	e8 cf fc ff ff       	call   c0010912 <VgaText::clearScreen()>
c0010c43:	83 c4 10             	add    esp,0x10
c0010c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c4a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c55:	05 9e 10 00 00       	add    eax,0x109e
c0010c5a:	83 ec 04             	sub    esp,0x4
c0010c5d:	68 96 00 00 00       	push   0x96
c0010c62:	6a 00                	push   0x0
c0010c64:	50                   	push   eax
c0010c65:	e8 6e fa fe ff       	call   c00006d8 <memset>
c0010c6a:	83 c4 10             	add    esp,0x10
c0010c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c71:	05 34 11 00 00       	add    eax,0x1134
c0010c76:	83 ec 04             	sub    esp,0x4
c0010c79:	68 2c 01 00 00       	push   0x12c
c0010c7e:	6a 00                	push   0x0
c0010c80:	50                   	push   eax
c0010c81:	e8 52 fa fe ff       	call   c00006d8 <memset>
c0010c86:	83 c4 10             	add    esp,0x10
c0010c89:	90                   	nop
c0010c8a:	5b                   	pop    ebx
c0010c8b:	5e                   	pop    esi
c0010c8c:	5f                   	pop    edi
c0010c8d:	c3                   	ret    

c0010c8e <VgaText::receiveKey(unsigned char)>:
c0010c8e:	55                   	push   ebp
c0010c8f:	57                   	push   edi
c0010c90:	56                   	push   esi
c0010c91:	53                   	push   ebx
c0010c92:	83 ec 1c             	sub    esp,0x1c
c0010c95:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c9d:	84 db                	test   bl,bl
c0010c9f:	0f 84 c9 00 00 00    	je     c0010d6e <VgaText::receiveKey(unsigned char)+0xe0>
c0010ca5:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010cab:	80 fb 08             	cmp    bl,0x8
c0010cae:	75 2c                	jne    c0010cdc <VgaText::receiveKey(unsigned char)+0x4e>
c0010cb0:	83 ec 0c             	sub    esp,0xc
c0010cb3:	57                   	push   edi
c0010cb4:	e8 48 fa fe ff       	call   c0000701 <strlen>
c0010cb9:	83 c4 10             	add    esp,0x10
c0010cbc:	85 c0                	test   eax,eax
c0010cbe:	74 41                	je     c0010d01 <VgaText::receiveKey(unsigned char)+0x73>
c0010cc0:	50                   	push   eax
c0010cc1:	50                   	push   eax
c0010cc2:	6a 08                	push   0x8
c0010cc4:	56                   	push   esi
c0010cc5:	e8 ac fc ff ff       	call   c0010976 <VgaText::putchar(char)>
c0010cca:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ccd:	e8 2f fa fe ff       	call   c0000701 <strlen>
c0010cd2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010cda:	eb 22                	jmp    c0010cfe <VgaText::receiveKey(unsigned char)+0x70>
c0010cdc:	0f be c3             	movsx  eax,bl
c0010cdf:	52                   	push   edx
c0010ce0:	52                   	push   edx
c0010ce1:	50                   	push   eax
c0010ce2:	56                   	push   esi
c0010ce3:	e8 8e fc ff ff       	call   c0010976 <VgaText::putchar(char)>
c0010ce8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010cec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010cf1:	59                   	pop    ecx
c0010cf2:	5d                   	pop    ebp
c0010cf3:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010cf7:	50                   	push   eax
c0010cf8:	57                   	push   edi
c0010cf9:	e8 43 fc fe ff       	call   c0000941 <strcat>
c0010cfe:	83 c4 10             	add    esp,0x10
c0010d01:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010d08:	75 05                	jne    c0010d0f <VgaText::receiveKey(unsigned char)+0x81>
c0010d0a:	80 fb 0a             	cmp    bl,0xa
c0010d0d:	75 53                	jne    c0010d62 <VgaText::receiveKey(unsigned char)+0xd4>
c0010d0f:	83 ec 0c             	sub    esp,0xc
c0010d12:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010d18:	53                   	push   ebx
c0010d19:	e8 e3 f9 fe ff       	call   c0000701 <strlen>
c0010d1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d21:	89 c5                	mov    ebp,eax
c0010d23:	e8 d9 f9 fe ff       	call   c0000701 <strlen>
c0010d28:	83 c4 10             	add    esp,0x10
c0010d2b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d2f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d34:	76 10                	jbe    c0010d46 <VgaText::receiveKey(unsigned char)+0xb8>
c0010d36:	83 ec 0c             	sub    esp,0xc
c0010d39:	68 53 94 03 c0       	push   0xc0039453
c0010d3e:	e8 c5 c2 ff ff       	call   c000d008 <panic(char const*)>
c0010d43:	83 c4 10             	add    esp,0x10
c0010d46:	50                   	push   eax
c0010d47:	50                   	push   eax
c0010d48:	57                   	push   edi
c0010d49:	53                   	push   ebx
c0010d4a:	e8 f2 fb fe ff       	call   c0000941 <strcat>
c0010d4f:	83 c4 0c             	add    esp,0xc
c0010d52:	68 96 00 00 00       	push   0x96
c0010d57:	6a 00                	push   0x0
c0010d59:	57                   	push   edi
c0010d5a:	e8 79 f9 fe ff       	call   c00006d8 <memset>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	83 ec 0c             	sub    esp,0xc
c0010d65:	56                   	push   esi
c0010d66:	e8 d5 f9 ff ff       	call   c0010740 <VgaText::doUpdate()>
c0010d6b:	83 c4 10             	add    esp,0x10
c0010d6e:	83 c4 1c             	add    esp,0x1c
c0010d71:	5b                   	pop    ebx
c0010d72:	5e                   	pop    esi
c0010d73:	5f                   	pop    edi
c0010d74:	5d                   	pop    ebp
c0010d75:	c3                   	ret    

c0010d76 <VgaText::write(unsigned long long, void*, int*)>:
c0010d76:	55                   	push   ebp
c0010d77:	57                   	push   edi
c0010d78:	56                   	push   esi
c0010d79:	53                   	push   ebx
c0010d7a:	83 ec 0c             	sub    esp,0xc
c0010d7d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d81:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d85:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d89:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010d90:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d93:	39 eb                	cmp    ebx,ebp
c0010d95:	74 13                	je     c0010daa <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d97:	43                   	inc    ebx
c0010d98:	50                   	push   eax
c0010d99:	50                   	push   eax
c0010d9a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010d9e:	50                   	push   eax
c0010d9f:	56                   	push   esi
c0010da0:	e8 d1 fb ff ff       	call   c0010976 <VgaText::putchar(char)>
c0010da5:	83 c4 10             	add    esp,0x10
c0010da8:	eb e9                	jmp    c0010d93 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010daa:	83 ec 0c             	sub    esp,0xc
c0010dad:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010db4:	56                   	push   esi
c0010db5:	e8 86 f9 ff ff       	call   c0010740 <VgaText::doUpdate()>
c0010dba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010dbe:	89 38                	mov    DWORD PTR [eax],edi
c0010dc0:	83 c4 1c             	add    esp,0x1c
c0010dc3:	31 c0                	xor    eax,eax
c0010dc5:	5b                   	pop    ebx
c0010dc6:	5e                   	pop    esi
c0010dc7:	5f                   	pop    edi
c0010dc8:	5d                   	pop    ebp
c0010dc9:	c3                   	ret    

c0010dca <newTerminal(char*)>:
c0010dca:	83 ec 28             	sub    esp,0x28
c0010dcd:	68 60 12 00 00       	push   0x1260
c0010dd2:	e8 c3 16 00 00       	call   c001249a <operator new(unsigned long)>
c0010dd7:	5a                   	pop    edx
c0010dd8:	59                   	pop    ecx
c0010dd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ddd:	50                   	push   eax
c0010dde:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010de2:	e8 15 fd ff ff       	call   c0010afc <VgaText::VgaText(char const*)>
c0010de7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010deb:	83 c4 2c             	add    esp,0x2c
c0010dee:	c3                   	ret    
c0010def:	90                   	nop

c0010df0 <TSS::TSS()>:
c0010df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010df4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dfb:	90                   	nop
c0010dfc:	c3                   	ret    
c0010dfd:	90                   	nop

c0010dfe <TSS::setESP(unsigned long)>:
c0010dfe:	55                   	push   ebp
c0010dff:	89 e5                	mov    ebp,esp
c0010e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e0a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e0d:	90                   	nop
c0010e0e:	5d                   	pop    ebp
c0010e0f:	c3                   	ret    

c0010e10 <TSS::flush()>:
c0010e10:	55                   	push   ebp
c0010e11:	89 e5                	mov    ebp,esp
c0010e13:	83 ec 10             	sub    esp,0x10
c0010e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e19:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e1b:	83 c8 03             	or     eax,0x3
c0010e1e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e22:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e26:	66 89 d0             	mov    ax,dx
c0010e29:	0f 00 d8             	ltr    ax
c0010e2c:	90                   	nop
c0010e2d:	c9                   	leave  
c0010e2e:	c3                   	ret    
c0010e2f:	90                   	nop

c0010e30 <TSS::setup(unsigned long, unsigned long)>:
c0010e30:	55                   	push   ebp
c0010e31:	89 e5                	mov    ebp,esp
c0010e33:	53                   	push   ebx
c0010e34:	83 ec 14             	sub    esp,0x14
c0010e37:	83 ec 0c             	sub    esp,0xc
c0010e3a:	6a 68                	push   0x68
c0010e3c:	e8 a4 c6 ff ff       	call   c000d4e5 <malloc>
c0010e41:	83 c4 10             	add    esp,0x10
c0010e44:	89 c2                	mov    edx,eax
c0010e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e52:	83 ec 04             	sub    esp,0x4
c0010e55:	6a 68                	push   0x68
c0010e57:	6a 00                	push   0x0
c0010e59:	50                   	push   eax
c0010e5a:	e8 79 f8 fe ff       	call   c00006d8 <memset>
c0010e5f:	83 c4 10             	add    esp,0x10
c0010e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e68:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e74:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8c:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e98:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea4:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ead:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb0:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ebc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ebf:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ec5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ecb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed4:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ede:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010ee1:	e8 53 db 00 00       	call   c001ea39 <CPU::readCR3()>
c0010ee6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eef:	83 ec 08             	sub    esp,0x8
c0010ef2:	50                   	push   eax
c0010ef3:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010ef6:	50                   	push   eax
c0010ef7:	e8 a6 b8 ff ff       	call   c000c7a2 <GDTEntry::setBase(unsigned int)>
c0010efc:	83 c4 10             	add    esp,0x10
c0010eff:	83 ec 08             	sub    esp,0x8
c0010f02:	6a 68                	push   0x68
c0010f04:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010f07:	50                   	push   eax
c0010f08:	e8 b1 b8 ff ff       	call   c000c7be <GDTEntry::setLimit(unsigned int)>
c0010f0d:	83 c4 10             	add    esp,0x10
c0010f10:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010f14:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010f17:	83 e0 0f             	and    eax,0xf
c0010f1a:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010f1d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010f20:	83 c8 40             	or     eax,0x40
c0010f23:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010f26:	e8 a5 62 00 00       	call   c00171d0 <thisCPU()>
c0010f2b:	05 78 01 00 00       	add    eax,0x178
c0010f30:	83 ec 04             	sub    esp,0x4
c0010f33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010f36:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f39:	50                   	push   eax
c0010f3a:	e8 b3 b8 ff ff       	call   c000c7f2 <GDT::addEntry(GDTEntry)>
c0010f3f:	83 c4 10             	add    esp,0x10
c0010f42:	89 c2                	mov    edx,eax
c0010f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f47:	89 10                	mov    DWORD PTR [eax],edx
c0010f49:	e8 82 62 00 00       	call   c00171d0 <thisCPU()>
c0010f4e:	05 78 01 00 00       	add    eax,0x178
c0010f53:	83 ec 0c             	sub    esp,0xc
c0010f56:	50                   	push   eax
c0010f57:	e8 da b8 ff ff       	call   c000c836 <GDT::flush()>
c0010f5c:	83 c4 10             	add    esp,0x10
c0010f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f62:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f64:	83 ec 08             	sub    esp,0x8
c0010f67:	50                   	push   eax
c0010f68:	68 bc 94 03 c0       	push   0xc00394bc
c0010f6d:	e8 78 bf ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0010f72:	83 c4 10             	add    esp,0x10
c0010f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f78:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f7a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010f7d:	c9                   	leave  
c0010f7e:	c3                   	ret    
c0010f7f:	90                   	nop

c0010f80 <ReservedFilename::isAtty()>:
c0010f80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f87:	31 c0                	xor    eax,eax
c0010f89:	83 fa 08             	cmp    edx,0x8
c0010f8c:	74 06                	je     c0010f94 <ReservedFilename::isAtty()+0x14>
c0010f8e:	83 fa 06             	cmp    edx,0x6
c0010f91:	0f 94 c0             	sete   al
c0010f94:	c3                   	ret    
c0010f95:	90                   	nop

c0010f96 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010f96:	55                   	push   ebp
c0010f97:	57                   	push   edi
c0010f98:	56                   	push   esi
c0010f99:	53                   	push   ebx
c0010f9a:	83 ec 0c             	sub    esp,0xc
c0010f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fa1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fa8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010fac:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010fb0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010fb4:	83 f8 08             	cmp    eax,0x8
c0010fb7:	75 08                	jne    c0010fc1 <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010fbf:	eb 5c                	jmp    c001101d <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010fc1:	83 f8 06             	cmp    eax,0x6
c0010fc4:	75 3d                	jne    c0011003 <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010fc6:	83 ec 0c             	sub    esp,0xc
c0010fc9:	68 da 94 03 c0       	push   0xc00394da
c0010fce:	e8 17 bf ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0010fd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fdb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fe1:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fe3:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010fe7:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010feb:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010fef:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010ff3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010ff7:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0010ffa:	83 c4 1c             	add    esp,0x1c
c0010ffd:	5b                   	pop    ebx
c0010ffe:	5e                   	pop    esi
c0010fff:	5f                   	pop    edi
c0011000:	5d                   	pop    ebp
c0011001:	ff e0                	jmp    eax
c0011003:	89 c2                	mov    edx,eax
c0011005:	83 e2 fd             	and    edx,0xfffffffd
c0011008:	83 fa 05             	cmp    edx,0x5
c001100b:	74 ac                	je     c0010fb9 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c001100d:	8d 50 f5             	lea    edx,[eax-0xb]
c0011010:	83 fa 08             	cmp    edx,0x8
c0011013:	76 a4                	jbe    c0010fb9 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0011015:	83 e8 15             	sub    eax,0x15
c0011018:	83 f8 08             	cmp    eax,0x8
c001101b:	76 9c                	jbe    c0010fb9 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c001101d:	83 c4 0c             	add    esp,0xc
c0011020:	31 c0                	xor    eax,eax
c0011022:	5b                   	pop    ebx
c0011023:	5e                   	pop    esi
c0011024:	5f                   	pop    edi
c0011025:	5d                   	pop    ebp
c0011026:	c3                   	ret    
c0011027:	90                   	nop

c0011028 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011028:	55                   	push   ebp
c0011029:	57                   	push   edi
c001102a:	56                   	push   esi
c001102b:	53                   	push   ebx
c001102c:	83 ec 0c             	sub    esp,0xc
c001102f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011033:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011037:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001103e:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0011042:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011046:	83 f8 08             	cmp    eax,0x8
c0011049:	75 08                	jne    c0011053 <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c001104b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011051:	eb 60                	jmp    c00110b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0011053:	83 f8 06             	cmp    eax,0x6
c0011056:	75 3d                	jne    c0011095 <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c0011058:	83 ec 0c             	sub    esp,0xc
c001105b:	68 e7 94 03 c0       	push   0xc00394e7
c0011060:	e8 85 be ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011065:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001106a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001106d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011073:	8b 10                	mov    edx,DWORD PTR [eax]
c0011075:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0011079:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c001107d:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0011081:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0011085:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011089:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c001108c:	83 c4 1c             	add    esp,0x1c
c001108f:	5b                   	pop    ebx
c0011090:	5e                   	pop    esi
c0011091:	5f                   	pop    edi
c0011092:	5d                   	pop    ebp
c0011093:	ff e0                	jmp    eax
c0011095:	83 f8 05             	cmp    eax,0x5
c0011098:	75 04                	jne    c001109e <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c001109a:	89 33                	mov    DWORD PTR [ebx],esi
c001109c:	eb 15                	jmp    c00110b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c001109e:	83 f8 07             	cmp    eax,0x7
c00110a1:	74 a8                	je     c001104b <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c00110a3:	8d 50 f5             	lea    edx,[eax-0xb]
c00110a6:	83 fa 08             	cmp    edx,0x8
c00110a9:	76 a0                	jbe    c001104b <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c00110ab:	83 e8 15             	sub    eax,0x15
c00110ae:	83 f8 08             	cmp    eax,0x8
c00110b1:	76 98                	jbe    c001104b <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c00110b3:	83 c4 0c             	add    esp,0xc
c00110b6:	31 c0                	xor    eax,eax
c00110b8:	5b                   	pop    ebx
c00110b9:	5e                   	pop    esi
c00110ba:	5f                   	pop    edi
c00110bb:	5d                   	pop    ebp
c00110bc:	c3                   	ret    
c00110bd:	90                   	nop

c00110be <UnixFile::getFileDescriptor()>:
c00110be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c5:	c3                   	ret    

c00110c6 <UnixFile::UnixFile(int)>:
c00110c6:	83 ec 0c             	sub    esp,0xc
c00110c9:	ba 4c 95 03 c0       	mov    edx,0xc003954c
c00110ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d2:	89 10                	mov    DWORD PTR [eax],edx
c00110d4:	a1 40 af 03 c0       	mov    eax,ds:0xc003af40
c00110d9:	8d 50 01             	lea    edx,[eax+0x1]
c00110dc:	89 15 40 af 03 c0    	mov    DWORD PTR ds:0xc003af40,edx
c00110e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00110e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00110e9:	83 ec 08             	sub    esp,0x8
c00110ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110f0:	68 50 bf 03 c0       	push   0xc003bf50
c00110f5:	e8 be dc 00 00       	call   c001edb8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110fa:	83 c4 10             	add    esp,0x10
c00110fd:	90                   	nop
c00110fe:	83 c4 0c             	add    esp,0xc
c0011101:	c3                   	ret    

c0011102 <ReservedFilename::ReservedFilename(int)>:
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011109:	83 ec 08             	sub    esp,0x8
c001110c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011110:	50                   	push   eax
c0011111:	e8 b0 ff ff ff       	call   c00110c6 <UnixFile::UnixFile(int)>
c0011116:	83 c4 10             	add    esp,0x10
c0011119:	ba 68 95 03 c0       	mov    edx,0xc0039568
c001111e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011122:	89 10                	mov    DWORD PTR [eax],edx
c0011124:	90                   	nop
c0011125:	83 c4 0c             	add    esp,0xc
c0011128:	c3                   	ret    
c0011129:	90                   	nop

c001112a <UnixFile::~UnixFile()>:
c001112a:	83 ec 1c             	sub    esp,0x1c
c001112d:	ba 4c 95 03 c0       	mov    edx,0xc003954c
c0011132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011136:	89 10                	mov    DWORD PTR [eax],edx
c0011138:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011140:	83 ec 0c             	sub    esp,0xc
c0011143:	68 50 bf 03 c0       	push   0xc003bf50
c0011148:	e8 b9 db 00 00       	call   c001ed06 <LinkedList<UnixFile>::getFirstElement()>
c001114d:	83 c4 10             	add    esp,0x10
c0011150:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011154:	83 ec 0c             	sub    esp,0xc
c0011157:	68 50 bf 03 c0       	push   0xc003bf50
c001115c:	e8 ad db 00 00       	call   c001ed0e <LinkedList<UnixFile>::removeFirst()>
c0011161:	83 c4 10             	add    esp,0x10
c0011164:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011168:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001116c:	74 3d                	je     c00111ab <UnixFile::~UnixFile()+0x81>
c001116e:	83 ec 08             	sub    esp,0x8
c0011171:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011175:	68 50 bf 03 c0       	push   0xc003bf50
c001117a:	e8 39 dc 00 00       	call   c001edb8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001117f:	83 c4 10             	add    esp,0x10
c0011182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011186:	8d 50 01             	lea    edx,[eax+0x1]
c0011189:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001118d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011192:	0f 94 c0             	sete   al
c0011195:	84 c0                	test   al,al
c0011197:	74 a7                	je     c0011140 <UnixFile::~UnixFile()+0x16>
c0011199:	83 ec 0c             	sub    esp,0xc
c001119c:	68 24 95 03 c0       	push   0xc0039524
c00111a1:	e8 62 be ff ff       	call   c000d008 <panic(char const*)>
c00111a6:	83 c4 10             	add    esp,0x10
c00111a9:	eb 95                	jmp    c0011140 <UnixFile::~UnixFile()+0x16>
c00111ab:	90                   	nop
c00111ac:	83 c4 1c             	add    esp,0x1c
c00111af:	c3                   	ret    

c00111b0 <UnixFile::~UnixFile()>:
c00111b0:	83 ec 0c             	sub    esp,0xc
c00111b3:	83 ec 0c             	sub    esp,0xc
c00111b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ba:	e8 6b ff ff ff       	call   c001112a <UnixFile::~UnixFile()>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	83 ec 08             	sub    esp,0x8
c00111c5:	6a 0c                	push   0xc
c00111c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111cb:	e8 d9 12 00 00       	call   c00124a9 <operator delete(void*, unsigned long)>
c00111d0:	83 c4 10             	add    esp,0x10
c00111d3:	83 c4 0c             	add    esp,0xc
c00111d6:	c3                   	ret    
c00111d7:	90                   	nop

c00111d8 <ReservedFilename::~ReservedFilename()>:
c00111d8:	83 ec 0c             	sub    esp,0xc
c00111db:	ba 68 95 03 c0       	mov    edx,0xc0039568
c00111e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e4:	89 10                	mov    DWORD PTR [eax],edx
c00111e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ea:	83 ec 0c             	sub    esp,0xc
c00111ed:	50                   	push   eax
c00111ee:	e8 37 ff ff ff       	call   c001112a <UnixFile::~UnixFile()>
c00111f3:	83 c4 10             	add    esp,0x10
c00111f6:	90                   	nop
c00111f7:	83 c4 0c             	add    esp,0xc
c00111fa:	c3                   	ret    
c00111fb:	90                   	nop

c00111fc <ReservedFilename::~ReservedFilename()>:
c00111fc:	83 ec 0c             	sub    esp,0xc
c00111ff:	83 ec 0c             	sub    esp,0xc
c0011202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011206:	e8 cd ff ff ff       	call   c00111d8 <ReservedFilename::~ReservedFilename()>
c001120b:	83 c4 10             	add    esp,0x10
c001120e:	83 ec 08             	sub    esp,0x8
c0011211:	6a 0c                	push   0xc
c0011213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011217:	e8 8d 12 00 00       	call   c00124a9 <operator delete(void*, unsigned long)>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	83 c4 0c             	add    esp,0xc
c0011222:	c3                   	ret    

c0011223 <getFromFileDescriptor(int)>:
c0011223:	83 ec 18             	sub    esp,0x18
c0011226:	68 50 bf 03 c0       	push   0xc003bf50
c001122b:	e8 d6 da 00 00       	call   c001ed06 <LinkedList<UnixFile>::getFirstElement()>
c0011230:	83 c4 10             	add    esp,0x10
c0011233:	85 c0                	test   eax,eax
c0011235:	74 18                	je     c001124f <getFromFileDescriptor(int)+0x2c>
c0011237:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001123b:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c001123e:	74 0f                	je     c001124f <getFromFileDescriptor(int)+0x2c>
c0011240:	52                   	push   edx
c0011241:	52                   	push   edx
c0011242:	50                   	push   eax
c0011243:	68 50 bf 03 c0       	push   0xc003bf50
c0011248:	e8 63 db 00 00       	call   c001edb0 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001124d:	eb e1                	jmp    c0011230 <getFromFileDescriptor(int)+0xd>
c001124f:	83 c4 0c             	add    esp,0xc
c0011252:	c3                   	ret    

c0011253 <__static_initialization_and_destruction_0(int, int)>:
c0011253:	83 ec 0c             	sub    esp,0xc
c0011256:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001125b:	75 34                	jne    c0011291 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001125d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011265:	75 2a                	jne    c0011291 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011267:	83 ec 0c             	sub    esp,0xc
c001126a:	68 50 bf 03 c0       	push   0xc003bf50
c001126f:	e8 3a da 00 00       	call   c001ecae <LinkedList<UnixFile>::LinkedList()>
c0011274:	83 c4 10             	add    esp,0x10
c0011277:	83 ec 04             	sub    esp,0x4
c001127a:	68 cc ae 03 c0       	push   0xc003aecc
c001127f:	68 50 bf 03 c0       	push   0xc003bf50
c0011284:	68 ac ec 01 c0       	push   0xc001ecac
c0011289:	e8 97 11 00 00       	call   c0012425 <__cxa_atexit>
c001128e:	83 c4 10             	add    esp,0x10
c0011291:	90                   	nop
c0011292:	83 c4 0c             	add    esp,0xc
c0011295:	c3                   	ret    

c0011296 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011296:	83 ec 0c             	sub    esp,0xc
c0011299:	83 ec 08             	sub    esp,0x8
c001129c:	68 ff ff 00 00       	push   0xffff
c00112a1:	6a 01                	push   0x1
c00112a3:	e8 ab ff ff ff       	call   c0011253 <__static_initialization_and_destruction_0(int, int)>
c00112a8:	83 c4 10             	add    esp,0x10
c00112ab:	83 c4 0c             	add    esp,0xc
c00112ae:	c3                   	ret    
c00112af:	90                   	nop

c00112b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00112b0:	53                   	push   ebx
c00112b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00112b9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00112bf:	89 c8                	mov    eax,ecx
c00112c1:	d1 e8                	shr    eax,1
c00112c3:	03 05 48 af 03 c0    	add    eax,DWORD PTR ds:0xc003af48
c00112c9:	83 e1 01             	and    ecx,0x1
c00112cc:	8a 10                	mov    dl,BYTE PTR [eax]
c00112ce:	75 09                	jne    c00112d9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00112d0:	83 e2 f0             	and    edx,0xfffffff0
c00112d3:	09 da                	or     edx,ebx
c00112d5:	88 10                	mov    BYTE PTR [eax],dl
c00112d7:	5b                   	pop    ebx
c00112d8:	c3                   	ret    
c00112d9:	c1 e3 04             	shl    ebx,0x4
c00112dc:	83 e2 0f             	and    edx,0xf
c00112df:	09 da                	or     edx,ebx
c00112e1:	88 10                	mov    BYTE PTR [eax],dl
c00112e3:	5b                   	pop    ebx
c00112e4:	c3                   	ret    

c00112e5 <Virt::getPageState(unsigned long)>:
c00112e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e9:	8b 0d 48 af 03 c0    	mov    ecx,DWORD PTR ds:0xc003af48
c00112ef:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00112f5:	89 d0                	mov    eax,edx
c00112f7:	d1 e8                	shr    eax,1
c00112f9:	83 e2 01             	and    edx,0x1
c00112fc:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00112ff:	75 04                	jne    c0011305 <Virt::getPageState(unsigned long)+0x20>
c0011301:	83 e0 0f             	and    eax,0xf
c0011304:	c3                   	ret    
c0011305:	c0 e8 04             	shr    al,0x4
c0011308:	c3                   	ret    

c0011309 <Virt::allocateKernelVirtualPages(int)>:
c0011309:	55                   	push   ebp
c001130a:	31 ed                	xor    ebp,ebp
c001130c:	57                   	push   edi
c001130d:	56                   	push   esi
c001130e:	53                   	push   ebx
c001130f:	31 db                	xor    ebx,ebx
c0011311:	83 ec 1c             	sub    esp,0x1c
c0011314:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011318:	8b 3d 44 af 03 c0    	mov    edi,DWORD PTR ds:0xc003af44
c001131e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011323:	57                   	push   edi
c0011324:	e8 bc ff ff ff       	call   c00112e5 <Virt::getPageState(unsigned long)>
c0011329:	5a                   	pop    edx
c001132a:	84 c0                	test   al,al
c001132c:	75 3a                	jne    c0011368 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001132e:	85 db                	test   ebx,ebx
c0011330:	75 02                	jne    c0011334 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011332:	89 fd                	mov    ebp,edi
c0011334:	43                   	inc    ebx
c0011335:	39 f3                	cmp    ebx,esi
c0011337:	74 5a                	je     c0011393 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011339:	47                   	inc    edi
c001133a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011340:	76 31                	jbe    c0011373 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011342:	c7 05 44 af 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc003af44,0xc8000
c001134c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011351:	75 28                	jne    c001137b <Virt::allocateKernelVirtualPages(int)+0x72>
c0011353:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011358:	bf 00 80 0c 00       	mov    edi,0xc8000
c001135d:	57                   	push   edi
c001135e:	e8 82 ff ff ff       	call   c00112e5 <Virt::getPageState(unsigned long)>
c0011363:	5a                   	pop    edx
c0011364:	84 c0                	test   al,al
c0011366:	74 c6                	je     c001132e <Virt::allocateKernelVirtualPages(int)+0x25>
c0011368:	31 db                	xor    ebx,ebx
c001136a:	47                   	inc    edi
c001136b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011371:	77 cf                	ja     c0011342 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011373:	89 3d 44 af 03 c0    	mov    DWORD PTR ds:0xc003af44,edi
c0011379:	eb a8                	jmp    c0011323 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001137b:	83 ec 0c             	sub    esp,0xc
c001137e:	68 7c 95 03 c0       	push   0xc003957c
c0011383:	e8 80 bc ff ff       	call   c000d008 <panic(char const*)>
c0011388:	8b 3d 44 af 03 c0    	mov    edi,DWORD PTR ds:0xc003af44
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	eb 90                	jmp    c0011323 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011393:	89 2d 44 af 03 c0    	mov    DWORD PTR ds:0xc003af44,ebp
c0011399:	4b                   	dec    ebx
c001139a:	74 5f                	je     c00113fb <Virt::allocateKernelVirtualPages(int)+0xf2>
c001139c:	85 f6                	test   esi,esi
c001139e:	74 3d                	je     c00113dd <Virt::allocateKernelVirtualPages(int)+0xd4>
c00113a0:	89 e8                	mov    eax,ebp
c00113a2:	31 db                	xor    ebx,ebx
c00113a4:	8d 7e ff             	lea    edi,[esi-0x1]
c00113a7:	eb 14                	jmp    c00113bd <Virt::allocateKernelVirtualPages(int)+0xb4>
c00113a9:	6a 01                	push   0x1
c00113ab:	43                   	inc    ebx
c00113ac:	50                   	push   eax
c00113ad:	e8 fe fe ff ff       	call   c00112b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113b2:	58                   	pop    eax
c00113b3:	39 f3                	cmp    ebx,esi
c00113b5:	5a                   	pop    edx
c00113b6:	74 25                	je     c00113dd <Virt::allocateKernelVirtualPages(int)+0xd4>
c00113b8:	a1 44 af 03 c0       	mov    eax,ds:0xc003af44
c00113bd:	8d 50 01             	lea    edx,[eax+0x1]
c00113c0:	85 db                	test   ebx,ebx
c00113c2:	89 15 44 af 03 c0    	mov    DWORD PTR ds:0xc003af44,edx
c00113c8:	74 20                	je     c00113ea <Virt::allocateKernelVirtualPages(int)+0xe1>
c00113ca:	39 df                	cmp    edi,ebx
c00113cc:	75 db                	jne    c00113a9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00113ce:	6a 03                	push   0x3
c00113d0:	43                   	inc    ebx
c00113d1:	50                   	push   eax
c00113d2:	e8 d9 fe ff ff       	call   c00112b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113d7:	59                   	pop    ecx
c00113d8:	39 f3                	cmp    ebx,esi
c00113da:	58                   	pop    eax
c00113db:	75 db                	jne    c00113b8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00113dd:	83 c4 1c             	add    esp,0x1c
c00113e0:	89 e8                	mov    eax,ebp
c00113e2:	5b                   	pop    ebx
c00113e3:	c1 e0 0c             	shl    eax,0xc
c00113e6:	5e                   	pop    esi
c00113e7:	5f                   	pop    edi
c00113e8:	5d                   	pop    ebp
c00113e9:	c3                   	ret    
c00113ea:	6a 02                	push   0x2
c00113ec:	bb 01 00 00 00       	mov    ebx,0x1
c00113f1:	50                   	push   eax
c00113f2:	e8 b9 fe ff ff       	call   c00112b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113f7:	58                   	pop    eax
c00113f8:	5a                   	pop    edx
c00113f9:	eb bd                	jmp    c00113b8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00113fb:	6a 04                	push   0x4
c00113fd:	8d 45 01             	lea    eax,[ebp+0x1]
c0011400:	55                   	push   ebp
c0011401:	a3 44 af 03 c0       	mov    ds:0xc003af44,eax
c0011406:	e8 a5 fe ff ff       	call   c00112b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001140b:	59                   	pop    ecx
c001140c:	89 e8                	mov    eax,ebp
c001140e:	5b                   	pop    ebx
c001140f:	c1 e0 0c             	shl    eax,0xc
c0011412:	83 c4 1c             	add    esp,0x1c
c0011415:	5b                   	pop    ebx
c0011416:	5e                   	pop    esi
c0011417:	5f                   	pop    edi
c0011418:	5d                   	pop    ebp
c0011419:	c3                   	ret    

c001141a <Virt::virtualMemorySetup()>:
c001141a:	53                   	push   ebx
c001141b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011420:	83 ec 08             	sub    esp,0x8
c0011423:	6a 0f                	push   0xf
c0011425:	53                   	push   ebx
c0011426:	43                   	inc    ebx
c0011427:	e8 84 fe ff ff       	call   c00112b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001142c:	59                   	pop    ecx
c001142d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011433:	58                   	pop    eax
c0011434:	75 ed                	jne    c0011423 <Virt::virtualMemorySetup()+0x9>
c0011436:	83 ec 08             	sub    esp,0x8
c0011439:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001143e:	68 00 00 00 c8       	push   0xc8000000
c0011443:	68 27 97 03 c0       	push   0xc0039727
c0011448:	e8 9d ba ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001144d:	58                   	pop    eax
c001144e:	5a                   	pop    edx
c001144f:	68 00 f0 ff ef       	push   0xeffff000
c0011454:	68 3b 97 03 c0       	push   0xc003973b
c0011459:	e8 8c ba ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	83 ec 08             	sub    esp,0x8
c0011464:	6a 00                	push   0x0
c0011466:	53                   	push   ebx
c0011467:	43                   	inc    ebx
c0011468:	e8 43 fe ff ff       	call   c00112b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001146d:	83 c4 10             	add    esp,0x10
c0011470:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011476:	75 e9                	jne    c0011461 <Virt::virtualMemorySetup()+0x47>
c0011478:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001147d:	83 ec 08             	sub    esp,0x8
c0011480:	6a 0f                	push   0xf
c0011482:	53                   	push   ebx
c0011483:	43                   	inc    ebx
c0011484:	e8 27 fe ff ff       	call   c00112b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011489:	83 c4 10             	add    esp,0x10
c001148c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011492:	75 e9                	jne    c001147d <Virt::virtualMemorySetup()+0x63>
c0011494:	83 c4 08             	add    esp,0x8
c0011497:	5b                   	pop    ebx
c0011498:	c3                   	ret    

c0011499 <Virt::getAKernelVAS()>:
c0011499:	a1 5c bf 03 c0       	mov    eax,ds:0xc003bf5c
c001149e:	c3                   	ret    

c001149f <Virt::setupPageSwapping(int)>:
c001149f:	57                   	push   edi
c00114a0:	56                   	push   esi
c00114a1:	53                   	push   ebx
c00114a2:	83 ec 1c             	sub    esp,0x1c
c00114a5:	68 14 01 00 00       	push   0x114
c00114aa:	e8 eb 0f 00 00       	call   c001249a <operator new(unsigned long)>
c00114af:	83 c4 0c             	add    esp,0xc
c00114b2:	89 c6                	mov    esi,eax
c00114b4:	ff 35 fc bc 03 c0    	push   DWORD PTR ds:0xc003bcfc
c00114ba:	68 4f 97 03 c0       	push   0xc003974f
c00114bf:	50                   	push   eax
c00114c0:	e8 03 14 00 00       	call   c00128c8 <File::File(char const*, Process*)>
c00114c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00114c8:	e8 d7 15 00 00       	call   c0012aa4 <File::unlink()>
c00114cd:	58                   	pop    eax
c00114ce:	5a                   	pop    edx
c00114cf:	6a 12                	push   0x12
c00114d1:	56                   	push   esi
c00114d2:	e8 55 14 00 00       	call   c001292c <File::open(FileOpenMode)>
c00114d7:	83 c4 10             	add    esp,0x10
c00114da:	85 c0                	test   eax,eax
c00114dc:	0f 85 bf 00 00 00    	jne    c00115a1 <Virt::setupPageSwapping(int)+0x102>
c00114e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114ee:	c1 e3 08             	shl    ebx,0x8
c00114f1:	83 ec 0c             	sub    esp,0xc
c00114f4:	68 00 00 01 00       	push   0x10000
c00114f9:	e8 e7 bf ff ff       	call   c000d4e5 <malloc>
c00114fe:	83 c4 0c             	add    esp,0xc
c0011501:	89 c7                	mov    edi,eax
c0011503:	68 00 00 01 00       	push   0x10000
c0011508:	6a 00                	push   0x0
c001150a:	50                   	push   eax
c001150b:	e8 c8 f1 fe ff       	call   c00006d8 <memset>
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	85 db                	test   ebx,ebx
c0011515:	79 03                	jns    c001151a <Virt::setupPageSwapping(int)+0x7b>
c0011517:	83 c3 0f             	add    ebx,0xf
c001151a:	c1 fb 04             	sar    ebx,0x4
c001151d:	4b                   	dec    ebx
c001151e:	83 fb ff             	cmp    ebx,0xffffffff
c0011521:	74 4b                	je     c001156e <Virt::setupPageSwapping(int)+0xcf>
c0011523:	83 ec 0c             	sub    esp,0xc
c0011526:	8b 06                	mov    eax,DWORD PTR [esi]
c0011528:	8d 54 24 18          	lea    edx,[esp+0x18]
c001152c:	52                   	push   edx
c001152d:	57                   	push   edi
c001152e:	6a 00                	push   0x0
c0011530:	68 00 00 01 00       	push   0x10000
c0011535:	56                   	push   esi
c0011536:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011539:	83 c4 20             	add    esp,0x20
c001153c:	85 c0                	test   eax,eax
c001153e:	75 4e                	jne    c001158e <Virt::setupPageSwapping(int)+0xef>
c0011540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011544:	3d 00 00 01 00       	cmp    eax,0x10000
c0011549:	74 d2                	je     c001151d <Virt::setupPageSwapping(int)+0x7e>
c001154b:	83 ec 08             	sub    esp,0x8
c001154e:	4b                   	dec    ebx
c001154f:	50                   	push   eax
c0011550:	68 a2 97 03 c0       	push   0xc00397a2
c0011555:	e8 90 b9 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001155a:	c7 04 24 ab 97 03 c0 	mov    DWORD PTR [esp],0xc00397ab
c0011561:	e8 a2 ba ff ff       	call   c000d008 <panic(char const*)>
c0011566:	83 c4 10             	add    esp,0x10
c0011569:	83 fb ff             	cmp    ebx,0xffffffff
c001156c:	75 b5                	jne    c0011523 <Virt::setupPageSwapping(int)+0x84>
c001156e:	83 ec 0c             	sub    esp,0xc
c0011571:	56                   	push   esi
c0011572:	e8 13 14 00 00       	call   c001298a <File::close()>
c0011577:	89 3c 24             	mov    DWORD PTR [esp],edi
c001157a:	e8 86 bf ff ff       	call   c000d505 <rfree>
c001157f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011582:	8b 06                	mov    eax,DWORD PTR [esi]
c0011584:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011587:	83 c4 20             	add    esp,0x20
c001158a:	5b                   	pop    ebx
c001158b:	5e                   	pop    esi
c001158c:	5f                   	pop    edi
c001158d:	c3                   	ret    
c001158e:	83 ec 08             	sub    esp,0x8
c0011591:	50                   	push   eax
c0011592:	68 8a 97 03 c0       	push   0xc003978a
c0011597:	e8 4e b9 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001159c:	83 c4 10             	add    esp,0x10
c001159f:	eb 9f                	jmp    c0011540 <Virt::setupPageSwapping(int)+0xa1>
c00115a1:	83 ec 08             	sub    esp,0x8
c00115a4:	50                   	push   eax
c00115a5:	68 66 97 03 c0       	push   0xc0039766
c00115aa:	e8 3b b9 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00115af:	c7 04 24 6f 97 03 c0 	mov    DWORD PTR [esp],0xc003976f
c00115b6:	e8 4d ba ff ff       	call   c000d008 <panic(char const*)>
c00115bb:	83 c4 10             	add    esp,0x10
c00115be:	e9 1f ff ff ff       	jmp    c00114e2 <Virt::setupPageSwapping(int)+0x43>
c00115c3:	90                   	nop

c00115c4 <VAS::VAS()>:
c00115c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d3:	a3 5c bf 03 c0       	mov    ds:0xc003bf5c,eax
c00115d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115dc:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115e4:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115eb:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c00115f2:	90                   	nop
c00115f3:	c3                   	ret    

c00115f4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115f8:	89 c2                	mov    edx,eax
c00115fa:	c1 e8 0a             	shr    eax,0xa
c00115fd:	c1 ea 16             	shr    edx,0x16
c0011600:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011605:	19 c9                	sbb    ecx,ecx
c0011607:	c1 e2 0c             	shl    edx,0xc
c001160a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011610:	25 fc 0f 00 00       	and    eax,0xffc
c0011615:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001161c:	01 d0                	add    eax,edx
c001161e:	c3                   	ret    
c001161f:	90                   	nop

c0011620 <VAS::getPageTableEntry(unsigned long)>:
c0011620:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011624:	89 ca                	mov    edx,ecx
c0011626:	c1 e9 0a             	shr    ecx,0xa
c0011629:	c1 ea 16             	shr    edx,0x16
c001162c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011632:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011638:	c1 e0 0c             	shl    eax,0xc
c001163b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001163e:	c3                   	ret    

c001163f <Virt::freeKernelVirtualPages(unsigned long)>:
c001163f:	57                   	push   edi
c0011640:	56                   	push   esi
c0011641:	be 01 00 00 00       	mov    esi,0x1
c0011646:	53                   	push   ebx
c0011647:	83 ec 10             	sub    esp,0x10
c001164a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001164e:	c1 eb 0c             	shr    ebx,0xc
c0011651:	eb 3f                	jmp    c0011692 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011653:	e8 41 fe ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c0011658:	83 ec 08             	sub    esp,0x8
c001165b:	57                   	push   edi
c001165c:	50                   	push   eax
c001165d:	e8 be ff ff ff       	call   c0011620 <VAS::getPageTableEntry(unsigned long)>
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	8b 00                	mov    eax,DWORD PTR [eax]
c0011667:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001166b:	f6 c4 04             	test   ah,0x4
c001166e:	75 5f                	jne    c00116cf <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011670:	80 fa 04             	cmp    dl,0x4
c0011673:	74 78                	je     c00116ed <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011675:	80 fa 02             	cmp    dl,0x2
c0011678:	0f 84 88 00 00 00    	je     c0011706 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001167e:	80 fa 03             	cmp    dl,0x3
c0011681:	0f 84 ad 00 00 00    	je     c0011734 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011687:	fe ca                	dec    dl
c0011689:	0f 84 92 00 00 00    	je     c0011721 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001168f:	43                   	inc    ebx
c0011690:	31 f6                	xor    esi,esi
c0011692:	53                   	push   ebx
c0011693:	e8 4d fc ff ff       	call   c00112e5 <Virt::getPageState(unsigned long)>
c0011698:	5f                   	pop    edi
c0011699:	89 df                	mov    edi,ebx
c001169b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001169f:	c1 e7 0c             	shl    edi,0xc
c00116a2:	84 c0                	test   al,al
c00116a4:	75 ad                	jne    c0011653 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116a6:	83 ec 0c             	sub    esp,0xc
c00116a9:	68 b1 97 03 c0       	push   0xc00397b1
c00116ae:	e8 55 b9 ff ff       	call   c000d008 <panic(char const*)>
c00116b3:	e8 e1 fd ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c00116b8:	5a                   	pop    edx
c00116b9:	59                   	pop    ecx
c00116ba:	57                   	push   edi
c00116bb:	50                   	push   eax
c00116bc:	e8 5f ff ff ff       	call   c0011620 <VAS::getPageTableEntry(unsigned long)>
c00116c1:	83 c4 10             	add    esp,0x10
c00116c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00116c6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116ca:	f6 c4 04             	test   ah,0x4
c00116cd:	74 c0                	je     c001168f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116cf:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116d8:	83 ec 0c             	sub    esp,0xc
c00116db:	50                   	push   eax
c00116dc:	e8 24 c3 ff ff       	call   c000da05 <Phys::freePage(unsigned long)>
c00116e1:	83 c4 10             	add    esp,0x10
c00116e4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116e8:	80 fa 04             	cmp    dl,0x4
c00116eb:	75 88                	jne    c0011675 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116ed:	89 f0                	mov    eax,esi
c00116ef:	84 c0                	test   al,al
c00116f1:	75 47                	jne    c001173a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116f3:	c7 44 24 20 9c 95 03 c0 	mov    DWORD PTR [esp+0x20],0xc003959c
c00116fb:	83 c4 10             	add    esp,0x10
c00116fe:	5b                   	pop    ebx
c00116ff:	5e                   	pop    esi
c0011700:	5f                   	pop    edi
c0011701:	e9 02 b9 ff ff       	jmp    c000d008 <panic(char const*)>
c0011706:	89 f0                	mov    eax,esi
c0011708:	84 c0                	test   al,al
c001170a:	75 15                	jne    c0011721 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001170c:	83 ec 0c             	sub    esp,0xc
c001170f:	68 cd 97 03 c0       	push   0xc00397cd
c0011714:	e8 ef b8 ff ff       	call   c000d008 <panic(char const*)>
c0011719:	83 c4 10             	add    esp,0x10
c001171c:	e9 6e ff ff ff       	jmp    c001168f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011721:	83 ec 08             	sub    esp,0x8
c0011724:	6a 00                	push   0x0
c0011726:	53                   	push   ebx
c0011727:	e8 84 fb ff ff       	call   c00112b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001172c:	83 c4 10             	add    esp,0x10
c001172f:	e9 5b ff ff ff       	jmp    c001168f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011734:	89 f0                	mov    eax,esi
c0011736:	84 c0                	test   al,al
c0011738:	75 15                	jne    c001174f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001173a:	83 ec 08             	sub    esp,0x8
c001173d:	6a 00                	push   0x0
c001173f:	53                   	push   ebx
c0011740:	e8 6b fb ff ff       	call   c00112b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011745:	83 c4 10             	add    esp,0x10
c0011748:	83 c4 10             	add    esp,0x10
c001174b:	5b                   	pop    ebx
c001174c:	5e                   	pop    esi
c001174d:	5f                   	pop    edi
c001174e:	c3                   	ret    
c001174f:	c7 44 24 20 e9 97 03 c0 	mov    DWORD PTR [esp+0x20],0xc00397e9
c0011757:	83 c4 10             	add    esp,0x10
c001175a:	5b                   	pop    ebx
c001175b:	5e                   	pop    esi
c001175c:	5f                   	pop    edi
c001175d:	e9 a6 b8 ff ff       	jmp    c000d008 <panic(char const*)>

c0011762 <VAS::freeAllocatedPages(unsigned long)>:
c0011762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011766:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001176a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001176e:	74 09                	je     c0011779 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011770:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011774:	e9 c6 fe ff ff       	jmp    c001163f <Virt::freeKernelVirtualPages(unsigned long)>
c0011779:	c7 44 24 04 c0 95 03 c0 	mov    DWORD PTR [esp+0x4],0xc00395c0
c0011781:	e9 64 b7 ff ff       	jmp    c000ceea <kprintf(char const*, ...)>

c0011786 <VAS::virtualToPhysical(unsigned long)>:
c0011786:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001178a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001178e:	e8 8d fe ff ff       	call   c0011620 <VAS::getPageTableEntry(unsigned long)>
c0011793:	5a                   	pop    edx
c0011794:	8b 00                	mov    eax,DWORD PTR [eax]
c0011796:	59                   	pop    ecx
c0011797:	25 00 f0 ff ff       	and    eax,0xfffff000
c001179c:	c3                   	ret    
c001179d:	90                   	nop

c001179e <VAS::mapOtherVASIn(bool, VAS*)>:
c001179e:	83 ec 0c             	sub    esp,0xc
c00117a1:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117aa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117b1:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117b4:	19 c0                	sbb    eax,eax
c00117b6:	83 ca 03             	or     edx,0x3
c00117b9:	83 e0 fc             	and    eax,0xfffffffc
c00117bc:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117c3:	e8 71 d2 00 00       	call   c001ea39 <CPU::readCR3()>
c00117c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117cc:	83 c4 0c             	add    esp,0xc
c00117cf:	e9 89 d2 00 00       	jmp    c001ea5d <CPU::writeCR3(unsigned long)>

c00117d4 <VAS::~VAS()>:
c00117d4:	83 ec 2c             	sub    esp,0x2c
c00117d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117df:	e8 a8 cb ff ff       	call   c000e38c <lockScheduler()>
c00117e4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00117eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117ee:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00117f4:	83 ec 04             	sub    esp,0x4
c00117f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117fb:	6a 01                	push   0x1
c00117fd:	50                   	push   eax
c00117fe:	e8 9b ff ff ff       	call   c001179e <VAS::mapOtherVASIn(bool, VAS*)>
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001180e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011816:	0f 8f d7 00 00 00    	jg     c00118f3 <VAS::~VAS()+0x11f>
c001181c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011820:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011823:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011827:	c1 e2 02             	shl    edx,0x2
c001182a:	01 d0                	add    eax,edx
c001182c:	8b 00                	mov    eax,DWORD PTR [eax]
c001182e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011836:	83 e0 01             	and    eax,0x1
c0011839:	0f 84 ab 00 00 00    	je     c00118ea <VAS::~VAS()+0x116>
c001183f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011847:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001184f:	7f 75                	jg     c00118c6 <VAS::~VAS()+0xf2>
c0011851:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011855:	c1 e0 0a             	shl    eax,0xa
c0011858:	89 c2                	mov    edx,eax
c001185a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001185e:	01 d0                	add    eax,edx
c0011860:	c1 e0 0c             	shl    eax,0xc
c0011863:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011867:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001186c:	8b 00                	mov    eax,DWORD PTR [eax]
c001186e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011871:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011877:	83 ec 04             	sub    esp,0x4
c001187a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001187e:	6a 01                	push   0x1
c0011880:	50                   	push   eax
c0011881:	e8 6e fd ff ff       	call   c00115f4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011886:	83 c4 10             	add    esp,0x10
c0011889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001188d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011891:	8b 00                	mov    eax,DWORD PTR [eax]
c0011893:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011897:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001189b:	25 01 04 00 00       	and    eax,0x401
c00118a0:	3d 01 04 00 00       	cmp    eax,0x401
c00118a5:	75 19                	jne    c00118c0 <VAS::~VAS()+0xec>
c00118a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	50                   	push   eax
c00118b4:	e8 4c c1 ff ff       	call   c000da05 <Phys::freePage(unsigned long)>
c00118b9:	83 c4 10             	add    esp,0x10
c00118bc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118c0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118c4:	eb 81                	jmp    c0011847 <VAS::~VAS()+0x73>
c00118c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ca:	25 00 04 00 00       	and    eax,0x400
c00118cf:	74 19                	je     c00118ea <VAS::~VAS()+0x116>
c00118d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118da:	83 ec 0c             	sub    esp,0xc
c00118dd:	50                   	push   eax
c00118de:	e8 22 c1 ff ff       	call   c000da05 <Phys::freePage(unsigned long)>
c00118e3:	83 c4 10             	add    esp,0x10
c00118e6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ea:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118ee:	e9 1b ff ff ff       	jmp    c001180e <VAS::~VAS()+0x3a>
c00118f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00118fa:	83 ec 0c             	sub    esp,0xc
c00118fd:	50                   	push   eax
c00118fe:	e8 3c fd ff ff       	call   c001163f <Virt::freeKernelVirtualPages(unsigned long)>
c0011903:	83 c4 10             	add    esp,0x10
c0011906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001190a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001190d:	83 ec 0c             	sub    esp,0xc
c0011910:	50                   	push   eax
c0011911:	e8 ef c0 ff ff       	call   c000da05 <Phys::freePage(unsigned long)>
c0011916:	83 c4 10             	add    esp,0x10
c0011919:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001191d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011921:	c1 e0 02             	shl    eax,0x2
c0011924:	83 ec 08             	sub    esp,0x8
c0011927:	50                   	push   eax
c0011928:	68 e4 95 03 c0       	push   0xc00395e4
c001192d:	e8 b8 b5 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011932:	83 c4 10             	add    esp,0x10
c0011935:	e8 54 ca ff ff       	call   c000e38e <unlockScheduler()>
c001193a:	90                   	nop
c001193b:	83 c4 2c             	add    esp,0x2c
c001193e:	c3                   	ret    
c001193f:	90                   	nop

c0011940 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011940:	55                   	push   ebp
c0011941:	57                   	push   edi
c0011942:	56                   	push   esi
c0011943:	53                   	push   ebx
c0011944:	83 ec 1c             	sub    esp,0x1c
c0011947:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001194b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001194f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011955:	77 08                	ja     c001195f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011957:	0f 20 d8             	mov    eax,cr3
c001195a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001195d:	75 47                	jne    c00119a6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001195f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011963:	09 d8                	or     eax,ebx
c0011965:	a9 ff 0f 00 00       	test   eax,0xfff
c001196a:	75 57                	jne    c00119c3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001196c:	89 de                	mov    esi,ebx
c001196e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011971:	c1 ee 16             	shr    esi,0x16
c0011974:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001197b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001197f:	74 54                	je     c00119d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011981:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011985:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001198b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001198f:	c1 e6 0c             	shl    esi,0xc
c0011992:	c1 eb 0a             	shr    ebx,0xa
c0011995:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001199b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001199e:	83 c4 1c             	add    esp,0x1c
c00119a1:	5b                   	pop    ebx
c00119a2:	5e                   	pop    esi
c00119a3:	5f                   	pop    edi
c00119a4:	5d                   	pop    ebp
c00119a5:	c3                   	ret    
c00119a6:	83 ec 0c             	sub    esp,0xc
c00119a9:	68 04 96 03 c0       	push   0xc0039604
c00119ae:	e8 37 b5 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00119b3:	83 c4 10             	add    esp,0x10
c00119b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119ba:	09 d8                	or     eax,ebx
c00119bc:	a9 ff 0f 00 00       	test   eax,0xfff
c00119c1:	74 a9                	je     c001196c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119c3:	83 ec 0c             	sub    esp,0xc
c00119c6:	68 6c 96 03 c0       	push   0xc003966c
c00119cb:	e8 38 b6 ff ff       	call   c000d008 <panic(char const*)>
c00119d0:	83 c4 10             	add    esp,0x10
c00119d3:	eb 97                	jmp    c001196c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119d9:	e8 b1 c0 ff ff       	call   c000da8f <Phys::allocatePage()>
c00119de:	89 c5                	mov    ebp,eax
c00119e0:	e8 b4 fa ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c00119e5:	83 ec 0c             	sub    esp,0xc
c00119e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119ec:	6a 01                	push   0x1
c00119ee:	e8 16 f9 ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c00119f3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00119fa:	6a 01                	push   0x1
c00119fc:	50                   	push   eax
c00119fd:	55                   	push   ebp
c00119fe:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a04:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a08:	51                   	push   ecx
c0011a09:	e8 1e 02 00 00       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a0e:	83 c4 1c             	add    esp,0x1c
c0011a11:	68 00 10 00 00       	push   0x1000
c0011a16:	6a 00                	push   0x0
c0011a18:	50                   	push   eax
c0011a19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a1d:	e8 b6 ec fe ff       	call   c00006d8 <memset>
c0011a22:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a26:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a29:	e8 11 fc ff ff       	call   c001163f <Virt::freeKernelVirtualPages(unsigned long)>
c0011a2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a32:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a35:	83 c4 10             	add    esp,0x10
c0011a38:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a3b:	e9 41 ff ff ff       	jmp    c0011981 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a40 <VAS::allocatePages(int, int)>:
c0011a40:	55                   	push   ebp
c0011a41:	57                   	push   edi
c0011a42:	56                   	push   esi
c0011a43:	53                   	push   ebx
c0011a44:	83 ec 1c             	sub    esp,0x1c
c0011a47:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a4b:	e8 80 57 00 00       	call   c00171d0 <thisCPU()>
c0011a50:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a56:	83 e0 01             	and    eax,0x1
c0011a59:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a5d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a61:	0f 85 d7 00 00 00    	jne    c0011b3e <VAS::allocatePages(int, int)+0xfe>
c0011a67:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a6e:	85 c0                	test   eax,eax
c0011a70:	0f 84 ac 00 00 00    	je     c0011b22 <VAS::allocatePages(int, int)+0xe2>
c0011a76:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a7e:	c1 e6 0c             	shl    esi,0xc
c0011a81:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a85:	85 c0                	test   eax,eax
c0011a87:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a8a:	7e 33                	jle    c0011abf <VAS::allocatePages(int, int)+0x7f>
c0011a8c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011a90:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a94:	81 cd 00 04 00 00    	or     ebp,0x400
c0011a9a:	e8 f0 bf ff ff       	call   c000da8f <Phys::allocatePage()>
c0011a9f:	55                   	push   ebp
c0011aa0:	53                   	push   ebx
c0011aa1:	50                   	push   eax
c0011aa2:	57                   	push   edi
c0011aa3:	e8 98 fe ff ff       	call   c0011940 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011aa8:	83 c4 10             	add    esp,0x10
c0011aab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ab0:	74 03                	je     c0011ab5 <VAS::allocatePages(int, int)+0x75>
c0011ab2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ab5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011abb:	39 de                	cmp    esi,ebx
c0011abd:	75 db                	jne    c0011a9a <VAS::allocatePages(int, int)+0x5a>
c0011abf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ac4:	74 3f                	je     c0011b05 <VAS::allocatePages(int, int)+0xc5>
c0011ac6:	c1 ee 0a             	shr    esi,0xa
c0011ac9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011acd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ad3:	c1 eb 0a             	shr    ebx,0xa
c0011ad6:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011adc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ae2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ae8:	39 f3                	cmp    ebx,esi
c0011aea:	77 0d                	ja     c0011af9 <VAS::allocatePages(int, int)+0xb9>
c0011aec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011aef:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011af5:	39 de                	cmp    esi,ebx
c0011af7:	73 f3                	jae    c0011aec <VAS::allocatePages(int, int)+0xac>
c0011af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011afd:	83 c4 1c             	add    esp,0x1c
c0011b00:	5b                   	pop    ebx
c0011b01:	5e                   	pop    esi
c0011b02:	5f                   	pop    edi
c0011b03:	5d                   	pop    ebp
c0011b04:	c3                   	ret    
c0011b05:	e8 2f cf 00 00       	call   c001ea39 <CPU::readCR3()>
c0011b0a:	83 ec 0c             	sub    esp,0xc
c0011b0d:	50                   	push   eax
c0011b0e:	e8 4a cf 00 00       	call   c001ea5d <CPU::writeCR3(unsigned long)>
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b1a:	83 c4 1c             	add    esp,0x1c
c0011b1d:	5b                   	pop    ebx
c0011b1e:	5e                   	pop    esi
c0011b1f:	5f                   	pop    edi
c0011b20:	5d                   	pop    ebp
c0011b21:	c3                   	ret    
c0011b22:	83 ec 0c             	sub    esp,0xc
c0011b25:	68 90 96 03 c0       	push   0xc0039690
c0011b2a:	e8 d9 b4 ff ff       	call   c000d008 <panic(char const*)>
c0011b2f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b36:	83 c4 10             	add    esp,0x10
c0011b39:	e9 38 ff ff ff       	jmp    c0011a76 <VAS::allocatePages(int, int)+0x36>
c0011b3e:	83 ec 0c             	sub    esp,0xc
c0011b41:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b45:	e8 bf f7 ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c0011b4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b4e:	83 c4 10             	add    esp,0x10
c0011b51:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b56:	0f 87 94 00 00 00    	ja     c0011bf0 <VAS::allocatePages(int, int)+0x1b0>
c0011b5c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b60:	85 d2                	test   edx,edx
c0011b62:	7e 3c                	jle    c0011ba0 <VAS::allocatePages(int, int)+0x160>
c0011b64:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b68:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b6c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b70:	c1 e5 0c             	shl    ebp,0xc
c0011b73:	81 ce 00 04 00 00    	or     esi,0x400
c0011b79:	01 dd                	add    ebp,ebx
c0011b7b:	e8 0f bf ff ff       	call   c000da8f <Phys::allocatePage()>
c0011b80:	56                   	push   esi
c0011b81:	53                   	push   ebx
c0011b82:	50                   	push   eax
c0011b83:	57                   	push   edi
c0011b84:	e8 b7 fd ff ff       	call   c0011940 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b89:	83 c4 10             	add    esp,0x10
c0011b8c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b91:	74 03                	je     c0011b96 <VAS::allocatePages(int, int)+0x156>
c0011b93:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b96:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b9c:	39 dd                	cmp    ebp,ebx
c0011b9e:	75 db                	jne    c0011b7b <VAS::allocatePages(int, int)+0x13b>
c0011ba0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba5:	0f 84 5a ff ff ff    	je     c0011b05 <VAS::allocatePages(int, int)+0xc5>
c0011bab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011baf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bb3:	89 d3                	mov    ebx,edx
c0011bb5:	c1 e0 0c             	shl    eax,0xc
c0011bb8:	c1 eb 0a             	shr    ebx,0xa
c0011bbb:	01 d0                	add    eax,edx
c0011bbd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bc3:	c1 e8 0a             	shr    eax,0xa
c0011bc6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bcc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bd1:	2d 00 00 40 00       	sub    eax,0x400000
c0011bd6:	39 c3                	cmp    ebx,eax
c0011bd8:	0f 87 1b ff ff ff    	ja     c0011af9 <VAS::allocatePages(int, int)+0xb9>
c0011bde:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011be1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011be7:	39 d8                	cmp    eax,ebx
c0011be9:	73 f3                	jae    c0011bde <VAS::allocatePages(int, int)+0x19e>
c0011beb:	e9 09 ff ff ff       	jmp    c0011af9 <VAS::allocatePages(int, int)+0xb9>
c0011bf0:	e8 db 55 00 00       	call   c00171d0 <thisCPU()>
c0011bf5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011bfc:	0f 84 5a ff ff ff    	je     c0011b5c <VAS::allocatePages(int, int)+0x11c>
c0011c02:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c0a:	e9 4d ff ff ff       	jmp    c0011b5c <VAS::allocatePages(int, int)+0x11c>
c0011c0f:	90                   	nop

c0011c10 <VAS::setCPUSpecific(unsigned long)>:
c0011c10:	83 ec 0c             	sub    esp,0xc
c0011c13:	6a 05                	push   0x5
c0011c15:	68 00 00 40 c2       	push   0xc2400000
c0011c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c22:	e8 19 fd ff ff       	call   c0011940 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c27:	83 c4 1c             	add    esp,0x1c
c0011c2a:	c3                   	ret    
c0011c2b:	90                   	nop

c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c2c:	55                   	push   ebp
c0011c2d:	57                   	push   edi
c0011c2e:	56                   	push   esi
c0011c2f:	53                   	push   ebx
c0011c30:	83 ec 1c             	sub    esp,0x1c
c0011c33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c37:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c3b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c3f:	e8 8c 55 00 00       	call   c00171d0 <thisCPU()>
c0011c44:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c4a:	83 e0 01             	and    eax,0x1
c0011c4d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c55:	85 c0                	test   eax,eax
c0011c57:	7e 39                	jle    c0011c92 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c5d:	89 f3                	mov    ebx,esi
c0011c5f:	c1 e0 0c             	shl    eax,0xc
c0011c62:	01 f0                	add    eax,esi
c0011c64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c68:	55                   	push   ebp
c0011c69:	53                   	push   ebx
c0011c6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c6e:	29 f0                	sub    eax,esi
c0011c70:	01 d8                	add    eax,ebx
c0011c72:	50                   	push   eax
c0011c73:	57                   	push   edi
c0011c74:	e8 c7 fc ff ff       	call   c0011940 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c79:	83 c4 10             	add    esp,0x10
c0011c7c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c81:	74 03                	je     c0011c86 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c83:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c86:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c8c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011c90:	75 d6                	jne    c0011c68 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011c92:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c97:	74 42                	je     c0011cdb <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011c99:	89 f3                	mov    ebx,esi
c0011c9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c9f:	c1 eb 0a             	shr    ebx,0xa
c0011ca2:	c1 e0 0c             	shl    eax,0xc
c0011ca5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cab:	01 f0                	add    eax,esi
c0011cad:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cb3:	c1 e8 0a             	shr    eax,0xa
c0011cb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cbb:	2d 00 00 40 00       	sub    eax,0x400000
c0011cc0:	39 c3                	cmp    ebx,eax
c0011cc2:	77 0d                	ja     c0011cd1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cc4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cc7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ccd:	39 d8                	cmp    eax,ebx
c0011ccf:	73 f3                	jae    c0011cc4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011cd1:	83 c4 1c             	add    esp,0x1c
c0011cd4:	89 f0                	mov    eax,esi
c0011cd6:	5b                   	pop    ebx
c0011cd7:	5e                   	pop    esi
c0011cd8:	5f                   	pop    edi
c0011cd9:	5d                   	pop    ebp
c0011cda:	c3                   	ret    
c0011cdb:	e8 59 cd 00 00       	call   c001ea39 <CPU::readCR3()>
c0011ce0:	83 ec 0c             	sub    esp,0xc
c0011ce3:	50                   	push   eax
c0011ce4:	e8 74 cd 00 00       	call   c001ea5d <CPU::writeCR3(unsigned long)>
c0011ce9:	89 f0                	mov    eax,esi
c0011ceb:	83 c4 10             	add    esp,0x10
c0011cee:	83 c4 1c             	add    esp,0x1c
c0011cf1:	5b                   	pop    ebx
c0011cf2:	5e                   	pop    esi
c0011cf3:	5f                   	pop    edi
c0011cf4:	5d                   	pop    ebp
c0011cf5:	c3                   	ret    

c0011cf6 <VAS::VAS(VAS*)>:
c0011cf6:	53                   	push   ebx
c0011cf7:	83 ec 38             	sub    esp,0x38
c0011cfa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cfe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d05:	e8 a9 c6 ff ff       	call   c000e3b3 <lockStuff()>
c0011d0a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011d0e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011d11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011d18:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011d1c:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0011d1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d23:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011d26:	e8 64 bd ff ff       	call   c000da8f <Phys::allocatePage()>
c0011d2b:	89 c2                	mov    edx,eax
c0011d2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d31:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011d34:	e8 60 f7 ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c0011d39:	89 c3                	mov    ebx,eax
c0011d3b:	83 ec 0c             	sub    esp,0xc
c0011d3e:	6a 01                	push   0x1
c0011d40:	e8 c4 f5 ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c0011d45:	83 c4 10             	add    esp,0x10
c0011d48:	89 c2                	mov    edx,eax
c0011d4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d51:	83 ec 0c             	sub    esp,0xc
c0011d54:	6a 03                	push   0x3
c0011d56:	6a 01                	push   0x1
c0011d58:	52                   	push   edx
c0011d59:	50                   	push   eax
c0011d5a:	53                   	push   ebx
c0011d5b:	e8 cc fe ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d60:	83 c4 20             	add    esp,0x20
c0011d63:	89 c2                	mov    edx,eax
c0011d65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011d6c:	83 ec 04             	sub    esp,0x4
c0011d6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011d73:	6a 01                	push   0x1
c0011d75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011d79:	e8 20 fa ff ff       	call   c001179e <VAS::mapOtherVASIn(bool, VAS*)>
c0011d7e:	83 c4 10             	add    esp,0x10
c0011d81:	83 ec 0c             	sub    esp,0xc
c0011d84:	6a 01                	push   0x1
c0011d86:	e8 7e f5 ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c0011d8b:	83 c4 10             	add    esp,0x10
c0011d8e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011d92:	83 ec 0c             	sub    esp,0xc
c0011d95:	6a 01                	push   0x1
c0011d97:	e8 6d f5 ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011da3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011dab:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011db3:	0f 8f 5e 02 00 00    	jg     c0012017 <VAS::VAS(VAS*)+0x321>
c0011db9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011dbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011dc3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011dc9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011dcc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011dd0:	c1 e2 02             	shl    edx,0x2
c0011dd3:	01 d0                	add    eax,edx
c0011dd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ddb:	83 ec 08             	sub    esp,0x8
c0011dde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011de2:	68 03 98 03 c0       	push   0xc0039803
c0011de7:	e8 fe b0 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011dec:	83 c4 10             	add    esp,0x10
c0011def:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011df3:	25 01 04 00 00       	and    eax,0x401
c0011df8:	3d 01 04 00 00       	cmp    eax,0x401
c0011dfd:	0f 85 e5 01 00 00    	jne    c0011fe8 <VAS::VAS(VAS*)+0x2f2>
c0011e03:	83 ec 0c             	sub    esp,0xc
c0011e06:	68 14 98 03 c0       	push   0xc0039814
c0011e0b:	e8 da b0 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011e10:	83 c4 10             	add    esp,0x10
c0011e13:	e8 77 bc ff ff       	call   c000da8f <Phys::allocatePage()>
c0011e18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e1c:	83 ec 08             	sub    esp,0x8
c0011e1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e23:	68 2a 98 03 c0       	push   0xc003982a
c0011e28:	e8 bd b0 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011e2d:	83 c4 10             	add    esp,0x10
c0011e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e34:	25 ff 0f 00 00       	and    eax,0xfff
c0011e39:	89 c1                	mov    ecx,eax
c0011e3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e46:	c1 e2 02             	shl    edx,0x2
c0011e49:	01 c2                	add    edx,eax
c0011e4b:	89 c8                	mov    eax,ecx
c0011e4d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011e51:	89 02                	mov    DWORD PTR [edx],eax
c0011e53:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011e5b:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011e63:	0f 8f a5 01 00 00    	jg     c001200e <VAS::VAS(VAS*)+0x318>
c0011e69:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e6d:	c1 e0 0a             	shl    eax,0xa
c0011e70:	89 c2                	mov    edx,eax
c0011e72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e76:	01 d0                	add    eax,edx
c0011e78:	c1 e0 0c             	shl    eax,0xc
c0011e7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e7f:	83 ec 08             	sub    esp,0x8
c0011e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e8a:	e8 91 f7 ff ff       	call   c0011620 <VAS::getPageTableEntry(unsigned long)>
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e98:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e9f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ea2:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011ea8:	83 ec 04             	sub    esp,0x4
c0011eab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011eaf:	6a 01                	push   0x1
c0011eb1:	50                   	push   eax
c0011eb2:	e8 3d f7 ff ff       	call   c00115f4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011eb7:	83 c4 10             	add    esp,0x10
c0011eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ebe:	83 ec 04             	sub    esp,0x4
c0011ec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ec5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ec9:	68 bc 96 03 c0       	push   0xc00396bc
c0011ece:	e8 17 b0 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011ed3:	83 c4 10             	add    esp,0x10
c0011ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eda:	25 01 04 00 00       	and    eax,0x401
c0011edf:	3d 01 04 00 00       	cmp    eax,0x401
c0011ee4:	0f 85 db 00 00 00    	jne    c0011fc5 <VAS::VAS(VAS*)+0x2cf>
c0011eea:	83 ec 0c             	sub    esp,0xc
c0011eed:	68 39 98 03 c0       	push   0xc0039839
c0011ef2:	e8 f3 af ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011ef7:	83 c4 10             	add    esp,0x10
c0011efa:	e8 90 bb ff ff       	call   c000da8f <Phys::allocatePage()>
c0011eff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f03:	83 ec 08             	sub    esp,0x8
c0011f06:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f0a:	68 48 98 03 c0       	push   0xc0039848
c0011f0f:	e8 d6 af ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f1b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f20:	83 ec 08             	sub    esp,0x8
c0011f23:	50                   	push   eax
c0011f24:	68 5c 98 03 c0       	push   0xc003985c
c0011f29:	e8 bc af ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011f2e:	83 c4 10             	add    esp,0x10
c0011f31:	e8 63 f5 ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c0011f36:	83 ec 0c             	sub    esp,0xc
c0011f39:	6a 03                	push   0x3
c0011f3b:	6a 01                	push   0x1
c0011f3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011f41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011f45:	50                   	push   eax
c0011f46:	e8 e1 fc ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f4b:	83 c4 20             	add    esp,0x20
c0011f4e:	e8 46 f5 ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c0011f53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011f57:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f5d:	83 ec 0c             	sub    esp,0xc
c0011f60:	6a 03                	push   0x3
c0011f62:	6a 01                	push   0x1
c0011f64:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f68:	52                   	push   edx
c0011f69:	50                   	push   eax
c0011f6a:	e8 bd fc ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f6f:	83 c4 20             	add    esp,0x20
c0011f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f7a:	83 ec 04             	sub    esp,0x4
c0011f7d:	68 00 10 00 00       	push   0x1000
c0011f82:	52                   	push   edx
c0011f83:	50                   	push   eax
c0011f84:	e8 d8 e6 fe ff       	call   c0000661 <memcpy>
c0011f89:	83 c4 10             	add    esp,0x10
c0011f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f90:	25 ff 0f 00 00       	and    eax,0xfff
c0011f95:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011f99:	89 c2                	mov    edx,eax
c0011f9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f9f:	89 10                	mov    DWORD PTR [eax],edx
c0011fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa5:	25 ff 0f 00 00       	and    eax,0xfff
c0011faa:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011fae:	83 ec 04             	sub    esp,0x4
c0011fb1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011fb5:	50                   	push   eax
c0011fb6:	68 e0 96 03 c0       	push   0xc00396e0
c0011fbb:	e8 2a af ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011fc0:	83 c4 10             	add    esp,0x10
c0011fc3:	eb 1a                	jmp    c0011fdf <VAS::VAS(VAS*)+0x2e9>
c0011fc5:	83 ec 0c             	sub    esp,0xc
c0011fc8:	68 70 98 03 c0       	push   0xc0039870
c0011fcd:	e8 18 af ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011fd2:	83 c4 10             	add    esp,0x10
c0011fd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011fdd:	89 10                	mov    DWORD PTR [eax],edx
c0011fdf:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011fe3:	e9 73 fe ff ff       	jmp    c0011e5b <VAS::VAS(VAS*)+0x165>
c0011fe8:	83 ec 0c             	sub    esp,0xc
c0011feb:	68 74 98 03 c0       	push   0xc0039874
c0011ff0:	e8 f5 ae ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0011ff5:	83 c4 10             	add    esp,0x10
c0011ff8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ffc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011fff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012003:	c1 e2 02             	shl    edx,0x2
c0012006:	01 c2                	add    edx,eax
c0012008:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001200c:	89 02                	mov    DWORD PTR [edx],eax
c001200e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0012012:	e9 94 fd ff ff       	jmp    c0011dab <VAS::VAS(VAS*)+0xb5>
c0012017:	83 ec 0c             	sub    esp,0xc
c001201a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001201e:	e8 1c f6 ff ff       	call   c001163f <Virt::freeKernelVirtualPages(unsigned long)>
c0012023:	83 c4 10             	add    esp,0x10
c0012026:	83 ec 0c             	sub    esp,0xc
c0012029:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001202d:	e8 0d f6 ff ff       	call   c001163f <Virt::freeKernelVirtualPages(unsigned long)>
c0012032:	83 c4 10             	add    esp,0x10
c0012035:	e8 0b c7 ff ff       	call   c000e745 <unlockStuff()>
c001203a:	90                   	nop
c001203b:	83 c4 38             	add    esp,0x38
c001203e:	5b                   	pop    ebx
c001203f:	c3                   	ret    

c0012040 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012040:	55                   	push   ebp
c0012041:	57                   	push   edi
c0012042:	56                   	push   esi
c0012043:	53                   	push   ebx
c0012044:	83 ec 1c             	sub    esp,0x1c
c0012047:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001204b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001204f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012053:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012057:	a9 ff 0f 00 00       	test   eax,0xfff
c001205c:	75 4a                	jne    c00120a8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001205e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012062:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012065:	c1 eb 16             	shr    ebx,0x16
c0012068:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001206f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012073:	74 4d                	je     c00120c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012075:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012079:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001207d:	c1 e8 0a             	shr    eax,0xa
c0012080:	80 fa 01             	cmp    dl,0x1
c0012083:	19 d2                	sbb    edx,edx
c0012085:	c1 e3 0c             	shl    ebx,0xc
c0012088:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001208c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012092:	25 fc 0f 00 00       	and    eax,0xffc
c0012097:	01 d8                	add    eax,ebx
c0012099:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00120a0:	83 c4 1c             	add    esp,0x1c
c00120a3:	5b                   	pop    ebx
c00120a4:	5e                   	pop    esi
c00120a5:	5f                   	pop    edi
c00120a6:	5d                   	pop    ebp
c00120a7:	c3                   	ret    
c00120a8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00120ac:	83 ec 0c             	sub    esp,0xc
c00120af:	68 04 97 03 c0       	push   0xc0039704
c00120b4:	e8 4f af ff ff       	call   c000d008 <panic(char const*)>
c00120b9:	83 c4 10             	add    esp,0x10
c00120bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120c0:	eb 9c                	jmp    c001205e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00120c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00120c6:	e8 c4 b9 ff ff       	call   c000da8f <Phys::allocatePage()>
c00120cb:	89 c5                	mov    ebp,eax
c00120cd:	e8 c7 f3 ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c00120d2:	83 ec 0c             	sub    esp,0xc
c00120d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120d9:	6a 01                	push   0x1
c00120db:	e8 29 f2 ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c00120e0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00120e7:	6a 01                	push   0x1
c00120e9:	50                   	push   eax
c00120ea:	55                   	push   ebp
c00120eb:	81 cd 07 04 00 00    	or     ebp,0x407
c00120f1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00120f5:	51                   	push   ecx
c00120f6:	e8 31 fb ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120fb:	83 c4 1c             	add    esp,0x1c
c00120fe:	68 00 10 00 00       	push   0x1000
c0012103:	6a 00                	push   0x0
c0012105:	50                   	push   eax
c0012106:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001210a:	e8 c9 e5 fe ff       	call   c00006d8 <memset>
c001210f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012113:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012116:	e8 24 f5 ff ff       	call   c001163f <Virt::freeKernelVirtualPages(unsigned long)>
c001211b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001211e:	83 c4 10             	add    esp,0x10
c0012121:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012124:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012128:	e9 48 ff ff ff       	jmp    c0012075 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001212d:	90                   	nop

c001212e <VAS::VAS(bool)>:
c001212e:	53                   	push   ebx
c001212f:	83 ec 28             	sub    esp,0x28
c0012132:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012136:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001213a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001213e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012145:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012149:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001214d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012150:	e8 3a b9 ff ff       	call   c000da8f <Phys::allocatePage()>
c0012155:	89 c2                	mov    edx,eax
c0012157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001215b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001215e:	e8 36 f3 ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c0012163:	89 c3                	mov    ebx,eax
c0012165:	83 ec 0c             	sub    esp,0xc
c0012168:	6a 01                	push   0x1
c001216a:	e8 9a f1 ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c001216f:	83 c4 10             	add    esp,0x10
c0012172:	89 c2                	mov    edx,eax
c0012174:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012178:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001217b:	83 ec 0c             	sub    esp,0xc
c001217e:	6a 03                	push   0x3
c0012180:	6a 01                	push   0x1
c0012182:	52                   	push   edx
c0012183:	50                   	push   eax
c0012184:	53                   	push   ebx
c0012185:	e8 a2 fa ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001218a:	83 c4 20             	add    esp,0x20
c001218d:	89 c2                	mov    edx,eax
c001218f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012193:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012196:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001219e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00121a6:	7f 1c                	jg     c00121c4 <VAS::VAS(bool)+0x96>
c00121a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00121b3:	c1 e2 02             	shl    edx,0x2
c00121b6:	01 d0                	add    eax,edx
c00121b8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00121be:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c2:	eb da                	jmp    c001219e <VAS::VAS(bool)+0x70>
c00121c4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00121cc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00121d4:	7f 71                	jg     c0012247 <VAS::VAS(bool)+0x119>
c00121d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121da:	2d 00 02 00 00       	sub    eax,0x200
c00121df:	c1 e0 0c             	shl    eax,0xc
c00121e2:	83 c8 03             	or     eax,0x3
c00121e5:	89 c3                	mov    ebx,eax
c00121e7:	e8 e4 4f 00 00       	call   c00171d0 <thisCPU()>
c00121ec:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00121f2:	83 e0 10             	and    eax,0x10
c00121f5:	84 c0                	test   al,al
c00121f7:	74 07                	je     c0012200 <VAS::VAS(bool)+0xd2>
c00121f9:	b8 00 01 00 00       	mov    eax,0x100
c00121fe:	eb 05                	jmp    c0012205 <VAS::VAS(bool)+0xd7>
c0012200:	b8 00 00 00 00       	mov    eax,0x0
c0012205:	09 d8                	or     eax,ebx
c0012207:	89 c1                	mov    ecx,eax
c0012209:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001220d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012210:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012214:	c1 e2 02             	shl    edx,0x2
c0012217:	01 d0                	add    eax,edx
c0012219:	89 ca                	mov    edx,ecx
c001221b:	89 10                	mov    DWORD PTR [eax],edx
c001221d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012221:	2d 40 03 00 00       	sub    eax,0x340
c0012226:	83 f8 7f             	cmp    eax,0x7f
c0012229:	77 16                	ja     c0012241 <VAS::VAS(bool)+0x113>
c001222b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012232:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012236:	c1 e2 02             	shl    edx,0x2
c0012239:	01 d0                	add    eax,edx
c001223b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012241:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012245:	eb 85                	jmp    c00121cc <VAS::VAS(bool)+0x9e>
c0012247:	e8 84 4f 00 00       	call   c00171d0 <thisCPU()>
c001224c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012252:	83 e0 10             	and    eax,0x10
c0012255:	84 c0                	test   al,al
c0012257:	74 07                	je     c0012260 <VAS::VAS(bool)+0x132>
c0012259:	b8 03 41 00 00       	mov    eax,0x4103
c001225e:	eb 05                	jmp    c0012265 <VAS::VAS(bool)+0x137>
c0012260:	b8 03 40 00 00       	mov    eax,0x4003
c0012265:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012269:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001226c:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012272:	89 02                	mov    DWORD PTR [edx],eax
c0012274:	e8 57 4f 00 00       	call   c00171d0 <thisCPU()>
c0012279:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001227f:	83 ec 08             	sub    esp,0x8
c0012282:	50                   	push   eax
c0012283:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012287:	e8 84 f9 ff ff       	call   c0011c10 <VAS::setCPUSpecific(unsigned long)>
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012293:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0012296:	e8 35 4f 00 00       	call   c00171d0 <thisCPU()>
c001229b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122a1:	83 e0 10             	and    eax,0x10
c00122a4:	84 c0                	test   al,al
c00122a6:	74 07                	je     c00122af <VAS::VAS(bool)+0x181>
c00122a8:	b8 00 01 00 00       	mov    eax,0x100
c00122ad:	eb 05                	jmp    c00122b4 <VAS::VAS(bool)+0x186>
c00122af:	b8 00 00 00 00       	mov    eax,0x0
c00122b4:	09 d8                	or     eax,ebx
c00122b6:	89 c2                	mov    edx,eax
c00122b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122bf:	05 fc 0f 00 00       	add    eax,0xffc
c00122c4:	83 ca 03             	or     edx,0x3
c00122c7:	89 10                	mov    DWORD PTR [eax],edx
c00122c9:	e8 02 4f 00 00       	call   c00171d0 <thisCPU()>
c00122ce:	83 ec 0c             	sub    esp,0xc
c00122d1:	50                   	push   eax
c00122d2:	e8 af 17 00 00       	call   c0013a86 <Device::getName()>
c00122d7:	83 c4 10             	add    esp,0x10
c00122da:	83 ec 08             	sub    esp,0x8
c00122dd:	68 84 98 03 c0       	push   0xc0039884
c00122e2:	50                   	push   eax
c00122e3:	e8 92 e5 fe ff       	call   c000087a <strcmp>
c00122e8:	83 c4 10             	add    esp,0x10
c00122eb:	85 c0                	test   eax,eax
c00122ed:	0f 94 c0             	sete   al
c00122f0:	84 c0                	test   al,al
c00122f2:	74 64                	je     c0012358 <VAS::VAS(bool)+0x22a>
c00122f4:	e8 76 c0 ff ff       	call   c000e36f <disableIRQs()>
c00122f9:	e8 d2 4e 00 00       	call   c00171d0 <thisCPU()>
c00122fe:	05 7c 09 00 00       	add    eax,0x97c
c0012303:	83 ec 0c             	sub    esp,0xc
c0012306:	50                   	push   eax
c0012307:	e8 32 a7 ff ff       	call   c000ca3e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001230c:	83 c4 10             	add    esp,0x10
c001230f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012314:	89 c3                	mov    ebx,eax
c0012316:	e8 b5 4e 00 00       	call   c00171d0 <thisCPU()>
c001231b:	05 7c 09 00 00       	add    eax,0x97c
c0012320:	83 ec 0c             	sub    esp,0xc
c0012323:	50                   	push   eax
c0012324:	e8 15 a7 ff ff       	call   c000ca3e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012329:	83 c4 10             	add    esp,0x10
c001232c:	83 ec 08             	sub    esp,0x8
c001232f:	50                   	push   eax
c0012330:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012334:	e8 e7 f2 ff ff       	call   c0011620 <VAS::getPageTableEntry(unsigned long)>
c0012339:	83 c4 10             	add    esp,0x10
c001233c:	8b 00                	mov    eax,DWORD PTR [eax]
c001233e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012343:	6a 11                	push   0x11
c0012345:	53                   	push   ebx
c0012346:	50                   	push   eax
c0012347:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001234b:	e8 f0 f5 ff ff       	call   c0011940 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	e8 25 c0 ff ff       	call   c000e37d <enableIRQs()>
c0012358:	90                   	nop
c0012359:	83 c4 28             	add    esp,0x28
c001235c:	5b                   	pop    ebx
c001235d:	c3                   	ret    

c001235e <mapVASFirstTime>:
c001235e:	55                   	push   ebp
c001235f:	57                   	push   edi
c0012360:	56                   	push   esi
c0012361:	53                   	push   ebx
c0012362:	83 ec 0c             	sub    esp,0xc
c0012365:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001236a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001236d:	4a                   	dec    edx
c001236e:	0f 84 99 00 00 00    	je     c001240d <mapVASFirstTime+0xaf>
c0012374:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012377:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001237a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001237f:	c1 e5 15             	shl    ebp,0x15
c0012382:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012387:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001238d:	29 eb                	sub    ebx,ebp
c001238f:	29 ee                	sub    esi,ebp
c0012391:	e8 f9 b6 ff ff       	call   c000da8f <Phys::allocatePage()>
c0012396:	83 ec 0c             	sub    esp,0xc
c0012399:	68 03 04 00 00       	push   0x403
c001239e:	6a 01                	push   0x1
c00123a0:	53                   	push   ebx
c00123a1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00123a7:	50                   	push   eax
c00123a8:	57                   	push   edi
c00123a9:	e8 7e f8 ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123ae:	83 c4 20             	add    esp,0x20
c00123b1:	39 f3                	cmp    ebx,esi
c00123b3:	75 dc                	jne    c0012391 <mapVASFirstTime+0x33>
c00123b5:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00123ba:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00123bf:	29 ee                	sub    esi,ebp
c00123c1:	29 e8                	sub    eax,ebp
c00123c3:	89 c5                	mov    ebp,eax
c00123c5:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00123c9:	19 db                	sbb    ebx,ebx
c00123cb:	e8 bf b6 ff ff       	call   c000da8f <Phys::allocatePage()>
c00123d0:	83 e3 04             	and    ebx,0x4
c00123d3:	83 ec 0c             	sub    esp,0xc
c00123d6:	81 c3 03 04 00 00    	add    ebx,0x403
c00123dc:	53                   	push   ebx
c00123dd:	6a 01                	push   0x1
c00123df:	56                   	push   esi
c00123e0:	81 ee 00 10 00 00    	sub    esi,0x1000
c00123e6:	50                   	push   eax
c00123e7:	57                   	push   edi
c00123e8:	e8 3f f8 ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123ed:	83 c4 20             	add    esp,0x20
c00123f0:	39 f5                	cmp    ebp,esi
c00123f2:	75 d1                	jne    c00123c5 <mapVASFirstTime+0x67>
c00123f4:	e8 40 c6 00 00       	call   c001ea39 <CPU::readCR3()>
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	50                   	push   eax
c00123fd:	e8 5b c6 00 00       	call   c001ea5d <CPU::writeCR3(unsigned long)>
c0012402:	83 c4 10             	add    esp,0x10
c0012405:	83 c4 0c             	add    esp,0xc
c0012408:	5b                   	pop    ebx
c0012409:	5e                   	pop    esi
c001240a:	5f                   	pop    edi
c001240b:	5d                   	pop    ebp
c001240c:	c3                   	ret    
c001240d:	83 ec 0c             	sub    esp,0xc
c0012410:	68 92 98 03 c0       	push   0xc0039892
c0012415:	e8 d0 aa ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001241a:	83 c4 10             	add    esp,0x10
c001241d:	83 c4 0c             	add    esp,0xc
c0012420:	5b                   	pop    ebx
c0012421:	5e                   	pop    esi
c0012422:	5f                   	pop    edi
c0012423:	5d                   	pop    ebp
c0012424:	c3                   	ret    

c0012425 <__cxa_atexit>:
c0012425:	31 c0                	xor    eax,eax
c0012427:	c3                   	ret    

c0012428 <__cxa_finalize>:
c0012428:	c3                   	ret    

c0012429 <__stack_chk_fail>:
c0012429:	55                   	push   ebp
c001242a:	89 e5                	mov    ebp,esp
c001242c:	83 ec 10             	sub    esp,0x10
c001242f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012432:	68 ab 98 03 c0       	push   0xc00398ab
c0012437:	e8 ae aa ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001243c:	58                   	pop    eax
c001243d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012440:	5a                   	pop    edx
c0012441:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012444:	68 ab 98 03 c0       	push   0xc00398ab
c0012449:	e8 9c aa ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001244e:	59                   	pop    ecx
c001244f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012452:	5a                   	pop    edx
c0012453:	8b 00                	mov    eax,DWORD PTR [eax]
c0012455:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012458:	68 ab 98 03 c0       	push   0xc00398ab
c001245d:	e8 88 aa ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0012462:	59                   	pop    ecx
c0012463:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012466:	5a                   	pop    edx
c0012467:	8b 00                	mov    eax,DWORD PTR [eax]
c0012469:	8b 00                	mov    eax,DWORD PTR [eax]
c001246b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001246e:	68 ab 98 03 c0       	push   0xc00398ab
c0012473:	e8 72 aa ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0012478:	c7 04 24 b3 98 03 c0 	mov    DWORD PTR [esp],0xc00398b3
c001247f:	e8 84 ab ff ff       	call   c000d008 <panic(char const*)>
c0012484:	83 c4 10             	add    esp,0x10
c0012487:	c9                   	leave  
c0012488:	c3                   	ret    

c0012489 <__cxa_pure_virtual>:
c0012489:	83 ec 18             	sub    esp,0x18
c001248c:	68 cb 98 03 c0       	push   0xc00398cb
c0012491:	e8 72 ab ff ff       	call   c000d008 <panic(char const*)>
c0012496:	83 c4 1c             	add    esp,0x1c
c0012499:	c3                   	ret    

c001249a <operator new(unsigned long)>:
c001249a:	e9 46 b0 ff ff       	jmp    c000d4e5 <malloc>

c001249f <operator new[](unsigned long)>:
c001249f:	e9 41 b0 ff ff       	jmp    c000d4e5 <malloc>

c00124a4 <operator delete(void*)>:
c00124a4:	e9 5c b0 ff ff       	jmp    c000d505 <rfree>

c00124a9 <operator delete(void*, unsigned long)>:
c00124a9:	e9 57 b0 ff ff       	jmp    c000d505 <rfree>

c00124ae <operator delete[](void*)>:
c00124ae:	e9 52 b0 ff ff       	jmp    c000d505 <rfree>

c00124b3 <operator delete[](void*, unsigned long)>:
c00124b3:	e9 4d b0 ff ff       	jmp    c000d505 <rfree>

c00124b8 <File::read(unsigned long long, void*, int*)>:
c00124b8:	53                   	push   ebx
c00124b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124c1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00124c8:	3c 19                	cmp    al,0x19
c00124ca:	77 35                	ja     c0012501 <File::read(unsigned long long, void*, int*)+0x49>
c00124cc:	8b 04 85 00 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3c00]
c00124d3:	85 c0                	test   eax,eax
c00124d5:	74 2a                	je     c0012501 <File::read(unsigned long long, void*, int*)+0x49>
c00124d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00124dd:	85 c0                	test   eax,eax
c00124df:	74 20                	je     c0012501 <File::read(unsigned long long, void*, int*)+0x49>
c00124e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00124e5:	74 21                	je     c0012508 <File::read(unsigned long long, void*, int*)+0x50>
c00124e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00124e9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00124ed:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00124f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00124fb:	5b                   	pop    ebx
c00124fc:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00124ff:	ff e0                	jmp    eax
c0012501:	b8 0b 00 00 00       	mov    eax,0xb
c0012506:	eb 05                	jmp    c001250d <File::read(unsigned long long, void*, int*)+0x55>
c0012508:	b8 05 00 00 00       	mov    eax,0x5
c001250d:	5b                   	pop    ebx
c001250e:	c3                   	ret    
c001250f:	90                   	nop

c0012510 <File::write(unsigned long long, void*, int*)>:
c0012510:	53                   	push   ebx
c0012511:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012515:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012519:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012520:	3c 19                	cmp    al,0x19
c0012522:	77 35                	ja     c0012559 <File::write(unsigned long long, void*, int*)+0x49>
c0012524:	8b 04 85 00 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3c00]
c001252b:	85 c0                	test   eax,eax
c001252d:	74 2a                	je     c0012559 <File::write(unsigned long long, void*, int*)+0x49>
c001252f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012535:	85 c0                	test   eax,eax
c0012537:	74 20                	je     c0012559 <File::write(unsigned long long, void*, int*)+0x49>
c0012539:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001253d:	74 21                	je     c0012560 <File::write(unsigned long long, void*, int*)+0x50>
c001253f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012541:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012545:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001254b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001254f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012553:	5b                   	pop    ebx
c0012554:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012557:	ff e0                	jmp    eax
c0012559:	b8 0b 00 00 00       	mov    eax,0xb
c001255e:	eb 05                	jmp    c0012565 <File::write(unsigned long long, void*, int*)+0x55>
c0012560:	b8 05 00 00 00       	mov    eax,0x5
c0012565:	5b                   	pop    ebx
c0012566:	c3                   	ret    
c0012567:	90                   	nop

c0012568 <Directory::read(unsigned long long, void*, int*)>:
c0012568:	53                   	push   ebx
c0012569:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001256d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012571:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012578:	3c 19                	cmp    al,0x19
c001257a:	77 35                	ja     c00125b1 <Directory::read(unsigned long long, void*, int*)+0x49>
c001257c:	8b 04 85 00 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3c00]
c0012583:	85 c0                	test   eax,eax
c0012585:	74 2a                	je     c00125b1 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012587:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001258d:	85 c0                	test   eax,eax
c001258f:	74 20                	je     c00125b1 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012591:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012595:	74 21                	je     c00125b8 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012597:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012599:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001259d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00125a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00125a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00125ab:	5b                   	pop    ebx
c00125ac:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00125af:	ff e0                	jmp    eax
c00125b1:	b8 0b 00 00 00       	mov    eax,0xb
c00125b6:	eb 05                	jmp    c00125bd <Directory::read(unsigned long long, void*, int*)+0x55>
c00125b8:	b8 05 00 00 00       	mov    eax,0x5
c00125bd:	5b                   	pop    ebx
c00125be:	c3                   	ret    
c00125bf:	90                   	nop

c00125c0 <Directory::write(unsigned long long, void*, int*)>:
c00125c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00125cb:	b8 0b 00 00 00       	mov    eax,0xb
c00125d0:	80 fa 19             	cmp    dl,0x19
c00125d3:	77 18                	ja     c00125ed <Directory::write(unsigned long long, void*, int*)+0x2d>
c00125d5:	8b 14 95 00 c4 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3c00]
c00125dc:	85 d2                	test   edx,edx
c00125de:	74 0d                	je     c00125ed <Directory::write(unsigned long long, void*, int*)+0x2d>
c00125e0:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00125e7:	19 c0                	sbb    eax,eax
c00125e9:	83 e0 0a             	and    eax,0xa
c00125ec:	40                   	inc    eax
c00125ed:	c3                   	ret    

c00125ee <File::isAtty()>:
c00125ee:	31 c0                	xor    eax,eax
c00125f0:	c3                   	ret    
c00125f1:	90                   	nop

c00125f2 <Directory::isAtty()>:
c00125f2:	31 c0                	xor    eax,eax
c00125f4:	c3                   	ret    
c00125f5:	90                   	nop

c00125f6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00125f6:	b8 0a 00 00 00       	mov    eax,0xa
c00125fb:	c3                   	ret    

c00125fc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00125fc:	b8 0a 00 00 00       	mov    eax,0xa
c0012601:	c3                   	ret    

c0012602 <File::~File()>:
c0012602:	83 ec 0c             	sub    esp,0xc
c0012605:	ba 4c 99 03 c0       	mov    edx,0xc003994c
c001260a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001260e:	89 10                	mov    DWORD PTR [eax],edx
c0012610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012614:	83 ec 0c             	sub    esp,0xc
c0012617:	50                   	push   eax
c0012618:	e8 0d eb ff ff       	call   c001112a <UnixFile::~UnixFile()>
c001261d:	83 c4 10             	add    esp,0x10
c0012620:	90                   	nop
c0012621:	83 c4 0c             	add    esp,0xc
c0012624:	c3                   	ret    
c0012625:	90                   	nop

c0012626 <File::~File()>:
c0012626:	83 ec 0c             	sub    esp,0xc
c0012629:	83 ec 0c             	sub    esp,0xc
c001262c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012630:	e8 cd ff ff ff       	call   c0012602 <File::~File()>
c0012635:	83 c4 10             	add    esp,0x10
c0012638:	83 ec 08             	sub    esp,0x8
c001263b:	68 14 01 00 00       	push   0x114
c0012640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012644:	e8 60 fe ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0012649:	83 c4 10             	add    esp,0x10
c001264c:	83 c4 0c             	add    esp,0xc
c001264f:	c3                   	ret    

c0012650 <Directory::~Directory()>:
c0012650:	83 ec 0c             	sub    esp,0xc
c0012653:	ba 68 99 03 c0       	mov    edx,0xc0039968
c0012658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001265c:	89 10                	mov    DWORD PTR [eax],edx
c001265e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012662:	83 ec 0c             	sub    esp,0xc
c0012665:	50                   	push   eax
c0012666:	e8 bf ea ff ff       	call   c001112a <UnixFile::~UnixFile()>
c001266b:	83 c4 10             	add    esp,0x10
c001266e:	90                   	nop
c001266f:	83 c4 0c             	add    esp,0xc
c0012672:	c3                   	ret    
c0012673:	90                   	nop

c0012674 <Directory::~Directory()>:
c0012674:	83 ec 0c             	sub    esp,0xc
c0012677:	83 ec 0c             	sub    esp,0xc
c001267a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001267e:	e8 cd ff ff ff       	call   c0012650 <Directory::~Directory()>
c0012683:	83 c4 10             	add    esp,0x10
c0012686:	83 ec 08             	sub    esp,0x8
c0012689:	68 14 01 00 00       	push   0x114
c001268e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012692:	e8 12 fe ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0012697:	83 c4 10             	add    esp,0x10
c001269a:	83 c4 0c             	add    esp,0xc
c001269d:	c3                   	ret    

c001269e <Filesystem::Filesystem()>:
c001269e:	ba e8 98 03 c0       	mov    edx,0xc00398e8
c00126a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126a7:	89 10                	mov    DWORD PTR [eax],edx
c00126a9:	8b 15 60 bf 03 c0    	mov    edx,DWORD PTR ds:0xc003bf60
c00126af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00126b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126ba:	a3 60 bf 03 c0       	mov    ds:0xc003bf60,eax
c00126bf:	90                   	nop
c00126c0:	c3                   	ret    
c00126c1:	90                   	nop

c00126c2 <Filesystem::~Filesystem()>:
c00126c2:	ba e8 98 03 c0       	mov    edx,0xc00398e8
c00126c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126cb:	89 10                	mov    DWORD PTR [eax],edx
c00126cd:	90                   	nop
c00126ce:	c3                   	ret    
c00126cf:	90                   	nop

c00126d0 <Filesystem::~Filesystem()>:
c00126d0:	83 ec 0c             	sub    esp,0xc
c00126d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00126d7:	e8 e6 ff ff ff       	call   c00126c2 <Filesystem::~Filesystem()>
c00126dc:	83 c4 04             	add    esp,0x4
c00126df:	83 ec 08             	sub    esp,0x8
c00126e2:	6a 08                	push   0x8
c00126e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126e8:	e8 bc fd ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c00126ed:	83 c4 10             	add    esp,0x10
c00126f0:	83 c4 0c             	add    esp,0xc
c00126f3:	c3                   	ret    

c00126f4 <initVFS()>:
c00126f4:	83 ec 18             	sub    esp,0x18
c00126f7:	6a 08                	push   0x8
c00126f9:	e8 9c fd ff ff       	call   c001249a <operator new(unsigned long)>
c00126fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0012701:	e8 24 71 00 00       	call   c001982a <FAT::FAT()>
c0012706:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001270d:	e8 88 fd ff ff       	call   c001249a <operator new(unsigned long)>
c0012712:	89 04 24             	mov    DWORD PTR [esp],eax
c0012715:	e8 1a 83 00 00       	call   c001aa34 <ISO9660::ISO9660()>
c001271a:	83 c4 1c             	add    esp,0x1c
c001271d:	c3                   	ret    

c001271e <standardiseFiles(char*, char const*, char const*)>:
c001271e:	55                   	push   ebp
c001271f:	57                   	push   edi
c0012720:	56                   	push   esi
c0012721:	53                   	push   ebx
c0012722:	81 ec 10 04 00 00    	sub    esp,0x410
c0012728:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001272f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012736:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001273d:	68 00 04 00 00       	push   0x400
c0012742:	6a 00                	push   0x0
c0012744:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012748:	56                   	push   esi
c0012749:	e8 8a df fe ff       	call   c00006d8 <memset>
c001274e:	83 c4 10             	add    esp,0x10
c0012751:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012755:	75 0b                	jne    c0012762 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012757:	50                   	push   eax
c0012758:	50                   	push   eax
c0012759:	57                   	push   edi
c001275a:	56                   	push   esi
c001275b:	e8 94 e0 fe ff       	call   c00007f4 <strcpy>
c0012760:	eb 41                	jmp    c00127a3 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012762:	8a 07                	mov    al,BYTE PTR [edi]
c0012764:	3c 5c                	cmp    al,0x5c
c0012766:	74 04                	je     c001276c <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012768:	3c 2f                	cmp    al,0x2f
c001276a:	75 18                	jne    c0012784 <standardiseFiles(char*, char const*, char const*)+0x66>
c001276c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001276f:	3c 60                	cmp    al,0x60
c0012771:	7e 03                	jle    c0012776 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012773:	83 e8 20             	sub    eax,0x20
c0012776:	88 04 24             	mov    BYTE PTR [esp],al
c0012779:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012780:	50                   	push   eax
c0012781:	50                   	push   eax
c0012782:	eb 18                	jmp    c001279c <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012784:	50                   	push   eax
c0012785:	50                   	push   eax
c0012786:	55                   	push   ebp
c0012787:	56                   	push   esi
c0012788:	e8 67 e0 fe ff       	call   c00007f4 <strcpy>
c001278d:	5a                   	pop    edx
c001278e:	59                   	pop    ecx
c001278f:	68 de 8f 03 c0       	push   0xc0038fde
c0012794:	56                   	push   esi
c0012795:	e8 a7 e1 fe ff       	call   c0000941 <strcat>
c001279a:	5d                   	pop    ebp
c001279b:	58                   	pop    eax
c001279c:	57                   	push   edi
c001279d:	56                   	push   esi
c001279e:	e8 9e e1 fe ff       	call   c0000941 <strcat>
c00127a3:	83 c4 10             	add    esp,0x10
c00127a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00127a9:	3c 60                	cmp    al,0x60
c00127ab:	7e 03                	jle    c00127b0 <standardiseFiles(char*, char const*, char const*)+0x92>
c00127ad:	83 e8 20             	sub    eax,0x20
c00127b0:	88 04 24             	mov    BYTE PTR [esp],al
c00127b3:	88 03                	mov    BYTE PTR [ebx],al
c00127b5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00127bc:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00127c2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00127c6:	bf 03 00 00 00       	mov    edi,0x3
c00127cb:	b8 03 00 00 00       	mov    eax,0x3
c00127d0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00127d3:	84 d2                	test   dl,dl
c00127d5:	0f 84 91 00 00 00    	je     c001286c <standardiseFiles(char*, char const*, char const*)+0x14e>
c00127db:	8d 4f 01             	lea    ecx,[edi+0x1]
c00127de:	80 fa 5c             	cmp    dl,0x5c
c00127e1:	74 05                	je     c00127e8 <standardiseFiles(char*, char const*, char const*)+0xca>
c00127e3:	80 fa 2f             	cmp    dl,0x2f
c00127e6:	75 12                	jne    c00127fa <standardiseFiles(char*, char const*, char const*)+0xdc>
c00127e8:	89 c5                	mov    ebp,eax
c00127ea:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00127ef:	74 09                	je     c00127fa <standardiseFiles(char*, char const*, char const*)+0xdc>
c00127f1:	40                   	inc    eax
c00127f2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00127f6:	89 cf                	mov    edi,ecx
c00127f8:	eb d6                	jmp    c00127d0 <standardiseFiles(char*, char const*, char const*)+0xb2>
c00127fa:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00127ff:	75 5b                	jne    c001285c <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012801:	80 fa 2e             	cmp    dl,0x2e
c0012804:	75 56                	jne    c001285c <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012806:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001280a:	74 19                	je     c0012825 <standardiseFiles(char*, char const*, char const*)+0x107>
c001280c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012811:	74 53                	je     c0012866 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012813:	89 f9                	mov    ecx,edi
c0012815:	41                   	inc    ecx
c0012816:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012819:	80 fa 2f             	cmp    dl,0x2f
c001281c:	74 f7                	je     c0012815 <standardiseFiles(char*, char const*, char const*)+0xf7>
c001281e:	80 fa 5c             	cmp    dl,0x5c
c0012821:	74 f2                	je     c0012815 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012823:	eb d1                	jmp    c00127f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012825:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001282a:	74 3a                	je     c0012866 <standardiseFiles(char*, char const*, char const*)+0x148>
c001282c:	83 f8 03             	cmp    eax,0x3
c001282f:	74 c5                	je     c00127f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012831:	41                   	inc    ecx
c0012832:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012835:	80 fa 2f             	cmp    dl,0x2f
c0012838:	74 f7                	je     c0012831 <standardiseFiles(char*, char const*, char const*)+0x113>
c001283a:	80 fa 5c             	cmp    dl,0x5c
c001283d:	74 f2                	je     c0012831 <standardiseFiles(char*, char const*, char const*)+0x113>
c001283f:	48                   	dec    eax
c0012840:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012844:	75 06                	jne    c001284c <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012846:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001284a:	eb f3                	jmp    c001283f <standardiseFiles(char*, char const*, char const*)+0x121>
c001284c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012850:	74 07                	je     c0012859 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012852:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012856:	48                   	dec    eax
c0012857:	eb f3                	jmp    c001284c <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012859:	40                   	inc    eax
c001285a:	eb 9a                	jmp    c00127f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001285c:	80 fa 2f             	cmp    dl,0x2f
c001285f:	74 95                	je     c00127f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012861:	80 fa 5c             	cmp    dl,0x5c
c0012864:	74 90                	je     c00127f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012866:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012869:	40                   	inc    eax
c001286a:	eb 8a                	jmp    c00127f6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001286c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012870:	83 ec 0c             	sub    esp,0xc
c0012873:	53                   	push   ebx
c0012874:	e8 88 de fe ff       	call   c0000701 <strlen>
c0012879:	83 c4 10             	add    esp,0x10
c001287c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012881:	75 26                	jne    c00128a9 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012883:	83 ec 0c             	sub    esp,0xc
c0012886:	53                   	push   ebx
c0012887:	e8 75 de fe ff       	call   c0000701 <strlen>
c001288c:	83 c4 10             	add    esp,0x10
c001288f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012894:	74 26                	je     c00128bc <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012896:	83 ec 0c             	sub    esp,0xc
c0012899:	53                   	push   ebx
c001289a:	e8 62 de fe ff       	call   c0000701 <strlen>
c001289f:	83 c4 10             	add    esp,0x10
c00128a2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00128a7:	eb c7                	jmp    c0012870 <standardiseFiles(char*, char const*, char const*)+0x152>
c00128a9:	83 ec 0c             	sub    esp,0xc
c00128ac:	53                   	push   ebx
c00128ad:	e8 4f de fe ff       	call   c0000701 <strlen>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00128ba:	74 c7                	je     c0012883 <standardiseFiles(char*, char const*, char const*)+0x165>
c00128bc:	81 c4 0c 04 00 00    	add    esp,0x40c
c00128c2:	5b                   	pop    ebx
c00128c3:	5e                   	pop    esi
c00128c4:	5f                   	pop    edi
c00128c5:	5d                   	pop    ebp
c00128c6:	c3                   	ret    
c00128c7:	90                   	nop

c00128c8 <File::File(char const*, Process*)>:
c00128c8:	83 ec 0c             	sub    esp,0xc
c00128cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128cf:	83 ec 08             	sub    esp,0x8
c00128d2:	6a 00                	push   0x0
c00128d4:	50                   	push   eax
c00128d5:	e8 ec e7 ff ff       	call   c00110c6 <UnixFile::UnixFile(int)>
c00128da:	83 c4 10             	add    esp,0x10
c00128dd:	ba 4c 99 03 c0       	mov    edx,0xc003994c
c00128e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e6:	89 10                	mov    DWORD PTR [eax],edx
c00128e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ec:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00128f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f6:	83 c0 0d             	add    eax,0xd
c00128f9:	83 ec 04             	sub    esp,0x4
c00128fc:	52                   	push   edx
c00128fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012901:	50                   	push   eax
c0012902:	e8 17 fe ff ff       	call   c001271e <standardiseFiles(char*, char const*, char const*)>
c0012907:	83 c4 10             	add    esp,0x10
c001290a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001290e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012911:	8d 50 bf             	lea    edx,[eax-0x41]
c0012914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012918:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001291e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012922:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012926:	90                   	nop
c0012927:	83 c4 0c             	add    esp,0xc
c001292a:	c3                   	ret    
c001292b:	90                   	nop

c001292c <File::open(FileOpenMode)>:
c001292c:	53                   	push   ebx
c001292d:	b8 0b 00 00 00       	mov    eax,0xb
c0012932:	83 ec 08             	sub    esp,0x8
c0012935:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012939:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012940:	80 fa 19             	cmp    dl,0x19
c0012943:	77 40                	ja     c0012985 <File::open(FileOpenMode)+0x59>
c0012945:	8b 14 95 00 c4 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3c00]
c001294c:	85 d2                	test   edx,edx
c001294e:	74 35                	je     c0012985 <File::open(FileOpenMode)+0x59>
c0012950:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012956:	85 d2                	test   edx,edx
c0012958:	74 2b                	je     c0012985 <File::open(FileOpenMode)+0x59>
c001295a:	b8 06 00 00 00       	mov    eax,0x6
c001295f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012963:	75 20                	jne    c0012985 <File::open(FileOpenMode)+0x59>
c0012965:	8b 02                	mov    eax,DWORD PTR [edx]
c0012967:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001296d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012971:	51                   	push   ecx
c0012972:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012975:	51                   	push   ecx
c0012976:	52                   	push   edx
c0012977:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001297a:	83 c4 10             	add    esp,0x10
c001297d:	85 c0                	test   eax,eax
c001297f:	75 04                	jne    c0012985 <File::open(FileOpenMode)+0x59>
c0012981:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012985:	83 c4 08             	add    esp,0x8
c0012988:	5b                   	pop    ebx
c0012989:	c3                   	ret    

c001298a <File::close()>:
c001298a:	53                   	push   ebx
c001298b:	b8 0b 00 00 00       	mov    eax,0xb
c0012990:	83 ec 08             	sub    esp,0x8
c0012993:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012997:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001299e:	80 fa 19             	cmp    dl,0x19
c00129a1:	77 41                	ja     c00129e4 <File::close()+0x5a>
c00129a3:	8b 1c 95 00 c4 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3c00]
c00129aa:	85 db                	test   ebx,ebx
c00129ac:	74 36                	je     c00129e4 <File::close()+0x5a>
c00129ae:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00129b5:	74 2d                	je     c00129e4 <File::close()+0x5a>
c00129b7:	b8 05 00 00 00       	mov    eax,0x5
c00129bc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00129c0:	74 22                	je     c00129e4 <File::close()+0x5a>
c00129c2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00129c6:	8b 04 95 00 c4 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3c00]
c00129cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129d3:	53                   	push   ebx
c00129d4:	53                   	push   ebx
c00129d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00129d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00129dd:	50                   	push   eax
c00129de:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00129e1:	83 c4 10             	add    esp,0x10
c00129e4:	83 c4 08             	add    esp,0x8
c00129e7:	5b                   	pop    ebx
c00129e8:	c3                   	ret    
c00129e9:	90                   	nop

c00129ea <File::seek(unsigned long long)>:
c00129ea:	56                   	push   esi
c00129eb:	53                   	push   ebx
c00129ec:	b8 0b 00 00 00       	mov    eax,0xb
c00129f1:	51                   	push   ecx
c00129f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00129f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00129fa:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012a01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012a05:	80 fa 19             	cmp    dl,0x19
c0012a08:	77 31                	ja     c0012a3b <File::seek(unsigned long long)+0x51>
c0012a0a:	8b 14 95 00 c4 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3c00]
c0012a11:	85 d2                	test   edx,edx
c0012a13:	74 26                	je     c0012a3b <File::seek(unsigned long long)+0x51>
c0012a15:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012a1b:	85 d2                	test   edx,edx
c0012a1d:	74 1c                	je     c0012a3b <File::seek(unsigned long long)+0x51>
c0012a1f:	b8 05 00 00 00       	mov    eax,0x5
c0012a24:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012a28:	74 11                	je     c0012a3b <File::seek(unsigned long long)+0x51>
c0012a2a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a2c:	53                   	push   ebx
c0012a2d:	51                   	push   ecx
c0012a2e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012a34:	52                   	push   edx
c0012a35:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012a38:	83 c4 10             	add    esp,0x10
c0012a3b:	5a                   	pop    edx
c0012a3c:	5b                   	pop    ebx
c0012a3d:	5e                   	pop    esi
c0012a3e:	c3                   	ret    
c0012a3f:	90                   	nop

c0012a40 <File::tell(unsigned long long*)>:
c0012a40:	83 ec 0c             	sub    esp,0xc
c0012a43:	b8 0b 00 00 00       	mov    eax,0xb
c0012a48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012a4c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012a53:	80 fa 19             	cmp    dl,0x19
c0012a56:	77 34                	ja     c0012a8c <File::tell(unsigned long long*)+0x4c>
c0012a58:	8b 14 95 00 c4 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3c00]
c0012a5f:	85 d2                	test   edx,edx
c0012a61:	74 29                	je     c0012a8c <File::tell(unsigned long long*)+0x4c>
c0012a63:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012a69:	85 d2                	test   edx,edx
c0012a6b:	74 1f                	je     c0012a8c <File::tell(unsigned long long*)+0x4c>
c0012a6d:	b8 05 00 00 00       	mov    eax,0x5
c0012a72:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012a76:	74 14                	je     c0012a8c <File::tell(unsigned long long*)+0x4c>
c0012a78:	50                   	push   eax
c0012a79:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a7f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012a85:	52                   	push   edx
c0012a86:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012a89:	83 c4 10             	add    esp,0x10
c0012a8c:	83 c4 0c             	add    esp,0xc
c0012a8f:	c3                   	ret    

c0012a90 <File::rewind()>:
c0012a90:	83 ec 10             	sub    esp,0x10
c0012a93:	6a 00                	push   0x0
c0012a95:	6a 00                	push   0x0
c0012a97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a9b:	e8 4a ff ff ff       	call   c00129ea <File::seek(unsigned long long)>
c0012aa0:	83 c4 1c             	add    esp,0x1c
c0012aa3:	c3                   	ret    

c0012aa4 <File::unlink()>:
c0012aa4:	83 ec 0c             	sub    esp,0xc
c0012aa7:	b8 0b 00 00 00       	mov    eax,0xb
c0012aac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ab0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ab7:	80 f9 19             	cmp    cl,0x19
c0012aba:	77 2f                	ja     c0012aeb <File::unlink()+0x47>
c0012abc:	8b 0c 8d 00 c4 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3c00]
c0012ac3:	85 c9                	test   ecx,ecx
c0012ac5:	74 24                	je     c0012aeb <File::unlink()+0x47>
c0012ac7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012acd:	85 c9                	test   ecx,ecx
c0012acf:	74 1a                	je     c0012aeb <File::unlink()+0x47>
c0012ad1:	b8 06 00 00 00       	mov    eax,0x6
c0012ad6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ada:	75 0f                	jne    c0012aeb <File::unlink()+0x47>
c0012adc:	83 c2 0d             	add    edx,0xd
c0012adf:	50                   	push   eax
c0012ae0:	50                   	push   eax
c0012ae1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ae3:	52                   	push   edx
c0012ae4:	51                   	push   ecx
c0012ae5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	83 c4 0c             	add    esp,0xc
c0012aee:	c3                   	ret    
c0012aef:	90                   	nop

c0012af0 <File::rename(char const*)>:
c0012af0:	83 ec 0c             	sub    esp,0xc
c0012af3:	b8 0b 00 00 00       	mov    eax,0xb
c0012af8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012afc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b03:	80 f9 19             	cmp    cl,0x19
c0012b06:	77 32                	ja     c0012b3a <File::rename(char const*)+0x4a>
c0012b08:	8b 0c 8d 00 c4 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3c00]
c0012b0f:	85 c9                	test   ecx,ecx
c0012b11:	74 27                	je     c0012b3a <File::rename(char const*)+0x4a>
c0012b13:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b19:	85 c9                	test   ecx,ecx
c0012b1b:	74 1d                	je     c0012b3a <File::rename(char const*)+0x4a>
c0012b1d:	b8 06 00 00 00       	mov    eax,0x6
c0012b22:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b26:	75 12                	jne    c0012b3a <File::rename(char const*)+0x4a>
c0012b28:	83 c2 0d             	add    edx,0xd
c0012b2b:	50                   	push   eax
c0012b2c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b32:	52                   	push   edx
c0012b33:	51                   	push   ecx
c0012b34:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012b37:	83 c4 10             	add    esp,0x10
c0012b3a:	83 c4 0c             	add    esp,0xc
c0012b3d:	c3                   	ret    

c0012b3e <File::chfatattr(unsigned char, unsigned char)>:
c0012b3e:	57                   	push   edi
c0012b3f:	b8 0b 00 00 00       	mov    eax,0xb
c0012b44:	56                   	push   esi
c0012b45:	53                   	push   ebx
c0012b46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b55:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012b59:	80 f9 19             	cmp    cl,0x19
c0012b5c:	77 37                	ja     c0012b95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b5e:	8b 0c 8d 00 c4 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3c00]
c0012b65:	85 c9                	test   ecx,ecx
c0012b67:	74 2c                	je     c0012b95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b69:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b6f:	85 c9                	test   ecx,ecx
c0012b71:	74 22                	je     c0012b95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b73:	b8 06 00 00 00       	mov    eax,0x6
c0012b78:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b7c:	75 17                	jne    c0012b95 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b7e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012b80:	89 f0                	mov    eax,esi
c0012b82:	83 c2 0d             	add    edx,0xd
c0012b85:	0f b6 f0             	movzx  esi,al
c0012b88:	0f b6 db             	movzx  ebx,bl
c0012b8b:	56                   	push   esi
c0012b8c:	53                   	push   ebx
c0012b8d:	52                   	push   edx
c0012b8e:	51                   	push   ecx
c0012b8f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012b92:	83 c4 10             	add    esp,0x10
c0012b95:	5b                   	pop    ebx
c0012b96:	5e                   	pop    esi
c0012b97:	5f                   	pop    edi
c0012b98:	c3                   	ret    
c0012b99:	90                   	nop

c0012b9a <File::exists()>:
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	31 c0                	xor    eax,eax
c0012b9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ba3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012baa:	80 f9 19             	cmp    cl,0x19
c0012bad:	77 24                	ja     c0012bd3 <File::exists()+0x39>
c0012baf:	8b 0c 8d 00 c4 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3c00]
c0012bb6:	85 c9                	test   ecx,ecx
c0012bb8:	74 19                	je     c0012bd3 <File::exists()+0x39>
c0012bba:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012bc0:	85 c9                	test   ecx,ecx
c0012bc2:	74 0f                	je     c0012bd3 <File::exists()+0x39>
c0012bc4:	83 c2 0d             	add    edx,0xd
c0012bc7:	50                   	push   eax
c0012bc8:	50                   	push   eax
c0012bc9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012bcb:	52                   	push   edx
c0012bcc:	51                   	push   ecx
c0012bcd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012bd0:	83 c4 10             	add    esp,0x10
c0012bd3:	83 c4 0c             	add    esp,0xc
c0012bd6:	c3                   	ret    
c0012bd7:	90                   	nop

c0012bd8 <File::stat(unsigned long long*, bool*)>:
c0012bd8:	56                   	push   esi
c0012bd9:	53                   	push   ebx
c0012bda:	50                   	push   eax
c0012bdb:	b8 0b 00 00 00       	mov    eax,0xb
c0012be0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012be4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012be8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012bef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012bf3:	80 f9 19             	cmp    cl,0x19
c0012bf6:	77 3d                	ja     c0012c35 <File::stat(unsigned long long*, bool*)+0x5d>
c0012bf8:	8b 0c 8d 00 c4 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3c00]
c0012bff:	85 c9                	test   ecx,ecx
c0012c01:	74 32                	je     c0012c35 <File::stat(unsigned long long*, bool*)+0x5d>
c0012c03:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012c09:	85 c9                	test   ecx,ecx
c0012c0b:	74 28                	je     c0012c35 <File::stat(unsigned long long*, bool*)+0x5d>
c0012c0d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c0f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c13:	74 13                	je     c0012c28 <File::stat(unsigned long long*, bool*)+0x50>
c0012c15:	83 ec 04             	sub    esp,0x4
c0012c18:	56                   	push   esi
c0012c19:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012c1f:	51                   	push   ecx
c0012c20:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012c23:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012c26:	eb 0a                	jmp    c0012c32 <File::stat(unsigned long long*, bool*)+0x5a>
c0012c28:	53                   	push   ebx
c0012c29:	83 c2 0d             	add    edx,0xd
c0012c2c:	56                   	push   esi
c0012c2d:	52                   	push   edx
c0012c2e:	51                   	push   ecx
c0012c2f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	5a                   	pop    edx
c0012c36:	5b                   	pop    ebx
c0012c37:	5e                   	pop    esi
c0012c38:	c3                   	ret    

c0012c39 <getcwd(Process*, char*, int)>:
c0012c39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c3d:	31 c0                	xor    eax,eax
c0012c3f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c42:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c46:	7d 15                	jge    c0012c5d <getcwd(Process*, char*, int)+0x24>
c0012c48:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c4c:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c53:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c56:	84 c9                	test   cl,cl
c0012c58:	74 06                	je     c0012c60 <getcwd(Process*, char*, int)+0x27>
c0012c5a:	40                   	inc    eax
c0012c5b:	eb e2                	jmp    c0012c3f <getcwd(Process*, char*, int)+0x6>
c0012c5d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c60:	31 c0                	xor    eax,eax
c0012c62:	c3                   	ret    

c0012c63 <setcwd(Process*, char*)>:
c0012c63:	55                   	push   ebp
c0012c64:	57                   	push   edi
c0012c65:	56                   	push   esi
c0012c66:	53                   	push   ebx
c0012c67:	81 ec 20 02 00 00    	sub    esp,0x220
c0012c6d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012c74:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012c7a:	57                   	push   edi
c0012c7b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012c82:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012c86:	56                   	push   esi
c0012c87:	e8 92 fa ff ff       	call   c001271e <standardiseFiles(char*, char const*, char const*)>
c0012c8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c8f:	e8 6d da fe ff       	call   c0000701 <strlen>
c0012c94:	83 c4 10             	add    esp,0x10
c0012c97:	83 f8 02             	cmp    eax,0x2
c0012c9a:	77 17                	ja     c0012cb3 <setcwd(Process*, char*)+0x50>
c0012c9c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012ca1:	83 e8 41             	sub    eax,0x41
c0012ca4:	83 f8 19             	cmp    eax,0x19
c0012ca7:	76 24                	jbe    c0012ccd <setcwd(Process*, char*)+0x6a>
c0012ca9:	b8 03 00 00 00       	mov    eax,0x3
c0012cae:	e9 cb 00 00 00       	jmp    c0012d7e <setcwd(Process*, char*)+0x11b>
c0012cb3:	83 ec 0c             	sub    esp,0xc
c0012cb6:	56                   	push   esi
c0012cb7:	e8 45 da fe ff       	call   c0000701 <strlen>
c0012cbc:	83 c4 10             	add    esp,0x10
c0012cbf:	83 f8 03             	cmp    eax,0x3
c0012cc2:	75 33                	jne    c0012cf7 <setcwd(Process*, char*)+0x94>
c0012cc4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012cc9:	75 2c                	jne    c0012cf7 <setcwd(Process*, char*)+0x94>
c0012ccb:	eb cf                	jmp    c0012c9c <setcwd(Process*, char*)+0x39>
c0012ccd:	8b 14 85 00 c4 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3c00]
c0012cd4:	b8 05 00 00 00       	mov    eax,0x5
c0012cd9:	85 d2                	test   edx,edx
c0012cdb:	0f 84 9d 00 00 00    	je     c0012d7e <setcwd(Process*, char*)+0x11b>
c0012ce1:	b8 06 00 00 00       	mov    eax,0x6
c0012ce6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ced:	0f 84 8b 00 00 00    	je     c0012d7e <setcwd(Process*, char*)+0x11b>
c0012cf3:	51                   	push   ecx
c0012cf4:	51                   	push   ecx
c0012cf5:	eb 7b                	jmp    c0012d72 <setcwd(Process*, char*)+0x10f>
c0012cf7:	83 ec 0c             	sub    esp,0xc
c0012cfa:	68 14 01 00 00       	push   0x114
c0012cff:	e8 96 f7 ff ff       	call   c001249a <operator new(unsigned long)>
c0012d04:	83 c4 0c             	add    esp,0xc
c0012d07:	89 c3                	mov    ebx,eax
c0012d09:	55                   	push   ebp
c0012d0a:	56                   	push   esi
c0012d0b:	50                   	push   eax
c0012d0c:	e8 b7 fb ff ff       	call   c00128c8 <File::File(char const*, Process*)>
c0012d11:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012d16:	83 c4 0c             	add    esp,0xc
c0012d19:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012d1d:	50                   	push   eax
c0012d1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012d22:	50                   	push   eax
c0012d23:	53                   	push   ebx
c0012d24:	e8 af fe ff ff       	call   c0012bd8 <File::stat(unsigned long long*, bool*)>
c0012d29:	83 c4 10             	add    esp,0x10
c0012d2c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012d2e:	83 f8 02             	cmp    eax,0x2
c0012d31:	75 09                	jne    c0012d3c <setcwd(Process*, char*)+0xd9>
c0012d33:	83 ec 0c             	sub    esp,0xc
c0012d36:	53                   	push   ebx
c0012d37:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012d3a:	eb 0d                	jmp    c0012d49 <setcwd(Process*, char*)+0xe6>
c0012d3c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012d3f:	85 c0                	test   eax,eax
c0012d41:	74 10                	je     c0012d53 <setcwd(Process*, char*)+0xf0>
c0012d43:	83 ec 0c             	sub    esp,0xc
c0012d46:	53                   	push   ebx
c0012d47:	ff d2                	call   edx
c0012d49:	83 c4 10             	add    esp,0x10
c0012d4c:	b8 01 00 00 00       	mov    eax,0x1
c0012d51:	eb 2b                	jmp    c0012d7e <setcwd(Process*, char*)+0x11b>
c0012d53:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012d58:	75 10                	jne    c0012d6a <setcwd(Process*, char*)+0x107>
c0012d5a:	83 ec 0c             	sub    esp,0xc
c0012d5d:	53                   	push   ebx
c0012d5e:	ff d2                	call   edx
c0012d60:	83 c4 10             	add    esp,0x10
c0012d63:	b8 02 00 00 00       	mov    eax,0x2
c0012d68:	eb 14                	jmp    c0012d7e <setcwd(Process*, char*)+0x11b>
c0012d6a:	83 ec 0c             	sub    esp,0xc
c0012d6d:	53                   	push   ebx
c0012d6e:	ff d2                	call   edx
c0012d70:	58                   	pop    eax
c0012d71:	5a                   	pop    edx
c0012d72:	56                   	push   esi
c0012d73:	57                   	push   edi
c0012d74:	e8 7b da fe ff       	call   c00007f4 <strcpy>
c0012d79:	83 c4 10             	add    esp,0x10
c0012d7c:	31 c0                	xor    eax,eax
c0012d7e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012d84:	5b                   	pop    ebx
c0012d85:	5e                   	pop    esi
c0012d86:	5f                   	pop    edi
c0012d87:	5d                   	pop    ebp
c0012d88:	c3                   	ret    
c0012d89:	90                   	nop

c0012d8a <Directory::Directory(char const*, Process*)>:
c0012d8a:	83 ec 0c             	sub    esp,0xc
c0012d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d91:	83 ec 08             	sub    esp,0x8
c0012d94:	6a 00                	push   0x0
c0012d96:	50                   	push   eax
c0012d97:	e8 2a e3 ff ff       	call   c00110c6 <UnixFile::UnixFile(int)>
c0012d9c:	83 c4 10             	add    esp,0x10
c0012d9f:	ba 68 99 03 c0       	mov    edx,0xc0039968
c0012da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da8:	89 10                	mov    DWORD PTR [eax],edx
c0012daa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012dae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db8:	83 c0 0d             	add    eax,0xd
c0012dbb:	83 ec 04             	sub    esp,0x4
c0012dbe:	52                   	push   edx
c0012dbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dc3:	50                   	push   eax
c0012dc4:	e8 55 f9 ff ff       	call   c001271e <standardiseFiles(char*, char const*, char const*)>
c0012dc9:	83 c4 10             	add    esp,0x10
c0012dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012dd3:	8d 50 bf             	lea    edx,[eax-0x41]
c0012dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dda:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012de8:	90                   	nop
c0012de9:	83 c4 0c             	add    esp,0xc
c0012dec:	c3                   	ret    
c0012ded:	90                   	nop

c0012dee <Directory::open()>:
c0012dee:	53                   	push   ebx
c0012def:	b8 0b 00 00 00       	mov    eax,0xb
c0012df4:	83 ec 08             	sub    esp,0x8
c0012df7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012dfb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012e02:	80 fa 19             	cmp    dl,0x19
c0012e05:	77 3d                	ja     c0012e44 <Directory::open()+0x56>
c0012e07:	8b 14 95 00 c4 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3c00]
c0012e0e:	85 d2                	test   edx,edx
c0012e10:	74 32                	je     c0012e44 <Directory::open()+0x56>
c0012e12:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e18:	85 d2                	test   edx,edx
c0012e1a:	74 28                	je     c0012e44 <Directory::open()+0x56>
c0012e1c:	b8 06 00 00 00       	mov    eax,0x6
c0012e21:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012e25:	75 1d                	jne    c0012e44 <Directory::open()+0x56>
c0012e27:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e2d:	50                   	push   eax
c0012e2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e30:	51                   	push   ecx
c0012e31:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e34:	51                   	push   ecx
c0012e35:	52                   	push   edx
c0012e36:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012e39:	83 c4 10             	add    esp,0x10
c0012e3c:	85 c0                	test   eax,eax
c0012e3e:	75 04                	jne    c0012e44 <Directory::open()+0x56>
c0012e40:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012e44:	83 c4 08             	add    esp,0x8
c0012e47:	5b                   	pop    ebx
c0012e48:	c3                   	ret    
c0012e49:	90                   	nop

c0012e4a <Directory::close()>:
c0012e4a:	53                   	push   ebx
c0012e4b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e50:	83 ec 08             	sub    esp,0x8
c0012e53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e57:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e5e:	80 fa 19             	cmp    dl,0x19
c0012e61:	77 41                	ja     c0012ea4 <Directory::close()+0x5a>
c0012e63:	8b 1c 95 00 c4 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3c00]
c0012e6a:	85 db                	test   ebx,ebx
c0012e6c:	74 36                	je     c0012ea4 <Directory::close()+0x5a>
c0012e6e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012e75:	74 2d                	je     c0012ea4 <Directory::close()+0x5a>
c0012e77:	b8 05 00 00 00       	mov    eax,0x5
c0012e7c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e80:	74 22                	je     c0012ea4 <Directory::close()+0x5a>
c0012e82:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012e86:	8b 04 95 00 c4 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3c00]
c0012e8d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012e93:	53                   	push   ebx
c0012e94:	53                   	push   ebx
c0012e95:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e9d:	50                   	push   eax
c0012e9e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012ea1:	83 c4 10             	add    esp,0x10
c0012ea4:	83 c4 08             	add    esp,0x8
c0012ea7:	5b                   	pop    ebx
c0012ea8:	c3                   	ret    
c0012ea9:	90                   	nop

c0012eaa <Directory::unlink()>:
c0012eaa:	83 ec 0c             	sub    esp,0xc
c0012ead:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eb6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ebd:	80 f9 19             	cmp    cl,0x19
c0012ec0:	77 2f                	ja     c0012ef1 <Directory::unlink()+0x47>
c0012ec2:	8b 0c 8d 00 c4 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3c00]
c0012ec9:	85 c9                	test   ecx,ecx
c0012ecb:	74 24                	je     c0012ef1 <Directory::unlink()+0x47>
c0012ecd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ed3:	85 c9                	test   ecx,ecx
c0012ed5:	74 1a                	je     c0012ef1 <Directory::unlink()+0x47>
c0012ed7:	b8 06 00 00 00       	mov    eax,0x6
c0012edc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ee0:	75 0f                	jne    c0012ef1 <Directory::unlink()+0x47>
c0012ee2:	83 c2 0d             	add    edx,0xd
c0012ee5:	50                   	push   eax
c0012ee6:	50                   	push   eax
c0012ee7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ee9:	52                   	push   edx
c0012eea:	51                   	push   ecx
c0012eeb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012eee:	83 c4 10             	add    esp,0x10
c0012ef1:	83 c4 0c             	add    esp,0xc
c0012ef4:	c3                   	ret    
c0012ef5:	90                   	nop

c0012ef6 <Directory::rename(char const*)>:
c0012ef6:	83 ec 0c             	sub    esp,0xc
c0012ef9:	b8 0b 00 00 00       	mov    eax,0xb
c0012efe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f02:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f09:	80 f9 19             	cmp    cl,0x19
c0012f0c:	77 32                	ja     c0012f40 <Directory::rename(char const*)+0x4a>
c0012f0e:	8b 0c 8d 00 c4 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3c00]
c0012f15:	85 c9                	test   ecx,ecx
c0012f17:	74 27                	je     c0012f40 <Directory::rename(char const*)+0x4a>
c0012f19:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f1f:	85 c9                	test   ecx,ecx
c0012f21:	74 1d                	je     c0012f40 <Directory::rename(char const*)+0x4a>
c0012f23:	b8 06 00 00 00       	mov    eax,0x6
c0012f28:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f2c:	75 12                	jne    c0012f40 <Directory::rename(char const*)+0x4a>
c0012f2e:	83 c2 0d             	add    edx,0xd
c0012f31:	50                   	push   eax
c0012f32:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f38:	52                   	push   edx
c0012f39:	51                   	push   ecx
c0012f3a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f3d:	83 c4 10             	add    esp,0x10
c0012f40:	83 c4 0c             	add    esp,0xc
c0012f43:	c3                   	ret    

c0012f44 <Directory::exists()>:
c0012f44:	83 ec 0c             	sub    esp,0xc
c0012f47:	31 c0                	xor    eax,eax
c0012f49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f4d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f54:	80 f9 19             	cmp    cl,0x19
c0012f57:	77 24                	ja     c0012f7d <Directory::exists()+0x39>
c0012f59:	8b 0c 8d 00 c4 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3c00]
c0012f60:	85 c9                	test   ecx,ecx
c0012f62:	74 19                	je     c0012f7d <Directory::exists()+0x39>
c0012f64:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f6a:	85 c9                	test   ecx,ecx
c0012f6c:	74 0f                	je     c0012f7d <Directory::exists()+0x39>
c0012f6e:	83 c2 0d             	add    edx,0xd
c0012f71:	50                   	push   eax
c0012f72:	50                   	push   eax
c0012f73:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f75:	52                   	push   edx
c0012f76:	51                   	push   ecx
c0012f77:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	83 c4 0c             	add    esp,0xc
c0012f80:	c3                   	ret    
c0012f81:	90                   	nop

c0012f82 <Directory::read(dirent*)>:
c0012f82:	83 ec 1c             	sub    esp,0x1c
c0012f85:	b8 0b 00 00 00       	mov    eax,0xb
c0012f8a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012f8e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f95:	80 fa 19             	cmp    dl,0x19
c0012f98:	77 30                	ja     c0012fca <Directory::read(dirent*)+0x48>
c0012f9a:	8b 14 95 00 c4 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3c00]
c0012fa1:	85 d2                	test   edx,edx
c0012fa3:	74 25                	je     c0012fca <Directory::read(dirent*)+0x48>
c0012fa5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012fac:	74 1c                	je     c0012fca <Directory::read(dirent*)+0x48>
c0012fae:	83 ec 0c             	sub    esp,0xc
c0012fb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fb3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012fb7:	52                   	push   edx
c0012fb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012fbc:	6a 00                	push   0x0
c0012fbe:	68 10 01 00 00       	push   0x110
c0012fc3:	51                   	push   ecx
c0012fc4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012fc7:	83 c4 20             	add    esp,0x20
c0012fca:	83 c4 1c             	add    esp,0x1c
c0012fcd:	c3                   	ret    

c0012fce <Directory::create()>:
c0012fce:	83 ec 0c             	sub    esp,0xc
c0012fd1:	b8 0b 00 00 00       	mov    eax,0xb
c0012fd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fda:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fe1:	80 f9 19             	cmp    cl,0x19
c0012fe4:	77 2f                	ja     c0013015 <Directory::create()+0x47>
c0012fe6:	8b 0c 8d 00 c4 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3c00]
c0012fed:	85 c9                	test   ecx,ecx
c0012fef:	74 24                	je     c0013015 <Directory::create()+0x47>
c0012ff1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ff7:	85 c9                	test   ecx,ecx
c0012ff9:	74 1a                	je     c0013015 <Directory::create()+0x47>
c0012ffb:	b8 06 00 00 00       	mov    eax,0x6
c0013000:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013004:	75 0f                	jne    c0013015 <Directory::create()+0x47>
c0013006:	83 c2 0d             	add    edx,0xd
c0013009:	50                   	push   eax
c001300a:	50                   	push   eax
c001300b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001300d:	52                   	push   edx
c001300e:	51                   	push   ecx
c001300f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013012:	83 c4 10             	add    esp,0x10
c0013015:	83 c4 0c             	add    esp,0xc
c0013018:	c3                   	ret    
c0013019:	90                   	nop

c001301a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001301a:	b8 0a 00 00 00       	mov    eax,0xa
c001301f:	c3                   	ret    

c0013020 <Bus::Bus(char const*)>:
c0013020:	83 ec 0c             	sub    esp,0xc
c0013023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013027:	83 ec 08             	sub    esp,0x8
c001302a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001302e:	50                   	push   eax
c001302f:	e8 60 09 00 00       	call   c0013994 <Device::Device(char const*)>
c0013034:	83 c4 10             	add    esp,0x10
c0013037:	ba 84 99 03 c0       	mov    edx,0xc0039984
c001303c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013040:	89 10                	mov    DWORD PTR [eax],edx
c0013042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013046:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013050:	90                   	nop
c0013051:	83 c4 0c             	add    esp,0xc
c0013054:	c3                   	ret    
c0013055:	90                   	nop

c0013056 <Bus::~Bus()>:
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	ba 84 99 03 c0       	mov    edx,0xc0039984
c001305e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013062:	89 10                	mov    DWORD PTR [eax],edx
c0013064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013068:	83 ec 0c             	sub    esp,0xc
c001306b:	50                   	push   eax
c001306c:	e8 d5 05 00 00       	call   c0013646 <Device::~Device()>
c0013071:	83 c4 10             	add    esp,0x10
c0013074:	90                   	nop
c0013075:	83 c4 0c             	add    esp,0xc
c0013078:	c3                   	ret    
c0013079:	90                   	nop

c001307a <Bus::~Bus()>:
c001307a:	83 ec 0c             	sub    esp,0xc
c001307d:	83 ec 0c             	sub    esp,0xc
c0013080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013084:	e8 cd ff ff ff       	call   c0013056 <Bus::~Bus()>
c0013089:	83 c4 10             	add    esp,0x10
c001308c:	83 ec 08             	sub    esp,0x8
c001308f:	68 58 01 00 00       	push   0x158
c0013094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013098:	e8 0c f4 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001309d:	83 c4 10             	add    esp,0x10
c00130a0:	83 c4 0c             	add    esp,0xc
c00130a3:	c3                   	ret    

c00130a4 <Buzzer::Buzzer(char const*)>:
c00130a4:	83 ec 0c             	sub    esp,0xc
c00130a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ab:	83 ec 08             	sub    esp,0x8
c00130ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130b2:	50                   	push   eax
c00130b3:	e8 dc 08 00 00       	call   c0013994 <Device::Device(char const*)>
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	ba b0 99 03 c0       	mov    edx,0xc00399b0
c00130c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c4:	89 10                	mov    DWORD PTR [eax],edx
c00130c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ca:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00130d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00130e2:	90                   	nop
c00130e3:	83 c4 0c             	add    esp,0xc
c00130e6:	c3                   	ret    
c00130e7:	90                   	nop

c00130e8 <Buzzer::~Buzzer()>:
c00130e8:	83 ec 0c             	sub    esp,0xc
c00130eb:	ba b0 99 03 c0       	mov    edx,0xc00399b0
c00130f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f4:	89 10                	mov    DWORD PTR [eax],edx
c00130f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130fa:	83 ec 0c             	sub    esp,0xc
c00130fd:	50                   	push   eax
c00130fe:	e8 43 05 00 00       	call   c0013646 <Device::~Device()>
c0013103:	83 c4 10             	add    esp,0x10
c0013106:	90                   	nop
c0013107:	83 c4 0c             	add    esp,0xc
c001310a:	c3                   	ret    
c001310b:	90                   	nop

c001310c <Buzzer::~Buzzer()>:
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	83 ec 0c             	sub    esp,0xc
c0013112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013116:	e8 cd ff ff ff       	call   c00130e8 <Buzzer::~Buzzer()>
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	83 ec 08             	sub    esp,0x8
c0013121:	68 5c 01 00 00       	push   0x15c
c0013126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001312a:	e8 7a f3 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001312f:	83 c4 10             	add    esp,0x10
c0013132:	83 c4 0c             	add    esp,0xc
c0013135:	c3                   	ret    

c0013136 <Buzzer::stop()>:
c0013136:	83 ec 14             	sub    esp,0x14
c0013139:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001313d:	8b 10                	mov    edx,DWORD PTR [eax]
c001313f:	6a 00                	push   0x0
c0013141:	50                   	push   eax
c0013142:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013145:	83 c4 1c             	add    esp,0x1c
c0013148:	c3                   	ret    

c0013149 <beepThread(void*)>:
c0013149:	53                   	push   ebx
c001314a:	83 ec 08             	sub    esp,0x8
c001314d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013151:	e8 38 b2 ff ff       	call   c000e38e <unlockScheduler()>
c0013156:	b8 40 42 0f 00       	mov    eax,0xf4240
c001315b:	52                   	push   edx
c001315c:	52                   	push   edx
c001315d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013163:	52                   	push   edx
c0013164:	50                   	push   eax
c0013165:	e8 db b8 ff ff       	call   c000ea45 <nanoSleep(unsigned long long)>
c001316a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001316d:	e8 c4 ff ff ff       	call   c0013136 <Buzzer::stop()>
c0013172:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001317a:	83 c4 18             	add    esp,0x18
c001317d:	5b                   	pop    ebx
c001317e:	e9 08 b8 ff ff       	jmp    c000e98b <blockTask(TaskState)>
c0013183:	90                   	nop

c0013184 <Buzzer::beep(int, int, bool)>:
c0013184:	57                   	push   edi
c0013185:	56                   	push   esi
c0013186:	53                   	push   ebx
c0013187:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001318b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001318f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013193:	52                   	push   edx
c0013194:	52                   	push   edx
c0013195:	8b 06                	mov    eax,DWORD PTR [esi]
c0013197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001319b:	56                   	push   esi
c001319c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001319f:	83 c4 10             	add    esp,0x10
c00131a2:	89 f8                	mov    eax,edi
c00131a4:	84 c0                	test   al,al
c00131a6:	74 1f                	je     c00131c7 <Buzzer::beep(int, int, bool)+0x43>
c00131a8:	50                   	push   eax
c00131a9:	50                   	push   eax
c00131aa:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00131b0:	99                   	cdq    
c00131b1:	52                   	push   edx
c00131b2:	50                   	push   eax
c00131b3:	e8 8d b8 ff ff       	call   c000ea45 <nanoSleep(unsigned long long)>
c00131b8:	83 c4 10             	add    esp,0x10
c00131bb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00131bf:	5b                   	pop    ebx
c00131c0:	5e                   	pop    esi
c00131c1:	5f                   	pop    edi
c00131c2:	e9 6f ff ff ff       	jmp    c0013136 <Buzzer::stop()>
c00131c7:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00131cd:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00131d2:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00131da:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00131de:	c7 44 24 14 49 31 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013149
c00131e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00131ea:	5b                   	pop    ebx
c00131eb:	5e                   	pop    esi
c00131ec:	5f                   	pop    edi
c00131ed:	e9 c4 b2 ff ff       	jmp    c000e4b6 <Process::createThread(void (*)(void*), void*, int)>

c00131f2 <loadClockSettings()>:
c00131f2:	c7 05 6c bf 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc003bf6c,0xa
c00131fc:	c6 05 69 bf 03 c0 00 	mov    BYTE PTR ds:0xc003bf69,0x0
c0013203:	c6 05 68 bf 03 c0 01 	mov    BYTE PTR ds:0xc003bf68,0x1
c001320a:	c3                   	ret    
c001320b:	90                   	nop

c001320c <Clock::Clock(char const*)>:
c001320c:	83 ec 0c             	sub    esp,0xc
c001320f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013213:	83 ec 08             	sub    esp,0x8
c0013216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001321a:	50                   	push   eax
c001321b:	e8 74 07 00 00       	call   c0013994 <Device::Device(char const*)>
c0013220:	83 c4 10             	add    esp,0x10
c0013223:	ba e0 99 03 c0       	mov    edx,0xc00399e0
c0013228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001322c:	89 10                	mov    DWORD PTR [eax],edx
c001322e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013232:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001323c:	90                   	nop
c001323d:	83 c4 0c             	add    esp,0xc
c0013240:	c3                   	ret    
c0013241:	90                   	nop

c0013242 <Clock::~Clock()>:
c0013242:	83 ec 0c             	sub    esp,0xc
c0013245:	ba e0 99 03 c0       	mov    edx,0xc00399e0
c001324a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001324e:	89 10                	mov    DWORD PTR [eax],edx
c0013250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013254:	83 ec 0c             	sub    esp,0xc
c0013257:	50                   	push   eax
c0013258:	e8 e9 03 00 00       	call   c0013646 <Device::~Device()>
c001325d:	83 c4 10             	add    esp,0x10
c0013260:	90                   	nop
c0013261:	83 c4 0c             	add    esp,0xc
c0013264:	c3                   	ret    
c0013265:	90                   	nop

c0013266 <Clock::~Clock()>:
c0013266:	83 ec 0c             	sub    esp,0xc
c0013269:	83 ec 0c             	sub    esp,0xc
c001326c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013270:	e8 cd ff ff ff       	call   c0013242 <Clock::~Clock()>
c0013275:	83 c4 10             	add    esp,0x10
c0013278:	83 ec 08             	sub    esp,0x8
c001327b:	68 58 01 00 00       	push   0x158
c0013280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013284:	e8 20 f2 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0013289:	83 c4 10             	add    esp,0x10
c001328c:	83 c4 0c             	add    esp,0xc
c001328f:	c3                   	ret    

c0013290 <Clock::timeInSecondsLocal()>:
c0013290:	53                   	push   ebx
c0013291:	83 ec 14             	sub    esp,0x14
c0013294:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013298:	8b 10                	mov    edx,DWORD PTR [eax]
c001329a:	50                   	push   eax
c001329b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001329e:	0f b6 0d 68 bf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003bf68
c00132a5:	03 0d 6c bf 03 c0    	add    ecx,DWORD PTR ds:0xc003bf6c
c00132ab:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00132b1:	89 cb                	mov    ebx,ecx
c00132b3:	c1 fb 1f             	sar    ebx,0x1f
c00132b6:	01 c8                	add    eax,ecx
c00132b8:	11 da                	adc    edx,ebx
c00132ba:	83 c4 10             	add    esp,0x10
c00132bd:	31 c9                	xor    ecx,ecx
c00132bf:	80 3d 69 bf 03 c0 00 	cmp    BYTE PTR ds:0xc003bf69,0x0
c00132c6:	74 05                	je     c00132cd <Clock::timeInSecondsLocal()+0x3d>
c00132c8:	b9 08 07 00 00       	mov    ecx,0x708
c00132cd:	31 db                	xor    ebx,ebx
c00132cf:	01 c8                	add    eax,ecx
c00132d1:	11 da                	adc    edx,ebx
c00132d3:	83 c4 08             	add    esp,0x8
c00132d6:	5b                   	pop    ebx
c00132d7:	c3                   	ret    

c00132d8 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00132d8:	57                   	push   edi
c00132d9:	56                   	push   esi
c00132da:	53                   	push   ebx
c00132db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00132df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00132e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132e5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00132e9:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00132ec:	0f b6 05 68 bf 03 c0 	movzx  eax,BYTE PTR ds:0xc003bf68
c00132f3:	03 05 6c bf 03 c0    	add    eax,DWORD PTR ds:0xc003bf6c
c00132f9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00132ff:	99                   	cdq    
c0013300:	29 c6                	sub    esi,eax
c0013302:	19 d7                	sbb    edi,edx
c0013304:	89 f0                	mov    eax,esi
c0013306:	89 fa                	mov    edx,edi
c0013308:	31 f6                	xor    esi,esi
c001330a:	80 3d 69 bf 03 c0 00 	cmp    BYTE PTR ds:0xc003bf69,0x0
c0013311:	74 05                	je     c0013318 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013313:	be 08 07 00 00       	mov    esi,0x708
c0013318:	31 ff                	xor    edi,edi
c001331a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001331e:	29 f0                	sub    eax,esi
c0013320:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013324:	19 fa                	sbb    edx,edi
c0013326:	89 d8                	mov    eax,ebx
c0013328:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001332c:	5b                   	pop    ebx
c001332d:	5e                   	pop    esi
c001332e:	5f                   	pop    edi
c001332f:	ff e0                	jmp    eax

c0013331 <datetimeToSeconds(datetime_t)>:
c0013331:	55                   	push   ebp
c0013332:	57                   	push   edi
c0013333:	56                   	push   esi
c0013334:	53                   	push   ebx
c0013335:	83 ec 14             	sub    esp,0x14
c0013338:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001333c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013340:	89 d3                	mov    ebx,edx
c0013342:	0f b6 c6             	movzx  eax,dh
c0013345:	c1 eb 10             	shr    ebx,0x10
c0013348:	48                   	dec    eax
c0013349:	66 81 eb 6c 07       	sub    bx,0x76c
c001334e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013352:	0f b6 f5             	movzx  esi,ch
c0013355:	89 cf                	mov    edi,ecx
c0013357:	6b f6 3c             	imul   esi,esi,0x3c
c001335a:	c1 ef 10             	shr    edi,0x10
c001335d:	0f b6 c9             	movzx  ecx,cl
c0013360:	89 f8                	mov    eax,edi
c0013362:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013368:	0f b6 f8             	movzx  edi,al
c001336b:	0f b6 d2             	movzx  edx,dl
c001336e:	01 fe                	add    esi,edi
c0013370:	01 f1                	add    ecx,esi
c0013372:	0f b7 f3             	movzx  esi,bx
c0013375:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013379:	c1 f9 1f             	sar    ecx,0x1f
c001337c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013381:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013385:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001338a:	8b 0c 8d 20 9a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc65e0]
c0013391:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013395:	76 29                	jbe    c00133c0 <datetimeToSeconds(datetime_t)+0x8f>
c0013397:	f6 c3 03             	test   bl,0x3
c001339a:	75 24                	jne    c00133c0 <datetimeToSeconds(datetime_t)+0x8f>
c001339c:	31 d2                	xor    edx,edx
c001339e:	bf 64 00 00 00       	mov    edi,0x64
c00133a3:	89 d8                	mov    eax,ebx
c00133a5:	66 f7 f7             	div    di
c00133a8:	66 85 d2             	test   dx,dx
c00133ab:	75 12                	jne    c00133bf <datetimeToSeconds(datetime_t)+0x8e>
c00133ad:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00133b3:	bf 90 01 00 00       	mov    edi,0x190
c00133b8:	99                   	cdq    
c00133b9:	f7 ff                	idiv   edi
c00133bb:	85 d2                	test   edx,edx
c00133bd:	75 01                	jne    c00133c0 <datetimeToSeconds(datetime_t)+0x8f>
c00133bf:	41                   	inc    ecx
c00133c0:	66 83 fb 46          	cmp    bx,0x46
c00133c4:	76 45                	jbe    c001340b <datetimeToSeconds(datetime_t)+0xda>
c00133c6:	bb 46 00 00 00       	mov    ebx,0x46
c00133cb:	bf 64 00 00 00       	mov    edi,0x64
c00133d0:	bd 90 01 00 00       	mov    ebp,0x190
c00133d5:	b8 6d 01 00 00       	mov    eax,0x16d
c00133da:	f6 c3 03             	test   bl,0x3
c00133dd:	75 23                	jne    c0013402 <datetimeToSeconds(datetime_t)+0xd1>
c00133df:	89 d8                	mov    eax,ebx
c00133e1:	99                   	cdq    
c00133e2:	f7 ff                	idiv   edi
c00133e4:	b8 6e 01 00 00       	mov    eax,0x16e
c00133e9:	85 d2                	test   edx,edx
c00133eb:	75 15                	jne    c0013402 <datetimeToSeconds(datetime_t)+0xd1>
c00133ed:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00133f3:	99                   	cdq    
c00133f4:	f7 fd                	idiv   ebp
c00133f6:	83 fa 01             	cmp    edx,0x1
c00133f9:	19 c0                	sbb    eax,eax
c00133fb:	f7 d0                	not    eax
c00133fd:	05 6e 01 00 00       	add    eax,0x16e
c0013402:	01 c1                	add    ecx,eax
c0013404:	43                   	inc    ebx
c0013405:	39 f3                	cmp    ebx,esi
c0013407:	7c cc                	jl     c00133d5 <datetimeToSeconds(datetime_t)+0xa4>
c0013409:	eb 35                	jmp    c0013440 <datetimeToSeconds(datetime_t)+0x10f>
c001340b:	74 33                	je     c0013440 <datetimeToSeconds(datetime_t)+0x10f>
c001340d:	b8 45 00 00 00       	mov    eax,0x45
c0013412:	89 c2                	mov    edx,eax
c0013414:	83 e2 03             	and    edx,0x3
c0013417:	39 f0                	cmp    eax,esi
c0013419:	7e 0f                	jle    c001342a <datetimeToSeconds(datetime_t)+0xf9>
c001341b:	83 fa 01             	cmp    edx,0x1
c001341e:	19 d2                	sbb    edx,edx
c0013420:	48                   	dec    eax
c0013421:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013428:	eb e8                	jmp    c0013412 <datetimeToSeconds(datetime_t)+0xe1>
c001342a:	b8 6d 01 00 00       	mov    eax,0x16d
c001342f:	85 d2                	test   edx,edx
c0013431:	75 0b                	jne    c001343e <datetimeToSeconds(datetime_t)+0x10d>
c0013433:	66 83 fb 01          	cmp    bx,0x1
c0013437:	19 c0                	sbb    eax,eax
c0013439:	05 6e 01 00 00       	add    eax,0x16e
c001343e:	29 c1                	sub    ecx,eax
c0013440:	b8 80 51 01 00       	mov    eax,0x15180
c0013445:	f7 e9                	imul   ecx
c0013447:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001344b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001344f:	83 c4 14             	add    esp,0x14
c0013452:	5b                   	pop    ebx
c0013453:	5e                   	pop    esi
c0013454:	5f                   	pop    edi
c0013455:	5d                   	pop    ebp
c0013456:	c3                   	ret    
c0013457:	90                   	nop

c0013458 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013458:	57                   	push   edi
c0013459:	56                   	push   esi
c001345a:	53                   	push   ebx
c001345b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001345f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013461:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013464:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001346c:	e8 c0 fe ff ff       	call   c0013331 <datetimeToSeconds(datetime_t)>
c0013471:	59                   	pop    ecx
c0013472:	0f b6 0d 68 bf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003bf68
c0013479:	5b                   	pop    ebx
c001347a:	03 0d 6c bf 03 c0    	add    ecx,DWORD PTR ds:0xc003bf6c
c0013480:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013486:	89 cb                	mov    ebx,ecx
c0013488:	c1 fb 1f             	sar    ebx,0x1f
c001348b:	29 c8                	sub    eax,ecx
c001348d:	19 da                	sbb    edx,ebx
c001348f:	31 c9                	xor    ecx,ecx
c0013491:	80 3d 69 bf 03 c0 00 	cmp    BYTE PTR ds:0xc003bf69,0x0
c0013498:	74 05                	je     c001349f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001349a:	b9 08 07 00 00       	mov    ecx,0x708
c001349f:	31 db                	xor    ebx,ebx
c00134a1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134a5:	29 c8                	sub    eax,ecx
c00134a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134ab:	19 da                	sbb    edx,ebx
c00134ad:	89 f8                	mov    eax,edi
c00134af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00134b3:	5b                   	pop    ebx
c00134b4:	5e                   	pop    esi
c00134b5:	5f                   	pop    edi
c00134b6:	ff e0                	jmp    eax

c00134b8 <secondsToDatetime(unsigned long long)>:
c00134b8:	55                   	push   ebp
c00134b9:	57                   	push   edi
c00134ba:	56                   	push   esi
c00134bb:	53                   	push   ebx
c00134bc:	83 ec 1c             	sub    esp,0x1c
c00134bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00134c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00134c7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00134cb:	6a 00                	push   0x0
c00134cd:	68 80 51 01 00       	push   0x15180
c00134d2:	55                   	push   ebp
c00134d3:	57                   	push   edi
c00134d4:	e8 63 b2 00 00       	call   c001e73c <__udivdi3>
c00134d9:	83 c4 10             	add    esp,0x10
c00134dc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00134e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134e6:	6a 00                	push   0x0
c00134e8:	68 80 51 01 00       	push   0x15180
c00134ed:	55                   	push   ebp
c00134ee:	57                   	push   edi
c00134ef:	bf 10 0e 00 00       	mov    edi,0xe10
c00134f4:	e8 43 b3 00 00       	call   c001e83c <__umoddi3>
c00134f9:	83 c4 10             	add    esp,0x10
c00134fc:	99                   	cdq    
c00134fd:	f7 ff                	idiv   edi
c00134ff:	bf 3c 00 00 00       	mov    edi,0x3c
c0013504:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013507:	89 d0                	mov    eax,edx
c0013509:	99                   	cdq    
c001350a:	f7 ff                	idiv   edi
c001350c:	85 db                	test   ebx,ebx
c001350e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013511:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013514:	79 11                	jns    c0013527 <secondsToDatetime(unsigned long long)+0x6f>
c0013516:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001351a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013520:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013525:	eb 07                	jmp    c001352e <secondsToDatetime(unsigned long long)+0x76>
c0013527:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001352c:	89 d8                	mov    eax,ebx
c001352e:	bf b4 05 00 00       	mov    edi,0x5b4
c0013533:	99                   	cdq    
c0013534:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013539:	f7 f9                	idiv   ecx
c001353b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013540:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013544:	31 d2                	xor    edx,edx
c0013546:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001354e:	01 c3                	add    ebx,eax
c0013550:	89 d8                	mov    eax,ebx
c0013552:	f7 f1                	div    ecx
c0013554:	31 d2                	xor    edx,edx
c0013556:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013559:	89 d8                	mov    eax,ebx
c001355b:	f7 f7                	div    edi
c001355d:	31 d2                	xor    edx,edx
c001355f:	29 c1                	sub    ecx,eax
c0013561:	89 d8                	mov    eax,ebx
c0013563:	f7 f5                	div    ebp
c0013565:	bd 6d 01 00 00       	mov    ebp,0x16d
c001356a:	29 c1                	sub    ecx,eax
c001356c:	31 d2                	xor    edx,edx
c001356e:	89 c8                	mov    eax,ecx
c0013570:	f7 f5                	div    ebp
c0013572:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013577:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001357b:	31 d2                	xor    edx,edx
c001357d:	89 c8                	mov    eax,ecx
c001357f:	f7 f5                	div    ebp
c0013581:	31 d2                	xor    edx,edx
c0013583:	01 c3                	add    ebx,eax
c0013585:	89 c8                	mov    eax,ecx
c0013587:	f7 f7                	div    edi
c0013589:	bf 99 00 00 00       	mov    edi,0x99
c001358e:	29 c3                	sub    ebx,eax
c0013590:	31 d2                	xor    edx,edx
c0013592:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001359a:	29 c3                	sub    ebx,eax
c001359c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001359f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00135a2:	bb 05 00 00 00       	mov    ebx,0x5
c00135a7:	83 c1 02             	add    ecx,0x2
c00135aa:	89 c8                	mov    eax,ecx
c00135ac:	f7 f7                	div    edi
c00135ae:	31 d2                	xor    edx,edx
c00135b0:	89 c7                	mov    edi,eax
c00135b2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00135b8:	83 c0 02             	add    eax,0x2
c00135bb:	f7 f3                	div    ebx
c00135bd:	89 eb                	mov    ebx,ebp
c00135bf:	29 c3                	sub    ebx,eax
c00135c1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00135c7:	88 1e                	mov    BYTE PTR [esi],bl
c00135c9:	19 c0                	sbb    eax,eax
c00135cb:	31 d2                	xor    edx,edx
c00135cd:	83 e0 0c             	and    eax,0xc
c00135d0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00135d4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00135dc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00135e0:	83 f9 01             	cmp    ecx,0x1
c00135e3:	0f 96 c2             	setbe  dl
c00135e6:	41                   	inc    ecx
c00135e7:	01 d0                	add    eax,edx
c00135e9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00135ec:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00135f0:	83 c4 1c             	add    esp,0x1c
c00135f3:	89 f0                	mov    eax,esi
c00135f5:	5b                   	pop    ebx
c00135f6:	5e                   	pop    esi
c00135f7:	5f                   	pop    edi
c00135f8:	5d                   	pop    ebp
c00135f9:	c2 04 00             	ret    0x4

c00135fc <Clock::timeInDatetimeLocal()>:
c00135fc:	53                   	push   ebx
c00135fd:	83 ec 14             	sub    esp,0x14
c0013600:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013604:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013608:	e8 83 fc ff ff       	call   c0013290 <Clock::timeInSecondsLocal()>
c001360d:	83 c4 0c             	add    esp,0xc
c0013610:	52                   	push   edx
c0013611:	50                   	push   eax
c0013612:	53                   	push   ebx
c0013613:	e8 a0 fe ff ff       	call   c00134b8 <secondsToDatetime(unsigned long long)>
c0013618:	89 d8                	mov    eax,ebx
c001361a:	83 c4 14             	add    esp,0x14
c001361d:	5b                   	pop    ebx
c001361e:	c2 04 00             	ret    0x4
c0013621:	90                   	nop

c0013622 <Device::hibernate()>:
c0013622:	c3                   	ret    
c0013623:	90                   	nop

c0013624 <Device::wake()>:
c0013624:	c3                   	ret    
c0013625:	90                   	nop

c0013626 <Device::detect()>:
c0013626:	c3                   	ret    
c0013627:	90                   	nop

c0013628 <Device::disableLegacy()>:
c0013628:	c3                   	ret    
c0013629:	90                   	nop

c001362a <Device::powerSaving(PowerSavingLevel)>:
c001362a:	c3                   	ret    
c001362b:	90                   	nop

c001362c <DriverlessDevice::close(int, int, void*)>:
c001362c:	31 c0                	xor    eax,eax
c001362e:	c3                   	ret    
c001362f:	90                   	nop

c0013630 <DriverlessDevice::detect()>:
c0013630:	c3                   	ret    
c0013631:	90                   	nop

c0013632 <DriverlessDevice::open(int, int, void*)>:
c0013632:	83 ec 18             	sub    esp,0x18
c0013635:	68 50 9a 03 c0       	push   0xc0039a50
c001363a:	e8 c9 99 ff ff       	call   c000d008 <panic(char const*)>
c001363f:	83 c8 ff             	or     eax,0xffffffff
c0013642:	83 c4 1c             	add    esp,0x1c
c0013645:	c3                   	ret    

c0013646 <Device::~Device()>:
c0013646:	ba 78 9a 03 c0       	mov    edx,0xc0039a78
c001364b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001364f:	89 10                	mov    DWORD PTR [eax],edx
c0013651:	90                   	nop
c0013652:	c3                   	ret    
c0013653:	90                   	nop

c0013654 <Device::~Device()>:
c0013654:	83 ec 0c             	sub    esp,0xc
c0013657:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001365b:	e8 e6 ff ff ff       	call   c0013646 <Device::~Device()>
c0013660:	83 c4 04             	add    esp,0x4
c0013663:	83 ec 08             	sub    esp,0x8
c0013666:	68 58 01 00 00       	push   0x158
c001366b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001366f:	e8 35 ee ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0013674:	83 c4 10             	add    esp,0x10
c0013677:	83 c4 0c             	add    esp,0xc
c001367a:	c3                   	ret    
c001367b:	90                   	nop

c001367c <Device::findAndLoadDriver()>:
c001367c:	c3                   	ret    
c001367d:	90                   	nop

c001367e <Device::preOpenPCI(PCIDeviceInfo)>:
c001367e:	57                   	push   edi
c001367f:	b9 09 00 00 00       	mov    ecx,0x9
c0013684:	56                   	push   esi
c0013685:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013689:	8d 74 24 10          	lea    esi,[esp+0x10]
c001368d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013697:	81 c7 18 01 00 00    	add    edi,0x118
c001369d:	fc                   	cld    
c001369e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00136a0:	5e                   	pop    esi
c00136a1:	5f                   	pop    edi
c00136a2:	c3                   	ret    
c00136a3:	90                   	nop

c00136a4 <Device::preOpenACPI(void*, char*, char*)>:
c00136a4:	56                   	push   esi
c00136a5:	53                   	push   ebx
c00136a6:	83 ec 08             	sub    esp,0x8
c00136a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00136b1:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00136bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136bf:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00136c5:	6a 1e                	push   0x1e
c00136c7:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00136cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00136d1:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00136d7:	50                   	push   eax
c00136d8:	e8 84 cf fe ff       	call   c0000661 <memcpy>
c00136dd:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00136e1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00136e5:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00136ed:	83 c4 14             	add    esp,0x14
c00136f0:	5b                   	pop    ebx
c00136f1:	5e                   	pop    esi
c00136f2:	e9 6a cf fe ff       	jmp    c0000661 <memcpy>
c00136f7:	90                   	nop

c00136f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00136f8:	55                   	push   ebp
c00136f9:	57                   	push   edi
c00136fa:	56                   	push   esi
c00136fb:	53                   	push   ebx
c00136fc:	83 ec 0c             	sub    esp,0xc
c00136ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013703:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013707:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001370b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001370f:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0013714:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001371b:	75 0b                	jne    c0013728 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c001371d:	8b 00                	mov    eax,DWORD PTR [eax]
c001371f:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0013723:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013726:	eb 24                	jmp    c001374c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0013728:	e8 a3 3a 00 00       	call   c00171d0 <thisCPU()>
c001372d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013733:	8b 10                	mov    edx,DWORD PTR [eax]
c0013735:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0013739:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001373d:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0013741:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013745:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013749:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001374c:	83 c4 0c             	add    esp,0xc
c001374f:	5b                   	pop    ebx
c0013750:	5e                   	pop    esi
c0013751:	5f                   	pop    edi
c0013752:	5d                   	pop    ebp
c0013753:	ff e0                	jmp    eax
c0013755:	90                   	nop

c0013756 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013756:	57                   	push   edi
c0013757:	56                   	push   esi
c0013758:	53                   	push   ebx
c0013759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001375d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013761:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013765:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001376a:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013771:	75 0b                	jne    c001377e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013773:	8b 00                	mov    eax,DWORD PTR [eax]
c0013775:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013779:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001377c:	eb 20                	jmp    c001379e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001377e:	e8 4d 3a 00 00       	call   c00171d0 <thisCPU()>
c0013783:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013789:	8b 10                	mov    edx,DWORD PTR [eax]
c001378b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001378f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013793:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0013797:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001379b:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001379e:	5b                   	pop    ebx
c001379f:	5e                   	pop    esi
c00137a0:	5f                   	pop    edi
c00137a1:	ff e0                	jmp    eax
c00137a3:	90                   	nop

c00137a4 <Device::addChild(Device*)>:
c00137a4:	53                   	push   ebx
c00137a5:	83 ec 08             	sub    esp,0x8
c00137a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137b0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00137b6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00137bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00137be:	85 d2                	test   edx,edx
c00137c0:	74 04                	je     c00137c6 <Device::addChild(Device*)+0x22>
c00137c2:	89 d3                	mov    ebx,edx
c00137c4:	eb f6                	jmp    c00137bc <Device::addChild(Device*)+0x18>
c00137c6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00137c9:	83 ec 0c             	sub    esp,0xc
c00137cc:	6a 08                	push   0x8
c00137ce:	e8 c7 ec ff ff       	call   c001249a <operator new(unsigned long)>
c00137d3:	89 03                	mov    DWORD PTR [ebx],eax
c00137d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00137db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137e2:	83 c4 18             	add    esp,0x18
c00137e5:	5b                   	pop    ebx
c00137e6:	c3                   	ret    
c00137e7:	90                   	nop

c00137e8 <Device::removeAllChildren()>:
c00137e8:	56                   	push   esi
c00137e9:	53                   	push   ebx
c00137ea:	52                   	push   edx
c00137eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137ef:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00137f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137f8:	74 17                	je     c0013811 <Device::removeAllChildren()+0x29>
c00137fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00137fd:	85 c0                	test   eax,eax
c00137ff:	74 0c                	je     c001380d <Device::removeAllChildren()+0x25>
c0013801:	83 ec 0c             	sub    esp,0xc
c0013804:	8b 10                	mov    edx,DWORD PTR [eax]
c0013806:	50                   	push   eax
c0013807:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001380a:	83 c4 10             	add    esp,0x10
c001380d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001380f:	eb e4                	jmp    c00137f5 <Device::removeAllChildren()+0xd>
c0013811:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013817:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001381d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013823:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001382a:	58                   	pop    eax
c001382b:	5b                   	pop    ebx
c001382c:	5e                   	pop    esi
c001382d:	c3                   	ret    

c001382e <Device::hibernateAll()>:
c001382e:	53                   	push   ebx
c001382f:	83 ec 14             	sub    esp,0x14
c0013832:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013838:	53                   	push   ebx
c0013839:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001383c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013848:	74 0f                	je     c0013859 <Device::hibernateAll()+0x2b>
c001384a:	83 ec 0c             	sub    esp,0xc
c001384d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013850:	e8 d9 ff ff ff       	call   c001382e <Device::hibernateAll()>
c0013855:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013857:	eb e9                	jmp    c0013842 <Device::hibernateAll()+0x14>
c0013859:	83 c4 08             	add    esp,0x8
c001385c:	5b                   	pop    ebx
c001385d:	c3                   	ret    

c001385e <Device::wakeAll()>:
c001385e:	53                   	push   ebx
c001385f:	83 ec 14             	sub    esp,0x14
c0013862:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013866:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013868:	53                   	push   ebx
c0013869:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001386c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013872:	83 c4 10             	add    esp,0x10
c0013875:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013878:	74 0f                	je     c0013889 <Device::wakeAll()+0x2b>
c001387a:	83 ec 0c             	sub    esp,0xc
c001387d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013880:	e8 d9 ff ff ff       	call   c001385e <Device::wakeAll()>
c0013885:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013887:	eb e9                	jmp    c0013872 <Device::wakeAll()+0x14>
c0013889:	83 c4 08             	add    esp,0x8
c001388c:	5b                   	pop    ebx
c001388d:	c3                   	ret    

c001388e <Device::detectAll()>:
c001388e:	53                   	push   ebx
c001388f:	83 ec 14             	sub    esp,0x14
c0013892:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013896:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013898:	53                   	push   ebx
c0013899:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001389c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00138a8:	74 0f                	je     c00138b9 <Device::detectAll()+0x2b>
c00138aa:	83 ec 0c             	sub    esp,0xc
c00138ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00138b0:	e8 d9 ff ff ff       	call   c001388e <Device::detectAll()>
c00138b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00138b7:	eb e9                	jmp    c00138a2 <Device::detectAll()+0x14>
c00138b9:	83 c4 08             	add    esp,0x8
c00138bc:	5b                   	pop    ebx
c00138bd:	c3                   	ret    

c00138be <Device::disableLegacyAll()>:
c00138be:	53                   	push   ebx
c00138bf:	83 ec 14             	sub    esp,0x14
c00138c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138c8:	53                   	push   ebx
c00138c9:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00138cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00138d2:	83 c4 10             	add    esp,0x10
c00138d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00138d8:	74 0f                	je     c00138e9 <Device::disableLegacyAll()+0x2b>
c00138da:	83 ec 0c             	sub    esp,0xc
c00138dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00138e0:	e8 d9 ff ff ff       	call   c00138be <Device::disableLegacyAll()>
c00138e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00138e7:	eb e9                	jmp    c00138d2 <Device::disableLegacyAll()+0x14>
c00138e9:	83 c4 08             	add    esp,0x8
c00138ec:	5b                   	pop    ebx
c00138ed:	c3                   	ret    

c00138ee <Device::loadDriversForAll()>:
c00138ee:	53                   	push   ebx
c00138ef:	83 ec 08             	sub    esp,0x8
c00138f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f6:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138fc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00138fe:	85 db                	test   ebx,ebx
c0013900:	74 12                	je     c0013914 <Device::loadDriversForAll()+0x26>
c0013902:	83 ec 0c             	sub    esp,0xc
c0013905:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013908:	e8 e1 ff ff ff       	call   c00138ee <Device::loadDriversForAll()>
c001390d:	83 c4 10             	add    esp,0x10
c0013910:	89 d8                	mov    eax,ebx
c0013912:	eb e8                	jmp    c00138fc <Device::loadDriversForAll()+0xe>
c0013914:	83 c4 08             	add    esp,0x8
c0013917:	5b                   	pop    ebx
c0013918:	c3                   	ret    
c0013919:	90                   	nop

c001391a <Device::closeAll()>:
c001391a:	53                   	push   ebx
c001391b:	83 ec 08             	sub    esp,0x8
c001391e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013922:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013924:	6a 00                	push   0x0
c0013926:	6a 00                	push   0x0
c0013928:	6a 00                	push   0x0
c001392a:	53                   	push   ebx
c001392b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001392e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013934:	83 c4 10             	add    esp,0x10
c0013937:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001393a:	74 0f                	je     c001394b <Device::closeAll()+0x31>
c001393c:	83 ec 0c             	sub    esp,0xc
c001393f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013942:	e8 d3 ff ff ff       	call   c001391a <Device::closeAll()>
c0013947:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013949:	eb e9                	jmp    c0013934 <Device::closeAll()+0x1a>
c001394b:	83 c4 08             	add    esp,0x8
c001394e:	5b                   	pop    ebx
c001394f:	c3                   	ret    

c0013950 <Device::powerSavingAll(PowerSavingLevel)>:
c0013950:	56                   	push   esi
c0013951:	53                   	push   ebx
c0013952:	83 ec 0c             	sub    esp,0xc
c0013955:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013959:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001395d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001395f:	56                   	push   esi
c0013960:	53                   	push   ebx
c0013961:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013964:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001396a:	83 c4 10             	add    esp,0x10
c001396d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013970:	74 0f                	je     c0013981 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013972:	52                   	push   edx
c0013973:	52                   	push   edx
c0013974:	56                   	push   esi
c0013975:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013978:	e8 d3 ff ff ff       	call   c0013950 <Device::powerSavingAll(PowerSavingLevel)>
c001397d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001397f:	eb e9                	jmp    c001396a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013981:	58                   	pop    eax
c0013982:	5b                   	pop    ebx
c0013983:	5e                   	pop    esi
c0013984:	c3                   	ret    
c0013985:	90                   	nop

c0013986 <Device::setName(char const*)>:
c0013986:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001398e:	e9 61 ce fe ff       	jmp    c00007f4 <strcpy>
c0013993:	90                   	nop

c0013994 <Device::Device(char const*)>:
c0013994:	83 ec 0c             	sub    esp,0xc
c0013997:	ba 78 9a 03 c0       	mov    edx,0xc0039a78
c001399c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a0:	89 10                	mov    DWORD PTR [eax],edx
c00139a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00139b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00139be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00139cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00139da:	83 ec 08             	sub    esp,0x8
c00139dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e5:	e8 9c ff ff ff       	call   c0013986 <Device::setName(char const*)>
c00139ea:	83 c4 10             	add    esp,0x10
c00139ed:	83 ec 0c             	sub    esp,0xc
c00139f0:	6a 08                	push   0x8
c00139f2:	e8 a3 ea ff ff       	call   c001249a <operator new(unsigned long)>
c00139f7:	83 c4 10             	add    esp,0x10
c00139fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a0b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a15:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013a1b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a25:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013a2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a36:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a41:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a5a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a68:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a76:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013a80:	90                   	nop
c0013a81:	83 c4 0c             	add    esp,0xc
c0013a84:	c3                   	ret    
c0013a85:	90                   	nop

c0013a86 <Device::getName()>:
c0013a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a8a:	05 d0 00 00 00       	add    eax,0xd0
c0013a8f:	c3                   	ret    

c0013a90 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013a90:	83 ec 0c             	sub    esp,0xc
c0013a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a97:	83 ec 08             	sub    esp,0x8
c0013a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a9e:	50                   	push   eax
c0013a9f:	e8 f0 fe ff ff       	call   c0013994 <Device::Device(char const*)>
c0013aa4:	83 c4 10             	add    esp,0x10
c0013aa7:	ba a4 9a 03 c0       	mov    edx,0xc0039aa4
c0013aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab0:	89 10                	mov    DWORD PTR [eax],edx
c0013ab2:	90                   	nop
c0013ab3:	83 c4 0c             	add    esp,0xc
c0013ab6:	c3                   	ret    
c0013ab7:	90                   	nop

c0013ab8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013ab8:	57                   	push   edi
c0013ab9:	56                   	push   esi
c0013aba:	53                   	push   ebx
c0013abb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013abf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ac3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ac7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013acd:	75 0c                	jne    c0013adb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013acf:	52                   	push   edx
c0013ad0:	52                   	push   edx
c0013ad1:	53                   	push   ebx
c0013ad2:	56                   	push   esi
c0013ad3:	e8 54 b4 00 00       	call   c001ef2c <LinkedList<Device>::addElement(Device*)>
c0013ad8:	83 c4 10             	add    esp,0x10
c0013adb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ae1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ae4:	74 12                	je     c0013af8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013ae6:	50                   	push   eax
c0013ae7:	57                   	push   edi
c0013ae8:	56                   	push   esi
c0013ae9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013aec:	e8 c7 ff ff ff       	call   c0013ab8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013af1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013af3:	83 c4 10             	add    esp,0x10
c0013af6:	eb e9                	jmp    c0013ae1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013af8:	5b                   	pop    ebx
c0013af9:	5e                   	pop    esi
c0013afa:	5f                   	pop    edi
c0013afb:	c3                   	ret    

c0013afc <getDevicesOfType(DeviceType)>:
c0013afc:	53                   	push   ebx
c0013afd:	83 ec 14             	sub    esp,0x14
c0013b00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b04:	53                   	push   ebx
c0013b05:	e8 fe b4 00 00       	call   c001f008 <LinkedList<Device>::LinkedList()>
c0013b0a:	83 c4 0c             	add    esp,0xc
c0013b0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b11:	53                   	push   ebx
c0013b12:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c0013b18:	e8 9b ff ff ff       	call   c0013ab8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013b1d:	89 d8                	mov    eax,ebx
c0013b1f:	83 c4 18             	add    esp,0x18
c0013b22:	5b                   	pop    ebx
c0013b23:	c2 04 00             	ret    0x4

c0013b26 <HardDiskController::HardDiskController(char const*)>:
c0013b26:	83 ec 0c             	sub    esp,0xc
c0013b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2d:	83 ec 08             	sub    esp,0x8
c0013b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b34:	50                   	push   eax
c0013b35:	e8 5a fe ff ff       	call   c0013994 <Device::Device(char const*)>
c0013b3a:	83 c4 10             	add    esp,0x10
c0013b3d:	ba d0 9a 03 c0       	mov    edx,0xc0039ad0
c0013b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b46:	89 10                	mov    DWORD PTR [eax],edx
c0013b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b4c:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013b56:	90                   	nop
c0013b57:	83 c4 0c             	add    esp,0xc
c0013b5a:	c3                   	ret    
c0013b5b:	90                   	nop

c0013b5c <HardDiskController::~HardDiskController()>:
c0013b5c:	83 ec 0c             	sub    esp,0xc
c0013b5f:	ba d0 9a 03 c0       	mov    edx,0xc0039ad0
c0013b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b68:	89 10                	mov    DWORD PTR [eax],edx
c0013b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6e:	83 ec 0c             	sub    esp,0xc
c0013b71:	50                   	push   eax
c0013b72:	e8 cf fa ff ff       	call   c0013646 <Device::~Device()>
c0013b77:	83 c4 10             	add    esp,0x10
c0013b7a:	90                   	nop
c0013b7b:	83 c4 0c             	add    esp,0xc
c0013b7e:	c3                   	ret    
c0013b7f:	90                   	nop

c0013b80 <HardDiskController::~HardDiskController()>:
c0013b80:	83 ec 0c             	sub    esp,0xc
c0013b83:	83 ec 0c             	sub    esp,0xc
c0013b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b8a:	e8 cd ff ff ff       	call   c0013b5c <HardDiskController::~HardDiskController()>
c0013b8f:	83 c4 10             	add    esp,0x10
c0013b92:	83 ec 08             	sub    esp,0x8
c0013b95:	68 58 01 00 00       	push   0x158
c0013b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b9e:	e8 06 e9 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	83 c4 0c             	add    esp,0xc
c0013ba9:	c3                   	ret    

c0013baa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb1:	83 ec 08             	sub    esp,0x8
c0013bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb8:	50                   	push   eax
c0013bb9:	e8 d6 fd ff ff       	call   c0013994 <Device::Device(char const*)>
c0013bbe:	83 c4 10             	add    esp,0x10
c0013bc1:	ba fc 9a 03 c0       	mov    edx,0xc0039afc
c0013bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bca:	89 10                	mov    DWORD PTR [eax],edx
c0013bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bdb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bf8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c02:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c0c:	90                   	nop
c0013c0d:	83 c4 0c             	add    esp,0xc
c0013c10:	c3                   	ret    
c0013c11:	90                   	nop

c0013c12 <PhysicalDisk::startCache()>:
c0013c12:	56                   	push   esi
c0013c13:	53                   	push   ebx
c0013c14:	83 ec 10             	sub    esp,0x10
c0013c17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c1b:	6a 30                	push   0x30
c0013c1d:	e8 78 e8 ff ff       	call   c001249a <operator new(unsigned long)>
c0013c22:	89 c6                	mov    esi,eax
c0013c24:	58                   	pop    eax
c0013c25:	5a                   	pop    edx
c0013c26:	53                   	push   ebx
c0013c27:	56                   	push   esi
c0013c28:	e8 b7 1d 00 00       	call   c00159e4 <VCache::VCache(PhysicalDisk*)>
c0013c2d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013c33:	83 c4 14             	add    esp,0x14
c0013c36:	5b                   	pop    ebx
c0013c37:	5e                   	pop    esi
c0013c38:	c3                   	ret    
c0013c39:	90                   	nop

c0013c3a <PhysicalDisk::~PhysicalDisk()>:
c0013c3a:	83 ec 0c             	sub    esp,0xc
c0013c3d:	ba fc 9a 03 c0       	mov    edx,0xc0039afc
c0013c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c46:	89 10                	mov    DWORD PTR [eax],edx
c0013c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c4c:	83 ec 0c             	sub    esp,0xc
c0013c4f:	50                   	push   eax
c0013c50:	e8 f1 f9 ff ff       	call   c0013646 <Device::~Device()>
c0013c55:	83 c4 10             	add    esp,0x10
c0013c58:	90                   	nop
c0013c59:	83 c4 0c             	add    esp,0xc
c0013c5c:	c3                   	ret    
c0013c5d:	90                   	nop

c0013c5e <PhysicalDisk::~PhysicalDisk()>:
c0013c5e:	83 ec 0c             	sub    esp,0xc
c0013c61:	83 ec 0c             	sub    esp,0xc
c0013c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c68:	e8 cd ff ff ff       	call   c0013c3a <PhysicalDisk::~PhysicalDisk()>
c0013c6d:	83 c4 10             	add    esp,0x10
c0013c70:	83 ec 08             	sub    esp,0x8
c0013c73:	68 6c 01 00 00       	push   0x16c
c0013c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c7c:	e8 28 e8 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0013c81:	83 c4 10             	add    esp,0x10
c0013c84:	83 c4 0c             	add    esp,0xc
c0013c87:	c3                   	ret    

c0013c88 <FPU::FPU(char const*)>:
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8f:	83 ec 08             	sub    esp,0x8
c0013c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c96:	50                   	push   eax
c0013c97:	e8 f8 fc ff ff       	call   c0013994 <Device::Device(char const*)>
c0013c9c:	83 c4 10             	add    esp,0x10
c0013c9f:	ba 38 9b 03 c0       	mov    edx,0xc0039b38
c0013ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca8:	89 10                	mov    DWORD PTR [eax],edx
c0013caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cae:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013cb8:	90                   	nop
c0013cb9:	83 c4 0c             	add    esp,0xc
c0013cbc:	c3                   	ret    
c0013cbd:	90                   	nop

c0013cbe <FPU::~FPU()>:
c0013cbe:	83 ec 0c             	sub    esp,0xc
c0013cc1:	ba 38 9b 03 c0       	mov    edx,0xc0039b38
c0013cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cca:	89 10                	mov    DWORD PTR [eax],edx
c0013ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	50                   	push   eax
c0013cd4:	e8 6d f9 ff ff       	call   c0013646 <Device::~Device()>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	90                   	nop
c0013cdd:	83 c4 0c             	add    esp,0xc
c0013ce0:	c3                   	ret    
c0013ce1:	90                   	nop

c0013ce2 <FPU::~FPU()>:
c0013ce2:	83 ec 0c             	sub    esp,0xc
c0013ce5:	83 ec 0c             	sub    esp,0xc
c0013ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cec:	e8 cd ff ff ff       	call   c0013cbe <FPU::~FPU()>
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	83 ec 08             	sub    esp,0x8
c0013cf7:	68 58 01 00 00       	push   0x158
c0013cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d00:	e8 a4 e7 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0013d05:	83 c4 10             	add    esp,0x10
c0013d08:	83 c4 0c             	add    esp,0xc
c0013d0b:	c3                   	ret    

c0013d0c <setupFPU()>:
c0013d0c:	53                   	push   ebx
c0013d0d:	83 ec 08             	sub    esp,0x8
c0013d10:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0013d15:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0013d1c:	74 19                	je     c0013d37 <setupFPU()+0x2b>
c0013d1e:	83 ec 0c             	sub    esp,0xc
c0013d21:	68 58 01 00 00       	push   0x158
c0013d26:	e8 6f e7 ff ff       	call   c001249a <operator new(unsigned long)>
c0013d2b:	89 c3                	mov    ebx,eax
c0013d2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d30:	e8 d5 96 00 00       	call   c001d40a <AVX::AVX()>
c0013d35:	eb 5b                	jmp    c0013d92 <setupFPU()+0x86>
c0013d37:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d3d:	84 c0                	test   al,al
c0013d3f:	79 19                	jns    c0013d5a <setupFPU()+0x4e>
c0013d41:	83 ec 0c             	sub    esp,0xc
c0013d44:	68 58 01 00 00       	push   0x158
c0013d49:	e8 4c e7 ff ff       	call   c001249a <operator new(unsigned long)>
c0013d4e:	89 c3                	mov    ebx,eax
c0013d50:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d53:	e8 d8 97 00 00       	call   c001d530 <SSE::SSE()>
c0013d58:	eb 38                	jmp    c0013d92 <setupFPU()+0x86>
c0013d5a:	a8 20                	test   al,0x20
c0013d5c:	74 19                	je     c0013d77 <setupFPU()+0x6b>
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	68 58 01 00 00       	push   0x158
c0013d66:	e8 2f e7 ff ff       	call   c001249a <operator new(unsigned long)>
c0013d6b:	89 c3                	mov    ebx,eax
c0013d6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d70:	e8 25 97 00 00       	call   c001d49a <MMX::MMX()>
c0013d75:	eb 1b                	jmp    c0013d92 <setupFPU()+0x86>
c0013d77:	a8 10                	test   al,0x10
c0013d79:	74 1c                	je     c0013d97 <setupFPU()+0x8b>
c0013d7b:	83 ec 0c             	sub    esp,0xc
c0013d7e:	68 58 01 00 00       	push   0x158
c0013d83:	e8 12 e7 ff ff       	call   c001249a <operator new(unsigned long)>
c0013d88:	89 c3                	mov    ebx,eax
c0013d8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d8d:	e8 2c 98 00 00       	call   c001d5be <x87::x87()>
c0013d92:	83 c4 10             	add    esp,0x10
c0013d95:	eb 12                	jmp    c0013da9 <setupFPU()+0x9d>
c0013d97:	83 ec 0c             	sub    esp,0xc
c0013d9a:	31 db                	xor    ebx,ebx
c0013d9c:	68 28 9b 03 c0       	push   0xc0039b28
c0013da1:	e8 62 92 ff ff       	call   c000d008 <panic(char const*)>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	89 d8                	mov    eax,ebx
c0013dab:	83 c4 08             	add    esp,0x8
c0013dae:	5b                   	pop    ebx
c0013daf:	c3                   	ret    

c0013db0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013db4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013db8:	c1 e0 04             	shl    eax,0x4
c0013dbb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013dbf:	8d 50 10             	lea    edx,[eax+0x10]
c0013dc2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013dc8:	74 08                	je     c0013dd2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013dca:	83 c0 04             	add    eax,0x4
c0013dcd:	39 d0                	cmp    eax,edx
c0013dcf:	75 f1                	jne    c0013dc2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013dd1:	c3                   	ret    
c0013dd2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ddc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013de6:	eb e2                	jmp    c0013dca <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013de8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013de8:	57                   	push   edi
c0013de9:	31 c0                	xor    eax,eax
c0013deb:	56                   	push   esi
c0013dec:	53                   	push   ebx
c0013ded:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013df1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013df5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013df9:	89 da                	mov    edx,ebx
c0013dfb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013dff:	c1 e2 04             	shl    edx,0x4
c0013e02:	01 ca                	add    edx,ecx
c0013e04:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013e0c:	74 16                	je     c0013e24 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013e0e:	40                   	inc    eax
c0013e0f:	83 f8 04             	cmp    eax,0x4
c0013e12:	75 f0                	jne    c0013e04 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013e14:	c7 44 24 10 68 9b 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039b68
c0013e1c:	5b                   	pop    ebx
c0013e1d:	5e                   	pop    esi
c0013e1e:	5f                   	pop    edi
c0013e1f:	e9 e4 91 ff ff       	jmp    c000d008 <panic(char const*)>
c0013e24:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013e27:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013e2a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013e30:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013e36:	5b                   	pop    ebx
c0013e37:	5e                   	pop    esi
c0013e38:	5f                   	pop    edi
c0013e39:	c3                   	ret    

c0013e3a <doubleFault(regs*, void*)>:
c0013e3a:	c7 44 24 04 98 9c 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039c98
c0013e42:	e9 c1 91 ff ff       	jmp    c000d008 <panic(char const*)>
c0013e47:	90                   	nop

c0013e48 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013e48:	56                   	push   esi
c0013e49:	53                   	push   ebx
c0013e4a:	50                   	push   eax
c0013e4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e4f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013e53:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e58:	75 35                	jne    c0013e8f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013e5a:	8d 43 20             	lea    eax,[ebx+0x20]
c0013e5d:	31 d2                	xor    edx,edx
c0013e5f:	89 c1                	mov    ecx,eax
c0013e61:	c1 e1 04             	shl    ecx,0x4
c0013e64:	01 f1                	add    ecx,esi
c0013e66:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013e6e:	74 3e                	je     c0013eae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013e70:	42                   	inc    edx
c0013e71:	83 fa 04             	cmp    edx,0x4
c0013e74:	75 f0                	jne    c0013e66 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013e76:	83 ec 0c             	sub    esp,0xc
c0013e79:	68 dc 9b 03 c0       	push   0xc0039bdc
c0013e7e:	e8 85 91 ff ff       	call   c000d008 <panic(char const*)>
c0013e83:	83 c4 10             	add    esp,0x10
c0013e86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013e8b:	5a                   	pop    edx
c0013e8c:	5b                   	pop    ebx
c0013e8d:	5e                   	pop    esi
c0013e8e:	c3                   	ret    
c0013e8f:	83 ec 0c             	sub    esp,0xc
c0013e92:	56                   	push   esi
c0013e93:	e8 ee fb ff ff       	call   c0013a86 <Device::getName()>
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e9e:	75 ba                	jne    c0013e5a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013ea0:	83 fb 0f             	cmp    ebx,0xf
c0013ea3:	7f 29                	jg     c0013ece <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013ea5:	0f b6 9b 00 b2 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4e00]
c0013eac:	eb ac                	jmp    c0013e5a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013eae:	8d 04 82             	lea    eax,[edx+eax*4]
c0013eb1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eb5:	8d 04 86             	lea    eax,[esi+eax*4]
c0013eb8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013ebe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ec2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013ec8:	89 d8                	mov    eax,ebx
c0013eca:	5a                   	pop    edx
c0013ecb:	5b                   	pop    ebx
c0013ecc:	5e                   	pop    esi
c0013ecd:	c3                   	ret    
c0013ece:	83 ec 0c             	sub    esp,0xc
c0013ed1:	68 a4 9b 03 c0       	push   0xc0039ba4
c0013ed6:	e8 2d 91 ff ff       	call   c000d008 <panic(char const*)>
c0013edb:	83 c4 10             	add    esp,0x10
c0013ede:	e9 77 ff ff ff       	jmp    c0013e5a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013ee3:	90                   	nop

c0013ee4 <InterruptController::clearAllHandlers(int, bool)>:
c0013ee4:	56                   	push   esi
c0013ee5:	53                   	push   ebx
c0013ee6:	52                   	push   edx
c0013ee7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013eeb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013eef:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013ef4:	75 61                	jne    c0013f57 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013ef6:	8d 46 20             	lea    eax,[esi+0x20]
c0013ef9:	c1 e6 04             	shl    esi,0x4
c0013efc:	c1 e0 04             	shl    eax,0x4
c0013eff:	01 de                	add    esi,ebx
c0013f01:	01 d8                	add    eax,ebx
c0013f03:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013f0d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013f17:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013f21:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013f2b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013f35:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013f3f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013f49:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013f53:	58                   	pop    eax
c0013f54:	5b                   	pop    ebx
c0013f55:	5e                   	pop    esi
c0013f56:	c3                   	ret    
c0013f57:	83 ec 0c             	sub    esp,0xc
c0013f5a:	53                   	push   ebx
c0013f5b:	e8 26 fb ff ff       	call   c0013a86 <Device::getName()>
c0013f60:	83 c4 10             	add    esp,0x10
c0013f63:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013f66:	75 8e                	jne    c0013ef6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f68:	83 fe 0f             	cmp    esi,0xf
c0013f6b:	7f 09                	jg     c0013f76 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013f6d:	0f b6 b6 00 b2 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffc4e00]
c0013f74:	eb 80                	jmp    c0013ef6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f76:	83 ec 0c             	sub    esp,0xc
c0013f79:	68 18 9c 03 c0       	push   0xc0039c18
c0013f7e:	e8 85 90 ff ff       	call   c000d008 <panic(char const*)>
c0013f83:	83 c4 10             	add    esp,0x10
c0013f86:	e9 6b ff ff ff       	jmp    c0013ef6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f8b:	90                   	nop

c0013f8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013f8c:	56                   	push   esi
c0013f8d:	53                   	push   ebx
c0013f8e:	52                   	push   edx
c0013f8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f93:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f97:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013f9c:	75 3a                	jne    c0013fd8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013f9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fa2:	8d 50 20             	lea    edx,[eax+0x20]
c0013fa5:	c1 e2 04             	shl    edx,0x4
c0013fa8:	8d 04 16             	lea    eax,[esi+edx*1]
c0013fab:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013faf:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013fb5:	74 0b                	je     c0013fc2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013fb7:	83 c0 04             	add    eax,0x4
c0013fba:	39 d0                	cmp    eax,edx
c0013fbc:	75 f1                	jne    c0013faf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013fbe:	58                   	pop    eax
c0013fbf:	5b                   	pop    ebx
c0013fc0:	5e                   	pop    esi
c0013fc1:	c3                   	ret    
c0013fc2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fcc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013fd6:	eb df                	jmp    c0013fb7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013fd8:	83 ec 0c             	sub    esp,0xc
c0013fdb:	56                   	push   esi
c0013fdc:	e8 a5 fa ff ff       	call   c0013a86 <Device::getName()>
c0013fe1:	83 c4 10             	add    esp,0x10
c0013fe4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013fe7:	75 b5                	jne    c0013f9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013fe9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013fee:	7f 11                	jg     c0014001 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013ff0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ff4:	0f b6 80 00 b2 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffc4e00]
c0013ffb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fff:	eb 9d                	jmp    c0013f9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014001:	83 ec 0c             	sub    esp,0xc
c0014004:	68 18 9c 03 c0       	push   0xc0039c18
c0014009:	e8 fa 8f ff ff       	call   c000d008 <panic(char const*)>
c001400e:	83 c4 10             	add    esp,0x10
c0014011:	eb 8b                	jmp    c0013f9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014013 <nmiHandler(regs*, void*)>:
c0014013:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0014018:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001401c:	e9 5d 77 ff ff       	jmp    c000b77e <Computer::handleNMI()>

c0014021 <int_handler>:
c0014021:	55                   	push   ebp
c0014022:	57                   	push   edi
c0014023:	56                   	push   esi
c0014024:	53                   	push   ebx
c0014025:	83 ec 0c             	sub    esp,0xc
c0014028:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001402c:	80 3d 52 bc 03 c0 00 	cmp    BYTE PTR ds:0xc003bc52,0x0
c0014033:	74 0b                	je     c0014040 <int_handler+0x1f>
c0014035:	fa                   	cli    
c0014036:	f4                   	hlt    
c0014037:	80 3d 52 bc 03 c0 00 	cmp    BYTE PTR ds:0xc003bc52,0x0
c001403e:	75 f5                	jne    c0014035 <int_handler+0x14>
c0014040:	e8 8b 31 00 00       	call   c00171d0 <thisCPU()>
c0014045:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014048:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001404e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014051:	83 f8 17             	cmp    eax,0x17
c0014054:	77 13                	ja     c0014069 <int_handler+0x48>
c0014056:	83 ec 08             	sub    esp,0x8
c0014059:	8b 17                	mov    edx,DWORD PTR [edi]
c001405b:	8d 43 e0             	lea    eax,[ebx-0x20]
c001405e:	0f b6 c0             	movzx  eax,al
c0014061:	50                   	push   eax
c0014062:	57                   	push   edi
c0014063:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014066:	83 c4 10             	add    esp,0x10
c0014069:	83 c3 15             	add    ebx,0x15
c001406c:	c1 e3 04             	shl    ebx,0x4
c001406f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014073:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001407a:	31 db                	xor    ebx,ebx
c001407c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014080:	85 c0                	test   eax,eax
c0014082:	74 13                	je     c0014097 <int_handler+0x76>
c0014084:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014087:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001408b:	74 1c                	je     c00140a9 <int_handler+0x88>
c001408d:	83 ec 08             	sub    esp,0x8
c0014090:	52                   	push   edx
c0014091:	56                   	push   esi
c0014092:	ff d0                	call   eax
c0014094:	83 c4 10             	add    esp,0x10
c0014097:	43                   	inc    ebx
c0014098:	83 fb 04             	cmp    ebx,0x4
c001409b:	75 df                	jne    c001407c <int_handler+0x5b>
c001409d:	83 c4 0c             	add    esp,0xc
c00140a0:	31 c0                	xor    eax,eax
c00140a2:	5b                   	pop    ebx
c00140a3:	31 d2                	xor    edx,edx
c00140a5:	5e                   	pop    esi
c00140a6:	5f                   	pop    edi
c00140a7:	5d                   	pop    ebp
c00140a8:	c3                   	ret    
c00140a9:	83 ec 08             	sub    esp,0x8
c00140ac:	52                   	push   edx
c00140ad:	56                   	push   esi
c00140ae:	ff d0                	call   eax
c00140b0:	83 c4 10             	add    esp,0x10
c00140b3:	83 c4 0c             	add    esp,0xc
c00140b6:	5b                   	pop    ebx
c00140b7:	5e                   	pop    esi
c00140b8:	5f                   	pop    edi
c00140b9:	5d                   	pop    ebp
c00140ba:	c3                   	ret    
c00140bb:	90                   	nop

c00140bc <InterruptController::InterruptController(char const*)>:
c00140bc:	83 ec 1c             	sub    esp,0x1c
c00140bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c3:	83 ec 08             	sub    esp,0x8
c00140c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00140ca:	50                   	push   eax
c00140cb:	e8 c4 f8 ff ff       	call   c0013994 <Device::Device(char const*)>
c00140d0:	83 c4 10             	add    esp,0x10
c00140d3:	ba 10 9e 03 c0       	mov    edx,0xc0039e10
c00140d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140dc:	89 10                	mov    DWORD PTR [eax],edx
c00140de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140e2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00140ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140f4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00140fc:	7f 5e                	jg     c001415c <InterruptController::InterruptController(char const*)+0xa0>
c00140fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014106:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001410b:	7f 49                	jg     c0014156 <InterruptController::InterruptController(char const*)+0x9a>
c001410d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014111:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014115:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001411c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014120:	01 ca                	add    edx,ecx
c0014122:	83 c2 54             	add    edx,0x54
c0014125:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001412d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014131:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014135:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001413c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014140:	01 ca                	add    edx,ecx
c0014142:	81 c2 54 04 00 00    	add    edx,0x454
c0014148:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014150:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014154:	eb b0                	jmp    c0014106 <InterruptController::InterruptController(char const*)+0x4a>
c0014156:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001415a:	eb 98                	jmp    c00140f4 <InterruptController::InterruptController(char const*)+0x38>
c001415c:	90                   	nop
c001415d:	83 c4 1c             	add    esp,0x1c
c0014160:	c3                   	ret    
c0014161:	90                   	nop

c0014162 <InterruptController::~InterruptController()>:
c0014162:	83 ec 0c             	sub    esp,0xc
c0014165:	ba 10 9e 03 c0       	mov    edx,0xc0039e10
c001416a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416e:	89 10                	mov    DWORD PTR [eax],edx
c0014170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014174:	83 ec 0c             	sub    esp,0xc
c0014177:	50                   	push   eax
c0014178:	e8 c9 f4 ff ff       	call   c0013646 <Device::~Device()>
c001417d:	83 c4 10             	add    esp,0x10
c0014180:	90                   	nop
c0014181:	83 c4 0c             	add    esp,0xc
c0014184:	c3                   	ret    
c0014185:	90                   	nop

c0014186 <InterruptController::~InterruptController()>:
c0014186:	83 ec 0c             	sub    esp,0xc
c0014189:	83 ec 0c             	sub    esp,0xc
c001418c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014190:	e8 cd ff ff ff       	call   c0014162 <InterruptController::~InterruptController()>
c0014195:	83 c4 10             	add    esp,0x10
c0014198:	83 ec 08             	sub    esp,0x8
c001419b:	68 58 21 00 00       	push   0x2158
c00141a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141a4:	e8 00 e3 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c00141a9:	83 c4 10             	add    esp,0x10
c00141ac:	83 c4 0c             	add    esp,0xc
c00141af:	c3                   	ret    

c00141b0 <displayDebugInfo(regs*)>:
c00141b0:	55                   	push   ebp
c00141b1:	57                   	push   edi
c00141b2:	56                   	push   esi
c00141b3:	53                   	push   ebx
c00141b4:	83 ec 24             	sub    esp,0x24
c00141b7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00141bb:	0f 20 c2             	mov    edx,cr0
c00141be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00141c2:	0f 20 d7             	mov    edi,cr2
c00141c5:	0f 20 de             	mov    esi,cr3
c00141c8:	0f 20 e5             	mov    ebp,cr4
c00141cb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00141ce:	68 a5 9c 03 c0       	push   0xc0039ca5
c00141d3:	e8 12 8d ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00141d8:	58                   	pop    eax
c00141d9:	5a                   	pop    edx
c00141da:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141dd:	68 b0 9c 03 c0       	push   0xc0039cb0
c00141e2:	e8 03 8d ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00141e7:	59                   	pop    ecx
c00141e8:	58                   	pop    eax
c00141e9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00141ec:	68 bb 9c 03 c0       	push   0xc0039cbb
c00141f1:	e8 f4 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00141f6:	58                   	pop    eax
c00141f7:	5a                   	pop    edx
c00141f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141fb:	68 c6 9c 03 c0       	push   0xc0039cc6
c0014200:	e8 e5 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0014205:	59                   	pop    ecx
c0014206:	58                   	pop    eax
c0014207:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001420a:	68 d1 9c 03 c0       	push   0xc0039cd1
c001420f:	e8 d6 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0014214:	58                   	pop    eax
c0014215:	5a                   	pop    edx
c0014216:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014219:	68 dc 9c 03 c0       	push   0xc0039cdc
c001421e:	e8 c7 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0014223:	59                   	pop    ecx
c0014224:	58                   	pop    eax
c0014225:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014228:	68 f6 9c 03 c0       	push   0xc0039cf6
c001422d:	e8 b8 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0014232:	58                   	pop    eax
c0014233:	5a                   	pop    edx
c0014234:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014237:	68 e7 9c 03 c0       	push   0xc0039ce7
c001423c:	e8 a9 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0014241:	59                   	pop    ecx
c0014242:	58                   	pop    eax
c0014243:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014246:	68 f2 9c 03 c0       	push   0xc0039cf2
c001424b:	e8 9a 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0014250:	58                   	pop    eax
c0014251:	5a                   	pop    edx
c0014252:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014255:	68 01 9d 03 c0       	push   0xc0039d01
c001425a:	e8 8b 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001425f:	59                   	pop    ecx
c0014260:	58                   	pop    eax
c0014261:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014264:	68 0c 9d 03 c0       	push   0xc0039d0c
c0014269:	e8 7c 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001426e:	58                   	pop    eax
c001426f:	5a                   	pop    edx
c0014270:	57                   	push   edi
c0014271:	68 17 9d 03 c0       	push   0xc0039d17
c0014276:	e8 6f 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001427b:	59                   	pop    ecx
c001427c:	58                   	pop    eax
c001427d:	56                   	push   esi
c001427e:	68 22 9d 03 c0       	push   0xc0039d22
c0014283:	e8 62 8c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0014288:	58                   	pop    eax
c0014289:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c001428e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014294:	e8 d8 c3 ff ff       	call   c0010671 <setActiveTerminal(VgaText*)>
c0014299:	58                   	pop    eax
c001429a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001429d:	5a                   	pop    edx
c001429e:	c1 e0 05             	shl    eax,0x5
c00142a1:	05 60 af 03 c0       	add    eax,0xc003af60
c00142a6:	50                   	push   eax
c00142a7:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00142ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142b2:	e8 d9 c7 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c00142b7:	59                   	pop    ecx
c00142b8:	58                   	pop    eax
c00142b9:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00142be:	68 2d 9d 03 c0       	push   0xc0039d2d
c00142c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142c9:	e8 c2 c7 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c00142ce:	58                   	pop    eax
c00142cf:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00142d4:	5a                   	pop    edx
c00142d5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00142d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142de:	e8 d3 c7 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c00142e3:	59                   	pop    ecx
c00142e4:	58                   	pop    eax
c00142e5:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00142ea:	68 35 9d 03 c0       	push   0xc0039d35
c00142ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142f5:	e8 96 c7 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c00142fa:	58                   	pop    eax
c00142fb:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014300:	5a                   	pop    edx
c0014301:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014304:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001430a:	e8 a7 c7 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c001430f:	59                   	pop    ecx
c0014310:	58                   	pop    eax
c0014311:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014316:	68 3d 9d 03 c0       	push   0xc0039d3d
c001431b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014321:	e8 6a c7 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c0014326:	58                   	pop    eax
c0014327:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c001432c:	5a                   	pop    edx
c001432d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014330:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014336:	e8 7b c7 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c001433b:	59                   	pop    ecx
c001433c:	58                   	pop    eax
c001433d:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014342:	68 45 9d 03 c0       	push   0xc0039d45
c0014347:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001434d:	e8 3e c7 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c0014352:	58                   	pop    eax
c0014353:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014358:	5a                   	pop    edx
c0014359:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001435c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014362:	e8 4f c7 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c0014367:	59                   	pop    ecx
c0014368:	58                   	pop    eax
c0014369:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c001436e:	68 4d 9d 03 c0       	push   0xc0039d4d
c0014373:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014379:	e8 12 c7 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c001437e:	58                   	pop    eax
c001437f:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014384:	5a                   	pop    edx
c0014385:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014388:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001438e:	e8 23 c7 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c0014393:	59                   	pop    ecx
c0014394:	58                   	pop    eax
c0014395:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c001439a:	68 55 9d 03 c0       	push   0xc0039d55
c001439f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143a5:	e8 e6 c6 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c00143aa:	58                   	pop    eax
c00143ab:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00143b0:	5a                   	pop    edx
c00143b1:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00143b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143ba:	e8 f7 c6 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c00143bf:	59                   	pop    ecx
c00143c0:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00143c5:	5b                   	pop    ebx
c00143c6:	68 5d 9d 03 c0       	push   0xc0039d5d
c00143cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143d1:	e8 ba c6 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c00143d6:	58                   	pop    eax
c00143d7:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00143dc:	5a                   	pop    edx
c00143dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00143e1:	52                   	push   edx
c00143e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143e8:	e8 c9 c6 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c00143ed:	59                   	pop    ecx
c00143ee:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00143f3:	5b                   	pop    ebx
c00143f4:	68 66 9d 03 c0       	push   0xc0039d66
c00143f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143ff:	e8 8c c6 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c0014404:	58                   	pop    eax
c0014405:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c001440a:	5a                   	pop    edx
c001440b:	57                   	push   edi
c001440c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014412:	e8 9f c6 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c0014417:	59                   	pop    ecx
c0014418:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c001441d:	5b                   	pop    ebx
c001441e:	68 6e 9d 03 c0       	push   0xc0039d6e
c0014423:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014429:	e8 62 c6 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c001442e:	5f                   	pop    edi
c001442f:	58                   	pop    eax
c0014430:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014435:	56                   	push   esi
c0014436:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001443c:	e8 75 c6 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c0014441:	58                   	pop    eax
c0014442:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014447:	5a                   	pop    edx
c0014448:	68 76 9d 03 c0       	push   0xc0039d76
c001444d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014453:	e8 38 c6 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c0014458:	59                   	pop    ecx
c0014459:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c001445e:	5b                   	pop    ebx
c001445f:	55                   	push   ebp
c0014460:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014466:	e8 4b c6 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c001446b:	5e                   	pop    esi
c001446c:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014471:	5f                   	pop    edi
c0014472:	68 7e 9d 03 c0       	push   0xc0039d7e
c0014477:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001447d:	e8 0e c6 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c0014482:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014487:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001448d:	e8 ce ab 00 00       	call   c001f060 <CPU::readDR0()>
c0014492:	5d                   	pop    ebp
c0014493:	5a                   	pop    edx
c0014494:	50                   	push   eax
c0014495:	53                   	push   ebx
c0014496:	e8 1b c6 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c001449b:	59                   	pop    ecx
c001449c:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00144a1:	5b                   	pop    ebx
c00144a2:	68 87 9d 03 c0       	push   0xc0039d87
c00144a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144ad:	e8 de c5 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c00144b2:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00144b7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144bd:	e8 b0 ab 00 00       	call   c001f072 <CPU::readDR1()>
c00144c2:	5e                   	pop    esi
c00144c3:	5f                   	pop    edi
c00144c4:	50                   	push   eax
c00144c5:	53                   	push   ebx
c00144c6:	e8 eb c5 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c00144cb:	5d                   	pop    ebp
c00144cc:	58                   	pop    eax
c00144cd:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00144d2:	68 8f 9d 03 c0       	push   0xc0039d8f
c00144d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144dd:	e8 ae c5 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c00144e2:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c00144e7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144ed:	e8 92 ab 00 00       	call   c001f084 <CPU::readDR2()>
c00144f2:	5a                   	pop    edx
c00144f3:	59                   	pop    ecx
c00144f4:	50                   	push   eax
c00144f5:	53                   	push   ebx
c00144f6:	e8 bb c5 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c00144fb:	5b                   	pop    ebx
c00144fc:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014501:	5e                   	pop    esi
c0014502:	68 97 9d 03 c0       	push   0xc0039d97
c0014507:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001450d:	e8 7e c5 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c0014512:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014517:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001451d:	e8 74 ab 00 00       	call   c001f096 <CPU::readDR3()>
c0014522:	5f                   	pop    edi
c0014523:	5d                   	pop    ebp
c0014524:	50                   	push   eax
c0014525:	53                   	push   ebx
c0014526:	e8 8b c5 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c001452b:	58                   	pop    eax
c001452c:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014531:	5a                   	pop    edx
c0014532:	68 9f 9d 03 c0       	push   0xc0039d9f
c0014537:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001453d:	e8 4e c5 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c0014542:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014547:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001454d:	e8 56 ab 00 00       	call   c001f0a8 <CPU::readDR6()>
c0014552:	59                   	pop    ecx
c0014553:	5e                   	pop    esi
c0014554:	50                   	push   eax
c0014555:	53                   	push   ebx
c0014556:	e8 5b c5 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c001455b:	5f                   	pop    edi
c001455c:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014561:	5d                   	pop    ebp
c0014562:	68 a7 9d 03 c0       	push   0xc0039da7
c0014567:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001456d:	e8 1e c5 ff ff       	call   c0010a90 <VgaText::puts(char const*)>
c0014572:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014577:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001457d:	e8 38 ab 00 00       	call   c001f0ba <CPU::readDR7()>
c0014582:	5a                   	pop    edx
c0014583:	59                   	pop    ecx
c0014584:	50                   	push   eax
c0014585:	53                   	push   ebx
c0014586:	e8 2b c5 ff ff       	call   c0010ab6 <VgaText::putx(unsigned int)>
c001458b:	fa                   	cli    
c001458c:	f4                   	hlt    
c001458d:	83 c4 10             	add    esp,0x10
c0014590:	eb fe                	jmp    c0014590 <displayDebugInfo(regs*)+0x3e0>

c0014592 <gpFault(regs*, void*)>:
c0014592:	53                   	push   ebx
c0014593:	83 ec 14             	sub    esp,0x14
c0014596:	c7 05 88 bf 03 c0 b5 87 01 c0 	mov    DWORD PTR ds:0xc003bf88,0xc00187b5
c00145a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145a4:	53                   	push   ebx
c00145a5:	e8 0b 42 00 00       	call   c00187b5 <vm8086FaultHandler(regs*)>
c00145aa:	83 c4 10             	add    esp,0x10
c00145ad:	84 c0                	test   al,al
c00145af:	74 05                	je     c00145b6 <gpFault(regs*, void*)+0x24>
c00145b1:	83 c4 08             	add    esp,0x8
c00145b4:	5b                   	pop    ebx
c00145b5:	c3                   	ret    
c00145b6:	83 ec 0c             	sub    esp,0xc
c00145b9:	68 af 9d 03 c0       	push   0xc0039daf
c00145be:	e8 27 89 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00145c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145c6:	e8 e5 fb ff ff       	call   c00141b0 <displayDebugInfo(regs*)>

c00145cb <pgFault(regs*, void*)>:
c00145cb:	83 ec 18             	sub    esp,0x18
c00145ce:	68 ca 9d 03 c0       	push   0xc0039dca
c00145d3:	e8 12 89 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00145d8:	58                   	pop    eax
c00145d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145dd:	e8 ce fb ff ff       	call   c00141b0 <displayDebugInfo(regs*)>

c00145e2 <otherISRHandler(regs*, void*)>:
c00145e2:	53                   	push   ebx
c00145e3:	83 ec 0c             	sub    esp,0xc
c00145e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145ea:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00145ed:	50                   	push   eax
c00145ee:	50                   	push   eax
c00145ef:	68 d7 9d 03 c0       	push   0xc0039dd7
c00145f4:	e8 f1 88 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00145f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145fc:	e8 af fb ff ff       	call   c00141b0 <displayDebugInfo(regs*)>

c0014601 <opcodeFault(regs*, void*)>:
c0014601:	53                   	push   ebx
c0014602:	83 ec 08             	sub    esp,0x8
c0014605:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014609:	e8 c2 2b 00 00       	call   c00171d0 <thisCPU()>
c001460e:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0014615:	74 16                	je     c001462d <opcodeFault(regs*, void*)+0x2c>
c0014617:	83 ec 0c             	sub    esp,0xc
c001461a:	68 54 9c 03 c0       	push   0xc0039c54
c001461f:	e8 c6 88 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0014624:	83 43 38 40          	add    DWORD PTR [ebx+0x38],0x40
c0014628:	83 c4 18             	add    esp,0x18
c001462b:	5b                   	pop    ebx
c001462c:	c3                   	ret    
c001462d:	83 ec 0c             	sub    esp,0xc
c0014630:	68 f4 9d 03 c0       	push   0xc0039df4
c0014635:	e8 b0 88 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001463a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001463d:	c1 e0 04             	shl    eax,0x4
c0014640:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0014643:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0014647:	89 14 24             	mov    DWORD PTR [esp],edx
c001464a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001464e:	52                   	push   edx
c001464f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0014653:	52                   	push   edx
c0014654:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0014657:	50                   	push   eax
c0014658:	68 78 9c 03 c0       	push   0xc0039c78
c001465d:	e8 88 88 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0014662:	83 c4 14             	add    esp,0x14
c0014665:	53                   	push   ebx
c0014666:	e8 45 fb ff ff       	call   c00141b0 <displayDebugInfo(regs*)>

c001466b <displayProgramFault(char const*)>:
c001466b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014670:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014673:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014679:	85 c0                	test   eax,eax
c001467b:	74 15                	je     c0014692 <displayProgramFault(char const*)+0x27>
c001467d:	83 ec 0c             	sub    esp,0xc
c0014680:	6a 04                	push   0x4
c0014682:	6a 0f                	push   0xf
c0014684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014688:	50                   	push   eax
c0014689:	e8 c4 c0 ff ff       	call   c0010752 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001468e:	83 c4 1c             	add    esp,0x1c
c0014691:	c3                   	ret    
c0014692:	c3                   	ret    
c0014693:	90                   	nop

c0014694 <InterruptController::convertLegacyIRQNumber(int)>:
c0014694:	53                   	push   ebx
c0014695:	83 ec 14             	sub    esp,0x14
c0014698:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001469c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a0:	e8 e1 f3 ff ff       	call   c0013a86 <Device::getName()>
c00146a5:	83 c4 10             	add    esp,0x10
c00146a8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00146ab:	74 07                	je     c00146b4 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00146ad:	89 d8                	mov    eax,ebx
c00146af:	83 c4 08             	add    esp,0x8
c00146b2:	5b                   	pop    ebx
c00146b3:	c3                   	ret    
c00146b4:	83 fb 0f             	cmp    ebx,0xf
c00146b7:	7f 0e                	jg     c00146c7 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00146b9:	0f b6 9b 00 b2 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4e00]
c00146c0:	83 c4 08             	add    esp,0x8
c00146c3:	89 d8                	mov    eax,ebx
c00146c5:	5b                   	pop    ebx
c00146c6:	c3                   	ret    
c00146c7:	83 ec 0c             	sub    esp,0xc
c00146ca:	68 a4 9b 03 c0       	push   0xc0039ba4
c00146cf:	e8 34 89 ff ff       	call   c000d008 <panic(char const*)>
c00146d4:	89 d8                	mov    eax,ebx
c00146d6:	83 c4 10             	add    esp,0x10
c00146d9:	83 c4 08             	add    esp,0x8
c00146dc:	5b                   	pop    ebx
c00146dd:	c3                   	ret    

c00146de <setupInterruptController()>:
c00146de:	56                   	push   esi
c00146df:	53                   	push   ebx
c00146e0:	51                   	push   ecx
c00146e1:	e8 e7 2a 00 00       	call   c00171cd <getCPUNumber()>
c00146e6:	85 c0                	test   eax,eax
c00146e8:	0f 85 10 02 00 00    	jne    c00148fe <setupInterruptController()+0x220>
c00146ee:	83 ec 0c             	sub    esp,0xc
c00146f1:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c00146f6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00146fc:	68 58 21 00 00       	push   0x2158
c0014701:	83 e0 01             	and    eax,0x1
c0014704:	89 c6                	mov    esi,eax
c0014706:	e8 8f dd ff ff       	call   c001249a <operator new(unsigned long)>
c001470b:	89 04 24             	mov    DWORD PTR [esp],eax
c001470e:	89 c3                	mov    ebx,eax
c0014710:	e8 15 95 00 00       	call   c001dc2a <PIC::PIC()>
c0014715:	6a 00                	push   0x0
c0014717:	6a 00                	push   0x0
c0014719:	6a 00                	push   0x0
c001471b:	53                   	push   ebx
c001471c:	e8 4d 98 00 00       	call   c001df6e <PIC::open(int, int, void*)>
c0014721:	83 c4 20             	add    esp,0x20
c0014724:	89 f0                	mov    eax,esi
c0014726:	84 c0                	test   al,al
c0014728:	0f 85 92 01 00 00    	jne    c00148c0 <setupInterruptController()+0x1e2>
c001472e:	83 ec 08             	sub    esp,0x8
c0014731:	53                   	push   ebx
c0014732:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c0014738:	e8 67 f0 ff ff       	call   c00137a4 <Device::addChild(Device*)>
c001473d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001473f:	6a 00                	push   0x0
c0014741:	68 e2 45 01 c0       	push   0xc00145e2
c0014746:	6a 00                	push   0x0
c0014748:	53                   	push   ebx
c0014749:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001474c:	83 c4 20             	add    esp,0x20
c001474f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014751:	6a 00                	push   0x0
c0014753:	68 e2 45 01 c0       	push   0xc00145e2
c0014758:	6a 01                	push   0x1
c001475a:	53                   	push   ebx
c001475b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001475e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014760:	6a 00                	push   0x0
c0014762:	68 13 40 01 c0       	push   0xc0014013
c0014767:	6a 02                	push   0x2
c0014769:	53                   	push   ebx
c001476a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001476d:	83 c4 20             	add    esp,0x20
c0014770:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014772:	6a 00                	push   0x0
c0014774:	68 e2 45 01 c0       	push   0xc00145e2
c0014779:	6a 03                	push   0x3
c001477b:	53                   	push   ebx
c001477c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001477f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014781:	6a 00                	push   0x0
c0014783:	68 e2 45 01 c0       	push   0xc00145e2
c0014788:	6a 04                	push   0x4
c001478a:	53                   	push   ebx
c001478b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001478e:	83 c4 20             	add    esp,0x20
c0014791:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014793:	6a 00                	push   0x0
c0014795:	68 e2 45 01 c0       	push   0xc00145e2
c001479a:	6a 05                	push   0x5
c001479c:	53                   	push   ebx
c001479d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147a2:	6a 00                	push   0x0
c00147a4:	68 01 46 01 c0       	push   0xc0014601
c00147a9:	6a 06                	push   0x6
c00147ab:	53                   	push   ebx
c00147ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147af:	83 c4 20             	add    esp,0x20
c00147b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147b4:	6a 00                	push   0x0
c00147b6:	68 e2 45 01 c0       	push   0xc00145e2
c00147bb:	6a 07                	push   0x7
c00147bd:	53                   	push   ebx
c00147be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147c3:	6a 00                	push   0x0
c00147c5:	68 3a 3e 01 c0       	push   0xc0013e3a
c00147ca:	6a 08                	push   0x8
c00147cc:	53                   	push   ebx
c00147cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147d0:	83 c4 20             	add    esp,0x20
c00147d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147d5:	6a 00                	push   0x0
c00147d7:	68 e2 45 01 c0       	push   0xc00145e2
c00147dc:	6a 09                	push   0x9
c00147de:	53                   	push   ebx
c00147df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147e4:	6a 00                	push   0x0
c00147e6:	68 e2 45 01 c0       	push   0xc00145e2
c00147eb:	6a 0a                	push   0xa
c00147ed:	53                   	push   ebx
c00147ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147f1:	83 c4 20             	add    esp,0x20
c00147f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147f6:	6a 00                	push   0x0
c00147f8:	68 e2 45 01 c0       	push   0xc00145e2
c00147fd:	6a 0b                	push   0xb
c00147ff:	53                   	push   ebx
c0014800:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014803:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014805:	6a 00                	push   0x0
c0014807:	68 e2 45 01 c0       	push   0xc00145e2
c001480c:	6a 0c                	push   0xc
c001480e:	53                   	push   ebx
c001480f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014812:	83 c4 20             	add    esp,0x20
c0014815:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014817:	6a 00                	push   0x0
c0014819:	68 92 45 01 c0       	push   0xc0014592
c001481e:	6a 0d                	push   0xd
c0014820:	53                   	push   ebx
c0014821:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014824:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014826:	6a 00                	push   0x0
c0014828:	68 cb 45 01 c0       	push   0xc00145cb
c001482d:	6a 0e                	push   0xe
c001482f:	53                   	push   ebx
c0014830:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014833:	83 c4 20             	add    esp,0x20
c0014836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014838:	6a 00                	push   0x0
c001483a:	68 e2 45 01 c0       	push   0xc00145e2
c001483f:	6a 0f                	push   0xf
c0014841:	53                   	push   ebx
c0014842:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014845:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014847:	6a 00                	push   0x0
c0014849:	68 e2 45 01 c0       	push   0xc00145e2
c001484e:	6a 10                	push   0x10
c0014850:	53                   	push   ebx
c0014851:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014854:	83 c4 20             	add    esp,0x20
c0014857:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014859:	6a 00                	push   0x0
c001485b:	68 e2 45 01 c0       	push   0xc00145e2
c0014860:	6a 11                	push   0x11
c0014862:	53                   	push   ebx
c0014863:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014866:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014868:	6a 00                	push   0x0
c001486a:	68 e2 45 01 c0       	push   0xc00145e2
c001486f:	6a 12                	push   0x12
c0014871:	53                   	push   ebx
c0014872:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014875:	83 c4 20             	add    esp,0x20
c0014878:	8b 03                	mov    eax,DWORD PTR [ebx]
c001487a:	6a 00                	push   0x0
c001487c:	68 e2 45 01 c0       	push   0xc00145e2
c0014881:	6a 13                	push   0x13
c0014883:	53                   	push   ebx
c0014884:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014889:	6a 00                	push   0x0
c001488b:	68 e2 45 01 c0       	push   0xc00145e2
c0014890:	6a 14                	push   0x14
c0014892:	53                   	push   ebx
c0014893:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014896:	83 c4 20             	add    esp,0x20
c0014899:	8b 03                	mov    eax,DWORD PTR [ebx]
c001489b:	6a 00                	push   0x0
c001489d:	68 e2 45 01 c0       	push   0xc00145e2
c00148a2:	6a 1e                	push   0x1e
c00148a4:	53                   	push   ebx
c00148a5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00148a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148aa:	6a 00                	push   0x0
c00148ac:	68 48 fe 00 c0       	push   0xc000fe48
c00148b1:	6a 60                	push   0x60
c00148b3:	53                   	push   ebx
c00148b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00148b7:	83 c4 20             	add    esp,0x20
c00148ba:	89 d8                	mov    eax,ebx
c00148bc:	5a                   	pop    edx
c00148bd:	5b                   	pop    ebx
c00148be:	5e                   	pop    esi
c00148bf:	c3                   	ret    
c00148c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148c2:	6a 00                	push   0x0
c00148c4:	6a 00                	push   0x0
c00148c6:	6a 00                	push   0x0
c00148c8:	53                   	push   ebx
c00148c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148d1:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00148d4:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00148db:	e8 ba db ff ff       	call   c001249a <operator new(unsigned long)>
c00148e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00148e3:	89 c3                	mov    ebx,eax
c00148e5:	e8 7e 8e 00 00       	call   c001d768 <APIC::APIC()>
c00148ea:	6a 00                	push   0x0
c00148ec:	6a 00                	push   0x0
c00148ee:	6a 00                	push   0x0
c00148f0:	53                   	push   ebx
c00148f1:	e8 90 8d 00 00       	call   c001d686 <APIC::open(int, int, void*)>
c00148f6:	83 c4 20             	add    esp,0x20
c00148f9:	e9 30 fe ff ff       	jmp    c001472e <setupInterruptController()+0x50>
c00148fe:	83 ec 0c             	sub    esp,0xc
c0014901:	68 58 21 00 00       	push   0x2158
c0014906:	e8 8f db ff ff       	call   c001249a <operator new(unsigned long)>
c001490b:	89 04 24             	mov    DWORD PTR [esp],eax
c001490e:	89 c3                	mov    ebx,eax
c0014910:	e8 53 8e 00 00       	call   c001d768 <APIC::APIC()>
c0014915:	6a 00                	push   0x0
c0014917:	6a 00                	push   0x0
c0014919:	6a 00                	push   0x0
c001491b:	53                   	push   ebx
c001491c:	e8 65 8d 00 00       	call   c001d686 <APIC::open(int, int, void*)>
c0014921:	83 c4 18             	add    esp,0x18
c0014924:	53                   	push   ebx
c0014925:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001492b:	e8 74 ee ff ff       	call   c00137a4 <Device::addChild(Device*)>
c0014930:	83 c4 10             	add    esp,0x10
c0014933:	89 d8                	mov    eax,ebx
c0014935:	5a                   	pop    edx
c0014936:	5b                   	pop    ebx
c0014937:	5e                   	pop    esi
c0014938:	c3                   	ret    
c0014939:	90                   	nop

c001493a <startGUI(void*)>:
c001493a:	55                   	push   ebp
c001493b:	89 e5                	mov    ebp,esp
c001493d:	53                   	push   ebx
c001493e:	83 ec 04             	sub    esp,0x4
c0014941:	e8 48 9a ff ff       	call   c000e38e <unlockScheduler()>
c0014946:	e8 2c 9a ff ff       	call   c000e377 <getIRQNestingLevel()>
c001494b:	83 ec 08             	sub    esp,0x8
c001494e:	50                   	push   eax
c001494f:	68 50 9e 03 c0       	push   0xc0039e50
c0014954:	e8 91 85 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0014959:	83 c4 10             	add    esp,0x10
c001495c:	8b 1d a8 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003baa8
c0014962:	83 ec 0c             	sub    esp,0xc
c0014965:	68 6a 9e 03 c0       	push   0xc0039e6a
c001496a:	e8 5c 7d ff ff       	call   c000c6cb <loadDLL(char const*)>
c001496f:	83 c4 10             	add    esp,0x10
c0014972:	83 ec 08             	sub    esp,0x8
c0014975:	53                   	push   ebx
c0014976:	50                   	push   eax
c0014977:	e8 18 7e ff ff       	call   c000c794 <executeDLL(unsigned long, void*)>
c001497c:	83 c4 10             	add    esp,0x10
c001497f:	8b 1d a8 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003baa8
c0014985:	83 ec 0c             	sub    esp,0xc
c0014988:	68 84 9e 03 c0       	push   0xc0039e84
c001498d:	e8 39 7d ff ff       	call   c000c6cb <loadDLL(char const*)>
c0014992:	83 c4 10             	add    esp,0x10
c0014995:	83 ec 08             	sub    esp,0x8
c0014998:	53                   	push   ebx
c0014999:	50                   	push   eax
c001499a:	e8 f5 7d ff ff       	call   c000c794 <executeDLL(unsigned long, void*)>
c001499f:	83 c4 10             	add    esp,0x10
c00149a2:	90                   	nop
c00149a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00149a6:	c9                   	leave  
c00149a7:	c3                   	ret    

c00149a8 <sendKeyToTerminal(unsigned char)>:
c00149a8:	55                   	push   ebp
c00149a9:	89 e5                	mov    ebp,esp
c00149ab:	83 ec 28             	sub    esp,0x28
c00149ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00149b4:	a1 44 bf 03 c0       	mov    eax,ds:0xc003bf44
c00149b9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00149bd:	83 ec 08             	sub    esp,0x8
c00149c0:	52                   	push   edx
c00149c1:	50                   	push   eax
c00149c2:	e8 c7 c2 ff ff       	call   c0010c8e <VgaText::receiveKey(unsigned char)>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00149ce:	75 41                	jne    c0014a11 <sendKeyToTerminal(unsigned char)+0x69>
c00149d0:	e8 de 99 ff ff       	call   c000e3b3 <lockStuff()>
c00149d5:	a1 a0 bf 03 c0       	mov    eax,ds:0xc003bfa0
c00149da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149dd:	c7 05 a0 bf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bfa0,0x0
c00149e7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00149eb:	74 1f                	je     c0014a0c <sendKeyToTerminal(unsigned char)+0x64>
c00149ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149f0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00149f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00149f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149fc:	83 ec 0c             	sub    esp,0xc
c00149ff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014a02:	e8 a9 a1 ff ff       	call   c000ebb0 <unblockTask(ThreadControlBlock*)>
c0014a07:	83 c4 10             	add    esp,0x10
c0014a0a:	eb db                	jmp    c00149e7 <sendKeyToTerminal(unsigned char)+0x3f>
c0014a0c:	e8 34 9d ff ff       	call   c000e745 <unlockStuff()>
c0014a11:	90                   	nop
c0014a12:	c9                   	leave  
c0014a13:	c3                   	ret    

c0014a14 <sendKeyboardToken(KeyboardToken)>:
c0014a14:	55                   	push   ebp
c0014a15:	89 e5                	mov    ebp,esp
c0014a17:	83 ec 18             	sub    esp,0x18
c0014a1a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0014a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a20:	0f b7 c0             	movzx  eax,ax
c0014a23:	83 f2 01             	xor    edx,0x1
c0014a26:	88 90 c0 bf 03 c0    	mov    BYTE PTR [eax-0x3ffc4040],dl
c0014a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2f:	66 3d 03 02          	cmp    ax,0x203
c0014a33:	75 07                	jne    c0014a3c <sendKeyboardToken(KeyboardToken)+0x28>
c0014a35:	a0 c0 c0 03 c0       	mov    al,ds:0xc003c0c0
c0014a3a:	84 c0                	test   al,al
c0014a3c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0014a40:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0014a43:	a0 c8 c3 03 c0       	mov    al,ds:0xc003c3c8
c0014a48:	38 c2                	cmp    dl,al
c0014a4a:	74 1c                	je     c0014a68 <sendKeyboardToken(KeyboardToken)+0x54>
c0014a4c:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0014a4f:	a2 c8 c3 03 c0       	mov    ds:0xc003c3c8,al
c0014a54:	a0 c8 c3 03 c0       	mov    al,ds:0xc003c3c8
c0014a59:	0f b6 c0             	movzx  eax,al
c0014a5c:	83 ec 0c             	sub    esp,0xc
c0014a5f:	50                   	push   eax
c0014a60:	e8 97 b4 ff ff       	call   c000fefc <setTerminalScrollLock(bool)>
c0014a65:	83 c4 10             	add    esp,0x10
c0014a68:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0014a6b:	84 c0                	test   al,al
c0014a6d:	0f 84 ae 00 00 00    	je     c0014b21 <sendKeyboardToken(KeyboardToken)+0x10d>
c0014a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a76:	66 3d 10 03          	cmp    ax,0x310
c0014a7a:	75 06                	jne    c0014a82 <sendKeyboardToken(KeyboardToken)+0x6e>
c0014a7c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0014a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a85:	66 3d 11 03          	cmp    ax,0x311
c0014a89:	75 06                	jne    c0014a91 <sendKeyboardToken(KeyboardToken)+0x7d>
c0014a8b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0014a91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a94:	66 3d 12 03          	cmp    ax,0x312
c0014a98:	75 06                	jne    c0014aa0 <sendKeyboardToken(KeyboardToken)+0x8c>
c0014a9a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0014aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa3:	66 3d 13 03          	cmp    ax,0x313
c0014aa7:	75 06                	jne    c0014aaf <sendKeyboardToken(KeyboardToken)+0x9b>
c0014aa9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0014aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab2:	66 3d 14 03          	cmp    ax,0x314
c0014ab6:	75 06                	jne    c0014abe <sendKeyboardToken(KeyboardToken)+0xaa>
c0014ab8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0014abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac1:	66 3d 15 03          	cmp    ax,0x315
c0014ac5:	75 06                	jne    c0014acd <sendKeyboardToken(KeyboardToken)+0xb9>
c0014ac7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad0:	66 3d 16 03          	cmp    ax,0x316
c0014ad4:	75 06                	jne    c0014adc <sendKeyboardToken(KeyboardToken)+0xc8>
c0014ad6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0014adc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014adf:	66 3d 17 03          	cmp    ax,0x317
c0014ae3:	75 06                	jne    c0014aeb <sendKeyboardToken(KeyboardToken)+0xd7>
c0014ae5:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0014aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aee:	66 3d 18 03          	cmp    ax,0x318
c0014af2:	75 06                	jne    c0014afa <sendKeyboardToken(KeyboardToken)+0xe6>
c0014af4:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0014afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afd:	66 3d 19 03          	cmp    ax,0x319
c0014b01:	75 06                	jne    c0014b09 <sendKeyboardToken(KeyboardToken)+0xf5>
c0014b03:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0014b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b0c:	66 3d 1a 03          	cmp    ax,0x31a
c0014b10:	0f 85 c9 00 00 00    	jne    c0014bdf <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014b16:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0014b1c:	e9 be 00 00 00       	jmp    c0014bdf <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b24:	66 3d 10 03          	cmp    ax,0x310
c0014b28:	75 0a                	jne    c0014b34 <sendKeyboardToken(KeyboardToken)+0x120>
c0014b2a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0014b30:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b37:	66 3d 11 03          	cmp    ax,0x311
c0014b3b:	75 0a                	jne    c0014b47 <sendKeyboardToken(KeyboardToken)+0x133>
c0014b3d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0014b43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4a:	66 3d 12 03          	cmp    ax,0x312
c0014b4e:	75 0a                	jne    c0014b5a <sendKeyboardToken(KeyboardToken)+0x146>
c0014b50:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0014b56:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5d:	66 3d 13 03          	cmp    ax,0x313
c0014b61:	75 0a                	jne    c0014b6d <sendKeyboardToken(KeyboardToken)+0x159>
c0014b63:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0014b69:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b70:	66 3d 14 03          	cmp    ax,0x314
c0014b74:	75 0a                	jne    c0014b80 <sendKeyboardToken(KeyboardToken)+0x16c>
c0014b76:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0014b7c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b83:	66 3d 15 03          	cmp    ax,0x315
c0014b87:	75 0a                	jne    c0014b93 <sendKeyboardToken(KeyboardToken)+0x17f>
c0014b89:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014b8f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b96:	66 3d 16 03          	cmp    ax,0x316
c0014b9a:	75 0a                	jne    c0014ba6 <sendKeyboardToken(KeyboardToken)+0x192>
c0014b9c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014ba2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba9:	66 3d 17 03          	cmp    ax,0x317
c0014bad:	75 0a                	jne    c0014bb9 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0014baf:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0014bb5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bbc:	66 3d 18 03          	cmp    ax,0x318
c0014bc0:	75 0a                	jne    c0014bcc <sendKeyboardToken(KeyboardToken)+0x1b8>
c0014bc2:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0014bc8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bcf:	66 3d 19 03          	cmp    ax,0x319
c0014bd3:	75 0a                	jne    c0014bdf <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014bd5:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0014bdb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be2:	66 3d 00 02          	cmp    ax,0x200
c0014be6:	75 2a                	jne    c0014c12 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014be8:	a0 c0 c3 03 c0       	mov    al,ds:0xc003c3c0
c0014bed:	83 f0 01             	xor    eax,0x1
c0014bf0:	84 c0                	test   al,al
c0014bf2:	74 1e                	je     c0014c12 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014bf4:	a1 fc bc 03 c0       	mov    eax,ds:0xc003bcfc
c0014bf9:	6a 01                	push   0x1
c0014bfb:	6a 00                	push   0x0
c0014bfd:	68 3a 49 01 c0       	push   0xc001493a
c0014c02:	50                   	push   eax
c0014c03:	e8 ae 98 ff ff       	call   c000e4b6 <Process::createThread(void (*)(void*), void*, int)>
c0014c08:	83 c4 10             	add    esp,0x10
c0014c0b:	c6 05 c0 c3 03 c0 01 	mov    BYTE PTR ds:0xc003c3c0,0x1
c0014c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c15:	66 3d 1d 03          	cmp    ax,0x31d
c0014c19:	75 06                	jne    c0014c21 <sendKeyboardToken(KeyboardToken)+0x20d>
c0014c1b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0014c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c24:	66 3d 1c 03          	cmp    ax,0x31c
c0014c28:	75 06                	jne    c0014c30 <sendKeyboardToken(KeyboardToken)+0x21c>
c0014c2a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0014c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c33:	66 3d 1b 03          	cmp    ax,0x31b
c0014c37:	75 06                	jne    c0014c3f <sendKeyboardToken(KeyboardToken)+0x22b>
c0014c39:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0014c3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c42:	66 3d 1e 03          	cmp    ax,0x31e
c0014c46:	75 06                	jne    c0014c4e <sendKeyboardToken(KeyboardToken)+0x23a>
c0014c48:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0014c4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c51:	66 3d 1f 03          	cmp    ax,0x31f
c0014c55:	75 06                	jne    c0014c5d <sendKeyboardToken(KeyboardToken)+0x249>
c0014c57:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0014c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c60:	66 3d 1a 03          	cmp    ax,0x31a
c0014c64:	75 06                	jne    c0014c6c <sendKeyboardToken(KeyboardToken)+0x258>
c0014c66:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0014c6c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0014c70:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014c73:	83 f0 01             	xor    eax,0x1
c0014c76:	84 c0                	test   al,al
c0014c78:	74 77                	je     c0014cf1 <sendKeyboardToken(KeyboardToken)+0x2dd>
c0014c7a:	a0 c1 c0 03 c0       	mov    al,ds:0xc003c0c1
c0014c7f:	84 c0                	test   al,al
c0014c81:	74 41                	je     c0014cc4 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014c83:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014c87:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0014c8b:	74 2b                	je     c0014cb8 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0014c8d:	8b 15 c4 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c3c4
c0014c93:	89 d0                	mov    eax,edx
c0014c95:	c1 e0 02             	shl    eax,0x2
c0014c98:	01 d0                	add    eax,edx
c0014c9a:	01 c0                	add    eax,eax
c0014c9c:	a3 c4 c3 03 c0       	mov    ds:0xc003c3c4,eax
c0014ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca4:	0f b7 c0             	movzx  eax,ax
c0014ca7:	8d 50 d0             	lea    edx,[eax-0x30]
c0014caa:	a1 c4 c3 03 c0       	mov    eax,ds:0xc003c3c4
c0014caf:	01 d0                	add    eax,edx
c0014cb1:	a3 c4 c3 03 c0       	mov    ds:0xc003c3c4,eax
c0014cb6:	eb 6d                	jmp    c0014d25 <sendKeyboardToken(KeyboardToken)+0x311>
c0014cb8:	c7 05 c4 c3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c3c4,0x0
c0014cc2:	eb 61                	jmp    c0014d25 <sendKeyboardToken(KeyboardToken)+0x311>
c0014cc4:	a1 c4 c3 03 c0       	mov    eax,ds:0xc003c3c4
c0014cc9:	85 c0                	test   eax,eax
c0014ccb:	74 18                	je     c0014ce5 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0014ccd:	a1 c4 c3 03 c0       	mov    eax,ds:0xc003c3c4
c0014cd2:	0f b6 c0             	movzx  eax,al
c0014cd5:	83 ec 0c             	sub    esp,0xc
c0014cd8:	50                   	push   eax
c0014cd9:	e8 ca fc ff ff       	call   c00149a8 <sendKeyToTerminal(unsigned char)>
c0014cde:	83 c4 10             	add    esp,0x10
c0014ce1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014ce5:	c7 05 c4 c3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c3c4,0x0
c0014cef:	eb 34                	jmp    c0014d25 <sendKeyboardToken(KeyboardToken)+0x311>
c0014cf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf4:	66 3d 01 01          	cmp    ax,0x101
c0014cf8:	75 2b                	jne    c0014d25 <sendKeyboardToken(KeyboardToken)+0x311>
c0014cfa:	a1 c4 c3 03 c0       	mov    eax,ds:0xc003c3c4
c0014cff:	85 c0                	test   eax,eax
c0014d01:	74 18                	je     c0014d1b <sendKeyboardToken(KeyboardToken)+0x307>
c0014d03:	a1 c4 c3 03 c0       	mov    eax,ds:0xc003c3c4
c0014d08:	0f b6 c0             	movzx  eax,al
c0014d0b:	83 ec 0c             	sub    esp,0xc
c0014d0e:	50                   	push   eax
c0014d0f:	e8 94 fc ff ff       	call   c00149a8 <sendKeyToTerminal(unsigned char)>
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014d1b:	c7 05 c4 c3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c3c4,0x0
c0014d25:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014d28:	83 f0 01             	xor    eax,0x1
c0014d2b:	84 c0                	test   al,al
c0014d2d:	74 4c                	je     c0014d7b <sendKeyboardToken(KeyboardToken)+0x367>
c0014d2f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014d32:	83 f0 01             	xor    eax,0x1
c0014d35:	84 c0                	test   al,al
c0014d37:	74 42                	je     c0014d7b <sendKeyboardToken(KeyboardToken)+0x367>
c0014d39:	a0 c0 c0 03 c0       	mov    al,ds:0xc003c0c0
c0014d3e:	83 f0 01             	xor    eax,0x1
c0014d41:	84 c0                	test   al,al
c0014d43:	74 36                	je     c0014d7b <sendKeyboardToken(KeyboardToken)+0x367>
c0014d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d48:	66 83 f8 1f          	cmp    ax,0x1f
c0014d4c:	76 09                	jbe    c0014d57 <sendKeyboardToken(KeyboardToken)+0x343>
c0014d4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d51:	66 83 f8 7e          	cmp    ax,0x7e
c0014d55:	76 12                	jbe    c0014d69 <sendKeyboardToken(KeyboardToken)+0x355>
c0014d57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5a:	66 83 f8 0a          	cmp    ax,0xa
c0014d5e:	74 09                	je     c0014d69 <sendKeyboardToken(KeyboardToken)+0x355>
c0014d60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d63:	66 83 f8 08          	cmp    ax,0x8
c0014d67:	75 12                	jne    c0014d7b <sendKeyboardToken(KeyboardToken)+0x367>
c0014d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6c:	0f b6 c0             	movzx  eax,al
c0014d6f:	83 ec 0c             	sub    esp,0xc
c0014d72:	50                   	push   eax
c0014d73:	e8 30 fc ff ff       	call   c00149a8 <sendKeyToTerminal(unsigned char)>
c0014d78:	83 c4 10             	add    esp,0x10
c0014d7b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014d7e:	83 f0 01             	xor    eax,0x1
c0014d81:	84 c0                	test   al,al
c0014d83:	74 4f                	je     c0014dd4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d85:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014d88:	83 f0 01             	xor    eax,0x1
c0014d8b:	84 c0                	test   al,al
c0014d8d:	74 45                	je     c0014dd4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d8f:	a0 c0 c0 03 c0       	mov    al,ds:0xc003c0c0
c0014d94:	84 c0                	test   al,al
c0014d96:	74 3c                	je     c0014dd4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9b:	66 83 f8 3f          	cmp    ax,0x3f
c0014d9f:	76 33                	jbe    c0014dd4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da4:	66 83 f8 7f          	cmp    ax,0x7f
c0014da8:	77 2a                	ja     c0014dd4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dad:	88 c2                	mov    dl,al
c0014daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db2:	66 83 f8 5f          	cmp    ax,0x5f
c0014db6:	76 04                	jbe    c0014dbc <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014db8:	b0 20                	mov    al,0x20
c0014dba:	eb 02                	jmp    c0014dbe <sendKeyboardToken(KeyboardToken)+0x3aa>
c0014dbc:	b0 00                	mov    al,0x0
c0014dbe:	29 c2                	sub    edx,eax
c0014dc0:	88 d0                	mov    al,dl
c0014dc2:	83 e8 40             	sub    eax,0x40
c0014dc5:	0f b6 c0             	movzx  eax,al
c0014dc8:	83 ec 0c             	sub    esp,0xc
c0014dcb:	50                   	push   eax
c0014dcc:	e8 d7 fb ff ff       	call   c00149a8 <sendKeyToTerminal(unsigned char)>
c0014dd1:	83 c4 10             	add    esp,0x10
c0014dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd7:	66 3d 00 03          	cmp    ax,0x300
c0014ddb:	75 0f                	jne    c0014dec <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014ddd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014de0:	83 f0 01             	xor    eax,0x1
c0014de3:	84 c0                	test   al,al
c0014de5:	74 05                	je     c0014dec <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014de7:	e8 37 b9 ff ff       	call   c0010723 <doTerminalCycle()>
c0014dec:	90                   	nop
c0014ded:	c9                   	leave  
c0014dee:	c3                   	ret    

c0014def <clearInternalKeybuffer(VgaText*)>:
c0014def:	55                   	push   ebp
c0014df0:	89 e5                	mov    ebp,esp
c0014df2:	83 ec 08             	sub    esp,0x8
c0014df5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df8:	05 34 11 00 00       	add    eax,0x1134
c0014dfd:	83 ec 0c             	sub    esp,0xc
c0014e00:	50                   	push   eax
c0014e01:	e8 fb b8 fe ff       	call   c0000701 <strlen>
c0014e06:	83 c4 10             	add    esp,0x10
c0014e09:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e0c:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e12:	83 ec 04             	sub    esp,0x4
c0014e15:	50                   	push   eax
c0014e16:	6a 00                	push   0x0
c0014e18:	52                   	push   edx
c0014e19:	e8 ba b8 fe ff       	call   c00006d8 <memset>
c0014e1e:	83 c4 10             	add    esp,0x10
c0014e21:	90                   	nop
c0014e22:	c9                   	leave  
c0014e23:	c3                   	ret    

c0014e24 <readKeyboard(VgaText*, char*, unsigned long)>:
c0014e24:	55                   	push   ebp
c0014e25:	89 e5                	mov    ebp,esp
c0014e27:	83 ec 18             	sub    esp,0x18
c0014e2a:	fb                   	sti    
c0014e2b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014e32:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014e36:	74 77                	je     c0014eaf <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014e41:	84 c0                	test   al,al
c0014e43:	75 02                	jne    c0014e47 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014e45:	eb f1                	jmp    c0014e38 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014e47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014e4a:	8d 50 01             	lea    edx,[eax+0x1]
c0014e4d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014e50:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e53:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014e59:	88 10                	mov    BYTE PTR [eax],dl
c0014e5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014e64:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014e67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6a:	05 34 11 00 00       	add    eax,0x1134
c0014e6f:	83 ec 0c             	sub    esp,0xc
c0014e72:	50                   	push   eax
c0014e73:	e8 89 b8 fe ff       	call   c0000701 <strlen>
c0014e78:	83 c4 10             	add    esp,0x10
c0014e7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e7e:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e84:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014e87:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e8a:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e90:	83 ec 04             	sub    esp,0x4
c0014e93:	50                   	push   eax
c0014e94:	51                   	push   ecx
c0014e95:	52                   	push   edx
c0014e96:	e8 59 b7 fe ff       	call   c00005f4 <memmove>
c0014e9b:	83 c4 10             	add    esp,0x10
c0014e9e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014ea1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ea4:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014ea8:	75 88                	jne    c0014e32 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014eaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ead:	eb 03                	jmp    c0014eb2 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014eaf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb2:	c9                   	leave  
c0014eb3:	c3                   	ret    

c0014eb4 <Keyboard::Keyboard(char const*)>:
c0014eb4:	83 ec 0c             	sub    esp,0xc
c0014eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ebb:	83 ec 08             	sub    esp,0x8
c0014ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ec2:	50                   	push   eax
c0014ec3:	e8 cc ea ff ff       	call   c0013994 <Device::Device(char const*)>
c0014ec8:	83 c4 10             	add    esp,0x10
c0014ecb:	ba a8 9e 03 c0       	mov    edx,0xc0039ea8
c0014ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ed4:	89 10                	mov    DWORD PTR [eax],edx
c0014ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eda:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014ee4:	c6 05 a4 bf 03 c0 01 	mov    BYTE PTR ds:0xc003bfa4,0x1
c0014eeb:	90                   	nop
c0014eec:	83 c4 0c             	add    esp,0xc
c0014eef:	c3                   	ret    

c0014ef0 <Keyboard::~Keyboard()>:
c0014ef0:	83 ec 0c             	sub    esp,0xc
c0014ef3:	ba a8 9e 03 c0       	mov    edx,0xc0039ea8
c0014ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014efc:	89 10                	mov    DWORD PTR [eax],edx
c0014efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f02:	83 ec 0c             	sub    esp,0xc
c0014f05:	50                   	push   eax
c0014f06:	e8 3b e7 ff ff       	call   c0013646 <Device::~Device()>
c0014f0b:	83 c4 10             	add    esp,0x10
c0014f0e:	90                   	nop
c0014f0f:	83 c4 0c             	add    esp,0xc
c0014f12:	c3                   	ret    
c0014f13:	90                   	nop

c0014f14 <Keyboard::~Keyboard()>:
c0014f14:	83 ec 0c             	sub    esp,0xc
c0014f17:	83 ec 0c             	sub    esp,0xc
c0014f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f1e:	e8 cd ff ff ff       	call   c0014ef0 <Keyboard::~Keyboard()>
c0014f23:	83 c4 10             	add    esp,0x10
c0014f26:	83 ec 08             	sub    esp,0x8
c0014f29:	68 5c 01 00 00       	push   0x15c
c0014f2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f32:	e8 72 d5 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0014f37:	83 c4 10             	add    esp,0x10
c0014f3a:	83 c4 0c             	add    esp,0xc
c0014f3d:	c3                   	ret    

c0014f3e <LogicalDisk::close(int, int, void*)>:
c0014f3e:	83 c8 ff             	or     eax,0xffffffff
c0014f41:	c3                   	ret    

c0014f42 <LogicalDisk::~LogicalDisk()>:
c0014f42:	83 ec 0c             	sub    esp,0xc
c0014f45:	ba 58 9f 03 c0       	mov    edx,0xc0039f58
c0014f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f4e:	89 10                	mov    DWORD PTR [eax],edx
c0014f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f54:	83 ec 0c             	sub    esp,0xc
c0014f57:	50                   	push   eax
c0014f58:	e8 e9 e6 ff ff       	call   c0013646 <Device::~Device()>
c0014f5d:	83 c4 10             	add    esp,0x10
c0014f60:	90                   	nop
c0014f61:	83 c4 0c             	add    esp,0xc
c0014f64:	c3                   	ret    
c0014f65:	90                   	nop

c0014f66 <LogicalDisk::~LogicalDisk()>:
c0014f66:	83 ec 0c             	sub    esp,0xc
c0014f69:	83 ec 0c             	sub    esp,0xc
c0014f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f70:	e8 cd ff ff ff       	call   c0014f42 <LogicalDisk::~LogicalDisk()>
c0014f75:	83 c4 10             	add    esp,0x10
c0014f78:	83 ec 08             	sub    esp,0x8
c0014f7b:	68 74 01 00 00       	push   0x174
c0014f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f84:	e8 20 d5 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0014f89:	83 c4 10             	add    esp,0x10
c0014f8c:	83 c4 0c             	add    esp,0xc
c0014f8f:	c3                   	ret    

c0014f90 <LogicalDisk::open(int, int, void*)>:
c0014f90:	83 ec 18             	sub    esp,0x18
c0014f93:	68 d4 9e 03 c0       	push   0xc0039ed4
c0014f98:	e8 6b 80 ff ff       	call   c000d008 <panic(char const*)>
c0014f9d:	83 c8 ff             	or     eax,0xffffffff
c0014fa0:	83 c4 1c             	add    esp,0x1c
c0014fa3:	c3                   	ret    

c0014fa4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014fa4:	53                   	push   ebx
c0014fa5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014fa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014fad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014fb1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014fb7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014fbd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014fc3:	77 10                	ja     c0014fd5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014fc5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014fcb:	89 d3                	mov    ebx,edx
c0014fcd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014fd3:	72 05                	jb     c0014fda <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014fd5:	83 c8 ff             	or     eax,0xffffffff
c0014fd8:	89 c2                	mov    edx,eax
c0014fda:	5b                   	pop    ebx
c0014fdb:	c3                   	ret    

c0014fdc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014fdc:	56                   	push   esi
c0014fdd:	83 c8 ff             	or     eax,0xffffffff
c0014fe0:	53                   	push   ebx
c0014fe1:	89 c2                	mov    edx,eax
c0014fe3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014fe7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0014feb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014fef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014ff5:	77 27                	ja     c001501e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014ff7:	89 d8                	mov    eax,ebx
c0014ff9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0014fff:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015005:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001500a:	89 c2                	mov    edx,eax
c001500c:	73 10                	jae    c001501e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001500e:	89 c8                	mov    eax,ecx
c0015010:	89 da                	mov    edx,ebx
c0015012:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015018:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001501e:	5b                   	pop    ebx
c001501f:	5e                   	pop    esi
c0015020:	c3                   	ret    
c0015021:	90                   	nop

c0015022 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015022:	83 ec 1c             	sub    esp,0x1c
c0015025:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001502d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015031:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015035:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015039:	89 04 24             	mov    DWORD PTR [esp],eax
c001503c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015040:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015048:	83 ec 08             	sub    esp,0x8
c001504b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001504f:	50                   	push   eax
c0015050:	e8 3f e9 ff ff       	call   c0013994 <Device::Device(char const*)>
c0015055:	83 c4 10             	add    esp,0x10
c0015058:	ba 58 9f 03 c0       	mov    edx,0xc0039f58
c001505d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015061:	89 10                	mov    DWORD PTR [eax],edx
c0015063:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015067:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001506e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015072:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015079:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001507d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015087:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001508b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001508f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015093:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015099:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001509f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00150a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00150a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00150aa:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00150b0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00150b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00150be:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00150c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150c8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00150d2:	90                   	nop
c00150d3:	83 c4 1c             	add    esp,0x1c
c00150d6:	c3                   	ret    
c00150d7:	90                   	nop

c00150d8 <LogicalDisk::assignDriveLetter()>:
c00150d8:	55                   	push   ebp
c00150d9:	57                   	push   edi
c00150da:	56                   	push   esi
c00150db:	53                   	push   ebx
c00150dc:	83 ec 14             	sub    esp,0x14
c00150df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00150e3:	8b 3d e0 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c3e0
c00150e9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00150ef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00150f3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00150f9:	8b 3d e4 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c3e4
c00150ff:	3c 01                	cmp    al,0x1
c0015101:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015105:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015109:	19 c0                	sbb    eax,eax
c001510b:	83 e0 02             	and    eax,0x2
c001510e:	83 c0 41             	add    eax,0x41
c0015111:	0f be e8             	movsx  ebp,al
c0015114:	3c 43                	cmp    al,0x43
c0015116:	75 10                	jne    c0015128 <LogicalDisk::assignDriveLetter()+0x50>
c0015118:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001511f:	75 5d                	jne    c001517e <LogicalDisk::assignDriveLetter()+0xa6>
c0015121:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015126:	75 56                	jne    c001517e <LogicalDisk::assignDriveLetter()+0xa6>
c0015128:	8d 75 bf             	lea    esi,[ebp-0x41]
c001512b:	ba 01 00 00 00       	mov    edx,0x1
c0015130:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015134:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015138:	d3 e2                	shl    edx,cl
c001513a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001513e:	89 d7                	mov    edi,edx
c0015140:	89 d6                	mov    esi,edx
c0015142:	c1 ff 1f             	sar    edi,0x1f
c0015145:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015149:	21 f9                	and    ecx,edi
c001514b:	09 d1                	or     ecx,edx
c001514d:	75 2f                	jne    c001517e <LogicalDisk::assignDriveLetter()+0xa6>
c001514f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015153:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015157:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001515d:	09 f2                	or     edx,esi
c001515f:	89 15 e0 c3 03 c0    	mov    DWORD PTR ds:0xc003c3e0,edx
c0015165:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015169:	09 fa                	or     edx,edi
c001516b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001516f:	89 15 e4 c3 03 c0    	mov    DWORD PTR ds:0xc003c3e4,edx
c0015175:	89 1c bd 00 c4 03 c0 	mov    DWORD PTR [edi*4-0x3ffc3c00],ebx
c001517c:	eb 08                	jmp    c0015186 <LogicalDisk::assignDriveLetter()+0xae>
c001517e:	45                   	inc    ebp
c001517f:	40                   	inc    eax
c0015180:	3c 5b                	cmp    al,0x5b
c0015182:	75 90                	jne    c0015114 <LogicalDisk::assignDriveLetter()+0x3c>
c0015184:	31 c0                	xor    eax,eax
c0015186:	83 c4 14             	add    esp,0x14
c0015189:	5b                   	pop    ebx
c001518a:	5e                   	pop    esi
c001518b:	5f                   	pop    edi
c001518c:	5d                   	pop    ebp
c001518d:	c3                   	ret    

c001518e <LogicalDisk::mount()>:
c001518e:	56                   	push   esi
c001518f:	53                   	push   ebx
c0015190:	51                   	push   ecx
c0015191:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015195:	8b 1d 60 bf 03 c0    	mov    ebx,DWORD PTR ds:0xc003bf60
c001519b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00151a5:	85 db                	test   ebx,ebx
c00151a7:	74 50                	je     c00151f9 <LogicalDisk::mount()+0x6b>
c00151a9:	e8 c9 91 ff ff       	call   c000e377 <getIRQNestingLevel()>
c00151ae:	52                   	push   edx
c00151af:	52                   	push   edx
c00151b0:	50                   	push   eax
c00151b1:	68 f8 9e 03 c0       	push   0xc0039ef8
c00151b6:	e8 2f 7d ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00151bb:	83 c4 0c             	add    esp,0xc
c00151be:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00151c5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00151c7:	83 e8 41             	sub    eax,0x41
c00151ca:	50                   	push   eax
c00151cb:	56                   	push   esi
c00151cc:	53                   	push   ebx
c00151cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00151d0:	83 c4 10             	add    esp,0x10
c00151d3:	84 c0                	test   al,al
c00151d5:	74 08                	je     c00151df <LogicalDisk::mount()+0x51>
c00151d7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00151dd:	eb 1c                	jmp    c00151fb <LogicalDisk::mount()+0x6d>
c00151df:	e8 93 91 ff ff       	call   c000e377 <getIRQNestingLevel()>
c00151e4:	51                   	push   ecx
c00151e5:	51                   	push   ecx
c00151e6:	50                   	push   eax
c00151e7:	68 13 9f 03 c0       	push   0xc0039f13
c00151ec:	e8 f9 7c ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00151f1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00151f4:	83 c4 10             	add    esp,0x10
c00151f7:	eb ac                	jmp    c00151a5 <LogicalDisk::mount()+0x17>
c00151f9:	31 c0                	xor    eax,eax
c00151fb:	5a                   	pop    edx
c00151fc:	5b                   	pop    ebx
c00151fd:	5e                   	pop    esi
c00151fe:	c3                   	ret    
c00151ff:	90                   	nop

c0015200 <LogicalDisk::unmount()>:
c0015200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015204:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001520e:	c3                   	ret    
c001520f:	90                   	nop

c0015210 <LogicalDisk::unassignDriveLetter()>:
c0015210:	57                   	push   edi
c0015211:	56                   	push   esi
c0015212:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015216:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001521d:	84 c9                	test   cl,cl
c001521f:	75 0f                	jne    c0015230 <LogicalDisk::unassignDriveLetter()+0x20>
c0015221:	c7 44 24 0c 2e 9f 03 c0 	mov    DWORD PTR [esp+0xc],0xc0039f2e
c0015229:	5e                   	pop    esi
c001522a:	5f                   	pop    edi
c001522b:	e9 d8 7d ff ff       	jmp    c000d008 <panic(char const*)>
c0015230:	83 e9 41             	sub    ecx,0x41
c0015233:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001523a:	b8 01 00 00 00       	mov    eax,0x1
c001523f:	c7 04 8d 00 c4 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc3c00],0x0
c001524a:	d3 e0                	shl    eax,cl
c001524c:	89 c7                	mov    edi,eax
c001524e:	f7 d0                	not    eax
c0015250:	c1 ff 1f             	sar    edi,0x1f
c0015253:	21 05 e0 c3 03 c0    	and    DWORD PTR ds:0xc003c3e0,eax
c0015259:	89 fe                	mov    esi,edi
c001525b:	f7 d6                	not    esi
c001525d:	21 35 e4 c3 03 c0    	and    DWORD PTR ds:0xc003c3e4,esi
c0015263:	5e                   	pop    esi
c0015264:	5f                   	pop    edi
c0015265:	c3                   	ret    

c0015266 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015266:	57                   	push   edi
c0015267:	56                   	push   esi
c0015268:	53                   	push   ebx
c0015269:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001526d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015271:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015275:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015279:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001527f:	77 41                	ja     c00152c2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015281:	99                   	cdq    
c0015282:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015288:	01 c8                	add    eax,ecx
c001528a:	11 da                	adc    edx,ebx
c001528c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015292:	19 d7                	sbb    edi,edx
c0015294:	72 33                	jb     c00152c9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015296:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001529c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00152a2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00152a6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00152aa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00152b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00152b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152ba:	5b                   	pop    ebx
c00152bb:	5e                   	pop    esi
c00152bc:	5f                   	pop    edi
c00152bd:	e9 9a 09 00 00       	jmp    c0015c5c <VCache::read(unsigned long long, int, void*)>
c00152c2:	b8 05 00 00 00       	mov    eax,0x5
c00152c7:	eb 05                	jmp    c00152ce <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00152c9:	b8 07 00 00 00       	mov    eax,0x7
c00152ce:	5b                   	pop    ebx
c00152cf:	5e                   	pop    esi
c00152d0:	5f                   	pop    edi
c00152d1:	c3                   	ret    

c00152d2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00152d2:	57                   	push   edi
c00152d3:	56                   	push   esi
c00152d4:	53                   	push   ebx
c00152d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00152d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00152e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152e5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00152eb:	77 41                	ja     c001532e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00152ed:	99                   	cdq    
c00152ee:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00152f4:	01 c8                	add    eax,ecx
c00152f6:	11 da                	adc    edx,ebx
c00152f8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00152fe:	19 d7                	sbb    edi,edx
c0015300:	72 33                	jb     c0015335 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015302:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015308:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001530e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015312:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015316:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001531c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015322:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015326:	5b                   	pop    ebx
c0015327:	5e                   	pop    esi
c0015328:	5f                   	pop    edi
c0015329:	e9 4a 08 00 00       	jmp    c0015b78 <VCache::write(unsigned long long, int, void*)>
c001532e:	b8 05 00 00 00       	mov    eax,0x5
c0015333:	eb 05                	jmp    c001533a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015335:	b8 07 00 00 00       	mov    eax,0x7
c001533a:	5b                   	pop    ebx
c001533b:	5e                   	pop    esi
c001533c:	5f                   	pop    edi
c001533d:	c3                   	ret    

c001533e <Mouse::Mouse(char const*)>:
c001533e:	83 ec 0c             	sub    esp,0xc
c0015341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015345:	83 ec 08             	sub    esp,0x8
c0015348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001534c:	50                   	push   eax
c001534d:	e8 42 e6 ff ff       	call   c0013994 <Device::Device(char const*)>
c0015352:	83 c4 10             	add    esp,0x10
c0015355:	ba 84 9f 03 c0       	mov    edx,0xc0039f84
c001535a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001535e:	89 10                	mov    DWORD PTR [eax],edx
c0015360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015364:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001536e:	90                   	nop
c001536f:	83 c4 0c             	add    esp,0xc
c0015372:	c3                   	ret    
c0015373:	90                   	nop

c0015374 <Mouse::~Mouse()>:
c0015374:	83 ec 0c             	sub    esp,0xc
c0015377:	ba 84 9f 03 c0       	mov    edx,0xc0039f84
c001537c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015380:	89 10                	mov    DWORD PTR [eax],edx
c0015382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015386:	83 ec 0c             	sub    esp,0xc
c0015389:	50                   	push   eax
c001538a:	e8 b7 e2 ff ff       	call   c0013646 <Device::~Device()>
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	90                   	nop
c0015393:	83 c4 0c             	add    esp,0xc
c0015396:	c3                   	ret    
c0015397:	90                   	nop

c0015398 <Mouse::~Mouse()>:
c0015398:	83 ec 0c             	sub    esp,0xc
c001539b:	83 ec 0c             	sub    esp,0xc
c001539e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153a2:	e8 cd ff ff ff       	call   c0015374 <Mouse::~Mouse()>
c00153a7:	83 c4 10             	add    esp,0x10
c00153aa:	83 ec 08             	sub    esp,0x8
c00153ad:	68 58 01 00 00       	push   0x158
c00153b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153b6:	e8 ee d0 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	83 c4 0c             	add    esp,0xc
c00153c1:	c3                   	ret    

c00153c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00153c2:	55                   	push   ebp
c00153c3:	57                   	push   edi
c00153c4:	56                   	push   esi
c00153c5:	53                   	push   ebx
c00153c6:	81 ec 28 01 00 00    	sub    esp,0x128
c00153cc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00153d3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00153da:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00153e1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00153e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00153ec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00153f0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00153f7:	e8 8a e6 ff ff       	call   c0013a86 <Device::getName()>
c00153fc:	5a                   	pop    edx
c00153fd:	59                   	pop    ecx
c00153fe:	50                   	push   eax
c00153ff:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015403:	55                   	push   ebp
c0015404:	e8 eb b3 fe ff       	call   c00007f4 <strcpy>
c0015409:	5b                   	pop    ebx
c001540a:	58                   	pop    eax
c001540b:	68 a8 9f 03 c0       	push   0xc0039fa8
c0015410:	55                   	push   ebp
c0015411:	e8 2b b5 fe ff       	call   c0000941 <strcat>
c0015416:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001541d:	e8 78 d0 ff ff       	call   c001249a <operator new(unsigned long)>
c0015422:	83 c4 0c             	add    esp,0xc
c0015425:	89 c3                	mov    ebx,eax
c0015427:	57                   	push   edi
c0015428:	56                   	push   esi
c0015429:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001542d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015431:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015438:	55                   	push   ebp
c0015439:	50                   	push   eax
c001543a:	e8 e3 fb ff ff       	call   c0015022 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001543f:	83 c4 14             	add    esp,0x14
c0015442:	53                   	push   ebx
c0015443:	e8 90 fc ff ff       	call   c00150d8 <LogicalDisk::assignDriveLetter()>
c0015448:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001544b:	e8 3e fd ff ff       	call   c001518e <LogicalDisk::mount()>
c0015450:	58                   	pop    eax
c0015451:	5a                   	pop    edx
c0015452:	53                   	push   ebx
c0015453:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001545a:	e8 45 e3 ff ff       	call   c00137a4 <Device::addChild(Device*)>
c001545f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015465:	5b                   	pop    ebx
c0015466:	5e                   	pop    esi
c0015467:	5f                   	pop    edi
c0015468:	5d                   	pop    ebp
c0015469:	c3                   	ret    

c001546a <createPartitionsForDisk(PhysicalDisk*)>:
c001546a:	55                   	push   ebp
c001546b:	57                   	push   edi
c001546c:	56                   	push   esi
c001546d:	53                   	push   ebx
c001546e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015474:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001547b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015481:	3d 00 02 00 00       	cmp    eax,0x200
c0015486:	74 27                	je     c00154af <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015488:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001548e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015494:	83 ec 10             	sub    esp,0x10
c0015497:	0f a4 f7 0a          	shld   edi,esi,0xa
c001549b:	99                   	cdq    
c001549c:	c1 e6 0a             	shl    esi,0xa
c001549f:	52                   	push   edx
c00154a0:	89 fd                	mov    ebp,edi
c00154a2:	50                   	push   eax
c00154a3:	55                   	push   ebp
c00154a4:	56                   	push   esi
c00154a5:	e8 92 92 00 00       	call   c001e73c <__udivdi3>
c00154aa:	e9 b1 00 00 00       	jmp    c0015560 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00154af:	83 ec 0c             	sub    esp,0xc
c00154b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154b4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00154b8:	56                   	push   esi
c00154b9:	6a 01                	push   0x1
c00154bb:	6a 00                	push   0x0
c00154bd:	6a 00                	push   0x0
c00154bf:	53                   	push   ebx
c00154c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00154c3:	83 c4 20             	add    esp,0x20
c00154c6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00154ce:	75 0a                	jne    c00154da <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00154d0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00154d8:	74 2c                	je     c0015506 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00154da:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00154e0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00154e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00154ec:	83 ec 10             	sub    esp,0x10
c00154ef:	0f a4 c2 0a          	shld   edx,eax,0xa
c00154f3:	89 f7                	mov    edi,esi
c00154f5:	c1 e0 0a             	shl    eax,0xa
c00154f8:	c1 ff 1f             	sar    edi,0x1f
c00154fb:	57                   	push   edi
c00154fc:	56                   	push   esi
c00154fd:	52                   	push   edx
c00154fe:	50                   	push   eax
c00154ff:	e8 38 92 00 00       	call   c001e73c <__udivdi3>
c0015504:	eb 5a                	jmp    c0015560 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015506:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001550d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015514:	83 e1 7f             	and    ecx,0x7f
c0015517:	83 e0 7f             	and    eax,0x7f
c001551a:	01 c1                	add    ecx,eax
c001551c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015523:	83 e0 7f             	and    eax,0x7f
c0015526:	01 c1                	add    ecx,eax
c0015528:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001552f:	83 e0 7f             	and    eax,0x7f
c0015532:	00 c1                	add    cl,al
c0015534:	74 41                	je     c0015577 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015536:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001553c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015542:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015548:	83 ec 10             	sub    esp,0x10
c001554b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001554f:	89 f7                	mov    edi,esi
c0015551:	c1 e0 0a             	shl    eax,0xa
c0015554:	c1 ff 1f             	sar    edi,0x1f
c0015557:	57                   	push   edi
c0015558:	56                   	push   esi
c0015559:	52                   	push   edx
c001555a:	50                   	push   eax
c001555b:	e8 dc 91 00 00       	call   c001e73c <__udivdi3>
c0015560:	83 c4 14             	add    esp,0x14
c0015563:	52                   	push   edx
c0015564:	50                   	push   eax
c0015565:	6a 00                	push   0x0
c0015567:	6a 00                	push   0x0
c0015569:	53                   	push   ebx
c001556a:	e8 53 fe ff ff       	call   c00153c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001556f:	83 c4 20             	add    esp,0x20
c0015572:	e9 79 01 00 00       	jmp    c00156f0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015577:	89 f0                	mov    eax,esi
c0015579:	31 f6                	xor    esi,esi
c001557b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015582:	75 02                	jne    c0015586 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015584:	89 f1                	mov    ecx,esi
c0015586:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001558d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015594:	c1 e2 08             	shl    edx,0x8
c0015597:	c1 e7 10             	shl    edi,0x10
c001559a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00155a2:	09 fa                	or     edx,edi
c00155a4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00155ac:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00155b3:	83 c0 10             	add    eax,0x10
c00155b6:	09 fa                	or     edx,edi
c00155b8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00155bf:	c1 e7 18             	shl    edi,0x18
c00155c2:	09 fa                	or     edx,edi
c00155c4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00155cb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00155cf:	c1 e7 10             	shl    edi,0x10
c00155d2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00155d9:	c1 e2 08             	shl    edx,0x8
c00155dc:	09 fa                	or     edx,edi
c00155de:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00155e5:	09 fa                	or     edx,edi
c00155e7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00155ee:	c1 e7 18             	shl    edi,0x18
c00155f1:	09 fa                	or     edx,edi
c00155f3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00155f7:	46                   	inc    esi
c00155f8:	83 fe 04             	cmp    esi,0x4
c00155fb:	0f 85 7a ff ff ff    	jne    c001557b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015605:	83 f0 01             	xor    eax,0x1
c0015608:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001560c:	75 57                	jne    c0015665 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001560e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015612:	83 f0 01             	xor    eax,0x1
c0015615:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015619:	75 4a                	jne    c0015665 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001561b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001561f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015627:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001562f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015635:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001563b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015641:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015645:	89 f7                	mov    edi,esi
c0015647:	c1 e0 0a             	shl    eax,0xa
c001564a:	c1 ff 1f             	sar    edi,0x1f
c001564d:	57                   	push   edi
c001564e:	56                   	push   esi
c001564f:	52                   	push   edx
c0015650:	50                   	push   eax
c0015651:	e8 e6 90 00 00       	call   c001e73c <__udivdi3>
c0015656:	83 c4 10             	add    esp,0x10
c0015659:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001565d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015661:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015665:	84 c9                	test   cl,cl
c0015667:	74 53                	je     c00156bc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015669:	0f b6 c9             	movzx  ecx,cl
c001566c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015670:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015674:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015678:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001567c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015680:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015684:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015688:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001568c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015690:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015694:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015698:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001569c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00156a0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00156a4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00156a8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00156ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00156b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00156b4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00156b8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00156bc:	31 ed                	xor    ebp,ebp
c00156be:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00156c2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00156c6:	89 f8                	mov    eax,edi
c00156c8:	09 f0                	or     eax,esi
c00156ca:	74 1e                	je     c00156ea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00156cc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00156d0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00156d4:	89 d1                	mov    ecx,edx
c00156d6:	09 c1                	or     ecx,eax
c00156d8:	74 10                	je     c00156ea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00156da:	83 ec 0c             	sub    esp,0xc
c00156dd:	57                   	push   edi
c00156de:	56                   	push   esi
c00156df:	52                   	push   edx
c00156e0:	50                   	push   eax
c00156e1:	53                   	push   ebx
c00156e2:	e8 db fc ff ff       	call   c00153c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00156e7:	83 c4 20             	add    esp,0x20
c00156ea:	45                   	inc    ebp
c00156eb:	83 fd 04             	cmp    ebp,0x4
c00156ee:	75 ce                	jne    c00156be <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00156f0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00156f6:	5b                   	pop    ebx
c00156f7:	5e                   	pop    esi
c00156f8:	5f                   	pop    edi
c00156f9:	5d                   	pop    ebp
c00156fa:	c3                   	ret    
c00156fb:	90                   	nop

c00156fc <Timer::Timer(char const*)>:
c00156fc:	83 ec 0c             	sub    esp,0xc
c00156ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015703:	83 ec 08             	sub    esp,0x8
c0015706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001570a:	50                   	push   eax
c001570b:	e8 84 e2 ff ff       	call   c0013994 <Device::Device(char const*)>
c0015710:	83 c4 10             	add    esp,0x10
c0015713:	ba bc 9f 03 c0       	mov    edx,0xc0039fbc
c0015718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571c:	89 10                	mov    DWORD PTR [eax],edx
c001571e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015722:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001572c:	90                   	nop
c001572d:	83 c4 0c             	add    esp,0xc
c0015730:	c3                   	ret    
c0015731:	90                   	nop

c0015732 <Timer::~Timer()>:
c0015732:	83 ec 0c             	sub    esp,0xc
c0015735:	ba bc 9f 03 c0       	mov    edx,0xc0039fbc
c001573a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001573e:	89 10                	mov    DWORD PTR [eax],edx
c0015740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015744:	83 ec 0c             	sub    esp,0xc
c0015747:	50                   	push   eax
c0015748:	e8 f9 de ff ff       	call   c0013646 <Device::~Device()>
c001574d:	83 c4 10             	add    esp,0x10
c0015750:	90                   	nop
c0015751:	83 c4 0c             	add    esp,0xc
c0015754:	c3                   	ret    
c0015755:	90                   	nop

c0015756 <Timer::~Timer()>:
c0015756:	83 ec 0c             	sub    esp,0xc
c0015759:	83 ec 0c             	sub    esp,0xc
c001575c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015760:	e8 cd ff ff ff       	call   c0015732 <Timer::~Timer()>
c0015765:	83 c4 10             	add    esp,0x10
c0015768:	83 ec 08             	sub    esp,0x8
c001576b:	68 5c 01 00 00       	push   0x15c
c0015770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015774:	e8 30 cd ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0015779:	83 c4 10             	add    esp,0x10
c001577c:	83 c4 0c             	add    esp,0xc
c001577f:	c3                   	ret    

c0015780 <Timer::read()>:
c0015780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015784:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001578a:	c3                   	ret    

c001578b <timerHandler(unsigned long long)>:
c001578b:	55                   	push   ebp
c001578c:	57                   	push   edi
c001578d:	56                   	push   esi
c001578e:	53                   	push   ebx
c001578f:	83 ec 0c             	sub    esp,0xc
c0015792:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015796:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001579a:	01 35 70 c4 03 c0    	add    DWORD PTR ds:0xc003c470,esi
c00157a0:	11 3d 74 c4 03 c0    	adc    DWORD PTR ds:0xc003c474,edi
c00157a6:	80 3d ad ba 03 c0 00 	cmp    BYTE PTR ds:0xc003baad,0x0
c00157ad:	0f 84 07 01 00 00    	je     c00158ba <timerHandler(unsigned long long)+0x12f>
c00157b3:	e8 fb 8b ff ff       	call   c000e3b3 <lockStuff()>
c00157b8:	83 ec 0c             	sub    esp,0xc
c00157bb:	68 e4 bc 03 c0       	push   0xc003bce4
c00157c0:	e8 d7 94 00 00       	call   c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157c5:	c7 04 24 e4 bc 03 c0 	mov    DWORD PTR [esp],0xc003bce4
c00157cc:	89 c3                	mov    ebx,eax
c00157ce:	e8 ff 93 00 00       	call   c001ebd2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00157d3:	83 c4 10             	add    esp,0x10
c00157d6:	84 c0                	test   al,al
c00157d8:	74 60                	je     c001583a <timerHandler(unsigned long long)+0xaf>
c00157da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00157e0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00157e3:	85 c0                	test   eax,eax
c00157e5:	0f 85 91 00 00 00    	jne    c001587c <timerHandler(unsigned long long)+0xf1>
c00157eb:	e9 be 00 00 00       	jmp    c00158ae <timerHandler(unsigned long long)+0x123>
c00157f0:	83 ec 0c             	sub    esp,0xc
c00157f3:	55                   	push   ebp
c00157f4:	e8 b7 93 ff ff       	call   c000ebb0 <unblockTask(ThreadControlBlock*)>
c00157f9:	83 c4 10             	add    esp,0x10
c00157fc:	39 eb                	cmp    ebx,ebp
c00157fe:	75 12                	jne    c0015812 <timerHandler(unsigned long long)+0x87>
c0015800:	83 ec 0c             	sub    esp,0xc
c0015803:	68 e4 bc 03 c0       	push   0xc003bce4
c0015808:	e8 8f 94 00 00       	call   c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001580d:	89 c3                	mov    ebx,eax
c001580f:	83 c4 10             	add    esp,0x10
c0015812:	83 ec 0c             	sub    esp,0xc
c0015815:	68 e4 bc 03 c0       	push   0xc003bce4
c001581a:	e8 b3 93 00 00       	call   c001ebd2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001581f:	83 c4 10             	add    esp,0x10
c0015822:	84 c0                	test   al,al
c0015824:	75 b4                	jne    c00157da <timerHandler(unsigned long long)+0x4f>
c0015826:	83 ec 0c             	sub    esp,0xc
c0015829:	68 e4 bc 03 c0       	push   0xc003bce4
c001582e:	e8 69 94 00 00       	call   c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015833:	83 c4 10             	add    esp,0x10
c0015836:	39 d8                	cmp    eax,ebx
c0015838:	74 a0                	je     c00157da <timerHandler(unsigned long long)+0x4f>
c001583a:	83 ec 0c             	sub    esp,0xc
c001583d:	68 e4 bc 03 c0       	push   0xc003bce4
c0015842:	e8 55 94 00 00       	call   c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015847:	c7 04 24 e4 bc 03 c0 	mov    DWORD PTR [esp],0xc003bce4
c001584e:	89 c5                	mov    ebp,eax
c0015850:	e8 99 93 00 00       	call   c001ebee <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015855:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015858:	83 c4 10             	add    esp,0x10
c001585b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001585e:	39 15 70 c4 03 c0    	cmp    DWORD PTR ds:0xc003c470,edx
c0015864:	a1 74 c4 03 c0       	mov    eax,ds:0xc003c474
c0015869:	19 c8                	sbb    eax,ecx
c001586b:	73 83                	jae    c00157f0 <timerHandler(unsigned long long)+0x65>
c001586d:	50                   	push   eax
c001586e:	50                   	push   eax
c001586f:	55                   	push   ebp
c0015870:	68 e4 bc 03 c0       	push   0xc003bce4
c0015875:	e8 84 92 00 00       	call   c001eafe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001587a:	eb 93                	jmp    c001580f <timerHandler(unsigned long long)+0x84>
c001587c:	80 3d ac ba 03 c0 00 	cmp    BYTE PTR ds:0xc003baac,0x0
c0015883:	74 29                	je     c00158ae <timerHandler(unsigned long long)+0x123>
c0015885:	39 c6                	cmp    esi,eax
c0015887:	bb 00 00 00 00       	mov    ebx,0x0
c001588c:	19 df                	sbb    edi,ebx
c001588e:	72 19                	jb     c00158a9 <timerHandler(unsigned long long)+0x11e>
c0015890:	e8 f7 8a ff ff       	call   c000e38c <lockScheduler()>
c0015895:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001589a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001589d:	e8 1e 8e ff ff       	call   c000e6c0 <schedule()>
c00158a2:	e8 e7 8a ff ff       	call   c000e38e <unlockScheduler()>
c00158a7:	eb 05                	jmp    c00158ae <timerHandler(unsigned long long)+0x123>
c00158a9:	29 f0                	sub    eax,esi
c00158ab:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00158ae:	83 c4 0c             	add    esp,0xc
c00158b1:	5b                   	pop    ebx
c00158b2:	5e                   	pop    esi
c00158b3:	5f                   	pop    edi
c00158b4:	5d                   	pop    ebp
c00158b5:	e9 8b 8e ff ff       	jmp    c000e745 <unlockStuff()>
c00158ba:	83 c4 0c             	add    esp,0xc
c00158bd:	5b                   	pop    ebx
c00158be:	5e                   	pop    esi
c00158bf:	5f                   	pop    edi
c00158c0:	5d                   	pop    ebp
c00158c1:	c3                   	ret    

c00158c2 <setupTimer(int)>:
c00158c2:	57                   	push   edi
c00158c3:	56                   	push   esi
c00158c4:	53                   	push   ebx
c00158c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158c9:	e8 ff 18 00 00       	call   c00171cd <getCPUNumber()>
c00158ce:	85 c0                	test   eax,eax
c00158d0:	74 32                	je     c0015904 <setupTimer(int)+0x42>
c00158d2:	83 ec 0c             	sub    esp,0xc
c00158d5:	68 60 01 00 00       	push   0x160
c00158da:	e8 bb cb ff ff       	call   c001249a <operator new(unsigned long)>
c00158df:	89 04 24             	mov    DWORD PTR [esp],eax
c00158e2:	89 c3                	mov    ebx,eax
c00158e4:	e8 ef 88 00 00       	call   c001e1d8 <APICTimer::APICTimer()>
c00158e9:	6a 00                	push   0x0
c00158eb:	6a 00                	push   0x0
c00158ed:	56                   	push   esi
c00158ee:	53                   	push   ebx
c00158ef:	e8 ec 87 00 00       	call   c001e0e0 <APICTimer::open(int, int, void*)>
c00158f4:	83 c4 20             	add    esp,0x20
c00158f7:	e8 d4 18 00 00       	call   c00171d0 <thisCPU()>
c00158fc:	56                   	push   esi
c00158fd:	56                   	push   esi
c00158fe:	53                   	push   ebx
c00158ff:	e9 96 00 00 00       	jmp    c001599a <setupTimer(int)+0xd8>
c0015904:	e8 c7 18 00 00       	call   c00171d0 <thisCPU()>
c0015909:	83 ec 0c             	sub    esp,0xc
c001590c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015912:	e8 6f e1 ff ff       	call   c0013a86 <Device::getName()>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001591d:	0f 85 87 00 00 00    	jne    c00159aa <setupTimer(int)+0xe8>
c0015923:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0015928:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001592f:	74 79                	je     c00159aa <setupTimer(int)+0xe8>
c0015931:	83 ec 0c             	sub    esp,0xc
c0015934:	68 5c 01 00 00       	push   0x15c
c0015939:	e8 5c cb ff ff       	call   c001249a <operator new(unsigned long)>
c001593e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015941:	89 c3                	mov    ebx,eax
c0015943:	e8 e0 89 00 00       	call   c001e328 <PIT::PIT()>
c0015948:	59                   	pop    ecx
c0015949:	5f                   	pop    edi
c001594a:	53                   	push   ebx
c001594b:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c0015951:	e8 4e de ff ff       	call   c00137a4 <Device::addChild(Device*)>
c0015956:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015958:	6a 00                	push   0x0
c001595a:	6a 00                	push   0x0
c001595c:	56                   	push   esi
c001595d:	53                   	push   ebx
c001595e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015961:	83 c4 14             	add    esp,0x14
c0015964:	68 60 01 00 00       	push   0x160
c0015969:	e8 2c cb ff ff       	call   c001249a <operator new(unsigned long)>
c001596e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015971:	89 c7                	mov    edi,eax
c0015973:	e8 60 88 00 00       	call   c001e1d8 <APICTimer::APICTimer()>
c0015978:	6a 00                	push   0x0
c001597a:	6a 00                	push   0x0
c001597c:	56                   	push   esi
c001597d:	57                   	push   edi
c001597e:	e8 5d 87 00 00       	call   c001e0e0 <APICTimer::open(int, int, void*)>
c0015983:	83 c4 20             	add    esp,0x20
c0015986:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015988:	6a 00                	push   0x0
c001598a:	6a 00                	push   0x0
c001598c:	6a 00                	push   0x0
c001598e:	53                   	push   ebx
c001598f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015992:	e8 39 18 00 00       	call   c00171d0 <thisCPU()>
c0015997:	5a                   	pop    edx
c0015998:	59                   	pop    ecx
c0015999:	57                   	push   edi
c001599a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00159a0:	e8 ff dd ff ff       	call   c00137a4 <Device::addChild(Device*)>
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	eb 33                	jmp    c00159dd <setupTimer(int)+0x11b>
c00159aa:	83 ec 0c             	sub    esp,0xc
c00159ad:	68 5c 01 00 00       	push   0x15c
c00159b2:	e8 e3 ca ff ff       	call   c001249a <operator new(unsigned long)>
c00159b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00159ba:	89 c3                	mov    ebx,eax
c00159bc:	e8 67 89 00 00       	call   c001e328 <PIT::PIT()>
c00159c1:	58                   	pop    eax
c00159c2:	5a                   	pop    edx
c00159c3:	53                   	push   ebx
c00159c4:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c00159ca:	e8 d5 dd ff ff       	call   c00137a4 <Device::addChild(Device*)>
c00159cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159d1:	6a 00                	push   0x0
c00159d3:	6a 00                	push   0x0
c00159d5:	56                   	push   esi
c00159d6:	53                   	push   ebx
c00159d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159da:	83 c4 20             	add    esp,0x20
c00159dd:	89 d8                	mov    eax,ebx
c00159df:	5b                   	pop    ebx
c00159e0:	5e                   	pop    esi
c00159e1:	5f                   	pop    edi
c00159e2:	c3                   	ret    
c00159e3:	90                   	nop

c00159e4 <VCache::VCache(PhysicalDisk*)>:
c00159e4:	53                   	push   ebx
c00159e5:	83 ec 08             	sub    esp,0x8
c00159e8:	ba ec 9f 03 c0       	mov    edx,0xc0039fec
c00159ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159f1:	89 10                	mov    DWORD PTR [eax],edx
c00159f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159f7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00159fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a02:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0015a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a0d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0015a14:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a1f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0015a26:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a31:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0015a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a3c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015a40:	83 ec 0c             	sub    esp,0xc
c0015a43:	6a 10                	push   0x10
c0015a45:	e8 50 ca ff ff       	call   c001249a <operator new(unsigned long)>
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	89 c3                	mov    ebx,eax
c0015a4f:	83 ec 0c             	sub    esp,0xc
c0015a52:	53                   	push   ebx
c0015a53:	e8 4c 8a ff ff       	call   c000e4a4 <Mutex::Mutex()>
c0015a58:	83 c4 10             	add    esp,0x10
c0015a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a5f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a6a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0015a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a71:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0015a78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a7c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a86:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0015a89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a8d:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015a93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015a99:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015a9d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0015aa0:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0015aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aa7:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015aab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015aaf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015ab5:	c1 e0 06             	shl    eax,0x6
c0015ab8:	83 ec 0c             	sub    esp,0xc
c0015abb:	50                   	push   eax
c0015abc:	e8 24 7a ff ff       	call   c000d4e5 <malloc>
c0015ac1:	83 c4 10             	add    esp,0x10
c0015ac4:	89 c2                	mov    edx,eax
c0015ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015acd:	90                   	nop
c0015ace:	83 c4 08             	add    esp,0x8
c0015ad1:	5b                   	pop    ebx
c0015ad2:	c3                   	ret    
c0015ad3:	90                   	nop

c0015ad4 <VCache::writeWriteBuffer()>:
c0015ad4:	53                   	push   ebx
c0015ad5:	83 ec 14             	sub    esp,0x14
c0015ad8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015adc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015adf:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ae1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015ae4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ae7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015aea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0015aed:	50                   	push   eax
c0015aee:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015af1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0015af8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0015aff:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0015b03:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0015b0a:	83 c4 28             	add    esp,0x28
c0015b0d:	5b                   	pop    ebx
c0015b0e:	c3                   	ret    
c0015b0f:	90                   	nop

c0015b10 <VCache::~VCache()>:
c0015b10:	83 ec 0c             	sub    esp,0xc
c0015b13:	ba ec 9f 03 c0       	mov    edx,0xc0039fec
c0015b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b1c:	89 10                	mov    DWORD PTR [eax],edx
c0015b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b22:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0015b25:	84 c0                	test   al,al
c0015b27:	74 0f                	je     c0015b38 <VCache::~VCache()+0x28>
c0015b29:	83 ec 0c             	sub    esp,0xc
c0015b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b30:	e8 9f ff ff ff       	call   c0015ad4 <VCache::writeWriteBuffer()>
c0015b35:	83 c4 10             	add    esp,0x10
c0015b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b3c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015b3f:	83 ec 0c             	sub    esp,0xc
c0015b42:	50                   	push   eax
c0015b43:	e8 ad 79 ff ff       	call   c000d4f5 <free>
c0015b48:	83 c4 10             	add    esp,0x10
c0015b4b:	90                   	nop
c0015b4c:	83 c4 0c             	add    esp,0xc
c0015b4f:	c3                   	ret    

c0015b50 <VCache::~VCache()>:
c0015b50:	83 ec 0c             	sub    esp,0xc
c0015b53:	83 ec 0c             	sub    esp,0xc
c0015b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b5a:	e8 b1 ff ff ff       	call   c0015b10 <VCache::~VCache()>
c0015b5f:	83 c4 10             	add    esp,0x10
c0015b62:	83 ec 08             	sub    esp,0x8
c0015b65:	6a 30                	push   0x30
c0015b67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b6b:	e8 39 c9 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0015b70:	83 c4 10             	add    esp,0x10
c0015b73:	83 c4 0c             	add    esp,0xc
c0015b76:	c3                   	ret    
c0015b77:	90                   	nop

c0015b78 <VCache::write(unsigned long long, int, void*)>:
c0015b78:	55                   	push   ebp
c0015b79:	57                   	push   edi
c0015b7a:	56                   	push   esi
c0015b7b:	53                   	push   ebx
c0015b7c:	83 ec 28             	sub    esp,0x28
c0015b7f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015b83:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015b87:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015b8b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0015b8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015b92:	e8 e1 8e ff ff       	call   c000ea78 <Semaphore::acquire()>
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015b9e:	74 66                	je     c0015c06 <VCache::write(unsigned long long, int, void*)+0x8e>
c0015ba0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015ba3:	99                   	cdq    
c0015ba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ba8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0015bab:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0015bae:	89 c1                	mov    ecx,eax
c0015bb0:	89 d0                	mov    eax,edx
c0015bb2:	31 f1                	xor    ecx,esi
c0015bb4:	31 f8                	xor    eax,edi
c0015bb6:	89 ca                	mov    edx,ecx
c0015bb8:	09 c2                	or     edx,eax
c0015bba:	75 3e                	jne    c0015bfa <VCache::write(unsigned long long, int, void*)+0x82>
c0015bbc:	83 fd 01             	cmp    ebp,0x1
c0015bbf:	75 39                	jne    c0015bfa <VCache::write(unsigned long long, int, void*)+0x82>
c0015bc1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015bc4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015bca:	51                   	push   ecx
c0015bcb:	50                   	push   eax
c0015bcc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015bd0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015bd4:	0f af c8             	imul   ecx,eax
c0015bd7:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0015bda:	51                   	push   ecx
c0015bdb:	e8 81 aa fe ff       	call   c0000661 <memcpy>
c0015be0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	40                   	inc    eax
c0015be7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0015bea:	83 f8 40             	cmp    eax,0x40
c0015bed:	75 57                	jne    c0015c46 <VCache::write(unsigned long long, int, void*)+0xce>
c0015bef:	83 ec 0c             	sub    esp,0xc
c0015bf2:	53                   	push   ebx
c0015bf3:	e8 dc fe ff ff       	call   c0015ad4 <VCache::writeWriteBuffer()>
c0015bf8:	eb 34                	jmp    c0015c2e <VCache::write(unsigned long long, int, void*)+0xb6>
c0015bfa:	83 ec 0c             	sub    esp,0xc
c0015bfd:	53                   	push   ebx
c0015bfe:	e8 d1 fe ff ff       	call   c0015ad4 <VCache::writeWriteBuffer()>
c0015c03:	83 c4 10             	add    esp,0x10
c0015c06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015c09:	83 fd 3f             	cmp    ebp,0x3f
c0015c0c:	7f 25                	jg     c0015c33 <VCache::write(unsigned long long, int, void*)+0xbb>
c0015c0e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0015c11:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0015c14:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0015c17:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0015c1b:	52                   	push   edx
c0015c1c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015c22:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015c26:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015c29:	e8 33 aa fe ff       	call   c0000661 <memcpy>
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	eb 13                	jmp    c0015c46 <VCache::write(unsigned long long, int, void*)+0xce>
c0015c33:	83 ec 0c             	sub    esp,0xc
c0015c36:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015c3c:	55                   	push   ebp
c0015c3d:	57                   	push   edi
c0015c3e:	56                   	push   esi
c0015c3f:	50                   	push   eax
c0015c40:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015c43:	83 c4 20             	add    esp,0x20
c0015c46:	83 ec 0c             	sub    esp,0xc
c0015c49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c4c:	e8 c3 93 ff ff       	call   c000f014 <Semaphore::release()>
c0015c51:	83 c4 2c             	add    esp,0x2c
c0015c54:	31 c0                	xor    eax,eax
c0015c56:	5b                   	pop    ebx
c0015c57:	5e                   	pop    esi
c0015c58:	5f                   	pop    edi
c0015c59:	5d                   	pop    ebp
c0015c5a:	c3                   	ret    
c0015c5b:	90                   	nop

c0015c5c <VCache::read(unsigned long long, int, void*)>:
c0015c5c:	57                   	push   edi
c0015c5d:	56                   	push   esi
c0015c5e:	53                   	push   ebx
c0015c5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c63:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015c67:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015c6b:	83 ec 0c             	sub    esp,0xc
c0015c6e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c71:	e8 02 8e ff ff       	call   c000ea78 <Semaphore::acquire()>
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015c7d:	74 0c                	je     c0015c8b <VCache::read(unsigned long long, int, void*)+0x2f>
c0015c7f:	83 ec 0c             	sub    esp,0xc
c0015c82:	53                   	push   ebx
c0015c83:	e8 4c fe ff ff       	call   c0015ad4 <VCache::writeWriteBuffer()>
c0015c88:	83 c4 10             	add    esp,0x10
c0015c8b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015c8e:	83 ec 0c             	sub    esp,0xc
c0015c91:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c9b:	57                   	push   edi
c0015c9c:	56                   	push   esi
c0015c9d:	50                   	push   eax
c0015c9e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015ca1:	83 c4 14             	add    esp,0x14
c0015ca4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015ca7:	e8 68 93 ff ff       	call   c000f014 <Semaphore::release()>
c0015cac:	83 c4 10             	add    esp,0x10
c0015caf:	31 c0                	xor    eax,eax
c0015cb1:	5b                   	pop    ebx
c0015cb2:	5e                   	pop    esi
c0015cb3:	5f                   	pop    edi
c0015cb4:	c3                   	ret    
c0015cb5:	90                   	nop

c0015cb6 <Video::putrect(int, int, int, int, unsigned int)>:
c0015cb6:	55                   	push   ebp
c0015cb7:	57                   	push   edi
c0015cb8:	56                   	push   esi
c0015cb9:	53                   	push   ebx
c0015cba:	83 ec 1c             	sub    esp,0x1c
c0015cbd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015cc1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0015cc5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015cc9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0015ccd:	01 e8                	add    eax,ebp
c0015ccf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015cd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cd7:	01 df                	add    edi,ebx
c0015cd9:	39 fb                	cmp    ebx,edi
c0015cdb:	7d 1b                	jge    c0015cf8 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0015cdd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0015ce1:	7d 12                	jge    c0015cf5 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0015ce3:	8b 16                	mov    edx,DWORD PTR [esi]
c0015ce5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015ce9:	53                   	push   ebx
c0015cea:	55                   	push   ebp
c0015ceb:	45                   	inc    ebp
c0015cec:	56                   	push   esi
c0015ced:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015cf0:	83 c4 10             	add    esp,0x10
c0015cf3:	eb e8                	jmp    c0015cdd <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0015cf5:	43                   	inc    ebx
c0015cf6:	eb e1                	jmp    c0015cd9 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0015cf8:	83 c4 1c             	add    esp,0x1c
c0015cfb:	5b                   	pop    ebx
c0015cfc:	5e                   	pop    esi
c0015cfd:	5f                   	pop    edi
c0015cfe:	5d                   	pop    ebp
c0015cff:	c3                   	ret    

c0015d00 <Video::blit(unsigned int*, int, int, int, int)>:
c0015d00:	55                   	push   ebp
c0015d01:	57                   	push   edi
c0015d02:	56                   	push   esi
c0015d03:	53                   	push   ebx
c0015d04:	83 ec 1c             	sub    esp,0x1c
c0015d07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015d0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015d0f:	85 c0                	test   eax,eax
c0015d11:	79 02                	jns    c0015d15 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0015d13:	31 c0                	xor    eax,eax
c0015d15:	c1 e0 02             	shl    eax,0x2
c0015d18:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015d1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d24:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0015d28:	39 d8                	cmp    eax,ebx
c0015d2a:	7e 49                	jle    c0015d75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015d2c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015d32:	7c 41                	jl     c0015d75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015d34:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0015d38:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015d3c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015d40:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0015d44:	39 f9                	cmp    ecx,edi
c0015d46:	7e 22                	jle    c0015d6a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0015d48:	83 c5 04             	add    ebp,0x4
c0015d4b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015d51:	7c 14                	jl     c0015d67 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015d53:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015d55:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015d58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d60:	56                   	push   esi
c0015d61:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015d64:	83 c4 10             	add    esp,0x10
c0015d67:	47                   	inc    edi
c0015d68:	eb d2                	jmp    c0015d3c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d6e:	43                   	inc    ebx
c0015d6f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015d73:	eb ab                	jmp    c0015d20 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015d75:	83 c4 1c             	add    esp,0x1c
c0015d78:	5b                   	pop    ebx
c0015d79:	5e                   	pop    esi
c0015d7a:	5f                   	pop    edi
c0015d7b:	5d                   	pop    ebp
c0015d7c:	c3                   	ret    
c0015d7d:	90                   	nop

c0015d7e <Video::clearScreen(unsigned int)>:
c0015d7e:	57                   	push   edi
c0015d7f:	56                   	push   esi
c0015d80:	53                   	push   ebx
c0015d81:	31 db                	xor    ebx,ebx
c0015d83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d87:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015d8d:	7e 1f                	jle    c0015dae <Video::clearScreen(unsigned int)+0x30>
c0015d8f:	31 ff                	xor    edi,edi
c0015d91:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015d97:	7e 12                	jle    c0015dab <Video::clearScreen(unsigned int)+0x2d>
c0015d99:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d9f:	53                   	push   ebx
c0015da0:	57                   	push   edi
c0015da1:	47                   	inc    edi
c0015da2:	56                   	push   esi
c0015da3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015da6:	83 c4 10             	add    esp,0x10
c0015da9:	eb e6                	jmp    c0015d91 <Video::clearScreen(unsigned int)+0x13>
c0015dab:	43                   	inc    ebx
c0015dac:	eb d9                	jmp    c0015d87 <Video::clearScreen(unsigned int)+0x9>
c0015dae:	5b                   	pop    ebx
c0015daf:	5e                   	pop    esi
c0015db0:	5f                   	pop    edi
c0015db1:	c3                   	ret    

c0015db2 <Video::putpixel(int, int, unsigned int)>:
c0015db2:	c7 44 24 04 f4 9f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039ff4
c0015dba:	e9 2b 71 ff ff       	jmp    c000ceea <kprintf(char const*, ...)>
c0015dbf:	90                   	nop

c0015dc0 <Video::Video(char const*)>:
c0015dc0:	83 ec 0c             	sub    esp,0xc
c0015dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dc7:	83 ec 08             	sub    esp,0x8
c0015dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dce:	50                   	push   eax
c0015dcf:	e8 c0 db ff ff       	call   c0013994 <Device::Device(char const*)>
c0015dd4:	83 c4 10             	add    esp,0x10
c0015dd7:	ba 0c a0 03 c0       	mov    edx,0xc003a00c
c0015ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015de0:	89 10                	mov    DWORD PTR [eax],edx
c0015de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015de6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0015df0:	90                   	nop
c0015df1:	83 c4 0c             	add    esp,0xc
c0015df4:	c3                   	ret    
c0015df5:	90                   	nop

c0015df6 <Video::~Video()>:
c0015df6:	83 ec 0c             	sub    esp,0xc
c0015df9:	ba 0c a0 03 c0       	mov    edx,0xc003a00c
c0015dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e02:	89 10                	mov    DWORD PTR [eax],edx
c0015e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e08:	83 ec 0c             	sub    esp,0xc
c0015e0b:	50                   	push   eax
c0015e0c:	e8 35 d8 ff ff       	call   c0013646 <Device::~Device()>
c0015e11:	83 c4 10             	add    esp,0x10
c0015e14:	90                   	nop
c0015e15:	83 c4 0c             	add    esp,0xc
c0015e18:	c3                   	ret    
c0015e19:	90                   	nop

c0015e1a <Video::~Video()>:
c0015e1a:	83 ec 0c             	sub    esp,0xc
c0015e1d:	83 ec 0c             	sub    esp,0xc
c0015e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e24:	e8 cd ff ff ff       	call   c0015df6 <Video::~Video()>
c0015e29:	83 c4 10             	add    esp,0x10
c0015e2c:	83 ec 08             	sub    esp,0x8
c0015e2f:	68 64 01 00 00       	push   0x164
c0015e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e38:	e8 6c c6 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	83 c4 0c             	add    esp,0xc
c0015e43:	c3                   	ret    

c0015e44 <Video::isMonochrome()>:
c0015e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e48:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015e4e:	c3                   	ret    
c0015e4f:	90                   	nop

c0015e50 <Video::getWidth()>:
c0015e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e54:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e5a:	c3                   	ret    
c0015e5b:	90                   	nop

c0015e5c <Video::getHeight()>:
c0015e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e60:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015e66:	c3                   	ret    
c0015e67:	90                   	nop

c0015e68 <Video::drawCursor(int, int, unsigned char*, int)>:
c0015e68:	55                   	push   ebp
c0015e69:	57                   	push   edi
c0015e6a:	56                   	push   esi
c0015e6b:	53                   	push   ebx
c0015e6c:	83 ec 2c             	sub    esp,0x2c
c0015e6f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015e73:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015e77:	83 f8 01             	cmp    eax,0x1
c0015e7a:	19 c9                	sbb    ecx,ecx
c0015e7c:	31 db                	xor    ebx,ebx
c0015e7e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015e82:	89 cd                	mov    ebp,ecx
c0015e84:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015e8c:	f7 d5                	not    ebp
c0015e8e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015e94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015e98:	01 d8                	add    eax,ebx
c0015e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e9e:	56                   	push   esi
c0015e9f:	e8 b8 ff ff ff       	call   c0015e5c <Video::getHeight()>
c0015ea4:	59                   	pop    ecx
c0015ea5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015ea9:	7e 70                	jle    c0015f1b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015eab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015eaf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015eb3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015eb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015eba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ebe:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015ec5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ec9:	89 f8                	mov    eax,edi
c0015ecb:	83 c0 20             	add    eax,0x20
c0015ece:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ed2:	56                   	push   esi
c0015ed3:	e8 78 ff ff ff       	call   c0015e50 <Video::getWidth()>
c0015ed8:	5a                   	pop    edx
c0015ed9:	39 c7                	cmp    edi,eax
c0015edb:	7d 34                	jge    c0015f11 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015edd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015ee2:	74 05                	je     c0015ee9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015ee4:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ee6:	55                   	push   ebp
c0015ee7:	eb 0d                	jmp    c0015ef6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015ee9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015eee:	74 12                	je     c0015f02 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015ef0:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ef2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ef6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015efa:	57                   	push   edi
c0015efb:	56                   	push   esi
c0015efc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015eff:	83 c4 10             	add    esp,0x10
c0015f02:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015f06:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015f0a:	47                   	inc    edi
c0015f0b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015f0f:	75 c1                	jne    c0015ed2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015f11:	43                   	inc    ebx
c0015f12:	83 fb 20             	cmp    ebx,0x20
c0015f15:	0f 85 79 ff ff ff    	jne    c0015e94 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015f1b:	83 c4 2c             	add    esp,0x2c
c0015f1e:	5b                   	pop    ebx
c0015f1f:	5e                   	pop    esi
c0015f20:	5f                   	pop    edi
c0015f21:	5d                   	pop    ebp
c0015f22:	c3                   	ret    
c0015f23:	90                   	nop

c0015f24 <ACPI::close(int, int, void*)>:
c0015f24:	83 ec 1c             	sub    esp,0x1c
c0015f27:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015f2f:	74 0a                	je     c0015f3b <ACPI::close(int, int, void*)+0x17>
c0015f31:	b8 00 00 00 00       	mov    eax,0x0
c0015f36:	e9 9a 00 00 00       	jmp    c0015fd5 <ACPI::close(int, int, void*)+0xb1>
c0015f3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015f40:	75 37                	jne    c0015f79 <ACPI::close(int, int, void*)+0x55>
c0015f42:	83 ec 0c             	sub    esp,0xc
c0015f45:	68 44 a0 03 c0       	push   0xc003a044
c0015f4a:	e8 9b 6f ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0015f4f:	83 c4 10             	add    esp,0x10
c0015f52:	a1 88 c4 03 c0       	mov    eax,ds:0xc003c488
c0015f57:	85 c0                	test   eax,eax
c0015f59:	74 07                	je     c0015f62 <ACPI::close(int, int, void*)+0x3e>
c0015f5b:	a1 88 c4 03 c0       	mov    eax,ds:0xc003c488
c0015f60:	ff d0                	call   eax
c0015f62:	83 ec 0c             	sub    esp,0xc
c0015f65:	68 f8 a0 03 c0       	push   0xc003a0f8
c0015f6a:	e8 99 70 ff ff       	call   c000d008 <panic(char const*)>
c0015f6f:	83 c4 10             	add    esp,0x10
c0015f72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f77:	eb 5c                	jmp    c0015fd5 <ACPI::close(int, int, void*)+0xb1>
c0015f79:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015f7e:	75 50                	jne    c0015fd0 <ACPI::close(int, int, void*)+0xac>
c0015f80:	a1 84 c4 03 c0       	mov    eax,ds:0xc003c484
c0015f85:	85 c0                	test   eax,eax
c0015f87:	74 07                	je     c0015f90 <ACPI::close(int, int, void*)+0x6c>
c0015f89:	a1 84 c4 03 c0       	mov    eax,ds:0xc003c484
c0015f8e:	ff d0                	call   eax
c0015f90:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015f95:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015f9a:	83 e0 02             	and    eax,0x2
c0015f9d:	74 1c                	je     c0015fbb <ACPI::close(int, int, void*)+0x97>
c0015f9f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015fa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015faa:	89 c2                	mov    edx,eax
c0015fac:	ec                   	in     al,dx
c0015fad:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015fb1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015fb5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015fb9:	eb da                	jmp    c0015f95 <ACPI::close(int, int, void*)+0x71>
c0015fbb:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015fc2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015fc7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015fcb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015fcf:	ee                   	out    dx,al
c0015fd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fd5:	83 c4 1c             	add    esp,0x1c
c0015fd8:	c3                   	ret    

c0015fd9 <findRSDP()>:
c0015fd9:	83 ec 1c             	sub    esp,0x1c
c0015fdc:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0015fe1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015fe7:	83 e0 04             	and    eax,0x4
c0015fea:	84 c0                	test   al,al
c0015fec:	75 07                	jne    c0015ff5 <findRSDP()+0x1c>
c0015fee:	b8 00 00 00 00       	mov    eax,0x0
c0015ff3:	eb 6a                	jmp    c001605f <findRSDP()+0x86>
c0015ff5:	a1 70 bc 03 c0       	mov    eax,ds:0xc003bc70
c0015ffa:	3d ff 07 00 00       	cmp    eax,0x7ff
c0015fff:	7f 1b                	jg     c001601c <findRSDP()+0x43>
c0016001:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0016006:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001600c:	83 e2 fb             	and    edx,0xfffffffb
c001600f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016015:	b8 00 00 00 00       	mov    eax,0x0
c001601a:	eb 43                	jmp    c001605f <findRSDP()+0x86>
c001601c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016024:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001602c:	77 2c                	ja     c001605a <findRSDP()+0x81>
c001602e:	83 ec 04             	sub    esp,0x4
c0016031:	6a 08                	push   0x8
c0016033:	68 51 a0 03 c0       	push   0xc003a051
c0016038:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001603c:	e8 5b a5 fe ff       	call   c000059c <memcmp>
c0016041:	83 c4 10             	add    esp,0x10
c0016044:	85 c0                	test   eax,eax
c0016046:	0f 94 c0             	sete   al
c0016049:	84 c0                	test   al,al
c001604b:	74 06                	je     c0016053 <findRSDP()+0x7a>
c001604d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016051:	eb 0c                	jmp    c001605f <findRSDP()+0x86>
c0016053:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016058:	eb ca                	jmp    c0016024 <findRSDP()+0x4b>
c001605a:	b8 00 00 00 00       	mov    eax,0x0
c001605f:	83 c4 1c             	add    esp,0x1c
c0016062:	c3                   	ret    

c0016063 <loadACPITables(unsigned char*)>:
c0016063:	56                   	push   esi
c0016064:	53                   	push   ebx
c0016065:	83 ec 44             	sub    esp,0x44
c0016068:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c001606d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016073:	83 e0 04             	and    eax,0x4
c0016076:	84 c0                	test   al,al
c0016078:	0f 84 05 02 00 00    	je     c0016283 <loadACPITables(unsigned char*)+0x220>
c001607e:	a0 a0 c6 03 c0       	mov    al,ds:0xc003c6a0
c0016083:	84 c0                	test   al,al
c0016085:	74 75                	je     c00160fc <loadACPITables(unsigned char*)+0x99>
c0016087:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001608b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001608f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016093:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016096:	83 e8 24             	sub    eax,0x24
c0016099:	c1 e8 03             	shr    eax,0x3
c001609c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00160a0:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00160a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00160ac:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00160b0:	0f 8d b2 00 00 00    	jge    c0016168 <loadACPITables(unsigned char*)+0x105>
c00160b6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00160ba:	83 c0 24             	add    eax,0x24
c00160bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00160c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160c5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00160c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00160cd:	c1 e0 03             	shl    eax,0x3
c00160d0:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00160d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00160d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00160db:	8b 00                	mov    eax,DWORD PTR [eax]
c00160dd:	89 c1                	mov    ecx,eax
c00160df:	a1 8c c4 03 c0       	mov    eax,ds:0xc003c48c
c00160e4:	8d 50 01             	lea    edx,[eax+0x1]
c00160e7:	89 15 8c c4 03 c0    	mov    DWORD PTR ds:0xc003c48c,edx
c00160ed:	89 ca                	mov    edx,ecx
c00160ef:	89 14 c5 a4 c4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3b5c],edx
c00160f6:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00160fa:	eb ac                	jmp    c00160a8 <loadACPITables(unsigned char*)+0x45>
c00160fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001610b:	83 e8 24             	sub    eax,0x24
c001610e:	c1 e8 02             	shr    eax,0x2
c0016111:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016115:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001611d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016121:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016125:	7d 41                	jge    c0016168 <loadACPITables(unsigned char*)+0x105>
c0016127:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001612b:	83 c0 24             	add    eax,0x24
c001612e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016132:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016136:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001613a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001613e:	c1 e0 02             	shl    eax,0x2
c0016141:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016149:	8b 08                	mov    ecx,DWORD PTR [eax]
c001614b:	a1 8c c4 03 c0       	mov    eax,ds:0xc003c48c
c0016150:	8d 50 01             	lea    edx,[eax+0x1]
c0016153:	89 15 8c c4 03 c0    	mov    DWORD PTR ds:0xc003c48c,edx
c0016159:	89 ca                	mov    edx,ecx
c001615b:	89 14 c5 a4 c4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3b5c],edx
c0016162:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016166:	eb b5                	jmp    c001611d <loadACPITables(unsigned char*)+0xba>
c0016168:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016170:	a1 8c c4 03 c0       	mov    eax,ds:0xc003c48c
c0016175:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016179:	0f 8d 05 01 00 00    	jge    c0016284 <loadACPITables(unsigned char*)+0x221>
c001617f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016183:	8b 04 c5 a4 c4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3b5c]
c001618a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001618e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016192:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001619a:	25 ff 0f 00 00       	and    eax,0xfff
c001619f:	89 c6                	mov    esi,eax
c00161a1:	e8 f3 b2 ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c00161a6:	89 c3                	mov    ebx,eax
c00161a8:	83 ec 0c             	sub    esp,0xc
c00161ab:	6a 01                	push   0x1
c00161ad:	e8 57 b1 ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c00161b2:	83 c4 10             	add    esp,0x10
c00161b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161b9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00161bf:	83 ec 0c             	sub    esp,0xc
c00161c2:	6a 01                	push   0x1
c00161c4:	6a 01                	push   0x1
c00161c6:	50                   	push   eax
c00161c7:	52                   	push   edx
c00161c8:	53                   	push   ebx
c00161c9:	e8 5e ba ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00161ce:	83 c4 20             	add    esp,0x20
c00161d1:	09 f0                	or     eax,esi
c00161d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00161db:	c1 e0 03             	shl    eax,0x3
c00161de:	05 a0 c4 03 c0       	add    eax,0xc003c4a0
c00161e3:	83 ec 04             	sub    esp,0x4
c00161e6:	6a 04                	push   0x4
c00161e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161ec:	50                   	push   eax
c00161ed:	e8 6f a4 fe ff       	call   c0000661 <memcpy>
c00161f2:	83 c4 10             	add    esp,0x10
c00161f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00161fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016204:	05 00 10 00 00       	add    eax,0x1000
c0016209:	c1 e8 0c             	shr    eax,0xc
c001620c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016214:	89 04 24             	mov    DWORD PTR [esp],eax
c0016217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001621b:	25 ff 0f 00 00       	and    eax,0xfff
c0016220:	89 c6                	mov    esi,eax
c0016222:	e8 72 b2 ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c0016227:	89 c3                	mov    ebx,eax
c0016229:	83 ec 0c             	sub    esp,0xc
c001622c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016230:	e8 d4 b0 ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c0016235:	83 c4 10             	add    esp,0x10
c0016238:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001623c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016242:	83 ec 0c             	sub    esp,0xc
c0016245:	6a 01                	push   0x1
c0016247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001624b:	50                   	push   eax
c001624c:	52                   	push   edx
c001624d:	53                   	push   ebx
c001624e:	e8 d9 b9 ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016253:	83 c4 20             	add    esp,0x20
c0016256:	09 f0                	or     eax,esi
c0016258:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001625c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001625f:	83 ec 0c             	sub    esp,0xc
c0016262:	50                   	push   eax
c0016263:	e8 d7 b3 ff ff       	call   c001163f <Virt::freeKernelVirtualPages(unsigned long)>
c0016268:	83 c4 10             	add    esp,0x10
c001626b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001626f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016273:	89 14 c5 a4 c4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3b5c],edx
c001627a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001627e:	e9 ed fe ff ff       	jmp    c0016170 <loadACPITables(unsigned char*)+0x10d>
c0016283:	90                   	nop
c0016284:	83 c4 44             	add    esp,0x44
c0016287:	5b                   	pop    ebx
c0016288:	5e                   	pop    esi
c0016289:	c3                   	ret    

c001628a <findRSDT(unsigned char*)>:
c001628a:	56                   	push   esi
c001628b:	53                   	push   ebx
c001628c:	83 ec 44             	sub    esp,0x44
c001628f:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0016294:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001629a:	83 e0 04             	and    eax,0x4
c001629d:	84 c0                	test   al,al
c001629f:	75 0a                	jne    c00162ab <findRSDT(unsigned char*)+0x21>
c00162a1:	b8 00 00 00 00       	mov    eax,0x0
c00162a6:	e9 f7 00 00 00       	jmp    c00163a2 <findRSDT(unsigned char*)+0x118>
c00162ab:	83 ec 04             	sub    esp,0x4
c00162ae:	6a 24                	push   0x24
c00162b0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00162b4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00162b8:	50                   	push   eax
c00162b9:	e8 a3 a3 fe ff       	call   c0000661 <memcpy>
c00162be:	83 c4 10             	add    esp,0x10
c00162c1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00162c5:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00162c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00162d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00162d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00162d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00162dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00162e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00162e9:	25 ff 0f 00 00       	and    eax,0xfff
c00162ee:	89 c6                	mov    esi,eax
c00162f0:	e8 a4 b1 ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c00162f5:	89 c3                	mov    ebx,eax
c00162f7:	83 ec 0c             	sub    esp,0xc
c00162fa:	6a 02                	push   0x2
c00162fc:	e8 08 b0 ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c0016301:	83 c4 10             	add    esp,0x10
c0016304:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016308:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001630e:	83 ec 0c             	sub    esp,0xc
c0016311:	6a 01                	push   0x1
c0016313:	6a 02                	push   0x2
c0016315:	50                   	push   eax
c0016316:	52                   	push   edx
c0016317:	53                   	push   ebx
c0016318:	e8 0f b9 ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001631d:	83 c4 20             	add    esp,0x20
c0016320:	09 f0                	or     eax,esi
c0016322:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016326:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001632a:	25 ff 0f 00 00       	and    eax,0xfff
c001632f:	89 c6                	mov    esi,eax
c0016331:	e8 63 b1 ff ff       	call   c0011499 <Virt::getAKernelVAS()>
c0016336:	89 c3                	mov    ebx,eax
c0016338:	83 ec 0c             	sub    esp,0xc
c001633b:	6a 02                	push   0x2
c001633d:	e8 c7 af ff ff       	call   c0011309 <Virt::allocateKernelVirtualPages(int)>
c0016342:	83 c4 10             	add    esp,0x10
c0016345:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016349:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001634f:	83 ec 0c             	sub    esp,0xc
c0016352:	6a 01                	push   0x1
c0016354:	6a 02                	push   0x2
c0016356:	50                   	push   eax
c0016357:	52                   	push   edx
c0016358:	53                   	push   ebx
c0016359:	e8 ce b8 ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001635e:	83 c4 20             	add    esp,0x20
c0016361:	09 f0                	or     eax,esi
c0016363:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016367:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001636c:	75 11                	jne    c001637f <findRSDT(unsigned char*)+0xf5>
c001636e:	c6 05 a0 c6 03 c0 00 	mov    BYTE PTR ds:0xc003c6a0,0x0
c0016375:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016379:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001637d:	eb 1f                	jmp    c001639e <findRSDT(unsigned char*)+0x114>
c001637f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016384:	75 11                	jne    c0016397 <findRSDT(unsigned char*)+0x10d>
c0016386:	c6 05 a0 c6 03 c0 01 	mov    BYTE PTR ds:0xc003c6a0,0x1
c001638d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016391:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016395:	eb 07                	jmp    c001639e <findRSDT(unsigned char*)+0x114>
c0016397:	b8 00 00 00 00       	mov    eax,0x0
c001639c:	eb 04                	jmp    c00163a2 <findRSDT(unsigned char*)+0x118>
c001639e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00163a2:	83 c4 44             	add    esp,0x44
c00163a5:	5b                   	pop    ebx
c00163a6:	5e                   	pop    esi
c00163a7:	c3                   	ret    

c00163a8 <findDataTable(unsigned char*, char*)>:
c00163a8:	83 ec 1c             	sub    esp,0x1c
c00163ab:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c00163b0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00163b6:	83 e0 04             	and    eax,0x4
c00163b9:	84 c0                	test   al,al
c00163bb:	75 07                	jne    c00163c4 <findDataTable(unsigned char*, char*)+0x1c>
c00163bd:	b8 00 00 00 00       	mov    eax,0x0
c00163c2:	eb 7c                	jmp    c0016440 <findDataTable(unsigned char*, char*)+0x98>
c00163c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00163cc:	a1 8c c4 03 c0       	mov    eax,ds:0xc003c48c
c00163d1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00163d5:	7d 3a                	jge    c0016411 <findDataTable(unsigned char*, char*)+0x69>
c00163d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163db:	c1 e0 03             	shl    eax,0x3
c00163de:	05 a0 c4 03 c0       	add    eax,0xc003c4a0
c00163e3:	83 ec 04             	sub    esp,0x4
c00163e6:	6a 04                	push   0x4
c00163e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163ec:	50                   	push   eax
c00163ed:	e8 aa a1 fe ff       	call   c000059c <memcmp>
c00163f2:	83 c4 10             	add    esp,0x10
c00163f5:	85 c0                	test   eax,eax
c00163f7:	0f 94 c0             	sete   al
c00163fa:	84 c0                	test   al,al
c00163fc:	74 0d                	je     c001640b <findDataTable(unsigned char*, char*)+0x63>
c00163fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016402:	8b 04 c5 a4 c4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3b5c]
c0016409:	eb 35                	jmp    c0016440 <findDataTable(unsigned char*, char*)+0x98>
c001640b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001640f:	eb bb                	jmp    c00163cc <findDataTable(unsigned char*, char*)+0x24>
c0016411:	a0 a0 c6 03 c0       	mov    al,ds:0xc003c6a0
c0016416:	84 c0                	test   al,al
c0016418:	74 07                	je     c0016421 <findDataTable(unsigned char*, char*)+0x79>
c001641a:	b8 58 00 00 00       	mov    eax,0x58
c001641f:	eb 05                	jmp    c0016426 <findDataTable(unsigned char*, char*)+0x7e>
c0016421:	b8 52 00 00 00       	mov    eax,0x52
c0016426:	83 ec 04             	sub    esp,0x4
c0016429:	50                   	push   eax
c001642a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001642e:	68 1c a1 03 c0       	push   0xc003a11c
c0016433:	e8 b2 6a ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0016438:	83 c4 10             	add    esp,0x10
c001643b:	b8 00 00 00 00       	mov    eax,0x0
c0016440:	83 c4 1c             	add    esp,0x1c
c0016443:	c3                   	ret    

c0016444 <scanMADT()>:
c0016444:	83 ec 2c             	sub    esp,0x2c
c0016447:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c001644c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016452:	83 e0 04             	and    eax,0x4
c0016455:	84 c0                	test   al,al
c0016457:	0f 84 73 03 00 00    	je     c00167d0 <scanMADT()+0x38c>
c001645d:	e8 77 fb ff ff       	call   c0015fd9 <findRSDP()>
c0016462:	a3 ac c6 03 c0       	mov    ds:0xc003c6ac,eax
c0016467:	a1 ac c6 03 c0       	mov    eax,ds:0xc003c6ac
c001646c:	85 c0                	test   eax,eax
c001646e:	75 19                	jne    c0016489 <scanMADT()+0x45>
c0016470:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0016475:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001647b:	83 e2 fb             	and    edx,0xfffffffb
c001647e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016484:	e9 4b 03 00 00       	jmp    c00167d4 <scanMADT()+0x390>
c0016489:	a1 ac c6 03 c0       	mov    eax,ds:0xc003c6ac
c001648e:	83 ec 0c             	sub    esp,0xc
c0016491:	50                   	push   eax
c0016492:	e8 f3 fd ff ff       	call   c001628a <findRSDT(unsigned char*)>
c0016497:	83 c4 10             	add    esp,0x10
c001649a:	a3 a8 c6 03 c0       	mov    ds:0xc003c6a8,eax
c001649f:	a1 a8 c6 03 c0       	mov    eax,ds:0xc003c6a8
c00164a4:	85 c0                	test   eax,eax
c00164a6:	75 19                	jne    c00164c1 <scanMADT()+0x7d>
c00164a8:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c00164ad:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00164b3:	83 e2 fb             	and    edx,0xfffffffb
c00164b6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00164bc:	e9 13 03 00 00       	jmp    c00167d4 <scanMADT()+0x390>
c00164c1:	a1 a8 c6 03 c0       	mov    eax,ds:0xc003c6a8
c00164c6:	83 ec 0c             	sub    esp,0xc
c00164c9:	50                   	push   eax
c00164ca:	e8 94 fb ff ff       	call   c0016063 <loadACPITables(unsigned char*)>
c00164cf:	83 c4 10             	add    esp,0x10
c00164d2:	a1 a8 c6 03 c0       	mov    eax,ds:0xc003c6a8
c00164d7:	83 ec 08             	sub    esp,0x8
c00164da:	68 5a a0 03 c0       	push   0xc003a05a
c00164df:	50                   	push   eax
c00164e0:	e8 c3 fe ff ff       	call   c00163a8 <findDataTable(unsigned char*, char*)>
c00164e5:	83 c4 10             	add    esp,0x10
c00164e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00164ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00164f1:	75 19                	jne    c001650c <scanMADT()+0xc8>
c00164f3:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c00164f8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00164fe:	83 e2 fe             	and    edx,0xfffffffe
c0016501:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016507:	e9 c8 02 00 00       	jmp    c00167d4 <scanMADT()+0x390>
c001650c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016514:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001651b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001651f:	0f 87 af 02 00 00    	ja     c00167d4 <scanMADT()+0x390>
c0016525:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c001652d:	0f 87 a1 02 00 00    	ja     c00167d4 <scanMADT()+0x390>
c0016533:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016537:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001653b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001653f:	8d 50 01             	lea    edx,[eax+0x1]
c0016542:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016546:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001654a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001654e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016552:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016556:	8d 50 01             	lea    edx,[eax+0x1]
c0016559:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001655d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016561:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016565:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016569:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c001656e:	0f 86 5f 02 00 00    	jbe    c00167d3 <scanMADT()+0x38f>
c0016574:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016579:	75 57                	jne    c00165d2 <scanMADT()+0x18e>
c001657b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001657f:	8d 50 01             	lea    edx,[eax+0x1]
c0016582:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016586:	8a 15 e0 c7 03 c0    	mov    dl,BYTE PTR ds:0xc003c7e0
c001658c:	0f b6 d2             	movzx  edx,dl
c001658f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016593:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016597:	88 82 20 c8 03 c0    	mov    BYTE PTR [edx-0x3ffc37e0],al
c001659d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165a1:	8d 50 01             	lea    edx,[eax+0x1]
c00165a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00165a8:	8a 15 e0 c7 03 c0    	mov    dl,BYTE PTR ds:0xc003c7e0
c00165ae:	8d 4a 01             	lea    ecx,[edx+0x1]
c00165b1:	88 0d e0 c7 03 c0    	mov    BYTE PTR ds:0xc003c7e0,cl
c00165b7:	0f b6 d2             	movzx  edx,dl
c00165ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00165be:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00165c2:	88 82 00 c8 03 c0    	mov    BYTE PTR [edx-0x3ffc3800],al
c00165c8:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00165cd:	e9 ea 01 00 00       	jmp    c00167bc <scanMADT()+0x378>
c00165d2:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00165d7:	0f 85 14 01 00 00    	jne    c00166f1 <scanMADT()+0x2ad>
c00165dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165e1:	8d 50 01             	lea    edx,[eax+0x1]
c00165e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00165e8:	8a 15 b0 c6 03 c0    	mov    dl,BYTE PTR ds:0xc003c6b0
c00165ee:	0f b6 d2             	movzx  edx,dl
c00165f1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00165f5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00165f9:	88 82 c0 c6 03 c0    	mov    BYTE PTR [edx-0x3ffc3940],al
c00165ff:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016603:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001660b:	01 d0                	add    eax,edx
c001660d:	83 c0 2c             	add    eax,0x2c
c0016610:	8a 00                	mov    al,BYTE PTR [eax]
c0016612:	0f b6 d0             	movzx  edx,al
c0016615:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016619:	8d 48 01             	lea    ecx,[eax+0x1]
c001661c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016620:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016624:	0f b6 c0             	movzx  eax,al
c0016627:	c1 e0 08             	shl    eax,0x8
c001662a:	89 d1                	mov    ecx,edx
c001662c:	09 c1                	or     ecx,eax
c001662e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016632:	8d 50 02             	lea    edx,[eax+0x2]
c0016635:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016639:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001663d:	0f b6 c0             	movzx  eax,al
c0016640:	c1 e0 10             	shl    eax,0x10
c0016643:	09 c1                	or     ecx,eax
c0016645:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016649:	8d 50 03             	lea    edx,[eax+0x3]
c001664c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016650:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016654:	0f b6 c0             	movzx  eax,al
c0016657:	c1 e0 18             	shl    eax,0x18
c001665a:	09 c1                	or     ecx,eax
c001665c:	89 ca                	mov    edx,ecx
c001665e:	a0 b0 c6 03 c0       	mov    al,ds:0xc003c6b0
c0016663:	0f b6 c0             	movzx  eax,al
c0016666:	89 14 85 e0 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3920],edx
c001666d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016672:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016676:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001667a:	01 d0                	add    eax,edx
c001667c:	83 c0 2c             	add    eax,0x2c
c001667f:	8a 00                	mov    al,BYTE PTR [eax]
c0016681:	0f b6 d0             	movzx  edx,al
c0016684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016688:	8d 48 01             	lea    ecx,[eax+0x1]
c001668b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001668f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016693:	0f b6 c0             	movzx  eax,al
c0016696:	c1 e0 08             	shl    eax,0x8
c0016699:	89 d1                	mov    ecx,edx
c001669b:	09 c1                	or     ecx,eax
c001669d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166a1:	8d 50 02             	lea    edx,[eax+0x2]
c00166a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166a8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00166ac:	0f b6 c0             	movzx  eax,al
c00166af:	c1 e0 10             	shl    eax,0x10
c00166b2:	09 c1                	or     ecx,eax
c00166b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166b8:	8d 50 03             	lea    edx,[eax+0x3]
c00166bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00166c3:	0f b6 c0             	movzx  eax,al
c00166c6:	c1 e0 18             	shl    eax,0x18
c00166c9:	09 c1                	or     ecx,eax
c00166cb:	89 ca                	mov    edx,ecx
c00166cd:	a0 b0 c6 03 c0       	mov    al,ds:0xc003c6b0
c00166d2:	0f b6 c0             	movzx  eax,al
c00166d5:	89 14 85 60 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc38a0],edx
c00166dc:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00166e1:	a0 b0 c6 03 c0       	mov    al,ds:0xc003c6b0
c00166e6:	40                   	inc    eax
c00166e7:	a2 b0 c6 03 c0       	mov    ds:0xc003c6b0,al
c00166ec:	e9 cb 00 00 00       	jmp    c00167bc <scanMADT()+0x378>
c00166f1:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00166f6:	0f 85 a6 00 00 00    	jne    c00167a2 <scanMADT()+0x35e>
c00166fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016700:	8d 50 01             	lea    edx,[eax+0x1]
c0016703:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016707:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001670b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001670f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016713:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016717:	8d 50 01             	lea    edx,[eax+0x1]
c001671a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001671e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016722:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016726:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001672a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001672e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016732:	01 d0                	add    eax,edx
c0016734:	83 c0 2c             	add    eax,0x2c
c0016737:	8a 00                	mov    al,BYTE PTR [eax]
c0016739:	0f b6 d0             	movzx  edx,al
c001673c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016740:	8d 48 01             	lea    ecx,[eax+0x1]
c0016743:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016747:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001674b:	0f b6 c0             	movzx  eax,al
c001674e:	c1 e0 08             	shl    eax,0x8
c0016751:	89 d1                	mov    ecx,edx
c0016753:	09 c1                	or     ecx,eax
c0016755:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016759:	8d 50 02             	lea    edx,[eax+0x2]
c001675c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016760:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016764:	0f b6 c0             	movzx  eax,al
c0016767:	c1 e0 10             	shl    eax,0x10
c001676a:	09 c1                	or     ecx,eax
c001676c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016770:	8d 50 03             	lea    edx,[eax+0x3]
c0016773:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016777:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001677b:	0f b6 c0             	movzx  eax,al
c001677e:	c1 e0 18             	shl    eax,0x18
c0016781:	09 c8                	or     eax,ecx
c0016783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016787:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001678c:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016791:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016796:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001679a:	88 90 00 b2 03 c0    	mov    BYTE PTR [eax-0x3ffc4e00],dl
c00167a0:	eb 1a                	jmp    c00167bc <scanMADT()+0x378>
c00167a2:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00167a7:	75 07                	jne    c00167b0 <scanMADT()+0x36c>
c00167a9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00167ae:	eb 0c                	jmp    c00167bc <scanMADT()+0x378>
c00167b0:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00167b5:	75 05                	jne    c00167bc <scanMADT()+0x378>
c00167b7:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00167bc:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00167c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00167c5:	01 d0                	add    eax,edx
c00167c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00167cb:	e9 44 fd ff ff       	jmp    c0016514 <scanMADT()+0xd0>
c00167d0:	90                   	nop
c00167d1:	eb 01                	jmp    c00167d4 <scanMADT()+0x390>
c00167d3:	90                   	nop
c00167d4:	83 c4 2c             	add    esp,0x2c
c00167d7:	c3                   	ret    

c00167d8 <ACPI::ACPI()>:
c00167d8:	83 ec 0c             	sub    esp,0xc
c00167db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167df:	83 ec 08             	sub    esp,0x8
c00167e2:	68 5f a0 03 c0       	push   0xc003a05f
c00167e7:	50                   	push   eax
c00167e8:	e8 a7 d1 ff ff       	call   c0013994 <Device::Device(char const*)>
c00167ed:	83 c4 10             	add    esp,0x10
c00167f0:	ba e8 a1 03 c0       	mov    edx,0xc003a1e8
c00167f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f9:	89 10                	mov    DWORD PTR [eax],edx
c00167fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001680a:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016818:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016826:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001682d:	e8 12 fc ff ff       	call   c0016444 <scanMADT()>
c0016832:	90                   	nop
c0016833:	83 c4 0c             	add    esp,0xc
c0016836:	c3                   	ret    
c0016837:	90                   	nop

c0016838 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016838:	83 ec 2c             	sub    esp,0x2c
c001683b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001683f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016843:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016847:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001684b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016850:	88 d0                	mov    al,dl
c0016852:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016856:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001685b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016863:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016867:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001686d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016871:	0f 8d 97 00 00 00    	jge    c001690e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016877:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001687b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001687f:	83 c2 2a             	add    edx,0x2a
c0016882:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016886:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001688b:	75 78                	jne    c0016905 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001688d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016891:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016895:	83 c2 2a             	add    edx,0x2a
c0016898:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001689c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00168a0:	75 63                	jne    c0016905 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00168a2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00168a7:	74 3a                	je     c00168e3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00168a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00168b1:	83 c2 2a             	add    edx,0x2a
c00168b4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00168b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00168bf:	39 c2                	cmp    edx,eax
c00168c1:	74 10                	je     c00168d3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00168c3:	83 ec 0c             	sub    esp,0xc
c00168c6:	68 4c a1 03 c0       	push   0xc003a14c
c00168cb:	e8 38 67 ff ff       	call   c000d008 <panic(char const*)>
c00168d0:	83 c4 10             	add    esp,0x10
c00168d3:	83 ec 0c             	sub    esp,0xc
c00168d6:	68 64 a0 03 c0       	push   0xc003a064
c00168db:	e8 28 67 ff ff       	call   c000d008 <panic(char const*)>
c00168e0:	83 c4 10             	add    esp,0x10
c00168e3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00168e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00168ef:	83 c2 2a             	add    edx,0x2a
c00168f2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00168f6:	8b 02                	mov    eax,DWORD PTR [edx]
c00168f8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00168fb:	89 01                	mov    DWORD PTR [ecx],eax
c00168fd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016900:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016905:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016909:	e9 55 ff ff ff       	jmp    c0016863 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001690e:	90                   	nop
c001690f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016913:	83 c4 2c             	add    esp,0x2c
c0016916:	c2 04 00             	ret    0x4
c0016919:	90                   	nop

c001691a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001691a:	56                   	push   esi
c001691b:	53                   	push   ebx
c001691c:	83 ec 14             	sub    esp,0x14
c001691f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016923:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016927:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001692b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016930:	88 c8                	mov    al,cl
c0016932:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016936:	88 d0                	mov    al,dl
c0016938:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001693c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016940:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694a:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016950:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016955:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001695a:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001695f:	83 ec 04             	sub    esp,0x4
c0016962:	56                   	push   esi
c0016963:	53                   	push   ebx
c0016964:	51                   	push   ecx
c0016965:	52                   	push   edx
c0016966:	50                   	push   eax
c0016967:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001696b:	68 7c a1 03 c0       	push   0xc003a17c
c0016970:	e8 75 65 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0016975:	83 c4 20             	add    esp,0x20
c0016978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001697c:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016986:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016989:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001698d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016995:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001699b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001699f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00169a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169a6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00169ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169af:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00169b5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00169b9:	8d 48 01             	lea    ecx,[eax+0x1]
c00169bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c0:	83 c2 2a             	add    edx,0x2a
c00169c3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00169c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169cb:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00169d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00169d8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00169dc:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00169e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e4:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00169ea:	8d 50 01             	lea    edx,[eax+0x1]
c00169ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f1:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00169f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169fb:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016a01:	3d 00 08 00 00       	cmp    eax,0x800
c0016a06:	75 10                	jne    c0016a18 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0016a08:	83 ec 0c             	sub    esp,0xc
c0016a0b:	68 73 a0 03 c0       	push   0xc003a073
c0016a10:	e8 f3 65 ff ff       	call   c000d008 <panic(char const*)>
c0016a15:	83 c4 10             	add    esp,0x10
c0016a18:	90                   	nop
c0016a19:	83 c4 14             	add    esp,0x14
c0016a1c:	5b                   	pop    ebx
c0016a1d:	5e                   	pop    esi
c0016a1e:	c3                   	ret    
c0016a1f:	90                   	nop

c0016a20 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0016a20:	b8 00 00 00 00       	mov    eax,0x0
c0016a25:	c3                   	ret    

c0016a26 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0016a26:	83 ec 1c             	sub    esp,0x1c
c0016a29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a2d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0016a30:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016a34:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0016a39:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0016a3e:	83 ec 08             	sub    esp,0x8
c0016a41:	52                   	push   edx
c0016a42:	50                   	push   eax
c0016a43:	e8 10 4c ff ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c0016a48:	83 c4 10             	add    esp,0x10
c0016a4b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0016a4f:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0016a54:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0016a59:	83 ec 04             	sub    esp,0x4
c0016a5c:	6a 01                	push   0x1
c0016a5e:	52                   	push   edx
c0016a5f:	50                   	push   eax
c0016a60:	e8 fb 4c ff ff       	call   c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016a65:	83 c4 10             	add    esp,0x10
c0016a68:	90                   	nop
c0016a69:	83 c4 1c             	add    esp,0x1c
c0016a6c:	c3                   	ret    
c0016a6d:	90                   	nop

c0016a6e <ACPI::open(int, int, void*)>:
c0016a6e:	53                   	push   ebx
c0016a6f:	83 ec 18             	sub    esp,0x18
c0016a72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a76:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0016a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a81:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0016a87:	84 c0                	test   al,al
c0016a89:	74 60                	je     c0016aeb <ACPI::open(int, int, void*)+0x7d>
c0016a8b:	83 ec 0c             	sub    esp,0xc
c0016a8e:	68 58 01 00 00       	push   0x158
c0016a93:	e8 02 ba ff ff       	call   c001249a <operator new(unsigned long)>
c0016a98:	83 c4 10             	add    esp,0x10
c0016a9b:	89 c3                	mov    ebx,eax
c0016a9d:	83 ec 0c             	sub    esp,0xc
c0016aa0:	53                   	push   ebx
c0016aa1:	e8 26 45 00 00       	call   c001afcc <PCI::PCI()>
c0016aa6:	83 c4 10             	add    esp,0x10
c0016aa9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016aad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab1:	83 ec 08             	sub    esp,0x8
c0016ab4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ab8:	50                   	push   eax
c0016ab9:	e8 e6 cc ff ff       	call   c00137a4 <Device::addChild(Device*)>
c0016abe:	83 c4 10             	add    esp,0x10
c0016ac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ac7:	83 c0 08             	add    eax,0x8
c0016aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0016acc:	6a 00                	push   0x0
c0016ace:	6a 00                	push   0x0
c0016ad0:	6a 00                	push   0x0
c0016ad2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ad6:	ff d0                	call   eax
c0016ad8:	83 c4 10             	add    esp,0x10
c0016adb:	83 ec 0c             	sub    esp,0xc
c0016ade:	68 90 a0 03 c0       	push   0xc003a090
c0016ae3:	e8 02 64 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0016ae8:	83 c4 10             	add    esp,0x10
c0016aeb:	83 ec 0c             	sub    esp,0xc
c0016aee:	68 9b a0 03 c0       	push   0xc003a09b
c0016af3:	e8 0c 52 ff ff       	call   c000bd04 <loadKernelSymbolTable(char const*)>
c0016af8:	83 c4 10             	add    esp,0x10
c0016afb:	8b 1d a8 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003baa8
c0016b01:	83 ec 0c             	sub    esp,0xc
c0016b04:	68 b9 a0 03 c0       	push   0xc003a0b9
c0016b09:	e8 bd 5b ff ff       	call   c000c6cb <loadDLL(char const*)>
c0016b0e:	83 c4 10             	add    esp,0x10
c0016b11:	83 ec 08             	sub    esp,0x8
c0016b14:	53                   	push   ebx
c0016b15:	50                   	push   eax
c0016b16:	e8 79 5c ff ff       	call   c000c794 <executeDLL(unsigned long, void*)>
c0016b1b:	83 c4 10             	add    esp,0x10
c0016b1e:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0016b23:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016b29:	83 e0 04             	and    eax,0x4
c0016b2c:	84 c0                	test   al,al
c0016b2e:	74 57                	je     c0016b87 <ACPI::open(int, int, void*)+0x119>
c0016b30:	8b 1d a8 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003baa8
c0016b36:	83 ec 0c             	sub    esp,0xc
c0016b39:	68 d6 a0 03 c0       	push   0xc003a0d6
c0016b3e:	e8 88 5b ff ff       	call   c000c6cb <loadDLL(char const*)>
c0016b43:	83 c4 10             	add    esp,0x10
c0016b46:	83 ec 08             	sub    esp,0x8
c0016b49:	53                   	push   ebx
c0016b4a:	50                   	push   eax
c0016b4b:	e8 44 5c ff ff       	call   c000c794 <executeDLL(unsigned long, void*)>
c0016b50:	83 c4 10             	add    esp,0x10
c0016b53:	a1 a8 c6 03 c0       	mov    eax,ds:0xc003c6a8
c0016b58:	83 ec 08             	sub    esp,0x8
c0016b5b:	68 f3 a0 03 c0       	push   0xc003a0f3
c0016b60:	50                   	push   eax
c0016b61:	e8 42 f8 ff ff       	call   c00163a8 <findDataTable(unsigned char*, char*)>
c0016b66:	83 c4 10             	add    esp,0x10
c0016b69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b6d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016b72:	74 13                	je     c0016b87 <ACPI::open(int, int, void*)+0x119>
c0016b74:	83 ec 08             	sub    esp,0x8
c0016b77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b7f:	e8 a2 fe ff ff       	call   c0016a26 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0016b84:	83 c4 10             	add    esp,0x10
c0016b87:	b8 00 00 00 00       	mov    eax,0x0
c0016b8c:	83 c4 18             	add    esp,0x18
c0016b8f:	5b                   	pop    ebx
c0016b90:	c3                   	ret    
c0016b91:	90                   	nop

c0016b92 <ACPI::sleep()>:
c0016b92:	83 ec 0c             	sub    esp,0xc
c0016b95:	a1 80 c4 03 c0       	mov    eax,ds:0xc003c480
c0016b9a:	85 c0                	test   eax,eax
c0016b9c:	74 07                	je     c0016ba5 <ACPI::sleep()+0x13>
c0016b9e:	a1 80 c4 03 c0       	mov    eax,ds:0xc003c480
c0016ba3:	ff d0                	call   eax
c0016ba5:	90                   	nop
c0016ba6:	83 c4 0c             	add    esp,0xc
c0016ba9:	c3                   	ret    

c0016baa <CPU::close(int, int, void*)>:
c0016baa:	31 c0                	xor    eax,eax
c0016bac:	c3                   	ret    

c0016bad <lookupAMDCPUName(unsigned char, unsigned char)>:
c0016bad:	55                   	push   ebp
c0016bae:	57                   	push   edi
c0016baf:	56                   	push   esi
c0016bb0:	53                   	push   ebx
c0016bb1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016bb5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016bb9:	89 ce                	mov    esi,ecx
c0016bbb:	89 d5                	mov    ebp,edx
c0016bbd:	80 f9 04             	cmp    cl,0x4
c0016bc0:	75 28                	jne    c0016bea <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0016bc2:	8d 42 f9             	lea    eax,[edx-0x7]
c0016bc5:	3c 03                	cmp    al,0x3
c0016bc7:	0f 86 63 01 00 00    	jbe    c0016d30 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016bcd:	80 fa 03             	cmp    dl,0x3
c0016bd0:	0f 84 5a 01 00 00    	je     c0016d30 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016bd6:	8d 7a f2             	lea    edi,[edx-0xe]
c0016bd9:	b8 d0 b3 03 c0       	mov    eax,0xc003b3d0
c0016bde:	89 fb                	mov    ebx,edi
c0016be0:	80 fb 01             	cmp    bl,0x1
c0016be3:	77 4e                	ja     c0016c33 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0016be5:	e9 52 01 00 00       	jmp    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bea:	80 f9 05             	cmp    cl,0x5
c0016bed:	75 4d                	jne    c0016c3c <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0016bef:	b8 e0 b3 03 c0       	mov    eax,0xc003b3e0
c0016bf4:	80 fa 03             	cmp    dl,0x3
c0016bf7:	0f 86 3f 01 00 00    	jbe    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bfd:	8d 7a fa             	lea    edi,[edx-0x6]
c0016c00:	b8 f0 b3 03 c0       	mov    eax,0xc003b3f0
c0016c05:	89 fb                	mov    ebx,edi
c0016c07:	80 fb 01             	cmp    bl,0x1
c0016c0a:	0f 86 2c 01 00 00    	jbe    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c10:	b8 00 b4 03 c0       	mov    eax,0xc003b400
c0016c15:	80 fa 08             	cmp    dl,0x8
c0016c18:	0f 84 1e 01 00 00    	je     c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c1e:	89 d7                	mov    edi,edx
c0016c20:	b8 10 b4 03 c0       	mov    eax,0xc003b410
c0016c25:	83 e7 fb             	and    edi,0xfffffffb
c0016c28:	89 fb                	mov    ebx,edi
c0016c2a:	80 fb 09             	cmp    bl,0x9
c0016c2d:	0f 84 09 01 00 00    	je     c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c33:	31 c0                	xor    eax,eax
c0016c35:	89 eb                	mov    ebx,ebp
c0016c37:	0f b6 fb             	movzx  edi,bl
c0016c3a:	eb 30                	jmp    c0016c6c <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0016c3c:	31 c0                	xor    eax,eax
c0016c3e:	80 f9 06             	cmp    cl,0x6
c0016c41:	75 f2                	jne    c0016c35 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016c43:	80 fa 0a             	cmp    dl,0xa
c0016c46:	77 ed                	ja     c0016c35 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016c48:	bf de 05 00 00       	mov    edi,0x5de
c0016c4d:	0f a3 d7             	bt     edi,edx
c0016c50:	73 e3                	jae    c0016c35 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016c52:	b8 20 b4 03 c0       	mov    eax,0xc003b420
c0016c57:	e9 e0 00 00 00       	jmp    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c5c:	39 c7                	cmp    edi,eax
c0016c5e:	0f 84 d3 00 00 00    	je     c0016d37 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016c64:	40                   	inc    eax
c0016c65:	3d d0 00 00 00       	cmp    eax,0xd0
c0016c6a:	74 09                	je     c0016c75 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0016c6c:	89 f3                	mov    ebx,esi
c0016c6e:	80 fb 0f             	cmp    bl,0xf
c0016c71:	75 f1                	jne    c0016c64 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016c73:	eb e7                	jmp    c0016c5c <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0016c75:	80 f9 10             	cmp    cl,0x10
c0016c78:	75 14                	jne    c0016c8e <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016c7a:	8d 42 fc             	lea    eax,[edx-0x4]
c0016c7d:	83 e0 fb             	and    eax,0xfffffffb
c0016c80:	3c 02                	cmp    al,0x2
c0016c82:	76 34                	jbe    c0016cb8 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0016c84:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016c89:	80 fa 02             	cmp    dl,0x2
c0016c8c:	eb 24                	jmp    c0016cb2 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0016c8e:	80 f9 11             	cmp    cl,0x11
c0016c91:	75 13                	jne    c0016ca6 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016c93:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016c98:	80 fa 03             	cmp    dl,0x3
c0016c9b:	0f 85 9b 00 00 00    	jne    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ca1:	e9 91 00 00 00       	jmp    c0016d37 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016ca6:	80 f9 12             	cmp    cl,0x12
c0016ca9:	75 14                	jne    c0016cbf <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016cab:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016cb0:	fe ca                	dec    dl
c0016cb2:	0f 85 84 00 00 00    	jne    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cb8:	b8 40 b4 03 c0       	mov    eax,0xc003b440
c0016cbd:	eb 7d                	jmp    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cbf:	80 f9 14             	cmp    cl,0x14
c0016cc2:	75 12                	jne    c0016cd6 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0016cc4:	4a                   	dec    edx
c0016cc5:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016cca:	80 fa 01             	cmp    dl,0x1
c0016ccd:	77 6d                	ja     c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ccf:	b8 50 b4 03 c0       	mov    eax,0xc003b450
c0016cd4:	eb 66                	jmp    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cd6:	80 f9 15             	cmp    cl,0x15
c0016cd9:	75 31                	jne    c0016d0c <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0016cdb:	b8 60 b4 03 c0       	mov    eax,0xc003b460
c0016ce0:	80 fa 01             	cmp    dl,0x1
c0016ce3:	74 57                	je     c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ce5:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016cea:	80 fa 13             	cmp    dl,0x13
c0016ced:	76 0c                	jbe    c0016cfb <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0016cef:	80 fa 30             	cmp    dl,0x30
c0016cf2:	75 48                	jne    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cf4:	b8 80 b4 03 c0       	mov    eax,0xc003b480
c0016cf9:	eb 41                	jmp    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cfb:	b9 04 00 09 00       	mov    ecx,0x90004
c0016d00:	0f a3 d1             	bt     ecx,edx
c0016d03:	73 37                	jae    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d05:	b8 70 b4 03 c0       	mov    eax,0xc003b470
c0016d0a:	eb 30                	jmp    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d0c:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016d11:	80 f9 16             	cmp    cl,0x16
c0016d14:	75 26                	jne    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d16:	b8 90 b4 03 c0       	mov    eax,0xc003b490
c0016d1b:	84 d2                	test   dl,dl
c0016d1d:	74 1d                	je     c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d1f:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016d24:	80 fa 30             	cmp    dl,0x30
c0016d27:	75 13                	jne    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d29:	b8 a0 b4 03 c0       	mov    eax,0xc003b4a0
c0016d2e:	eb 0c                	jmp    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d30:	b8 c0 b3 03 c0       	mov    eax,0xc003b3c0
c0016d35:	eb 05                	jmp    c0016d3c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d37:	b8 30 b4 03 c0       	mov    eax,0xc003b430
c0016d3c:	5b                   	pop    ebx
c0016d3d:	5e                   	pop    esi
c0016d3e:	5f                   	pop    edi
c0016d3f:	5d                   	pop    ebp
c0016d40:	c3                   	ret    

c0016d41 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0016d41:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016d45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d49:	80 f9 04             	cmp    cl,0x4
c0016d4c:	75 6b                	jne    c0016db9 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0016d4e:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016d53:	80 fa 01             	cmp    dl,0x1
c0016d56:	0f 86 92 02 00 00    	jbe    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d5c:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016d61:	80 fa 02             	cmp    dl,0x2
c0016d64:	0f 84 84 02 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d6a:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016d6f:	80 fa 03             	cmp    dl,0x3
c0016d72:	0f 84 76 02 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d78:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016d7d:	80 fa 04             	cmp    dl,0x4
c0016d80:	0f 84 68 02 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d86:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016d8b:	80 fa 05             	cmp    dl,0x5
c0016d8e:	0f 84 5a 02 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d94:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016d99:	80 fa 07             	cmp    dl,0x7
c0016d9c:	0f 84 4c 02 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016da2:	83 ea 08             	sub    edx,0x8
c0016da5:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016daa:	80 fa 01             	cmp    dl,0x1
c0016dad:	0f 87 3b 02 00 00    	ja     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016db3:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016db8:	c3                   	ret    
c0016db9:	80 f9 05             	cmp    cl,0x5
c0016dbc:	75 45                	jne    c0016e03 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0016dbe:	8d 4a ff             	lea    ecx,[edx-0x1]
c0016dc1:	b8 80 b2 03 c0       	mov    eax,0xc003b280
c0016dc6:	80 f9 02             	cmp    cl,0x2
c0016dc9:	0f 86 1f 02 00 00    	jbe    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dcf:	80 fa 04             	cmp    dl,0x4
c0016dd2:	0f 84 f3 01 00 00    	je     c0016fcb <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0016dd8:	80 fa 07             	cmp    dl,0x7
c0016ddb:	0f 84 0d 02 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016de1:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016de6:	80 fa 08             	cmp    dl,0x8
c0016de9:	0f 84 ff 01 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016def:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016df4:	80 fa 09             	cmp    dl,0x9
c0016df7:	0f 85 f1 01 00 00    	jne    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dfd:	b8 a0 b2 03 c0       	mov    eax,0xc003b2a0
c0016e02:	c3                   	ret    
c0016e03:	80 f9 06             	cmp    cl,0x6
c0016e06:	0f 85 85 01 00 00    	jne    c0016f91 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0016e0c:	b8 b0 b2 03 c0       	mov    eax,0xc003b2b0
c0016e11:	80 fa 01             	cmp    dl,0x1
c0016e14:	0f 84 d4 01 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e1a:	8d 42 fb             	lea    eax,[edx-0x5]
c0016e1d:	3c 01                	cmp    al,0x1
c0016e1f:	0f 86 ac 01 00 00    	jbe    c0016fd1 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016e25:	80 fa 03             	cmp    dl,0x3
c0016e28:	0f 84 a3 01 00 00    	je     c0016fd1 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016e2e:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016e31:	b8 d0 b2 03 c0       	mov    eax,0xc003b2d0
c0016e36:	80 f9 01             	cmp    cl,0x1
c0016e39:	0f 86 af 01 00 00    	jbe    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e3f:	80 fa 09             	cmp    dl,0x9
c0016e42:	0f 84 8f 01 00 00    	je     c0016fd7 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016e48:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016e4b:	80 f9 01             	cmp    cl,0x1
c0016e4e:	0f 86 9a 01 00 00    	jbe    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e54:	b8 e0 b2 03 c0       	mov    eax,0xc003b2e0
c0016e59:	80 fa 0d             	cmp    dl,0xd
c0016e5c:	0f 84 8c 01 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e62:	b8 f0 b2 03 c0       	mov    eax,0xc003b2f0
c0016e67:	80 fa 0e             	cmp    dl,0xe
c0016e6a:	0f 84 7e 01 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e70:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0016e75:	80 fa 0f             	cmp    dl,0xf
c0016e78:	0f 84 70 01 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e7e:	b8 e0 b2 03 c0       	mov    eax,0xc003b2e0
c0016e83:	80 fa 15             	cmp    dl,0x15
c0016e86:	0f 84 62 01 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e8c:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016e8f:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0016e94:	80 f9 01             	cmp    cl,0x1
c0016e97:	0f 86 51 01 00 00    	jbe    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e9d:	80 fa 1a             	cmp    dl,0x1a
c0016ea0:	0f 84 37 01 00 00    	je     c0016fdd <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016ea6:	80 fa 1c             	cmp    dl,0x1c
c0016ea9:	0f 84 34 01 00 00    	je     c0016fe3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016eaf:	80 fa 1d             	cmp    dl,0x1d
c0016eb2:	0f 84 36 01 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016eb8:	b8 30 b3 03 c0       	mov    eax,0xc003b330
c0016ebd:	80 fa 25             	cmp    dl,0x25
c0016ec0:	0f 84 28 01 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ec6:	8d 4a da             	lea    ecx,[edx-0x26]
c0016ec9:	b8 20 b3 03 c0       	mov    eax,0xc003b320
c0016ece:	80 f9 01             	cmp    cl,0x1
c0016ed1:	0f 86 17 01 00 00    	jbe    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ed7:	b8 40 b3 03 c0       	mov    eax,0xc003b340
c0016edc:	80 fa 2a             	cmp    dl,0x2a
c0016edf:	0f 84 09 01 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ee5:	b8 30 b3 03 c0       	mov    eax,0xc003b330
c0016eea:	80 fa 2c             	cmp    dl,0x2c
c0016eed:	0f 84 fb 00 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ef3:	b8 40 b3 03 c0       	mov    eax,0xc003b340
c0016ef8:	80 fa 2d             	cmp    dl,0x2d
c0016efb:	0f 84 ed 00 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f01:	b8 10 b3 03 c0       	mov    eax,0xc003b310
c0016f06:	80 fa 2e             	cmp    dl,0x2e
c0016f09:	0f 84 df 00 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f0f:	b8 30 b3 03 c0       	mov    eax,0xc003b330
c0016f14:	80 fa 2f             	cmp    dl,0x2f
c0016f17:	0f 84 d1 00 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f1d:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016f20:	b8 20 b3 03 c0       	mov    eax,0xc003b320
c0016f25:	80 f9 01             	cmp    cl,0x1
c0016f28:	0f 86 c0 00 00 00    	jbe    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f2e:	b8 50 b3 03 c0       	mov    eax,0xc003b350
c0016f33:	80 fa 37             	cmp    dl,0x37
c0016f36:	0f 84 b2 00 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f3c:	b8 60 b3 03 c0       	mov    eax,0xc003b360
c0016f41:	80 fa 3a             	cmp    dl,0x3a
c0016f44:	0f 84 a4 00 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f4a:	b8 70 b3 03 c0       	mov    eax,0xc003b370
c0016f4f:	80 fa 3c             	cmp    dl,0x3c
c0016f52:	0f 84 96 00 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f58:	b8 80 b3 03 c0       	mov    eax,0xc003b380
c0016f5d:	80 fa 3d             	cmp    dl,0x3d
c0016f60:	0f 84 88 00 00 00    	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f66:	b8 60 b3 03 c0       	mov    eax,0xc003b360
c0016f6b:	80 fa 3e             	cmp    dl,0x3e
c0016f6e:	74 7e                	je     c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f70:	8d 42 bb             	lea    eax,[edx-0x45]
c0016f73:	3c 01                	cmp    al,0x1
c0016f75:	76 72                	jbe    c0016fe9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016f77:	80 fa 3f             	cmp    dl,0x3f
c0016f7a:	74 6d                	je     c0016fe9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016f7c:	80 fa 4a             	cmp    dl,0x4a
c0016f7f:	74 0a                	je     c0016f8b <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016f81:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016f86:	80 fa 4d             	cmp    dl,0x4d
c0016f89:	75 63                	jne    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f8b:	b8 50 b3 03 c0       	mov    eax,0xc003b350
c0016f90:	c3                   	ret    
c0016f91:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016f96:	80 f9 0b             	cmp    cl,0xb
c0016f99:	75 0a                	jne    c0016fa5 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016f9b:	fe ca                	dec    dl
c0016f9d:	75 4f                	jne    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f9f:	b8 90 b3 03 c0       	mov    eax,0xc003b390
c0016fa4:	c3                   	ret    
c0016fa5:	80 f9 0f             	cmp    cl,0xf
c0016fa8:	75 44                	jne    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016faa:	b8 a0 b3 03 c0       	mov    eax,0xc003b3a0
c0016faf:	80 fa 02             	cmp    dl,0x2
c0016fb2:	76 3a                	jbe    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016fb4:	8d 42 fd             	lea    eax,[edx-0x3]
c0016fb7:	3c 01                	cmp    al,0x1
c0016fb9:	76 0a                	jbe    c0016fc5 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016fbb:	b8 61 a3 03 c0       	mov    eax,0xc003a361
c0016fc0:	80 fa 06             	cmp    dl,0x6
c0016fc3:	75 29                	jne    c0016fee <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016fc5:	b8 b0 b3 03 c0       	mov    eax,0xc003b3b0
c0016fca:	c3                   	ret    
c0016fcb:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016fd0:	c3                   	ret    
c0016fd1:	b8 c0 b2 03 c0       	mov    eax,0xc003b2c0
c0016fd6:	c3                   	ret    
c0016fd7:	b8 e0 b2 03 c0       	mov    eax,0xc003b2e0
c0016fdc:	c3                   	ret    
c0016fdd:	b8 10 b3 03 c0       	mov    eax,0xc003b310
c0016fe2:	c3                   	ret    
c0016fe3:	b8 20 b3 03 c0       	mov    eax,0xc003b320
c0016fe8:	c3                   	ret    
c0016fe9:	b8 70 b3 03 c0       	mov    eax,0xc003b370
c0016fee:	c3                   	ret    

c0016fef <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016fef:	60                   	pusha  
c0016ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ff8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ffc:	9c                   	pushf  
c0016ffd:	fa                   	cli    
c0016ffe:	0f 09                	wbinvd 
c0017000:	0f 30                	wrmsr  
c0017002:	9d                   	popf   
c0017003:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017007:	89 02                	mov    DWORD PTR [edx],eax
c0017009:	61                   	popa   
c001700a:	c3                   	ret    

c001700b <AMD_K6_read_msr(unsigned int, REGS*)>:
c001700b:	60                   	pusha  
c001700c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017010:	9c                   	pushf  
c0017011:	fa                   	cli    
c0017012:	0f 09                	wbinvd 
c0017014:	31 c0                	xor    eax,eax
c0017016:	31 d2                	xor    edx,edx
c0017018:	0f 32                	rdmsr  
c001701a:	9d                   	popf   
c001701b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001701f:	89 02                	mov    DWORD PTR [edx],eax
c0017021:	61                   	popa   
c0017022:	c3                   	ret    

c0017023 <AMD_K6_writeback(int, int, int)>:
c0017023:	56                   	push   esi
c0017024:	53                   	push   ebx
c0017025:	83 ec 10             	sub    esp,0x10
c0017028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702c:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017031:	75 5d                	jne    c0017090 <AMD_K6_writeback(int, int, int)+0x6d>
c0017033:	83 f8 08             	cmp    eax,0x8
c0017036:	75 09                	jne    c0017041 <AMD_K6_writeback(int, int, int)+0x1e>
c0017038:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001703d:	7e 13                	jle    c0017052 <AMD_K6_writeback(int, int, int)+0x2f>
c001703f:	eb 30                	jmp    c0017071 <AMD_K6_writeback(int, int, int)+0x4e>
c0017041:	83 f8 06             	cmp    eax,0x6
c0017044:	7c 4a                	jl     c0017090 <AMD_K6_writeback(int, int, int)+0x6d>
c0017046:	83 f8 07             	cmp    eax,0x7
c0017049:	7e 07                	jle    c0017052 <AMD_K6_writeback(int, int, int)+0x2f>
c001704b:	83 f8 09             	cmp    eax,0x9
c001704e:	74 21                	je     c0017071 <AMD_K6_writeback(int, int, int)+0x4e>
c0017050:	eb 3e                	jmp    c0017090 <AMD_K6_writeback(int, int, int)+0x6d>
c0017052:	89 e6                	mov    esi,esp
c0017054:	8b 1d 64 bc 03 c0    	mov    ebx,DWORD PTR ds:0xc003bc64
c001705a:	56                   	push   esi
c001705b:	c1 eb 15             	shr    ebx,0x15
c001705e:	68 82 00 00 c0       	push   0xc0000082
c0017063:	83 e3 7e             	and    ebx,0x7e
c0017066:	e8 a0 ff ff ff       	call   c001700b <AMD_K6_read_msr(unsigned int, REGS*)>
c001706b:	56                   	push   esi
c001706c:	6a 00                	push   0x0
c001706e:	53                   	push   ebx
c001706f:	eb 12                	jmp    c0017083 <AMD_K6_writeback(int, int, int)+0x60>
c0017071:	89 e3                	mov    ebx,esp
c0017073:	53                   	push   ebx
c0017074:	68 82 00 00 c0       	push   0xc0000082
c0017079:	e8 8d ff ff ff       	call   c001700b <AMD_K6_read_msr(unsigned int, REGS*)>
c001707e:	53                   	push   ebx
c001707f:	6a 00                	push   0x0
c0017081:	6a 00                	push   0x0
c0017083:	68 82 00 00 c0       	push   0xc0000082
c0017088:	e8 62 ff ff ff       	call   c0016fef <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001708d:	83 c4 18             	add    esp,0x18
c0017090:	83 c4 10             	add    esp,0x10
c0017093:	5b                   	pop    ebx
c0017094:	5e                   	pop    esi
c0017095:	c3                   	ret    

c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017096:	55                   	push   ebp
c0017097:	57                   	push   edi
c0017098:	56                   	push   esi
c0017099:	53                   	push   ebx
c001709a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001709e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00170a2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00170a6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00170aa:	39 05 c0 b4 03 c0    	cmp    DWORD PTR ds:0xc003b4c0,eax
c00170b0:	75 23                	jne    c00170d5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00170b2:	a1 4c c8 03 c0       	mov    eax,ds:0xc003c84c
c00170b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170bb:	89 06                	mov    DWORD PTR [esi],eax
c00170bd:	a1 48 c8 03 c0       	mov    eax,ds:0xc003c848
c00170c2:	89 07                	mov    DWORD PTR [edi],eax
c00170c4:	a1 44 c8 03 c0       	mov    eax,ds:0xc003c844
c00170c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00170cc:	a1 40 c8 03 c0       	mov    eax,ds:0xc003c840
c00170d1:	89 02                	mov    DWORD PTR [edx],eax
c00170d3:	eb 3f                	jmp    c0017114 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00170d5:	31 c9                	xor    ecx,ecx
c00170d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170db:	0f a2                	cpuid  
c00170dd:	89 06                	mov    DWORD PTR [esi],eax
c00170df:	89 1f                	mov    DWORD PTR [edi],ebx
c00170e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170e5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00170e8:	89 10                	mov    DWORD PTR [eax],edx
c00170ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170ee:	a3 c0 b4 03 c0       	mov    ds:0xc003b4c0,eax
c00170f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00170f5:	a3 4c c8 03 c0       	mov    ds:0xc003c84c,eax
c00170fa:	8b 07                	mov    eax,DWORD PTR [edi]
c00170fc:	a3 48 c8 03 c0       	mov    ds:0xc003c848,eax
c0017101:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017104:	a3 44 c8 03 c0       	mov    ds:0xc003c844,eax
c0017109:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001710d:	8b 00                	mov    eax,DWORD PTR [eax]
c001710f:	a3 40 c8 03 c0       	mov    ds:0xc003c840,eax
c0017114:	5b                   	pop    ebx
c0017115:	5e                   	pop    esi
c0017116:	5f                   	pop    edi
c0017117:	5d                   	pop    ebp
c0017118:	c3                   	ret    

c0017119 <cpuidCheckEDX(unsigned int)>:
c0017119:	83 ec 10             	sub    esp,0x10
c001711c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017120:	50                   	push   eax
c0017121:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017125:	50                   	push   eax
c0017126:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001712a:	50                   	push   eax
c001712b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001712f:	50                   	push   eax
c0017130:	6a 01                	push   0x1
c0017132:	e8 5f ff ff ff       	call   c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017137:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001713b:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001713f:	0f 95 c0             	setne  al
c0017142:	83 c4 24             	add    esp,0x24
c0017145:	c3                   	ret    

c0017146 <cpuidCheckECX(unsigned int)>:
c0017146:	83 ec 10             	sub    esp,0x10
c0017149:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001714d:	50                   	push   eax
c001714e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017152:	50                   	push   eax
c0017153:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017157:	50                   	push   eax
c0017158:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001715c:	50                   	push   eax
c001715d:	6a 01                	push   0x1
c001715f:	e8 32 ff ff ff       	call   c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017164:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017168:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001716c:	0f 95 c0             	setne  al
c001716f:	83 c4 24             	add    esp,0x24
c0017172:	c3                   	ret    

c0017173 <cpuidCheckExtendedEBX(unsigned int)>:
c0017173:	83 ec 10             	sub    esp,0x10
c0017176:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001717a:	50                   	push   eax
c001717b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001717f:	50                   	push   eax
c0017180:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017184:	50                   	push   eax
c0017185:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017189:	50                   	push   eax
c001718a:	6a 07                	push   0x7
c001718c:	e8 05 ff ff ff       	call   c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017191:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017195:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017199:	0f 95 c0             	setne  al
c001719c:	83 c4 24             	add    esp,0x24
c001719f:	c3                   	ret    

c00171a0 <cpuidCheckExtendedECX(unsigned int)>:
c00171a0:	83 ec 10             	sub    esp,0x10
c00171a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00171a7:	50                   	push   eax
c00171a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00171ac:	50                   	push   eax
c00171ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00171b1:	50                   	push   eax
c00171b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00171b6:	50                   	push   eax
c00171b7:	6a 07                	push   0x7
c00171b9:	e8 d8 fe ff ff       	call   c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00171be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171c2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00171c6:	0f 95 c0             	setne  al
c00171c9:	83 c4 24             	add    esp,0x24
c00171cc:	c3                   	ret    

c00171cd <getCPUNumber()>:
c00171cd:	31 c0                	xor    eax,eax
c00171cf:	c3                   	ret    

c00171d0 <thisCPU()>:
c00171d0:	e8 f8 ff ff ff       	call   c00171cd <getCPUNumber()>
c00171d5:	8b 15 a8 ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baa8
c00171db:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00171e2:	c3                   	ret    
c00171e3:	90                   	nop

c00171e4 <CPU::CPU()>:
c00171e4:	83 ec 0c             	sub    esp,0xc
c00171e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171eb:	83 ec 08             	sub    esp,0x8
c00171ee:	68 61 a3 03 c0       	push   0xc003a361
c00171f3:	50                   	push   eax
c00171f4:	e8 9b c7 ff ff       	call   c0013994 <Device::Device(char const*)>
c00171f9:	83 c4 10             	add    esp,0x10
c00171fc:	ba 38 a4 03 c0       	mov    edx,0xc003a438
c0017201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017205:	89 10                	mov    DWORD PTR [eax],edx
c0017207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001720b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017219:	05 78 01 00 00       	add    eax,0x178
c001721e:	83 ec 0c             	sub    esp,0xc
c0017221:	50                   	push   eax
c0017222:	e8 b5 55 ff ff       	call   c000c7dc <GDT::GDT()>
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001722e:	05 7c 09 00 00       	add    eax,0x97c
c0017233:	83 ec 0c             	sub    esp,0xc
c0017236:	50                   	push   eax
c0017237:	e8 00 58 ff ff       	call   c000ca3c <IDT::IDT()>
c001723c:	83 c4 10             	add    esp,0x10
c001723f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017243:	05 7c 11 00 00       	add    eax,0x117c
c0017248:	83 ec 0c             	sub    esp,0xc
c001724b:	50                   	push   eax
c001724c:	e8 9f 9b ff ff       	call   c0010df0 <TSS::TSS()>
c0017251:	83 c4 10             	add    esp,0x10
c0017254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017258:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001725f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017263:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001726d:	90                   	nop
c001726e:	83 c4 0c             	add    esp,0xc
c0017271:	c3                   	ret    

c0017272 <CPU::displayFeatures()>:
c0017272:	c3                   	ret    
c0017273:	90                   	nop

c0017274 <CPU::detectFeatures()>:
c0017274:	55                   	push   ebp
c0017275:	57                   	push   edi
c0017276:	56                   	push   esi
c0017277:	53                   	push   ebx
c0017278:	83 ec 50             	sub    esp,0x50
c001727b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001727f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017289:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017290:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017296:	6a 0d                	push   0xd
c0017298:	6a 00                	push   0x0
c001729a:	57                   	push   edi
c001729b:	e8 38 94 fe ff       	call   c00006d8 <memset>
c00172a0:	83 c4 10             	add    esp,0x10
c00172a3:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c00172a8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00172af:	0f 84 20 09 00 00    	je     c0017bd5 <CPU::detectFeatures()+0x961>
c00172b5:	83 ec 0c             	sub    esp,0xc
c00172b8:	6a 10                	push   0x10
c00172ba:	e8 5a fe ff ff       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c00172bf:	83 e0 01             	and    eax,0x1
c00172c2:	8d 14 00             	lea    edx,[eax+eax*1]
c00172c5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172cb:	83 e0 fd             	and    eax,0xfffffffd
c00172ce:	09 d0                	or     eax,edx
c00172d0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172d6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00172dd:	e8 37 fe ff ff       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c00172e2:	83 e0 01             	and    eax,0x1
c00172e5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00172ec:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172f2:	83 e0 fb             	and    eax,0xfffffffb
c00172f5:	09 d0                	or     eax,edx
c00172f7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172fd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017304:	e8 10 fe ff ff       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c0017309:	83 e0 01             	and    eax,0x1
c001730c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017313:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017319:	83 e0 f7             	and    eax,0xfffffff7
c001731c:	09 d0                	or     eax,edx
c001731e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017324:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001732b:	e8 e9 fd ff ff       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c0017330:	83 e0 01             	and    eax,0x1
c0017333:	c1 e0 04             	shl    eax,0x4
c0017336:	88 c2                	mov    dl,al
c0017338:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001733e:	83 e0 ef             	and    eax,0xffffffef
c0017341:	09 d0                	or     eax,edx
c0017343:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017349:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017350:	e8 c4 fd ff ff       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c0017355:	83 e0 01             	and    eax,0x1
c0017358:	c1 e0 05             	shl    eax,0x5
c001735b:	88 c2                	mov    dl,al
c001735d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017363:	83 e0 df             	and    eax,0xffffffdf
c0017366:	09 d0                	or     eax,edx
c0017368:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001736e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017375:	e8 9f fd ff ff       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c001737a:	83 e0 01             	and    eax,0x1
c001737d:	8d 14 00             	lea    edx,[eax+eax*1]
c0017380:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017386:	83 e0 fd             	and    eax,0xfffffffd
c0017389:	09 d0                	or     eax,edx
c001738b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017391:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017398:	e8 7c fd ff ff       	call   c0017119 <cpuidCheckEDX(unsigned int)>
c001739d:	83 e0 01             	and    eax,0x1
c00173a0:	c1 e0 06             	shl    eax,0x6
c00173a3:	88 c2                	mov    dl,al
c00173a5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00173ab:	83 e0 bf             	and    eax,0xffffffbf
c00173ae:	09 d0                	or     eax,edx
c00173b0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00173b6:	58                   	pop    eax
c00173b7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00173bb:	56                   	push   esi
c00173bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00173c0:	55                   	push   ebp
c00173c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00173c5:	50                   	push   eax
c00173c6:	8d 54 24 28          	lea    edx,[esp+0x28]
c00173ca:	52                   	push   edx
c00173cb:	6a 00                	push   0x0
c00173cd:	e8 c4 fc ff ff       	call   c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00173d2:	83 c4 1c             	add    esp,0x1c
c00173d5:	6a 04                	push   0x4
c00173d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00173db:	50                   	push   eax
c00173dc:	57                   	push   edi
c00173dd:	e8 7f 92 fe ff       	call   c0000661 <memcpy>
c00173e2:	83 c4 0c             	add    esp,0xc
c00173e5:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00173eb:	6a 04                	push   0x4
c00173ed:	56                   	push   esi
c00173ee:	50                   	push   eax
c00173ef:	e8 6d 92 fe ff       	call   c0000661 <memcpy>
c00173f4:	83 c4 0c             	add    esp,0xc
c00173f7:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00173fd:	6a 04                	push   0x4
c00173ff:	55                   	push   ebp
c0017400:	50                   	push   eax
c0017401:	e8 5b 92 fe ff       	call   c0000661 <memcpy>
c0017406:	58                   	pop    eax
c0017407:	5a                   	pop    edx
c0017408:	68 0c a2 03 c0       	push   0xc003a20c
c001740d:	57                   	push   edi
c001740e:	e8 67 94 fe ff       	call   c000087a <strcmp>
c0017413:	83 c4 10             	add    esp,0x10
c0017416:	85 c0                	test   eax,eax
c0017418:	75 0f                	jne    c0017429 <CPU::detectFeatures()+0x1b5>
c001741a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017424:	e9 22 02 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c0017429:	50                   	push   eax
c001742a:	50                   	push   eax
c001742b:	68 19 a2 03 c0       	push   0xc003a219
c0017430:	57                   	push   edi
c0017431:	e8 44 94 fe ff       	call   c000087a <strcmp>
c0017436:	83 c4 10             	add    esp,0x10
c0017439:	85 c0                	test   eax,eax
c001743b:	74 dd                	je     c001741a <CPU::detectFeatures()+0x1a6>
c001743d:	51                   	push   ecx
c001743e:	51                   	push   ecx
c001743f:	68 26 a2 03 c0       	push   0xc003a226
c0017444:	57                   	push   edi
c0017445:	e8 30 94 fe ff       	call   c000087a <strcmp>
c001744a:	83 c4 10             	add    esp,0x10
c001744d:	85 c0                	test   eax,eax
c001744f:	74 2a                	je     c001747b <CPU::detectFeatures()+0x207>
c0017451:	52                   	push   edx
c0017452:	52                   	push   edx
c0017453:	68 33 a2 03 c0       	push   0xc003a233
c0017458:	57                   	push   edi
c0017459:	e8 1c 94 fe ff       	call   c000087a <strcmp>
c001745e:	83 c4 10             	add    esp,0x10
c0017461:	85 c0                	test   eax,eax
c0017463:	74 16                	je     c001747b <CPU::detectFeatures()+0x207>
c0017465:	50                   	push   eax
c0017466:	50                   	push   eax
c0017467:	68 40 a2 03 c0       	push   0xc003a240
c001746c:	57                   	push   edi
c001746d:	e8 08 94 fe ff       	call   c000087a <strcmp>
c0017472:	83 c4 10             	add    esp,0x10
c0017475:	85 c0                	test   eax,eax
c0017477:	74 48                	je     c00174c1 <CPU::detectFeatures()+0x24d>
c0017479:	eb 0f                	jmp    c001748a <CPU::detectFeatures()+0x216>
c001747b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017485:	e9 c1 01 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c001748a:	50                   	push   eax
c001748b:	50                   	push   eax
c001748c:	68 4d a2 03 c0       	push   0xc003a24d
c0017491:	57                   	push   edi
c0017492:	e8 e3 93 fe ff       	call   c000087a <strcmp>
c0017497:	83 c4 10             	add    esp,0x10
c001749a:	85 c0                	test   eax,eax
c001749c:	74 23                	je     c00174c1 <CPU::detectFeatures()+0x24d>
c001749e:	50                   	push   eax
c001749f:	50                   	push   eax
c00174a0:	68 5a a2 03 c0       	push   0xc003a25a
c00174a5:	57                   	push   edi
c00174a6:	e8 cf 93 fe ff       	call   c000087a <strcmp>
c00174ab:	83 c4 10             	add    esp,0x10
c00174ae:	85 c0                	test   eax,eax
c00174b0:	75 1e                	jne    c00174d0 <CPU::detectFeatures()+0x25c>
c00174b2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00174bc:	e9 8a 01 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c00174c1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00174cb:	e9 7b 01 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c00174d0:	50                   	push   eax
c00174d1:	50                   	push   eax
c00174d2:	68 67 a2 03 c0       	push   0xc003a267
c00174d7:	57                   	push   edi
c00174d8:	e8 9d 93 fe ff       	call   c000087a <strcmp>
c00174dd:	83 c4 10             	add    esp,0x10
c00174e0:	85 c0                	test   eax,eax
c00174e2:	75 0f                	jne    c00174f3 <CPU::detectFeatures()+0x27f>
c00174e4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00174ee:	e9 58 01 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c00174f3:	50                   	push   eax
c00174f4:	50                   	push   eax
c00174f5:	68 26 a2 03 c0       	push   0xc003a226
c00174fa:	57                   	push   edi
c00174fb:	e8 7a 93 fe ff       	call   c000087a <strcmp>
c0017500:	83 c4 10             	add    esp,0x10
c0017503:	85 c0                	test   eax,eax
c0017505:	75 0f                	jne    c0017516 <CPU::detectFeatures()+0x2a2>
c0017507:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017511:	e9 35 01 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c0017516:	50                   	push   eax
c0017517:	50                   	push   eax
c0017518:	68 74 a2 03 c0       	push   0xc003a274
c001751d:	57                   	push   edi
c001751e:	e8 57 93 fe ff       	call   c000087a <strcmp>
c0017523:	83 c4 10             	add    esp,0x10
c0017526:	85 c0                	test   eax,eax
c0017528:	75 0f                	jne    c0017539 <CPU::detectFeatures()+0x2c5>
c001752a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017534:	e9 12 01 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c0017539:	51                   	push   ecx
c001753a:	51                   	push   ecx
c001753b:	68 81 a2 03 c0       	push   0xc003a281
c0017540:	57                   	push   edi
c0017541:	e8 34 93 fe ff       	call   c000087a <strcmp>
c0017546:	83 c4 10             	add    esp,0x10
c0017549:	85 c0                	test   eax,eax
c001754b:	75 0f                	jne    c001755c <CPU::detectFeatures()+0x2e8>
c001754d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017557:	e9 ef 00 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c001755c:	52                   	push   edx
c001755d:	52                   	push   edx
c001755e:	68 8e a2 03 c0       	push   0xc003a28e
c0017563:	57                   	push   edi
c0017564:	e8 11 93 fe ff       	call   c000087a <strcmp>
c0017569:	83 c4 10             	add    esp,0x10
c001756c:	85 c0                	test   eax,eax
c001756e:	75 0f                	jne    c001757f <CPU::detectFeatures()+0x30b>
c0017570:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001757a:	e9 cc 00 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c001757f:	50                   	push   eax
c0017580:	50                   	push   eax
c0017581:	68 9b a2 03 c0       	push   0xc003a29b
c0017586:	57                   	push   edi
c0017587:	e8 ee 92 fe ff       	call   c000087a <strcmp>
c001758c:	83 c4 10             	add    esp,0x10
c001758f:	85 c0                	test   eax,eax
c0017591:	75 0f                	jne    c00175a2 <CPU::detectFeatures()+0x32e>
c0017593:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001759d:	e9 a9 00 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c00175a2:	50                   	push   eax
c00175a3:	50                   	push   eax
c00175a4:	68 a8 a2 03 c0       	push   0xc003a2a8
c00175a9:	57                   	push   edi
c00175aa:	e8 cb 92 fe ff       	call   c000087a <strcmp>
c00175af:	83 c4 10             	add    esp,0x10
c00175b2:	85 c0                	test   eax,eax
c00175b4:	75 0f                	jne    c00175c5 <CPU::detectFeatures()+0x351>
c00175b6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00175c0:	e9 86 00 00 00       	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c00175c5:	50                   	push   eax
c00175c6:	50                   	push   eax
c00175c7:	68 b5 a2 03 c0       	push   0xc003a2b5
c00175cc:	57                   	push   edi
c00175cd:	e8 a8 92 fe ff       	call   c000087a <strcmp>
c00175d2:	83 c4 10             	add    esp,0x10
c00175d5:	85 c0                	test   eax,eax
c00175d7:	75 0c                	jne    c00175e5 <CPU::detectFeatures()+0x371>
c00175d9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00175e3:	eb 66                	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c00175e5:	50                   	push   eax
c00175e6:	50                   	push   eax
c00175e7:	68 c2 a2 03 c0       	push   0xc003a2c2
c00175ec:	57                   	push   edi
c00175ed:	e8 88 92 fe ff       	call   c000087a <strcmp>
c00175f2:	83 c4 10             	add    esp,0x10
c00175f5:	85 c0                	test   eax,eax
c00175f7:	75 0c                	jne    c0017605 <CPU::detectFeatures()+0x391>
c00175f9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017603:	eb 46                	jmp    c001764b <CPU::detectFeatures()+0x3d7>
c0017605:	50                   	push   eax
c0017606:	50                   	push   eax
c0017607:	68 cf a2 03 c0       	push   0xc003a2cf
c001760c:	57                   	push   edi
c001760d:	e8 68 92 fe ff       	call   c000087a <strcmp>
c0017612:	83 c4 10             	add    esp,0x10
c0017615:	85 c0                	test   eax,eax
c0017617:	74 e0                	je     c00175f9 <CPU::detectFeatures()+0x385>
c0017619:	50                   	push   eax
c001761a:	50                   	push   eax
c001761b:	68 dc a2 03 c0       	push   0xc003a2dc
c0017620:	57                   	push   edi
c0017621:	e8 54 92 fe ff       	call   c000087a <strcmp>
c0017626:	83 c4 10             	add    esp,0x10
c0017629:	85 c0                	test   eax,eax
c001762b:	74 cc                	je     c00175f9 <CPU::detectFeatures()+0x385>
c001762d:	51                   	push   ecx
c001762e:	51                   	push   ecx
c001762f:	68 e9 a2 03 c0       	push   0xc003a2e9
c0017634:	57                   	push   edi
c0017635:	e8 40 92 fe ff       	call   c000087a <strcmp>
c001763a:	83 c4 10             	add    esp,0x10
c001763d:	85 c0                	test   eax,eax
c001763f:	74 b8                	je     c00175f9 <CPU::detectFeatures()+0x385>
c0017641:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001764b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017650:	0f 86 be 00 00 00    	jbe    c0017714 <CPU::detectFeatures()+0x4a0>
c0017656:	83 ec 0c             	sub    esp,0xc
c0017659:	68 80 00 00 00       	push   0x80
c001765e:	e8 10 fb ff ff       	call   c0017173 <cpuidCheckExtendedEBX(unsigned int)>
c0017663:	83 e0 01             	and    eax,0x1
c0017666:	c1 e0 06             	shl    eax,0x6
c0017669:	88 c2                	mov    dl,al
c001766b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017671:	83 e0 bf             	and    eax,0xffffffbf
c0017674:	09 d0                	or     eax,edx
c0017676:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001767c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017683:	e8 eb fa ff ff       	call   c0017173 <cpuidCheckExtendedEBX(unsigned int)>
c0017688:	83 e0 01             	and    eax,0x1
c001768b:	c1 e0 04             	shl    eax,0x4
c001768e:	88 c2                	mov    dl,al
c0017690:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017696:	83 e0 ef             	and    eax,0xffffffef
c0017699:	09 d0                	or     eax,edx
c001769b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00176a1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00176a8:	e8 c6 fa ff ff       	call   c0017173 <cpuidCheckExtendedEBX(unsigned int)>
c00176ad:	c1 e0 07             	shl    eax,0x7
c00176b0:	88 c2                	mov    dl,al
c00176b2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00176b8:	83 e0 7f             	and    eax,0x7f
c00176bb:	09 d0                	or     eax,edx
c00176bd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00176c3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00176ca:	e8 d1 fa ff ff       	call   c00171a0 <cpuidCheckExtendedECX(unsigned int)>
c00176cf:	83 e0 01             	and    eax,0x1
c00176d2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00176d9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00176df:	83 e0 f7             	and    eax,0xfffffff7
c00176e2:	09 d0                	or     eax,edx
c00176e4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00176ea:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00176f1:	e8 aa fa ff ff       	call   c00171a0 <cpuidCheckExtendedECX(unsigned int)>
c00176f6:	83 c4 10             	add    esp,0x10
c00176f9:	83 e0 01             	and    eax,0x1
c00176fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017703:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017709:	83 e0 fb             	and    eax,0xfffffffb
c001770c:	09 d0                	or     eax,edx
c001770e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017714:	83 ec 0c             	sub    esp,0xc
c0017717:	56                   	push   esi
c0017718:	55                   	push   ebp
c0017719:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001771d:	57                   	push   edi
c001771e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017722:	50                   	push   eax
c0017723:	6a 01                	push   0x1
c0017725:	e8 6c f9 ff ff       	call   c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001772a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001772e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017734:	88 ca                	mov    dl,cl
c0017736:	83 e0 f0             	and    eax,0xfffffff0
c0017739:	83 e2 0f             	and    edx,0xf
c001773c:	09 d0                	or     eax,edx
c001773e:	88 ca                	mov    dl,cl
c0017740:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0017746:	c0 ea 04             	shr    dl,0x4
c0017749:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001774d:	0f b6 c2             	movzx  eax,dl
c0017750:	83 c4 20             	add    esp,0x20
c0017753:	c1 e0 06             	shl    eax,0x6
c0017756:	89 c5                	mov    ebp,eax
c0017758:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001775e:	66 25 3f c0          	and    ax,0xc03f
c0017762:	09 e8                	or     eax,ebp
c0017764:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001776b:	89 c8                	mov    eax,ecx
c001776d:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0017773:	c1 e8 08             	shr    eax,0x8
c0017776:	83 e2 3f             	and    edx,0x3f
c0017779:	83 e0 0f             	and    eax,0xf
c001777c:	89 c5                	mov    ebp,eax
c001777e:	c1 e5 06             	shl    ebp,0x6
c0017781:	09 d5                	or     ebp,edx
c0017783:	89 ea                	mov    edx,ebp
c0017785:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001778b:	88 c2                	mov    dl,al
c001778d:	c0 ea 02             	shr    dl,0x2
c0017790:	89 d5                	mov    ebp,edx
c0017792:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0017798:	83 e2 c0             	and    edx,0xffffffc0
c001779b:	09 d5                	or     ebp,edx
c001779d:	89 ea                	mov    edx,ebp
c001779f:	89 cd                	mov    ebp,ecx
c00177a1:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00177a7:	c1 ed 0c             	shr    ebp,0xc
c00177aa:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00177b0:	83 e5 03             	and    ebp,0x3
c00177b3:	83 e2 cf             	and    edx,0xffffffcf
c00177b6:	c1 e5 04             	shl    ebp,0x4
c00177b9:	09 d5                	or     ebp,edx
c00177bb:	3c 06                	cmp    al,0x6
c00177bd:	89 ea                	mov    edx,ebp
c00177bf:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00177c5:	74 04                	je     c00177cb <CPU::detectFeatures()+0x557>
c00177c7:	3c 0f                	cmp    al,0xf
c00177c9:	75 5c                	jne    c0017827 <CPU::detectFeatures()+0x5b3>
c00177cb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00177cf:	89 cd                	mov    ebp,ecx
c00177d1:	c1 ed 10             	shr    ebp,0x10
c00177d4:	c1 e5 04             	shl    ebp,0x4
c00177d7:	09 ea                	or     edx,ebp
c00177d9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00177df:	0f b6 d2             	movzx  edx,dl
c00177e2:	66 81 e5 3f c0       	and    bp,0xc03f
c00177e7:	c1 e2 06             	shl    edx,0x6
c00177ea:	09 ea                	or     edx,ebp
c00177ec:	3c 0f                	cmp    al,0xf
c00177ee:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00177f5:	75 30                	jne    c0017827 <CPU::detectFeatures()+0x5b3>
c00177f7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00177fd:	c1 e9 14             	shr    ecx,0x14
c0017800:	83 e0 3f             	and    eax,0x3f
c0017803:	83 c1 0f             	add    ecx,0xf
c0017806:	88 ca                	mov    dl,cl
c0017808:	c0 e9 02             	shr    cl,0x2
c001780b:	c1 e2 06             	shl    edx,0x6
c001780e:	09 d0                	or     eax,edx
c0017810:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0017816:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001781c:	83 e0 c0             	and    eax,0xffffffc0
c001781f:	09 c1                	or     ecx,eax
c0017821:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0017827:	83 ec 0c             	sub    esp,0xc
c001782a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017831:	56                   	push   esi
c0017832:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017836:	50                   	push   eax
c0017837:	57                   	push   edi
c0017838:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001783c:	55                   	push   ebp
c001783d:	68 00 00 00 80       	push   0x80000000
c0017842:	e8 4f f8 ff ff       	call   c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017847:	83 c4 20             	add    esp,0x20
c001784a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0017852:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017856:	76 1e                	jbe    c0017876 <CPU::detectFeatures()+0x602>
c0017858:	83 ec 0c             	sub    esp,0xc
c001785b:	56                   	push   esi
c001785c:	50                   	push   eax
c001785d:	57                   	push   edi
c001785e:	55                   	push   ebp
c001785f:	68 01 00 00 80       	push   0x80000001
c0017864:	e8 2d f8 ff ff       	call   c0017096 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017869:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0017873:	83 c4 20             	add    esp,0x20
c0017876:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001787c:	83 f8 01             	cmp    eax,0x1
c001787f:	75 6f                	jne    c00178f0 <CPU::detectFeatures()+0x67c>
c0017881:	51                   	push   ecx
c0017882:	51                   	push   ecx
c0017883:	68 f5 a2 03 c0       	push   0xc003a2f5
c0017888:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001788c:	56                   	push   esi
c001788d:	e8 62 8f fe ff       	call   c00007f4 <strcpy>
c0017892:	5f                   	pop    edi
c0017893:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017899:	5d                   	pop    ebp
c001789a:	66 c1 e8 06          	shr    ax,0x6
c001789e:	0f b6 c0             	movzx  eax,al
c00178a1:	50                   	push   eax
c00178a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00178a8:	c1 e8 0e             	shr    eax,0xe
c00178ab:	0f b6 c0             	movzx  eax,al
c00178ae:	50                   	push   eax
c00178af:	e8 8d f4 ff ff       	call   c0016d41 <lookupIntelCPUName(unsigned char, unsigned char)>
c00178b4:	5a                   	pop    edx
c00178b5:	59                   	pop    ecx
c00178b6:	50                   	push   eax
c00178b7:	56                   	push   esi
c00178b8:	e8 84 90 fe ff       	call   c0000941 <strcat>
c00178bd:	5f                   	pop    edi
c00178be:	5d                   	pop    ebp
c00178bf:	56                   	push   esi
c00178c0:	53                   	push   ebx
c00178c1:	e8 c0 c0 ff ff       	call   c0013986 <Device::setName(char const*)>
c00178c6:	58                   	pop    eax
c00178c7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00178cd:	5a                   	pop    edx
c00178ce:	68 fc a2 03 c0       	push   0xc003a2fc
c00178d3:	50                   	push   eax
c00178d4:	e8 a1 8f fe ff       	call   c000087a <strcmp>
c00178d9:	83 c4 10             	add    esp,0x10
c00178dc:	85 c0                	test   eax,eax
c00178de:	0f 85 73 03 00 00    	jne    c0017c57 <CPU::detectFeatures()+0x9e3>
c00178e4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00178eb:	e9 67 03 00 00       	jmp    c0017c57 <CPU::detectFeatures()+0x9e3>
c00178f0:	83 f8 02             	cmp    eax,0x2
c00178f3:	0f 85 b5 00 00 00    	jne    c00179ae <CPU::detectFeatures()+0x73a>
c00178f9:	57                   	push   edi
c00178fa:	57                   	push   edi
c00178fb:	68 0e a3 03 c0       	push   0xc003a30e
c0017900:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0017904:	56                   	push   esi
c0017905:	e8 ea 8e fe ff       	call   c00007f4 <strcpy>
c001790a:	5d                   	pop    ebp
c001790b:	58                   	pop    eax
c001790c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017912:	66 c1 e8 06          	shr    ax,0x6
c0017916:	0f b6 c0             	movzx  eax,al
c0017919:	50                   	push   eax
c001791a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017920:	c1 e8 0e             	shr    eax,0xe
c0017923:	0f b6 c0             	movzx  eax,al
c0017926:	50                   	push   eax
c0017927:	e8 81 f2 ff ff       	call   c0016bad <lookupAMDCPUName(unsigned char, unsigned char)>
c001792c:	5a                   	pop    edx
c001792d:	59                   	pop    ecx
c001792e:	50                   	push   eax
c001792f:	56                   	push   esi
c0017930:	e8 0c 90 fe ff       	call   c0000941 <strcat>
c0017935:	5f                   	pop    edi
c0017936:	5d                   	pop    ebp
c0017937:	56                   	push   esi
c0017938:	53                   	push   ebx
c0017939:	e8 48 c0 ff ff       	call   c0013986 <Device::setName(char const*)>
c001793e:	58                   	pop    eax
c001793f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0017945:	5a                   	pop    edx
c0017946:	68 13 a3 03 c0       	push   0xc003a313
c001794b:	50                   	push   eax
c001794c:	e8 29 8f fe ff       	call   c000087a <strcmp>
c0017951:	83 c4 10             	add    esp,0x10
c0017954:	85 c0                	test   eax,eax
c0017956:	75 20                	jne    c0017978 <CPU::detectFeatures()+0x704>
c0017958:	8b 15 a8 ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baa8
c001795e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0017964:	a8 01                	test   al,0x1
c0017966:	74 10                	je     c0017978 <CPU::detectFeatures()+0x704>
c0017968:	83 e0 fe             	and    eax,0xfffffffe
c001796b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0017971:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0017978:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001797e:	c1 e8 0e             	shr    eax,0xe
c0017981:	3c 05                	cmp    al,0x5
c0017983:	0f 85 ce 02 00 00    	jne    c0017c57 <CPU::detectFeatures()+0x9e3>
c0017989:	56                   	push   esi
c001798a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017990:	83 e0 0f             	and    eax,0xf
c0017993:	50                   	push   eax
c0017994:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001799a:	66 c1 e8 06          	shr    ax,0x6
c001799e:	0f b6 c0             	movzx  eax,al
c00179a1:	50                   	push   eax
c00179a2:	6a 05                	push   0x5
c00179a4:	e8 7a f6 ff ff       	call   c0017023 <AMD_K6_writeback(int, int, int)>
c00179a9:	e9 1f 02 00 00       	jmp    c0017bcd <CPU::detectFeatures()+0x959>
c00179ae:	8d 50 fd             	lea    edx,[eax-0x3]
c00179b1:	83 fa 01             	cmp    edx,0x1
c00179b4:	76 09                	jbe    c00179bf <CPU::detectFeatures()+0x74b>
c00179b6:	83 f8 06             	cmp    eax,0x6
c00179b9:	0f 85 91 01 00 00    	jne    c0017b50 <CPU::detectFeatures()+0x8dc>
c00179bf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00179c5:	c1 ea 0e             	shr    edx,0xe
c00179c8:	80 fa 05             	cmp    dl,0x5
c00179cb:	75 7b                	jne    c0017a48 <CPU::detectFeatures()+0x7d4>
c00179cd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00179d3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00179d8:	66 81 fa 00 01       	cmp    dx,0x100
c00179dd:	75 0c                	jne    c00179eb <CPU::detectFeatures()+0x777>
c00179df:	51                   	push   ecx
c00179e0:	51                   	push   ecx
c00179e1:	68 1a a3 03 c0       	push   0xc003a31a
c00179e6:	e9 dc 01 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c00179eb:	66 81 fa 00 02       	cmp    dx,0x200
c00179f0:	75 0c                	jne    c00179fe <CPU::detectFeatures()+0x78a>
c00179f2:	52                   	push   edx
c00179f3:	52                   	push   edx
c00179f4:	68 2d a3 03 c0       	push   0xc003a32d
c00179f9:	e9 c9 01 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c00179fe:	66 81 fa 40 02       	cmp    dx,0x240
c0017a03:	75 0c                	jne    c0017a11 <CPU::detectFeatures()+0x79d>
c0017a05:	50                   	push   eax
c0017a06:	50                   	push   eax
c0017a07:	68 3f a3 03 c0       	push   0xc003a33f
c0017a0c:	e9 b6 01 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017a11:	83 f8 06             	cmp    eax,0x6
c0017a14:	75 0c                	jne    c0017a22 <CPU::detectFeatures()+0x7ae>
c0017a16:	50                   	push   eax
c0017a17:	50                   	push   eax
c0017a18:	68 51 a3 03 c0       	push   0xc003a351
c0017a1d:	e9 a5 01 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017a22:	83 f8 04             	cmp    eax,0x4
c0017a25:	75 0c                	jne    c0017a33 <CPU::detectFeatures()+0x7bf>
c0017a27:	50                   	push   eax
c0017a28:	50                   	push   eax
c0017a29:	68 5d a3 03 c0       	push   0xc003a35d
c0017a2e:	e9 94 01 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017a33:	83 f8 03             	cmp    eax,0x3
c0017a36:	0f 85 1b 02 00 00    	jne    c0017c57 <CPU::detectFeatures()+0x9e3>
c0017a3c:	50                   	push   eax
c0017a3d:	50                   	push   eax
c0017a3e:	68 65 a3 03 c0       	push   0xc003a365
c0017a43:	e9 7f 01 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017a48:	80 fa 06             	cmp    dl,0x6
c0017a4b:	0f 85 db 00 00 00    	jne    c0017b2c <CPU::detectFeatures()+0x8b8>
c0017a51:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0017a57:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0017a5c:	66 81 fa 80 01       	cmp    dx,0x180
c0017a61:	75 0c                	jne    c0017a6f <CPU::detectFeatures()+0x7fb>
c0017a63:	50                   	push   eax
c0017a64:	50                   	push   eax
c0017a65:	68 70 a3 03 c0       	push   0xc003a370
c0017a6a:	e9 58 01 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017a6f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0017a75:	66 f7 c1 80 ff       	test   cx,0xff80
c0017a7a:	75 0c                	jne    c0017a88 <CPU::detectFeatures()+0x814>
c0017a7c:	50                   	push   eax
c0017a7d:	50                   	push   eax
c0017a7e:	68 80 a3 03 c0       	push   0xc003a380
c0017a83:	e9 3f 01 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017a88:	66 81 fa 40 02       	cmp    dx,0x240
c0017a8d:	75 0c                	jne    c0017a9b <CPU::detectFeatures()+0x827>
c0017a8f:	55                   	push   ebp
c0017a90:	55                   	push   ebp
c0017a91:	68 87 a3 03 c0       	push   0xc003a387
c0017a96:	e9 2c 01 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017a9b:	66 81 fa 80 02       	cmp    dx,0x280
c0017aa0:	75 0c                	jne    c0017aae <CPU::detectFeatures()+0x83a>
c0017aa2:	57                   	push   edi
c0017aa3:	57                   	push   edi
c0017aa4:	68 90 a3 03 c0       	push   0xc003a390
c0017aa9:	e9 19 01 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017aae:	66 81 fa 40 03       	cmp    dx,0x340
c0017ab3:	74 ed                	je     c0017aa2 <CPU::detectFeatures()+0x82e>
c0017ab5:	66 81 fa c0 03       	cmp    dx,0x3c0
c0017aba:	75 0c                	jne    c0017ac8 <CPU::detectFeatures()+0x854>
c0017abc:	56                   	push   esi
c0017abd:	56                   	push   esi
c0017abe:	68 97 a3 03 c0       	push   0xc003a397
c0017ac3:	e9 ff 00 00 00       	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017ac8:	83 f8 06             	cmp    eax,0x6
c0017acb:	0f 84 45 ff ff ff    	je     c0017a16 <CPU::detectFeatures()+0x7a2>
c0017ad1:	83 f8 04             	cmp    eax,0x4
c0017ad4:	0f 84 4d ff ff ff    	je     c0017a27 <CPU::detectFeatures()+0x7b3>
c0017ada:	83 f8 03             	cmp    eax,0x3
c0017add:	0f 85 74 01 00 00    	jne    c0017c57 <CPU::detectFeatures()+0x9e3>
c0017ae3:	51                   	push   ecx
c0017ae4:	51                   	push   ecx
c0017ae5:	68 a0 a3 03 c0       	push   0xc003a3a0
c0017aea:	53                   	push   ebx
c0017aeb:	e8 96 be ff ff       	call   c0013986 <Device::setName(char const*)>
c0017af0:	b1 c1                	mov    cl,0xc1
c0017af2:	88 c8                	mov    al,cl
c0017af4:	e6 22                	out    0x22,al
c0017af6:	e4 23                	in     al,0x23
c0017af8:	88 c2                	mov    dl,al
c0017afa:	88 c8                	mov    al,cl
c0017afc:	e6 22                	out    0x22,al
c0017afe:	88 d0                	mov    al,dl
c0017b00:	83 c8 10             	or     eax,0x10
c0017b03:	e6 23                	out    0x23,al
c0017b05:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0017b0c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0017b0f:	89 d0                	mov    eax,edx
c0017b11:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0017b17:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0017b1b:	40                   	inc    eax
c0017b1c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0017b22:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0017b27:	e9 a1 00 00 00       	jmp    c0017bcd <CPU::detectFeatures()+0x959>
c0017b2c:	83 f8 06             	cmp    eax,0x6
c0017b2f:	0f 84 e1 fe ff ff    	je     c0017a16 <CPU::detectFeatures()+0x7a2>
c0017b35:	83 f8 04             	cmp    eax,0x4
c0017b38:	0f 84 e9 fe ff ff    	je     c0017a27 <CPU::detectFeatures()+0x7b3>
c0017b3e:	83 f8 03             	cmp    eax,0x3
c0017b41:	0f 85 10 01 00 00    	jne    c0017c57 <CPU::detectFeatures()+0x9e3>
c0017b47:	52                   	push   edx
c0017b48:	52                   	push   edx
c0017b49:	68 ab a3 03 c0       	push   0xc003a3ab
c0017b4e:	eb 77                	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017b50:	83 f8 07             	cmp    eax,0x7
c0017b53:	75 09                	jne    c0017b5e <CPU::detectFeatures()+0x8ea>
c0017b55:	50                   	push   eax
c0017b56:	50                   	push   eax
c0017b57:	68 b5 a3 03 c0       	push   0xc003a3b5
c0017b5c:	eb 69                	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017b5e:	83 f8 0a             	cmp    eax,0xa
c0017b61:	75 09                	jne    c0017b6c <CPU::detectFeatures()+0x8f8>
c0017b63:	50                   	push   eax
c0017b64:	50                   	push   eax
c0017b65:	68 c0 a3 03 c0       	push   0xc003a3c0
c0017b6a:	eb 5b                	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017b6c:	83 f8 0b             	cmp    eax,0xb
c0017b6f:	75 09                	jne    c0017b7a <CPU::detectFeatures()+0x906>
c0017b71:	50                   	push   eax
c0017b72:	50                   	push   eax
c0017b73:	68 c8 a3 03 c0       	push   0xc003a3c8
c0017b78:	eb 4d                	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017b7a:	83 f8 08             	cmp    eax,0x8
c0017b7d:	75 09                	jne    c0017b88 <CPU::detectFeatures()+0x914>
c0017b7f:	50                   	push   eax
c0017b80:	50                   	push   eax
c0017b81:	68 d1 a3 03 c0       	push   0xc003a3d1
c0017b86:	eb 3f                	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017b88:	83 f8 09             	cmp    eax,0x9
c0017b8b:	75 09                	jne    c0017b96 <CPU::detectFeatures()+0x922>
c0017b8d:	50                   	push   eax
c0017b8e:	50                   	push   eax
c0017b8f:	68 d9 a3 03 c0       	push   0xc003a3d9
c0017b94:	eb 31                	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017b96:	83 f8 05             	cmp    eax,0x5
c0017b99:	75 09                	jne    c0017ba4 <CPU::detectFeatures()+0x930>
c0017b9b:	50                   	push   eax
c0017b9c:	50                   	push   eax
c0017b9d:	68 e1 a3 03 c0       	push   0xc003a3e1
c0017ba2:	eb 23                	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017ba4:	83 f8 0c             	cmp    eax,0xc
c0017ba7:	75 09                	jne    c0017bb2 <CPU::detectFeatures()+0x93e>
c0017ba9:	55                   	push   ebp
c0017baa:	55                   	push   ebp
c0017bab:	68 ef a3 03 c0       	push   0xc003a3ef
c0017bb0:	eb 15                	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017bb2:	83 f8 0d             	cmp    eax,0xd
c0017bb5:	75 09                	jne    c0017bc0 <CPU::detectFeatures()+0x94c>
c0017bb7:	57                   	push   edi
c0017bb8:	57                   	push   edi
c0017bb9:	68 fa a3 03 c0       	push   0xc003a3fa
c0017bbe:	eb 07                	jmp    c0017bc7 <CPU::detectFeatures()+0x953>
c0017bc0:	56                   	push   esi
c0017bc1:	56                   	push   esi
c0017bc2:	68 0e a4 03 c0       	push   0xc003a40e
c0017bc7:	53                   	push   ebx
c0017bc8:	e8 b9 bd ff ff       	call   c0013986 <Device::setName(char const*)>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	e9 82 00 00 00       	jmp    c0017c57 <CPU::detectFeatures()+0x9e3>
c0017bd5:	51                   	push   ecx
c0017bd6:	51                   	push   ecx
c0017bd7:	68 5a a2 03 c0       	push   0xc003a25a
c0017bdc:	57                   	push   edi
c0017bdd:	e8 12 8c fe ff       	call   c00007f4 <strcpy>
c0017be2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017bec:	e8 8e 85 fe ff       	call   c000017f <is486>
c0017bf1:	83 c4 10             	add    esp,0x10
c0017bf4:	85 c0                	test   eax,eax
c0017bf6:	74 2d                	je     c0017c25 <CPU::detectFeatures()+0x9b1>
c0017bf8:	52                   	push   edx
c0017bf9:	52                   	push   edx
c0017bfa:	68 1a a4 03 c0       	push   0xc003a41a
c0017bff:	53                   	push   ebx
c0017c00:	e8 81 bd ff ff       	call   c0013986 <Device::setName(char const*)>
c0017c05:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017c0c:	e8 04 6e 00 00       	call   c001ea15 <CPU::readCR0()>
c0017c11:	83 c4 10             	add    esp,0x10
c0017c14:	83 e0 14             	and    eax,0x14
c0017c17:	83 f8 04             	cmp    eax,0x4
c0017c1a:	75 1f                	jne    c0017c3b <CPU::detectFeatures()+0x9c7>
c0017c1c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0017c23:	eb 32                	jmp    c0017c57 <CPU::detectFeatures()+0x9e3>
c0017c25:	50                   	push   eax
c0017c26:	50                   	push   eax
c0017c27:	68 25 a4 03 c0       	push   0xc003a425
c0017c2c:	53                   	push   ebx
c0017c2d:	e8 54 bd ff ff       	call   c0013986 <Device::setName(char const*)>
c0017c32:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0017c39:	eb d1                	jmp    c0017c0c <CPU::detectFeatures()+0x998>
c0017c3b:	e8 1a 85 fe ff       	call   c000015a <hasLegacyFPU>
c0017c40:	83 e0 01             	and    eax,0x1
c0017c43:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c46:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017c4c:	83 e0 fd             	and    eax,0xfffffffd
c0017c4f:	09 d0                	or     eax,edx
c0017c51:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017c57:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0017c5e:	83 c4 4c             	add    esp,0x4c
c0017c61:	5b                   	pop    ebx
c0017c62:	5e                   	pop    esi
c0017c63:	5f                   	pop    edi
c0017c64:	5d                   	pop    ebp
c0017c65:	c3                   	ret    

c0017c66 <CPU::setupSMEP()>:
c0017c66:	83 ec 0c             	sub    esp,0xc
c0017c69:	e8 dd 6d 00 00       	call   c001ea4b <CPU::readCR4()>
c0017c6e:	0d 00 00 10 00       	or     eax,0x100000
c0017c73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c77:	83 c4 0c             	add    esp,0xc
c0017c7a:	e9 f2 74 00 00       	jmp    c001f171 <CPU::writeCR4(unsigned long)>
c0017c7f:	90                   	nop

c0017c80 <CPU::setupUMIP()>:
c0017c80:	83 ec 0c             	sub    esp,0xc
c0017c83:	e8 c3 6d 00 00       	call   c001ea4b <CPU::readCR4()>
c0017c88:	80 cc 08             	or     ah,0x8
c0017c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c8f:	83 c4 0c             	add    esp,0xc
c0017c92:	e9 da 74 00 00       	jmp    c001f171 <CPU::writeCR4(unsigned long)>
c0017c97:	90                   	nop

c0017c98 <CPU::setupTSC()>:
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	e8 ab 6d 00 00       	call   c001ea4b <CPU::readCR4()>
c0017ca0:	83 c8 04             	or     eax,0x4
c0017ca3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ca7:	83 c4 0c             	add    esp,0xc
c0017caa:	e9 c2 74 00 00       	jmp    c001f171 <CPU::writeCR4(unsigned long)>
c0017caf:	90                   	nop

c0017cb0 <CPU::setupLargePages()>:
c0017cb0:	83 ec 0c             	sub    esp,0xc
c0017cb3:	e8 93 6d 00 00       	call   c001ea4b <CPU::readCR4()>
c0017cb8:	83 c8 10             	or     eax,0x10
c0017cbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cbf:	83 c4 0c             	add    esp,0xc
c0017cc2:	e9 aa 74 00 00       	jmp    c001f171 <CPU::writeCR4(unsigned long)>
c0017cc7:	90                   	nop

c0017cc8 <CPU::setupPAT()>:
c0017cc8:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0017ccd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0017cd4:	74 2c                	je     c0017d02 <CPU::setupPAT()+0x3a>
c0017cd6:	53                   	push   ebx
c0017cd7:	83 ec 10             	sub    esp,0x10
c0017cda:	68 77 02 00 00       	push   0x277
c0017cdf:	50                   	push   eax
c0017ce0:	e8 03 39 ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c0017ce5:	83 e2 f8             	and    edx,0xfffffff8
c0017ce8:	83 ca 01             	or     edx,0x1
c0017ceb:	52                   	push   edx
c0017cec:	50                   	push   eax
c0017ced:	68 77 02 00 00       	push   0x277
c0017cf2:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c0017cf8:	e8 17 39 ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017cfd:	83 c4 28             	add    esp,0x28
c0017d00:	5b                   	pop    ebx
c0017d01:	c3                   	ret    
c0017d02:	c3                   	ret    
c0017d03:	90                   	nop

c0017d04 <CPU::setupMTRR()>:
c0017d04:	c3                   	ret    
c0017d05:	90                   	nop

c0017d06 <CPU::setupGlobalPages()>:
c0017d06:	83 ec 0c             	sub    esp,0xc
c0017d09:	e8 3d 6d 00 00       	call   c001ea4b <CPU::readCR4()>
c0017d0e:	0c 80                	or     al,0x80
c0017d10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d14:	83 c4 0c             	add    esp,0xc
c0017d17:	e9 55 74 00 00       	jmp    c001f171 <CPU::writeCR4(unsigned long)>

c0017d1c <CPU::allowUsermodeDataAccess()>:
c0017d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d20:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017d27:	74 03                	je     c0017d2c <CPU::allowUsermodeDataAccess()+0x10>
c0017d29:	0f 01 cb             	stac   
c0017d2c:	c3                   	ret    
c0017d2d:	90                   	nop

c0017d2e <CPU::prohibitUsermodeDataAccess()>:
c0017d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d32:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017d39:	74 03                	je     c0017d3e <CPU::prohibitUsermodeDataAccess()+0x10>
c0017d3b:	0f 01 ca             	clac   
c0017d3e:	c3                   	ret    
c0017d3f:	90                   	nop

c0017d40 <CPU::setupSMAP()>:
c0017d40:	53                   	push   ebx
c0017d41:	83 ec 08             	sub    esp,0x8
c0017d44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d48:	e8 fe 6c 00 00       	call   c001ea4b <CPU::readCR4()>
c0017d4d:	83 ec 0c             	sub    esp,0xc
c0017d50:	0d 00 00 20 00       	or     eax,0x200000
c0017d55:	50                   	push   eax
c0017d56:	e8 16 74 00 00       	call   c001f171 <CPU::writeCR4(unsigned long)>
c0017d5b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017d5f:	83 c4 18             	add    esp,0x18
c0017d62:	5b                   	pop    ebx
c0017d63:	eb c9                	jmp    c0017d2e <CPU::prohibitUsermodeDataAccess()>
c0017d65:	90                   	nop

c0017d66 <CPU::setupFeatures()>:
c0017d66:	53                   	push   ebx
c0017d67:	83 ec 08             	sub    esp,0x8
c0017d6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d6e:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017d75:	74 0c                	je     c0017d83 <CPU::setupFeatures()+0x1d>
c0017d77:	83 ec 0c             	sub    esp,0xc
c0017d7a:	53                   	push   ebx
c0017d7b:	e8 e6 fe ff ff       	call   c0017c66 <CPU::setupSMEP()>
c0017d80:	83 c4 10             	add    esp,0x10
c0017d83:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017d8a:	74 0c                	je     c0017d98 <CPU::setupFeatures()+0x32>
c0017d8c:	83 ec 0c             	sub    esp,0xc
c0017d8f:	53                   	push   ebx
c0017d90:	e8 ab ff ff ff       	call   c0017d40 <CPU::setupSMAP()>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017d9f:	74 0c                	je     c0017dad <CPU::setupFeatures()+0x47>
c0017da1:	83 ec 0c             	sub    esp,0xc
c0017da4:	53                   	push   ebx
c0017da5:	e8 d6 fe ff ff       	call   c0017c80 <CPU::setupUMIP()>
c0017daa:	83 c4 10             	add    esp,0x10
c0017dad:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017db4:	74 0c                	je     c0017dc2 <CPU::setupFeatures()+0x5c>
c0017db6:	83 ec 0c             	sub    esp,0xc
c0017db9:	53                   	push   ebx
c0017dba:	e8 d9 fe ff ff       	call   c0017c98 <CPU::setupTSC()>
c0017dbf:	83 c4 10             	add    esp,0x10
c0017dc2:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017dc9:	74 0c                	je     c0017dd7 <CPU::setupFeatures()+0x71>
c0017dcb:	83 ec 0c             	sub    esp,0xc
c0017dce:	53                   	push   ebx
c0017dcf:	e8 dc fe ff ff       	call   c0017cb0 <CPU::setupLargePages()>
c0017dd4:	83 c4 10             	add    esp,0x10
c0017dd7:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017dde:	74 0c                	je     c0017dec <CPU::setupFeatures()+0x86>
c0017de0:	83 ec 0c             	sub    esp,0xc
c0017de3:	53                   	push   ebx
c0017de4:	e8 1d ff ff ff       	call   c0017d06 <CPU::setupGlobalPages()>
c0017de9:	83 c4 10             	add    esp,0x10
c0017dec:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017df3:	74 0d                	je     c0017e02 <CPU::setupFeatures()+0x9c>
c0017df5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017df9:	83 c4 08             	add    esp,0x8
c0017dfc:	5b                   	pop    ebx
c0017dfd:	e9 c6 fe ff ff       	jmp    c0017cc8 <CPU::setupPAT()>
c0017e02:	83 c4 08             	add    esp,0x8
c0017e05:	5b                   	pop    ebx
c0017e06:	c3                   	ret    
c0017e07:	90                   	nop

c0017e08 <CPU::open(int, int, void*)>:
c0017e08:	57                   	push   edi
c0017e09:	56                   	push   esi
c0017e0a:	53                   	push   ebx
c0017e0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017e13:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0017e19:	83 ec 0c             	sub    esp,0xc
c0017e1c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017e22:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017e28:	50                   	push   eax
c0017e29:	e8 2a 4a ff ff       	call   c000c858 <GDT::setup()>
c0017e2e:	83 c4 0c             	add    esp,0xc
c0017e31:	6a 00                	push   0x0
c0017e33:	68 ef be ad de       	push   0xdeadbeef
c0017e38:	57                   	push   edi
c0017e39:	e8 f2 8f ff ff       	call   c0010e30 <TSS::setup(unsigned long, unsigned long)>
c0017e3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017e41:	e8 ca 8f ff ff       	call   c0010e10 <TSS::flush()>
c0017e46:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017e4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e4f:	e8 5e 4c ff ff       	call   c000cab2 <IDT::setup()>
c0017e54:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017e5b:	e8 08 73 00 00       	call   c001f168 <CPU::writeDR7(unsigned long)>
c0017e60:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017e6a:	e8 20 5c ff ff       	call   c000da8f <Phys::allocatePage()>
c0017e6f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017e75:	89 30                	mov    DWORD PTR [eax],esi
c0017e77:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017e7d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017e80:	58                   	pop    eax
c0017e81:	5a                   	pop    edx
c0017e82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017e88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017e8c:	e8 7f 9d ff ff       	call   c0011c10 <VAS::setCPUSpecific(unsigned long)>
c0017e91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e94:	e8 db f3 ff ff       	call   c0017274 <CPU::detectFeatures()>
c0017e99:	e8 40 c8 ff ff       	call   c00146de <setupInterruptController()>
c0017e9e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017ea4:	a1 54 bc 03 c0       	mov    eax,ds:0xc003bc54
c0017ea9:	83 e0 10             	and    eax,0x10
c0017eac:	83 f8 01             	cmp    eax,0x1
c0017eaf:	19 c0                	sbb    eax,eax
c0017eb1:	83 e0 46             	and    eax,0x46
c0017eb4:	83 c0 1e             	add    eax,0x1e
c0017eb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0017eba:	e8 03 da ff ff       	call   c00158c2 <setupTimer(int)>
c0017ebf:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017ec5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ec8:	e8 99 fe ff ff       	call   c0017d66 <CPU::setupFeatures()>
c0017ecd:	83 c4 10             	add    esp,0x10
c0017ed0:	31 c0                	xor    eax,eax
c0017ed2:	5b                   	pop    ebx
c0017ed3:	5e                   	pop    esi
c0017ed4:	5f                   	pop    edi
c0017ed5:	c3                   	ret    

c0017ed6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017ed6:	55                   	push   ebp
c0017ed7:	57                   	push   edi
c0017ed8:	56                   	push   esi
c0017ed9:	53                   	push   ebx
c0017eda:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017ee0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017ee7:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017ee9:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017eec:	80 fb 40             	cmp    bl,0x40
c0017eef:	75 1b                	jne    c0017f0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017ef1:	8a 16                	mov    dl,BYTE PTR [esi]
c0017ef3:	84 d2                	test   dl,dl
c0017ef5:	0f 84 f1 00 00 00    	je     c0017fec <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017efb:	8d 46 01             	lea    eax,[esi+0x1]
c0017efe:	80 fa 3a             	cmp    dl,0x3a
c0017f01:	74 04                	je     c0017f07 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017f03:	89 c6                	mov    esi,eax
c0017f05:	eb ea                	jmp    c0017ef1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017f07:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017f0a:	89 c6                	mov    esi,eax
c0017f0c:	50                   	push   eax
c0017f0d:	6a 40                	push   0x40
c0017f0f:	6a 00                	push   0x0
c0017f11:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017f15:	50                   	push   eax
c0017f16:	e8 bd 87 fe ff       	call   c00006d8 <memset>
c0017f1b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017f22:	31 c0                	xor    eax,eax
c0017f24:	83 c4 10             	add    esp,0x10
c0017f27:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017f29:	84 c9                	test   cl,cl
c0017f2b:	0f 84 bb 00 00 00    	je     c0017fec <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f31:	3d c7 00 00 00       	cmp    eax,0xc7
c0017f36:	0f 8f b0 00 00 00    	jg     c0017fec <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f3c:	80 f9 0a             	cmp    cl,0xa
c0017f3f:	0f 85 98 00 00 00    	jne    c0017fdd <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017f45:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017f4a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017f4e:	a8 df                	test   al,0xdf
c0017f50:	0f 94 c1             	sete   cl
c0017f53:	3c 23                	cmp    al,0x23
c0017f55:	0f 94 c2             	sete   dl
c0017f58:	08 d1                	or     cl,dl
c0017f5a:	75 4a                	jne    c0017fa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f5c:	8d 50 f7             	lea    edx,[eax-0x9]
c0017f5f:	80 fa 01             	cmp    dl,0x1
c0017f62:	76 42                	jbe    c0017fa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f64:	3c 5b                	cmp    al,0x5b
c0017f66:	75 42                	jne    c0017faa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017f68:	80 fb 40             	cmp    bl,0x40
c0017f6b:	75 39                	jne    c0017fa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f6d:	83 ec 0c             	sub    esp,0xc
c0017f70:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017f74:	52                   	push   edx
c0017f75:	e8 87 87 fe ff       	call   c0000701 <strlen>
c0017f7a:	83 c4 10             	add    esp,0x10
c0017f7d:	83 f8 3f             	cmp    eax,0x3f
c0017f80:	77 6a                	ja     c0017fec <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f82:	50                   	push   eax
c0017f83:	50                   	push   eax
c0017f84:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017f88:	52                   	push   edx
c0017f89:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f8d:	52                   	push   edx
c0017f8e:	e8 61 88 fe ff       	call   c00007f4 <strcpy>
c0017f93:	58                   	pop    eax
c0017f94:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f98:	52                   	push   edx
c0017f99:	e8 63 87 fe ff       	call   c0000701 <strlen>
c0017f9e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017fa3:	83 c4 10             	add    esp,0x10
c0017fa6:	31 d2                	xor    edx,edx
c0017fa8:	eb 3a                	jmp    c0017fe4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017faa:	80 fb 40             	cmp    bl,0x40
c0017fad:	74 06                	je     c0017fb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017faf:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017fb3:	eb 20                	jmp    c0017fd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017fb5:	50                   	push   eax
c0017fb6:	50                   	push   eax
c0017fb7:	55                   	push   ebp
c0017fb8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017fbc:	50                   	push   eax
c0017fbd:	e8 b8 88 fe ff       	call   c000087a <strcmp>
c0017fc2:	83 c4 10             	add    esp,0x10
c0017fc5:	85 c0                	test   eax,eax
c0017fc7:	75 dd                	jne    c0017fa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017fc9:	eb e4                	jmp    c0017faf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017fcb:	8d 50 01             	lea    edx,[eax+0x1]
c0017fce:	80 f9 3d             	cmp    cl,0x3d
c0017fd1:	74 1d                	je     c0017ff0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017fd3:	89 d0                	mov    eax,edx
c0017fd5:	8a 08                	mov    cl,BYTE PTR [eax]
c0017fd7:	84 c9                	test   cl,cl
c0017fd9:	75 f0                	jne    c0017fcb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017fdb:	eb 0f                	jmp    c0017fec <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017fdd:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017fe4:	47                   	inc    edi
c0017fe5:	89 d0                	mov    eax,edx
c0017fe7:	e9 3b ff ff ff       	jmp    c0017f27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017fec:	31 c0                	xor    eax,eax
c0017fee:	eb 33                	jmp    c0018023 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017ff0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017ff4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017ff7:	50                   	push   eax
c0017ff8:	50                   	push   eax
c0017ff9:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017ffd:	50                   	push   eax
c0017ffe:	56                   	push   esi
c0017fff:	e8 76 88 fe ff       	call   c000087a <strcmp>
c0018004:	83 c4 10             	add    esp,0x10
c0018007:	85 c0                	test   eax,eax
c0018009:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001800d:	75 97                	jne    c0017fa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001800f:	51                   	push   ecx
c0018010:	51                   	push   ecx
c0018011:	52                   	push   edx
c0018012:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018019:	e8 d6 87 fe ff       	call   c00007f4 <strcpy>
c001801e:	83 c4 10             	add    esp,0x10
c0018021:	b0 01                	mov    al,0x1
c0018023:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018029:	5b                   	pop    ebx
c001802a:	5e                   	pop    esi
c001802b:	5f                   	pop    edi
c001802c:	5d                   	pop    ebp
c001802d:	c3                   	ret    

c001802e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001802e:	57                   	push   edi
c001802f:	56                   	push   esi
c0018030:	53                   	push   ebx
c0018031:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018037:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c001803e:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018045:	53                   	push   ebx
c0018046:	e8 b6 86 fe ff       	call   c0000701 <strlen>
c001804b:	89 34 24             	mov    DWORD PTR [esp],esi
c001804e:	89 c7                	mov    edi,eax
c0018050:	e8 ac 86 fe ff       	call   c0000701 <strlen>
c0018055:	83 c4 10             	add    esp,0x10
c0018058:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001805c:	31 ff                	xor    edi,edi
c001805e:	3d ff 00 00 00       	cmp    eax,0xff
c0018063:	0f 87 18 01 00 00    	ja     c0018181 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018069:	51                   	push   ecx
c001806a:	51                   	push   ecx
c001806b:	56                   	push   esi
c001806c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018070:	56                   	push   esi
c0018071:	e8 7e 87 fe ff       	call   c00007f4 <strcpy>
c0018076:	58                   	pop    eax
c0018077:	5a                   	pop    edx
c0018078:	68 de 8f 03 c0       	push   0xc0038fde
c001807d:	56                   	push   esi
c001807e:	e8 be 88 fe ff       	call   c0000941 <strcat>
c0018083:	59                   	pop    ecx
c0018084:	58                   	pop    eax
c0018085:	53                   	push   ebx
c0018086:	56                   	push   esi
c0018087:	e8 b5 88 fe ff       	call   c0000941 <strcat>
c001808c:	58                   	pop    eax
c001808d:	5a                   	pop    edx
c001808e:	68 5c a4 03 c0       	push   0xc003a45c
c0018093:	56                   	push   esi
c0018094:	e8 a8 88 fe ff       	call   c0000941 <strcat>
c0018099:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00180a0:	e8 f5 a3 ff ff       	call   c001249a <operator new(unsigned long)>
c00180a5:	83 c4 0c             	add    esp,0xc
c00180a8:	89 c3                	mov    ebx,eax
c00180aa:	ff 35 fc bc 03 c0    	push   DWORD PTR ds:0xc003bcfc
c00180b0:	56                   	push   esi
c00180b1:	50                   	push   eax
c00180b2:	e8 11 a8 ff ff       	call   c00128c8 <File::File(char const*, Process*)>
c00180b7:	59                   	pop    ecx
c00180b8:	5e                   	pop    esi
c00180b9:	6a 01                	push   0x1
c00180bb:	53                   	push   ebx
c00180bc:	e8 6b a8 ff ff       	call   c001292c <File::open(FileOpenMode)>
c00180c1:	83 c4 10             	add    esp,0x10
c00180c4:	85 c0                	test   eax,eax
c00180c6:	74 08                	je     c00180d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c00180c8:	83 ec 0c             	sub    esp,0xc
c00180cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180cd:	53                   	push   ebx
c00180ce:	eb 2e                	jmp    c00180fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c00180d0:	52                   	push   edx
c00180d1:	8d 44 24 07          	lea    eax,[esp+0x7]
c00180d5:	50                   	push   eax
c00180d6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00180da:	50                   	push   eax
c00180db:	53                   	push   ebx
c00180dc:	e8 f7 aa ff ff       	call   c0012bd8 <File::stat(unsigned long long*, bool*)>
c00180e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180e5:	83 c4 10             	add    esp,0x10
c00180e8:	89 c1                	mov    ecx,eax
c00180ea:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00180ee:	75 13                	jne    c0018103 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c00180f0:	83 ec 0c             	sub    esp,0xc
c00180f3:	53                   	push   ebx
c00180f4:	e8 91 a8 ff ff       	call   c001298a <File::close()>
c00180f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018101:	eb 7b                	jmp    c001817e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018103:	83 ec 0c             	sub    esp,0xc
c0018106:	50                   	push   eax
c0018107:	e8 d9 53 ff ff       	call   c000d4e5 <malloc>
c001810c:	89 c6                	mov    esi,eax
c001810e:	58                   	pop    eax
c001810f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018111:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018115:	52                   	push   edx
c0018116:	56                   	push   esi
c0018117:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001811b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001811f:	53                   	push   ebx
c0018120:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018123:	83 c4 20             	add    esp,0x20
c0018126:	85 c0                	test   eax,eax
c0018128:	75 0a                	jne    c0018134 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001812a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001812e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018132:	74 18                	je     c001814c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0018134:	83 ec 0c             	sub    esp,0xc
c0018137:	31 ff                	xor    edi,edi
c0018139:	53                   	push   ebx
c001813a:	e8 4b a8 ff ff       	call   c001298a <File::close()>
c001813f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018141:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018144:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018147:	83 c4 10             	add    esp,0x10
c001814a:	eb 35                	jmp    c0018181 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001814c:	83 ec 0c             	sub    esp,0xc
c001814f:	53                   	push   ebx
c0018150:	e8 35 a8 ff ff       	call   c001298a <File::close()>
c0018155:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018157:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001815a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001815d:	83 c4 0c             	add    esp,0xc
c0018160:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018167:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001816e:	56                   	push   esi
c001816f:	e8 62 fd ff ff       	call   c0017ed6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0018174:	89 34 24             	mov    DWORD PTR [esp],esi
c0018177:	89 c7                	mov    edi,eax
c0018179:	e8 77 53 ff ff       	call   c000d4f5 <free>
c001817e:	83 c4 10             	add    esp,0x10
c0018181:	81 c4 10 01 00 00    	add    esp,0x110
c0018187:	89 f8                	mov    eax,edi
c0018189:	5b                   	pop    ebx
c001818a:	5e                   	pop    esi
c001818b:	5f                   	pop    edi
c001818c:	c3                   	ret    

c001818d <Reg::getLine(char*, char*, char*)>:
c001818d:	57                   	push   edi
c001818e:	56                   	push   esi
c001818f:	53                   	push   ebx
c0018190:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018194:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018198:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001819c:	57                   	push   edi
c001819d:	56                   	push   esi
c001819e:	53                   	push   ebx
c001819f:	68 61 a4 03 c0       	push   0xc003a461
c00181a4:	e8 85 fe ff ff       	call   c001802e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00181a9:	83 c4 10             	add    esp,0x10
c00181ac:	84 c0                	test   al,al
c00181ae:	75 10                	jne    c00181c0 <Reg::getLine(char*, char*, char*)+0x33>
c00181b0:	57                   	push   edi
c00181b1:	56                   	push   esi
c00181b2:	53                   	push   ebx
c00181b3:	68 86 a4 03 c0       	push   0xc003a486
c00181b8:	e8 71 fe ff ff       	call   c001802e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00181bd:	83 c4 10             	add    esp,0x10
c00181c0:	5b                   	pop    ebx
c00181c1:	5e                   	pop    esi
c00181c2:	5f                   	pop    edi
c00181c3:	c3                   	ret    

c00181c4 <Reg::readInt(char*, char*, int*)>:
c00181c4:	55                   	push   ebp
c00181c5:	57                   	push   edi
c00181c6:	56                   	push   esi
c00181c7:	53                   	push   ebx
c00181c8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00181ce:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00181d2:	57                   	push   edi
c00181d3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00181da:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00181e1:	e8 a7 ff ff ff       	call   c001818d <Reg::getLine(char*, char*, char*)>
c00181e6:	83 c4 10             	add    esp,0x10
c00181e9:	84 c0                	test   al,al
c00181eb:	0f 84 b3 00 00 00    	je     c00182a4 <Reg::readInt(char*, char*, int*)+0xe0>
c00181f1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00181f5:	80 fa 2b             	cmp    dl,0x2b
c00181f8:	74 0c                	je     c0018206 <Reg::readInt(char*, char*, int*)+0x42>
c00181fa:	80 fa 2d             	cmp    dl,0x2d
c00181fd:	75 0e                	jne    c001820d <Reg::readInt(char*, char*, int*)+0x49>
c00181ff:	ba 01 00 00 00       	mov    edx,0x1
c0018204:	eb 0b                	jmp    c0018211 <Reg::readInt(char*, char*, int*)+0x4d>
c0018206:	ba 01 00 00 00       	mov    edx,0x1
c001820b:	eb 02                	jmp    c001820f <Reg::readInt(char*, char*, int*)+0x4b>
c001820d:	31 d2                	xor    edx,edx
c001820f:	31 c0                	xor    eax,eax
c0018211:	be 0a 00 00 00       	mov    esi,0xa
c0018216:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001821b:	75 20                	jne    c001823d <Reg::readInt(char*, char*, int*)+0x79>
c001821d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0018221:	80 f9 78             	cmp    cl,0x78
c0018224:	75 0a                	jne    c0018230 <Reg::readInt(char*, char*, int*)+0x6c>
c0018226:	83 c2 02             	add    edx,0x2
c0018229:	be 10 00 00 00       	mov    esi,0x10
c001822e:	eb 0d                	jmp    c001823d <Reg::readInt(char*, char*, int*)+0x79>
c0018230:	80 f9 62             	cmp    cl,0x62
c0018233:	75 08                	jne    c001823d <Reg::readInt(char*, char*, int*)+0x79>
c0018235:	83 c2 02             	add    edx,0x2
c0018238:	be 02 00 00 00       	mov    esi,0x2
c001823d:	01 d7                	add    edi,edx
c001823f:	31 d2                	xor    edx,edx
c0018241:	8a 1f                	mov    bl,BYTE PTR [edi]
c0018243:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0018247:	80 fb 0d             	cmp    bl,0xd
c001824a:	0f 94 c3             	sete   bl
c001824d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018252:	0f 94 c1             	sete   cl
c0018255:	08 cb                	or     bl,cl
c0018257:	75 3a                	jne    c0018293 <Reg::readInt(char*, char*, int*)+0xcf>
c0018259:	0f af d6             	imul   edx,esi
c001825c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0018261:	83 fe 10             	cmp    esi,0x10
c0018264:	75 26                	jne    c001828c <Reg::readInt(char*, char*, int*)+0xc8>
c0018266:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001826a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001826d:	89 e9                	mov    ecx,ebp
c001826f:	80 f9 05             	cmp    cl,0x5
c0018272:	77 06                	ja     c001827a <Reg::readInt(char*, char*, int*)+0xb6>
c0018274:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0018278:	eb 16                	jmp    c0018290 <Reg::readInt(char*, char*, int*)+0xcc>
c001827a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001827e:	83 e9 61             	sub    ecx,0x61
c0018281:	80 f9 05             	cmp    cl,0x5
c0018284:	77 06                	ja     c001828c <Reg::readInt(char*, char*, int*)+0xc8>
c0018286:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001828a:	eb 04                	jmp    c0018290 <Reg::readInt(char*, char*, int*)+0xcc>
c001828c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0018290:	47                   	inc    edi
c0018291:	eb ae                	jmp    c0018241 <Reg::readInt(char*, char*, int*)+0x7d>
c0018293:	84 c0                	test   al,al
c0018295:	74 02                	je     c0018299 <Reg::readInt(char*, char*, int*)+0xd5>
c0018297:	f7 da                	neg    edx
c0018299:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00182a0:	89 10                	mov    DWORD PTR [eax],edx
c00182a2:	88 d8                	mov    al,bl
c00182a4:	81 c4 ec 00 00 00    	add    esp,0xec
c00182aa:	5b                   	pop    ebx
c00182ab:	5e                   	pop    esi
c00182ac:	5f                   	pop    edi
c00182ad:	5d                   	pop    ebp
c00182ae:	c3                   	ret    

c00182af <Reg::readString(char*, char*, char*, int)>:
c00182af:	57                   	push   edi
c00182b0:	56                   	push   esi
c00182b1:	53                   	push   ebx
c00182b2:	81 ec d4 00 00 00    	sub    esp,0xd4
c00182b8:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00182bf:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00182c3:	57                   	push   edi
c00182c4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00182cb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00182d2:	e8 b6 fe ff ff       	call   c001818d <Reg::getLine(char*, char*, char*)>
c00182d7:	83 c4 10             	add    esp,0x10
c00182da:	89 c6                	mov    esi,eax
c00182dc:	84 c0                	test   al,al
c00182de:	74 44                	je     c0018324 <Reg::readString(char*, char*, char*, int)+0x75>
c00182e0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00182e7:	31 c0                	xor    eax,eax
c00182e9:	4a                   	dec    edx
c00182ea:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00182ed:	84 c9                	test   cl,cl
c00182ef:	74 0f                	je     c0018300 <Reg::readString(char*, char*, char*, int)+0x51>
c00182f1:	39 c2                	cmp    edx,eax
c00182f3:	7e 0b                	jle    c0018300 <Reg::readString(char*, char*, char*, int)+0x51>
c00182f5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00182f8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00182fd:	40                   	inc    eax
c00182fe:	eb ea                	jmp    c00182ea <Reg::readString(char*, char*, char*, int)+0x3b>
c0018300:	83 ec 0c             	sub    esp,0xc
c0018303:	53                   	push   ebx
c0018304:	e8 f8 83 fe ff       	call   c0000701 <strlen>
c0018309:	83 c4 10             	add    esp,0x10
c001830c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0018311:	75 11                	jne    c0018324 <Reg::readString(char*, char*, char*, int)+0x75>
c0018313:	83 ec 0c             	sub    esp,0xc
c0018316:	53                   	push   ebx
c0018317:	e8 e5 83 fe ff       	call   c0000701 <strlen>
c001831c:	83 c4 10             	add    esp,0x10
c001831f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0018324:	81 c4 d0 00 00 00    	add    esp,0xd0
c001832a:	89 f0                	mov    eax,esi
c001832c:	5b                   	pop    ebx
c001832d:	5e                   	pop    esi
c001832e:	5f                   	pop    edi
c001832f:	c3                   	ret    

c0018330 <Reg::readBool(char*, char*, bool*)>:
c0018330:	83 ec 20             	sub    esp,0x20
c0018333:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018337:	50                   	push   eax
c0018338:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001833c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018340:	e8 7f fe ff ff       	call   c00181c4 <Reg::readInt(char*, char*, int*)>
c0018345:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001834a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001834e:	0f 95 02             	setne  BYTE PTR [edx]
c0018351:	83 c4 2c             	add    esp,0x2c
c0018354:	c3                   	ret    

c0018355 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0018355:	53                   	push   ebx
c0018356:	83 ec 1c             	sub    esp,0x1c
c0018359:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001835d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018361:	50                   	push   eax
c0018362:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001836a:	e8 c1 ff ff ff       	call   c0018330 <Reg::readBool(char*, char*, bool*)>
c001836f:	83 c4 10             	add    esp,0x10
c0018372:	84 c0                	test   al,al
c0018374:	74 04                	je     c001837a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0018376:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001837a:	88 d8                	mov    al,bl
c001837c:	83 c4 18             	add    esp,0x18
c001837f:	5b                   	pop    ebx
c0018380:	c3                   	ret    

c0018381 <Reg::readIntWithDefault(char*, char*, int)>:
c0018381:	53                   	push   ebx
c0018382:	83 ec 1c             	sub    esp,0x1c
c0018385:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018389:	8d 44 24 10          	lea    eax,[esp+0x10]
c001838d:	50                   	push   eax
c001838e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018392:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018396:	e8 29 fe ff ff       	call   c00181c4 <Reg::readInt(char*, char*, int*)>
c001839b:	83 c4 10             	add    esp,0x10
c001839e:	84 c0                	test   al,al
c00183a0:	74 04                	je     c00183a6 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00183a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00183a6:	89 d8                	mov    eax,ebx
c00183a8:	83 c4 18             	add    esp,0x18
c00183ab:	5b                   	pop    ebx
c00183ac:	c3                   	ret    

c00183ad <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00183ad:	56                   	push   esi
c00183ae:	53                   	push   ebx
c00183af:	51                   	push   ecx
c00183b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00183b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00183b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183bc:	56                   	push   esi
c00183bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183c5:	e8 e5 fe ff ff       	call   c00182af <Reg::readString(char*, char*, char*, int)>
c00183ca:	83 c4 10             	add    esp,0x10
c00183cd:	84 c0                	test   al,al
c00183cf:	74 02                	je     c00183d3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00183d1:	89 f3                	mov    ebx,esi
c00183d3:	89 d8                	mov    eax,ebx
c00183d5:	5a                   	pop    edx
c00183d6:	5b                   	pop    ebx
c00183d7:	5e                   	pop    esi
c00183d8:	c3                   	ret    

c00183d9 <Sys::exit(regs*)>:
c00183d9:	83 ec 18             	sub    esp,0x18
c00183dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183e0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00183e3:	e8 a4 6b ff ff       	call   c000ef8c <terminateTask(int)>
c00183e8:	83 c8 ff             	or     eax,0xffffffff
c00183eb:	83 c4 1c             	add    esp,0x1c
c00183ee:	89 c2                	mov    edx,eax
c00183f0:	c3                   	ret    

c00183f1 <Sys::read(regs*)>:
c00183f1:	57                   	push   edi
c00183f2:	56                   	push   esi
c00183f3:	53                   	push   ebx
c00183f4:	83 ec 10             	sub    esp,0x10
c00183f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00183fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00183fe:	83 f8 02             	cmp    eax,0x2
c0018401:	77 10                	ja     c0018413 <Sys::read(regs*)+0x22>
c0018403:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018408:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001840b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0018411:	eb 0e                	jmp    c0018421 <Sys::read(regs*)+0x30>
c0018413:	83 ec 0c             	sub    esp,0xc
c0018416:	50                   	push   eax
c0018417:	e8 07 8e ff ff       	call   c0011223 <getFromFileDescriptor(int)>
c001841c:	83 c4 10             	add    esp,0x10
c001841f:	89 c1                	mov    ecx,eax
c0018421:	83 c8 ff             	or     eax,0xffffffff
c0018424:	85 c9                	test   ecx,ecx
c0018426:	89 c2                	mov    edx,eax
c0018428:	74 28                	je     c0018452 <Sys::read(regs*)+0x61>
c001842a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018432:	31 ff                	xor    edi,edi
c0018434:	83 ec 0c             	sub    esp,0xc
c0018437:	8b 01                	mov    eax,DWORD PTR [ecx]
c0018439:	8d 54 24 18          	lea    edx,[esp+0x18]
c001843d:	52                   	push   edx
c001843e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018441:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0018444:	57                   	push   edi
c0018445:	56                   	push   esi
c0018446:	51                   	push   ecx
c0018447:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001844a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001844e:	83 c4 20             	add    esp,0x20
c0018451:	99                   	cdq    
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	5b                   	pop    ebx
c0018456:	5e                   	pop    esi
c0018457:	5f                   	pop    edi
c0018458:	c3                   	ret    

c0018459 <Sys::sbrk(regs*)>:
c0018459:	56                   	push   esi
c001845a:	53                   	push   ebx
c001845b:	50                   	push   eax
c001845c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018461:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018465:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018468:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001846b:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0018471:	85 db                	test   ebx,ebx
c0018473:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0018476:	74 02                	je     c001847a <Sys::sbrk(regs*)+0x21>
c0018478:	79 06                	jns    c0018480 <Sys::sbrk(regs*)+0x27>
c001847a:	89 f0                	mov    eax,esi
c001847c:	31 d2                	xor    edx,edx
c001847e:	eb 2a                	jmp    c00184aa <Sys::sbrk(regs*)+0x51>
c0018480:	83 c8 ff             	or     eax,0xffffffff
c0018483:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0018489:	89 c2                	mov    edx,eax
c001848b:	77 1d                	ja     c00184aa <Sys::sbrk(regs*)+0x51>
c001848d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0018493:	50                   	push   eax
c0018494:	c1 ea 0c             	shr    edx,0xc
c0018497:	68 07 04 00 00       	push   0x407
c001849c:	52                   	push   edx
c001849d:	51                   	push   ecx
c001849e:	e8 9d 95 ff ff       	call   c0011a40 <VAS::allocatePages(int, int)>
c00184a3:	89 f0                	mov    eax,esi
c00184a5:	31 d2                	xor    edx,edx
c00184a7:	83 c4 10             	add    esp,0x10
c00184aa:	59                   	pop    ecx
c00184ab:	5b                   	pop    ebx
c00184ac:	5e                   	pop    esi
c00184ad:	c3                   	ret    

c00184ae <Sys::write(regs*)>:
c00184ae:	57                   	push   edi
c00184af:	56                   	push   esi
c00184b0:	53                   	push   ebx
c00184b1:	83 ec 10             	sub    esp,0x10
c00184b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00184b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00184bb:	83 f8 02             	cmp    eax,0x2
c00184be:	77 10                	ja     c00184d0 <Sys::write(regs*)+0x22>
c00184c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00184c8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00184ce:	eb 0e                	jmp    c00184de <Sys::write(regs*)+0x30>
c00184d0:	83 ec 0c             	sub    esp,0xc
c00184d3:	50                   	push   eax
c00184d4:	e8 4a 8d ff ff       	call   c0011223 <getFromFileDescriptor(int)>
c00184d9:	83 c4 10             	add    esp,0x10
c00184dc:	89 c1                	mov    ecx,eax
c00184de:	83 c8 ff             	or     eax,0xffffffff
c00184e1:	85 c9                	test   ecx,ecx
c00184e3:	89 c2                	mov    edx,eax
c00184e5:	74 28                	je     c001850f <Sys::write(regs*)+0x61>
c00184e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00184ef:	31 ff                	xor    edi,edi
c00184f1:	83 ec 0c             	sub    esp,0xc
c00184f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00184f6:	8d 54 24 18          	lea    edx,[esp+0x18]
c00184fa:	52                   	push   edx
c00184fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00184fe:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0018501:	57                   	push   edi
c0018502:	56                   	push   esi
c0018503:	51                   	push   ecx
c0018504:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0018507:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001850b:	83 c4 20             	add    esp,0x20
c001850e:	99                   	cdq    
c001850f:	83 c4 10             	add    esp,0x10
c0018512:	5b                   	pop    ebx
c0018513:	5e                   	pop    esi
c0018514:	5f                   	pop    edi
c0018515:	c3                   	ret    

c0018516 <Sys::yield(regs*)>:
c0018516:	83 ec 0c             	sub    esp,0xc
c0018519:	e8 6e 5e ff ff       	call   c000e38c <lockScheduler()>
c001851e:	e8 9d 61 ff ff       	call   c000e6c0 <schedule()>
c0018523:	e8 66 5e ff ff       	call   c000e38e <unlockScheduler()>
c0018528:	31 c0                	xor    eax,eax
c001852a:	31 d2                	xor    edx,edx
c001852c:	83 c4 0c             	add    esp,0xc
c001852f:	c3                   	ret    

c0018530 <vm8086EntryPoint(void*)>:
c0018530:	83 ec 0c             	sub    esp,0xc
c0018533:	e8 56 5e ff ff       	call   c000e38e <unlockScheduler()>
c0018538:	fb                   	sti    
c0018539:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001853e:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018542:	52                   	push   edx
c0018543:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018547:	52                   	push   edx
c0018548:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001854c:	52                   	push   edx
c001854d:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018551:	50                   	push   eax
c0018552:	e8 8b 7c fe ff       	call   c00001e2 <goToVM86>
c0018557:	83 c4 1c             	add    esp,0x1c
c001855a:	c3                   	ret    

c001855b <inbv(unsigned short)>:
c001855b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001855f:	ec                   	in     al,dx
c0018560:	c3                   	ret    

c0018561 <outbv(unsigned short, unsigned char)>:
c0018561:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018569:	ee                   	out    dx,al
c001856a:	c3                   	ret    

c001856b <realToLinear(unsigned short, unsigned short)>:
c001856b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018570:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018575:	c1 e0 04             	shl    eax,0x4
c0018578:	01 d0                	add    eax,edx
c001857a:	c3                   	ret    

c001857b <getSegment(unsigned int)>:
c001857b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001857f:	c1 e8 10             	shr    eax,0x10
c0018582:	c3                   	ret    

c0018583 <getOffset(unsigned int)>:
c0018583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018587:	c3                   	ret    

c0018588 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018588:	55                   	push   ebp
c0018589:	57                   	push   edi
c001858a:	56                   	push   esi
c001858b:	53                   	push   ebx
c001858c:	83 ec 2c             	sub    esp,0x2c
c001858f:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018593:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018597:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001859b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001859f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00185a3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00185a7:	e8 e0 5d ff ff       	call   c000e38c <lockScheduler()>
c00185ac:	68 80 00 00 00       	push   0x80
c00185b1:	6a 00                	push   0x0
c00185b3:	68 30 85 01 c0       	push   0xc0018530
c00185b8:	55                   	push   ebp
c00185b9:	e8 f8 5e ff ff       	call   c000e4b6 <Process::createThread(void (*)(void*), void*, int)>
c00185be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185c2:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00185c6:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00185ca:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00185ce:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00185d2:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00185d6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00185dd:	e8 b8 9e ff ff       	call   c001249a <operator new(unsigned long)>
c00185e2:	83 c4 0c             	add    esp,0xc
c00185e5:	89 c3                	mov    ebx,eax
c00185e7:	55                   	push   ebp
c00185e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00185ec:	50                   	push   eax
c00185ed:	e8 d6 a2 ff ff       	call   c00128c8 <File::File(char const*, Process*)>
c00185f2:	83 c4 0c             	add    esp,0xc
c00185f5:	8d 44 24 17          	lea    eax,[esp+0x17]
c00185f9:	50                   	push   eax
c00185fa:	8d 44 24 20          	lea    eax,[esp+0x20]
c00185fe:	50                   	push   eax
c00185ff:	53                   	push   ebx
c0018600:	e8 d3 a5 ff ff       	call   c0012bd8 <File::stat(unsigned long long*, bool*)>
c0018605:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018609:	83 c4 10             	add    esp,0x10
c001860c:	84 d2                	test   dl,dl
c001860e:	74 1c                	je     c001862c <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018610:	83 ec 0c             	sub    esp,0xc
c0018613:	68 a1 a4 03 c0       	push   0xc003a4a1
c0018618:	e8 eb 49 ff ff       	call   c000d008 <panic(char const*)>
c001861d:	e8 6c 5d ff ff       	call   c000e38e <unlockScheduler()>
c0018622:	83 c4 10             	add    esp,0x10
c0018625:	31 d2                	xor    edx,edx
c0018627:	e9 81 00 00 00       	jmp    c00186ad <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001862c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018630:	51                   	push   ecx
c0018631:	51                   	push   ecx
c0018632:	6a 01                	push   0x1
c0018634:	53                   	push   ebx
c0018635:	e8 f2 a2 ff ff       	call   c001292c <File::open(FileOpenMode)>
c001863a:	83 c4 10             	add    esp,0x10
c001863d:	85 c0                	test   eax,eax
c001863f:	74 1b                	je     c001865c <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018641:	83 ec 0c             	sub    esp,0xc
c0018644:	68 ba a4 03 c0       	push   0xc003a4ba
c0018649:	e8 ba 49 ff ff       	call   c000d008 <panic(char const*)>
c001864e:	e8 3b 5d ff ff       	call   c000e38e <unlockScheduler()>
c0018653:	83 c4 10             	add    esp,0x10
c0018656:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001865a:	eb 51                	jmp    c00186ad <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001865c:	83 ec 0c             	sub    esp,0xc
c001865f:	0f b7 ff             	movzx  edi,di
c0018662:	6a 07                	push   0x7
c0018664:	0f b7 f6             	movzx  esi,si
c0018667:	68 00 01 00 00       	push   0x100
c001866c:	6a 00                	push   0x0
c001866e:	6a 00                	push   0x0
c0018670:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018676:	e8 b1 95 ff ff       	call   c0011c2c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001867b:	83 c4 18             	add    esp,0x18
c001867e:	57                   	push   edi
c001867f:	56                   	push   esi
c0018680:	e8 e6 fe ff ff       	call   c001856b <realToLinear(unsigned short, unsigned short)>
c0018685:	5a                   	pop    edx
c0018686:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018688:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001868c:	51                   	push   ecx
c001868d:	50                   	push   eax
c001868e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018692:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018696:	53                   	push   ebx
c0018697:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001869a:	83 c4 14             	add    esp,0x14
c001869d:	53                   	push   ebx
c001869e:	e8 e7 a2 ff ff       	call   c001298a <File::close()>
c00186a3:	e8 e6 5c ff ff       	call   c000e38e <unlockScheduler()>
c00186a8:	83 c4 10             	add    esp,0x10
c00186ab:	b2 01                	mov    dl,0x1
c00186ad:	83 c4 2c             	add    esp,0x2c
c00186b0:	88 d0                	mov    al,dl
c00186b2:	5b                   	pop    ebx
c00186b3:	5e                   	pop    esi
c00186b4:	5f                   	pop    edi
c00186b5:	5d                   	pop    ebp
c00186b6:	c3                   	ret    

c00186b7 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00186b7:	57                   	push   edi
c00186b8:	56                   	push   esi
c00186b9:	53                   	push   ebx
c00186ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00186c6:	83 e8 06             	sub    eax,0x6
c00186c9:	0f b7 c0             	movzx  eax,ax
c00186cc:	50                   	push   eax
c00186cd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00186d2:	50                   	push   eax
c00186d3:	e8 93 fe ff ff       	call   c001856b <realToLinear(unsigned short, unsigned short)>
c00186d8:	5a                   	pop    edx
c00186d9:	5e                   	pop    esi
c00186da:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00186dd:	8d 56 fa             	lea    edx,[esi-0x6]
c00186e0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00186e6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00186e9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00186ec:	83 c2 02             	add    edx,0x2
c00186ef:	66 89 10             	mov    WORD PTR [eax],dx
c00186f2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00186f5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00186f9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00186fc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018700:	89 d6                	mov    esi,edx
c0018702:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018708:	66 81 e6 ff fd       	and    si,0xfdff
c001870d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018711:	74 07                	je     c001871a <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018713:	89 d6                	mov    esi,edx
c0018715:	66 81 ce 00 02       	or     si,0x200
c001871a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001871e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018723:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018727:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001872f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018732:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001873a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001873d:	5b                   	pop    ebx
c001873e:	5e                   	pop    esi
c001873f:	5f                   	pop    edi
c0018740:	c3                   	ret    

c0018741 <readByteFromReal(unsigned short, unsigned short)>:
c0018741:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018746:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001874b:	c1 e0 04             	shl    eax,0x4
c001874e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018751:	c3                   	ret    

c0018752 <readWordFromReal(unsigned short, unsigned short)>:
c0018752:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018757:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001875c:	c1 e0 04             	shl    eax,0x4
c001875f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018763:	c3                   	ret    

c0018764 <readDwordFromReal(unsigned short, unsigned short)>:
c0018764:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018769:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001876e:	c1 e0 04             	shl    eax,0x4
c0018771:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018774:	c3                   	ret    

c0018775 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018775:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001877a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001877f:	c1 e0 04             	shl    eax,0x4
c0018782:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018786:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018789:	c3                   	ret    

c001878a <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001878a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001878f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018794:	c1 e0 04             	shl    eax,0x4
c0018797:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001879b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001879f:	c3                   	ret    

c00187a0 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00187a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00187a5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00187aa:	c1 e0 04             	shl    eax,0x4
c00187ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00187b1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00187b4:	c3                   	ret    

c00187b5 <vm8086FaultHandler(regs*)>:
c00187b5:	55                   	push   ebp
c00187b6:	57                   	push   edi
c00187b7:	56                   	push   esi
c00187b8:	53                   	push   ebx
c00187b9:	83 ec 1c             	sub    esp,0x1c
c00187bc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00187c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00187c3:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00187c7:	0f b7 f0             	movzx  esi,ax
c00187ca:	52                   	push   edx
c00187cb:	0f b7 c0             	movzx  eax,ax
c00187ce:	50                   	push   eax
c00187cf:	e8 97 fd ff ff       	call   c001856b <realToLinear(unsigned short, unsigned short)>
c00187d4:	5a                   	pop    edx
c00187d5:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00187d8:	59                   	pop    ecx
c00187d9:	89 c7                	mov    edi,eax
c00187db:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00187de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00187e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187eb:	0f b7 c5             	movzx  eax,bp
c00187ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187f2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00187f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187fa:	e8 6c fd ff ff       	call   c001856b <realToLinear(unsigned short, unsigned short)>
c00187ff:	5a                   	pop    edx
c0018800:	59                   	pop    ecx
c0018801:	b1 06                	mov    cl,0x6
c0018803:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018808:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001880d:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018810:	80 fa 9d             	cmp    dl,0x9d
c0018813:	0f 84 1d 02 00 00    	je     c0018a36 <vm8086FaultHandler(regs*)+0x281>
c0018819:	0f 87 8e 00 00 00    	ja     c00188ad <vm8086FaultHandler(regs*)+0xf8>
c001881f:	80 fa 66             	cmp    dl,0x66
c0018822:	0f 84 89 01 00 00    	je     c00189b1 <vm8086FaultHandler(regs*)+0x1fc>
c0018828:	77 44                	ja     c001886e <vm8086FaultHandler(regs*)+0xb9>
c001882a:	80 fa 36             	cmp    dl,0x36
c001882d:	0f 84 74 01 00 00    	je     c00189a7 <vm8086FaultHandler(regs*)+0x1f2>
c0018833:	77 1a                	ja     c001884f <vm8086FaultHandler(regs*)+0x9a>
c0018835:	80 fa 26             	cmp    dl,0x26
c0018838:	0f 84 4b 01 00 00    	je     c0018989 <vm8086FaultHandler(regs*)+0x1d4>
c001883e:	80 fa 2e             	cmp    dl,0x2e
c0018841:	0f 85 4a 05 00 00    	jne    c0018d91 <vm8086FaultHandler(regs*)+0x5dc>
c0018847:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001884a:	31 c9                	xor    ecx,ecx
c001884c:	47                   	inc    edi
c001884d:	eb be                	jmp    c001880d <vm8086FaultHandler(regs*)+0x58>
c001884f:	80 fa 64             	cmp    dl,0x64
c0018852:	0f 84 3b 01 00 00    	je     c0018993 <vm8086FaultHandler(regs*)+0x1de>
c0018858:	0f 87 3f 01 00 00    	ja     c001899d <vm8086FaultHandler(regs*)+0x1e8>
c001885e:	80 fa 3e             	cmp    dl,0x3e
c0018861:	0f 85 2a 05 00 00    	jne    c0018d91 <vm8086FaultHandler(regs*)+0x5dc>
c0018867:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001886a:	b1 01                	mov    cl,0x1
c001886c:	eb de                	jmp    c001884c <vm8086FaultHandler(regs*)+0x97>
c001886e:	80 fa 6d             	cmp    dl,0x6d
c0018871:	0f 84 bf 02 00 00    	je     c0018b36 <vm8086FaultHandler(regs*)+0x381>
c0018877:	77 17                	ja     c0018890 <vm8086FaultHandler(regs*)+0xdb>
c0018879:	80 fa 67             	cmp    dl,0x67
c001887c:	0f 84 3c 01 00 00    	je     c00189be <vm8086FaultHandler(regs*)+0x209>
c0018882:	80 fa 6c             	cmp    dl,0x6c
c0018885:	0f 84 5d 02 00 00    	je     c0018ae8 <vm8086FaultHandler(regs*)+0x333>
c001888b:	e9 01 05 00 00       	jmp    c0018d91 <vm8086FaultHandler(regs*)+0x5dc>
c0018890:	80 fa 6f             	cmp    dl,0x6f
c0018893:	0f 84 8b 03 00 00    	je     c0018c24 <vm8086FaultHandler(regs*)+0x46f>
c0018899:	0f 82 0f 03 00 00    	jb     c0018bae <vm8086FaultHandler(regs*)+0x3f9>
c001889f:	80 fa 9c             	cmp    dl,0x9c
c00188a2:	0f 84 23 01 00 00    	je     c00189cb <vm8086FaultHandler(regs*)+0x216>
c00188a8:	e9 e4 04 00 00       	jmp    c0018d91 <vm8086FaultHandler(regs*)+0x5dc>
c00188ad:	80 fa ec             	cmp    dl,0xec
c00188b0:	0f 84 7f 04 00 00    	je     c0018d35 <vm8086FaultHandler(regs*)+0x580>
c00188b6:	77 7b                	ja     c0018933 <vm8086FaultHandler(regs*)+0x17e>
c00188b8:	80 fa e4             	cmp    dl,0xe4
c00188bb:	0f 84 fe 03 00 00    	je     c0018cbf <vm8086FaultHandler(regs*)+0x50a>
c00188c1:	77 53                	ja     c0018916 <vm8086FaultHandler(regs*)+0x161>
c00188c3:	80 fa cd             	cmp    dl,0xcd
c00188c6:	0f 84 cd 01 00 00    	je     c0018a99 <vm8086FaultHandler(regs*)+0x2e4>
c00188cc:	80 fa cf             	cmp    dl,0xcf
c00188cf:	0f 85 bc 04 00 00    	jne    c0018d91 <vm8086FaultHandler(regs*)+0x5dc>
c00188d5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00188d8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00188db:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00188df:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00188e2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00188e6:	81 ca 00 02 02 00    	or     edx,0x20200
c00188ec:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00188ef:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00188f3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188f9:	66 c1 e8 09          	shr    ax,0x9
c00188fd:	83 e0 01             	and    eax,0x1
c0018900:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018903:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018906:	83 c0 06             	add    eax,0x6
c0018909:	25 ff ff 00 00       	and    eax,0xffff
c001890e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018911:	e9 77 04 00 00       	jmp    c0018d8d <vm8086FaultHandler(regs*)+0x5d8>
c0018916:	80 fa e6             	cmp    dl,0xe6
c0018919:	0f 84 ea 03 00 00    	je     c0018d09 <vm8086FaultHandler(regs*)+0x554>
c001891f:	0f 82 b6 03 00 00    	jb     c0018cdb <vm8086FaultHandler(regs*)+0x526>
c0018925:	80 fa e7             	cmp    dl,0xe7
c0018928:	0f 84 f2 03 00 00    	je     c0018d20 <vm8086FaultHandler(regs*)+0x56b>
c001892e:	e9 5e 04 00 00       	jmp    c0018d91 <vm8086FaultHandler(regs*)+0x5dc>
c0018933:	80 fa ef             	cmp    dl,0xef
c0018936:	0f 84 3c 04 00 00    	je     c0018d78 <vm8086FaultHandler(regs*)+0x5c3>
c001893c:	77 28                	ja     c0018966 <vm8086FaultHandler(regs*)+0x1b1>
c001893e:	80 fa ed             	cmp    dl,0xed
c0018941:	0f 84 0a 04 00 00    	je     c0018d51 <vm8086FaultHandler(regs*)+0x59c>
c0018947:	80 fa ee             	cmp    dl,0xee
c001894a:	0f 85 41 04 00 00    	jne    c0018d91 <vm8086FaultHandler(regs*)+0x5dc>
c0018950:	50                   	push   eax
c0018951:	50                   	push   eax
c0018952:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018956:	50                   	push   eax
c0018957:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001895b:	50                   	push   eax
c001895c:	e8 00 fc ff ff       	call   c0018561 <outbv(unsigned short, unsigned char)>
c0018961:	e9 0a 04 00 00       	jmp    c0018d70 <vm8086FaultHandler(regs*)+0x5bb>
c0018966:	80 fa fa             	cmp    dl,0xfa
c0018969:	0f 84 5d 01 00 00    	je     c0018acc <vm8086FaultHandler(regs*)+0x317>
c001896f:	80 fa fb             	cmp    dl,0xfb
c0018972:	0f 84 62 01 00 00    	je     c0018ada <vm8086FaultHandler(regs*)+0x325>
c0018978:	80 fa f3             	cmp    dl,0xf3
c001897b:	0f 85 10 04 00 00    	jne    c0018d91 <vm8086FaultHandler(regs*)+0x5dc>
c0018981:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018984:	e9 c3 fe ff ff       	jmp    c001884c <vm8086FaultHandler(regs*)+0x97>
c0018989:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001898c:	b1 02                	mov    cl,0x2
c001898e:	e9 b9 fe ff ff       	jmp    c001884c <vm8086FaultHandler(regs*)+0x97>
c0018993:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018996:	b1 03                	mov    cl,0x3
c0018998:	e9 af fe ff ff       	jmp    c001884c <vm8086FaultHandler(regs*)+0x97>
c001899d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00189a0:	b1 04                	mov    cl,0x4
c00189a2:	e9 a5 fe ff ff       	jmp    c001884c <vm8086FaultHandler(regs*)+0x97>
c00189a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00189aa:	b1 05                	mov    cl,0x5
c00189ac:	e9 9b fe ff ff       	jmp    c001884c <vm8086FaultHandler(regs*)+0x97>
c00189b1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00189b4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00189b9:	e9 8e fe ff ff       	jmp    c001884c <vm8086FaultHandler(regs*)+0x97>
c00189be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00189c1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00189c6:	e9 81 fe ff ff       	jmp    c001884c <vm8086FaultHandler(regs*)+0x97>
c00189cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00189ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189d2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189d7:	74 30                	je     c0018a09 <vm8086FaultHandler(regs*)+0x254>
c00189d9:	83 e9 04             	sub    ecx,0x4
c00189dc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00189e2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00189e8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00189eb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00189ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00189f4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00189f8:	0f 84 8c 03 00 00    	je     c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c00189fe:	80 ce 02             	or     dh,0x2
c0018a01:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018a04:	e9 81 03 00 00       	jmp    c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c0018a09:	83 e9 02             	sub    ecx,0x2
c0018a0c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018a12:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018a15:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018a19:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018a1f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018a23:	74 05                	je     c0018a2a <vm8086FaultHandler(regs*)+0x275>
c0018a25:	80 ce 02             	or     dh,0x2
c0018a28:	eb 03                	jmp    c0018a2d <vm8086FaultHandler(regs*)+0x278>
c0018a2a:	80 e6 fd             	and    dh,0xfd
c0018a2d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018a31:	e9 54 03 00 00       	jmp    c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c0018a36:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a3b:	74 2a                	je     c0018a67 <vm8086FaultHandler(regs*)+0x2b2>
c0018a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0018a3f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018a45:	81 ca 00 02 02 00    	or     edx,0x20200
c0018a4b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a50:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018a56:	c1 e8 09             	shr    eax,0x9
c0018a59:	83 e0 01             	and    eax,0x1
c0018a5c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018a5f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018a62:	83 c0 04             	add    eax,0x4
c0018a65:	eb 25                	jmp    c0018a8c <vm8086FaultHandler(regs*)+0x2d7>
c0018a67:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018a6a:	81 ca 00 02 02 00    	or     edx,0x20200
c0018a70:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018a73:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018a76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018a7c:	66 c1 e8 09          	shr    ax,0x9
c0018a80:	83 e0 01             	and    eax,0x1
c0018a83:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018a86:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018a89:	83 c0 02             	add    eax,0x2
c0018a8c:	25 ff ff 00 00       	and    eax,0xffff
c0018a91:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018a94:	e9 f1 02 00 00       	jmp    c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c0018a99:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018a9d:	3c ff                	cmp    al,0xff
c0018a9f:	75 10                	jne    c0018ab1 <vm8086FaultHandler(regs*)+0x2fc>
c0018aa1:	83 ec 0c             	sub    esp,0xc
c0018aa4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018aa7:	e8 e0 64 ff ff       	call   c000ef8c <terminateTask(int)>
c0018aac:	e9 c2 02 00 00       	jmp    c0018d73 <vm8086FaultHandler(regs*)+0x5be>
c0018ab1:	83 ec 0c             	sub    esp,0xc
c0018ab4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018abc:	57                   	push   edi
c0018abd:	50                   	push   eax
c0018abe:	53                   	push   ebx
c0018abf:	e8 f3 fb ff ff       	call   c00186b7 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018ac4:	83 c4 20             	add    esp,0x20
c0018ac7:	e9 c1 02 00 00       	jmp    c0018d8d <vm8086FaultHandler(regs*)+0x5d8>
c0018acc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ad1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018ad5:	e9 b0 02 00 00       	jmp    c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c0018ada:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018adf:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018ae3:	e9 a2 02 00 00       	jmp    c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c0018ae8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018aed:	74 0d                	je     c0018afc <vm8086FaultHandler(regs*)+0x347>
c0018aef:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018af6:	0f 87 e9 02 00 00    	ja     c0018de5 <vm8086FaultHandler(regs*)+0x630>
c0018afc:	83 ec 0c             	sub    esp,0xc
c0018aff:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018b02:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018b06:	50                   	push   eax
c0018b07:	e8 4f fa ff ff       	call   c001855b <inbv(unsigned short)>
c0018b0c:	83 c4 0c             	add    esp,0xc
c0018b0f:	0f b6 c0             	movzx  eax,al
c0018b12:	0f b7 c9             	movzx  ecx,cx
c0018b15:	50                   	push   eax
c0018b16:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018b1a:	50                   	push   eax
c0018b1b:	51                   	push   ecx
c0018b1c:	e8 54 fc ff ff       	call   c0018775 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018b21:	83 c4 10             	add    esp,0x10
c0018b24:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b27:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b2b:	74 03                	je     c0018b30 <vm8086FaultHandler(regs*)+0x37b>
c0018b2d:	48                   	dec    eax
c0018b2e:	eb 01                	jmp    c0018b31 <vm8086FaultHandler(regs*)+0x37c>
c0018b30:	40                   	inc    eax
c0018b31:	0f b7 c0             	movzx  eax,ax
c0018b34:	eb 70                	jmp    c0018ba6 <vm8086FaultHandler(regs*)+0x3f1>
c0018b36:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018b39:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018b3c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b41:	74 0c                	je     c0018b4f <vm8086FaultHandler(regs*)+0x39a>
c0018b43:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018b49:	0f 87 96 02 00 00    	ja     c0018de5 <vm8086FaultHandler(regs*)+0x630>
c0018b4f:	0f b7 c9             	movzx  ecx,cx
c0018b52:	0f b7 f6             	movzx  esi,si
c0018b55:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018b58:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b5d:	74 20                	je     c0018b7f <vm8086FaultHandler(regs*)+0x3ca>
c0018b5f:	ed                   	in     eax,dx
c0018b60:	55                   	push   ebp
c0018b61:	50                   	push   eax
c0018b62:	51                   	push   ecx
c0018b63:	56                   	push   esi
c0018b64:	e8 37 fc ff ff       	call   c00187a0 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018b69:	83 c4 10             	add    esp,0x10
c0018b6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b6f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b73:	74 05                	je     c0018b7a <vm8086FaultHandler(regs*)+0x3c5>
c0018b75:	83 e8 04             	sub    eax,0x4
c0018b78:	eb 27                	jmp    c0018ba1 <vm8086FaultHandler(regs*)+0x3ec>
c0018b7a:	83 c0 04             	add    eax,0x4
c0018b7d:	eb 22                	jmp    c0018ba1 <vm8086FaultHandler(regs*)+0x3ec>
c0018b7f:	66 ed                	in     ax,dx
c0018b81:	0f b7 c0             	movzx  eax,ax
c0018b84:	57                   	push   edi
c0018b85:	50                   	push   eax
c0018b86:	51                   	push   ecx
c0018b87:	56                   	push   esi
c0018b88:	e8 fd fb ff ff       	call   c001878a <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018b8d:	83 c4 10             	add    esp,0x10
c0018b90:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b93:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b97:	74 05                	je     c0018b9e <vm8086FaultHandler(regs*)+0x3e9>
c0018b99:	83 e8 02             	sub    eax,0x2
c0018b9c:	eb 03                	jmp    c0018ba1 <vm8086FaultHandler(regs*)+0x3ec>
c0018b9e:	83 c0 02             	add    eax,0x2
c0018ba1:	25 ff ff 00 00       	and    eax,0xffff
c0018ba6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018ba9:	e9 dc 01 00 00       	jmp    c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c0018bae:	49                   	dec    ecx
c0018baf:	80 f9 05             	cmp    cl,0x5
c0018bb2:	77 24                	ja     c0018bd8 <vm8086FaultHandler(regs*)+0x423>
c0018bb4:	0f b6 c9             	movzx  ecx,cl
c0018bb7:	ff 24 8d 00 a5 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5b00]
c0018bbe:	0f b7 f5             	movzx  esi,bp
c0018bc1:	eb 15                	jmp    c0018bd8 <vm8086FaultHandler(regs*)+0x423>
c0018bc3:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018bc7:	eb 0f                	jmp    c0018bd8 <vm8086FaultHandler(regs*)+0x423>
c0018bc9:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018bcd:	eb 09                	jmp    c0018bd8 <vm8086FaultHandler(regs*)+0x423>
c0018bcf:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018bd3:	eb 03                	jmp    c0018bd8 <vm8086FaultHandler(regs*)+0x423>
c0018bd5:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018bd8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018bdb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018be0:	74 0b                	je     c0018bed <vm8086FaultHandler(regs*)+0x438>
c0018be2:	3d ff ff 00 00       	cmp    eax,0xffff
c0018be7:	0f 87 f8 01 00 00    	ja     c0018de5 <vm8086FaultHandler(regs*)+0x630>
c0018bed:	0f b7 c0             	movzx  eax,ax
c0018bf0:	52                   	push   edx
c0018bf1:	52                   	push   edx
c0018bf2:	50                   	push   eax
c0018bf3:	56                   	push   esi
c0018bf4:	e8 48 fb ff ff       	call   c0018741 <readByteFromReal(unsigned short, unsigned short)>
c0018bf9:	59                   	pop    ecx
c0018bfa:	0f b6 c0             	movzx  eax,al
c0018bfd:	5e                   	pop    esi
c0018bfe:	50                   	push   eax
c0018bff:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018c03:	50                   	push   eax
c0018c04:	e8 58 f9 ff ff       	call   c0018561 <outbv(unsigned short, unsigned char)>
c0018c09:	83 c4 10             	add    esp,0x10
c0018c0c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018c0f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018c13:	74 03                	je     c0018c18 <vm8086FaultHandler(regs*)+0x463>
c0018c15:	48                   	dec    eax
c0018c16:	eb 01                	jmp    c0018c19 <vm8086FaultHandler(regs*)+0x464>
c0018c18:	40                   	inc    eax
c0018c19:	0f b7 c0             	movzx  eax,ax
c0018c1c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018c1f:	e9 66 01 00 00       	jmp    c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c0018c24:	49                   	dec    ecx
c0018c25:	80 f9 05             	cmp    cl,0x5
c0018c28:	77 1f                	ja     c0018c49 <vm8086FaultHandler(regs*)+0x494>
c0018c2a:	0f b6 c9             	movzx  ecx,cl
c0018c2d:	ff 24 8d 18 a5 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5ae8]
c0018c34:	89 ee                	mov    esi,ebp
c0018c36:	eb 11                	jmp    c0018c49 <vm8086FaultHandler(regs*)+0x494>
c0018c38:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018c3b:	eb 0c                	jmp    c0018c49 <vm8086FaultHandler(regs*)+0x494>
c0018c3d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018c40:	eb 07                	jmp    c0018c49 <vm8086FaultHandler(regs*)+0x494>
c0018c42:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018c45:	eb 02                	jmp    c0018c49 <vm8086FaultHandler(regs*)+0x494>
c0018c47:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018c49:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018c4c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018c51:	74 0c                	je     c0018c5f <vm8086FaultHandler(regs*)+0x4aa>
c0018c53:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018c59:	0f 87 86 01 00 00    	ja     c0018de5 <vm8086FaultHandler(regs*)+0x630>
c0018c5f:	0f b7 d6             	movzx  edx,si
c0018c62:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018c65:	0f b7 c1             	movzx  eax,cx
c0018c68:	81 e7 00 04 00 00    	and    edi,0x400
c0018c6e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018c71:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c76:	74 1d                	je     c0018c95 <vm8086FaultHandler(regs*)+0x4e0>
c0018c78:	55                   	push   ebp
c0018c79:	55                   	push   ebp
c0018c7a:	50                   	push   eax
c0018c7b:	52                   	push   edx
c0018c7c:	e8 e3 fa ff ff       	call   c0018764 <readDwordFromReal(unsigned short, unsigned short)>
c0018c81:	83 c4 10             	add    esp,0x10
c0018c84:	89 f2                	mov    edx,esi
c0018c86:	ef                   	out    dx,eax
c0018c87:	85 ff                	test   edi,edi
c0018c89:	74 05                	je     c0018c90 <vm8086FaultHandler(regs*)+0x4db>
c0018c8b:	83 e9 04             	sub    ecx,0x4
c0018c8e:	eb 21                	jmp    c0018cb1 <vm8086FaultHandler(regs*)+0x4fc>
c0018c90:	83 c1 04             	add    ecx,0x4
c0018c93:	eb 1c                	jmp    c0018cb1 <vm8086FaultHandler(regs*)+0x4fc>
c0018c95:	55                   	push   ebp
c0018c96:	55                   	push   ebp
c0018c97:	50                   	push   eax
c0018c98:	52                   	push   edx
c0018c99:	e8 b4 fa ff ff       	call   c0018752 <readWordFromReal(unsigned short, unsigned short)>
c0018c9e:	83 c4 10             	add    esp,0x10
c0018ca1:	89 f2                	mov    edx,esi
c0018ca3:	66 ef                	out    dx,ax
c0018ca5:	85 ff                	test   edi,edi
c0018ca7:	74 05                	je     c0018cae <vm8086FaultHandler(regs*)+0x4f9>
c0018ca9:	83 e9 02             	sub    ecx,0x2
c0018cac:	eb 03                	jmp    c0018cb1 <vm8086FaultHandler(regs*)+0x4fc>
c0018cae:	83 c1 02             	add    ecx,0x2
c0018cb1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018cb7:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018cba:	e9 cb 00 00 00       	jmp    c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c0018cbf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018cc6:	83 ec 0c             	sub    esp,0xc
c0018cc9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018ccd:	50                   	push   eax
c0018cce:	e8 88 f8 ff ff       	call   c001855b <inbv(unsigned short)>
c0018cd3:	0f b6 c0             	movzx  eax,al
c0018cd6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018cd9:	eb 3f                	jmp    c0018d1a <vm8086FaultHandler(regs*)+0x565>
c0018cdb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ce0:	74 07                	je     c0018ce9 <vm8086FaultHandler(regs*)+0x534>
c0018ce2:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018ce6:	ed                   	in     eax,dx
c0018ce7:	eb 14                	jmp    c0018cfd <vm8086FaultHandler(regs*)+0x548>
c0018ce9:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018cec:	66 31 c9             	xor    cx,cx
c0018cef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018cf2:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018cf6:	66 ed                	in     ax,dx
c0018cf8:	0f b7 c0             	movzx  eax,ax
c0018cfb:	09 c8                	or     eax,ecx
c0018cfd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018d00:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018d04:	e9 84 00 00 00       	jmp    c0018d8d <vm8086FaultHandler(regs*)+0x5d8>
c0018d09:	52                   	push   edx
c0018d0a:	52                   	push   edx
c0018d0b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018d0f:	50                   	push   eax
c0018d10:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018d14:	50                   	push   eax
c0018d15:	e8 47 f8 ff ff       	call   c0018561 <outbv(unsigned short, unsigned char)>
c0018d1a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018d1e:	eb 53                	jmp    c0018d73 <vm8086FaultHandler(regs*)+0x5be>
c0018d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018d23:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018d27:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d2c:	74 03                	je     c0018d31 <vm8086FaultHandler(regs*)+0x57c>
c0018d2e:	ef                   	out    dx,eax
c0018d2f:	eb cf                	jmp    c0018d00 <vm8086FaultHandler(regs*)+0x54b>
c0018d31:	66 ef                	out    dx,ax
c0018d33:	eb cb                	jmp    c0018d00 <vm8086FaultHandler(regs*)+0x54b>
c0018d35:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018d3c:	83 ec 0c             	sub    esp,0xc
c0018d3f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018d43:	50                   	push   eax
c0018d44:	e8 12 f8 ff ff       	call   c001855b <inbv(unsigned short)>
c0018d49:	0f b6 c0             	movzx  eax,al
c0018d4c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018d4f:	eb 1f                	jmp    c0018d70 <vm8086FaultHandler(regs*)+0x5bb>
c0018d51:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018d54:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d59:	74 03                	je     c0018d5e <vm8086FaultHandler(regs*)+0x5a9>
c0018d5b:	ed                   	in     eax,dx
c0018d5c:	eb 0d                	jmp    c0018d6b <vm8086FaultHandler(regs*)+0x5b6>
c0018d5e:	66 ed                	in     ax,dx
c0018d60:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018d63:	0f b7 c0             	movzx  eax,ax
c0018d66:	66 31 d2             	xor    dx,dx
c0018d69:	09 d0                	or     eax,edx
c0018d6b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018d6e:	eb 1a                	jmp    c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c0018d70:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d73:	83 c4 10             	add    esp,0x10
c0018d76:	eb 15                	jmp    c0018d8d <vm8086FaultHandler(regs*)+0x5d8>
c0018d78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018d7b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018d7e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d83:	74 03                	je     c0018d88 <vm8086FaultHandler(regs*)+0x5d3>
c0018d85:	ef                   	out    dx,eax
c0018d86:	eb 02                	jmp    c0018d8a <vm8086FaultHandler(regs*)+0x5d5>
c0018d88:	66 ef                	out    dx,ax
c0018d8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d8d:	b0 01                	mov    al,0x1
c0018d8f:	eb 56                	jmp    c0018de7 <vm8086FaultHandler(regs*)+0x632>
c0018d91:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018d95:	50                   	push   eax
c0018d96:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018d9a:	50                   	push   eax
c0018d9b:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018d9f:	50                   	push   eax
c0018da0:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018da4:	50                   	push   eax
c0018da5:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018da9:	50                   	push   eax
c0018daa:	52                   	push   edx
c0018dab:	52                   	push   edx
c0018dac:	68 d3 a4 03 c0       	push   0xc003a4d3
c0018db1:	e8 34 41 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c0018db6:	83 c4 20             	add    esp,0x20
c0018db9:	83 ec 0c             	sub    esp,0xc
c0018dbc:	6a 60                	push   0x60
c0018dbe:	e8 98 f7 ff ff       	call   c001855b <inbv(unsigned short)>
c0018dc3:	83 c4 10             	add    esp,0x10
c0018dc6:	3c 1c                	cmp    al,0x1c
c0018dc8:	74 04                	je     c0018dce <vm8086FaultHandler(regs*)+0x619>
c0018dca:	3c 5a                	cmp    al,0x5a
c0018dcc:	75 eb                	jne    c0018db9 <vm8086FaultHandler(regs*)+0x604>
c0018dce:	3c 5a                	cmp    al,0x5a
c0018dd0:	74 04                	je     c0018dd6 <vm8086FaultHandler(regs*)+0x621>
c0018dd2:	3c 1c                	cmp    al,0x1c
c0018dd4:	75 0f                	jne    c0018de5 <vm8086FaultHandler(regs*)+0x630>
c0018dd6:	83 ec 0c             	sub    esp,0xc
c0018dd9:	6a 60                	push   0x60
c0018ddb:	e8 7b f7 ff ff       	call   c001855b <inbv(unsigned short)>
c0018de0:	83 c4 10             	add    esp,0x10
c0018de3:	eb e9                	jmp    c0018dce <vm8086FaultHandler(regs*)+0x619>
c0018de5:	31 c0                	xor    eax,eax
c0018de7:	83 c4 1c             	add    esp,0x1c
c0018dea:	5b                   	pop    ebx
c0018deb:	5e                   	pop    esi
c0018dec:	5f                   	pop    edi
c0018ded:	5d                   	pop    ebp
c0018dee:	c3                   	ret    
c0018def:	90                   	nop

c0018df0 <FAT::getName()>:
c0018df0:	b8 30 a5 03 c0       	mov    eax,0xc003a530
c0018df5:	c3                   	ret    

c0018df6 <FAT::tell(void*, unsigned long long*)>:
c0018df6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018dfb:	75 06                	jne    c0018e03 <FAT::tell(void*, unsigned long long*)+0xd>
c0018dfd:	b8 04 00 00 00       	mov    eax,0x4
c0018e02:	c3                   	ret    
c0018e03:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e08:	75 06                	jne    c0018e10 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018e0a:	b8 04 00 00 00       	mov    eax,0x4
c0018e0f:	c3                   	ret    
c0018e10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e14:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018e17:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018e1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e1e:	89 01                	mov    DWORD PTR [ecx],eax
c0018e20:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e23:	b8 00 00 00 00       	mov    eax,0x0
c0018e28:	c3                   	ret    
c0018e29:	90                   	nop

c0018e2a <FAT::stat(void*, unsigned long long*)>:
c0018e2a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e2f:	75 06                	jne    c0018e37 <FAT::stat(void*, unsigned long long*)+0xd>
c0018e31:	b8 04 00 00 00       	mov    eax,0x4
c0018e36:	c3                   	ret    
c0018e37:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e3c:	75 06                	jne    c0018e44 <FAT::stat(void*, unsigned long long*)+0x1a>
c0018e3e:	b8 04 00 00 00       	mov    eax,0x4
c0018e43:	c3                   	ret    
c0018e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018e4b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018e4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e52:	89 01                	mov    DWORD PTR [ecx],eax
c0018e54:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e57:	b8 00 00 00 00       	mov    eax,0x0
c0018e5c:	c3                   	ret    
c0018e5d:	90                   	nop

c0018e5e <FAT::exists(char const*)>:
c0018e5e:	b0 00                	mov    al,0x0
c0018e60:	c3                   	ret    
c0018e61:	90                   	nop

c0018e62 <FAT::~FAT()>:
c0018e62:	83 ec 0c             	sub    esp,0xc
c0018e65:	ba b4 a5 03 c0       	mov    edx,0xc003a5b4
c0018e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e6e:	89 10                	mov    DWORD PTR [eax],edx
c0018e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e74:	83 ec 0c             	sub    esp,0xc
c0018e77:	50                   	push   eax
c0018e78:	e8 45 98 ff ff       	call   c00126c2 <Filesystem::~Filesystem()>
c0018e7d:	83 c4 10             	add    esp,0x10
c0018e80:	90                   	nop
c0018e81:	83 c4 0c             	add    esp,0xc
c0018e84:	c3                   	ret    
c0018e85:	90                   	nop

c0018e86 <FAT::~FAT()>:
c0018e86:	83 ec 0c             	sub    esp,0xc
c0018e89:	83 ec 0c             	sub    esp,0xc
c0018e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e90:	e8 cd ff ff ff       	call   c0018e62 <FAT::~FAT()>
c0018e95:	83 c4 10             	add    esp,0x10
c0018e98:	83 ec 08             	sub    esp,0x8
c0018e9b:	6a 08                	push   0x8
c0018e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ea1:	e8 03 96 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0018ea6:	83 c4 10             	add    esp,0x10
c0018ea9:	83 c4 0c             	add    esp,0xc
c0018eac:	c3                   	ret    
c0018ead:	90                   	nop

c0018eae <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018eae:	83 ec 1c             	sub    esp,0x1c
c0018eb1:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018eb8:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018ebd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ec1:	8b 04 85 80 c8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3780]
c0018ec8:	83 f8 ff             	cmp    eax,0xffffffff
c0018ecb:	75 34                	jne    c0018f01 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018ecd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ed1:	88 c2                	mov    dl,al
c0018ed3:	a1 60 c8 03 c0       	mov    eax,ds:0xc003c860
c0018ed8:	01 d0                	add    eax,edx
c0018eda:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ede:	8b 15 60 c8 03 c0    	mov    edx,DWORD PTR ds:0xc003c860
c0018ee4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ee8:	89 14 85 80 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3780],edx
c0018eef:	a1 60 c8 03 c0       	mov    eax,ds:0xc003c860
c0018ef4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ef8:	89 14 85 00 c9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3700],edx
c0018eff:	eb 17                	jmp    c0018f18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018f01:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f05:	88 c2                	mov    dl,al
c0018f07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f0b:	8b 04 85 80 c8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3780]
c0018f12:	01 d0                	add    eax,edx
c0018f14:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f18:	83 ec 04             	sub    esp,0x4
c0018f1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f23:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018f27:	50                   	push   eax
c0018f28:	e8 55 de fe ff       	call   c0006d82 <f_getlabel>
c0018f2d:	83 c4 10             	add    esp,0x10
c0018f30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f39:	75 07                	jne    c0018f42 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018f3b:	b8 00 00 00 00       	mov    eax,0x0
c0018f40:	eb 05                	jmp    c0018f47 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018f42:	b8 01 00 00 00       	mov    eax,0x1
c0018f47:	83 c4 1c             	add    esp,0x1c
c0018f4a:	c3                   	ret    
c0018f4b:	90                   	nop

c0018f4c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018f4c:	57                   	push   edi
c0018f4d:	83 ec 58             	sub    esp,0x58
c0018f50:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018f58:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f5c:	b9 0f 00 00 00       	mov    ecx,0xf
c0018f61:	b8 00 00 00 00       	mov    eax,0x0
c0018f66:	fc                   	cld    
c0018f67:	89 d7                	mov    edi,edx
c0018f69:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018f6b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f6f:	8b 04 85 80 c8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3780]
c0018f76:	83 f8 ff             	cmp    eax,0xffffffff
c0018f79:	75 34                	jne    c0018faf <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018f7b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018f7f:	88 c2                	mov    dl,al
c0018f81:	a1 60 c8 03 c0       	mov    eax,ds:0xc003c860
c0018f86:	01 d0                	add    eax,edx
c0018f88:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f8c:	8b 15 60 c8 03 c0    	mov    edx,DWORD PTR ds:0xc003c860
c0018f92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f96:	89 14 85 80 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3780],edx
c0018f9d:	a1 60 c8 03 c0       	mov    eax,ds:0xc003c860
c0018fa2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018fa6:	89 14 85 00 c9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3700],edx
c0018fad:	eb 17                	jmp    c0018fc6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018faf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018fb3:	88 c2                	mov    dl,al
c0018fb5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018fb9:	8b 04 85 80 c8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3780]
c0018fc0:	01 d0                	add    eax,edx
c0018fc2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018fc6:	83 ec 08             	sub    esp,0x8
c0018fc9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018fcd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fd1:	50                   	push   eax
c0018fd2:	e8 6a 79 fe ff       	call   c0000941 <strcat>
c0018fd7:	83 c4 10             	add    esp,0x10
c0018fda:	83 ec 0c             	sub    esp,0xc
c0018fdd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fe1:	50                   	push   eax
c0018fe2:	e8 89 df fe ff       	call   c0006f70 <f_setlabel>
c0018fe7:	83 c4 10             	add    esp,0x10
c0018fea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018fee:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018ff3:	75 07                	jne    c0018ffc <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018ff5:	b8 00 00 00 00       	mov    eax,0x0
c0018ffa:	eb 05                	jmp    c0019001 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018ffc:	b8 01 00 00 00       	mov    eax,0x1
c0019001:	83 c4 58             	add    esp,0x58
c0019004:	5f                   	pop    edi
c0019005:	c3                   	ret    

c0019006 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019006:	83 ec 2c             	sub    esp,0x2c
c0019009:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019011:	83 ec 08             	sub    esp,0x8
c0019014:	68 54 a5 03 c0       	push   0xc003a554
c0019019:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001901d:	e8 58 78 fe ff       	call   c000087a <strcmp>
c0019022:	83 c4 10             	add    esp,0x10
c0019025:	85 c0                	test   eax,eax
c0019027:	0f 94 c0             	sete   al
c001902a:	84 c0                	test   al,al
c001902c:	74 0d                	je     c001903b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001902e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019036:	e9 a6 00 00 00       	jmp    c00190e1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001903b:	83 ec 08             	sub    esp,0x8
c001903e:	68 46 a5 03 c0       	push   0xc003a546
c0019043:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019047:	e8 2e 78 fe ff       	call   c000087a <strcmp>
c001904c:	83 c4 10             	add    esp,0x10
c001904f:	85 c0                	test   eax,eax
c0019051:	0f 94 c0             	sete   al
c0019054:	84 c0                	test   al,al
c0019056:	74 0a                	je     c0019062 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019058:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019060:	eb 7f                	jmp    c00190e1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019062:	83 ec 08             	sub    esp,0x8
c0019065:	68 4c a5 03 c0       	push   0xc003a54c
c001906a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001906e:	e8 07 78 fe ff       	call   c000087a <strcmp>
c0019073:	83 c4 10             	add    esp,0x10
c0019076:	85 c0                	test   eax,eax
c0019078:	0f 94 c0             	sete   al
c001907b:	84 c0                	test   al,al
c001907d:	74 0a                	je     c0019089 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001907f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019087:	eb 58                	jmp    c00190e1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019089:	83 ec 08             	sub    esp,0x8
c001908c:	68 ec f7 01 c0       	push   0xc001f7ec
c0019091:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019095:	e8 e0 77 fe ff       	call   c000087a <strcmp>
c001909a:	83 c4 10             	add    esp,0x10
c001909d:	85 c0                	test   eax,eax
c001909f:	0f 94 c0             	sete   al
c00190a2:	84 c0                	test   al,al
c00190a4:	74 0a                	je     c00190b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00190a6:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00190ae:	eb 31                	jmp    c00190e1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00190b0:	83 ec 08             	sub    esp,0x8
c00190b3:	68 52 a5 03 c0       	push   0xc003a552
c00190b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190bc:	e8 b9 77 fe ff       	call   c000087a <strcmp>
c00190c1:	83 c4 10             	add    esp,0x10
c00190c4:	85 c0                	test   eax,eax
c00190c6:	0f 94 c0             	sete   al
c00190c9:	84 c0                	test   al,al
c00190cb:	74 0a                	je     c00190d7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00190cd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00190d5:	eb 0a                	jmp    c00190e1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00190d7:	b8 08 00 00 00       	mov    eax,0x8
c00190dc:	e9 04 01 00 00       	jmp    c00191e5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00190e1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00190e8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00190ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190f1:	8b 04 85 80 c8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3780]
c00190f8:	83 f8 ff             	cmp    eax,0xffffffff
c00190fb:	75 34                	jne    c0019131 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00190fd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019101:	88 c2                	mov    dl,al
c0019103:	a1 60 c8 03 c0       	mov    eax,ds:0xc003c860
c0019108:	01 d0                	add    eax,edx
c001910a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001910e:	8b 15 60 c8 03 c0    	mov    edx,DWORD PTR ds:0xc003c860
c0019114:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019118:	89 14 85 80 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3780],edx
c001911f:	a1 60 c8 03 c0       	mov    eax,ds:0xc003c860
c0019124:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019128:	89 14 85 00 c9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3700],edx
c001912f:	eb 17                	jmp    c0019148 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019131:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019135:	88 c2                	mov    dl,al
c0019137:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001913b:	8b 04 85 80 c8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3780]
c0019142:	01 d0                	add    eax,edx
c0019144:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019148:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001914c:	88 04 24             	mov    BYTE PTR [esp],al
c001914f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019153:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019157:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001915f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019164:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001916c:	83 ec 0c             	sub    esp,0xc
c001916f:	68 00 20 00 00       	push   0x2000
c0019174:	e8 6c 43 ff ff       	call   c000d4e5 <malloc>
c0019179:	83 c4 10             	add    esp,0x10
c001917c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019180:	68 00 20 00 00       	push   0x2000
c0019185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019189:	8d 44 24 08          	lea    eax,[esp+0x8]
c001918d:	50                   	push   eax
c001918e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019192:	50                   	push   eax
c0019193:	e8 23 e2 fe ff       	call   c00073bb <f_mkfs>
c0019198:	83 c4 10             	add    esp,0x10
c001919b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001919f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00191a4:	75 07                	jne    c00191ad <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00191a6:	b8 00 00 00 00       	mov    eax,0x0
c00191ab:	eb 38                	jmp    c00191e5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00191ad:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00191b2:	75 17                	jne    c00191cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00191b4:	83 ec 0c             	sub    esp,0xc
c00191b7:	68 84 a5 03 c0       	push   0xc003a584
c00191bc:	e8 29 3d ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	b8 09 00 00 00       	mov    eax,0x9
c00191c9:	eb 1a                	jmp    c00191e5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00191cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191cf:	83 ec 08             	sub    esp,0x8
c00191d2:	50                   	push   eax
c00191d3:	68 58 a5 03 c0       	push   0xc003a558
c00191d8:	e8 0d 3d ff ff       	call   c000ceea <kprintf(char const*, ...)>
c00191dd:	83 c4 10             	add    esp,0x10
c00191e0:	b8 01 00 00 00       	mov    eax,0x1
c00191e5:	83 c4 2c             	add    esp,0x2c
c00191e8:	c3                   	ret    
c00191e9:	90                   	nop

c00191ea <FAT::tryMount(LogicalDisk*, int)>:
c00191ea:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00191f0:	a1 60 c8 03 c0       	mov    eax,ds:0xc003c860
c00191f5:	83 f8 14             	cmp    eax,0x14
c00191f8:	75 17                	jne    c0019211 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00191fa:	83 ec 0c             	sub    esp,0xc
c00191fd:	68 6a a5 03 c0       	push   0xc003a56a
c0019202:	e8 01 3e ff ff       	call   c000d008 <panic(char const*)>
c0019207:	83 c4 10             	add    esp,0x10
c001920a:	b0 00                	mov    al,0x0
c001920c:	e9 d7 01 00 00       	jmp    c00193e8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019211:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019218:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001921e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019224:	3d 00 02 00 00       	cmp    eax,0x200
c0019229:	74 07                	je     c0019232 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001922b:	b0 00                	mov    al,0x0
c001922d:	e9 b6 01 00 00       	jmp    c00193e8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019232:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001923a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019241:	8b 04 85 80 c8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3780]
c0019248:	83 f8 ff             	cmp    eax,0xffffffff
c001924b:	74 07                	je     c0019254 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001924d:	b0 01                	mov    al,0x1
c001924f:	e9 94 01 00 00       	jmp    c00193e8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019254:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001925e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019266:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001926d:	88 c2                	mov    dl,al
c001926f:	a1 60 c8 03 c0       	mov    eax,ds:0xc003c860
c0019274:	01 d0                	add    eax,edx
c0019276:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001927d:	8b 15 60 c8 03 c0    	mov    edx,DWORD PTR ds:0xc003c860
c0019283:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001928a:	89 14 85 80 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3780],edx
c0019291:	a1 60 c8 03 c0       	mov    eax,ds:0xc003c860
c0019296:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001929d:	89 14 85 00 c9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3700],edx
c00192a4:	83 ec 0c             	sub    esp,0xc
c00192a7:	68 54 02 00 00       	push   0x254
c00192ac:	e8 34 42 ff ff       	call   c000d4e5 <malloc>
c00192b1:	83 c4 10             	add    esp,0x10
c00192b4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00192bb:	83 ec 04             	sub    esp,0x4
c00192be:	6a 00                	push   0x0
c00192c0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00192c7:	50                   	push   eax
c00192c8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192cf:	e8 a5 bc fe ff       	call   c0004f79 <f_mount>
c00192d4:	83 c4 10             	add    esp,0x10
c00192d7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00192de:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00192e6:	74 19                	je     c0019301 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00192e8:	83 ec 0c             	sub    esp,0xc
c00192eb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192f2:	e8 0e 42 ff ff       	call   c000d505 <rfree>
c00192f7:	83 c4 10             	add    esp,0x10
c00192fa:	b0 00                	mov    al,0x0
c00192fc:	e9 e7 00 00 00       	jmp    c00193e8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019301:	83 ec 04             	sub    esp,0x4
c0019304:	68 00 01 00 00       	push   0x100
c0019309:	6a 00                	push   0x0
c001930b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019312:	50                   	push   eax
c0019313:	e8 c0 73 fe ff       	call   c00006d8 <memset>
c0019318:	83 c4 10             	add    esp,0x10
c001931b:	83 ec 08             	sub    esp,0x8
c001931e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019325:	50                   	push   eax
c0019326:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001932d:	50                   	push   eax
c001932e:	e8 0e 76 fe ff       	call   c0000941 <strcat>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	83 ec 08             	sub    esp,0x8
c0019339:	68 78 a5 03 c0       	push   0xc003a578
c001933e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019345:	50                   	push   eax
c0019346:	e8 f6 75 fe ff       	call   c0000941 <strcat>
c001934b:	83 c4 10             	add    esp,0x10
c001934e:	83 ec 04             	sub    esp,0x4
c0019351:	6a 01                	push   0x1
c0019353:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001935a:	50                   	push   eax
c001935b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001935f:	50                   	push   eax
c0019360:	e8 76 bc fe ff       	call   c0004fdb <f_open>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001936f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019376:	85 c0                	test   eax,eax
c0019378:	74 0a                	je     c0019384 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001937a:	78 2d                	js     c00193a9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001937c:	83 e8 04             	sub    eax,0x4
c001937f:	83 f8 01             	cmp    eax,0x1
c0019382:	77 25                	ja     c00193a9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019384:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001938c:	83 ec 0c             	sub    esp,0xc
c001938f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019393:	50                   	push   eax
c0019394:	e8 94 c7 fe ff       	call   c0005b2d <f_close>
c0019399:	83 c4 10             	add    esp,0x10
c001939c:	90                   	nop
c001939d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00193a5:	74 3a                	je     c00193e1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00193a7:	eb 2d                	jmp    c00193d6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00193a9:	83 ec 0c             	sub    esp,0xc
c00193ac:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00193b3:	e8 4d 41 ff ff       	call   c000d505 <rfree>
c00193b8:	83 c4 10             	add    esp,0x10
c00193bb:	83 ec 04             	sub    esp,0x4
c00193be:	6a 00                	push   0x0
c00193c0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00193c7:	50                   	push   eax
c00193c8:	6a 00                	push   0x0
c00193ca:	e8 aa bb fe ff       	call   c0004f79 <f_mount>
c00193cf:	83 c4 10             	add    esp,0x10
c00193d2:	b0 00                	mov    al,0x0
c00193d4:	eb 12                	jmp    c00193e8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00193d6:	a1 60 c8 03 c0       	mov    eax,ds:0xc003c860
c00193db:	40                   	inc    eax
c00193dc:	a3 60 c8 03 c0       	mov    ds:0xc003c860,eax
c00193e1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00193e8:	81 c4 6c 03 00 00    	add    esp,0x36c
c00193ee:	c3                   	ret    
c00193ef:	90                   	nop

c00193f0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00193f0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00193f6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00193fe:	74 0a                	je     c001940a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0019400:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019408:	75 0a                	jne    c0019414 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001940a:	b8 04 00 00 00       	mov    eax,0x4
c001940f:	e9 dc 00 00 00       	jmp    c00194f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019414:	83 ec 08             	sub    esp,0x8
c0019417:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001941e:	50                   	push   eax
c001941f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019426:	e8 0c cd fe ff       	call   c0006137 <f_readdir>
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019435:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001943c:	83 ec 0c             	sub    esp,0xc
c001943f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019446:	83 c0 1a             	add    eax,0x1a
c0019449:	50                   	push   eax
c001944a:	e8 b2 72 fe ff       	call   c0000701 <strlen>
c001944f:	83 c4 10             	add    esp,0x10
c0019452:	ba 00 00 00 00       	mov    edx,0x0
c0019457:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001945b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001945f:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019466:	0f b6 c0             	movzx  eax,al
c0019469:	83 e0 10             	and    eax,0x10
c001946c:	74 07                	je     c0019475 <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c001946e:	b8 02 00 00 00       	mov    eax,0x2
c0019473:	eb 05                	jmp    c001947a <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c0019475:	b8 01 00 00 00       	mov    eax,0x1
c001947a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001947e:	83 ec 08             	sub    esp,0x8
c0019481:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019488:	83 c0 1a             	add    eax,0x1a
c001948b:	50                   	push   eax
c001948c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019490:	83 c0 10             	add    eax,0x10
c0019493:	50                   	push   eax
c0019494:	e8 5b 73 fe ff       	call   c00007f4 <strcpy>
c0019499:	83 c4 10             	add    esp,0x10
c001949c:	83 ec 04             	sub    esp,0x4
c001949f:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00194a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194aa:	50                   	push   eax
c00194ab:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00194b2:	e8 aa 71 fe ff       	call   c0000661 <memcpy>
c00194b7:	83 c4 10             	add    esp,0x10
c00194ba:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00194c1:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00194c7:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00194ce:	84 c0                	test   al,al
c00194d0:	75 07                	jne    c00194d9 <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c00194d2:	b8 07 00 00 00       	mov    eax,0x7
c00194d7:	eb 17                	jmp    c00194f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00194d9:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00194e0:	85 c0                	test   eax,eax
c00194e2:	75 07                	jne    c00194eb <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c00194e4:	b8 00 00 00 00       	mov    eax,0x0
c00194e9:	eb 05                	jmp    c00194f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00194eb:	b8 01 00 00 00       	mov    eax,0x1
c00194f0:	81 c4 3c 02 00 00    	add    esp,0x23c
c00194f6:	c3                   	ret    
c00194f7:	90                   	nop

c00194f8 <FAT::read(void*, unsigned long, void*, int*)>:
c00194f8:	83 ec 1c             	sub    esp,0x1c
c00194fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019500:	74 07                	je     c0019509 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0019502:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019507:	75 07                	jne    c0019510 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019509:	b8 04 00 00 00       	mov    eax,0x4
c001950e:	eb 3d                	jmp    c001954d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019510:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019514:	50                   	push   eax
c0019515:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019519:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001951d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019521:	e8 f1 be fe ff       	call   c0005417 <f_read>
c0019526:	83 c4 10             	add    esp,0x10
c0019529:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001952d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019531:	89 c2                	mov    edx,eax
c0019533:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019537:	89 10                	mov    DWORD PTR [eax],edx
c0019539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001953d:	85 c0                	test   eax,eax
c001953f:	75 07                	jne    c0019548 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019541:	b8 00 00 00 00       	mov    eax,0x0
c0019546:	eb 05                	jmp    c001954d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019548:	b8 01 00 00 00       	mov    eax,0x1
c001954d:	83 c4 1c             	add    esp,0x1c
c0019550:	c3                   	ret    
c0019551:	90                   	nop

c0019552 <FAT::write(void*, unsigned long, void*, int*)>:
c0019552:	83 ec 1c             	sub    esp,0x1c
c0019555:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001955a:	74 07                	je     c0019563 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001955c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019561:	75 07                	jne    c001956a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019563:	b8 04 00 00 00       	mov    eax,0x4
c0019568:	eb 3d                	jmp    c00195a7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001956a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001956e:	50                   	push   eax
c001956f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019577:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001957b:	e8 17 c1 fe ff       	call   c0005697 <f_write>
c0019580:	83 c4 10             	add    esp,0x10
c0019583:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019587:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001958b:	89 c2                	mov    edx,eax
c001958d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019591:	89 10                	mov    DWORD PTR [eax],edx
c0019593:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019597:	85 c0                	test   eax,eax
c0019599:	75 07                	jne    c00195a2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001959b:	b8 00 00 00 00       	mov    eax,0x0
c00195a0:	eb 05                	jmp    c00195a7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00195a2:	b8 01 00 00 00       	mov    eax,0x1
c00195a7:	83 c4 1c             	add    esp,0x1c
c00195aa:	c3                   	ret    
c00195ab:	90                   	nop

c00195ac <FAT::close(void*)>:
c00195ac:	83 ec 1c             	sub    esp,0x1c
c00195af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195b4:	75 07                	jne    c00195bd <FAT::close(void*)+0x11>
c00195b6:	b8 04 00 00 00       	mov    eax,0x4
c00195bb:	eb 36                	jmp    c00195f3 <FAT::close(void*)+0x47>
c00195bd:	83 ec 0c             	sub    esp,0xc
c00195c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195c4:	e8 64 c5 fe ff       	call   c0005b2d <f_close>
c00195c9:	83 c4 10             	add    esp,0x10
c00195cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195d0:	83 ec 0c             	sub    esp,0xc
c00195d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195d7:	e8 19 3f ff ff       	call   c000d4f5 <free>
c00195dc:	83 c4 10             	add    esp,0x10
c00195df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195e3:	85 c0                	test   eax,eax
c00195e5:	75 07                	jne    c00195ee <FAT::close(void*)+0x42>
c00195e7:	b8 00 00 00 00       	mov    eax,0x0
c00195ec:	eb 05                	jmp    c00195f3 <FAT::close(void*)+0x47>
c00195ee:	b8 01 00 00 00       	mov    eax,0x1
c00195f3:	83 c4 1c             	add    esp,0x1c
c00195f6:	c3                   	ret    
c00195f7:	90                   	nop

c00195f8 <FAT::closeDir(void*)>:
c00195f8:	83 ec 1c             	sub    esp,0x1c
c00195fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019600:	75 07                	jne    c0019609 <FAT::closeDir(void*)+0x11>
c0019602:	b8 04 00 00 00       	mov    eax,0x4
c0019607:	eb 36                	jmp    c001963f <FAT::closeDir(void*)+0x47>
c0019609:	83 ec 0c             	sub    esp,0xc
c001960c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019610:	e8 00 cb fe ff       	call   c0006115 <f_closedir>
c0019615:	83 c4 10             	add    esp,0x10
c0019618:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001961c:	83 ec 0c             	sub    esp,0xc
c001961f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019623:	e8 cd 3e ff ff       	call   c000d4f5 <free>
c0019628:	83 c4 10             	add    esp,0x10
c001962b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001962f:	85 c0                	test   eax,eax
c0019631:	75 07                	jne    c001963a <FAT::closeDir(void*)+0x42>
c0019633:	b8 00 00 00 00       	mov    eax,0x0
c0019638:	eb 05                	jmp    c001963f <FAT::closeDir(void*)+0x47>
c001963a:	b8 01 00 00 00       	mov    eax,0x1
c001963f:	83 c4 1c             	add    esp,0x1c
c0019642:	c3                   	ret    
c0019643:	90                   	nop

c0019644 <FAT::seek(void*, unsigned long long)>:
c0019644:	83 ec 2c             	sub    esp,0x2c
c0019647:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001964b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001964f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019653:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019657:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001965c:	75 07                	jne    c0019665 <FAT::seek(void*, unsigned long long)+0x21>
c001965e:	b8 04 00 00 00       	mov    eax,0x4
c0019663:	eb 2f                	jmp    c0019694 <FAT::seek(void*, unsigned long long)+0x50>
c0019665:	83 ec 04             	sub    esp,0x4
c0019668:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001966c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019670:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019674:	e8 e3 c4 fe ff       	call   c0005b5c <f_lseek>
c0019679:	83 c4 10             	add    esp,0x10
c001967c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019684:	85 c0                	test   eax,eax
c0019686:	75 07                	jne    c001968f <FAT::seek(void*, unsigned long long)+0x4b>
c0019688:	b8 00 00 00 00       	mov    eax,0x0
c001968d:	eb 05                	jmp    c0019694 <FAT::seek(void*, unsigned long long)+0x50>
c001968f:	b8 01 00 00 00       	mov    eax,0x1
c0019694:	83 c4 2c             	add    esp,0x2c
c0019697:	c3                   	ret    

c0019698 <fatWrapperReadDisk>:
c0019698:	83 ec 1c             	sub    esp,0x1c
c001969b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001969f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00196aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00196ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196b7:	8b 04 85 00 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3c00]
c00196be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196c2:	83 ec 0c             	sub    esp,0xc
c00196c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196c9:	52                   	push   edx
c00196ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196d2:	50                   	push   eax
c00196d3:	e8 8e bb ff ff       	call   c0015266 <LogicalDisk::read(unsigned long long, int, void*)>
c00196d8:	83 c4 20             	add    esp,0x20
c00196db:	83 c4 1c             	add    esp,0x1c
c00196de:	c3                   	ret    

c00196df <fatWrapperWriteDisk>:
c00196df:	83 ec 1c             	sub    esp,0x1c
c00196e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196e6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00196f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00196f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196f9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196fe:	8b 04 85 00 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3c00]
c0019705:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019709:	83 ec 0c             	sub    esp,0xc
c001970c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019710:	52                   	push   edx
c0019711:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019715:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019719:	50                   	push   eax
c001971a:	e8 b3 bb ff ff       	call   c00152d2 <LogicalDisk::write(unsigned long long, int, void*)>
c001971f:	83 c4 20             	add    esp,0x20
c0019722:	83 c4 1c             	add    esp,0x1c
c0019725:	c3                   	ret    

c0019726 <fatWrapperIoctl>:
c0019726:	53                   	push   ebx
c0019727:	83 ec 28             	sub    esp,0x28
c001972a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001972e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019732:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019736:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001973a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001973f:	75 31                	jne    c0019772 <fatWrapperIoctl+0x4c>
c0019741:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019745:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019749:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001974e:	8b 04 85 00 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3c00]
c0019755:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001975b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019761:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019765:	66 89 02             	mov    WORD PTR [edx],ax
c0019768:	b8 00 00 00 00       	mov    eax,0x0
c001976d:	e9 b2 00 00 00       	jmp    c0019824 <fatWrapperIoctl+0xfe>
c0019772:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019777:	75 6a                	jne    c00197e3 <fatWrapperIoctl+0xbd>
c0019779:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001977d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019781:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019786:	8b 04 85 00 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3c00]
c001978d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019793:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019799:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001979f:	89 c8                	mov    eax,ecx
c00197a1:	89 da                	mov    edx,ebx
c00197a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00197a7:	c1 e0 0a             	shl    eax,0xa
c00197aa:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00197af:	8b 0c 8d 00 c4 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3c00]
c00197b6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00197bc:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00197c2:	89 cb                	mov    ebx,ecx
c00197c4:	c1 fb 1f             	sar    ebx,0x1f
c00197c7:	53                   	push   ebx
c00197c8:	51                   	push   ecx
c00197c9:	52                   	push   edx
c00197ca:	50                   	push   eax
c00197cb:	e8 6c 4f 00 00       	call   c001e73c <__udivdi3>
c00197d0:	83 c4 10             	add    esp,0x10
c00197d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00197d7:	89 01                	mov    DWORD PTR [ecx],eax
c00197d9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00197dc:	b8 00 00 00 00       	mov    eax,0x0
c00197e1:	eb 41                	jmp    c0019824 <fatWrapperIoctl+0xfe>
c00197e3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00197e8:	75 07                	jne    c00197f1 <fatWrapperIoctl+0xcb>
c00197ea:	b8 00 00 00 00       	mov    eax,0x0
c00197ef:	eb 33                	jmp    c0019824 <fatWrapperIoctl+0xfe>
c00197f1:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00197f6:	75 19                	jne    c0019811 <fatWrapperIoctl+0xeb>
c00197f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019800:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019804:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001980a:	b8 00 00 00 00       	mov    eax,0x0
c001980f:	eb 13                	jmp    c0019824 <fatWrapperIoctl+0xfe>
c0019811:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019816:	75 07                	jne    c001981f <fatWrapperIoctl+0xf9>
c0019818:	b8 00 00 00 00       	mov    eax,0x0
c001981d:	eb 05                	jmp    c0019824 <fatWrapperIoctl+0xfe>
c001981f:	b8 04 00 00 00       	mov    eax,0x4
c0019824:	83 c4 28             	add    esp,0x28
c0019827:	5b                   	pop    ebx
c0019828:	c3                   	ret    
c0019829:	90                   	nop

c001982a <FAT::FAT()>:
c001982a:	83 ec 1c             	sub    esp,0x1c
c001982d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019831:	83 ec 0c             	sub    esp,0xc
c0019834:	50                   	push   eax
c0019835:	e8 64 8e ff ff       	call   c001269e <Filesystem::Filesystem()>
c001983a:	83 c4 10             	add    esp,0x10
c001983d:	ba b4 a5 03 c0       	mov    edx,0xc003a5b4
c0019842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019846:	89 10                	mov    DWORD PTR [eax],edx
c0019848:	c7 05 60 c8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c860,0x0
c0019852:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001985a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001985f:	7f 15                	jg     c0019876 <FAT::FAT()+0x4c>
c0019861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019865:	c7 04 85 80 c8 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc3780],0xffffffff
c0019870:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019874:	eb e4                	jmp    c001985a <FAT::FAT()+0x30>
c0019876:	90                   	nop
c0019877:	83 c4 1c             	add    esp,0x1c
c001987a:	c3                   	ret    
c001987b:	90                   	nop

c001987c <FAT::fixFilepath(char*)>:
c001987c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019880:	8a 00                	mov    al,BYTE PTR [eax]
c0019882:	3c 40                	cmp    al,0x40
c0019884:	7e 2c                	jle    c00198b2 <FAT::fixFilepath(char*)+0x36>
c0019886:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001988a:	8a 00                	mov    al,BYTE PTR [eax]
c001988c:	83 e8 41             	sub    eax,0x41
c001988f:	88 c2                	mov    dl,al
c0019891:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019895:	88 10                	mov    BYTE PTR [eax],dl
c0019897:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001989b:	8a 00                	mov    al,BYTE PTR [eax]
c001989d:	0f be c0             	movsx  eax,al
c00198a0:	8b 04 85 80 c8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3780]
c00198a7:	83 c0 30             	add    eax,0x30
c00198aa:	88 c2                	mov    dl,al
c00198ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198b0:	88 10                	mov    BYTE PTR [eax],dl
c00198b2:	90                   	nop
c00198b3:	c3                   	ret    

c00198b4 <FAT::open(char const*, void**, FileOpenMode)>:
c00198b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00198ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00198c2:	74 0a                	je     c00198ce <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00198c4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198cc:	75 0a                	jne    c00198d8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00198ce:	b8 04 00 00 00       	mov    eax,0x4
c00198d3:	e9 fd 00 00 00       	jmp    c00199d5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00198d8:	83 ec 08             	sub    esp,0x8
c00198db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198e6:	50                   	push   eax
c00198e7:	e8 08 6f fe ff       	call   c00007f4 <strcpy>
c00198ec:	83 c4 10             	add    esp,0x10
c00198ef:	83 ec 08             	sub    esp,0x8
c00198f2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00198f6:	50                   	push   eax
c00198f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198fe:	e8 79 ff ff ff       	call   c001987c <FAT::fixFilepath(char*)>
c0019903:	83 c4 10             	add    esp,0x10
c0019906:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001990e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019915:	83 e0 01             	and    eax,0x1
c0019918:	74 08                	je     c0019922 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001991a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019922:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019929:	83 e0 04             	and    eax,0x4
c001992c:	74 10                	je     c001993e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001992e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019936:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001993e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019945:	83 e0 02             	and    eax,0x2
c0019948:	74 08                	je     c0019952 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001994a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019952:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019959:	83 e0 08             	and    eax,0x8
c001995c:	74 08                	je     c0019966 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001995e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019966:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001996d:	83 e0 10             	and    eax,0x10
c0019970:	74 08                	je     c001997a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019972:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001997a:	83 ec 0c             	sub    esp,0xc
c001997d:	68 50 02 00 00       	push   0x250
c0019982:	e8 5e 3b ff ff       	call   c000d4e5 <malloc>
c0019987:	83 c4 10             	add    esp,0x10
c001998a:	89 c2                	mov    edx,eax
c001998c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019993:	89 10                	mov    DWORD PTR [eax],edx
c0019995:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001999d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00199a6:	83 ec 04             	sub    esp,0x4
c00199a9:	52                   	push   edx
c00199aa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00199ae:	52                   	push   edx
c00199af:	50                   	push   eax
c00199b0:	e8 26 b6 fe ff       	call   c0004fdb <f_open>
c00199b5:	83 c4 10             	add    esp,0x10
c00199b8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00199bf:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00199c7:	74 07                	je     c00199d0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00199c9:	b8 01 00 00 00       	mov    eax,0x1
c00199ce:	eb 05                	jmp    c00199d5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00199d0:	b8 00 00 00 00       	mov    eax,0x0
c00199d5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199db:	c3                   	ret    

c00199dc <FAT::openDir(char const*, void**)>:
c00199dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199ea:	74 0a                	je     c00199f6 <FAT::openDir(char const*, void**)+0x1a>
c00199ec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00199f4:	75 07                	jne    c00199fd <FAT::openDir(char const*, void**)+0x21>
c00199f6:	b8 04 00 00 00       	mov    eax,0x4
c00199fb:	eb 7d                	jmp    c0019a7a <FAT::openDir(char const*, void**)+0x9e>
c00199fd:	83 ec 08             	sub    esp,0x8
c0019a00:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a07:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a0b:	50                   	push   eax
c0019a0c:	e8 e3 6d fe ff       	call   c00007f4 <strcpy>
c0019a11:	83 c4 10             	add    esp,0x10
c0019a14:	83 ec 08             	sub    esp,0x8
c0019a17:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a1b:	50                   	push   eax
c0019a1c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a23:	e8 54 fe ff ff       	call   c001987c <FAT::fixFilepath(char*)>
c0019a28:	83 c4 10             	add    esp,0x10
c0019a2b:	83 ec 0c             	sub    esp,0xc
c0019a2e:	6a 4c                	push   0x4c
c0019a30:	e8 b0 3a ff ff       	call   c000d4e5 <malloc>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	89 c2                	mov    edx,eax
c0019a3a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a41:	89 10                	mov    DWORD PTR [eax],edx
c0019a43:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a4c:	83 ec 08             	sub    esp,0x8
c0019a4f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019a53:	52                   	push   edx
c0019a54:	50                   	push   eax
c0019a55:	e8 b9 c5 fe ff       	call   c0006013 <f_opendir>
c0019a5a:	83 c4 10             	add    esp,0x10
c0019a5d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a64:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019a6c:	74 07                	je     c0019a75 <FAT::openDir(char const*, void**)+0x99>
c0019a6e:	b8 01 00 00 00       	mov    eax,0x1
c0019a73:	eb 05                	jmp    c0019a7a <FAT::openDir(char const*, void**)+0x9e>
c0019a75:	b8 00 00 00 00       	mov    eax,0x0
c0019a7a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a80:	c3                   	ret    
c0019a81:	90                   	nop

c0019a82 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a82:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a88:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a90:	75 0a                	jne    c0019a9c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019a92:	b8 04 00 00 00       	mov    eax,0x4
c0019a97:	e9 c9 00 00 00       	jmp    c0019b65 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a9c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019aa4:	75 0a                	jne    c0019ab0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019aa6:	b8 04 00 00 00       	mov    eax,0x4
c0019aab:	e9 b5 00 00 00       	jmp    c0019b65 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019ab0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019ab8:	75 0a                	jne    c0019ac4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019aba:	b8 04 00 00 00       	mov    eax,0x4
c0019abf:	e9 a1 00 00 00       	jmp    c0019b65 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019ac4:	83 ec 08             	sub    esp,0x8
c0019ac7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ace:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ad5:	50                   	push   eax
c0019ad6:	e8 19 6d fe ff       	call   c00007f4 <strcpy>
c0019adb:	83 c4 10             	add    esp,0x10
c0019ade:	83 ec 08             	sub    esp,0x8
c0019ae1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019ae8:	50                   	push   eax
c0019ae9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019af0:	e8 87 fd ff ff       	call   c001987c <FAT::fixFilepath(char*)>
c0019af5:	83 c4 10             	add    esp,0x10
c0019af8:	83 ec 08             	sub    esp,0x8
c0019afb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019aff:	50                   	push   eax
c0019b00:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b07:	50                   	push   eax
c0019b08:	e8 c5 c6 fe ff       	call   c00061d2 <f_stat>
c0019b0d:	83 c4 10             	add    esp,0x10
c0019b10:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019b17:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019b1e:	85 c0                	test   eax,eax
c0019b20:	74 07                	je     c0019b29 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019b22:	83 f8 04             	cmp    eax,0x4
c0019b25:	74 32                	je     c0019b59 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019b27:	eb 37                	jmp    c0019b60 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019b29:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019b2d:	0f b6 c0             	movzx  eax,al
c0019b30:	83 e0 10             	and    eax,0x10
c0019b33:	0f 95 c2             	setne  dl
c0019b36:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019b3d:	88 10                	mov    BYTE PTR [eax],dl
c0019b3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019b42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b46:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019b4d:	89 01                	mov    DWORD PTR [ecx],eax
c0019b4f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b52:	b8 00 00 00 00       	mov    eax,0x0
c0019b57:	eb 0c                	jmp    c0019b65 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b59:	b8 02 00 00 00       	mov    eax,0x2
c0019b5e:	eb 05                	jmp    c0019b65 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b60:	b8 01 00 00 00       	mov    eax,0x1
c0019b65:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b6b:	c3                   	ret    

c0019b6c <FAT::unlink(char const*)>:
c0019b6c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b72:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b7a:	75 07                	jne    c0019b83 <FAT::unlink(char const*)+0x17>
c0019b7c:	b8 04 00 00 00       	mov    eax,0x4
c0019b81:	eb 5c                	jmp    c0019bdf <FAT::unlink(char const*)+0x73>
c0019b83:	83 ec 08             	sub    esp,0x8
c0019b86:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b91:	50                   	push   eax
c0019b92:	e8 5d 6c fe ff       	call   c00007f4 <strcpy>
c0019b97:	83 c4 10             	add    esp,0x10
c0019b9a:	83 ec 08             	sub    esp,0x8
c0019b9d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ba1:	50                   	push   eax
c0019ba2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ba9:	e8 ce fc ff ff       	call   c001987c <FAT::fixFilepath(char*)>
c0019bae:	83 c4 10             	add    esp,0x10
c0019bb1:	83 ec 0c             	sub    esp,0xc
c0019bb4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019bb8:	50                   	push   eax
c0019bb9:	e8 66 c9 fe ff       	call   c0006524 <f_unlink>
c0019bbe:	83 c4 10             	add    esp,0x10
c0019bc1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019bc8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019bcf:	85 c0                	test   eax,eax
c0019bd1:	75 07                	jne    c0019bda <FAT::unlink(char const*)+0x6e>
c0019bd3:	b8 00 00 00 00       	mov    eax,0x0
c0019bd8:	eb 05                	jmp    c0019bdf <FAT::unlink(char const*)+0x73>
c0019bda:	b8 01 00 00 00       	mov    eax,0x1
c0019bdf:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019be5:	c3                   	ret    

c0019be6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019be6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019bec:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019bf3:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019bfa:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019bfe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c02:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019c0a:	75 0a                	jne    c0019c16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019c0c:	b8 04 00 00 00       	mov    eax,0x4
c0019c11:	e9 1c 01 00 00       	jmp    c0019d32 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019c16:	83 ec 08             	sub    esp,0x8
c0019c19:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c20:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c24:	50                   	push   eax
c0019c25:	e8 ca 6b fe ff       	call   c00007f4 <strcpy>
c0019c2a:	83 c4 10             	add    esp,0x10
c0019c2d:	83 ec 08             	sub    esp,0x8
c0019c30:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c34:	50                   	push   eax
c0019c35:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c3c:	e8 3b fc ff ff       	call   c001987c <FAT::fixFilepath(char*)>
c0019c41:	83 c4 10             	add    esp,0x10
c0019c44:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019c4c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019c54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c59:	83 e0 01             	and    eax,0x1
c0019c5c:	74 08                	je     c0019c66 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019c5e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019c66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c6b:	83 e0 02             	and    eax,0x2
c0019c6e:	74 08                	je     c0019c78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019c70:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019c78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c7d:	83 e0 04             	and    eax,0x4
c0019c80:	74 08                	je     c0019c8a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019c82:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019c8a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c8f:	83 e0 08             	and    eax,0x8
c0019c92:	74 08                	je     c0019c9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019c94:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019c9c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ca1:	83 e0 01             	and    eax,0x1
c0019ca4:	74 08                	je     c0019cae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019ca6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019cae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cb3:	83 e0 02             	and    eax,0x2
c0019cb6:	74 08                	je     c0019cc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019cb8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019cc0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cc5:	83 e0 04             	and    eax,0x4
c0019cc8:	74 08                	je     c0019cd2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019cca:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019cd2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cd7:	83 e0 08             	and    eax,0x8
c0019cda:	74 08                	je     c0019ce4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019cdc:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019ce4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ceb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019cf2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019cfa:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019d02:	83 ec 04             	sub    esp,0x4
c0019d05:	52                   	push   edx
c0019d06:	50                   	push   eax
c0019d07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d0b:	50                   	push   eax
c0019d0c:	e8 b5 ce fe ff       	call   c0006bc6 <f_chmod>
c0019d11:	83 c4 10             	add    esp,0x10
c0019d14:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019d1b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019d22:	85 c0                	test   eax,eax
c0019d24:	75 07                	jne    c0019d2d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019d26:	b8 00 00 00 00       	mov    eax,0x0
c0019d2b:	eb 05                	jmp    c0019d32 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019d2d:	b8 01 00 00 00       	mov    eax,0x1
c0019d32:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d38:	c3                   	ret    
c0019d39:	90                   	nop

c0019d3a <FAT::rename(char const*, char const*)>:
c0019d3a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019d40:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019d48:	74 0a                	je     c0019d54 <FAT::rename(char const*, char const*)+0x1a>
c0019d4a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019d52:	75 0a                	jne    c0019d5e <FAT::rename(char const*, char const*)+0x24>
c0019d54:	b8 04 00 00 00       	mov    eax,0x4
c0019d59:	e9 98 00 00 00       	jmp    c0019df6 <FAT::rename(char const*, char const*)+0xbc>
c0019d5e:	83 ec 08             	sub    esp,0x8
c0019d61:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d68:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d6f:	50                   	push   eax
c0019d70:	e8 7f 6a fe ff       	call   c00007f4 <strcpy>
c0019d75:	83 c4 10             	add    esp,0x10
c0019d78:	83 ec 08             	sub    esp,0x8
c0019d7b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019d82:	50                   	push   eax
c0019d83:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d8a:	e8 ed fa ff ff       	call   c001987c <FAT::fixFilepath(char*)>
c0019d8f:	83 c4 10             	add    esp,0x10
c0019d92:	83 ec 08             	sub    esp,0x8
c0019d95:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019d9c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019da0:	50                   	push   eax
c0019da1:	e8 4e 6a fe ff       	call   c00007f4 <strcpy>
c0019da6:	83 c4 10             	add    esp,0x10
c0019da9:	83 ec 08             	sub    esp,0x8
c0019dac:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019db0:	50                   	push   eax
c0019db1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019db8:	e8 bf fa ff ff       	call   c001987c <FAT::fixFilepath(char*)>
c0019dbd:	83 c4 10             	add    esp,0x10
c0019dc0:	83 ec 08             	sub    esp,0x8
c0019dc3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dc7:	50                   	push   eax
c0019dc8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019dcf:	50                   	push   eax
c0019dd0:	e8 fe ca fe ff       	call   c00068d3 <f_rename>
c0019dd5:	83 c4 10             	add    esp,0x10
c0019dd8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019ddf:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019de6:	85 c0                	test   eax,eax
c0019de8:	75 07                	jne    c0019df1 <FAT::rename(char const*, char const*)+0xb7>
c0019dea:	b8 00 00 00 00       	mov    eax,0x0
c0019def:	eb 05                	jmp    c0019df6 <FAT::rename(char const*, char const*)+0xbc>
c0019df1:	b8 01 00 00 00       	mov    eax,0x1
c0019df6:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019dfc:	c3                   	ret    
c0019dfd:	90                   	nop

c0019dfe <FAT::mkdir(char const*)>:
c0019dfe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e04:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e0c:	75 07                	jne    c0019e15 <FAT::mkdir(char const*)+0x17>
c0019e0e:	b8 04 00 00 00       	mov    eax,0x4
c0019e13:	eb 5c                	jmp    c0019e71 <FAT::mkdir(char const*)+0x73>
c0019e15:	83 ec 08             	sub    esp,0x8
c0019e18:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e1f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e23:	50                   	push   eax
c0019e24:	e8 cb 69 fe ff       	call   c00007f4 <strcpy>
c0019e29:	83 c4 10             	add    esp,0x10
c0019e2c:	83 ec 08             	sub    esp,0x8
c0019e2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e33:	50                   	push   eax
c0019e34:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e3b:	e8 3c fa ff ff       	call   c001987c <FAT::fixFilepath(char*)>
c0019e40:	83 c4 10             	add    esp,0x10
c0019e43:	83 ec 0c             	sub    esp,0xc
c0019e46:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e4a:	50                   	push   eax
c0019e4b:	e8 57 c8 fe ff       	call   c00066a7 <f_mkdir>
c0019e50:	83 c4 10             	add    esp,0x10
c0019e53:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e5a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e61:	85 c0                	test   eax,eax
c0019e63:	75 07                	jne    c0019e6c <FAT::mkdir(char const*)+0x6e>
c0019e65:	b8 00 00 00 00       	mov    eax,0x0
c0019e6a:	eb 05                	jmp    c0019e71 <FAT::mkdir(char const*)+0x73>
c0019e6c:	b8 01 00 00 00       	mov    eax,0x1
c0019e71:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e77:	c3                   	ret    

c0019e78 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e78:	b8 08 00 00 00       	mov    eax,0x8
c0019e7d:	c3                   	ret    

c0019e7e <ISO9660::seek(void*, unsigned long long)>:
c0019e7e:	53                   	push   ebx
c0019e7f:	b8 04 00 00 00       	mov    eax,0x4
c0019e84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e90:	85 d2                	test   edx,edx
c0019e92:	74 17                	je     c0019eab <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e94:	89 c8                	mov    eax,ecx
c0019e96:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019e99:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019e9c:	b8 01 00 00 00       	mov    eax,0x1
c0019ea1:	73 08                	jae    c0019eab <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019ea3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019ea6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019ea9:	31 c0                	xor    eax,eax
c0019eab:	5b                   	pop    ebx
c0019eac:	c3                   	ret    
c0019ead:	90                   	nop

c0019eae <ISO9660::tell(void*, unsigned long long*)>:
c0019eae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019eb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019eb6:	85 d2                	test   edx,edx
c0019eb8:	74 12                	je     c0019ecc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019eba:	85 c0                	test   eax,eax
c0019ebc:	74 0e                	je     c0019ecc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019ebe:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019ec1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019ec4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019ec7:	89 10                	mov    DWORD PTR [eax],edx
c0019ec9:	31 c0                	xor    eax,eax
c0019ecb:	c3                   	ret    
c0019ecc:	b8 04 00 00 00       	mov    eax,0x4
c0019ed1:	c3                   	ret    

c0019ed2 <ISO9660::getName()>:
c0019ed2:	b8 10 a6 03 c0       	mov    eax,0xc003a610
c0019ed7:	c3                   	ret    

c0019ed8 <ISO9660::stat(void*, unsigned long long*)>:
c0019ed8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019edc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ee0:	85 d2                	test   edx,edx
c0019ee2:	74 12                	je     c0019ef6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019ee4:	85 c0                	test   eax,eax
c0019ee6:	74 0e                	je     c0019ef6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019ee8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019eeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019eee:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019ef1:	89 10                	mov    DWORD PTR [eax],edx
c0019ef3:	31 c0                	xor    eax,eax
c0019ef5:	c3                   	ret    
c0019ef6:	b8 04 00 00 00       	mov    eax,0x4
c0019efb:	c3                   	ret    

c0019efc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019efc:	b8 01 00 00 00       	mov    eax,0x1
c0019f01:	c3                   	ret    

c0019f02 <ISO9660::unlink(char const*)>:
c0019f02:	b8 01 00 00 00       	mov    eax,0x1
c0019f07:	c3                   	ret    

c0019f08 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019f08:	b8 01 00 00 00       	mov    eax,0x1
c0019f0d:	c3                   	ret    

c0019f0e <ISO9660::rename(char const*, char const*)>:
c0019f0e:	b8 01 00 00 00       	mov    eax,0x1
c0019f13:	c3                   	ret    

c0019f14 <ISO9660::mkdir(char const*)>:
c0019f14:	b8 01 00 00 00       	mov    eax,0x1
c0019f19:	c3                   	ret    

c0019f1a <ISO9660::close(void*)>:
c0019f1a:	83 ec 0c             	sub    esp,0xc
c0019f1d:	b8 04 00 00 00       	mov    eax,0x4
c0019f22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f26:	85 d2                	test   edx,edx
c0019f28:	74 0e                	je     c0019f38 <ISO9660::close(void*)+0x1e>
c0019f2a:	83 ec 0c             	sub    esp,0xc
c0019f2d:	52                   	push   edx
c0019f2e:	e8 c2 35 ff ff       	call   c000d4f5 <free>
c0019f33:	83 c4 10             	add    esp,0x10
c0019f36:	31 c0                	xor    eax,eax
c0019f38:	83 c4 0c             	add    esp,0xc
c0019f3b:	c3                   	ret    

c0019f3c <ISO9660::closeDir(void*)>:
c0019f3c:	83 ec 0c             	sub    esp,0xc
c0019f3f:	b8 04 00 00 00       	mov    eax,0x4
c0019f44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f48:	85 d2                	test   edx,edx
c0019f4a:	74 0e                	je     c0019f5a <ISO9660::closeDir(void*)+0x1e>
c0019f4c:	83 ec 0c             	sub    esp,0xc
c0019f4f:	52                   	push   edx
c0019f50:	e8 a0 35 ff ff       	call   c000d4f5 <free>
c0019f55:	83 c4 10             	add    esp,0x10
c0019f58:	31 c0                	xor    eax,eax
c0019f5a:	83 c4 0c             	add    esp,0xc
c0019f5d:	c3                   	ret    

c0019f5e <ISO9660::~ISO9660()>:
c0019f5e:	83 ec 0c             	sub    esp,0xc
c0019f61:	ba 64 a6 03 c0       	mov    edx,0xc003a664
c0019f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f6a:	89 10                	mov    DWORD PTR [eax],edx
c0019f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f70:	83 ec 0c             	sub    esp,0xc
c0019f73:	50                   	push   eax
c0019f74:	e8 49 87 ff ff       	call   c00126c2 <Filesystem::~Filesystem()>
c0019f79:	83 c4 10             	add    esp,0x10
c0019f7c:	90                   	nop
c0019f7d:	83 c4 0c             	add    esp,0xc
c0019f80:	c3                   	ret    
c0019f81:	90                   	nop

c0019f82 <ISO9660::~ISO9660()>:
c0019f82:	83 ec 0c             	sub    esp,0xc
c0019f85:	83 ec 0c             	sub    esp,0xc
c0019f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f8c:	e8 cd ff ff ff       	call   c0019f5e <ISO9660::~ISO9660()>
c0019f91:	83 c4 10             	add    esp,0x10
c0019f94:	83 ec 08             	sub    esp,0x8
c0019f97:	6a 08                	push   0x8
c0019f99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f9d:	e8 07 85 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c0019fa2:	83 c4 10             	add    esp,0x10
c0019fa5:	83 c4 0c             	add    esp,0xc
c0019fa8:	c3                   	ret    

c0019fa9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019fa9:	55                   	push   ebp
c0019faa:	31 c9                	xor    ecx,ecx
c0019fac:	57                   	push   edi
c0019fad:	56                   	push   esi
c0019fae:	53                   	push   ebx
c0019faf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019fb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019fb7:	89 eb                	mov    ebx,ebp
c0019fb9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019fbd:	39 ce                	cmp    esi,ecx
c0019fbf:	7e 17                	jle    c0019fd8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019fc1:	31 d2                	xor    edx,edx
c0019fc3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019fc7:	7d 13                	jge    c0019fdc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019fc9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fcd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019fd0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019fd3:	75 0d                	jne    c0019fe2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019fd5:	42                   	inc    edx
c0019fd6:	eb eb                	jmp    c0019fc3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019fd8:	31 c0                	xor    eax,eax
c0019fda:	eb 0a                	jmp    c0019fe6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019fdc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019fe0:	eb 04                	jmp    c0019fe6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019fe2:	41                   	inc    ecx
c0019fe3:	43                   	inc    ebx
c0019fe4:	eb d7                	jmp    c0019fbd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019fe6:	5b                   	pop    ebx
c0019fe7:	5e                   	pop    esi
c0019fe8:	5f                   	pop    edi
c0019fe9:	5d                   	pop    ebp
c0019fea:	c3                   	ret    

c0019feb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019feb:	56                   	push   esi
c0019fec:	53                   	push   ebx
c0019fed:	52                   	push   edx
c0019fee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ff2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ff6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ffa:	39 0d 60 c9 03 c0    	cmp    DWORD PTR ds:0xc003c960,ecx
c001a000:	75 08                	jne    c001a00a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a002:	38 05 c4 b4 03 c0    	cmp    BYTE PTR ds:0xc003b4c4,al
c001a008:	74 2b                	je     c001a035 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a00a:	83 ec 0c             	sub    esp,0xc
c001a00d:	a2 c4 b4 03 c0       	mov    ds:0xc003b4c4,al
c001a012:	68 80 c9 03 c0       	push   0xc003c980
c001a017:	0f be c0             	movsx  eax,al
c001a01a:	6a 01                	push   0x1
c001a01c:	89 0d 60 c9 03 c0    	mov    DWORD PTR ds:0xc003c960,ecx
c001a022:	31 db                	xor    ebx,ebx
c001a024:	53                   	push   ebx
c001a025:	51                   	push   ecx
c001a026:	ff 34 85 fc c2 03 c0 	push   DWORD PTR [eax*4-0x3ffc3d04]
c001a02d:	e8 34 b2 ff ff       	call   c0015266 <LogicalDisk::read(unsigned long long, int, void*)>
c001a032:	83 c4 20             	add    esp,0x20
c001a035:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a03d:	c7 44 24 14 80 c9 03 c0 	mov    DWORD PTR [esp+0x14],0xc003c980
c001a045:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a049:	58                   	pop    eax
c001a04a:	5b                   	pop    ebx
c001a04b:	5e                   	pop    esi
c001a04c:	e9 10 66 fe ff       	jmp    c0000661 <memcpy>
c001a051:	90                   	nop

c001a052 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a052:	81 ec 10 08 00 00    	sub    esp,0x810
c001a058:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a05f:	83 c0 41             	add    eax,0x41
c001a062:	0f be c0             	movsx  eax,al
c001a065:	50                   	push   eax
c001a066:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a06a:	50                   	push   eax
c001a06b:	6a 10                	push   0x10
c001a06d:	e8 79 ff ff ff       	call   c0019feb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a072:	83 c4 10             	add    esp,0x10
c001a075:	31 c0                	xor    eax,eax
c001a077:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a07c:	75 1d                	jne    c001a09b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a07e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a083:	75 16                	jne    c001a09b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a085:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a08a:	75 0f                	jne    c001a09b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a08c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a091:	75 08                	jne    c001a09b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a093:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a098:	0f 94 c0             	sete   al
c001a09b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a0a1:	c3                   	ret    

c001a0a2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a0a2:	55                   	push   ebp
c001a0a3:	57                   	push   edi
c001a0a4:	56                   	push   esi
c001a0a5:	53                   	push   ebx
c001a0a6:	81 ec 34 08 00 00    	sub    esp,0x834
c001a0ac:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a0b3:	55                   	push   ebp
c001a0b4:	68 2b a6 03 c0       	push   0xc003a62b
c001a0b9:	e8 2c 2e ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001a0be:	83 c4 10             	add    esp,0x10
c001a0c1:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a0c9:	0f 84 06 02 00 00    	je     c001a2d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a0cf:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a0d7:	0f 84 f8 01 00 00    	je     c001a2d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a0dd:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a0e4:	b8 01 00 00 00       	mov    eax,0x1
c001a0e9:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a0ed:	0f 85 e7 01 00 00    	jne    c001a2da <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a0f3:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a0f6:	31 d2                	xor    edx,edx
c001a0f8:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a0fb:	89 e9                	mov    ecx,ebp
c001a0fd:	89 d3                	mov    ebx,edx
c001a0ff:	01 f1                	add    ecx,esi
c001a101:	11 fb                	adc    ebx,edi
c001a103:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a107:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a10b:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a112:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a115:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a118:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a11c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a120:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a124:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a128:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a12c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a130:	72 19                	jb     c001a14b <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a132:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a13a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a13e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a141:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a149:	eb 13                	jmp    c001a15e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a14b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a14f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a153:	29 f0                	sub    eax,esi
c001a155:	19 fa                	sbb    edx,edi
c001a157:	89 04 24             	mov    DWORD PTR [esp],eax
c001a15a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a15e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a165:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a168:	8b 00                	mov    eax,DWORD PTR [eax]
c001a16a:	53                   	push   ebx
c001a16b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a16f:	c1 e0 0b             	shl    eax,0xb
c001a172:	01 c6                	add    esi,eax
c001a174:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a17b:	11 d7                	adc    edi,edx
c001a17d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a181:	89 fa                	mov    edx,edi
c001a183:	50                   	push   eax
c001a184:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a188:	50                   	push   eax
c001a189:	89 f0                	mov    eax,esi
c001a18b:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a18f:	50                   	push   eax
c001a190:	e8 56 fe ff ff       	call   c0019feb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a195:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a19c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1a0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a1a3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a1a7:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a1ad:	83 c4 10             	add    esp,0x10
c001a1b0:	b8 00 08 00 00       	mov    eax,0x800
c001a1b5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a1b9:	29 d0                	sub    eax,edx
c001a1bb:	39 c1                	cmp    ecx,eax
c001a1bd:	83 db 00             	sbb    ebx,0x0
c001a1c0:	7d 19                	jge    c001a1db <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a1c2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a1c7:	75 16                	jne    c001a1df <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a1c9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a1d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a1d6:	e9 f6 00 00 00       	jmp    c001a2d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a1db:	89 c5                	mov    ebp,eax
c001a1dd:	eb 03                	jmp    c001a1e2 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a1df:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a1e2:	51                   	push   ecx
c001a1e3:	55                   	push   ebp
c001a1e4:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a1e8:	50                   	push   eax
c001a1e9:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a1f0:	e8 6c 64 fe ff       	call   c0000661 <memcpy>
c001a1f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a1fd:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a204:	01 e8                	add    eax,ebp
c001a206:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a20a:	89 e8                	mov    eax,ebp
c001a20c:	99                   	cdq    
c001a20d:	01 ee                	add    esi,ebp
c001a20f:	11 d7                	adc    edi,edx
c001a211:	29 e9                	sub    ecx,ebp
c001a213:	19 d3                	sbb    ebx,edx
c001a215:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a219:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a21d:	83 c4 10             	add    esp,0x10
c001a220:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a225:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a228:	b8 00 00 00 00       	mov    eax,0x0
c001a22d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a231:	7d 3f                	jge    c001a272 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a233:	52                   	push   edx
c001a234:	89 fa                	mov    edx,edi
c001a236:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a23d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a241:	50                   	push   eax
c001a242:	89 f0                	mov    eax,esi
c001a244:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a248:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a24c:	50                   	push   eax
c001a24d:	e8 99 fd ff ff       	call   c0019feb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a252:	81 c6 00 08 00 00    	add    esi,0x800
c001a258:	83 d7 00             	adc    edi,0x0
c001a25b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a263:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a26b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a270:	eb ab                	jmp    c001a21d <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a276:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a279:	74 34                	je     c001a2af <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a27b:	89 fa                	mov    edx,edi
c001a27d:	50                   	push   eax
c001a27e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a285:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a289:	50                   	push   eax
c001a28a:	89 f0                	mov    eax,esi
c001a28c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a290:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a294:	55                   	push   ebp
c001a295:	50                   	push   eax
c001a296:	e8 50 fd ff ff       	call   c0019feb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a29b:	83 c4 0c             	add    esp,0xc
c001a29e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a2a2:	55                   	push   ebp
c001a2a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2a7:	e8 b5 63 fe ff       	call   c0000661 <memcpy>
c001a2ac:	83 c4 10             	add    esp,0x10
c001a2af:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a2b6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a2ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a2be:	89 38                	mov    DWORD PTR [eax],edi
c001a2c0:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a2c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2cb:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a2ce:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a2d1:	31 c0                	xor    eax,eax
c001a2d3:	eb 05                	jmp    c001a2da <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a2d5:	b8 04 00 00 00       	mov    eax,0x4
c001a2da:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a2e0:	5b                   	pop    ebx
c001a2e1:	5e                   	pop    esi
c001a2e2:	5f                   	pop    edi
c001a2e3:	5d                   	pop    ebp
c001a2e4:	c3                   	ret    
c001a2e5:	90                   	nop

c001a2e6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a2e6:	55                   	push   ebp
c001a2e7:	57                   	push   edi
c001a2e8:	56                   	push   esi
c001a2e9:	53                   	push   ebx
c001a2ea:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a2f0:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a2f7:	85 f6                	test   esi,esi
c001a2f9:	0f 84 65 02 00 00    	je     c001a564 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a2ff:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a307:	0f 84 57 02 00 00    	je     c001a564 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a30d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a310:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a313:	75 0a                	jne    c001a31f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a315:	b8 07 00 00 00       	mov    eax,0x7
c001a31a:	e9 4a 02 00 00       	jmp    c001a569 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a31f:	50                   	push   eax
c001a320:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a324:	50                   	push   eax
c001a325:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a32c:	53                   	push   ebx
c001a32d:	8b 06                	mov    eax,DWORD PTR [esi]
c001a32f:	c1 e0 0b             	shl    eax,0xb
c001a332:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a335:	c1 e8 0b             	shr    eax,0xb
c001a338:	50                   	push   eax
c001a339:	e8 ad fc ff ff       	call   c0019feb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a33e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	89 c1                	mov    ecx,eax
c001a346:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a349:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a34f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a352:	84 db                	test   bl,bl
c001a354:	0f 85 90 00 00 00    	jne    c001a3ea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a35a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a360:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a366:	29 c7                	sub    edi,eax
c001a368:	89 fb                	mov    ebx,edi
c001a36a:	c1 fb 1f             	sar    ebx,0x1f
c001a36d:	01 f8                	add    eax,edi
c001a36f:	11 da                	adc    edx,ebx
c001a371:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a375:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a379:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a37c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a37f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a385:	89 04 24             	mov    DWORD PTR [esp],eax
c001a388:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a38c:	89 d8                	mov    eax,ebx
c001a38e:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a391:	ba 00 00 00 00       	mov    edx,0x0
c001a396:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a39a:	b8 00 00 00 00       	mov    eax,0x0
c001a39f:	73 0b                	jae    c001a3ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a3a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a3a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3a8:	29 f8                	sub    eax,edi
c001a3aa:	19 da                	sbb    edx,ebx
c001a3ac:	89 d3                	mov    ebx,edx
c001a3ae:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a3b1:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a3b4:	09 c3                	or     ebx,eax
c001a3b6:	0f 84 59 ff ff ff    	je     c001a315 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a3bc:	55                   	push   ebp
c001a3bd:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a3c1:	50                   	push   eax
c001a3c2:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a3c9:	53                   	push   ebx
c001a3ca:	8b 06                	mov    eax,DWORD PTR [esi]
c001a3cc:	c1 e0 0b             	shl    eax,0xb
c001a3cf:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a3d3:	c1 e8 0b             	shr    eax,0xb
c001a3d6:	50                   	push   eax
c001a3d7:	e8 0f fc ff ff       	call   c0019feb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a3dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a3df:	83 c4 10             	add    esp,0x10
c001a3e2:	25 ff 07 00 00       	and    eax,0x7ff
c001a3e7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a3ea:	57                   	push   edi
c001a3eb:	6a 28                	push   0x28
c001a3ed:	6a 00                	push   0x0
c001a3ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a3f3:	50                   	push   eax
c001a3f4:	e8 df 62 fe ff       	call   c00006d8 <memset>
c001a3f9:	31 d2                	xor    edx,edx
c001a3fb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a3fe:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a404:	89 f8                	mov    eax,edi
c001a406:	83 c0 21             	add    eax,0x21
c001a409:	83 d2 00             	adc    edx,0x0
c001a40c:	89 c7                	mov    edi,eax
c001a40e:	89 d5                	mov    ebp,edx
c001a410:	83 c4 10             	add    esp,0x10
c001a413:	31 c9                	xor    ecx,ecx
c001a415:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a41c:	83 f9 28             	cmp    ecx,0x28
c001a41f:	88 04 24             	mov    BYTE PTR [esp],al
c001a422:	0f 94 c2             	sete   dl
c001a425:	88 d0                	mov    al,dl
c001a427:	ba ff 07 00 00       	mov    edx,0x7ff
c001a42c:	39 fa                	cmp    edx,edi
c001a42e:	ba 00 00 00 00       	mov    edx,0x0
c001a433:	19 ea                	sbb    edx,ebp
c001a435:	0f 92 c2             	setb   dl
c001a438:	09 c2                	or     edx,eax
c001a43a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a43e:	0f 94 c0             	sete   al
c001a441:	08 d0                	or     al,dl
c001a443:	75 16                	jne    c001a45b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a445:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a449:	74 10                	je     c001a45b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a44b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a44e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a452:	41                   	inc    ecx
c001a453:	83 c7 01             	add    edi,0x1
c001a456:	83 d5 00             	adc    ebp,0x0
c001a459:	eb ba                	jmp    c001a415 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a45b:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a463:	83 ec 0c             	sub    esp,0xc
c001a466:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a46a:	57                   	push   edi
c001a46b:	e8 91 62 fe ff       	call   c0000701 <strlen>
c001a470:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a478:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a47c:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a483:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a486:	5a                   	pop    edx
c001a487:	25 ff 07 00 00       	and    eax,0x7ff
c001a48c:	01 c8                	add    eax,ecx
c001a48e:	59                   	pop    ecx
c001a48f:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a495:	83 e0 02             	and    eax,0x2
c001a498:	3c 01                	cmp    al,0x1
c001a49a:	19 c0                	sbb    eax,eax
c001a49c:	83 c0 02             	add    eax,0x2
c001a49f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a4a3:	57                   	push   edi
c001a4a4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a4a8:	50                   	push   eax
c001a4a9:	e8 46 63 fe ff       	call   c00007f4 <strcpy>
c001a4ae:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a4b2:	83 c4 10             	add    esp,0x10
c001a4b5:	84 c0                	test   al,al
c001a4b7:	75 21                	jne    c001a4da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a4b9:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a4c1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a4c9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a4d1:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a4d8:	eb 28                	jmp    c001a502 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a4da:	fe c8                	dec    al
c001a4dc:	75 24                	jne    c001a502 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a4de:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a4e6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a4ee:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a4f6:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a4fd:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a502:	0f b6 fb             	movzx  edi,bl
c001a505:	31 db                	xor    ebx,ebx
c001a507:	50                   	push   eax
c001a508:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a50f:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a513:	50                   	push   eax
c001a514:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a51b:	e8 41 61 fe ff       	call   c0000661 <memcpy>
c001a520:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a527:	89 f9                	mov    ecx,edi
c001a529:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a52f:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a532:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a535:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a538:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a53b:	83 c4 10             	add    esp,0x10
c001a53e:	39 c7                	cmp    edi,eax
c001a540:	89 df                	mov    edi,ebx
c001a542:	19 d7                	sbb    edi,edx
c001a544:	72 10                	jb     c001a556 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a546:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a54d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a554:	eb 0a                	jmp    c001a560 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a556:	29 c8                	sub    eax,ecx
c001a558:	19 da                	sbb    edx,ebx
c001a55a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a55d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a560:	31 c0                	xor    eax,eax
c001a562:	eb 05                	jmp    c001a569 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a564:	b8 04 00 00 00       	mov    eax,0x4
c001a569:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a56f:	5b                   	pop    ebx
c001a570:	5e                   	pop    esi
c001a571:	5f                   	pop    edi
c001a572:	5d                   	pop    ebp
c001a573:	c3                   	ret    

c001a574 <readRoot(unsigned int*, unsigned int*, char)>:
c001a574:	81 ec 40 08 00 00    	sub    esp,0x840
c001a57a:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a582:	50                   	push   eax
c001a583:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a587:	50                   	push   eax
c001a588:	6a 10                	push   0x10
c001a58a:	e8 5c fa ff ff       	call   c0019feb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a58f:	83 c4 0c             	add    esp,0xc
c001a592:	6a 22                	push   0x22
c001a594:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a59b:	50                   	push   eax
c001a59c:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a5a0:	50                   	push   eax
c001a5a1:	e8 bb 60 fe ff       	call   c0000661 <memcpy>
c001a5a6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a5ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a5b1:	89 10                	mov    DWORD PTR [eax],edx
c001a5b3:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a5ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5be:	89 10                	mov    DWORD PTR [eax],edx
c001a5c0:	b0 01                	mov    al,0x1
c001a5c2:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a5c8:	c3                   	ret    

c001a5c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a5c9:	55                   	push   ebp
c001a5ca:	57                   	push   edi
c001a5cb:	56                   	push   esi
c001a5cc:	53                   	push   ebx
c001a5cd:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a5d3:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a5da:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a5e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5e5:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a5e9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a5ed:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5f1:	75 03                	jne    c001a5f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a5f3:	83 c3 02             	add    ebx,0x2
c001a5f6:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a5f9:	75 03                	jne    c001a5fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a5fb:	43                   	inc    ebx
c001a5fc:	eb f8                	jmp    c001a5f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a5fe:	51                   	push   ecx
c001a5ff:	68 00 01 00 00       	push   0x100
c001a604:	6a 00                	push   0x0
c001a606:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a60a:	50                   	push   eax
c001a60b:	e8 c8 60 fe ff       	call   c00006d8 <memset>
c001a610:	83 c4 10             	add    esp,0x10
c001a613:	31 d2                	xor    edx,edx
c001a615:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a618:	84 c0                	test   al,al
c001a61a:	74 21                	je     c001a63d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a61c:	3c 2f                	cmp    al,0x2f
c001a61e:	75 0b                	jne    c001a62b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a620:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a624:	bd 01 00 00 00       	mov    ebp,0x1
c001a629:	eb 14                	jmp    c001a63f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a62b:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a62e:	80 f9 19             	cmp    cl,0x19
c001a631:	77 03                	ja     c001a636 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a633:	83 e8 20             	sub    eax,0x20
c001a636:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a63a:	42                   	inc    edx
c001a63b:	eb d8                	jmp    c001a615 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a63d:	31 ed                	xor    ebp,ebp
c001a63f:	83 ec 0c             	sub    esp,0xc
c001a642:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a649:	e8 97 2e ff ff       	call   c000d4e5 <malloc>
c001a64e:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a655:	89 c6                	mov    esi,eax
c001a657:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a65d:	c1 ef 0b             	shr    edi,0xb
c001a660:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a667:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a66b:	83 c4 10             	add    esp,0x10
c001a66e:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a673:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a677:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a67e:	74 28                	je     c001a6a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a680:	52                   	push   edx
c001a681:	57                   	push   edi
c001a682:	50                   	push   eax
c001a683:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a687:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a68e:	e8 58 f9 ff ff       	call   c0019feb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a693:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a697:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a69e:	05 00 08 00 00       	add    eax,0x800
c001a6a3:	83 c4 10             	add    esp,0x10
c001a6a6:	eb cb                	jmp    c001a673 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a6a8:	83 ec 0c             	sub    esp,0xc
c001a6ab:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a6af:	57                   	push   edi
c001a6b0:	e8 4c 60 fe ff       	call   c0000701 <strlen>
c001a6b5:	50                   	push   eax
c001a6b6:	57                   	push   edi
c001a6b7:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a6be:	56                   	push   esi
c001a6bf:	e8 e5 f8 ff ff       	call   c0019fa9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001a6c4:	83 c4 20             	add    esp,0x20
c001a6c7:	85 c0                	test   eax,eax
c001a6c9:	75 13                	jne    c001a6de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a6cb:	83 ec 0c             	sub    esp,0xc
c001a6ce:	56                   	push   esi
c001a6cf:	e8 21 2e ff ff       	call   c000d4f5 <free>
c001a6d4:	83 c4 10             	add    esp,0x10
c001a6d7:	31 c0                	xor    eax,eax
c001a6d9:	e9 b3 00 00 00       	jmp    c001a791 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a6de:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a6e2:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a6e6:	c1 e7 08             	shl    edi,0x8
c001a6e9:	c1 e2 10             	shl    edx,0x10
c001a6ec:	09 d7                	or     edi,edx
c001a6ee:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a6f2:	09 d7                	or     edi,edx
c001a6f4:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a6f8:	c1 e2 18             	shl    edx,0x18
c001a6fb:	09 d7                	or     edi,edx
c001a6fd:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a701:	89 d1                	mov    ecx,edx
c001a703:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a707:	c1 e1 08             	shl    ecx,0x8
c001a70a:	c1 e2 10             	shl    edx,0x10
c001a70d:	09 ca                	or     edx,ecx
c001a70f:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a713:	09 ca                	or     edx,ecx
c001a715:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a719:	c1 e1 18             	shl    ecx,0x18
c001a71c:	09 ca                	or     edx,ecx
c001a71e:	89 e9                	mov    ecx,ebp
c001a720:	84 c9                	test   cl,cl
c001a722:	74 3c                	je     c001a760 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a724:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a728:	83 ec 0c             	sub    esp,0xc
c001a72b:	56                   	push   esi
c001a72c:	e8 c4 2d ff ff       	call   c000d4f5 <free>
c001a731:	83 c4 0c             	add    esp,0xc
c001a734:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a73b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a740:	50                   	push   eax
c001a741:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a748:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a74f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a753:	52                   	push   edx
c001a754:	57                   	push   edi
c001a755:	53                   	push   ebx
c001a756:	e8 6e fe ff ff       	call   c001a5c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a75b:	83 c4 20             	add    esp,0x20
c001a75e:	eb 31                	jmp    c001a791 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a760:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a763:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a76a:	d0 e8                	shr    al,1
c001a76c:	89 3b                	mov    DWORD PTR [ebx],edi
c001a76e:	83 e0 01             	and    eax,0x1
c001a771:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a778:	83 ec 0c             	sub    esp,0xc
c001a77b:	89 13                	mov    DWORD PTR [ebx],edx
c001a77d:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a784:	89 03                	mov    DWORD PTR [ebx],eax
c001a786:	56                   	push   esi
c001a787:	e8 69 2d ff ff       	call   c000d4f5 <free>
c001a78c:	83 c4 10             	add    esp,0x10
c001a78f:	b0 01                	mov    al,0x1
c001a791:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a797:	5b                   	pop    ebx
c001a798:	5e                   	pop    esi
c001a799:	5f                   	pop    edi
c001a79a:	5d                   	pop    ebp
c001a79b:	c3                   	ret    

c001a79c <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a79c:	55                   	push   ebp
c001a79d:	57                   	push   edi
c001a79e:	56                   	push   esi
c001a79f:	53                   	push   ebx
c001a7a0:	83 ec 20             	sub    esp,0x20
c001a7a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a7a7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a7ab:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a7af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7b7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a7bf:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a7c4:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a7ca:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a7d0:	57                   	push   edi
c001a7d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7d5:	50                   	push   eax
c001a7d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7da:	50                   	push   eax
c001a7db:	e8 94 fd ff ff       	call   c001a574 <readRoot(unsigned int*, unsigned int*, char)>
c001a7e0:	5a                   	pop    edx
c001a7e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a7e5:	e8 17 5f fe ff       	call   c0000701 <strlen>
c001a7ea:	83 c4 10             	add    esp,0x10
c001a7ed:	83 f8 03             	cmp    eax,0x3
c001a7f0:	77 17                	ja     c001a809 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a7f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7f6:	89 03                	mov    DWORD PTR [ebx],eax
c001a7f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7fc:	89 06                	mov    DWORD PTR [esi],eax
c001a7fe:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a805:	b0 01                	mov    al,0x1
c001a807:	eb 19                	jmp    c001a822 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a809:	50                   	push   eax
c001a80a:	55                   	push   ebp
c001a80b:	57                   	push   edi
c001a80c:	56                   	push   esi
c001a80d:	53                   	push   ebx
c001a80e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a812:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a816:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a81a:	e8 aa fd ff ff       	call   c001a5c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a81f:	83 c4 20             	add    esp,0x20
c001a822:	83 c4 1c             	add    esp,0x1c
c001a825:	5b                   	pop    ebx
c001a826:	5e                   	pop    esi
c001a827:	5f                   	pop    edi
c001a828:	5d                   	pop    ebp
c001a829:	c3                   	ret    

c001a82a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a82a:	57                   	push   edi
c001a82b:	56                   	push   esi
c001a82c:	53                   	push   ebx
c001a82d:	83 ec 10             	sub    esp,0x10
c001a830:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a834:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a838:	85 ff                	test   edi,edi
c001a83a:	74 7b                	je     c001a8b7 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a83c:	85 f6                	test   esi,esi
c001a83e:	74 77                	je     c001a8b7 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a840:	83 ec 0c             	sub    esp,0xc
c001a843:	6a 1c                	push   0x1c
c001a845:	e8 9b 2c ff ff       	call   c000d4e5 <malloc>
c001a84a:	89 07                	mov    DWORD PTR [edi],eax
c001a84c:	89 c3                	mov    ebx,eax
c001a84e:	58                   	pop    eax
c001a84f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a853:	50                   	push   eax
c001a854:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a857:	50                   	push   eax
c001a858:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a85c:	50                   	push   eax
c001a85d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a861:	50                   	push   eax
c001a862:	56                   	push   esi
c001a863:	e8 34 ff ff ff       	call   c001a79c <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a868:	83 c4 20             	add    esp,0x20
c001a86b:	84 c0                	test   al,al
c001a86d:	74 07                	je     c001a876 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a86f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a874:	74 0b                	je     c001a881 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a876:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a87a:	b8 01 00 00 00       	mov    eax,0x1
c001a87f:	eb 3b                	jmp    c001a8bc <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a885:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a889:	89 03                	mov    DWORD PTR [ebx],eax
c001a88b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a892:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a896:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a89d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a8a7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a8ae:	8a 06                	mov    al,BYTE PTR [esi]
c001a8b0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a8b3:	31 c0                	xor    eax,eax
c001a8b5:	eb 05                	jmp    c001a8bc <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a8b7:	b8 04 00 00 00       	mov    eax,0x4
c001a8bc:	83 c4 10             	add    esp,0x10
c001a8bf:	5b                   	pop    ebx
c001a8c0:	5e                   	pop    esi
c001a8c1:	5f                   	pop    edi
c001a8c2:	c3                   	ret    
c001a8c3:	90                   	nop

c001a8c4 <ISO9660::exists(char const*)>:
c001a8c4:	83 ec 28             	sub    esp,0x28
c001a8c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a8cf:	52                   	push   edx
c001a8d0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a8d3:	52                   	push   edx
c001a8d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a8d8:	52                   	push   edx
c001a8d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a8dd:	52                   	push   edx
c001a8de:	50                   	push   eax
c001a8df:	e8 b8 fe ff ff       	call   c001a79c <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a8e4:	83 c4 3c             	add    esp,0x3c
c001a8e7:	c3                   	ret    

c001a8e8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a8e8:	56                   	push   esi
c001a8e9:	53                   	push   ebx
c001a8ea:	83 ec 14             	sub    esp,0x14
c001a8ed:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a8f1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a8f5:	85 db                	test   ebx,ebx
c001a8f7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a8fb:	0f 94 c2             	sete   dl
c001a8fe:	85 f6                	test   esi,esi
c001a900:	0f 94 c0             	sete   al
c001a903:	08 c2                	or     dl,al
c001a905:	75 68                	jne    c001a96f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a907:	85 c9                	test   ecx,ecx
c001a909:	74 64                	je     c001a96f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a90b:	83 ec 0c             	sub    esp,0xc
c001a90e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a911:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a915:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a91b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a922:	50                   	push   eax
c001a923:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a926:	50                   	push   eax
c001a927:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a92b:	50                   	push   eax
c001a92c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a930:	50                   	push   eax
c001a931:	51                   	push   ecx
c001a932:	e8 65 fe ff ff       	call   c001a79c <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a937:	83 c4 20             	add    esp,0x20
c001a93a:	ba 01 00 00 00       	mov    edx,0x1
c001a93f:	84 c0                	test   al,al
c001a941:	74 31                	je     c001a974 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a943:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a947:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a94e:	89 03                	mov    DWORD PTR [ebx],eax
c001a950:	ba 00 00 00 00       	mov    edx,0x0
c001a955:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a959:	85 c0                	test   eax,eax
c001a95b:	0f 95 06             	setne  BYTE PTR [esi]
c001a95e:	74 14                	je     c001a974 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a96d:	eb 05                	jmp    c001a974 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a96f:	ba 04 00 00 00       	mov    edx,0x4
c001a974:	83 c4 14             	add    esp,0x14
c001a977:	89 d0                	mov    eax,edx
c001a979:	5b                   	pop    ebx
c001a97a:	5e                   	pop    esi
c001a97b:	c3                   	ret    

c001a97c <ISO9660::openDir(char const*, void**)>:
c001a97c:	57                   	push   edi
c001a97d:	56                   	push   esi
c001a97e:	53                   	push   ebx
c001a97f:	83 ec 10             	sub    esp,0x10
c001a982:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a986:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a98a:	85 ff                	test   edi,edi
c001a98c:	0f 84 95 00 00 00    	je     c001aa27 <ISO9660::openDir(char const*, void**)+0xab>
c001a992:	85 f6                	test   esi,esi
c001a994:	0f 84 8d 00 00 00    	je     c001aa27 <ISO9660::openDir(char const*, void**)+0xab>
c001a99a:	83 ec 0c             	sub    esp,0xc
c001a99d:	6a 1c                	push   0x1c
c001a99f:	e8 41 2b ff ff       	call   c000d4e5 <malloc>
c001a9a4:	89 07                	mov    DWORD PTR [edi],eax
c001a9a6:	89 c3                	mov    ebx,eax
c001a9a8:	59                   	pop    ecx
c001a9a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a9ad:	50                   	push   eax
c001a9ae:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a9b1:	50                   	push   eax
c001a9b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9b6:	50                   	push   eax
c001a9b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9bb:	50                   	push   eax
c001a9bc:	56                   	push   esi
c001a9bd:	e8 da fd ff ff       	call   c001a79c <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a9c2:	83 c4 20             	add    esp,0x20
c001a9c5:	84 c0                	test   al,al
c001a9c7:	74 07                	je     c001a9d0 <ISO9660::openDir(char const*, void**)+0x54>
c001a9c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a9ce:	75 21                	jne    c001a9f1 <ISO9660::openDir(char const*, void**)+0x75>
c001a9d0:	0f b6 c0             	movzx  eax,al
c001a9d3:	52                   	push   edx
c001a9d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a9d8:	50                   	push   eax
c001a9d9:	68 3e a6 03 c0       	push   0xc003a63e
c001a9de:	e8 07 25 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001a9e3:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a9e7:	83 c4 10             	add    esp,0x10
c001a9ea:	b8 01 00 00 00       	mov    eax,0x1
c001a9ef:	eb 3b                	jmp    c001aa2c <ISO9660::openDir(char const*, void**)+0xb0>
c001a9f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a9f9:	89 03                	mov    DWORD PTR [ebx],eax
c001a9fb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001aa02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa06:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001aa0d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aa14:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001aa17:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001aa1e:	8a 06                	mov    al,BYTE PTR [esi]
c001aa20:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001aa23:	31 c0                	xor    eax,eax
c001aa25:	eb 05                	jmp    c001aa2c <ISO9660::openDir(char const*, void**)+0xb0>
c001aa27:	b8 04 00 00 00       	mov    eax,0x4
c001aa2c:	83 c4 10             	add    esp,0x10
c001aa2f:	5b                   	pop    ebx
c001aa30:	5e                   	pop    esi
c001aa31:	5f                   	pop    edi
c001aa32:	c3                   	ret    
c001aa33:	90                   	nop

c001aa34 <ISO9660::ISO9660()>:
c001aa34:	83 ec 0c             	sub    esp,0xc
c001aa37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa3b:	83 ec 0c             	sub    esp,0xc
c001aa3e:	50                   	push   eax
c001aa3f:	e8 5a 7c ff ff       	call   c001269e <Filesystem::Filesystem()>
c001aa44:	83 c4 10             	add    esp,0x10
c001aa47:	ba 64 a6 03 c0       	mov    edx,0xc003a664
c001aa4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa50:	89 10                	mov    DWORD PTR [eax],edx
c001aa52:	90                   	nop
c001aa53:	83 c4 0c             	add    esp,0xc
c001aa56:	c3                   	ret    
c001aa57:	90                   	nop

c001aa58 <SoundChannel::~SoundChannel()>:
c001aa58:	83 ec 0c             	sub    esp,0xc
c001aa5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa5f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa62:	83 ec 0c             	sub    esp,0xc
c001aa65:	50                   	push   eax
c001aa66:	e8 8a 2a ff ff       	call   c000d4f5 <free>
c001aa6b:	83 c4 10             	add    esp,0x10
c001aa6e:	90                   	nop
c001aa6f:	83 c4 0c             	add    esp,0xc
c001aa72:	c3                   	ret    
c001aa73:	90                   	nop

c001aa74 <SoundChannel::setSpeed(float)>:
c001aa74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa78:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001aa7c:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001aa7f:	c3                   	ret    

c001aa80 <SoundChannel::getSpeed()>:
c001aa80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa84:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001aa87:	c3                   	ret    

c001aa88 <SoundChannel::setVolume(int)>:
c001aa88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa8c:	83 f8 64             	cmp    eax,0x64
c001aa8f:	7e 05                	jle    c001aa96 <SoundChannel::setVolume(int)+0xe>
c001aa91:	b8 64 00 00 00       	mov    eax,0x64
c001aa96:	85 c0                	test   eax,eax
c001aa98:	79 02                	jns    c001aa9c <SoundChannel::setVolume(int)+0x14>
c001aa9a:	31 c0                	xor    eax,eax
c001aa9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aaa0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001aaa3:	c3                   	ret    

c001aaa4 <SoundChannel::getVolume()>:
c001aaa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaa8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001aaab:	c3                   	ret    

c001aaac <SoundChannel::pause()>:
c001aaac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab0:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001aab4:	c3                   	ret    
c001aab5:	90                   	nop

c001aab6 <SoundChannel::SoundChannel(int, int, int, int)>:
c001aab6:	83 ec 1c             	sub    esp,0x1c
c001aab9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aabd:	e8 ea ff ff ff       	call   c001aaac <SoundChannel::pause()>
c001aac2:	83 c4 04             	add    esp,0x4
c001aac5:	6a 50                	push   0x50
c001aac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aacb:	e8 b8 ff ff ff       	call   c001aa88 <SoundChannel::setVolume(int)>
c001aad0:	83 c4 08             	add    esp,0x8
c001aad3:	d9 e8                	fld1   
c001aad5:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001aad9:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aae0:	e8 8f ff ff ff       	call   c001aa74 <SoundChannel::setSpeed(float)>
c001aae5:	83 c4 08             	add    esp,0x8
c001aae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aaf0:	89 10                	mov    DWORD PTR [eax],edx
c001aaf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaf6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aafa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aafd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab01:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab05:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ab08:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001ab0d:	75 23                	jne    c001ab32 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001ab0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab13:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ab1c:	0f af c2             	imul   eax,edx
c001ab1f:	85 c0                	test   eax,eax
c001ab21:	79 03                	jns    c001ab26 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001ab23:	83 c0 03             	add    eax,0x3
c001ab26:	c1 f8 02             	sar    eax,0x2
c001ab29:	05 a0 0f 00 00       	add    eax,0xfa0
c001ab2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ab32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab36:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ab3a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ab3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab41:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ab48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab4c:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ab53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab57:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab5a:	c1 e0 02             	shl    eax,0x2
c001ab5d:	83 ec 0c             	sub    esp,0xc
c001ab60:	50                   	push   eax
c001ab61:	e8 7f 29 ff ff       	call   c000d4e5 <malloc>
c001ab66:	83 c4 10             	add    esp,0x10
c001ab69:	89 c2                	mov    edx,eax
c001ab6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab6f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ab72:	83 ec 04             	sub    esp,0x4
c001ab75:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab79:	50                   	push   eax
c001ab7a:	6a 01                	push   0x1
c001ab7c:	6a 04                	push   0x4
c001ab7e:	e8 e5 df fe ff       	call   c0008b68 <src_new>
c001ab83:	83 c4 10             	add    esp,0x10
c001ab86:	89 c2                	mov    edx,eax
c001ab88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab8c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ab8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab93:	85 c0                	test   eax,eax
c001ab95:	74 10                	je     c001aba7 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001ab97:	83 ec 0c             	sub    esp,0xc
c001ab9a:	68 c0 a6 03 c0       	push   0xc003a6c0
c001ab9f:	e8 64 24 ff ff       	call   c000d008 <panic(char const*)>
c001aba4:	83 c4 10             	add    esp,0x10
c001aba7:	90                   	nop
c001aba8:	83 c4 1c             	add    esp,0x1c
c001abab:	c3                   	ret    

c001abac <SoundChannel::play()>:
c001abac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb0:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001abb4:	c3                   	ret    
c001abb5:	90                   	nop

c001abb6 <SoundChannel::paused()>:
c001abb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abba:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001abbd:	c3                   	ret    

c001abbe <SoundChannel::getSampleRate()>:
c001abbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc2:	8b 00                	mov    eax,DWORD PTR [eax]
c001abc4:	c3                   	ret    
c001abc5:	90                   	nop

c001abc6 <SoundChannel::getBits()>:
c001abc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001abcd:	c3                   	ret    

c001abce <SoundChannel::getBufferUsed()>:
c001abce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abd2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001abd5:	c3                   	ret    

c001abd6 <SoundChannel::getBufferSize()>:
c001abd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abda:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abdd:	c3                   	ret    

c001abde <SoundChannel::unbuffer(float*, int, int)>:
c001abde:	53                   	push   ebx
c001abdf:	83 ec 40             	sub    esp,0x40
c001abe2:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001abe6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001abee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001abf1:	db 03                	fild   DWORD PTR [ebx]
c001abf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abf7:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001abfb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001abfe:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001ac01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac05:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001ac09:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac11:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac19:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac1d:	50                   	push   eax
c001ac1e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001ac21:	e8 fc db fe ff       	call   c0008822 <src_process>
c001ac26:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ac2a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001ac2d:	83 c4 0c             	add    esp,0xc
c001ac30:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac33:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001ac36:	29 d0                	sub    eax,edx
c001ac38:	c1 e0 02             	shl    eax,0x2
c001ac3b:	50                   	push   eax
c001ac3c:	8d 04 91             	lea    eax,[ecx+edx*4]
c001ac3f:	50                   	push   eax
c001ac40:	51                   	push   ecx
c001ac41:	e8 ae 59 fe ff       	call   c00005f4 <memmove>
c001ac46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac4a:	83 c4 48             	add    esp,0x48
c001ac4d:	5b                   	pop    ebx
c001ac4e:	c3                   	ret    
c001ac4f:	90                   	nop

c001ac50 <SoundChannel::buffer8(unsigned char*, int)>:
c001ac50:	53                   	push   ebx
c001ac51:	31 c0                	xor    eax,eax
c001ac53:	83 ec 08             	sub    esp,0x8
c001ac56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac5a:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001ac5d:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001ac60:	74 35                	je     c001ac97 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ac62:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ac66:	7d 2f                	jge    c001ac97 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ac68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ac6c:	d9 05 dc a6 03 c0    	fld    DWORD PTR ds:0xc003a6dc
c001ac72:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001ac76:	40                   	inc    eax
c001ac77:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001ac7c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001ac7f:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001ac83:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ac86:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001ac89:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001ac8c:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001ac8f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac92:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001ac95:	eb c9                	jmp    c001ac60 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001ac97:	83 c4 08             	add    esp,0x8
c001ac9a:	5b                   	pop    ebx
c001ac9b:	c3                   	ret    

c001ac9c <SoundDevice::SoundDevice(char const*)>:
c001ac9c:	83 ec 1c             	sub    esp,0x1c
c001ac9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca3:	83 ec 08             	sub    esp,0x8
c001aca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acaa:	50                   	push   eax
c001acab:	e8 e4 8c ff ff       	call   c0013994 <Device::Device(char const*)>
c001acb0:	83 c4 10             	add    esp,0x10
c001acb3:	ba e8 a6 03 c0       	mov    edx,0xc003a6e8
c001acb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acbc:	89 10                	mov    DWORD PTR [eax],edx
c001acbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acc2:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001accc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acd0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001acda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ace2:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ace7:	7f 19                	jg     c001ad02 <SoundDevice::SoundDevice(char const*)+0x66>
c001ace9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aced:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acf1:	83 c2 54             	add    edx,0x54
c001acf4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001acfc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad00:	eb e0                	jmp    c001ace2 <SoundDevice::SoundDevice(char const*)+0x46>
c001ad02:	90                   	nop
c001ad03:	83 c4 1c             	add    esp,0x1c
c001ad06:	c3                   	ret    
c001ad07:	90                   	nop

c001ad08 <SoundDevice::~SoundDevice()>:
c001ad08:	53                   	push   ebx
c001ad09:	83 ec 18             	sub    esp,0x18
c001ad0c:	ba e8 a6 03 c0       	mov    edx,0xc003a6e8
c001ad11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad15:	89 10                	mov    DWORD PTR [eax],edx
c001ad17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad1f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ad24:	7f 46                	jg     c001ad6c <SoundDevice::~SoundDevice()+0x64>
c001ad26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad2e:	83 c2 54             	add    edx,0x54
c001ad31:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ad35:	85 c0                	test   eax,eax
c001ad37:	74 2d                	je     c001ad66 <SoundDevice::~SoundDevice()+0x5e>
c001ad39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad41:	83 c2 54             	add    edx,0x54
c001ad44:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ad48:	85 db                	test   ebx,ebx
c001ad4a:	74 1a                	je     c001ad66 <SoundDevice::~SoundDevice()+0x5e>
c001ad4c:	83 ec 0c             	sub    esp,0xc
c001ad4f:	53                   	push   ebx
c001ad50:	e8 03 fd ff ff       	call   c001aa58 <SoundChannel::~SoundChannel()>
c001ad55:	83 c4 10             	add    esp,0x10
c001ad58:	83 ec 08             	sub    esp,0x8
c001ad5b:	6a 2c                	push   0x2c
c001ad5d:	53                   	push   ebx
c001ad5e:	e8 46 77 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001ad63:	83 c4 10             	add    esp,0x10
c001ad66:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad6a:	eb b3                	jmp    c001ad1f <SoundDevice::~SoundDevice()+0x17>
c001ad6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad70:	83 ec 0c             	sub    esp,0xc
c001ad73:	50                   	push   eax
c001ad74:	e8 cd 88 ff ff       	call   c0013646 <Device::~Device()>
c001ad79:	83 c4 10             	add    esp,0x10
c001ad7c:	90                   	nop
c001ad7d:	83 c4 18             	add    esp,0x18
c001ad80:	5b                   	pop    ebx
c001ad81:	c3                   	ret    

c001ad82 <SoundDevice::~SoundDevice()>:
c001ad82:	83 ec 0c             	sub    esp,0xc
c001ad85:	83 ec 0c             	sub    esp,0xc
c001ad88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad8c:	e8 77 ff ff ff       	call   c001ad08 <SoundDevice::~SoundDevice()>
c001ad91:	83 c4 10             	add    esp,0x10
c001ad94:	83 ec 08             	sub    esp,0x8
c001ad97:	68 e4 01 00 00       	push   0x1e4
c001ad9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ada0:	e8 04 77 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	83 c4 0c             	add    esp,0xc
c001adab:	c3                   	ret    

c001adac <SoundDevice::getFreeChannelNum()>:
c001adac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001adb0:	31 c0                	xor    eax,eax
c001adb2:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001adba:	74 09                	je     c001adc5 <SoundDevice::getFreeChannelNum()+0x19>
c001adbc:	40                   	inc    eax
c001adbd:	83 f8 20             	cmp    eax,0x20
c001adc0:	75 f0                	jne    c001adb2 <SoundDevice::getFreeChannelNum()+0x6>
c001adc2:	83 c8 ff             	or     eax,0xffffffff
c001adc5:	c3                   	ret    

c001adc6 <SoundDevice::addChannel(SoundChannel*)>:
c001adc6:	56                   	push   esi
c001adc7:	53                   	push   ebx
c001adc8:	51                   	push   ecx
c001adc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adcd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001add1:	53                   	push   ebx
c001add2:	e8 d5 ff ff ff       	call   c001adac <SoundDevice::getFreeChannelNum()>
c001add7:	5a                   	pop    edx
c001add8:	83 f8 ff             	cmp    eax,0xffffffff
c001addb:	74 51                	je     c001ae2e <SoundDevice::addChannel(SoundChannel*)+0x68>
c001addd:	85 f6                	test   esi,esi
c001addf:	74 4d                	je     c001ae2e <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ade1:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ade8:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001adef:	75 30                	jne    c001ae21 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001adf1:	83 ec 0c             	sub    esp,0xc
c001adf4:	56                   	push   esi
c001adf5:	e8 c4 fd ff ff       	call   c001abbe <SoundChannel::getSampleRate()>
c001adfa:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ae00:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae03:	e8 be fd ff ff       	call   c001abc6 <SoundChannel::getBits()>
c001ae08:	83 c4 0c             	add    esp,0xc
c001ae0b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ae11:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae13:	50                   	push   eax
c001ae14:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ae1a:	53                   	push   ebx
c001ae1b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ae1e:	83 c4 10             	add    esp,0x10
c001ae21:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ae27:	b8 01 00 00 00       	mov    eax,0x1
c001ae2c:	eb 03                	jmp    c001ae31 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ae2e:	83 c8 ff             	or     eax,0xffffffff
c001ae31:	5a                   	pop    edx
c001ae32:	5b                   	pop    ebx
c001ae33:	5e                   	pop    esi
c001ae34:	c3                   	ret    
c001ae35:	90                   	nop

c001ae36 <SoundDevice::removeChannel(int)>:
c001ae36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae3e:	83 fa 1f             	cmp    edx,0x1f
c001ae41:	77 23                	ja     c001ae66 <SoundDevice::removeChannel(int)+0x30>
c001ae43:	8d 14 90             	lea    edx,[eax+edx*4]
c001ae46:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ae4d:	74 17                	je     c001ae66 <SoundDevice::removeChannel(int)+0x30>
c001ae4f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001ae59:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ae5f:	75 05                	jne    c001ae66 <SoundDevice::removeChannel(int)+0x30>
c001ae61:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae63:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001ae66:	c3                   	ret    
c001ae67:	90                   	nop

c001ae68 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001ae68:	56                   	push   esi
c001ae69:	53                   	push   ebx
c001ae6a:	31 db                	xor    ebx,ebx
c001ae6c:	83 ec 14             	sub    esp,0x14
c001ae6f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ae73:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001ae77:	7d 55                	jge    c001aece <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001ae79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae7d:	d9 e8                	fld1   
c001ae7f:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001ae82:	d8 0d 18 a7 03 c0    	fmul   DWORD PTR ds:0xc003a718
c001ae88:	d8 0d 1c a7 03 c0    	fmul   DWORD PTR ds:0xc003a71c
c001ae8e:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ae92:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ae96:	d8 15 20 a7 03 c0    	fcom   DWORD PTR ds:0xc003a720
c001ae9c:	df e0                	fnstsw ax
c001ae9e:	9e                   	sahf   
c001ae9f:	72 08                	jb     c001aea9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001aea1:	dd d8                	fstp   st(0)
c001aea3:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001aea7:	eb 22                	jmp    c001aecb <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001aea9:	d9 ee                	fldz   
c001aeab:	d8 d9                	fcomp  st(1)
c001aead:	df e0                	fnstsw ax
c001aeaf:	9e                   	sahf   
c001aeb0:	72 08                	jb     c001aeba <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001aeb2:	dd d8                	fstp   st(0)
c001aeb4:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001aeb8:	eb 11                	jmp    c001aecb <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001aeba:	83 ec 10             	sub    esp,0x10
c001aebd:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aec0:	e8 c7 3a 00 00       	call   c001e98c <lrintf>
c001aec5:	83 c4 10             	add    esp,0x10
c001aec8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001aecb:	43                   	inc    ebx
c001aecc:	eb a5                	jmp    c001ae73 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001aece:	83 c4 14             	add    esp,0x14
c001aed1:	5b                   	pop    ebx
c001aed2:	5e                   	pop    esi
c001aed3:	c3                   	ret    

c001aed4 <SoundDevice::getAudio(int, float*, float*)>:
c001aed4:	55                   	push   ebp
c001aed5:	57                   	push   edi
c001aed6:	56                   	push   esi
c001aed7:	53                   	push   ebx
c001aed8:	31 db                	xor    ebx,ebx
c001aeda:	83 ec 20             	sub    esp,0x20
c001aedd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aee1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aee5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001aee9:	c1 e0 02             	shl    eax,0x2
c001aeec:	50                   	push   eax
c001aeed:	6a 00                	push   0x0
c001aeef:	55                   	push   ebp
c001aef0:	e8 e3 57 fe ff       	call   c00006d8 <memset>
c001aef5:	83 c4 10             	add    esp,0x10
c001aef8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001aefc:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001af03:	85 c0                	test   eax,eax
c001af05:	0f 84 94 00 00 00    	je     c001af9f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af0b:	83 ec 0c             	sub    esp,0xc
c001af0e:	50                   	push   eax
c001af0f:	e8 a2 fc ff ff       	call   c001abb6 <SoundChannel::paused()>
c001af14:	83 c4 10             	add    esp,0x10
c001af17:	84 c0                	test   al,al
c001af19:	0f 85 80 00 00 00    	jne    c001af9f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af1f:	83 ec 0c             	sub    esp,0xc
c001af22:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001af29:	e8 76 fb ff ff       	call   c001aaa4 <SoundChannel::getVolume()>
c001af2e:	83 c4 10             	add    esp,0x10
c001af31:	85 c0                	test   eax,eax
c001af33:	74 6a                	je     c001af9f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af35:	83 ec 0c             	sub    esp,0xc
c001af38:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001af3f:	e8 60 fb ff ff       	call   c001aaa4 <SoundChannel::getVolume()>
c001af44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af48:	d9 05 24 a7 03 c0    	fld    DWORD PTR ds:0xc003a724
c001af4e:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001af52:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001af56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001af5a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001af60:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001af64:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001af6b:	e8 6e fc ff ff       	call   c001abde <SoundChannel::unbuffer(float*, int, int)>
c001af70:	83 c4 20             	add    esp,0x20
c001af73:	31 d2                	xor    edx,edx
c001af75:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001af79:	39 c2                	cmp    edx,eax
c001af7b:	7d 1a                	jge    c001af97 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001af7d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001af81:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001af84:	d8 c9                	fmul   st,st(1)
c001af86:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001af8c:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001af90:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001af94:	42                   	inc    edx
c001af95:	eb e2                	jmp    c001af79 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001af97:	dd d8                	fstp   st(0)
c001af99:	39 c7                	cmp    edi,eax
c001af9b:	7e 02                	jle    c001af9f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af9d:	89 c7                	mov    edi,eax
c001af9f:	43                   	inc    ebx
c001afa0:	83 fb 20             	cmp    ebx,0x20
c001afa3:	0f 85 53 ff ff ff    	jne    c001aefc <SoundDevice::getAudio(int, float*, float*)+0x28>
c001afa9:	83 c4 1c             	add    esp,0x1c
c001afac:	89 f8                	mov    eax,edi
c001afae:	5b                   	pop    ebx
c001afaf:	5e                   	pop    esi
c001afb0:	5f                   	pop    edi
c001afb1:	5d                   	pop    ebp
c001afb2:	c3                   	ret    
c001afb3:	90                   	nop

c001afb4 <PCI::open(int, int, void*)>:
c001afb4:	83 ec 18             	sub    esp,0x18
c001afb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afbb:	8b 10                	mov    edx,DWORD PTR [eax]
c001afbd:	50                   	push   eax
c001afbe:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001afc1:	31 c0                	xor    eax,eax
c001afc3:	83 c4 1c             	add    esp,0x1c
c001afc6:	c3                   	ret    
c001afc7:	90                   	nop

c001afc8 <PCI::close(int, int, void*)>:
c001afc8:	31 c0                	xor    eax,eax
c001afca:	c3                   	ret    
c001afcb:	90                   	nop

c001afcc <PCI::PCI()>:
c001afcc:	83 ec 0c             	sub    esp,0xc
c001afcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd3:	83 ec 08             	sub    esp,0x8
c001afd6:	68 28 a7 03 c0       	push   0xc003a728
c001afdb:	50                   	push   eax
c001afdc:	e8 3f 80 ff ff       	call   c0013020 <Bus::Bus(char const*)>
c001afe1:	83 c4 10             	add    esp,0x10
c001afe4:	ba d4 a7 03 c0       	mov    edx,0xc003a7d4
c001afe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afed:	89 10                	mov    DWORD PTR [eax],edx
c001afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001aff9:	0f b6 d0             	movzx  edx,al
c001affc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b000:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b00b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b011:	0f b6 d0             	movzx  edx,al
c001b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b018:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b021:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b027:	8d 50 01             	lea    edx,[eax+0x1]
c001b02a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b02e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b034:	0f b6 d0             	movzx  edx,al
c001b037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b03b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b03f:	83 c9 c0             	or     ecx,0xffffffc0
c001b042:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b046:	90                   	nop
c001b047:	83 c4 0c             	add    esp,0xc
c001b04a:	c3                   	ret    
c001b04b:	90                   	nop

c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b04c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b050:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b055:	89 ca                	mov    edx,ecx
c001b057:	c1 e0 10             	shl    eax,0x10
c001b05a:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b060:	09 d0                	or     eax,edx
c001b062:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b067:	c1 e2 08             	shl    edx,0x8
c001b06a:	09 d0                	or     eax,edx
c001b06c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b071:	c1 e2 0b             	shl    edx,0xb
c001b074:	09 d0                	or     eax,edx
c001b076:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b07b:	0d 00 00 00 80       	or     eax,0x80000000
c001b080:	ef                   	out    dx,eax
c001b081:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b086:	ed                   	in     eax,dx
c001b087:	83 e1 02             	and    ecx,0x2
c001b08a:	0f b6 c9             	movzx  ecx,cl
c001b08d:	c1 e1 03             	shl    ecx,0x3
c001b090:	d3 e8                	shr    eax,cl
c001b092:	c3                   	ret    
c001b093:	90                   	nop

c001b094 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b094:	6a 00                	push   0x0
c001b096:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b09b:	50                   	push   eax
c001b09c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0a1:	50                   	push   eax
c001b0a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0a7:	50                   	push   eax
c001b0a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0ac:	e8 9b ff ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0b1:	83 c4 14             	add    esp,0x14
c001b0b4:	c3                   	ret    
c001b0b5:	90                   	nop

c001b0b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b0b6:	6a 0e                	push   0xe
c001b0b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0bd:	50                   	push   eax
c001b0be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0c3:	50                   	push   eax
c001b0c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0c9:	50                   	push   eax
c001b0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0ce:	e8 79 ff ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0d3:	83 c4 14             	add    esp,0x14
c001b0d6:	0f b6 c0             	movzx  eax,al
c001b0d9:	c3                   	ret    

c001b0da <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b0da:	55                   	push   ebp
c001b0db:	57                   	push   edi
c001b0dc:	56                   	push   esi
c001b0dd:	53                   	push   ebx
c001b0de:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b0e3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b0e8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b0ed:	6a 0a                	push   0xa
c001b0ef:	56                   	push   esi
c001b0f0:	55                   	push   ebp
c001b0f1:	57                   	push   edi
c001b0f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b0f6:	e8 51 ff ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0fb:	6a 0a                	push   0xa
c001b0fd:	89 c3                	mov    ebx,eax
c001b0ff:	56                   	push   esi
c001b100:	0f b6 db             	movzx  ebx,bl
c001b103:	55                   	push   ebp
c001b104:	57                   	push   edi
c001b105:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b109:	e8 3e ff ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b10e:	83 c4 28             	add    esp,0x28
c001b111:	25 00 ff 00 00       	and    eax,0xff00
c001b116:	09 d8                	or     eax,ebx
c001b118:	5b                   	pop    ebx
c001b119:	5e                   	pop    esi
c001b11a:	5f                   	pop    edi
c001b11b:	5d                   	pop    ebp
c001b11c:	c3                   	ret    
c001b11d:	90                   	nop

c001b11e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b11e:	6a 08                	push   0x8
c001b120:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b125:	50                   	push   eax
c001b126:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b12b:	50                   	push   eax
c001b12c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b131:	50                   	push   eax
c001b132:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b136:	e8 11 ff ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b13b:	83 c4 14             	add    esp,0x14
c001b13e:	0f b6 c4             	movzx  eax,ah
c001b141:	c3                   	ret    

c001b142 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b142:	6a 08                	push   0x8
c001b144:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b149:	50                   	push   eax
c001b14a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b14f:	50                   	push   eax
c001b150:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b155:	50                   	push   eax
c001b156:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b15a:	e8 ed fe ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b15f:	83 c4 14             	add    esp,0x14
c001b162:	c3                   	ret    
c001b163:	90                   	nop

c001b164 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b164:	6a 3c                	push   0x3c
c001b166:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b16b:	50                   	push   eax
c001b16c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b171:	50                   	push   eax
c001b172:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b177:	50                   	push   eax
c001b178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b17c:	e8 cb fe ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b181:	83 c4 14             	add    esp,0x14
c001b184:	c3                   	ret    
c001b185:	90                   	nop

c001b186 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b186:	6a 18                	push   0x18
c001b188:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b18d:	50                   	push   eax
c001b18e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b193:	50                   	push   eax
c001b194:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b199:	50                   	push   eax
c001b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b19e:	e8 a9 fe ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1a3:	83 c4 14             	add    esp,0x14
c001b1a6:	0f b6 c4             	movzx  eax,ah
c001b1a9:	c3                   	ret    

c001b1aa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b1aa:	55                   	push   ebp
c001b1ab:	57                   	push   edi
c001b1ac:	56                   	push   esi
c001b1ad:	53                   	push   ebx
c001b1ae:	50                   	push   eax
c001b1af:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b1b3:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b1b8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b1bd:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b1c2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b1c9:	8d 43 12             	lea    eax,[ebx+0x12]
c001b1cc:	83 c3 10             	add    ebx,0x10
c001b1cf:	0f b6 c0             	movzx  eax,al
c001b1d2:	0f b6 db             	movzx  ebx,bl
c001b1d5:	50                   	push   eax
c001b1d6:	51                   	push   ecx
c001b1d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b1db:	57                   	push   edi
c001b1dc:	55                   	push   ebp
c001b1dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b1e1:	e8 66 fe ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1e6:	53                   	push   ebx
c001b1e7:	89 c6                	mov    esi,eax
c001b1e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b1ed:	c1 e6 10             	shl    esi,0x10
c001b1f0:	51                   	push   ecx
c001b1f1:	57                   	push   edi
c001b1f2:	55                   	push   ebp
c001b1f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b1f7:	e8 50 fe ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1fc:	83 c4 2c             	add    esp,0x2c
c001b1ff:	0f b7 c0             	movzx  eax,ax
c001b202:	5b                   	pop    ebx
c001b203:	09 f0                	or     eax,esi
c001b205:	5e                   	pop    esi
c001b206:	5f                   	pop    edi
c001b207:	5d                   	pop    ebp
c001b208:	c3                   	ret    
c001b209:	90                   	nop

c001b20a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b20a:	53                   	push   ebx
c001b20b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b210:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b215:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b219:	c1 e1 10             	shl    ecx,0x10
c001b21c:	25 fc 00 00 00       	and    eax,0xfc
c001b221:	09 c1                	or     ecx,eax
c001b223:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b228:	c1 e0 08             	shl    eax,0x8
c001b22b:	09 c1                	or     ecx,eax
c001b22d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b232:	c1 e0 0b             	shl    eax,0xb
c001b235:	09 c1                	or     ecx,eax
c001b237:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b23d:	89 c8                	mov    eax,ecx
c001b23f:	ef                   	out    dx,eax
c001b240:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b245:	ed                   	in     eax,dx
c001b246:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b24b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b250:	74 0a                	je     c001b25c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b252:	0f b7 d8             	movzx  ebx,ax
c001b255:	89 d0                	mov    eax,edx
c001b257:	c1 e0 10             	shl    eax,0x10
c001b25a:	eb 05                	jmp    c001b261 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b25c:	66 31 c0             	xor    ax,ax
c001b25f:	89 d3                	mov    ebx,edx
c001b261:	09 c3                	or     ebx,eax
c001b263:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b268:	89 c8                	mov    eax,ecx
c001b26a:	ef                   	out    dx,eax
c001b26b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b270:	89 d8                	mov    eax,ebx
c001b272:	ef                   	out    dx,eax
c001b273:	5b                   	pop    ebx
c001b274:	c3                   	ret    
c001b275:	90                   	nop

c001b276 <PCI::checkBus(unsigned char)>:
c001b276:	56                   	push   esi
c001b277:	53                   	push   ebx
c001b278:	31 db                	xor    ebx,ebx
c001b27a:	51                   	push   ecx
c001b27b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b280:	52                   	push   edx
c001b281:	53                   	push   ebx
c001b282:	43                   	inc    ebx
c001b283:	56                   	push   esi
c001b284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b288:	e8 4d 03 00 00       	call   c001b5da <PCI::checkDevice(unsigned char, unsigned char)>
c001b28d:	83 c4 10             	add    esp,0x10
c001b290:	83 fb 20             	cmp    ebx,0x20
c001b293:	75 eb                	jne    c001b280 <PCI::checkBus(unsigned char)+0xa>
c001b295:	58                   	pop    eax
c001b296:	5b                   	pop    ebx
c001b297:	5e                   	pop    esi
c001b298:	c3                   	ret    
c001b299:	90                   	nop

c001b29a <PCI::foundDevice(PCIDeviceInfo)>:
c001b29a:	55                   	push   ebp
c001b29b:	57                   	push   edi
c001b29c:	56                   	push   esi
c001b29d:	53                   	push   ebx
c001b29e:	83 ec 1c             	sub    esp,0x1c
c001b2a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2a5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b2ab:	0f 84 51 01 00 00    	je     c001b402 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b2b1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b2b5:	66 81 f9 06 04       	cmp    cx,0x406
c001b2ba:	75 2c                	jne    c001b2e8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b2bc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b2c1:	50                   	push   eax
c001b2c2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b2c7:	50                   	push   eax
c001b2c8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b2cd:	50                   	push   eax
c001b2ce:	56                   	push   esi
c001b2cf:	e8 b2 fe ff ff       	call   c001b186 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b2d4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b2d8:	0f b6 c0             	movzx  eax,al
c001b2db:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b2df:	83 c4 2c             	add    esp,0x2c
c001b2e2:	5b                   	pop    ebx
c001b2e3:	5e                   	pop    esi
c001b2e4:	5f                   	pop    edi
c001b2e5:	5d                   	pop    ebp
c001b2e6:	eb 8e                	jmp    c001b276 <PCI::checkBus(unsigned char)>
c001b2e8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b2ec:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b2f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2f6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b2fa:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b2fe:	88 d3                	mov    bl,dl
c001b300:	85 c0                	test   eax,eax
c001b302:	74 33                	je     c001b337 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b304:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b307:	85 d2                	test   edx,edx
c001b309:	74 28                	je     c001b333 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b30b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b311:	31 ef                	xor    edi,ebp
c001b313:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b319:	75 18                	jne    c001b333 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b31b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b31f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b325:	75 0c                	jne    c001b333 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b327:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b32d:	0f 84 cf 00 00 00    	je     c001b402 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b333:	8b 00                	mov    eax,DWORD PTR [eax]
c001b335:	eb c9                	jmp    c001b300 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b337:	66 81 f9 01 06       	cmp    cx,0x601
c001b33c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b340:	75 18                	jne    c001b35a <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b342:	83 ec 0c             	sub    esp,0xc
c001b345:	68 58 01 00 00       	push   0x158
c001b34a:	e8 4b 71 ff ff       	call   c001249a <operator new(unsigned long)>
c001b34f:	59                   	pop    ecx
c001b350:	89 c5                	mov    ebp,eax
c001b352:	5f                   	pop    edi
c001b353:	68 30 a7 03 c0       	push   0xc003a730
c001b358:	eb 7d                	jmp    c001b3d7 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b35a:	66 81 f9 01 01       	cmp    cx,0x101
c001b35f:	75 60                	jne    c001b3c1 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b361:	83 ec 0c             	sub    esp,0xc
c001b364:	68 70 02 00 00       	push   0x270
c001b369:	e8 2c 71 ff ff       	call   c001249a <operator new(unsigned long)>
c001b36e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b371:	89 c5                	mov    ebp,eax
c001b373:	e8 e0 07 00 00       	call   c001bb58 <IDE::IDE()>
c001b378:	58                   	pop    eax
c001b379:	5a                   	pop    edx
c001b37a:	55                   	push   ebp
c001b37b:	56                   	push   esi
c001b37c:	e8 23 84 ff ff       	call   c00137a4 <Device::addChild(Device*)>
c001b381:	83 ec 1c             	sub    esp,0x1c
c001b384:	b9 09 00 00 00       	mov    ecx,0x9
c001b389:	fc                   	cld    
c001b38a:	89 e7                	mov    edi,esp
c001b38c:	89 de                	mov    esi,ebx
c001b38e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b390:	55                   	push   ebp
c001b391:	e8 e8 82 ff ff       	call   c001367e <Device::preOpenPCI(PCIDeviceInfo)>
c001b396:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b399:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b39d:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b3a5:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b3ad:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b3b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b3b8:	83 c4 4c             	add    esp,0x4c
c001b3bb:	5b                   	pop    ebx
c001b3bc:	5e                   	pop    esi
c001b3bd:	5f                   	pop    edi
c001b3be:	5d                   	pop    ebp
c001b3bf:	ff e0                	jmp    eax
c001b3c1:	83 ec 0c             	sub    esp,0xc
c001b3c4:	68 58 01 00 00       	push   0x158
c001b3c9:	e8 cc 70 ff ff       	call   c001249a <operator new(unsigned long)>
c001b3ce:	59                   	pop    ecx
c001b3cf:	89 c5                	mov    ebp,eax
c001b3d1:	5f                   	pop    edi
c001b3d2:	68 4f a7 03 c0       	push   0xc003a74f
c001b3d7:	55                   	push   ebp
c001b3d8:	e8 b3 86 ff ff       	call   c0013a90 <DriverlessDevice::DriverlessDevice(char const*)>
c001b3dd:	58                   	pop    eax
c001b3de:	5a                   	pop    edx
c001b3df:	55                   	push   ebp
c001b3e0:	56                   	push   esi
c001b3e1:	e8 be 83 ff ff       	call   c00137a4 <Device::addChild(Device*)>
c001b3e6:	b9 09 00 00 00       	mov    ecx,0x9
c001b3eb:	fc                   	cld    
c001b3ec:	89 df                	mov    edi,ebx
c001b3ee:	89 de                	mov    esi,ebx
c001b3f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b3f2:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b3f6:	83 c4 2c             	add    esp,0x2c
c001b3f9:	5b                   	pop    ebx
c001b3fa:	5e                   	pop    esi
c001b3fb:	5f                   	pop    edi
c001b3fc:	5d                   	pop    ebp
c001b3fd:	e9 7c 82 ff ff       	jmp    c001367e <Device::preOpenPCI(PCIDeviceInfo)>
c001b402:	83 c4 1c             	add    esp,0x1c
c001b405:	5b                   	pop    ebx
c001b406:	5e                   	pop    esi
c001b407:	5f                   	pop    edi
c001b408:	5d                   	pop    ebp
c001b409:	c3                   	ret    

c001b40a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b40a:	55                   	push   ebp
c001b40b:	57                   	push   edi
c001b40c:	56                   	push   esi
c001b40d:	53                   	push   ebx
c001b40e:	83 ec 5c             	sub    esp,0x5c
c001b411:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b415:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b419:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b41d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b422:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b426:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b42a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b42f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b433:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b438:	6a 0c                	push   0xc
c001b43a:	55                   	push   ebp
c001b43b:	53                   	push   ebx
c001b43c:	57                   	push   edi
c001b43d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b444:	e8 03 fc ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b449:	83 c4 0c             	add    esp,0xc
c001b44c:	6a 00                	push   0x0
c001b44e:	68 69 a7 03 c0       	push   0xc003a769
c001b453:	e8 92 1a ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001b458:	55                   	push   ebp
c001b459:	53                   	push   ebx
c001b45a:	57                   	push   edi
c001b45b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b462:	e8 73 fc ff ff       	call   c001b0da <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b467:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b46c:	83 c4 20             	add    esp,0x20
c001b46f:	55                   	push   ebp
c001b470:	53                   	push   ebx
c001b471:	57                   	push   edi
c001b472:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b476:	e8 e9 fc ff ff       	call   c001b164 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b47b:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b482:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b486:	55                   	push   ebp
c001b487:	53                   	push   ebx
c001b488:	57                   	push   edi
c001b489:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b490:	e8 b7 fb ff ff       	call   c001b04c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b495:	0f b6 c4             	movzx  eax,ah
c001b498:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b49c:	83 c4 18             	add    esp,0x18
c001b49f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b4a3:	68 7d a7 03 c0       	push   0xc003a77d
c001b4a8:	e8 3d 1a ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001b4ad:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b4b1:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b4b5:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c001b4ba:	83 c4 10             	add    esp,0x10
c001b4bd:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b4c3:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b4ca:	74 6c                	je     c001b538 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b4cc:	31 f6                	xor    esi,esi
c001b4ce:	8b 15 a8 ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baa8
c001b4d4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b4da:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b4e0:	7e 56                	jle    c001b538 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b4e2:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b4e5:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b4ec:	39 cb                	cmp    ebx,ecx
c001b4ee:	75 45                	jne    c001b535 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b4f0:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b4f7:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b4fb:	75 38                	jne    c001b535 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b4fd:	83 ec 0c             	sub    esp,0xc
c001b500:	68 8c a7 03 c0       	push   0xc003a78c
c001b505:	e8 e0 19 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001b50a:	8b 15 a8 ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baa8
c001b510:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b516:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b51e:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b522:	52                   	push   edx
c001b523:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b527:	53                   	push   ebx
c001b528:	68 b1 a7 03 c0       	push   0xc003a7b1
c001b52d:	e8 b8 19 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001b532:	83 c4 20             	add    esp,0x20
c001b535:	46                   	inc    esi
c001b536:	eb 96                	jmp    c001b4ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b538:	31 d2                	xor    edx,edx
c001b53a:	83 ec 0c             	sub    esp,0xc
c001b53d:	55                   	push   ebp
c001b53e:	53                   	push   ebx
c001b53f:	57                   	push   edi
c001b540:	52                   	push   edx
c001b541:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b545:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b54c:	e8 59 fc ff ff       	call   c001b1aa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b551:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b555:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b559:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b55d:	42                   	inc    edx
c001b55e:	83 c4 20             	add    esp,0x20
c001b561:	83 fa 06             	cmp    edx,0x6
c001b564:	75 d4                	jne    c001b53a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b566:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b56a:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b56e:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b572:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b576:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b57a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b57e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b583:	86 e0                	xchg   al,ah
c001b585:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b58a:	55                   	push   ebp
c001b58b:	53                   	push   ebx
c001b58c:	57                   	push   edi
c001b58d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b591:	e8 88 fb ff ff       	call   c001b11e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b596:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b59a:	55                   	push   ebp
c001b59b:	53                   	push   ebx
c001b59c:	57                   	push   edi
c001b59d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b5a4:	e8 eb fa ff ff       	call   c001b094 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5a9:	83 ec 0c             	sub    esp,0xc
c001b5ac:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b5b1:	b9 09 00 00 00       	mov    ecx,0x9
c001b5b6:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b5ba:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b5be:	fc                   	cld    
c001b5bf:	89 e7                	mov    edi,esp
c001b5c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5c3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b5ca:	e8 cb fc ff ff       	call   c001b29a <PCI::foundDevice(PCIDeviceInfo)>
c001b5cf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b5d5:	5b                   	pop    ebx
c001b5d6:	5e                   	pop    esi
c001b5d7:	5f                   	pop    edi
c001b5d8:	5d                   	pop    ebp
c001b5d9:	c3                   	ret    

c001b5da <PCI::checkDevice(unsigned char, unsigned char)>:
c001b5da:	55                   	push   ebp
c001b5db:	57                   	push   edi
c001b5dc:	56                   	push   esi
c001b5dd:	53                   	push   ebx
c001b5de:	83 ec 0c             	sub    esp,0xc
c001b5e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b5e5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b5ea:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b5ef:	6a 00                	push   0x0
c001b5f1:	56                   	push   esi
c001b5f2:	57                   	push   edi
c001b5f3:	55                   	push   ebp
c001b5f4:	e8 9b fa ff ff       	call   c001b094 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5f9:	6a 00                	push   0x0
c001b5fb:	56                   	push   esi
c001b5fc:	57                   	push   edi
c001b5fd:	55                   	push   ebp
c001b5fe:	e8 07 fe ff ff       	call   c001b40a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b603:	83 c4 20             	add    esp,0x20
c001b606:	6a 00                	push   0x0
c001b608:	56                   	push   esi
c001b609:	57                   	push   edi
c001b60a:	55                   	push   ebp
c001b60b:	e8 a6 fa ff ff       	call   c001b0b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b610:	83 c4 10             	add    esp,0x10
c001b613:	84 c0                	test   al,al
c001b615:	79 27                	jns    c001b63e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b617:	bb 01 00 00 00       	mov    ebx,0x1
c001b61c:	53                   	push   ebx
c001b61d:	56                   	push   esi
c001b61e:	57                   	push   edi
c001b61f:	55                   	push   ebp
c001b620:	e8 6f fa ff ff       	call   c001b094 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b625:	83 c4 10             	add    esp,0x10
c001b628:	66 40                	inc    ax
c001b62a:	74 0c                	je     c001b638 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b62c:	53                   	push   ebx
c001b62d:	56                   	push   esi
c001b62e:	57                   	push   edi
c001b62f:	55                   	push   ebp
c001b630:	e8 d5 fd ff ff       	call   c001b40a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b635:	83 c4 10             	add    esp,0x10
c001b638:	43                   	inc    ebx
c001b639:	83 fb 08             	cmp    ebx,0x8
c001b63c:	75 de                	jne    c001b61c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b63e:	83 c4 0c             	add    esp,0xc
c001b641:	5b                   	pop    ebx
c001b642:	5e                   	pop    esi
c001b643:	5f                   	pop    edi
c001b644:	5d                   	pop    ebp
c001b645:	c3                   	ret    

c001b646 <PCI::detect()>:
c001b646:	56                   	push   esi
c001b647:	53                   	push   ebx
c001b648:	53                   	push   ebx
c001b649:	31 db                	xor    ebx,ebx
c001b64b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b64f:	6a 00                	push   0x0
c001b651:	6a 00                	push   0x0
c001b653:	6a 00                	push   0x0
c001b655:	56                   	push   esi
c001b656:	e8 5b fa ff ff       	call   c001b0b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b65b:	83 c4 10             	add    esp,0x10
c001b65e:	a8 80                	test   al,0x80
c001b660:	75 21                	jne    c001b683 <PCI::detect()+0x3d>
c001b662:	51                   	push   ecx
c001b663:	51                   	push   ecx
c001b664:	6a 00                	push   0x0
c001b666:	56                   	push   esi
c001b667:	e8 0a fc ff ff       	call   c001b276 <PCI::checkBus(unsigned char)>
c001b66c:	83 c4 10             	add    esp,0x10
c001b66f:	eb 24                	jmp    c001b695 <PCI::detect()+0x4f>
c001b671:	52                   	push   edx
c001b672:	52                   	push   edx
c001b673:	53                   	push   ebx
c001b674:	43                   	inc    ebx
c001b675:	56                   	push   esi
c001b676:	e8 fb fb ff ff       	call   c001b276 <PCI::checkBus(unsigned char)>
c001b67b:	83 c4 10             	add    esp,0x10
c001b67e:	83 fb 08             	cmp    ebx,0x8
c001b681:	74 12                	je     c001b695 <PCI::detect()+0x4f>
c001b683:	53                   	push   ebx
c001b684:	6a 00                	push   0x0
c001b686:	6a 00                	push   0x0
c001b688:	56                   	push   esi
c001b689:	e8 06 fa ff ff       	call   c001b094 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b68e:	83 c4 10             	add    esp,0x10
c001b691:	66 40                	inc    ax
c001b693:	74 dc                	je     c001b671 <PCI::detect()+0x2b>
c001b695:	58                   	pop    eax
c001b696:	5b                   	pop    ebx
c001b697:	5e                   	pop    esi
c001b698:	c3                   	ret    
c001b699:	90                   	nop

c001b69a <RTC::open(int, int, void*)>:
c001b69a:	31 c0                	xor    eax,eax
c001b69c:	c3                   	ret    
c001b69d:	90                   	nop

c001b69e <RTC::close(int, int, void*)>:
c001b69e:	31 c0                	xor    eax,eax
c001b6a0:	c3                   	ret    
c001b6a1:	90                   	nop

c001b6a2 <RTC::timeInSecondsUTC()>:
c001b6a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6a6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b6ac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6b2:	c3                   	ret    
c001b6b3:	90                   	nop

c001b6b4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b6b4:	31 c0                	xor    eax,eax
c001b6b6:	c3                   	ret    
c001b6b7:	90                   	nop

c001b6b8 <RTC::timeInDatetimeUTC()>:
c001b6b8:	53                   	push   ebx
c001b6b9:	83 ec 14             	sub    esp,0x14
c001b6bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6c4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6c6:	50                   	push   eax
c001b6c7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b6ca:	83 c4 0c             	add    esp,0xc
c001b6cd:	52                   	push   edx
c001b6ce:	50                   	push   eax
c001b6cf:	53                   	push   ebx
c001b6d0:	e8 e3 7d ff ff       	call   c00134b8 <secondsToDatetime(unsigned long long)>
c001b6d5:	89 d8                	mov    eax,ebx
c001b6d7:	83 c4 14             	add    esp,0x14
c001b6da:	5b                   	pop    ebx
c001b6db:	c2 04 00             	ret    0x4

c001b6de <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b6de:	56                   	push   esi
c001b6df:	53                   	push   ebx
c001b6e0:	83 ec 14             	sub    esp,0x14
c001b6e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6e9:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b6ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b6f0:	52                   	push   edx
c001b6f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6f9:	50                   	push   eax
c001b6fa:	e8 b9 7d ff ff       	call   c00134b8 <secondsToDatetime(unsigned long long)>
c001b6ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b703:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b707:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b70b:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b70f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b713:	89 f0                	mov    eax,esi
c001b715:	83 c4 20             	add    esp,0x20
c001b718:	5b                   	pop    ebx
c001b719:	5e                   	pop    esi
c001b71a:	ff e0                	jmp    eax

c001b71c <RTC::~RTC()>:
c001b71c:	83 ec 0c             	sub    esp,0xc
c001b71f:	ba 2c a8 03 c0       	mov    edx,0xc003a82c
c001b724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b728:	89 10                	mov    DWORD PTR [eax],edx
c001b72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72e:	83 ec 0c             	sub    esp,0xc
c001b731:	50                   	push   eax
c001b732:	e8 0b 7b ff ff       	call   c0013242 <Clock::~Clock()>
c001b737:	83 c4 10             	add    esp,0x10
c001b73a:	90                   	nop
c001b73b:	83 c4 0c             	add    esp,0xc
c001b73e:	c3                   	ret    
c001b73f:	90                   	nop

c001b740 <RTC::~RTC()>:
c001b740:	83 ec 0c             	sub    esp,0xc
c001b743:	83 ec 0c             	sub    esp,0xc
c001b746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b74a:	e8 cd ff ff ff       	call   c001b71c <RTC::~RTC()>
c001b74f:	83 c4 10             	add    esp,0x10
c001b752:	83 ec 08             	sub    esp,0x8
c001b755:	68 60 01 00 00       	push   0x160
c001b75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b75e:	e8 46 6d ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001b763:	83 c4 10             	add    esp,0x10
c001b766:	83 c4 0c             	add    esp,0xc
c001b769:	c3                   	ret    

c001b76a <RTC::get_update_in_progress_flag()>:
c001b76a:	83 ec 14             	sub    esp,0x14
c001b76d:	6a 0a                	push   0xa
c001b76f:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b775:	e8 de fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b77a:	83 c4 1c             	add    esp,0x1c
c001b77d:	c0 e8 07             	shr    al,0x7
c001b780:	c3                   	ret    
c001b781:	90                   	nop

c001b782 <RTC::completeRTCRefresh()>:
c001b782:	55                   	push   ebp
c001b783:	57                   	push   edi
c001b784:	56                   	push   esi
c001b785:	53                   	push   ebx
c001b786:	83 ec 2c             	sub    esp,0x2c
c001b789:	8b 35 70 c4 03 c0    	mov    esi,DWORD PTR ds:0xc003c470
c001b78f:	8b 3d 74 c4 03 c0    	mov    edi,DWORD PTR ds:0xc003c474
c001b795:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b79b:	83 d7 00             	adc    edi,0x0
c001b79e:	83 ec 0c             	sub    esp,0xc
c001b7a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b7a5:	e8 c0 ff ff ff       	call   c001b76a <RTC::get_update_in_progress_flag()>
c001b7aa:	83 c4 10             	add    esp,0x10
c001b7ad:	84 c0                	test   al,al
c001b7af:	74 10                	je     c001b7c1 <RTC::completeRTCRefresh()+0x3f>
c001b7b1:	3b 35 70 c4 03 c0    	cmp    esi,DWORD PTR ds:0xc003c470
c001b7b7:	89 f8                	mov    eax,edi
c001b7b9:	1b 05 74 c4 03 c0    	sbb    eax,DWORD PTR ds:0xc003c474
c001b7bf:	73 dd                	jae    c001b79e <RTC::completeRTCRefresh()+0x1c>
c001b7c1:	55                   	push   ebp
c001b7c2:	55                   	push   ebp
c001b7c3:	6a 00                	push   0x0
c001b7c5:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b7cb:	e8 88 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7d0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b7d4:	58                   	pop    eax
c001b7d5:	5a                   	pop    edx
c001b7d6:	6a 02                	push   0x2
c001b7d8:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b7de:	e8 75 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7e3:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b7e7:	59                   	pop    ecx
c001b7e8:	5b                   	pop    ebx
c001b7e9:	6a 04                	push   0x4
c001b7eb:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b7f1:	e8 62 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7f6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b7fa:	5e                   	pop    esi
c001b7fb:	5f                   	pop    edi
c001b7fc:	6a 07                	push   0x7
c001b7fe:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b804:	e8 4f fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b809:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001b80d:	5d                   	pop    ebp
c001b80e:	58                   	pop    eax
c001b80f:	6a 08                	push   0x8
c001b811:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b817:	e8 3c fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b81c:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001b820:	58                   	pop    eax
c001b821:	5a                   	pop    edx
c001b822:	6a 09                	push   0x9
c001b824:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b82a:	e8 29 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b82f:	83 c4 10             	add    esp,0x10
c001b832:	0f b6 e8             	movzx  ebp,al
c001b835:	8b 35 70 c4 03 c0    	mov    esi,DWORD PTR ds:0xc003c470
c001b83b:	8b 3d 74 c4 03 c0    	mov    edi,DWORD PTR ds:0xc003c474
c001b841:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b847:	83 d7 00             	adc    edi,0x0
c001b84a:	83 ec 0c             	sub    esp,0xc
c001b84d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b851:	e8 14 ff ff ff       	call   c001b76a <RTC::get_update_in_progress_flag()>
c001b856:	83 c4 10             	add    esp,0x10
c001b859:	84 c0                	test   al,al
c001b85b:	74 10                	je     c001b86d <RTC::completeRTCRefresh()+0xeb>
c001b85d:	3b 35 70 c4 03 c0    	cmp    esi,DWORD PTR ds:0xc003c470
c001b863:	89 f8                	mov    eax,edi
c001b865:	1b 05 74 c4 03 c0    	sbb    eax,DWORD PTR ds:0xc003c474
c001b86b:	73 dd                	jae    c001b84a <RTC::completeRTCRefresh()+0xc8>
c001b86d:	50                   	push   eax
c001b86e:	50                   	push   eax
c001b86f:	6a 00                	push   0x0
c001b871:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b877:	e8 dc fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b87c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b880:	58                   	pop    eax
c001b881:	5a                   	pop    edx
c001b882:	6a 02                	push   0x2
c001b884:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b88a:	e8 c9 fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b88f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b893:	59                   	pop    ecx
c001b894:	5b                   	pop    ebx
c001b895:	6a 04                	push   0x4
c001b897:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b89d:	e8 b6 fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b8a2:	5e                   	pop    esi
c001b8a3:	88 c3                	mov    bl,al
c001b8a5:	5f                   	pop    edi
c001b8a6:	6a 07                	push   0x7
c001b8a8:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b8ae:	e8 a5 fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b8b3:	89 c6                	mov    esi,eax
c001b8b5:	58                   	pop    eax
c001b8b6:	5a                   	pop    edx
c001b8b7:	6a 08                	push   0x8
c001b8b9:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b8bf:	e8 94 fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b8c4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b8c8:	59                   	pop    ecx
c001b8c9:	5f                   	pop    edi
c001b8ca:	6a 09                	push   0x9
c001b8cc:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b8d2:	e8 81 fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b8d7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b8db:	0f b6 f8             	movzx  edi,al
c001b8de:	83 c4 10             	add    esp,0x10
c001b8e1:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001b8e4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b8e8:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001b8ec:	89 f1                	mov    ecx,esi
c001b8ee:	0f 94 c0             	sete   al
c001b8f1:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001b8f5:	0f 94 c2             	sete   dl
c001b8f8:	21 d0                	and    eax,edx
c001b8fa:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001b8fe:	0f 94 c2             	sete   dl
c001b901:	21 c2                	and    edx,eax
c001b903:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001b907:	0f 94 c0             	sete   al
c001b90a:	21 d0                	and    eax,edx
c001b90c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b910:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001b914:	0f 94 c1             	sete   cl
c001b917:	84 c8                	test   al,cl
c001b919:	75 28                	jne    c001b943 <RTC::completeRTCRefresh()+0x1c1>
c001b91b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b91f:	89 fd                	mov    ebp,edi
c001b921:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b925:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001b929:	89 f0                	mov    eax,esi
c001b92b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001b92f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b933:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b937:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b93a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b93e:	e9 f2 fe ff ff       	jmp    c001b835 <RTC::completeRTCRefresh()+0xb3>
c001b943:	39 fd                	cmp    ebp,edi
c001b945:	75 d4                	jne    c001b91b <RTC::completeRTCRefresh()+0x199>
c001b947:	55                   	push   ebp
c001b948:	55                   	push   ebp
c001b949:	6a 0b                	push   0xb
c001b94b:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001b951:	e8 02 fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b956:	83 c4 10             	add    esp,0x10
c001b959:	89 c5                	mov    ebp,eax
c001b95b:	a8 04                	test   al,0x4
c001b95d:	75 75                	jne    c001b9d4 <RTC::completeRTCRefresh()+0x252>
c001b95f:	b1 0a                	mov    cl,0xa
c001b961:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b964:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b967:	83 e2 0f             	and    edx,0xf
c001b96a:	c0 e8 04             	shr    al,0x4
c001b96d:	c1 ef 04             	shr    edi,0x4
c001b970:	f6 e1                	mul    cl
c001b972:	6b ff 0a             	imul   edi,edi,0xa
c001b975:	01 d0                	add    eax,edx
c001b977:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b97b:	88 04 24             	mov    BYTE PTR [esp],al
c001b97e:	83 e2 0f             	and    edx,0xf
c001b981:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b985:	c0 e8 04             	shr    al,0x4
c001b988:	f6 e1                	mul    cl
c001b98a:	01 d0                	add    eax,edx
c001b98c:	88 da                	mov    dl,bl
c001b98e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b992:	83 e2 0f             	and    edx,0xf
c001b995:	88 d8                	mov    al,bl
c001b997:	83 e3 80             	and    ebx,0xffffff80
c001b99a:	c0 e8 04             	shr    al,0x4
c001b99d:	83 e0 07             	and    eax,0x7
c001b9a0:	f6 e1                	mul    cl
c001b9a2:	01 d0                	add    eax,edx
c001b9a4:	89 f2                	mov    edx,esi
c001b9a6:	09 c3                	or     ebx,eax
c001b9a8:	83 e2 0f             	and    edx,0xf
c001b9ab:	89 f0                	mov    eax,esi
c001b9ad:	c0 e8 04             	shr    al,0x4
c001b9b0:	f6 e1                	mul    cl
c001b9b2:	8d 34 02             	lea    esi,[edx+eax*1]
c001b9b5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b9b9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b9bd:	83 e2 0f             	and    edx,0xf
c001b9c0:	c0 e8 04             	shr    al,0x4
c001b9c3:	f6 e1                	mul    cl
c001b9c5:	01 d0                	add    eax,edx
c001b9c7:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b9cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9cf:	83 e0 0f             	and    eax,0xf
c001b9d2:	01 c7                	add    edi,eax
c001b9d4:	83 e5 02             	and    ebp,0x2
c001b9d7:	75 14                	jne    c001b9ed <RTC::completeRTCRefresh()+0x26b>
c001b9d9:	84 db                	test   bl,bl
c001b9db:	79 10                	jns    c001b9ed <RTC::completeRTCRefresh()+0x26b>
c001b9dd:	83 e3 7f             	and    ebx,0x7f
c001b9e0:	b9 18 00 00 00       	mov    ecx,0x18
c001b9e5:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b9e8:	99                   	cdq    
c001b9e9:	f7 f9                	idiv   ecx
c001b9eb:	88 d3                	mov    bl,dl
c001b9ed:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b9f3:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001b9f9:	77 06                	ja     c001ba01 <RTC::completeRTCRefresh()+0x27f>
c001b9fb:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001ba01:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001ba05:	31 d2                	xor    edx,edx
c001ba07:	c1 e1 10             	shl    ecx,0x10
c001ba0a:	89 d7                	mov    edi,edx
c001ba0c:	c1 e5 10             	shl    ebp,0x10
c001ba0f:	31 c0                	xor    eax,eax
c001ba11:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001ba17:	09 cf                	or     edi,ecx
c001ba19:	89 f1                	mov    ecx,esi
c001ba1b:	89 fa                	mov    edx,edi
c001ba1d:	88 c8                	mov    al,cl
c001ba1f:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001ba23:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001ba27:	88 da                	mov    dl,bl
c001ba29:	0f b7 c8             	movzx  ecx,ax
c001ba2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba30:	09 e9                	or     ecx,ebp
c001ba32:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ba35:	0f b6 db             	movzx  ebx,bl
c001ba38:	50                   	push   eax
c001ba39:	50                   	push   eax
c001ba3a:	53                   	push   ebx
c001ba3b:	68 f8 a7 03 c0       	push   0xc003a7f8
c001ba40:	e8 a5 14 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001ba45:	5a                   	pop    edx
c001ba46:	59                   	pop    ecx
c001ba47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba4f:	52                   	push   edx
c001ba50:	50                   	push   eax
c001ba51:	e8 db 78 ff ff       	call   c0013331 <datetimeToSeconds(datetime_t)>
c001ba56:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ba5a:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001ba60:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001ba66:	83 c4 3c             	add    esp,0x3c
c001ba69:	5b                   	pop    ebx
c001ba6a:	5e                   	pop    esi
c001ba6b:	5f                   	pop    edi
c001ba6c:	5d                   	pop    ebp
c001ba6d:	c3                   	ret    

c001ba6e <rtcIRQHandler(regs*, void*)>:
c001ba6e:	53                   	push   ebx
c001ba6f:	83 ec 10             	sub    esp,0x10
c001ba72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba76:	6a 0c                	push   0xc
c001ba78:	ff 35 a8 ba 03 c0    	push   DWORD PTR ds:0xc003baa8
c001ba7e:	e8 d5 fb fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001ba83:	83 c4 10             	add    esp,0x10
c001ba86:	84 c0                	test   al,al
c001ba88:	79 24                	jns    c001baae <rtcIRQHandler(regs*, void*)+0x40>
c001ba8a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001ba91:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001ba98:	66 ff 05 80 d1 03 c0 	inc    WORD PTR ds:0xc003d180
c001ba9f:	75 0d                	jne    c001baae <rtcIRQHandler(regs*, void*)+0x40>
c001baa1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001baa5:	83 c4 08             	add    esp,0x8
c001baa8:	5b                   	pop    ebx
c001baa9:	e9 d4 fc ff ff       	jmp    c001b782 <RTC::completeRTCRefresh()>
c001baae:	83 c4 08             	add    esp,0x8
c001bab1:	5b                   	pop    ebx
c001bab2:	c3                   	ret    
c001bab3:	90                   	nop

c001bab4 <RTC::RTC()>:
c001bab4:	83 ec 1c             	sub    esp,0x1c
c001bab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001babb:	83 ec 08             	sub    esp,0x8
c001babe:	68 0e a8 03 c0       	push   0xc003a80e
c001bac3:	50                   	push   eax
c001bac4:	e8 43 77 ff ff       	call   c001320c <Clock::Clock(char const*)>
c001bac9:	83 c4 10             	add    esp,0x10
c001bacc:	ba 2c a8 03 c0       	mov    edx,0xc003a82c
c001bad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bad5:	89 10                	mov    DWORD PTR [eax],edx
c001bad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001badb:	83 ec 0c             	sub    esp,0xc
c001bade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bae2:	6a 01                	push   0x1
c001bae4:	68 6e ba 01 c0       	push   0xc001ba6e
c001bae9:	6a 08                	push   0x8
c001baeb:	50                   	push   eax
c001baec:	e8 07 7c ff ff       	call   c00136f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001baf1:	83 c4 20             	add    esp,0x20
c001baf4:	89 c2                	mov    edx,eax
c001baf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bafa:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb00:	e8 6a 28 ff ff       	call   c000e36f <disableIRQs()>
c001bb05:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c001bb0a:	83 ec 08             	sub    esp,0x8
c001bb0d:	6a 0b                	push   0xb
c001bb0f:	50                   	push   eax
c001bb10:	e8 43 fb fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001bb15:	83 c4 10             	add    esp,0x10
c001bb18:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bb1c:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c001bb21:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001bb25:	83 ca 10             	or     edx,0x10
c001bb28:	0f b6 d2             	movzx  edx,dl
c001bb2b:	83 ec 04             	sub    esp,0x4
c001bb2e:	52                   	push   edx
c001bb2f:	6a 0b                	push   0xb
c001bb31:	50                   	push   eax
c001bb32:	e8 29 fc fe ff       	call   c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>
c001bb37:	83 c4 10             	add    esp,0x10
c001bb3a:	83 ec 0c             	sub    esp,0xc
c001bb3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb41:	e8 3c fc ff ff       	call   c001b782 <RTC::completeRTCRefresh()>
c001bb46:	83 c4 10             	add    esp,0x10
c001bb49:	e8 2f 28 ff ff       	call   c000e37d <enableIRQs()>
c001bb4e:	90                   	nop
c001bb4f:	83 c4 1c             	add    esp,0x1c
c001bb52:	c3                   	ret    
c001bb53:	90                   	nop

c001bb54 <IDE::close(int, int, void*)>:
c001bb54:	83 c8 ff             	or     eax,0xffffffff
c001bb57:	c3                   	ret    

c001bb58 <IDE::IDE()>:
c001bb58:	83 ec 0c             	sub    esp,0xc
c001bb5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5f:	83 ec 08             	sub    esp,0x8
c001bb62:	68 60 a8 03 c0       	push   0xc003a860
c001bb67:	50                   	push   eax
c001bb68:	e8 b9 7f ff ff       	call   c0013b26 <HardDiskController::HardDiskController(char const*)>
c001bb6d:	83 c4 10             	add    esp,0x10
c001bb70:	ba a0 aa 03 c0       	mov    edx,0xc003aaa0
c001bb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb79:	89 10                	mov    DWORD PTR [eax],edx
c001bb7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bb86:	90                   	nop
c001bb87:	83 c4 0c             	add    esp,0xc
c001bb8a:	c3                   	ret    
c001bb8b:	90                   	nop

c001bb8c <IDE::prepareInterrupt(unsigned char)>:
c001bb8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb95:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bb9d:	c3                   	ret    

c001bb9e <selectDrive(unsigned char, unsigned char)>:
c001bb9e:	c3                   	ret    
c001bb9f:	90                   	nop

c001bba0 <IDE::getBase(unsigned char)>:
c001bba0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bba9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bbb1:	c3                   	ret    

c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bbb2:	55                   	push   ebp
c001bbb3:	57                   	push   edi
c001bbb4:	56                   	push   esi
c001bbb5:	53                   	push   ebx
c001bbb6:	83 ec 1c             	sub    esp,0x1c
c001bbb9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bbbd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbc1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bbc4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bbc8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bbcc:	80 f9 03             	cmp    cl,0x3
c001bbcf:	77 51                	ja     c001bc22 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bbd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbd5:	0f b6 f2             	movzx  esi,dl
c001bbd8:	0f b6 db             	movzx  ebx,bl
c001bbdb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bbde:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bbe2:	83 ca 80             	or     edx,0xffffff80
c001bbe5:	0f b6 d2             	movzx  edx,dl
c001bbe8:	52                   	push   edx
c001bbe9:	6a 0c                	push   0xc
c001bbeb:	56                   	push   esi
c001bbec:	57                   	push   edi
c001bbed:	e8 c0 ff ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbf2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bbf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bbfb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bbff:	ee                   	out    dx,al
c001bc00:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bc05:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bc09:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bc0d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc11:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc19:	83 c4 2c             	add    esp,0x2c
c001bc1c:	5b                   	pop    ebx
c001bc1d:	5e                   	pop    esi
c001bc1e:	5f                   	pop    edi
c001bc1f:	5d                   	pop    ebp
c001bc20:	eb 90                	jmp    c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc22:	80 fb 07             	cmp    bl,0x7
c001bc25:	77 12                	ja     c001bc39 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bc27:	0f b6 d2             	movzx  edx,dl
c001bc2a:	0f b6 db             	movzx  ebx,bl
c001bc2d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bc35:	89 da                	mov    edx,ebx
c001bc37:	eb 2f                	jmp    c001bc68 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc39:	80 fb 0d             	cmp    bl,0xd
c001bc3c:	77 13                	ja     c001bc51 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bc3e:	0f b6 d2             	movzx  edx,dl
c001bc41:	0f b6 db             	movzx  ebx,bl
c001bc44:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bc4b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bc4f:	eb 17                	jmp    c001bc68 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc51:	80 fb 15             	cmp    bl,0x15
c001bc54:	77 13                	ja     c001bc69 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bc56:	0f b6 d2             	movzx  edx,dl
c001bc59:	0f b6 db             	movzx  ebx,bl
c001bc5c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bc64:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bc68:	ee                   	out    dx,al
c001bc69:	83 c4 1c             	add    esp,0x1c
c001bc6c:	5b                   	pop    ebx
c001bc6d:	5e                   	pop    esi
c001bc6e:	5f                   	pop    edi
c001bc6f:	5d                   	pop    ebp
c001bc70:	c3                   	ret    
c001bc71:	90                   	nop

c001bc72 <IDE::read(unsigned char, unsigned char)>:
c001bc72:	55                   	push   ebp
c001bc73:	57                   	push   edi
c001bc74:	56                   	push   esi
c001bc75:	53                   	push   ebx
c001bc76:	83 ec 1c             	sub    esp,0x1c
c001bc79:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc81:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bc84:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc88:	3c 03                	cmp    al,0x3
c001bc8a:	77 43                	ja     c001bccf <IDE::read(unsigned char, unsigned char)+0x5d>
c001bc8c:	0f b6 f2             	movzx  esi,dl
c001bc8f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bc92:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bc96:	83 c8 80             	or     eax,0xffffff80
c001bc99:	0f b6 c0             	movzx  eax,al
c001bc9c:	50                   	push   eax
c001bc9d:	6a 0c                	push   0xc
c001bc9f:	56                   	push   esi
c001bca0:	57                   	push   edi
c001bca1:	e8 0c ff ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bca6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bcab:	0f b6 c3             	movzx  eax,bl
c001bcae:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bcb2:	ec                   	in     al,dx
c001bcb3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bcb7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bcbc:	52                   	push   edx
c001bcbd:	6a 0c                	push   0xc
c001bcbf:	56                   	push   esi
c001bcc0:	57                   	push   edi
c001bcc1:	e8 ec fe ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcc6:	83 c4 20             	add    esp,0x20
c001bcc9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bccd:	eb 49                	jmp    c001bd18 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bccf:	80 fb 07             	cmp    bl,0x7
c001bcd2:	77 12                	ja     c001bce6 <IDE::read(unsigned char, unsigned char)+0x74>
c001bcd4:	0f b6 d2             	movzx  edx,dl
c001bcd7:	0f b6 c3             	movzx  eax,bl
c001bcda:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bce2:	89 c2                	mov    edx,eax
c001bce4:	eb 31                	jmp    c001bd17 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bce6:	80 fb 0d             	cmp    bl,0xd
c001bce9:	77 13                	ja     c001bcfe <IDE::read(unsigned char, unsigned char)+0x8c>
c001bceb:	0f b6 d2             	movzx  edx,dl
c001bcee:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bcf5:	0f b6 d3             	movzx  edx,bl
c001bcf8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bcfc:	eb 19                	jmp    c001bd17 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bcfe:	31 c0                	xor    eax,eax
c001bd00:	80 fb 15             	cmp    bl,0x15
c001bd03:	77 13                	ja     c001bd18 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bd05:	0f b6 d2             	movzx  edx,dl
c001bd08:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bd10:	0f b6 d3             	movzx  edx,bl
c001bd13:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bd17:	ec                   	in     al,dx
c001bd18:	83 c4 1c             	add    esp,0x1c
c001bd1b:	5b                   	pop    ebx
c001bd1c:	5e                   	pop    esi
c001bd1d:	5f                   	pop    edi
c001bd1e:	5d                   	pop    ebp
c001bd1f:	c3                   	ret    

c001bd20 <IDE::waitInterrupt(unsigned char)>:
c001bd20:	55                   	push   ebp
c001bd21:	57                   	push   edi
c001bd22:	56                   	push   esi
c001bd23:	53                   	push   ebx
c001bd24:	31 db                	xor    ebx,ebx
c001bd26:	83 ec 0c             	sub    esp,0xc
c001bd29:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd2d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bd32:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bd3a:	89 e8                	mov    eax,ebp
c001bd3c:	84 c0                	test   al,al
c001bd3e:	75 34                	jne    c001bd74 <IDE::waitInterrupt(unsigned char)+0x54>
c001bd40:	52                   	push   edx
c001bd41:	6a 0c                	push   0xc
c001bd43:	56                   	push   esi
c001bd44:	57                   	push   edi
c001bd45:	e8 28 ff ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001bd4a:	83 c4 10             	add    esp,0x10
c001bd4d:	a8 01                	test   al,0x1
c001bd4f:	75 2b                	jne    c001bd7c <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd51:	f6 c3 04             	test   bl,0x4
c001bd54:	75 16                	jne    c001bd6c <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd56:	83 fb 32             	cmp    ebx,0x32
c001bd59:	7e 11                	jle    c001bd6c <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd5b:	50                   	push   eax
c001bd5c:	50                   	push   eax
c001bd5d:	6a 00                	push   0x0
c001bd5f:	68 80 96 98 00       	push   0x989680
c001bd64:	e8 dc 2c ff ff       	call   c000ea45 <nanoSleep(unsigned long long)>
c001bd69:	83 c4 10             	add    esp,0x10
c001bd6c:	83 fb 3c             	cmp    ebx,0x3c
c001bd6f:	74 0b                	je     c001bd7c <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd71:	43                   	inc    ebx
c001bd72:	eb be                	jmp    c001bd32 <IDE::waitInterrupt(unsigned char)+0x12>
c001bd74:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bd7c:	83 c4 0c             	add    esp,0xc
c001bd7f:	89 e8                	mov    eax,ebp
c001bd81:	5b                   	pop    ebx
c001bd82:	5e                   	pop    esi
c001bd83:	5f                   	pop    edi
c001bd84:	5d                   	pop    ebp
c001bd85:	c3                   	ret    

c001bd86 <ideChannel0IRQHandler(regs*, void*)>:
c001bd86:	83 ec 10             	sub    esp,0x10
c001bd89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd8d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bd94:	6a 07                	push   0x7
c001bd96:	6a 00                	push   0x0
c001bd98:	50                   	push   eax
c001bd99:	e8 d4 fe ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001bd9e:	83 c4 1c             	add    esp,0x1c
c001bda1:	c3                   	ret    

c001bda2 <ideChannel1IRQHandler(regs*, void*)>:
c001bda2:	83 ec 10             	sub    esp,0x10
c001bda5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bda9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bdb0:	6a 07                	push   0x7
c001bdb2:	6a 01                	push   0x1
c001bdb4:	50                   	push   eax
c001bdb5:	e8 b8 fe ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001bdba:	83 c4 1c             	add    esp,0x1c
c001bdbd:	c3                   	ret    

c001bdbe <IDE::enableIRQs(unsigned char, bool)>:
c001bdbe:	57                   	push   edi
c001bdbf:	56                   	push   esi
c001bdc0:	be 04 00 00 00       	mov    esi,0x4
c001bdc5:	53                   	push   ebx
c001bdc6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bdcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bdcf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bdd4:	0f 94 c0             	sete   al
c001bdd7:	d1 e0                	shl    eax,1
c001bdd9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bde0:	0f b6 c0             	movzx  eax,al
c001bde3:	50                   	push   eax
c001bde4:	6a 0c                	push   0xc
c001bde6:	57                   	push   edi
c001bde7:	53                   	push   ebx
c001bde8:	e8 c5 fd ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bded:	83 c4 10             	add    esp,0x10
c001bdf0:	50                   	push   eax
c001bdf1:	6a 0c                	push   0xc
c001bdf3:	57                   	push   edi
c001bdf4:	53                   	push   ebx
c001bdf5:	e8 78 fe ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001bdfa:	83 c4 10             	add    esp,0x10
c001bdfd:	4e                   	dec    esi
c001bdfe:	75 f0                	jne    c001bdf0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001be00:	5b                   	pop    ebx
c001be01:	5e                   	pop    esi
c001be02:	5f                   	pop    edi
c001be03:	c3                   	ret    

c001be04 <IDE::open(int, int, void*)>:
c001be04:	55                   	push   ebp
c001be05:	57                   	push   edi
c001be06:	56                   	push   esi
c001be07:	53                   	push   ebx
c001be08:	83 ec 1c             	sub    esp,0x1c
c001be0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001be0f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001be18:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001be21:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001be28:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001be2f:	0f 85 b0 02 00 00    	jne    c001c0e5 <IDE::open(int, int, void*)+0x2e1>
c001be35:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001be3b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001be3f:	83 e0 7f             	and    eax,0x7f
c001be42:	3c 05                	cmp    al,0x5
c001be44:	74 04                	je     c001be4a <IDE::open(int, int, void*)+0x46>
c001be46:	3c 0f                	cmp    al,0xf
c001be48:	75 32                	jne    c001be7c <IDE::open(int, int, void*)+0x78>
c001be4a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001be50:	83 e0 fc             	and    eax,0xfffffffc
c001be53:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be5a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001be60:	83 e0 fc             	and    eax,0xfffffffc
c001be63:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be6a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001be70:	83 e0 fc             	and    eax,0xfffffffc
c001be73:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be7a:	eb 14                	jmp    c001be90 <IDE::open(int, int, void*)+0x8c>
c001be7c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001be86:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001be90:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001be97:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001be9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bea2:	89 c6                	mov    esi,eax
c001bea4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bea9:	c1 e6 10             	shl    esi,0x10
c001beac:	89 e8                	mov    eax,ebp
c001beae:	89 fa                	mov    edx,edi
c001beb0:	c1 e0 0b             	shl    eax,0xb
c001beb3:	09 f0                	or     eax,esi
c001beb5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bebc:	c1 e6 08             	shl    esi,0x8
c001bebf:	09 c6                	or     esi,eax
c001bec1:	89 f0                	mov    eax,esi
c001bec3:	0d 08 00 00 80       	or     eax,0x80000008
c001bec8:	ef                   	out    dx,eax
c001bec9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bece:	89 ca                	mov    edx,ecx
c001bed0:	ed                   	in     eax,dx
c001bed1:	c1 e8 10             	shr    eax,0x10
c001bed4:	3d ff ff 00 00       	cmp    eax,0xffff
c001bed9:	0f 84 f5 00 00 00    	je     c001bfd4 <IDE::open(int, int, void*)+0x1d0>
c001bedf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bee5:	89 fa                	mov    edx,edi
c001bee7:	89 f0                	mov    eax,esi
c001bee9:	ef                   	out    dx,eax
c001beea:	b0 fe                	mov    al,0xfe
c001beec:	89 ca                	mov    edx,ecx
c001beee:	ee                   	out    dx,al
c001beef:	89 f0                	mov    eax,esi
c001bef1:	89 fa                	mov    edx,edi
c001bef3:	ef                   	out    dx,eax
c001bef4:	89 ca                	mov    edx,ecx
c001bef6:	ed                   	in     eax,dx
c001bef7:	3c fe                	cmp    al,0xfe
c001bef9:	0f 85 a9 00 00 00    	jne    c001bfa8 <IDE::open(int, int, void*)+0x1a4>
c001beff:	8b 15 a8 ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baa8
c001bf05:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bf0c:	74 33                	je     c001bf41 <IDE::open(int, int, void*)+0x13d>
c001bf0e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bf14:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bf18:	40                   	inc    eax
c001bf19:	83 ec 0c             	sub    esp,0xc
c001bf1c:	0f b6 c0             	movzx  eax,al
c001bf1f:	50                   	push   eax
c001bf20:	55                   	push   ebp
c001bf21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf25:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bf2b:	51                   	push   ecx
c001bf2c:	e8 07 a9 ff ff       	call   c0016838 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bf31:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bf36:	83 c4 1c             	add    esp,0x1c
c001bf39:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf3f:	eb 0a                	jmp    c001bf4b <IDE::open(int, int, void*)+0x147>
c001bf41:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bf4b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bf52:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bf59:	c1 e1 10             	shl    ecx,0x10
c001bf5c:	c1 e0 08             	shl    eax,0x8
c001bf5f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bf64:	09 c1                	or     ecx,eax
c001bf66:	89 fa                	mov    edx,edi
c001bf68:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bf6f:	c1 e0 0b             	shl    eax,0xb
c001bf72:	09 c1                	or     ecx,eax
c001bf74:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bf7a:	89 c8                	mov    eax,ecx
c001bf7c:	ef                   	out    dx,eax
c001bf7d:	be fc 0c 00 00       	mov    esi,0xcfc
c001bf82:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bf88:	89 f2                	mov    edx,esi
c001bf8a:	ee                   	out    dx,al
c001bf8b:	89 c8                	mov    eax,ecx
c001bf8d:	89 fa                	mov    edx,edi
c001bf8f:	ef                   	out    dx,eax
c001bf90:	89 f2                	mov    edx,esi
c001bf92:	ed                   	in     eax,dx
c001bf93:	0f b6 c0             	movzx  eax,al
c001bf96:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bf9c:	74 46                	je     c001bfe4 <IDE::open(int, int, void*)+0x1e0>
c001bf9e:	83 ec 0c             	sub    esp,0xc
c001bfa1:	68 78 a8 03 c0       	push   0xc003a878
c001bfa6:	eb 34                	jmp    c001bfdc <IDE::open(int, int, void*)+0x1d8>
c001bfa8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bfb1:	75 17                	jne    c001bfca <IDE::open(int, int, void*)+0x1c6>
c001bfb3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bfb8:	74 07                	je     c001bfc1 <IDE::open(int, int, void*)+0x1bd>
c001bfba:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bfbf:	75 09                	jne    c001bfca <IDE::open(int, int, void*)+0x1c6>
c001bfc1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bfc8:	eb 1a                	jmp    c001bfe4 <IDE::open(int, int, void*)+0x1e0>
c001bfca:	83 ec 0c             	sub    esp,0xc
c001bfcd:	68 80 a8 03 c0       	push   0xc003a880
c001bfd2:	eb 08                	jmp    c001bfdc <IDE::open(int, int, void*)+0x1d8>
c001bfd4:	83 ec 0c             	sub    esp,0xc
c001bfd7:	68 b1 a8 03 c0       	push   0xc003a8b1
c001bfdc:	e8 27 10 ff ff       	call   c000d008 <panic(char const*)>
c001bfe1:	83 c4 10             	add    esp,0x10
c001bfe4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bfeb:	79 1a                	jns    c001c007 <IDE::open(int, int, void*)+0x203>
c001bfed:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bff3:	83 e0 fc             	and    eax,0xfffffffc
c001bff6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bffd:	83 c0 08             	add    eax,0x8
c001c000:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c007:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c00d:	89 c2                	mov    edx,eax
c001c00f:	83 e2 0f             	and    edx,0xf
c001c012:	66 83 fa 08          	cmp    dx,0x8
c001c016:	75 0a                	jne    c001c022 <IDE::open(int, int, void*)+0x21e>
c001c018:	83 e8 02             	sub    eax,0x2
c001c01b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c022:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c028:	89 c2                	mov    edx,eax
c001c02a:	83 e2 0f             	and    edx,0xf
c001c02d:	66 83 fa 08          	cmp    dx,0x8
c001c031:	75 0a                	jne    c001c03d <IDE::open(int, int, void*)+0x239>
c001c033:	83 e8 02             	sub    eax,0x2
c001c036:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c03d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c044:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c04b:	89 d0                	mov    eax,edx
c001c04d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c050:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c054:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c058:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c05b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c060:	0f b6 c9             	movzx  ecx,cl
c001c063:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c06a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c06d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c071:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c075:	8d 50 02             	lea    edx,[eax+0x2]
c001c078:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c07d:	0f b6 d2             	movzx  edx,dl
c001c080:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c086:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c089:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c08d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c091:	8d 48 03             	lea    ecx,[eax+0x3]
c001c094:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c099:	0f b6 c9             	movzx  ecx,cl
c001c09c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c0a2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c0a5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c0a9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c0ad:	8d 50 04             	lea    edx,[eax+0x4]
c001c0b0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c0b6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c0bb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c0c2:	66 85 f6             	test   si,si
c001c0c5:	74 3e                	je     c001c105 <IDE::open(int, int, void*)+0x301>
c001c0c7:	0f b6 d2             	movzx  edx,dl
c001c0ca:	83 c0 05             	add    eax,0x5
c001c0cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0d4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c0d8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c0de:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0e3:	eb 20                	jmp    c001c105 <IDE::open(int, int, void*)+0x301>
c001c0e5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0ef:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c0f9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c100:	e9 02 ff ff ff       	jmp    c001c007 <IDE::open(int, int, void*)+0x203>
c001c105:	52                   	push   edx
c001c106:	52                   	push   edx
c001c107:	6a 00                	push   0x0
c001c109:	53                   	push   ebx
c001c10a:	e8 7d fa ff ff       	call   c001bb8c <IDE::prepareInterrupt(unsigned char)>
c001c10f:	59                   	pop    ecx
c001c110:	5e                   	pop    esi
c001c111:	6a 01                	push   0x1
c001c113:	53                   	push   ebx
c001c114:	e8 73 fa ff ff       	call   c001bb8c <IDE::prepareInterrupt(unsigned char)>
c001c119:	83 c4 0c             	add    esp,0xc
c001c11c:	6a 00                	push   0x0
c001c11e:	6a 00                	push   0x0
c001c120:	53                   	push   ebx
c001c121:	e8 98 fc ff ff       	call   c001bdbe <IDE::enableIRQs(unsigned char, bool)>
c001c126:	83 c4 0c             	add    esp,0xc
c001c129:	6a 00                	push   0x0
c001c12b:	6a 01                	push   0x1
c001c12d:	53                   	push   ebx
c001c12e:	e8 8b fc ff ff       	call   c001bdbe <IDE::enableIRQs(unsigned char, bool)>
c001c133:	83 c4 10             	add    esp,0x10
c001c136:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c13d:	74 40                	je     c001c17f <IDE::open(int, int, void*)+0x37b>
c001c13f:	83 ec 0c             	sub    esp,0xc
c001c142:	68 db a8 03 c0       	push   0xc003a8db
c001c147:	e8 9e 0d ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c14c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c14f:	6a 01                	push   0x1
c001c151:	68 86 bd 01 c0       	push   0xc001bd86
c001c156:	6a 0e                	push   0xe
c001c158:	53                   	push   ebx
c001c159:	e8 9a 75 ff ff       	call   c00136f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c15e:	83 c4 14             	add    esp,0x14
c001c161:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c167:	53                   	push   ebx
c001c168:	6a 01                	push   0x1
c001c16a:	68 a2 bd 01 c0       	push   0xc001bda2
c001c16f:	6a 0f                	push   0xf
c001c171:	53                   	push   ebx
c001c172:	e8 81 75 ff ff       	call   c00136f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c177:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c17d:	eb 4a                	jmp    c001c1c9 <IDE::open(int, int, void*)+0x3c5>
c001c17f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c189:	50                   	push   eax
c001c18a:	6a 0f                	push   0xf
c001c18c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c192:	68 f7 a8 03 c0       	push   0xc003a8f7
c001c197:	e8 4e 0d ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c19c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c19f:	6a 00                	push   0x0
c001c1a1:	68 86 bd 01 c0       	push   0xc001bd86
c001c1a6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c1ac:	53                   	push   ebx
c001c1ad:	e8 46 75 ff ff       	call   c00136f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1b2:	83 c4 14             	add    esp,0x14
c001c1b5:	53                   	push   ebx
c001c1b6:	6a 00                	push   0x0
c001c1b8:	68 a2 bd 01 c0       	push   0xc001bda2
c001c1bd:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c1c3:	53                   	push   ebx
c001c1c4:	e8 2f 75 ff ff       	call   c00136f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1cb:	83 c4 20             	add    esp,0x20
c001c1ce:	83 ec 0c             	sub    esp,0xc
c001c1d1:	53                   	push   ebx
c001c1d2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c1d5:	83 c4 0c             	add    esp,0xc
c001c1d8:	6a 07                	push   0x7
c001c1da:	6a 00                	push   0x0
c001c1dc:	53                   	push   ebx
c001c1dd:	e8 90 fa ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c1e2:	83 c4 0c             	add    esp,0xc
c001c1e5:	6a 07                	push   0x7
c001c1e7:	6a 01                	push   0x1
c001c1e9:	53                   	push   ebx
c001c1ea:	e8 83 fa ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c1ef:	83 c4 0c             	add    esp,0xc
c001c1f2:	6a 01                	push   0x1
c001c1f4:	6a 00                	push   0x0
c001c1f6:	53                   	push   ebx
c001c1f7:	e8 c2 fb ff ff       	call   c001bdbe <IDE::enableIRQs(unsigned char, bool)>
c001c1fc:	83 c4 0c             	add    esp,0xc
c001c1ff:	6a 01                	push   0x1
c001c201:	6a 01                	push   0x1
c001c203:	53                   	push   ebx
c001c204:	e8 b5 fb ff ff       	call   c001bdbe <IDE::enableIRQs(unsigned char, bool)>
c001c209:	83 c4 2c             	add    esp,0x2c
c001c20c:	31 c0                	xor    eax,eax
c001c20e:	5b                   	pop    ebx
c001c20f:	5e                   	pop    esi
c001c210:	5f                   	pop    edi
c001c211:	5d                   	pop    ebp
c001c212:	c3                   	ret    
c001c213:	90                   	nop

c001c214 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c214:	55                   	push   ebp
c001c215:	57                   	push   edi
c001c216:	56                   	push   esi
c001c217:	53                   	push   ebx
c001c218:	83 ec 1c             	sub    esp,0x1c
c001c21b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c21f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c223:	8d 50 f8             	lea    edx,[eax-0x8]
c001c226:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c22a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c22e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c232:	80 fa 03             	cmp    dl,0x3
c001c235:	77 5d                	ja     c001c294 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c237:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c23b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c23f:	0f b6 db             	movzx  ebx,bl
c001c242:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c245:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c249:	83 ca 80             	or     edx,0xffffff80
c001c24c:	0f b6 d2             	movzx  edx,dl
c001c24f:	52                   	push   edx
c001c250:	6a 0c                	push   0xc
c001c252:	53                   	push   ebx
c001c253:	56                   	push   esi
c001c254:	e8 59 f9 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c259:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c25e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c262:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c266:	0f b6 c0             	movzx  eax,al
c001c269:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c26d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c26f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c274:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c278:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c27c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c280:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c288:	83 c4 2c             	add    esp,0x2c
c001c28b:	5b                   	pop    ebx
c001c28c:	5e                   	pop    esi
c001c28d:	5f                   	pop    edi
c001c28e:	5d                   	pop    ebp
c001c28f:	e9 1e f9 ff ff       	jmp    c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c294:	3c 07                	cmp    al,0x7
c001c296:	77 10                	ja     c001c2a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c298:	0f b6 db             	movzx  ebx,bl
c001c29b:	0f b6 d0             	movzx  edx,al
c001c29e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c2a6:	eb 2d                	jmp    c001c2d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c2a8:	3c 0d                	cmp    al,0xd
c001c2aa:	77 13                	ja     c001c2bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c2ac:	0f b6 db             	movzx  ebx,bl
c001c2af:	0f b6 c0             	movzx  eax,al
c001c2b2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c2b9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c2bd:	eb 16                	jmp    c001c2d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c2bf:	3c 15                	cmp    al,0x15
c001c2c1:	77 14                	ja     c001c2d7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c2c3:	0f b6 db             	movzx  ebx,bl
c001c2c6:	0f b6 c0             	movzx  eax,al
c001c2c9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c2d1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c2d5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c2d7:	83 c4 1c             	add    esp,0x1c
c001c2da:	5b                   	pop    ebx
c001c2db:	5e                   	pop    esi
c001c2dc:	5f                   	pop    edi
c001c2dd:	5d                   	pop    ebp
c001c2de:	c3                   	ret    
c001c2df:	90                   	nop

c001c2e0 <IDE::detect()>:
c001c2e0:	55                   	push   ebp
c001c2e1:	57                   	push   edi
c001c2e2:	56                   	push   esi
c001c2e3:	53                   	push   ebx
c001c2e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c2ea:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c2f1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c2f8:	0f 85 be 02 00 00    	jne    c001c5bc <IDE::detect()+0x2dc>
c001c2fe:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c305:	31 f6                	xor    esi,esi
c001c307:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c30f:	31 ed                	xor    ebp,ebp
c001c311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c315:	c1 e0 06             	shl    eax,0x6
c001c318:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c320:	89 e8                	mov    eax,ebp
c001c322:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c326:	c1 e0 04             	shl    eax,0x4
c001c329:	83 c8 a0             	or     eax,0xffffffa0
c001c32c:	0f b6 c0             	movzx  eax,al
c001c32f:	50                   	push   eax
c001c330:	6a 06                	push   0x6
c001c332:	56                   	push   esi
c001c333:	53                   	push   ebx
c001c334:	e8 79 f8 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c339:	83 c4 0c             	add    esp,0xc
c001c33c:	6a 0c                	push   0xc
c001c33e:	56                   	push   esi
c001c33f:	53                   	push   ebx
c001c340:	e8 2d f9 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c345:	83 c4 0c             	add    esp,0xc
c001c348:	6a 0c                	push   0xc
c001c34a:	56                   	push   esi
c001c34b:	53                   	push   ebx
c001c34c:	e8 21 f9 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c351:	83 c4 0c             	add    esp,0xc
c001c354:	6a 0c                	push   0xc
c001c356:	56                   	push   esi
c001c357:	53                   	push   ebx
c001c358:	e8 15 f9 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c35d:	83 c4 0c             	add    esp,0xc
c001c360:	6a 0c                	push   0xc
c001c362:	56                   	push   esi
c001c363:	53                   	push   ebx
c001c364:	e8 09 f9 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c369:	68 ec 00 00 00       	push   0xec
c001c36e:	6a 07                	push   0x7
c001c370:	56                   	push   esi
c001c371:	53                   	push   ebx
c001c372:	e8 3b f8 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c377:	83 c4 1c             	add    esp,0x1c
c001c37a:	6a 0c                	push   0xc
c001c37c:	56                   	push   esi
c001c37d:	53                   	push   ebx
c001c37e:	e8 ef f8 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c383:	83 c4 0c             	add    esp,0xc
c001c386:	6a 0c                	push   0xc
c001c388:	56                   	push   esi
c001c389:	53                   	push   ebx
c001c38a:	e8 e3 f8 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c38f:	83 c4 0c             	add    esp,0xc
c001c392:	6a 0c                	push   0xc
c001c394:	56                   	push   esi
c001c395:	53                   	push   ebx
c001c396:	e8 d7 f8 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c39b:	83 c4 0c             	add    esp,0xc
c001c39e:	6a 0c                	push   0xc
c001c3a0:	56                   	push   esi
c001c3a1:	53                   	push   ebx
c001c3a2:	e8 cb f8 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c3a7:	83 c4 0c             	add    esp,0xc
c001c3aa:	6a 0c                	push   0xc
c001c3ac:	56                   	push   esi
c001c3ad:	53                   	push   ebx
c001c3ae:	e8 bf f8 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c3b3:	83 c4 10             	add    esp,0x10
c001c3b6:	84 c0                	test   al,al
c001c3b8:	0f 84 8b 01 00 00    	je     c001c549 <IDE::detect()+0x269>
c001c3be:	31 ff                	xor    edi,edi
c001c3c0:	50                   	push   eax
c001c3c1:	6a 0c                	push   0xc
c001c3c3:	56                   	push   esi
c001c3c4:	53                   	push   ebx
c001c3c5:	e8 a8 f8 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c3ca:	83 c4 10             	add    esp,0x10
c001c3cd:	a8 01                	test   al,0x1
c001c3cf:	0f 85 8e 01 00 00    	jne    c001c563 <IDE::detect()+0x283>
c001c3d5:	84 c0                	test   al,al
c001c3d7:	78 04                	js     c001c3dd <IDE::detect()+0xfd>
c001c3d9:	a8 08                	test   al,0x8
c001c3db:	75 27                	jne    c001c404 <IDE::detect()+0x124>
c001c3dd:	47                   	inc    edi
c001c3de:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c3e4:	7e da                	jle    c001c3c0 <IDE::detect()+0xe0>
c001c3e6:	50                   	push   eax
c001c3e7:	50                   	push   eax
c001c3e8:	6a 00                	push   0x0
c001c3ea:	68 40 4b 4c 00       	push   0x4c4b40
c001c3ef:	e8 51 26 ff ff       	call   c000ea45 <nanoSleep(unsigned long long)>
c001c3f4:	83 c4 10             	add    esp,0x10
c001c3f7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c3fd:	75 c1                	jne    c001c3c0 <IDE::detect()+0xe0>
c001c3ff:	e9 5f 01 00 00       	jmp    c001c563 <IDE::detect()+0x283>
c001c404:	31 c9                	xor    ecx,ecx
c001c406:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c40a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c40e:	83 ec 0c             	sub    esp,0xc
c001c411:	68 80 00 00 00       	push   0x80
c001c416:	57                   	push   edi
c001c417:	6a 00                	push   0x0
c001c419:	56                   	push   esi
c001c41a:	53                   	push   ebx
c001c41b:	e8 f4 fd ff ff       	call   c001c214 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c420:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c425:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c429:	89 d1                	mov    ecx,edx
c001c42b:	c1 e0 06             	shl    eax,0x6
c001c42e:	01 d8                	add    eax,ebx
c001c430:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c437:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c43e:	89 f2                	mov    edx,esi
c001c440:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c446:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c44a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c450:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c454:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c45b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c463:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c46a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c472:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c478:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c47f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c485:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c489:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c48d:	83 c4 20             	add    esp,0x20
c001c490:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c493:	83 c0 02             	add    eax,0x2
c001c496:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c49c:	83 c7 02             	add    edi,0x2
c001c49f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c4a2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c4a8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c4ac:	75 e2                	jne    c001c490 <IDE::detect()+0x1b0>
c001c4ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4b2:	c1 e0 06             	shl    eax,0x6
c001c4b5:	01 d8                	add    eax,ebx
c001c4b7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c4bd:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c4c4:	66 c1 ea 09          	shr    dx,0x9
c001c4c8:	83 e2 01             	and    edx,0x1
c001c4cb:	84 c9                	test   cl,cl
c001c4cd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c4d3:	75 2f                	jne    c001c504 <IDE::detect()+0x224>
c001c4d5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c4db:	85 c0                	test   eax,eax
c001c4dd:	74 66                	je     c001c545 <IDE::detect()+0x265>
c001c4df:	50                   	push   eax
c001c4e0:	55                   	push   ebp
c001c4e1:	56                   	push   esi
c001c4e2:	68 13 a9 03 c0       	push   0xc003a913
c001c4e7:	e8 fe 09 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c4ec:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c4f3:	e8 a2 5f ff ff       	call   c001249a <operator new(unsigned long)>
c001c4f8:	89 c7                	mov    edi,eax
c001c4fa:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4fd:	e8 e8 02 00 00       	call   c001c7ea <ATA::ATA()>
c001c502:	eb 28                	jmp    c001c52c <IDE::detect()+0x24c>
c001c504:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c50a:	55                   	push   ebp
c001c50b:	56                   	push   esi
c001c50c:	68 42 a9 03 c0       	push   0xc003a942
c001c511:	e8 d4 09 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c516:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c51d:	e8 78 5f ff ff       	call   c001249a <operator new(unsigned long)>
c001c522:	89 c7                	mov    edi,eax
c001c524:	89 04 24             	mov    DWORD PTR [esp],eax
c001c527:	e8 ee 08 00 00       	call   c001ce1a <ATAPI::ATAPI()>
c001c52c:	5a                   	pop    edx
c001c52d:	59                   	pop    ecx
c001c52e:	57                   	push   edi
c001c52f:	53                   	push   ebx
c001c530:	e8 6f 72 ff ff       	call   c00137a4 <Device::addChild(Device*)>
c001c535:	8b 07                	mov    eax,DWORD PTR [edi]
c001c537:	53                   	push   ebx
c001c538:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c53c:	6a 00                	push   0x0
c001c53e:	57                   	push   edi
c001c53f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c542:	83 c4 20             	add    esp,0x20
c001c545:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c549:	4d                   	dec    ebp
c001c54a:	74 0a                	je     c001c556 <IDE::detect()+0x276>
c001c54c:	bd 01 00 00 00       	mov    ebp,0x1
c001c551:	e9 bb fd ff ff       	jmp    c001c311 <IDE::detect()+0x31>
c001c556:	4e                   	dec    esi
c001c557:	74 63                	je     c001c5bc <IDE::detect()+0x2dc>
c001c559:	be 01 00 00 00       	mov    esi,0x1
c001c55e:	e9 ac fd ff ff       	jmp    c001c30f <IDE::detect()+0x2f>
c001c563:	50                   	push   eax
c001c564:	6a 04                	push   0x4
c001c566:	56                   	push   esi
c001c567:	53                   	push   ebx
c001c568:	e8 05 f7 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c56d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c571:	83 c4 0c             	add    esp,0xc
c001c574:	6a 05                	push   0x5
c001c576:	56                   	push   esi
c001c577:	53                   	push   ebx
c001c578:	e8 f5 f6 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c57d:	83 c4 10             	add    esp,0x10
c001c580:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c584:	80 fa 14             	cmp    dl,0x14
c001c587:	75 04                	jne    c001c58d <IDE::detect()+0x2ad>
c001c589:	3c eb                	cmp    al,0xeb
c001c58b:	eb 07                	jmp    c001c594 <IDE::detect()+0x2b4>
c001c58d:	3c 96                	cmp    al,0x96
c001c58f:	75 b8                	jne    c001c549 <IDE::detect()+0x269>
c001c591:	80 fa 69             	cmp    dl,0x69
c001c594:	75 b3                	jne    c001c549 <IDE::detect()+0x269>
c001c596:	68 a1 00 00 00       	push   0xa1
c001c59b:	6a 07                	push   0x7
c001c59d:	56                   	push   esi
c001c59e:	53                   	push   ebx
c001c59f:	e8 0e f6 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5a4:	5f                   	pop    edi
c001c5a5:	58                   	pop    eax
c001c5a6:	6a 00                	push   0x0
c001c5a8:	68 40 42 0f 00       	push   0xf4240
c001c5ad:	e8 93 24 ff ff       	call   c000ea45 <nanoSleep(unsigned long long)>
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	b1 01                	mov    cl,0x1
c001c5b7:	e9 4a fe ff ff       	jmp    c001c406 <IDE::detect()+0x126>
c001c5bc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c5c2:	5b                   	pop    ebx
c001c5c3:	5e                   	pop    esi
c001c5c4:	5f                   	pop    edi
c001c5c5:	5d                   	pop    ebp
c001c5c6:	c3                   	ret    
c001c5c7:	90                   	nop

c001c5c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c5c8:	55                   	push   ebp
c001c5c9:	57                   	push   edi
c001c5ca:	56                   	push   esi
c001c5cb:	53                   	push   ebx
c001c5cc:	83 ec 1c             	sub    esp,0x1c
c001c5cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c5d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c5db:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c5df:	88 c3                	mov    bl,al
c001c5e1:	84 c0                	test   al,al
c001c5e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5e7:	0f 84 67 01 00 00    	je     c001c754 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c5ed:	83 ec 0c             	sub    esp,0xc
c001c5f0:	68 73 a9 03 c0       	push   0xc003a973
c001c5f5:	e8 f0 08 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c5fa:	83 c4 10             	add    esp,0x10
c001c5fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c601:	3c 01                	cmp    al,0x1
c001c603:	75 17                	jne    c001c61c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c605:	83 ec 0c             	sub    esp,0xc
c001c608:	b3 13                	mov    bl,0x13
c001c60a:	68 7f a9 03 c0       	push   0xc003a97f
c001c60f:	e8 d6 08 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c614:	83 c4 10             	add    esp,0x10
c001c617:	e9 25 01 00 00       	jmp    c001c741 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c61c:	3c 02                	cmp    al,0x2
c001c61e:	0f 85 ef 00 00 00    	jne    c001c713 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c624:	d1 e6                	shl    esi,1
c001c626:	09 ee                	or     esi,ebp
c001c628:	52                   	push   edx
c001c629:	89 f0                	mov    eax,esi
c001c62b:	6a 01                	push   0x1
c001c62d:	0f b6 f0             	movzx  esi,al
c001c630:	c1 e6 06             	shl    esi,0x6
c001c633:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c63b:	50                   	push   eax
c001c63c:	57                   	push   edi
c001c63d:	e8 30 f6 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c642:	83 c4 10             	add    esp,0x10
c001c645:	89 c6                	mov    esi,eax
c001c647:	a8 01                	test   al,0x1
c001c649:	74 12                	je     c001c65d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c64b:	83 ec 0c             	sub    esp,0xc
c001c64e:	b3 07                	mov    bl,0x7
c001c650:	68 94 a9 03 c0       	push   0xc003a994
c001c655:	e8 90 08 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c65a:	83 c4 10             	add    esp,0x10
c001c65d:	f7 c6 02 00 00 00    	test   esi,0x2
c001c663:	74 12                	je     c001c677 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c665:	83 ec 0c             	sub    esp,0xc
c001c668:	b3 03                	mov    bl,0x3
c001c66a:	68 b2 a9 03 c0       	push   0xc003a9b2
c001c66f:	e8 76 08 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c674:	83 c4 10             	add    esp,0x10
c001c677:	f7 c6 04 00 00 00    	test   esi,0x4
c001c67d:	74 12                	je     c001c691 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c67f:	83 ec 0c             	sub    esp,0xc
c001c682:	b3 14                	mov    bl,0x14
c001c684:	68 d2 a9 03 c0       	push   0xc003a9d2
c001c689:	e8 5c 08 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c68e:	83 c4 10             	add    esp,0x10
c001c691:	f7 c6 08 00 00 00    	test   esi,0x8
c001c697:	74 12                	je     c001c6ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c699:	83 ec 0c             	sub    esp,0xc
c001c69c:	b3 03                	mov    bl,0x3
c001c69e:	68 b2 a9 03 c0       	push   0xc003a9b2
c001c6a3:	e8 42 08 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c6a8:	83 c4 10             	add    esp,0x10
c001c6ab:	f7 c6 10 00 00 00    	test   esi,0x10
c001c6b1:	74 12                	je     c001c6c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c6b3:	83 ec 0c             	sub    esp,0xc
c001c6b6:	b3 15                	mov    bl,0x15
c001c6b8:	68 ea a9 03 c0       	push   0xc003a9ea
c001c6bd:	e8 28 08 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c6c2:	83 c4 10             	add    esp,0x10
c001c6c5:	f7 c6 20 00 00 00    	test   esi,0x20
c001c6cb:	74 12                	je     c001c6df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c6cd:	83 ec 0c             	sub    esp,0xc
c001c6d0:	b3 03                	mov    bl,0x3
c001c6d2:	68 b2 a9 03 c0       	push   0xc003a9b2
c001c6d7:	e8 0e 08 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c6dc:	83 c4 10             	add    esp,0x10
c001c6df:	f7 c6 40 00 00 00    	test   esi,0x40
c001c6e5:	74 12                	je     c001c6f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c6e7:	83 ec 0c             	sub    esp,0xc
c001c6ea:	b3 16                	mov    bl,0x16
c001c6ec:	68 04 aa 03 c0       	push   0xc003aa04
c001c6f1:	e8 f4 07 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c6f6:	83 c4 10             	add    esp,0x10
c001c6f9:	89 f0                	mov    eax,esi
c001c6fb:	84 c0                	test   al,al
c001c6fd:	79 42                	jns    c001c741 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6ff:	83 ec 0c             	sub    esp,0xc
c001c702:	b3 0d                	mov    bl,0xd
c001c704:	68 25 aa 03 c0       	push   0xc003aa25
c001c709:	e8 dc 07 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c70e:	83 c4 10             	add    esp,0x10
c001c711:	eb 2e                	jmp    c001c741 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c713:	3c 03                	cmp    al,0x3
c001c715:	75 14                	jne    c001c72b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c717:	83 ec 0c             	sub    esp,0xc
c001c71a:	b3 17                	mov    bl,0x17
c001c71c:	68 39 aa 03 c0       	push   0xc003aa39
c001c721:	e8 c4 07 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c726:	83 c4 10             	add    esp,0x10
c001c729:	eb 16                	jmp    c001c741 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c72b:	3c 04                	cmp    al,0x4
c001c72d:	75 12                	jne    c001c741 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c72f:	83 ec 0c             	sub    esp,0xc
c001c732:	b3 08                	mov    bl,0x8
c001c734:	68 4f aa 03 c0       	push   0xc003aa4f
c001c739:	e8 ac 07 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c73e:	83 c4 10             	add    esp,0x10
c001c741:	50                   	push   eax
c001c742:	50                   	push   eax
c001c743:	0f b6 c3             	movzx  eax,bl
c001c746:	50                   	push   eax
c001c747:	68 67 aa 03 c0       	push   0xc003aa67
c001c74c:	e8 99 07 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	83 c4 1c             	add    esp,0x1c
c001c757:	88 d8                	mov    al,bl
c001c759:	5b                   	pop    ebx
c001c75a:	5e                   	pop    esi
c001c75b:	5f                   	pop    edi
c001c75c:	5d                   	pop    ebp
c001c75d:	c3                   	ret    

c001c75e <IDE::polling(unsigned char, unsigned int)>:
c001c75e:	57                   	push   edi
c001c75f:	56                   	push   esi
c001c760:	53                   	push   ebx
c001c761:	bb 04 00 00 00       	mov    ebx,0x4
c001c766:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c76a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c76f:	52                   	push   edx
c001c770:	6a 0c                	push   0xc
c001c772:	56                   	push   esi
c001c773:	57                   	push   edi
c001c774:	e8 f9 f4 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c779:	83 c4 10             	add    esp,0x10
c001c77c:	4b                   	dec    ebx
c001c77d:	75 f0                	jne    c001c76f <IDE::polling(unsigned char, unsigned int)+0x11>
c001c77f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c784:	50                   	push   eax
c001c785:	6a 0c                	push   0xc
c001c787:	56                   	push   esi
c001c788:	57                   	push   edi
c001c789:	e8 e4 f4 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c78e:	83 c4 10             	add    esp,0x10
c001c791:	a8 01                	test   al,0x1
c001c793:	74 12                	je     c001c7a7 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c795:	83 ec 0c             	sub    esp,0xc
c001c798:	68 81 aa 03 c0       	push   0xc003aa81
c001c79d:	e8 48 07 ff ff       	call   c000ceea <kprintf(char const*, ...)>
c001c7a2:	83 c4 10             	add    esp,0x10
c001c7a5:	eb 17                	jmp    c001c7be <IDE::polling(unsigned char, unsigned int)+0x60>
c001c7a7:	a8 20                	test   al,0x20
c001c7a9:	75 0f                	jne    c001c7ba <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c7ab:	4b                   	dec    ebx
c001c7ac:	74 10                	je     c001c7be <IDE::polling(unsigned char, unsigned int)+0x60>
c001c7ae:	84 c0                	test   al,al
c001c7b0:	78 d2                	js     c001c784 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c7b2:	a8 08                	test   al,0x8
c001c7b4:	74 ce                	je     c001c784 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c7b6:	31 c0                	xor    eax,eax
c001c7b8:	eb 06                	jmp    c001c7c0 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c7ba:	b0 01                	mov    al,0x1
c001c7bc:	eb 02                	jmp    c001c7c0 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c7be:	b0 02                	mov    al,0x2
c001c7c0:	5b                   	pop    ebx
c001c7c1:	5e                   	pop    esi
c001c7c2:	5f                   	pop    edi
c001c7c3:	c3                   	ret    

c001c7c4 <ATA::close(int, int, void*)>:
c001c7c4:	83 ec 0c             	sub    esp,0xc
c001c7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7d1:	85 c0                	test   eax,eax
c001c7d3:	74 0c                	je     c001c7e1 <ATA::close(int, int, void*)+0x1d>
c001c7d5:	83 ec 0c             	sub    esp,0xc
c001c7d8:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7da:	50                   	push   eax
c001c7db:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7de:	83 c4 10             	add    esp,0x10
c001c7e1:	31 c0                	xor    eax,eax
c001c7e3:	83 c4 0c             	add    esp,0xc
c001c7e6:	c3                   	ret    
c001c7e7:	90                   	nop

c001c7e8 <ATA::powerSaving(PowerSavingLevel)>:
c001c7e8:	c3                   	ret    
c001c7e9:	90                   	nop

c001c7ea <ATA::ATA()>:
c001c7ea:	83 ec 0c             	sub    esp,0xc
c001c7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f1:	83 ec 04             	sub    esp,0x4
c001c7f4:	68 00 02 00 00       	push   0x200
c001c7f9:	68 c4 aa 03 c0       	push   0xc003aac4
c001c7fe:	50                   	push   eax
c001c7ff:	e8 a6 73 ff ff       	call   c0013baa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c804:	83 c4 10             	add    esp,0x10
c001c807:	ba f0 aa 03 c0       	mov    edx,0xc003aaf0
c001c80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c810:	89 10                	mov    DWORD PTR [eax],edx
c001c812:	90                   	nop
c001c813:	83 c4 0c             	add    esp,0xc
c001c816:	c3                   	ret    
c001c817:	90                   	nop

c001c818 <ATA::flush(bool)>:
c001c818:	53                   	push   ebx
c001c819:	83 ec 08             	sub    esp,0x8
c001c81c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c821:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c825:	19 c0                	sbb    eax,eax
c001c827:	83 e0 fd             	and    eax,0xfffffffd
c001c82a:	05 ea 00 00 00       	add    eax,0xea
c001c82f:	50                   	push   eax
c001c830:	6a 07                	push   0x7
c001c832:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c839:	50                   	push   eax
c001c83a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c840:	e8 6d f3 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c845:	83 c4 0c             	add    esp,0xc
c001c848:	6a 00                	push   0x0
c001c84a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c851:	50                   	push   eax
c001c852:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c858:	e8 01 ff ff ff       	call   c001c75e <IDE::polling(unsigned char, unsigned int)>
c001c85d:	83 c4 18             	add    esp,0x18
c001c860:	5b                   	pop    ebx
c001c861:	c3                   	ret    

c001c862 <ATA::readyForCommand()>:
c001c862:	56                   	push   esi
c001c863:	53                   	push   ebx
c001c864:	31 db                	xor    ebx,ebx
c001c866:	50                   	push   eax
c001c867:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c86b:	50                   	push   eax
c001c86c:	6a 0c                	push   0xc
c001c86e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c875:	50                   	push   eax
c001c876:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c87c:	e8 f1 f3 ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001c881:	83 c4 10             	add    esp,0x10
c001c884:	a8 88                	test   al,0x88
c001c886:	74 23                	je     c001c8ab <ATA::readyForCommand()+0x49>
c001c888:	43                   	inc    ebx
c001c889:	83 fb 63             	cmp    ebx,0x63
c001c88c:	7e dd                	jle    c001c86b <ATA::readyForCommand()+0x9>
c001c88e:	51                   	push   ecx
c001c88f:	51                   	push   ecx
c001c890:	6a 00                	push   0x0
c001c892:	68 40 42 0f 00       	push   0xf4240
c001c897:	e8 a9 21 ff ff       	call   c000ea45 <nanoSleep(unsigned long long)>
c001c89c:	83 c4 10             	add    esp,0x10
c001c89f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c8a5:	75 c4                	jne    c001c86b <ATA::readyForCommand()+0x9>
c001c8a7:	31 c0                	xor    eax,eax
c001c8a9:	eb 02                	jmp    c001c8ad <ATA::readyForCommand()+0x4b>
c001c8ab:	b0 01                	mov    al,0x1
c001c8ad:	5a                   	pop    edx
c001c8ae:	5b                   	pop    ebx
c001c8af:	5e                   	pop    esi
c001c8b0:	c3                   	ret    
c001c8b1:	90                   	nop

c001c8b2 <ATA::access(unsigned long long, int, void*, bool)>:
c001c8b2:	55                   	push   ebp
c001c8b3:	57                   	push   edi
c001c8b4:	56                   	push   esi
c001c8b5:	53                   	push   ebx
c001c8b6:	83 ec 2c             	sub    esp,0x2c
c001c8b9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c8bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c8c1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c8c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8c9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c8cd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c8d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c8d5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c8db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8df:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c8e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8e9:	c1 e0 06             	shl    eax,0x6
c001c8ec:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c8f4:	74 5d                	je     c001c953 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c8f6:	89 fa                	mov    edx,edi
c001c8f8:	89 f0                	mov    eax,esi
c001c8fa:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c8fe:	c1 ea 1c             	shr    edx,0x1c
c001c901:	89 d1                	mov    ecx,edx
c001c903:	09 c1                	or     ecx,eax
c001c905:	74 25                	je     c001c92c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c907:	31 ed                	xor    ebp,ebp
c001c909:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c910:	89 fa                	mov    edx,edi
c001c912:	89 f0                	mov    eax,esi
c001c914:	0f ad d0             	shrd   eax,edx,cl
c001c917:	d3 ea                	shr    edx,cl
c001c919:	f6 c1 20             	test   cl,0x20
c001c91c:	74 02                	je     c001c920 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c91e:	89 d0                	mov    eax,edx
c001c920:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c924:	45                   	inc    ebp
c001c925:	83 fd 06             	cmp    ebp,0x6
c001c928:	75 df                	jne    c001c909 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c92a:	eb 76                	jmp    c001c9a2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c92c:	89 f0                	mov    eax,esi
c001c92e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c933:	89 fa                	mov    edx,edi
c001c935:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c93c:	0f ac d0 10          	shrd   eax,edx,0x10
c001c940:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c945:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c949:	c1 ee 18             	shr    esi,0x18
c001c94c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c951:	eb 56                	jmp    c001c9a9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c953:	6a 00                	push   0x0
c001c955:	6a 3f                	push   0x3f
c001c957:	57                   	push   edi
c001c958:	56                   	push   esi
c001c959:	e8 de 1e 00 00       	call   c001e83c <__umoddi3>
c001c95e:	83 c4 10             	add    esp,0x10
c001c961:	40                   	inc    eax
c001c962:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c966:	6a 00                	push   0x0
c001c968:	68 f0 03 00 00       	push   0x3f0
c001c96d:	57                   	push   edi
c001c96e:	56                   	push   esi
c001c96f:	e8 c8 1d 00 00       	call   c001e73c <__udivdi3>
c001c974:	83 c4 10             	add    esp,0x10
c001c977:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c97c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c983:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c988:	6a 00                	push   0x0
c001c98a:	6a 3f                	push   0x3f
c001c98c:	57                   	push   edi
c001c98d:	56                   	push   esi
c001c98e:	e8 a9 1d 00 00       	call   c001e73c <__udivdi3>
c001c993:	83 c4 10             	add    esp,0x10
c001c996:	89 c6                	mov    esi,eax
c001c998:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c99d:	83 e6 0f             	and    esi,0xf
c001c9a0:	eb 07                	jmp    c001c9a9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c9a2:	31 f6                	xor    esi,esi
c001c9a4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c9a9:	bf 01 00 00 00       	mov    edi,0x1
c001c9ae:	50                   	push   eax
c001c9af:	6a 00                	push   0x0
c001c9b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9b8:	50                   	push   eax
c001c9b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9bd:	e8 fc f3 ff ff       	call   c001bdbe <IDE::enableIRQs(unsigned char, bool)>
c001c9c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9c5:	e8 98 fe ff ff       	call   c001c862 <ATA::readyForCommand()>
c001c9ca:	83 c4 10             	add    esp,0x10
c001c9cd:	84 c0                	test   al,al
c001c9cf:	0f 84 50 02 00 00    	je     c001cc25 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c9d5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c9db:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c9e1:	c1 e0 04             	shl    eax,0x4
c001c9e4:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c9eb:	09 c6                	or     esi,eax
c001c9ed:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c9f2:	75 05                	jne    c001c9f9 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c9f4:	83 ce a0             	or     esi,0xffffffa0
c001c9f7:	eb 03                	jmp    c001c9fc <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c9f9:	83 ce e0             	or     esi,0xffffffe0
c001c9fc:	89 f0                	mov    eax,esi
c001c9fe:	0f b6 f0             	movzx  esi,al
c001ca01:	56                   	push   esi
c001ca02:	6a 06                	push   0x6
c001ca04:	51                   	push   ecx
c001ca05:	52                   	push   edx
c001ca06:	e8 a7 f1 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	6a 00                	push   0x0
c001ca10:	6a 01                	push   0x1
c001ca12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca19:	50                   	push   eax
c001ca1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca20:	e8 8d f1 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca25:	83 c4 10             	add    esp,0x10
c001ca28:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca2d:	75 6e                	jne    c001ca9d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ca2f:	6a 00                	push   0x0
c001ca31:	6a 08                	push   0x8
c001ca33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca3a:	50                   	push   eax
c001ca3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca41:	e8 6c f1 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca46:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca4b:	50                   	push   eax
c001ca4c:	6a 09                	push   0x9
c001ca4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca55:	50                   	push   eax
c001ca56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca5c:	e8 51 f1 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca61:	83 c4 20             	add    esp,0x20
c001ca64:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca69:	50                   	push   eax
c001ca6a:	6a 0a                	push   0xa
c001ca6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca73:	50                   	push   eax
c001ca74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca7a:	e8 33 f1 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca7f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ca84:	50                   	push   eax
c001ca85:	6a 0b                	push   0xb
c001ca87:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca8e:	50                   	push   eax
c001ca8f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca95:	e8 18 f1 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca9a:	83 c4 20             	add    esp,0x20
c001ca9d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001caa2:	50                   	push   eax
c001caa3:	6a 02                	push   0x2
c001caa5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caac:	50                   	push   eax
c001caad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cab3:	e8 fa f0 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cab8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cabd:	50                   	push   eax
c001cabe:	6a 03                	push   0x3
c001cac0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cac7:	50                   	push   eax
c001cac8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cace:	e8 df f0 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cad3:	83 c4 20             	add    esp,0x20
c001cad6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cadb:	50                   	push   eax
c001cadc:	6a 04                	push   0x4
c001cade:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cae5:	50                   	push   eax
c001cae6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caec:	e8 c1 f0 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caf1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001caf6:	50                   	push   eax
c001caf7:	6a 05                	push   0x5
c001caf9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb00:	50                   	push   eax
c001cb01:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb07:	e8 a6 f0 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb0c:	83 c4 20             	add    esp,0x20
c001cb0f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001cb14:	0f 94 c0             	sete   al
c001cb17:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb1c:	74 09                	je     c001cb27 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cb1e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001cb25:	eb 07                	jmp    c001cb2e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001cb27:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cb2e:	0f b6 c0             	movzx  eax,al
c001cb31:	50                   	push   eax
c001cb32:	6a 07                	push   0x7
c001cb34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb3b:	50                   	push   eax
c001cb3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb42:	e8 6b f0 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb47:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb4b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb4f:	83 c4 10             	add    esp,0x10
c001cb52:	85 f6                	test   esi,esi
c001cb54:	0f 84 ac 00 00 00    	je     c001cc06 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cb5a:	50                   	push   eax
c001cb5b:	6a 01                	push   0x1
c001cb5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb64:	50                   	push   eax
c001cb65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb6b:	e8 ee fb ff ff       	call   c001c75e <IDE::polling(unsigned char, unsigned int)>
c001cb70:	83 c4 10             	add    esp,0x10
c001cb73:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb79:	84 c0                	test   al,al
c001cb7b:	74 20                	je     c001cb9d <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cb7d:	0f b6 f8             	movzx  edi,al
c001cb80:	0f b6 d2             	movzx  edx,dl
c001cb83:	57                   	push   edi
c001cb84:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb8b:	50                   	push   eax
c001cb8c:	52                   	push   edx
c001cb8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb93:	e8 30 fa ff ff       	call   c001c5c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb98:	e9 85 00 00 00       	jmp    c001cc22 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cb9d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cba2:	74 41                	je     c001cbe5 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cba4:	31 c9                	xor    ecx,ecx
c001cba6:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cbaa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cbae:	50                   	push   eax
c001cbaf:	50                   	push   eax
c001cbb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbb7:	50                   	push   eax
c001cbb8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbbe:	e8 dd ef ff ff       	call   c001bba0 <IDE::getBase(unsigned char)>
c001cbc3:	89 c2                	mov    edx,eax
c001cbc5:	89 e8                	mov    eax,ebp
c001cbc7:	66 ef                	out    dx,ax
c001cbc9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cbcd:	83 c4 10             	add    esp,0x10
c001cbd0:	41                   	inc    ecx
c001cbd1:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cbd7:	75 cd                	jne    c001cba6 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cbd9:	4e                   	dec    esi
c001cbda:	81 c7 00 02 00 00    	add    edi,0x200
c001cbe0:	e9 6d ff ff ff       	jmp    c001cb52 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cbe5:	0f b6 d2             	movzx  edx,dl
c001cbe8:	51                   	push   ecx
c001cbe9:	51                   	push   ecx
c001cbea:	52                   	push   edx
c001cbeb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbf1:	e8 aa ef ff ff       	call   c001bba0 <IDE::getBase(unsigned char)>
c001cbf6:	b9 00 01 00 00       	mov    ecx,0x100
c001cbfb:	89 c2                	mov    edx,eax
c001cbfd:	fc                   	cld    
c001cbfe:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cc01:	83 c4 10             	add    esp,0x10
c001cc04:	eb d3                	jmp    c001cbd9 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cc06:	31 ff                	xor    edi,edi
c001cc08:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc0d:	74 16                	je     c001cc25 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cc0f:	50                   	push   eax
c001cc10:	50                   	push   eax
c001cc11:	31 c0                	xor    eax,eax
c001cc13:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cc18:	0f 94 c0             	sete   al
c001cc1b:	50                   	push   eax
c001cc1c:	53                   	push   ebx
c001cc1d:	e8 f6 fb ff ff       	call   c001c818 <ATA::flush(bool)>
c001cc22:	83 c4 10             	add    esp,0x10
c001cc25:	83 c4 2c             	add    esp,0x2c
c001cc28:	89 f8                	mov    eax,edi
c001cc2a:	5b                   	pop    ebx
c001cc2b:	5e                   	pop    esi
c001cc2c:	5f                   	pop    edi
c001cc2d:	5d                   	pop    ebp
c001cc2e:	c3                   	ret    
c001cc2f:	90                   	nop

c001cc30 <ATA::read(unsigned long long, int, void*)>:
c001cc30:	57                   	push   edi
c001cc31:	b8 04 00 00 00       	mov    eax,0x4
c001cc36:	56                   	push   esi
c001cc37:	53                   	push   ebx
c001cc38:	83 ec 10             	sub    esp,0x10
c001cc3b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc3f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc43:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc46:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc4a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc4e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc54:	77 3b                	ja     c001cc91 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc56:	b8 06 00 00 00       	mov    eax,0x6
c001cc5b:	85 d2                	test   edx,edx
c001cc5d:	74 32                	je     c001cc91 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc5f:	50                   	push   eax
c001cc60:	50                   	push   eax
c001cc61:	6a 00                	push   0x0
c001cc63:	52                   	push   edx
c001cc64:	53                   	push   ebx
c001cc65:	57                   	push   edi
c001cc66:	56                   	push   esi
c001cc67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc6b:	e8 42 fc ff ff       	call   c001c8b2 <ATA::access(unsigned long long, int, void*, bool)>
c001cc70:	83 c4 20             	add    esp,0x20
c001cc73:	85 c0                	test   eax,eax
c001cc75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc79:	75 11                	jne    c001cc8c <ATA::read(unsigned long long, int, void*)+0x5c>
c001cc7b:	01 1d 88 d1 03 c0    	add    DWORD PTR ds:0xc003d188,ebx
c001cc81:	e8 92 36 ff ff       	call   c0010318 <VgaText::updateDiskUsage()>
c001cc86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc8a:	eb 05                	jmp    c001cc91 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc8c:	b8 01 00 00 00       	mov    eax,0x1
c001cc91:	83 c4 10             	add    esp,0x10
c001cc94:	5b                   	pop    ebx
c001cc95:	5e                   	pop    esi
c001cc96:	5f                   	pop    edi
c001cc97:	c3                   	ret    

c001cc98 <ATA::write(unsigned long long, int, void*)>:
c001cc98:	57                   	push   edi
c001cc99:	b8 04 00 00 00       	mov    eax,0x4
c001cc9e:	56                   	push   esi
c001cc9f:	53                   	push   ebx
c001cca0:	83 ec 10             	sub    esp,0x10
c001cca3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cca7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ccab:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001ccae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ccb2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccb6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001ccbc:	77 3b                	ja     c001ccf9 <ATA::write(unsigned long long, int, void*)+0x61>
c001ccbe:	b8 06 00 00 00       	mov    eax,0x6
c001ccc3:	85 d2                	test   edx,edx
c001ccc5:	74 32                	je     c001ccf9 <ATA::write(unsigned long long, int, void*)+0x61>
c001ccc7:	50                   	push   eax
c001ccc8:	50                   	push   eax
c001ccc9:	6a 01                	push   0x1
c001cccb:	52                   	push   edx
c001cccc:	53                   	push   ebx
c001cccd:	57                   	push   edi
c001ccce:	56                   	push   esi
c001cccf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccd3:	e8 da fb ff ff       	call   c001c8b2 <ATA::access(unsigned long long, int, void*, bool)>
c001ccd8:	83 c4 20             	add    esp,0x20
c001ccdb:	85 c0                	test   eax,eax
c001ccdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cce1:	75 11                	jne    c001ccf4 <ATA::write(unsigned long long, int, void*)+0x5c>
c001cce3:	01 1d 84 d1 03 c0    	add    DWORD PTR ds:0xc003d184,ebx
c001cce9:	e8 2a 36 ff ff       	call   c0010318 <VgaText::updateDiskUsage()>
c001ccee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccf2:	eb 05                	jmp    c001ccf9 <ATA::write(unsigned long long, int, void*)+0x61>
c001ccf4:	b8 01 00 00 00       	mov    eax,0x1
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	5b                   	pop    ebx
c001ccfd:	5e                   	pop    esi
c001ccfe:	5f                   	pop    edi
c001ccff:	c3                   	ret    

c001cd00 <ATA::detectCHS()>:
c001cd00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd04:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cd0a:	c1 e0 06             	shl    eax,0x6
c001cd0d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cd13:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cd1d:	c7 44 24 04 d3 aa 03 c0 	mov    DWORD PTR [esp+0x4],0xc003aad3
c001cd25:	e9 de 02 ff ff       	jmp    c000d008 <panic(char const*)>

c001cd2a <ATA::open(int, int, void*)>:
c001cd2a:	53                   	push   ebx
c001cd2b:	83 ec 08             	sub    esp,0x8
c001cd2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd3a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cd40:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd46:	c1 e0 06             	shl    eax,0x6
c001cd49:	01 d0                	add    eax,edx
c001cd4b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cd52:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cd58:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cd5f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cd69:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cd6f:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cd76:	75 0c                	jne    c001cd84 <ATA::open(int, int, void*)+0x5a>
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	53                   	push   ebx
c001cd7c:	e8 7f ff ff ff       	call   c001cd00 <ATA::detectCHS()>
c001cd81:	83 c4 10             	add    esp,0x10
c001cd84:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd8a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd90:	c1 e0 06             	shl    eax,0x6
c001cd93:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cd9a:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cda4:	d1 e8                	shr    eax,1
c001cda6:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cdac:	6a 04                	push   0x4
c001cdae:	6a 0c                	push   0xc
c001cdb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdb7:	50                   	push   eax
c001cdb8:	52                   	push   edx
c001cdb9:	e8 f4 ed ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdbe:	90                   	nop
c001cdbf:	90                   	nop
c001cdc0:	6a 00                	push   0x0
c001cdc2:	6a 0c                	push   0xc
c001cdc4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdcb:	50                   	push   eax
c001cdcc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdd2:	e8 db ed ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdd7:	83 c4 14             	add    esp,0x14
c001cdda:	53                   	push   ebx
c001cddb:	e8 32 6e ff ff       	call   c0013c12 <PhysicalDisk::startCache()>
c001cde0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cde3:	e8 82 86 ff ff       	call   c001546a <createPartitionsForDisk(PhysicalDisk*)>
c001cde8:	31 c0                	xor    eax,eax
c001cdea:	83 c4 18             	add    esp,0x18
c001cded:	5b                   	pop    ebx
c001cdee:	c3                   	ret    
c001cdef:	90                   	nop

c001cdf0 <ATAPI::write(unsigned long long, int, void*)>:
c001cdf0:	b8 03 00 00 00       	mov    eax,0x3
c001cdf5:	c3                   	ret    

c001cdf6 <ATAPI::close(int, int, void*)>:
c001cdf6:	83 ec 0c             	sub    esp,0xc
c001cdf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ce03:	85 c0                	test   eax,eax
c001ce05:	74 0c                	je     c001ce13 <ATAPI::close(int, int, void*)+0x1d>
c001ce07:	83 ec 0c             	sub    esp,0xc
c001ce0a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ce0c:	50                   	push   eax
c001ce0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ce10:	83 c4 10             	add    esp,0x10
c001ce13:	31 c0                	xor    eax,eax
c001ce15:	83 c4 0c             	add    esp,0xc
c001ce18:	c3                   	ret    
c001ce19:	90                   	nop

c001ce1a <ATAPI::ATAPI()>:
c001ce1a:	83 ec 0c             	sub    esp,0xc
c001ce1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce21:	83 ec 04             	sub    esp,0x4
c001ce24:	68 00 08 00 00       	push   0x800
c001ce29:	68 1c ab 03 c0       	push   0xc003ab1c
c001ce2e:	50                   	push   eax
c001ce2f:	e8 76 6d ff ff       	call   c0013baa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ce34:	83 c4 10             	add    esp,0x10
c001ce37:	ba 5c ab 03 c0       	mov    edx,0xc003ab5c
c001ce3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce40:	89 10                	mov    DWORD PTR [eax],edx
c001ce42:	90                   	nop
c001ce43:	83 c4 0c             	add    esp,0xc
c001ce46:	c3                   	ret    
c001ce47:	90                   	nop

c001ce48 <ATAPI::readyForCommand()>:
c001ce48:	56                   	push   esi
c001ce49:	53                   	push   ebx
c001ce4a:	31 db                	xor    ebx,ebx
c001ce4c:	50                   	push   eax
c001ce4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce51:	50                   	push   eax
c001ce52:	6a 0c                	push   0xc
c001ce54:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ce5b:	50                   	push   eax
c001ce5c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ce62:	e8 0b ee ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	a8 88                	test   al,0x88
c001ce6c:	74 23                	je     c001ce91 <ATAPI::readyForCommand()+0x49>
c001ce6e:	43                   	inc    ebx
c001ce6f:	83 fb 63             	cmp    ebx,0x63
c001ce72:	7e dd                	jle    c001ce51 <ATAPI::readyForCommand()+0x9>
c001ce74:	51                   	push   ecx
c001ce75:	51                   	push   ecx
c001ce76:	6a 00                	push   0x0
c001ce78:	68 40 42 0f 00       	push   0xf4240
c001ce7d:	e8 c3 1b ff ff       	call   c000ea45 <nanoSleep(unsigned long long)>
c001ce82:	83 c4 10             	add    esp,0x10
c001ce85:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ce8b:	75 c4                	jne    c001ce51 <ATAPI::readyForCommand()+0x9>
c001ce8d:	31 c0                	xor    eax,eax
c001ce8f:	eb 02                	jmp    c001ce93 <ATAPI::readyForCommand()+0x4b>
c001ce91:	b0 01                	mov    al,0x1
c001ce93:	5a                   	pop    edx
c001ce94:	5b                   	pop    ebx
c001ce95:	5e                   	pop    esi
c001ce96:	c3                   	ret    
c001ce97:	90                   	nop

c001ce98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ce98:	55                   	push   ebp
c001ce99:	57                   	push   edi
c001ce9a:	56                   	push   esi
c001ce9b:	53                   	push   ebx
c001ce9c:	83 ec 20             	sub    esp,0x20
c001ce9f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cea3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cea7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ceab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ceaf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ceb3:	6a 01                	push   0x1
c001ceb5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cebc:	50                   	push   eax
c001cebd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cec3:	e8 f6 ee ff ff       	call   c001bdbe <IDE::enableIRQs(unsigned char, bool)>
c001cec8:	5e                   	pop    esi
c001cec9:	58                   	pop    eax
c001ceca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ced1:	50                   	push   eax
c001ced2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ced8:	e8 af ec ff ff       	call   c001bb8c <IDE::prepareInterrupt(unsigned char)>
c001cedd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cee0:	e8 63 ff ff ff       	call   c001ce48 <ATAPI::readyForCommand()>
c001cee5:	83 c4 10             	add    esp,0x10
c001cee8:	84 c0                	test   al,al
c001ceea:	75 0a                	jne    c001cef6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ceec:	bb 01 00 00 00       	mov    ebx,0x1
c001cef1:	e9 57 02 00 00       	jmp    c001d14d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cef6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cefc:	c1 e0 04             	shl    eax,0x4
c001ceff:	0f b6 c0             	movzx  eax,al
c001cf02:	50                   	push   eax
c001cf03:	6a 06                	push   0x6
c001cf05:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf0c:	50                   	push   eax
c001cf0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf13:	e8 9a ec ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf18:	6a 00                	push   0x0
c001cf1a:	6a 01                	push   0x1
c001cf1c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf23:	50                   	push   eax
c001cf24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf2a:	e8 83 ec ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf2f:	83 c4 20             	add    esp,0x20
c001cf32:	0f b6 c3             	movzx  eax,bl
c001cf35:	0f b6 df             	movzx  ebx,bh
c001cf38:	50                   	push   eax
c001cf39:	6a 04                	push   0x4
c001cf3b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf42:	50                   	push   eax
c001cf43:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf49:	e8 64 ec ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf4e:	53                   	push   ebx
c001cf4f:	6a 05                	push   0x5
c001cf51:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf58:	50                   	push   eax
c001cf59:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf5f:	e8 4e ec ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf64:	83 c4 20             	add    esp,0x20
c001cf67:	68 a0 00 00 00       	push   0xa0
c001cf6c:	6a 07                	push   0x7
c001cf6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf75:	50                   	push   eax
c001cf76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf7c:	e8 31 ec ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf81:	83 c4 0c             	add    esp,0xc
c001cf84:	6a 01                	push   0x1
c001cf86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf8d:	50                   	push   eax
c001cf8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf94:	e8 c5 f7 ff ff       	call   c001c75e <IDE::polling(unsigned char, unsigned int)>
c001cf99:	83 c4 10             	add    esp,0x10
c001cf9c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cfa2:	84 c0                	test   al,al
c001cfa4:	74 23                	je     c001cfc9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cfa6:	0f b6 d8             	movzx  ebx,al
c001cfa9:	0f b6 d2             	movzx  edx,dl
c001cfac:	53                   	push   ebx
c001cfad:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cfb4:	50                   	push   eax
c001cfb5:	52                   	push   edx
c001cfb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfbc:	e8 07 f6 ff ff       	call   c001c5c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cfc1:	83 c4 10             	add    esp,0x10
c001cfc4:	e9 84 01 00 00       	jmp    c001d14d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cfc9:	0f b6 d2             	movzx  edx,dl
c001cfcc:	53                   	push   ebx
c001cfcd:	53                   	push   ebx
c001cfce:	52                   	push   edx
c001cfcf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfd5:	e8 c6 eb ff ff       	call   c001bba0 <IDE::getBase(unsigned char)>
c001cfda:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cfde:	b9 06 00 00 00       	mov    ecx,0x6
c001cfe3:	89 c2                	mov    edx,eax
c001cfe5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cfe8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cfec:	83 c4 10             	add    esp,0x10
c001cfef:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cff5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cffc:	85 db                	test   ebx,ebx
c001cffe:	0f 84 ec 00 00 00    	je     c001d0f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d004:	51                   	push   ecx
c001d005:	51                   	push   ecx
c001d006:	52                   	push   edx
c001d007:	50                   	push   eax
c001d008:	e8 13 ed ff ff       	call   c001bd20 <IDE::waitInterrupt(unsigned char)>
c001d00d:	83 c4 10             	add    esp,0x10
c001d010:	84 c0                	test   al,al
c001d012:	0f 84 d4 fe ff ff    	je     c001ceec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d018:	56                   	push   esi
c001d019:	56                   	push   esi
c001d01a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d021:	50                   	push   eax
c001d022:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d028:	e8 5f eb ff ff       	call   c001bb8c <IDE::prepareInterrupt(unsigned char)>
c001d02d:	83 c4 0c             	add    esp,0xc
c001d030:	6a 04                	push   0x4
c001d032:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d039:	50                   	push   eax
c001d03a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d040:	e8 2d ec ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001d045:	83 c4 0c             	add    esp,0xc
c001d048:	89 c6                	mov    esi,eax
c001d04a:	6a 05                	push   0x5
c001d04c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d053:	50                   	push   eax
c001d054:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d05a:	e8 13 ec ff ff       	call   c001bc72 <IDE::read(unsigned char, unsigned char)>
c001d05f:	89 f1                	mov    ecx,esi
c001d061:	0f b6 c0             	movzx  eax,al
c001d064:	0f b6 f1             	movzx  esi,cl
c001d067:	c1 e0 08             	shl    eax,0x8
c001d06a:	09 c6                	or     esi,eax
c001d06c:	d1 fe                	sar    esi,1
c001d06e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d072:	83 c4 10             	add    esp,0x10
c001d075:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d07a:	74 41                	je     c001d0bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d07c:	31 c9                	xor    ecx,ecx
c001d07e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d084:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d08b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d08f:	75 0a                	jne    c001d09b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d091:	01 c9                	add    ecx,ecx
c001d093:	01 cd                	add    ebp,ecx
c001d095:	4b                   	dec    ebx
c001d096:	e9 54 ff ff ff       	jmp    c001cfef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d09b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d0a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d0a4:	51                   	push   ecx
c001d0a5:	51                   	push   ecx
c001d0a6:	52                   	push   edx
c001d0a7:	50                   	push   eax
c001d0a8:	e8 f3 ea ff ff       	call   c001bba0 <IDE::getBase(unsigned char)>
c001d0ad:	89 c2                	mov    edx,eax
c001d0af:	89 f0                	mov    eax,esi
c001d0b1:	66 ef                	out    dx,ax
c001d0b3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d0b7:	83 c4 10             	add    esp,0x10
c001d0ba:	41                   	inc    ecx
c001d0bb:	eb c1                	jmp    c001d07e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d0bd:	31 f6                	xor    esi,esi
c001d0bf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d0c5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d0cc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d0d0:	75 06                	jne    c001d0d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d0d2:	01 f6                	add    esi,esi
c001d0d4:	01 f5                	add    ebp,esi
c001d0d6:	eb bd                	jmp    c001d095 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d0d8:	51                   	push   ecx
c001d0d9:	51                   	push   ecx
c001d0da:	52                   	push   edx
c001d0db:	50                   	push   eax
c001d0dc:	e8 bf ea ff ff       	call   c001bba0 <IDE::getBase(unsigned char)>
c001d0e1:	89 c2                	mov    edx,eax
c001d0e3:	66 ed                	in     ax,dx
c001d0e5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d0ea:	83 c4 10             	add    esp,0x10
c001d0ed:	46                   	inc    esi
c001d0ee:	eb cf                	jmp    c001d0bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d0f0:	51                   	push   ecx
c001d0f1:	51                   	push   ecx
c001d0f2:	52                   	push   edx
c001d0f3:	50                   	push   eax
c001d0f4:	e8 27 ec ff ff       	call   c001bd20 <IDE::waitInterrupt(unsigned char)>
c001d0f9:	83 c4 10             	add    esp,0x10
c001d0fc:	84 c0                	test   al,al
c001d0fe:	0f 84 e8 fd ff ff    	je     c001ceec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d104:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d109:	52                   	push   edx
c001d10a:	52                   	push   edx
c001d10b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d112:	50                   	push   eax
c001d113:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d119:	e8 6e ea ff ff       	call   c001bb8c <IDE::prepareInterrupt(unsigned char)>
c001d11e:	83 c4 10             	add    esp,0x10
c001d121:	50                   	push   eax
c001d122:	50                   	push   eax
c001d123:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d12a:	50                   	push   eax
c001d12b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d131:	e8 6a ea ff ff       	call   c001bba0 <IDE::getBase(unsigned char)>
c001d136:	8d 50 07             	lea    edx,[eax+0x7]
c001d139:	ec                   	in     al,dx
c001d13a:	83 c4 10             	add    esp,0x10
c001d13d:	a8 88                	test   al,0x88
c001d13f:	74 0a                	je     c001d14b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d141:	4b                   	dec    ebx
c001d142:	75 dd                	jne    c001d121 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d144:	bb 02 00 00 00       	mov    ebx,0x2
c001d149:	eb 02                	jmp    c001d14d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d14b:	31 db                	xor    ebx,ebx
c001d14d:	83 c4 1c             	add    esp,0x1c
c001d150:	89 d8                	mov    eax,ebx
c001d152:	5b                   	pop    ebx
c001d153:	5e                   	pop    esi
c001d154:	5f                   	pop    edi
c001d155:	5d                   	pop    ebp
c001d156:	c3                   	ret    
c001d157:	90                   	nop

c001d158 <ATAPI::diskRemoved()>:
c001d158:	83 ec 18             	sub    esp,0x18
c001d15b:	68 27 ab 03 c0       	push   0xc003ab27
c001d160:	e8 85 fd fe ff       	call   c000ceea <kprintf(char const*, ...)>
c001d165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d169:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d170:	83 c4 1c             	add    esp,0x1c
c001d173:	c3                   	ret    

c001d174 <ATAPI::eject()>:
c001d174:	57                   	push   edi
c001d175:	b9 03 00 00 00       	mov    ecx,0x3
c001d17a:	53                   	push   ebx
c001d17b:	83 ec 14             	sub    esp,0x14
c001d17e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d182:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d186:	fc                   	cld    
c001d187:	31 c0                	xor    eax,eax
c001d189:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d18b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d190:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d195:	50                   	push   eax
c001d196:	50                   	push   eax
c001d197:	6a 00                	push   0x0
c001d199:	6a 00                	push   0x0
c001d19b:	6a 00                	push   0x0
c001d19d:	6a 02                	push   0x2
c001d19f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d1a3:	50                   	push   eax
c001d1a4:	53                   	push   ebx
c001d1a5:	e8 ee fc ff ff       	call   c001ce98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d1aa:	83 c4 14             	add    esp,0x14
c001d1ad:	53                   	push   ebx
c001d1ae:	e8 a5 ff ff ff       	call   c001d158 <ATAPI::diskRemoved()>
c001d1b3:	83 c4 24             	add    esp,0x24
c001d1b6:	5b                   	pop    ebx
c001d1b7:	5f                   	pop    edi
c001d1b8:	c3                   	ret    
c001d1b9:	90                   	nop

c001d1ba <ATAPI::diskInserted()>:
c001d1ba:	53                   	push   ebx
c001d1bb:	83 ec 14             	sub    esp,0x14
c001d1be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d1c2:	68 3d ab 03 c0       	push   0xc003ab3d
c001d1c7:	e8 1e fd fe ff       	call   c000ceea <kprintf(char const*, ...)>
c001d1cc:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d1d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1d6:	e8 37 6a ff ff       	call   c0013c12 <PhysicalDisk::startCache()>
c001d1db:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d1df:	83 c4 18             	add    esp,0x18
c001d1e2:	5b                   	pop    ebx
c001d1e3:	e9 82 82 ff ff       	jmp    c001546a <createPartitionsForDisk(PhysicalDisk*)>

c001d1e8 <ATAPI::detectMedia()>:
c001d1e8:	56                   	push   esi
c001d1e9:	53                   	push   ebx
c001d1ea:	83 ec 28             	sub    esp,0x28
c001d1ed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d1f1:	6a 0c                	push   0xc
c001d1f3:	6a 00                	push   0x0
c001d1f5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d1f9:	56                   	push   esi
c001d1fa:	e8 d9 34 fe ff       	call   c00006d8 <memset>
c001d1ff:	58                   	pop    eax
c001d200:	5a                   	pop    edx
c001d201:	6a 00                	push   0x0
c001d203:	6a 00                	push   0x0
c001d205:	6a 00                	push   0x0
c001d207:	6a 00                	push   0x0
c001d209:	56                   	push   esi
c001d20a:	53                   	push   ebx
c001d20b:	e8 88 fc ff ff       	call   c001ce98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d210:	83 c4 1c             	add    esp,0x1c
c001d213:	6a 0c                	push   0xc
c001d215:	6a 00                	push   0x0
c001d217:	56                   	push   esi
c001d218:	e8 bb 34 fe ff       	call   c00006d8 <memset>
c001d21d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d222:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d227:	59                   	pop    ecx
c001d228:	58                   	pop    eax
c001d229:	6a 01                	push   0x1
c001d22b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d22f:	50                   	push   eax
c001d230:	6a 00                	push   0x0
c001d232:	6a 12                	push   0x12
c001d234:	56                   	push   esi
c001d235:	53                   	push   ebx
c001d236:	e8 5d fc ff ff       	call   c001ce98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d23b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d23f:	83 c4 20             	add    esp,0x20
c001d242:	83 e0 7f             	and    eax,0x7f
c001d245:	3c 70                	cmp    al,0x70
c001d247:	74 15                	je     c001d25e <ATAPI::detectMedia()+0x76>
c001d249:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d250:	75 0c                	jne    c001d25e <ATAPI::detectMedia()+0x76>
c001d252:	83 ec 0c             	sub    esp,0xc
c001d255:	53                   	push   ebx
c001d256:	e8 5f ff ff ff       	call   c001d1ba <ATAPI::diskInserted()>
c001d25b:	83 c4 10             	add    esp,0x10
c001d25e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d262:	83 e0 0f             	and    eax,0xf
c001d265:	3c 02                	cmp    al,0x2
c001d267:	75 1b                	jne    c001d284 <ATAPI::detectMedia()+0x9c>
c001d269:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d26e:	75 2d                	jne    c001d29d <ATAPI::detectMedia()+0xb5>
c001d270:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d277:	74 24                	je     c001d29d <ATAPI::detectMedia()+0xb5>
c001d279:	83 ec 0c             	sub    esp,0xc
c001d27c:	53                   	push   ebx
c001d27d:	e8 d6 fe ff ff       	call   c001d158 <ATAPI::diskRemoved()>
c001d282:	eb 16                	jmp    c001d29a <ATAPI::detectMedia()+0xb2>
c001d284:	84 c0                	test   al,al
c001d286:	75 15                	jne    c001d29d <ATAPI::detectMedia()+0xb5>
c001d288:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d28f:	75 0c                	jne    c001d29d <ATAPI::detectMedia()+0xb5>
c001d291:	83 ec 0c             	sub    esp,0xc
c001d294:	53                   	push   ebx
c001d295:	e8 20 ff ff ff       	call   c001d1ba <ATAPI::diskInserted()>
c001d29a:	83 c4 10             	add    esp,0x10
c001d29d:	83 c4 24             	add    esp,0x24
c001d2a0:	5b                   	pop    ebx
c001d2a1:	5e                   	pop    esi
c001d2a2:	c3                   	ret    
c001d2a3:	90                   	nop

c001d2a4 <ATAPI::open(int, int, void*)>:
c001d2a4:	53                   	push   ebx
c001d2a5:	83 ec 08             	sub    esp,0x8
c001d2a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d2b4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d2ba:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d2c0:	c1 e0 06             	shl    eax,0x6
c001d2c3:	01 d0                	add    eax,edx
c001d2c5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d2cc:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d2d2:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d2d9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d2e3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d2e9:	6a 04                	push   0x4
c001d2eb:	6a 0c                	push   0xc
c001d2ed:	51                   	push   ecx
c001d2ee:	52                   	push   edx
c001d2ef:	e8 be e8 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2f4:	90                   	nop
c001d2f5:	90                   	nop
c001d2f6:	6a 00                	push   0x0
c001d2f8:	6a 0c                	push   0xc
c001d2fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d301:	50                   	push   eax
c001d302:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d308:	e8 a5 e8 ff ff       	call   c001bbb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d30d:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d314:	83 c4 14             	add    esp,0x14
c001d317:	53                   	push   ebx
c001d318:	e8 cb fe ff ff       	call   c001d1e8 <ATAPI::detectMedia()>
c001d31d:	31 c0                	xor    eax,eax
c001d31f:	83 c4 18             	add    esp,0x18
c001d322:	5b                   	pop    ebx
c001d323:	c3                   	ret    

c001d324 <ATAPI::read(unsigned long long, int, void*)>:
c001d324:	55                   	push   ebp
c001d325:	57                   	push   edi
c001d326:	56                   	push   esi
c001d327:	53                   	push   ebx
c001d328:	83 ec 1c             	sub    esp,0x1c
c001d32b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d32f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d333:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d337:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d33e:	74 41                	je     c001d381 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d340:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d344:	b9 03 00 00 00       	mov    ecx,0x3
c001d349:	fc                   	cld    
c001d34a:	31 c0                	xor    eax,eax
c001d34c:	86 fb                	xchg   bl,bh
c001d34e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d350:	c1 c3 10             	rol    ebx,0x10
c001d353:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d358:	89 e8                	mov    eax,ebp
c001d35a:	86 fb                	xchg   bl,bh
c001d35c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d360:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d364:	50                   	push   eax
c001d365:	50                   	push   eax
c001d366:	55                   	push   ebp
c001d367:	c1 e5 0b             	shl    ebp,0xb
c001d36a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d36e:	6a 00                	push   0x0
c001d370:	55                   	push   ebp
c001d371:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d375:	50                   	push   eax
c001d376:	56                   	push   esi
c001d377:	e8 1c fb ff ff       	call   c001ce98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d37c:	83 c4 20             	add    esp,0x20
c001d37f:	eb 1a                	jmp    c001d39b <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d381:	83 ec 0c             	sub    esp,0xc
c001d384:	56                   	push   esi
c001d385:	e8 5e fe ff ff       	call   c001d1e8 <ATAPI::detectMedia()>
c001d38a:	83 c4 10             	add    esp,0x10
c001d38d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d394:	75 aa                	jne    c001d340 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d396:	b8 02 00 00 00       	mov    eax,0x2
c001d39b:	83 c4 1c             	add    esp,0x1c
c001d39e:	5b                   	pop    ebx
c001d39f:	5e                   	pop    esi
c001d3a0:	5f                   	pop    edi
c001d3a1:	5d                   	pop    ebp
c001d3a2:	c3                   	ret    
c001d3a3:	90                   	nop

c001d3a4 <AVX::open(int, int, void*)>:
c001d3a4:	83 ec 0c             	sub    esp,0xc
c001d3a7:	e8 0c 10 00 00       	call   c001e3b8 <avxInit>
c001d3ac:	b8 00 00 00 00       	mov    eax,0x0
c001d3b1:	83 c4 0c             	add    esp,0xc
c001d3b4:	c3                   	ret    
c001d3b5:	90                   	nop

c001d3b6 <AVX::close(int, int, void*)>:
c001d3b6:	83 ec 0c             	sub    esp,0xc
c001d3b9:	e8 fb 0f 00 00       	call   c001e3b9 <avxClose>
c001d3be:	b8 00 00 00 00       	mov    eax,0x0
c001d3c3:	83 c4 0c             	add    esp,0xc
c001d3c6:	c3                   	ret    
c001d3c7:	90                   	nop

c001d3c8 <AVX::available()>:
c001d3c8:	83 ec 0c             	sub    esp,0xc
c001d3cb:	e8 e0 0f 00 00       	call   c001e3b0 <avxDetect>
c001d3d0:	85 c0                	test   eax,eax
c001d3d2:	0f 95 c0             	setne  al
c001d3d5:	83 c4 0c             	add    esp,0xc
c001d3d8:	c3                   	ret    
c001d3d9:	90                   	nop

c001d3da <AVX::save(void*)>:
c001d3da:	83 ec 0c             	sub    esp,0xc
c001d3dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3e1:	83 ec 0c             	sub    esp,0xc
c001d3e4:	50                   	push   eax
c001d3e5:	e8 cc 0f 00 00       	call   c001e3b6 <avxSave>
c001d3ea:	83 c4 10             	add    esp,0x10
c001d3ed:	90                   	nop
c001d3ee:	83 c4 0c             	add    esp,0xc
c001d3f1:	c3                   	ret    

c001d3f2 <AVX::load(void*)>:
c001d3f2:	83 ec 0c             	sub    esp,0xc
c001d3f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3f9:	83 ec 0c             	sub    esp,0xc
c001d3fc:	50                   	push   eax
c001d3fd:	e8 b5 0f 00 00       	call   c001e3b7 <avxLoad>
c001d402:	83 c4 10             	add    esp,0x10
c001d405:	90                   	nop
c001d406:	83 c4 0c             	add    esp,0xc
c001d409:	c3                   	ret    

c001d40a <AVX::AVX()>:
c001d40a:	83 ec 0c             	sub    esp,0xc
c001d40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d411:	83 ec 08             	sub    esp,0x8
c001d414:	68 88 ab 03 c0       	push   0xc003ab88
c001d419:	50                   	push   eax
c001d41a:	e8 69 68 ff ff       	call   c0013c88 <FPU::FPU(char const*)>
c001d41f:	83 c4 10             	add    esp,0x10
c001d422:	ba 98 ab 03 c0       	mov    edx,0xc003ab98
c001d427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d42b:	89 10                	mov    DWORD PTR [eax],edx
c001d42d:	90                   	nop
c001d42e:	83 c4 0c             	add    esp,0xc
c001d431:	c3                   	ret    

c001d432 <MMX::available()>:
c001d432:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c001d437:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d43d:	83 e0 20             	and    eax,0x20
c001d440:	84 c0                	test   al,al
c001d442:	0f 95 c0             	setne  al
c001d445:	c3                   	ret    

c001d446 <MMX::open(int, int, void*)>:
c001d446:	83 ec 0c             	sub    esp,0xc
c001d449:	e8 de 0f 00 00       	call   c001e42c <x87Init>
c001d44e:	b8 00 00 00 00       	mov    eax,0x0
c001d453:	83 c4 0c             	add    esp,0xc
c001d456:	c3                   	ret    
c001d457:	90                   	nop

c001d458 <MMX::close(int, int, void*)>:
c001d458:	83 ec 0c             	sub    esp,0xc
c001d45b:	e8 e6 0f 00 00       	call   c001e446 <x87Close>
c001d460:	b8 00 00 00 00       	mov    eax,0x0
c001d465:	83 c4 0c             	add    esp,0xc
c001d468:	c3                   	ret    
c001d469:	90                   	nop

c001d46a <MMX::save(void*)>:
c001d46a:	83 ec 0c             	sub    esp,0xc
c001d46d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d471:	83 ec 0c             	sub    esp,0xc
c001d474:	50                   	push   eax
c001d475:	e8 a7 0f 00 00       	call   c001e421 <x87Save>
c001d47a:	83 c4 10             	add    esp,0x10
c001d47d:	90                   	nop
c001d47e:	83 c4 0c             	add    esp,0xc
c001d481:	c3                   	ret    

c001d482 <MMX::load(void*)>:
c001d482:	83 ec 0c             	sub    esp,0xc
c001d485:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d489:	83 ec 0c             	sub    esp,0xc
c001d48c:	50                   	push   eax
c001d48d:	e8 95 0f 00 00       	call   c001e427 <x87Load>
c001d492:	83 c4 10             	add    esp,0x10
c001d495:	90                   	nop
c001d496:	83 c4 0c             	add    esp,0xc
c001d499:	c3                   	ret    

c001d49a <MMX::MMX()>:
c001d49a:	83 ec 0c             	sub    esp,0xc
c001d49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4a1:	83 ec 08             	sub    esp,0x8
c001d4a4:	68 c8 ab 03 c0       	push   0xc003abc8
c001d4a9:	50                   	push   eax
c001d4aa:	e8 d9 67 ff ff       	call   c0013c88 <FPU::FPU(char const*)>
c001d4af:	83 c4 10             	add    esp,0x10
c001d4b2:	ba d8 ab 03 c0       	mov    edx,0xc003abd8
c001d4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4bb:	89 10                	mov    DWORD PTR [eax],edx
c001d4bd:	90                   	nop
c001d4be:	83 c4 0c             	add    esp,0xc
c001d4c1:	c3                   	ret    

c001d4c2 <SSE::open(int, int, void*)>:
c001d4c2:	83 ec 0c             	sub    esp,0xc
c001d4c5:	e8 1d 0f 00 00       	call   c001e3e7 <sseInit>
c001d4ca:	b8 00 00 00 00       	mov    eax,0x0
c001d4cf:	83 c4 0c             	add    esp,0xc
c001d4d2:	c3                   	ret    
c001d4d3:	90                   	nop

c001d4d4 <SSE::close(int, int, void*)>:
c001d4d4:	83 ec 0c             	sub    esp,0xc
c001d4d7:	e8 1b 0f 00 00       	call   c001e3f7 <sseClose>
c001d4dc:	b8 00 00 00 00       	mov    eax,0x0
c001d4e1:	83 c4 0c             	add    esp,0xc
c001d4e4:	c3                   	ret    
c001d4e5:	90                   	nop

c001d4e6 <SSE::available()>:
c001d4e6:	83 ec 1c             	sub    esp,0x1c
c001d4e9:	e8 d2 0e 00 00       	call   c001e3c0 <sseDetect>
c001d4ee:	85 c0                	test   eax,eax
c001d4f0:	0f 95 c0             	setne  al
c001d4f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d4f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d4fb:	83 c4 1c             	add    esp,0x1c
c001d4fe:	c3                   	ret    
c001d4ff:	90                   	nop

c001d500 <SSE::save(void*)>:
c001d500:	83 ec 0c             	sub    esp,0xc
c001d503:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d507:	83 ec 0c             	sub    esp,0xc
c001d50a:	50                   	push   eax
c001d50b:	e8 cb 0e 00 00       	call   c001e3db <sseSave>
c001d510:	83 c4 10             	add    esp,0x10
c001d513:	90                   	nop
c001d514:	83 c4 0c             	add    esp,0xc
c001d517:	c3                   	ret    

c001d518 <SSE::load(void*)>:
c001d518:	83 ec 0c             	sub    esp,0xc
c001d51b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d51f:	83 ec 0c             	sub    esp,0xc
c001d522:	50                   	push   eax
c001d523:	e8 b9 0e 00 00       	call   c001e3e1 <sseLoad>
c001d528:	83 c4 10             	add    esp,0x10
c001d52b:	90                   	nop
c001d52c:	83 c4 0c             	add    esp,0xc
c001d52f:	c3                   	ret    

c001d530 <SSE::SSE()>:
c001d530:	83 ec 0c             	sub    esp,0xc
c001d533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d537:	83 ec 08             	sub    esp,0x8
c001d53a:	68 08 ac 03 c0       	push   0xc003ac08
c001d53f:	50                   	push   eax
c001d540:	e8 43 67 ff ff       	call   c0013c88 <FPU::FPU(char const*)>
c001d545:	83 c4 10             	add    esp,0x10
c001d548:	ba 18 ac 03 c0       	mov    edx,0xc003ac18
c001d54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d551:	89 10                	mov    DWORD PTR [eax],edx
c001d553:	90                   	nop
c001d554:	83 c4 0c             	add    esp,0xc
c001d557:	c3                   	ret    

c001d558 <x87::open(int, int, void*)>:
c001d558:	83 ec 0c             	sub    esp,0xc
c001d55b:	e8 cc 0e 00 00       	call   c001e42c <x87Init>
c001d560:	b8 00 00 00 00       	mov    eax,0x0
c001d565:	83 c4 0c             	add    esp,0xc
c001d568:	c3                   	ret    
c001d569:	90                   	nop

c001d56a <x87::close(int, int, void*)>:
c001d56a:	83 ec 0c             	sub    esp,0xc
c001d56d:	e8 d4 0e 00 00       	call   c001e446 <x87Close>
c001d572:	b8 00 00 00 00       	mov    eax,0x0
c001d577:	83 c4 0c             	add    esp,0xc
c001d57a:	c3                   	ret    
c001d57b:	90                   	nop

c001d57c <x87::available()>:
c001d57c:	83 ec 0c             	sub    esp,0xc
c001d57f:	e8 82 0e 00 00       	call   c001e406 <x87Detect>
c001d584:	85 c0                	test   eax,eax
c001d586:	0f 95 c0             	setne  al
c001d589:	83 c4 0c             	add    esp,0xc
c001d58c:	c3                   	ret    
c001d58d:	90                   	nop

c001d58e <x87::save(void*)>:
c001d58e:	83 ec 0c             	sub    esp,0xc
c001d591:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d595:	83 ec 0c             	sub    esp,0xc
c001d598:	50                   	push   eax
c001d599:	e8 83 0e 00 00       	call   c001e421 <x87Save>
c001d59e:	83 c4 10             	add    esp,0x10
c001d5a1:	90                   	nop
c001d5a2:	83 c4 0c             	add    esp,0xc
c001d5a5:	c3                   	ret    

c001d5a6 <x87::load(void*)>:
c001d5a6:	83 ec 0c             	sub    esp,0xc
c001d5a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5ad:	83 ec 0c             	sub    esp,0xc
c001d5b0:	50                   	push   eax
c001d5b1:	e8 71 0e 00 00       	call   c001e427 <x87Load>
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	90                   	nop
c001d5ba:	83 c4 0c             	add    esp,0xc
c001d5bd:	c3                   	ret    

c001d5be <x87::x87()>:
c001d5be:	83 ec 0c             	sub    esp,0xc
c001d5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c5:	83 ec 08             	sub    esp,0x8
c001d5c8:	68 48 ac 03 c0       	push   0xc003ac48
c001d5cd:	50                   	push   eax
c001d5ce:	e8 b5 66 ff ff       	call   c0013c88 <FPU::FPU(char const*)>
c001d5d3:	83 c4 10             	add    esp,0x10
c001d5d6:	ba 58 ac 03 c0       	mov    edx,0xc003ac58
c001d5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5df:	89 10                	mov    DWORD PTR [eax],edx
c001d5e1:	90                   	nop
c001d5e2:	83 c4 0c             	add    esp,0xc
c001d5e5:	c3                   	ret    

c001d5e6 <APIC::disable()>:
c001d5e6:	90                   	nop
c001d5e7:	c3                   	ret    

c001d5e8 <APIC::close(int, int, void*)>:
c001d5e8:	55                   	push   ebp
c001d5e9:	89 e5                	mov    ebp,esp
c001d5eb:	83 ec 08             	sub    esp,0x8
c001d5ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5f3:	83 c0 3c             	add    eax,0x3c
c001d5f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5f8:	83 ec 0c             	sub    esp,0xc
c001d5fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5fe:	ff d0                	call   eax
c001d600:	83 c4 10             	add    esp,0x10
c001d603:	b8 00 00 00 00       	mov    eax,0x0
c001d608:	c9                   	leave  
c001d609:	c3                   	ret    

c001d60a <IOAPIC::close(int, int, void*)>:
c001d60a:	b8 00 00 00 00       	mov    eax,0x0
c001d60f:	c3                   	ret    

c001d610 <APIC::io_wait()>:
c001d610:	eb 00                	jmp    c001d612 <APIC::io_wait()+0x2>
c001d612:	eb 00                	jmp    c001d614 <APIC::io_wait()+0x4>
c001d614:	90                   	nop
c001d615:	c3                   	ret    

c001d616 <APIC::getBase()>:
c001d616:	55                   	push   ebp
c001d617:	89 e5                	mov    ebp,esp
c001d619:	83 ec 18             	sub    esp,0x18
c001d61c:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c001d621:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d627:	83 e0 08             	and    eax,0x8
c001d62a:	84 c0                	test   al,al
c001d62c:	75 07                	jne    c001d635 <APIC::getBase()+0x1f>
c001d62e:	b8 00 00 00 00       	mov    eax,0x0
c001d633:	eb 21                	jmp    c001d656 <APIC::getBase()+0x40>
c001d635:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c001d63a:	83 ec 08             	sub    esp,0x8
c001d63d:	6a 1b                	push   0x1b
c001d63f:	50                   	push   eax
c001d640:	e8 a3 df fe ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c001d645:	83 c4 10             	add    esp,0x10
c001d648:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d64b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d64e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d651:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d656:	c9                   	leave  
c001d657:	c3                   	ret    

c001d658 <APIC::eoi(unsigned char)>:
c001d658:	55                   	push   ebp
c001d659:	89 e5                	mov    ebp,esp
c001d65b:	83 ec 28             	sub    esp,0x28
c001d65e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d661:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d664:	83 ec 0c             	sub    esp,0xc
c001d667:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d66a:	e8 a7 ff ff ff       	call   c001d616 <APIC::getBase()>
c001d66f:	83 c4 10             	add    esp,0x10
c001d672:	05 b0 00 00 00       	add    eax,0xb0
c001d677:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d67a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d67d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d683:	90                   	nop
c001d684:	c9                   	leave  
c001d685:	c3                   	ret    

c001d686 <APIC::open(int, int, void*)>:
c001d686:	55                   	push   ebp
c001d687:	89 e5                	mov    ebp,esp
c001d689:	57                   	push   edi
c001d68a:	56                   	push   esi
c001d68b:	53                   	push   ebx
c001d68c:	83 ec 1c             	sub    esp,0x1c
c001d68f:	83 ec 0c             	sub    esp,0xc
c001d692:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d695:	e8 7c ff ff ff       	call   c001d616 <APIC::getBase()>
c001d69a:	83 c4 10             	add    esp,0x10
c001d69d:	05 f0 00 00 00       	add    eax,0xf0
c001d6a2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d6a5:	83 ec 0c             	sub    esp,0xc
c001d6a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6ab:	e8 66 ff ff ff       	call   c001d616 <APIC::getBase()>
c001d6b0:	83 c4 10             	add    esp,0x10
c001d6b3:	89 c2                	mov    edx,eax
c001d6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6b8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d6be:	0f b6 f8             	movzx  edi,al
c001d6c1:	89 d0                	mov    eax,edx
c001d6c3:	ba 00 00 00 00       	mov    edx,0x0
c001d6c8:	89 c1                	mov    ecx,eax
c001d6ca:	80 e5 ff             	and    ch,0xff
c001d6cd:	89 cb                	mov    ebx,ecx
c001d6cf:	0f b6 f2             	movzx  esi,dl
c001d6d2:	89 d8                	mov    eax,ebx
c001d6d4:	89 f2                	mov    edx,esi
c001d6d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d6d9:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d6dc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d6e0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d6e4:	83 e0 00             	and    eax,0x0
c001d6e7:	09 d0                	or     eax,edx
c001d6e9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d6ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6f0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d6f6:	8d 50 01             	lea    edx,[eax+0x1]
c001d6f9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d6fc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d702:	0f b6 d0             	movzx  edx,al
c001d705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d708:	83 c2 08             	add    edx,0x8
c001d70b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d70f:	0f b6 c9             	movzx  ecx,cl
c001d712:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d718:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d71c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d71f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d721:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d724:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d72b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d72e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d731:	89 10                	mov    DWORD PTR [eax],edx
c001d733:	b8 00 00 00 00       	mov    eax,0x0
c001d738:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d73b:	5b                   	pop    ebx
c001d73c:	5e                   	pop    esi
c001d73d:	5f                   	pop    edi
c001d73e:	5d                   	pop    ebp
c001d73f:	c3                   	ret    

c001d740 <IOAPIC::IOAPIC()>:
c001d740:	83 ec 0c             	sub    esp,0xc
c001d743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d747:	83 ec 08             	sub    esp,0x8
c001d74a:	68 88 ac 03 c0       	push   0xc003ac88
c001d74f:	50                   	push   eax
c001d750:	e8 3f 62 ff ff       	call   c0013994 <Device::Device(char const*)>
c001d755:	83 c4 10             	add    esp,0x10
c001d758:	ba b0 ad 03 c0       	mov    edx,0xc003adb0
c001d75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d761:	89 10                	mov    DWORD PTR [eax],edx
c001d763:	90                   	nop
c001d764:	83 c4 0c             	add    esp,0xc
c001d767:	c3                   	ret    

c001d768 <APIC::APIC()>:
c001d768:	53                   	push   ebx
c001d769:	83 ec 18             	sub    esp,0x18
c001d76c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d770:	83 ec 08             	sub    esp,0x8
c001d773:	68 90 ac 03 c0       	push   0xc003ac90
c001d778:	50                   	push   eax
c001d779:	e8 3e 69 ff ff       	call   c00140bc <InterruptController::InterruptController(char const*)>
c001d77e:	83 c4 10             	add    esp,0x10
c001d781:	ba 68 ad 03 c0       	mov    edx,0xc003ad68
c001d786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d78a:	89 10                	mov    DWORD PTR [eax],edx
c001d78c:	a0 e0 d1 03 c0       	mov    al,ds:0xc003d1e0
c001d791:	83 f0 01             	xor    eax,0x1
c001d794:	84 c0                	test   al,al
c001d796:	0f 84 96 00 00 00    	je     c001d832 <APIC::APIC()+0xca>
c001d79c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d7a1:	a0 b0 c6 03 c0       	mov    al,ds:0xc003c6b0
c001d7a6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d7aa:	73 7f                	jae    c001d82b <APIC::APIC()+0xc3>
c001d7ac:	83 ec 0c             	sub    esp,0xc
c001d7af:	68 68 01 00 00       	push   0x168
c001d7b4:	e8 e1 4c ff ff       	call   c001249a <operator new(unsigned long)>
c001d7b9:	83 c4 10             	add    esp,0x10
c001d7bc:	89 c3                	mov    ebx,eax
c001d7be:	83 ec 0c             	sub    esp,0xc
c001d7c1:	53                   	push   ebx
c001d7c2:	e8 79 ff ff ff       	call   c001d740 <IOAPIC::IOAPIC()>
c001d7c7:	83 c4 10             	add    esp,0x10
c001d7ca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d7ce:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d7d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7d7:	89 14 85 c0 d1 03 c0 	mov    DWORD PTR [eax*4-0x3ffc2e40],edx
c001d7de:	a1 a0 d1 03 c0       	mov    eax,ds:0xc003d1a0
c001d7e3:	40                   	inc    eax
c001d7e4:	a3 a0 d1 03 c0       	mov    ds:0xc003d1a0,eax
c001d7e9:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c001d7ee:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d7f4:	83 ec 08             	sub    esp,0x8
c001d7f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d7fb:	50                   	push   eax
c001d7fc:	e8 a3 5f ff ff       	call   c00137a4 <Device::addChild(Device*)>
c001d801:	83 c4 10             	add    esp,0x10
c001d804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d808:	8b 00                	mov    eax,DWORD PTR [eax]
c001d80a:	83 c0 08             	add    eax,0x8
c001d80d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d80f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d814:	6a 00                	push   0x0
c001d816:	6a 00                	push   0x0
c001d818:	52                   	push   edx
c001d819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d81d:	ff d0                	call   eax
c001d81f:	83 c4 10             	add    esp,0x10
c001d822:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d826:	e9 76 ff ff ff       	jmp    c001d7a1 <APIC::APIC()+0x39>
c001d82b:	c6 05 e0 d1 03 c0 01 	mov    BYTE PTR ds:0xc003d1e0,0x1
c001d832:	90                   	nop
c001d833:	83 c4 18             	add    esp,0x18
c001d836:	5b                   	pop    ebx
c001d837:	c3                   	ret    

c001d838 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d838:	55                   	push   ebp
c001d839:	89 e5                	mov    ebp,esp
c001d83b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d83e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d844:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d847:	72 1d                	jb     c001d866 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d84c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d855:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d85b:	01 d0                	add    eax,edx
c001d85d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d860:	73 04                	jae    c001d866 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d862:	b0 01                	mov    al,0x1
c001d864:	eb 02                	jmp    c001d868 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d866:	b0 00                	mov    al,0x0
c001d868:	5d                   	pop    ebp
c001d869:	c3                   	ret    

c001d86a <IOAPIC::read(int)>:
c001d86a:	55                   	push   ebp
c001d86b:	89 e5                	mov    ebp,esp
c001d86d:	83 ec 10             	sub    esp,0x10
c001d870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d873:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d879:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d87c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d87f:	0f b6 d0             	movzx  edx,al
c001d882:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d885:	89 10                	mov    DWORD PTR [eax],edx
c001d887:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d88a:	83 c0 10             	add    eax,0x10
c001d88d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d88f:	c9                   	leave  
c001d890:	c3                   	ret    
c001d891:	90                   	nop

c001d892 <IOAPIC::open(int, int, void*)>:
c001d892:	55                   	push   ebp
c001d893:	89 e5                	mov    ebp,esp
c001d895:	57                   	push   edi
c001d896:	56                   	push   esi
c001d897:	53                   	push   ebx
c001d898:	83 ec 0c             	sub    esp,0xc
c001d89b:	83 ec 0c             	sub    esp,0xc
c001d89e:	68 bb ac 03 c0       	push   0xc003acbb
c001d8a3:	e8 42 f6 fe ff       	call   c000ceea <kprintf(char const*, ...)>
c001d8a8:	83 c4 10             	add    esp,0x10
c001d8ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d8b1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d8c0:	8b 14 85 e0 c6 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3920]
c001d8c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d8d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d8d9:	8b 14 85 60 c7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc38a0]
c001d8e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8e3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d8e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d8f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d8fb:	0f b6 f8             	movzx  edi,al
c001d8fe:	89 d0                	mov    eax,edx
c001d900:	ba 00 00 00 00       	mov    edx,0x0
c001d905:	89 c1                	mov    ecx,eax
c001d907:	80 e5 ff             	and    ch,0xff
c001d90a:	89 cb                	mov    ebx,ecx
c001d90c:	0f b6 f2             	movzx  esi,dl
c001d90f:	89 d8                	mov    eax,ebx
c001d911:	89 f2                	mov    edx,esi
c001d913:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d916:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d919:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d91d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d921:	83 e0 00             	and    eax,0x0
c001d924:	09 d0                	or     eax,edx
c001d926:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d92a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d92d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d933:	8d 50 01             	lea    edx,[eax+0x1]
c001d936:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d939:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d93f:	0f b6 d0             	movzx  edx,al
c001d942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d945:	83 c2 08             	add    edx,0x8
c001d948:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d94c:	0f b6 c9             	movzx  ecx,cl
c001d94f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d955:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d959:	83 ec 08             	sub    esp,0x8
c001d95c:	6a 01                	push   0x1
c001d95e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d961:	e8 04 ff ff ff       	call   c001d86a <IOAPIC::read(int)>
c001d966:	83 c4 10             	add    esp,0x10
c001d969:	c1 f8 10             	sar    eax,0x10
c001d96c:	0f b6 c0             	movzx  eax,al
c001d96f:	8d 50 01             	lea    edx,[eax+0x1]
c001d972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d975:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d97b:	b8 00 00 00 00       	mov    eax,0x0
c001d980:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d983:	5b                   	pop    ebx
c001d984:	5e                   	pop    esi
c001d985:	5f                   	pop    edi
c001d986:	5d                   	pop    ebp
c001d987:	c3                   	ret    

c001d988 <IOAPIC::write(int, int)>:
c001d988:	55                   	push   ebp
c001d989:	89 e5                	mov    ebp,esp
c001d98b:	83 ec 10             	sub    esp,0x10
c001d98e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d991:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d997:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d99a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d99d:	0f b6 d0             	movzx  edx,al
c001d9a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9a3:	89 10                	mov    DWORD PTR [eax],edx
c001d9a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9a8:	8d 50 10             	lea    edx,[eax+0x10]
c001d9ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d9ae:	89 02                	mov    DWORD PTR [edx],eax
c001d9b0:	90                   	nop
c001d9b1:	c9                   	leave  
c001d9b2:	c3                   	ret    
c001d9b3:	90                   	nop

c001d9b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d9b4:	55                   	push   ebp
c001d9b5:	89 e5                	mov    ebp,esp
c001d9b7:	83 ec 20             	sub    esp,0x20
c001d9ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d9c0:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d9c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d9c6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d9c9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d9cc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d9cf:	88 d0                	mov    al,dl
c001d9d1:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d9d4:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d9d8:	83 c0 08             	add    eax,0x8
c001d9db:	01 c0                	add    eax,eax
c001d9dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9e0:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d9e4:	83 c0 08             	add    eax,0x8
c001d9e7:	01 c0                	add    eax,eax
c001d9e9:	40                   	inc    eax
c001d9ea:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d9ed:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d9f0:	50                   	push   eax
c001d9f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9f4:	e8 71 fe ff ff       	call   c001d86a <IOAPIC::read(int)>
c001d9f9:	83 c4 08             	add    esp,0x8
c001d9fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d9ff:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001da06:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001da09:	c1 e0 18             	shl    eax,0x18
c001da0c:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001da0f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001da12:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001da15:	52                   	push   edx
c001da16:	50                   	push   eax
c001da17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da1a:	e8 69 ff ff ff       	call   c001d988 <IOAPIC::write(int, int)>
c001da1f:	83 c4 0c             	add    esp,0xc
c001da22:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da25:	50                   	push   eax
c001da26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da29:	e8 3c fe ff ff       	call   c001d86a <IOAPIC::read(int)>
c001da2e:	83 c4 08             	add    esp,0x8
c001da31:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001da34:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001da3b:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001da42:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001da49:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001da50:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001da54:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001da57:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001da5a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da5d:	52                   	push   edx
c001da5e:	50                   	push   eax
c001da5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da62:	e8 21 ff ff ff       	call   c001d988 <IOAPIC::write(int, int)>
c001da67:	83 c4 0c             	add    esp,0xc
c001da6a:	90                   	nop
c001da6b:	c9                   	leave  
c001da6c:	c3                   	ret    
c001da6d:	90                   	nop

c001da6e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001da6e:	55                   	push   ebp
c001da6f:	89 e5                	mov    ebp,esp
c001da71:	56                   	push   esi
c001da72:	53                   	push   ebx
c001da73:	83 ec 20             	sub    esp,0x20
c001da76:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001da79:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001da7c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001da80:	74 28                	je     c001daaa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da82:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001da86:	7f 12                	jg     c001da9a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001da88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da8b:	05 00 b2 03 c0       	add    eax,0xc003b200
c001da90:	8a 00                	mov    al,BYTE PTR [eax]
c001da92:	0f b6 c0             	movzx  eax,al
c001da95:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001da98:	eb 10                	jmp    c001daaa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da9a:	83 ec 0c             	sub    esp,0xc
c001da9d:	68 cc ac 03 c0       	push   0xc003accc
c001daa2:	e8 61 f5 fe ff       	call   c000d008 <panic(char const*)>
c001daa7:	83 c4 10             	add    esp,0x10
c001daaa:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001daae:	a1 a0 d1 03 c0       	mov    eax,ds:0xc003d1a0
c001dab3:	83 ec 08             	sub    esp,0x8
c001dab6:	50                   	push   eax
c001dab7:	68 04 ad 03 c0       	push   0xc003ad04
c001dabc:	e8 29 f4 fe ff       	call   c000ceea <kprintf(char const*, ...)>
c001dac1:	83 c4 10             	add    esp,0x10
c001dac4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dacb:	a1 a0 d1 03 c0       	mov    eax,ds:0xc003d1a0
c001dad0:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dad3:	7d 58                	jge    c001db2d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001dad5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dad8:	8b 04 85 c0 d1 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc2e40]
c001dadf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dae2:	83 ec 08             	sub    esp,0x8
c001dae5:	52                   	push   edx
c001dae6:	50                   	push   eax
c001dae7:	e8 4c fd ff ff       	call   c001d838 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001daec:	83 c4 10             	add    esp,0x10
c001daef:	84 c0                	test   al,al
c001daf1:	74 35                	je     c001db28 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001daf3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001daf6:	8b 1c 85 c0 d1 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc2e40]
c001dafd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db00:	83 c0 20             	add    eax,0x20
c001db03:	0f b6 f0             	movzx  esi,al
c001db06:	e8 c2 96 ff ff       	call   c00171cd <getCPUNumber()>
c001db0b:	99                   	cdq    
c001db0c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001db0f:	0f b6 c9             	movzx  ecx,cl
c001db12:	83 ec 0c             	sub    esp,0xc
c001db15:	56                   	push   esi
c001db16:	52                   	push   edx
c001db17:	50                   	push   eax
c001db18:	51                   	push   ecx
c001db19:	53                   	push   ebx
c001db1a:	e8 95 fe ff ff       	call   c001d9b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001db1f:	83 c4 20             	add    esp,0x20
c001db22:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001db26:	eb 05                	jmp    c001db2d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001db28:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001db2b:	eb 9e                	jmp    c001dacb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001db2d:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001db30:	83 f0 01             	xor    eax,0x1
c001db33:	84 c0                	test   al,al
c001db35:	74 10                	je     c001db47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001db37:	83 ec 0c             	sub    esp,0xc
c001db3a:	68 1b ad 03 c0       	push   0xc003ad1b
c001db3f:	e8 c4 f4 fe ff       	call   c000d008 <panic(char const*)>
c001db44:	83 c4 10             	add    esp,0x10
c001db47:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001db4b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001db52:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001db56:	7f 65                	jg     c001dbbd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001db58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db5e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db65:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db68:	01 ca                	add    edx,ecx
c001db6a:	83 c2 54             	add    edx,0x54
c001db6d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001db71:	85 c0                	test   eax,eax
c001db73:	75 43                	jne    c001dbb8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001db75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db78:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db82:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db85:	01 ca                	add    edx,ecx
c001db87:	8d 4a 54             	lea    ecx,[edx+0x54]
c001db8a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001db8d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db97:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db9e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dba1:	01 ca                	add    edx,ecx
c001dba3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001dba9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dbac:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dbb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dbb3:	83 e8 20             	sub    eax,0x20
c001dbb6:	eb 1a                	jmp    c001dbd2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001dbb8:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001dbbb:	eb 95                	jmp    c001db52 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001dbbd:	83 ec 0c             	sub    esp,0xc
c001dbc0:	68 28 ad 03 c0       	push   0xc003ad28
c001dbc5:	e8 3e f4 fe ff       	call   c000d008 <panic(char const*)>
c001dbca:	83 c4 10             	add    esp,0x10
c001dbcd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dbd2:	8d 65 f8             	lea    esp,[ebp-0x8]
c001dbd5:	5b                   	pop    ebx
c001dbd6:	5e                   	pop    esi
c001dbd7:	5d                   	pop    ebp
c001dbd8:	c3                   	ret    
c001dbd9:	90                   	nop

c001dbda <PIC::disable()>:
c001dbda:	55                   	push   ebp
c001dbdb:	89 e5                	mov    ebp,esp
c001dbdd:	83 ec 10             	sub    esp,0x10
c001dbe0:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001dbe6:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001dbea:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dbed:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dbf1:	ee                   	out    dx,al
c001dbf2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001dbf8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dbfc:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dbff:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001dc03:	ee                   	out    dx,al
c001dc04:	90                   	nop
c001dc05:	c9                   	leave  
c001dc06:	c3                   	ret    
c001dc07:	90                   	nop

c001dc08 <PIC::close(int, int, void*)>:
c001dc08:	55                   	push   ebp
c001dc09:	89 e5                	mov    ebp,esp
c001dc0b:	83 ec 08             	sub    esp,0x8
c001dc0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc11:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc13:	83 c0 3c             	add    eax,0x3c
c001dc16:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc18:	83 ec 0c             	sub    esp,0xc
c001dc1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc1e:	ff d0                	call   eax
c001dc20:	83 c4 10             	add    esp,0x10
c001dc23:	b8 00 00 00 00       	mov    eax,0x0
c001dc28:	c9                   	leave  
c001dc29:	c3                   	ret    

c001dc2a <PIC::PIC()>:
c001dc2a:	83 ec 0c             	sub    esp,0xc
c001dc2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc31:	83 ec 08             	sub    esp,0x8
c001dc34:	68 d4 ad 03 c0       	push   0xc003add4
c001dc39:	50                   	push   eax
c001dc3a:	e8 7d 64 ff ff       	call   c00140bc <InterruptController::InterruptController(char const*)>
c001dc3f:	83 c4 10             	add    esp,0x10
c001dc42:	ba 00 ae 03 c0       	mov    edx,0xc003ae00
c001dc47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4b:	89 10                	mov    DWORD PTR [eax],edx
c001dc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc51:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc57:	0f b6 d0             	movzx  edx,al
c001dc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc6f:	0f b6 d0             	movzx  edx,al
c001dc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc76:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dc7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc85:	8d 50 01             	lea    edx,[eax+0x1]
c001dc88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc8c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc92:	0f b6 d0             	movzx  edx,al
c001dc95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc99:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc9d:	83 e1 3f             	and    ecx,0x3f
c001dca0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcae:	0f b6 d0             	movzx  edx,al
c001dcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcc6:	0f b6 d0             	movzx  edx,al
c001dcc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dccd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcdc:	8d 50 01             	lea    edx,[eax+0x1]
c001dcdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dce3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dce9:	0f b6 d0             	movzx  edx,al
c001dcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dcf4:	83 e1 3f             	and    ecx,0x3f
c001dcf7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dcfb:	90                   	nop
c001dcfc:	83 c4 0c             	add    esp,0xc
c001dcff:	c3                   	ret    

c001dd00 <PIC::ioWait()>:
c001dd00:	eb 00                	jmp    c001dd02 <PIC::ioWait()+0x2>
c001dd02:	eb 00                	jmp    c001dd04 <PIC::ioWait()+0x4>
c001dd04:	90                   	nop
c001dd05:	c3                   	ret    

c001dd06 <PIC::getIRQReg(int)>:
c001dd06:	55                   	push   ebp
c001dd07:	89 e5                	mov    ebp,esp
c001dd09:	83 ec 10             	sub    esp,0x10
c001dd0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd0f:	0f b6 c0             	movzx  eax,al
c001dd12:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dd18:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dd1b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dd1e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dd22:	ee                   	out    dx,al
c001dd23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd26:	0f b6 c0             	movzx  eax,al
c001dd29:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd2f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dd32:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd35:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd39:	ee                   	out    dx,al
c001dd3a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dd40:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dd44:	89 c2                	mov    edx,eax
c001dd46:	ec                   	in     al,dx
c001dd47:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dd4a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd4d:	0f b6 c0             	movzx  eax,al
c001dd50:	c1 e0 08             	shl    eax,0x8
c001dd53:	89 c1                	mov    ecx,eax
c001dd55:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dd5b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dd5f:	89 c2                	mov    edx,eax
c001dd61:	ec                   	in     al,dx
c001dd62:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dd65:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dd68:	0f b6 c0             	movzx  eax,al
c001dd6b:	09 c8                	or     eax,ecx
c001dd6d:	c9                   	leave  
c001dd6e:	c3                   	ret    
c001dd6f:	90                   	nop

c001dd70 <PIC::eoi(unsigned char)>:
c001dd70:	55                   	push   ebp
c001dd71:	89 e5                	mov    ebp,esp
c001dd73:	83 ec 14             	sub    esp,0x14
c001dd76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd79:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dd7c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd80:	75 1e                	jne    c001dda0 <PIC::eoi(unsigned char)+0x30>
c001dd82:	6a 0b                	push   0xb
c001dd84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd87:	e8 7a ff ff ff       	call   c001dd06 <PIC::getIRQReg(int)>
c001dd8c:	83 c4 08             	add    esp,0x8
c001dd8f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dd93:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dd97:	25 80 00 00 00       	and    eax,0x80
c001dd9c:	85 c0                	test   eax,eax
c001dd9e:	74 5f                	je     c001ddff <PIC::eoi(unsigned char)+0x8f>
c001dda0:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001dda4:	75 2d                	jne    c001ddd3 <PIC::eoi(unsigned char)+0x63>
c001dda6:	6a 0b                	push   0xb
c001dda8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddab:	e8 56 ff ff ff       	call   c001dd06 <PIC::getIRQReg(int)>
c001ddb0:	83 c4 08             	add    esp,0x8
c001ddb3:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001ddb7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ddba:	66 85 c0             	test   ax,ax
c001ddbd:	78 14                	js     c001ddd3 <PIC::eoi(unsigned char)+0x63>
c001ddbf:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001ddc5:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001ddc9:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ddcc:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001ddd0:	ee                   	out    dx,al
c001ddd1:	eb 2d                	jmp    c001de00 <PIC::eoi(unsigned char)+0x90>
c001ddd3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ddd7:	76 12                	jbe    c001ddeb <PIC::eoi(unsigned char)+0x7b>
c001ddd9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dddf:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001dde3:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dde6:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ddea:	ee                   	out    dx,al
c001ddeb:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001ddf1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001ddf5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ddf8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ddfc:	ee                   	out    dx,al
c001ddfd:	eb 01                	jmp    c001de00 <PIC::eoi(unsigned char)+0x90>
c001ddff:	90                   	nop
c001de00:	c9                   	leave  
c001de01:	c3                   	ret    

c001de02 <PIC::remap()>:
c001de02:	55                   	push   ebp
c001de03:	89 e5                	mov    ebp,esp
c001de05:	83 ec 48             	sub    esp,0x48
c001de08:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001de0f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001de16:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001de1c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001de1f:	89 c2                	mov    edx,eax
c001de21:	ec                   	in     al,dx
c001de22:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001de25:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001de28:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001de2b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001de31:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001de34:	89 c2                	mov    edx,eax
c001de36:	ec                   	in     al,dx
c001de37:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001de3a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001de3d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001de40:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001de46:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001de4a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001de4d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001de50:	ee                   	out    dx,al
c001de51:	83 ec 0c             	sub    esp,0xc
c001de54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de57:	e8 a4 fe ff ff       	call   c001dd00 <PIC::ioWait()>
c001de5c:	83 c4 10             	add    esp,0x10
c001de5f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001de65:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001de69:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001de6c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001de6f:	ee                   	out    dx,al
c001de70:	83 ec 0c             	sub    esp,0xc
c001de73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de76:	e8 85 fe ff ff       	call   c001dd00 <PIC::ioWait()>
c001de7b:	83 c4 10             	add    esp,0x10
c001de7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001de81:	0f b6 c0             	movzx  eax,al
c001de84:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001de8a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001de8d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001de90:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001de93:	ee                   	out    dx,al
c001de94:	83 ec 0c             	sub    esp,0xc
c001de97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de9a:	e8 61 fe ff ff       	call   c001dd00 <PIC::ioWait()>
c001de9f:	83 c4 10             	add    esp,0x10
c001dea2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dea5:	0f b6 c0             	movzx  eax,al
c001dea8:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001deae:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001deb1:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001deb4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001deb7:	ee                   	out    dx,al
c001deb8:	83 ec 0c             	sub    esp,0xc
c001debb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001debe:	e8 3d fe ff ff       	call   c001dd00 <PIC::ioWait()>
c001dec3:	83 c4 10             	add    esp,0x10
c001dec6:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001decc:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ded0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ded3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ded6:	ee                   	out    dx,al
c001ded7:	83 ec 0c             	sub    esp,0xc
c001deda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dedd:	e8 1e fe ff ff       	call   c001dd00 <PIC::ioWait()>
c001dee2:	83 c4 10             	add    esp,0x10
c001dee5:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001deeb:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001deef:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001def2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001def5:	ee                   	out    dx,al
c001def6:	83 ec 0c             	sub    esp,0xc
c001def9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001defc:	e8 ff fd ff ff       	call   c001dd00 <PIC::ioWait()>
c001df01:	83 c4 10             	add    esp,0x10
c001df04:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001df0a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001df0e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001df11:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001df14:	ee                   	out    dx,al
c001df15:	83 ec 0c             	sub    esp,0xc
c001df18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df1b:	e8 e0 fd ff ff       	call   c001dd00 <PIC::ioWait()>
c001df20:	83 c4 10             	add    esp,0x10
c001df23:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001df29:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001df2d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001df30:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001df33:	ee                   	out    dx,al
c001df34:	83 ec 0c             	sub    esp,0xc
c001df37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df3a:	e8 c1 fd ff ff       	call   c001dd00 <PIC::ioWait()>
c001df3f:	83 c4 10             	add    esp,0x10
c001df42:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001df46:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001df4c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001df4f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001df52:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df55:	ee                   	out    dx,al
c001df56:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001df5a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001df60:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001df63:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001df66:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001df69:	ee                   	out    dx,al
c001df6a:	90                   	nop
c001df6b:	c9                   	leave  
c001df6c:	c3                   	ret    
c001df6d:	90                   	nop

c001df6e <PIC::open(int, int, void*)>:
c001df6e:	55                   	push   ebp
c001df6f:	89 e5                	mov    ebp,esp
c001df71:	83 ec 18             	sub    esp,0x18
c001df74:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001df7a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001df7e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001df81:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001df85:	ee                   	out    dx,al
c001df86:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001df8c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001df90:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001df93:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001df97:	ee                   	out    dx,al
c001df98:	83 ec 0c             	sub    esp,0xc
c001df9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df9e:	e8 5f fe ff ff       	call   c001de02 <PIC::remap()>
c001dfa3:	83 c4 10             	add    esp,0x10
c001dfa6:	b8 00 00 00 00       	mov    eax,0x0
c001dfab:	c9                   	leave  
c001dfac:	c3                   	ret    
c001dfad:	90                   	nop

c001dfae <APICTimer::close(int, int, void*)>:
c001dfae:	b8 00 00 00 00       	mov    eax,0x0
c001dfb3:	c3                   	ret    

c001dfb4 <apicTimerHandler(regs*, void*)>:
c001dfb4:	83 ec 0c             	sub    esp,0xc
c001dfb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfbd:	99                   	cdq    
c001dfbe:	52                   	push   edx
c001dfbf:	50                   	push   eax
c001dfc0:	6a 00                	push   0x0
c001dfc2:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dfc7:	e8 70 07 00 00       	call   c001e73c <__udivdi3>
c001dfcc:	83 c4 10             	add    esp,0x10
c001dfcf:	83 ec 08             	sub    esp,0x8
c001dfd2:	52                   	push   edx
c001dfd3:	50                   	push   eax
c001dfd4:	e8 b2 77 ff ff       	call   c001578b <timerHandler(unsigned long long)>
c001dfd9:	83 c4 10             	add    esp,0x10
c001dfdc:	90                   	nop
c001dfdd:	83 c4 0c             	add    esp,0xc
c001dfe0:	c3                   	ret    
c001dfe1:	90                   	nop

c001dfe2 <APICTimer::write(int)>:
c001dfe2:	53                   	push   ebx
c001dfe3:	83 ec 28             	sub    esp,0x28
c001dfe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dfee:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dff4:	e8 d7 91 ff ff       	call   c00171d0 <thisCPU()>
c001dff9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dfff:	83 ec 0c             	sub    esp,0xc
c001e002:	50                   	push   eax
c001e003:	e8 0e f6 ff ff       	call   c001d616 <APIC::getBase()>
c001e008:	83 c4 10             	add    esp,0x10
c001e00b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e00f:	a1 70 c4 03 c0       	mov    eax,ds:0xc003c470
c001e014:	8b 15 74 c4 03 c0    	mov    edx,DWORD PTR ds:0xc003c474
c001e01a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e01e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e026:	05 e0 03 00 00       	add    eax,0x3e0
c001e02b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e035:	05 80 03 00 00       	add    eax,0x380
c001e03a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e040:	fb                   	sti    
c001e041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e045:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e049:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e04e:	83 d2 00             	adc    edx,0x0
c001e051:	89 c1                	mov    ecx,eax
c001e053:	89 d3                	mov    ebx,edx
c001e055:	a1 70 c4 03 c0       	mov    eax,ds:0xc003c470
c001e05a:	8b 15 74 c4 03 c0    	mov    edx,DWORD PTR ds:0xc003c474
c001e060:	39 c8                	cmp    eax,ecx
c001e062:	89 d0                	mov    eax,edx
c001e064:	19 d8                	sbb    eax,ebx
c001e066:	73 02                	jae    c001e06a <APICTimer::write(int)+0x88>
c001e068:	eb d7                	jmp    c001e041 <APICTimer::write(int)+0x5f>
c001e06a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e06e:	05 20 03 00 00       	add    eax,0x320
c001e073:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e079:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e07d:	05 90 03 00 00       	add    eax,0x390
c001e082:	8b 00                	mov    eax,DWORD PTR [eax]
c001e084:	f7 d0                	not    eax
c001e086:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e08a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e08e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e092:	ba 00 00 00 00       	mov    edx,0x0
c001e097:	f7 f3                	div    ebx
c001e099:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e09d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e0a7:	0d 00 00 02 00       	or     eax,0x20000
c001e0ac:	89 c2                	mov    edx,eax
c001e0ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0b2:	05 20 03 00 00       	add    eax,0x320
c001e0b7:	89 10                	mov    DWORD PTR [eax],edx
c001e0b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0bd:	05 e0 03 00 00       	add    eax,0x3e0
c001e0c2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e0c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0cc:	05 80 03 00 00       	add    eax,0x380
c001e0d1:	89 c2                	mov    edx,eax
c001e0d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e0d7:	89 02                	mov    DWORD PTR [edx],eax
c001e0d9:	90                   	nop
c001e0da:	83 c4 28             	add    esp,0x28
c001e0dd:	5b                   	pop    ebx
c001e0de:	c3                   	ret    
c001e0df:	90                   	nop

c001e0e0 <APICTimer::open(int, int, void*)>:
c001e0e0:	57                   	push   edi
c001e0e1:	56                   	push   esi
c001e0e2:	53                   	push   ebx
c001e0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0e9:	83 c0 24             	add    eax,0x24
c001e0ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0ee:	83 ec 08             	sub    esp,0x8
c001e0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0f9:	ff d0                	call   eax
c001e0fb:	83 c4 10             	add    esp,0x10
c001e0fe:	e8 cd 90 ff ff       	call   c00171d0 <thisCPU()>
c001e103:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e109:	83 ec 0c             	sub    esp,0xc
c001e10c:	50                   	push   eax
c001e10d:	e8 04 f5 ff ff       	call   c001d616 <APIC::getBase()>
c001e112:	83 c4 10             	add    esp,0x10
c001e115:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e11f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e125:	0f b6 f8             	movzx  edi,al
c001e128:	89 d0                	mov    eax,edx
c001e12a:	ba 00 00 00 00       	mov    edx,0x0
c001e12f:	89 c1                	mov    ecx,eax
c001e131:	80 e5 ff             	and    ch,0xff
c001e134:	89 cb                	mov    ebx,ecx
c001e136:	0f b6 f2             	movzx  esi,dl
c001e139:	89 d8                	mov    eax,ebx
c001e13b:	89 f2                	mov    edx,esi
c001e13d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e141:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e144:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e148:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e14c:	83 e0 00             	and    eax,0x0
c001e14f:	09 d0                	or     eax,edx
c001e151:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e159:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e15f:	8d 50 01             	lea    edx,[eax+0x1]
c001e162:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e166:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e16c:	0f b6 d0             	movzx  edx,al
c001e16f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e173:	83 c2 08             	add    edx,0x8
c001e176:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e17a:	0f b6 c9             	movzx  ecx,cl
c001e17d:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e183:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e18b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e18f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e199:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e19d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e1a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1a7:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e1ad:	83 ec 0c             	sub    esp,0xc
c001e1b0:	51                   	push   ecx
c001e1b1:	6a 01                	push   0x1
c001e1b3:	68 b4 df 01 c0       	push   0xc001dfb4
c001e1b8:	52                   	push   edx
c001e1b9:	50                   	push   eax
c001e1ba:	e8 39 55 ff ff       	call   c00136f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e1bf:	83 c4 20             	add    esp,0x20
c001e1c2:	89 c2                	mov    edx,eax
c001e1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e1ce:	b8 00 00 00 00       	mov    eax,0x0
c001e1d3:	5b                   	pop    ebx
c001e1d4:	5e                   	pop    esi
c001e1d5:	5f                   	pop    edi
c001e1d6:	c3                   	ret    
c001e1d7:	90                   	nop

c001e1d8 <APICTimer::APICTimer()>:
c001e1d8:	83 ec 0c             	sub    esp,0xc
c001e1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1df:	83 ec 08             	sub    esp,0x8
c001e1e2:	68 40 ae 03 c0       	push   0xc003ae40
c001e1e7:	50                   	push   eax
c001e1e8:	e8 0f 75 ff ff       	call   c00156fc <Timer::Timer(char const*)>
c001e1ed:	83 c4 10             	add    esp,0x10
c001e1f0:	ba 54 ae 03 c0       	mov    edx,0xc003ae54
c001e1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f9:	89 10                	mov    DWORD PTR [eax],edx
c001e1fb:	90                   	nop
c001e1fc:	83 c4 0c             	add    esp,0xc
c001e1ff:	c3                   	ret    

c001e200 <PIT::write(int)>:
c001e200:	83 ec 10             	sub    esp,0x10
c001e203:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e207:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e20b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e211:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e215:	a3 e4 d1 03 c0       	mov    ds:0xc003d1e4,eax
c001e21a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e21f:	99                   	cdq    
c001e220:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e224:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e228:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e22f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e234:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e238:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e23d:	ee                   	out    dx,al
c001e23e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e242:	0f b6 c0             	movzx  eax,al
c001e245:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e24c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e250:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e254:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e259:	ee                   	out    dx,al
c001e25a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e25e:	c1 f8 08             	sar    eax,0x8
c001e261:	0f b6 c0             	movzx  eax,al
c001e264:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e26b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e26f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e273:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e278:	ee                   	out    dx,al
c001e279:	90                   	nop
c001e27a:	83 c4 10             	add    esp,0x10
c001e27d:	c3                   	ret    

c001e27e <pitHandler(regs*, void*)>:
c001e27e:	83 ec 0c             	sub    esp,0xc
c001e281:	a1 e4 d1 03 c0       	mov    eax,ds:0xc003d1e4
c001e286:	99                   	cdq    
c001e287:	52                   	push   edx
c001e288:	50                   	push   eax
c001e289:	6a 00                	push   0x0
c001e28b:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e290:	e8 a7 04 00 00       	call   c001e73c <__udivdi3>
c001e295:	83 c4 10             	add    esp,0x10
c001e298:	83 ec 08             	sub    esp,0x8
c001e29b:	52                   	push   edx
c001e29c:	50                   	push   eax
c001e29d:	e8 e9 74 ff ff       	call   c001578b <timerHandler(unsigned long long)>
c001e2a2:	83 c4 10             	add    esp,0x10
c001e2a5:	90                   	nop
c001e2a6:	83 c4 0c             	add    esp,0xc
c001e2a9:	c3                   	ret    

c001e2aa <PIT::open(int, int, void*)>:
c001e2aa:	83 ec 0c             	sub    esp,0xc
c001e2ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2b3:	83 c0 24             	add    eax,0x24
c001e2b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2b8:	83 ec 08             	sub    esp,0x8
c001e2bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2c3:	ff d0                	call   eax
c001e2c5:	83 c4 10             	add    esp,0x10
c001e2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2cc:	83 ec 0c             	sub    esp,0xc
c001e2cf:	6a 00                	push   0x0
c001e2d1:	6a 01                	push   0x1
c001e2d3:	68 7e e2 01 c0       	push   0xc001e27e
c001e2d8:	6a 00                	push   0x0
c001e2da:	50                   	push   eax
c001e2db:	e8 18 54 ff ff       	call   c00136f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e2e0:	83 c4 20             	add    esp,0x20
c001e2e3:	89 c2                	mov    edx,eax
c001e2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e2ef:	b8 00 00 00 00       	mov    eax,0x0
c001e2f4:	83 c4 0c             	add    esp,0xc
c001e2f7:	c3                   	ret    

c001e2f8 <PIT::close(int, int, void*)>:
c001e2f8:	83 ec 0c             	sub    esp,0xc
c001e2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ff:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e30d:	6a 01                	push   0x1
c001e30f:	68 7e e2 01 c0       	push   0xc001e27e
c001e314:	6a 00                	push   0x0
c001e316:	50                   	push   eax
c001e317:	e8 3a 54 ff ff       	call   c0013756 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e31c:	83 c4 10             	add    esp,0x10
c001e31f:	b8 00 00 00 00       	mov    eax,0x0
c001e324:	83 c4 0c             	add    esp,0xc
c001e327:	c3                   	ret    

c001e328 <PIT::PIT()>:
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e32f:	83 ec 08             	sub    esp,0x8
c001e332:	68 7c ae 03 c0       	push   0xc003ae7c
c001e337:	50                   	push   eax
c001e338:	e8 bf 73 ff ff       	call   c00156fc <Timer::Timer(char const*)>
c001e33d:	83 c4 10             	add    esp,0x10
c001e340:	ba a4 ae 03 c0       	mov    edx,0xc003aea4
c001e345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e349:	89 10                	mov    DWORD PTR [eax],edx
c001e34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e355:	0f b6 d0             	movzx  edx,al
c001e358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e367:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e36d:	0f b6 d0             	movzx  edx,al
c001e370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e374:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e383:	8d 50 01             	lea    edx,[eax+0x1]
c001e386:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e38a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e390:	0f b6 d0             	movzx  edx,al
c001e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e397:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e39b:	83 e1 3f             	and    ecx,0x3f
c001e39e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e3a2:	90                   	nop
c001e3a3:	83 c4 0c             	add    esp,0xc
c001e3a6:	c3                   	ret    
c001e3a7:	66 90                	xchg   ax,ax
c001e3a9:	66 90                	xchg   ax,ax
c001e3ab:	66 90                	xchg   ax,ax
c001e3ad:	66 90                	xchg   ax,ax
c001e3af:	90                   	nop

c001e3b0 <avxDetect>:
c001e3b0:	b8 00 00 00 00       	mov    eax,0x0
c001e3b5:	c3                   	ret    

c001e3b6 <avxSave>:
c001e3b6:	c3                   	ret    

c001e3b7 <avxLoad>:
c001e3b7:	c3                   	ret    

c001e3b8 <avxInit>:
c001e3b8:	c3                   	ret    

c001e3b9 <avxClose>:
c001e3b9:	c3                   	ret    
c001e3ba:	66 90                	xchg   ax,ax
c001e3bc:	66 90                	xchg   ax,ax
c001e3be:	66 90                	xchg   ax,ax

c001e3c0 <sseDetect>:
c001e3c0:	b8 01 00 00 00       	mov    eax,0x1
c001e3c5:	0f a2                	cpuid  
c001e3c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e3cd:	74 06                	je     c001e3d5 <sseDetect.noSSE>
c001e3cf:	b8 01 00 00 00       	mov    eax,0x1
c001e3d4:	c3                   	ret    

c001e3d5 <sseDetect.noSSE>:
c001e3d5:	b8 00 00 00 00       	mov    eax,0x0
c001e3da:	c3                   	ret    

c001e3db <sseSave>:
c001e3db:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e3e0:	c3                   	ret    

c001e3e1 <sseLoad>:
c001e3e1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e3e6:	c3                   	ret    

c001e3e7 <sseInit>:
c001e3e7:	e8 40 00 00 00       	call   c001e42c <x87Init>
c001e3ec:	0f 20 e0             	mov    eax,cr4
c001e3ef:	66 0d 00 06          	or     ax,0x600
c001e3f3:	0f 22 e0             	mov    cr4,eax
c001e3f6:	c3                   	ret    

c001e3f7 <sseClose>:
c001e3f7:	c3                   	ret    
c001e3f8:	66 90                	xchg   ax,ax
c001e3fa:	66 90                	xchg   ax,ax
c001e3fc:	66 90                	xchg   ax,ax
c001e3fe:	66 90                	xchg   ax,ax

c001e400 <value_37F>:
c001e400:	7f 03                	jg     c001e405 <value_37A+0x1>

c001e402 <value_37E>:
c001e402:	7e 03                	jle    c001e407 <x87Detect+0x1>

c001e404 <value_37A>:
c001e404:	7a 03                	jp     c001e409 <x87Detect+0x3>

c001e406 <x87Detect>:
c001e406:	b8 01 00 00 00       	mov    eax,0x1
c001e40b:	0f a2                	cpuid  
c001e40d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e413:	74 06                	je     c001e41b <x87Detect.nox87>
c001e415:	b8 01 00 00 00       	mov    eax,0x1
c001e41a:	c3                   	ret    

c001e41b <x87Detect.nox87>:
c001e41b:	b8 00 00 00 00       	mov    eax,0x0
c001e420:	c3                   	ret    

c001e421 <x87Save>:
c001e421:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e426:	c3                   	ret    

c001e427 <x87Load>:
c001e427:	dd 64 24 08          	frstor [esp+0x8]
c001e42b:	c3                   	ret    

c001e42c <x87Init>:
c001e42c:	9b db e3             	finit  
c001e42f:	0f 20 c0             	mov    eax,cr0
c001e432:	66 25 fb ff          	and    ax,0xfffb
c001e436:	66 0d 22 00          	or     ax,0x22
c001e43a:	0f 22 c0             	mov    cr0,eax
c001e43d:	0f 06                	clts   
c001e43f:	d9 2d 04 e4 01 c0    	fldcw  WORD PTR ds:0xc001e404
c001e445:	c3                   	ret    

c001e446 <x87Close>:
c001e446:	c3                   	ret    
c001e447:	90                   	nop

c001e448 <__do_global_ctors_aux>:
c001e448:	a1 78 f5 01 c0       	mov    eax,ds:0xc001f578
c001e44d:	83 f8 ff             	cmp    eax,0xffffffff
c001e450:	74 1a                	je     c001e46c <__do_global_ctors_aux+0x24>
c001e452:	55                   	push   ebp
c001e453:	89 e5                	mov    ebp,esp
c001e455:	53                   	push   ebx
c001e456:	52                   	push   edx
c001e457:	bb 78 f5 01 c0       	mov    ebx,0xc001f578
c001e45c:	ff d0                	call   eax
c001e45e:	83 eb 04             	sub    ebx,0x4
c001e461:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e463:	83 f8 ff             	cmp    eax,0xffffffff
c001e466:	75 f4                	jne    c001e45c <__do_global_ctors_aux+0x14>
c001e468:	58                   	pop    eax
c001e469:	5b                   	pop    ebx
c001e46a:	5d                   	pop    ebp
c001e46b:	c3                   	ret    
c001e46c:	c3                   	ret    
c001e46d:	66 90                	xchg   ax,ax
c001e46f:	90                   	nop

c001e470 <__divdi3>:
c001e470:	55                   	push   ebp
c001e471:	57                   	push   edi
c001e472:	56                   	push   esi
c001e473:	53                   	push   ebx
c001e474:	83 ec 1c             	sub    esp,0x1c
c001e477:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e47b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e47f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e482:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e486:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e48a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e48e:	85 db                	test   ebx,ebx
c001e490:	0f 88 8e 00 00 00    	js     c001e524 <__divdi3+0xb4>
c001e496:	89 dd                	mov    ebp,ebx
c001e498:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e4a0:	89 d3                	mov    ebx,edx
c001e4a2:	85 d2                	test   edx,edx
c001e4a4:	79 0d                	jns    c001e4b3 <__divdi3+0x43>
c001e4a6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e4aa:	f7 d8                	neg    eax
c001e4ac:	83 d2 00             	adc    edx,0x0
c001e4af:	f7 da                	neg    edx
c001e4b1:	89 d3                	mov    ebx,edx
c001e4b3:	89 c7                	mov    edi,eax
c001e4b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e4b8:	85 db                	test   ebx,ebx
c001e4ba:	75 48                	jne    c001e504 <__divdi3+0x94>
c001e4bc:	39 ef                	cmp    edi,ebp
c001e4be:	76 24                	jbe    c001e4e4 <__divdi3+0x74>
c001e4c0:	89 ea                	mov    edx,ebp
c001e4c2:	f7 f7                	div    edi
c001e4c4:	89 c1                	mov    ecx,eax
c001e4c6:	31 f6                	xor    esi,esi
c001e4c8:	89 c8                	mov    eax,ecx
c001e4ca:	89 f2                	mov    edx,esi
c001e4cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4d0:	85 c9                	test   ecx,ecx
c001e4d2:	74 07                	je     c001e4db <__divdi3+0x6b>
c001e4d4:	f7 d8                	neg    eax
c001e4d6:	83 d2 00             	adc    edx,0x0
c001e4d9:	f7 da                	neg    edx
c001e4db:	83 c4 1c             	add    esp,0x1c
c001e4de:	5b                   	pop    ebx
c001e4df:	5e                   	pop    esi
c001e4e0:	5f                   	pop    edi
c001e4e1:	5d                   	pop    ebp
c001e4e2:	c3                   	ret    
c001e4e3:	90                   	nop
c001e4e4:	85 ff                	test   edi,edi
c001e4e6:	75 0b                	jne    c001e4f3 <__divdi3+0x83>
c001e4e8:	b8 01 00 00 00       	mov    eax,0x1
c001e4ed:	31 d2                	xor    edx,edx
c001e4ef:	f7 f3                	div    ebx
c001e4f1:	89 c7                	mov    edi,eax
c001e4f3:	31 d2                	xor    edx,edx
c001e4f5:	89 e8                	mov    eax,ebp
c001e4f7:	f7 f7                	div    edi
c001e4f9:	89 c6                	mov    esi,eax
c001e4fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e4fe:	f7 f7                	div    edi
c001e500:	89 c1                	mov    ecx,eax
c001e502:	eb c4                	jmp    c001e4c8 <__divdi3+0x58>
c001e504:	39 eb                	cmp    ebx,ebp
c001e506:	77 3c                	ja     c001e544 <__divdi3+0xd4>
c001e508:	0f bd f3             	bsr    esi,ebx
c001e50b:	83 f6 1f             	xor    esi,0x1f
c001e50e:	75 40                	jne    c001e550 <__divdi3+0xe0>
c001e510:	39 eb                	cmp    ebx,ebp
c001e512:	72 09                	jb     c001e51d <__divdi3+0xad>
c001e514:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e517:	0f 87 97 00 00 00    	ja     c001e5b4 <__divdi3+0x144>
c001e51d:	b9 01 00 00 00       	mov    ecx,0x1
c001e522:	eb a4                	jmp    c001e4c8 <__divdi3+0x58>
c001e524:	f7 d9                	neg    ecx
c001e526:	83 d3 00             	adc    ebx,0x0
c001e529:	f7 db                	neg    ebx
c001e52b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e52e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e532:	89 dd                	mov    ebp,ebx
c001e534:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e53c:	e9 5f ff ff ff       	jmp    c001e4a0 <__divdi3+0x30>
c001e541:	8d 76 00             	lea    esi,[esi+0x0]
c001e544:	31 f6                	xor    esi,esi
c001e546:	31 c9                	xor    ecx,ecx
c001e548:	e9 7b ff ff ff       	jmp    c001e4c8 <__divdi3+0x58>
c001e54d:	8d 76 00             	lea    esi,[esi+0x0]
c001e550:	b8 20 00 00 00       	mov    eax,0x20
c001e555:	29 f0                	sub    eax,esi
c001e557:	89 f1                	mov    ecx,esi
c001e559:	d3 e3                	shl    ebx,cl
c001e55b:	89 fa                	mov    edx,edi
c001e55d:	88 c1                	mov    cl,al
c001e55f:	d3 ea                	shr    edx,cl
c001e561:	09 da                	or     edx,ebx
c001e563:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e567:	89 f1                	mov    ecx,esi
c001e569:	d3 e7                	shl    edi,cl
c001e56b:	89 eb                	mov    ebx,ebp
c001e56d:	88 c1                	mov    cl,al
c001e56f:	d3 eb                	shr    ebx,cl
c001e571:	89 f1                	mov    ecx,esi
c001e573:	d3 e5                	shl    ebp,cl
c001e575:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e578:	88 c1                	mov    cl,al
c001e57a:	d3 ea                	shr    edx,cl
c001e57c:	09 d5                	or     ebp,edx
c001e57e:	89 e8                	mov    eax,ebp
c001e580:	89 da                	mov    edx,ebx
c001e582:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e586:	89 d3                	mov    ebx,edx
c001e588:	89 c5                	mov    ebp,eax
c001e58a:	f7 e7                	mul    edi
c001e58c:	39 d3                	cmp    ebx,edx
c001e58e:	72 18                	jb     c001e5a8 <__divdi3+0x138>
c001e590:	74 0a                	je     c001e59c <__divdi3+0x12c>
c001e592:	89 e9                	mov    ecx,ebp
c001e594:	31 f6                	xor    esi,esi
c001e596:	e9 2d ff ff ff       	jmp    c001e4c8 <__divdi3+0x58>
c001e59b:	90                   	nop
c001e59c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e59f:	89 f1                	mov    ecx,esi
c001e5a1:	d3 e7                	shl    edi,cl
c001e5a3:	39 c7                	cmp    edi,eax
c001e5a5:	73 eb                	jae    c001e592 <__divdi3+0x122>
c001e5a7:	90                   	nop
c001e5a8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e5ab:	31 f6                	xor    esi,esi
c001e5ad:	e9 16 ff ff ff       	jmp    c001e4c8 <__divdi3+0x58>
c001e5b2:	66 90                	xchg   ax,ax
c001e5b4:	31 c9                	xor    ecx,ecx
c001e5b6:	e9 0d ff ff ff       	jmp    c001e4c8 <__divdi3+0x58>
c001e5bb:	90                   	nop

c001e5bc <__moddi3>:
c001e5bc:	55                   	push   ebp
c001e5bd:	57                   	push   edi
c001e5be:	56                   	push   esi
c001e5bf:	53                   	push   ebx
c001e5c0:	83 ec 2c             	sub    esp,0x2c
c001e5c3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e5c7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e5cb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e5cf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e5d3:	85 db                	test   ebx,ebx
c001e5d5:	0f 88 85 00 00 00    	js     c001e660 <__moddi3+0xa4>
c001e5db:	89 de                	mov    esi,ebx
c001e5dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e5e5:	89 d7                	mov    edi,edx
c001e5e7:	85 d2                	test   edx,edx
c001e5e9:	79 09                	jns    c001e5f4 <__moddi3+0x38>
c001e5eb:	f7 d8                	neg    eax
c001e5ed:	83 d2 00             	adc    edx,0x0
c001e5f0:	f7 da                	neg    edx
c001e5f2:	89 d7                	mov    edi,edx
c001e5f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5f8:	89 cd                	mov    ebp,ecx
c001e5fa:	85 ff                	test   edi,edi
c001e5fc:	75 52                	jne    c001e650 <__moddi3+0x94>
c001e5fe:	89 c3                	mov    ebx,eax
c001e600:	39 f0                	cmp    eax,esi
c001e602:	76 24                	jbe    c001e628 <__moddi3+0x6c>
c001e604:	89 c8                	mov    eax,ecx
c001e606:	89 f2                	mov    edx,esi
c001e608:	f7 f3                	div    ebx
c001e60a:	89 d6                	mov    esi,edx
c001e60c:	89 f0                	mov    eax,esi
c001e60e:	31 d2                	xor    edx,edx
c001e610:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e614:	85 c9                	test   ecx,ecx
c001e616:	74 07                	je     c001e61f <__moddi3+0x63>
c001e618:	f7 d8                	neg    eax
c001e61a:	83 d2 00             	adc    edx,0x0
c001e61d:	f7 da                	neg    edx
c001e61f:	83 c4 2c             	add    esp,0x2c
c001e622:	5b                   	pop    ebx
c001e623:	5e                   	pop    esi
c001e624:	5f                   	pop    edi
c001e625:	5d                   	pop    ebp
c001e626:	c3                   	ret    
c001e627:	90                   	nop
c001e628:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e62c:	85 db                	test   ebx,ebx
c001e62e:	75 0d                	jne    c001e63d <__moddi3+0x81>
c001e630:	b8 01 00 00 00       	mov    eax,0x1
c001e635:	31 d2                	xor    edx,edx
c001e637:	f7 f7                	div    edi
c001e639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e63d:	89 f0                	mov    eax,esi
c001e63f:	31 d2                	xor    edx,edx
c001e641:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e645:	f7 f7                	div    edi
c001e647:	89 e8                	mov    eax,ebp
c001e649:	f7 f7                	div    edi
c001e64b:	89 d6                	mov    esi,edx
c001e64d:	eb bd                	jmp    c001e60c <__moddi3+0x50>
c001e64f:	90                   	nop
c001e650:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e654:	39 f7                	cmp    edi,esi
c001e656:	76 20                	jbe    c001e678 <__moddi3+0xbc>
c001e658:	89 c8                	mov    eax,ecx
c001e65a:	89 f2                	mov    edx,esi
c001e65c:	eb b2                	jmp    c001e610 <__moddi3+0x54>
c001e65e:	66 90                	xchg   ax,ax
c001e660:	f7 d9                	neg    ecx
c001e662:	83 d3 00             	adc    ebx,0x0
c001e665:	f7 db                	neg    ebx
c001e667:	89 de                	mov    esi,ebx
c001e669:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e671:	e9 6f ff ff ff       	jmp    c001e5e5 <__moddi3+0x29>
c001e676:	66 90                	xchg   ax,ax
c001e678:	0f bd c7             	bsr    eax,edi
c001e67b:	83 f0 1f             	xor    eax,0x1f
c001e67e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e682:	75 24                	jne    c001e6a8 <__moddi3+0xec>
c001e684:	39 f7                	cmp    edi,esi
c001e686:	72 06                	jb     c001e68e <__moddi3+0xd2>
c001e688:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e68c:	77 0c                	ja     c001e69a <__moddi3+0xde>
c001e68e:	89 e9                	mov    ecx,ebp
c001e690:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e694:	19 fe                	sbb    esi,edi
c001e696:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e69a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e69e:	89 f2                	mov    edx,esi
c001e6a0:	e9 6b ff ff ff       	jmp    c001e610 <__moddi3+0x54>
c001e6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e6a8:	b8 20 00 00 00       	mov    eax,0x20
c001e6ad:	89 c2                	mov    edx,eax
c001e6af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e6b3:	29 da                	sub    edx,ebx
c001e6b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e6b9:	88 d9                	mov    cl,bl
c001e6bb:	d3 e7                	shl    edi,cl
c001e6bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6c1:	88 d1                	mov    cl,dl
c001e6c3:	d3 e8                	shr    eax,cl
c001e6c5:	09 c7                	or     edi,eax
c001e6c7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e6cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e6cf:	89 d8                	mov    eax,ebx
c001e6d1:	88 d9                	mov    cl,bl
c001e6d3:	d3 e7                	shl    edi,cl
c001e6d5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6d9:	89 f3                	mov    ebx,esi
c001e6db:	88 d1                	mov    cl,dl
c001e6dd:	d3 eb                	shr    ebx,cl
c001e6df:	89 c7                	mov    edi,eax
c001e6e1:	88 c1                	mov    cl,al
c001e6e3:	d3 e6                	shl    esi,cl
c001e6e5:	89 e8                	mov    eax,ebp
c001e6e7:	88 d1                	mov    cl,dl
c001e6e9:	d3 e8                	shr    eax,cl
c001e6eb:	09 f0                	or     eax,esi
c001e6ed:	89 f9                	mov    ecx,edi
c001e6ef:	d3 e5                	shl    ebp,cl
c001e6f1:	89 da                	mov    edx,ebx
c001e6f3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e6f7:	89 d3                	mov    ebx,edx
c001e6f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e6fd:	89 c6                	mov    esi,eax
c001e6ff:	89 d1                	mov    ecx,edx
c001e701:	39 d3                	cmp    ebx,edx
c001e703:	72 27                	jb     c001e72c <__moddi3+0x170>
c001e705:	74 21                	je     c001e728 <__moddi3+0x16c>
c001e707:	29 f5                	sub    ebp,esi
c001e709:	19 cb                	sbb    ebx,ecx
c001e70b:	89 de                	mov    esi,ebx
c001e70d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e711:	d3 e6                	shl    esi,cl
c001e713:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e717:	89 f9                	mov    ecx,edi
c001e719:	d3 ed                	shr    ebp,cl
c001e71b:	09 ee                	or     esi,ebp
c001e71d:	89 f0                	mov    eax,esi
c001e71f:	d3 eb                	shr    ebx,cl
c001e721:	89 da                	mov    edx,ebx
c001e723:	e9 e8 fe ff ff       	jmp    c001e610 <__moddi3+0x54>
c001e728:	39 c5                	cmp    ebp,eax
c001e72a:	73 db                	jae    c001e707 <__moddi3+0x14b>
c001e72c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e730:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e734:	89 d1                	mov    ecx,edx
c001e736:	89 c6                	mov    esi,eax
c001e738:	eb cd                	jmp    c001e707 <__moddi3+0x14b>
c001e73a:	66 90                	xchg   ax,ax

c001e73c <__udivdi3>:
c001e73c:	55                   	push   ebp
c001e73d:	57                   	push   edi
c001e73e:	56                   	push   esi
c001e73f:	53                   	push   ebx
c001e740:	83 ec 1c             	sub    esp,0x1c
c001e743:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e747:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e74b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e74f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e753:	85 d2                	test   edx,edx
c001e755:	75 41                	jne    c001e798 <__udivdi3+0x5c>
c001e757:	39 f7                	cmp    edi,esi
c001e759:	76 15                	jbe    c001e770 <__udivdi3+0x34>
c001e75b:	89 e8                	mov    eax,ebp
c001e75d:	89 f2                	mov    edx,esi
c001e75f:	f7 f7                	div    edi
c001e761:	31 db                	xor    ebx,ebx
c001e763:	89 da                	mov    edx,ebx
c001e765:	83 c4 1c             	add    esp,0x1c
c001e768:	5b                   	pop    ebx
c001e769:	5e                   	pop    esi
c001e76a:	5f                   	pop    edi
c001e76b:	5d                   	pop    ebp
c001e76c:	c3                   	ret    
c001e76d:	8d 76 00             	lea    esi,[esi+0x0]
c001e770:	89 f9                	mov    ecx,edi
c001e772:	85 ff                	test   edi,edi
c001e774:	75 0b                	jne    c001e781 <__udivdi3+0x45>
c001e776:	b8 01 00 00 00       	mov    eax,0x1
c001e77b:	31 d2                	xor    edx,edx
c001e77d:	f7 f7                	div    edi
c001e77f:	89 c1                	mov    ecx,eax
c001e781:	31 d2                	xor    edx,edx
c001e783:	89 f0                	mov    eax,esi
c001e785:	f7 f1                	div    ecx
c001e787:	89 c3                	mov    ebx,eax
c001e789:	89 e8                	mov    eax,ebp
c001e78b:	f7 f1                	div    ecx
c001e78d:	89 da                	mov    edx,ebx
c001e78f:	83 c4 1c             	add    esp,0x1c
c001e792:	5b                   	pop    ebx
c001e793:	5e                   	pop    esi
c001e794:	5f                   	pop    edi
c001e795:	5d                   	pop    ebp
c001e796:	c3                   	ret    
c001e797:	90                   	nop
c001e798:	39 f2                	cmp    edx,esi
c001e79a:	77 1c                	ja     c001e7b8 <__udivdi3+0x7c>
c001e79c:	0f bd da             	bsr    ebx,edx
c001e79f:	83 f3 1f             	xor    ebx,0x1f
c001e7a2:	75 24                	jne    c001e7c8 <__udivdi3+0x8c>
c001e7a4:	39 f2                	cmp    edx,esi
c001e7a6:	72 08                	jb     c001e7b0 <__udivdi3+0x74>
c001e7a8:	39 ef                	cmp    edi,ebp
c001e7aa:	0f 87 84 00 00 00    	ja     c001e834 <__udivdi3+0xf8>
c001e7b0:	b8 01 00 00 00       	mov    eax,0x1
c001e7b5:	eb ac                	jmp    c001e763 <__udivdi3+0x27>
c001e7b7:	90                   	nop
c001e7b8:	31 db                	xor    ebx,ebx
c001e7ba:	31 c0                	xor    eax,eax
c001e7bc:	89 da                	mov    edx,ebx
c001e7be:	83 c4 1c             	add    esp,0x1c
c001e7c1:	5b                   	pop    ebx
c001e7c2:	5e                   	pop    esi
c001e7c3:	5f                   	pop    edi
c001e7c4:	5d                   	pop    ebp
c001e7c5:	c3                   	ret    
c001e7c6:	66 90                	xchg   ax,ax
c001e7c8:	b8 20 00 00 00       	mov    eax,0x20
c001e7cd:	29 d8                	sub    eax,ebx
c001e7cf:	88 d9                	mov    cl,bl
c001e7d1:	d3 e2                	shl    edx,cl
c001e7d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7d7:	89 fa                	mov    edx,edi
c001e7d9:	88 c1                	mov    cl,al
c001e7db:	d3 ea                	shr    edx,cl
c001e7dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7e1:	09 d1                	or     ecx,edx
c001e7e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7e7:	88 d9                	mov    cl,bl
c001e7e9:	d3 e7                	shl    edi,cl
c001e7eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7ef:	89 f7                	mov    edi,esi
c001e7f1:	88 c1                	mov    cl,al
c001e7f3:	d3 ef                	shr    edi,cl
c001e7f5:	88 d9                	mov    cl,bl
c001e7f7:	d3 e6                	shl    esi,cl
c001e7f9:	89 ea                	mov    edx,ebp
c001e7fb:	88 c1                	mov    cl,al
c001e7fd:	d3 ea                	shr    edx,cl
c001e7ff:	09 d6                	or     esi,edx
c001e801:	89 f0                	mov    eax,esi
c001e803:	89 fa                	mov    edx,edi
c001e805:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e809:	89 d7                	mov    edi,edx
c001e80b:	89 c6                	mov    esi,eax
c001e80d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e811:	39 d7                	cmp    edi,edx
c001e813:	72 13                	jb     c001e828 <__udivdi3+0xec>
c001e815:	74 09                	je     c001e820 <__udivdi3+0xe4>
c001e817:	89 f0                	mov    eax,esi
c001e819:	31 db                	xor    ebx,ebx
c001e81b:	e9 43 ff ff ff       	jmp    c001e763 <__udivdi3+0x27>
c001e820:	88 d9                	mov    cl,bl
c001e822:	d3 e5                	shl    ebp,cl
c001e824:	39 c5                	cmp    ebp,eax
c001e826:	73 ef                	jae    c001e817 <__udivdi3+0xdb>
c001e828:	8d 46 ff             	lea    eax,[esi-0x1]
c001e82b:	31 db                	xor    ebx,ebx
c001e82d:	e9 31 ff ff ff       	jmp    c001e763 <__udivdi3+0x27>
c001e832:	66 90                	xchg   ax,ax
c001e834:	31 c0                	xor    eax,eax
c001e836:	e9 28 ff ff ff       	jmp    c001e763 <__udivdi3+0x27>
c001e83b:	90                   	nop

c001e83c <__umoddi3>:
c001e83c:	55                   	push   ebp
c001e83d:	57                   	push   edi
c001e83e:	56                   	push   esi
c001e83f:	53                   	push   ebx
c001e840:	83 ec 1c             	sub    esp,0x1c
c001e843:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e847:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e84b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e84f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e853:	89 da                	mov    edx,ebx
c001e855:	85 c0                	test   eax,eax
c001e857:	75 37                	jne    c001e890 <__umoddi3+0x54>
c001e859:	39 df                	cmp    edi,ebx
c001e85b:	76 13                	jbe    c001e870 <__umoddi3+0x34>
c001e85d:	89 f0                	mov    eax,esi
c001e85f:	f7 f7                	div    edi
c001e861:	89 d0                	mov    eax,edx
c001e863:	31 d2                	xor    edx,edx
c001e865:	83 c4 1c             	add    esp,0x1c
c001e868:	5b                   	pop    ebx
c001e869:	5e                   	pop    esi
c001e86a:	5f                   	pop    edi
c001e86b:	5d                   	pop    ebp
c001e86c:	c3                   	ret    
c001e86d:	8d 76 00             	lea    esi,[esi+0x0]
c001e870:	89 fd                	mov    ebp,edi
c001e872:	85 ff                	test   edi,edi
c001e874:	75 0b                	jne    c001e881 <__umoddi3+0x45>
c001e876:	b8 01 00 00 00       	mov    eax,0x1
c001e87b:	31 d2                	xor    edx,edx
c001e87d:	f7 f7                	div    edi
c001e87f:	89 c5                	mov    ebp,eax
c001e881:	89 d8                	mov    eax,ebx
c001e883:	31 d2                	xor    edx,edx
c001e885:	f7 f5                	div    ebp
c001e887:	89 f0                	mov    eax,esi
c001e889:	f7 f5                	div    ebp
c001e88b:	89 d0                	mov    eax,edx
c001e88d:	eb d4                	jmp    c001e863 <__umoddi3+0x27>
c001e88f:	90                   	nop
c001e890:	89 f1                	mov    ecx,esi
c001e892:	39 d8                	cmp    eax,ebx
c001e894:	76 0a                	jbe    c001e8a0 <__umoddi3+0x64>
c001e896:	89 f0                	mov    eax,esi
c001e898:	83 c4 1c             	add    esp,0x1c
c001e89b:	5b                   	pop    ebx
c001e89c:	5e                   	pop    esi
c001e89d:	5f                   	pop    edi
c001e89e:	5d                   	pop    ebp
c001e89f:	c3                   	ret    
c001e8a0:	0f bd e8             	bsr    ebp,eax
c001e8a3:	83 f5 1f             	xor    ebp,0x1f
c001e8a6:	75 1c                	jne    c001e8c4 <__umoddi3+0x88>
c001e8a8:	39 d8                	cmp    eax,ebx
c001e8aa:	72 04                	jb     c001e8b0 <__umoddi3+0x74>
c001e8ac:	39 f7                	cmp    edi,esi
c001e8ae:	77 08                	ja     c001e8b8 <__umoddi3+0x7c>
c001e8b0:	89 da                	mov    edx,ebx
c001e8b2:	29 fe                	sub    esi,edi
c001e8b4:	19 c2                	sbb    edx,eax
c001e8b6:	89 f1                	mov    ecx,esi
c001e8b8:	89 c8                	mov    eax,ecx
c001e8ba:	83 c4 1c             	add    esp,0x1c
c001e8bd:	5b                   	pop    ebx
c001e8be:	5e                   	pop    esi
c001e8bf:	5f                   	pop    edi
c001e8c0:	5d                   	pop    ebp
c001e8c1:	c3                   	ret    
c001e8c2:	66 90                	xchg   ax,ax
c001e8c4:	ba 20 00 00 00       	mov    edx,0x20
c001e8c9:	29 ea                	sub    edx,ebp
c001e8cb:	89 e9                	mov    ecx,ebp
c001e8cd:	d3 e0                	shl    eax,cl
c001e8cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8d3:	89 f8                	mov    eax,edi
c001e8d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e8d9:	88 d1                	mov    cl,dl
c001e8db:	d3 e8                	shr    eax,cl
c001e8dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e8e1:	09 c1                	or     ecx,eax
c001e8e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e8e7:	89 e9                	mov    ecx,ebp
c001e8e9:	d3 e7                	shl    edi,cl
c001e8eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e8ef:	89 d8                	mov    eax,ebx
c001e8f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e8f5:	88 d1                	mov    cl,dl
c001e8f7:	d3 e8                	shr    eax,cl
c001e8f9:	89 c7                	mov    edi,eax
c001e8fb:	89 e9                	mov    ecx,ebp
c001e8fd:	d3 e3                	shl    ebx,cl
c001e8ff:	89 f0                	mov    eax,esi
c001e901:	88 d1                	mov    cl,dl
c001e903:	d3 e8                	shr    eax,cl
c001e905:	09 d8                	or     eax,ebx
c001e907:	89 e9                	mov    ecx,ebp
c001e909:	d3 e6                	shl    esi,cl
c001e90b:	89 f3                	mov    ebx,esi
c001e90d:	89 fa                	mov    edx,edi
c001e90f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e913:	89 d1                	mov    ecx,edx
c001e915:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e919:	89 c6                	mov    esi,eax
c001e91b:	89 d7                	mov    edi,edx
c001e91d:	39 d1                	cmp    ecx,edx
c001e91f:	72 27                	jb     c001e948 <__umoddi3+0x10c>
c001e921:	74 21                	je     c001e944 <__umoddi3+0x108>
c001e923:	89 ca                	mov    edx,ecx
c001e925:	29 f3                	sub    ebx,esi
c001e927:	19 fa                	sbb    edx,edi
c001e929:	89 d0                	mov    eax,edx
c001e92b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e92f:	d3 e0                	shl    eax,cl
c001e931:	89 e9                	mov    ecx,ebp
c001e933:	d3 eb                	shr    ebx,cl
c001e935:	09 d8                	or     eax,ebx
c001e937:	d3 ea                	shr    edx,cl
c001e939:	83 c4 1c             	add    esp,0x1c
c001e93c:	5b                   	pop    ebx
c001e93d:	5e                   	pop    esi
c001e93e:	5f                   	pop    edi
c001e93f:	5d                   	pop    ebp
c001e940:	c3                   	ret    
c001e941:	8d 76 00             	lea    esi,[esi+0x0]
c001e944:	39 c3                	cmp    ebx,eax
c001e946:	73 db                	jae    c001e923 <__umoddi3+0xe7>
c001e948:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e94c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e950:	89 d7                	mov    edi,edx
c001e952:	89 c6                	mov    esi,eax
c001e954:	eb cd                	jmp    c001e923 <__umoddi3+0xe7>
c001e956:	66 90                	xchg   ax,ax
c001e958:	66 90                	xchg   ax,ax
c001e95a:	66 90                	xchg   ax,ax
c001e95c:	66 90                	xchg   ax,ax
c001e95e:	66 90                	xchg   ax,ax

c001e960 <fabs>:
c001e960:	83 ec 0c             	sub    esp,0xc
c001e963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e967:	89 04 24             	mov    DWORD PTR [esp],eax
c001e96a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e96e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e973:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e977:	dd 04 24             	fld    QWORD PTR [esp]
c001e97a:	83 c4 0c             	add    esp,0xc
c001e97d:	c3                   	ret    
c001e97e:	66 90                	xchg   ax,ax

c001e980 <lrint>:
c001e980:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e984:	83 ec 04             	sub    esp,0x4
c001e987:	db 1c 24             	fistp  DWORD PTR [esp]
c001e98a:	58                   	pop    eax
c001e98b:	c3                   	ret    

c001e98c <lrintf>:
c001e98c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e990:	83 ec 04             	sub    esp,0x4
c001e993:	db 1c 24             	fistp  DWORD PTR [esp]
c001e996:	58                   	pop    eax
c001e997:	c3                   	ret    

Disassembly of section .init:

c001e998 <_init>:
c001e998:	55                   	push   ebp
c001e999:	89 e5                	mov    ebp,esp
c001e99b:	e8 78 17 fe ff       	call   c0000118 <frame_dummy>
c001e9a0:	e8 a3 fa ff ff       	call   c001e448 <__do_global_ctors_aux>
c001e9a5:	5d                   	pop    ebp
c001e9a6:	c3                   	ret    

Disassembly of section .fini:

c001e9a7 <_fini>:
c001e9a7:	55                   	push   ebp
c001e9a8:	89 e5                	mov    ebp,esp
c001e9aa:	e8 f9 16 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e9af:	5d                   	pop    ebp
c001e9b0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e9b2 <Computer::~Computer()>:
c001e9b2:	83 ec 0c             	sub    esp,0xc
c001e9b5:	ba 18 89 03 c0       	mov    edx,0xc0038918
c001e9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9be:	89 10                	mov    DWORD PTR [eax],edx
c001e9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c4:	83 ec 0c             	sub    esp,0xc
c001e9c7:	50                   	push   eax
c001e9c8:	e8 79 4c ff ff       	call   c0013646 <Device::~Device()>
c001e9cd:	83 c4 10             	add    esp,0x10
c001e9d0:	90                   	nop
c001e9d1:	83 c4 0c             	add    esp,0xc
c001e9d4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e9d6 <Computer::~Computer()>:
c001e9d6:	83 ec 0c             	sub    esp,0xc
c001e9d9:	83 ec 0c             	sub    esp,0xc
c001e9dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9e0:	e8 cd ff ff ff       	call   c001e9b2 <Computer::~Computer()>
c001e9e5:	83 c4 10             	add    esp,0x10
c001e9e8:	83 ec 08             	sub    esp,0x8
c001e9eb:	68 ec 01 00 00       	push   0x1ec
c001e9f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9f4:	e8 b0 3a ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001e9f9:	83 c4 10             	add    esp,0x10
c001e9fc:	83 c4 0c             	add    esp,0xc
c001e9ff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ea00 <idleCommon()>:
c001ea00:	83 ec 0c             	sub    esp,0xc
c001ea03:	e8 84 f9 fe ff       	call   c000e38c <lockScheduler()>
c001ea08:	e8 b3 fc fe ff       	call   c000e6c0 <schedule()>
c001ea0d:	83 c4 0c             	add    esp,0xc
c001ea10:	e9 79 f9 fe ff       	jmp    c000e38e <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001ea15 <CPU::readCR0()>:
c001ea15:	83 ec 10             	sub    esp,0x10
c001ea18:	0f 20 c0             	mov    eax,cr0
c001ea1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea23:	83 c4 10             	add    esp,0x10
c001ea26:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001ea27 <CPU::readCR2()>:
c001ea27:	83 ec 10             	sub    esp,0x10
c001ea2a:	0f 20 d0             	mov    eax,cr2
c001ea2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea35:	83 c4 10             	add    esp,0x10
c001ea38:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001ea39 <CPU::readCR3()>:
c001ea39:	83 ec 10             	sub    esp,0x10
c001ea3c:	0f 20 d8             	mov    eax,cr3
c001ea3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea47:	83 c4 10             	add    esp,0x10
c001ea4a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001ea4b <CPU::readCR4()>:
c001ea4b:	83 ec 10             	sub    esp,0x10
c001ea4e:	0f 20 e0             	mov    eax,cr4
c001ea51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea59:	83 c4 10             	add    esp,0x10
c001ea5c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001ea5d <CPU::writeCR3(unsigned long)>:
c001ea5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea61:	0f 22 d8             	mov    cr3,eax
c001ea64:	90                   	nop
c001ea65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ea66 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ea66:	90                   	nop
c001ea67:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ea68 <ThreadControlBlock::ThreadControlBlock()>:
c001ea68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea6c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea77:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ea7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea82:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ea89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea8d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001ea94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea98:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaa0:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001eaa4:	90                   	nop
c001eaa5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001eaa6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001eaa6:	83 ec 0c             	sub    esp,0xc
c001eaa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eacd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ead3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eae9:	83 ec 0c             	sub    esp,0xc
c001eaec:	68 b0 92 03 c0       	push   0xc00392b0
c001eaf1:	e8 f4 e3 fe ff       	call   c000ceea <kprintf(char const*, ...)>
c001eaf6:	83 c4 10             	add    esp,0x10
c001eaf9:	90                   	nop
c001eafa:	83 c4 0c             	add    esp,0xc
c001eafd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001eafe <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001eafe:	83 ec 0c             	sub    esp,0xc
c001eb01:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eb06:	75 10                	jne    c001eb18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001eb08:	83 ec 0c             	sub    esp,0xc
c001eb0b:	68 cc 92 03 c0       	push   0xc00392cc
c001eb10:	e8 f3 e4 fe ff       	call   c000d008 <panic(char const*)>
c001eb15:	83 c4 10             	add    esp,0x10
c001eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb1e:	85 c0                	test   eax,eax
c001eb20:	74 34                	je     c001eb56 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb29:	85 c0                	test   eax,eax
c001eb2b:	74 29                	je     c001eb56 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb38:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb4d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb54:	eb 65                	jmp    c001ebbb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5a:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb5c:	85 c0                	test   eax,eax
c001eb5e:	75 4b                	jne    c001ebab <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb67:	85 c0                	test   eax,eax
c001eb69:	75 40                	jne    c001ebab <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eb6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb73:	89 10                	mov    DWORD PTR [eax],edx
c001eb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb87:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb95:	85 c0                	test   eax,eax
c001eb97:	74 22                	je     c001ebbb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb99:	83 ec 0c             	sub    esp,0xc
c001eb9c:	68 ee 92 03 c0       	push   0xc00392ee
c001eba1:	e8 62 e4 fe ff       	call   c000d008 <panic(char const*)>
c001eba6:	83 c4 10             	add    esp,0x10
c001eba9:	eb 10                	jmp    c001ebbb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ebab:	83 ec 0c             	sub    esp,0xc
c001ebae:	68 f8 92 03 c0       	push   0xc00392f8
c001ebb3:	e8 50 e4 fe ff       	call   c000d008 <panic(char const*)>
c001ebb8:	83 c4 10             	add    esp,0x10
c001ebbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebc2:	8d 50 01             	lea    edx,[eax+0x1]
c001ebc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebcc:	90                   	nop
c001ebcd:	83 c4 0c             	add    esp,0xc
c001ebd0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ebd2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ebd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd8:	85 c0                	test   eax,eax
c001ebda:	75 0e                	jne    c001ebea <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebe3:	85 c0                	test   eax,eax
c001ebe5:	75 03                	jne    c001ebea <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebe7:	b0 01                	mov    al,0x1
c001ebe9:	c3                   	ret    
c001ebea:	b0 00                	mov    al,0x0
c001ebec:	90                   	nop
c001ebed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ebee <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ebee:	83 ec 0c             	sub    esp,0xc
c001ebf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf7:	85 c0                	test   eax,eax
c001ebf9:	75 15                	jne    c001ec10 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001ebfb:	83 ec 0c             	sub    esp,0xc
c001ebfe:	68 04 93 03 c0       	push   0xc0039304
c001ec03:	e8 00 e4 fe ff       	call   c000d008 <panic(char const*)>
c001ec08:	83 c4 10             	add    esp,0x10
c001ec0b:	e9 88 00 00 00       	jmp    c001ec98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001ec10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec17:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec1a:	85 c0                	test   eax,eax
c001ec1c:	0f 95 c0             	setne  al
c001ec1f:	84 c0                	test   al,al
c001ec21:	74 10                	je     c001ec33 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001ec23:	83 ec 0c             	sub    esp,0xc
c001ec26:	68 4f 93 03 c0       	push   0xc003934f
c001ec2b:	e8 d8 e3 fe ff       	call   c000d008 <panic(char const*)>
c001ec30:	83 c4 10             	add    esp,0x10
c001ec33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec3c:	85 c0                	test   eax,eax
c001ec3e:	0f 94 c0             	sete   al
c001ec41:	84 c0                	test   al,al
c001ec43:	74 33                	je     c001ec78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001ec45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec61:	83 f8 01             	cmp    eax,0x1
c001ec64:	74 21                	je     c001ec87 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ec66:	83 ec 0c             	sub    esp,0xc
c001ec69:	68 28 93 03 c0       	push   0xc0039328
c001ec6e:	e8 95 e3 fe ff       	call   c000d008 <panic(char const*)>
c001ec73:	83 c4 10             	add    esp,0x10
c001ec76:	eb 0f                	jmp    c001ec87 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ec78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec7e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec85:	89 10                	mov    DWORD PTR [eax],edx
c001ec87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec8e:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec95:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec98:	83 c4 0c             	add    esp,0xc
c001ec9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eca2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001eca4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001eca4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eca8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ecab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ecac <LinkedList<UnixFile>::~LinkedList()>:
c001ecac:	90                   	nop
c001ecad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ecae <LinkedList<UnixFile>::LinkedList()>:
c001ecae:	83 ec 0c             	sub    esp,0xc
c001ecb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ecbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ecdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ece6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecea:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecf1:	83 ec 0c             	sub    esp,0xc
c001ecf4:	68 b0 92 03 c0       	push   0xc00392b0
c001ecf9:	e8 ec e1 fe ff       	call   c000ceea <kprintf(char const*, ...)>
c001ecfe:	83 c4 10             	add    esp,0x10
c001ed01:	90                   	nop
c001ed02:	83 c4 0c             	add    esp,0xc
c001ed05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ed06 <LinkedList<UnixFile>::getFirstElement()>:
c001ed06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed0a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed0c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ed0e <LinkedList<UnixFile>::removeFirst()>:
c001ed0e:	83 ec 0c             	sub    esp,0xc
c001ed11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed15:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed17:	85 c0                	test   eax,eax
c001ed19:	75 12                	jne    c001ed2d <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ed1b:	83 ec 0c             	sub    esp,0xc
c001ed1e:	68 04 93 03 c0       	push   0xc0039304
c001ed23:	e8 e0 e2 fe ff       	call   c000d008 <panic(char const*)>
c001ed28:	83 c4 10             	add    esp,0x10
c001ed2b:	eb 7e                	jmp    c001edab <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ed2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed37:	85 c0                	test   eax,eax
c001ed39:	74 10                	je     c001ed4b <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ed3b:	83 ec 0c             	sub    esp,0xc
c001ed3e:	68 4f 93 03 c0       	push   0xc003934f
c001ed43:	e8 c0 e2 fe ff       	call   c000d008 <panic(char const*)>
c001ed48:	83 c4 10             	add    esp,0x10
c001ed4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed54:	85 c0                	test   eax,eax
c001ed56:	75 33                	jne    c001ed8b <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ed58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed74:	83 f8 01             	cmp    eax,0x1
c001ed77:	74 21                	je     c001ed9a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ed79:	83 ec 0c             	sub    esp,0xc
c001ed7c:	68 28 93 03 c0       	push   0xc0039328
c001ed81:	e8 82 e2 fe ff       	call   c000d008 <panic(char const*)>
c001ed86:	83 c4 10             	add    esp,0x10
c001ed89:	eb 0f                	jmp    c001ed9a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ed8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed91:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ed94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed98:	89 10                	mov    DWORD PTR [eax],edx
c001ed9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eda1:	8d 50 ff             	lea    edx,[eax-0x1]
c001eda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001edab:	83 c4 0c             	add    esp,0xc
c001edae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001edb0 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001edb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001edb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001edb8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001edb8:	83 ec 1c             	sub    esp,0x1c
c001edbb:	83 ec 0c             	sub    esp,0xc
c001edbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001edc2:	e8 3f ff ff ff       	call   c001ed06 <LinkedList<UnixFile>::getFirstElement()>
c001edc7:	83 c4 10             	add    esp,0x10
c001edca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001edd3:	74 43                	je     c001ee18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001edd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edd9:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001eddd:	75 20                	jne    c001edff <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001eddf:	83 ec 0c             	sub    esp,0xc
c001ede2:	68 f4 94 03 c0       	push   0xc00394f4
c001ede7:	e8 fe e0 fe ff       	call   c000ceea <kprintf(char const*, ...)>
c001edec:	83 c4 10             	add    esp,0x10
c001edef:	83 ec 0c             	sub    esp,0xc
c001edf2:	68 0b 95 03 c0       	push   0xc003950b
c001edf7:	e8 0c e2 fe ff       	call   c000d008 <panic(char const*)>
c001edfc:	83 c4 10             	add    esp,0x10
c001edff:	83 ec 08             	sub    esp,0x8
c001ee02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ee06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ee0a:	e8 a1 ff ff ff       	call   c001edb0 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001ee0f:	83 c4 10             	add    esp,0x10
c001ee12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee16:	eb b6                	jmp    c001edce <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001ee18:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ee1d:	75 10                	jne    c001ee2f <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001ee1f:	83 ec 0c             	sub    esp,0xc
c001ee22:	68 cc 92 03 c0       	push   0xc00392cc
c001ee27:	e8 dc e1 fe ff       	call   c000d008 <panic(char const*)>
c001ee2c:	83 c4 10             	add    esp,0x10
c001ee2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee33:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee35:	85 c0                	test   eax,eax
c001ee37:	74 34                	je     c001ee6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ee39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee40:	85 c0                	test   eax,eax
c001ee42:	74 29                	je     c001ee6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ee44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee4b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee4f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee6b:	eb 65                	jmp    c001eed2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee71:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee73:	85 c0                	test   eax,eax
c001ee75:	75 4b                	jne    c001eec2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ee77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee7e:	85 c0                	test   eax,eax
c001ee80:	75 40                	jne    c001eec2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ee82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee86:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee8a:	89 10                	mov    DWORD PTR [eax],edx
c001ee8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee90:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee9e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eea9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeac:	85 c0                	test   eax,eax
c001eeae:	74 22                	je     c001eed2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001eeb0:	83 ec 0c             	sub    esp,0xc
c001eeb3:	68 ee 92 03 c0       	push   0xc00392ee
c001eeb8:	e8 4b e1 fe ff       	call   c000d008 <panic(char const*)>
c001eebd:	83 c4 10             	add    esp,0x10
c001eec0:	eb 10                	jmp    c001eed2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001eec2:	83 ec 0c             	sub    esp,0xc
c001eec5:	68 f8 92 03 c0       	push   0xc00392f8
c001eeca:	e8 39 e1 fe ff       	call   c000d008 <panic(char const*)>
c001eecf:	83 c4 10             	add    esp,0x10
c001eed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eed6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eed9:	8d 50 01             	lea    edx,[eax+0x1]
c001eedc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eee0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eee3:	90                   	nop
c001eee4:	83 c4 1c             	add    esp,0x1c
c001eee7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001eee8 <DriverlessDevice::~DriverlessDevice()>:
c001eee8:	ba a4 9a 03 c0       	mov    edx,0xc0039aa4
c001eeed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef1:	89 10                	mov    DWORD PTR [eax],edx
c001eef3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef7:	50                   	push   eax
c001eef8:	e8 49 47 ff ff       	call   c0013646 <Device::~Device()>
c001eefd:	83 c4 04             	add    esp,0x4
c001ef00:	90                   	nop
c001ef01:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ef02 <DriverlessDevice::~DriverlessDevice()>:
c001ef02:	83 ec 0c             	sub    esp,0xc
c001ef05:	83 ec 0c             	sub    esp,0xc
c001ef08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef0c:	e8 d7 ff ff ff       	call   c001eee8 <DriverlessDevice::~DriverlessDevice()>
c001ef11:	83 c4 10             	add    esp,0x10
c001ef14:	83 ec 08             	sub    esp,0x8
c001ef17:	68 58 01 00 00       	push   0x158
c001ef1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef20:	e8 84 35 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001ef25:	83 c4 10             	add    esp,0x10
c001ef28:	83 c4 0c             	add    esp,0xc
c001ef2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ef2c <LinkedList<Device>::addElement(Device*)>:
c001ef2c:	83 ec 0c             	sub    esp,0xc
c001ef2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ef34:	75 10                	jne    c001ef46 <LinkedList<Device>::addElement(Device*)+0x1a>
c001ef36:	83 ec 0c             	sub    esp,0xc
c001ef39:	68 cc 92 03 c0       	push   0xc00392cc
c001ef3e:	e8 c5 e0 fe ff       	call   c000d008 <panic(char const*)>
c001ef43:	83 c4 10             	add    esp,0x10
c001ef46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef4c:	85 c0                	test   eax,eax
c001ef4e:	74 3a                	je     c001ef8a <LinkedList<Device>::addElement(Device*)+0x5e>
c001ef50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef57:	85 c0                	test   eax,eax
c001ef59:	74 2f                	je     c001ef8a <LinkedList<Device>::addElement(Device*)+0x5e>
c001ef5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef66:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ef6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef7e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef88:	eb 68                	jmp    c001eff2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef90:	85 c0                	test   eax,eax
c001ef92:	75 4e                	jne    c001efe2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef9b:	85 c0                	test   eax,eax
c001ef9d:	75 43                	jne    c001efe2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efa7:	89 10                	mov    DWORD PTR [eax],edx
c001efa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efb1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001efb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001efbb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001efc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efcc:	85 c0                	test   eax,eax
c001efce:	74 22                	je     c001eff2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001efd0:	83 ec 0c             	sub    esp,0xc
c001efd3:	68 ee 92 03 c0       	push   0xc00392ee
c001efd8:	e8 2b e0 fe ff       	call   c000d008 <panic(char const*)>
c001efdd:	83 c4 10             	add    esp,0x10
c001efe0:	eb 10                	jmp    c001eff2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001efe2:	83 ec 0c             	sub    esp,0xc
c001efe5:	68 f8 92 03 c0       	push   0xc00392f8
c001efea:	e8 19 e0 fe ff       	call   c000d008 <panic(char const*)>
c001efef:	83 c4 10             	add    esp,0x10
c001eff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eff9:	8d 50 01             	lea    edx,[eax+0x1]
c001effc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f000:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f003:	90                   	nop
c001f004:	83 c4 0c             	add    esp,0xc
c001f007:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f008 <LinkedList<Device>::LinkedList()>:
c001f008:	83 ec 0c             	sub    esp,0xc
c001f00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f019:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f024:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f039:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f044:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f04b:	83 ec 0c             	sub    esp,0xc
c001f04e:	68 b0 92 03 c0       	push   0xc00392b0
c001f053:	e8 92 de fe ff       	call   c000ceea <kprintf(char const*, ...)>
c001f058:	83 c4 10             	add    esp,0x10
c001f05b:	90                   	nop
c001f05c:	83 c4 0c             	add    esp,0xc
c001f05f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f060 <CPU::readDR0()>:
c001f060:	83 ec 10             	sub    esp,0x10
c001f063:	0f 21 c0             	mov    eax,db0
c001f066:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f06a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f06e:	83 c4 10             	add    esp,0x10
c001f071:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f072 <CPU::readDR1()>:
c001f072:	83 ec 10             	sub    esp,0x10
c001f075:	0f 21 c8             	mov    eax,db1
c001f078:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f07c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f080:	83 c4 10             	add    esp,0x10
c001f083:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f084 <CPU::readDR2()>:
c001f084:	83 ec 10             	sub    esp,0x10
c001f087:	0f 21 d0             	mov    eax,db2
c001f08a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f08e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f092:	83 c4 10             	add    esp,0x10
c001f095:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f096 <CPU::readDR3()>:
c001f096:	83 ec 10             	sub    esp,0x10
c001f099:	0f 21 d8             	mov    eax,db3
c001f09c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0a4:	83 c4 10             	add    esp,0x10
c001f0a7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f0a8 <CPU::readDR6()>:
c001f0a8:	83 ec 10             	sub    esp,0x10
c001f0ab:	0f 21 f0             	mov    eax,db6
c001f0ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0b6:	83 c4 10             	add    esp,0x10
c001f0b9:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f0ba <CPU::readDR7()>:
c001f0ba:	83 ec 10             	sub    esp,0x10
c001f0bd:	0f 21 f8             	mov    eax,db7
c001f0c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0c8:	83 c4 10             	add    esp,0x10
c001f0cb:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f0cc <ACPI::~ACPI()>:
c001f0cc:	83 ec 0c             	sub    esp,0xc
c001f0cf:	ba e8 a1 03 c0       	mov    edx,0xc003a1e8
c001f0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d8:	89 10                	mov    DWORD PTR [eax],edx
c001f0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0de:	83 ec 0c             	sub    esp,0xc
c001f0e1:	50                   	push   eax
c001f0e2:	e8 5f 45 ff ff       	call   c0013646 <Device::~Device()>
c001f0e7:	83 c4 10             	add    esp,0x10
c001f0ea:	90                   	nop
c001f0eb:	83 c4 0c             	add    esp,0xc
c001f0ee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f0f0 <ACPI::~ACPI()>:
c001f0f0:	83 ec 0c             	sub    esp,0xc
c001f0f3:	83 ec 0c             	sub    esp,0xc
c001f0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0fa:	e8 cd ff ff ff       	call   c001f0cc <ACPI::~ACPI()>
c001f0ff:	83 c4 10             	add    esp,0x10
c001f102:	83 ec 08             	sub    esp,0x8
c001f105:	68 68 22 00 00       	push   0x2268
c001f10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f10e:	e8 96 33 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f113:	83 c4 10             	add    esp,0x10
c001f116:	83 c4 0c             	add    esp,0xc
c001f119:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f11a <CPU::~CPU()>:
c001f11a:	83 ec 0c             	sub    esp,0xc
c001f11d:	ba 38 a4 03 c0       	mov    edx,0xc003a438
c001f122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f126:	89 10                	mov    DWORD PTR [eax],edx
c001f128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12c:	83 ec 0c             	sub    esp,0xc
c001f12f:	50                   	push   eax
c001f130:	e8 11 45 ff ff       	call   c0013646 <Device::~Device()>
c001f135:	83 c4 10             	add    esp,0x10
c001f138:	90                   	nop
c001f139:	83 c4 0c             	add    esp,0xc
c001f13c:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f13e <CPU::~CPU()>:
c001f13e:	83 ec 0c             	sub    esp,0xc
c001f141:	83 ec 0c             	sub    esp,0xc
c001f144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f148:	e8 cd ff ff ff       	call   c001f11a <CPU::~CPU()>
c001f14d:	83 c4 10             	add    esp,0x10
c001f150:	83 ec 08             	sub    esp,0x8
c001f153:	68 98 11 00 00       	push   0x1198
c001f158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f15c:	e8 48 33 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f161:	83 c4 10             	add    esp,0x10
c001f164:	83 c4 0c             	add    esp,0xc
c001f167:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f168 <CPU::writeDR7(unsigned long)>:
c001f168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f16c:	0f 23 f8             	mov    db7,eax
c001f16f:	90                   	nop
c001f170:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f171 <CPU::writeCR4(unsigned long)>:
c001f171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f175:	0f 22 e0             	mov    cr4,eax
c001f178:	90                   	nop
c001f179:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f17a <PCI::~PCI()>:
c001f17a:	83 ec 0c             	sub    esp,0xc
c001f17d:	ba d4 a7 03 c0       	mov    edx,0xc003a7d4
c001f182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f186:	89 10                	mov    DWORD PTR [eax],edx
c001f188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f18c:	83 ec 0c             	sub    esp,0xc
c001f18f:	50                   	push   eax
c001f190:	e8 c1 3e ff ff       	call   c0013056 <Bus::~Bus()>
c001f195:	83 c4 10             	add    esp,0x10
c001f198:	90                   	nop
c001f199:	83 c4 0c             	add    esp,0xc
c001f19c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f19e <PCI::~PCI()>:
c001f19e:	83 ec 0c             	sub    esp,0xc
c001f1a1:	83 ec 0c             	sub    esp,0xc
c001f1a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1a8:	e8 cd ff ff ff       	call   c001f17a <PCI::~PCI()>
c001f1ad:	83 c4 10             	add    esp,0x10
c001f1b0:	83 ec 08             	sub    esp,0x8
c001f1b3:	68 58 01 00 00       	push   0x158
c001f1b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1bc:	e8 e8 32 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f1c1:	83 c4 10             	add    esp,0x10
c001f1c4:	83 c4 0c             	add    esp,0xc
c001f1c7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f1c8 <IDE::~IDE()>:
c001f1c8:	83 ec 0c             	sub    esp,0xc
c001f1cb:	ba a0 aa 03 c0       	mov    edx,0xc003aaa0
c001f1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d4:	89 10                	mov    DWORD PTR [eax],edx
c001f1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1da:	83 ec 0c             	sub    esp,0xc
c001f1dd:	50                   	push   eax
c001f1de:	e8 79 49 ff ff       	call   c0013b5c <HardDiskController::~HardDiskController()>
c001f1e3:	83 c4 10             	add    esp,0x10
c001f1e6:	90                   	nop
c001f1e7:	83 c4 0c             	add    esp,0xc
c001f1ea:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f1ec <IDE::~IDE()>:
c001f1ec:	83 ec 0c             	sub    esp,0xc
c001f1ef:	83 ec 0c             	sub    esp,0xc
c001f1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f6:	e8 cd ff ff ff       	call   c001f1c8 <IDE::~IDE()>
c001f1fb:	83 c4 10             	add    esp,0x10
c001f1fe:	83 ec 08             	sub    esp,0x8
c001f201:	68 70 02 00 00       	push   0x270
c001f206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f20a:	e8 9a 32 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f20f:	83 c4 10             	add    esp,0x10
c001f212:	83 c4 0c             	add    esp,0xc
c001f215:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f216 <ATA::~ATA()>:
c001f216:	83 ec 0c             	sub    esp,0xc
c001f219:	ba f0 aa 03 c0       	mov    edx,0xc003aaf0
c001f21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f222:	89 10                	mov    DWORD PTR [eax],edx
c001f224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f228:	83 ec 0c             	sub    esp,0xc
c001f22b:	50                   	push   eax
c001f22c:	e8 09 4a ff ff       	call   c0013c3a <PhysicalDisk::~PhysicalDisk()>
c001f231:	83 c4 10             	add    esp,0x10
c001f234:	90                   	nop
c001f235:	83 c4 0c             	add    esp,0xc
c001f238:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f23a <ATA::~ATA()>:
c001f23a:	83 ec 0c             	sub    esp,0xc
c001f23d:	83 ec 0c             	sub    esp,0xc
c001f240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f244:	e8 cd ff ff ff       	call   c001f216 <ATA::~ATA()>
c001f249:	83 c4 10             	add    esp,0x10
c001f24c:	83 ec 08             	sub    esp,0x8
c001f24f:	68 7c 01 00 00       	push   0x17c
c001f254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f258:	e8 4c 32 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f25d:	83 c4 10             	add    esp,0x10
c001f260:	83 c4 0c             	add    esp,0xc
c001f263:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f264 <ATAPI::~ATAPI()>:
c001f264:	83 ec 0c             	sub    esp,0xc
c001f267:	ba 5c ab 03 c0       	mov    edx,0xc003ab5c
c001f26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f270:	89 10                	mov    DWORD PTR [eax],edx
c001f272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f276:	83 ec 0c             	sub    esp,0xc
c001f279:	50                   	push   eax
c001f27a:	e8 bb 49 ff ff       	call   c0013c3a <PhysicalDisk::~PhysicalDisk()>
c001f27f:	83 c4 10             	add    esp,0x10
c001f282:	90                   	nop
c001f283:	83 c4 0c             	add    esp,0xc
c001f286:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f288 <ATAPI::~ATAPI()>:
c001f288:	83 ec 0c             	sub    esp,0xc
c001f28b:	83 ec 0c             	sub    esp,0xc
c001f28e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f292:	e8 cd ff ff ff       	call   c001f264 <ATAPI::~ATAPI()>
c001f297:	83 c4 10             	add    esp,0x10
c001f29a:	83 ec 08             	sub    esp,0x8
c001f29d:	68 80 01 00 00       	push   0x180
c001f2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2a6:	e8 fe 31 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f2ab:	83 c4 10             	add    esp,0x10
c001f2ae:	83 c4 0c             	add    esp,0xc
c001f2b1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f2b2 <AVX::~AVX()>:
c001f2b2:	83 ec 0c             	sub    esp,0xc
c001f2b5:	ba 98 ab 03 c0       	mov    edx,0xc003ab98
c001f2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2be:	89 10                	mov    DWORD PTR [eax],edx
c001f2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c4:	83 ec 0c             	sub    esp,0xc
c001f2c7:	50                   	push   eax
c001f2c8:	e8 f1 49 ff ff       	call   c0013cbe <FPU::~FPU()>
c001f2cd:	83 c4 10             	add    esp,0x10
c001f2d0:	90                   	nop
c001f2d1:	83 c4 0c             	add    esp,0xc
c001f2d4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f2d6 <AVX::~AVX()>:
c001f2d6:	83 ec 0c             	sub    esp,0xc
c001f2d9:	83 ec 0c             	sub    esp,0xc
c001f2dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2e0:	e8 cd ff ff ff       	call   c001f2b2 <AVX::~AVX()>
c001f2e5:	83 c4 10             	add    esp,0x10
c001f2e8:	83 ec 08             	sub    esp,0x8
c001f2eb:	68 58 01 00 00       	push   0x158
c001f2f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2f4:	e8 b0 31 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f2f9:	83 c4 10             	add    esp,0x10
c001f2fc:	83 c4 0c             	add    esp,0xc
c001f2ff:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f300 <MMX::~MMX()>:
c001f300:	83 ec 0c             	sub    esp,0xc
c001f303:	ba d8 ab 03 c0       	mov    edx,0xc003abd8
c001f308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f30c:	89 10                	mov    DWORD PTR [eax],edx
c001f30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f312:	83 ec 0c             	sub    esp,0xc
c001f315:	50                   	push   eax
c001f316:	e8 a3 49 ff ff       	call   c0013cbe <FPU::~FPU()>
c001f31b:	83 c4 10             	add    esp,0x10
c001f31e:	90                   	nop
c001f31f:	83 c4 0c             	add    esp,0xc
c001f322:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f324 <MMX::~MMX()>:
c001f324:	83 ec 0c             	sub    esp,0xc
c001f327:	83 ec 0c             	sub    esp,0xc
c001f32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f32e:	e8 cd ff ff ff       	call   c001f300 <MMX::~MMX()>
c001f333:	83 c4 10             	add    esp,0x10
c001f336:	83 ec 08             	sub    esp,0x8
c001f339:	68 58 01 00 00       	push   0x158
c001f33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f342:	e8 62 31 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f347:	83 c4 10             	add    esp,0x10
c001f34a:	83 c4 0c             	add    esp,0xc
c001f34d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f34e <SSE::~SSE()>:
c001f34e:	83 ec 0c             	sub    esp,0xc
c001f351:	ba 18 ac 03 c0       	mov    edx,0xc003ac18
c001f356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35a:	89 10                	mov    DWORD PTR [eax],edx
c001f35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f360:	83 ec 0c             	sub    esp,0xc
c001f363:	50                   	push   eax
c001f364:	e8 55 49 ff ff       	call   c0013cbe <FPU::~FPU()>
c001f369:	83 c4 10             	add    esp,0x10
c001f36c:	90                   	nop
c001f36d:	83 c4 0c             	add    esp,0xc
c001f370:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f372 <SSE::~SSE()>:
c001f372:	83 ec 0c             	sub    esp,0xc
c001f375:	83 ec 0c             	sub    esp,0xc
c001f378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f37c:	e8 cd ff ff ff       	call   c001f34e <SSE::~SSE()>
c001f381:	83 c4 10             	add    esp,0x10
c001f384:	83 ec 08             	sub    esp,0x8
c001f387:	68 58 01 00 00       	push   0x158
c001f38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f390:	e8 14 31 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f395:	83 c4 10             	add    esp,0x10
c001f398:	83 c4 0c             	add    esp,0xc
c001f39b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f39c <x87::~x87()>:
c001f39c:	83 ec 0c             	sub    esp,0xc
c001f39f:	ba 58 ac 03 c0       	mov    edx,0xc003ac58
c001f3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a8:	89 10                	mov    DWORD PTR [eax],edx
c001f3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ae:	83 ec 0c             	sub    esp,0xc
c001f3b1:	50                   	push   eax
c001f3b2:	e8 07 49 ff ff       	call   c0013cbe <FPU::~FPU()>
c001f3b7:	83 c4 10             	add    esp,0x10
c001f3ba:	90                   	nop
c001f3bb:	83 c4 0c             	add    esp,0xc
c001f3be:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f3c0 <x87::~x87()>:
c001f3c0:	83 ec 0c             	sub    esp,0xc
c001f3c3:	83 ec 0c             	sub    esp,0xc
c001f3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3ca:	e8 cd ff ff ff       	call   c001f39c <x87::~x87()>
c001f3cf:	83 c4 10             	add    esp,0x10
c001f3d2:	83 ec 08             	sub    esp,0x8
c001f3d5:	68 58 01 00 00       	push   0x158
c001f3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3de:	e8 c6 30 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f3e3:	83 c4 10             	add    esp,0x10
c001f3e6:	83 c4 0c             	add    esp,0xc
c001f3e9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f3ea <IOAPIC::~IOAPIC()>:
c001f3ea:	83 ec 0c             	sub    esp,0xc
c001f3ed:	ba b0 ad 03 c0       	mov    edx,0xc003adb0
c001f3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f6:	89 10                	mov    DWORD PTR [eax],edx
c001f3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3fc:	83 ec 0c             	sub    esp,0xc
c001f3ff:	50                   	push   eax
c001f400:	e8 41 42 ff ff       	call   c0013646 <Device::~Device()>
c001f405:	83 c4 10             	add    esp,0x10
c001f408:	90                   	nop
c001f409:	83 c4 0c             	add    esp,0xc
c001f40c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f40e <IOAPIC::~IOAPIC()>:
c001f40e:	83 ec 0c             	sub    esp,0xc
c001f411:	83 ec 0c             	sub    esp,0xc
c001f414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f418:	e8 cd ff ff ff       	call   c001f3ea <IOAPIC::~IOAPIC()>
c001f41d:	83 c4 10             	add    esp,0x10
c001f420:	83 ec 08             	sub    esp,0x8
c001f423:	68 68 01 00 00       	push   0x168
c001f428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f42c:	e8 78 30 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f431:	83 c4 10             	add    esp,0x10
c001f434:	83 c4 0c             	add    esp,0xc
c001f437:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f438 <APIC::~APIC()>:
c001f438:	83 ec 0c             	sub    esp,0xc
c001f43b:	ba 68 ad 03 c0       	mov    edx,0xc003ad68
c001f440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f444:	89 10                	mov    DWORD PTR [eax],edx
c001f446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f44a:	83 ec 0c             	sub    esp,0xc
c001f44d:	50                   	push   eax
c001f44e:	e8 0f 4d ff ff       	call   c0014162 <InterruptController::~InterruptController()>
c001f453:	83 c4 10             	add    esp,0x10
c001f456:	90                   	nop
c001f457:	83 c4 0c             	add    esp,0xc
c001f45a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f45c <APIC::~APIC()>:
c001f45c:	83 ec 0c             	sub    esp,0xc
c001f45f:	83 ec 0c             	sub    esp,0xc
c001f462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f466:	e8 cd ff ff ff       	call   c001f438 <APIC::~APIC()>
c001f46b:	83 c4 10             	add    esp,0x10
c001f46e:	83 ec 08             	sub    esp,0x8
c001f471:	68 58 21 00 00       	push   0x2158
c001f476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f47a:	e8 2a 30 ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f47f:	83 c4 10             	add    esp,0x10
c001f482:	83 c4 0c             	add    esp,0xc
c001f485:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f486 <PIC::~PIC()>:
c001f486:	83 ec 0c             	sub    esp,0xc
c001f489:	ba 00 ae 03 c0       	mov    edx,0xc003ae00
c001f48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f492:	89 10                	mov    DWORD PTR [eax],edx
c001f494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f498:	83 ec 0c             	sub    esp,0xc
c001f49b:	50                   	push   eax
c001f49c:	e8 c1 4c ff ff       	call   c0014162 <InterruptController::~InterruptController()>
c001f4a1:	83 c4 10             	add    esp,0x10
c001f4a4:	90                   	nop
c001f4a5:	83 c4 0c             	add    esp,0xc
c001f4a8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f4aa <PIC::~PIC()>:
c001f4aa:	83 ec 0c             	sub    esp,0xc
c001f4ad:	83 ec 0c             	sub    esp,0xc
c001f4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4b4:	e8 cd ff ff ff       	call   c001f486 <PIC::~PIC()>
c001f4b9:	83 c4 10             	add    esp,0x10
c001f4bc:	83 ec 08             	sub    esp,0x8
c001f4bf:	68 58 21 00 00       	push   0x2158
c001f4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4c8:	e8 dc 2f ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f4cd:	83 c4 10             	add    esp,0x10
c001f4d0:	83 c4 0c             	add    esp,0xc
c001f4d3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f4d4 <APICTimer::~APICTimer()>:
c001f4d4:	83 ec 0c             	sub    esp,0xc
c001f4d7:	ba 54 ae 03 c0       	mov    edx,0xc003ae54
c001f4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e0:	89 10                	mov    DWORD PTR [eax],edx
c001f4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e6:	83 ec 0c             	sub    esp,0xc
c001f4e9:	50                   	push   eax
c001f4ea:	e8 43 62 ff ff       	call   c0015732 <Timer::~Timer()>
c001f4ef:	83 c4 10             	add    esp,0x10
c001f4f2:	90                   	nop
c001f4f3:	83 c4 0c             	add    esp,0xc
c001f4f6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f4f8 <APICTimer::~APICTimer()>:
c001f4f8:	83 ec 0c             	sub    esp,0xc
c001f4fb:	83 ec 0c             	sub    esp,0xc
c001f4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f502:	e8 cd ff ff ff       	call   c001f4d4 <APICTimer::~APICTimer()>
c001f507:	83 c4 10             	add    esp,0x10
c001f50a:	83 ec 08             	sub    esp,0x8
c001f50d:	68 60 01 00 00       	push   0x160
c001f512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f516:	e8 8e 2f ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f51b:	83 c4 10             	add    esp,0x10
c001f51e:	83 c4 0c             	add    esp,0xc
c001f521:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f522 <PIT::~PIT()>:
c001f522:	83 ec 0c             	sub    esp,0xc
c001f525:	ba a4 ae 03 c0       	mov    edx,0xc003aea4
c001f52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f52e:	89 10                	mov    DWORD PTR [eax],edx
c001f530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f534:	83 ec 0c             	sub    esp,0xc
c001f537:	50                   	push   eax
c001f538:	e8 f5 61 ff ff       	call   c0015732 <Timer::~Timer()>
c001f53d:	83 c4 10             	add    esp,0x10
c001f540:	90                   	nop
c001f541:	83 c4 0c             	add    esp,0xc
c001f544:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f546 <PIT::~PIT()>:
c001f546:	83 ec 0c             	sub    esp,0xc
c001f549:	83 ec 0c             	sub    esp,0xc
c001f54c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f550:	e8 cd ff ff ff       	call   c001f522 <PIT::~PIT()>
c001f555:	83 c4 10             	add    esp,0x10
c001f558:	83 ec 08             	sub    esp,0x8
c001f55b:	68 5c 01 00 00       	push   0x15c
c001f560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f564:	e8 40 2f ff ff       	call   c00124a9 <operator delete(void*, unsigned long)>
c001f569:	83 c4 10             	add    esp,0x10
c001f56c:	83 c4 0c             	add    esp,0xc
c001f56f:	c3                   	ret    
