
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e2 c2 00 00       	call   c000c302 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 f7 01 00       	call   c001f778 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 02 03 02 c0       	mov    ebx,0xc0020302
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 0c 03 02 c0    	cmp    ebx,0xc002030c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000049:	3d cc 41 02 c0       	cmp    eax,0xc00241cc
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 cc 41 02 c0       	push   0xc00241cc
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000075:	2d cc 41 02 c0       	sub    eax,0xc00241cc
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 cc 41 02 c0       	push   0xc00241cc
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002436c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 14 03 02 c0       	mov    ebx,0xc0020314
c00000bb:	81 eb 10 03 02 c0    	sub    ebx,0xc0020310
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 10 03 02 c0       	mov    esi,0xc0020310
c00000ca:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 43 02 c0       	mov    ds:0xc0024370,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 cc 41 02 c0       	push   0xc00241cc
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 43 02 c0 01 	mov    BYTE PTR ds:0xc002436c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 43 02 c0       	push   0xc0024374
c000012c:	68 cc 41 02 c0       	push   0xc00241cc
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0000160:	8b 70 48             	mov    esi,DWORD PTR [eax+0x48]
c0000163:	8b 58 c4             	mov    ebx,DWORD PTR [eax-0x3c]
c0000166:	8b 48 b8             	mov    ecx,DWORD PTR [eax-0x48]
c0000169:	e9 fb ff ff ff       	jmp    c0000169 <voodooXADD+0x19>
c000016e:	89 35 17 02 00 c0    	mov    DWORD PTR ds:0xc0000217,esi
c0000174:	89 25 13 02 00 c0    	mov    DWORD PTR ds:0xc0000213,esp
c000017a:	60                   	pusha  
c000017b:	b0 90                	mov    al,0x90
c000017d:	b9 20 00 00 00       	mov    ecx,0x20
c0000182:	bf ee 01 00 c0       	mov    edi,0xc00001ee
c0000187:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf ee 01 00 c0       	mov    edi,0xc00001ee
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	60                   	pusha  
c0000196:	89 d6                	mov    esi,edx
c0000198:	bf fe 01 00 c0       	mov    edi,0xc00001fe
c000019d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000019f:	61                   	popa   
c00001a0:	c6 82 ee 01 00 c0 90 	mov    BYTE PTR [edx-0x3ffffe12],0x90
c00001a7:	80 aa ef 01 00 c0 c0 	sub    BYTE PTR [edx-0x3ffffe11],0xc0
c00001ae:	80 82 f0 01 00 c0 86 	add    BYTE PTR [edx-0x3ffffe10],0x86
c00001b5:	c6 82 fe 01 00 c0 90 	mov    BYTE PTR [edx-0x3ffffe02],0x90
c00001bc:	80 aa ff 01 00 c0 c0 	sub    BYTE PTR [edx-0x3ffffe01],0xc0
c00001c3:	80 82 00 02 00 c0 02 	add    BYTE PTR [edx-0x3ffffe00],0x2
c00001ca:	8b 60 10             	mov    esp,DWORD PTR [eax+0x10]
c00001cd:	5f                   	pop    edi
c00001ce:	5e                   	pop    esi
c00001cf:	5d                   	pop    ebp
c00001d0:	5b                   	pop    ebx
c00001d1:	5b                   	pop    ebx
c00001d2:	5a                   	pop    edx
c00001d3:	59                   	pop    ecx
c00001d4:	58                   	pop    eax
c00001d5:	8b 25 17 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000217
c00001db:	e9 fb ff ff ff       	jmp    c00001db <voodooXADD+0x8b>
c00001e0:	e9 09 00 00 00       	jmp    c00001ee <voodooXADD.helper>

c00001e5 <voodooXADD.finish>:
c00001e5:	8b 25 13 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000213
c00001eb:	61                   	popa   
c00001ec:	c9                   	leave  
c00001ed:	c3                   	ret    

c00001ee <voodooXADD.helper>:
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	e9 d2 ff ff ff       	jmp    c00001e5 <voodooXADD.finish>

c0000213 <voodooXADD.oldStack>:
c0000213:	00 00                	add    BYTE PTR [eax],al
	...

c0000217 <voodooXADD.newStack>:
c0000217:	00 00                	add    BYTE PTR [eax],al
	...

c000021b <doTPAUSE>:
c000021b:	fb                   	sti    
c000021c:	31 c0                	xor    eax,eax
c000021e:	31 d2                	xor    edx,edx
c0000220:	66 0f ae f0          	tpause eax
c0000224:	c3                   	ret    

c0000225 <hasLegacyFPU>:
c0000225:	0f 20 c2             	mov    edx,cr0
c0000228:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c000022e:	0f 22 c2             	mov    cr0,edx
c0000231:	db e3                	fninit 
c0000233:	dd 3d 48 02 00 c0    	fnstsw WORD PTR ds:0xc0000248
c0000239:	31 c0                	xor    eax,eax
c000023b:	66 81 3d 48 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000248,0x0
c0000244:	75 01                	jne    c0000247 <hasLegacyFPU.nofpu>

c0000246 <hasLegacyFPU.hasfpu>:
c0000246:	40                   	inc    eax

c0000247 <hasLegacyFPU.nofpu>:
c0000247:	c3                   	ret    

c0000248 <testword>:
c0000248:	aa                   	stos   BYTE PTR es:[edi],al
c0000249:	55                   	push   ebp

c000024a <is486>:
c000024a:	0f 09                	wbinvd 
c000024c:	31 c0                	xor    eax,eax
c000024e:	40                   	inc    eax
c000024f:	c3                   	ret    
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	31 c0                	xor    eax,eax
c000027f:	c3                   	ret    

c0000280 <goToVM86>:
c0000280:	fa                   	cli    
c0000281:	55                   	push   ebp
c0000282:	89 e5                	mov    ebp,esp
c0000284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000287:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c000028a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000028d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000290:	25 ff ff 00 00       	and    eax,0xffff
c0000295:	81 e3 ff ff 00 00    	and    ebx,0xffff
c000029b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002a1:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002a7:	52                   	push   edx
c00002a8:	51                   	push   ecx
c00002a9:	68 02 02 02 00       	push   0x20202
c00002ae:	53                   	push   ebx
c00002af:	50                   	push   eax
c00002b0:	cf                   	iret   

c00002b1 <goToUsermode>:
c00002b1:	66 0f c3             	(bad)  
c00002b4:	04 4b                	add    al,0x4b
c00002b6:	fa                   	cli    
c00002b7:	55                   	push   ebp
c00002b8:	89 e5                	mov    ebp,esp
c00002ba:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002bd:	66 b8 23 00          	mov    ax,0x23
c00002c1:	66 8e d8             	mov    ds,ax
c00002c4:	66 8e c0             	mov    es,ax
c00002c7:	66 8e e0             	mov    fs,ax
c00002ca:	66 8e e8             	mov    gs,ax
c00002cd:	89 e0                	mov    eax,esp
c00002cf:	68 23 00 00 00       	push   0x23
c00002d4:	50                   	push   eax
c00002d5:	68 02 02 00 00       	push   0x202
c00002da:	68 1b 00 00 00       	push   0x1b
c00002df:	53                   	push   ebx
c00002e0:	cf                   	iret   

c00002e1 <switchToThreadASMFirstTime>:
c00002e1:	9c                   	pushf  
c00002e2:	fa                   	cli    
c00002e3:	50                   	push   eax
c00002e4:	53                   	push   ebx
c00002e5:	51                   	push   ecx
c00002e6:	52                   	push   edx
c00002e7:	56                   	push   esi
c00002e8:	57                   	push   edi
c00002e9:	55                   	push   ebp
c00002ea:	e9 11 00 00 00       	jmp    c0000300 <commonThreadSwitch>

c00002ef <switchToThreadASM>:
c00002ef:	9c                   	pushf  
c00002f0:	50                   	push   eax
c00002f1:	53                   	push   ebx
c00002f2:	51                   	push   ecx
c00002f3:	52                   	push   edx
c00002f4:	56                   	push   esi
c00002f5:	57                   	push   edi
c00002f6:	55                   	push   ebp
c00002f7:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002fd:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000300 <commonThreadSwitch>:
c0000300:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000304:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000030a:	8b 06                	mov    eax,DWORD PTR [esi]
c000030c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000030f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000312:	0f 20 d9             	mov    ecx,cr3
c0000315:	39 c8                	cmp    eax,ecx
c0000317:	74 03                	je     c000031c <commonThreadSwitch.doneVAS>
c0000319:	0f 22 d8             	mov    cr3,eax

c000031c <commonThreadSwitch.doneVAS>:
c000031c:	85 d2                	test   edx,edx
c000031e:	74 4e                	je     c000036e <commonThreadSwitch.notFirstTime>
c0000320:	fa                   	cli    
c0000321:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000324:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000329:	60                   	pusha  
c000032a:	e8 89 ec 00 00       	call   c000efb8 <mapVASFirstTime>
c000032f:	61                   	popa   
c0000330:	89 c4                	mov    esp,eax
c0000332:	56                   	push   esi
c0000333:	52                   	push   edx
c0000334:	e8 2d 83 01 00       	call   c0018666 <changeTSS>
c0000339:	5a                   	pop    edx
c000033a:	5e                   	pop    esi
c000033b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000342:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000348:	74 39                	je     c0000383 <commonThreadSwitch.cameOffAFork>
c000034a:	5d                   	pop    ebp
c000034b:	5f                   	pop    edi
c000034c:	5e                   	pop    esi
c000034d:	59                   	pop    ecx
c000034e:	59                   	pop    ecx
c000034f:	5b                   	pop    ebx
c0000350:	58                   	pop    eax
c0000351:	81 c4 04 00 00 00    	add    esp,0x4
c0000357:	6a 02                	push   0x2
c0000359:	9d                   	popf   
c000035a:	52                   	push   edx
c000035b:	e8 33 87 01 00       	call   c0018a93 <taskStartupFunction>
c0000360:	5a                   	pop    edx
c0000361:	50                   	push   eax
c0000362:	ff d2                	call   edx
c0000364:	e8 e8 8c 01 00       	call   c0019051 <taskReturned>
c0000369:	e9 fb ff ff ff       	jmp    c0000369 <commonThreadSwitch.doneVAS+0x4d>

c000036e <commonThreadSwitch.notFirstTime>:
c000036e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000371:	56                   	push   esi
c0000372:	52                   	push   edx
c0000373:	e8 ee 82 01 00       	call   c0018666 <changeTSS>
c0000378:	5a                   	pop    edx
c0000379:	5e                   	pop    esi
c000037a:	5d                   	pop    ebp
c000037b:	5f                   	pop    edi
c000037c:	5e                   	pop    esi
c000037d:	5a                   	pop    edx
c000037e:	59                   	pop    ecx
c000037f:	5b                   	pop    ebx
c0000380:	58                   	pop    eax
c0000381:	9d                   	popf   
c0000382:	c3                   	ret    

c0000383 <commonThreadSwitch.cameOffAFork>:
c0000383:	31 c0                	xor    eax,eax
c0000385:	31 d2                	xor    edx,edx
c0000387:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000038a:	e9 a2 02 00 00       	jmp    c0000631 <offAForkJumpThingy>

c000038f <detectCPUID>:
c000038f:	9c                   	pushf  
c0000390:	9c                   	pushf  
c0000391:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000398:	9d                   	popf   
c0000399:	9c                   	pushf  
c000039a:	58                   	pop    eax
c000039b:	33 04 24             	xor    eax,DWORD PTR [esp]
c000039e:	9d                   	popf   
c000039f:	25 00 00 20 00       	and    eax,0x200000
c00003a4:	c3                   	ret    

c00003a5 <asmQuickAcquireLock>:
c00003a5:	55                   	push   ebp
c00003a6:	89 e5                	mov    ebp,esp
c00003a8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003ab <asmQuickAcquireLock.retry>:
c00003ab:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003b0:	72 02                	jb     c00003b4 <asmQuickAcquireLock.spin_with_pause>
c00003b2:	fa                   	cli    
c00003b3:	c3                   	ret    

c00003b4 <asmQuickAcquireLock.spin_with_pause>:
c00003b4:	f3 90                	pause  
c00003b6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003bc:	75 f6                	jne    c00003b4 <asmQuickAcquireLock.spin_with_pause>
c00003be:	e9 e8 ff ff ff       	jmp    c00003ab <asmQuickAcquireLock.retry>

c00003c3 <asmQuickReleaseLock>:
c00003c3:	55                   	push   ebp
c00003c4:	89 e5                	mov    ebp,esp
c00003c6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003cd:	5d                   	pop    ebp
c00003ce:	c3                   	ret    

c00003cf <asmAcquireLock>:
c00003cf:	55                   	push   ebp
c00003d0:	89 e5                	mov    ebp,esp
c00003d2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003d5 <asmAcquireLock.retry>:
c00003d5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003da:	72 05                	jb     c00003e1 <asmAcquireLock.spin_with_pause>
c00003dc:	9c                   	pushf  
c00003dd:	58                   	pop    eax
c00003de:	fa                   	cli    
c00003df:	5d                   	pop    ebp
c00003e0:	c3                   	ret    

c00003e1 <asmAcquireLock.spin_with_pause>:
c00003e1:	f3 90                	pause  
c00003e3:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e9:	75 f6                	jne    c00003e1 <asmAcquireLock.spin_with_pause>
c00003eb:	e9 e5 ff ff ff       	jmp    c00003d5 <asmAcquireLock.retry>

c00003f0 <asmReleaseLock>:
c00003f0:	55                   	push   ebp
c00003f1:	89 e5                	mov    ebp,esp
c00003f3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003ff:	52                   	push   edx
c0000400:	9d                   	popf   
c0000401:	5d                   	pop    ebp
c0000402:	c3                   	ret    

c0000403 <loadGDT>:
c0000403:	0f 01 15 b0 47 02 c0 	lgdtd  ds:0xc00247b0
c000040a:	66 b8 10 00          	mov    ax,0x10
c000040e:	66 8e d8             	mov    ds,ax
c0000411:	66 8e c0             	mov    es,ax
c0000414:	66 8e e0             	mov    fs,ax
c0000417:	66 8e e8             	mov    gs,ax
c000041a:	66 8e d0             	mov    ss,ax
c000041d:	e9 00 00 00 00       	jmp    c0000422 <flush2>

c0000422 <flush2>:
c0000422:	c3                   	ret    

c0000423 <isr0>:
c0000423:	fa                   	cli    
c0000424:	68 00 00 00 00       	push   0x0
c0000429:	68 00 00 00 00       	push   0x0
c000042e:	e9 a2 01 00 00       	jmp    c00005d5 <int_common_stub>

c0000433 <isr1>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 01                	push   0x1
c0000438:	e9 98 01 00 00       	jmp    c00005d5 <int_common_stub>

c000043d <isr2>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 02                	push   0x2
c0000442:	e9 8e 01 00 00       	jmp    c00005d5 <int_common_stub>

c0000447 <isr3>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 03                	push   0x3
c000044c:	e9 84 01 00 00       	jmp    c00005d5 <int_common_stub>

c0000451 <isr4>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 04                	push   0x4
c0000456:	e9 7a 01 00 00       	jmp    c00005d5 <int_common_stub>

c000045b <isr5>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 05                	push   0x5
c0000460:	e9 70 01 00 00       	jmp    c00005d5 <int_common_stub>

c0000465 <isr6>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 06                	push   0x6
c000046a:	e9 66 01 00 00       	jmp    c00005d5 <int_common_stub>

c000046f <isr7>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 07                	push   0x7
c0000474:	e9 5c 01 00 00       	jmp    c00005d5 <int_common_stub>

c0000479 <isr8>:
c0000479:	fa                   	cli    
c000047a:	6a 08                	push   0x8
c000047c:	e9 54 01 00 00       	jmp    c00005d5 <int_common_stub>

c0000481 <isr9>:
c0000481:	fa                   	cli    
c0000482:	6a 00                	push   0x0
c0000484:	6a 09                	push   0x9
c0000486:	e9 4a 01 00 00       	jmp    c00005d5 <int_common_stub>

c000048b <isr10>:
c000048b:	fa                   	cli    
c000048c:	6a 0a                	push   0xa
c000048e:	e9 42 01 00 00       	jmp    c00005d5 <int_common_stub>

c0000493 <isr11>:
c0000493:	fa                   	cli    
c0000494:	6a 0b                	push   0xb
c0000496:	e9 3a 01 00 00       	jmp    c00005d5 <int_common_stub>

c000049b <isr12>:
c000049b:	fa                   	cli    
c000049c:	6a 0c                	push   0xc
c000049e:	e9 32 01 00 00       	jmp    c00005d5 <int_common_stub>

c00004a3 <isr13>:
c00004a3:	fa                   	cli    
c00004a4:	6a 0d                	push   0xd
c00004a6:	e9 2a 01 00 00       	jmp    c00005d5 <int_common_stub>

c00004ab <isr14>:
c00004ab:	fa                   	cli    
c00004ac:	6a 0e                	push   0xe
c00004ae:	e9 22 01 00 00       	jmp    c00005d5 <int_common_stub>

c00004b3 <isr15>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 0f                	push   0xf
c00004b8:	e9 18 01 00 00       	jmp    c00005d5 <int_common_stub>

c00004bd <isr16>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 10                	push   0x10
c00004c2:	e9 0e 01 00 00       	jmp    c00005d5 <int_common_stub>

c00004c7 <isr17>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 11                	push   0x11
c00004cc:	e9 04 01 00 00       	jmp    c00005d5 <int_common_stub>

c00004d1 <isr18>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 12                	push   0x12
c00004d6:	e9 fa 00 00 00       	jmp    c00005d5 <int_common_stub>

c00004db <isr96>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 60                	push   0x60
c00004e0:	e9 20 01 00 00       	jmp    c0000605 <syscall_common_stub>

c00004e5 <irq0>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 20                	push   0x20
c00004ea:	e9 e6 00 00 00       	jmp    c00005d5 <int_common_stub>

c00004ef <irq1>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 21                	push   0x21
c00004f4:	e9 dc 00 00 00       	jmp    c00005d5 <int_common_stub>

c00004f9 <irq2>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 22                	push   0x22
c00004fe:	e9 d2 00 00 00       	jmp    c00005d5 <int_common_stub>

c0000503 <irq3>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 23                	push   0x23
c0000508:	e9 c8 00 00 00       	jmp    c00005d5 <int_common_stub>

c000050d <irq4>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 24                	push   0x24
c0000512:	e9 be 00 00 00       	jmp    c00005d5 <int_common_stub>

c0000517 <irq5>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 25                	push   0x25
c000051c:	e9 b4 00 00 00       	jmp    c00005d5 <int_common_stub>

c0000521 <irq6>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 26                	push   0x26
c0000526:	e9 aa 00 00 00       	jmp    c00005d5 <int_common_stub>

c000052b <irq7>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 27                	push   0x27
c0000530:	e9 a0 00 00 00       	jmp    c00005d5 <int_common_stub>

c0000535 <irq8>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 28                	push   0x28
c000053a:	e9 96 00 00 00       	jmp    c00005d5 <int_common_stub>

c000053f <irq9>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 29                	push   0x29
c0000544:	e9 8c 00 00 00       	jmp    c00005d5 <int_common_stub>

c0000549 <irq10>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 2a                	push   0x2a
c000054e:	e9 82 00 00 00       	jmp    c00005d5 <int_common_stub>

c0000553 <irq11>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 2b                	push   0x2b
c0000558:	e9 78 00 00 00       	jmp    c00005d5 <int_common_stub>

c000055d <irq12>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2c                	push   0x2c
c0000562:	e9 6e 00 00 00       	jmp    c00005d5 <int_common_stub>

c0000567 <irq13>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 2d                	push   0x2d
c000056c:	e9 64 00 00 00       	jmp    c00005d5 <int_common_stub>

c0000571 <irq14>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 2e                	push   0x2e
c0000576:	e9 5a 00 00 00       	jmp    c00005d5 <int_common_stub>

c000057b <irq15>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 2f                	push   0x2f
c0000580:	e9 50 00 00 00       	jmp    c00005d5 <int_common_stub>

c0000585 <irq16>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 30                	push   0x30
c000058a:	e9 46 00 00 00       	jmp    c00005d5 <int_common_stub>

c000058f <irq17>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 31                	push   0x31
c0000594:	e9 3c 00 00 00       	jmp    c00005d5 <int_common_stub>

c0000599 <irq18>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 32                	push   0x32
c000059e:	e9 32 00 00 00       	jmp    c00005d5 <int_common_stub>

c00005a3 <irq19>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 33                	push   0x33
c00005a8:	e9 28 00 00 00       	jmp    c00005d5 <int_common_stub>

c00005ad <irq20>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 34                	push   0x34
c00005b2:	e9 1e 00 00 00       	jmp    c00005d5 <int_common_stub>

c00005b7 <irq21>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 35                	push   0x35
c00005bc:	e9 14 00 00 00       	jmp    c00005d5 <int_common_stub>

c00005c1 <irq22>:
c00005c1:	fa                   	cli    
c00005c2:	6a 00                	push   0x0
c00005c4:	6a 36                	push   0x36
c00005c6:	e9 0a 00 00 00       	jmp    c00005d5 <int_common_stub>

c00005cb <irq23>:
c00005cb:	fa                   	cli    
c00005cc:	6a 00                	push   0x0
c00005ce:	6a 37                	push   0x37
c00005d0:	e9 00 00 00 00       	jmp    c00005d5 <int_common_stub>

c00005d5 <int_common_stub>:
c00005d5:	60                   	pusha  
c00005d6:	1e                   	push   ds
c00005d7:	06                   	push   es
c00005d8:	0f a0                	push   fs
c00005da:	0f a8                	push   gs
c00005dc:	66 b8 10 00          	mov    ax,0x10
c00005e0:	66 8e d8             	mov    ds,ax
c00005e3:	66 8e c0             	mov    es,ax
c00005e6:	66 8e e0             	mov    fs,ax
c00005e9:	66 8e e8             	mov    gs,ax
c00005ec:	89 e1                	mov    ecx,esp
c00005ee:	51                   	push   ecx
c00005ef:	b9 e1 0e 01 c0       	mov    ecx,0xc0010ee1
c00005f4:	ff d1                	call   ecx
c00005f6:	59                   	pop    ecx
c00005f7:	0f a9                	pop    gs
c00005f9:	0f a1                	pop    fs
c00005fb:	07                   	pop    es
c00005fc:	1f                   	pop    ds
c00005fd:	61                   	popa   
c00005fe:	81 c4 08 00 00 00    	add    esp,0x8
c0000604:	cf                   	iret   

c0000605 <syscall_common_stub>:
c0000605:	60                   	pusha  
c0000606:	1e                   	push   ds
c0000607:	06                   	push   es
c0000608:	0f a0                	push   fs
c000060a:	0f a8                	push   gs
c000060c:	66 b8 10 00          	mov    ax,0x10
c0000610:	66 8e d8             	mov    ds,ax
c0000613:	66 8e c0             	mov    es,ax
c0000616:	66 8e e0             	mov    fs,ax
c0000619:	66 8e e8             	mov    gs,ax
c000061c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000622:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000625:	89 e1                	mov    ecx,esp
c0000627:	51                   	push   ecx
c0000628:	fb                   	sti    
c0000629:	b9 e1 0e 01 c0       	mov    ecx,0xc0010ee1
c000062e:	ff d1                	call   ecx
c0000630:	59                   	pop    ecx

c0000631 <offAForkJumpThingy>:
c0000631:	0f a9                	pop    gs
c0000633:	0f a1                	pop    fs
c0000635:	07                   	pop    es
c0000636:	1f                   	pop    ds
c0000637:	61                   	popa   
c0000638:	81 c4 08 00 00 00    	add    esp,0x8
c000063e:	cf                   	iret   

c000063f <memcmp>:
c000063f:	56                   	push   esi
c0000640:	53                   	push   ebx
c0000641:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000645:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000649:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064d:	01 d6                	add    esi,edx
c000064f:	39 f2                	cmp    edx,esi
c0000651:	74 0e                	je     c0000661 <memcmp+0x22>
c0000653:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000656:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000659:	38 c8                	cmp    al,cl
c000065b:	75 08                	jne    c0000665 <memcmp+0x26>
c000065d:	42                   	inc    edx
c000065e:	43                   	inc    ebx
c000065f:	eb ee                	jmp    c000064f <memcmp+0x10>
c0000661:	31 c0                	xor    eax,eax
c0000663:	eb 02                	jmp    c0000667 <memcmp+0x28>
c0000665:	29 c8                	sub    eax,ecx
c0000667:	5b                   	pop    ebx
c0000668:	5e                   	pop    esi
c0000669:	c3                   	ret    

c000066a <memmove>:
c000066a:	56                   	push   esi
c000066b:	53                   	push   ebx
c000066c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000670:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000678:	39 c8                	cmp    eax,ecx
c000067a:	73 12                	jae    c000068e <memmove+0x24>
c000067c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067f:	89 c3                	mov    ebx,eax
c0000681:	39 f1                	cmp    ecx,esi
c0000683:	74 1a                	je     c000069f <memmove+0x35>
c0000685:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000687:	43                   	inc    ebx
c0000688:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000068b:	41                   	inc    ecx
c000068c:	eb f3                	jmp    c0000681 <memmove+0x17>
c000068e:	76 0f                	jbe    c000069f <memmove+0x35>
c0000690:	85 d2                	test   edx,edx
c0000692:	74 0b                	je     c000069f <memmove+0x35>
c0000694:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000698:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069c:	4a                   	dec    edx
c000069d:	eb f1                	jmp    c0000690 <memmove+0x26>
c000069f:	5b                   	pop    ebx
c00006a0:	5e                   	pop    esi
c00006a1:	c3                   	ret    

c00006a2 <memcpy>:
c00006a2:	57                   	push   edi
c00006a3:	56                   	push   esi
c00006a4:	53                   	push   ebx
c00006a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006ad:	89 da                	mov    edx,ebx
c00006af:	89 d9                	mov    ecx,ebx
c00006b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006b5:	83 e2 fc             	and    edx,0xfffffffc
c00006b8:	c1 e9 02             	shr    ecx,0x2
c00006bb:	89 c7                	mov    edi,eax
c00006bd:	fc                   	cld    
c00006be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006c0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006c3:	01 c2                	add    edx,eax
c00006c5:	01 de                	add    esi,ebx
c00006c7:	39 f1                	cmp    ecx,esi
c00006c9:	74 09                	je     c00006d4 <memcpy+0x32>
c00006cb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006cd:	42                   	inc    edx
c00006ce:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d1:	41                   	inc    ecx
c00006d2:	eb f3                	jmp    c00006c7 <memcpy+0x25>
c00006d4:	5b                   	pop    ebx
c00006d5:	5e                   	pop    esi
c00006d6:	5f                   	pop    edi
c00006d7:	c3                   	ret    

c00006d8 <memset>:
c00006d8:	53                   	push   ebx
c00006d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006e1:	01 c1                	add    ecx,eax
c00006e3:	89 c2                	mov    edx,eax
c00006e5:	39 ca                	cmp    edx,ecx
c00006e7:	74 0a                	je     c00006f3 <memset+0x1b>
c00006e9:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006ed:	42                   	inc    edx
c00006ee:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006f1:	eb f2                	jmp    c00006e5 <memset+0xd>
c00006f3:	5b                   	pop    ebx
c00006f4:	c3                   	ret    

c00006f5 <strlen>:
c00006f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006f9:	31 c0                	xor    eax,eax
c00006fb:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006ff:	74 03                	je     c0000704 <strlen+0xf>
c0000701:	40                   	inc    eax
c0000702:	eb f7                	jmp    c00006fb <strlen+0x6>
c0000704:	c3                   	ret    

c0000705 <strpbrk>:
c0000705:	53                   	push   ebx
c0000706:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000070a:	8a 08                	mov    cl,BYTE PTR [eax]
c000070c:	84 c9                	test   cl,cl
c000070e:	74 14                	je     c0000724 <strpbrk+0x1f>
c0000710:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000714:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000716:	84 db                	test   bl,bl
c0000718:	74 07                	je     c0000721 <strpbrk+0x1c>
c000071a:	38 cb                	cmp    bl,cl
c000071c:	74 08                	je     c0000726 <strpbrk+0x21>
c000071e:	42                   	inc    edx
c000071f:	eb f3                	jmp    c0000714 <strpbrk+0xf>
c0000721:	40                   	inc    eax
c0000722:	eb e6                	jmp    c000070a <strpbrk+0x5>
c0000724:	31 c0                	xor    eax,eax
c0000726:	5b                   	pop    ebx
c0000727:	c3                   	ret    

c0000728 <strtok>:
c0000728:	56                   	push   esi
c0000729:	53                   	push   ebx
c000072a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000072e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000732:	85 db                	test   ebx,ebx
c0000734:	75 0e                	jne    c0000744 <strtok+0x1c>
c0000736:	8b 1d 8c 43 02 c0    	mov    ebx,DWORD PTR ds:0xc002438c
c000073c:	85 db                	test   ebx,ebx
c000073e:	75 04                	jne    c0000744 <strtok+0x1c>
c0000740:	31 db                	xor    ebx,ebx
c0000742:	eb 2e                	jmp    c0000772 <strtok+0x4a>
c0000744:	56                   	push   esi
c0000745:	53                   	push   ebx
c0000746:	e8 ba ff ff ff       	call   c0000705 <strpbrk>
c000074b:	a3 8c 43 02 c0       	mov    ds:0xc002438c,eax
c0000750:	5a                   	pop    edx
c0000751:	a1 8c 43 02 c0       	mov    eax,ds:0xc002438c
c0000756:	59                   	pop    ecx
c0000757:	39 d8                	cmp    eax,ebx
c0000759:	75 07                	jne    c0000762 <strtok+0x3a>
c000075b:	43                   	inc    ebx
c000075c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000760:	eb e2                	jmp    c0000744 <strtok+0x1c>
c0000762:	85 c0                	test   eax,eax
c0000764:	74 da                	je     c0000740 <strtok+0x18>
c0000766:	8d 50 01             	lea    edx,[eax+0x1]
c0000769:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000076c:	89 15 8c 43 02 c0    	mov    DWORD PTR ds:0xc002438c,edx
c0000772:	89 d8                	mov    eax,ebx
c0000774:	5b                   	pop    ebx
c0000775:	5e                   	pop    esi
c0000776:	c3                   	ret    

c0000777 <strcpy>:
c0000777:	53                   	push   ebx
c0000778:	31 d2                	xor    edx,edx
c000077a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000077e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000782:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000785:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000788:	84 c9                	test   cl,cl
c000078a:	74 06                	je     c0000792 <strcpy+0x1b>
c000078c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000078f:	42                   	inc    edx
c0000790:	eb ec                	jmp    c000077e <strcpy+0x7>
c0000792:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000795:	5b                   	pop    ebx
c0000796:	c3                   	ret    

c0000797 <strncpy>:
c0000797:	56                   	push   esi
c0000798:	53                   	push   ebx
c0000799:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000079d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007a1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00007a5:	89 c3                	mov    ebx,eax
c00007a7:	85 c9                	test   ecx,ecx
c00007a9:	74 1a                	je     c00007c5 <strncpy+0x2e>
c00007ab:	46                   	inc    esi
c00007ac:	43                   	inc    ebx
c00007ad:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007b0:	49                   	dec    ecx
c00007b1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007b4:	84 d2                	test   dl,dl
c00007b6:	75 ef                	jne    c00007a7 <strncpy+0x10>
c00007b8:	31 d2                	xor    edx,edx
c00007ba:	39 d1                	cmp    ecx,edx
c00007bc:	74 07                	je     c00007c5 <strncpy+0x2e>
c00007be:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007c2:	42                   	inc    edx
c00007c3:	eb f5                	jmp    c00007ba <strncpy+0x23>
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	c3                   	ret    

c00007c8 <strcmp>:
c00007c8:	31 c9                	xor    ecx,ecx
c00007ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007d2:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007d6:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007da:	38 d0                	cmp    al,dl
c00007dc:	75 08                	jne    c00007e6 <strcmp+0x1e>
c00007de:	41                   	inc    ecx
c00007df:	84 c0                	test   al,al
c00007e1:	75 e7                	jne    c00007ca <strcmp+0x2>
c00007e3:	31 c0                	xor    eax,eax
c00007e5:	c3                   	ret    
c00007e6:	29 d0                	sub    eax,edx
c00007e8:	c3                   	ret    

c00007e9 <strchr>:
c00007e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ed:	8a 10                	mov    dl,BYTE PTR [eax]
c00007ef:	84 d2                	test   dl,dl
c00007f1:	74 09                	je     c00007fc <strchr+0x13>
c00007f3:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007f7:	74 05                	je     c00007fe <strchr+0x15>
c00007f9:	40                   	inc    eax
c00007fa:	eb f1                	jmp    c00007ed <strchr+0x4>
c00007fc:	31 c0                	xor    eax,eax
c00007fe:	c3                   	ret    

c00007ff <strncmp>:
c00007ff:	56                   	push   esi
c0000800:	53                   	push   ebx
c0000801:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000805:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000809:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000080d:	01 d6                	add    esi,edx
c000080f:	39 f2                	cmp    edx,esi
c0000811:	74 12                	je     c0000825 <strncmp+0x26>
c0000813:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000816:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000819:	38 c8                	cmp    al,cl
c000081b:	75 0c                	jne    c0000829 <strncmp+0x2a>
c000081d:	42                   	inc    edx
c000081e:	84 c0                	test   al,al
c0000820:	74 03                	je     c0000825 <strncmp+0x26>
c0000822:	43                   	inc    ebx
c0000823:	eb ea                	jmp    c000080f <strncmp+0x10>
c0000825:	31 c0                	xor    eax,eax
c0000827:	eb 02                	jmp    c000082b <strncmp+0x2c>
c0000829:	29 c8                	sub    eax,ecx
c000082b:	5b                   	pop    ebx
c000082c:	5e                   	pop    esi
c000082d:	c3                   	ret    

c000082e <strcat>:
c000082e:	53                   	push   ebx
c000082f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000833:	89 c1                	mov    ecx,eax
c0000835:	8d 51 01             	lea    edx,[ecx+0x1]
c0000838:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000083c:	74 04                	je     c0000842 <strcat+0x14>
c000083e:	89 d1                	mov    ecx,edx
c0000840:	eb f3                	jmp    c0000835 <strcat+0x7>
c0000842:	31 d2                	xor    edx,edx
c0000844:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000848:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000084b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000084e:	42                   	inc    edx
c000084f:	84 db                	test   bl,bl
c0000851:	75 f1                	jne    c0000844 <strcat+0x16>
c0000853:	5b                   	pop    ebx
c0000854:	c3                   	ret    

c0000855 <strncat>:
c0000855:	56                   	push   esi
c0000856:	53                   	push   ebx
c0000857:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000085b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000085f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000863:	89 c2                	mov    edx,eax
c0000865:	85 db                	test   ebx,ebx
c0000867:	74 23                	je     c000088c <strncat+0x37>
c0000869:	8d 72 01             	lea    esi,[edx+0x1]
c000086c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000870:	74 04                	je     c0000876 <strncat+0x21>
c0000872:	89 f2                	mov    edx,esi
c0000874:	eb f3                	jmp    c0000869 <strncat+0x14>
c0000876:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000879:	41                   	inc    ecx
c000087a:	42                   	inc    edx
c000087b:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000087e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000881:	84 db                	test   bl,bl
c0000883:	74 07                	je     c000088c <strncat+0x37>
c0000885:	39 f1                	cmp    ecx,esi
c0000887:	75 f0                	jne    c0000879 <strncat+0x24>
c0000889:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000088c:	5b                   	pop    ebx
c000088d:	5e                   	pop    esi
c000088e:	c3                   	ret    

c000088f <strstr>:
c000088f:	57                   	push   edi
c0000890:	56                   	push   esi
c0000891:	53                   	push   ebx
c0000892:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000896:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000089a:	57                   	push   edi
c000089b:	e8 55 fe ff ff       	call   c00006f5 <strlen>
c00008a0:	59                   	pop    ecx
c00008a1:	89 c6                	mov    esi,eax
c00008a3:	85 c0                	test   eax,eax
c00008a5:	74 1f                	je     c00008c6 <strstr+0x37>
c00008a7:	53                   	push   ebx
c00008a8:	e8 48 fe ff ff       	call   c00006f5 <strlen>
c00008ad:	5a                   	pop    edx
c00008ae:	39 f0                	cmp    eax,esi
c00008b0:	72 12                	jb     c00008c4 <strstr+0x35>
c00008b2:	56                   	push   esi
c00008b3:	57                   	push   edi
c00008b4:	53                   	push   ebx
c00008b5:	e8 85 fd ff ff       	call   c000063f <memcmp>
c00008ba:	83 c4 0c             	add    esp,0xc
c00008bd:	85 c0                	test   eax,eax
c00008bf:	74 05                	je     c00008c6 <strstr+0x37>
c00008c1:	43                   	inc    ebx
c00008c2:	eb e3                	jmp    c00008a7 <strstr+0x18>
c00008c4:	31 db                	xor    ebx,ebx
c00008c6:	89 d8                	mov    eax,ebx
c00008c8:	5b                   	pop    ebx
c00008c9:	5e                   	pop    esi
c00008ca:	5f                   	pop    edi
c00008cb:	c3                   	ret    

c00008cc <toupper>:
c00008cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d0:	0f b6 d0             	movzx  edx,al
c00008d3:	f6 82 20 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfce0],0x2
c00008da:	74 03                	je     c00008df <toupper+0x13>
c00008dc:	83 e8 20             	sub    eax,0x20
c00008df:	c3                   	ret    

c00008e0 <tolower>:
c00008e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008e4:	0f b6 d0             	movzx  edx,al
c00008e7:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00008ee:	74 03                	je     c00008f3 <tolower+0x13>
c00008f0:	83 c0 20             	add    eax,0x20
c00008f3:	c3                   	ret    

c00008f4 <simple_strtoul>:
c00008f4:	55                   	push   ebp
c00008f5:	57                   	push   edi
c00008f6:	56                   	push   esi
c00008f7:	53                   	push   ebx
c00008f8:	83 ec 08             	sub    esp,0x8
c00008fb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000903:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000906:	f6 82 20 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfce0],0x8
c000090d:	74 03                	je     c0000912 <simple_strtoul+0x1e>
c000090f:	41                   	inc    ecx
c0000910:	eb f1                	jmp    c0000903 <simple_strtoul+0xf>
c0000912:	80 fa 09             	cmp    dl,0x9
c0000915:	74 f8                	je     c000090f <simple_strtoul+0x1b>
c0000917:	80 fa 2d             	cmp    dl,0x2d
c000091a:	75 0b                	jne    c0000927 <simple_strtoul+0x33>
c000091c:	41                   	inc    ecx
c000091d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000925:	eb 0e                	jmp    c0000935 <simple_strtoul+0x41>
c0000927:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000092f:	80 fa 2b             	cmp    dl,0x2b
c0000932:	75 01                	jne    c0000935 <simple_strtoul+0x41>
c0000934:	41                   	inc    ecx
c0000935:	85 f6                	test   esi,esi
c0000937:	75 22                	jne    c000095b <simple_strtoul+0x67>
c0000939:	be 0a 00 00 00       	mov    esi,0xa
c000093e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000941:	75 5a                	jne    c000099d <simple_strtoul+0xa9>
c0000943:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000947:	50                   	push   eax
c0000948:	e8 93 ff ff ff       	call   c00008e0 <tolower>
c000094d:	5a                   	pop    edx
c000094e:	83 f8 78             	cmp    eax,0x78
c0000951:	74 03                	je     c0000956 <simple_strtoul+0x62>
c0000953:	41                   	inc    ecx
c0000954:	eb 16                	jmp    c000096c <simple_strtoul+0x78>
c0000956:	83 c1 02             	add    ecx,0x2
c0000959:	eb 22                	jmp    c000097d <simple_strtoul+0x89>
c000095b:	8d 46 fe             	lea    eax,[esi-0x2]
c000095e:	83 f8 22             	cmp    eax,0x22
c0000961:	0f 87 ab 00 00 00    	ja     c0000a12 <simple_strtoul+0x11e>
c0000967:	83 fe 08             	cmp    esi,0x8
c000096a:	75 0c                	jne    c0000978 <simple_strtoul+0x84>
c000096c:	be 08 00 00 00       	mov    esi,0x8
c0000971:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000974:	75 27                	jne    c000099d <simple_strtoul+0xa9>
c0000976:	eb 1f                	jmp    c0000997 <simple_strtoul+0xa3>
c0000978:	83 fe 10             	cmp    esi,0x10
c000097b:	75 20                	jne    c000099d <simple_strtoul+0xa9>
c000097d:	be 10 00 00 00       	mov    esi,0x10
c0000982:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000985:	75 16                	jne    c000099d <simple_strtoul+0xa9>
c0000987:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000098b:	50                   	push   eax
c000098c:	e8 4f ff ff ff       	call   c00008e0 <tolower>
c0000991:	5d                   	pop    ebp
c0000992:	83 f8 78             	cmp    eax,0x78
c0000995:	74 03                	je     c000099a <simple_strtoul+0xa6>
c0000997:	41                   	inc    ecx
c0000998:	eb 03                	jmp    c000099d <simple_strtoul+0xa9>
c000099a:	83 c1 02             	add    ecx,0x2
c000099d:	31 ed                	xor    ebp,ebp
c000099f:	31 db                	xor    ebx,ebx
c00009a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009a8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009aa:	84 d2                	test   dl,dl
c00009ac:	74 27                	je     c00009d5 <simple_strtoul+0xe1>
c00009ae:	0f b6 fa             	movzx  edi,dl
c00009b1:	f6 87 20 03 02 c0 04 	test   BYTE PTR [edi-0x3ffdfce0],0x4
c00009b8:	74 05                	je     c00009bf <simple_strtoul+0xcb>
c00009ba:	83 ef 30             	sub    edi,0x30
c00009bd:	eb 22                	jmp    c00009e1 <simple_strtoul+0xed>
c00009bf:	0f be d2             	movsx  edx,dl
c00009c2:	52                   	push   edx
c00009c3:	e8 04 ff ff ff       	call   c00008cc <toupper>
c00009c8:	0f b6 d0             	movzx  edx,al
c00009cb:	5f                   	pop    edi
c00009cc:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00009d3:	75 09                	jne    c00009de <simple_strtoul+0xea>
c00009d5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009da:	75 2d                	jne    c0000a09 <simple_strtoul+0x115>
c00009dc:	eb 59                	jmp    c0000a37 <simple_strtoul+0x143>
c00009de:	8d 78 c9             	lea    edi,[eax-0x37]
c00009e1:	39 f7                	cmp    edi,esi
c00009e3:	73 f0                	jae    c00009d5 <simple_strtoul+0xe1>
c00009e5:	89 f8                	mov    eax,edi
c00009e7:	31 d2                	xor    edx,edx
c00009e9:	f7 d0                	not    eax
c00009eb:	f7 f6                	div    esi
c00009ed:	39 d8                	cmp    eax,ebx
c00009ef:	72 0e                	jb     c00009ff <simple_strtoul+0x10b>
c00009f1:	0f af de             	imul   ebx,esi
c00009f4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009fb:	01 fb                	add    ebx,edi
c00009fd:	eb 07                	jmp    c0000a06 <simple_strtoul+0x112>
c00009ff:	bd 01 00 00 00       	mov    ebp,0x1
c0000a04:	31 db                	xor    ebx,ebx
c0000a06:	41                   	inc    ecx
c0000a07:	eb 9f                	jmp    c00009a8 <simple_strtoul+0xb4>
c0000a09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a0c:	09 d8                	or     eax,ebx
c0000a0e:	75 21                	jne    c0000a31 <simple_strtoul+0x13d>
c0000a10:	eb 11                	jmp    c0000a23 <simple_strtoul+0x12f>
c0000a12:	31 db                	xor    ebx,ebx
c0000a14:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a19:	74 22                	je     c0000a3d <simple_strtoul+0x149>
c0000a1b:	31 ed                	xor    ebp,ebp
c0000a1d:	31 db                	xor    ebx,ebx
c0000a1f:	85 c9                	test   ecx,ecx
c0000a21:	74 0e                	je     c0000a31 <simple_strtoul+0x13d>
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a2b:	31 db                	xor    ebx,ebx
c0000a2d:	89 38                	mov    DWORD PTR [eax],edi
c0000a2f:	eb 06                	jmp    c0000a37 <simple_strtoul+0x143>
c0000a31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a35:	89 08                	mov    DWORD PTR [eax],ecx
c0000a37:	4d                   	dec    ebp
c0000a38:	75 03                	jne    c0000a3d <simple_strtoul+0x149>
c0000a3a:	83 cb ff             	or     ebx,0xffffffff
c0000a3d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a42:	75 02                	jne    c0000a46 <simple_strtoul+0x152>
c0000a44:	f7 db                	neg    ebx
c0000a46:	83 c4 08             	add    esp,0x8
c0000a49:	89 d8                	mov    eax,ebx
c0000a4b:	5b                   	pop    ebx
c0000a4c:	5e                   	pop    esi
c0000a4d:	5f                   	pop    edi
c0000a4e:	5d                   	pop    ebp
c0000a4f:	c3                   	ret    

c0000a50 <largebin_index>:
c0000a50:	89 c2                	mov    edx,eax
c0000a52:	c1 ea 08             	shr    edx,0x8
c0000a55:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a5b:	77 10                	ja     c0000a6d <largebin_index+0x1d>
c0000a5d:	0f bd d2             	bsr    edx,edx
c0000a60:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a63:	d3 e8                	shr    eax,cl
c0000a65:	83 e0 03             	and    eax,0x3
c0000a68:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a6c:	c3                   	ret    
c0000a6d:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a72:	c3                   	ret    

c0000a73 <malloc_init_state>:
c0000a73:	8d 50 34             	lea    edx,[eax+0x34]
c0000a76:	53                   	push   ebx
c0000a77:	89 d1                	mov    ecx,edx
c0000a79:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a7f:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a82:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a85:	83 c2 08             	add    edx,0x8
c0000a88:	39 da                	cmp    edx,ebx
c0000a8a:	75 f3                	jne    c0000a7f <malloc_init_state+0xc>
c0000a8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a8e:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a98:	83 e2 03             	and    edx,0x3
c0000a9b:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000aa5:	83 ca 48             	or     edx,0x48
c0000aa8:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ab2:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000abc:	89 10                	mov    DWORD PTR [eax],edx
c0000abe:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ac5:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ac8:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ad2:	5b                   	pop    ebx
c0000ad3:	c3                   	ret    

c0000ad4 <malloc_consolidate>:
c0000ad4:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ad6:	85 d2                	test   edx,edx
c0000ad8:	0f 84 d8 00 00 00    	je     c0000bb6 <malloc_consolidate+0xe2>
c0000ade:	55                   	push   ebp
c0000adf:	83 e2 fd             	and    edx,0xfffffffd
c0000ae2:	57                   	push   edi
c0000ae3:	8d 78 34             	lea    edi,[eax+0x34]
c0000ae6:	56                   	push   esi
c0000ae7:	89 c5                	mov    ebp,eax
c0000ae9:	53                   	push   ebx
c0000aea:	83 ec 10             	sub    esp,0x10
c0000aed:	89 10                	mov    DWORD PTR [eax],edx
c0000aef:	c1 ea 03             	shr    edx,0x3
c0000af2:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000af6:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000afa:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000afe:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000b01:	85 d2                	test   edx,edx
c0000b03:	0f 84 98 00 00 00    	je     c0000ba1 <malloc_consolidate+0xcd>
c0000b09:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b10:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b13:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b1a:	89 f9                	mov    ecx,edi
c0000b1c:	83 e1 fe             	and    ecx,0xfffffffe
c0000b1f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b22:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b25:	83 e3 fc             	and    ebx,0xfffffffc
c0000b28:	83 e7 01             	and    edi,0x1
c0000b2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b2e:	75 14                	jne    c0000b44 <malloc_consolidate+0x70>
c0000b30:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b32:	29 fa                	sub    edx,edi
c0000b34:	01 f9                	add    ecx,edi
c0000b36:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b39:	89 fb                	mov    ebx,edi
c0000b3b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b3e:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b41:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b44:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b47:	74 40                	je     c0000b89 <malloc_consolidate+0xb5>
c0000b49:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b4c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b4f:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b53:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b56:	83 e7 01             	and    edi,0x1
c0000b59:	75 0e                	jne    c0000b69 <malloc_consolidate+0x95>
c0000b5b:	01 d9                	add    ecx,ebx
c0000b5d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b60:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b63:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b66:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b69:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b6c:	89 ce                	mov    esi,ecx
c0000b6e:	83 ce 01             	or     esi,0x1
c0000b71:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b74:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b77:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b7a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b7e:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b81:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b84:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b87:	eb 0c                	jmp    c0000b95 <malloc_consolidate+0xc1>
c0000b89:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b8c:	83 c9 01             	or     ecx,0x1
c0000b8f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b92:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b99:	85 d2                	test   edx,edx
c0000b9b:	0f 85 6f ff ff ff    	jne    c0000b10 <malloc_consolidate+0x3c>
c0000ba1:	83 c5 04             	add    ebp,0x4
c0000ba4:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ba8:	0f 85 50 ff ff ff    	jne    c0000afe <malloc_consolidate+0x2a>
c0000bae:	83 c4 10             	add    esp,0x10
c0000bb1:	5b                   	pop    ebx
c0000bb2:	5e                   	pop    esi
c0000bb3:	5f                   	pop    edi
c0000bb4:	5d                   	pop    ebp
c0000bb5:	c3                   	ret    
c0000bb6:	e9 b8 fe ff ff       	jmp    c0000a73 <malloc_init_state>

c0000bbb <dlfree>:
c0000bbb:	57                   	push   edi
c0000bbc:	56                   	push   esi
c0000bbd:	53                   	push   ebx
c0000bbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bc2:	85 db                	test   ebx,ebx
c0000bc4:	0f 84 e2 00 00 00    	je     c0000cac <dlfree+0xf1>
c0000bca:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bcd:	8b 0d a0 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243a0
c0000bd3:	89 f0                	mov    eax,esi
c0000bd5:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bd8:	83 e0 fc             	and    eax,0xfffffffc
c0000bdb:	39 c1                	cmp    ecx,eax
c0000bdd:	72 24                	jb     c0000c03 <dlfree+0x48>
c0000bdf:	c1 e8 03             	shr    eax,0x3
c0000be2:	83 c9 03             	or     ecx,0x3
c0000be5:	83 e8 02             	sub    eax,0x2
c0000be8:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000bee:	8b 0c 85 a4 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbc5c]
c0000bf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bf7:	89 14 85 a4 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc5c],edx
c0000bfe:	e9 a9 00 00 00       	jmp    c0000cac <dlfree+0xf1>
c0000c03:	83 e6 02             	and    esi,0x2
c0000c06:	0f 85 a0 00 00 00    	jne    c0000cac <dlfree+0xf1>
c0000c0c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c0f:	83 c9 01             	or     ecx,0x1
c0000c12:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000c18:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c1b:	83 e1 fc             	and    ecx,0xfffffffc
c0000c1e:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c22:	75 13                	jne    c0000c37 <dlfree+0x7c>
c0000c24:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c27:	29 da                	sub    edx,ebx
c0000c29:	01 d8                	add    eax,ebx
c0000c2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c2e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c37:	39 35 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,esi
c0000c3d:	74 40                	je     c0000c7f <dlfree+0xc4>
c0000c3f:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c43:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c46:	80 e3 01             	and    bl,0x1
c0000c49:	75 0e                	jne    c0000c59 <dlfree+0x9e>
c0000c4b:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c4e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c51:	01 c8                	add    eax,ecx
c0000c53:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c56:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c59:	8b 0d dc 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243dc
c0000c5f:	c7 42 0c d4 43 02 c0 	mov    DWORD PTR [edx+0xc],0xc00243d4
c0000c66:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c69:	89 15 dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edx
c0000c6f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c72:	89 c1                	mov    ecx,eax
c0000c74:	83 c9 01             	or     ecx,0x1
c0000c77:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c7a:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c7d:	eb 10                	jmp    c0000c8f <dlfree+0xd4>
c0000c7f:	01 c8                	add    eax,ecx
c0000c81:	89 c1                	mov    ecx,eax
c0000c83:	83 c9 01             	or     ecx,0x1
c0000c86:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c89:	89 15 cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,edx
c0000c8f:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c94:	76 16                	jbe    c0000cac <dlfree+0xf1>
c0000c96:	f6 05 a0 43 02 c0 02 	test   BYTE PTR ds:0xc00243a0,0x2
c0000c9d:	74 0d                	je     c0000cac <dlfree+0xf1>
c0000c9f:	5b                   	pop    ebx
c0000ca0:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000ca5:	5e                   	pop    esi
c0000ca6:	5f                   	pop    edi
c0000ca7:	e9 28 fe ff ff       	jmp    c0000ad4 <malloc_consolidate>
c0000cac:	5b                   	pop    ebx
c0000cad:	5e                   	pop    esi
c0000cae:	5f                   	pop    edi
c0000caf:	c3                   	ret    

c0000cb0 <sYSMALLOc>:
c0000cb0:	55                   	push   ebp
c0000cb1:	57                   	push   edi
c0000cb2:	56                   	push   esi
c0000cb3:	53                   	push   ebx
c0000cb4:	89 d3                	mov    ebx,edx
c0000cb6:	83 ec 2c             	sub    esp,0x2c
c0000cb9:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000cbf:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cc6:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ccd:	74 1f                	je     c0000cee <sYSMALLOc+0x3e>
c0000ccf:	89 d0                	mov    eax,edx
c0000cd1:	e8 fe fd ff ff       	call   c0000ad4 <malloc_consolidate>
c0000cd6:	83 ec 0c             	sub    esp,0xc
c0000cd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cdd:	83 e8 07             	sub    eax,0x7
c0000ce0:	50                   	push   eax
c0000ce1:	e8 33 02 00 00       	call   c0000f19 <dlmalloc>
c0000ce6:	83 c4 10             	add    esp,0x10
c0000ce9:	e9 23 02 00 00       	jmp    c0000f11 <sYSMALLOc+0x261>
c0000cee:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cf5:	83 c0 10             	add    eax,0x10
c0000cf8:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000cfe:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000d01:	01 c2                	add    edx,eax
c0000d03:	83 e5 fc             	and    ebp,0xfffffffc
c0000d06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000d0a:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d11:	74 02                	je     c0000d15 <sYSMALLOc+0x65>
c0000d13:	29 ea                	sub    edx,ebp
c0000d15:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000d19:	f7 d9                	neg    ecx
c0000d1b:	21 ca                	and    edx,ecx
c0000d1d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d21:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d25:	7f 07                	jg     c0000d2e <sYSMALLOc+0x7e>
c0000d27:	31 c0                	xor    eax,eax
c0000d29:	e9 e3 01 00 00       	jmp    c0000f11 <sYSMALLOc+0x261>
c0000d2e:	83 ec 0c             	sub    esp,0xc
c0000d31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d35:	e8 0b b1 00 00       	call   c000be45 <sbrk>
c0000d3a:	83 c4 10             	add    esp,0x10
c0000d3d:	89 c6                	mov    esi,eax
c0000d3f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d42:	74 e3                	je     c0000d27 <sYSMALLOc+0x77>
c0000d44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d48:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d4b:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d51:	39 c2                	cmp    edx,eax
c0000d53:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d59:	75 11                	jne    c0000d6c <sYSMALLOc+0xbc>
c0000d5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d5f:	01 e8                	add    eax,ebp
c0000d61:	83 c8 01             	or     eax,0x1
c0000d64:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d67:	e9 93 00 00 00       	jmp    c0000dff <sYSMALLOc+0x14f>
c0000d6c:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d72:	a8 01                	test   al,0x1
c0000d74:	0f 84 73 01 00 00    	je     c0000eed <sYSMALLOc+0x23d>
c0000d7a:	85 ed                	test   ebp,ebp
c0000d7c:	74 12                	je     c0000d90 <sYSMALLOc+0xe0>
c0000d7e:	39 f2                	cmp    edx,esi
c0000d80:	76 0e                	jbe    c0000d90 <sYSMALLOc+0xe0>
c0000d82:	83 e0 fe             	and    eax,0xfffffffe
c0000d85:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d8b:	e9 5d 01 00 00       	jmp    c0000eed <sYSMALLOc+0x23d>
c0000d90:	85 ed                	test   ebp,ebp
c0000d92:	74 0c                	je     c0000da0 <sYSMALLOc+0xf0>
c0000d94:	89 f0                	mov    eax,esi
c0000d96:	29 d0                	sub    eax,edx
c0000d98:	01 c1                	add    ecx,eax
c0000d9a:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000da0:	89 f2                	mov    edx,esi
c0000da2:	83 e2 07             	and    edx,0x7
c0000da5:	0f 84 b1 00 00 00    	je     c0000e5c <sYSMALLOc+0x1ac>
c0000dab:	b8 08 00 00 00       	mov    eax,0x8
c0000db0:	29 d0                	sub    eax,edx
c0000db2:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000db5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000db9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dbd:	01 e8                	add    eax,ebp
c0000dbf:	83 ec 0c             	sub    esp,0xc
c0000dc2:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000dc5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000dc9:	01 f2                	add    edx,esi
c0000dcb:	01 d1                	add    ecx,edx
c0000dcd:	29 d0                	sub    eax,edx
c0000dcf:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000dd3:	01 c1                	add    ecx,eax
c0000dd5:	51                   	push   ecx
c0000dd6:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dda:	e8 66 b0 00 00       	call   c000be45 <sbrk>
c0000ddf:	83 c4 10             	add    esp,0x10
c0000de2:	83 f8 ff             	cmp    eax,0xffffffff
c0000de5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000de9:	75 7c                	jne    c0000e67 <sYSMALLOc+0x1b7>
c0000deb:	83 ec 0c             	sub    esp,0xc
c0000dee:	6a 00                	push   0x0
c0000df0:	e8 50 b0 00 00       	call   c000be45 <sbrk>
c0000df5:	83 c4 10             	add    esp,0x10
c0000df8:	31 c9                	xor    ecx,ecx
c0000dfa:	83 f8 ff             	cmp    eax,0xffffffff
c0000dfd:	75 7e                	jne    c0000e7d <sYSMALLOc+0x1cd>
c0000dff:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e05:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e0b:	73 06                	jae    c0000e13 <sYSMALLOc+0x163>
c0000e0d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e13:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e19:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e1f:	73 06                	jae    c0000e27 <sYSMALLOc+0x177>
c0000e21:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e27:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e2a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e2d:	83 e2 fc             	and    edx,0xfffffffc
c0000e30:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e34:	0f 87 ed fe ff ff    	ja     c0000d27 <sYSMALLOc+0x77>
c0000e3a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e3e:	29 fa                	sub    edx,edi
c0000e40:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e43:	83 ca 01             	or     edx,0x1
c0000e46:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e49:	89 fb                	mov    ebx,edi
c0000e4b:	83 cb 01             	or     ebx,0x1
c0000e4e:	83 c0 08             	add    eax,0x8
c0000e51:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e54:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e57:	e9 b5 00 00 00       	jmp    c0000f11 <sYSMALLOc+0x261>
c0000e5c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e60:	31 c0                	xor    eax,eax
c0000e62:	e9 52 ff ff ff       	jmp    c0000db9 <sYSMALLOc+0x109>
c0000e67:	39 c6                	cmp    esi,eax
c0000e69:	76 12                	jbe    c0000e7d <sYSMALLOc+0x1cd>
c0000e6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e6f:	01 f0                	add    eax,esi
c0000e71:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e78:	e9 7b ff ff ff       	jmp    c0000df8 <sYSMALLOc+0x148>
c0000e7d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e81:	29 f0                	sub    eax,esi
c0000e83:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e86:	01 c8                	add    eax,ecx
c0000e88:	83 c8 01             	or     eax,0x1
c0000e8b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e8e:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e94:	85 ed                	test   ebp,ebp
c0000e96:	0f 84 63 ff ff ff    	je     c0000dff <sYSMALLOc+0x14f>
c0000e9c:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e9f:	83 e0 f8             	and    eax,0xfffffff8
c0000ea2:	89 c2                	mov    edx,eax
c0000ea4:	83 ca 01             	or     edx,0x1
c0000ea7:	83 f8 0f             	cmp    eax,0xf
c0000eaa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000ead:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000eb5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ebd:	0f 86 3c ff ff ff    	jbe    c0000dff <sYSMALLOc+0x14f>
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	83 c7 08             	add    edi,0x8
c0000ec9:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000ecf:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ed9:	57                   	push   edi
c0000eda:	e8 dc fc ff ff       	call   c0000bbb <dlfree>
c0000edf:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ee5:	83 c4 10             	add    esp,0x10
c0000ee8:	e9 12 ff ff ff       	jmp    c0000dff <sYSMALLOc+0x14f>
c0000eed:	83 ec 0c             	sub    esp,0xc
c0000ef0:	6a 00                	push   0x0
c0000ef2:	e8 4e af 00 00       	call   c000be45 <sbrk>
c0000ef7:	89 c2                	mov    edx,eax
c0000ef9:	29 f2                	sub    edx,esi
c0000efb:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000eff:	83 c4 10             	add    esp,0x10
c0000f02:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f08:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000f0c:	e9 e7 fe ff ff       	jmp    c0000df8 <sYSMALLOc+0x148>
c0000f11:	83 c4 2c             	add    esp,0x2c
c0000f14:	5b                   	pop    ebx
c0000f15:	5e                   	pop    esi
c0000f16:	5f                   	pop    edi
c0000f17:	5d                   	pop    ebp
c0000f18:	c3                   	ret    

c0000f19 <dlmalloc>:
c0000f19:	55                   	push   ebp
c0000f1a:	57                   	push   edi
c0000f1b:	56                   	push   esi
c0000f1c:	53                   	push   ebx
c0000f1d:	83 ec 1c             	sub    esp,0x1c
c0000f20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f24:	83 f8 df             	cmp    eax,0xffffffdf
c0000f27:	0f 87 70 03 00 00    	ja     c000129d <dlmalloc+0x384>
c0000f2d:	83 c0 0b             	add    eax,0xb
c0000f30:	be 10 00 00 00       	mov    esi,0x10
c0000f35:	83 f8 0f             	cmp    eax,0xf
c0000f38:	76 05                	jbe    c0000f3f <dlmalloc+0x26>
c0000f3a:	83 e0 f8             	and    eax,0xfffffff8
c0000f3d:	89 c6                	mov    esi,eax
c0000f3f:	8b 3d a0 43 02 c0    	mov    edi,DWORD PTR ds:0xc00243a0
c0000f45:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f4b:	75 17                	jne    c0000f64 <dlmalloc+0x4b>
c0000f4d:	85 ff                	test   edi,edi
c0000f4f:	0f 85 05 03 00 00    	jne    c000125a <dlmalloc+0x341>
c0000f55:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000f5a:	e8 75 fb ff ff       	call   c0000ad4 <malloc_consolidate>
c0000f5f:	e9 f6 02 00 00       	jmp    c000125a <dlmalloc+0x341>
c0000f64:	39 f7                	cmp    edi,esi
c0000f66:	72 1f                	jb     c0000f87 <dlmalloc+0x6e>
c0000f68:	89 f2                	mov    edx,esi
c0000f6a:	c1 ea 03             	shr    edx,0x3
c0000f6d:	83 ea 02             	sub    edx,0x2
c0000f70:	8b 04 95 a4 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc5c]
c0000f77:	85 c0                	test   eax,eax
c0000f79:	74 0c                	je     c0000f87 <dlmalloc+0x6e>
c0000f7b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f7e:	89 0c 95 a4 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc5c],ecx
c0000f85:	eb 30                	jmp    c0000fb7 <dlmalloc+0x9e>
c0000f87:	89 f0                	mov    eax,esi
c0000f89:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f8f:	77 2e                	ja     c0000fbf <dlmalloc+0xa6>
c0000f91:	c1 e8 03             	shr    eax,0x3
c0000f94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f98:	8d 14 c5 d4 43 02 c0 	lea    edx,[eax*8-0x3ffdbc2c]
c0000f9f:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000fa2:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000fa5:	39 c3                	cmp    ebx,eax
c0000fa7:	74 2e                	je     c0000fd7 <dlmalloc+0xbe>
c0000fa9:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000fac:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fb1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fb4:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fb7:	83 c0 08             	add    eax,0x8
c0000fba:	e9 e0 02 00 00       	jmp    c000129f <dlmalloc+0x386>
c0000fbf:	e8 8c fa ff ff       	call   c0000a50 <largebin_index>
c0000fc4:	83 e7 02             	and    edi,0x2
c0000fc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fcb:	74 0a                	je     c0000fd7 <dlmalloc+0xbe>
c0000fcd:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000fd2:	e8 fd fa ff ff       	call   c0000ad4 <malloc_consolidate>
c0000fd7:	8d 46 10             	lea    eax,[esi+0x10]
c0000fda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fde:	8b 1d e0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243e0
c0000fe4:	81 fb d4 43 02 c0    	cmp    ebx,0xc00243d4
c0000fea:	0f 84 13 01 00 00    	je     c0001103 <dlmalloc+0x1ea>
c0000ff0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000ff3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000ff6:	83 e7 fc             	and    edi,0xfffffffc
c0000ff9:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fff:	77 4c                	ja     c000104d <dlmalloc+0x134>
c0001001:	3d d4 43 02 c0       	cmp    eax,0xc00243d4
c0001006:	75 45                	jne    c000104d <dlmalloc+0x134>
c0001008:	39 1d d0 43 02 c0    	cmp    DWORD PTR ds:0xc00243d0,ebx
c000100e:	75 3d                	jne    c000104d <dlmalloc+0x134>
c0001010:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001014:	73 37                	jae    c000104d <dlmalloc+0x134>
c0001016:	89 fa                	mov    edx,edi
c0001018:	8d 04 33             	lea    eax,[ebx+esi*1]
c000101b:	29 f2                	sub    edx,esi
c000101d:	83 ce 01             	or     esi,0x1
c0001020:	89 d1                	mov    ecx,edx
c0001022:	a3 dc 43 02 c0       	mov    ds:0xc00243dc,eax
c0001027:	83 c9 01             	or     ecx,0x1
c000102a:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c000102f:	a3 d0 43 02 c0       	mov    ds:0xc00243d0,eax
c0001034:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c000103b:	c7 40 0c d4 43 02 c0 	mov    DWORD PTR [eax+0xc],0xc00243d4
c0001042:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001045:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001048:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000104b:	eb 15                	jmp    c0001062 <dlmalloc+0x149>
c000104d:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c0001052:	39 fe                	cmp    esi,edi
c0001054:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c000105b:	75 0d                	jne    c000106a <dlmalloc+0x151>
c000105d:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001062:	8d 43 08             	lea    eax,[ebx+0x8]
c0001065:	e9 35 02 00 00       	jmp    c000129f <dlmalloc+0x386>
c000106a:	89 f8                	mov    eax,edi
c000106c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001072:	77 19                	ja     c000108d <dlmalloc+0x174>
c0001074:	c1 e8 03             	shr    eax,0x3
c0001077:	8d 14 00             	lea    edx,[eax+eax*1]
c000107a:	83 c2 0d             	add    edx,0xd
c000107d:	8d 2c 95 98 43 02 c0 	lea    ebp,[edx*4-0x3ffdbc68]
c0001084:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c000108b:	eb 46                	jmp    c00010d3 <dlmalloc+0x1ba>
c000108d:	e8 be f9 ff ff       	call   c0000a50 <largebin_index>
c0001092:	8d 14 00             	lea    edx,[eax+eax*1]
c0001095:	83 c2 0d             	add    edx,0xd
c0001098:	8d 0c 95 a0 43 02 c0 	lea    ecx,[edx*4-0x3ffdbc60]
c000109f:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c00010a6:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00010a9:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00010ad:	89 d5                	mov    ebp,edx
c00010af:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010b3:	74 1e                	je     c00010d3 <dlmalloc+0x1ba>
c00010b5:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010b8:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010bb:	77 12                	ja     c00010cf <dlmalloc+0x1b6>
c00010bd:	83 cf 01             	or     edi,0x1
c00010c0:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010c3:	76 05                	jbe    c00010ca <dlmalloc+0x1b1>
c00010c5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010c8:	eb f6                	jmp    c00010c0 <dlmalloc+0x1a7>
c00010ca:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010cd:	eb 04                	jmp    c00010d3 <dlmalloc+0x1ba>
c00010cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010d3:	89 c7                	mov    edi,eax
c00010d5:	88 c1                	mov    cl,al
c00010d7:	c1 ff 05             	sar    edi,0x5
c00010da:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010de:	bf 01 00 00 00       	mov    edi,0x1
c00010e3:	d3 e7                	shl    edi,cl
c00010e5:	89 f8                	mov    eax,edi
c00010e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010eb:	09 04 bd d4 46 02 c0 	or     DWORD PTR [edi*4-0x3ffdb92c],eax
c00010f2:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010f5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010f8:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010fb:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010fe:	e9 db fe ff ff       	jmp    c0000fde <dlmalloc+0xc5>
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	76 78                	jbe    c0001183 <dlmalloc+0x26a>
c000110b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000110f:	8d 04 c5 d4 43 02 c0 	lea    eax,[eax*8-0x3ffdbc2c]
c0001116:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001119:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000111c:	39 ca                	cmp    edx,ecx
c000111e:	74 63                	je     c0001183 <dlmalloc+0x26a>
c0001120:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001123:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001126:	83 e3 fc             	and    ebx,0xfffffffc
c0001129:	39 de                	cmp    esi,ebx
c000112b:	77 52                	ja     c000117f <dlmalloc+0x266>
c000112d:	89 df                	mov    edi,ebx
c000112f:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001132:	29 f7                	sub    edi,esi
c0001134:	01 d3                	add    ebx,edx
c0001136:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001139:	83 ff 0f             	cmp    edi,0xf
c000113c:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000113f:	8d 42 08             	lea    eax,[edx+0x8]
c0001142:	77 09                	ja     c000114d <dlmalloc+0x234>
c0001144:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001148:	e9 52 01 00 00       	jmp    c000129f <dlmalloc+0x386>
c000114d:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001150:	83 ce 01             	or     esi,0x1
c0001153:	89 0d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,ecx
c0001159:	89 0d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,ecx
c000115f:	c7 41 08 d4 43 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00243d4
c0001166:	c7 41 0c d4 43 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00243d4
c000116d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001170:	89 fa                	mov    edx,edi
c0001172:	83 ca 01             	or     edx,0x1
c0001175:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001178:	89 3b                	mov    DWORD PTR [ebx],edi
c000117a:	e9 20 01 00 00       	jmp    c000129f <dlmalloc+0x386>
c000117f:	89 c2                	mov    edx,eax
c0001181:	eb 99                	jmp    c000111c <dlmalloc+0x203>
c0001183:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001187:	b8 01 00 00 00       	mov    eax,0x1
c000118c:	41                   	inc    ecx
c000118d:	89 cb                	mov    ebx,ecx
c000118f:	c1 eb 05             	shr    ebx,0x5
c0001192:	8d 14 cd cc 43 02 c0 	lea    edx,[ecx*8-0x3ffdbc34]
c0001199:	d3 e0                	shl    eax,cl
c000119b:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c00011a2:	39 f8                	cmp    eax,edi
c00011a4:	77 04                	ja     c00011aa <dlmalloc+0x291>
c00011a6:	85 c0                	test   eax,eax
c00011a8:	75 26                	jne    c00011d0 <dlmalloc+0x2b7>
c00011aa:	43                   	inc    ebx
c00011ab:	83 fb 02             	cmp    ebx,0x2
c00011ae:	0f 87 a6 00 00 00    	ja     c000125a <dlmalloc+0x341>
c00011b4:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c00011bb:	85 ff                	test   edi,edi
c00011bd:	74 eb                	je     c00011aa <dlmalloc+0x291>
c00011bf:	89 d8                	mov    eax,ebx
c00011c1:	c1 e0 06             	shl    eax,0x6
c00011c4:	8d 14 85 cc 43 02 c0 	lea    edx,[eax*4-0x3ffdbc34]
c00011cb:	b8 01 00 00 00       	mov    eax,0x1
c00011d0:	85 f8                	test   eax,edi
c00011d2:	75 07                	jne    c00011db <dlmalloc+0x2c2>
c00011d4:	83 c2 08             	add    edx,0x8
c00011d7:	01 c0                	add    eax,eax
c00011d9:	eb f5                	jmp    c00011d0 <dlmalloc+0x2b7>
c00011db:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011de:	39 ca                	cmp    edx,ecx
c00011e0:	75 14                	jne    c00011f6 <dlmalloc+0x2dd>
c00011e2:	89 c1                	mov    ecx,eax
c00011e4:	83 c2 08             	add    edx,0x8
c00011e7:	f7 d1                	not    ecx
c00011e9:	21 cf                	and    edi,ecx
c00011eb:	01 c0                	add    eax,eax
c00011ed:	89 3c 9d d4 46 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdb92c],edi
c00011f4:	eb ac                	jmp    c00011a2 <dlmalloc+0x289>
c00011f6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011f9:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011fc:	83 e0 fc             	and    eax,0xfffffffc
c00011ff:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001202:	89 c3                	mov    ebx,eax
c0001204:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001207:	29 f3                	sub    ebx,esi
c0001209:	8d 14 01             	lea    edx,[ecx+eax*1]
c000120c:	83 fb 0f             	cmp    ebx,0xf
c000120f:	8d 41 08             	lea    eax,[ecx+0x8]
c0001212:	77 09                	ja     c000121d <dlmalloc+0x304>
c0001214:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001218:	e9 82 00 00 00       	jmp    c000129f <dlmalloc+0x386>
c000121d:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001220:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001226:	89 3d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edi
c000122c:	89 3d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,edi
c0001232:	c7 47 08 d4 43 02 c0 	mov    DWORD PTR [edi+0x8],0xc00243d4
c0001239:	c7 47 0c d4 43 02 c0 	mov    DWORD PTR [edi+0xc],0xc00243d4
c0001240:	77 06                	ja     c0001248 <dlmalloc+0x32f>
c0001242:	89 3d d0 43 02 c0    	mov    DWORD PTR ds:0xc00243d0,edi
c0001248:	83 ce 01             	or     esi,0x1
c000124b:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000124e:	89 d9                	mov    ecx,ebx
c0001250:	83 c9 01             	or     ecx,0x1
c0001253:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001256:	89 1a                	mov    DWORD PTR [edx],ebx
c0001258:	eb 45                	jmp    c000129f <dlmalloc+0x386>
c000125a:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c000125f:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001262:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001265:	83 e2 fc             	and    edx,0xfffffffc
c0001268:	39 d1                	cmp    ecx,edx
c000126a:	77 1e                	ja     c000128a <dlmalloc+0x371>
c000126c:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000126f:	89 f3                	mov    ebx,esi
c0001271:	29 f2                	sub    edx,esi
c0001273:	83 cb 01             	or     ebx,0x1
c0001276:	83 ca 01             	or     edx,0x1
c0001279:	89 0d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ecx
c000127f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001282:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001285:	e9 2d fd ff ff       	jmp    c0000fb7 <dlmalloc+0x9e>
c000128a:	83 c4 1c             	add    esp,0x1c
c000128d:	89 f0                	mov    eax,esi
c000128f:	ba a0 43 02 c0       	mov    edx,0xc00243a0
c0001294:	5b                   	pop    ebx
c0001295:	5e                   	pop    esi
c0001296:	5f                   	pop    edi
c0001297:	5d                   	pop    ebp
c0001298:	e9 13 fa ff ff       	jmp    c0000cb0 <sYSMALLOc>
c000129d:	31 c0                	xor    eax,eax
c000129f:	83 c4 1c             	add    esp,0x1c
c00012a2:	5b                   	pop    ebx
c00012a3:	5e                   	pop    esi
c00012a4:	5f                   	pop    edi
c00012a5:	5d                   	pop    ebp
c00012a6:	c3                   	ret    

c00012a7 <iALLOc>:
c00012a7:	55                   	push   ebp
c00012a8:	89 c5                	mov    ebp,eax
c00012aa:	57                   	push   edi
c00012ab:	56                   	push   esi
c00012ac:	53                   	push   ebx
c00012ad:	83 ec 2c             	sub    esp,0x2c
c00012b0:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c00012b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012bb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012c3:	75 12                	jne    c00012d7 <iALLOc+0x30>
c00012c5:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00012ca:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012ce:	e8 01 f8 ff ff       	call   c0000ad4 <malloc_consolidate>
c00012d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012dc:	74 12                	je     c00012f0 <iALLOc+0x49>
c00012de:	85 ed                	test   ebp,ebp
c00012e0:	0f 84 64 01 00 00    	je     c000144a <iALLOc+0x1a3>
c00012e6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012ee:	eb 33                	jmp    c0001323 <iALLOc+0x7c>
c00012f0:	85 ed                	test   ebp,ebp
c00012f2:	75 14                	jne    c0001308 <iALLOc+0x61>
c00012f4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012fc:	83 c4 2c             	add    esp,0x2c
c00012ff:	5b                   	pop    ebx
c0001300:	5e                   	pop    esi
c0001301:	5f                   	pop    edi
c0001302:	5d                   	pop    ebp
c0001303:	e9 11 fc ff ff       	jmp    c0000f19 <dlmalloc>
c0001308:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000130f:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001317:	83 f8 0f             	cmp    eax,0xf
c000131a:	76 07                	jbe    c0001323 <iALLOc+0x7c>
c000131c:	83 e0 f8             	and    eax,0xfffffff8
c000131f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001323:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001328:	75 09                	jne    c0001333 <iALLOc+0x8c>
c000132a:	89 d0                	mov    eax,edx
c000132c:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000132f:	31 f6                	xor    esi,esi
c0001331:	eb 3b                	jmp    c000136e <iALLOc+0xc7>
c0001333:	8b 02                	mov    eax,DWORD PTR [edx]
c0001335:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000133d:	83 c0 0b             	add    eax,0xb
c0001340:	83 f8 0f             	cmp    eax,0xf
c0001343:	76 07                	jbe    c000134c <iALLOc+0xa5>
c0001345:	83 e0 f8             	and    eax,0xfffffff8
c0001348:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000134c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001350:	0f af f5             	imul   esi,ebp
c0001353:	eb 25                	jmp    c000137a <iALLOc+0xd3>
c0001355:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001357:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000135a:	bb 10 00 00 00       	mov    ebx,0x10
c000135f:	83 f9 0f             	cmp    ecx,0xf
c0001362:	76 05                	jbe    c0001369 <iALLOc+0xc2>
c0001364:	83 e1 f8             	and    ecx,0xfffffff8
c0001367:	89 cb                	mov    ebx,ecx
c0001369:	01 de                	add    esi,ebx
c000136b:	83 c0 04             	add    eax,0x4
c000136e:	39 c7                	cmp    edi,eax
c0001370:	75 e3                	jne    c0001355 <iALLOc+0xae>
c0001372:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000137a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000137e:	83 ec 0c             	sub    esp,0xc
c0001381:	8b 1d f4 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246f4
c0001387:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c0001391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001395:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001399:	50                   	push   eax
c000139a:	e8 7a fb ff ff       	call   c0000f19 <dlmalloc>
c000139f:	83 c4 10             	add    esp,0x10
c00013a2:	89 1d f4 46 02 c0    	mov    DWORD PTR ds:0xc00246f4,ebx
c00013a8:	85 c0                	test   eax,eax
c00013aa:	0f 84 92 00 00 00    	je     c0001442 <iALLOc+0x19b>
c00013b0:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013b3:	8d 78 f8             	lea    edi,[eax-0x8]
c00013b6:	83 e3 fc             	and    ebx,0xfffffffc
c00013b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013bd:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013c2:	74 1e                	je     c00013e2 <iALLOc+0x13b>
c00013c4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013c8:	89 d9                	mov    ecx,ebx
c00013ca:	52                   	push   edx
c00013cb:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013cf:	83 e9 04             	sub    ecx,0x4
c00013d2:	51                   	push   ecx
c00013d3:	6a 00                	push   0x0
c00013d5:	50                   	push   eax
c00013d6:	e8 fd f2 ff ff       	call   c00006d8 <memset>
c00013db:	83 c4 10             	add    esp,0x10
c00013de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013e2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e7:	75 14                	jne    c00013fd <iALLOc+0x156>
c00013e9:	8d 04 37             	lea    eax,[edi+esi*1]
c00013ec:	29 f3                	sub    ebx,esi
c00013ee:	83 cb 01             	or     ebx,0x1
c00013f1:	8d 48 08             	lea    ecx,[eax+0x8]
c00013f4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013fb:	89 f3                	mov    ebx,esi
c00013fd:	31 c0                	xor    eax,eax
c00013ff:	4d                   	dec    ebp
c0001400:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001404:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001407:	39 c5                	cmp    ebp,eax
c0001409:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000140c:	74 2c                	je     c000143a <iALLOc+0x193>
c000140e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001412:	85 c9                	test   ecx,ecx
c0001414:	75 15                	jne    c000142b <iALLOc+0x184>
c0001416:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001419:	8d 71 0b             	lea    esi,[ecx+0xb]
c000141c:	b9 10 00 00 00       	mov    ecx,0x10
c0001421:	83 fe 0f             	cmp    esi,0xf
c0001424:	76 05                	jbe    c000142b <iALLOc+0x184>
c0001426:	83 e6 f8             	and    esi,0xfffffff8
c0001429:	89 f1                	mov    ecx,esi
c000142b:	89 ce                	mov    esi,ecx
c000142d:	29 cb                	sub    ebx,ecx
c000142f:	83 ce 01             	or     esi,0x1
c0001432:	40                   	inc    eax
c0001433:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001436:	01 cf                	add    edi,ecx
c0001438:	eb c6                	jmp    c0001400 <iALLOc+0x159>
c000143a:	83 cb 01             	or     ebx,0x1
c000143d:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001440:	eb 08                	jmp    c000144a <iALLOc+0x1a3>
c0001442:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000144a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000144e:	83 c4 2c             	add    esp,0x2c
c0001451:	5b                   	pop    ebx
c0001452:	5e                   	pop    esi
c0001453:	5f                   	pop    edi
c0001454:	5d                   	pop    ebp
c0001455:	c3                   	ret    

c0001456 <dlrealloc>:
c0001456:	55                   	push   ebp
c0001457:	57                   	push   edi
c0001458:	56                   	push   esi
c0001459:	53                   	push   ebx
c000145a:	83 ec 1c             	sub    esp,0x1c
c000145d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001461:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001465:	85 db                	test   ebx,ebx
c0001467:	75 10                	jne    c0001479 <dlrealloc+0x23>
c0001469:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000146d:	83 c4 1c             	add    esp,0x1c
c0001470:	5b                   	pop    ebx
c0001471:	5e                   	pop    esi
c0001472:	5f                   	pop    edi
c0001473:	5d                   	pop    ebp
c0001474:	e9 a0 fa ff ff       	jmp    c0000f19 <dlmalloc>
c0001479:	83 f8 df             	cmp    eax,0xffffffdf
c000147c:	76 07                	jbe    c0001485 <dlrealloc+0x2f>
c000147e:	31 db                	xor    ebx,ebx
c0001480:	e9 7c 01 00 00       	jmp    c0001601 <dlrealloc+0x1ab>
c0001485:	83 c0 0b             	add    eax,0xb
c0001488:	bf 10 00 00 00       	mov    edi,0x10
c000148d:	83 f8 0f             	cmp    eax,0xf
c0001490:	76 05                	jbe    c0001497 <dlrealloc+0x41>
c0001492:	83 e0 f8             	and    eax,0xfffffff8
c0001495:	89 c7                	mov    edi,eax
c0001497:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000149a:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000149d:	89 c6                	mov    esi,eax
c000149f:	83 e6 fc             	and    esi,0xfffffffc
c00014a2:	a8 02                	test   al,0x2
c00014a4:	75 d8                	jne    c000147e <dlrealloc+0x28>
c00014a6:	39 f7                	cmp    edi,esi
c00014a8:	0f 86 15 01 00 00    	jbe    c00015c3 <dlrealloc+0x16d>
c00014ae:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014b2:	39 15 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,edx
c00014b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014bb:	75 33                	jne    c00014f0 <dlrealloc+0x9a>
c00014bd:	83 e1 fc             	and    ecx,0xfffffffc
c00014c0:	01 f1                	add    ecx,esi
c00014c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014c6:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014c9:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014cd:	77 49                	ja     c0001518 <dlrealloc+0xc2>
c00014cf:	83 e0 01             	and    eax,0x1
c00014d2:	01 fd                	add    ebp,edi
c00014d4:	09 f8                	or     eax,edi
c00014d6:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014dd:	29 f8                	sub    eax,edi
c00014df:	89 2d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ebp
c00014e5:	83 c8 01             	or     eax,0x1
c00014e8:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014eb:	e9 11 01 00 00       	jmp    c0001601 <dlrealloc+0x1ab>
c00014f0:	89 c8                	mov    eax,ecx
c00014f2:	83 e0 fe             	and    eax,0xfffffffe
c00014f5:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014fa:	75 1c                	jne    c0001518 <dlrealloc+0xc2>
c00014fc:	83 e1 fc             	and    ecx,0xfffffffc
c00014ff:	01 f1                	add    ecx,esi
c0001501:	39 cf                	cmp    edi,ecx
c0001503:	77 13                	ja     c0001518 <dlrealloc+0xc2>
c0001505:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001508:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000150b:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000150e:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001511:	89 ce                	mov    esi,ecx
c0001513:	e9 ab 00 00 00       	jmp    c00015c3 <dlrealloc+0x16d>
c0001518:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000151c:	83 ec 0c             	sub    esp,0xc
c000151f:	8d 47 f9             	lea    eax,[edi-0x7]
c0001522:	50                   	push   eax
c0001523:	e8 f1 f9 ff ff       	call   c0000f19 <dlmalloc>
c0001528:	83 c4 10             	add    esp,0x10
c000152b:	89 c1                	mov    ecx,eax
c000152d:	85 c0                	test   eax,eax
c000152f:	0f 84 49 ff ff ff    	je     c000147e <dlrealloc+0x28>
c0001535:	8d 40 f8             	lea    eax,[eax-0x8]
c0001538:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000153c:	39 c2                	cmp    edx,eax
c000153e:	75 0a                	jne    c000154a <dlrealloc+0xf4>
c0001540:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001543:	83 e0 fc             	and    eax,0xfffffffc
c0001546:	01 c6                	add    esi,eax
c0001548:	eb 79                	jmp    c00015c3 <dlrealloc+0x16d>
c000154a:	83 ee 04             	sub    esi,0x4
c000154d:	83 fe 27             	cmp    esi,0x27
c0001550:	76 16                	jbe    c0001568 <dlrealloc+0x112>
c0001552:	50                   	push   eax
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	51                   	push   ecx
c0001556:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000155a:	e8 43 f1 ff ff       	call   c00006a2 <memcpy>
c000155f:	83 c4 10             	add    esp,0x10
c0001562:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001566:	eb 43                	jmp    c00015ab <dlrealloc+0x155>
c0001568:	8b 03                	mov    eax,DWORD PTR [ebx]
c000156a:	83 fe 13             	cmp    esi,0x13
c000156d:	89 01                	mov    DWORD PTR [ecx],eax
c000156f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001572:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001575:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001578:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000157b:	76 2e                	jbe    c00015ab <dlrealloc+0x155>
c000157d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001580:	83 fe 1b             	cmp    esi,0x1b
c0001583:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001586:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001589:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000158c:	76 1d                	jbe    c00015ab <dlrealloc+0x155>
c000158e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001591:	83 fe 23             	cmp    esi,0x23
c0001594:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001597:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000159a:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000159d:	76 0c                	jbe    c00015ab <dlrealloc+0x155>
c000159f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00015a2:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00015a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00015a8:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00015ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015af:	83 ec 0c             	sub    esp,0xc
c00015b2:	53                   	push   ebx
c00015b3:	e8 03 f6 ff ff       	call   c0000bbb <dlfree>
c00015b8:	83 c4 10             	add    esp,0x10
c00015bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015bf:	89 cb                	mov    ebx,ecx
c00015c1:	eb 3e                	jmp    c0001601 <dlrealloc+0x1ab>
c00015c3:	89 f2                	mov    edx,esi
c00015c5:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015c8:	29 fa                	sub    edx,edi
c00015ca:	83 e1 01             	and    ecx,0x1
c00015cd:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015d1:	83 fa 0f             	cmp    edx,0xf
c00015d4:	77 0b                	ja     c00015e1 <dlrealloc+0x18b>
c00015d6:	09 ce                	or     esi,ecx
c00015d8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015db:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015df:	eb 20                	jmp    c0001601 <dlrealloc+0x1ab>
c00015e1:	01 fd                	add    ebp,edi
c00015e3:	83 ca 01             	or     edx,0x1
c00015e6:	09 cf                	or     edi,ecx
c00015e8:	83 ec 0c             	sub    esp,0xc
c00015eb:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015f1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015f5:	83 c5 08             	add    ebp,0x8
c00015f8:	55                   	push   ebp
c00015f9:	e8 bd f5 ff ff       	call   c0000bbb <dlfree>
c00015fe:	83 c4 10             	add    esp,0x10
c0001601:	83 c4 1c             	add    esp,0x1c
c0001604:	89 d8                	mov    eax,ebx
c0001606:	5b                   	pop    ebx
c0001607:	5e                   	pop    esi
c0001608:	5f                   	pop    edi
c0001609:	5d                   	pop    ebp
c000160a:	c3                   	ret    

c000160b <dlmemalign>:
c000160b:	55                   	push   ebp
c000160c:	57                   	push   edi
c000160d:	56                   	push   esi
c000160e:	53                   	push   ebx
c000160f:	83 ec 0c             	sub    esp,0xc
c0001612:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001616:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000161a:	83 fa 08             	cmp    edx,0x8
c000161d:	77 10                	ja     c000162f <dlmemalign+0x24>
c000161f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001623:	83 c4 0c             	add    esp,0xc
c0001626:	5b                   	pop    ebx
c0001627:	5e                   	pop    esi
c0001628:	5f                   	pop    edi
c0001629:	5d                   	pop    ebp
c000162a:	e9 ea f8 ff ff       	jmp    c0000f19 <dlmalloc>
c000162f:	bf 10 00 00 00       	mov    edi,0x10
c0001634:	83 fa 0f             	cmp    edx,0xf
c0001637:	76 13                	jbe    c000164c <dlmemalign+0x41>
c0001639:	8d 4a ff             	lea    ecx,[edx-0x1]
c000163c:	85 d1                	test   ecx,edx
c000163e:	75 04                	jne    c0001644 <dlmemalign+0x39>
c0001640:	89 d7                	mov    edi,edx
c0001642:	eb 08                	jmp    c000164c <dlmemalign+0x41>
c0001644:	39 d7                	cmp    edi,edx
c0001646:	73 04                	jae    c000164c <dlmemalign+0x41>
c0001648:	01 ff                	add    edi,edi
c000164a:	eb f8                	jmp    c0001644 <dlmemalign+0x39>
c000164c:	83 f8 df             	cmp    eax,0xffffffdf
c000164f:	76 07                	jbe    c0001658 <dlmemalign+0x4d>
c0001651:	31 c0                	xor    eax,eax
c0001653:	e9 ce 00 00 00       	jmp    c0001726 <dlmemalign+0x11b>
c0001658:	83 c0 0b             	add    eax,0xb
c000165b:	bd 10 00 00 00       	mov    ebp,0x10
c0001660:	83 f8 0f             	cmp    eax,0xf
c0001663:	76 05                	jbe    c000166a <dlmemalign+0x5f>
c0001665:	83 e0 f8             	and    eax,0xfffffff8
c0001668:	89 c5                	mov    ebp,eax
c000166a:	83 ec 0c             	sub    esp,0xc
c000166d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001671:	50                   	push   eax
c0001672:	e8 a2 f8 ff ff       	call   c0000f19 <dlmalloc>
c0001677:	83 c4 10             	add    esp,0x10
c000167a:	89 c1                	mov    ecx,eax
c000167c:	85 c0                	test   eax,eax
c000167e:	74 d1                	je     c0001651 <dlmemalign+0x46>
c0001680:	31 d2                	xor    edx,edx
c0001682:	8d 70 f8             	lea    esi,[eax-0x8]
c0001685:	f7 f7                	div    edi
c0001687:	85 d2                	test   edx,edx
c0001689:	74 62                	je     c00016ed <dlmemalign+0xe2>
c000168b:	89 f8                	mov    eax,edi
c000168d:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001691:	f7 d8                	neg    eax
c0001693:	21 c3                	and    ebx,eax
c0001695:	83 eb 08             	sub    ebx,0x8
c0001698:	89 d8                	mov    eax,ebx
c000169a:	29 f0                	sub    eax,esi
c000169c:	83 f8 0f             	cmp    eax,0xf
c000169f:	77 02                	ja     c00016a3 <dlmemalign+0x98>
c00016a1:	01 fb                	add    ebx,edi
c00016a3:	89 d8                	mov    eax,ebx
c00016a5:	29 f0                	sub    eax,esi
c00016a7:	89 c6                	mov    esi,eax
c00016a9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016ac:	89 c2                	mov    edx,eax
c00016ae:	83 e2 fc             	and    edx,0xfffffffc
c00016b1:	29 f2                	sub    edx,esi
c00016b3:	a8 02                	test   al,0x2
c00016b5:	74 10                	je     c00016c7 <dlmemalign+0xbc>
c00016b7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016ba:	83 ca 02             	or     edx,0x2
c00016bd:	8d 43 08             	lea    eax,[ebx+0x8]
c00016c0:	89 33                	mov    DWORD PTR [ebx],esi
c00016c2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016c5:	eb 5f                	jmp    c0001726 <dlmemalign+0x11b>
c00016c7:	89 d0                	mov    eax,edx
c00016c9:	83 ec 0c             	sub    esp,0xc
c00016cc:	83 c8 01             	or     eax,0x1
c00016cf:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016d2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016d7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016da:	83 e0 01             	and    eax,0x1
c00016dd:	09 f0                	or     eax,esi
c00016df:	89 de                	mov    esi,ebx
c00016e1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016e4:	51                   	push   ecx
c00016e5:	e8 d1 f4 ff ff       	call   c0000bbb <dlfree>
c00016ea:	83 c4 10             	add    esp,0x10
c00016ed:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f0:	a8 02                	test   al,0x2
c00016f2:	75 2f                	jne    c0001723 <dlmemalign+0x118>
c00016f4:	83 e0 fc             	and    eax,0xfffffffc
c00016f7:	8d 55 10             	lea    edx,[ebp+0x10]
c00016fa:	39 c2                	cmp    edx,eax
c00016fc:	73 25                	jae    c0001723 <dlmemalign+0x118>
c00016fe:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001701:	29 e8                	sub    eax,ebp
c0001703:	83 c8 01             	or     eax,0x1
c0001706:	83 ec 0c             	sub    esp,0xc
c0001709:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000170c:	83 c2 08             	add    edx,0x8
c000170f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001712:	83 e0 01             	and    eax,0x1
c0001715:	09 c5                	or     ebp,eax
c0001717:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000171a:	52                   	push   edx
c000171b:	e8 9b f4 ff ff       	call   c0000bbb <dlfree>
c0001720:	83 c4 10             	add    esp,0x10
c0001723:	8d 46 08             	lea    eax,[esi+0x8]
c0001726:	83 c4 0c             	add    esp,0xc
c0001729:	5b                   	pop    ebx
c000172a:	5e                   	pop    esi
c000172b:	5f                   	pop    edi
c000172c:	5d                   	pop    ebp
c000172d:	c3                   	ret    

c000172e <dlcalloc>:
c000172e:	53                   	push   ebx
c000172f:	83 ec 14             	sub    esp,0x14
c0001732:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001736:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000173b:	50                   	push   eax
c000173c:	e8 d8 f7 ff ff       	call   c0000f19 <dlmalloc>
c0001741:	83 c4 10             	add    esp,0x10
c0001744:	89 c3                	mov    ebx,eax
c0001746:	85 c0                	test   eax,eax
c0001748:	74 77                	je     c00017c1 <dlcalloc+0x93>
c000174a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000174d:	89 d0                	mov    eax,edx
c000174f:	83 e0 fc             	and    eax,0xfffffffc
c0001752:	80 e2 02             	and    dl,0x2
c0001755:	75 5a                	jne    c00017b1 <dlcalloc+0x83>
c0001757:	83 e8 04             	sub    eax,0x4
c000175a:	83 f8 27             	cmp    eax,0x27
c000175d:	76 03                	jbe    c0001762 <dlcalloc+0x34>
c000175f:	51                   	push   ecx
c0001760:	eb 53                	jmp    c00017b5 <dlcalloc+0x87>
c0001762:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001768:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000176f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001776:	83 f8 13             	cmp    eax,0x13
c0001779:	76 46                	jbe    c00017c1 <dlcalloc+0x93>
c000177b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001782:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001789:	83 f8 1b             	cmp    eax,0x1b
c000178c:	76 33                	jbe    c00017c1 <dlcalloc+0x93>
c000178e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001795:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000179c:	83 f8 23             	cmp    eax,0x23
c000179f:	76 20                	jbe    c00017c1 <dlcalloc+0x93>
c00017a1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00017a8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017af:	eb 10                	jmp    c00017c1 <dlcalloc+0x93>
c00017b1:	83 e8 08             	sub    eax,0x8
c00017b4:	52                   	push   edx
c00017b5:	50                   	push   eax
c00017b6:	6a 00                	push   0x0
c00017b8:	53                   	push   ebx
c00017b9:	e8 1a ef ff ff       	call   c00006d8 <memset>
c00017be:	83 c4 10             	add    esp,0x10
c00017c1:	83 c4 08             	add    esp,0x8
c00017c4:	89 d8                	mov    eax,ebx
c00017c6:	5b                   	pop    ebx
c00017c7:	c3                   	ret    

c00017c8 <dlcfree>:
c00017c8:	e9 ee f3 ff ff       	jmp    c0000bbb <dlfree>

c00017cd <dlindependent_calloc>:
c00017cd:	83 ec 28             	sub    esp,0x28
c00017d0:	b9 03 00 00 00       	mov    ecx,0x3
c00017d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017e5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017e9:	e8 b9 fa ff ff       	call   c00012a7 <iALLOc>
c00017ee:	83 c4 2c             	add    esp,0x2c
c00017f1:	c3                   	ret    

c00017f2 <dlindependent_comalloc>:
c00017f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017fa:	31 c9                	xor    ecx,ecx
c00017fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001800:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001804:	e9 9e fa ff ff       	jmp    c00012a7 <iALLOc>

c0001809 <dlvalloc>:
c0001809:	83 ec 0c             	sub    esp,0xc
c000180c:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c0001813:	75 0a                	jne    c000181f <dlvalloc+0x16>
c0001815:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c000181a:	e8 b5 f2 ff ff       	call   c0000ad4 <malloc_consolidate>
c000181f:	50                   	push   eax
c0001820:	50                   	push   eax
c0001821:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001825:	ff 35 fc 46 02 c0    	push   DWORD PTR ds:0xc00246fc
c000182b:	e8 db fd ff ff       	call   c000160b <dlmemalign>
c0001830:	83 c4 1c             	add    esp,0x1c
c0001833:	c3                   	ret    

c0001834 <dlpvalloc>:
c0001834:	83 ec 0c             	sub    esp,0xc
c0001837:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c000183e:	75 0a                	jne    c000184a <dlpvalloc+0x16>
c0001840:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001845:	e8 8a f2 ff ff       	call   c0000ad4 <malloc_consolidate>
c000184a:	52                   	push   edx
c000184b:	a1 fc 46 02 c0       	mov    eax,ds:0xc00246fc
c0001850:	52                   	push   edx
c0001851:	89 c1                	mov    ecx,eax
c0001853:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001857:	f7 d9                	neg    ecx
c0001859:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000185d:	21 ca                	and    edx,ecx
c000185f:	52                   	push   edx
c0001860:	50                   	push   eax
c0001861:	e8 a5 fd ff ff       	call   c000160b <dlmemalign>
c0001866:	83 c4 1c             	add    esp,0x1c
c0001869:	c3                   	ret    

c000186a <dlmalloc_trim>:
c000186a:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c000186f:	e8 60 f2 ff ff       	call   c0000ad4 <malloc_consolidate>
c0001874:	31 c0                	xor    eax,eax
c0001876:	c3                   	ret    

c0001877 <dlmalloc_usable_size>:
c0001877:	53                   	push   ebx
c0001878:	31 c0                	xor    eax,eax
c000187a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000187e:	85 c9                	test   ecx,ecx
c0001880:	74 24                	je     c00018a6 <dlmalloc_usable_size+0x2f>
c0001882:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001885:	f6 c2 02             	test   dl,0x2
c0001888:	74 08                	je     c0001892 <dlmalloc_usable_size+0x1b>
c000188a:	83 e2 fc             	and    edx,0xfffffffc
c000188d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001890:	eb 14                	jmp    c00018a6 <dlmalloc_usable_size+0x2f>
c0001892:	89 d3                	mov    ebx,edx
c0001894:	31 c0                	xor    eax,eax
c0001896:	83 e3 fe             	and    ebx,0xfffffffe
c0001899:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000189e:	74 06                	je     c00018a6 <dlmalloc_usable_size+0x2f>
c00018a0:	83 e2 fc             	and    edx,0xfffffffc
c00018a3:	8d 42 fc             	lea    eax,[edx-0x4]
c00018a6:	5b                   	pop    ebx
c00018a7:	c3                   	ret    

c00018a8 <dlmallinfo>:
c00018a8:	55                   	push   ebp
c00018a9:	57                   	push   edi
c00018aa:	56                   	push   esi
c00018ab:	53                   	push   ebx
c00018ac:	83 ec 08             	sub    esp,0x8
c00018af:	83 3d cc 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243cc,0x0
c00018b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018ba:	75 0a                	jne    c00018c6 <dlmallinfo+0x1e>
c00018bc:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00018c1:	e8 0e f2 ff ff       	call   c0000ad4 <malloc_consolidate>
c00018c6:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c00018cb:	31 ed                	xor    ebp,ebp
c00018cd:	31 c9                	xor    ecx,ecx
c00018cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018d2:	83 e0 fc             	and    eax,0xfffffffc
c00018d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018d9:	31 c0                	xor    eax,eax
c00018db:	8b 14 85 a4 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbc5c]
c00018e2:	85 d2                	test   edx,edx
c00018e4:	74 0e                	je     c00018f4 <dlmallinfo+0x4c>
c00018e6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018e9:	45                   	inc    ebp
c00018ea:	83 e6 fc             	and    esi,0xfffffffc
c00018ed:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018f0:	01 f1                	add    ecx,esi
c00018f2:	eb ee                	jmp    c00018e2 <dlmallinfo+0x3a>
c00018f4:	40                   	inc    eax
c00018f5:	83 f8 0a             	cmp    eax,0xa
c00018f8:	75 e1                	jne    c00018db <dlmallinfo+0x33>
c00018fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018fe:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001905:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001908:	b8 d4 43 02 c0       	mov    eax,0xc00243d4
c000190d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001910:	39 f0                	cmp    eax,esi
c0001912:	74 10                	je     c0001924 <dlmallinfo+0x7c>
c0001914:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001917:	ff 04 24             	inc    DWORD PTR [esp]
c000191a:	83 e7 fc             	and    edi,0xfffffffc
c000191d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001920:	01 fa                	add    edx,edi
c0001922:	eb ec                	jmp    c0001910 <dlmallinfo+0x68>
c0001924:	83 c0 08             	add    eax,0x8
c0001927:	3d cc 46 02 c0       	cmp    eax,0xc00246cc
c000192c:	75 df                	jne    c000190d <dlmallinfo+0x65>
c000192e:	a1 08 47 02 c0       	mov    eax,ds:0xc0024708
c0001933:	8b 35 f0 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246f0
c0001939:	89 03                	mov    DWORD PTR [ebx],eax
c000193b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000193e:	29 d0                	sub    eax,edx
c0001940:	8b 35 04 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024704
c0001946:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001949:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000194c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000194f:	8b 35 14 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024714
c0001955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001959:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000195c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000195f:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001962:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001965:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001968:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000196b:	83 c4 08             	add    esp,0x8
c000196e:	89 d8                	mov    eax,ebx
c0001970:	5b                   	pop    ebx
c0001971:	5e                   	pop    esi
c0001972:	5f                   	pop    edi
c0001973:	5d                   	pop    ebp
c0001974:	c2 04 00             	ret    0x4

c0001977 <dlmalloc_stats>:
c0001977:	83 ec 30             	sub    esp,0x30
c000197a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000197e:	50                   	push   eax
c000197f:	e8 24 ff ff ff       	call   c00018a8 <dlmallinfo>
c0001984:	83 c4 30             	add    esp,0x30
c0001987:	c3                   	ret    

c0001988 <dlmallopt>:
c0001988:	56                   	push   esi
c0001989:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c000198e:	53                   	push   ebx
c000198f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001993:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001997:	e8 38 f1 ff ff       	call   c0000ad4 <malloc_consolidate>
c000199c:	8d 46 04             	lea    eax,[esi+0x4]
c000199f:	83 f8 05             	cmp    eax,0x5
c00019a2:	77 67                	ja     c0001a0b <dlmallopt+0x83>
c00019a4:	ff 24 85 24 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfbdc]
c00019ab:	83 fb 50             	cmp    ebx,0x50
c00019ae:	77 5b                	ja     c0001a0b <dlmallopt+0x83>
c00019b0:	ba 08 00 00 00       	mov    edx,0x8
c00019b5:	85 db                	test   ebx,ebx
c00019b7:	74 12                	je     c00019cb <dlmallopt+0x43>
c00019b9:	83 c3 0b             	add    ebx,0xb
c00019bc:	ba 10 00 00 00       	mov    edx,0x10
c00019c1:	83 fb 0f             	cmp    ebx,0xf
c00019c4:	76 05                	jbe    c00019cb <dlmallopt+0x43>
c00019c6:	89 da                	mov    edx,ebx
c00019c8:	83 e2 f8             	and    edx,0xfffffff8
c00019cb:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c00019d0:	83 e0 03             	and    eax,0x3
c00019d3:	09 d0                	or     eax,edx
c00019d5:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c00019da:	eb 31                	jmp    c0001a0d <dlmallopt+0x85>
c00019dc:	89 1d e4 46 02 c0    	mov    DWORD PTR ds:0xc00246e4,ebx
c00019e2:	eb 06                	jmp    c00019ea <dlmallopt+0x62>
c00019e4:	89 1d e8 46 02 c0    	mov    DWORD PTR ds:0xc00246e8,ebx
c00019ea:	be 01 00 00 00       	mov    esi,0x1
c00019ef:	eb 1c                	jmp    c0001a0d <dlmallopt+0x85>
c00019f1:	89 1d ec 46 02 c0    	mov    DWORD PTR ds:0xc00246ec,ebx
c00019f7:	eb f1                	jmp    c00019ea <dlmallopt+0x62>
c00019f9:	31 f6                	xor    esi,esi
c00019fb:	85 db                	test   ebx,ebx
c00019fd:	75 0e                	jne    c0001a0d <dlmallopt+0x85>
c00019ff:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c0001a09:	eb df                	jmp    c00019ea <dlmallopt+0x62>
c0001a0b:	31 f6                	xor    esi,esi
c0001a0d:	5b                   	pop    ebx
c0001a0e:	89 f0                	mov    eax,esi
c0001a10:	5e                   	pop    esi
c0001a11:	c3                   	ret    

c0001a12 <disk_status>:
c0001a12:	31 c0                	xor    eax,eax
c0001a14:	c3                   	ret    

c0001a15 <disk_initialize>:
c0001a15:	31 c0                	xor    eax,eax
c0001a17:	c3                   	ret    

c0001a18 <disk_read>:
c0001a18:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1d:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a29:	e9 9e 8d 01 00       	jmp    c001a7cc <fatWrapperReadDisk>

c0001a2e <disk_write>:
c0001a2e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a33:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a3f:	e9 d3 8d 01 00       	jmp    c001a817 <fatWrapperWriteDisk>

c0001a44 <disk_ioctl>:
c0001a44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a4d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a52:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a5e:	e9 ff 8d 01 00       	jmp    c001a862 <fatWrapperIoctl>

c0001a63 <ld_word>:
c0001a63:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a67:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6a:	c1 e2 08             	shl    edx,0x8
c0001a6d:	09 d0                	or     eax,edx
c0001a6f:	c3                   	ret    

c0001a70 <ld_dword>:
c0001a70:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a74:	89 d1                	mov    ecx,edx
c0001a76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a7a:	c1 e1 08             	shl    ecx,0x8
c0001a7d:	09 ca                	or     edx,ecx
c0001a7f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a82:	c1 e2 08             	shl    edx,0x8
c0001a85:	09 d0                	or     eax,edx
c0001a87:	c3                   	ret    

c0001a88 <ld_qword>:
c0001a88:	57                   	push   edi
c0001a89:	56                   	push   esi
c0001a8a:	53                   	push   ebx
c0001a8b:	31 db                	xor    ebx,ebx
c0001a8d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a90:	89 df                	mov    edi,ebx
c0001a92:	89 ce                	mov    esi,ecx
c0001a94:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a98:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a9c:	c1 e6 08             	shl    esi,0x8
c0001a9f:	09 f2                	or     edx,esi
c0001aa1:	89 d6                	mov    esi,edx
c0001aa3:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001aa7:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aab:	c1 e6 08             	shl    esi,0x8
c0001aae:	09 f2                	or     edx,esi
c0001ab0:	89 d6                	mov    esi,edx
c0001ab2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ab6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aba:	c1 e6 08             	shl    esi,0x8
c0001abd:	89 fb                	mov    ebx,edi
c0001abf:	09 f2                	or     edx,esi
c0001ac1:	89 d1                	mov    ecx,edx
c0001ac3:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ac7:	89 da                	mov    edx,ebx
c0001ac9:	5b                   	pop    ebx
c0001aca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001acd:	c1 e1 08             	shl    ecx,0x8
c0001ad0:	5e                   	pop    esi
c0001ad1:	09 c8                	or     eax,ecx
c0001ad3:	5f                   	pop    edi
c0001ad4:	c3                   	ret    

c0001ad5 <st_word>:
c0001ad5:	66 89 10             	mov    WORD PTR [eax],dx
c0001ad8:	c3                   	ret    

c0001ad9 <st_dword>:
c0001ad9:	89 10                	mov    DWORD PTR [eax],edx
c0001adb:	c3                   	ret    

c0001adc <st_qword>:
c0001adc:	89 10                	mov    DWORD PTR [eax],edx
c0001ade:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ae1:	c3                   	ret    

c0001ae2 <mem_cpy>:
c0001ae2:	85 c9                	test   ecx,ecx
c0001ae4:	74 10                	je     c0001af6 <mem_cpy+0x14>
c0001ae6:	57                   	push   edi
c0001ae7:	01 c1                	add    ecx,eax
c0001ae9:	56                   	push   esi
c0001aea:	89 c7                	mov    edi,eax
c0001aec:	89 d6                	mov    esi,edx
c0001aee:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001aef:	39 f9                	cmp    ecx,edi
c0001af1:	75 fb                	jne    c0001aee <mem_cpy+0xc>
c0001af3:	5e                   	pop    esi
c0001af4:	5f                   	pop    edi
c0001af5:	c3                   	ret    
c0001af6:	c3                   	ret    

c0001af7 <mem_set>:
c0001af7:	01 c1                	add    ecx,eax
c0001af9:	40                   	inc    eax
c0001afa:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001afd:	39 c8                	cmp    eax,ecx
c0001aff:	75 f8                	jne    c0001af9 <mem_set+0x2>
c0001b01:	c3                   	ret    

c0001b02 <mem_cmp>:
c0001b02:	57                   	push   edi
c0001b03:	56                   	push   esi
c0001b04:	89 c6                	mov    esi,eax
c0001b06:	53                   	push   ebx
c0001b07:	46                   	inc    esi
c0001b08:	42                   	inc    edx
c0001b09:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001b0d:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b11:	29 fb                	sub    ebx,edi
c0001b13:	89 cf                	mov    edi,ecx
c0001b15:	29 f7                	sub    edi,esi
c0001b17:	01 c7                	add    edi,eax
c0001b19:	74 04                	je     c0001b1f <mem_cmp+0x1d>
c0001b1b:	85 db                	test   ebx,ebx
c0001b1d:	74 e8                	je     c0001b07 <mem_cmp+0x5>
c0001b1f:	89 d8                	mov    eax,ebx
c0001b21:	5b                   	pop    ebx
c0001b22:	5e                   	pop    esi
c0001b23:	5f                   	pop    edi
c0001b24:	c3                   	ret    

c0001b25 <chk_chr>:
c0001b25:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b28:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b2b:	74 07                	je     c0001b34 <chk_chr+0xf>
c0001b2d:	39 d1                	cmp    ecx,edx
c0001b2f:	74 03                	je     c0001b34 <chk_chr+0xf>
c0001b31:	40                   	inc    eax
c0001b32:	eb f1                	jmp    c0001b25 <chk_chr>
c0001b34:	89 c8                	mov    eax,ecx
c0001b36:	c3                   	ret    

c0001b37 <dbc_1st>:
c0001b37:	31 c0                	xor    eax,eax
c0001b39:	c3                   	ret    

c0001b3a <dbc_2nd>:
c0001b3a:	31 c0                	xor    eax,eax
c0001b3c:	c3                   	ret    

c0001b3d <tchar2uni>:
c0001b3d:	57                   	push   edi
c0001b3e:	89 c7                	mov    edi,eax
c0001b40:	56                   	push   esi
c0001b41:	53                   	push   ebx
c0001b42:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b44:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b46:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b49:	84 c9                	test   cl,cl
c0001b4b:	78 0a                	js     c0001b57 <tchar2uni+0x1a>
c0001b4d:	0f b6 d1             	movzx  edx,cl
c0001b50:	89 f3                	mov    ebx,esi
c0001b52:	e9 9f 00 00 00       	jmp    c0001bf6 <tchar2uni+0xb9>
c0001b57:	88 ca                	mov    dl,cl
c0001b59:	83 e2 e0             	and    edx,0xffffffe0
c0001b5c:	80 fa c0             	cmp    dl,0xc0
c0001b5f:	75 0c                	jne    c0001b6d <tchar2uni+0x30>
c0001b61:	89 ca                	mov    edx,ecx
c0001b63:	b9 01 00 00 00       	mov    ecx,0x1
c0001b68:	83 e2 1f             	and    edx,0x1f
c0001b6b:	eb 2e                	jmp    c0001b9b <tchar2uni+0x5e>
c0001b6d:	88 ca                	mov    dl,cl
c0001b6f:	83 e2 f0             	and    edx,0xfffffff0
c0001b72:	80 fa e0             	cmp    dl,0xe0
c0001b75:	75 0c                	jne    c0001b83 <tchar2uni+0x46>
c0001b77:	89 ca                	mov    edx,ecx
c0001b79:	b9 02 00 00 00       	mov    ecx,0x2
c0001b7e:	83 e2 0f             	and    edx,0xf
c0001b81:	eb 18                	jmp    c0001b9b <tchar2uni+0x5e>
c0001b83:	88 ca                	mov    dl,cl
c0001b85:	83 e2 f8             	and    edx,0xfffffff8
c0001b88:	88 d0                	mov    al,dl
c0001b8a:	83 ca ff             	or     edx,0xffffffff
c0001b8d:	3c f0                	cmp    al,0xf0
c0001b8f:	75 6c                	jne    c0001bfd <tchar2uni+0xc0>
c0001b91:	89 ca                	mov    edx,ecx
c0001b93:	b9 03 00 00 00       	mov    ecx,0x3
c0001b98:	83 e2 07             	and    edx,0x7
c0001b9b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b9f:	46                   	inc    esi
c0001ba0:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ba3:	88 c8                	mov    al,cl
c0001ba5:	83 e0 c0             	and    eax,0xffffffc0
c0001ba8:	3c 80                	cmp    al,0x80
c0001baa:	75 4e                	jne    c0001bfa <tchar2uni+0xbd>
c0001bac:	c1 e2 06             	shl    edx,0x6
c0001baf:	83 e1 3f             	and    ecx,0x3f
c0001bb2:	09 ca                	or     edx,ecx
c0001bb4:	39 de                	cmp    esi,ebx
c0001bb6:	75 e7                	jne    c0001b9f <tchar2uni+0x62>
c0001bb8:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bbe:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bc4:	76 34                	jbe    c0001bfa <tchar2uni+0xbd>
c0001bc6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bc9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bcf:	77 29                	ja     c0001bfa <tchar2uni+0xbd>
c0001bd1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bd7:	76 1d                	jbe    c0001bf6 <tchar2uni+0xb9>
c0001bd9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bdf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001be5:	c1 e1 06             	shl    ecx,0x6
c0001be8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bee:	09 ca                	or     edx,ecx
c0001bf0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bf6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bf8:	eb 03                	jmp    c0001bfd <tchar2uni+0xc0>
c0001bfa:	83 ca ff             	or     edx,0xffffffff
c0001bfd:	5b                   	pop    ebx
c0001bfe:	89 d0                	mov    eax,edx
c0001c00:	5e                   	pop    esi
c0001c01:	5f                   	pop    edi
c0001c02:	c3                   	ret    

c0001c03 <put_utf>:
c0001c03:	53                   	push   ebx
c0001c04:	83 f8 7f             	cmp    eax,0x7f
c0001c07:	89 c3                	mov    ebx,eax
c0001c09:	b0 00                	mov    al,0x0
c0001c0b:	77 11                	ja     c0001c1e <put_utf+0x1b>
c0001c0d:	85 c9                	test   ecx,ecx
c0001c0f:	0f 84 e5 00 00 00    	je     c0001cfa <put_utf+0xf7>
c0001c15:	88 1a                	mov    BYTE PTR [edx],bl
c0001c17:	b0 01                	mov    al,0x1
c0001c19:	e9 dc 00 00 00       	jmp    c0001cfa <put_utf+0xf7>
c0001c1e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c24:	77 23                	ja     c0001c49 <put_utf+0x46>
c0001c26:	83 f9 01             	cmp    ecx,0x1
c0001c29:	0f 86 cb 00 00 00    	jbe    c0001cfa <put_utf+0xf7>
c0001c2f:	89 d8                	mov    eax,ebx
c0001c31:	83 e3 3f             	and    ebx,0x3f
c0001c34:	c1 e8 06             	shr    eax,0x6
c0001c37:	83 cb 80             	or     ebx,0xffffff80
c0001c3a:	83 c8 c0             	or     eax,0xffffffc0
c0001c3d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c40:	88 02                	mov    BYTE PTR [edx],al
c0001c42:	b0 02                	mov    al,0x2
c0001c44:	e9 b1 00 00 00       	jmp    c0001cfa <put_utf+0xf7>
c0001c49:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c4f:	77 40                	ja     c0001c91 <put_utf+0x8e>
c0001c51:	83 f9 02             	cmp    ecx,0x2
c0001c54:	0f 86 a0 00 00 00    	jbe    c0001cfa <put_utf+0xf7>
c0001c5a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c60:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c66:	0f 86 8e 00 00 00    	jbe    c0001cfa <put_utf+0xf7>
c0001c6c:	89 d8                	mov    eax,ebx
c0001c6e:	c1 e8 0c             	shr    eax,0xc
c0001c71:	83 c8 e0             	or     eax,0xffffffe0
c0001c74:	88 02                	mov    BYTE PTR [edx],al
c0001c76:	89 d8                	mov    eax,ebx
c0001c78:	c1 e8 06             	shr    eax,0x6
c0001c7b:	83 e3 3f             	and    ebx,0x3f
c0001c7e:	83 e0 3f             	and    eax,0x3f
c0001c81:	83 cb 80             	or     ebx,0xffffff80
c0001c84:	83 c8 80             	or     eax,0xffffff80
c0001c87:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c8a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8d:	b0 03                	mov    al,0x3
c0001c8f:	eb 69                	jmp    c0001cfa <put_utf+0xf7>
c0001c91:	83 f9 03             	cmp    ecx,0x3
c0001c94:	76 64                	jbe    c0001cfa <put_utf+0xf7>
c0001c96:	89 d9                	mov    ecx,ebx
c0001c98:	66 31 c9             	xor    cx,cx
c0001c9b:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ca1:	0f b7 c3             	movzx  eax,bx
c0001ca4:	c1 e9 06             	shr    ecx,0x6
c0001ca7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001cad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001cb3:	77 43                	ja     c0001cf8 <put_utf+0xf5>
c0001cb5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001cbb:	77 3b                	ja     c0001cf8 <put_utf+0xf5>
c0001cbd:	09 cb                	or     ebx,ecx
c0001cbf:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	c1 e8 12             	shr    eax,0x12
c0001cca:	83 c8 f0             	or     eax,0xfffffff0
c0001ccd:	88 02                	mov    BYTE PTR [edx],al
c0001ccf:	89 d8                	mov    eax,ebx
c0001cd1:	c1 e8 0c             	shr    eax,0xc
c0001cd4:	83 e0 3f             	and    eax,0x3f
c0001cd7:	83 c8 80             	or     eax,0xffffff80
c0001cda:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cdd:	89 d8                	mov    eax,ebx
c0001cdf:	c1 e8 06             	shr    eax,0x6
c0001ce2:	83 e3 3f             	and    ebx,0x3f
c0001ce5:	83 e0 3f             	and    eax,0x3f
c0001ce8:	83 cb 80             	or     ebx,0xffffff80
c0001ceb:	83 c8 80             	or     eax,0xffffff80
c0001cee:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cf1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cf4:	b0 04                	mov    al,0x4
c0001cf6:	eb 02                	jmp    c0001cfa <put_utf+0xf7>
c0001cf8:	31 c0                	xor    eax,eax
c0001cfa:	5b                   	pop    ebx
c0001cfb:	c3                   	ret    

c0001cfc <clst2sect>:
c0001cfc:	89 c1                	mov    ecx,eax
c0001cfe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001d01:	83 ea 02             	sub    edx,0x2
c0001d04:	83 e8 02             	sub    eax,0x2
c0001d07:	39 d0                	cmp    eax,edx
c0001d09:	76 0d                	jbe    c0001d18 <clst2sect+0x1c>
c0001d0b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d0f:	f7 e2                	mul    edx
c0001d11:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d14:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d17:	c3                   	ret    
c0001d18:	31 c0                	xor    eax,eax
c0001d1a:	31 d2                	xor    edx,edx
c0001d1c:	c3                   	ret    

c0001d1d <clmt_clust>:
c0001d1d:	57                   	push   edi
c0001d1e:	89 cf                	mov    edi,ecx
c0001d20:	56                   	push   esi
c0001d21:	89 d6                	mov    esi,edx
c0001d23:	53                   	push   ebx
c0001d24:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d27:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d29:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d2d:	c1 ef 09             	shr    edi,0x9
c0001d30:	89 f2                	mov    edx,esi
c0001d32:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d35:	89 f9                	mov    ecx,edi
c0001d37:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d3b:	31 ff                	xor    edi,edi
c0001d3d:	57                   	push   edi
c0001d3e:	56                   	push   esi
c0001d3f:	51                   	push   ecx
c0001d40:	52                   	push   edx
c0001d41:	e8 d6 d7 01 00       	call   c001f51c <__udivdi3>
c0001d46:	83 c4 10             	add    esp,0x10
c0001d49:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d4b:	85 d2                	test   edx,edx
c0001d4d:	74 10                	je     c0001d5f <clmt_clust+0x42>
c0001d4f:	39 d0                	cmp    eax,edx
c0001d51:	72 07                	jb     c0001d5a <clmt_clust+0x3d>
c0001d53:	29 d0                	sub    eax,edx
c0001d55:	83 c3 08             	add    ebx,0x8
c0001d58:	eb ef                	jmp    c0001d49 <clmt_clust+0x2c>
c0001d5a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d5d:	89 c2                	mov    edx,eax
c0001d5f:	5b                   	pop    ebx
c0001d60:	89 d0                	mov    eax,edx
c0001d62:	5e                   	pop    esi
c0001d63:	5f                   	pop    edi
c0001d64:	c3                   	ret    

c0001d65 <pick_lfn>:
c0001d65:	55                   	push   ebp
c0001d66:	57                   	push   edi
c0001d67:	56                   	push   esi
c0001d68:	89 d6                	mov    esi,edx
c0001d6a:	53                   	push   ebx
c0001d6b:	89 c3                	mov    ebx,eax
c0001d6d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d70:	e8 ee fc ff ff       	call   c0001a63 <ld_word>
c0001d75:	66 85 c0             	test   ax,ax
c0001d78:	74 04                	je     c0001d7e <pick_lfn+0x19>
c0001d7a:	31 c0                	xor    eax,eax
c0001d7c:	eb 5c                	jmp    c0001dda <pick_lfn+0x75>
c0001d7e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d81:	83 e1 bf             	and    ecx,0xffffffbf
c0001d84:	bd 01 00 00 00       	mov    ebp,0x1
c0001d89:	49                   	dec    ecx
c0001d8a:	31 ff                	xor    edi,edi
c0001d8c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d8f:	0f b6 87 40 05 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfac0]
c0001d96:	01 f0                	add    eax,esi
c0001d98:	e8 c6 fc ff ff       	call   c0001a63 <ld_word>
c0001d9d:	66 85 ed             	test   bp,bp
c0001da0:	74 11                	je     c0001db3 <pick_lfn+0x4e>
c0001da2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001da8:	77 d0                	ja     c0001d7a <pick_lfn+0x15>
c0001daa:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001dae:	89 c5                	mov    ebp,eax
c0001db0:	41                   	inc    ecx
c0001db1:	eb 04                	jmp    c0001db7 <pick_lfn+0x52>
c0001db3:	66 40                	inc    ax
c0001db5:	75 c3                	jne    c0001d7a <pick_lfn+0x15>
c0001db7:	47                   	inc    edi
c0001db8:	83 ff 0d             	cmp    edi,0xd
c0001dbb:	75 d2                	jne    c0001d8f <pick_lfn+0x2a>
c0001dbd:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001dc0:	74 13                	je     c0001dd5 <pick_lfn+0x70>
c0001dc2:	66 85 ed             	test   bp,bp
c0001dc5:	74 0e                	je     c0001dd5 <pick_lfn+0x70>
c0001dc7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dcd:	77 ab                	ja     c0001d7a <pick_lfn+0x15>
c0001dcf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dd5:	b8 01 00 00 00       	mov    eax,0x1
c0001dda:	5b                   	pop    ebx
c0001ddb:	5e                   	pop    esi
c0001ddc:	5f                   	pop    edi
c0001ddd:	5d                   	pop    ebp
c0001dde:	c3                   	ret    

c0001ddf <put_lfn>:
c0001ddf:	55                   	push   ebp
c0001de0:	31 ed                	xor    ebp,ebp
c0001de2:	57                   	push   edi
c0001de3:	89 d7                	mov    edi,edx
c0001de5:	56                   	push   esi
c0001de6:	31 f6                	xor    esi,esi
c0001de8:	53                   	push   ebx
c0001de9:	83 ec 08             	sub    esp,0x8
c0001dec:	89 04 24             	mov    DWORD PTR [esp],eax
c0001def:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001df3:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001df6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dfc:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dff:	31 d2                	xor    edx,edx
c0001e01:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001e05:	e8 cb fc ff ff       	call   c0001ad5 <st_word>
c0001e0a:	0f b6 d9             	movzx  ebx,cl
c0001e0d:	4b                   	dec    ebx
c0001e0e:	6b db 0d             	imul   ebx,ebx,0xd
c0001e11:	66 83 fe ff          	cmp    si,0xffff
c0001e15:	74 08                	je     c0001e1f <put_lfn+0x40>
c0001e17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e1a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e1e:	43                   	inc    ebx
c0001e1f:	0f b6 85 40 05 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfac0]
c0001e26:	0f b7 d6             	movzx  edx,si
c0001e29:	01 f8                	add    eax,edi
c0001e2b:	e8 a5 fc ff ff       	call   c0001ad5 <st_word>
c0001e30:	66 85 f6             	test   si,si
c0001e33:	75 03                	jne    c0001e38 <put_lfn+0x59>
c0001e35:	83 ce ff             	or     esi,0xffffffff
c0001e38:	45                   	inc    ebp
c0001e39:	83 fd 0d             	cmp    ebp,0xd
c0001e3c:	75 d3                	jne    c0001e11 <put_lfn+0x32>
c0001e3e:	66 46                	inc    si
c0001e40:	74 0a                	je     c0001e4c <put_lfn+0x6d>
c0001e42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e45:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e4a:	75 09                	jne    c0001e55 <put_lfn+0x76>
c0001e4c:	88 c8                	mov    al,cl
c0001e4e:	83 c8 40             	or     eax,0x40
c0001e51:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e55:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e59:	88 07                	mov    BYTE PTR [edi],al
c0001e5b:	83 c4 08             	add    esp,0x8
c0001e5e:	5b                   	pop    ebx
c0001e5f:	5e                   	pop    esi
c0001e60:	5f                   	pop    edi
c0001e61:	5d                   	pop    ebp
c0001e62:	c3                   	ret    

c0001e63 <gen_numname>:
c0001e63:	57                   	push   edi
c0001e64:	89 cf                	mov    edi,ecx
c0001e66:	56                   	push   esi
c0001e67:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e6c:	53                   	push   ebx
c0001e6d:	89 c6                	mov    esi,eax
c0001e6f:	83 ec 10             	sub    esp,0x10
c0001e72:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e76:	e8 67 fc ff ff       	call   c0001ae2 <mem_cpy>
c0001e7b:	83 fb 05             	cmp    ebx,0x5
c0001e7e:	76 2d                	jbe    c0001ead <gen_numname+0x4a>
c0001e80:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e83:	66 85 c0             	test   ax,ax
c0001e86:	74 25                	je     c0001ead <gen_numname+0x4a>
c0001e88:	83 c7 02             	add    edi,0x2
c0001e8b:	ba 10 00 00 00       	mov    edx,0x10
c0001e90:	89 c1                	mov    ecx,eax
c0001e92:	01 db                	add    ebx,ebx
c0001e94:	66 d1 e8             	shr    ax,1
c0001e97:	83 e1 01             	and    ecx,0x1
c0001e9a:	01 cb                	add    ebx,ecx
c0001e9c:	0f ba e3 10          	bt     ebx,0x10
c0001ea0:	73 06                	jae    c0001ea8 <gen_numname+0x45>
c0001ea2:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001ea8:	4a                   	dec    edx
c0001ea9:	75 e5                	jne    c0001e90 <gen_numname+0x2d>
c0001eab:	eb d3                	jmp    c0001e80 <gen_numname+0x1d>
c0001ead:	b8 07 00 00 00       	mov    eax,0x7
c0001eb2:	88 d9                	mov    cl,bl
c0001eb4:	83 e1 0f             	and    ecx,0xf
c0001eb7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001eba:	80 fa 39             	cmp    dl,0x39
c0001ebd:	76 03                	jbe    c0001ec2 <gen_numname+0x5f>
c0001ebf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ec2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ec5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ec9:	89 da                	mov    edx,ebx
c0001ecb:	c1 ea 04             	shr    edx,0x4
c0001ece:	83 fb 0f             	cmp    ebx,0xf
c0001ed1:	76 06                	jbe    c0001ed9 <gen_numname+0x76>
c0001ed3:	89 c8                	mov    eax,ecx
c0001ed5:	89 d3                	mov    ebx,edx
c0001ed7:	eb d9                	jmp    c0001eb2 <gen_numname+0x4f>
c0001ed9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ee3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ee6:	39 ca                	cmp    edx,ecx
c0001ee8:	73 18                	jae    c0001f02 <gen_numname+0x9f>
c0001eea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001eed:	3c 20                	cmp    al,0x20
c0001eef:	74 11                	je     c0001f02 <gen_numname+0x9f>
c0001ef1:	e8 41 fc ff ff       	call   c0001b37 <dbc_1st>
c0001ef6:	85 c0                	test   eax,eax
c0001ef8:	74 05                	je     c0001eff <gen_numname+0x9c>
c0001efa:	39 d3                	cmp    ebx,edx
c0001efc:	74 04                	je     c0001f02 <gen_numname+0x9f>
c0001efe:	42                   	inc    edx
c0001eff:	42                   	inc    edx
c0001f00:	eb e1                	jmp    c0001ee3 <gen_numname+0x80>
c0001f02:	b0 20                	mov    al,0x20
c0001f04:	83 f9 07             	cmp    ecx,0x7
c0001f07:	77 05                	ja     c0001f0e <gen_numname+0xab>
c0001f09:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f0d:	41                   	inc    ecx
c0001f0e:	42                   	inc    edx
c0001f0f:	83 fa 07             	cmp    edx,0x7
c0001f12:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f16:	76 ea                	jbe    c0001f02 <gen_numname+0x9f>
c0001f18:	83 c4 10             	add    esp,0x10
c0001f1b:	5b                   	pop    ebx
c0001f1c:	5e                   	pop    esi
c0001f1d:	5f                   	pop    edi
c0001f1e:	c3                   	ret    

c0001f1f <sum_sfn>:
c0001f1f:	31 c9                	xor    ecx,ecx
c0001f21:	31 d2                	xor    edx,edx
c0001f23:	d0 ca                	ror    dl,1
c0001f25:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f28:	41                   	inc    ecx
c0001f29:	83 f9 0b             	cmp    ecx,0xb
c0001f2c:	75 f5                	jne    c0001f23 <sum_sfn+0x4>
c0001f2e:	88 d0                	mov    al,dl
c0001f30:	c3                   	ret    

c0001f31 <xdir_sum>:
c0001f31:	56                   	push   esi
c0001f32:	31 c9                	xor    ecx,ecx
c0001f34:	53                   	push   ebx
c0001f35:	31 d2                	xor    edx,edx
c0001f37:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f3b:	43                   	inc    ebx
c0001f3c:	c1 e3 05             	shl    ebx,0x5
c0001f3f:	83 fa 02             	cmp    edx,0x2
c0001f42:	74 0b                	je     c0001f4f <xdir_sum+0x1e>
c0001f44:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f48:	66 d1 c9             	ror    cx,1
c0001f4b:	01 f1                	add    ecx,esi
c0001f4d:	eb 05                	jmp    c0001f54 <xdir_sum+0x23>
c0001f4f:	ba 03 00 00 00       	mov    edx,0x3
c0001f54:	42                   	inc    edx
c0001f55:	39 d3                	cmp    ebx,edx
c0001f57:	77 e6                	ja     c0001f3f <xdir_sum+0xe>
c0001f59:	5b                   	pop    ebx
c0001f5a:	89 c8                	mov    eax,ecx
c0001f5c:	5e                   	pop    esi
c0001f5d:	c3                   	ret    

c0001f5e <xsum32>:
c0001f5e:	d1 ca                	ror    edx,1
c0001f60:	0f b6 c0             	movzx  eax,al
c0001f63:	01 d0                	add    eax,edx
c0001f65:	c3                   	ret    

c0001f66 <get_xfileinfo>:
c0001f66:	55                   	push   ebp
c0001f67:	31 c9                	xor    ecx,ecx
c0001f69:	57                   	push   edi
c0001f6a:	bd 40 00 00 00       	mov    ebp,0x40
c0001f6f:	56                   	push   esi
c0001f70:	31 ff                	xor    edi,edi
c0001f72:	53                   	push   ebx
c0001f73:	89 c6                	mov    esi,eax
c0001f75:	83 ec 0c             	sub    esp,0xc
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f81:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f85:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f88:	76 6d                	jbe    c0001ff7 <get_xfileinfo+0x91>
c0001f8a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f90:	76 0b                	jbe    c0001f9d <get_xfileinfo+0x37>
c0001f92:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f96:	bf 01 00 00 00       	mov    edi,0x1
c0001f9b:	eb 63                	jmp    c0002000 <get_xfileinfo+0x9a>
c0001f9d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001fa3:	75 03                	jne    c0001fa8 <get_xfileinfo+0x42>
c0001fa5:	83 c5 02             	add    ebp,0x2
c0001fa8:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001fab:	83 c5 02             	add    ebp,0x2
c0001fae:	e8 b0 fa ff ff       	call   c0001a63 <ld_word>
c0001fb3:	ff 04 24             	inc    DWORD PTR [esp]
c0001fb6:	66 85 c9             	test   cx,cx
c0001fb9:	75 0d                	jne    c0001fc8 <get_xfileinfo+0x62>
c0001fbb:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fc1:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fc6:	76 2b                	jbe    c0001ff3 <get_xfileinfo+0x8d>
c0001fc8:	c1 e1 10             	shl    ecx,0x10
c0001fcb:	ba ff 00 00 00       	mov    edx,0xff
c0001fd0:	29 fa                	sub    edx,edi
c0001fd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fd6:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fda:	0f b7 c0             	movzx  eax,ax
c0001fdd:	09 c8                	or     eax,ecx
c0001fdf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fe3:	e8 1b fc ff ff       	call   c0001c03 <put_utf>
c0001fe8:	84 c0                	test   al,al
c0001fea:	74 a6                	je     c0001f92 <get_xfileinfo+0x2c>
c0001fec:	0f b6 c0             	movzx  eax,al
c0001fef:	01 c7                	add    edi,eax
c0001ff1:	31 c0                	xor    eax,eax
c0001ff3:	89 c1                	mov    ecx,eax
c0001ff5:	eb 8a                	jmp    c0001f81 <get_xfileinfo+0x1b>
c0001ff7:	85 ff                	test   edi,edi
c0001ff9:	74 97                	je     c0001f92 <get_xfileinfo+0x2c>
c0001ffb:	66 85 c9             	test   cx,cx
c0001ffe:	75 92                	jne    c0001f92 <get_xfileinfo+0x2c>
c0002000:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002005:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002009:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000200c:	31 c0                	xor    eax,eax
c000200e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002011:	31 d2                	xor    edx,edx
c0002013:	80 e1 10             	and    cl,0x10
c0002016:	75 08                	jne    c0002020 <get_xfileinfo+0xba>
c0002018:	8d 46 38             	lea    eax,[esi+0x38]
c000201b:	e8 68 fa ff ff       	call   c0001a88 <ld_qword>
c0002020:	89 03                	mov    DWORD PTR [ebx],eax
c0002022:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002025:	8d 46 0c             	lea    eax,[esi+0xc]
c0002028:	e8 36 fa ff ff       	call   c0001a63 <ld_word>
c000202d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002031:	8d 46 0e             	lea    eax,[esi+0xe]
c0002034:	e8 2a fa ff ff       	call   c0001a63 <ld_word>
c0002039:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000203d:	83 c4 0c             	add    esp,0xc
c0002040:	5b                   	pop    ebx
c0002041:	5e                   	pop    esi
c0002042:	5f                   	pop    edi
c0002043:	5d                   	pop    ebp
c0002044:	c3                   	ret    

c0002045 <get_ldnumber>:
c0002045:	57                   	push   edi
c0002046:	56                   	push   esi
c0002047:	53                   	push   ebx
c0002048:	83 cb ff             	or     ebx,0xffffffff
c000204b:	8b 10                	mov    edx,DWORD PTR [eax]
c000204d:	85 d2                	test   edx,edx
c000204f:	74 34                	je     c0002085 <get_ldnumber+0x40>
c0002051:	89 c7                	mov    edi,eax
c0002053:	89 d1                	mov    ecx,edx
c0002055:	41                   	inc    ecx
c0002056:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0002059:	3c 1f                	cmp    al,0x1f
c000205b:	76 04                	jbe    c0002061 <get_ldnumber+0x1c>
c000205d:	3c 3a                	cmp    al,0x3a
c000205f:	75 f4                	jne    c0002055 <get_ldnumber+0x10>
c0002061:	31 db                	xor    ebx,ebx
c0002063:	3c 3a                	cmp    al,0x3a
c0002065:	75 1e                	jne    c0002085 <get_ldnumber+0x40>
c0002067:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000206a:	83 cb ff             	or     ebx,0xffffffff
c000206d:	8d 46 d0             	lea    eax,[esi-0x30]
c0002070:	3c 09                	cmp    al,0x9
c0002072:	77 11                	ja     c0002085 <get_ldnumber+0x40>
c0002074:	83 c2 02             	add    edx,0x2
c0002077:	39 d1                	cmp    ecx,edx
c0002079:	75 0a                	jne    c0002085 <get_ldnumber+0x40>
c000207b:	89 f0                	mov    eax,esi
c000207d:	89 0f                	mov    DWORD PTR [edi],ecx
c000207f:	0f be d8             	movsx  ebx,al
c0002082:	83 eb 30             	sub    ebx,0x30
c0002085:	89 d8                	mov    eax,ebx
c0002087:	5b                   	pop    ebx
c0002088:	5e                   	pop    esi
c0002089:	5f                   	pop    edi
c000208a:	c3                   	ret    

c000208b <crc32>:
c000208b:	56                   	push   esi
c000208c:	89 d6                	mov    esi,edx
c000208e:	53                   	push   ebx
c000208f:	b2 01                	mov    dl,0x1
c0002091:	bb 08 00 00 00       	mov    ebx,0x8
c0002096:	89 f1                	mov    ecx,esi
c0002098:	84 d1                	test   cl,dl
c000209a:	0f 95 c1             	setne  cl
c000209d:	0f b6 c9             	movzx  ecx,cl
c00020a0:	31 c1                	xor    ecx,eax
c00020a2:	89 c8                	mov    eax,ecx
c00020a4:	d1 e8                	shr    eax,1
c00020a6:	80 e1 01             	and    cl,0x1
c00020a9:	74 05                	je     c00020b0 <crc32+0x25>
c00020ab:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020b0:	01 d2                	add    edx,edx
c00020b2:	4b                   	dec    ebx
c00020b3:	75 e1                	jne    c0002096 <crc32+0xb>
c00020b5:	5b                   	pop    ebx
c00020b6:	5e                   	pop    esi
c00020b7:	c3                   	ret    

c00020b8 <test_gpt_header>:
c00020b8:	55                   	push   ebp
c00020b9:	b9 10 00 00 00       	mov    ecx,0x10
c00020be:	57                   	push   edi
c00020bf:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00020c4:	56                   	push   esi
c00020c5:	31 ff                	xor    edi,edi
c00020c7:	53                   	push   ebx
c00020c8:	89 c3                	mov    ebx,eax
c00020ca:	e8 33 fa ff ff       	call   c0001b02 <mem_cmp>
c00020cf:	85 c0                	test   eax,eax
c00020d1:	75 55                	jne    c0002128 <test_gpt_header+0x70>
c00020d3:	89 c7                	mov    edi,eax
c00020d5:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020da:	83 ce ff             	or     esi,0xffffffff
c00020dd:	31 d2                	xor    edx,edx
c00020df:	83 fd 03             	cmp    ebp,0x3
c00020e2:	76 05                	jbe    c00020e9 <test_gpt_header+0x31>
c00020e4:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020e9:	89 f0                	mov    eax,esi
c00020eb:	45                   	inc    ebp
c00020ec:	e8 9a ff ff ff       	call   c000208b <crc32>
c00020f1:	83 fd 4c             	cmp    ebp,0x4c
c00020f4:	89 c6                	mov    esi,eax
c00020f6:	75 e5                	jne    c00020dd <test_gpt_header+0x25>
c00020f8:	8d 43 10             	lea    eax,[ebx+0x10]
c00020fb:	e8 70 f9 ff ff       	call   c0001a70 <ld_dword>
c0002100:	f7 d6                	not    esi
c0002102:	39 c6                	cmp    esi,eax
c0002104:	75 22                	jne    c0002128 <test_gpt_header+0x70>
c0002106:	8d 43 54             	lea    eax,[ebx+0x54]
c0002109:	e8 62 f9 ff ff       	call   c0001a70 <ld_dword>
c000210e:	83 c0 80             	add    eax,0xffffff80
c0002111:	75 15                	jne    c0002128 <test_gpt_header+0x70>
c0002113:	8d 43 50             	lea    eax,[ebx+0x50]
c0002116:	e8 55 f9 ff ff       	call   c0001a70 <ld_dword>
c000211b:	3d 80 00 00 00       	cmp    eax,0x80
c0002120:	0f 96 c0             	setbe  al
c0002123:	0f b6 c0             	movzx  eax,al
c0002126:	89 c7                	mov    edi,eax
c0002128:	5b                   	pop    ebx
c0002129:	89 f8                	mov    eax,edi
c000212b:	5e                   	pop    esi
c000212c:	5f                   	pop    edi
c000212d:	5d                   	pop    ebp
c000212e:	c3                   	ret    

c000212f <make_rand>:
c000212f:	56                   	push   esi
c0002130:	85 c0                	test   eax,eax
c0002132:	53                   	push   ebx
c0002133:	75 05                	jne    c000213a <make_rand+0xb>
c0002135:	b8 01 00 00 00       	mov    eax,0x1
c000213a:	01 d1                	add    ecx,edx
c000213c:	bb 08 00 00 00       	mov    ebx,0x8
c0002141:	89 c6                	mov    esi,eax
c0002143:	d1 e8                	shr    eax,1
c0002145:	83 e6 01             	and    esi,0x1
c0002148:	85 f6                	test   esi,esi
c000214a:	74 05                	je     c0002151 <make_rand+0x22>
c000214c:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002151:	4b                   	dec    ebx
c0002152:	75 ed                	jne    c0002141 <make_rand+0x12>
c0002154:	42                   	inc    edx
c0002155:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002158:	39 ca                	cmp    edx,ecx
c000215a:	75 e0                	jne    c000213c <make_rand+0xd>
c000215c:	5b                   	pop    ebx
c000215d:	5e                   	pop    esi
c000215e:	c3                   	ret    

c000215f <validate>:
c000215f:	56                   	push   esi
c0002160:	89 d6                	mov    esi,edx
c0002162:	53                   	push   ebx
c0002163:	85 c0                	test   eax,eax
c0002165:	51                   	push   ecx
c0002166:	75 09                	jne    c0002171 <validate+0x12>
c0002168:	b8 09 00 00 00       	mov    eax,0x9
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	eb 2f                	jmp    c00021a0 <validate+0x41>
c0002171:	89 c3                	mov    ebx,eax
c0002173:	8b 00                	mov    eax,DWORD PTR [eax]
c0002175:	85 c0                	test   eax,eax
c0002177:	74 ef                	je     c0002168 <validate+0x9>
c0002179:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000217c:	74 ea                	je     c0002168 <validate+0x9>
c000217e:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002182:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002186:	75 e0                	jne    c0002168 <validate+0x9>
c0002188:	83 ec 0c             	sub    esp,0xc
c000218b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000218f:	50                   	push   eax
c0002190:	e8 7d f8 ff ff       	call   c0001a12 <disk_status>
c0002195:	83 c4 10             	add    esp,0x10
c0002198:	a8 01                	test   al,0x1
c000219a:	75 cc                	jne    c0002168 <validate+0x9>
c000219c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000219e:	31 c0                	xor    eax,eax
c00021a0:	89 0e                	mov    DWORD PTR [esi],ecx
c00021a2:	5a                   	pop    edx
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	c3                   	ret    

c00021a6 <sync_window>:
c00021a6:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021aa:	0f 84 85 00 00 00    	je     c0002235 <sync_window+0x8f>
c00021b0:	55                   	push   ebp
c00021b1:	8d 68 54             	lea    ebp,[eax+0x54]
c00021b4:	57                   	push   edi
c00021b5:	56                   	push   esi
c00021b6:	53                   	push   ebx
c00021b7:	89 c3                	mov    ebx,eax
c00021b9:	83 ec 28             	sub    esp,0x28
c00021bc:	6a 01                	push   0x1
c00021be:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021c1:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021c4:	55                   	push   ebp
c00021c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021c9:	50                   	push   eax
c00021ca:	e8 5f f8 ff ff       	call   c0001a2e <disk_write>
c00021cf:	83 c4 20             	add    esp,0x20
c00021d2:	ba 01 00 00 00       	mov    edx,0x1
c00021d7:	85 c0                	test   eax,eax
c00021d9:	75 50                	jne    c000222b <sync_window+0x85>
c00021db:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021de:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021e1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021e5:	89 c6                	mov    esi,eax
c00021e7:	31 ff                	xor    edi,edi
c00021e9:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021ec:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021f3:	89 d7                	mov    edi,edx
c00021f5:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021f9:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021fc:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002200:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002204:	73 23                	jae    c0002229 <sync_window+0x83>
c0002206:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000220a:	75 1d                	jne    c0002229 <sync_window+0x83>
c000220c:	83 ec 0c             	sub    esp,0xc
c000220f:	6a 01                	push   0x1
c0002211:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002215:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002219:	52                   	push   edx
c000221a:	50                   	push   eax
c000221b:	55                   	push   ebp
c000221c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002220:	50                   	push   eax
c0002221:	e8 08 f8 ff ff       	call   c0001a2e <disk_write>
c0002226:	83 c4 20             	add    esp,0x20
c0002229:	31 d2                	xor    edx,edx
c000222b:	83 c4 1c             	add    esp,0x1c
c000222e:	89 d0                	mov    eax,edx
c0002230:	5b                   	pop    ebx
c0002231:	5e                   	pop    esi
c0002232:	5f                   	pop    edi
c0002233:	5d                   	pop    ebp
c0002234:	c3                   	ret    
c0002235:	31 d2                	xor    edx,edx
c0002237:	89 d0                	mov    eax,edx
c0002239:	c3                   	ret    

c000223a <move_window>:
c000223a:	56                   	push   esi
c000223b:	53                   	push   ebx
c000223c:	89 c3                	mov    ebx,eax
c000223e:	83 ec 14             	sub    esp,0x14
c0002241:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002244:	75 07                	jne    c000224d <move_window+0x13>
c0002246:	31 f6                	xor    esi,esi
c0002248:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000224b:	74 59                	je     c00022a6 <move_window+0x6c>
c000224d:	89 d8                	mov    eax,ebx
c000224f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002253:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002257:	e8 4a ff ff ff       	call   c00021a6 <sync_window>
c000225c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002260:	89 c6                	mov    esi,eax
c0002262:	85 c0                	test   eax,eax
c0002264:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002268:	75 3c                	jne    c00022a6 <move_window+0x6c>
c000226a:	83 ec 0c             	sub    esp,0xc
c000226d:	8d 43 54             	lea    eax,[ebx+0x54]
c0002270:	6a 01                	push   0x1
c0002272:	51                   	push   ecx
c0002273:	52                   	push   edx
c0002274:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002278:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000227c:	50                   	push   eax
c000227d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002281:	50                   	push   eax
c0002282:	e8 91 f7 ff ff       	call   c0001a18 <disk_read>
c0002287:	83 c4 20             	add    esp,0x20
c000228a:	85 c0                	test   eax,eax
c000228c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002290:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002294:	74 0a                	je     c00022a0 <move_window+0x66>
c0002296:	83 ca ff             	or     edx,0xffffffff
c0002299:	be 01 00 00 00       	mov    esi,0x1
c000229e:	89 d1                	mov    ecx,edx
c00022a0:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00022a3:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00022a6:	83 c4 14             	add    esp,0x14
c00022a9:	89 f0                	mov    eax,esi
c00022ab:	5b                   	pop    ebx
c00022ac:	5e                   	pop    esi
c00022ad:	c3                   	ret    

c00022ae <check_fs>:
c00022ae:	53                   	push   ebx
c00022af:	89 c3                	mov    ebx,eax
c00022b1:	83 ec 08             	sub    esp,0x8
c00022b4:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b8:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022bf:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022c6:	e8 6f ff ff ff       	call   c000223a <move_window>
c00022cb:	ba 04 00 00 00       	mov    edx,0x4
c00022d0:	85 c0                	test   eax,eax
c00022d2:	0f 85 89 00 00 00    	jne    c0002361 <check_fs+0xb3>
c00022d8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022de:	e8 80 f7 ff ff       	call   c0001a63 <ld_word>
c00022e3:	ba 03 00 00 00       	mov    edx,0x3
c00022e8:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ec:	75 73                	jne    c0002361 <check_fs+0xb3>
c00022ee:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00022f3:	8d 43 54             	lea    eax,[ebx+0x54]
c00022f6:	b9 0b 00 00 00       	mov    ecx,0xb
c00022fb:	e8 02 f8 ff ff       	call   c0001b02 <mem_cmp>
c0002300:	ba 01 00 00 00       	mov    edx,0x1
c0002305:	85 c0                	test   eax,eax
c0002307:	74 58                	je     c0002361 <check_fs+0xb3>
c0002309:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000230c:	8d 50 18             	lea    edx,[eax+0x18]
c000230f:	80 fa 01             	cmp    dl,0x1
c0002312:	76 09                	jbe    c000231d <check_fs+0x6f>
c0002314:	ba 02 00 00 00       	mov    edx,0x2
c0002319:	3c eb                	cmp    al,0xeb
c000231b:	75 44                	jne    c0002361 <check_fs+0xb3>
c000231d:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c0002322:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002328:	b9 03 00 00 00       	mov    ecx,0x3
c000232d:	e8 d0 f7 ff ff       	call   c0001b02 <mem_cmp>
c0002332:	31 d2                	xor    edx,edx
c0002334:	85 c0                	test   eax,eax
c0002336:	74 29                	je     c0002361 <check_fs+0xb3>
c0002338:	ba 6c 05 02 c0       	mov    edx,0xc002056c
c000233d:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002343:	b9 05 00 00 00       	mov    ecx,0x5
c0002348:	e8 b5 f7 ff ff       	call   c0001b02 <mem_cmp>
c000234d:	31 d2                	xor    edx,edx
c000234f:	85 c0                	test   eax,eax
c0002351:	74 0e                	je     c0002361 <check_fs+0xb3>
c0002353:	31 d2                	xor    edx,edx
c0002355:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000235c:	0f 95 c2             	setne  dl
c000235f:	01 d2                	add    edx,edx
c0002361:	83 c4 08             	add    esp,0x8
c0002364:	89 d0                	mov    eax,edx
c0002366:	5b                   	pop    ebx
c0002367:	c3                   	ret    

c0002368 <find_volume>:
c0002368:	55                   	push   ebp
c0002369:	31 c9                	xor    ecx,ecx
c000236b:	57                   	push   edi
c000236c:	56                   	push   esi
c000236d:	89 d6                	mov    esi,edx
c000236f:	53                   	push   ebx
c0002370:	31 d2                	xor    edx,edx
c0002372:	83 ec 3c             	sub    esp,0x3c
c0002375:	89 c3                	mov    ebx,eax
c0002377:	e8 32 ff ff ff       	call   c00022ae <check_fs>
c000237c:	83 f8 02             	cmp    eax,0x2
c000237f:	74 0e                	je     c000238f <find_volume+0x27>
c0002381:	0f 87 56 01 00 00    	ja     c00024dd <find_volume+0x175>
c0002387:	85 f6                	test   esi,esi
c0002389:	0f 84 4e 01 00 00    	je     c00024dd <find_volume+0x175>
c000238f:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002396:	0f 85 df 00 00 00    	jne    c000247b <find_volume+0x113>
c000239c:	31 c9                	xor    ecx,ecx
c000239e:	ba 01 00 00 00       	mov    edx,0x1
c00023a3:	89 d8                	mov    eax,ebx
c00023a5:	e8 90 fe ff ff       	call   c000223a <move_window>
c00023aa:	85 c0                	test   eax,eax
c00023ac:	74 0a                	je     c00023b8 <find_volume+0x50>
c00023ae:	b8 04 00 00 00       	mov    eax,0x4
c00023b3:	e9 25 01 00 00       	jmp    c00024dd <find_volume+0x175>
c00023b8:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023bb:	89 e8                	mov    eax,ebp
c00023bd:	e8 f6 fc ff ff       	call   c00020b8 <test_gpt_header>
c00023c2:	85 c0                	test   eax,eax
c00023c4:	75 0a                	jne    c00023d0 <find_volume+0x68>
c00023c6:	b8 03 00 00 00       	mov    eax,0x3
c00023cb:	e9 0d 01 00 00       	jmp    c00024dd <find_volume+0x175>
c00023d0:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023d6:	e8 95 f6 ff ff       	call   c0001a70 <ld_dword>
c00023db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023df:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023e5:	e8 9e f6 ff ff       	call   c0001a88 <ld_qword>
c00023ea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002402:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002406:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000240a:	74 ba                	je     c00023c6 <find_volume+0x5e>
c000240c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002410:	31 c9                	xor    ecx,ecx
c0002412:	c1 e7 07             	shl    edi,0x7
c0002415:	89 d8                	mov    eax,ebx
c0002417:	89 fa                	mov    edx,edi
c0002419:	c1 ea 09             	shr    edx,0x9
c000241c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002420:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002424:	e8 11 fe ff ff       	call   c000223a <move_window>
c0002429:	85 c0                	test   eax,eax
c000242b:	75 81                	jne    c00023ae <find_volume+0x46>
c000242d:	81 e7 80 01 00 00    	and    edi,0x180
c0002433:	b9 10 00 00 00       	mov    ecx,0x10
c0002438:	ba 50 05 02 c0       	mov    edx,0xc0020550
c000243d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002441:	e8 bc f6 ff ff       	call   c0001b02 <mem_cmp>
c0002446:	85 c0                	test   eax,eax
c0002448:	75 2b                	jne    c0002475 <find_volume+0x10d>
c000244a:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000244e:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002452:	e8 31 f6 ff ff       	call   c0001a88 <ld_qword>
c0002457:	89 d1                	mov    ecx,edx
c0002459:	89 c2                	mov    edx,eax
c000245b:	89 d8                	mov    eax,ebx
c000245d:	e8 4c fe ff ff       	call   c00022ae <check_fs>
c0002462:	85 f6                	test   esi,esi
c0002464:	75 05                	jne    c000246b <find_volume+0x103>
c0002466:	83 f8 01             	cmp    eax,0x1
c0002469:	76 72                	jbe    c00024dd <find_volume+0x175>
c000246b:	85 f6                	test   esi,esi
c000246d:	74 06                	je     c0002475 <find_volume+0x10d>
c000246f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002473:	74 68                	je     c00024dd <find_volume+0x175>
c0002475:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002479:	eb 87                	jmp    c0002402 <find_volume+0x9a>
c000247b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000247f:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002485:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000248b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000248f:	89 cd                	mov    ebp,ecx
c0002491:	89 f8                	mov    eax,edi
c0002493:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002497:	e8 d4 f5 ff ff       	call   c0001a70 <ld_dword>
c000249c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00024a0:	83 c7 10             	add    edi,0x10
c00024a3:	83 c1 04             	add    ecx,0x4
c00024a6:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00024a9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024ad:	75 e2                	jne    c0002491 <find_volume+0x129>
c00024af:	31 ff                	xor    edi,edi
c00024b1:	85 f6                	test   esi,esi
c00024b3:	74 03                	je     c00024b8 <find_volume+0x150>
c00024b5:	8d 7e ff             	lea    edi,[esi-0x1]
c00024b8:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024bc:	b8 03 00 00 00       	mov    eax,0x3
c00024c1:	85 d2                	test   edx,edx
c00024c3:	74 09                	je     c00024ce <find_volume+0x166>
c00024c5:	31 c9                	xor    ecx,ecx
c00024c7:	89 d8                	mov    eax,ebx
c00024c9:	e8 e0 fd ff ff       	call   c00022ae <check_fs>
c00024ce:	85 f6                	test   esi,esi
c00024d0:	75 0b                	jne    c00024dd <find_volume+0x175>
c00024d2:	83 f8 01             	cmp    eax,0x1
c00024d5:	76 06                	jbe    c00024dd <find_volume+0x175>
c00024d7:	47                   	inc    edi
c00024d8:	83 ff 03             	cmp    edi,0x3
c00024db:	76 db                	jbe    c00024b8 <find_volume+0x150>
c00024dd:	83 c4 3c             	add    esp,0x3c
c00024e0:	5b                   	pop    ebx
c00024e1:	5e                   	pop    esi
c00024e2:	5f                   	pop    edi
c00024e3:	5d                   	pop    ebp
c00024e4:	c3                   	ret    

c00024e5 <mount_volume>:
c00024e5:	55                   	push   ebp
c00024e6:	57                   	push   edi
c00024e7:	89 cf                	mov    edi,ecx
c00024e9:	56                   	push   esi
c00024ea:	53                   	push   ebx
c00024eb:	bb 0b 00 00 00       	mov    ebx,0xb
c00024f0:	83 ec 3c             	sub    esp,0x3c
c00024f3:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024f9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024fd:	e8 43 fb ff ff       	call   c0002045 <get_ldnumber>
c0002502:	85 c0                	test   eax,eax
c0002504:	0f 88 3b 05 00 00    	js     c0002a45 <mount_volume+0x560>
c000250a:	8b 2c 85 40 47 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdb8c0]
c0002511:	89 c6                	mov    esi,eax
c0002513:	bb 0c 00 00 00       	mov    ebx,0xc
c0002518:	85 ed                	test   ebp,ebp
c000251a:	0f 84 25 05 00 00    	je     c0002a45 <mount_volume+0x560>
c0002520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002524:	83 e7 fe             	and    edi,0xfffffffe
c0002527:	89 2a                	mov    DWORD PTR [edx],ebp
c0002529:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000252d:	74 32                	je     c0002561 <mount_volume+0x7c>
c000252f:	83 ec 0c             	sub    esp,0xc
c0002532:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002536:	50                   	push   eax
c0002537:	e8 d6 f4 ff ff       	call   c0001a12 <disk_status>
c000253c:	83 c4 10             	add    esp,0x10
c000253f:	a8 01                	test   al,0x1
c0002541:	75 1e                	jne    c0002561 <mount_volume+0x7c>
c0002543:	89 f9                	mov    ecx,edi
c0002545:	31 db                	xor    ebx,ebx
c0002547:	84 c9                	test   cl,cl
c0002549:	0f 84 f6 04 00 00    	je     c0002a45 <mount_volume+0x560>
c000254f:	a8 04                	test   al,0x4
c0002551:	0f 84 ee 04 00 00    	je     c0002a45 <mount_volume+0x560>
c0002557:	bb 0a 00 00 00       	mov    ebx,0xa
c000255c:	e9 e4 04 00 00       	jmp    c0002a45 <mount_volume+0x560>
c0002561:	83 ec 0c             	sub    esp,0xc
c0002564:	89 f0                	mov    eax,esi
c0002566:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000256a:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000256d:	0f b6 f0             	movzx  esi,al
c0002570:	56                   	push   esi
c0002571:	e8 9f f4 ff ff       	call   c0001a15 <disk_initialize>
c0002576:	bb 03 00 00 00       	mov    ebx,0x3
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	a8 01                	test   al,0x1
c0002580:	0f 85 bf 04 00 00    	jne    c0002a45 <mount_volume+0x560>
c0002586:	89 f9                	mov    ecx,edi
c0002588:	84 c9                	test   cl,cl
c000258a:	74 04                	je     c0002590 <mount_volume+0xab>
c000258c:	a8 04                	test   al,0x4
c000258e:	75 c7                	jne    c0002557 <mount_volume+0x72>
c0002590:	31 d2                	xor    edx,edx
c0002592:	89 e8                	mov    eax,ebp
c0002594:	e8 cf fd ff ff       	call   c0002368 <find_volume>
c0002599:	83 f8 04             	cmp    eax,0x4
c000259c:	75 0a                	jne    c00025a8 <mount_volume+0xc3>
c000259e:	bb 01 00 00 00       	mov    ebx,0x1
c00025a3:	e9 9d 04 00 00       	jmp    c0002a45 <mount_volume+0x560>
c00025a8:	83 f8 01             	cmp    eax,0x1
c00025ab:	76 0a                	jbe    c00025b7 <mount_volume+0xd2>
c00025ad:	bb 0d 00 00 00       	mov    ebx,0xd
c00025b2:	e9 8e 04 00 00       	jmp    c0002a45 <mount_volume+0x560>
c00025b7:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025ba:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025c5:	75 17                	jne    c00025de <mount_volume+0xf9>
c00025c7:	b8 0b 00 00 00       	mov    eax,0xb
c00025cc:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025d1:	75 da                	jne    c00025ad <mount_volume+0xc8>
c00025d3:	40                   	inc    eax
c00025d4:	83 f8 40             	cmp    eax,0x40
c00025d7:	75 f3                	jne    c00025cc <mount_volume+0xe7>
c00025d9:	e9 5a 02 00 00       	jmp    c0002838 <mount_volume+0x353>
c00025de:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025e1:	e8 7d f4 ff ff       	call   c0001a63 <ld_word>
c00025e6:	66 3d 00 02          	cmp    ax,0x200
c00025ea:	75 c1                	jne    c00025ad <mount_volume+0xc8>
c00025ec:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ef:	e8 6f f4 ff ff       	call   c0001a63 <ld_word>
c00025f4:	0f b7 c0             	movzx  eax,ax
c00025f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025fb:	85 c0                	test   eax,eax
c00025fd:	75 0c                	jne    c000260b <mount_volume+0x126>
c00025ff:	8d 45 78             	lea    eax,[ebp+0x78]
c0002602:	e8 69 f4 ff ff       	call   c0001a70 <ld_dword>
c0002607:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000260b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000260f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002612:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002615:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002619:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000261c:	48                   	dec    eax
c000261d:	3c 01                	cmp    al,0x1
c000261f:	77 8c                	ja     c00025ad <mount_volume+0xc8>
c0002621:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002625:	89 c3                	mov    ebx,eax
c0002627:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000262b:	66 85 c0             	test   ax,ax
c000262e:	0f 84 79 ff ff ff    	je     c00025ad <mount_volume+0xc8>
c0002634:	8d 40 ff             	lea    eax,[eax-0x1]
c0002637:	85 d8                	test   eax,ebx
c0002639:	0f 85 6e ff ff ff    	jne    c00025ad <mount_volume+0xc8>
c000263f:	8d 45 65             	lea    eax,[ebp+0x65]
c0002642:	e8 1c f4 ff ff       	call   c0001a63 <ld_word>
c0002647:	89 c7                	mov    edi,eax
c0002649:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000264d:	a8 0f                	test   al,0xf
c000264f:	0f 85 58 ff ff ff    	jne    c00025ad <mount_volume+0xc8>
c0002655:	8d 45 67             	lea    eax,[ebp+0x67]
c0002658:	e8 06 f4 ff ff       	call   c0001a63 <ld_word>
c000265d:	0f b7 f0             	movzx  esi,ax
c0002660:	85 f6                	test   esi,esi
c0002662:	75 0a                	jne    c000266e <mount_volume+0x189>
c0002664:	8d 45 74             	lea    eax,[ebp+0x74]
c0002667:	e8 04 f4 ff ff       	call   c0001a70 <ld_dword>
c000266c:	89 c6                	mov    esi,eax
c000266e:	8d 45 62             	lea    eax,[ebp+0x62]
c0002671:	e8 ed f3 ff ff       	call   c0001a63 <ld_word>
c0002676:	66 85 c0             	test   ax,ax
c0002679:	0f 84 2e ff ff ff    	je     c00025ad <mount_volume+0xc8>
c000267f:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002684:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002689:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000268d:	89 fa                	mov    edx,edi
c000268f:	66 c1 ea 04          	shr    dx,0x4
c0002693:	0f b7 d2             	movzx  edx,dx
c0002696:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000269a:	0f b7 c8             	movzx  ecx,ax
c000269d:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00026a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00026a4:	39 c6                	cmp    esi,eax
c00026a6:	0f 82 01 ff ff ff    	jb     c00025ad <mount_volume+0xc8>
c00026ac:	29 c6                	sub    esi,eax
c00026ae:	31 d2                	xor    edx,edx
c00026b0:	89 f0                	mov    eax,esi
c00026b2:	f7 f3                	div    ebx
c00026b4:	39 de                	cmp    esi,ebx
c00026b6:	0f 82 f1 fe ff ff    	jb     c00025ad <mount_volume+0xc8>
c00026bc:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026c1:	0f 87 e6 fe ff ff    	ja     c00025ad <mount_volume+0xc8>
c00026c7:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026cc:	0f 86 63 03 00 00    	jbe    c0002a35 <mount_volume+0x550>
c00026d2:	bb 03 00 00 00       	mov    ebx,0x3
c00026d7:	8d 70 02             	lea    esi,[eax+0x2]
c00026da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026e2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026e5:	89 c8                	mov    eax,ecx
c00026e7:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026ea:	31 d2                	xor    edx,edx
c00026ec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026f0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f8:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026ff:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002703:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002706:	31 d2                	xor    edx,edx
c0002708:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000270c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002710:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002713:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002716:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002719:	83 fb 03             	cmp    ebx,0x3
c000271c:	75 2b                	jne    c0002749 <mount_volume+0x264>
c000271e:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002721:	e8 3d f3 ff ff       	call   c0001a63 <ld_word>
c0002726:	66 09 c7             	or     di,ax
c0002729:	0f 85 7e fe ff ff    	jne    c00025ad <mount_volume+0xc8>
c000272f:	c1 e6 02             	shl    esi,0x2
c0002732:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002738:	e8 33 f3 ff ff       	call   c0001a70 <ld_dword>
c000273d:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002744:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002747:	eb 30                	jmp    c0002779 <mount_volume+0x294>
c0002749:	66 85 ff             	test   di,di
c000274c:	0f 84 5b fe ff ff    	je     c00025ad <mount_volume+0xc8>
c0002752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002756:	31 d2                	xor    edx,edx
c0002758:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000275c:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002760:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002763:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002766:	83 fb 02             	cmp    ebx,0x2
c0002769:	75 04                	jne    c000276f <mount_volume+0x28a>
c000276b:	01 f6                	add    esi,esi
c000276d:	eb 0a                	jmp    c0002779 <mount_volume+0x294>
c000276f:	8d 04 76             	lea    eax,[esi+esi*2]
c0002772:	83 e6 01             	and    esi,0x1
c0002775:	d1 e8                	shr    eax,1
c0002777:	01 c6                	add    esi,eax
c0002779:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000277f:	c1 ee 09             	shr    esi,0x9
c0002782:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002786:	0f 87 21 fe ff ff    	ja     c00025ad <mount_volume+0xc8>
c000278c:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002793:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000279a:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000279e:	83 fb 03             	cmp    ebx,0x3
c00027a1:	75 7a                	jne    c000281d <mount_volume+0x338>
c00027a3:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027a9:	e8 b5 f2 ff ff       	call   c0001a63 <ld_word>
c00027ae:	66 48                	dec    ax
c00027b0:	75 6b                	jne    c000281d <mount_volume+0x338>
c00027b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027ba:	83 c2 01             	add    edx,0x1
c00027bd:	89 e8                	mov    eax,ebp
c00027bf:	83 d1 00             	adc    ecx,0x0
c00027c2:	e8 73 fa ff ff       	call   c000223a <move_window>
c00027c7:	85 c0                	test   eax,eax
c00027c9:	75 52                	jne    c000281d <mount_volume+0x338>
c00027cb:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027cf:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027d5:	e8 89 f2 ff ff       	call   c0001a63 <ld_word>
c00027da:	66 3d 55 aa          	cmp    ax,0xaa55
c00027de:	75 3d                	jne    c000281d <mount_volume+0x338>
c00027e0:	8d 45 54             	lea    eax,[ebp+0x54]
c00027e3:	e8 88 f2 ff ff       	call   c0001a70 <ld_dword>
c00027e8:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027ed:	75 2e                	jne    c000281d <mount_volume+0x338>
c00027ef:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027f5:	e8 76 f2 ff ff       	call   c0001a70 <ld_dword>
c00027fa:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ff:	75 1c                	jne    c000281d <mount_volume+0x338>
c0002801:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002807:	e8 64 f2 ff ff       	call   c0001a70 <ld_dword>
c000280c:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000280f:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002815:	e8 56 f2 ff ff       	call   c0001a70 <ld_dword>
c000281a:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000281d:	66 a1 20 47 02 c0    	mov    ax,ds:0xc0024720
c0002823:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002826:	40                   	inc    eax
c0002827:	31 db                	xor    ebx,ebx
c0002829:	66 a3 20 47 02 c0    	mov    ds:0xc0024720,ax
c000282f:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002833:	e9 0d 02 00 00       	jmp    c0002a45 <mount_volume+0x560>
c0002838:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000283e:	e8 20 f2 ff ff       	call   c0001a63 <ld_word>
c0002843:	66 3d 00 01          	cmp    ax,0x100
c0002847:	0f 85 60 fd ff ff    	jne    c00025ad <mount_volume+0xc8>
c000284d:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002854:	0f 85 53 fd ff ff    	jne    c00025ad <mount_volume+0xc8>
c000285a:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002860:	e8 23 f2 ff ff       	call   c0001a88 <ld_qword>
c0002865:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002869:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000286f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002873:	e8 f8 f1 ff ff       	call   c0001a70 <ld_dword>
c0002878:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000287b:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002881:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002884:	fe c8                	dec    al
c0002886:	0f 85 21 fd ff ff    	jne    c00025ad <mount_volume+0xc8>
c000288c:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002893:	bb 01 00 00 00       	mov    ebx,0x1
c0002898:	d3 e3                	shl    ebx,cl
c000289a:	66 85 db             	test   bx,bx
c000289d:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00028a1:	0f 84 06 fd ff ff    	je     c00025ad <mount_volume+0xc8>
c00028a7:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028ad:	e8 be f1 ff ff       	call   c0001a70 <ld_dword>
c00028b2:	89 c6                	mov    esi,eax
c00028b4:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028b9:	0f 87 ee fc ff ff    	ja     c00025ad <mount_volume+0xc8>
c00028bf:	8d 40 02             	lea    eax,[eax+0x2]
c00028c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028c6:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028cd:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028d3:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028d9:	e8 92 f1 ff ff       	call   c0001a70 <ld_dword>
c00028de:	31 d2                	xor    edx,edx
c00028e0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e4:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028ec:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028ef:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028f2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028fc:	e8 6f f1 ff ff       	call   c0001a70 <ld_dword>
c0002901:	31 d2                	xor    edx,edx
c0002903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002907:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000290b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290f:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002912:	0f b7 c3             	movzx  eax,bx
c0002915:	0f af f0             	imul   esi,eax
c0002918:	89 f0                	mov    eax,esi
c000291a:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002923:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002927:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000292b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000292f:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002933:	39 c1                	cmp    ecx,eax
c0002935:	89 df                	mov    edi,ebx
c0002937:	19 d7                	sbb    edi,edx
c0002939:	0f 82 6e fc ff ff    	jb     c00025ad <mount_volume+0xc8>
c000293f:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002945:	31 db                	xor    ebx,ebx
c0002947:	e8 24 f1 ff ff       	call   c0001a70 <ld_dword>
c000294c:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002953:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002956:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000295e:	85 db                	test   ebx,ebx
c0002960:	75 39                	jne    c000299b <mount_volume+0x4b6>
c0002962:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002966:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000296a:	0f 86 3d fc ff ff    	jbe    c00025ad <mount_volume+0xc8>
c0002970:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002973:	89 e8                	mov    eax,ebp
c0002975:	e8 82 f3 ff ff       	call   c0001cfc <clst2sect>
c000297a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000297e:	31 ff                	xor    edi,edi
c0002980:	01 c6                	add    esi,eax
c0002982:	11 d7                	adc    edi,edx
c0002984:	89 e8                	mov    eax,ebp
c0002986:	89 f2                	mov    edx,esi
c0002988:	89 f9                	mov    ecx,edi
c000298a:	e8 ab f8 ff ff       	call   c000223a <move_window>
c000298f:	85 c0                	test   eax,eax
c0002991:	0f 85 07 fc ff ff    	jne    c000259e <mount_volume+0xb9>
c0002997:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000299b:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00029a0:	74 0b                	je     c00029ad <mount_volume+0x4c8>
c00029a2:	83 c3 20             	add    ebx,0x20
c00029a5:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029ab:	eb b1                	jmp    c000295e <mount_volume+0x479>
c00029ad:	8d 75 54             	lea    esi,[ebp+0x54]
c00029b0:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029b4:	e8 b7 f0 ff ff       	call   c0001a70 <ld_dword>
c00029b9:	89 c3                	mov    ebx,eax
c00029bb:	83 f8 01             	cmp    eax,0x1
c00029be:	0f 86 e9 fb ff ff    	jbe    c00025ad <mount_volume+0xc8>
c00029c4:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029c7:	0f 86 e0 fb ff ff    	jbe    c00025ad <mount_volume+0xc8>
c00029cd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029d1:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029d4:	0f af c2             	imul   eax,edx
c00029d7:	31 d2                	xor    edx,edx
c00029d9:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029dc:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029df:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029e2:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029e5:	89 da                	mov    edx,ebx
c00029e7:	31 c9                	xor    ecx,ecx
c00029e9:	c1 ea 07             	shr    edx,0x7
c00029ec:	89 e8                	mov    eax,ebp
c00029ee:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029f1:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029f4:	e8 41 f8 ff ff       	call   c000223a <move_window>
c00029f9:	85 c0                	test   eax,eax
c00029fb:	0f 85 9d fb ff ff    	jne    c000259e <mount_volume+0xb9>
c0002a01:	89 d8                	mov    eax,ebx
c0002a03:	83 e0 7f             	and    eax,0x7f
c0002a06:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a09:	e8 62 f0 ff ff       	call   c0001a70 <ld_dword>
c0002a0e:	83 f8 ff             	cmp    eax,0xffffffff
c0002a11:	74 0a                	je     c0002a1d <mount_volume+0x538>
c0002a13:	43                   	inc    ebx
c0002a14:	39 d8                	cmp    eax,ebx
c0002a16:	74 cd                	je     c00029e5 <mount_volume+0x500>
c0002a18:	e9 90 fb ff ff       	jmp    c00025ad <mount_volume+0xc8>
c0002a1d:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a24:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a2b:	bb 04 00 00 00       	mov    ebx,0x4
c0002a30:	e9 e8 fd ff ff       	jmp    c000281d <mount_volume+0x338>
c0002a35:	31 db                	xor    ebx,ebx
c0002a37:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a3c:	0f 97 c3             	seta   bl
c0002a3f:	43                   	inc    ebx
c0002a40:	e9 92 fc ff ff       	jmp    c00026d7 <mount_volume+0x1f2>
c0002a45:	83 c4 3c             	add    esp,0x3c
c0002a48:	89 d8                	mov    eax,ebx
c0002a4a:	5b                   	pop    ebx
c0002a4b:	5e                   	pop    esi
c0002a4c:	5f                   	pop    edi
c0002a4d:	5d                   	pop    ebp
c0002a4e:	c3                   	ret    

c0002a4f <find_bitmap>:
c0002a4f:	55                   	push   ebp
c0002a50:	57                   	push   edi
c0002a51:	89 c7                	mov    edi,eax
c0002a53:	56                   	push   esi
c0002a54:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a57:	53                   	push   ebx
c0002a58:	83 ec 1c             	sub    esp,0x1c
c0002a5b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a5e:	83 e8 02             	sub    eax,0x2
c0002a61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a65:	39 f0                	cmp    eax,esi
c0002a67:	77 02                	ja     c0002a6b <find_bitmap+0x1c>
c0002a69:	31 f6                	xor    esi,esi
c0002a6b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a6f:	89 f3                	mov    ebx,esi
c0002a71:	31 ed                	xor    ebp,ebp
c0002a73:	89 da                	mov    edx,ebx
c0002a75:	31 c9                	xor    ecx,ecx
c0002a77:	c1 ea 0c             	shr    edx,0xc
c0002a7a:	89 f8                	mov    eax,edi
c0002a7c:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a7f:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a82:	e8 b3 f7 ff ff       	call   c000223a <move_window>
c0002a87:	85 c0                	test   eax,eax
c0002a89:	75 68                	jne    c0002af3 <find_bitmap+0xa4>
c0002a8b:	89 d9                	mov    ecx,ebx
c0002a8d:	b8 01 00 00 00       	mov    eax,0x1
c0002a92:	83 e1 07             	and    ecx,0x7
c0002a95:	89 da                	mov    edx,ebx
c0002a97:	d3 e0                	shl    eax,cl
c0002a99:	c1 ea 03             	shr    edx,0x3
c0002a9c:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a9f:	83 e9 02             	sub    ecx,0x2
c0002aa2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002aa8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aac:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002ab0:	43                   	inc    ebx
c0002ab1:	21 c1                	and    ecx,eax
c0002ab3:	01 c0                	add    eax,eax
c0002ab5:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ab9:	77 09                	ja     c0002ac4 <find_bitmap+0x75>
c0002abb:	31 db                	xor    ebx,ebx
c0002abd:	ba 00 02 00 00       	mov    edx,0x200
c0002ac2:	31 c0                	xor    eax,eax
c0002ac4:	84 c9                	test   cl,cl
c0002ac6:	75 10                	jne    c0002ad8 <find_bitmap+0x89>
c0002ac8:	45                   	inc    ebp
c0002ac9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002acd:	75 0f                	jne    c0002ade <find_bitmap+0x8f>
c0002acf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ad3:	83 c0 02             	add    eax,0x2
c0002ad6:	eb 22                	jmp    c0002afa <find_bitmap+0xab>
c0002ad8:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002adc:	31 ed                	xor    ebp,ebp
c0002ade:	39 de                	cmp    esi,ebx
c0002ae0:	74 16                	je     c0002af8 <find_bitmap+0xa9>
c0002ae2:	84 c0                	test   al,al
c0002ae4:	75 c6                	jne    c0002aac <find_bitmap+0x5d>
c0002ae6:	42                   	inc    edx
c0002ae7:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aed:	77 84                	ja     c0002a73 <find_bitmap+0x24>
c0002aef:	b0 01                	mov    al,0x1
c0002af1:	eb b9                	jmp    c0002aac <find_bitmap+0x5d>
c0002af3:	83 c8 ff             	or     eax,0xffffffff
c0002af6:	eb 02                	jmp    c0002afa <find_bitmap+0xab>
c0002af8:	31 c0                	xor    eax,eax
c0002afa:	83 c4 1c             	add    esp,0x1c
c0002afd:	5b                   	pop    ebx
c0002afe:	5e                   	pop    esi
c0002aff:	5f                   	pop    edi
c0002b00:	5d                   	pop    ebp
c0002b01:	c3                   	ret    

c0002b02 <change_bitmap>:
c0002b02:	55                   	push   ebp
c0002b03:	89 cd                	mov    ebp,ecx
c0002b05:	57                   	push   edi
c0002b06:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b09:	56                   	push   esi
c0002b0a:	89 c7                	mov    edi,eax
c0002b0c:	53                   	push   ebx
c0002b0d:	89 c8                	mov    eax,ecx
c0002b0f:	83 ec 1c             	sub    esp,0x1c
c0002b12:	31 d2                	xor    edx,edx
c0002b14:	c1 e8 0c             	shr    eax,0xc
c0002b17:	89 ce                	mov    esi,ecx
c0002b19:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b1c:	bb 01 00 00 00       	mov    ebx,0x1
c0002b21:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b24:	83 e1 07             	and    ecx,0x7
c0002b27:	c1 ee 03             	shr    esi,0x3
c0002b2a:	d3 e3                	shl    ebx,cl
c0002b2c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b32:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b36:	89 c1                	mov    ecx,eax
c0002b38:	89 d3                	mov    ebx,edx
c0002b3a:	83 c1 01             	add    ecx,0x1
c0002b3d:	83 d3 00             	adc    ebx,0x0
c0002b40:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b44:	89 d1                	mov    ecx,edx
c0002b46:	89 c2                	mov    edx,eax
c0002b48:	89 f8                	mov    eax,edi
c0002b4a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b4e:	e8 e7 f6 ff ff       	call   c000223a <move_window>
c0002b53:	89 c1                	mov    ecx,eax
c0002b55:	85 c0                	test   eax,eax
c0002b57:	75 48                	jne    c0002ba1 <change_bitmap+0x9f>
c0002b59:	31 d2                	xor    edx,edx
c0002b5b:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b5f:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b63:	0f 95 c2             	setne  dl
c0002b66:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b6a:	74 3c                	je     c0002ba8 <change_bitmap+0xa6>
c0002b6c:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b70:	4d                   	dec    ebp
c0002b71:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b75:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b79:	74 32                	je     c0002bad <change_bitmap+0xab>
c0002b7b:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b7f:	75 d8                	jne    c0002b59 <change_bitmap+0x57>
c0002b81:	8d 46 01             	lea    eax,[esi+0x1]
c0002b84:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b89:	89 c3                	mov    ebx,eax
c0002b8b:	31 f6                	xor    esi,esi
c0002b8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b95:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b9b:	74 99                	je     c0002b36 <change_bitmap+0x34>
c0002b9d:	89 de                	mov    esi,ebx
c0002b9f:	eb b8                	jmp    c0002b59 <change_bitmap+0x57>
c0002ba1:	b9 01 00 00 00       	mov    ecx,0x1
c0002ba6:	eb 05                	jmp    c0002bad <change_bitmap+0xab>
c0002ba8:	b9 02 00 00 00       	mov    ecx,0x2
c0002bad:	83 c4 1c             	add    esp,0x1c
c0002bb0:	89 c8                	mov    eax,ecx
c0002bb2:	5b                   	pop    ebx
c0002bb3:	5e                   	pop    esi
c0002bb4:	5f                   	pop    edi
c0002bb5:	5d                   	pop    ebp
c0002bb6:	c3                   	ret    

c0002bb7 <put_fat>:
c0002bb7:	83 fa 01             	cmp    edx,0x1
c0002bba:	0f 86 7b 01 00 00    	jbe    c0002d3b <put_fat+0x184>
c0002bc0:	55                   	push   ebp
c0002bc1:	57                   	push   edi
c0002bc2:	89 cf                	mov    edi,ecx
c0002bc4:	56                   	push   esi
c0002bc5:	b9 02 00 00 00       	mov    ecx,0x2
c0002bca:	53                   	push   ebx
c0002bcb:	89 c6                	mov    esi,eax
c0002bcd:	83 ec 1c             	sub    esp,0x1c
c0002bd0:	89 d3                	mov    ebx,edx
c0002bd2:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bd5:	0f 86 68 01 00 00    	jbe    c0002d43 <put_fat+0x18c>
c0002bdb:	8a 00                	mov    al,BYTE PTR [eax]
c0002bdd:	3c 02                	cmp    al,0x2
c0002bdf:	0f 84 c7 00 00 00    	je     c0002cac <put_fat+0xf5>
c0002be5:	77 09                	ja     c0002bf0 <put_fat+0x39>
c0002be7:	fe c8                	dec    al
c0002be9:	74 17                	je     c0002c02 <put_fat+0x4b>
c0002beb:	e9 53 01 00 00       	jmp    c0002d43 <put_fat+0x18c>
c0002bf0:	b9 02 00 00 00       	mov    ecx,0x2
c0002bf5:	3c 04                	cmp    al,0x4
c0002bf7:	0f 86 e1 00 00 00    	jbe    c0002cde <put_fat+0x127>
c0002bfd:	e9 41 01 00 00       	jmp    c0002d43 <put_fat+0x18c>
c0002c02:	89 d5                	mov    ebp,edx
c0002c04:	31 c9                	xor    ecx,ecx
c0002c06:	d1 ed                	shr    ebp,1
c0002c08:	89 f0                	mov    eax,esi
c0002c0a:	01 d5                	add    ebp,edx
c0002c0c:	89 ea                	mov    edx,ebp
c0002c0e:	c1 ea 09             	shr    edx,0x9
c0002c11:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c14:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c17:	e8 1e f6 ff ff       	call   c000223a <move_window>
c0002c1c:	89 c1                	mov    ecx,eax
c0002c1e:	85 c0                	test   eax,eax
c0002c20:	0f 85 1d 01 00 00    	jne    c0002d43 <put_fat+0x18c>
c0002c26:	8d 46 54             	lea    eax,[esi+0x54]
c0002c29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c2d:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c30:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c3a:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c3e:	83 e3 01             	and    ebx,0x1
c0002c41:	89 f8                	mov    eax,edi
c0002c43:	74 0d                	je     c0002c52 <put_fat+0x9b>
c0002c45:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c48:	89 fa                	mov    edx,edi
c0002c4a:	c1 e2 04             	shl    edx,0x4
c0002c4d:	83 e0 0f             	and    eax,0xf
c0002c50:	09 d0                	or     eax,edx
c0002c52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c56:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c59:	c1 ea 09             	shr    edx,0x9
c0002c5c:	31 c9                	xor    ecx,ecx
c0002c5e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c61:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c65:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c68:	89 f0                	mov    eax,esi
c0002c6a:	e8 cb f5 ff ff       	call   c000223a <move_window>
c0002c6f:	89 c1                	mov    ecx,eax
c0002c71:	85 c0                	test   eax,eax
c0002c73:	0f 85 ca 00 00 00    	jne    c0002d43 <put_fat+0x18c>
c0002c79:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c7d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c83:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c87:	85 db                	test   ebx,ebx
c0002c89:	74 07                	je     c0002c92 <put_fat+0xdb>
c0002c8b:	c1 ef 04             	shr    edi,0x4
c0002c8e:	89 fa                	mov    edx,edi
c0002c90:	eb 0e                	jmp    c0002ca0 <put_fat+0xe9>
c0002c92:	c1 ef 08             	shr    edi,0x8
c0002c95:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c98:	83 e2 f0             	and    edx,0xfffffff0
c0002c9b:	83 e7 0f             	and    edi,0xf
c0002c9e:	09 fa                	or     edx,edi
c0002ca0:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ca3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ca7:	e9 97 00 00 00       	jmp    c0002d43 <put_fat+0x18c>
c0002cac:	c1 ea 08             	shr    edx,0x8
c0002caf:	31 c9                	xor    ecx,ecx
c0002cb1:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cb4:	89 f0                	mov    eax,esi
c0002cb6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cb9:	e8 7c f5 ff ff       	call   c000223a <move_window>
c0002cbe:	89 c1                	mov    ecx,eax
c0002cc0:	85 c0                	test   eax,eax
c0002cc2:	75 7f                	jne    c0002d43 <put_fat+0x18c>
c0002cc4:	01 db                	add    ebx,ebx
c0002cc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cca:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cd0:	0f b7 d7             	movzx  edx,di
c0002cd3:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cd7:	e8 f9 ed ff ff       	call   c0001ad5 <st_word>
c0002cdc:	eb 53                	jmp    c0002d31 <put_fat+0x17a>
c0002cde:	c1 ea 07             	shr    edx,0x7
c0002ce1:	31 c9                	xor    ecx,ecx
c0002ce3:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ce6:	89 f0                	mov    eax,esi
c0002ce8:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ceb:	e8 4a f5 ff ff       	call   c000223a <move_window>
c0002cf0:	89 c1                	mov    ecx,eax
c0002cf2:	85 c0                	test   eax,eax
c0002cf4:	75 4d                	jne    c0002d43 <put_fat+0x18c>
c0002cf6:	c1 e3 02             	shl    ebx,0x2
c0002cf9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cff:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002d02:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d06:	74 1c                	je     c0002d24 <put_fat+0x16d>
c0002d08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d0c:	89 d8                	mov    eax,ebx
c0002d0e:	e8 5d ed ff ff       	call   c0001a70 <ld_dword>
c0002d13:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d19:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d22:	09 c7                	or     edi,eax
c0002d24:	89 fa                	mov    edx,edi
c0002d26:	89 d8                	mov    eax,ebx
c0002d28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d2c:	e8 a8 ed ff ff       	call   c0001ad9 <st_dword>
c0002d31:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d39:	eb 08                	jmp    c0002d43 <put_fat+0x18c>
c0002d3b:	b9 02 00 00 00       	mov    ecx,0x2
c0002d40:	89 c8                	mov    eax,ecx
c0002d42:	c3                   	ret    
c0002d43:	83 c4 1c             	add    esp,0x1c
c0002d46:	89 c8                	mov    eax,ecx
c0002d48:	5b                   	pop    ebx
c0002d49:	5e                   	pop    esi
c0002d4a:	5f                   	pop    edi
c0002d4b:	5d                   	pop    ebp
c0002d4c:	c3                   	ret    

c0002d4d <fill_last_frag>:
c0002d4d:	57                   	push   edi
c0002d4e:	89 cf                	mov    edi,ecx
c0002d50:	56                   	push   esi
c0002d51:	89 d6                	mov    esi,edx
c0002d53:	53                   	push   ebx
c0002d54:	89 c3                	mov    ebx,eax
c0002d56:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d59:	85 c0                	test   eax,eax
c0002d5b:	74 21                	je     c0002d7e <fill_last_frag+0x31>
c0002d5d:	89 f9                	mov    ecx,edi
c0002d5f:	83 f8 01             	cmp    eax,0x1
c0002d62:	76 05                	jbe    c0002d69 <fill_last_frag+0x1c>
c0002d64:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d67:	29 c1                	sub    ecx,eax
c0002d69:	8d 56 01             	lea    edx,[esi+0x1]
c0002d6c:	29 c2                	sub    edx,eax
c0002d6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d70:	e8 42 fe ff ff       	call   c0002bb7 <put_fat>
c0002d75:	85 c0                	test   eax,eax
c0002d77:	75 05                	jne    c0002d7e <fill_last_frag+0x31>
c0002d79:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d7c:	eb d8                	jmp    c0002d56 <fill_last_frag+0x9>
c0002d7e:	5b                   	pop    ebx
c0002d7f:	5e                   	pop    esi
c0002d80:	5f                   	pop    edi
c0002d81:	c3                   	ret    

c0002d82 <fill_first_frag>:
c0002d82:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d86:	75 2d                	jne    c0002db5 <fill_first_frag+0x33>
c0002d88:	57                   	push   edi
c0002d89:	56                   	push   esi
c0002d8a:	53                   	push   ebx
c0002d8b:	89 c3                	mov    ebx,eax
c0002d8d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d90:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d93:	01 d7                	add    edi,edx
c0002d95:	39 fa                	cmp    edx,edi
c0002d97:	74 14                	je     c0002dad <fill_first_frag+0x2b>
c0002d99:	8d 72 01             	lea    esi,[edx+0x1]
c0002d9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d9e:	89 f1                	mov    ecx,esi
c0002da0:	e8 12 fe ff ff       	call   c0002bb7 <put_fat>
c0002da5:	89 f2                	mov    edx,esi
c0002da7:	85 c0                	test   eax,eax
c0002da9:	74 ea                	je     c0002d95 <fill_first_frag+0x13>
c0002dab:	eb 0b                	jmp    c0002db8 <fill_first_frag+0x36>
c0002dad:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002db1:	31 c0                	xor    eax,eax
c0002db3:	eb 03                	jmp    c0002db8 <fill_first_frag+0x36>
c0002db5:	31 c0                	xor    eax,eax
c0002db7:	c3                   	ret    
c0002db8:	5b                   	pop    ebx
c0002db9:	5e                   	pop    esi
c0002dba:	5f                   	pop    edi
c0002dbb:	c3                   	ret    

c0002dbc <get_fat>:
c0002dbc:	83 fa 01             	cmp    edx,0x1
c0002dbf:	0f 86 db 01 00 00    	jbe    c0002fa0 <get_fat+0x1e4>
c0002dc5:	55                   	push   ebp
c0002dc6:	b9 01 00 00 00       	mov    ecx,0x1
c0002dcb:	57                   	push   edi
c0002dcc:	56                   	push   esi
c0002dcd:	53                   	push   ebx
c0002dce:	83 ec 1c             	sub    esp,0x1c
c0002dd1:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dd3:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dd6:	0f 86 cc 01 00 00    	jbe    c0002fa8 <get_fat+0x1ec>
c0002ddc:	89 c3                	mov    ebx,eax
c0002dde:	8a 07                	mov    al,BYTE PTR [edi]
c0002de0:	89 d6                	mov    esi,edx
c0002de2:	3c 02                	cmp    al,0x2
c0002de4:	0f 84 99 00 00 00    	je     c0002e83 <get_fat+0xc7>
c0002dea:	77 09                	ja     c0002df5 <get_fat+0x39>
c0002dec:	fe c8                	dec    al
c0002dee:	74 1a                	je     c0002e0a <get_fat+0x4e>
c0002df0:	e9 b3 01 00 00       	jmp    c0002fa8 <get_fat+0x1ec>
c0002df5:	3c 03                	cmp    al,0x3
c0002df7:	0f 84 b5 00 00 00    	je     c0002eb2 <get_fat+0xf6>
c0002dfd:	3c 04                	cmp    al,0x4
c0002dff:	0f 84 e3 00 00 00    	je     c0002ee8 <get_fat+0x12c>
c0002e05:	e9 9e 01 00 00       	jmp    c0002fa8 <get_fat+0x1ec>
c0002e0a:	89 d3                	mov    ebx,edx
c0002e0c:	31 c9                	xor    ecx,ecx
c0002e0e:	d1 eb                	shr    ebx,1
c0002e10:	89 f8                	mov    eax,edi
c0002e12:	01 d3                	add    ebx,edx
c0002e14:	89 da                	mov    edx,ebx
c0002e16:	c1 ea 09             	shr    edx,0x9
c0002e19:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e1c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e1f:	e8 16 f4 ff ff       	call   c000223a <move_window>
c0002e24:	85 c0                	test   eax,eax
c0002e26:	74 08                	je     c0002e30 <get_fat+0x74>
c0002e28:	83 c9 ff             	or     ecx,0xffffffff
c0002e2b:	e9 78 01 00 00       	jmp    c0002fa8 <get_fat+0x1ec>
c0002e30:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e33:	31 c9                	xor    ecx,ecx
c0002e35:	89 ea                	mov    edx,ebp
c0002e37:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e3d:	c1 ea 09             	shr    edx,0x9
c0002e40:	89 f8                	mov    eax,edi
c0002e42:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e45:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e49:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4c:	e8 e9 f3 ff ff       	call   c000223a <move_window>
c0002e51:	85 c0                	test   eax,eax
c0002e53:	75 d3                	jne    c0002e28 <get_fat+0x6c>
c0002e55:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e5b:	0f b6 c3             	movzx  eax,bl
c0002e5e:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e63:	c1 e3 08             	shl    ebx,0x8
c0002e66:	09 c3                	or     ebx,eax
c0002e68:	89 d9                	mov    ecx,ebx
c0002e6a:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e70:	83 e6 01             	and    esi,0x1
c0002e73:	0f 84 2f 01 00 00    	je     c0002fa8 <get_fat+0x1ec>
c0002e79:	89 d9                	mov    ecx,ebx
c0002e7b:	c1 e9 04             	shr    ecx,0x4
c0002e7e:	e9 25 01 00 00       	jmp    c0002fa8 <get_fat+0x1ec>
c0002e83:	c1 ea 08             	shr    edx,0x8
c0002e86:	31 c9                	xor    ecx,ecx
c0002e88:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e8b:	89 f8                	mov    eax,edi
c0002e8d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e90:	e8 a5 f3 ff ff       	call   c000223a <move_window>
c0002e95:	85 c0                	test   eax,eax
c0002e97:	75 8f                	jne    c0002e28 <get_fat+0x6c>
c0002e99:	01 f6                	add    esi,esi
c0002e9b:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ea1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ea5:	e8 b9 eb ff ff       	call   c0001a63 <ld_word>
c0002eaa:	0f b7 c8             	movzx  ecx,ax
c0002ead:	e9 f6 00 00 00       	jmp    c0002fa8 <get_fat+0x1ec>
c0002eb2:	c1 ea 07             	shr    edx,0x7
c0002eb5:	31 c9                	xor    ecx,ecx
c0002eb7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eba:	89 f8                	mov    eax,edi
c0002ebc:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ebf:	e8 76 f3 ff ff       	call   c000223a <move_window>
c0002ec4:	85 c0                	test   eax,eax
c0002ec6:	0f 85 5c ff ff ff    	jne    c0002e28 <get_fat+0x6c>
c0002ecc:	c1 e6 02             	shl    esi,0x2
c0002ecf:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ed5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ed9:	e8 92 eb ff ff       	call   c0001a70 <ld_dword>
c0002ede:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ee3:	e9 b4 00 00 00       	jmp    c0002f9c <get_fat+0x1e0>
c0002ee8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002eeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002eee:	89 d1                	mov    ecx,edx
c0002ef0:	09 c1                	or     ecx,eax
c0002ef2:	74 06                	je     c0002efa <get_fat+0x13e>
c0002ef4:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ef8:	75 0f                	jne    c0002f09 <get_fat+0x14d>
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002f03:	0f 85 9f 00 00 00    	jne    c0002fa8 <get_fat+0x1ec>
c0002f09:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f0d:	89 f5                	mov    ebp,esi
c0002f0f:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f14:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f17:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f1a:	80 f9 02             	cmp    cl,0x2
c0002f1d:	75 35                	jne    c0002f54 <get_fat+0x198>
c0002f1f:	83 c0 ff             	add    eax,0xffffffff
c0002f22:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f27:	83 d2 ff             	adc    edx,0xffffffff
c0002f2a:	31 db                	xor    ebx,ebx
c0002f2c:	53                   	push   ebx
c0002f2d:	51                   	push   ecx
c0002f2e:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f32:	c1 ea 09             	shr    edx,0x9
c0002f35:	52                   	push   edx
c0002f36:	50                   	push   eax
c0002f37:	e8 e0 c5 01 00       	call   c001f51c <__udivdi3>
c0002f3c:	83 c4 10             	add    esp,0x10
c0002f3f:	b9 01 00 00 00       	mov    ecx,0x1
c0002f44:	39 c5                	cmp    ebp,eax
c0002f46:	77 60                	ja     c0002fa8 <get_fat+0x1ec>
c0002f48:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f4d:	74 59                	je     c0002fa8 <get_fat+0x1ec>
c0002f4f:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f52:	eb 54                	jmp    c0002fa8 <get_fat+0x1ec>
c0002f54:	80 f9 03             	cmp    cl,0x3
c0002f57:	75 05                	jne    c0002f5e <get_fat+0x1a2>
c0002f59:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f5c:	77 f1                	ja     c0002f4f <get_fat+0x193>
c0002f5e:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f63:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f67:	75 3f                	jne    c0002fa8 <get_fat+0x1ec>
c0002f69:	89 f2                	mov    edx,esi
c0002f6b:	31 c9                	xor    ecx,ecx
c0002f6d:	c1 ea 07             	shr    edx,0x7
c0002f70:	89 f8                	mov    eax,edi
c0002f72:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f75:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f78:	e8 bd f2 ff ff       	call   c000223a <move_window>
c0002f7d:	85 c0                	test   eax,eax
c0002f7f:	0f 85 a3 fe ff ff    	jne    c0002e28 <get_fat+0x6c>
c0002f85:	c1 e6 02             	shl    esi,0x2
c0002f88:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f8e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f92:	e8 d9 ea ff ff       	call   c0001a70 <ld_dword>
c0002f97:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f9c:	89 c1                	mov    ecx,eax
c0002f9e:	eb 08                	jmp    c0002fa8 <get_fat+0x1ec>
c0002fa0:	b9 01 00 00 00       	mov    ecx,0x1
c0002fa5:	89 c8                	mov    eax,ecx
c0002fa7:	c3                   	ret    
c0002fa8:	83 c4 1c             	add    esp,0x1c
c0002fab:	89 c8                	mov    eax,ecx
c0002fad:	5b                   	pop    ebx
c0002fae:	5e                   	pop    esi
c0002faf:	5f                   	pop    edi
c0002fb0:	5d                   	pop    ebp
c0002fb1:	c3                   	ret    

c0002fb2 <dir_sdi>:
c0002fb2:	55                   	push   ebp
c0002fb3:	57                   	push   edi
c0002fb4:	56                   	push   esi
c0002fb5:	53                   	push   ebx
c0002fb6:	89 c3                	mov    ebx,eax
c0002fb8:	83 ec 1c             	sub    esp,0x1c
c0002fbb:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fbd:	31 c0                	xor    eax,eax
c0002fbf:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fc2:	0f 94 c0             	sete   al
c0002fc5:	48                   	dec    eax
c0002fc6:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fcb:	05 00 00 00 10       	add    eax,0x10000000
c0002fd0:	39 d0                	cmp    eax,edx
c0002fd2:	77 0a                	ja     c0002fde <dir_sdi+0x2c>
c0002fd4:	b8 02 00 00 00       	mov    eax,0x2
c0002fd9:	e9 c4 00 00 00       	jmp    c00030a2 <dir_sdi+0xf0>
c0002fde:	89 d6                	mov    esi,edx
c0002fe0:	f6 c2 1f             	test   dl,0x1f
c0002fe3:	75 ef                	jne    c0002fd4 <dir_sdi+0x22>
c0002fe5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fe8:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002feb:	85 c9                	test   ecx,ecx
c0002fed:	75 2d                	jne    c000301c <dir_sdi+0x6a>
c0002fef:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002ff2:	77 1b                	ja     c000300f <dir_sdi+0x5d>
c0002ff4:	89 f2                	mov    edx,esi
c0002ff6:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002ffa:	c1 ea 05             	shr    edx,0x5
c0002ffd:	39 c2                	cmp    edx,eax
c0002fff:	73 d3                	jae    c0002fd4 <dir_sdi+0x22>
c0003001:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003004:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003007:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000300a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300d:	eb 4b                	jmp    c000305a <dir_sdi+0xa8>
c000300f:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003012:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003016:	85 c0                	test   eax,eax
c0003018:	74 da                	je     c0002ff4 <dir_sdi+0x42>
c000301a:	89 c1                	mov    ecx,eax
c000301c:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003020:	c1 e5 09             	shl    ebp,0x9
c0003023:	89 ca                	mov    edx,ecx
c0003025:	39 ee                	cmp    esi,ebp
c0003027:	72 1c                	jb     c0003045 <dir_sdi+0x93>
c0003029:	89 d8                	mov    eax,ebx
c000302b:	e8 8c fd ff ff       	call   c0002dbc <get_fat>
c0003030:	89 c1                	mov    ecx,eax
c0003032:	83 f8 ff             	cmp    eax,0xffffffff
c0003035:	74 66                	je     c000309d <dir_sdi+0xeb>
c0003037:	83 f8 01             	cmp    eax,0x1
c000303a:	76 98                	jbe    c0002fd4 <dir_sdi+0x22>
c000303c:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000303f:	76 93                	jbe    c0002fd4 <dir_sdi+0x22>
c0003041:	29 ee                	sub    esi,ebp
c0003043:	eb de                	jmp    c0003023 <dir_sdi+0x71>
c0003045:	89 f8                	mov    eax,edi
c0003047:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000304b:	e8 ac ec ff ff       	call   c0001cfc <clst2sect>
c0003050:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003054:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003057:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000305a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000305d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003060:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003063:	89 d1                	mov    ecx,edx
c0003065:	09 c1                	or     ecx,eax
c0003067:	0f 84 67 ff ff ff    	je     c0002fd4 <dir_sdi+0x22>
c000306d:	89 f1                	mov    ecx,esi
c000306f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003077:	c1 e9 09             	shr    ecx,0x9
c000307a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000307e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003082:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003086:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000308c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000308f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003093:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003096:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003099:	31 c0                	xor    eax,eax
c000309b:	eb 05                	jmp    c00030a2 <dir_sdi+0xf0>
c000309d:	b8 01 00 00 00       	mov    eax,0x1
c00030a2:	83 c4 1c             	add    esp,0x1c
c00030a5:	5b                   	pop    ebx
c00030a6:	5e                   	pop    esi
c00030a7:	5f                   	pop    edi
c00030a8:	5d                   	pop    ebp
c00030a9:	c3                   	ret    

c00030aa <create_chain>:
c00030aa:	55                   	push   ebp
c00030ab:	89 c5                	mov    ebp,eax
c00030ad:	57                   	push   edi
c00030ae:	56                   	push   esi
c00030af:	53                   	push   ebx
c00030b0:	83 ec 1c             	sub    esp,0x1c
c00030b3:	85 d2                	test   edx,edx
c00030b5:	8b 30                	mov    esi,DWORD PTR [eax]
c00030b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030bb:	75 0e                	jne    c00030cb <create_chain+0x21>
c00030bd:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030c0:	85 ff                	test   edi,edi
c00030c2:	74 39                	je     c00030fd <create_chain+0x53>
c00030c4:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030c7:	77 39                	ja     c0003102 <create_chain+0x58>
c00030c9:	eb 32                	jmp    c00030fd <create_chain+0x53>
c00030cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030cf:	e8 e8 fc ff ff       	call   c0002dbc <get_fat>
c00030d4:	89 c3                	mov    ebx,eax
c00030d6:	83 f8 01             	cmp    eax,0x1
c00030d9:	77 0a                	ja     c00030e5 <create_chain+0x3b>
c00030db:	bb 01 00 00 00       	mov    ebx,0x1
c00030e0:	e9 bc 01 00 00       	jmp    c00032a1 <create_chain+0x1f7>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 60 01 00 00    	je     c000324e <create_chain+0x1a4>
c00030ee:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030f1:	0f 87 aa 01 00 00    	ja     c00032a1 <create_chain+0x1f7>
c00030f7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030fb:	eb 05                	jmp    c0003102 <create_chain+0x58>
c00030fd:	bf 01 00 00 00       	mov    edi,0x1
c0003102:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003106:	75 07                	jne    c000310f <create_chain+0x65>
c0003108:	31 db                	xor    ebx,ebx
c000310a:	e9 92 01 00 00       	jmp    c00032a1 <create_chain+0x1f7>
c000310f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003112:	75 74                	jne    c0003188 <create_chain+0xde>
c0003114:	b9 01 00 00 00       	mov    ecx,0x1
c0003119:	89 fa                	mov    edx,edi
c000311b:	89 f0                	mov    eax,esi
c000311d:	e8 2d f9 ff ff       	call   c0002a4f <find_bitmap>
c0003122:	89 c3                	mov    ebx,eax
c0003124:	8d 40 ff             	lea    eax,[eax-0x1]
c0003127:	83 f8 fd             	cmp    eax,0xfffffffd
c000312a:	0f 87 71 01 00 00    	ja     c00032a1 <create_chain+0x1f7>
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	b9 01 00 00 00       	mov    ecx,0x1
c0003138:	89 da                	mov    edx,ebx
c000313a:	89 f0                	mov    eax,esi
c000313c:	6a 01                	push   0x1
c000313e:	e8 bf f9 ff ff       	call   c0002b02 <change_bitmap>
c0003143:	83 c4 10             	add    esp,0x10
c0003146:	83 f8 02             	cmp    eax,0x2
c0003149:	74 90                	je     c00030db <create_chain+0x31>
c000314b:	83 f8 01             	cmp    eax,0x1
c000314e:	0f 84 fa 00 00 00    	je     c000324e <create_chain+0x1a4>
c0003154:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003159:	75 09                	jne    c0003164 <create_chain+0xba>
c000315b:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000315f:	e9 0e 01 00 00       	jmp    c0003272 <create_chain+0x1c8>
c0003164:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003168:	0f 85 e9 00 00 00    	jne    c0003257 <create_chain+0x1ad>
c000316e:	8d 57 01             	lea    edx,[edi+0x1]
c0003171:	39 da                	cmp    edx,ebx
c0003173:	0f 84 f9 00 00 00    	je     c0003272 <create_chain+0x1c8>
c0003179:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000317c:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003180:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003183:	e9 cf 00 00 00       	jmp    c0003257 <create_chain+0x1ad>
c0003188:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000318c:	75 41                	jne    c00031cf <create_chain+0x125>
c000318e:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003191:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003194:	77 05                	ja     c000319b <create_chain+0xf1>
c0003196:	bb 02 00 00 00       	mov    ebx,0x2
c000319b:	89 da                	mov    edx,ebx
c000319d:	89 e8                	mov    eax,ebp
c000319f:	e8 18 fc ff ff       	call   c0002dbc <get_fat>
c00031a4:	83 f8 01             	cmp    eax,0x1
c00031a7:	0f 84 a6 00 00 00    	je     c0003253 <create_chain+0x1a9>
c00031ad:	83 f8 ff             	cmp    eax,0xffffffff
c00031b0:	0f 84 9d 00 00 00    	je     c0003253 <create_chain+0x1a9>
c00031b6:	85 c0                	test   eax,eax
c00031b8:	74 11                	je     c00031cb <create_chain+0x121>
c00031ba:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031bd:	83 f8 01             	cmp    eax,0x1
c00031c0:	76 0d                	jbe    c00031cf <create_chain+0x125>
c00031c2:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031c5:	76 08                	jbe    c00031cf <create_chain+0x125>
c00031c7:	89 c7                	mov    edi,eax
c00031c9:	eb 04                	jmp    c00031cf <create_chain+0x125>
c00031cb:	85 db                	test   ebx,ebx
c00031cd:	75 36                	jne    c0003205 <create_chain+0x15b>
c00031cf:	89 fb                	mov    ebx,edi
c00031d1:	43                   	inc    ebx
c00031d2:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031d5:	77 0e                	ja     c00031e5 <create_chain+0x13b>
c00031d7:	83 ff 01             	cmp    edi,0x1
c00031da:	0f 86 28 ff ff ff    	jbe    c0003108 <create_chain+0x5e>
c00031e0:	bb 02 00 00 00       	mov    ebx,0x2
c00031e5:	89 da                	mov    edx,ebx
c00031e7:	89 e8                	mov    eax,ebp
c00031e9:	e8 ce fb ff ff       	call   c0002dbc <get_fat>
c00031ee:	85 c0                	test   eax,eax
c00031f0:	74 13                	je     c0003205 <create_chain+0x15b>
c00031f2:	83 f8 01             	cmp    eax,0x1
c00031f5:	74 5c                	je     c0003253 <create_chain+0x1a9>
c00031f7:	83 f8 ff             	cmp    eax,0xffffffff
c00031fa:	74 57                	je     c0003253 <create_chain+0x1a9>
c00031fc:	39 fb                	cmp    ebx,edi
c00031fe:	75 d1                	jne    c00031d1 <create_chain+0x127>
c0003200:	e9 03 ff ff ff       	jmp    c0003108 <create_chain+0x5e>
c0003205:	83 c9 ff             	or     ecx,0xffffffff
c0003208:	89 da                	mov    edx,ebx
c000320a:	89 f0                	mov    eax,esi
c000320c:	e8 a6 f9 ff ff       	call   c0002bb7 <put_fat>
c0003211:	85 c0                	test   eax,eax
c0003213:	75 14                	jne    c0003229 <create_chain+0x17f>
c0003215:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000321a:	74 0d                	je     c0003229 <create_chain+0x17f>
c000321c:	89 d9                	mov    ecx,ebx
c000321e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003222:	89 f0                	mov    eax,esi
c0003224:	e8 8e f9 ff ff       	call   c0002bb7 <put_fat>
c0003229:	85 c0                	test   eax,eax
c000322b:	75 1a                	jne    c0003247 <create_chain+0x19d>
c000322d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003230:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003233:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003236:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003239:	39 d0                	cmp    eax,edx
c000323b:	77 04                	ja     c0003241 <create_chain+0x197>
c000323d:	48                   	dec    eax
c000323e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003241:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003245:	eb 5a                	jmp    c00032a1 <create_chain+0x1f7>
c0003247:	48                   	dec    eax
c0003248:	0f 85 8d fe ff ff    	jne    c00030db <create_chain+0x31>
c000324e:	83 cb ff             	or     ebx,0xffffffff
c0003251:	eb 4e                	jmp    c00032a1 <create_chain+0x1f7>
c0003253:	89 c3                	mov    ebx,eax
c0003255:	eb 4a                	jmp    c00032a1 <create_chain+0x1f7>
c0003257:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000325b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000325e:	41                   	inc    ecx
c000325f:	39 d9                	cmp    ecx,ebx
c0003261:	75 19                	jne    c000327c <create_chain+0x1d2>
c0003263:	b9 02 00 00 00       	mov    ecx,0x2
c0003268:	85 d2                	test   edx,edx
c000326a:	74 03                	je     c000326f <create_chain+0x1c5>
c000326c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000326f:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003272:	85 c0                	test   eax,eax
c0003274:	0f 85 61 fe ff ff    	jne    c00030db <create_chain+0x31>
c000327a:	eb b1                	jmp    c000322d <create_chain+0x183>
c000327c:	85 d2                	test   edx,edx
c000327e:	75 07                	jne    c0003287 <create_chain+0x1dd>
c0003280:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003287:	89 d9                	mov    ecx,ebx
c0003289:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000328d:	89 e8                	mov    eax,ebp
c000328f:	e8 b9 fa ff ff       	call   c0002d4d <fill_last_frag>
c0003294:	85 c0                	test   eax,eax
c0003296:	75 af                	jne    c0003247 <create_chain+0x19d>
c0003298:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000329f:	eb 8c                	jmp    c000322d <create_chain+0x183>
c00032a1:	83 c4 1c             	add    esp,0x1c
c00032a4:	89 d8                	mov    eax,ebx
c00032a6:	5b                   	pop    ebx
c00032a7:	5e                   	pop    esi
c00032a8:	5f                   	pop    edi
c00032a9:	5d                   	pop    ebp
c00032aa:	c3                   	ret    

c00032ab <remove_chain>:
c00032ab:	55                   	push   ebp
c00032ac:	57                   	push   edi
c00032ad:	56                   	push   esi
c00032ae:	53                   	push   ebx
c00032af:	83 ec 1c             	sub    esp,0x1c
c00032b2:	83 fa 01             	cmp    edx,0x1
c00032b5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032bb:	77 0a                	ja     c00032c7 <remove_chain+0x1c>
c00032bd:	b8 02 00 00 00       	mov    eax,0x2
c00032c2:	e9 24 01 00 00       	jmp    c00033eb <remove_chain+0x140>
c00032c7:	89 d6                	mov    esi,edx
c00032c9:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032cc:	76 ef                	jbe    c00032bd <remove_chain+0x12>
c00032ce:	89 c7                	mov    edi,eax
c00032d0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032d5:	75 06                	jne    c00032dd <remove_chain+0x32>
c00032d7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032db:	eb 54                	jmp    c0003331 <remove_chain+0x86>
c00032dd:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032e0:	75 06                	jne    c00032e8 <remove_chain+0x3d>
c00032e2:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032e6:	74 ef                	je     c00032d7 <remove_chain+0x2c>
c00032e8:	83 c9 ff             	or     ecx,0xffffffff
c00032eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032ef:	89 d8                	mov    eax,ebx
c00032f1:	e8 c1 f8 ff ff       	call   c0002bb7 <put_fat>
c00032f6:	85 c0                	test   eax,eax
c00032f8:	74 dd                	je     c00032d7 <remove_chain+0x2c>
c00032fa:	e9 ec 00 00 00       	jmp    c00033eb <remove_chain+0x140>
c00032ff:	83 f8 01             	cmp    eax,0x1
c0003302:	74 b9                	je     c00032bd <remove_chain+0x12>
c0003304:	83 f8 ff             	cmp    eax,0xffffffff
c0003307:	74 6d                	je     c0003376 <remove_chain+0xcb>
c0003309:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000330c:	75 6f                	jne    c000337d <remove_chain+0xd2>
c000330e:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003311:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003314:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003317:	39 d0                	cmp    eax,edx
c0003319:	73 08                	jae    c0003323 <remove_chain+0x78>
c000331b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000331f:	40                   	inc    eax
c0003320:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003323:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003326:	39 e9                	cmp    ecx,ebp
c0003328:	75 64                	jne    c000338e <remove_chain+0xe3>
c000332a:	89 ee                	mov    esi,ebp
c000332c:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000332f:	76 0f                	jbe    c0003340 <remove_chain+0x95>
c0003331:	89 f2                	mov    edx,esi
c0003333:	89 f8                	mov    eax,edi
c0003335:	e8 82 fa ff ff       	call   c0002dbc <get_fat>
c000333a:	89 c5                	mov    ebp,eax
c000333c:	85 c0                	test   eax,eax
c000333e:	75 bf                	jne    c00032ff <remove_chain+0x54>
c0003340:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003343:	0f 85 a0 00 00 00    	jne    c00033e9 <remove_chain+0x13e>
c0003349:	eb 6c                	jmp    c00033b7 <remove_chain+0x10c>
c000334b:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000334e:	84 c0                	test   al,al
c0003350:	75 7d                	jne    c00033cf <remove_chain+0x124>
c0003352:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003355:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003359:	0f 84 86 00 00 00    	je     c00033e5 <remove_chain+0x13a>
c000335f:	89 da                	mov    edx,ebx
c0003361:	89 f8                	mov    eax,edi
c0003363:	e8 54 fa ff ff       	call   c0002dbc <get_fat>
c0003368:	83 f8 01             	cmp    eax,0x1
c000336b:	0f 86 4c ff ff ff    	jbe    c00032bd <remove_chain+0x12>
c0003371:	83 f8 ff             	cmp    eax,0xffffffff
c0003374:	75 4e                	jne    c00033c4 <remove_chain+0x119>
c0003376:	b8 01 00 00 00       	mov    eax,0x1
c000337b:	eb 6e                	jmp    c00033eb <remove_chain+0x140>
c000337d:	31 c9                	xor    ecx,ecx
c000337f:	89 f2                	mov    edx,esi
c0003381:	89 d8                	mov    eax,ebx
c0003383:	e8 2f f8 ff ff       	call   c0002bb7 <put_fat>
c0003388:	85 c0                	test   eax,eax
c000338a:	74 82                	je     c000330e <remove_chain+0x63>
c000338c:	eb 5d                	jmp    c00033eb <remove_chain+0x140>
c000338e:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003391:	75 1b                	jne    c00033ae <remove_chain+0x103>
c0003393:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003397:	83 ec 0c             	sub    esp,0xc
c000339a:	6a 00                	push   0x0
c000339c:	89 d8                	mov    eax,ebx
c000339e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00033a2:	e8 5b f7 ff ff       	call   c0002b02 <change_bitmap>
c00033a7:	83 c4 10             	add    esp,0x10
c00033aa:	85 c0                	test   eax,eax
c00033ac:	75 3d                	jne    c00033eb <remove_chain+0x140>
c00033ae:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033b2:	e9 73 ff ff ff       	jmp    c000332a <remove_chain+0x7f>
c00033b7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033bc:	75 8d                	jne    c000334b <remove_chain+0xa0>
c00033be:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033c2:	eb 25                	jmp    c00033e9 <remove_chain+0x13e>
c00033c4:	8d 53 01             	lea    edx,[ebx+0x1]
c00033c7:	89 c3                	mov    ebx,eax
c00033c9:	39 c2                	cmp    edx,eax
c00033cb:	74 88                	je     c0003355 <remove_chain+0xaa>
c00033cd:	eb 1a                	jmp    c00033e9 <remove_chain+0x13e>
c00033cf:	3c 03                	cmp    al,0x3
c00033d1:	75 16                	jne    c00033e9 <remove_chain+0x13e>
c00033d3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033d6:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033da:	77 0d                	ja     c00033e9 <remove_chain+0x13e>
c00033dc:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033e3:	72 04                	jb     c00033e9 <remove_chain+0x13e>
c00033e5:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033e9:	31 c0                	xor    eax,eax
c00033eb:	83 c4 1c             	add    esp,0x1c
c00033ee:	5b                   	pop    ebx
c00033ef:	5e                   	pop    esi
c00033f0:	5f                   	pop    edi
c00033f1:	5d                   	pop    ebp
c00033f2:	c3                   	ret    

c00033f3 <dir_clear>:
c00033f3:	55                   	push   ebp
c00033f4:	57                   	push   edi
c00033f5:	56                   	push   esi
c00033f6:	89 c6                	mov    esi,eax
c00033f8:	53                   	push   ebx
c00033f9:	83 ec 1c             	sub    esp,0x1c
c00033fc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003400:	e8 a1 ed ff ff       	call   c00021a6 <sync_window>
c0003405:	85 c0                	test   eax,eax
c0003407:	0f 85 de 00 00 00    	jne    c00034eb <dir_clear+0xf8>
c000340d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003411:	89 f0                	mov    eax,esi
c0003413:	e8 e4 e8 ff ff       	call   c0001cfc <clst2sect>
c0003418:	8d 6e 54             	lea    ebp,[esi+0x54]
c000341b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000341f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003423:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003426:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003429:	b9 00 02 00 00       	mov    ecx,0x200
c000342e:	31 d2                	xor    edx,edx
c0003430:	89 e8                	mov    eax,ebp
c0003432:	e8 c0 e6 ff ff       	call   c0001af7 <mem_set>
c0003437:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000343b:	c1 e3 09             	shl    ebx,0x9
c000343e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003444:	76 1f                	jbe    c0003465 <dir_clear+0x72>
c0003446:	bb 00 80 00 00       	mov    ebx,0x8000
c000344b:	eb 18                	jmp    c0003465 <dir_clear+0x72>
c000344d:	83 ec 0c             	sub    esp,0xc
c0003450:	53                   	push   ebx
c0003451:	e8 f3 4d 00 00       	call   c0008249 <ff_memalloc>
c0003456:	83 c4 10             	add    esp,0x10
c0003459:	89 c7                	mov    edi,eax
c000345b:	85 c0                	test   eax,eax
c000345d:	0f 85 8f 00 00 00    	jne    c00034f2 <dir_clear+0xff>
c0003463:	d1 eb                	shr    ebx,1
c0003465:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000346b:	77 e0                	ja     c000344d <dir_clear+0x5a>
c000346d:	31 db                	xor    ebx,ebx
c000346f:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003473:	39 d8                	cmp    eax,ebx
c0003475:	76 66                	jbe    c00034dd <dir_clear+0xea>
c0003477:	83 ec 0c             	sub    esp,0xc
c000347a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000347e:	6a 01                	push   0x1
c0003480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003488:	55                   	push   ebp
c0003489:	50                   	push   eax
c000348a:	e8 9f e5 ff ff       	call   c0001a2e <disk_write>
c000348f:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003494:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003499:	83 c4 20             	add    esp,0x20
c000349c:	85 c0                	test   eax,eax
c000349e:	75 3d                	jne    c00034dd <dir_clear+0xea>
c00034a0:	43                   	inc    ebx
c00034a1:	eb cc                	jmp    c000346f <dir_clear+0x7c>
c00034a3:	83 ec 0c             	sub    esp,0xc
c00034a6:	89 d8                	mov    eax,ebx
c00034a8:	31 d2                	xor    edx,edx
c00034aa:	55                   	push   ebp
c00034ab:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034af:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034b3:	52                   	push   edx
c00034b4:	50                   	push   eax
c00034b5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034b9:	57                   	push   edi
c00034ba:	50                   	push   eax
c00034bb:	e8 6e e5 ff ff       	call   c0001a2e <disk_write>
c00034c0:	83 c4 20             	add    esp,0x20
c00034c3:	85 c0                	test   eax,eax
c00034c5:	75 0a                	jne    c00034d1 <dir_clear+0xde>
c00034c7:	01 eb                	add    ebx,ebp
c00034c9:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034cd:	39 d8                	cmp    eax,ebx
c00034cf:	77 d2                	ja     c00034a3 <dir_clear+0xb0>
c00034d1:	83 ec 0c             	sub    esp,0xc
c00034d4:	57                   	push   edi
c00034d5:	e8 85 4d 00 00       	call   c000825f <ff_memfree>
c00034da:	83 c4 10             	add    esp,0x10
c00034dd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034e1:	39 d8                	cmp    eax,ebx
c00034e3:	0f 95 c0             	setne  al
c00034e6:	0f b6 c0             	movzx  eax,al
c00034e9:	eb 19                	jmp    c0003504 <dir_clear+0x111>
c00034eb:	b8 01 00 00 00       	mov    eax,0x1
c00034f0:	eb 12                	jmp    c0003504 <dir_clear+0x111>
c00034f2:	89 d9                	mov    ecx,ebx
c00034f4:	31 d2                	xor    edx,edx
c00034f6:	c1 eb 09             	shr    ebx,0x9
c00034f9:	e8 f9 e5 ff ff       	call   c0001af7 <mem_set>
c00034fe:	89 dd                	mov    ebp,ebx
c0003500:	31 db                	xor    ebx,ebx
c0003502:	eb c5                	jmp    c00034c9 <dir_clear+0xd6>
c0003504:	83 c4 1c             	add    esp,0x1c
c0003507:	5b                   	pop    ebx
c0003508:	5e                   	pop    esi
c0003509:	5f                   	pop    edi
c000350a:	5d                   	pop    ebp
c000350b:	c3                   	ret    

c000350c <dir_next>:
c000350c:	55                   	push   ebp
c000350d:	57                   	push   edi
c000350e:	56                   	push   esi
c000350f:	53                   	push   ebx
c0003510:	89 c3                	mov    ebx,eax
c0003512:	83 ec 1c             	sub    esp,0x1c
c0003515:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003517:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000351a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000351e:	8d 78 20             	lea    edi,[eax+0x20]
c0003521:	31 c0                	xor    eax,eax
c0003523:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003527:	0f 94 c0             	sete   al
c000352a:	48                   	dec    eax
c000352b:	25 00 00 20 f0       	and    eax,0xf0200000
c0003530:	05 00 00 00 10       	add    eax,0x10000000
c0003535:	39 f8                	cmp    eax,edi
c0003537:	77 0e                	ja     c0003547 <dir_next+0x3b>
c0003539:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003540:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003547:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000354a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000354d:	89 ce                	mov    esi,ecx
c000354f:	b8 04 00 00 00       	mov    eax,0x4
c0003554:	09 d6                	or     esi,edx
c0003556:	0f 84 da 00 00 00    	je     c0003636 <dir_next+0x12a>
c000355c:	89 f8                	mov    eax,edi
c000355e:	25 ff 01 00 00       	and    eax,0x1ff
c0003563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003567:	0f 85 b9 00 00 00    	jne    c0003626 <dir_next+0x11a>
c000356d:	83 c2 01             	add    edx,0x1
c0003570:	83 d1 00             	adc    ecx,0x0
c0003573:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003576:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003579:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000357c:	85 d2                	test   edx,edx
c000357e:	75 29                	jne    c00035a9 <dir_next+0x9d>
c0003580:	89 fa                	mov    edx,edi
c0003582:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003586:	c1 ea 05             	shr    edx,0x5
c0003589:	39 c2                	cmp    edx,eax
c000358b:	0f 82 95 00 00 00    	jb     c0003626 <dir_next+0x11a>
c0003591:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003598:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000359f:	b8 04 00 00 00       	mov    eax,0x4
c00035a4:	e9 8d 00 00 00       	jmp    c0003636 <dir_next+0x12a>
c00035a9:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035ad:	89 f9                	mov    ecx,edi
c00035af:	48                   	dec    eax
c00035b0:	c1 e9 09             	shr    ecx,0x9
c00035b3:	85 c8                	test   eax,ecx
c00035b5:	75 6f                	jne    c0003626 <dir_next+0x11a>
c00035b7:	89 d8                	mov    eax,ebx
c00035b9:	e8 fe f7 ff ff       	call   c0002dbc <get_fat>
c00035be:	89 c6                	mov    esi,eax
c00035c0:	83 f8 01             	cmp    eax,0x1
c00035c3:	77 07                	ja     c00035cc <dir_next+0xc0>
c00035c5:	b8 02 00 00 00       	mov    eax,0x2
c00035ca:	eb 6a                	jmp    c0003636 <dir_next+0x12a>
c00035cc:	83 f8 ff             	cmp    eax,0xffffffff
c00035cf:	75 07                	jne    c00035d8 <dir_next+0xcc>
c00035d1:	b8 01 00 00 00       	mov    eax,0x1
c00035d6:	eb 5e                	jmp    c0003636 <dir_next+0x12a>
c00035d8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035db:	77 37                	ja     c0003614 <dir_next+0x108>
c00035dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035e2:	74 ad                	je     c0003591 <dir_next+0x85>
c00035e4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035e7:	89 d8                	mov    eax,ebx
c00035e9:	e8 bc fa ff ff       	call   c00030aa <create_chain>
c00035ee:	89 c6                	mov    esi,eax
c00035f0:	b8 07 00 00 00       	mov    eax,0x7
c00035f5:	85 f6                	test   esi,esi
c00035f7:	74 3d                	je     c0003636 <dir_next+0x12a>
c00035f9:	83 fe 01             	cmp    esi,0x1
c00035fc:	74 c7                	je     c00035c5 <dir_next+0xb9>
c00035fe:	83 fe ff             	cmp    esi,0xffffffff
c0003601:	74 ce                	je     c00035d1 <dir_next+0xc5>
c0003603:	89 f2                	mov    edx,esi
c0003605:	89 e8                	mov    eax,ebp
c0003607:	e8 e7 fd ff ff       	call   c00033f3 <dir_clear>
c000360c:	85 c0                	test   eax,eax
c000360e:	75 c1                	jne    c00035d1 <dir_next+0xc5>
c0003610:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003614:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003617:	89 f2                	mov    edx,esi
c0003619:	89 e8                	mov    eax,ebp
c000361b:	e8 dc e6 ff ff       	call   c0001cfc <clst2sect>
c0003620:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003623:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003626:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000362a:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000362d:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003631:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003634:	31 c0                	xor    eax,eax
c0003636:	83 c4 1c             	add    esp,0x1c
c0003639:	5b                   	pop    ebx
c000363a:	5e                   	pop    esi
c000363b:	5f                   	pop    edi
c000363c:	5d                   	pop    ebp
c000363d:	c3                   	ret    

c000363e <load_xdir>:
c000363e:	55                   	push   ebp
c000363f:	57                   	push   edi
c0003640:	56                   	push   esi
c0003641:	89 c6                	mov    esi,eax
c0003643:	53                   	push   ebx
c0003644:	83 ec 1c             	sub    esp,0x1c
c0003647:	8b 00                	mov    eax,DWORD PTR [eax]
c0003649:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003652:	e8 e3 eb ff ff       	call   c000223a <move_window>
c0003657:	89 c3                	mov    ebx,eax
c0003659:	85 c0                	test   eax,eax
c000365b:	0f 85 0c 01 00 00    	jne    c000376d <load_xdir+0x12f>
c0003661:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003664:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003667:	0f 85 fb 00 00 00    	jne    c0003768 <load_xdir+0x12a>
c000366d:	89 f8                	mov    eax,edi
c000366f:	b9 20 00 00 00       	mov    ecx,0x20
c0003674:	e8 69 e4 ff ff       	call   c0001ae2 <mem_cpy>
c0003679:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000367d:	40                   	inc    eax
c000367e:	c1 e0 05             	shl    eax,0x5
c0003681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003685:	83 e8 60             	sub    eax,0x60
c0003688:	3d 00 02 00 00       	cmp    eax,0x200
c000368d:	0f 87 d5 00 00 00    	ja     c0003768 <load_xdir+0x12a>
c0003693:	31 d2                	xor    edx,edx
c0003695:	89 f0                	mov    eax,esi
c0003697:	e8 70 fe ff ff       	call   c000350c <dir_next>
c000369c:	89 c3                	mov    ebx,eax
c000369e:	83 f8 04             	cmp    eax,0x4
c00036a1:	0f 84 c1 00 00 00    	je     c0003768 <load_xdir+0x12a>
c00036a7:	85 c0                	test   eax,eax
c00036a9:	0f 85 be 00 00 00    	jne    c000376d <load_xdir+0x12f>
c00036af:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036b2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00036b7:	e8 7e eb ff ff       	call   c000223a <move_window>
c00036bc:	89 c3                	mov    ebx,eax
c00036be:	85 c0                	test   eax,eax
c00036c0:	0f 85 a7 00 00 00    	jne    c000376d <load_xdir+0x12f>
c00036c6:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036c9:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036cc:	0f 85 96 00 00 00    	jne    c0003768 <load_xdir+0x12a>
c00036d2:	8d 47 20             	lea    eax,[edi+0x20]
c00036d5:	b9 20 00 00 00       	mov    ecx,0x20
c00036da:	e8 03 e4 ff ff       	call   c0001ae2 <mem_cpy>
c00036df:	31 d2                	xor    edx,edx
c00036e1:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036e5:	b9 0f 00 00 00       	mov    ecx,0xf
c00036ea:	83 c0 2c             	add    eax,0x2c
c00036ed:	f7 f1                	div    ecx
c00036ef:	c1 e0 05             	shl    eax,0x5
c00036f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036f6:	77 70                	ja     c0003768 <load_xdir+0x12a>
c00036f8:	bd 40 00 00 00       	mov    ebp,0x40
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	89 f0                	mov    eax,esi
c0003701:	e8 06 fe ff ff       	call   c000350c <dir_next>
c0003706:	89 c3                	mov    ebx,eax
c0003708:	83 f8 04             	cmp    eax,0x4
c000370b:	74 5b                	je     c0003768 <load_xdir+0x12a>
c000370d:	85 c0                	test   eax,eax
c000370f:	75 5c                	jne    c000376d <load_xdir+0x12f>
c0003711:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003714:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003717:	8b 06                	mov    eax,DWORD PTR [esi]
c0003719:	e8 1c eb ff ff       	call   c000223a <move_window>
c000371e:	89 c3                	mov    ebx,eax
c0003720:	85 c0                	test   eax,eax
c0003722:	75 49                	jne    c000376d <load_xdir+0x12f>
c0003724:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003727:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000372a:	75 3c                	jne    c0003768 <load_xdir+0x12a>
c000372c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003732:	77 0d                	ja     c0003741 <load_xdir+0x103>
c0003734:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003737:	b9 20 00 00 00       	mov    ecx,0x20
c000373c:	e8 a1 e3 ff ff       	call   c0001ae2 <mem_cpy>
c0003741:	83 c5 20             	add    ebp,0x20
c0003744:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003748:	77 b3                	ja     c00036fd <load_xdir+0xbf>
c000374a:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003750:	77 1b                	ja     c000376d <load_xdir+0x12f>
c0003752:	89 f8                	mov    eax,edi
c0003754:	e8 d8 e7 ff ff       	call   c0001f31 <xdir_sum>
c0003759:	89 c1                	mov    ecx,eax
c000375b:	8d 47 02             	lea    eax,[edi+0x2]
c000375e:	e8 00 e3 ff ff       	call   c0001a63 <ld_word>
c0003763:	66 39 c1             	cmp    cx,ax
c0003766:	74 05                	je     c000376d <load_xdir+0x12f>
c0003768:	bb 02 00 00 00       	mov    ebx,0x2
c000376d:	83 c4 1c             	add    esp,0x1c
c0003770:	89 d8                	mov    eax,ebx
c0003772:	5b                   	pop    ebx
c0003773:	5e                   	pop    esi
c0003774:	5f                   	pop    edi
c0003775:	5d                   	pop    ebp
c0003776:	c3                   	ret    

c0003777 <load_obj_xdir>:
c0003777:	53                   	push   ebx
c0003778:	89 c3                	mov    ebx,eax
c000377a:	83 ec 08             	sub    esp,0x8
c000377d:	8b 02                	mov    eax,DWORD PTR [edx]
c000377f:	89 03                	mov    DWORD PTR [ebx],eax
c0003781:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003784:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003787:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000378a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000378d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003790:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003797:	30 c0                	xor    al,al
c0003799:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037a0:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00037a3:	89 d8                	mov    eax,ebx
c00037a5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037a8:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037ab:	e8 02 f8 ff ff       	call   c0002fb2 <dir_sdi>
c00037b0:	85 c0                	test   eax,eax
c00037b2:	75 0b                	jne    c00037bf <load_obj_xdir+0x48>
c00037b4:	83 c4 08             	add    esp,0x8
c00037b7:	89 d8                	mov    eax,ebx
c00037b9:	5b                   	pop    ebx
c00037ba:	e9 7f fe ff ff       	jmp    c000363e <load_xdir>
c00037bf:	83 c4 08             	add    esp,0x8
c00037c2:	5b                   	pop    ebx
c00037c3:	c3                   	ret    

c00037c4 <dir_read>:
c00037c4:	55                   	push   ebp
c00037c5:	bd 04 00 00 00       	mov    ebp,0x4
c00037ca:	57                   	push   edi
c00037cb:	56                   	push   esi
c00037cc:	be ff ff ff ff       	mov    esi,0xffffffff
c00037d1:	53                   	push   ebx
c00037d2:	89 c3                	mov    ebx,eax
c00037d4:	83 ec 1c             	sub    esp,0x1c
c00037d7:	8b 38                	mov    edi,DWORD PTR [eax]
c00037d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037dd:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037e8:	89 c8                	mov    eax,ecx
c00037ea:	09 d0                	or     eax,edx
c00037ec:	0f 84 25 01 00 00    	je     c0003917 <dir_read+0x153>
c00037f2:	89 f8                	mov    eax,edi
c00037f4:	e8 41 ea ff ff       	call   c000223a <move_window>
c00037f9:	89 c5                	mov    ebp,eax
c00037fb:	85 c0                	test   eax,eax
c00037fd:	0f 85 23 01 00 00    	jne    c0003926 <dir_read+0x162>
c0003803:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003806:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003808:	84 c9                	test   cl,cl
c000380a:	0f 84 11 01 00 00    	je     c0003921 <dir_read+0x15d>
c0003810:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003813:	75 48                	jne    c000385d <dir_read+0x99>
c0003815:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000381a:	74 10                	je     c000382c <dir_read+0x68>
c000381c:	80 f9 83             	cmp    cl,0x83
c000381f:	0f 85 dd 00 00 00    	jne    c0003902 <dir_read+0x13e>
c0003825:	31 ed                	xor    ebp,ebp
c0003827:	e9 08 01 00 00       	jmp    c0003934 <dir_read+0x170>
c000382c:	80 f9 85             	cmp    cl,0x85
c000382f:	0f 85 cd 00 00 00    	jne    c0003902 <dir_read+0x13e>
c0003835:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003838:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000383b:	89 d8                	mov    eax,ebx
c000383d:	e8 fc fd ff ff       	call   c000363e <load_xdir>
c0003842:	89 c5                	mov    ebp,eax
c0003844:	85 c0                	test   eax,eax
c0003846:	0f 85 da 00 00 00    	jne    c0003926 <dir_read+0x162>
c000384c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000384f:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003852:	83 e0 3f             	and    eax,0x3f
c0003855:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003858:	e9 d7 00 00 00       	jmp    c0003934 <dir_read+0x170>
c000385d:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003860:	83 e0 3f             	and    eax,0x3f
c0003863:	80 f9 e5             	cmp    cl,0xe5
c0003866:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000386a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000386d:	0f 84 8a 00 00 00    	je     c00038fd <dir_read+0x139>
c0003873:	80 f9 2e             	cmp    cl,0x2e
c0003876:	0f 84 81 00 00 00    	je     c00038fd <dir_read+0x139>
c000387c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003880:	83 e0 1f             	and    eax,0x1f
c0003883:	83 f8 08             	cmp    eax,0x8
c0003886:	0f 94 c0             	sete   al
c0003889:	0f b6 c0             	movzx  eax,al
c000388c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003890:	75 6b                	jne    c00038fd <dir_read+0x139>
c0003892:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003897:	75 44                	jne    c00038dd <dir_read+0x119>
c0003899:	f6 c1 40             	test   cl,0x40
c000389c:	74 12                	je     c00038b0 <dir_read+0xec>
c000389e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038a1:	83 e1 bf             	and    ecx,0xffffffbf
c00038a4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038a8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038ab:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038ae:	eb 06                	jmp    c00038b6 <dir_read+0xf2>
c00038b0:	89 f0                	mov    eax,esi
c00038b2:	38 c8                	cmp    al,cl
c00038b4:	75 47                	jne    c00038fd <dir_read+0x139>
c00038b6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ba:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bf:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038c2:	75 3e                	jne    c0003902 <dir_read+0x13e>
c00038c4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038cb:	e8 95 e4 ff ff       	call   c0001d65 <pick_lfn>
c00038d0:	85 c0                	test   eax,eax
c00038d2:	74 2e                	je     c0003902 <dir_read+0x13e>
c00038d4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038d8:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038db:	eb 25                	jmp    c0003902 <dir_read+0x13e>
c00038dd:	89 f0                	mov    eax,esi
c00038df:	84 c0                	test   al,al
c00038e1:	75 11                	jne    c00038f4 <dir_read+0x130>
c00038e3:	89 d0                	mov    eax,edx
c00038e5:	e8 35 e6 ff ff       	call   c0001f1f <sum_sfn>
c00038ea:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038ee:	0f 84 31 ff ff ff    	je     c0003825 <dir_read+0x61>
c00038f4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038fb:	eb 37                	jmp    c0003934 <dir_read+0x170>
c00038fd:	be ff ff ff ff       	mov    esi,0xffffffff
c0003902:	31 d2                	xor    edx,edx
c0003904:	89 d8                	mov    eax,ebx
c0003906:	e8 01 fc ff ff       	call   c000350c <dir_next>
c000390b:	89 c5                	mov    ebp,eax
c000390d:	85 c0                	test   eax,eax
c000390f:	0f 84 cd fe ff ff    	je     c00037e2 <dir_read+0x1e>
c0003915:	eb 0f                	jmp    c0003926 <dir_read+0x162>
c0003917:	85 ed                	test   ebp,ebp
c0003919:	0f 84 06 ff ff ff    	je     c0003825 <dir_read+0x61>
c000391f:	eb 05                	jmp    c0003926 <dir_read+0x162>
c0003921:	bd 04 00 00 00       	mov    ebp,0x4
c0003926:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000392d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003934:	83 c4 1c             	add    esp,0x1c
c0003937:	89 e8                	mov    eax,ebp
c0003939:	5b                   	pop    ebx
c000393a:	5e                   	pop    esi
c000393b:	5f                   	pop    edi
c000393c:	5d                   	pop    ebp
c000393d:	c3                   	ret    

c000393e <dir_alloc>:
c000393e:	55                   	push   ebp
c000393f:	89 d5                	mov    ebp,edx
c0003941:	57                   	push   edi
c0003942:	31 d2                	xor    edx,edx
c0003944:	56                   	push   esi
c0003945:	53                   	push   ebx
c0003946:	89 c3                	mov    ebx,eax
c0003948:	83 ec 0c             	sub    esp,0xc
c000394b:	8b 38                	mov    edi,DWORD PTR [eax]
c000394d:	e8 60 f6 ff ff       	call   c0002fb2 <dir_sdi>
c0003952:	85 c0                	test   eax,eax
c0003954:	75 4e                	jne    c00039a4 <dir_alloc+0x66>
c0003956:	31 f6                	xor    esi,esi
c0003958:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000395b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000395e:	89 f8                	mov    eax,edi
c0003960:	e8 d5 e8 ff ff       	call   c000223a <move_window>
c0003965:	85 c0                	test   eax,eax
c0003967:	75 3b                	jne    c00039a4 <dir_alloc+0x66>
c0003969:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000396c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000396f:	8a 12                	mov    dl,BYTE PTR [edx]
c0003971:	75 07                	jne    c000397a <dir_alloc+0x3c>
c0003973:	f7 d2                	not    edx
c0003975:	c0 ea 07             	shr    dl,0x7
c0003978:	eb 0d                	jmp    c0003987 <dir_alloc+0x49>
c000397a:	80 fa e5             	cmp    dl,0xe5
c000397d:	0f 94 c1             	sete   cl
c0003980:	84 d2                	test   dl,dl
c0003982:	0f 94 c2             	sete   dl
c0003985:	09 ca                	or     edx,ecx
c0003987:	84 d2                	test   dl,dl
c0003989:	74 07                	je     c0003992 <dir_alloc+0x54>
c000398b:	46                   	inc    esi
c000398c:	39 ee                	cmp    esi,ebp
c000398e:	75 04                	jne    c0003994 <dir_alloc+0x56>
c0003990:	eb 1c                	jmp    c00039ae <dir_alloc+0x70>
c0003992:	31 f6                	xor    esi,esi
c0003994:	ba 01 00 00 00       	mov    edx,0x1
c0003999:	89 d8                	mov    eax,ebx
c000399b:	e8 6c fb ff ff       	call   c000350c <dir_next>
c00039a0:	85 c0                	test   eax,eax
c00039a2:	74 b4                	je     c0003958 <dir_alloc+0x1a>
c00039a4:	83 f8 04             	cmp    eax,0x4
c00039a7:	75 05                	jne    c00039ae <dir_alloc+0x70>
c00039a9:	b8 07 00 00 00       	mov    eax,0x7
c00039ae:	83 c4 0c             	add    esp,0xc
c00039b1:	5b                   	pop    ebx
c00039b2:	5e                   	pop    esi
c00039b3:	5f                   	pop    edi
c00039b4:	5d                   	pop    ebp
c00039b5:	c3                   	ret    

c00039b6 <store_xdir>:
c00039b6:	55                   	push   ebp
c00039b7:	57                   	push   edi
c00039b8:	89 c7                	mov    edi,eax
c00039ba:	56                   	push   esi
c00039bb:	53                   	push   ebx
c00039bc:	83 ec 0c             	sub    esp,0xc
c00039bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00039c1:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039c4:	89 e8                	mov    eax,ebp
c00039c6:	e8 66 e5 ff ff       	call   c0001f31 <xdir_sum>
c00039cb:	0f b7 d0             	movzx  edx,ax
c00039ce:	8d 45 02             	lea    eax,[ebp+0x2]
c00039d1:	e8 ff e0 ff ff       	call   c0001ad5 <st_word>
c00039d6:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039d9:	89 f8                	mov    eax,edi
c00039db:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039df:	e8 ce f5 ff ff       	call   c0002fb2 <dir_sdi>
c00039e4:	89 c6                	mov    esi,eax
c00039e6:	85 f6                	test   esi,esi
c00039e8:	75 3d                	jne    c0003a27 <store_xdir+0x71>
c00039ea:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039ed:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039f0:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f2:	e8 43 e8 ff ff       	call   c000223a <move_window>
c00039f7:	89 c6                	mov    esi,eax
c00039f9:	85 c0                	test   eax,eax
c00039fb:	75 2a                	jne    c0003a27 <store_xdir+0x71>
c00039fd:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003a00:	b9 20 00 00 00       	mov    ecx,0x20
c0003a05:	89 ea                	mov    edx,ebp
c0003a07:	e8 d6 e0 ff ff       	call   c0001ae2 <mem_cpy>
c0003a0c:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a0e:	85 db                	test   ebx,ebx
c0003a10:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a14:	74 11                	je     c0003a27 <store_xdir+0x71>
c0003a16:	31 d2                	xor    edx,edx
c0003a18:	89 f8                	mov    eax,edi
c0003a1a:	e8 ed fa ff ff       	call   c000350c <dir_next>
c0003a1f:	83 c5 20             	add    ebp,0x20
c0003a22:	89 c6                	mov    esi,eax
c0003a24:	4b                   	dec    ebx
c0003a25:	eb bf                	jmp    c00039e6 <store_xdir+0x30>
c0003a27:	89 f0                	mov    eax,esi
c0003a29:	83 fe 02             	cmp    esi,0x2
c0003a2c:	76 05                	jbe    c0003a33 <store_xdir+0x7d>
c0003a2e:	b8 02 00 00 00       	mov    eax,0x2
c0003a33:	83 c4 0c             	add    esp,0xc
c0003a36:	5b                   	pop    ebx
c0003a37:	5e                   	pop    esi
c0003a38:	5f                   	pop    edi
c0003a39:	5d                   	pop    ebp
c0003a3a:	c3                   	ret    

c0003a3b <dir_remove>:
c0003a3b:	57                   	push   edi
c0003a3c:	56                   	push   esi
c0003a3d:	53                   	push   ebx
c0003a3e:	89 c3                	mov    ebx,eax
c0003a40:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a43:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a45:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a48:	83 fa ff             	cmp    edx,0xffffffff
c0003a4b:	74 09                	je     c0003a56 <dir_remove+0x1b>
c0003a4d:	e8 60 f5 ff ff       	call   c0002fb2 <dir_sdi>
c0003a52:	85 c0                	test   eax,eax
c0003a54:	75 41                	jne    c0003a97 <dir_remove+0x5c>
c0003a56:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a59:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a5c:	89 f0                	mov    eax,esi
c0003a5e:	e8 d7 e7 ff ff       	call   c000223a <move_window>
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 26                	jne    c0003a8d <dir_remove+0x52>
c0003a67:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a6d:	75 05                	jne    c0003a74 <dir_remove+0x39>
c0003a6f:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a72:	eb 03                	jmp    c0003a77 <dir_remove+0x3c>
c0003a74:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a77:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a7b:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a7e:	73 17                	jae    c0003a97 <dir_remove+0x5c>
c0003a80:	31 d2                	xor    edx,edx
c0003a82:	89 d8                	mov    eax,ebx
c0003a84:	e8 83 fa ff ff       	call   c000350c <dir_next>
c0003a89:	85 c0                	test   eax,eax
c0003a8b:	74 c9                	je     c0003a56 <dir_remove+0x1b>
c0003a8d:	83 f8 04             	cmp    eax,0x4
c0003a90:	75 05                	jne    c0003a97 <dir_remove+0x5c>
c0003a92:	b8 02 00 00 00       	mov    eax,0x2
c0003a97:	5b                   	pop    ebx
c0003a98:	5e                   	pop    esi
c0003a99:	5f                   	pop    edi
c0003a9a:	c3                   	ret    

c0003a9b <create_name>:
c0003a9b:	55                   	push   ebp
c0003a9c:	89 d5                	mov    ebp,edx
c0003a9e:	57                   	push   edi
c0003a9f:	89 c7                	mov    edi,eax
c0003aa1:	56                   	push   esi
c0003aa2:	31 f6                	xor    esi,esi
c0003aa4:	53                   	push   ebx
c0003aa5:	83 ec 3c             	sub    esp,0x3c
c0003aa8:	8b 02                	mov    eax,DWORD PTR [edx]
c0003aaa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aae:	8b 07                	mov    eax,DWORD PTR [edi]
c0003ab0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ab7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003abb:	e8 7d e0 ff ff       	call   c0001b3d <tchar2uni>
c0003ac0:	89 c3                	mov    ebx,eax
c0003ac2:	83 f8 ff             	cmp    eax,0xffffffff
c0003ac5:	75 0a                	jne    c0003ad1 <create_name+0x36>
c0003ac7:	b8 06 00 00 00       	mov    eax,0x6
c0003acc:	e9 83 02 00 00       	jmp    c0003d54 <create_name+0x2b9>
c0003ad1:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ad6:	76 0c                	jbe    c0003ae4 <create_name+0x49>
c0003ad8:	c1 e8 10             	shr    eax,0x10
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ae3:	46                   	inc    esi
c0003ae4:	66 83 fb 1f          	cmp    bx,0x1f
c0003ae8:	89 d8                	mov    eax,ebx
c0003aea:	76 36                	jbe    c0003b22 <create_name+0x87>
c0003aec:	66 83 fb 2f          	cmp    bx,0x2f
c0003af0:	74 30                	je     c0003b22 <create_name+0x87>
c0003af2:	66 83 fb 5c          	cmp    bx,0x5c
c0003af6:	74 39                	je     c0003b31 <create_name+0x96>
c0003af8:	66 83 fb 7f          	cmp    bx,0x7f
c0003afc:	77 11                	ja     c0003b0f <create_name+0x74>
c0003afe:	0f b7 d3             	movzx  edx,bx
c0003b01:	b8 72 05 02 c0       	mov    eax,0xc0020572
c0003b06:	e8 1a e0 ff ff       	call   c0001b25 <chk_chr>
c0003b0b:	85 c0                	test   eax,eax
c0003b0d:	75 b8                	jne    c0003ac7 <create_name+0x2c>
c0003b0f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b15:	77 b0                	ja     c0003ac7 <create_name+0x2c>
c0003b17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1b:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b1f:	46                   	inc    esi
c0003b20:	eb 95                	jmp    c0003ab7 <create_name+0x1c>
c0003b22:	66 83 f8 1f          	cmp    ax,0x1f
c0003b26:	b3 04                	mov    bl,0x4
c0003b28:	76 19                	jbe    c0003b43 <create_name+0xa8>
c0003b2a:	eb 05                	jmp    c0003b31 <create_name+0x96>
c0003b2c:	40                   	inc    eax
c0003b2d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b35:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b37:	80 fa 2f             	cmp    dl,0x2f
c0003b3a:	74 f0                	je     c0003b2c <create_name+0x91>
c0003b3c:	80 fa 5c             	cmp    dl,0x5c
c0003b3f:	74 eb                	je     c0003b2c <create_name+0x91>
c0003b41:	31 db                	xor    ebx,ebx
c0003b43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b47:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b4a:	85 f6                	test   esi,esi
c0003b4c:	74 18                	je     c0003b66 <create_name+0xcb>
c0003b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b52:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b57:	66 83 f8 20          	cmp    ax,0x20
c0003b5b:	74 06                	je     c0003b63 <create_name+0xc8>
c0003b5d:	66 83 f8 2e          	cmp    ax,0x2e
c0003b61:	75 03                	jne    c0003b66 <create_name+0xcb>
c0003b63:	4e                   	dec    esi
c0003b64:	eb e4                	jmp    c0003b4a <create_name+0xaf>
c0003b66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b6a:	31 ed                	xor    ebp,ebp
c0003b6c:	85 f6                	test   esi,esi
c0003b6e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b74:	0f 84 4d ff ff ff    	je     c0003ac7 <create_name+0x2c>
c0003b7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b7e:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b81:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b85:	66 83 f8 20          	cmp    ax,0x20
c0003b89:	75 04                	jne    c0003b8f <create_name+0xf4>
c0003b8b:	89 d5                	mov    ebp,edx
c0003b8d:	eb eb                	jmp    c0003b7a <create_name+0xdf>
c0003b8f:	85 ed                	test   ebp,ebp
c0003b91:	75 06                	jne    c0003b99 <create_name+0xfe>
c0003b93:	66 83 f8 2e          	cmp    ax,0x2e
c0003b97:	75 08                	jne    c0003ba1 <create_name+0x106>
c0003b99:	83 cb 03             	or     ebx,0x3
c0003b9c:	eb 03                	jmp    c0003ba1 <create_name+0x106>
c0003b9e:	4e                   	dec    esi
c0003b9f:	74 0c                	je     c0003bad <create_name+0x112>
c0003ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ba5:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003bab:	75 f1                	jne    c0003b9e <create_name+0x103>
c0003bad:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bb2:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003bb5:	ba 20 00 00 00       	mov    edx,0x20
c0003bba:	e8 38 df ff ff       	call   c0001af7 <mem_set>
c0003bbf:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003bc7:	31 c9                	xor    ecx,ecx
c0003bc9:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bce:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd9:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bdd:	66 85 ed             	test   bp,bp
c0003be0:	0f 84 1f 01 00 00    	je     c0003d05 <create_name+0x26a>
c0003be6:	66 83 fd 20          	cmp    bp,0x20
c0003bea:	74 0c                	je     c0003bf8 <create_name+0x15d>
c0003bec:	66 83 fd 2e          	cmp    bp,0x2e
c0003bf0:	75 0f                	jne    c0003c01 <create_name+0x166>
c0003bf2:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bf6:	74 09                	je     c0003c01 <create_name+0x166>
c0003bf8:	83 cb 03             	or     ebx,0x3
c0003bfb:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003bff:	eb cd                	jmp    c0003bce <create_name+0x133>
c0003c01:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003c05:	73 06                	jae    c0003c0d <create_name+0x172>
c0003c07:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c0b:	75 3a                	jne    c0003c47 <create_name+0x1ac>
c0003c0d:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003c12:	75 08                	jne    c0003c1c <create_name+0x181>
c0003c14:	83 cb 03             	or     ebx,0x3
c0003c17:	e9 e9 00 00 00       	jmp    c0003d05 <create_name+0x26a>
c0003c1c:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c20:	74 0d                	je     c0003c2f <create_name+0x194>
c0003c22:	83 cb 03             	or     ebx,0x3
c0003c25:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c29:	0f 87 d6 00 00 00    	ja     c0003d05 <create_name+0x26a>
c0003c2f:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c34:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c38:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c40:	b9 08 00 00 00       	mov    ecx,0x8
c0003c45:	eb b4                	jmp    c0003bfb <create_name+0x160>
c0003c47:	66 83 fd 7f          	cmp    bp,0x7f
c0003c4b:	76 68                	jbe    c0003cb5 <create_name+0x21a>
c0003c4d:	88 da                	mov    dl,bl
c0003c4f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c53:	83 ca 02             	or     edx,0x2
c0003c56:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c5a:	50                   	push   eax
c0003c5b:	50                   	push   eax
c0003c5c:	68 b5 01 00 00       	push   0x1b5
c0003c61:	55                   	push   ebp
c0003c62:	e8 0f 46 00 00       	call   c0008276 <ff_uni2oem>
c0003c67:	83 c4 10             	add    esp,0x10
c0003c6a:	89 c5                	mov    ebp,eax
c0003c6c:	a8 80                	test   al,0x80
c0003c6e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c72:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c76:	74 0c                	je     c0003c84 <create_name+0x1e9>
c0003c78:	83 e5 7f             	and    ebp,0x7f
c0003c7b:	0f b6 ad c0 04 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfb40]
c0003c82:	eb 2a                	jmp    c0003cae <create_name+0x213>
c0003c84:	66 3d ff 00          	cmp    ax,0xff
c0003c88:	76 24                	jbe    c0003cae <create_name+0x213>
c0003c8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c8e:	48                   	dec    eax
c0003c8f:	39 c8                	cmp    eax,ecx
c0003c91:	77 0c                	ja     c0003c9f <create_name+0x204>
c0003c93:	83 cb 03             	or     ebx,0x3
c0003c96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c9a:	e9 5c ff ff ff       	jmp    c0003bfb <create_name+0x160>
c0003c9f:	89 e8                	mov    eax,ebp
c0003ca1:	88 d3                	mov    bl,dl
c0003ca3:	66 c1 e8 08          	shr    ax,0x8
c0003ca7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cab:	41                   	inc    ecx
c0003cac:	eb 4b                	jmp    c0003cf9 <create_name+0x25e>
c0003cae:	66 85 ed             	test   bp,bp
c0003cb1:	88 d3                	mov    bl,dl
c0003cb3:	74 19                	je     c0003cce <create_name+0x233>
c0003cb5:	0f b7 d5             	movzx  edx,bp
c0003cb8:	b8 7b 05 02 c0       	mov    eax,0xc002057b
c0003cbd:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cc1:	e8 5f de ff ff       	call   c0001b25 <chk_chr>
c0003cc6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cca:	85 c0                	test   eax,eax
c0003ccc:	74 0a                	je     c0003cd8 <create_name+0x23d>
c0003cce:	83 cb 03             	or     ebx,0x3
c0003cd1:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd6:	eb 21                	jmp    c0003cf9 <create_name+0x25e>
c0003cd8:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cdb:	66 83 f8 19          	cmp    ax,0x19
c0003cdf:	77 07                	ja     c0003ce8 <create_name+0x24d>
c0003ce1:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003ce6:	eb 11                	jmp    c0003cf9 <create_name+0x25e>
c0003ce8:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ceb:	66 83 f8 19          	cmp    ax,0x19
c0003cef:	77 08                	ja     c0003cf9 <create_name+0x25e>
c0003cf1:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cf6:	83 ed 20             	sub    ebp,0x20
c0003cf9:	89 e8                	mov    eax,ebp
c0003cfb:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cff:	41                   	inc    ecx
c0003d00:	e9 f6 fe ff ff       	jmp    c0003bfb <create_name+0x160>
c0003d05:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d09:	75 04                	jne    c0003d0f <create_name+0x274>
c0003d0b:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d0f:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003d14:	75 05                	jne    c0003d1b <create_name+0x280>
c0003d16:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003d1b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d1f:	83 e0 0c             	and    eax,0xc
c0003d22:	3c 0c                	cmp    al,0xc
c0003d24:	74 0b                	je     c0003d31 <create_name+0x296>
c0003d26:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d2a:	83 e0 03             	and    eax,0x3
c0003d2d:	3c 03                	cmp    al,0x3
c0003d2f:	75 05                	jne    c0003d36 <create_name+0x29b>
c0003d31:	83 cb 02             	or     ebx,0x2
c0003d34:	eb 19                	jmp    c0003d4f <create_name+0x2b4>
c0003d36:	f6 c3 02             	test   bl,0x2
c0003d39:	75 14                	jne    c0003d4f <create_name+0x2b4>
c0003d3b:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d40:	74 03                	je     c0003d45 <create_name+0x2aa>
c0003d42:	83 cb 10             	or     ebx,0x10
c0003d45:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d4a:	74 03                	je     c0003d4f <create_name+0x2b4>
c0003d4c:	83 cb 08             	or     ebx,0x8
c0003d4f:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d52:	31 c0                	xor    eax,eax
c0003d54:	83 c4 3c             	add    esp,0x3c
c0003d57:	5b                   	pop    ebx
c0003d58:	5e                   	pop    esi
c0003d59:	5f                   	pop    edi
c0003d5a:	5d                   	pop    ebp
c0003d5b:	c3                   	ret    

c0003d5c <xname_sum>:
c0003d5c:	56                   	push   esi
c0003d5d:	89 c6                	mov    esi,eax
c0003d5f:	53                   	push   ebx
c0003d60:	31 db                	xor    ebx,ebx
c0003d62:	51                   	push   ecx
c0003d63:	83 c6 02             	add    esi,0x2
c0003d66:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d6a:	66 85 c0             	test   ax,ax
c0003d6d:	74 1f                	je     c0003d8e <xname_sum+0x32>
c0003d6f:	66 d1 cb             	ror    bx,1
c0003d72:	83 ec 0c             	sub    esp,0xc
c0003d75:	50                   	push   eax
c0003d76:	e8 00 46 00 00       	call   c000837b <ff_wtoupper>
c0003d7b:	0f b6 d0             	movzx  edx,al
c0003d7e:	01 d3                	add    ebx,edx
c0003d80:	83 c4 10             	add    esp,0x10
c0003d83:	66 c1 e8 08          	shr    ax,0x8
c0003d87:	66 d1 cb             	ror    bx,1
c0003d8a:	01 c3                	add    ebx,eax
c0003d8c:	eb d5                	jmp    c0003d63 <xname_sum+0x7>
c0003d8e:	5a                   	pop    edx
c0003d8f:	89 d8                	mov    eax,ebx
c0003d91:	5b                   	pop    ebx
c0003d92:	5e                   	pop    esi
c0003d93:	c3                   	ret    

c0003d94 <create_xdir>:
c0003d94:	55                   	push   ebp
c0003d95:	b9 40 00 00 00       	mov    ecx,0x40
c0003d9a:	57                   	push   edi
c0003d9b:	bd 01 00 00 00       	mov    ebp,0x1
c0003da0:	56                   	push   esi
c0003da1:	31 ff                	xor    edi,edi
c0003da3:	53                   	push   ebx
c0003da4:	89 c3                	mov    ebx,eax
c0003da6:	83 ec 1c             	sub    esp,0x1c
c0003da9:	be 40 00 00 00       	mov    esi,0x40
c0003dae:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003db2:	31 d2                	xor    edx,edx
c0003db4:	e8 3e dd ff ff       	call   c0001af7 <mem_set>
c0003db9:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dbc:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dc0:	31 c9                	xor    ecx,ecx
c0003dc2:	8d 46 01             	lea    eax,[esi+0x1]
c0003dc5:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dc9:	83 c6 02             	add    esi,0x2
c0003dcc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dd0:	66 85 ed             	test   bp,bp
c0003dd3:	74 12                	je     c0003de7 <create_xdir+0x53>
c0003dd5:	0f b6 c1             	movzx  eax,cl
c0003dd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ddc:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003de0:	66 83 fd 01          	cmp    bp,0x1
c0003de4:	80 d9 ff             	sbb    cl,0xff
c0003de7:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dea:	83 c6 02             	add    esi,0x2
c0003ded:	0f b7 d5             	movzx  edx,bp
c0003df0:	e8 e0 dc ff ff       	call   c0001ad5 <st_word>
c0003df5:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dfb:	75 d3                	jne    c0003dd0 <create_xdir+0x3c>
c0003dfd:	8d 47 01             	lea    eax,[edi+0x1]
c0003e00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e04:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e08:	0f b6 c1             	movzx  eax,cl
c0003e0b:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e10:	74 07                	je     c0003e19 <create_xdir+0x85>
c0003e12:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e17:	eb a9                	jmp    c0003dc2 <create_xdir+0x2e>
c0003e19:	8d 47 02             	lea    eax,[edi+0x2]
c0003e1c:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e1f:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e22:	89 d0                	mov    eax,edx
c0003e24:	e8 33 ff ff ff       	call   c0003d5c <xname_sum>
c0003e29:	83 c4 1c             	add    esp,0x1c
c0003e2c:	0f b7 d0             	movzx  edx,ax
c0003e2f:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e32:	5b                   	pop    ebx
c0003e33:	5e                   	pop    esi
c0003e34:	5f                   	pop    edi
c0003e35:	5d                   	pop    ebp
c0003e36:	e9 9a dc ff ff       	jmp    c0001ad5 <st_word>

c0003e3b <cmp_lfn>:
c0003e3b:	55                   	push   ebp
c0003e3c:	57                   	push   edi
c0003e3d:	89 d7                	mov    edi,edx
c0003e3f:	56                   	push   esi
c0003e40:	53                   	push   ebx
c0003e41:	83 ec 1c             	sub    esp,0x1c
c0003e44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e48:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e4b:	e8 13 dc ff ff       	call   c0001a63 <ld_word>
c0003e50:	66 85 c0             	test   ax,ax
c0003e53:	74 07                	je     c0003e5c <cmp_lfn+0x21>
c0003e55:	31 c0                	xor    eax,eax
c0003e57:	e9 9a 00 00 00       	jmp    c0003ef6 <cmp_lfn+0xbb>
c0003e5c:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e5e:	bd 01 00 00 00       	mov    ebp,0x1
c0003e63:	83 e3 3f             	and    ebx,0x3f
c0003e66:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e6e:	4b                   	dec    ebx
c0003e6f:	6b db 0d             	imul   ebx,ebx,0xd
c0003e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e76:	0f b6 80 40 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfac0]
c0003e7d:	01 f8                	add    eax,edi
c0003e7f:	e8 df db ff ff       	call   c0001a63 <ld_word>
c0003e84:	66 85 ed             	test   bp,bp
c0003e87:	89 c6                	mov    esi,eax
c0003e89:	74 3c                	je     c0003ec7 <cmp_lfn+0x8c>
c0003e8b:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e91:	77 c2                	ja     c0003e55 <cmp_lfn+0x1a>
c0003e93:	83 ec 0c             	sub    esp,0xc
c0003e96:	0f b7 c0             	movzx  eax,ax
c0003e99:	50                   	push   eax
c0003e9a:	e8 dc 44 00 00       	call   c000837b <ff_wtoupper>
c0003e9f:	89 c5                	mov    ebp,eax
c0003ea1:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ea4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ea8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eac:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003eb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eb3:	e8 c3 44 00 00       	call   c000837b <ff_wtoupper>
c0003eb8:	83 c4 10             	add    esp,0x10
c0003ebb:	39 c5                	cmp    ebp,eax
c0003ebd:	75 96                	jne    c0003e55 <cmp_lfn+0x1a>
c0003ebf:	89 f5                	mov    ebp,esi
c0003ec1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ec5:	eb 04                	jmp    c0003ecb <cmp_lfn+0x90>
c0003ec7:	66 46                	inc    si
c0003ec9:	75 8a                	jne    c0003e55 <cmp_lfn+0x1a>
c0003ecb:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ecf:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ed4:	75 9c                	jne    c0003e72 <cmp_lfn+0x37>
c0003ed6:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ed9:	74 16                	je     c0003ef1 <cmp_lfn+0xb6>
c0003edb:	66 85 ed             	test   bp,bp
c0003ede:	74 11                	je     c0003ef1 <cmp_lfn+0xb6>
c0003ee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ee4:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ee9:	0f 94 c0             	sete   al
c0003eec:	0f b6 c0             	movzx  eax,al
c0003eef:	eb 05                	jmp    c0003ef6 <cmp_lfn+0xbb>
c0003ef1:	b8 01 00 00 00       	mov    eax,0x1
c0003ef6:	83 c4 1c             	add    esp,0x1c
c0003ef9:	5b                   	pop    ebx
c0003efa:	5e                   	pop    esi
c0003efb:	5f                   	pop    edi
c0003efc:	5d                   	pop    ebp
c0003efd:	c3                   	ret    

c0003efe <dir_find>:
c0003efe:	55                   	push   ebp
c0003eff:	31 d2                	xor    edx,edx
c0003f01:	57                   	push   edi
c0003f02:	56                   	push   esi
c0003f03:	53                   	push   ebx
c0003f04:	89 c3                	mov    ebx,eax
c0003f06:	83 ec 1c             	sub    esp,0x1c
c0003f09:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f0b:	e8 a2 f0 ff ff       	call   c0002fb2 <dir_sdi>
c0003f10:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f13:	85 c0                	test   eax,eax
c0003f15:	0f 85 9f 01 00 00    	jne    c00040ba <dir_find+0x1bc>
c0003f1b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f1e:	0f 85 8e 00 00 00    	jne    c0003fb2 <dir_find+0xb4>
c0003f24:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f27:	e8 30 fe ff ff       	call   c0003d5c <xname_sum>
c0003f2c:	89 c5                	mov    ebp,eax
c0003f2e:	31 d2                	xor    edx,edx
c0003f30:	89 d8                	mov    eax,ebx
c0003f32:	e8 8d f8 ff ff       	call   c00037c4 <dir_read>
c0003f37:	85 c0                	test   eax,eax
c0003f39:	0f 85 5f 01 00 00    	jne    c000409e <dir_find+0x1a0>
c0003f3f:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f42:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f45:	e8 19 db ff ff       	call   c0001a63 <ld_word>
c0003f4a:	66 39 e8             	cmp    ax,bp
c0003f4d:	75 df                	jne    c0003f2e <dir_find+0x30>
c0003f4f:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f53:	31 ff                	xor    edi,edi
c0003f55:	ba 40 00 00 00       	mov    edx,0x40
c0003f5a:	39 f9                	cmp    ecx,edi
c0003f5c:	0f 84 4a 01 00 00    	je     c00040ac <dir_find+0x1ae>
c0003f62:	f6 c2 1f             	test   dl,0x1f
c0003f65:	75 03                	jne    c0003f6a <dir_find+0x6c>
c0003f67:	83 c2 02             	add    edx,0x2
c0003f6a:	89 d0                	mov    eax,edx
c0003f6c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f70:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f73:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f77:	e8 e7 da ff ff       	call   c0001a63 <ld_word>
c0003f7c:	83 ec 0c             	sub    esp,0xc
c0003f7f:	0f b7 c0             	movzx  eax,ax
c0003f82:	50                   	push   eax
c0003f83:	e8 f3 43 00 00       	call   c000837b <ff_wtoupper>
c0003f88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f8c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f8f:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f93:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f96:	e8 e0 43 00 00       	call   c000837b <ff_wtoupper>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fa2:	75 8a                	jne    c0003f2e <dir_find+0x30>
c0003fa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fa8:	47                   	inc    edi
c0003fa9:	83 c2 02             	add    edx,0x2
c0003fac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fb0:	eb a8                	jmp    c0003f5a <dir_find+0x5c>
c0003fb2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fb9:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fbe:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fc3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fc6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fc9:	89 f0                	mov    eax,esi
c0003fcb:	e8 6a e2 ff ff       	call   c000223a <move_window>
c0003fd0:	85 c0                	test   eax,eax
c0003fd2:	0f 85 c6 00 00 00    	jne    c000409e <dir_find+0x1a0>
c0003fd8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fdb:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fde:	84 c9                	test   cl,cl
c0003fe0:	0f 84 bd 00 00 00    	je     c00040a3 <dir_find+0x1a5>
c0003fe6:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fe9:	88 d0                	mov    al,dl
c0003feb:	83 e0 3f             	and    eax,0x3f
c0003fee:	80 f9 e5             	cmp    cl,0xe5
c0003ff1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ff4:	0f 84 87 00 00 00    	je     c0004081 <dir_find+0x183>
c0003ffa:	80 e2 08             	and    dl,0x8
c0003ffd:	74 06                	je     c0004005 <dir_find+0x107>
c0003fff:	3c 0f                	cmp    al,0xf
c0004001:	75 7e                	jne    c0004081 <dir_find+0x183>
c0004003:	eb 04                	jmp    c0004009 <dir_find+0x10b>
c0004005:	3c 0f                	cmp    al,0xf
c0004007:	75 4c                	jne    c0004055 <dir_find+0x157>
c0004009:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000400d:	75 7e                	jne    c000408d <dir_find+0x18f>
c000400f:	f6 c1 40             	test   cl,0x40
c0004012:	74 12                	je     c0004026 <dir_find+0x128>
c0004014:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004017:	83 e1 bf             	and    ecx,0xffffffbf
c000401a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000401e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004021:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004024:	eb 06                	jmp    c000402c <dir_find+0x12e>
c0004026:	89 f8                	mov    eax,edi
c0004028:	38 c8                	cmp    al,cl
c000402a:	75 5c                	jne    c0004088 <dir_find+0x18a>
c000402c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004030:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004035:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004038:	75 53                	jne    c000408d <dir_find+0x18f>
c000403a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000403d:	89 ea                	mov    edx,ebp
c000403f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0004043:	e8 f3 fd ff ff       	call   c0003e3b <cmp_lfn>
c0004048:	85 c0                	test   eax,eax
c000404a:	74 41                	je     c000408d <dir_find+0x18f>
c000404c:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0004050:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004053:	eb 38                	jmp    c000408d <dir_find+0x18f>
c0004055:	89 f8                	mov    eax,edi
c0004057:	84 c0                	test   al,al
c0004059:	75 0d                	jne    c0004068 <dir_find+0x16a>
c000405b:	89 e8                	mov    eax,ebp
c000405d:	e8 bd de ff ff       	call   c0001f1f <sum_sfn>
c0004062:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004066:	74 52                	je     c00040ba <dir_find+0x1bc>
c0004068:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000406c:	75 13                	jne    c0004081 <dir_find+0x183>
c000406e:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004071:	b9 0b 00 00 00       	mov    ecx,0xb
c0004076:	89 e8                	mov    eax,ebp
c0004078:	e8 85 da ff ff       	call   c0001b02 <mem_cmp>
c000407d:	85 c0                	test   eax,eax
c000407f:	74 39                	je     c00040ba <dir_find+0x1bc>
c0004081:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004088:	bf ff ff ff ff       	mov    edi,0xffffffff
c000408d:	31 d2                	xor    edx,edx
c000408f:	89 d8                	mov    eax,ebx
c0004091:	e8 76 f4 ff ff       	call   c000350c <dir_next>
c0004096:	85 c0                	test   eax,eax
c0004098:	0f 84 25 ff ff ff    	je     c0003fc3 <dir_find+0xc5>
c000409e:	89 04 24             	mov    DWORD PTR [esp],eax
c00040a1:	eb 17                	jmp    c00040ba <dir_find+0x1bc>
c00040a3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040aa:	eb 0e                	jmp    c00040ba <dir_find+0x1bc>
c00040ac:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040af:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c00040b4:	0f 85 74 fe ff ff    	jne    c0003f2e <dir_find+0x30>
c00040ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040bd:	83 c4 1c             	add    esp,0x1c
c00040c0:	5b                   	pop    ebx
c00040c1:	5e                   	pop    esi
c00040c2:	5f                   	pop    edi
c00040c3:	5d                   	pop    ebp
c00040c4:	c3                   	ret    

c00040c5 <dir_register>:
c00040c5:	55                   	push   ebp
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	be 06 00 00 00       	mov    esi,0x6
c00040cd:	53                   	push   ebx
c00040ce:	83 ec 6c             	sub    esp,0x6c
c00040d1:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040d5:	0f 85 63 02 00 00    	jne    c000433e <dir_register+0x279>
c00040db:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040dd:	31 ff                	xor    edi,edi
c00040df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040e2:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040e7:	74 03                	je     c00040ec <dir_register+0x27>
c00040e9:	47                   	inc    edi
c00040ea:	eb f6                	jmp    c00040e2 <dir_register+0x1d>
c00040ec:	89 c3                	mov    ebx,eax
c00040ee:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040f2:	0f 85 e1 00 00 00    	jne    c00041d9 <dir_register+0x114>
c00040f8:	83 c7 0e             	add    edi,0xe
c00040fb:	b9 0f 00 00 00       	mov    ecx,0xf
c0004100:	89 f8                	mov    eax,edi
c0004102:	31 d2                	xor    edx,edx
c0004104:	f7 f1                	div    ecx
c0004106:	89 c7                	mov    edi,eax
c0004108:	8d 50 02             	lea    edx,[eax+0x2]
c000410b:	89 d8                	mov    eax,ebx
c000410d:	e8 2c f8 ff ff       	call   c000393e <dir_alloc>
c0004112:	89 c6                	mov    esi,eax
c0004114:	85 c0                	test   eax,eax
c0004116:	0f 85 22 02 00 00    	jne    c000433e <dir_register+0x279>
c000411c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004122:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004125:	c1 e7 05             	shl    edi,0x5
c0004128:	29 f8                	sub    eax,edi
c000412a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000412d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004130:	a8 04                	test   al,0x4
c0004132:	0f 84 91 00 00 00    	je     c00041c9 <dir_register+0x104>
c0004138:	83 e0 fb             	and    eax,0xfffffffb
c000413b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000413e:	89 d8                	mov    eax,ebx
c0004140:	e8 3d ec ff ff       	call   c0002d82 <fill_first_frag>
c0004145:	85 c0                	test   eax,eax
c0004147:	0f 85 ef 01 00 00    	jne    c000433c <dir_register+0x277>
c000414d:	83 c9 ff             	or     ecx,0xffffffff
c0004150:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004153:	89 d8                	mov    eax,ebx
c0004155:	e8 f3 eb ff ff       	call   c0002d4d <fill_last_frag>
c000415a:	85 c0                	test   eax,eax
c000415c:	0f 85 da 01 00 00    	jne    c000433c <dir_register+0x277>
c0004162:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004166:	74 61                	je     c00041c9 <dir_register+0x104>
c0004168:	89 da                	mov    edx,ebx
c000416a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000416e:	e8 04 f6 ff ff       	call   c0003777 <load_obj_xdir>
c0004173:	85 c0                	test   eax,eax
c0004175:	0f 85 c1 01 00 00    	jne    c000433c <dir_register+0x277>
c000417b:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000417f:	c1 e2 09             	shl    edx,0x9
c0004182:	31 c9                	xor    ecx,ecx
c0004184:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004187:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000418a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000418d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004190:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004193:	83 c0 38             	add    eax,0x38
c0004196:	e8 41 d9 ff ff       	call   c0001adc <st_qword>
c000419b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000419e:	83 c0 28             	add    eax,0x28
c00041a1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041a4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041a7:	e8 30 d9 ff ff       	call   c0001adc <st_qword>
c00041ac:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041af:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041b2:	83 c8 01             	or     eax,0x1
c00041b5:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041bc:	e8 f5 f7 ff ff       	call   c00039b6 <store_xdir>
c00041c1:	85 c0                	test   eax,eax
c00041c3:	0f 85 73 01 00 00    	jne    c000433c <dir_register+0x277>
c00041c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041cf:	e8 c0 fb ff ff       	call   c0003d94 <create_xdir>
c00041d4:	e9 65 01 00 00       	jmp    c000433e <dir_register+0x279>
c00041d9:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041dc:	b9 0c 00 00 00       	mov    ecx,0xc
c00041e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041e5:	89 c2                	mov    edx,eax
c00041e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041eb:	e8 f2 d8 ff ff       	call   c0001ae2 <mem_cpy>
c00041f0:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041f5:	74 58                	je     c000424f <dir_register+0x18a>
c00041f7:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041fb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004203:	83 ec 0c             	sub    esp,0xc
c0004206:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004209:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000420d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004211:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004215:	e8 49 dc ff ff       	call   c0001e63 <gen_numname>
c000421a:	89 d8                	mov    eax,ebx
c000421c:	e8 dd fc ff ff       	call   c0003efe <dir_find>
c0004221:	83 c4 10             	add    esp,0x10
c0004224:	89 c6                	mov    esi,eax
c0004226:	85 c0                	test   eax,eax
c0004228:	75 15                	jne    c000423f <dir_register+0x17a>
c000422a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000422e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004233:	75 ce                	jne    c0004203 <dir_register+0x13e>
c0004235:	be 07 00 00 00       	mov    esi,0x7
c000423a:	e9 ff 00 00 00       	jmp    c000433e <dir_register+0x279>
c000423f:	83 f8 04             	cmp    eax,0x4
c0004242:	0f 85 f6 00 00 00    	jne    c000433e <dir_register+0x279>
c0004248:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000424c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000424f:	b9 01 00 00 00       	mov    ecx,0x1
c0004254:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004259:	74 0f                	je     c000426a <dir_register+0x1a5>
c000425b:	b9 0d 00 00 00       	mov    ecx,0xd
c0004260:	8d 47 0c             	lea    eax,[edi+0xc]
c0004263:	31 d2                	xor    edx,edx
c0004265:	f7 f1                	div    ecx
c0004267:	8d 48 01             	lea    ecx,[eax+0x1]
c000426a:	89 ca                	mov    edx,ecx
c000426c:	89 d8                	mov    eax,ebx
c000426e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004272:	e8 c7 f6 ff ff       	call   c000393e <dir_alloc>
c0004277:	89 c6                	mov    esi,eax
c0004279:	85 c0                	test   eax,eax
c000427b:	0f 85 bd 00 00 00    	jne    c000433e <dir_register+0x279>
c0004281:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004285:	89 cf                	mov    edi,ecx
c0004287:	4f                   	dec    edi
c0004288:	74 6d                	je     c00042f7 <dir_register+0x232>
c000428a:	89 f8                	mov    eax,edi
c000428c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000428f:	c1 e0 05             	shl    eax,0x5
c0004292:	29 c2                	sub    edx,eax
c0004294:	89 d8                	mov    eax,ebx
c0004296:	e8 17 ed ff ff       	call   c0002fb2 <dir_sdi>
c000429b:	89 c6                	mov    esi,eax
c000429d:	85 c0                	test   eax,eax
c000429f:	0f 85 99 00 00 00    	jne    c000433e <dir_register+0x279>
c00042a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042a9:	e8 71 dc ff ff       	call   c0001f1f <sum_sfn>
c00042ae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00042b2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042b5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042b8:	89 e8                	mov    eax,ebp
c00042ba:	e8 7b df ff ff       	call   c000223a <move_window>
c00042bf:	89 c6                	mov    esi,eax
c00042c1:	85 c0                	test   eax,eax
c00042c3:	75 79                	jne    c000433e <dir_register+0x279>
c00042c5:	83 ec 0c             	sub    esp,0xc
c00042c8:	89 f8                	mov    eax,edi
c00042ca:	0f b6 c8             	movzx  ecx,al
c00042cd:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042d5:	52                   	push   edx
c00042d6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042d9:	e8 01 db ff ff       	call   c0001ddf <put_lfn>
c00042de:	31 d2                	xor    edx,edx
c00042e0:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042e4:	89 d8                	mov    eax,ebx
c00042e6:	e8 21 f2 ff ff       	call   c000350c <dir_next>
c00042eb:	83 c4 10             	add    esp,0x10
c00042ee:	89 c6                	mov    esi,eax
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 4a                	jne    c000433e <dir_register+0x279>
c00042f4:	4f                   	dec    edi
c00042f5:	75 bb                	jne    c00042b2 <dir_register+0x1ed>
c00042f7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042fa:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042fd:	89 e8                	mov    eax,ebp
c00042ff:	e8 36 df ff ff       	call   c000223a <move_window>
c0004304:	89 c6                	mov    esi,eax
c0004306:	85 c0                	test   eax,eax
c0004308:	75 34                	jne    c000433e <dir_register+0x279>
c000430a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000430d:	b9 20 00 00 00       	mov    ecx,0x20
c0004312:	31 d2                	xor    edx,edx
c0004314:	e8 de d7 ff ff       	call   c0001af7 <mem_set>
c0004319:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000431c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004320:	b9 0b 00 00 00       	mov    ecx,0xb
c0004325:	e8 b8 d7 ff ff       	call   c0001ae2 <mem_cpy>
c000432a:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000432d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004330:	83 e0 18             	and    eax,0x18
c0004333:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004336:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000433a:	eb 02                	jmp    c000433e <dir_register+0x279>
c000433c:	89 c6                	mov    esi,eax
c000433e:	83 c4 6c             	add    esp,0x6c
c0004341:	89 f0                	mov    eax,esi
c0004343:	5b                   	pop    ebx
c0004344:	5e                   	pop    esi
c0004345:	5f                   	pop    edi
c0004346:	5d                   	pop    ebp
c0004347:	c3                   	ret    

c0004348 <sync_fs>:
c0004348:	56                   	push   esi
c0004349:	53                   	push   ebx
c000434a:	53                   	push   ebx
c000434b:	89 c3                	mov    ebx,eax
c000434d:	e8 54 de ff ff       	call   c00021a6 <sync_window>
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 85 b1 00 00 00    	jne    c000440b <sync_fs+0xc3>
c000435a:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000435d:	0f 85 8e 00 00 00    	jne    c00043f1 <sync_fs+0xa9>
c0004363:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004367:	0f 85 84 00 00 00    	jne    c00043f1 <sync_fs+0xa9>
c000436d:	8d 73 54             	lea    esi,[ebx+0x54]
c0004370:	b9 00 02 00 00       	mov    ecx,0x200
c0004375:	31 d2                	xor    edx,edx
c0004377:	89 f0                	mov    eax,esi
c0004379:	e8 79 d7 ff ff       	call   c0001af7 <mem_set>
c000437e:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004384:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004389:	e8 47 d7 ff ff       	call   c0001ad5 <st_word>
c000438e:	ba 52 52 61 41       	mov    edx,0x41615252
c0004393:	89 f0                	mov    eax,esi
c0004395:	e8 3f d7 ff ff       	call   c0001ad9 <st_dword>
c000439a:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043a0:	ba 72 72 41 61       	mov    edx,0x61417272
c00043a5:	e8 2f d7 ff ff       	call   c0001ad9 <st_dword>
c00043aa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043ad:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043b3:	e8 21 d7 ff ff       	call   c0001ad9 <st_dword>
c00043b8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043bb:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043c1:	e8 13 d7 ff ff       	call   c0001ad9 <st_dword>
c00043c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043c9:	83 c0 01             	add    eax,0x1
c00043cc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043cf:	83 d2 00             	adc    edx,0x0
c00043d2:	83 ec 0c             	sub    esp,0xc
c00043d5:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043d8:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043db:	6a 01                	push   0x1
c00043dd:	52                   	push   edx
c00043de:	50                   	push   eax
c00043df:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043e3:	56                   	push   esi
c00043e4:	50                   	push   eax
c00043e5:	e8 44 d6 ff ff       	call   c0001a2e <disk_write>
c00043ea:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043ee:	83 c4 20             	add    esp,0x20
c00043f1:	51                   	push   ecx
c00043f2:	6a 00                	push   0x0
c00043f4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043f8:	6a 00                	push   0x0
c00043fa:	50                   	push   eax
c00043fb:	e8 44 d6 ff ff       	call   c0001a44 <disk_ioctl>
c0004400:	83 c4 10             	add    esp,0x10
c0004403:	85 c0                	test   eax,eax
c0004405:	0f 95 c0             	setne  al
c0004408:	0f b6 c0             	movzx  eax,al
c000440b:	5a                   	pop    edx
c000440c:	5b                   	pop    ebx
c000440d:	5e                   	pop    esi
c000440e:	c3                   	ret    

c000440f <create_partition>:
c000440f:	55                   	push   ebp
c0004410:	57                   	push   edi
c0004411:	56                   	push   esi
c0004412:	53                   	push   ebx
c0004413:	83 ec 60             	sub    esp,0x60
c0004416:	0f b6 c0             	movzx  eax,al
c0004419:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000441d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004421:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004425:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0004429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000442d:	50                   	push   eax
c000442e:	6a 01                	push   0x1
c0004430:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004434:	e8 0b d6 ff ff       	call   c0001a44 <disk_ioctl>
c0004439:	83 c4 10             	add    esp,0x10
c000443c:	85 c0                	test   eax,eax
c000443e:	74 0a                	je     c000444a <create_partition+0x3b>
c0004440:	b8 01 00 00 00       	mov    eax,0x1
c0004445:	e9 73 05 00 00       	jmp    c00049bd <create_partition+0x5ae>
c000444a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000444e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004452:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004456:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000445a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000445f:	0f 86 ed 03 00 00    	jbe    c0004852 <create_partition+0x443>
c0004465:	83 c0 df             	add    eax,0xffffffdf
c0004468:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004470:	83 d2 ff             	adc    edx,0xffffffff
c0004473:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004477:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000447b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000447f:	83 c0 bd             	add    eax,0xffffffbd
c0004482:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004486:	83 d2 ff             	adc    edx,0xffffffff
c0004489:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000448d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004491:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004498:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044a0:	be 22 00 00 00       	mov    esi,0x22
c00044a5:	31 ff                	xor    edi,edi
c00044a7:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044af:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044b7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044bf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044c3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044c9:	75 0e                	jne    c00044d9 <create_partition+0xca>
c00044cb:	b9 00 02 00 00       	mov    ecx,0x200
c00044d0:	31 d2                	xor    edx,edx
c00044d2:	89 d8                	mov    eax,ebx
c00044d4:	e8 1e d6 ff ff       	call   c0001af7 <mem_set>
c00044d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044dd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044e5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044e8:	0f 84 23 01 00 00    	je     c0004611 <create_partition+0x202>
c00044ee:	89 f0                	mov    eax,esi
c00044f0:	89 fa                	mov    edx,edi
c00044f2:	05 ff 07 00 00       	add    eax,0x7ff
c00044f7:	83 d2 00             	adc    edx,0x0
c00044fa:	89 c1                	mov    ecx,eax
c00044fc:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004502:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004506:	89 ce                	mov    esi,ecx
c0004508:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000450c:	89 d7                	mov    edi,edx
c000450e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004512:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004516:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004519:	89 04 24             	mov    DWORD PTR [esp],eax
c000451c:	b8 64 00 00 00       	mov    eax,0x64
c0004521:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004528:	b8 00 00 00 00       	mov    eax,0x0
c000452d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004531:	72 41                	jb     c0004574 <create_partition+0x165>
c0004533:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000453b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004540:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004544:	01 c1                	add    ecx,eax
c0004546:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000454a:	f7 24 24             	mul    DWORD PTR [esp]
c000454d:	6a 00                	push   0x0
c000454f:	01 ca                	add    edx,ecx
c0004551:	6a 64                	push   0x64
c0004553:	52                   	push   edx
c0004554:	50                   	push   eax
c0004555:	e8 c2 af 01 00       	call   c001f51c <__udivdi3>
c000455a:	83 c4 10             	add    esp,0x10
c000455d:	05 ff 07 00 00       	add    eax,0x7ff
c0004562:	83 d2 00             	adc    edx,0x0
c0004565:	89 c1                	mov    ecx,eax
c0004567:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000456d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004571:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004574:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004577:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000457b:	01 f0                	add    eax,esi
c000457d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004581:	11 fa                	adc    edx,edi
c0004583:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004587:	19 d1                	sbb    ecx,edx
c0004589:	73 2e                	jae    c00045b9 <create_partition+0x1aa>
c000458b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000458f:	89 f8                	mov    eax,edi
c0004591:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004595:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000459c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045a4:	73 6b                	jae    c0004611 <create_partition+0x202>
c00045a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045ae:	29 f0                	sub    eax,esi
c00045b0:	19 fa                	sbb    edx,edi
c00045b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00045b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045bd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045c0:	74 4f                	je     c0004611 <create_partition+0x202>
c00045c2:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045c5:	b9 10 00 00 00       	mov    ecx,0x10
c00045ca:	ba 50 05 02 c0       	mov    edx,0xc0020550
c00045cf:	e8 0e d5 ff ff       	call   c0001ae2 <mem_cpy>
c00045d4:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045d8:	b9 10 00 00 00       	mov    ecx,0x10
c00045dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045e1:	e8 49 db ff ff       	call   c000212f <make_rand>
c00045e6:	89 f2                	mov    edx,esi
c00045e8:	89 f9                	mov    ecx,edi
c00045ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045ee:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045f2:	e8 e5 d4 ff ff       	call   c0001adc <st_qword>
c00045f7:	03 34 24             	add    esi,DWORD PTR [esp]
c00045fa:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045fe:	89 f2                	mov    edx,esi
c0004600:	89 f9                	mov    ecx,edi
c0004602:	83 c2 ff             	add    edx,0xffffffff
c0004605:	83 d1 ff             	adc    ecx,0xffffffff
c0004608:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000460c:	e8 cb d4 ff ff       	call   c0001adc <st_qword>
c0004611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004615:	83 e8 80             	sub    eax,0xffffff80
c0004618:	89 c5                	mov    ebp,eax
c000461a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000461e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004624:	75 6b                	jne    c0004691 <create_partition+0x282>
c0004626:	45                   	inc    ebp
c0004627:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000462b:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004630:	e8 56 da ff ff       	call   c000208b <crc32>
c0004635:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000463b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000463f:	75 e5                	jne    c0004626 <create_partition+0x217>
c0004641:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004645:	83 ec 0c             	sub    esp,0xc
c0004648:	c1 ed 09             	shr    ebp,0x9
c000464b:	31 d2                	xor    edx,edx
c000464d:	6a 01                	push   0x1
c000464f:	52                   	push   edx
c0004650:	8d 45 02             	lea    eax,[ebp+0x2]
c0004653:	50                   	push   eax
c0004654:	53                   	push   ebx
c0004655:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004659:	e8 d0 d3 ff ff       	call   c0001a2e <disk_write>
c000465e:	83 c4 20             	add    esp,0x20
c0004661:	85 c0                	test   eax,eax
c0004663:	0f 85 d7 fd ff ff    	jne    c0004440 <create_partition+0x31>
c0004669:	83 ec 0c             	sub    esp,0xc
c000466c:	89 e8                	mov    eax,ebp
c000466e:	31 d2                	xor    edx,edx
c0004670:	6a 01                	push   0x1
c0004672:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004676:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000467a:	52                   	push   edx
c000467b:	50                   	push   eax
c000467c:	53                   	push   ebx
c000467d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004681:	e8 a8 d3 ff ff       	call   c0001a2e <disk_write>
c0004686:	83 c4 20             	add    esp,0x20
c0004689:	85 c0                	test   eax,eax
c000468b:	0f 85 af fd ff ff    	jne    c0004440 <create_partition+0x31>
c0004691:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004695:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004699:	3d 00 40 00 00       	cmp    eax,0x4000
c000469e:	74 0d                	je     c00046ad <create_partition+0x29e>
c00046a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046a8:	e9 12 fe ff ff       	jmp    c00044bf <create_partition+0xb0>
c00046ad:	31 d2                	xor    edx,edx
c00046af:	b9 00 02 00 00       	mov    ecx,0x200
c00046b4:	89 d8                	mov    eax,ebx
c00046b6:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046b9:	e8 39 d4 ff ff       	call   c0001af7 <mem_set>
c00046be:	b9 10 00 00 00       	mov    ecx,0x10
c00046c3:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00046c8:	89 d8                	mov    eax,ebx
c00046ca:	e8 13 d4 ff ff       	call   c0001ae2 <mem_cpy>
c00046cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046d3:	f7 d2                	not    edx
c00046d5:	8d 43 58             	lea    eax,[ebx+0x58]
c00046d8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046db:	e8 f9 d3 ff ff       	call   c0001ad9 <st_dword>
c00046e0:	8d 43 18             	lea    eax,[ebx+0x18]
c00046e3:	31 c9                	xor    ecx,ecx
c00046e5:	ba 01 00 00 00       	mov    edx,0x1
c00046ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ed:	e8 ea d3 ff ff       	call   c0001adc <st_qword>
c00046f2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fa:	83 c2 ff             	add    edx,0xffffffff
c00046fd:	89 e8                	mov    eax,ebp
c00046ff:	83 d1 ff             	adc    ecx,0xffffffff
c0004702:	e8 d5 d3 ff ff       	call   c0001adc <st_qword>
c0004707:	31 c9                	xor    ecx,ecx
c0004709:	8d 43 28             	lea    eax,[ebx+0x28]
c000470c:	ba 22 00 00 00       	mov    edx,0x22
c0004711:	e8 c6 d3 ff ff       	call   c0001adc <st_qword>
c0004716:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000471a:	83 c2 de             	add    edx,0xffffffde
c000471d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004721:	83 d1 ff             	adc    ecx,0xffffffff
c0004724:	8d 43 30             	lea    eax,[ebx+0x30]
c0004727:	e8 b0 d3 ff ff       	call   c0001adc <st_qword>
c000472c:	8d 43 54             	lea    eax,[ebx+0x54]
c000472f:	ba 80 00 00 00       	mov    edx,0x80
c0004734:	31 f6                	xor    esi,esi
c0004736:	e8 9e d3 ff ff       	call   c0001ad9 <st_dword>
c000473b:	8d 43 50             	lea    eax,[ebx+0x50]
c000473e:	ba 80 00 00 00       	mov    edx,0x80
c0004743:	e8 91 d3 ff ff       	call   c0001ad9 <st_dword>
c0004748:	ba 02 00 00 00       	mov    edx,0x2
c000474d:	89 f8                	mov    eax,edi
c000474f:	e8 85 d3 ff ff       	call   c0001ad9 <st_dword>
c0004754:	8d 53 38             	lea    edx,[ebx+0x38]
c0004757:	b9 10 00 00 00       	mov    ecx,0x10
c000475c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004760:	e8 ca d9 ff ff       	call   c000212f <make_rand>
c0004765:	83 c8 ff             	or     eax,0xffffffff
c0004768:	46                   	inc    esi
c0004769:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000476e:	e8 18 d9 ff ff       	call   c000208b <crc32>
c0004773:	83 fe 5c             	cmp    esi,0x5c
c0004776:	75 f0                	jne    c0004768 <create_partition+0x359>
c0004778:	f7 d0                	not    eax
c000477a:	8d 73 10             	lea    esi,[ebx+0x10]
c000477d:	89 c2                	mov    edx,eax
c000477f:	89 f0                	mov    eax,esi
c0004781:	e8 53 d3 ff ff       	call   c0001ad9 <st_dword>
c0004786:	83 ec 0c             	sub    esp,0xc
c0004789:	6a 01                	push   0x1
c000478b:	6a 00                	push   0x0
c000478d:	6a 01                	push   0x1
c000478f:	53                   	push   ebx
c0004790:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004794:	e8 95 d2 ff ff       	call   c0001a2e <disk_write>
c0004799:	83 c4 20             	add    esp,0x20
c000479c:	85 c0                	test   eax,eax
c000479e:	0f 85 9c fc ff ff    	jne    c0004440 <create_partition+0x31>
c00047a4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047a8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047ac:	83 c2 ff             	add    edx,0xffffffff
c00047af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047b2:	83 d1 ff             	adc    ecx,0xffffffff
c00047b5:	e8 22 d3 ff ff       	call   c0001adc <st_qword>
c00047ba:	ba 01 00 00 00       	mov    edx,0x1
c00047bf:	31 c9                	xor    ecx,ecx
c00047c1:	89 e8                	mov    eax,ebp
c00047c3:	e8 14 d3 ff ff       	call   c0001adc <st_qword>
c00047c8:	89 f8                	mov    eax,edi
c00047ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047d2:	e8 05 d3 ff ff       	call   c0001adc <st_qword>
c00047d7:	89 f0                	mov    eax,esi
c00047d9:	31 d2                	xor    edx,edx
c00047db:	31 ff                	xor    edi,edi
c00047dd:	e8 f7 d2 ff ff       	call   c0001ad9 <st_dword>
c00047e2:	83 c8 ff             	or     eax,0xffffffff
c00047e5:	47                   	inc    edi
c00047e6:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047eb:	e8 9b d8 ff ff       	call   c000208b <crc32>
c00047f0:	83 ff 5c             	cmp    edi,0x5c
c00047f3:	75 f0                	jne    c00047e5 <create_partition+0x3d6>
c00047f5:	f7 d0                	not    eax
c00047f7:	89 c2                	mov    edx,eax
c00047f9:	89 f0                	mov    eax,esi
c00047fb:	e8 d9 d2 ff ff       	call   c0001ad9 <st_dword>
c0004800:	83 ec 0c             	sub    esp,0xc
c0004803:	6a 01                	push   0x1
c0004805:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004809:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000480d:	83 c0 ff             	add    eax,0xffffffff
c0004810:	83 d2 ff             	adc    edx,0xffffffff
c0004813:	52                   	push   edx
c0004814:	50                   	push   eax
c0004815:	53                   	push   ebx
c0004816:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000481a:	e8 0f d2 ff ff       	call   c0001a2e <disk_write>
c000481f:	83 c4 20             	add    esp,0x20
c0004822:	85 c0                	test   eax,eax
c0004824:	0f 85 16 fc ff ff    	jne    c0004440 <create_partition+0x31>
c000482a:	31 d2                	xor    edx,edx
c000482c:	89 d8                	mov    eax,ebx
c000482e:	b9 00 02 00 00       	mov    ecx,0x200
c0004833:	e8 bf d2 ff ff       	call   c0001af7 <mem_set>
c0004838:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000483e:	b9 10 00 00 00       	mov    ecx,0x10
c0004843:	ba 50 04 02 c0       	mov    edx,0xc0020450
c0004848:	e8 95 d2 ff ff       	call   c0001ae2 <mem_cpy>
c000484d:	e9 3d 01 00 00       	jmp    c000498f <create_partition+0x580>
c0004852:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004856:	b9 05 00 00 00       	mov    ecx,0x5
c000485b:	89 04 24             	mov    DWORD PTR [esp],eax
c000485e:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004863:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c0004868:	31 d2                	xor    edx,edx
c000486a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486d:	f7 f6                	div    esi
c000486f:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004874:	76 0c                	jbe    c0004882 <create_partition+0x473>
c0004876:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c000487a:	49                   	dec    ecx
c000487b:	75 e6                	jne    c0004863 <create_partition+0x454>
c000487d:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c0004882:	b9 00 02 00 00       	mov    ecx,0x200
c0004887:	31 d2                	xor    edx,edx
c0004889:	89 d8                	mov    eax,ebx
c000488b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004890:	e8 62 d2 ff ff       	call   c0001af7 <mem_set>
c0004895:	b9 64 00 00 00       	mov    ecx,0x64
c000489a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000489d:	31 d2                	xor    edx,edx
c000489f:	f7 f1                	div    ecx
c00048a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00048a5:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c00048ab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00048b3:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c00048b8:	0f 96 c2             	setbe  dl
c00048bb:	85 ed                	test   ebp,ebp
c00048bd:	0f 95 c0             	setne  al
c00048c0:	84 c2                	test   dl,al
c00048c2:	0f 84 c7 00 00 00    	je     c000498f <create_partition+0x580>
c00048c8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048cb:	0f 83 be 00 00 00    	jae    c000498f <create_partition+0x580>
c00048d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048d9:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048dc:	83 fe 64             	cmp    esi,0x64
c00048df:	77 0c                	ja     c00048ed <create_partition+0x4de>
c00048e1:	74 07                	je     c00048ea <create_partition+0x4db>
c00048e3:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048e8:	eb 03                	jmp    c00048ed <create_partition+0x4de>
c00048ea:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048ed:	89 e8                	mov    eax,ebp
c00048ef:	01 f0                	add    eax,esi
c00048f1:	72 05                	jb     c00048f8 <create_partition+0x4e9>
c00048f3:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048f6:	76 07                	jbe    c00048ff <create_partition+0x4f0>
c00048f8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048fb:	29 ee                	sub    esi,ebp
c00048fd:	eb 08                	jmp    c0004907 <create_partition+0x4f8>
c00048ff:	85 f6                	test   esi,esi
c0004901:	0f 84 88 00 00 00    	je     c000498f <create_partition+0x580>
c0004907:	89 c8                	mov    eax,ecx
c0004909:	89 ea                	mov    edx,ebp
c000490b:	e8 c9 d1 ff ff       	call   c0001ad9 <st_dword>
c0004910:	89 f2                	mov    edx,esi
c0004912:	bf 3f 00 00 00       	mov    edi,0x3f
c0004917:	8d 41 04             	lea    eax,[ecx+0x4]
c000491a:	e8 ba d1 ff ff       	call   c0001ad9 <st_dword>
c000491f:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004923:	31 d2                	xor    edx,edx
c0004925:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0004929:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c000492c:	83 c1 10             	add    ecx,0x10
c000492f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004934:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004938:	89 e8                	mov    eax,ebp
c000493a:	f7 f7                	div    edi
c000493c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004940:	31 d2                	xor    edx,edx
c0004942:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004946:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c0004949:	89 c2                	mov    edx,eax
c000494b:	c1 ea 02             	shr    edx,0x2
c000494e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004952:	47                   	inc    edi
c0004953:	01 f5                	add    ebp,esi
c0004955:	83 e2 c0             	and    edx,0xffffffc0
c0004958:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c000495b:	09 fa                	or     edx,edi
c000495d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004960:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004963:	bf 3f 00 00 00       	mov    edi,0x3f
c0004968:	31 d2                	xor    edx,edx
c000496a:	f7 f7                	div    edi
c000496c:	89 d6                	mov    esi,edx
c000496e:	31 d2                	xor    edx,edx
c0004970:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004974:	89 c7                	mov    edi,eax
c0004976:	46                   	inc    esi
c0004977:	c1 ef 02             	shr    edi,0x2
c000497a:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c000497d:	83 e7 c0             	and    edi,0xffffffc0
c0004980:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c0004983:	09 fe                	or     esi,edi
c0004985:	89 f2                	mov    edx,esi
c0004987:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c000498a:	e9 24 ff ff ff       	jmp    c00048b3 <create_partition+0x4a4>
c000498f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004995:	ba 55 aa 00 00       	mov    edx,0xaa55
c000499a:	e8 36 d1 ff ff       	call   c0001ad5 <st_word>
c000499f:	83 ec 0c             	sub    esp,0xc
c00049a2:	6a 01                	push   0x1
c00049a4:	6a 00                	push   0x0
c00049a6:	6a 00                	push   0x0
c00049a8:	53                   	push   ebx
c00049a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049ad:	e8 7c d0 ff ff       	call   c0001a2e <disk_write>
c00049b2:	83 c4 20             	add    esp,0x20
c00049b5:	85 c0                	test   eax,eax
c00049b7:	0f 95 c0             	setne  al
c00049ba:	0f b6 c0             	movzx  eax,al
c00049bd:	83 c4 5c             	add    esp,0x5c
c00049c0:	5b                   	pop    ebx
c00049c1:	5e                   	pop    esi
c00049c2:	5f                   	pop    edi
c00049c3:	5d                   	pop    ebp
c00049c4:	c3                   	ret    

c00049c5 <get_fileinfo>:
c00049c5:	55                   	push   ebp
c00049c6:	57                   	push   edi
c00049c7:	56                   	push   esi
c00049c8:	53                   	push   ebx
c00049c9:	83 ec 1c             	sub    esp,0x1c
c00049cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00049ce:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049dc:	0f 84 dc 01 00 00    	je     c0004bbe <get_fileinfo+0x1f9>
c00049e2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e5:	75 0f                	jne    c00049f6 <get_fileinfo+0x31>
c00049e7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049ea:	83 c4 1c             	add    esp,0x1c
c00049ed:	5b                   	pop    ebx
c00049ee:	5e                   	pop    esi
c00049ef:	5f                   	pop    edi
c00049f0:	5d                   	pop    ebp
c00049f1:	e9 70 d5 ff ff       	jmp    c0001f66 <get_xfileinfo>
c00049f6:	89 d3                	mov    ebx,edx
c00049f8:	89 c6                	mov    esi,eax
c00049fa:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fe:	74 6a                	je     c0004a6a <get_fileinfo+0xa5>
c0004a00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a08:	31 ed                	xor    ebp,ebp
c0004a0a:	31 ff                	xor    edi,edi
c0004a0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a17:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a1b:	66 85 d2             	test   dx,dx
c0004a1e:	74 3e                	je     c0004a5e <get_fileinfo+0x99>
c0004a20:	66 85 ed             	test   bp,bp
c0004a23:	75 0c                	jne    c0004a31 <get_fileinfo+0x6c>
c0004a25:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a2b:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2f:	76 22                	jbe    c0004a53 <get_fileinfo+0x8e>
c0004a31:	89 e8                	mov    eax,ebp
c0004a33:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a38:	c1 e0 10             	shl    eax,0x10
c0004a3b:	29 f9                	sub    ecx,edi
c0004a3d:	09 d0                	or     eax,edx
c0004a3f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a43:	e8 bb d1 ff ff       	call   c0001c03 <put_utf>
c0004a48:	84 c0                	test   al,al
c0004a4a:	74 10                	je     c0004a5c <get_fileinfo+0x97>
c0004a4c:	0f b6 c0             	movzx  eax,al
c0004a4f:	01 c7                	add    edi,eax
c0004a51:	31 d2                	xor    edx,edx
c0004a53:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a58:	89 d5                	mov    ebp,edx
c0004a5a:	eb b0                	jmp    c0004a0c <get_fileinfo+0x47>
c0004a5c:	31 ff                	xor    edi,edi
c0004a5e:	66 85 ed             	test   bp,bp
c0004a61:	74 02                	je     c0004a65 <get_fileinfo+0xa0>
c0004a63:	31 ff                	xor    edi,edi
c0004a65:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a6a:	31 ff                	xor    edi,edi
c0004a6c:	31 c9                	xor    ecx,ecx
c0004a6e:	83 f9 0a             	cmp    ecx,0xa
c0004a71:	0f 87 ad 00 00 00    	ja     c0004b24 <get_fileinfo+0x15f>
c0004a77:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a81:	66 83 fa 20          	cmp    dx,0x20
c0004a85:	0f 84 92 00 00 00    	je     c0004b1d <get_fileinfo+0x158>
c0004a8b:	66 83 fa 05          	cmp    dx,0x5
c0004a8f:	75 05                	jne    c0004a96 <get_fileinfo+0xd1>
c0004a91:	ba e5 00 00 00       	mov    edx,0xe5
c0004a96:	83 fd 09             	cmp    ebp,0x9
c0004a99:	75 0b                	jne    c0004aa6 <get_fileinfo+0xe1>
c0004a9b:	83 ff 0b             	cmp    edi,0xb
c0004a9e:	77 06                	ja     c0004aa6 <get_fileinfo+0xe1>
c0004aa0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa5:	47                   	inc    edi
c0004aa6:	0f b7 c2             	movzx  eax,dx
c0004aa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aad:	e8 85 d0 ff ff       	call   c0001b37 <dbc_1st>
c0004ab2:	85 c0                	test   eax,eax
c0004ab4:	74 2f                	je     c0004ae5 <get_fileinfo+0x120>
c0004ab6:	83 fd 08             	cmp    ebp,0x8
c0004ab9:	74 2a                	je     c0004ae5 <get_fileinfo+0x120>
c0004abb:	83 fd 0b             	cmp    ebp,0xb
c0004abe:	74 25                	je     c0004ae5 <get_fileinfo+0x120>
c0004ac0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004acb:	e8 6a d0 ff ff       	call   c0001b3a <dbc_2nd>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	74 11                	je     c0004ae5 <get_fileinfo+0x120>
c0004ad4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004adb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ae0:	c1 e2 08             	shl    edx,0x8
c0004ae3:	09 c2                	or     edx,eax
c0004ae5:	50                   	push   eax
c0004ae6:	50                   	push   eax
c0004ae7:	68 b5 01 00 00       	push   0x1b5
c0004aec:	0f b7 d2             	movzx  edx,dx
c0004aef:	52                   	push   edx
c0004af0:	e8 17 38 00 00       	call   c000830c <ff_oem2uni>
c0004af5:	83 c4 10             	add    esp,0x10
c0004af8:	66 85 c0             	test   ax,ax
c0004afb:	75 04                	jne    c0004b01 <get_fileinfo+0x13c>
c0004afd:	31 ff                	xor    edi,edi
c0004aff:	eb 23                	jmp    c0004b24 <get_fileinfo+0x15f>
c0004b01:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b06:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b0a:	29 f9                	sub    ecx,edi
c0004b0c:	0f b7 c0             	movzx  eax,ax
c0004b0f:	e8 ef d0 ff ff       	call   c0001c03 <put_utf>
c0004b14:	84 c0                	test   al,al
c0004b16:	74 e5                	je     c0004afd <get_fileinfo+0x138>
c0004b18:	0f b6 c0             	movzx  eax,al
c0004b1b:	01 c7                	add    edi,eax
c0004b1d:	89 e9                	mov    ecx,ebp
c0004b1f:	e9 4a ff ff ff       	jmp    c0004a6e <get_fileinfo+0xa9>
c0004b24:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b29:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2d:	75 54                	jne    c0004b83 <get_fileinfo+0x1be>
c0004b2f:	85 ff                	test   edi,edi
c0004b31:	75 0b                	jne    c0004b3e <get_fileinfo+0x179>
c0004b33:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b37:	ba 01 00 00 00       	mov    edx,0x1
c0004b3c:	eb 33                	jmp    c0004b71 <get_fileinfo+0x1ac>
c0004b3e:	b1 08                	mov    cl,0x8
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b48:	84 c0                	test   al,al
c0004b4a:	74 25                	je     c0004b71 <get_fileinfo+0x1ac>
c0004b4c:	66 83 f8 2e          	cmp    ax,0x2e
c0004b50:	74 16                	je     c0004b68 <get_fileinfo+0x1a3>
c0004b52:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b55:	66 83 ff 19          	cmp    di,0x19
c0004b59:	77 0f                	ja     c0004b6a <get_fileinfo+0x1a5>
c0004b5b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b61:	74 07                	je     c0004b6a <get_fileinfo+0x1a5>
c0004b63:	83 c0 20             	add    eax,0x20
c0004b66:	eb 02                	jmp    c0004b6a <get_fileinfo+0x1a5>
c0004b68:	b1 10                	mov    cl,0x10
c0004b6a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6e:	42                   	inc    edx
c0004b6f:	eb d1                	jmp    c0004b42 <get_fileinfo+0x17d>
c0004b71:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b79:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7d:	75 04                	jne    c0004b83 <get_fileinfo+0x1be>
c0004b7f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b83:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b86:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b89:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8f:	83 c0 1c             	add    eax,0x1c
c0004b92:	e8 d9 ce ff ff       	call   c0001a70 <ld_dword>
c0004b97:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004ba0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba3:	83 c0 16             	add    eax,0x16
c0004ba6:	e8 b8 ce ff ff       	call   c0001a63 <ld_word>
c0004bab:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004baf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb2:	83 c0 18             	add    eax,0x18
c0004bb5:	e8 a9 ce ff ff       	call   c0001a63 <ld_word>
c0004bba:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbe:	83 c4 1c             	add    esp,0x1c
c0004bc1:	5b                   	pop    ebx
c0004bc2:	5e                   	pop    esi
c0004bc3:	5f                   	pop    edi
c0004bc4:	5d                   	pop    ebp
c0004bc5:	c3                   	ret    

c0004bc6 <ld_clust.isra.0>:
c0004bc6:	56                   	push   esi
c0004bc7:	89 c6                	mov    esi,eax
c0004bc9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bcc:	53                   	push   ebx
c0004bcd:	89 d3                	mov    ebx,edx
c0004bcf:	e8 8f ce ff ff       	call   c0001a63 <ld_word>
c0004bd4:	0f b7 c8             	movzx  ecx,ax
c0004bd7:	89 f0                	mov    eax,esi
c0004bd9:	3c 03                	cmp    al,0x3
c0004bdb:	75 0d                	jne    c0004bea <ld_clust.isra.0+0x24>
c0004bdd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004be0:	e8 7e ce ff ff       	call   c0001a63 <ld_word>
c0004be5:	c1 e0 10             	shl    eax,0x10
c0004be8:	09 c1                	or     ecx,eax
c0004bea:	5b                   	pop    ebx
c0004beb:	89 c8                	mov    eax,ecx
c0004bed:	5e                   	pop    esi
c0004bee:	c3                   	ret    

c0004bef <st_clust.isra.1>:
c0004bef:	56                   	push   esi
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	53                   	push   ebx
c0004bf3:	89 d3                	mov    ebx,edx
c0004bf5:	0f b7 d1             	movzx  edx,cx
c0004bf8:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bfb:	e8 d5 ce ff ff       	call   c0001ad5 <st_word>
c0004c00:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c03:	75 0f                	jne    c0004c14 <st_clust.isra.1+0x25>
c0004c05:	c1 e9 10             	shr    ecx,0x10
c0004c08:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c0b:	89 ca                	mov    edx,ecx
c0004c0d:	5b                   	pop    ebx
c0004c0e:	5e                   	pop    esi
c0004c0f:	e9 c1 ce ff ff       	jmp    c0001ad5 <st_word>
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <init_alloc_info.isra.2>:
c0004c17:	56                   	push   esi
c0004c18:	89 c6                	mov    esi,eax
c0004c1a:	53                   	push   ebx
c0004c1b:	89 d3                	mov    ebx,edx
c0004c1d:	51                   	push   ecx
c0004c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 48 ce ff ff       	call   c0001a70 <ld_dword>
c0004c28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c2b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2d:	83 c0 38             	add    eax,0x38
c0004c30:	e8 53 ce ff ff       	call   c0001a88 <ld_qword>
c0004c35:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c38:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c40:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c47:	83 e0 02             	and    eax,0x2
c0004c4a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5b                   	pop    ebx
c0004c4f:	5e                   	pop    esi
c0004c50:	c3                   	ret    

c0004c51 <follow_path>:
c0004c51:	56                   	push   esi
c0004c52:	53                   	push   ebx
c0004c53:	89 c3                	mov    ebx,eax
c0004c55:	83 ec 14             	sub    esp,0x14
c0004c58:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c62:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c64:	80 fa 2f             	cmp    dl,0x2f
c0004c67:	75 07                	jne    c0004c70 <follow_path+0x1f>
c0004c69:	40                   	inc    eax
c0004c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6e:	eb ee                	jmp    c0004c5e <follow_path+0xd>
c0004c70:	80 fa 5c             	cmp    dl,0x5c
c0004c73:	74 f4                	je     c0004c69 <follow_path+0x18>
c0004c75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c7c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c83:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c86:	77 52                	ja     c0004cda <follow_path+0x89>
c0004c88:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c8c:	31 d2                	xor    edx,edx
c0004c8e:	89 d8                	mov    eax,ebx
c0004c90:	e8 1d e3 ff ff       	call   c0002fb2 <dir_sdi>
c0004c95:	eb 7c                	jmp    c0004d13 <follow_path+0xc2>
c0004c97:	89 d8                	mov    eax,ebx
c0004c99:	e8 60 f2 ff ff       	call   c0003efe <dir_find>
c0004c9e:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca1:	85 c0                	test   eax,eax
c0004ca3:	75 46                	jne    c0004ceb <follow_path+0x9a>
c0004ca5:	80 e2 04             	and    dl,0x4
c0004ca8:	75 69                	jne    c0004d13 <follow_path+0xc2>
c0004caa:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cae:	74 5e                	je     c0004d0e <follow_path+0xbd>
c0004cb0:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb2:	3c 04                	cmp    al,0x4
c0004cb4:	75 41                	jne    c0004cf7 <follow_path+0xa6>
c0004cb6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cbd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cc0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc3:	30 c0                	xor    al,al
c0004cc5:	09 d0                	or     eax,edx
c0004cc7:	89 da                	mov    edx,ebx
c0004cc9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ccc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ccf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd2:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd5:	e8 3d ff ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0004cda:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cde:	89 d8                	mov    eax,ebx
c0004ce0:	e8 b6 ed ff ff       	call   c0003a9b <create_name>
c0004ce5:	85 c0                	test   eax,eax
c0004ce7:	74 ae                	je     c0004c97 <follow_path+0x46>
c0004ce9:	eb 28                	jmp    c0004d13 <follow_path+0xc2>
c0004ceb:	83 f8 04             	cmp    eax,0x4
c0004cee:	75 23                	jne    c0004d13 <follow_path+0xc2>
c0004cf0:	80 e2 04             	and    dl,0x4
c0004cf3:	74 19                	je     c0004d0e <follow_path+0xbd>
c0004cf5:	eb 1c                	jmp    c0004d13 <follow_path+0xc2>
c0004cf7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cfa:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d00:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d04:	e8 bd fe ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0004d09:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d0c:	eb cc                	jmp    c0004cda <follow_path+0x89>
c0004d0e:	b8 05 00 00 00       	mov    eax,0x5
c0004d13:	83 c4 14             	add    esp,0x14
c0004d16:	5b                   	pop    ebx
c0004d17:	5e                   	pop    esi
c0004d18:	c3                   	ret    

c0004d19 <f_mount>:
c0004d19:	53                   	push   ebx
c0004d1a:	83 ec 18             	sub    esp,0x18
c0004d1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2d:	e8 13 d3 ff ff       	call   c0002045 <get_ldnumber>
c0004d32:	89 c2                	mov    edx,eax
c0004d34:	b8 0b 00 00 00       	mov    eax,0xb
c0004d39:	85 d2                	test   edx,edx
c0004d3b:	78 39                	js     c0004d76 <f_mount+0x5d>
c0004d3d:	8b 04 95 40 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb8c0]
c0004d44:	85 c0                	test   eax,eax
c0004d46:	74 03                	je     c0004d4b <f_mount+0x32>
c0004d48:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4f:	85 c0                	test   eax,eax
c0004d51:	74 03                	je     c0004d56 <f_mount+0x3d>
c0004d53:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d5a:	89 04 95 40 47 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb8c0],eax
c0004d61:	31 c0                	xor    eax,eax
c0004d63:	84 db                	test   bl,bl
c0004d65:	74 0f                	je     c0004d76 <f_mount+0x5d>
c0004d67:	31 c9                	xor    ecx,ecx
c0004d69:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d71:	e8 6f d7 ff ff       	call   c00024e5 <mount_volume>
c0004d76:	83 c4 18             	add    esp,0x18
c0004d79:	5b                   	pop    ebx
c0004d7a:	c3                   	ret    

c0004d7b <f_open>:
c0004d7b:	55                   	push   ebp
c0004d7c:	bd 09 00 00 00       	mov    ebp,0x9
c0004d81:	57                   	push   edi
c0004d82:	56                   	push   esi
c0004d83:	53                   	push   ebx
c0004d84:	83 ec 7c             	sub    esp,0x7c
c0004d87:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d95:	85 db                	test   ebx,ebx
c0004d97:	0f 84 10 04 00 00    	je     c00051ad <f_open+0x432>
c0004d9d:	89 fe                	mov    esi,edi
c0004d9f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da3:	83 e6 3f             	and    esi,0x3f
c0004da6:	89 f0                	mov    eax,esi
c0004da8:	0f b6 c8             	movzx  ecx,al
c0004dab:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db2:	e8 2e d7 ff ff       	call   c00024e5 <mount_volume>
c0004db7:	89 c5                	mov    ebp,eax
c0004db9:	85 c0                	test   eax,eax
c0004dbb:	0f 85 e6 03 00 00    	jne    c00051a7 <f_open+0x42c>
c0004dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc5:	83 ec 0c             	sub    esp,0xc
c0004dc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004dcc:	bd 11 00 00 00       	mov    ebp,0x11
c0004dd1:	68 60 04 00 00       	push   0x460
c0004dd6:	e8 6e 34 00 00       	call   c0008249 <ff_memalloc>
c0004ddb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ddf:	83 c4 10             	add    esp,0x10
c0004de2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de7:	0f 84 c0 03 00 00    	je     c00051ad <f_open+0x432>
c0004ded:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df5:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dfb:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e01:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e0c:	e8 40 fe ff ff       	call   c0004c51 <follow_path>
c0004e11:	89 c5                	mov    ebp,eax
c0004e13:	85 c0                	test   eax,eax
c0004e15:	75 0c                	jne    c0004e23 <f_open+0xa8>
c0004e17:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e1c:	79 05                	jns    c0004e23 <f_open+0xa8>
c0004e1e:	bd 06 00 00 00       	mov    ebp,0x6
c0004e23:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e29:	0f 84 84 01 00 00    	je     c0004fb3 <f_open+0x238>
c0004e2f:	85 ed                	test   ebp,ebp
c0004e31:	74 20                	je     c0004e53 <f_open+0xd8>
c0004e33:	83 fd 04             	cmp    ebp,0x4
c0004e36:	0f 85 58 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e40:	83 ce 08             	or     esi,0x8
c0004e43:	e8 7d f2 ff ff       	call   c00040c5 <dir_register>
c0004e48:	89 c5                	mov    ebp,eax
c0004e4a:	85 c0                	test   eax,eax
c0004e4c:	74 2f                	je     c0004e7d <f_open+0x102>
c0004e4e:	e9 41 03 00 00       	jmp    c0005194 <f_open+0x419>
c0004e53:	bd 07 00 00 00       	mov    ebp,0x7
c0004e58:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5d:	0f 85 31 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e63:	bd 08 00 00 00       	mov    ebp,0x8
c0004e68:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6e:	0f 85 20 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e74:	83 e7 08             	and    edi,0x8
c0004e77:	0f 84 65 01 00 00    	je     c0004fe2 <f_open+0x267>
c0004e7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e81:	8a 02                	mov    al,BYTE PTR [edx]
c0004e83:	3c 04                	cmp    al,0x4
c0004e85:	0f 85 97 00 00 00    	jne    c0004f22 <f_open+0x1a7>
c0004e8b:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8e:	89 13                	mov    DWORD PTR [ebx],edx
c0004e90:	89 da                	mov    edx,ebx
c0004e92:	e8 80 fd ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0004e97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9e:	31 d2                	xor    edx,edx
c0004ea0:	83 c0 02             	add    eax,0x2
c0004ea3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea8:	e8 4a cc ff ff       	call   c0001af7 <mem_set>
c0004ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb4:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb9:	83 c0 26             	add    eax,0x26
c0004ebc:	31 d2                	xor    edx,edx
c0004ebe:	e8 34 cc ff ff       	call   c0001af7 <mem_set>
c0004ec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eca:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ece:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed6:	83 c0 08             	add    eax,0x8
c0004ed9:	e8 fb cb ff ff       	call   c0001ad9 <st_dword>
c0004ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eed:	e8 c4 ea ff ff       	call   c00039b6 <store_xdir>
c0004ef2:	89 c5                	mov    ebp,eax
c0004ef4:	85 c0                	test   eax,eax
c0004ef6:	0f 85 98 02 00 00    	jne    c0005194 <f_open+0x419>
c0004efc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eff:	85 d2                	test   edx,edx
c0004f01:	0f 84 db 00 00 00    	je     c0004fe2 <f_open+0x267>
c0004f07:	31 c9                	xor    ecx,ecx
c0004f09:	89 d8                	mov    eax,ebx
c0004f0b:	e8 9b e3 ff ff       	call   c00032ab <remove_chain>
c0004f10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f14:	89 c5                	mov    ebp,eax
c0004f16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f19:	48                   	dec    eax
c0004f1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1d:	e9 b8 00 00 00       	jmp    c0004fda <f_open+0x25f>
c0004f22:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f26:	89 ea                	mov    edx,ebp
c0004f28:	e8 99 fc ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0004f2d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f32:	89 c7                	mov    edi,eax
c0004f34:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f37:	e8 9d cb ff ff       	call   c0001ad9 <st_dword>
c0004f3c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f40:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f44:	31 c9                	xor    ecx,ecx
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f4e:	e8 9c fc ff ff       	call   c0004bef <st_clust.isra.1>
c0004f53:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f57:	83 c0 1c             	add    eax,0x1c
c0004f5a:	31 d2                	xor    edx,edx
c0004f5c:	e8 78 cb ff ff       	call   c0001ad9 <st_dword>
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 ff                	test   edi,edi
c0004f67:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f6b:	74 75                	je     c0004fe2 <f_open+0x267>
c0004f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f71:	31 c9                	xor    ecx,ecx
c0004f73:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f76:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f81:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f85:	89 fa                	mov    edx,edi
c0004f87:	e8 1f e3 ff ff       	call   c00032ab <remove_chain>
c0004f8c:	89 c5                	mov    ebp,eax
c0004f8e:	85 c0                	test   eax,eax
c0004f90:	0f 85 fe 01 00 00    	jne    c0005194 <f_open+0x419>
c0004f96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa2:	4f                   	dec    edi
c0004fa3:	e8 92 d2 ff ff       	call   c000223a <move_window>
c0004fa8:	89 c5                	mov    ebp,eax
c0004faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fae:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb1:	eb 27                	jmp    c0004fda <f_open+0x25f>
c0004fb3:	85 ed                	test   ebp,ebp
c0004fb5:	0f 85 d9 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fbb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbf:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc4:	a8 10                	test   al,0x10
c0004fc6:	0f 85 c8 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fcc:	83 e7 02             	and    edi,0x2
c0004fcf:	74 11                	je     c0004fe2 <f_open+0x267>
c0004fd1:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd6:	a8 01                	test   al,0x1
c0004fd8:	eb 02                	jmp    c0004fdc <f_open+0x261>
c0004fda:	85 ed                	test   ebp,ebp
c0004fdc:	0f 85 b2 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe8:	74 03                	je     c0004fed <f_open+0x272>
c0004fea:	83 ce 40             	or     esi,0x40
c0004fed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff1:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff4:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff7:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ffa:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004ffe:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005001:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005004:	8a 02                	mov    al,BYTE PTR [edx]
c0005006:	3c 04                	cmp    al,0x4
c0005008:	75 2a                	jne    c0005034 <f_open+0x2b9>
c000500a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005011:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005015:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000501a:	30 c0                	xor    al,al
c000501c:	09 c8                	or     eax,ecx
c000501e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005021:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005025:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005028:	8d 42 10             	lea    eax,[edx+0x10]
c000502b:	89 da                	mov    edx,ebx
c000502d:	e8 e5 fb ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0005032:	eb 1c                	jmp    c0005050 <f_open+0x2d5>
c0005034:	89 fa                	mov    edx,edi
c0005036:	e8 8b fb ff ff       	call   c0004bc6 <ld_clust.isra.0>
c000503b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005041:	e8 2a ca ff ff       	call   c0001a70 <ld_dword>
c0005046:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005054:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000505b:	89 03                	mov    DWORD PTR [ebx],eax
c000505d:	31 d2                	xor    edx,edx
c000505f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005063:	b9 00 02 00 00       	mov    ecx,0x200
c0005068:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000506c:	89 f0                	mov    eax,esi
c000506e:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005071:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005075:	8d 43 50             	lea    eax,[ebx+0x50]
c0005078:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000507f:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005086:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005094:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005098:	e8 5a ca ff ff       	call   c0001af7 <mem_set>
c000509d:	83 e6 20             	and    esi,0x20
c00050a0:	75 07                	jne    c00050a9 <f_open+0x32e>
c00050a2:	31 ed                	xor    ebp,ebp
c00050a4:	e9 eb 00 00 00       	jmp    c0005194 <f_open+0x419>
c00050a9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050ac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050bb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050bf:	74 e1                	je     c00050a2 <f_open+0x327>
c00050c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d0:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050d3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050da:	c1 e5 09             	shl    ebp,0x9
c00050dd:	31 ff                	xor    edi,edi
c00050df:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e3:	89 f8                	mov    eax,edi
c00050e5:	89 ee                	mov    esi,ebp
c00050e7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050eb:	73 22                	jae    c000510f <f_open+0x394>
c00050ed:	89 d8                	mov    eax,ebx
c00050ef:	e8 c8 dc ff ff       	call   c0002dbc <get_fat>
c00050f4:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f8:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fc:	89 c2                	mov    edx,eax
c00050fe:	83 f8 01             	cmp    eax,0x1
c0005101:	76 10                	jbe    c0005113 <f_open+0x398>
c0005103:	83 f8 ff             	cmp    eax,0xffffffff
c0005106:	75 d5                	jne    c00050dd <f_open+0x362>
c0005108:	bd 01 00 00 00       	mov    ebp,0x1
c000510d:	eb 09                	jmp    c0005118 <f_open+0x39d>
c000510f:	31 ed                	xor    ebp,ebp
c0005111:	eb 05                	jmp    c0005118 <f_open+0x39d>
c0005113:	bd 02 00 00 00       	mov    ebp,0x2
c0005118:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000511b:	85 ed                	test   ebp,ebp
c000511d:	75 75                	jne    c0005194 <f_open+0x419>
c000511f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005123:	25 ff 01 00 00       	and    eax,0x1ff
c0005128:	0f 84 74 ff ff ff    	je     c00050a2 <f_open+0x327>
c000512e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005132:	bd 02 00 00 00       	mov    ebp,0x2
c0005137:	89 c8                	mov    eax,ecx
c0005139:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513d:	e8 ba cb ff ff       	call   c0001cfc <clst2sect>
c0005142:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005146:	89 d7                	mov    edi,edx
c0005148:	09 c7                	or     edi,eax
c000514a:	74 48                	je     c0005194 <f_open+0x419>
c000514c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005150:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005154:	0f ac fe 09          	shrd   esi,edi,0x9
c0005158:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000515c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005164:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005168:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516c:	83 ec 0c             	sub    esp,0xc
c000516f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005172:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005175:	6a 01                	push   0x1
c0005177:	52                   	push   edx
c0005178:	50                   	push   eax
c0005179:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005181:	50                   	push   eax
c0005182:	e8 91 c8 ff ff       	call   c0001a18 <disk_read>
c0005187:	83 c4 20             	add    esp,0x20
c000518a:	85 c0                	test   eax,eax
c000518c:	0f 95 c0             	setne  al
c000518f:	0f b6 c0             	movzx  eax,al
c0005192:	89 c5                	mov    ebp,eax
c0005194:	83 ec 0c             	sub    esp,0xc
c0005197:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000519b:	e8 bf 30 00 00       	call   c000825f <ff_memfree>
c00051a0:	83 c4 10             	add    esp,0x10
c00051a3:	85 ed                	test   ebp,ebp
c00051a5:	74 06                	je     c00051ad <f_open+0x432>
c00051a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ad:	83 c4 7c             	add    esp,0x7c
c00051b0:	89 e8                	mov    eax,ebp
c00051b2:	5b                   	pop    ebx
c00051b3:	5e                   	pop    esi
c00051b4:	5f                   	pop    edi
c00051b5:	5d                   	pop    ebp
c00051b6:	c3                   	ret    

c00051b7 <f_read>:
c00051b7:	55                   	push   ebp
c00051b8:	57                   	push   edi
c00051b9:	56                   	push   esi
c00051ba:	53                   	push   ebx
c00051bb:	83 ec 2c             	sub    esp,0x2c
c00051be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051d0:	89 d8                	mov    eax,ebx
c00051d2:	e8 88 cf ff ff       	call   c000215f <validate>
c00051d7:	89 c5                	mov    ebp,eax
c00051d9:	85 c0                	test   eax,eax
c00051db:	0f 85 4c 02 00 00    	jne    c000542d <f_read+0x276>
c00051e1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e5:	85 ed                	test   ebp,ebp
c00051e7:	0f 85 40 02 00 00    	jne    c000542d <f_read+0x276>
c00051ed:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f1:	0f 84 31 02 00 00    	je     c0005428 <f_read+0x271>
c00051f7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051fa:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fd:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005200:	bf 00 00 00 00       	mov    edi,0x0
c0005205:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005208:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000520c:	89 d1                	mov    ecx,edx
c000520e:	19 f9                	sbb    ecx,edi
c0005210:	0f 83 cf 00 00 00    	jae    c00052e5 <f_read+0x12e>
c0005216:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000521a:	e9 c6 00 00 00       	jmp    c00052e5 <f_read+0x12e>
c000521f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005222:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005225:	89 d0                	mov    eax,edx
c0005227:	25 ff 01 00 00       	and    eax,0x1ff
c000522c:	0f 85 c9 01 00 00    	jne    c00053fb <f_read+0x244>
c0005232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005236:	89 d6                	mov    esi,edx
c0005238:	89 cf                	mov    edi,ecx
c000523a:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000523e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005242:	48                   	dec    eax
c0005243:	21 f0                	and    eax,esi
c0005245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005249:	0f 84 a6 00 00 00    	je     c00052f5 <f_read+0x13e>
c000524f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005253:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005256:	89 c8                	mov    eax,ecx
c0005258:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000525b:	e8 9c ca ff ff       	call   c0001cfc <clst2sect>
c0005260:	89 d7                	mov    edi,edx
c0005262:	09 c7                	or     edi,eax
c0005264:	0f 84 b4 00 00 00    	je     c000531e <f_read+0x167>
c000526a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000526e:	31 ff                	xor    edi,edi
c0005270:	01 c6                	add    esi,eax
c0005272:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005275:	11 d7                	adc    edi,edx
c0005277:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527f:	0f 86 fd 00 00 00    	jbe    c0005382 <f_read+0x1cb>
c0005285:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005289:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528d:	c1 e8 09             	shr    eax,0x9
c0005290:	89 04 24             	mov    DWORD PTR [esp],eax
c0005293:	03 14 24             	add    edx,DWORD PTR [esp]
c0005296:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000529a:	39 c2                	cmp    edx,eax
c000529c:	76 07                	jbe    c00052a5 <f_read+0xee>
c000529e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a5:	83 ec 0c             	sub    esp,0xc
c00052a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ac:	57                   	push   edi
c00052ad:	56                   	push   esi
c00052ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b6:	50                   	push   eax
c00052b7:	e8 5c c7 ff ff       	call   c0001a18 <disk_read>
c00052bc:	83 c4 20             	add    esp,0x20
c00052bf:	85 c0                	test   eax,eax
c00052c1:	75 6e                	jne    c0005331 <f_read+0x17a>
c00052c3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c7:	78 7e                	js     c0005347 <f_read+0x190>
c00052c9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052cc:	c1 e6 09             	shl    esi,0x9
c00052cf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d3:	31 ff                	xor    edi,edi
c00052d5:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d9:	01 30                	add    DWORD PTR [eax],esi
c00052db:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052df:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052ea:	0f 85 2f ff ff ff    	jne    c000521f <f_read+0x68>
c00052f0:	e9 38 01 00 00       	jmp    c000542d <f_read+0x276>
c00052f5:	89 c8                	mov    eax,ecx
c00052f7:	09 d0                	or     eax,edx
c00052f9:	75 05                	jne    c0005300 <f_read+0x149>
c00052fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fe:	eb 19                	jmp    c0005319 <f_read+0x162>
c0005300:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005304:	74 09                	je     c000530f <f_read+0x158>
c0005306:	89 d8                	mov    eax,ebx
c0005308:	e8 10 ca ff ff       	call   c0001d1d <clmt_clust>
c000530d:	eb 0a                	jmp    c0005319 <f_read+0x162>
c000530f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005312:	89 d8                	mov    eax,ebx
c0005314:	e8 a3 da ff ff       	call   c0002dbc <get_fat>
c0005319:	83 f8 01             	cmp    eax,0x1
c000531c:	77 0e                	ja     c000532c <f_read+0x175>
c000531e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005322:	bd 02 00 00 00       	mov    ebp,0x2
c0005327:	e9 01 01 00 00       	jmp    c000542d <f_read+0x276>
c000532c:	83 f8 ff             	cmp    eax,0xffffffff
c000532f:	75 0e                	jne    c000533f <f_read+0x188>
c0005331:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005335:	bd 01 00 00 00       	mov    ebp,0x1
c000533a:	e9 ee 00 00 00       	jmp    c000542d <f_read+0x276>
c000533f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005342:	e9 08 ff ff ff       	jmp    c000524f <f_read+0x98>
c0005347:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534d:	29 f0                	sub    eax,esi
c000534f:	19 fa                	sbb    edx,edi
c0005351:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005354:	89 d7                	mov    edi,edx
c0005356:	ba 00 00 00 00       	mov    edx,0x0
c000535b:	89 f9                	mov    ecx,edi
c000535d:	19 d1                	sbb    ecx,edx
c000535f:	0f 83 64 ff ff ff    	jae    c00052c9 <f_read+0x112>
c0005365:	89 c7                	mov    edi,eax
c0005367:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000536b:	c1 e7 09             	shl    edi,0x9
c000536e:	8d 53 50             	lea    edx,[ebx+0x50]
c0005371:	01 f8                	add    eax,edi
c0005373:	b9 00 02 00 00       	mov    ecx,0x200
c0005378:	e8 65 c7 ff ff       	call   c0001ae2 <mem_cpy>
c000537d:	e9 47 ff ff ff       	jmp    c00052c9 <f_read+0x112>
c0005382:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005385:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005388:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538c:	89 04 24             	mov    DWORD PTR [esp],eax
c000538f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005393:	75 05                	jne    c000539a <f_read+0x1e3>
c0005395:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005398:	74 5b                	je     c00053f5 <f_read+0x23e>
c000539a:	8d 43 50             	lea    eax,[ebx+0x50]
c000539d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a5:	79 2a                	jns    c00053d1 <f_read+0x21a>
c00053a7:	83 ec 0c             	sub    esp,0xc
c00053aa:	6a 01                	push   0x1
c00053ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bc:	50                   	push   eax
c00053bd:	e8 6c c6 ff ff       	call   c0001a2e <disk_write>
c00053c2:	83 c4 20             	add    esp,0x20
c00053c5:	85 c0                	test   eax,eax
c00053c7:	0f 85 64 ff ff ff    	jne    c0005331 <f_read+0x17a>
c00053cd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d1:	83 ec 0c             	sub    esp,0xc
c00053d4:	6a 01                	push   0x1
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053e0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e4:	50                   	push   eax
c00053e5:	e8 2e c6 ff ff       	call   c0001a18 <disk_read>
c00053ea:	83 c4 20             	add    esp,0x20
c00053ed:	85 c0                	test   eax,eax
c00053ef:	0f 85 3c ff ff ff    	jne    c0005331 <f_read+0x17a>
c00053f5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fe:	ba 00 02 00 00       	mov    edx,0x200
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000540c:	29 c2                	sub    edx,eax
c000540e:	39 d6                	cmp    esi,edx
c0005410:	76 02                	jbe    c0005414 <f_read+0x25d>
c0005412:	89 d6                	mov    esi,edx
c0005414:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005418:	89 f1                	mov    ecx,esi
c000541a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541e:	e8 bf c6 ff ff       	call   c0001ae2 <mem_cpy>
c0005423:	e9 a7 fe ff ff       	jmp    c00052cf <f_read+0x118>
c0005428:	bd 07 00 00 00       	mov    ebp,0x7
c000542d:	83 c4 2c             	add    esp,0x2c
c0005430:	89 e8                	mov    eax,ebp
c0005432:	5b                   	pop    ebx
c0005433:	5e                   	pop    esi
c0005434:	5f                   	pop    edi
c0005435:	5d                   	pop    ebp
c0005436:	c3                   	ret    

c0005437 <f_write>:
c0005437:	55                   	push   ebp
c0005438:	57                   	push   edi
c0005439:	56                   	push   esi
c000543a:	53                   	push   ebx
c000543b:	83 ec 2c             	sub    esp,0x2c
c000543e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005442:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005446:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000544a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005450:	89 d8                	mov    eax,ebx
c0005452:	e8 08 cd ff ff       	call   c000215f <validate>
c0005457:	89 c5                	mov    ebp,eax
c0005459:	85 c0                	test   eax,eax
c000545b:	0f 85 86 02 00 00    	jne    c00056e7 <f_write+0x2b0>
c0005461:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005465:	85 ed                	test   ebp,ebp
c0005467:	0f 85 7a 02 00 00    	jne    c00056e7 <f_write+0x2b0>
c000546d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005471:	0f 84 6b 02 00 00    	je     c00056e2 <f_write+0x2ab>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547e:	0f 84 43 01 00 00    	je     c00055c7 <f_write+0x190>
c0005484:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005487:	89 c1                	mov    ecx,eax
c0005489:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548d:	0f 83 34 01 00 00    	jae    c00055c7 <f_write+0x190>
c0005493:	f7 d0                	not    eax
c0005495:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005499:	e9 29 01 00 00       	jmp    c00055c7 <f_write+0x190>
c000549e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a4:	89 d0                	mov    eax,edx
c00054a6:	25 ff 01 00 00       	and    eax,0x1ff
c00054ab:	0f 85 00 02 00 00    	jne    c00056b1 <f_write+0x27a>
c00054b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b5:	89 d6                	mov    esi,edx
c00054b7:	89 cf                	mov    edi,ecx
c00054b9:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054bd:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c1:	48                   	dec    eax
c00054c2:	21 f0                	and    eax,esi
c00054c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c8:	0f 84 06 01 00 00    	je     c00055d4 <f_write+0x19d>
c00054ce:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d2:	0f 88 6e 01 00 00    	js     c0005646 <f_write+0x20f>
c00054d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054dc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054df:	89 c8                	mov    eax,ecx
c00054e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e5:	e8 12 c8 ff ff       	call   c0001cfc <clst2sect>
c00054ea:	89 d1                	mov    ecx,edx
c00054ec:	09 c1                	or     ecx,eax
c00054ee:	0f 84 1c 01 00 00    	je     c0005610 <f_write+0x1d9>
c00054f4:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054f8:	31 ff                	xor    edi,edi
c00054fa:	01 c6                	add    esi,eax
c00054fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005500:	11 d7                	adc    edi,edx
c0005502:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000550a:	0f 86 63 01 00 00    	jbe    c0005673 <f_write+0x23c>
c0005510:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005514:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005518:	c1 e8 09             	shr    eax,0x9
c000551b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005523:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005527:	39 c2                	cmp    edx,eax
c0005529:	76 08                	jbe    c0005533 <f_write+0xfc>
c000552b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005533:	83 ec 0c             	sub    esp,0xc
c0005536:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000553a:	57                   	push   edi
c000553b:	56                   	push   esi
c000553c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005540:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005544:	50                   	push   eax
c0005545:	e8 e4 c4 ff ff       	call   c0001a2e <disk_write>
c000554a:	83 c4 20             	add    esp,0x20
c000554d:	85 c0                	test   eax,eax
c000554f:	0f 85 ce 00 00 00    	jne    c0005623 <f_write+0x1ec>
c0005555:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005558:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000555b:	29 f0                	sub    eax,esi
c000555d:	19 fa                	sbb    edx,edi
c000555f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005563:	89 d7                	mov    edi,edx
c0005565:	ba 00 00 00 00       	mov    edx,0x0
c000556a:	89 f9                	mov    ecx,edi
c000556c:	19 d1                	sbb    ecx,edx
c000556e:	73 1c                	jae    c000558c <f_write+0x155>
c0005570:	89 c7                	mov    edi,eax
c0005572:	b9 00 02 00 00       	mov    ecx,0x200
c0005577:	c1 e7 09             	shl    edi,0x9
c000557a:	8d 43 50             	lea    eax,[ebx+0x50]
c000557d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005581:	89 fa                	mov    edx,edi
c0005583:	e8 5a c5 ff ff       	call   c0001ae2 <mem_cpy>
c0005588:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000558c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005590:	c1 e6 09             	shl    esi,0x9
c0005593:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005597:	31 ff                	xor    edi,edi
c0005599:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559d:	01 30                	add    DWORD PTR [eax],esi
c000559f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ac:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055af:	89 c1                	mov    ecx,eax
c00055b1:	39 f2                	cmp    edx,esi
c00055b3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b9:	19 f9                	sbb    ecx,edi
c00055bb:	73 04                	jae    c00055c1 <f_write+0x18a>
c00055bd:	89 f2                	mov    edx,esi
c00055bf:	89 f8                	mov    eax,edi
c00055c1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055cc:	0f 85 cc fe ff ff    	jne    c000549e <f_write+0x67>
c00055d2:	eb 2e                	jmp    c0005602 <f_write+0x1cb>
c00055d4:	89 c8                	mov    eax,ecx
c00055d6:	09 d0                	or     eax,edx
c00055d8:	75 0b                	jne    c00055e5 <f_write+0x1ae>
c00055da:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055dd:	31 d2                	xor    edx,edx
c00055df:	85 c0                	test   eax,eax
c00055e1:	75 28                	jne    c000560b <f_write+0x1d4>
c00055e3:	eb 12                	jmp    c00055f7 <f_write+0x1c0>
c00055e5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e9:	74 09                	je     c00055f4 <f_write+0x1bd>
c00055eb:	89 d8                	mov    eax,ebx
c00055ed:	e8 2b c7 ff ff       	call   c0001d1d <clmt_clust>
c00055f2:	eb 0a                	jmp    c00055fe <f_write+0x1c7>
c00055f4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f7:	89 d8                	mov    eax,ebx
c00055f9:	e8 ac da ff ff       	call   c00030aa <create_chain>
c00055fe:	85 c0                	test   eax,eax
c0005600:	75 09                	jne    c000560b <f_write+0x1d4>
c0005602:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005606:	e9 dc 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c000560b:	83 f8 01             	cmp    eax,0x1
c000560e:	75 0e                	jne    c000561e <f_write+0x1e7>
c0005610:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005614:	bd 02 00 00 00       	mov    ebp,0x2
c0005619:	e9 c9 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c000561e:	83 f8 ff             	cmp    eax,0xffffffff
c0005621:	75 0e                	jne    c0005631 <f_write+0x1fa>
c0005623:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005627:	bd 01 00 00 00       	mov    ebp,0x1
c000562c:	e9 b6 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c0005631:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005634:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005638:	0f 85 90 fe ff ff    	jne    c00054ce <f_write+0x97>
c000563e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005641:	e9 88 fe ff ff       	jmp    c00054ce <f_write+0x97>
c0005646:	83 ec 0c             	sub    esp,0xc
c0005649:	8d 43 50             	lea    eax,[ebx+0x50]
c000564c:	6a 01                	push   0x1
c000564e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005651:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005654:	50                   	push   eax
c0005655:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005659:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565d:	50                   	push   eax
c000565e:	e8 cb c3 ff ff       	call   c0001a2e <disk_write>
c0005663:	83 c4 20             	add    esp,0x20
c0005666:	85 c0                	test   eax,eax
c0005668:	75 b9                	jne    c0005623 <f_write+0x1ec>
c000566a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566e:	e9 65 fe ff ff       	jmp    c00054d8 <f_write+0xa1>
c0005673:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005676:	75 05                	jne    c000567d <f_write+0x246>
c0005678:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000567b:	74 2e                	je     c00056ab <f_write+0x274>
c000567d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005680:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005683:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005686:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005689:	73 20                	jae    c00056ab <f_write+0x274>
c000568b:	83 ec 0c             	sub    esp,0xc
c000568e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005691:	6a 01                	push   0x1
c0005693:	57                   	push   edi
c0005694:	56                   	push   esi
c0005695:	50                   	push   eax
c0005696:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000569a:	50                   	push   eax
c000569b:	e8 78 c3 ff ff       	call   c0001a18 <disk_read>
c00056a0:	83 c4 20             	add    esp,0x20
c00056a3:	85 c0                	test   eax,eax
c00056a5:	0f 85 78 ff ff ff    	jne    c0005623 <f_write+0x1ec>
c00056ab:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ae:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b4:	ba 00 02 00 00       	mov    edx,0x200
c00056b9:	25 ff 01 00 00       	and    eax,0x1ff
c00056be:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c2:	29 c2                	sub    edx,eax
c00056c4:	39 d6                	cmp    esi,edx
c00056c6:	76 02                	jbe    c00056ca <f_write+0x293>
c00056c8:	89 d6                	mov    esi,edx
c00056ca:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056ce:	89 f1                	mov    ecx,esi
c00056d0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d4:	e8 09 c4 ff ff       	call   c0001ae2 <mem_cpy>
c00056d9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056dd:	e9 b1 fe ff ff       	jmp    c0005593 <f_write+0x15c>
c00056e2:	bd 07 00 00 00       	mov    ebp,0x7
c00056e7:	83 c4 2c             	add    esp,0x2c
c00056ea:	89 e8                	mov    eax,ebp
c00056ec:	5b                   	pop    ebx
c00056ed:	5e                   	pop    esi
c00056ee:	5f                   	pop    edi
c00056ef:	5d                   	pop    ebp
c00056f0:	c3                   	ret    

c00056f1 <f_sync>:
c00056f1:	56                   	push   esi
c00056f2:	53                   	push   ebx
c00056f3:	83 ec 64             	sub    esp,0x64
c00056f6:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056fa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fe:	89 d8                	mov    eax,ebx
c0005700:	e8 5a ca ff ff       	call   c000215f <validate>
c0005705:	85 c0                	test   eax,eax
c0005707:	0f 85 ba 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000570d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005710:	f6 c2 40             	test   dl,0x40
c0005713:	0f 84 ae 01 00 00    	je     c00058c7 <f_sync+0x1d6>
c0005719:	84 d2                	test   dl,dl
c000571b:	79 33                	jns    c0005750 <f_sync+0x5f>
c000571d:	83 ec 0c             	sub    esp,0xc
c0005720:	8d 43 50             	lea    eax,[ebx+0x50]
c0005723:	6a 01                	push   0x1
c0005725:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005728:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000572b:	50                   	push   eax
c000572c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005730:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005734:	50                   	push   eax
c0005735:	e8 f4 c2 ff ff       	call   c0001a2e <disk_write>
c000573a:	89 c2                	mov    edx,eax
c000573c:	83 c4 20             	add    esp,0x20
c000573f:	b8 01 00 00 00       	mov    eax,0x1
c0005744:	85 d2                	test   edx,edx
c0005746:	0f 85 7b 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000574c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005754:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005757:	0f 85 11 01 00 00    	jne    c000586e <f_sync+0x17d>
c000575d:	89 d8                	mov    eax,ebx
c000575f:	e8 1e d6 ff ff       	call   c0002d82 <fill_first_frag>
c0005764:	85 c0                	test   eax,eax
c0005766:	0f 85 5b 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000576c:	83 c9 ff             	or     ecx,0xffffffff
c000576f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005772:	89 d8                	mov    eax,ebx
c0005774:	e8 d4 d5 ff ff       	call   c0002d4d <fill_last_frag>
c0005779:	85 c0                	test   eax,eax
c000577b:	0f 85 46 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c0005781:	83 ec 0c             	sub    esp,0xc
c0005784:	68 60 04 00 00       	push   0x460
c0005789:	e8 bb 2a 00 00       	call   c0008249 <ff_memalloc>
c000578e:	89 c6                	mov    esi,eax
c0005790:	83 c4 10             	add    esp,0x10
c0005793:	b8 11 00 00 00       	mov    eax,0x11
c0005798:	85 f6                	test   esi,esi
c000579a:	0f 84 27 01 00 00    	je     c00058c7 <f_sync+0x1d6>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057aa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057ad:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057b0:	89 da                	mov    edx,ebx
c00057b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b6:	e8 bc df ff ff       	call   c0003777 <load_obj_xdir>
c00057bb:	85 c0                	test   eax,eax
c00057bd:	0f 85 95 00 00 00    	jne    c0005858 <f_sync+0x167>
c00057c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057ca:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057ce:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d4:	83 ca 01             	or     edx,0x1
c00057d7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057dd:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057e0:	83 c0 34             	add    eax,0x34
c00057e3:	e8 f1 c2 ff ff       	call   c0001ad9 <st_dword>
c00057e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057f2:	83 c0 38             	add    eax,0x38
c00057f5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f8:	e8 df c2 ff ff       	call   c0001adc <st_qword>
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005804:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005807:	83 c0 28             	add    eax,0x28
c000580a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000580d:	e8 ca c2 ff ff       	call   c0001adc <st_qword>
c0005812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005816:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005819:	ba 00 00 21 50       	mov    edx,0x50210000
c000581e:	83 c0 0c             	add    eax,0xc
c0005821:	e8 b3 c2 ff ff       	call   c0001ad9 <st_dword>
c0005826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000582a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005831:	31 d2                	xor    edx,edx
c0005833:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005836:	83 c0 10             	add    eax,0x10
c0005839:	e8 9b c2 ff ff       	call   c0001ad9 <st_dword>
c000583e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005842:	e8 6f e1 ff ff       	call   c00039b6 <store_xdir>
c0005847:	85 c0                	test   eax,eax
c0005849:	75 0d                	jne    c0005858 <f_sync+0x167>
c000584b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584f:	e8 f4 ea ff ff       	call   c0004348 <sync_fs>
c0005854:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	56                   	push   esi
c0005860:	e8 fa 29 00 00       	call   c000825f <ff_memfree>
c0005865:	83 c4 10             	add    esp,0x10
c0005868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586c:	eb 59                	jmp    c00058c7 <f_sync+0x1d6>
c000586e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005871:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005874:	e8 c1 c9 ff ff       	call   c000223a <move_window>
c0005879:	85 c0                	test   eax,eax
c000587b:	75 4a                	jne    c00058c7 <f_sync+0x1d6>
c000587d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005880:	89 f2                	mov    edx,esi
c0005882:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005886:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005889:	8b 03                	mov    eax,DWORD PTR [ebx]
c000588b:	e8 5f f3 ff ff       	call   c0004bef <st_clust.isra.1>
c0005890:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005893:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005896:	e8 3e c2 ff ff       	call   c0001ad9 <st_dword>
c000589b:	8d 46 16             	lea    eax,[esi+0x16]
c000589e:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a3:	e8 31 c2 ff ff       	call   c0001ad9 <st_dword>
c00058a8:	8d 46 12             	lea    eax,[esi+0x12]
c00058ab:	31 d2                	xor    edx,edx
c00058ad:	e8 23 c2 ff ff       	call   c0001ad5 <st_word>
c00058b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058be:	e8 85 ea ff ff       	call   c0004348 <sync_fs>
c00058c3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c7:	83 c4 64             	add    esp,0x64
c00058ca:	5b                   	pop    ebx
c00058cb:	5e                   	pop    esi
c00058cc:	c3                   	ret    

c00058cd <f_close>:
c00058cd:	53                   	push   ebx
c00058ce:	83 ec 24             	sub    esp,0x24
c00058d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d5:	53                   	push   ebx
c00058d6:	e8 16 fe ff ff       	call   c00056f1 <f_sync>
c00058db:	83 c4 10             	add    esp,0x10
c00058de:	85 c0                	test   eax,eax
c00058e0:	75 15                	jne    c00058f7 <f_close+0x2a>
c00058e2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e6:	89 d8                	mov    eax,ebx
c00058e8:	e8 72 c8 ff ff       	call   c000215f <validate>
c00058ed:	85 c0                	test   eax,eax
c00058ef:	75 06                	jne    c00058f7 <f_close+0x2a>
c00058f1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f7:	83 c4 18             	add    esp,0x18
c00058fa:	5b                   	pop    ebx
c00058fb:	c3                   	ret    

c00058fc <f_lseek>:
c00058fc:	55                   	push   ebp
c00058fd:	57                   	push   edi
c00058fe:	56                   	push   esi
c00058ff:	53                   	push   ebx
c0005900:	83 ec 3c             	sub    esp,0x3c
c0005903:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005907:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000590b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005912:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005916:	89 d8                	mov    eax,ebx
c0005918:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000591c:	e8 3e c8 ff ff       	call   c000215f <validate>
c0005921:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005925:	85 c0                	test   eax,eax
c0005927:	0f 85 28 04 00 00    	jne    c0005d55 <f_lseek+0x459>
c000592d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005931:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005935:	85 c0                	test   eax,eax
c0005937:	0f 85 18 04 00 00    	jne    c0005d55 <f_lseek+0x459>
c000593d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005941:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005944:	74 0c                	je     c0005952 <f_lseek+0x56>
c0005946:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005949:	85 c0                	test   eax,eax
c000594b:	75 1f                	jne    c000596c <f_lseek+0x70>
c000594d:	e9 8b 01 00 00       	jmp    c0005add <f_lseek+0x1e1>
c0005952:	83 c9 ff             	or     ecx,0xffffffff
c0005955:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005958:	89 d8                	mov    eax,ebx
c000595a:	e8 ee d3 ff ff       	call   c0002d4d <fill_last_frag>
c000595f:	85 c0                	test   eax,eax
c0005961:	74 e3                	je     c0005946 <f_lseek+0x4a>
c0005963:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005967:	e9 e9 03 00 00       	jmp    c0005d55 <f_lseek+0x459>
c000596c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005971:	0f 85 ac 00 00 00    	jne    c0005a23 <f_lseek+0x127>
c0005977:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000597b:	0f 85 a2 00 00 00    	jne    c0005a23 <f_lseek+0x127>
c0005981:	8d 78 04             	lea    edi,[eax+0x4]
c0005984:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005987:	8b 00                	mov    eax,DWORD PTR [eax]
c0005989:	be 02 00 00 00       	mov    esi,0x2
c000598e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005992:	85 ed                	test   ebp,ebp
c0005994:	74 73                	je     c0005a09 <f_lseek+0x10d>
c0005996:	89 e9                	mov    ecx,ebp
c0005998:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599f:	89 ca                	mov    edx,ecx
c00059a1:	89 d8                	mov    eax,ebx
c00059a3:	ff 04 24             	inc    DWORD PTR [esp]
c00059a6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059aa:	e8 0d d4 ff ff       	call   c0002dbc <get_fat>
c00059af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b3:	83 f8 01             	cmp    eax,0x1
c00059b6:	77 11                	ja     c00059c9 <f_lseek+0xcd>
c00059b8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059bc:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059c4:	e9 8c 03 00 00       	jmp    c0005d55 <f_lseek+0x459>
c00059c9:	83 f8 ff             	cmp    eax,0xffffffff
c00059cc:	75 11                	jne    c00059df <f_lseek+0xe3>
c00059ce:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d2:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059da:	e9 76 03 00 00       	jmp    c0005d55 <f_lseek+0x459>
c00059df:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e2:	89 c1                	mov    ecx,eax
c00059e4:	39 c2                	cmp    edx,eax
c00059e6:	74 b7                	je     c000599f <f_lseek+0xa3>
c00059e8:	83 c6 02             	add    esi,0x2
c00059eb:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059ef:	72 0b                	jb     c00059fc <f_lseek+0x100>
c00059f1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f4:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f7:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f9:	83 c7 08             	add    edi,0x8
c00059fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a00:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a03:	76 04                	jbe    c0005a09 <f_lseek+0x10d>
c0005a05:	89 c5                	mov    ebp,eax
c0005a07:	eb 8d                	jmp    c0005996 <f_lseek+0x9a>
c0005a09:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a0c:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c0005a10:	89 30                	mov    DWORD PTR [eax],esi
c0005a12:	0f 87 35 03 00 00    	ja     c0005d4d <f_lseek+0x451>
c0005a18:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1e:	e9 32 03 00 00       	jmp    c0005d55 <f_lseek+0x459>
c0005a23:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a26:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a29:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a30:	19 f8                	sbb    eax,edi
c0005a32:	73 07                	jae    c0005a3b <f_lseek+0x13f>
c0005a34:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a37:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a3b:	89 f8                	mov    eax,edi
c0005a3d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a40:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a43:	09 f0                	or     eax,esi
c0005a45:	0f 84 0a 03 00 00    	je     c0005d55 <f_lseek+0x459>
c0005a4b:	89 f0                	mov    eax,esi
c0005a4d:	89 fa                	mov    edx,edi
c0005a4f:	83 c0 ff             	add    eax,0xffffffff
c0005a52:	83 d2 ff             	adc    edx,0xffffffff
c0005a55:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a58:	89 d1                	mov    ecx,edx
c0005a5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a5e:	89 c2                	mov    edx,eax
c0005a60:	89 d8                	mov    eax,ebx
c0005a62:	e8 b6 c2 ff ff       	call   c0001d1d <clmt_clust>
c0005a67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a6b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a6e:	89 c2                	mov    edx,eax
c0005a70:	89 c8                	mov    eax,ecx
c0005a72:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a76:	e8 81 c2 ff ff       	call   c0001cfc <clst2sect>
c0005a7b:	89 d1                	mov    ecx,edx
c0005a7d:	09 c1                	or     ecx,eax
c0005a7f:	0f 84 33 ff ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005a85:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a8b:	0f 84 c4 02 00 00    	je     c0005d55 <f_lseek+0x459>
c0005a91:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a95:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a99:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a9c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005aa0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005aa4:	4d                   	dec    ebp
c0005aa5:	31 ff                	xor    edi,edi
c0005aa7:	21 ee                	and    esi,ebp
c0005aa9:	01 c6                	add    esi,eax
c0005aab:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005aae:	11 d7                	adc    edi,edx
c0005ab0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ab3:	39 fa                	cmp    edx,edi
c0005ab5:	75 08                	jne    c0005abf <f_lseek+0x1c3>
c0005ab7:	39 f0                	cmp    eax,esi
c0005ab9:	0f 84 96 02 00 00    	je     c0005d55 <f_lseek+0x459>
c0005abf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ac2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ac6:	0f 89 58 02 00 00    	jns    c0005d24 <f_lseek+0x428>
c0005acc:	83 ec 0c             	sub    esp,0xc
c0005acf:	6a 01                	push   0x1
c0005ad1:	52                   	push   edx
c0005ad2:	50                   	push   eax
c0005ad3:	55                   	push   ebp
c0005ad4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ad8:	e9 32 02 00 00       	jmp    c0005d0f <f_lseek+0x413>
c0005add:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ae1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ae4:	74 16                	je     c0005afc <f_lseek+0x200>
c0005ae6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005aeb:	76 0f                	jbe    c0005afc <f_lseek+0x200>
c0005aed:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005af4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005afc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b02:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b05:	89 c7                	mov    edi,eax
c0005b07:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b0b:	73 0d                	jae    c0005b1a <f_lseek+0x21e>
c0005b0d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b11:	75 07                	jne    c0005b1a <f_lseek+0x21e>
c0005b13:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b1a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b1e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b21:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b24:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b2b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b32:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b35:	75 09                	jne    c0005b40 <f_lseek+0x244>
c0005b37:	31 f6                	xor    esi,esi
c0005b39:	31 ff                	xor    edi,edi
c0005b3b:	e9 87 01 00 00       	jmp    c0005cc7 <f_lseek+0x3cb>
c0005b40:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b44:	c1 e1 09             	shl    ecx,0x9
c0005b47:	89 d7                	mov    edi,edx
c0005b49:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b4d:	09 c7                	or     edi,eax
c0005b4f:	74 6b                	je     c0005bbc <f_lseek+0x2c0>
c0005b51:	83 c0 ff             	add    eax,0xffffffff
c0005b54:	89 cf                	mov    edi,ecx
c0005b56:	83 d2 ff             	adc    edx,0xffffffff
c0005b59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b5d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b64:	83 c0 ff             	add    eax,0xffffffff
c0005b67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b6b:	83 d2 ff             	adc    edx,0xffffffff
c0005b6e:	31 ed                	xor    ebp,ebp
c0005b70:	55                   	push   ebp
c0005b71:	51                   	push   ecx
c0005b72:	52                   	push   edx
c0005b73:	50                   	push   eax
c0005b74:	e8 a3 99 01 00       	call   c001f51c <__udivdi3>
c0005b79:	83 c4 10             	add    esp,0x10
c0005b7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b80:	89 d6                	mov    esi,edx
c0005b82:	55                   	push   ebp
c0005b83:	57                   	push   edi
c0005b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b8c:	e8 8b 99 01 00       	call   c001f51c <__udivdi3>
c0005b91:	83 c4 10             	add    esp,0x10
c0005b94:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b98:	19 d6                	sbb    esi,edx
c0005b9a:	72 20                	jb     c0005bbc <f_lseek+0x2c0>
c0005b9c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005ba0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ba4:	f7 d9                	neg    ecx
c0005ba6:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005baa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bad:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bb0:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bb3:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005bb7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bba:	eb 28                	jmp    c0005be4 <f_lseek+0x2e8>
c0005bbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bbf:	85 c0                	test   eax,eax
c0005bc1:	75 1e                	jne    c0005be1 <f_lseek+0x2e5>
c0005bc3:	31 d2                	xor    edx,edx
c0005bc5:	89 d8                	mov    eax,ebx
c0005bc7:	e8 de d4 ff ff       	call   c00030aa <create_chain>
c0005bcc:	83 f8 01             	cmp    eax,0x1
c0005bcf:	0f 84 e3 fd ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005bd5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bd8:	0f 84 f0 fd ff ff    	je     c00059ce <f_lseek+0xd2>
c0005bde:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005be1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005be4:	85 c0                	test   eax,eax
c0005be6:	0f 84 4b ff ff ff    	je     c0005b37 <f_lseek+0x23b>
c0005bec:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bf0:	31 ff                	xor    edi,edi
c0005bf2:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bf5:	89 fd                	mov    ebp,edi
c0005bf7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bfb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bfe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c01:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005c05:	73 7d                	jae    c0005c84 <f_lseek+0x388>
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 d6                	add    esi,edx
c0005c10:	11 cf                	adc    edi,ecx
c0005c12:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005c15:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005c18:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005c1b:	f6 c2 02             	test   dl,0x2
c0005c1e:	74 25                	je     c0005c45 <f_lseek+0x349>
c0005c20:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c23:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c26:	19 f9                	sbb    ecx,edi
c0005c28:	73 0c                	jae    c0005c36 <f_lseek+0x33a>
c0005c2a:	83 ca 40             	or     edx,0x40
c0005c2d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c30:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c33:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c36:	89 c2                	mov    edx,eax
c0005c38:	89 d8                	mov    eax,ebx
c0005c3a:	e8 6b d4 ff ff       	call   c00030aa <create_chain>
c0005c3f:	85 c0                	test   eax,eax
c0005c41:	75 0b                	jne    c0005c4e <f_lseek+0x352>
c0005c43:	eb 30                	jmp    c0005c75 <f_lseek+0x379>
c0005c45:	89 c2                	mov    edx,eax
c0005c47:	89 d8                	mov    eax,ebx
c0005c49:	e8 6e d1 ff ff       	call   c0002dbc <get_fat>
c0005c4e:	83 f8 ff             	cmp    eax,0xffffffff
c0005c51:	0f 84 77 fd ff ff    	je     c00059ce <f_lseek+0xd2>
c0005c57:	83 f8 01             	cmp    eax,0x1
c0005c5a:	0f 86 58 fd ff ff    	jbe    c00059b8 <f_lseek+0xbc>
c0005c60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c64:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c67:	0f 86 4b fd ff ff    	jbe    c00059b8 <f_lseek+0xbc>
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	e9 77 ff ff ff       	jmp    c0005bec <f_lseek+0x2f0>
c0005c75:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c87:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c8b:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c8e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c91:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c94:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c9a:	0f 84 97 fe ff ff    	je     c0005b37 <f_lseek+0x23b>
c0005ca0:	89 c2                	mov    edx,eax
c0005ca2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ca6:	e8 51 c0 ff ff       	call   c0001cfc <clst2sect>
c0005cab:	89 d7                	mov    edi,edx
c0005cad:	09 c7                	or     edi,eax
c0005caf:	0f 84 03 fd ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005cb5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cb9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cbc:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc0:	c1 ef 09             	shr    edi,0x9
c0005cc3:	01 c6                	add    esi,eax
c0005cc5:	11 d7                	adc    edi,edx
c0005cc7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cca:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ccd:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cd0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cd3:	19 d1                	sbb    ecx,edx
c0005cd5:	73 0a                	jae    c0005ce1 <f_lseek+0x3e5>
c0005cd7:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cdb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cde:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ce1:	a9 ff 01 00 00       	test   eax,0x1ff
c0005ce6:	74 6d                	je     c0005d55 <f_lseek+0x459>
c0005ce8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	39 fa                	cmp    edx,edi
c0005cf0:	75 04                	jne    c0005cf6 <f_lseek+0x3fa>
c0005cf2:	39 f0                	cmp    eax,esi
c0005cf4:	74 5f                	je     c0005d55 <f_lseek+0x459>
c0005cf6:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cf9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cfd:	79 25                	jns    c0005d24 <f_lseek+0x428>
c0005cff:	83 ec 0c             	sub    esp,0xc
c0005d02:	6a 01                	push   0x1
c0005d04:	52                   	push   edx
c0005d05:	50                   	push   eax
c0005d06:	55                   	push   ebp
c0005d07:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d0b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d0f:	50                   	push   eax
c0005d10:	e8 19 bd ff ff       	call   c0001a2e <disk_write>
c0005d15:	83 c4 20             	add    esp,0x20
c0005d18:	85 c0                	test   eax,eax
c0005d1a:	0f 85 ae fc ff ff    	jne    c00059ce <f_lseek+0xd2>
c0005d20:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d24:	83 ec 0c             	sub    esp,0xc
c0005d27:	6a 01                	push   0x1
c0005d29:	57                   	push   edi
c0005d2a:	56                   	push   esi
c0005d2b:	55                   	push   ebp
c0005d2c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d30:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d34:	50                   	push   eax
c0005d35:	e8 de bc ff ff       	call   c0001a18 <disk_read>
c0005d3a:	83 c4 20             	add    esp,0x20
c0005d3d:	85 c0                	test   eax,eax
c0005d3f:	0f 85 89 fc ff ff    	jne    c00059ce <f_lseek+0xd2>
c0005d45:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d48:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d4b:	eb 08                	jmp    c0005d55 <f_lseek+0x459>
c0005d4d:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d59:	83 c4 3c             	add    esp,0x3c
c0005d5c:	5b                   	pop    ebx
c0005d5d:	5e                   	pop    esi
c0005d5e:	5f                   	pop    edi
c0005d5f:	5d                   	pop    ebp
c0005d60:	c3                   	ret    

c0005d61 <f_opendir>:
c0005d61:	56                   	push   esi
c0005d62:	b8 09 00 00 00       	mov    eax,0x9
c0005d67:	53                   	push   ebx
c0005d68:	83 ec 24             	sub    esp,0x24
c0005d6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d6f:	85 db                	test   ebx,ebx
c0005d71:	0f 84 e6 00 00 00    	je     c0005e5d <f_opendir+0xfc>
c0005d77:	31 c9                	xor    ecx,ecx
c0005d79:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d7d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d81:	e8 5f c7 ff ff       	call   c00024e5 <mount_volume>
c0005d86:	85 c0                	test   eax,eax
c0005d88:	0f 85 c9 00 00 00    	jne    c0005e57 <f_opendir+0xf6>
c0005d8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d92:	83 ec 0c             	sub    esp,0xc
c0005d95:	89 03                	mov    DWORD PTR [ebx],eax
c0005d97:	68 60 04 00 00       	push   0x460
c0005d9c:	e8 a8 24 00 00       	call   c0008249 <ff_memalloc>
c0005da1:	89 c6                	mov    esi,eax
c0005da3:	83 c4 10             	add    esp,0x10
c0005da6:	b8 11 00 00 00       	mov    eax,0x11
c0005dab:	85 f6                	test   esi,esi
c0005dad:	0f 84 aa 00 00 00    	je     c0005e5d <f_opendir+0xfc>
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dbd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dc0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dc3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dc7:	89 d8                	mov    eax,ebx
c0005dc9:	e8 83 ee ff ff       	call   c0004c51 <follow_path>
c0005dce:	85 c0                	test   eax,eax
c0005dd0:	75 61                	jne    c0005e33 <f_opendir+0xd2>
c0005dd2:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dd6:	78 46                	js     c0005e1e <f_opendir+0xbd>
c0005dd8:	b8 05 00 00 00       	mov    eax,0x5
c0005ddd:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005de1:	74 50                	je     c0005e33 <f_opendir+0xd2>
c0005de3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de7:	8a 01                	mov    al,BYTE PTR [ecx]
c0005de9:	3c 04                	cmp    al,0x4
c0005deb:	75 26                	jne    c0005e13 <f_opendir+0xb2>
c0005ded:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005df0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005df3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005df6:	30 d2                	xor    dl,dl
c0005df8:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005dfc:	09 c2                	or     edx,eax
c0005dfe:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e01:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e04:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e07:	89 da                	mov    edx,ebx
c0005e09:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e0c:	e8 06 ee ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0005e11:	eb 0b                	jmp    c0005e1e <f_opendir+0xbd>
c0005e13:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e16:	e8 ab ed ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0005e1b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e22:	31 d2                	xor    edx,edx
c0005e24:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e28:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 7f d1 ff ff       	call   c0002fb2 <dir_sdi>
c0005e33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	56                   	push   esi
c0005e3b:	e8 1f 24 00 00       	call   c000825f <ff_memfree>
c0005e40:	83 c4 10             	add    esp,0x10
c0005e43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e47:	83 f8 04             	cmp    eax,0x4
c0005e4a:	74 06                	je     c0005e52 <f_opendir+0xf1>
c0005e4c:	85 c0                	test   eax,eax
c0005e4e:	74 0d                	je     c0005e5d <f_opendir+0xfc>
c0005e50:	eb 05                	jmp    c0005e57 <f_opendir+0xf6>
c0005e52:	b8 05 00 00 00       	mov    eax,0x5
c0005e57:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e5d:	83 c4 24             	add    esp,0x24
c0005e60:	5b                   	pop    ebx
c0005e61:	5e                   	pop    esi
c0005e62:	c3                   	ret    

c0005e63 <f_closedir>:
c0005e63:	53                   	push   ebx
c0005e64:	83 ec 18             	sub    esp,0x18
c0005e67:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e6b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e6f:	89 d8                	mov    eax,ebx
c0005e71:	e8 e9 c2 ff ff       	call   c000215f <validate>
c0005e76:	85 c0                	test   eax,eax
c0005e78:	75 06                	jne    c0005e80 <f_closedir+0x1d>
c0005e7a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e80:	83 c4 18             	add    esp,0x18
c0005e83:	5b                   	pop    ebx
c0005e84:	c3                   	ret    

c0005e85 <f_readdir>:
c0005e85:	57                   	push   edi
c0005e86:	56                   	push   esi
c0005e87:	53                   	push   ebx
c0005e88:	83 ec 20             	sub    esp,0x20
c0005e8b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e8f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e93:	89 d8                	mov    eax,ebx
c0005e95:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e99:	e8 c1 c2 ff ff       	call   c000215f <validate>
c0005e9e:	85 c0                	test   eax,eax
c0005ea0:	75 77                	jne    c0005f19 <f_readdir+0x94>
c0005ea2:	85 ff                	test   edi,edi
c0005ea4:	75 0b                	jne    c0005eb1 <f_readdir+0x2c>
c0005ea6:	31 d2                	xor    edx,edx
c0005ea8:	89 d8                	mov    eax,ebx
c0005eaa:	e8 03 d1 ff ff       	call   c0002fb2 <dir_sdi>
c0005eaf:	eb 68                	jmp    c0005f19 <f_readdir+0x94>
c0005eb1:	83 ec 0c             	sub    esp,0xc
c0005eb4:	68 60 04 00 00       	push   0x460
c0005eb9:	e8 8b 23 00 00       	call   c0008249 <ff_memalloc>
c0005ebe:	89 c6                	mov    esi,eax
c0005ec0:	83 c4 10             	add    esp,0x10
c0005ec3:	b8 11 00 00 00       	mov    eax,0x11
c0005ec8:	85 f6                	test   esi,esi
c0005eca:	74 4d                	je     c0005f19 <f_readdir+0x94>
c0005ecc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ed0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ed6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ed9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005edc:	31 d2                	xor    edx,edx
c0005ede:	89 d8                	mov    eax,ebx
c0005ee0:	e8 df d8 ff ff       	call   c00037c4 <dir_read>
c0005ee5:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005eea:	75 19                	jne    c0005f05 <f_readdir+0x80>
c0005eec:	89 fa                	mov    edx,edi
c0005eee:	89 d8                	mov    eax,ebx
c0005ef0:	e8 d0 ea ff ff       	call   c00049c5 <get_fileinfo>
c0005ef5:	31 d2                	xor    edx,edx
c0005ef7:	89 d8                	mov    eax,ebx
c0005ef9:	e8 0e d6 ff ff       	call   c000350c <dir_next>
c0005efe:	83 f8 04             	cmp    eax,0x4
c0005f01:	75 02                	jne    c0005f05 <f_readdir+0x80>
c0005f03:	31 c0                	xor    eax,eax
c0005f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f09:	83 ec 0c             	sub    esp,0xc
c0005f0c:	56                   	push   esi
c0005f0d:	e8 4d 23 00 00       	call   c000825f <ff_memfree>
c0005f12:	83 c4 10             	add    esp,0x10
c0005f15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f19:	83 c4 20             	add    esp,0x20
c0005f1c:	5b                   	pop    ebx
c0005f1d:	5e                   	pop    esi
c0005f1e:	5f                   	pop    edi
c0005f1f:	c3                   	ret    

c0005f20 <f_stat>:
c0005f20:	57                   	push   edi
c0005f21:	31 c9                	xor    ecx,ecx
c0005f23:	56                   	push   esi
c0005f24:	53                   	push   ebx
c0005f25:	83 ec 50             	sub    esp,0x50
c0005f28:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f2c:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f30:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f34:	e8 ac c5 ff ff       	call   c00024e5 <mount_volume>
c0005f39:	89 c3                	mov    ebx,eax
c0005f3b:	85 c0                	test   eax,eax
c0005f3d:	75 67                	jne    c0005fa6 <f_stat+0x86>
c0005f3f:	83 ec 0c             	sub    esp,0xc
c0005f42:	bb 11 00 00 00       	mov    ebx,0x11
c0005f47:	68 60 04 00 00       	push   0x460
c0005f4c:	e8 f8 22 00 00       	call   c0008249 <ff_memalloc>
c0005f51:	83 c4 10             	add    esp,0x10
c0005f54:	89 c6                	mov    esi,eax
c0005f56:	85 c0                	test   eax,eax
c0005f58:	74 4c                	je     c0005fa6 <f_stat+0x86>
c0005f5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f5e:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f64:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f67:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f6a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f6e:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f72:	e8 da ec ff ff       	call   c0004c51 <follow_path>
c0005f77:	89 c3                	mov    ebx,eax
c0005f79:	85 c0                	test   eax,eax
c0005f7b:	75 1d                	jne    c0005f9a <f_stat+0x7a>
c0005f7d:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f82:	78 11                	js     c0005f95 <f_stat+0x75>
c0005f84:	85 ff                	test   edi,edi
c0005f86:	74 12                	je     c0005f9a <f_stat+0x7a>
c0005f88:	89 fa                	mov    edx,edi
c0005f8a:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8e:	e8 32 ea ff ff       	call   c00049c5 <get_fileinfo>
c0005f93:	eb 05                	jmp    c0005f9a <f_stat+0x7a>
c0005f95:	bb 06 00 00 00       	mov    ebx,0x6
c0005f9a:	83 ec 0c             	sub    esp,0xc
c0005f9d:	56                   	push   esi
c0005f9e:	e8 bc 22 00 00       	call   c000825f <ff_memfree>
c0005fa3:	83 c4 10             	add    esp,0x10
c0005fa6:	83 c4 50             	add    esp,0x50
c0005fa9:	89 d8                	mov    eax,ebx
c0005fab:	5b                   	pop    ebx
c0005fac:	5e                   	pop    esi
c0005fad:	5f                   	pop    edi
c0005fae:	c3                   	ret    

c0005faf <f_getfree>:
c0005faf:	55                   	push   ebp
c0005fb0:	31 c9                	xor    ecx,ecx
c0005fb2:	57                   	push   edi
c0005fb3:	56                   	push   esi
c0005fb4:	53                   	push   ebx
c0005fb5:	83 ec 5c             	sub    esp,0x5c
c0005fb8:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fbc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fc0:	e8 20 c5 ff ff       	call   c00024e5 <mount_volume>
c0005fc5:	89 c5                	mov    ebp,eax
c0005fc7:	85 c0                	test   eax,eax
c0005fc9:	0f 85 be 01 00 00    	jne    c000618d <f_getfree+0x1de>
c0005fcf:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fd7:	89 02                	mov    DWORD PTR [edx],eax
c0005fd9:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fdc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fdf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fe3:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fe6:	39 f2                	cmp    edx,esi
c0005fe8:	77 0b                	ja     c0005ff5 <f_getfree+0x46>
c0005fea:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fee:	89 10                	mov    DWORD PTR [eax],edx
c0005ff0:	e9 98 01 00 00       	jmp    c000618d <f_getfree+0x1de>
c0005ff5:	8a 10                	mov    dl,BYTE PTR [eax]
c0005ff7:	80 fa 01             	cmp    dl,0x1
c0005ffa:	75 3a                	jne    c0006036 <f_getfree+0x87>
c0005ffc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006000:	be 02 00 00 00       	mov    esi,0x2
c0006005:	31 db                	xor    ebx,ebx
c0006007:	89 f2                	mov    edx,esi
c0006009:	8d 44 24 28          	lea    eax,[esp+0x28]
c000600d:	e8 aa cd ff ff       	call   c0002dbc <get_fat>
c0006012:	83 f8 ff             	cmp    eax,0xffffffff
c0006015:	0f 84 51 01 00 00    	je     c000616c <f_getfree+0x1bd>
c000601b:	83 f8 01             	cmp    eax,0x1
c000601e:	0f 84 4f 01 00 00    	je     c0006173 <f_getfree+0x1c4>
c0006024:	83 d3 00             	adc    ebx,0x0
c0006027:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602b:	46                   	inc    esi
c000602c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000602f:	77 d6                	ja     c0006007 <f_getfree+0x58>
c0006031:	e9 46 01 00 00       	jmp    c000617c <f_getfree+0x1cd>
c0006036:	80 fa 04             	cmp    dl,0x4
c0006039:	0f 85 94 00 00 00    	jne    c00060d3 <f_getfree+0x124>
c000603f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006042:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006045:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006049:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000604d:	31 ff                	xor    edi,edi
c000604f:	31 db                	xor    ebx,ebx
c0006051:	85 ff                	test   edi,edi
c0006053:	75 3f                	jne    c0006094 <f_getfree+0xe5>
c0006055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006059:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000605d:	83 c0 01             	add    eax,0x1
c0006060:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006064:	83 d2 00             	adc    edx,0x0
c0006067:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000606b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000606f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006073:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006077:	e8 be c1 ff ff       	call   c000223a <move_window>
c000607c:	85 c0                	test   eax,eax
c000607e:	0f 85 f6 00 00 00    	jne    c000617a <f_getfree+0x1cb>
c0006084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006088:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000608c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006090:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006094:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006098:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c000609c:	88 c2                	mov    dl,al
c000609e:	b8 08 00 00 00       	mov    eax,0x8
c00060a3:	29 f0                	sub    eax,esi
c00060a5:	89 c1                	mov    ecx,eax
c00060a7:	01 f1                	add    ecx,esi
c00060a9:	74 18                	je     c00060c3 <f_getfree+0x114>
c00060ab:	85 f6                	test   esi,esi
c00060ad:	74 14                	je     c00060c3 <f_getfree+0x114>
c00060af:	88 d1                	mov    cl,dl
c00060b1:	83 e1 01             	and    ecx,0x1
c00060b4:	80 f9 01             	cmp    cl,0x1
c00060b7:	88 d1                	mov    cl,dl
c00060b9:	83 d3 00             	adc    ebx,0x0
c00060bc:	4e                   	dec    esi
c00060bd:	d0 e9                	shr    cl,1
c00060bf:	88 ca                	mov    dl,cl
c00060c1:	eb e2                	jmp    c00060a5 <f_getfree+0xf6>
c00060c3:	47                   	inc    edi
c00060c4:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060ca:	85 f6                	test   esi,esi
c00060cc:	75 83                	jne    c0006051 <f_getfree+0xa2>
c00060ce:	e9 a9 00 00 00       	jmp    c000617c <f_getfree+0x1cd>
c00060d3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d6:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060e1:	31 db                	xor    ebx,ebx
c00060e3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060e8:	75 1b                	jne    c0006105 <f_getfree+0x156>
c00060ea:	89 d6                	mov    esi,edx
c00060ec:	89 cf                	mov    edi,ecx
c00060ee:	83 c6 01             	add    esi,0x1
c00060f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060f5:	83 d7 00             	adc    edi,0x0
c00060f8:	e8 3d c1 ff ff       	call   c000223a <move_window>
c00060fd:	85 c0                	test   eax,eax
c00060ff:	75 79                	jne    c000617a <f_getfree+0x1cb>
c0006101:	89 f2                	mov    edx,esi
c0006103:	89 f9                	mov    ecx,edi
c0006105:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0006109:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006111:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006115:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c0006119:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000611d:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006120:	75 15                	jne    c0006137 <f_getfree+0x188>
c0006122:	e8 3c b9 ff ff       	call   c0001a63 <ld_word>
c0006127:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000612b:	66 83 f8 01          	cmp    ax,0x1
c000612f:	83 d3 00             	adc    ebx,0x0
c0006132:	83 c6 02             	add    esi,0x2
c0006135:	eb 17                	jmp    c000614e <f_getfree+0x19f>
c0006137:	e8 34 b9 ff ff       	call   c0001a70 <ld_dword>
c000613c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006140:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006145:	83 f8 01             	cmp    eax,0x1
c0006148:	83 d3 00             	adc    ebx,0x0
c000614b:	83 c6 04             	add    esi,0x4
c000614e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006154:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006158:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000615c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006160:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006164:	0f 85 79 ff ff ff    	jne    c00060e3 <f_getfree+0x134>
c000616a:	eb 10                	jmp    c000617c <f_getfree+0x1cd>
c000616c:	bd 01 00 00 00       	mov    ebp,0x1
c0006171:	eb 09                	jmp    c000617c <f_getfree+0x1cd>
c0006173:	bd 02 00 00 00       	mov    ebp,0x2
c0006178:	eb 02                	jmp    c000617c <f_getfree+0x1cd>
c000617a:	89 c5                	mov    ebp,eax
c000617c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006180:	89 18                	mov    DWORD PTR [eax],ebx
c0006182:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006186:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000618a:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000618d:	83 c4 5c             	add    esp,0x5c
c0006190:	89 e8                	mov    eax,ebp
c0006192:	5b                   	pop    ebx
c0006193:	5e                   	pop    esi
c0006194:	5f                   	pop    edi
c0006195:	5d                   	pop    ebp
c0006196:	c3                   	ret    

c0006197 <f_truncate>:
c0006197:	56                   	push   esi
c0006198:	53                   	push   ebx
c0006199:	83 ec 14             	sub    esp,0x14
c000619c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061a0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061a4:	89 d8                	mov    eax,ebx
c00061a6:	e8 b4 bf ff ff       	call   c000215f <validate>
c00061ab:	89 c6                	mov    esi,eax
c00061ad:	85 c0                	test   eax,eax
c00061af:	0f 85 d2 00 00 00    	jne    c0006287 <f_truncate+0xf0>
c00061b5:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b9:	85 f6                	test   esi,esi
c00061bb:	0f 85 c6 00 00 00    	jne    c0006287 <f_truncate+0xf0>
c00061c1:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c5:	0f 84 b7 00 00 00    	je     c0006282 <f_truncate+0xeb>
c00061cb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061ce:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061d1:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061d4:	89 d1                	mov    ecx,edx
c00061d6:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d9:	0f 83 a8 00 00 00    	jae    c0006287 <f_truncate+0xf0>
c00061df:	09 c2                	or     edx,eax
c00061e1:	75 15                	jne    c00061f8 <f_truncate+0x61>
c00061e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e6:	31 c9                	xor    ecx,ecx
c00061e8:	89 d8                	mov    eax,ebx
c00061ea:	e8 bc d0 ff ff       	call   c00032ab <remove_chain>
c00061ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f6:	eb 35                	jmp    c000622d <f_truncate+0x96>
c00061f8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061fb:	89 d8                	mov    eax,ebx
c00061fd:	e8 ba cb ff ff       	call   c0002dbc <get_fat>
c0006202:	89 c2                	mov    edx,eax
c0006204:	b8 01 00 00 00       	mov    eax,0x1
c0006209:	83 fa ff             	cmp    edx,0xffffffff
c000620c:	74 1f                	je     c000622d <f_truncate+0x96>
c000620e:	b8 02 00 00 00       	mov    eax,0x2
c0006213:	83 fa 01             	cmp    edx,0x1
c0006216:	74 15                	je     c000622d <f_truncate+0x96>
c0006218:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000621c:	31 c0                	xor    eax,eax
c000621e:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006221:	76 0a                	jbe    c000622d <f_truncate+0x96>
c0006223:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006226:	89 d8                	mov    eax,ebx
c0006228:	e8 7e d0 ff ff       	call   c00032ab <remove_chain>
c000622d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006230:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006233:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006236:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006239:	83 ca 40             	or     edx,0x40
c000623c:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000623f:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006242:	85 c0                	test   eax,eax
c0006244:	75 35                	jne    c000627b <f_truncate+0xe4>
c0006246:	84 d2                	test   dl,dl
c0006248:	79 3d                	jns    c0006287 <f_truncate+0xf0>
c000624a:	83 ec 0c             	sub    esp,0xc
c000624d:	8d 43 50             	lea    eax,[ebx+0x50]
c0006250:	6a 01                	push   0x1
c0006252:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006255:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006258:	50                   	push   eax
c0006259:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000625d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006261:	50                   	push   eax
c0006262:	e8 c7 b7 ff ff       	call   c0001a2e <disk_write>
c0006267:	83 c4 20             	add    esp,0x20
c000626a:	85 c0                	test   eax,eax
c000626c:	75 08                	jne    c0006276 <f_truncate+0xdf>
c000626e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006272:	31 f6                	xor    esi,esi
c0006274:	eb 11                	jmp    c0006287 <f_truncate+0xf0>
c0006276:	b8 01 00 00 00       	mov    eax,0x1
c000627b:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000627e:	89 c6                	mov    esi,eax
c0006280:	eb 05                	jmp    c0006287 <f_truncate+0xf0>
c0006282:	be 07 00 00 00       	mov    esi,0x7
c0006287:	83 c4 14             	add    esp,0x14
c000628a:	89 f0                	mov    eax,esi
c000628c:	5b                   	pop    ebx
c000628d:	5e                   	pop    esi
c000628e:	c3                   	ret    

c000628f <f_unlink>:
c000628f:	56                   	push   esi
c0006290:	b9 02 00 00 00       	mov    ecx,0x2
c0006295:	53                   	push   ebx
c0006296:	81 ec e4 00 00 00    	sub    esp,0xe4
c000629c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062a0:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a7:	e8 39 c2 ff ff       	call   c00024e5 <mount_volume>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 53 01 00 00    	jne    c0006407 <f_unlink+0x178>
c00062b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b8:	83 ec 0c             	sub    esp,0xc
c00062bb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062bf:	68 60 04 00 00       	push   0x460
c00062c4:	e8 80 1f 00 00       	call   c0008249 <ff_memalloc>
c00062c9:	89 c3                	mov    ebx,eax
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	b8 11 00 00 00       	mov    eax,0x11
c00062d3:	85 db                	test   ebx,ebx
c00062d5:	0f 84 2c 01 00 00    	je     c0006407 <f_unlink+0x178>
c00062db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062df:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062eb:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062f2:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f6:	e8 56 e9 ff ff       	call   c0004c51 <follow_path>
c00062fb:	85 c0                	test   eax,eax
c00062fd:	0f 85 f0 00 00 00    	jne    c00063f3 <f_unlink+0x164>
c0006303:	b8 06 00 00 00       	mov    eax,0x6
c0006308:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006310:	0f 88 dd 00 00 00    	js     c00063f3 <f_unlink+0x164>
c0006316:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000631b:	74 0a                	je     c0006327 <f_unlink+0x98>
c000631d:	b8 07 00 00 00       	mov    eax,0x7
c0006322:	e9 cc 00 00 00       	jmp    c00063f3 <f_unlink+0x164>
c0006327:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000632b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632f:	8a 02                	mov    al,BYTE PTR [edx]
c0006331:	3c 04                	cmp    al,0x4
c0006333:	75 12                	jne    c0006347 <f_unlink+0xb8>
c0006335:	8d 42 10             	lea    eax,[edx+0x10]
c0006338:	8d 54 24 20          	lea    edx,[esp+0x20]
c000633c:	e8 d6 e8 ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0006341:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006345:	eb 0e                	jmp    c0006355 <f_unlink+0xc6>
c0006347:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000634e:	e8 73 e8 ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0006353:	89 c6                	mov    esi,eax
c0006355:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000635a:	75 20                	jne    c000637c <f_unlink+0xed>
c000635c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006360:	e8 d6 d6 ff ff       	call   c0003a3b <dir_remove>
c0006365:	85 c0                	test   eax,eax
c0006367:	75 7d                	jne    c00063e6 <f_unlink+0x157>
c0006369:	85 f6                	test   esi,esi
c000636b:	74 79                	je     c00063e6 <f_unlink+0x157>
c000636d:	31 c9                	xor    ecx,ecx
c000636f:	89 f2                	mov    edx,esi
c0006371:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006375:	e8 31 cf ff ff       	call   c00032ab <remove_chain>
c000637a:	eb 6a                	jmp    c00063e6 <f_unlink+0x157>
c000637c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006380:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006387:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000638e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006391:	75 21                	jne    c00063b4 <f_unlink+0x125>
c0006393:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006397:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000639b:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063a2:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063a6:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063ad:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063b4:	31 d2                	xor    edx,edx
c00063b6:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bd:	e8 f0 cb ff ff       	call   c0002fb2 <dir_sdi>
c00063c2:	85 c0                	test   eax,eax
c00063c4:	75 2d                	jne    c00063f3 <f_unlink+0x164>
c00063c6:	31 d2                	xor    edx,edx
c00063c8:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063cf:	e8 f0 d3 ff ff       	call   c00037c4 <dir_read>
c00063d4:	85 c0                	test   eax,eax
c00063d6:	0f 84 41 ff ff ff    	je     c000631d <f_unlink+0x8e>
c00063dc:	83 f8 04             	cmp    eax,0x4
c00063df:	75 12                	jne    c00063f3 <f_unlink+0x164>
c00063e1:	e9 76 ff ff ff       	jmp    c000635c <f_unlink+0xcd>
c00063e6:	85 c0                	test   eax,eax
c00063e8:	75 09                	jne    c00063f3 <f_unlink+0x164>
c00063ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063ee:	e8 55 df ff ff       	call   c0004348 <sync_fs>
c00063f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f7:	83 ec 0c             	sub    esp,0xc
c00063fa:	53                   	push   ebx
c00063fb:	e8 5f 1e 00 00       	call   c000825f <ff_memfree>
c0006400:	83 c4 10             	add    esp,0x10
c0006403:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006407:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640d:	5b                   	pop    ebx
c000640e:	5e                   	pop    esi
c000640f:	c3                   	ret    

c0006410 <f_mkdir>:
c0006410:	57                   	push   edi
c0006411:	b9 02 00 00 00       	mov    ecx,0x2
c0006416:	56                   	push   esi
c0006417:	53                   	push   ebx
c0006418:	83 c4 80             	add    esp,0xffffff80
c000641b:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641f:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006426:	e8 ba c0 ff ff       	call   c00024e5 <mount_volume>
c000642b:	89 c3                	mov    ebx,eax
c000642d:	85 c0                	test   eax,eax
c000642f:	0f 85 fe 01 00 00    	jne    c0006633 <f_mkdir+0x223>
c0006435:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006439:	83 ec 0c             	sub    esp,0xc
c000643c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006440:	bb 11 00 00 00       	mov    ebx,0x11
c0006445:	68 60 04 00 00       	push   0x460
c000644a:	e8 fa 1d 00 00       	call   c0008249 <ff_memalloc>
c000644f:	83 c4 10             	add    esp,0x10
c0006452:	89 c7                	mov    edi,eax
c0006454:	85 c0                	test   eax,eax
c0006456:	0f 84 d7 01 00 00    	je     c0006633 <f_mkdir+0x223>
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000646c:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006473:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006477:	e8 d5 e7 ff ff       	call   c0004c51 <follow_path>
c000647c:	89 c3                	mov    ebx,eax
c000647e:	85 c0                	test   eax,eax
c0006480:	74 3e                	je     c00064c0 <f_mkdir+0xb0>
c0006482:	83 f8 04             	cmp    eax,0x4
c0006485:	75 3e                	jne    c00064c5 <f_mkdir+0xb5>
c0006487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648b:	31 d2                	xor    edx,edx
c000648d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006491:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006495:	e8 10 cc ff ff       	call   c00030aa <create_chain>
c000649a:	89 c6                	mov    esi,eax
c000649c:	85 c0                	test   eax,eax
c000649e:	74 0c                	je     c00064ac <f_mkdir+0x9c>
c00064a0:	bb 02 00 00 00       	mov    ebx,0x2
c00064a5:	83 f8 01             	cmp    eax,0x1
c00064a8:	74 07                	je     c00064b1 <f_mkdir+0xa1>
c00064aa:	eb 2a                	jmp    c00064d6 <f_mkdir+0xc6>
c00064ac:	bb 07 00 00 00       	mov    ebx,0x7
c00064b1:	31 c9                	xor    ecx,ecx
c00064b3:	89 f2                	mov    edx,esi
c00064b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b9:	e8 ed cd ff ff       	call   c00032ab <remove_chain>
c00064be:	eb 05                	jmp    c00064c5 <f_mkdir+0xb5>
c00064c0:	bb 08 00 00 00       	mov    ebx,0x8
c00064c5:	83 ec 0c             	sub    esp,0xc
c00064c8:	57                   	push   edi
c00064c9:	e8 91 1d 00 00       	call   c000825f <ff_memfree>
c00064ce:	83 c4 10             	add    esp,0x10
c00064d1:	e9 5d 01 00 00       	jmp    c0006633 <f_mkdir+0x223>
c00064d6:	bb 01 00 00 00       	mov    ebx,0x1
c00064db:	83 f8 ff             	cmp    eax,0xffffffff
c00064de:	74 d1                	je     c00064b1 <f_mkdir+0xa1>
c00064e0:	89 f2                	mov    edx,esi
c00064e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e6:	e8 08 cf ff ff       	call   c00033f3 <dir_clear>
c00064eb:	89 c3                	mov    ebx,eax
c00064ed:	85 c0                	test   eax,eax
c00064ef:	75 c0                	jne    c00064b1 <f_mkdir+0xa1>
c00064f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f8:	74 69                	je     c0006563 <f_mkdir+0x153>
c00064fa:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ff:	83 c0 54             	add    eax,0x54
c0006502:	ba 20 00 00 00       	mov    edx,0x20
c0006507:	e8 eb b5 ff ff       	call   c0001af7 <mem_set>
c000650c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006510:	83 c0 6a             	add    eax,0x6a
c0006513:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0006517:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c000651b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006520:	e8 b4 b5 ff ff       	call   c0001ad9 <st_dword>
c0006525:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006529:	89 f1                	mov    ecx,esi
c000652b:	8d 50 54             	lea    edx,[eax+0x54]
c000652e:	e8 bc e6 ff ff       	call   c0004bef <st_clust.isra.1>
c0006533:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006537:	b9 20 00 00 00       	mov    ecx,0x20
c000653c:	8d 50 54             	lea    edx,[eax+0x54]
c000653f:	83 c0 74             	add    eax,0x74
c0006542:	e8 9b b5 ff ff       	call   c0001ae2 <mem_cpy>
c0006547:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654f:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006553:	8d 50 74             	lea    edx,[eax+0x74]
c0006556:	e8 94 e6 ff ff       	call   c0004bef <st_clust.isra.1>
c000655b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006563:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006567:	e8 59 db ff ff       	call   c00040c5 <dir_register>
c000656c:	89 c3                	mov    ebx,eax
c000656e:	85 c0                	test   eax,eax
c0006570:	0f 85 3b ff ff ff    	jne    c00064b1 <f_mkdir+0xa1>
c0006576:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000657a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657d:	75 74                	jne    c00065f3 <f_mkdir+0x1e3>
c000657f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006582:	ba 00 00 21 50       	mov    edx,0x50210000
c0006587:	83 c0 0c             	add    eax,0xc
c000658a:	e8 4a b5 ff ff       	call   c0001ad9 <st_dword>
c000658f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006593:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006596:	89 f2                	mov    edx,esi
c0006598:	83 c0 34             	add    eax,0x34
c000659b:	e8 39 b5 ff ff       	call   c0001ad9 <st_dword>
c00065a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a4:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ae:	83 c0 38             	add    eax,0x38
c00065b1:	e8 23 b5 ff ff       	call   c0001ad9 <st_dword>
c00065b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ba:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c4:	83 c0 28             	add    eax,0x28
c00065c7:	e8 0d b5 ff ff       	call   c0001ad9 <st_dword>
c00065cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d3:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065da:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065de:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065e2:	e8 cf d3 ff ff       	call   c00039b6 <store_xdir>
c00065e7:	89 c3                	mov    ebx,eax
c00065e9:	85 c0                	test   eax,eax
c00065eb:	0f 85 d4 fe ff ff    	jne    c00064c5 <f_mkdir+0xb5>
c00065f1:	eb 30                	jmp    c0006623 <f_mkdir+0x213>
c00065f3:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f7:	ba 00 00 21 50       	mov    edx,0x50210000
c00065fc:	83 c0 16             	add    eax,0x16
c00065ff:	e8 d5 b4 ff ff       	call   c0001ad9 <st_dword>
c0006604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006608:	89 f1                	mov    ecx,esi
c000660a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660e:	e8 dc e5 ff ff       	call   c0004bef <st_clust.isra.1>
c0006613:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006617:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000661b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006623:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006627:	e8 1c dd ff ff       	call   c0004348 <sync_fs>
c000662c:	89 c3                	mov    ebx,eax
c000662e:	e9 92 fe ff ff       	jmp    c00064c5 <f_mkdir+0xb5>
c0006633:	83 ec 80             	sub    esp,0xffffff80
c0006636:	89 d8                	mov    eax,ebx
c0006638:	5b                   	pop    ebx
c0006639:	5e                   	pop    esi
c000663a:	5f                   	pop    edi
c000663b:	c3                   	ret    

c000663c <f_rename>:
c000663c:	55                   	push   ebp
c000663d:	57                   	push   edi
c000663e:	56                   	push   esi
c000663f:	53                   	push   ebx
c0006640:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006646:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664d:	e8 f3 b9 ff ff       	call   c0002045 <get_ldnumber>
c0006652:	b9 02 00 00 00       	mov    ecx,0x2
c0006657:	8d 54 24 14          	lea    edx,[esp+0x14]
c000665b:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006662:	e8 7e be ff ff       	call   c00024e5 <mount_volume>
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 85 b5 02 00 00    	jne    c0006924 <f_rename+0x2e8>
c000666f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006673:	83 ec 0c             	sub    esp,0xc
c0006676:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000667a:	68 60 04 00 00       	push   0x460
c000667f:	e8 c5 1b 00 00       	call   c0008249 <ff_memalloc>
c0006684:	89 c3                	mov    ebx,eax
c0006686:	83 c4 10             	add    esp,0x10
c0006689:	b8 11 00 00 00       	mov    eax,0x11
c000668e:	85 db                	test   ebx,ebx
c0006690:	0f 84 8e 02 00 00    	je     c0006924 <f_rename+0x2e8>
c0006696:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000669a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a6:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066ad:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066b1:	e8 9b e5 ff ff       	call   c0004c51 <follow_path>
c00066b6:	85 c0                	test   eax,eax
c00066b8:	0f 85 52 02 00 00    	jne    c0006910 <f_rename+0x2d4>
c00066be:	b8 06 00 00 00       	mov    eax,0x6
c00066c3:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066cb:	0f 85 3f 02 00 00    	jne    c0006910 <f_rename+0x2d4>
c00066d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d8:	0f 85 05 01 00 00    	jne    c00067e3 <f_rename+0x1a7>
c00066de:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066e1:	b9 40 00 00 00       	mov    ecx,0x40
c00066e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066ea:	e8 f3 b3 ff ff       	call   c0001ae2 <mem_cpy>
c00066ef:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f4:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ff:	e8 de b3 ff ff       	call   c0001ae2 <mem_cpy>
c0006704:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000670b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006712:	e8 3a e5 ff ff       	call   c0004c51 <follow_path>
c0006717:	85 c0                	test   eax,eax
c0006719:	75 29                	jne    c0006744 <f_rename+0x108>
c000671b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006726:	74 0a                	je     c0006732 <f_rename+0xf6>
c0006728:	b8 08 00 00 00       	mov    eax,0x8
c000672d:	e9 de 01 00 00       	jmp    c0006910 <f_rename+0x2d4>
c0006732:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006739:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006740:	75 e6                	jne    c0006728 <f_rename+0xec>
c0006742:	eb 09                	jmp    c000674d <f_rename+0x111>
c0006744:	83 f8 04             	cmp    eax,0x4
c0006747:	0f 85 c3 01 00 00    	jne    c0006910 <f_rename+0x2d4>
c000674d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006754:	e8 6c d9 ff ff       	call   c00040c5 <dir_register>
c0006759:	85 c0                	test   eax,eax
c000675b:	0f 85 af 01 00 00    	jne    c0006910 <f_rename+0x2d4>
c0006761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006765:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006768:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000676b:	89 c5                	mov    ebp,eax
c000676d:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006770:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006774:	8d 46 24             	lea    eax,[esi+0x24]
c0006777:	e8 e7 b2 ff ff       	call   c0001a63 <ld_word>
c000677c:	b9 40 00 00 00       	mov    ecx,0x40
c0006781:	89 c7                	mov    edi,eax
c0006783:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006787:	89 f0                	mov    eax,esi
c0006789:	e8 54 b3 ff ff       	call   c0001ae2 <mem_cpy>
c000678e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	89 e9                	mov    ecx,ebp
c0006797:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c000679a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a5:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	0f b7 d7             	movzx  edx,di
c00067b1:	e8 1f b3 ff ff       	call   c0001ad5 <st_word>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067bd:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067c0:	a8 10                	test   al,0x10
c00067c2:	75 06                	jne    c00067ca <f_rename+0x18e>
c00067c4:	83 c8 20             	or     eax,0x20
c00067c7:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067ca:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d1:	e8 e0 d1 ff ff       	call   c00039b6 <store_xdir>
c00067d6:	85 c0                	test   eax,eax
c00067d8:	0f 84 1c 01 00 00    	je     c00068fa <f_rename+0x2be>
c00067de:	e9 2d 01 00 00       	jmp    c0006910 <f_rename+0x2d4>
c00067e3:	b9 20 00 00 00       	mov    ecx,0x20
c00067e8:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f3:	e8 ea b2 ff ff       	call   c0001ae2 <mem_cpy>
c00067f8:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fd:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006801:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006808:	e8 d5 b2 ff ff       	call   c0001ae2 <mem_cpy>
c000680d:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006814:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000681b:	e8 31 e4 ff ff       	call   c0004c51 <follow_path>
c0006820:	85 c0                	test   eax,eax
c0006822:	75 27                	jne    c000684b <f_rename+0x20f>
c0006824:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006828:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682f:	0f 85 f3 fe ff ff    	jne    c0006728 <f_rename+0xec>
c0006835:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000683c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006843:	0f 85 df fe ff ff    	jne    c0006728 <f_rename+0xec>
c0006849:	eb 09                	jmp    c0006854 <f_rename+0x218>
c000684b:	83 f8 04             	cmp    eax,0x4
c000684e:	0f 85 bc 00 00 00    	jne    c0006910 <f_rename+0x2d4>
c0006854:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000685b:	e8 65 d8 ff ff       	call   c00040c5 <dir_register>
c0006860:	85 c0                	test   eax,eax
c0006862:	0f 85 a8 00 00 00    	jne    c0006910 <f_rename+0x2d4>
c0006868:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686f:	b9 13 00 00 00       	mov    ecx,0x13
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	8d 46 0d             	lea    eax,[esi+0xd]
c000687b:	e8 62 b2 ff ff       	call   c0001ae2 <mem_cpy>
c0006880:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006884:	a8 10                	test   al,0x10
c0006886:	75 03                	jne    c000688b <f_rename+0x24f>
c0006888:	83 c8 20             	or     eax,0x20
c000688b:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006892:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006896:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c000689a:	74 5e                	je     c00068fa <f_rename+0x2be>
c000689c:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a3:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a7:	74 51                	je     c00068fa <f_rename+0x2be>
c00068a9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ad:	89 f2                	mov    edx,esi
c00068af:	8a 07                	mov    al,BYTE PTR [edi]
c00068b1:	e8 10 e3 ff ff       	call   c0004bc6 <ld_clust.isra.0>
c00068b6:	89 c2                	mov    edx,eax
c00068b8:	89 f8                	mov    eax,edi
c00068ba:	e8 3d b4 ff ff       	call   c0001cfc <clst2sect>
c00068bf:	89 c6                	mov    esi,eax
c00068c1:	89 d1                	mov    ecx,edx
c00068c3:	b8 02 00 00 00       	mov    eax,0x2
c00068c8:	09 f2                	or     edx,esi
c00068ca:	74 44                	je     c0006910 <f_rename+0x2d4>
c00068cc:	89 f2                	mov    edx,esi
c00068ce:	89 f8                	mov    eax,edi
c00068d0:	e8 65 b9 ff ff       	call   c000223a <move_window>
c00068d5:	85 c0                	test   eax,eax
c00068d7:	75 37                	jne    c0006910 <f_rename+0x2d4>
c00068d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068dd:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068e1:	75 17                	jne    c00068fa <f_rename+0x2be>
c00068e3:	8d 50 74             	lea    edx,[eax+0x74]
c00068e6:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ed:	e8 fd e2 ff ff       	call   c0004bef <st_clust.isra.1>
c00068f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 38 d1 ff ff       	call   c0003a3b <dir_remove>
c0006903:	85 c0                	test   eax,eax
c0006905:	75 09                	jne    c0006910 <f_rename+0x2d4>
c0006907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690b:	e8 38 da ff ff       	call   c0004348 <sync_fs>
c0006910:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006914:	83 ec 0c             	sub    esp,0xc
c0006917:	53                   	push   ebx
c0006918:	e8 42 19 00 00       	call   c000825f <ff_memfree>
c000691d:	83 c4 10             	add    esp,0x10
c0006920:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006924:	81 c4 fc 00 00 00    	add    esp,0xfc
c000692a:	5b                   	pop    ebx
c000692b:	5e                   	pop    esi
c000692c:	5f                   	pop    edi
c000692d:	5d                   	pop    ebp
c000692e:	c3                   	ret    

c000692f <f_chmod>:
c000692f:	57                   	push   edi
c0006930:	b9 02 00 00 00       	mov    ecx,0x2
c0006935:	56                   	push   esi
c0006936:	53                   	push   ebx
c0006937:	83 ec 60             	sub    esp,0x60
c000693a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000693e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006942:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006946:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000694a:	e8 96 bb ff ff       	call   c00024e5 <mount_volume>
c000694f:	85 c0                	test   eax,eax
c0006951:	0f 85 af 00 00 00    	jne    c0006a06 <f_chmod+0xd7>
c0006957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000695b:	83 ec 0c             	sub    esp,0xc
c000695e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006962:	68 60 04 00 00       	push   0x460
c0006967:	e8 dd 18 00 00       	call   c0008249 <ff_memalloc>
c000696c:	89 c6                	mov    esi,eax
c000696e:	83 c4 10             	add    esp,0x10
c0006971:	b8 11 00 00 00       	mov    eax,0x11
c0006976:	85 f6                	test   esi,esi
c0006978:	0f 84 88 00 00 00    	je     c0006a06 <f_chmod+0xd7>
c000697e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006982:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000698e:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006992:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006996:	e8 b6 e2 ff ff       	call   c0004c51 <follow_path>
c000699b:	85 c0                	test   eax,eax
c000699d:	75 53                	jne    c00069f2 <f_chmod+0xc3>
c000699f:	b8 06 00 00 00       	mov    eax,0x6
c00069a4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a9:	75 47                	jne    c00069f2 <f_chmod+0xc3>
c00069ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069af:	89 f9                	mov    ecx,edi
c00069b1:	83 e1 27             	and    ecx,0x27
c00069b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b7:	75 1d                	jne    c00069d6 <f_chmod+0xa7>
c00069b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069bc:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bf:	21 cb                	and    ebx,ecx
c00069c1:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c4:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069cb:	e8 e6 cf ff ff       	call   c00039b6 <store_xdir>
c00069d0:	85 c0                	test   eax,eax
c00069d2:	75 1e                	jne    c00069f2 <f_chmod+0xc3>
c00069d4:	eb 13                	jmp    c00069e9 <f_chmod+0xba>
c00069d6:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069da:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069dd:	21 cb                	and    ebx,ecx
c00069df:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069e2:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ed:	e8 56 d9 ff ff       	call   c0004348 <sync_fs>
c00069f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f6:	83 ec 0c             	sub    esp,0xc
c00069f9:	56                   	push   esi
c00069fa:	e8 60 18 00 00       	call   c000825f <ff_memfree>
c00069ff:	83 c4 10             	add    esp,0x10
c0006a02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a06:	83 c4 60             	add    esp,0x60
c0006a09:	5b                   	pop    ebx
c0006a0a:	5e                   	pop    esi
c0006a0b:	5f                   	pop    edi
c0006a0c:	c3                   	ret    

c0006a0d <f_utime>:
c0006a0d:	56                   	push   esi
c0006a0e:	b9 02 00 00 00       	mov    ecx,0x2
c0006a13:	53                   	push   ebx
c0006a14:	83 ec 64             	sub    esp,0x64
c0006a17:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a1f:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a23:	e8 bd ba ff ff       	call   c00024e5 <mount_volume>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	0f 85 b5 00 00 00    	jne    c0006ae5 <f_utime+0xd8>
c0006a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a34:	83 ec 0c             	sub    esp,0xc
c0006a37:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a3b:	68 60 04 00 00       	push   0x460
c0006a40:	e8 04 18 00 00       	call   c0008249 <ff_memalloc>
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	83 c4 10             	add    esp,0x10
c0006a4a:	b8 11 00 00 00       	mov    eax,0x11
c0006a4f:	85 db                	test   ebx,ebx
c0006a51:	0f 84 8e 00 00 00    	je     c0006ae5 <f_utime+0xd8>
c0006a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a5b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a67:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a6b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6f:	e8 dd e1 ff ff       	call   c0004c51 <follow_path>
c0006a74:	85 c0                	test   eax,eax
c0006a76:	75 59                	jne    c0006ad1 <f_utime+0xc4>
c0006a78:	b8 06 00 00 00       	mov    eax,0x6
c0006a7d:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a82:	75 4d                	jne    c0006ad1 <f_utime+0xc4>
c0006a84:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8c:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a90:	c1 e2 10             	shl    edx,0x10
c0006a93:	09 ca                	or     edx,ecx
c0006a95:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a98:	75 1a                	jne    c0006ab4 <f_utime+0xa7>
c0006a9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9d:	83 c0 0c             	add    eax,0xc
c0006aa0:	e8 34 b0 ff ff       	call   c0001ad9 <st_dword>
c0006aa5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa9:	e8 08 cf ff ff       	call   c00039b6 <store_xdir>
c0006aae:	85 c0                	test   eax,eax
c0006ab0:	75 1f                	jne    c0006ad1 <f_utime+0xc4>
c0006ab2:	eb 14                	jmp    c0006ac8 <f_utime+0xbb>
c0006ab4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab8:	83 c0 16             	add    eax,0x16
c0006abb:	e8 19 b0 ff ff       	call   c0001ad9 <st_dword>
c0006ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006acc:	e8 77 d8 ff ff       	call   c0004348 <sync_fs>
c0006ad1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad5:	83 ec 0c             	sub    esp,0xc
c0006ad8:	53                   	push   ebx
c0006ad9:	e8 81 17 00 00       	call   c000825f <ff_memfree>
c0006ade:	83 c4 10             	add    esp,0x10
c0006ae1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae5:	83 c4 64             	add    esp,0x64
c0006ae8:	5b                   	pop    ebx
c0006ae9:	5e                   	pop    esi
c0006aea:	c3                   	ret    

c0006aeb <f_getlabel>:
c0006aeb:	55                   	push   ebp
c0006aec:	31 c9                	xor    ecx,ecx
c0006aee:	57                   	push   edi
c0006aef:	56                   	push   esi
c0006af0:	53                   	push   ebx
c0006af1:	83 ec 6c             	sub    esp,0x6c
c0006af4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aff:	e8 e1 b9 ff ff       	call   c00024e5 <mount_volume>
c0006b04:	89 c3                	mov    ebx,eax
c0006b06:	85 c0                	test   eax,eax
c0006b08:	0f 85 73 01 00 00    	jne    c0006c81 <f_getlabel+0x196>
c0006b0e:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b16:	0f 84 65 01 00 00    	je     c0006c81 <f_getlabel+0x196>
c0006b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b20:	31 d2                	xor    edx,edx
c0006b22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b32:	e8 7b c4 ff ff       	call   c0002fb2 <dir_sdi>
c0006b37:	89 c3                	mov    ebx,eax
c0006b39:	85 c0                	test   eax,eax
c0006b3b:	0f 85 2f 01 00 00    	jne    c0006c70 <f_getlabel+0x185>
c0006b41:	ba 01 00 00 00       	mov    edx,0x1
c0006b46:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b4a:	e8 75 cc ff ff       	call   c00037c4 <dir_read>
c0006b4f:	89 c3                	mov    ebx,eax
c0006b51:	85 c0                	test   eax,eax
c0006b53:	0f 85 17 01 00 00    	jne    c0006c70 <f_getlabel+0x185>
c0006b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b5d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b60:	74 09                	je     c0006b6b <f_getlabel+0x80>
c0006b62:	31 f6                	xor    esi,esi
c0006b64:	31 c9                	xor    ecx,ecx
c0006b66:	e9 c8 00 00 00       	jmp    c0006c33 <f_getlabel+0x148>
c0006b6b:	31 ed                	xor    ebp,ebp
c0006b6d:	31 f6                	xor    esi,esi
c0006b6f:	31 ff                	xor    edi,edi
c0006b71:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b75:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b79:	39 fa                	cmp    edx,edi
c0006b7b:	76 4b                	jbe    c0006bc8 <f_getlabel+0xdd>
c0006b7d:	47                   	inc    edi
c0006b7e:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b81:	01 d0                	add    eax,edx
c0006b83:	e8 db ae ff ff       	call   c0001a63 <ld_word>
c0006b88:	66 85 ed             	test   bp,bp
c0006b8b:	75 0d                	jne    c0006b9a <f_getlabel+0xaf>
c0006b8d:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b93:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b98:	76 28                	jbe    c0006bc2 <f_getlabel+0xd7>
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ba3:	c1 e1 10             	shl    ecx,0x10
c0006ba6:	01 f2                	add    edx,esi
c0006ba8:	0f b7 c0             	movzx  eax,ax
c0006bab:	09 c8                	or     eax,ecx
c0006bad:	b9 04 00 00 00       	mov    ecx,0x4
c0006bb2:	e8 4c b0 ff ff       	call   c0001c03 <put_utf>
c0006bb7:	84 c0                	test   al,al
c0006bb9:	74 0b                	je     c0006bc6 <f_getlabel+0xdb>
c0006bbb:	0f b6 c0             	movzx  eax,al
c0006bbe:	01 c6                	add    esi,eax
c0006bc0:	31 c0                	xor    eax,eax
c0006bc2:	89 c5                	mov    ebp,eax
c0006bc4:	eb ab                	jmp    c0006b71 <f_getlabel+0x86>
c0006bc6:	31 f6                	xor    esi,esi
c0006bc8:	66 85 ed             	test   bp,bp
c0006bcb:	74 02                	je     c0006bcf <f_getlabel+0xe4>
c0006bcd:	31 f6                	xor    esi,esi
c0006bcf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bd6:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bda:	e9 a2 00 00 00       	jmp    c0006c81 <f_getlabel+0x196>
c0006bdf:	83 ff 0b             	cmp    edi,0xb
c0006be2:	74 11                	je     c0006bf5 <f_getlabel+0x10a>
c0006be4:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bed:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bf0:	c1 e0 08             	shl    eax,0x8
c0006bf3:	09 c2                	or     edx,eax
c0006bf5:	50                   	push   eax
c0006bf6:	50                   	push   eax
c0006bf7:	68 b5 01 00 00       	push   0x1b5
c0006bfc:	0f b7 d2             	movzx  edx,dx
c0006bff:	52                   	push   edx
c0006c00:	e8 07 17 00 00       	call   c000830c <ff_oem2uni>
c0006c05:	83 c4 10             	add    esp,0x10
c0006c08:	66 85 c0             	test   ax,ax
c0006c0b:	74 46                	je     c0006c53 <f_getlabel+0x168>
c0006c0d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c14:	b9 04 00 00 00       	mov    ecx,0x4
c0006c19:	01 f2                	add    edx,esi
c0006c1b:	0f b7 c0             	movzx  eax,ax
c0006c1e:	e8 e0 af ff ff       	call   c0001c03 <put_utf>
c0006c23:	84 c0                	test   al,al
c0006c25:	74 2c                	je     c0006c53 <f_getlabel+0x168>
c0006c27:	0f b6 c0             	movzx  eax,al
c0006c2a:	01 c6                	add    esi,eax
c0006c2c:	83 ff 0b             	cmp    edi,0xb
c0006c2f:	74 24                	je     c0006c55 <f_getlabel+0x16a>
c0006c31:	89 f9                	mov    ecx,edi
c0006c33:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c37:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c3a:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c3f:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c48:	e8 ea ae ff ff       	call   c0001b37 <dbc_1st>
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	74 a4                	je     c0006bf5 <f_getlabel+0x10a>
c0006c51:	eb 8c                	jmp    c0006bdf <f_getlabel+0xf4>
c0006c53:	31 f6                	xor    esi,esi
c0006c55:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c5c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c5f:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c66:	74 19                	je     c0006c81 <f_getlabel+0x196>
c0006c68:	4e                   	dec    esi
c0006c69:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c6c:	74 ee                	je     c0006c5c <f_getlabel+0x171>
c0006c6e:	eb 11                	jmp    c0006c81 <f_getlabel+0x196>
c0006c70:	83 fb 04             	cmp    ebx,0x4
c0006c73:	75 0c                	jne    c0006c81 <f_getlabel+0x196>
c0006c75:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c7c:	31 db                	xor    ebx,ebx
c0006c7e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c81:	85 db                	test   ebx,ebx
c0006c83:	75 50                	jne    c0006cd5 <f_getlabel+0x1ea>
c0006c85:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c8d:	74 46                	je     c0006cd5 <f_getlabel+0x1ea>
c0006c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c93:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c96:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c99:	e8 9c b5 ff ff       	call   c000223a <move_window>
c0006c9e:	89 c3                	mov    ebx,eax
c0006ca0:	85 c0                	test   eax,eax
c0006ca2:	75 31                	jne    c0006cd5 <f_getlabel+0x1ea>
c0006ca4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ca8:	b8 43 00 00 00       	mov    eax,0x43
c0006cad:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006caf:	80 f9 03             	cmp    cl,0x3
c0006cb2:	74 0f                	je     c0006cc3 <f_getlabel+0x1d8>
c0006cb4:	31 c0                	xor    eax,eax
c0006cb6:	80 f9 04             	cmp    cl,0x4
c0006cb9:	0f 94 c0             	sete   al
c0006cbc:	48                   	dec    eax
c0006cbd:	83 e0 c3             	and    eax,0xffffffc3
c0006cc0:	83 c0 64             	add    eax,0x64
c0006cc3:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cc7:	e8 a4 ad ff ff       	call   c0001a70 <ld_dword>
c0006ccc:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cd3:	89 07                	mov    DWORD PTR [edi],eax
c0006cd5:	83 c4 6c             	add    esp,0x6c
c0006cd8:	89 d8                	mov    eax,ebx
c0006cda:	5b                   	pop    ebx
c0006cdb:	5e                   	pop    esi
c0006cdc:	5f                   	pop    edi
c0006cdd:	5d                   	pop    ebp
c0006cde:	c3                   	ret    

c0006cdf <f_setlabel>:
c0006cdf:	56                   	push   esi
c0006ce0:	b9 02 00 00 00       	mov    ecx,0x2
c0006ce5:	53                   	push   ebx
c0006ce6:	83 ec 74             	sub    esp,0x74
c0006ce9:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ced:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cf4:	e8 ec b7 ff ff       	call   c00024e5 <mount_volume>
c0006cf9:	89 c6                	mov    esi,eax
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	0f 85 41 02 00 00    	jne    c0006f44 <f_setlabel+0x265>
c0006d03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d07:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d0a:	0f 85 8e 00 00 00    	jne    c0006d9e <f_setlabel+0xbf>
c0006d10:	b9 16 00 00 00       	mov    ecx,0x16
c0006d15:	31 d2                	xor    edx,edx
c0006d17:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d1b:	31 db                	xor    ebx,ebx
c0006d1d:	e8 d5 ad ff ff       	call   c0001af7 <mem_set>
c0006d22:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d29:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d2c:	0f 86 0a 01 00 00    	jbe    c0006e3c <f_setlabel+0x15d>
c0006d32:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d39:	e8 ff ad ff ff       	call   c0001b3d <tchar2uni>
c0006d3e:	89 c6                	mov    esi,eax
c0006d40:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d45:	76 2a                	jbe    c0006d71 <f_setlabel+0x92>
c0006d47:	83 f8 ff             	cmp    eax,0xffffffff
c0006d4a:	74 05                	je     c0006d51 <f_setlabel+0x72>
c0006d4c:	83 fb 09             	cmp    ebx,0x9
c0006d4f:	76 0a                	jbe    c0006d5b <f_setlabel+0x7c>
c0006d51:	be 06 00 00 00       	mov    esi,0x6
c0006d56:	e9 e9 01 00 00       	jmp    c0006f44 <f_setlabel+0x265>
c0006d5b:	89 c2                	mov    edx,eax
c0006d5d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d61:	c1 ea 10             	shr    edx,0x10
c0006d64:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d67:	01 c8                	add    eax,ecx
c0006d69:	43                   	inc    ebx
c0006d6a:	e8 66 ad ff ff       	call   c0001ad5 <st_word>
c0006d6f:	eb 04                	jmp    c0006d75 <f_setlabel+0x96>
c0006d71:	85 c0                	test   eax,eax
c0006d73:	74 dc                	je     c0006d51 <f_setlabel+0x72>
c0006d75:	89 f2                	mov    edx,esi
c0006d77:	b8 97 04 02 c0       	mov    eax,0xc0020497
c0006d7c:	e8 a4 ad ff ff       	call   c0001b25 <chk_chr>
c0006d81:	85 c0                	test   eax,eax
c0006d83:	75 cc                	jne    c0006d51 <f_setlabel+0x72>
c0006d85:	83 fb 0a             	cmp    ebx,0xa
c0006d88:	77 c7                	ja     c0006d51 <f_setlabel+0x72>
c0006d8a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d8d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d91:	0f b7 d6             	movzx  edx,si
c0006d94:	01 c8                	add    eax,ecx
c0006d96:	43                   	inc    ebx
c0006d97:	e8 39 ad ff ff       	call   c0001ad5 <st_word>
c0006d9c:	eb 84                	jmp    c0006d22 <f_setlabel+0x43>
c0006d9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0006da3:	ba 20 00 00 00       	mov    edx,0x20
c0006da8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006dac:	31 db                	xor    ebx,ebx
c0006dae:	e8 44 ad ff ff       	call   c0001af7 <mem_set>
c0006db3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006dba:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006dbd:	76 60                	jbe    c0006e1f <f_setlabel+0x140>
c0006dbf:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dc6:	e8 72 ad ff ff       	call   c0001b3d <tchar2uni>
c0006dcb:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dd0:	0f 87 7b ff ff ff    	ja     c0006d51 <f_setlabel+0x72>
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	50                   	push   eax
c0006dda:	e8 9c 15 00 00       	call   c000837b <ff_wtoupper>
c0006ddf:	5a                   	pop    edx
c0006de0:	59                   	pop    ecx
c0006de1:	68 b5 01 00 00       	push   0x1b5
c0006de6:	50                   	push   eax
c0006de7:	e8 8a 14 00 00       	call   c0008276 <ff_uni2oem>
c0006dec:	83 c4 10             	add    esp,0x10
c0006def:	89 c6                	mov    esi,eax
c0006df1:	66 85 c0             	test   ax,ax
c0006df4:	0f 84 57 ff ff ff    	je     c0006d51 <f_setlabel+0x72>
c0006dfa:	0f b7 d0             	movzx  edx,ax
c0006dfd:	b8 90 04 02 c0       	mov    eax,0xc0020490
c0006e02:	e8 1e ad ff ff       	call   c0001b25 <chk_chr>
c0006e07:	85 c0                	test   eax,eax
c0006e09:	0f 85 42 ff ff ff    	jne    c0006d51 <f_setlabel+0x72>
c0006e0f:	66 81 fe ff 00       	cmp    si,0xff
c0006e14:	0f 87 14 01 00 00    	ja     c0006f2e <f_setlabel+0x24f>
c0006e1a:	e9 fa 00 00 00       	jmp    c0006f19 <f_setlabel+0x23a>
c0006e1f:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e24:	0f 84 27 ff ff ff    	je     c0006d51 <f_setlabel+0x72>
c0006e2a:	85 db                	test   ebx,ebx
c0006e2c:	74 0e                	je     c0006e3c <f_setlabel+0x15d>
c0006e2e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e31:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e36:	75 04                	jne    c0006e3c <f_setlabel+0x15d>
c0006e38:	89 c3                	mov    ebx,eax
c0006e3a:	eb ee                	jmp    c0006e2a <f_setlabel+0x14b>
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	31 d2                	xor    edx,edx
c0006e42:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e46:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e4a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e52:	e8 5b c1 ff ff       	call   c0002fb2 <dir_sdi>
c0006e57:	89 c6                	mov    esi,eax
c0006e59:	85 c0                	test   eax,eax
c0006e5b:	0f 85 e3 00 00 00    	jne    c0006f44 <f_setlabel+0x265>
c0006e61:	ba 01 00 00 00       	mov    edx,0x1
c0006e66:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e6a:	e8 55 c9 ff ff       	call   c00037c4 <dir_read>
c0006e6f:	85 c0                	test   eax,eax
c0006e71:	75 21                	jne    c0006e94 <f_setlabel+0x1b5>
c0006e73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e77:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e7b:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e7e:	74 5d                	je     c0006edd <f_setlabel+0x1fe>
c0006e80:	85 db                	test   ebx,ebx
c0006e82:	74 0b                	je     c0006e8f <f_setlabel+0x1b0>
c0006e84:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e89:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e8d:	eb 70                	jmp    c0006eff <f_setlabel+0x220>
c0006e8f:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e92:	eb 70                	jmp    c0006f04 <f_setlabel+0x225>
c0006e94:	83 f8 04             	cmp    eax,0x4
c0006e97:	75 7c                	jne    c0006f15 <f_setlabel+0x236>
c0006e99:	85 db                	test   ebx,ebx
c0006e9b:	0f 84 a3 00 00 00    	je     c0006f44 <f_setlabel+0x265>
c0006ea1:	ba 01 00 00 00       	mov    edx,0x1
c0006ea6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eaa:	e8 8f ca ff ff       	call   c000393e <dir_alloc>
c0006eaf:	89 c6                	mov    esi,eax
c0006eb1:	85 c0                	test   eax,eax
c0006eb3:	0f 85 8b 00 00 00    	jne    c0006f44 <f_setlabel+0x265>
c0006eb9:	31 d2                	xor    edx,edx
c0006ebb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebf:	b9 20 00 00 00       	mov    ecx,0x20
c0006ec4:	e8 2e ac ff ff       	call   c0001af7 <mem_set>
c0006ec9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ecd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	75 18                	jne    c0006eee <f_setlabel+0x20f>
c0006ed6:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006edd:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ee0:	b9 16 00 00 00       	mov    ecx,0x16
c0006ee5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee9:	83 c0 02             	add    eax,0x2
c0006eec:	eb 9b                	jmp    c0006e89 <f_setlabel+0x1aa>
c0006eee:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ef2:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ef7:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006efb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eff:	e8 de ab ff ff       	call   c0001ae2 <mem_cpy>
c0006f04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f08:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f10:	e8 33 d4 ff ff       	call   c0004348 <sync_fs>
c0006f15:	89 c6                	mov    esi,eax
c0006f17:	eb 2b                	jmp    c0006f44 <f_setlabel+0x265>
c0006f19:	83 fb 0a             	cmp    ebx,0xa
c0006f1c:	0f 87 2f fe ff ff    	ja     c0006d51 <f_setlabel+0x72>
c0006f22:	89 f0                	mov    eax,esi
c0006f24:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f28:	43                   	inc    ebx
c0006f29:	e9 85 fe ff ff       	jmp    c0006db3 <f_setlabel+0xd4>
c0006f2e:	83 fb 09             	cmp    ebx,0x9
c0006f31:	0f 87 1a fe ff ff    	ja     c0006d51 <f_setlabel+0x72>
c0006f37:	89 f0                	mov    eax,esi
c0006f39:	66 c1 e8 08          	shr    ax,0x8
c0006f3d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f41:	43                   	inc    ebx
c0006f42:	eb de                	jmp    c0006f22 <f_setlabel+0x243>
c0006f44:	83 c4 74             	add    esp,0x74
c0006f47:	89 f0                	mov    eax,esi
c0006f49:	5b                   	pop    ebx
c0006f4a:	5e                   	pop    esi
c0006f4b:	c3                   	ret    

c0006f4c <f_forward>:
c0006f4c:	55                   	push   ebp
c0006f4d:	57                   	push   edi
c0006f4e:	56                   	push   esi
c0006f4f:	53                   	push   ebx
c0006f50:	83 ec 2c             	sub    esp,0x2c
c0006f53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f57:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f65:	89 d8                	mov    eax,ebx
c0006f67:	e8 f3 b1 ff ff       	call   c000215f <validate>
c0006f6c:	89 c5                	mov    ebp,eax
c0006f6e:	85 c0                	test   eax,eax
c0006f70:	0f 85 aa 01 00 00    	jne    c0007120 <f_forward+0x1d4>
c0006f76:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f7a:	85 ed                	test   ebp,ebp
c0006f7c:	0f 85 9e 01 00 00    	jne    c0007120 <f_forward+0x1d4>
c0006f82:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f86:	0f 84 8f 01 00 00    	je     c000711b <f_forward+0x1cf>
c0006f8c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f8f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f92:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f95:	bf 00 00 00 00       	mov    edi,0x0
c0006f9a:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f9d:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fa1:	89 d1                	mov    ecx,edx
c0006fa3:	19 f9                	sbb    ecx,edi
c0006fa5:	0f 83 cf 00 00 00    	jae    c000707a <f_forward+0x12e>
c0006fab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006faf:	e9 c6 00 00 00       	jmp    c000707a <f_forward+0x12e>
c0006fb4:	50                   	push   eax
c0006fb5:	50                   	push   eax
c0006fb6:	6a 00                	push   0x0
c0006fb8:	6a 00                	push   0x0
c0006fba:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fbe:	83 c4 10             	add    esp,0x10
c0006fc1:	85 c0                	test   eax,eax
c0006fc3:	0f 84 57 01 00 00    	je     c0007120 <f_forward+0x1d4>
c0006fc9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fcd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fd0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fd3:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fd7:	89 d7                	mov    edi,edx
c0006fd9:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fdc:	89 c6                	mov    esi,eax
c0006fde:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fe2:	21 ce                	and    esi,ecx
c0006fe4:	89 c1                	mov    ecx,eax
c0006fe6:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fec:	0f 84 98 00 00 00    	je     c000708a <f_forward+0x13e>
c0006ff2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006ff6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff9:	89 c8                	mov    eax,ecx
c0006ffb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fff:	e8 f8 ac ff ff       	call   c0001cfc <clst2sect>
c0007004:	89 d7                	mov    edi,edx
c0007006:	09 c7                	or     edi,eax
c0007008:	0f 84 9e 00 00 00    	je     c00070ac <f_forward+0x160>
c000700e:	31 ff                	xor    edi,edi
c0007010:	01 c6                	add    esi,eax
c0007012:	11 d7                	adc    edi,edx
c0007014:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007017:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000701a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000701e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007021:	39 fa                	cmp    edx,edi
c0007023:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007027:	0f 85 a2 00 00 00    	jne    c00070cf <f_forward+0x183>
c000702d:	39 f0                	cmp    eax,esi
c000702f:	0f 85 9a 00 00 00    	jne    c00070cf <f_forward+0x183>
c0007035:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007038:	ba 00 02 00 00       	mov    edx,0x200
c000703d:	25 ff 01 00 00       	and    eax,0x1ff
c0007042:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007046:	29 c2                	sub    edx,eax
c0007048:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000704b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000704e:	39 d1                	cmp    ecx,edx
c0007050:	76 02                	jbe    c0007054 <f_forward+0x108>
c0007052:	89 d1                	mov    ecx,edx
c0007054:	52                   	push   edx
c0007055:	8d 73 50             	lea    esi,[ebx+0x50]
c0007058:	52                   	push   edx
c0007059:	01 c6                	add    esi,eax
c000705b:	51                   	push   ecx
c000705c:	56                   	push   esi
c000705d:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007061:	83 c4 10             	add    esp,0x10
c0007064:	85 c0                	test   eax,eax
c0007066:	74 44                	je     c00070ac <f_forward+0x160>
c0007068:	31 ff                	xor    edi,edi
c000706a:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000706d:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007070:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007074:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007078:	01 07                	add    DWORD PTR [edi],eax
c000707a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000707f:	0f 85 2f ff ff ff    	jne    c0006fb4 <f_forward+0x68>
c0007085:	e9 96 00 00 00       	jmp    c0007120 <f_forward+0x1d4>
c000708a:	85 f6                	test   esi,esi
c000708c:	0f 85 60 ff ff ff    	jne    c0006ff2 <f_forward+0xa6>
c0007092:	89 d7                	mov    edi,edx
c0007094:	09 c7                	or     edi,eax
c0007096:	75 05                	jne    c000709d <f_forward+0x151>
c0007098:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000709b:	eb 0a                	jmp    c00070a7 <f_forward+0x15b>
c000709d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070a0:	89 d8                	mov    eax,ebx
c00070a2:	e8 15 bd ff ff       	call   c0002dbc <get_fat>
c00070a7:	83 f8 01             	cmp    eax,0x1
c00070aa:	77 0b                	ja     c00070b7 <f_forward+0x16b>
c00070ac:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070b0:	bd 02 00 00 00       	mov    ebp,0x2
c00070b5:	eb 69                	jmp    c0007120 <f_forward+0x1d4>
c00070b7:	83 f8 ff             	cmp    eax,0xffffffff
c00070ba:	75 0b                	jne    c00070c7 <f_forward+0x17b>
c00070bc:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070c0:	bd 01 00 00 00       	mov    ebp,0x1
c00070c5:	eb 59                	jmp    c0007120 <f_forward+0x1d4>
c00070c7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070ca:	e9 23 ff ff ff       	jmp    c0006ff2 <f_forward+0xa6>
c00070cf:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070d3:	79 20                	jns    c00070f5 <f_forward+0x1a9>
c00070d5:	83 ec 0c             	sub    esp,0xc
c00070d8:	6a 01                	push   0x1
c00070da:	52                   	push   edx
c00070db:	50                   	push   eax
c00070dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070e4:	50                   	push   eax
c00070e5:	e8 44 a9 ff ff       	call   c0001a2e <disk_write>
c00070ea:	83 c4 20             	add    esp,0x20
c00070ed:	85 c0                	test   eax,eax
c00070ef:	75 cb                	jne    c00070bc <f_forward+0x170>
c00070f1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070f5:	83 ec 0c             	sub    esp,0xc
c00070f8:	6a 01                	push   0x1
c00070fa:	57                   	push   edi
c00070fb:	56                   	push   esi
c00070fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007100:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007104:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007108:	50                   	push   eax
c0007109:	e8 0a a9 ff ff       	call   c0001a18 <disk_read>
c000710e:	83 c4 20             	add    esp,0x20
c0007111:	85 c0                	test   eax,eax
c0007113:	0f 84 1c ff ff ff    	je     c0007035 <f_forward+0xe9>
c0007119:	eb a1                	jmp    c00070bc <f_forward+0x170>
c000711b:	bd 07 00 00 00       	mov    ebp,0x7
c0007120:	83 c4 2c             	add    esp,0x2c
c0007123:	89 e8                	mov    eax,ebp
c0007125:	5b                   	pop    ebx
c0007126:	5e                   	pop    esi
c0007127:	5f                   	pop    edi
c0007128:	5d                   	pop    ebp
c0007129:	c3                   	ret    

c000712a <f_mkfs>:
c000712a:	55                   	push   ebp
c000712b:	57                   	push   edi
c000712c:	56                   	push   esi
c000712d:	53                   	push   ebx
c000712e:	bb 0b 00 00 00       	mov    ebx,0xb
c0007133:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007139:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007140:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007147:	e8 f9 ae ff ff       	call   c0002045 <get_ldnumber>
c000714c:	85 c0                	test   eax,eax
c000714e:	0f 88 e8 10 00 00    	js     c000823c <f_mkfs+0x1112>
c0007154:	8b 14 85 40 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb8c0]
c000715b:	85 d2                	test   edx,edx
c000715d:	74 03                	je     c0007162 <f_mkfs+0x38>
c000715f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007162:	85 f6                	test   esi,esi
c0007164:	75 05                	jne    c000716b <f_mkfs+0x41>
c0007166:	be 80 04 02 c0       	mov    esi,0xc0020480
c000716b:	0f b6 c0             	movzx  eax,al
c000716e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007172:	83 ec 0c             	sub    esp,0xc
c0007175:	bb 03 00 00 00       	mov    ebx,0x3
c000717a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000717e:	e8 92 a8 ff ff       	call   c0001a15 <disk_initialize>
c0007183:	83 c4 10             	add    esp,0x10
c0007186:	a8 01                	test   al,0x1
c0007188:	0f 85 ae 10 00 00    	jne    c000823c <f_mkfs+0x1112>
c000718e:	bb 0a 00 00 00       	mov    ebx,0xa
c0007193:	a8 04                	test   al,0x4
c0007195:	0f 85 a1 10 00 00    	jne    c000823c <f_mkfs+0x1112>
c000719b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000719e:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071a2:	85 c0                	test   eax,eax
c00071a4:	75 20                	jne    c00071c6 <f_mkfs+0x9c>
c00071a6:	51                   	push   ecx
c00071a7:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071ab:	50                   	push   eax
c00071ac:	6a 03                	push   0x3
c00071ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071b2:	e8 8d a8 ff ff       	call   c0001a44 <disk_ioctl>
c00071b7:	83 c4 10             	add    esp,0x10
c00071ba:	85 c0                	test   eax,eax
c00071bc:	74 08                	je     c00071c6 <f_mkfs+0x9c>
c00071be:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071ca:	8d 42 ff             	lea    eax,[edx-0x1]
c00071cd:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071d2:	77 04                	ja     c00071d8 <f_mkfs+0xae>
c00071d4:	85 c2                	test   edx,eax
c00071d6:	74 08                	je     c00071e0 <f_mkfs+0xb6>
c00071d8:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071e0:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071e3:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071e7:	48                   	dec    eax
c00071e8:	3c 01                	cmp    al,0x1
c00071ea:	76 05                	jbe    c00071f1 <f_mkfs+0xc7>
c00071ec:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071f1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071f8:	48                   	dec    eax
c00071f9:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071fe:	77 07                	ja     c0007207 <f_mkfs+0xdd>
c0007200:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007205:	74 08                	je     c000720f <f_mkfs+0xe5>
c0007207:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000720f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007212:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007218:	77 07                	ja     c0007221 <f_mkfs+0xf7>
c000721a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000721d:	85 d8                	test   eax,ebx
c000721f:	74 02                	je     c0007223 <f_mkfs+0xf9>
c0007221:	31 db                	xor    ebx,ebx
c0007223:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000722e:	77 0a                	ja     c000723a <f_mkfs+0x110>
c0007230:	bb 11 00 00 00       	mov    ebx,0x11
c0007235:	e9 02 10 00 00       	jmp    c000823c <f_mkfs+0x1112>
c000723a:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007241:	8b 36                	mov    esi,DWORD PTR [esi]
c0007243:	85 ed                	test   ebp,ebp
c0007245:	75 1e                	jne    c0007265 <f_mkfs+0x13b>
c0007247:	83 ec 0c             	sub    esp,0xc
c000724a:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007251:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007256:	50                   	push   eax
c0007257:	e8 ed 0f 00 00       	call   c0008249 <ff_memalloc>
c000725c:	83 c4 10             	add    esp,0x10
c000725f:	89 c5                	mov    ebp,eax
c0007261:	85 c0                	test   eax,eax
c0007263:	74 cb                	je     c0007230 <f_mkfs+0x106>
c0007265:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000726d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007275:	52                   	push   edx
c0007276:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000727a:	50                   	push   eax
c000727b:	6a 01                	push   0x1
c000727d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007281:	e8 be a7 ff ff       	call   c0001a44 <disk_ioctl>
c0007286:	83 c4 10             	add    esp,0x10
c0007289:	85 c0                	test   eax,eax
c000728b:	0f 85 46 0f 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c0007291:	89 f1                	mov    ecx,esi
c0007293:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000729b:	83 e1 0f             	and    ecx,0xf
c000729e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a6:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072aa:	83 e6 08             	and    esi,0x8
c00072ad:	75 56                	jne    c0007305 <f_mkfs+0x1db>
c00072af:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072b3:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072b7:	83 ff 00             	cmp    edi,0x0
c00072ba:	76 20                	jbe    c00072dc <f_mkfs+0x1b2>
c00072bc:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072c1:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c7:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072cf:	83 d7 ff             	adc    edi,0xffffffff
c00072d2:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072d6:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072da:	eb 21                	jmp    c00072fd <f_mkfs+0x1d3>
c00072dc:	ba 3f 00 00 00       	mov    edx,0x3f
c00072e1:	39 f2                	cmp    edx,esi
c00072e3:	19 f8                	sbb    eax,edi
c00072e5:	73 1e                	jae    c0007305 <f_mkfs+0x1db>
c00072e7:	83 c6 c1             	add    esi,0xffffffc1
c00072ea:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072f2:	83 d7 ff             	adc    edi,0xffffffff
c00072f5:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f9:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072fd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007305:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007309:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000730d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007310:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007314:	ba 7f 00 00 00       	mov    edx,0x7f
c0007319:	31 c0                	xor    eax,eax
c000731b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000731e:	89 c7                	mov    edi,eax
c0007320:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007324:	0f 83 c1 0a 00 00    	jae    c0007deb <f_mkfs+0xcc1>
c000732a:	89 df                	mov    edi,ebx
c000732c:	c1 ef 09             	shr    edi,0x9
c000732f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007333:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000733a:	c1 ef 09             	shr    edi,0x9
c000733d:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007342:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007346:	74 29                	je     c0007371 <f_mkfs+0x247>
c0007348:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734d:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007353:	0f 97 c2             	seta   dl
c0007356:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007359:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000735d:	0f 92 c0             	setb   al
c0007360:	08 c2                	or     dl,al
c0007362:	75 5b                	jne    c00073bf <f_mkfs+0x295>
c0007364:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007368:	83 e0 07             	and    eax,0x7
c000736b:	3c 04                	cmp    al,0x4
c000736d:	74 50                	je     c00073bf <f_mkfs+0x295>
c000736f:	eb 1b                	jmp    c000738c <f_mkfs+0x262>
c0007371:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007376:	0f 87 6f 0a 00 00    	ja     c0007deb <f_mkfs+0xcc1>
c000737c:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007382:	76 08                	jbe    c000738c <f_mkfs+0x262>
c0007384:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000738c:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007390:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007394:	83 e0 01             	and    eax,0x1
c0007397:	80 e1 02             	and    cl,0x2
c000739a:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000739e:	74 0d                	je     c00073ad <f_mkfs+0x283>
c00073a0:	84 c0                	test   al,al
c00073a2:	0f 84 4f 09 00 00    	je     c0007cf7 <f_mkfs+0xbcd>
c00073a8:	e9 0e 08 00 00       	jmp    c0007bbb <f_mkfs+0xa91>
c00073ad:	bb 13 00 00 00       	mov    ebx,0x13
c00073b2:	84 c0                	test   al,al
c00073b4:	0f 85 01 08 00 00    	jne    c0007bbb <f_mkfs+0xa91>
c00073ba:	e9 35 0e 00 00       	jmp    c00081f4 <f_mkfs+0x10ca>
c00073bf:	ba ff 0f 00 00       	mov    edx,0xfff
c00073c4:	31 c0                	xor    eax,eax
c00073c6:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c9:	89 c7                	mov    edi,eax
c00073cb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073cf:	0f 83 16 0a 00 00    	jae    c0007deb <f_mkfs+0xcc1>
c00073d5:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073db:	77 39                	ja     c0007416 <f_mkfs+0x2ec>
c00073dd:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073e2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073ea:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073ed:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f1:	73 08                	jae    c00073fb <f_mkfs+0x2d1>
c00073f3:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073fb:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007400:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007403:	b8 00 00 00 00       	mov    eax,0x0
c0007408:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000740c:	73 08                	jae    c0007416 <f_mkfs+0x2ec>
c000740e:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000741a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000741e:	83 c0 20             	add    eax,0x20
c0007421:	83 d2 00             	adc    edx,0x0
c0007424:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007428:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000742c:	31 d2                	xor    edx,edx
c000742e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007432:	52                   	push   edx
c0007433:	50                   	push   eax
c0007434:	31 ff                	xor    edi,edi
c0007436:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000743a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000743e:	e8 d9 80 01 00       	call   c001f51c <__udivdi3>
c0007443:	83 c4 10             	add    esp,0x10
c0007446:	c1 e0 02             	shl    eax,0x2
c0007449:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000744d:	05 07 02 00 00       	add    eax,0x207
c0007452:	89 f1                	mov    ecx,esi
c0007454:	c1 e8 09             	shr    eax,0x9
c0007457:	89 fb                	mov    ebx,edi
c0007459:	83 c1 ff             	add    ecx,0xffffffff
c000745c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007460:	83 d3 ff             	adc    ebx,0xffffffff
c0007463:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007467:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c000746b:	31 d2                	xor    edx,edx
c000746d:	01 c8                	add    eax,ecx
c000746f:	11 da                	adc    edx,ebx
c0007471:	89 c1                	mov    ecx,eax
c0007473:	f7 de                	neg    esi
c0007475:	83 d7 00             	adc    edi,0x0
c0007478:	21 f1                	and    ecx,esi
c000747a:	f7 df                	neg    edi
c000747c:	89 d0                	mov    eax,edx
c000747e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007482:	21 f8                	and    eax,edi
c0007484:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007488:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007490:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007494:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007498:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000749c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000749f:	0f ac d0 01          	shrd   eax,edx,0x1
c00074a3:	d1 ea                	shr    edx,1
c00074a5:	89 df                	mov    edi,ebx
c00074a7:	39 c1                	cmp    ecx,eax
c00074a9:	19 d7                	sbb    edi,edx
c00074ab:	0f 83 3a 09 00 00    	jae    c0007deb <f_mkfs+0xcc1>
c00074b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074b5:	31 d2                	xor    edx,edx
c00074b7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074bf:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074c6:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074ca:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074ce:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074d6:	83 f8 0f             	cmp    eax,0xf
c00074d9:	0f 86 0c 09 00 00    	jbe    c0007deb <f_mkfs+0xcc1>
c00074df:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074e7:	0f 87 fe 08 00 00    	ja     c0007deb <f_mkfs+0xcc1>
c00074ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074f1:	31 d2                	xor    edx,edx
c00074f3:	83 c0 07             	add    eax,0x7
c00074f6:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074fe:	c1 e8 03             	shr    eax,0x3
c0007501:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007509:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007511:	c1 e0 09             	shl    eax,0x9
c0007514:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000751b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000751f:	48                   	dec    eax
c0007520:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007524:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c0007528:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000752c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007530:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000753b:	31 d2                	xor    edx,edx
c000753d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007542:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007546:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000754a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000754e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007552:	31 ff                	xor    edi,edi
c0007554:	31 f6                	xor    esi,esi
c0007556:	31 db                	xor    ebx,ebx
c0007558:	85 ff                	test   edi,edi
c000755a:	74 05                	je     c0007561 <f_mkfs+0x437>
c000755c:	4f                   	dec    edi
c000755d:	74 44                	je     c00075a3 <f_mkfs+0x479>
c000755f:	eb 4f                	jmp    c00075b0 <f_mkfs+0x486>
c0007561:	83 ec 0c             	sub    esp,0xc
c0007564:	0f b7 c3             	movzx  eax,bx
c0007567:	50                   	push   eax
c0007568:	e8 0e 0e 00 00       	call   c000837b <ff_wtoupper>
c000756d:	83 c4 10             	add    esp,0x10
c0007570:	89 c1                	mov    ecx,eax
c0007572:	66 39 c3             	cmp    bx,ax
c0007575:	8d 53 01             	lea    edx,[ebx+0x1]
c0007578:	75 3e                	jne    c00075b8 <f_mkfs+0x48e>
c000757a:	be 01 00 00 00       	mov    esi,0x1
c000757f:	89 df                	mov    edi,ebx
c0007581:	66 01 f7             	add    di,si
c0007584:	75 07                	jne    c000758d <f_mkfs+0x463>
c0007586:	83 fe 7f             	cmp    esi,0x7f
c0007589:	77 31                	ja     c00075bc <f_mkfs+0x492>
c000758b:	eb 16                	jmp    c00075a3 <f_mkfs+0x479>
c000758d:	83 ec 0c             	sub    esp,0xc
c0007590:	0f b7 ff             	movzx  edi,di
c0007593:	57                   	push   edi
c0007594:	e8 e2 0d 00 00       	call   c000837b <ff_wtoupper>
c0007599:	83 c4 10             	add    esp,0x10
c000759c:	39 c7                	cmp    edi,eax
c000759e:	75 e6                	jne    c0007586 <f_mkfs+0x45c>
c00075a0:	46                   	inc    esi
c00075a1:	eb dc                	jmp    c000757f <f_mkfs+0x455>
c00075a3:	31 c0                	xor    eax,eax
c00075a5:	4e                   	dec    esi
c00075a6:	0f 95 c0             	setne  al
c00075a9:	89 d9                	mov    ecx,ebx
c00075ab:	89 c7                	mov    edi,eax
c00075ad:	43                   	inc    ebx
c00075ae:	eb 14                	jmp    c00075c4 <f_mkfs+0x49a>
c00075b0:	89 f1                	mov    ecx,esi
c00075b2:	01 f3                	add    ebx,esi
c00075b4:	31 ff                	xor    edi,edi
c00075b6:	eb 0c                	jmp    c00075c4 <f_mkfs+0x49a>
c00075b8:	89 d3                	mov    ebx,edx
c00075ba:	eb 08                	jmp    c00075c4 <f_mkfs+0x49a>
c00075bc:	bf 02 00 00 00       	mov    edi,0x2
c00075c1:	83 c9 ff             	or     ecx,0xffffffff
c00075c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075cb:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075cf:	0f b6 c1             	movzx  eax,cl
c00075d2:	e8 87 a9 ff ff       	call   c0001f5e <xsum32>
c00075d7:	66 c1 e9 08          	shr    cx,0x8
c00075db:	89 c2                	mov    edx,eax
c00075dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075e0:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075e4:	0f b7 c1             	movzx  eax,cx
c00075e7:	e8 72 a9 ff ff       	call   c0001f5e <xsum32>
c00075ec:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075f1:	66 85 db             	test   bx,bx
c00075f4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f8:	74 1f                	je     c0007619 <f_mkfs+0x4ef>
c00075fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075fd:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007604:	83 c0 02             	add    eax,0x2
c0007607:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000760d:	39 c2                	cmp    edx,eax
c000760f:	74 08                	je     c0007619 <f_mkfs+0x4ef>
c0007611:	89 04 24             	mov    DWORD PTR [esp],eax
c0007614:	e9 3f ff ff ff       	jmp    c0007558 <f_mkfs+0x42e>
c0007619:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000761c:	83 ec 0c             	sub    esp,0xc
c000761f:	05 01 02 00 00       	add    eax,0x201
c0007624:	c1 e8 09             	shr    eax,0x9
c0007627:	50                   	push   eax
c0007628:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000762c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007630:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007634:	55                   	push   ebp
c0007635:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007639:	e8 f0 a3 ff ff       	call   c0001a2e <disk_write>
c000763e:	83 c4 20             	add    esp,0x20
c0007641:	85 c0                	test   eax,eax
c0007643:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007646:	0f 85 8b 0b 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c000764c:	89 d0                	mov    eax,edx
c000764e:	31 d2                	xor    edx,edx
c0007650:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007654:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007658:	66 85 db             	test   bx,bx
c000765b:	74 04                	je     c0007661 <f_mkfs+0x537>
c000765d:	31 c0                	xor    eax,eax
c000765f:	eb b0                	jmp    c0007611 <f_mkfs+0x4e7>
c0007661:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007665:	31 d2                	xor    edx,edx
c0007667:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000766b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000766f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007673:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000767a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000767e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007684:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007688:	8d 70 01             	lea    esi,[eax+0x1]
c000768b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007693:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000769e:	c1 eb 09             	shr    ebx,0x9
c00076a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076a9:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076b0:	31 d2                	xor    edx,edx
c00076b2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ba:	89 c1                	mov    ecx,eax
c00076bc:	89 e8                	mov    eax,ebp
c00076be:	e8 34 a4 ff ff       	call   c0001af7 <mem_set>
c00076c3:	31 c0                	xor    eax,eax
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 10                	jbe    c00076da <f_mkfs+0x5b0>
c00076ca:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076cd:	76 0b                	jbe    c00076da <f_mkfs+0x5b0>
c00076cf:	40                   	inc    eax
c00076d0:	83 ee 08             	sub    esi,0x8
c00076d3:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d8:	eb eb                	jmp    c00076c5 <f_mkfs+0x59b>
c00076da:	b2 01                	mov    dl,0x1
c00076dc:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076e0:	85 f6                	test   esi,esi
c00076e2:	74 0c                	je     c00076f0 <f_mkfs+0x5c6>
c00076e4:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e7:	76 07                	jbe    c00076f0 <f_mkfs+0x5c6>
c00076e9:	08 11                	or     BYTE PTR [ecx],dl
c00076eb:	4e                   	dec    esi
c00076ec:	01 d2                	add    edx,edx
c00076ee:	eb f0                	jmp    c00076e0 <f_mkfs+0x5b6>
c00076f0:	89 df                	mov    edi,ebx
c00076f2:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f6:	76 04                	jbe    c00076fc <f_mkfs+0x5d2>
c00076f8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076fc:	83 ec 0c             	sub    esp,0xc
c00076ff:	57                   	push   edi
c0007700:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007704:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007708:	55                   	push   ebp
c0007709:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000770d:	e8 1c a3 ff ff       	call   c0001a2e <disk_write>
c0007712:	83 c4 20             	add    esp,0x20
c0007715:	85 c0                	test   eax,eax
c0007717:	0f 85 ba 0a 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c000771d:	31 d2                	xor    edx,edx
c000771f:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007723:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007727:	29 fb                	sub    ebx,edi
c0007729:	0f 85 7a ff ff ff    	jne    c00076a9 <f_mkfs+0x57f>
c000772f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007733:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000773b:	31 f6                	xor    esi,esi
c000773d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007741:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007744:	31 d2                	xor    edx,edx
c0007746:	89 e8                	mov    eax,ebp
c0007748:	e8 aa a3 ff ff       	call   c0001af7 <mem_set>
c000774d:	31 c9                	xor    ecx,ecx
c000774f:	85 db                	test   ebx,ebx
c0007751:	75 40                	jne    c0007793 <f_mkfs+0x669>
c0007753:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007758:	89 e8                	mov    eax,ebp
c000775a:	e8 7a a3 ff ff       	call   c0001ad9 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	bb 02 00 00 00       	mov    ebx,0x2
c000776a:	e8 6a a3 ff ff       	call   c0001ad9 <st_dword>
c000776f:	b9 08 00 00 00       	mov    ecx,0x8
c0007774:	eb 1d                	jmp    c0007793 <f_mkfs+0x669>
c0007776:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007779:	76 3b                	jbe    c00077b6 <f_mkfs+0x68c>
c000777b:	43                   	inc    ebx
c000777c:	83 fe 01             	cmp    esi,0x1
c000777f:	89 da                	mov    edx,ebx
c0007781:	77 03                	ja     c0007786 <f_mkfs+0x65c>
c0007783:	83 ca ff             	or     edx,0xffffffff
c0007786:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000778a:	4e                   	dec    esi
c000778b:	e8 49 a3 ff ff       	call   c0001ad9 <st_dword>
c0007790:	83 c1 04             	add    ecx,0x4
c0007793:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007797:	85 f6                	test   esi,esi
c0007799:	75 db                	jne    c0007776 <f_mkfs+0x64c>
c000779b:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077a0:	77 14                	ja     c00077b6 <f_mkfs+0x68c>
c00077a2:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077ad:	85 f6                	test   esi,esi
c00077af:	74 05                	je     c00077b6 <f_mkfs+0x68c>
c00077b1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077b4:	77 dd                	ja     c0007793 <f_mkfs+0x669>
c00077b6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00077ba:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077be:	39 cf                	cmp    edi,ecx
c00077c0:	76 02                	jbe    c00077c4 <f_mkfs+0x69a>
c00077c2:	89 cf                	mov    edi,ecx
c00077c4:	83 ec 0c             	sub    esp,0xc
c00077c7:	57                   	push   edi
c00077c8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077cc:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077d0:	55                   	push   ebp
c00077d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d5:	e8 54 a2 ff ff       	call   c0001a2e <disk_write>
c00077da:	83 c4 20             	add    esp,0x20
c00077dd:	85 c0                	test   eax,eax
c00077df:	0f 85 f2 09 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c00077e5:	31 d2                	xor    edx,edx
c00077e7:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077eb:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077ef:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077f3:	0f 85 48 ff ff ff    	jne    c0007741 <f_mkfs+0x617>
c00077f9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077fc:	31 d2                	xor    edx,edx
c00077fe:	89 e8                	mov    eax,ebp
c0007800:	31 ff                	xor    edi,edi
c0007802:	e8 f0 a2 ff ff       	call   c0001af7 <mem_set>
c0007807:	8d 45 34             	lea    eax,[ebp+0x34]
c000780a:	ba 02 00 00 00       	mov    edx,0x2
c000780f:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007813:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007817:	e8 bd a2 ff ff       	call   c0001ad9 <st_dword>
c000781c:	8d 45 38             	lea    eax,[ebp+0x38]
c000781f:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007823:	e8 b1 a2 ff ff       	call   c0001ad9 <st_dword>
c0007828:	8d 45 44             	lea    eax,[ebp+0x44]
c000782b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782f:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007833:	e8 a1 a2 ff ff       	call   c0001ad9 <st_dword>
c0007838:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783c:	8d 45 54             	lea    eax,[ebp+0x54]
c000783f:	83 c2 02             	add    edx,0x2
c0007842:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007846:	e8 8e a2 ff ff       	call   c0001ad9 <st_dword>
c000784b:	8d 45 58             	lea    eax,[ebp+0x58]
c000784e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007852:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007856:	e8 7e a2 ff ff       	call   c0001ad9 <st_dword>
c000785b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007864:	89 c6                	mov    esi,eax
c0007866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000786a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000786e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007871:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007875:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007878:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000787c:	39 cb                	cmp    ebx,ecx
c000787e:	76 02                	jbe    c0007882 <f_mkfs+0x758>
c0007880:	89 cb                	mov    ebx,ecx
c0007882:	83 ec 0c             	sub    esp,0xc
c0007885:	53                   	push   ebx
c0007886:	57                   	push   edi
c0007887:	56                   	push   esi
c0007888:	55                   	push   ebp
c0007889:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788d:	e8 9c a1 ff ff       	call   c0001a2e <disk_write>
c0007892:	83 c4 20             	add    esp,0x20
c0007895:	85 c0                	test   eax,eax
c0007897:	0f 85 3a 09 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c000789d:	31 d2                	xor    edx,edx
c000789f:	b9 00 02 00 00       	mov    ecx,0x200
c00078a4:	89 e8                	mov    eax,ebp
c00078a6:	e8 4c a2 ff ff       	call   c0001af7 <mem_set>
c00078ab:	31 d2                	xor    edx,edx
c00078ad:	01 de                	add    esi,ebx
c00078af:	11 d7                	adc    edi,edx
c00078b1:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078b4:	75 bf                	jne    c0007875 <f_mkfs+0x74b>
c00078b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078be:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c6:	b9 00 02 00 00       	mov    ecx,0x200
c00078cb:	31 d2                	xor    edx,edx
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 23 a2 ff ff       	call   c0001af7 <mem_set>
c00078d4:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d9:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00078de:	89 e8                	mov    eax,ebp
c00078e0:	e8 fd a1 ff ff       	call   c0001ae2 <mem_cpy>
c00078e5:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078f0:	e8 e7 a1 ff ff       	call   c0001adc <st_qword>
c00078f5:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f9:	8d 45 48             	lea    eax,[ebp+0x48]
c00078fc:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007900:	e8 d7 a1 ff ff       	call   c0001adc <st_qword>
c0007905:	8d 45 50             	lea    eax,[ebp+0x50]
c0007908:	ba 20 00 00 00       	mov    edx,0x20
c000790d:	e8 c7 a1 ff ff       	call   c0001ad9 <st_dword>
c0007912:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007916:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000791a:	e8 ba a1 ff ff       	call   c0001ad9 <st_dword>
c000791f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007923:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007927:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000792b:	e8 a9 a1 ff ff       	call   c0001ad9 <st_dword>
c0007930:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007933:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007937:	e8 9d a1 ff ff       	call   c0001ad9 <st_dword>
c000793c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007940:	8d 50 02             	lea    edx,[eax+0x2]
c0007943:	8d 45 60             	lea    eax,[ebp+0x60]
c0007946:	e8 8e a1 ff ff       	call   c0001ad9 <st_dword>
c000794b:	8d 45 64             	lea    eax,[ebp+0x64]
c000794e:	ba 00 00 21 50       	mov    edx,0x50210000
c0007953:	e8 81 a1 ff ff       	call   c0001ad9 <st_dword>
c0007958:	8d 45 68             	lea    eax,[ebp+0x68]
c000795b:	ba 00 01 00 00       	mov    edx,0x100
c0007960:	e8 70 a1 ff ff       	call   c0001ad5 <st_word>
c0007965:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007969:	b8 0a 00 00 00       	mov    eax,0xa
c000796e:	48                   	dec    eax
c000796f:	74 05                	je     c0007976 <f_mkfs+0x84c>
c0007971:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007974:	eb f8                	jmp    c000796e <f_mkfs+0x844>
c0007976:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000797a:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000797e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007982:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007986:	74 05                	je     c000798d <f_mkfs+0x863>
c0007988:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c000798b:	eb f5                	jmp    c0007982 <f_mkfs+0x858>
c000798d:	8d 45 78             	lea    eax,[ebp+0x78]
c0007990:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007995:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c000799b:	31 db                	xor    ebx,ebx
c000799d:	e8 33 a1 ff ff       	call   c0001ad5 <st_word>
c00079a2:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00079b0:	e8 20 a1 ff ff       	call   c0001ad5 <st_word>
c00079b5:	31 c9                	xor    ecx,ecx
c00079b7:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ba:	83 f8 01             	cmp    eax,0x1
c00079bd:	76 13                	jbe    c00079d2 <f_mkfs+0x8a8>
c00079bf:	83 f9 70             	cmp    ecx,0x70
c00079c2:	74 0e                	je     c00079d2 <f_mkfs+0x8a8>
c00079c4:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c9:	89 da                	mov    edx,ebx
c00079cb:	e8 8e a5 ff ff       	call   c0001f5e <xsum32>
c00079d0:	89 c3                	mov    ebx,eax
c00079d2:	41                   	inc    ecx
c00079d3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d9:	75 dc                	jne    c00079b7 <f_mkfs+0x88d>
c00079db:	89 f0                	mov    eax,esi
c00079dd:	89 fa                	mov    edx,edi
c00079df:	83 c0 01             	add    eax,0x1
c00079e2:	83 d2 00             	adc    edx,0x0
c00079e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079ed:	83 ec 0c             	sub    esp,0xc
c00079f0:	6a 01                	push   0x1
c00079f2:	57                   	push   edi
c00079f3:	56                   	push   esi
c00079f4:	55                   	push   ebp
c00079f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f9:	e8 30 a0 ff ff       	call   c0001a2e <disk_write>
c00079fe:	83 c4 20             	add    esp,0x20
c0007a01:	85 c0                	test   eax,eax
c0007a03:	0f 85 ce 07 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c0007a09:	31 d2                	xor    edx,edx
c0007a0b:	b9 00 02 00 00       	mov    ecx,0x200
c0007a10:	89 e8                	mov    eax,ebp
c0007a12:	e8 e0 a0 ff ff       	call   c0001af7 <mem_set>
c0007a17:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1f:	e8 b1 a0 ff ff       	call   c0001ad5 <st_word>
c0007a24:	89 f0                	mov    eax,esi
c0007a26:	83 c0 09             	add    eax,0x9
c0007a29:	89 fa                	mov    edx,edi
c0007a2b:	83 d2 00             	adc    edx,0x0
c0007a2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a31:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a35:	31 c9                	xor    ecx,ecx
c0007a37:	41                   	inc    ecx
c0007a38:	89 da                	mov    edx,ebx
c0007a3a:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3f:	e8 1a a5 ff ff       	call   c0001f5e <xsum32>
c0007a44:	89 c3                	mov    ebx,eax
c0007a46:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a4c:	75 e9                	jne    c0007a37 <f_mkfs+0x90d>
c0007a4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a52:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a56:	83 c0 01             	add    eax,0x1
c0007a59:	83 d2 00             	adc    edx,0x0
c0007a5c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a60:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a64:	83 ec 0c             	sub    esp,0xc
c0007a67:	6a 01                	push   0x1
c0007a69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a71:	55                   	push   ebp
c0007a72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a76:	e8 b3 9f ff ff       	call   c0001a2e <disk_write>
c0007a7b:	83 c4 20             	add    esp,0x20
c0007a7e:	85 c0                	test   eax,eax
c0007a80:	0f 85 51 07 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c0007a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a8a:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a8e:	75 09                	jne    c0007a99 <f_mkfs+0x96f>
c0007a90:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a93:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a97:	74 12                	je     c0007aab <f_mkfs+0x981>
c0007a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a9d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007aa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa9:	eb 8a                	jmp    c0007a35 <f_mkfs+0x90b>
c0007aab:	31 d2                	xor    edx,edx
c0007aad:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab2:	89 e8                	mov    eax,ebp
c0007ab4:	e8 3e a0 ff ff       	call   c0001af7 <mem_set>
c0007ab9:	83 c6 0b             	add    esi,0xb
c0007abc:	83 d7 00             	adc    edi,0x0
c0007abf:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007ac3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac7:	31 c9                	xor    ecx,ecx
c0007ac9:	41                   	inc    ecx
c0007aca:	89 da                	mov    edx,ebx
c0007acc:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ad1:	e8 88 a4 ff ff       	call   c0001f5e <xsum32>
c0007ad6:	89 c3                	mov    ebx,eax
c0007ad8:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ade:	75 e9                	jne    c0007ac9 <f_mkfs+0x99f>
c0007ae0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ae3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae7:	83 c6 01             	add    esi,0x1
c0007aea:	83 d7 00             	adc    edi,0x0
c0007aed:	83 ec 0c             	sub    esp,0xc
c0007af0:	6a 01                	push   0x1
c0007af2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007afa:	55                   	push   ebp
c0007afb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aff:	e8 2a 9f ff ff       	call   c0001a2e <disk_write>
c0007b04:	83 c4 20             	add    esp,0x20
c0007b07:	85 c0                	test   eax,eax
c0007b09:	0f 85 c8 06 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c0007b0f:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b13:	75 06                	jne    c0007b1b <f_mkfs+0x9f1>
c0007b15:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b19:	74 09                	je     c0007b24 <f_mkfs+0x9fa>
c0007b1b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b22:	eb a3                	jmp    c0007ac7 <f_mkfs+0x99d>
c0007b24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b28:	89 da                	mov    edx,ebx
c0007b2a:	01 e8                	add    eax,ebp
c0007b2c:	e8 a8 9f ff ff       	call   c0001ad9 <st_dword>
c0007b31:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b36:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b3e:	75 e4                	jne    c0007b24 <f_mkfs+0x9fa>
c0007b40:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b43:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b47:	83 c6 02             	add    esi,0x2
c0007b4a:	83 d7 00             	adc    edi,0x0
c0007b4d:	83 ec 0c             	sub    esp,0xc
c0007b50:	6a 01                	push   0x1
c0007b52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b5a:	55                   	push   ebp
c0007b5b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5f:	e8 ca 9e ff ff       	call   c0001a2e <disk_write>
c0007b64:	83 c4 20             	add    esp,0x20
c0007b67:	85 c0                	test   eax,eax
c0007b69:	0f 85 68 06 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c0007b6f:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b74:	74 0d                	je     c0007b83 <f_mkfs+0xa59>
c0007b76:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b7e:	e9 43 fd ff ff       	jmp    c00078c6 <f_mkfs+0x79c>
c0007b83:	b1 07                	mov    cl,0x7
c0007b85:	e9 e3 05 00 00       	jmp    c000816d <f_mkfs+0x1043>
c0007b8a:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8f:	0f 85 4f 02 00 00    	jne    c0007de4 <f_mkfs+0xcba>
c0007b95:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b9a:	0f 86 22 02 00 00    	jbe    c0007dc2 <f_mkfs+0xc98>
c0007ba0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba5:	0f 85 81 06 00 00    	jne    c000822c <f_mkfs+0x1102>
c0007bab:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007bae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bb2:	83 f8 40             	cmp    eax,0x40
c0007bb5:	0f 87 51 06 00 00    	ja     c000820c <f_mkfs+0x10e2>
c0007bbb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bbf:	85 ff                	test   edi,edi
c0007bc1:	75 1c                	jne    c0007bdf <f_mkfs+0xab5>
c0007bc3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc6:	ba 60 04 02 c0       	mov    edx,0xc0020460
c0007bcb:	c1 e9 0c             	shr    ecx,0xc
c0007bce:	bf 01 00 00 00       	mov    edi,0x1
c0007bd3:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd6:	66 85 c0             	test   ax,ax
c0007bd9:	0f 85 95 01 00 00    	jne    c0007d74 <f_mkfs+0xc4a>
c0007bdf:	31 d2                	xor    edx,edx
c0007be1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007be4:	f7 f7                	div    edi
c0007be6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007beb:	0f 86 95 01 00 00    	jbe    c0007d86 <f_mkfs+0xc5c>
c0007bf1:	83 c0 02             	add    eax,0x2
c0007bf4:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf9:	01 c0                	add    eax,eax
c0007bfb:	05 ff 01 00 00       	add    eax,0x1ff
c0007c00:	be 01 00 00 00       	mov    esi,0x1
c0007c05:	c1 e8 09             	shr    eax,0x9
c0007c08:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c10:	c1 e0 05             	shl    eax,0x5
c0007c13:	c1 e8 09             	shr    eax,0x9
c0007c16:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c1a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c1f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c23:	89 f0                	mov    eax,esi
c0007c25:	31 d2                	xor    edx,edx
c0007c27:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c37:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c3b:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c40:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c44:	31 d2                	xor    edx,edx
c0007c46:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c4a:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c4e:	31 db                	xor    ebx,ebx
c0007c50:	01 c8                	add    eax,ecx
c0007c52:	11 da                	adc    edx,ebx
c0007c54:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c58:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c60:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c64:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c68:	f7 da                	neg    edx
c0007c6a:	21 d1                	and    ecx,edx
c0007c6c:	29 d9                	sub    ecx,ebx
c0007c6e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c73:	0f 85 20 01 00 00    	jne    c0007d99 <f_mkfs+0xc6f>
c0007c79:	31 db                	xor    ebx,ebx
c0007c7b:	01 ce                	add    esi,ecx
c0007c7d:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c81:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c85:	89 f8                	mov    eax,edi
c0007c87:	31 d2                	xor    edx,edx
c0007c89:	c1 e0 04             	shl    eax,0x4
c0007c8c:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c90:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c94:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c98:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c9c:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ca0:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ca3:	19 d3                	sbb    ebx,edx
c0007ca5:	0f 82 40 01 00 00    	jb     c0007deb <f_mkfs+0xcc1>
c0007cab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007caf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cb2:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007cb7:	89 c8                	mov    eax,ecx
c0007cb9:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007cbd:	29 f0                	sub    eax,esi
c0007cbf:	29 d0                	sub    eax,edx
c0007cc1:	31 d2                	xor    edx,edx
c0007cc3:	f7 f7                	div    edi
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ccc:	0f 85 b8 fe ff ff    	jne    c0007b8a <f_mkfs+0xa60>
c0007cd2:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd7:	0f 87 1d 01 00 00    	ja     c0007dfa <f_mkfs+0xcd0>
c0007cdd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ce2:	0f 85 03 01 00 00    	jne    c0007deb <f_mkfs+0xcc1>
c0007ce8:	83 ff 01             	cmp    edi,0x1
c0007ceb:	0f 86 fa 00 00 00    	jbe    c0007deb <f_mkfs+0xcc1>
c0007cf1:	d1 ef                	shr    edi,1
c0007cf3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cfb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cfe:	85 db                	test   ebx,ebx
c0007d00:	75 2d                	jne    c0007d2f <f_mkfs+0xc05>
c0007d02:	89 cb                	mov    ebx,ecx
c0007d04:	ba 70 04 02 c0       	mov    edx,0xc0020470
c0007d09:	c1 eb 11             	shr    ebx,0x11
c0007d0c:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d14:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d17:	66 85 c0             	test   ax,ax
c0007d1a:	74 11                	je     c0007d2d <f_mkfs+0xc03>
c0007d1c:	83 c2 02             	add    edx,0x2
c0007d1f:	39 d8                	cmp    eax,ebx
c0007d21:	77 0a                	ja     c0007d2d <f_mkfs+0xc03>
c0007d23:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d27:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d2b:	eb e7                	jmp    c0007d14 <f_mkfs+0xbea>
c0007d2d:	31 db                	xor    ebx,ebx
c0007d2f:	31 d2                	xor    edx,edx
c0007d31:	89 c8                	mov    eax,ecx
c0007d33:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d37:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d3e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d43:	c1 ea 09             	shr    edx,0x9
c0007d46:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d4b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4f:	0f 87 96 00 00 00    	ja     c0007deb <f_mkfs+0xcc1>
c0007d55:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d59:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d61:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d65:	be 20 00 00 00       	mov    esi,0x20
c0007d6a:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6f:	e9 a6 fe ff ff       	jmp    c0007c1a <f_mkfs+0xaf0>
c0007d74:	83 c2 02             	add    edx,0x2
c0007d77:	39 c8                	cmp    eax,ecx
c0007d79:	0f 87 60 fe ff ff    	ja     c0007bdf <f_mkfs+0xab5>
c0007d7f:	01 ff                	add    edi,edi
c0007d81:	e9 4d fe ff ff       	jmp    c0007bd3 <f_mkfs+0xaa9>
c0007d86:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d89:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d8e:	40                   	inc    eax
c0007d8f:	d1 e8                	shr    eax,1
c0007d91:	83 c0 03             	add    eax,0x3
c0007d94:	e9 62 fe ff ff       	jmp    c0007bfb <f_mkfs+0xad1>
c0007d99:	31 d2                	xor    edx,edx
c0007d9b:	89 c8                	mov    eax,ecx
c0007d9d:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007da1:	85 d2                	test   edx,edx
c0007da3:	74 0c                	je     c0007db1 <f_mkfs+0xc87>
c0007da5:	49                   	dec    ecx
c0007da6:	46                   	inc    esi
c0007da7:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007dac:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007db1:	89 c8                	mov    eax,ecx
c0007db3:	31 d2                	xor    edx,edx
c0007db5:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007db9:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007dbd:	e9 c3 fe ff ff       	jmp    c0007c85 <f_mkfs+0xb5b>
c0007dc2:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc7:	77 31                	ja     c0007dfa <f_mkfs+0xcd0>
c0007dc9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dce:	75 1b                	jne    c0007deb <f_mkfs+0xcc1>
c0007dd0:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd7:	3d 80 00 00 00       	cmp    eax,0x80
c0007ddc:	0f 86 d9 fd ff ff    	jbe    c0007bbb <f_mkfs+0xa91>
c0007de2:	eb 07                	jmp    c0007deb <f_mkfs+0xcc1>
c0007de4:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de9:	76 0a                	jbe    c0007df5 <f_mkfs+0xccb>
c0007deb:	bb 0e 00 00 00       	mov    ebx,0xe
c0007df0:	e9 ff 03 00 00       	jmp    c00081f4 <f_mkfs+0x10ca>
c0007df5:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dfa:	31 d2                	xor    edx,edx
c0007dfc:	b9 00 02 00 00       	mov    ecx,0x200
c0007e01:	89 e8                	mov    eax,ebp
c0007e03:	e8 ef 9c ff ff       	call   c0001af7 <mem_set>
c0007e08:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e0d:	ba 82 05 02 c0       	mov    edx,0xc0020582
c0007e12:	89 e8                	mov    eax,ebp
c0007e14:	e8 c9 9c ff ff       	call   c0001ae2 <mem_cpy>
c0007e19:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e1c:	ba 00 02 00 00       	mov    edx,0x200
c0007e21:	e8 af 9c ff ff       	call   c0001ad5 <st_word>
c0007e26:	89 f8                	mov    eax,edi
c0007e28:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e2b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2e:	0f b7 d6             	movzx  edx,si
c0007e31:	e8 9f 9c ff ff       	call   c0001ad5 <st_word>
c0007e36:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e42:	75 08                	jne    c0007e4c <f_mkfs+0xd22>
c0007e44:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e4c:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e53:	e8 7d 9c ff ff       	call   c0001ad5 <st_word>
c0007e58:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e5d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e61:	39 d0                	cmp    eax,edx
c0007e63:	b8 00 00 00 00       	mov    eax,0x0
c0007e68:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e6c:	72 0a                	jb     c0007e78 <f_mkfs+0xd4e>
c0007e6e:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e71:	e8 5f 9c ff ff       	call   c0001ad5 <st_word>
c0007e76:	eb 08                	jmp    c0007e80 <f_mkfs+0xd56>
c0007e78:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e7b:	e8 59 9c ff ff       	call   c0001ad9 <st_dword>
c0007e80:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e83:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e88:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e8c:	e8 44 9c ff ff       	call   c0001ad5 <st_word>
c0007e91:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e94:	ba ff 00 00 00       	mov    edx,0xff
c0007e99:	e8 37 9c ff ff       	call   c0001ad5 <st_word>
c0007e9e:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ea1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea5:	e8 2f 9c ff ff       	call   c0001ad9 <st_dword>
c0007eaa:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaf:	75 57                	jne    c0007f08 <f_mkfs+0xdde>
c0007eb1:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eb4:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb9:	e8 1b 9c ff ff       	call   c0001ad9 <st_dword>
c0007ebe:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ec1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec5:	e8 0f 9c ff ff       	call   c0001ad9 <st_dword>
c0007eca:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ecd:	ba 02 00 00 00       	mov    edx,0x2
c0007ed2:	e8 02 9c ff ff       	call   c0001ad9 <st_dword>
c0007ed7:	8d 45 30             	lea    eax,[ebp+0x30]
c0007eda:	ba 01 00 00 00       	mov    edx,0x1
c0007edf:	e8 f1 9b ff ff       	call   c0001ad5 <st_word>
c0007ee4:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee7:	ba 06 00 00 00       	mov    edx,0x6
c0007eec:	e8 e4 9b ff ff       	call   c0001ad5 <st_word>
c0007ef1:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef5:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef9:	8d 45 47             	lea    eax,[ebp+0x47]
c0007efc:	b9 13 00 00 00       	mov    ecx,0x13
c0007f01:	ba 8e 05 02 c0       	mov    edx,0xc002058e
c0007f06:	eb 2f                	jmp    c0007f37 <f_mkfs+0xe0d>
c0007f08:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f0b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f10:	e8 c4 9b ff ff       	call   c0001ad9 <st_dword>
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f1d:	e8 b3 9b ff ff       	call   c0001ad5 <st_word>
c0007f22:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f26:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f2a:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f2d:	b9 13 00 00 00       	mov    ecx,0x13
c0007f32:	ba a2 05 02 c0       	mov    edx,0xc00205a2
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	e8 a0 9b ff ff       	call   c0001ae2 <mem_cpy>
c0007f42:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	e8 87 9b ff ff       	call   c0001ad5 <st_word>
c0007f4e:	83 ec 0c             	sub    esp,0xc
c0007f51:	6a 01                	push   0x1
c0007f53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f5b:	55                   	push   ebp
c0007f5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f60:	e8 c9 9a ff ff       	call   c0001a2e <disk_write>
c0007f65:	83 c4 20             	add    esp,0x20
c0007f68:	85 c0                	test   eax,eax
c0007f6a:	0f 85 67 02 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c0007f70:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f75:	0f 85 b7 00 00 00    	jne    c0008032 <f_mkfs+0xf08>
c0007f7b:	83 ec 0c             	sub    esp,0xc
c0007f7e:	6a 01                	push   0x1
c0007f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f84:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f88:	83 c0 06             	add    eax,0x6
c0007f8b:	83 d2 00             	adc    edx,0x0
c0007f8e:	52                   	push   edx
c0007f8f:	50                   	push   eax
c0007f90:	55                   	push   ebp
c0007f91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f95:	e8 94 9a ff ff       	call   c0001a2e <disk_write>
c0007f9a:	83 c4 20             	add    esp,0x20
c0007f9d:	b9 00 02 00 00       	mov    ecx,0x200
c0007fa2:	31 d2                	xor    edx,edx
c0007fa4:	89 e8                	mov    eax,ebp
c0007fa6:	e8 4c 9b ff ff       	call   c0001af7 <mem_set>
c0007fab:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fb0:	89 e8                	mov    eax,ebp
c0007fb2:	e8 22 9b ff ff       	call   c0001ad9 <st_dword>
c0007fb7:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fbd:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fc2:	e8 12 9b ff ff       	call   c0001ad9 <st_dword>
c0007fc7:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fca:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fd0:	e8 04 9b ff ff       	call   c0001ad9 <st_dword>
c0007fd5:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fdb:	ba 02 00 00 00       	mov    edx,0x2
c0007fe0:	e8 f4 9a ff ff       	call   c0001ad9 <st_dword>
c0007fe5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fea:	89 f0                	mov    eax,esi
c0007fec:	e8 e4 9a ff ff       	call   c0001ad5 <st_word>
c0007ff1:	83 ec 0c             	sub    esp,0xc
c0007ff4:	6a 01                	push   0x1
c0007ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ffa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ffe:	83 c0 07             	add    eax,0x7
c0008001:	83 d2 00             	adc    edx,0x0
c0008004:	52                   	push   edx
c0008005:	50                   	push   eax
c0008006:	55                   	push   ebp
c0008007:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000800b:	e8 1e 9a ff ff       	call   c0001a2e <disk_write>
c0008010:	83 c4 14             	add    esp,0x14
c0008013:	6a 01                	push   0x1
c0008015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008019:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000801d:	83 c0 01             	add    eax,0x1
c0008020:	83 d2 00             	adc    edx,0x0
c0008023:	52                   	push   edx
c0008024:	50                   	push   eax
c0008025:	55                   	push   ebp
c0008026:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000802a:	e8 ff 99 ff ff       	call   c0001a2e <disk_write>
c000802f:	83 c4 20             	add    esp,0x20
c0008032:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008039:	31 d2                	xor    edx,edx
c000803b:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008041:	31 db                	xor    ebx,ebx
c0008043:	89 e8                	mov    eax,ebp
c0008045:	e8 ad 9a ff ff       	call   c0001af7 <mem_set>
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008056:	0f 94 c3             	sete   bl
c0008059:	4b                   	dec    ebx
c000805a:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008060:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008066:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000806b:	75 21                	jne    c000808e <f_mkfs+0xf64>
c000806d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008072:	89 e8                	mov    eax,ebp
c0008074:	e8 60 9a ff ff       	call   c0001ad9 <st_dword>
c0008079:	8d 45 04             	lea    eax,[ebp+0x4]
c000807c:	83 ca ff             	or     edx,0xffffffff
c000807f:	e8 55 9a ff ff       	call   c0001ad9 <st_dword>
c0008084:	8d 45 08             	lea    eax,[ebp+0x8]
c0008087:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000808c:	eb 04                	jmp    c0008092 <f_mkfs+0xf68>
c000808e:	89 da                	mov    edx,ebx
c0008090:	89 e8                	mov    eax,ebp
c0008092:	e8 42 9a ff ff       	call   c0001ad9 <st_dword>
c0008097:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000809b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a7:	39 ce                	cmp    esi,ecx
c00080a9:	76 02                	jbe    c00080ad <f_mkfs+0xf83>
c00080ab:	89 ce                	mov    esi,ecx
c00080ad:	83 ec 0c             	sub    esp,0xc
c00080b0:	56                   	push   esi
c00080b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b9:	55                   	push   ebp
c00080ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080be:	e8 6b 99 ff ff       	call   c0001a2e <disk_write>
c00080c3:	83 c4 20             	add    esp,0x20
c00080c6:	85 c0                	test   eax,eax
c00080c8:	0f 85 09 01 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c00080ce:	31 d2                	xor    edx,edx
c00080d0:	b9 00 02 00 00       	mov    ecx,0x200
c00080d5:	89 e8                	mov    eax,ebp
c00080d7:	e8 1b 9a ff ff       	call   c0001af7 <mem_set>
c00080dc:	31 d2                	xor    edx,edx
c00080de:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080e2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e6:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080ea:	75 b3                	jne    c000809f <f_mkfs+0xf75>
c00080ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ef:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f6:	40                   	inc    eax
c00080f7:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080fb:	0f 87 65 ff ff ff    	ja     c0008066 <f_mkfs+0xf3c>
c0008101:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008106:	74 04                	je     c000810c <f_mkfs+0xfe2>
c0008108:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000810c:	89 fb                	mov    ebx,edi
c000810e:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008112:	76 04                	jbe    c0008118 <f_mkfs+0xfee>
c0008114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008118:	83 ec 0c             	sub    esp,0xc
c000811b:	53                   	push   ebx
c000811c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008120:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008124:	55                   	push   ebp
c0008125:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008129:	e8 00 99 ff ff       	call   c0001a2e <disk_write>
c000812e:	83 c4 20             	add    esp,0x20
c0008131:	85 c0                	test   eax,eax
c0008133:	0f 85 9e 00 00 00    	jne    c00081d7 <f_mkfs+0x10ad>
c0008139:	31 d2                	xor    edx,edx
c000813b:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813f:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008143:	29 df                	sub    edi,ebx
c0008145:	75 c5                	jne    c000810c <f_mkfs+0xfe2>
c0008147:	b1 0c                	mov    cl,0xc
c0008149:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000814e:	74 1d                	je     c000816d <f_mkfs+0x1043>
c0008150:	b8 ff ff 00 00       	mov    eax,0xffff
c0008155:	b1 06                	mov    cl,0x6
c0008157:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000815b:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815f:	72 0c                	jb     c000816d <f_mkfs+0x1043>
c0008161:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008166:	0f 94 c1             	sete   cl
c0008169:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000816d:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008172:	75 4c                	jne    c00081c0 <f_mkfs+0x1096>
c0008174:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008178:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000817c:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008183:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000818a:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008195:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081a0:	83 ec 0c             	sub    esp,0xc
c00081a3:	0f b6 c9             	movzx  ecx,cl
c00081a6:	55                   	push   ebp
c00081a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ab:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081b2:	e8 58 c2 ff ff       	call   c000440f <create_partition>
c00081b7:	83 c4 10             	add    esp,0x10
c00081ba:	89 c3                	mov    ebx,eax
c00081bc:	85 c0                	test   eax,eax
c00081be:	75 34                	jne    c00081f4 <f_mkfs+0x10ca>
c00081c0:	50                   	push   eax
c00081c1:	31 db                	xor    ebx,ebx
c00081c3:	6a 00                	push   0x0
c00081c5:	6a 00                	push   0x0
c00081c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081cb:	e8 74 98 ff ff       	call   c0001a44 <disk_ioctl>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	85 c0                	test   eax,eax
c00081d5:	74 1d                	je     c00081f4 <f_mkfs+0x10ca>
c00081d7:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081df:	75 0c                	jne    c00081ed <f_mkfs+0x10c3>
c00081e1:	83 ec 0c             	sub    esp,0xc
c00081e4:	55                   	push   ebp
c00081e5:	e8 75 00 00 00       	call   c000825f <ff_memfree>
c00081ea:	83 c4 10             	add    esp,0x10
c00081ed:	bb 01 00 00 00       	mov    ebx,0x1
c00081f2:	eb 48                	jmp    c000823c <f_mkfs+0x1112>
c00081f4:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081fc:	75 3e                	jne    c000823c <f_mkfs+0x1112>
c00081fe:	83 ec 0c             	sub    esp,0xc
c0008201:	55                   	push   ebp
c0008202:	e8 58 00 00 00       	call   c000825f <ff_memfree>
c0008207:	83 c4 10             	add    esp,0x10
c000820a:	eb 30                	jmp    c000823c <f_mkfs+0x1112>
c000820c:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008211:	0f 85 eb fa ff ff    	jne    c0007d02 <f_mkfs+0xbd8>
c0008217:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000821b:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008221:	0f 86 b8 f9 ff ff    	jbe    c0007bdf <f_mkfs+0xab5>
c0008227:	e9 bf fb ff ff       	jmp    c0007deb <f_mkfs+0xcc1>
c000822c:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008231:	0f 85 c0 fa ff ff    	jne    c0007cf7 <f_mkfs+0xbcd>
c0008237:	e9 af fb ff ff       	jmp    c0007deb <f_mkfs+0xcc1>
c000823c:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008242:	89 d8                	mov    eax,ebx
c0008244:	5b                   	pop    ebx
c0008245:	5e                   	pop    esi
c0008246:	5f                   	pop    edi
c0008247:	5d                   	pop    ebp
c0008248:	c3                   	ret    

c0008249 <ff_memalloc>:
c0008249:	83 ec 0c             	sub    esp,0xc
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008253:	e8 9f 3d 00 00       	call   c000bff7 <malloc>
c0008258:	83 c4 10             	add    esp,0x10
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    

c000825f <ff_memfree>:
c000825f:	83 ec 0c             	sub    esp,0xc
c0008262:	83 ec 0c             	sub    esp,0xc
c0008265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008269:	e8 99 3d 00 00       	call   c000c007 <free>
c000826e:	83 c4 10             	add    esp,0x10
c0008271:	90                   	nop
c0008272:	83 c4 0c             	add    esp,0xc
c0008275:	c3                   	ret    

c0008276 <ff_uni2oem>:
c0008276:	83 ec 14             	sub    esp,0x14
c0008279:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000827d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008281:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008288:	c7 44 24 0c c0 08 02 c0 	mov    DWORD PTR [esp+0xc],0xc00208c0
c0008290:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008295:	77 0b                	ja     c00082a2 <ff_uni2oem+0x2c>
c0008297:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000829b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082a0:	eb 61                	jmp    c0008303 <ff_uni2oem+0x8d>
c00082a2:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082aa:	77 57                	ja     c0008303 <ff_uni2oem+0x8d>
c00082ac:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082b2:	75 4f                	jne    c0008303 <ff_uni2oem+0x8d>
c00082b4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082bb:	eb 0b                	jmp    c00082c8 <ff_uni2oem+0x52>
c00082bd:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082c2:	40                   	inc    eax
c00082c3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c8:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082ce:	77 21                	ja     c00082f1 <ff_uni2oem+0x7b>
c00082d0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082d5:	25 ff ff 00 00       	and    eax,0xffff
c00082da:	8d 14 00             	lea    edx,[eax+eax*1]
c00082dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082e1:	01 d0                	add    eax,edx
c00082e3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082e6:	25 ff ff 00 00       	and    eax,0xffff
c00082eb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082ef:	75 cc                	jne    c00082bd <ff_uni2oem+0x47>
c00082f1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f6:	83 e8 80             	sub    eax,0xffffff80
c00082f9:	25 ff 00 00 00       	and    eax,0xff
c00082fe:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008303:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008308:	83 c4 14             	add    esp,0x14
c000830b:	c3                   	ret    

c000830c <ff_oem2uni>:
c000830c:	83 ec 18             	sub    esp,0x18
c000830f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008317:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000831c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008320:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008327:	c7 44 24 10 c0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208c0
c000832f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008335:	77 0b                	ja     c0008342 <ff_oem2uni+0x36>
c0008337:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000833b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008340:	eb 30                	jmp    c0008372 <ff_oem2uni+0x66>
c0008342:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008348:	75 28                	jne    c0008372 <ff_oem2uni+0x66>
c000834a:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008351:	77 1f                	ja     c0008372 <ff_oem2uni+0x66>
c0008353:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008357:	25 ff ff 00 00       	and    eax,0xffff
c000835c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008361:	8d 14 00             	lea    edx,[eax+eax*1]
c0008364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008368:	01 d0                	add    eax,edx
c000836a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000836d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008372:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008377:	83 c4 18             	add    esp,0x18
c000837a:	c3                   	ret    

c000837b <ff_wtoupper>:
c000837b:	83 ec 10             	sub    esp,0x10
c000837e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008386:	0f 87 62 01 00 00    	ja     c00084ee <ff_wtoupper+0x173>
c000838c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008390:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008395:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000839c:	77 07                	ja     c00083a5 <ff_wtoupper+0x2a>
c000839e:	b8 c0 06 02 c0       	mov    eax,0xc00206c0
c00083a3:	eb 05                	jmp    c00083aa <ff_wtoupper+0x2f>
c00083a5:	b8 00 06 02 c0       	mov    eax,0xc0020600
c00083aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083b2:	8d 50 02             	lea    edx,[eax+0x2]
c00083b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083b9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083c1:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083c7:	0f 84 13 01 00 00    	je     c00084e0 <ff_wtoupper+0x165>
c00083cd:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083d2:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083d7:	0f 82 03 01 00 00    	jb     c00084e0 <ff_wtoupper+0x165>
c00083dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083e1:	8d 50 02             	lea    edx,[eax+0x2]
c00083e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083eb:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083f0:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083f5:	66 c1 e8 08          	shr    ax,0x8
c00083f9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083fe:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008405:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000840a:	31 d2                	xor    edx,edx
c000840c:	66 89 c2             	mov    dx,ax
c000840f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008413:	31 c9                	xor    ecx,ecx
c0008415:	66 89 c1             	mov    cx,ax
c0008418:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000841d:	25 ff ff 00 00       	and    eax,0xffff
c0008422:	01 c8                	add    eax,ecx
c0008424:	39 c2                	cmp    edx,eax
c0008426:	0f 8d 92 00 00 00    	jge    c00084be <ff_wtoupper+0x143>
c000842c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008430:	25 ff ff 00 00       	and    eax,0xffff
c0008435:	83 f8 08             	cmp    eax,0x8
c0008438:	0f 87 a1 00 00 00    	ja     c00084df <ff_wtoupper+0x164>
c000843e:	8b 04 85 c0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa40]
c0008445:	ff e0                	jmp    eax
c0008447:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844c:	31 d2                	xor    edx,edx
c000844e:	66 89 c2             	mov    dx,ax
c0008451:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008455:	25 ff ff 00 00       	and    eax,0xffff
c000845a:	29 c2                	sub    edx,eax
c000845c:	89 d0                	mov    eax,edx
c000845e:	8d 14 00             	lea    edx,[eax+eax*1]
c0008461:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008465:	01 d0                	add    eax,edx
c0008467:	66 8b 00             	mov    ax,WORD PTR [eax]
c000846a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000846f:	eb 4b                	jmp    c00084bc <ff_wtoupper+0x141>
c0008471:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008476:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000847a:	83 e0 01             	and    eax,0x1
c000847d:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008482:	eb 38                	jmp    c00084bc <ff_wtoupper+0x141>
c0008484:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000848a:	eb 30                	jmp    c00084bc <ff_wtoupper+0x141>
c000848c:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008492:	eb 28                	jmp    c00084bc <ff_wtoupper+0x141>
c0008494:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000849a:	eb 20                	jmp    c00084bc <ff_wtoupper+0x141>
c000849c:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084a2:	eb 18                	jmp    c00084bc <ff_wtoupper+0x141>
c00084a4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084aa:	eb 10                	jmp    c00084bc <ff_wtoupper+0x141>
c00084ac:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084b2:	eb 08                	jmp    c00084bc <ff_wtoupper+0x141>
c00084b4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084bb:	90                   	nop
c00084bc:	eb 21                	jmp    c00084df <ff_wtoupper+0x164>
c00084be:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084c4:	0f 85 e4 fe ff ff    	jne    c00083ae <ff_wtoupper+0x33>
c00084ca:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084cf:	25 ff ff 00 00       	and    eax,0xffff
c00084d4:	01 c0                	add    eax,eax
c00084d6:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084da:	e9 cf fe ff ff       	jmp    c00083ae <ff_wtoupper+0x33>
c00084df:	90                   	nop
c00084e0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084e5:	25 ff ff 00 00       	and    eax,0xffff
c00084ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f2:	83 c4 10             	add    esp,0x10
c00084f5:	c3                   	ret    

c00084f6 <is_bad_src_ratio>:
c00084f6:	83 ec 0c             	sub    esp,0xc
c00084f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0008500:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008504:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008508:	dd 04 24             	fld    QWORD PTR [esp]
c000850b:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0008511:	de d9                	fcompp 
c0008513:	df e0                	fnstsw ax
c0008515:	f6 c4 45             	test   ah,0x45
c0008518:	74 10                	je     c000852a <is_bad_src_ratio+0x34>
c000851a:	dd 04 24             	fld    QWORD PTR [esp]
c000851d:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0008523:	df e0                	fnstsw ax
c0008525:	f6 c4 45             	test   ah,0x45
c0008528:	75 07                	jne    c0008531 <is_bad_src_ratio+0x3b>
c000852a:	b8 01 00 00 00       	mov    eax,0x1
c000852f:	eb 05                	jmp    c0008536 <is_bad_src_ratio+0x40>
c0008531:	b8 00 00 00 00       	mov    eax,0x0
c0008536:	83 c4 0c             	add    esp,0xc
c0008539:	c3                   	ret    

c000853a <psrc_set_converter>:
c000853a:	56                   	push   esi
c000853b:	89 d6                	mov    esi,edx
c000853d:	53                   	push   ebx
c000853e:	89 c3                	mov    ebx,eax
c0008540:	83 ec 0c             	sub    esp,0xc
c0008543:	52                   	push   edx
c0008544:	50                   	push   eax
c0008545:	e8 21 24 00 00       	call   c000a96b <sinc_set_converter>
c000854a:	83 c4 10             	add    esp,0x10
c000854d:	85 c0                	test   eax,eax
c000854f:	74 25                	je     c0008576 <psrc_set_converter+0x3c>
c0008551:	50                   	push   eax
c0008552:	50                   	push   eax
c0008553:	56                   	push   esi
c0008554:	53                   	push   ebx
c0008555:	e8 1c 28 00 00       	call   c000ad76 <zoh_set_converter>
c000855a:	83 c4 10             	add    esp,0x10
c000855d:	85 c0                	test   eax,eax
c000855f:	74 15                	je     c0008576 <psrc_set_converter+0x3c>
c0008561:	51                   	push   ecx
c0008562:	51                   	push   ecx
c0008563:	56                   	push   esi
c0008564:	53                   	push   ebx
c0008565:	e8 0c 0a 00 00       	call   c0008f76 <linear_set_converter>
c000856a:	83 c4 10             	add    esp,0x10
c000856d:	ba 0a 00 00 00       	mov    edx,0xa
c0008572:	85 c0                	test   eax,eax
c0008574:	75 02                	jne    c0008578 <psrc_set_converter+0x3e>
c0008576:	31 d2                	xor    edx,edx
c0008578:	89 d0                	mov    eax,edx
c000857a:	5a                   	pop    edx
c000857b:	5b                   	pop    ebx
c000857c:	5e                   	pop    esi
c000857d:	c3                   	ret    

c000857e <src_delete>:
c000857e:	53                   	push   ebx
c000857f:	83 ec 08             	sub    esp,0x8
c0008582:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008586:	85 db                	test   ebx,ebx
c0008588:	74 29                	je     c00085b3 <src_delete+0x35>
c000858a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000858d:	85 c0                	test   eax,eax
c000858f:	74 0c                	je     c000859d <src_delete+0x1f>
c0008591:	83 ec 0c             	sub    esp,0xc
c0008594:	50                   	push   eax
c0008595:	e8 6d 3a 00 00       	call   c000c007 <free>
c000859a:	83 c4 10             	add    esp,0x10
c000859d:	50                   	push   eax
c000859e:	6a 3c                	push   0x3c
c00085a0:	6a 00                	push   0x0
c00085a2:	53                   	push   ebx
c00085a3:	e8 30 81 ff ff       	call   c00006d8 <memset>
c00085a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085ab:	e8 57 3a 00 00       	call   c000c007 <free>
c00085b0:	83 c4 10             	add    esp,0x10
c00085b3:	83 c4 08             	add    esp,0x8
c00085b6:	31 c0                	xor    eax,eax
c00085b8:	5b                   	pop    ebx
c00085b9:	c3                   	ret    

c00085ba <src_process>:
c00085ba:	56                   	push   esi
c00085bb:	53                   	push   ebx
c00085bc:	53                   	push   ebx
c00085bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085c5:	85 f6                	test   esi,esi
c00085c7:	0f 84 e2 00 00 00    	je     c00086af <src_process+0xf5>
c00085cd:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085d1:	0f 84 df 00 00 00    	je     c00086b6 <src_process+0xfc>
c00085d7:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085db:	0f 84 d5 00 00 00    	je     c00086b6 <src_process+0xfc>
c00085e1:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085e8:	0f 85 cf 00 00 00    	jne    c00086bd <src_process+0x103>
c00085ee:	85 db                	test   ebx,ebx
c00085f0:	0f 84 ce 00 00 00    	je     c00086c4 <src_process+0x10a>
c00085f6:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085f9:	0f 84 cc 00 00 00    	je     c00086cb <src_process+0x111>
c00085ff:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008603:	0f 84 c2 00 00 00    	je     c00086cb <src_process+0x111>
c0008609:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000860c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000860f:	e8 e2 fe ff ff       	call   c00084f6 <is_bad_src_ratio>
c0008614:	5a                   	pop    edx
c0008615:	85 c0                	test   eax,eax
c0008617:	59                   	pop    ecx
c0008618:	0f 85 b4 00 00 00    	jne    c00086d2 <src_process+0x118>
c000861e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008622:	79 07                	jns    c000862b <src_process+0x71>
c0008624:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000862b:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000862f:	79 07                	jns    c0008638 <src_process+0x7e>
c0008631:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008638:	8b 13                	mov    edx,DWORD PTR [ebx]
c000863a:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000863d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008640:	39 ca                	cmp    edx,ecx
c0008642:	73 0b                	jae    c000864f <src_process+0x95>
c0008644:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008648:	8d 04 82             	lea    eax,[edx+eax*4]
c000864b:	39 c1                	cmp    ecx,eax
c000864d:	eb 09                	jmp    c0008658 <src_process+0x9e>
c000864f:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008653:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008656:	39 c2                	cmp    edx,eax
c0008658:	72 7f                	jb     c00086d9 <src_process+0x11f>
c000865a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008661:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008668:	d9 05 a0 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea0
c000866e:	dc 1e                	fcomp  QWORD PTR [esi]
c0008670:	df e0                	fnstsw ax
c0008672:	9e                   	sahf   
c0008673:	76 05                	jbe    c000867a <src_process+0xc0>
c0008675:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c0008678:	dd 1e                	fstp   QWORD PTR [esi]
c000867a:	dd 06                	fld    QWORD PTR [esi]
c000867c:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c000867f:	83 ec 10             	sub    esp,0x10
c0008682:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008685:	e8 b6 70 01 00       	call   c001f740 <fabs>
c000868a:	83 c4 10             	add    esp,0x10
c000868d:	dd 05 90 0e 02 c0    	fld    QWORD PTR ds:0xc0020e90
c0008693:	de d9                	fcompp 
c0008695:	df e0                	fnstsw ax
c0008697:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000869b:	9e                   	sahf   
c000869c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00086a0:	76 05                	jbe    c00086a7 <src_process+0xed>
c00086a2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00086a5:	eb 03                	jmp    c00086aa <src_process+0xf0>
c00086a7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00086aa:	59                   	pop    ecx
c00086ab:	5b                   	pop    ebx
c00086ac:	5e                   	pop    esi
c00086ad:	ff e0                	jmp    eax
c00086af:	b8 02 00 00 00       	mov    eax,0x2
c00086b4:	eb 28                	jmp    c00086de <src_process+0x124>
c00086b6:	b8 07 00 00 00       	mov    eax,0x7
c00086bb:	eb 21                	jmp    c00086de <src_process+0x124>
c00086bd:	b8 12 00 00 00       	mov    eax,0x12
c00086c2:	eb 1a                	jmp    c00086de <src_process+0x124>
c00086c4:	b8 03 00 00 00       	mov    eax,0x3
c00086c9:	eb 13                	jmp    c00086de <src_process+0x124>
c00086cb:	b8 04 00 00 00       	mov    eax,0x4
c00086d0:	eb 0c                	jmp    c00086de <src_process+0x124>
c00086d2:	b8 06 00 00 00       	mov    eax,0x6
c00086d7:	eb 05                	jmp    c00086de <src_process+0x124>
c00086d9:	b8 10 00 00 00       	mov    eax,0x10
c00086de:	5a                   	pop    edx
c00086df:	5b                   	pop    ebx
c00086e0:	5e                   	pop    esi
c00086e1:	c3                   	ret    

c00086e2 <src_callback_read>:
c00086e2:	55                   	push   ebp
c00086e3:	57                   	push   edi
c00086e4:	56                   	push   esi
c00086e5:	53                   	push   ebx
c00086e6:	83 ec 4c             	sub    esp,0x4c
c00086e9:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086ed:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086f1:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086f5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086f9:	85 ff                	test   edi,edi
c00086fb:	0f 8e 36 01 00 00    	jle    c0008837 <src_callback_read+0x155>
c0008701:	85 db                	test   ebx,ebx
c0008703:	0f 84 2e 01 00 00    	je     c0008837 <src_callback_read+0x155>
c0008709:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008710:	74 0c                	je     c000871e <src_callback_read+0x3c>
c0008712:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008719:	e9 19 01 00 00       	jmp    c0008837 <src_callback_read+0x155>
c000871e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008722:	75 0c                	jne    c0008730 <src_callback_read+0x4e>
c0008724:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000872b:	e9 07 01 00 00       	jmp    c0008837 <src_callback_read+0x155>
c0008730:	51                   	push   ecx
c0008731:	6a 24                	push   0x24
c0008733:	6a 00                	push   0x0
c0008735:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008739:	50                   	push   eax
c000873a:	e8 99 7f ff ff       	call   c00006d8 <memset>
c000873f:	5e                   	pop    esi
c0008740:	5d                   	pop    ebp
c0008741:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008749:	e8 a8 fd ff ff       	call   c00084f6 <is_bad_src_ratio>
c000874e:	83 c4 10             	add    esp,0x10
c0008751:	85 c0                	test   eax,eax
c0008753:	74 0c                	je     c0008761 <src_callback_read+0x7f>
c0008755:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c000875c:	e9 d6 00 00 00       	jmp    c0008837 <src_callback_read+0x155>
c0008761:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008765:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008769:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000876d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008771:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008774:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008778:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000877b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000877f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008783:	31 f6                	xor    esi,esi
c0008785:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000878a:	75 30                	jne    c00087bc <src_callback_read+0xda>
c000878c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008790:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008794:	52                   	push   edx
c0008795:	52                   	push   edx
c0008796:	8d 44 24 20          	lea    eax,[esp+0x20]
c000879a:	50                   	push   eax
c000879b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000879e:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00087a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00087a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00087ad:	83 c4 10             	add    esp,0x10
c00087b0:	85 c0                	test   eax,eax
c00087b2:	75 08                	jne    c00087bc <src_callback_read+0xda>
c00087b4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087bc:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087c3:	50                   	push   eax
c00087c4:	50                   	push   eax
c00087c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087c9:	50                   	push   eax
c00087ca:	53                   	push   ebx
c00087cb:	e8 ea fd ff ff       	call   c00085ba <src_process>
c00087d0:	83 c4 10             	add    esp,0x10
c00087d3:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087da:	85 c0                	test   eax,eax
c00087dc:	75 42                	jne    c0008820 <src_callback_read+0x13e>
c00087de:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087e5:	89 e9                	mov    ecx,ebp
c00087e7:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087eb:	0f af ca             	imul   ecx,edx
c00087ee:	c1 e1 02             	shl    ecx,0x2
c00087f1:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087f5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087f9:	0f af d1             	imul   edx,ecx
c00087fc:	c1 e2 02             	shl    edx,0x2
c00087ff:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008803:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008807:	8d 14 31             	lea    edx,[ecx+esi*1]
c000880a:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000880f:	75 04                	jne    c0008815 <src_callback_read+0x133>
c0008811:	85 c9                	test   ecx,ecx
c0008813:	74 0b                	je     c0008820 <src_callback_read+0x13e>
c0008815:	39 d7                	cmp    edi,edx
c0008817:	7e 09                	jle    c0008822 <src_callback_read+0x140>
c0008819:	89 d6                	mov    esi,edx
c000881b:	e9 65 ff ff ff       	jmp    c0008785 <src_callback_read+0xa3>
c0008820:	89 f2                	mov    edx,esi
c0008822:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008826:	85 c0                	test   eax,eax
c0008828:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000882b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000882f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008832:	74 05                	je     c0008839 <src_callback_read+0x157>
c0008834:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008837:	31 d2                	xor    edx,edx
c0008839:	83 c4 4c             	add    esp,0x4c
c000883c:	89 d0                	mov    eax,edx
c000883e:	5b                   	pop    ebx
c000883f:	5e                   	pop    esi
c0008840:	5f                   	pop    edi
c0008841:	5d                   	pop    ebp
c0008842:	c3                   	ret    

c0008843 <src_set_ratio>:
c0008843:	53                   	push   ebx
c0008844:	b8 02 00 00 00       	mov    eax,0x2
c0008849:	83 ec 08             	sub    esp,0x8
c000884c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008850:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008854:	85 db                	test   ebx,ebx
c0008856:	74 33                	je     c000888b <src_set_ratio+0x48>
c0008858:	b8 07 00 00 00       	mov    eax,0x7
c000885d:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008861:	74 2c                	je     c000888f <src_set_ratio+0x4c>
c0008863:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008867:	74 2a                	je     c0008893 <src_set_ratio+0x50>
c0008869:	50                   	push   eax
c000886a:	50                   	push   eax
c000886b:	dd 14 24             	fst    QWORD PTR [esp]
c000886e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008872:	e8 7f fc ff ff       	call   c00084f6 <is_bad_src_ratio>
c0008877:	5a                   	pop    edx
c0008878:	59                   	pop    ecx
c0008879:	85 c0                	test   eax,eax
c000887b:	75 07                	jne    c0008884 <src_set_ratio+0x41>
c000887d:	dd 04 24             	fld    QWORD PTR [esp]
c0008880:	dd 1b                	fstp   QWORD PTR [ebx]
c0008882:	eb 11                	jmp    c0008895 <src_set_ratio+0x52>
c0008884:	b8 06 00 00 00       	mov    eax,0x6
c0008889:	eb 0a                	jmp    c0008895 <src_set_ratio+0x52>
c000888b:	dd d8                	fstp   st(0)
c000888d:	eb 06                	jmp    c0008895 <src_set_ratio+0x52>
c000888f:	dd d8                	fstp   st(0)
c0008891:	eb 02                	jmp    c0008895 <src_set_ratio+0x52>
c0008893:	dd d8                	fstp   st(0)
c0008895:	83 c4 08             	add    esp,0x8
c0008898:	5b                   	pop    ebx
c0008899:	c3                   	ret    

c000889a <src_get_channels>:
c000889a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000889e:	b8 02 00 00 00       	mov    eax,0x2
c00088a3:	85 d2                	test   edx,edx
c00088a5:	74 14                	je     c00088bb <src_get_channels+0x21>
c00088a7:	b8 07 00 00 00       	mov    eax,0x7
c00088ac:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088b0:	74 09                	je     c00088bb <src_get_channels+0x21>
c00088b2:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088b6:	74 03                	je     c00088bb <src_get_channels+0x21>
c00088b8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088bb:	c3                   	ret    

c00088bc <src_reset>:
c00088bc:	53                   	push   ebx
c00088bd:	b8 02 00 00 00       	mov    eax,0x2
c00088c2:	83 ec 08             	sub    esp,0x8
c00088c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088c9:	85 db                	test   ebx,ebx
c00088cb:	74 2e                	je     c00088fb <src_reset+0x3f>
c00088cd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088d0:	85 c0                	test   eax,eax
c00088d2:	74 09                	je     c00088dd <src_reset+0x21>
c00088d4:	83 ec 0c             	sub    esp,0xc
c00088d7:	53                   	push   ebx
c00088d8:	ff d0                	call   eax
c00088da:	83 c4 10             	add    esp,0x10
c00088dd:	d9 ee                	fldz   
c00088df:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088ed:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088f0:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088f7:	31 c0                	xor    eax,eax
c00088f9:	dd 1b                	fstp   QWORD PTR [ebx]
c00088fb:	83 c4 08             	add    esp,0x8
c00088fe:	5b                   	pop    ebx
c00088ff:	c3                   	ret    

c0008900 <src_new>:
c0008900:	57                   	push   edi
c0008901:	56                   	push   esi
c0008902:	53                   	push   ebx
c0008903:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008907:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000890b:	85 f6                	test   esi,esi
c000890d:	74 73                	je     c0008982 <src_new+0x82>
c000890f:	85 ff                	test   edi,edi
c0008911:	7f 08                	jg     c000891b <src_new+0x1b>
c0008913:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008919:	eb 1e                	jmp    c0008939 <src_new+0x39>
c000891b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008921:	50                   	push   eax
c0008922:	50                   	push   eax
c0008923:	6a 3c                	push   0x3c
c0008925:	6a 01                	push   0x1
c0008927:	e8 fb 36 00 00       	call   c000c027 <calloc>
c000892c:	83 c4 10             	add    esp,0x10
c000892f:	89 c3                	mov    ebx,eax
c0008931:	85 c0                	test   eax,eax
c0008933:	75 10                	jne    c0008945 <src_new+0x45>
c0008935:	85 f6                	test   esi,esi
c0008937:	75 04                	jne    c000893d <src_new+0x3d>
c0008939:	31 db                	xor    ebx,ebx
c000893b:	eb 4b                	jmp    c0008988 <src_new+0x88>
c000893d:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008943:	eb 43                	jmp    c0008988 <src_new+0x88>
c0008945:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008948:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000894f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008953:	e8 e2 fb ff ff       	call   c000853a <psrc_set_converter>
c0008958:	85 c0                	test   eax,eax
c000895a:	74 18                	je     c0008974 <src_new+0x74>
c000895c:	85 f6                	test   esi,esi
c000895e:	74 06                	je     c0008966 <src_new+0x66>
c0008960:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008966:	83 ec 0c             	sub    esp,0xc
c0008969:	53                   	push   ebx
c000896a:	31 db                	xor    ebx,ebx
c000896c:	e8 96 36 00 00       	call   c000c007 <free>
c0008971:	83 c4 10             	add    esp,0x10
c0008974:	83 ec 0c             	sub    esp,0xc
c0008977:	53                   	push   ebx
c0008978:	e8 3f ff ff ff       	call   c00088bc <src_reset>
c000897d:	83 c4 10             	add    esp,0x10
c0008980:	eb 06                	jmp    c0008988 <src_new+0x88>
c0008982:	85 ff                	test   edi,edi
c0008984:	7f 9b                	jg     c0008921 <src_new+0x21>
c0008986:	eb b1                	jmp    c0008939 <src_new+0x39>
c0008988:	89 d8                	mov    eax,ebx
c000898a:	5b                   	pop    ebx
c000898b:	5e                   	pop    esi
c000898c:	5f                   	pop    edi
c000898d:	c3                   	ret    

c000898e <src_callback_new>:
c000898e:	56                   	push   esi
c000898f:	53                   	push   ebx
c0008990:	53                   	push   ebx
c0008991:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008995:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008999:	85 f6                	test   esi,esi
c000899b:	75 0e                	jne    c00089ab <src_callback_new+0x1d>
c000899d:	31 db                	xor    ebx,ebx
c000899f:	85 c0                	test   eax,eax
c00089a1:	74 47                	je     c00089ea <src_callback_new+0x5c>
c00089a3:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089a9:	eb 3f                	jmp    c00089ea <src_callback_new+0x5c>
c00089ab:	85 c0                	test   eax,eax
c00089ad:	74 06                	je     c00089b5 <src_callback_new+0x27>
c00089af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089b5:	51                   	push   ecx
c00089b6:	50                   	push   eax
c00089b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089bf:	e8 3c ff ff ff       	call   c0008900 <src_new>
c00089c4:	83 c4 10             	add    esp,0x10
c00089c7:	89 c3                	mov    ebx,eax
c00089c9:	85 c0                	test   eax,eax
c00089cb:	74 1d                	je     c00089ea <src_callback_new+0x5c>
c00089cd:	83 ec 0c             	sub    esp,0xc
c00089d0:	50                   	push   eax
c00089d1:	e8 e6 fe ff ff       	call   c00088bc <src_reset>
c00089d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089da:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089e1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089e4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089e7:	83 c4 10             	add    esp,0x10
c00089ea:	5a                   	pop    edx
c00089eb:	89 d8                	mov    eax,ebx
c00089ed:	5b                   	pop    ebx
c00089ee:	5e                   	pop    esi
c00089ef:	c3                   	ret    

c00089f0 <src_get_name>:
c00089f0:	53                   	push   ebx
c00089f1:	83 ec 14             	sub    esp,0x14
c00089f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089f8:	53                   	push   ebx
c00089f9:	e8 47 1f 00 00       	call   c000a945 <sinc_get_name>
c00089fe:	83 c4 10             	add    esp,0x10
c0008a01:	85 c0                	test   eax,eax
c0008a03:	75 1d                	jne    c0008a22 <src_get_name+0x32>
c0008a05:	83 ec 0c             	sub    esp,0xc
c0008a08:	53                   	push   ebx
c0008a09:	e8 4a 23 00 00       	call   c000ad58 <zoh_get_name>
c0008a0e:	83 c4 10             	add    esp,0x10
c0008a11:	85 c0                	test   eax,eax
c0008a13:	75 0d                	jne    c0008a22 <src_get_name+0x32>
c0008a15:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a19:	83 c4 08             	add    esp,0x8
c0008a1c:	5b                   	pop    ebx
c0008a1d:	e9 36 05 00 00       	jmp    c0008f58 <linear_get_name>
c0008a22:	83 c4 08             	add    esp,0x8
c0008a25:	5b                   	pop    ebx
c0008a26:	c3                   	ret    

c0008a27 <src_get_description>:
c0008a27:	53                   	push   ebx
c0008a28:	83 ec 14             	sub    esp,0x14
c0008a2b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a2f:	53                   	push   ebx
c0008a30:	e8 23 1f 00 00       	call   c000a958 <sinc_get_description>
c0008a35:	83 c4 10             	add    esp,0x10
c0008a38:	85 c0                	test   eax,eax
c0008a3a:	75 1d                	jne    c0008a59 <src_get_description+0x32>
c0008a3c:	83 ec 0c             	sub    esp,0xc
c0008a3f:	53                   	push   ebx
c0008a40:	e8 22 23 00 00       	call   c000ad67 <zoh_get_description>
c0008a45:	83 c4 10             	add    esp,0x10
c0008a48:	85 c0                	test   eax,eax
c0008a4a:	75 0d                	jne    c0008a59 <src_get_description+0x32>
c0008a4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a50:	83 c4 08             	add    esp,0x8
c0008a53:	5b                   	pop    ebx
c0008a54:	e9 0e 05 00 00       	jmp    c0008f67 <linear_get_description>
c0008a59:	83 c4 08             	add    esp,0x8
c0008a5c:	5b                   	pop    ebx
c0008a5d:	c3                   	ret    

c0008a5e <src_get_version>:
c0008a5e:	b8 c0 09 02 c0       	mov    eax,0xc00209c0
c0008a63:	c3                   	ret    

c0008a64 <src_is_valid_ratio>:
c0008a64:	50                   	push   eax
c0008a65:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a6d:	e8 84 fa ff ff       	call   c00084f6 <is_bad_src_ratio>
c0008a72:	85 c0                	test   eax,eax
c0008a74:	0f 94 c0             	sete   al
c0008a77:	0f b6 c0             	movzx  eax,al
c0008a7a:	83 c4 0c             	add    esp,0xc
c0008a7d:	c3                   	ret    

c0008a7e <src_error>:
c0008a7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a82:	31 c0                	xor    eax,eax
c0008a84:	85 d2                	test   edx,edx
c0008a86:	74 03                	je     c0008a8b <src_error+0xd>
c0008a88:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a8b:	c3                   	ret    

c0008a8c <src_strerror>:
c0008a8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a90:	31 c0                	xor    eax,eax
c0008a92:	83 fa 17             	cmp    edx,0x17
c0008a95:	77 07                	ja     c0008a9e <src_strerror+0x12>
c0008a97:	8b 04 95 20 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1e0]
c0008a9e:	c3                   	ret    

c0008a9f <src_simple>:
c0008a9f:	56                   	push   esi
c0008aa0:	53                   	push   ebx
c0008aa1:	83 ec 18             	sub    esp,0x18
c0008aa4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008aa8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008aac:	50                   	push   eax
c0008aad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ab1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ab5:	e8 46 fe ff ff       	call   c0008900 <src_new>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	85 c0                	test   eax,eax
c0008abf:	75 06                	jne    c0008ac7 <src_simple+0x28>
c0008ac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ac5:	eb 25                	jmp    c0008aec <src_simple+0x4d>
c0008ac7:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ace:	89 c3                	mov    ebx,eax
c0008ad0:	50                   	push   eax
c0008ad1:	50                   	push   eax
c0008ad2:	56                   	push   esi
c0008ad3:	53                   	push   ebx
c0008ad4:	e8 e1 fa ff ff       	call   c00085ba <src_process>
c0008ad9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008adc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ae0:	e8 99 fa ff ff       	call   c000857e <src_delete>
c0008ae5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ae9:	83 c4 10             	add    esp,0x10
c0008aec:	83 c4 14             	add    esp,0x14
c0008aef:	5b                   	pop    ebx
c0008af0:	5e                   	pop    esi
c0008af1:	c3                   	ret    

c0008af2 <src_short_to_float_array>:
c0008af2:	83 ec 0c             	sub    esp,0xc
c0008af5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008af9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008afd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b01:	85 c0                	test   eax,eax
c0008b03:	74 0f                	je     c0008b14 <src_short_to_float_array+0x22>
c0008b05:	48                   	dec    eax
c0008b06:	d9 05 a4 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea4
c0008b0c:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008b0f:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b12:	eb ed                	jmp    c0008b01 <src_short_to_float_array+0xf>
c0008b14:	83 c4 0c             	add    esp,0xc
c0008b17:	c3                   	ret    

c0008b18 <src_float_to_short_array>:
c0008b18:	56                   	push   esi
c0008b19:	53                   	push   ebx
c0008b1a:	52                   	push   edx
c0008b1b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b23:	85 db                	test   ebx,ebx
c0008b25:	74 51                	je     c0008b78 <src_float_to_short_array+0x60>
c0008b27:	4b                   	dec    ebx
c0008b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b2c:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008b32:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b35:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008b3b:	df e0                	fnstsw ax
c0008b3d:	9e                   	sahf   
c0008b3e:	72 0a                	jb     c0008b4a <src_float_to_short_array+0x32>
c0008b40:	dd d8                	fstp   st(0)
c0008b42:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b48:	eb d9                	jmp    c0008b23 <src_float_to_short_array+0xb>
c0008b4a:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008b50:	d8 d9                	fcomp  st(1)
c0008b52:	df e0                	fnstsw ax
c0008b54:	9e                   	sahf   
c0008b55:	72 0a                	jb     c0008b61 <src_float_to_short_array+0x49>
c0008b57:	dd d8                	fstp   st(0)
c0008b59:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b5f:	eb c2                	jmp    c0008b23 <src_float_to_short_array+0xb>
c0008b61:	83 ec 10             	sub    esp,0x10
c0008b64:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b67:	e8 f4 6b 01 00       	call   c001f760 <lrint>
c0008b6c:	83 c4 10             	add    esp,0x10
c0008b6f:	c1 f8 10             	sar    eax,0x10
c0008b72:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b76:	eb ab                	jmp    c0008b23 <src_float_to_short_array+0xb>
c0008b78:	58                   	pop    eax
c0008b79:	5b                   	pop    ebx
c0008b7a:	5e                   	pop    esi
c0008b7b:	c3                   	ret    

c0008b7c <src_int_to_float_array>:
c0008b7c:	83 ec 0c             	sub    esp,0xc
c0008b7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b83:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b8b:	85 c0                	test   eax,eax
c0008b8d:	74 0f                	je     c0008b9e <src_int_to_float_array+0x22>
c0008b8f:	48                   	dec    eax
c0008b90:	d9 05 b0 0e 02 c0    	fld    DWORD PTR ds:0xc0020eb0
c0008b96:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b99:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b9c:	eb ed                	jmp    c0008b8b <src_int_to_float_array+0xf>
c0008b9e:	83 c4 0c             	add    esp,0xc
c0008ba1:	c3                   	ret    

c0008ba2 <src_float_to_int_array>:
c0008ba2:	56                   	push   esi
c0008ba3:	53                   	push   ebx
c0008ba4:	52                   	push   edx
c0008ba5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ba9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008bad:	85 db                	test   ebx,ebx
c0008baf:	74 4f                	je     c0008c00 <src_float_to_int_array+0x5e>
c0008bb1:	4b                   	dec    ebx
c0008bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bb6:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008bbc:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008bbf:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008bc5:	df e0                	fnstsw ax
c0008bc7:	9e                   	sahf   
c0008bc8:	72 0b                	jb     c0008bd5 <src_float_to_int_array+0x33>
c0008bca:	dd d8                	fstp   st(0)
c0008bcc:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bd3:	eb d8                	jmp    c0008bad <src_float_to_int_array+0xb>
c0008bd5:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008bdb:	d8 d9                	fcomp  st(1)
c0008bdd:	df e0                	fnstsw ax
c0008bdf:	9e                   	sahf   
c0008be0:	72 0b                	jb     c0008bed <src_float_to_int_array+0x4b>
c0008be2:	dd d8                	fstp   st(0)
c0008be4:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008beb:	eb c0                	jmp    c0008bad <src_float_to_int_array+0xb>
c0008bed:	83 ec 10             	sub    esp,0x10
c0008bf0:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bf3:	e8 68 6b 01 00       	call   c001f760 <lrint>
c0008bf8:	83 c4 10             	add    esp,0x10
c0008bfb:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008bfe:	eb ad                	jmp    c0008bad <src_float_to_int_array+0xb>
c0008c00:	58                   	pop    eax
c0008c01:	5b                   	pop    ebx
c0008c02:	5e                   	pop    esi
c0008c03:	c3                   	ret    

c0008c04 <is_bad_src_ratio>:
c0008c04:	83 ec 0c             	sub    esp,0xc
c0008c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c16:	dd 04 24             	fld    QWORD PTR [esp]
c0008c19:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0008c1f:	de d9                	fcompp 
c0008c21:	df e0                	fnstsw ax
c0008c23:	f6 c4 45             	test   ah,0x45
c0008c26:	74 10                	je     c0008c38 <is_bad_src_ratio+0x34>
c0008c28:	dd 04 24             	fld    QWORD PTR [esp]
c0008c2b:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0008c31:	df e0                	fnstsw ax
c0008c33:	f6 c4 45             	test   ah,0x45
c0008c36:	75 07                	jne    c0008c3f <is_bad_src_ratio+0x3b>
c0008c38:	b8 01 00 00 00       	mov    eax,0x1
c0008c3d:	eb 05                	jmp    c0008c44 <is_bad_src_ratio+0x40>
c0008c3f:	b8 00 00 00 00       	mov    eax,0x0
c0008c44:	83 c4 0c             	add    esp,0xc
c0008c47:	c3                   	ret    

c0008c48 <fmod_one>:
c0008c48:	83 ec 2c             	sub    esp,0x2c
c0008c4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c5b:	83 ec 08             	sub    esp,0x8
c0008c5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c66:	e8 f5 6a 01 00       	call   c001f760 <lrint>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c72:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c76:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c7a:	de e1                	fsubrp st(1),st
c0008c7c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c80:	d9 ee                	fldz   
c0008c82:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c86:	df e0                	fnstsw ax
c0008c88:	f6 c4 45             	test   ah,0x45
c0008c8b:	75 0a                	jne    c0008c97 <fmod_one+0x4f>
c0008c8d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c91:	d9 e8                	fld1   
c0008c93:	de c1                	faddp  st(1),st
c0008c95:	eb 04                	jmp    c0008c9b <fmod_one+0x53>
c0008c97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c9b:	83 c4 2c             	add    esp,0x2c
c0008c9e:	c3                   	ret    

c0008c9f <linear_vari_process>:
c0008c9f:	55                   	push   ebp
c0008ca0:	57                   	push   edi
c0008ca1:	56                   	push   esi
c0008ca2:	53                   	push   ebx
c0008ca3:	83 ec 2c             	sub    esp,0x2c
c0008ca6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008caa:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008cae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cb6:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008cba:	0f 8e 5a 02 00 00    	jle    c0008f1a <linear_vari_process+0x27b>
c0008cc0:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008cc3:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008ccb:	85 db                	test   ebx,ebx
c0008ccd:	0f 84 47 02 00 00    	je     c0008f1a <linear_vari_process+0x27b>
c0008cd3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cd6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cda:	74 19                	je     c0008cf5 <linear_vari_process+0x56>
c0008cdc:	31 d2                	xor    edx,edx
c0008cde:	39 c2                	cmp    edx,eax
c0008ce0:	7d 0c                	jge    c0008cee <linear_vari_process+0x4f>
c0008ce2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ce4:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008ce7:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ceb:	42                   	inc    edx
c0008cec:	eb f0                	jmp    c0008cde <linear_vari_process+0x3f>
c0008cee:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cf5:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cf8:	0f af d0             	imul   edx,eax
c0008cfb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008cfe:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008d02:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008d09:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008d0c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d13:	dd 07                	fld    QWORD PTR [edi]
c0008d15:	dd 14 24             	fst    QWORD PTR [esp]
c0008d18:	50                   	push   eax
c0008d19:	50                   	push   eax
c0008d1a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d1d:	e8 e2 fe ff ff       	call   c0008c04 <is_bad_src_ratio>
c0008d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d26:	5a                   	pop    edx
c0008d27:	59                   	pop    ecx
c0008d28:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d2d:	0f 85 df 01 00 00    	jne    c0008f12 <linear_vari_process+0x273>
c0008d33:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d36:	d9 e8                	fld1   
c0008d38:	d8 d1                	fcom   st(1)
c0008d3a:	df e0                	fnstsw ax
c0008d3c:	9e                   	sahf   
c0008d3d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d41:	0f 86 97 00 00 00    	jbe    c0008dde <linear_vari_process+0x13f>
c0008d47:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d4a:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d4d:	0f 8d 8b 00 00 00    	jge    c0008dde <linear_vari_process+0x13f>
c0008d53:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d57:	d8 c1                	fadd   st,st(1)
c0008d59:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d5c:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d5f:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d62:	df e0                	fnstsw ax
c0008d64:	9e                   	sahf   
c0008d65:	73 77                	jae    c0008dde <linear_vari_process+0x13f>
c0008d67:	85 d2                	test   edx,edx
c0008d69:	7e 36                	jle    c0008da1 <linear_vari_process+0x102>
c0008d6b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d6f:	dd 07                	fld    QWORD PTR [edi]
c0008d71:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d74:	83 ec 10             	sub    esp,0x10
c0008d77:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d7a:	e8 c1 69 01 00       	call   c001f740 <fabs>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008d88:	df e0                	fnstsw ax
c0008d8a:	9e                   	sahf   
c0008d8b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d8f:	76 10                	jbe    c0008da1 <linear_vari_process+0x102>
c0008d91:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d94:	dc 27                	fsub   QWORD PTR [edi]
c0008d96:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d99:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d9c:	dc 07                	fadd   QWORD PTR [edi]
c0008d9e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008da1:	31 c0                	xor    eax,eax
c0008da3:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008da6:	7e 1f                	jle    c0008dc7 <linear_vari_process+0x128>
c0008da8:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008daa:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008dad:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008db1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008db5:	d8 e1                	fsub   st,st(1)
c0008db7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008dba:	40                   	inc    eax
c0008dbb:	d8 ca                	fmul   st,st(2)
c0008dbd:	de c1                	faddp  st(1),st
c0008dbf:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008dc2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008dc5:	eb dc                	jmp    c0008da3 <linear_vari_process+0x104>
c0008dc7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dcb:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dce:	de c1                	faddp  st(1),st
c0008dd0:	e9 61 ff ff ff       	jmp    c0008d36 <linear_vari_process+0x97>
c0008dd5:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dd9:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008ddc:	de c1                	faddp  st(1),st
c0008dde:	83 ec 10             	sub    esp,0x10
c0008de1:	dd 14 24             	fst    QWORD PTR [esp]
c0008de4:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008de8:	e8 5b fe ff ff       	call   c0008c48 <fmod_one>
c0008ded:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008df0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008df4:	d8 e1                	fsub   st,st(1)
c0008df6:	d9 c9                	fxch   st(1)
c0008df8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dff:	e8 5c 69 01 00       	call   c001f760 <lrint>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f af e8             	imul   ebp,eax
c0008e0a:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008e0d:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008e10:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e14:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008e17:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e1a:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e1d:	0f 8d 95 00 00 00    	jge    c0008eb8 <linear_vari_process+0x219>
c0008e23:	d9 c0                	fld    st(0)
c0008e25:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e28:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e2c:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e30:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e34:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e38:	de d9                	fcompp 
c0008e3a:	df e0                	fnstsw ax
c0008e3c:	9e                   	sahf   
c0008e3d:	76 79                	jbe    c0008eb8 <linear_vari_process+0x219>
c0008e3f:	85 ed                	test   ebp,ebp
c0008e41:	7e 36                	jle    c0008e79 <linear_vari_process+0x1da>
c0008e43:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e47:	dd 07                	fld    QWORD PTR [edi]
c0008e49:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e4c:	83 ec 10             	sub    esp,0x10
c0008e4f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e52:	e8 e9 68 01 00       	call   c001f740 <fabs>
c0008e57:	83 c4 10             	add    esp,0x10
c0008e5a:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008e60:	df e0                	fnstsw ax
c0008e62:	9e                   	sahf   
c0008e63:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e67:	76 10                	jbe    c0008e79 <linear_vari_process+0x1da>
c0008e69:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e6c:	dc 27                	fsub   QWORD PTR [edi]
c0008e6e:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e71:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e74:	dc 07                	fadd   QWORD PTR [edi]
c0008e76:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e79:	31 c0                	xor    eax,eax
c0008e7b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e7e:	39 c2                	cmp    edx,eax
c0008e80:	0f 8e 4f ff ff ff    	jle    c0008dd5 <linear_vari_process+0x136>
c0008e86:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e88:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e8b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e8f:	89 e9                	mov    ecx,ebp
c0008e91:	29 d1                	sub    ecx,edx
c0008e93:	01 c5                	add    ebp,eax
c0008e95:	89 ca                	mov    edx,ecx
c0008e97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e9b:	01 c2                	add    edx,eax
c0008e9d:	40                   	inc    eax
c0008e9e:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008ea1:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008ea4:	d8 e1                	fsub   st,st(1)
c0008ea6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008ea9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008eac:	d8 ca                	fmul   st,st(2)
c0008eae:	de c1                	faddp  st(1),st
c0008eb0:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008eb3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008eb6:	eb c3                	jmp    c0008e7b <linear_vari_process+0x1dc>
c0008eb8:	39 d1                	cmp    ecx,edx
c0008eba:	7d 13                	jge    c0008ecf <linear_vari_process+0x230>
c0008ebc:	89 d0                	mov    eax,edx
c0008ebe:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ec1:	29 c8                	sub    eax,ecx
c0008ec3:	99                   	cdq    
c0008ec4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ecb:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008ecf:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008ed2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ed5:	85 c0                	test   eax,eax
c0008ed7:	7f 1b                	jg     c0008ef4 <linear_vari_process+0x255>
c0008ed9:	dd 04 24             	fld    QWORD PTR [esp]
c0008edc:	dd 1f                	fstp   QWORD PTR [edi]
c0008ede:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ee1:	99                   	cdq    
c0008ee2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ee5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008ee8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008eeb:	99                   	cdq    
c0008eec:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008eef:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ef2:	eb 26                	jmp    c0008f1a <linear_vari_process+0x27b>
c0008ef4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ef7:	31 d2                	xor    edx,edx
c0008ef9:	29 c8                	sub    eax,ecx
c0008efb:	c1 e0 02             	shl    eax,0x2
c0008efe:	39 d1                	cmp    ecx,edx
c0008f00:	7e d7                	jle    c0008ed9 <linear_vari_process+0x23a>
c0008f02:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008f04:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008f08:	83 c0 04             	add    eax,0x4
c0008f0b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f0f:	42                   	inc    edx
c0008f10:	eb ec                	jmp    c0008efe <linear_vari_process+0x25f>
c0008f12:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f1e:	83 c4 2c             	add    esp,0x2c
c0008f21:	5b                   	pop    ebx
c0008f22:	5e                   	pop    esi
c0008f23:	5f                   	pop    edi
c0008f24:	5d                   	pop    ebp
c0008f25:	c3                   	ret    

c0008f26 <linear_reset>:
c0008f26:	83 ec 0c             	sub    esp,0xc
c0008f29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f2d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f30:	85 c0                	test   eax,eax
c0008f32:	74 20                	je     c0008f54 <linear_reset+0x2e>
c0008f34:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f37:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f3e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f41:	51                   	push   ecx
c0008f42:	c1 e2 02             	shl    edx,0x2
c0008f45:	83 c0 1c             	add    eax,0x1c
c0008f48:	52                   	push   edx
c0008f49:	6a 00                	push   0x0
c0008f4b:	50                   	push   eax
c0008f4c:	e8 87 77 ff ff       	call   c00006d8 <memset>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	83 c4 0c             	add    esp,0xc
c0008f57:	c3                   	ret    

c0008f58 <linear_get_name>:
c0008f58:	31 c0                	xor    eax,eax
c0008f5a:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f5f:	75 05                	jne    c0008f66 <linear_get_name+0xe>
c0008f61:	b8 b4 0e 02 c0       	mov    eax,0xc0020eb4
c0008f66:	c3                   	ret    

c0008f67 <linear_get_description>:
c0008f67:	31 c0                	xor    eax,eax
c0008f69:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f6e:	75 05                	jne    c0008f75 <linear_get_description+0xe>
c0008f70:	b8 c8 0e 02 c0       	mov    eax,0xc0020ec8
c0008f75:	c3                   	ret    

c0008f76 <linear_set_converter>:
c0008f76:	53                   	push   ebx
c0008f77:	b8 0a 00 00 00       	mov    eax,0xa
c0008f7c:	83 ec 08             	sub    esp,0x8
c0008f7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f83:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f88:	75 6e                	jne    c0008ff8 <linear_set_converter+0x82>
c0008f8a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f8d:	85 c0                	test   eax,eax
c0008f8f:	74 13                	je     c0008fa4 <linear_set_converter+0x2e>
c0008f91:	83 ec 0c             	sub    esp,0xc
c0008f94:	50                   	push   eax
c0008f95:	e8 6d 30 00 00       	call   c000c007 <free>
c0008f9a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008fa1:	83 c4 10             	add    esp,0x10
c0008fa4:	50                   	push   eax
c0008fa5:	50                   	push   eax
c0008fa6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fa9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008fb0:	50                   	push   eax
c0008fb1:	6a 01                	push   0x1
c0008fb3:	e8 6f 30 00 00       	call   c000c027 <calloc>
c0008fb8:	89 c2                	mov    edx,eax
c0008fba:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fbd:	83 c4 10             	add    esp,0x10
c0008fc0:	b8 01 00 00 00       	mov    eax,0x1
c0008fc5:	85 d2                	test   edx,edx
c0008fc7:	74 2f                	je     c0008ff8 <linear_set_converter+0x82>
c0008fc9:	83 ec 0c             	sub    esp,0xc
c0008fcc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fcf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fd2:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fd8:	c7 43 24 9f 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c9f
c0008fdf:	c7 43 20 9f 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c9f
c0008fe6:	c7 43 28 26 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f26
c0008fed:	53                   	push   ebx
c0008fee:	e8 33 ff ff ff       	call   c0008f26 <linear_reset>
c0008ff3:	83 c4 10             	add    esp,0x10
c0008ff6:	31 c0                	xor    eax,eax
c0008ff8:	83 c4 08             	add    esp,0x8
c0008ffb:	5b                   	pop    ebx
c0008ffc:	c3                   	ret    

c0008ffd <is_bad_src_ratio>:
c0008ffd:	83 ec 0c             	sub    esp,0xc
c0009000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009004:	89 04 24             	mov    DWORD PTR [esp],eax
c0009007:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000900b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000900f:	dd 04 24             	fld    QWORD PTR [esp]
c0009012:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0009018:	de d9                	fcompp 
c000901a:	df e0                	fnstsw ax
c000901c:	f6 c4 45             	test   ah,0x45
c000901f:	74 10                	je     c0009031 <is_bad_src_ratio+0x34>
c0009021:	dd 04 24             	fld    QWORD PTR [esp]
c0009024:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000902a:	df e0                	fnstsw ax
c000902c:	f6 c4 45             	test   ah,0x45
c000902f:	75 07                	jne    c0009038 <is_bad_src_ratio+0x3b>
c0009031:	b8 01 00 00 00       	mov    eax,0x1
c0009036:	eb 05                	jmp    c000903d <is_bad_src_ratio+0x40>
c0009038:	b8 00 00 00 00       	mov    eax,0x0
c000903d:	83 c4 0c             	add    esp,0xc
c0009040:	c3                   	ret    

c0009041 <int_to_fp>:
c0009041:	c1 e0 0c             	shl    eax,0xc
c0009044:	c3                   	ret    

c0009045 <fp_to_int>:
c0009045:	c1 f8 0c             	sar    eax,0xc
c0009048:	c3                   	ret    

c0009049 <fp_fraction_part>:
c0009049:	25 ff 0f 00 00       	and    eax,0xfff
c000904e:	c3                   	ret    

c000904f <fp_to_double>:
c000904f:	83 ec 0c             	sub    esp,0xc
c0009052:	e8 f2 ff ff ff       	call   c0009049 <fp_fraction_part>
c0009057:	d9 05 88 10 02 c0    	fld    DWORD PTR ds:0xc0021088
c000905d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009061:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009065:	83 c4 0c             	add    esp,0xc
c0009068:	c3                   	ret    

c0009069 <calc_output_single>:
c0009069:	55                   	push   ebp
c000906a:	57                   	push   edi
c000906b:	89 c7                	mov    edi,eax
c000906d:	56                   	push   esi
c000906e:	53                   	push   ebx
c000906f:	89 d3                	mov    ebx,edx
c0009071:	83 ec 24             	sub    esp,0x24
c0009074:	89 de                	mov    esi,ebx
c0009076:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009079:	e8 c3 ff ff ff       	call   c0009041 <int_to_fp>
c000907e:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009081:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009085:	29 c8                	sub    eax,ecx
c0009087:	99                   	cdq    
c0009088:	f7 fb                	idiv   ebx
c000908a:	0f af f0             	imul   esi,eax
c000908d:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009090:	01 ce                	add    esi,ecx
c0009092:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009096:	29 c2                	sub    edx,eax
c0009098:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000909f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00090a7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090aa:	89 f0                	mov    eax,esi
c00090ac:	e8 9e ff ff ff       	call   c000904f <fp_to_double>
c00090b1:	89 f0                	mov    eax,esi
c00090b3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00090b7:	e8 89 ff ff ff       	call   c0009045 <fp_to_int>
c00090bc:	83 c2 04             	add    edx,0x4
c00090bf:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090c3:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090c7:	d8 e1                	fsub   st,st(1)
c00090c9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090cd:	de c9                	fmulp  st(1),st
c00090cf:	de c1                	faddp  st(1),st
c00090d1:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090d7:	29 de                	sub    esi,ebx
c00090d9:	dc 04 24             	fadd   QWORD PTR [esp]
c00090dc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090df:	79 c9                	jns    c00090aa <calc_output_single+0x41>
c00090e1:	89 d8                	mov    eax,ebx
c00090e3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090e7:	29 c8                	sub    eax,ecx
c00090e9:	89 c1                	mov    ecx,eax
c00090eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ef:	29 c8                	sub    eax,ecx
c00090f1:	99                   	cdq    
c00090f2:	f7 fb                	idiv   ebx
c00090f4:	89 da                	mov    edx,ebx
c00090f6:	0f af d0             	imul   edx,eax
c00090f9:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090fd:	01 d1                	add    ecx,edx
c00090ff:	d9 ee                	fldz   
c0009101:	8d 14 87             	lea    edx,[edi+eax*4]
c0009104:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009108:	89 c8                	mov    eax,ecx
c000910a:	e8 40 ff ff ff       	call   c000904f <fp_to_double>
c000910f:	89 c8                	mov    eax,ecx
c0009111:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009115:	e8 2b ff ff ff       	call   c0009045 <fp_to_int>
c000911a:	29 d9                	sub    ecx,ebx
c000911c:	83 ea 04             	sub    edx,0x4
c000911f:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009123:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009127:	d8 e1                	fsub   st,st(1)
c0009129:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000912d:	de c9                	fmulp  st(1),st
c000912f:	de c1                	faddp  st(1),st
c0009131:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009137:	85 c9                	test   ecx,ecx
c0009139:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000913d:	de c1                	faddp  st(1),st
c000913f:	7f c3                	jg     c0009104 <calc_output_single+0x9b>
c0009141:	dd 04 24             	fld    QWORD PTR [esp]
c0009144:	de c1                	faddp  st(1),st
c0009146:	83 c4 24             	add    esp,0x24
c0009149:	5b                   	pop    ebx
c000914a:	5e                   	pop    esi
c000914b:	5f                   	pop    edi
c000914c:	5d                   	pop    ebp
c000914d:	c3                   	ret    

c000914e <calc_output_stereo>:
c000914e:	55                   	push   ebp
c000914f:	57                   	push   edi
c0009150:	89 c7                	mov    edi,eax
c0009152:	56                   	push   esi
c0009153:	53                   	push   ebx
c0009154:	89 d3                	mov    ebx,edx
c0009156:	83 ec 44             	sub    esp,0x44
c0009159:	89 de                	mov    esi,ebx
c000915b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000915e:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009162:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009166:	e8 d6 fe ff ff       	call   c0009041 <int_to_fp>
c000916b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000916e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009172:	29 c8                	sub    eax,ecx
c0009174:	99                   	cdq    
c0009175:	f7 fb                	idiv   ebx
c0009177:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000917a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009182:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009186:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009189:	0f af f0             	imul   esi,eax
c000918c:	0f af c2             	imul   eax,edx
c000918f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009193:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009197:	d9 ee                	fldz   
c0009199:	29 c2                	sub    edx,eax
c000919b:	01 ce                	add    esi,ecx
c000919d:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091a0:	8d 14 97             	lea    edx,[edi+edx*4]
c00091a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00091ab:	89 f0                	mov    eax,esi
c00091ad:	e8 9d fe ff ff       	call   c000904f <fp_to_double>
c00091b2:	89 f0                	mov    eax,esi
c00091b4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00091b8:	e8 88 fe ff ff       	call   c0009045 <fp_to_int>
c00091bd:	83 c2 08             	add    edx,0x8
c00091c0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091c4:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091c8:	d8 e1                	fsub   st,st(1)
c00091ca:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091ce:	de c9                	fmulp  st(1),st
c00091d0:	de c1                	faddp  st(1),st
c00091d2:	d9 c0                	fld    st(0)
c00091d4:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091da:	dc 04 24             	fadd   QWORD PTR [esp]
c00091dd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091e0:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091e6:	29 de                	sub    esi,ebx
c00091e8:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091ec:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091f0:	79 b9                	jns    c00091ab <calc_output_stereo+0x5d>
c00091f2:	89 d8                	mov    eax,ebx
c00091f4:	29 c8                	sub    eax,ecx
c00091f6:	89 c1                	mov    ecx,eax
c00091f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091fc:	29 c8                	sub    eax,ecx
c00091fe:	99                   	cdq    
c00091ff:	f7 fb                	idiv   ebx
c0009201:	89 da                	mov    edx,ebx
c0009203:	0f af d0             	imul   edx,eax
c0009206:	40                   	inc    eax
c0009207:	01 d1                	add    ecx,edx
c0009209:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c000920e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0009212:	d9 ee                	fldz   
c0009214:	d9 ee                	fldz   
c0009216:	8d 14 87             	lea    edx,[edi+eax*4]
c0009219:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000921d:	89 c8                	mov    eax,ecx
c000921f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009223:	e8 27 fe ff ff       	call   c000904f <fp_to_double>
c0009228:	89 c8                	mov    eax,ecx
c000922a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000922e:	e8 12 fe ff ff       	call   c0009045 <fp_to_int>
c0009233:	29 d9                	sub    ecx,ebx
c0009235:	83 ea 08             	sub    edx,0x8
c0009238:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000923c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009240:	d8 e1                	fsub   st,st(1)
c0009242:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009246:	de c9                	fmulp  st(1),st
c0009248:	de c1                	faddp  st(1),st
c000924a:	d9 c0                	fld    st(0)
c000924c:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009252:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009256:	de c1                	faddp  st(1),st
c0009258:	d9 c9                	fxch   st(1)
c000925a:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009260:	85 c9                	test   ecx,ecx
c0009262:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009266:	de c1                	faddp  st(1),st
c0009268:	7f af                	jg     c0009219 <calc_output_stereo+0xcb>
c000926a:	dd 04 24             	fld    QWORD PTR [esp]
c000926d:	de c2                	faddp  st(2),st
c000926f:	d9 c9                	fxch   st(1)
c0009271:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009275:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009279:	d9 18                	fstp   DWORD PTR [eax]
c000927b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000927f:	de c1                	faddp  st(1),st
c0009281:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009285:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c0009288:	83 c4 44             	add    esp,0x44
c000928b:	5b                   	pop    ebx
c000928c:	5e                   	pop    esi
c000928d:	5f                   	pop    edi
c000928e:	5d                   	pop    ebp
c000928f:	c3                   	ret    

c0009290 <calc_output_quad>:
c0009290:	55                   	push   ebp
c0009291:	57                   	push   edi
c0009292:	56                   	push   esi
c0009293:	89 c6                	mov    esi,eax
c0009295:	53                   	push   ebx
c0009296:	89 d3                	mov    ebx,edx
c0009298:	83 ec 5c             	sub    esp,0x5c
c000929b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000929e:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00092a2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00092a6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00092a9:	e8 93 fd ff ff       	call   c0009041 <int_to_fp>
c00092ae:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00092b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00092b5:	29 c8                	sub    eax,ecx
c00092b7:	99                   	cdq    
c00092b8:	f7 fb                	idiv   ebx
c00092ba:	89 da                	mov    edx,ebx
c00092bc:	0f af d0             	imul   edx,eax
c00092bf:	01 ca                	add    edx,ecx
c00092c1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092c5:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092c8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092cc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092cf:	0f af c2             	imul   eax,edx
c00092d2:	d9 ee                	fldz   
c00092d4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092dc:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092e0:	29 c2                	sub    edx,eax
c00092e2:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092e6:	8d 14 96             	lea    edx,[esi+edx*4]
c00092e9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092ed:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092f5:	e8 55 fd ff ff       	call   c000904f <fp_to_double>
c00092fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009302:	e8 3e fd ff ff       	call   c0009045 <fp_to_int>
c0009307:	83 c2 10             	add    edx,0x10
c000930a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000930e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009312:	d8 e1                	fsub   st,st(1)
c0009314:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009318:	de c9                	fmulp  st(1),st
c000931a:	de c1                	faddp  st(1),st
c000931c:	d9 c0                	fld    st(0)
c000931e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009324:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009328:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000932c:	d9 c0                	fld    st(0)
c000932e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009334:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009338:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000933c:	d9 c0                	fld    st(0)
c000933e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009344:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009348:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000934c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009352:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009356:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000935a:	de c1                	faddp  st(1),st
c000935c:	79 8f                	jns    c00092ed <calc_output_quad+0x5d>
c000935e:	89 d8                	mov    eax,ebx
c0009360:	29 c8                	sub    eax,ecx
c0009362:	89 c1                	mov    ecx,eax
c0009364:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009368:	29 c8                	sub    eax,ecx
c000936a:	99                   	cdq    
c000936b:	f7 fb                	idiv   ebx
c000936d:	89 da                	mov    edx,ebx
c000936f:	0f af d0             	imul   edx,eax
c0009372:	40                   	inc    eax
c0009373:	01 d1                	add    ecx,edx
c0009375:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000937a:	d9 ee                	fldz   
c000937c:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009380:	d9 ee                	fldz   
c0009382:	d9 ee                	fldz   
c0009384:	d9 ee                	fldz   
c0009386:	8d 14 86             	lea    edx,[esi+eax*4]
c0009389:	eb 0a                	jmp    c0009395 <calc_output_quad+0x105>
c000938b:	d9 cc                	fxch   st(4)
c000938d:	d9 ca                	fxch   st(2)
c000938f:	d9 c9                	fxch   st(1)
c0009391:	d9 cb                	fxch   st(3)
c0009393:	d9 c9                	fxch   st(1)
c0009395:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009399:	d9 c9                	fxch   st(1)
c000939b:	89 c8                	mov    eax,ecx
c000939d:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00093a1:	d9 c9                	fxch   st(1)
c00093a3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00093a7:	d9 c9                	fxch   st(1)
c00093a9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00093ad:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00093b1:	e8 99 fc ff ff       	call   c000904f <fp_to_double>
c00093b6:	89 c8                	mov    eax,ecx
c00093b8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093bc:	e8 84 fc ff ff       	call   c0009045 <fp_to_int>
c00093c1:	29 d9                	sub    ecx,ebx
c00093c3:	83 ea 10             	sub    edx,0x10
c00093c6:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093ca:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093ce:	d8 e1                	fsub   st,st(1)
c00093d0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093d4:	de c9                	fmulp  st(1),st
c00093d6:	de c1                	faddp  st(1),st
c00093d8:	d9 c0                	fld    st(0)
c00093da:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093e0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093e4:	de c1                	faddp  st(1),st
c00093e6:	d9 c1                	fld    st(1)
c00093e8:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093ee:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093f2:	de c1                	faddp  st(1),st
c00093f4:	d9 c2                	fld    st(2)
c00093f6:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093fc:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009400:	de c1                	faddp  st(1),st
c0009402:	d9 cb                	fxch   st(3)
c0009404:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c000940a:	85 c9                	test   ecx,ecx
c000940c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009410:	de c1                	faddp  st(1),st
c0009412:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009416:	0f 8f 6f ff ff ff    	jg     c000938b <calc_output_quad+0xfb>
c000941c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009420:	de c4                	faddp  st(4),st
c0009422:	d9 cb                	fxch   st(3)
c0009424:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009427:	d9 1f                	fstp   DWORD PTR [edi]
c0009429:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000942d:	de c2                	faddp  st(2),st
c000942f:	d9 c9                	fxch   st(1)
c0009431:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009434:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009437:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000943b:	de c3                	faddp  st(3),st
c000943d:	d9 ca                	fxch   st(2)
c000943f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009442:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009445:	de c1                	faddp  st(1),st
c0009447:	dc 0c 24             	fmul   QWORD PTR [esp]
c000944a:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000944d:	83 c4 5c             	add    esp,0x5c
c0009450:	5b                   	pop    ebx
c0009451:	5e                   	pop    esi
c0009452:	5f                   	pop    edi
c0009453:	5d                   	pop    ebp
c0009454:	c3                   	ret    

c0009455 <calc_output_hex>:
c0009455:	55                   	push   ebp
c0009456:	57                   	push   edi
c0009457:	89 c7                	mov    edi,eax
c0009459:	56                   	push   esi
c000945a:	53                   	push   ebx
c000945b:	89 d3                	mov    ebx,edx
c000945d:	83 ec 7c             	sub    esp,0x7c
c0009460:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009463:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000946a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009471:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009474:	e8 c8 fb ff ff       	call   c0009041 <int_to_fp>
c0009479:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000947c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009480:	29 c8                	sub    eax,ecx
c0009482:	99                   	cdq    
c0009483:	f7 fb                	idiv   ebx
c0009485:	89 da                	mov    edx,ebx
c0009487:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c000948f:	0f af d0             	imul   edx,eax
c0009492:	01 ca                	add    edx,ecx
c0009494:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000949c:	d9 ee                	fldz   
c000949e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00094a2:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00094a5:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00094a9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00094ac:	0f af c2             	imul   eax,edx
c00094af:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00094b3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00094b7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00094bb:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094bf:	29 c2                	sub    edx,eax
c00094c1:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094c5:	8d 14 97             	lea    edx,[edi+edx*4]
c00094c8:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094cc:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094d4:	e8 76 fb ff ff       	call   c000904f <fp_to_double>
c00094d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094dd:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094e1:	e8 5f fb ff ff       	call   c0009045 <fp_to_int>
c00094e6:	83 c2 18             	add    edx,0x18
c00094e9:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094ed:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094f1:	d8 e1                	fsub   st,st(1)
c00094f3:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094f7:	de c9                	fmulp  st(1),st
c00094f9:	de c1                	faddp  st(1),st
c00094fb:	d9 c0                	fld    st(0)
c00094fd:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009503:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009507:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000950b:	d9 c0                	fld    st(0)
c000950d:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009513:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009517:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000951b:	d9 c0                	fld    st(0)
c000951d:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009523:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009527:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000952b:	d9 c0                	fld    st(0)
c000952d:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009533:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009537:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000953b:	d9 c0                	fld    st(0)
c000953d:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009543:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009547:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000954b:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009551:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009555:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009559:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000955d:	0f 89 6d ff ff ff    	jns    c00094d0 <calc_output_hex+0x7b>
c0009563:	89 d8                	mov    eax,ebx
c0009565:	29 c8                	sub    eax,ecx
c0009567:	89 c1                	mov    ecx,eax
c0009569:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000956d:	29 c8                	sub    eax,ecx
c000956f:	99                   	cdq    
c0009570:	f7 fb                	idiv   ebx
c0009572:	89 da                	mov    edx,ebx
c0009574:	0f af d0             	imul   edx,eax
c0009577:	40                   	inc    eax
c0009578:	01 d1                	add    ecx,edx
c000957a:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000957f:	d9 ee                	fldz   
c0009581:	d9 ee                	fldz   
c0009583:	d9 ee                	fldz   
c0009585:	d9 ca                	fxch   st(2)
c0009587:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c000958b:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c000958f:	d9 ee                	fldz   
c0009591:	8d 14 87             	lea    edx,[edi+eax*4]
c0009594:	d9 ee                	fldz   
c0009596:	d9 ca                	fxch   st(2)
c0009598:	eb 0a                	jmp    c00095a4 <calc_output_hex+0x14f>
c000959a:	d9 c9                	fxch   st(1)
c000959c:	d9 cc                	fxch   st(4)
c000959e:	d9 cb                	fxch   st(3)
c00095a0:	d9 ca                	fxch   st(2)
c00095a2:	d9 c9                	fxch   st(1)
c00095a4:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00095a8:	89 c8                	mov    eax,ecx
c00095aa:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00095ae:	d9 ca                	fxch   st(2)
c00095b0:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00095b4:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00095b8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095bc:	e8 8e fa ff ff       	call   c000904f <fp_to_double>
c00095c1:	89 c8                	mov    eax,ecx
c00095c3:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095c7:	e8 79 fa ff ff       	call   c0009045 <fp_to_int>
c00095cc:	29 d9                	sub    ecx,ebx
c00095ce:	83 ea 18             	sub    edx,0x18
c00095d1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095d5:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095d9:	d8 e1                	fsub   st,st(1)
c00095db:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095df:	de c9                	fmulp  st(1),st
c00095e1:	de c1                	faddp  st(1),st
c00095e3:	d9 c0                	fld    st(0)
c00095e5:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095eb:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095ef:	de c1                	faddp  st(1),st
c00095f1:	d9 c1                	fld    st(1)
c00095f3:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095f9:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095fd:	de c1                	faddp  st(1),st
c00095ff:	d9 c2                	fld    st(2)
c0009601:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009607:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000960b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000960f:	d9 c2                	fld    st(2)
c0009611:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009617:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000961b:	de c1                	faddp  st(1),st
c000961d:	d9 c3                	fld    st(3)
c000961f:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009625:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009629:	de c1                	faddp  st(1),st
c000962b:	d9 cc                	fxch   st(4)
c000962d:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009633:	85 c9                	test   ecx,ecx
c0009635:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009639:	de c1                	faddp  st(1),st
c000963b:	0f 8f 59 ff ff ff    	jg     c000959a <calc_output_hex+0x145>
c0009641:	d9 cb                	fxch   st(3)
c0009643:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009647:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964a:	d9 1e                	fstp   DWORD PTR [esi]
c000964c:	d9 c9                	fxch   st(1)
c000964e:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009652:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009655:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009658:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000965c:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009660:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009663:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009666:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000966a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000966d:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009670:	d9 c9                	fxch   st(1)
c0009672:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009676:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009679:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c000967c:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009680:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009683:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009686:	83 c4 7c             	add    esp,0x7c
c0009689:	5b                   	pop    ebx
c000968a:	5e                   	pop    esi
c000968b:	5f                   	pop    edi
c000968c:	5d                   	pop    ebp
c000968d:	c3                   	ret    

c000968e <sinc_reset>:
c000968e:	56                   	push   esi
c000968f:	53                   	push   ebx
c0009690:	51                   	push   ecx
c0009691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009695:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009698:	85 db                	test   ebx,ebx
c000969a:	74 51                	je     c00096ed <sinc_reset+0x5f>
c000969c:	d9 ee                	fldz   
c000969e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00096a5:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00096ac:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c00096af:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00096b6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096bc:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096bf:	52                   	push   edx
c00096c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096c3:	c1 e0 02             	shl    eax,0x2
c00096c6:	50                   	push   eax
c00096c7:	6a 00                	push   0x0
c00096c9:	56                   	push   esi
c00096ca:	e8 09 70 ff ff       	call   c00006d8 <memset>
c00096cf:	83 c4 0c             	add    esp,0xc
c00096d2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096d5:	c1 e0 02             	shl    eax,0x2
c00096d8:	50                   	push   eax
c00096d9:	68 aa 00 00 00       	push   0xaa
c00096de:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096e1:	8d 04 86             	lea    eax,[esi+eax*4]
c00096e4:	50                   	push   eax
c00096e5:	e8 ee 6f ff ff       	call   c00006d8 <memset>
c00096ea:	83 c4 10             	add    esp,0x10
c00096ed:	58                   	pop    eax
c00096ee:	5b                   	pop    ebx
c00096ef:	5e                   	pop    esi
c00096f0:	c3                   	ret    

c00096f1 <calc_output_multi>:
c00096f1:	55                   	push   ebp
c00096f2:	57                   	push   edi
c00096f3:	8d 78 44             	lea    edi,[eax+0x44]
c00096f6:	56                   	push   esi
c00096f7:	89 c6                	mov    esi,eax
c00096f9:	53                   	push   ebx
c00096fa:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009700:	83 ec 4c             	sub    esp,0x4c
c0009703:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009707:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000970b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000970e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009712:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009716:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000971a:	e8 22 f9 ff ff       	call   c0009041 <int_to_fp>
c000971f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009723:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009727:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000972b:	99                   	cdq    
c000972c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009730:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009734:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009737:	0f af d0             	imul   edx,eax
c000973a:	0f af c3             	imul   eax,ebx
c000973d:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009741:	29 c5                	sub    ebp,eax
c0009743:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000974a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000974e:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009752:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009756:	52                   	push   edx
c0009757:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000975b:	6a 00                	push   0x0
c000975d:	57                   	push   edi
c000975e:	e8 75 6f ff ff       	call   c00006d8 <memset>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000976a:	e8 e0 f8 ff ff       	call   c000904f <fp_to_double>
c000976f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009773:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009777:	e8 c9 f8 ff ff       	call   c0009045 <fp_to_int>
c000977c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000977f:	89 d9                	mov    ecx,ebx
c0009781:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009784:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009788:	d8 e1                	fsub   st,st(1)
c000978a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000978e:	de c9                	fmulp  st(1),st
c0009790:	de c1                	faddp  st(1),st
c0009792:	89 c8                	mov    eax,ecx
c0009794:	bd 08 00 00 00       	mov    ebp,0x8
c0009799:	99                   	cdq    
c000979a:	f7 fd                	idiv   ebp
c000979c:	4a                   	dec    edx
c000979d:	83 fa 06             	cmp    edx,0x6
c00097a0:	77 07                	ja     c00097a9 <calc_output_multi+0xb8>
c00097a2:	ff 24 95 00 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf100]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097ae:	d9 c0                	fld    st(0)
c00097b0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b7:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ba:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097be:	dc 00                	fadd   QWORD PTR [eax]
c00097c0:	dd 18                	fstp   QWORD PTR [eax]
c00097c2:	49                   	dec    ecx
c00097c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097c7:	d9 c0                	fld    st(0)
c00097c9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097d0:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097d3:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097d7:	dc 00                	fadd   QWORD PTR [eax]
c00097d9:	dd 18                	fstp   QWORD PTR [eax]
c00097db:	49                   	dec    ecx
c00097dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097e0:	d9 c0                	fld    st(0)
c00097e2:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097e9:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ec:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097f0:	dc 00                	fadd   QWORD PTR [eax]
c00097f2:	dd 18                	fstp   QWORD PTR [eax]
c00097f4:	49                   	dec    ecx
c00097f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097f9:	d9 c0                	fld    st(0)
c00097fb:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009802:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009805:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009809:	dc 00                	fadd   QWORD PTR [eax]
c000980b:	dd 18                	fstp   QWORD PTR [eax]
c000980d:	49                   	dec    ecx
c000980e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009812:	d9 c0                	fld    st(0)
c0009814:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000981b:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000981e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009822:	dc 00                	fadd   QWORD PTR [eax]
c0009824:	dd 18                	fstp   QWORD PTR [eax]
c0009826:	49                   	dec    ecx
c0009827:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000982b:	d9 c0                	fld    st(0)
c000982d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009834:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009837:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000983b:	dc 00                	fadd   QWORD PTR [eax]
c000983d:	dd 18                	fstp   QWORD PTR [eax]
c000983f:	49                   	dec    ecx
c0009840:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009844:	d9 c0                	fld    st(0)
c0009846:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000984d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009850:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009854:	dc 00                	fadd   QWORD PTR [eax]
c0009856:	dd 18                	fstp   QWORD PTR [eax]
c0009858:	49                   	dec    ecx
c0009859:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000985d:	d9 c0                	fld    st(0)
c000985f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009866:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009869:	85 c9                	test   ecx,ecx
c000986b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000986f:	dc 00                	fadd   QWORD PTR [eax]
c0009871:	dd 18                	fstp   QWORD PTR [eax]
c0009873:	0f 8f 19 ff ff ff    	jg     c0009792 <calc_output_multi+0xa1>
c0009879:	dd d8                	fstp   st(0)
c000987b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987f:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0009883:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009887:	0f 89 d9 fe ff ff    	jns    c0009766 <calc_output_multi+0x75>
c000988d:	89 d1                	mov    ecx,edx
c000988f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009893:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009897:	29 c8                	sub    eax,ecx
c0009899:	99                   	cdq    
c000989a:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c000989e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098a2:	0f af d0             	imul   edx,eax
c00098a5:	40                   	inc    eax
c00098a6:	01 d1                	add    ecx,edx
c00098a8:	0f af c3             	imul   eax,ebx
c00098ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00098ae:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c00098b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098b6:	50                   	push   eax
c00098b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098bb:	6a 00                	push   0x0
c00098bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098c1:	e8 12 6e ff ff       	call   c00006d8 <memset>
c00098c6:	83 c4 10             	add    esp,0x10
c00098c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098cd:	e8 7d f7 ff ff       	call   c000904f <fp_to_double>
c00098d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098d6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098da:	e8 66 f7 ff ff       	call   c0009045 <fp_to_int>
c00098df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098e2:	89 d9                	mov    ecx,ebx
c00098e4:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098e7:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098eb:	d8 e1                	fsub   st,st(1)
c00098ed:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098f1:	de c9                	fmulp  st(1),st
c00098f3:	de c1                	faddp  st(1),st
c00098f5:	89 c8                	mov    eax,ecx
c00098f7:	bd 08 00 00 00       	mov    ebp,0x8
c00098fc:	99                   	cdq    
c00098fd:	f7 fd                	idiv   ebp
c00098ff:	4a                   	dec    edx
c0009900:	83 fa 06             	cmp    edx,0x6
c0009903:	77 07                	ja     c000990c <calc_output_multi+0x21b>
c0009905:	ff 24 95 1c 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0e4]
c000990c:	49                   	dec    ecx
c000990d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009911:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009915:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000991c:	d9 c0                	fld    st(0)
c000991e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009922:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009925:	dc 00                	fadd   QWORD PTR [eax]
c0009927:	dd 18                	fstp   QWORD PTR [eax]
c0009929:	49                   	dec    ecx
c000992a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000992e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009932:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009939:	d9 c0                	fld    st(0)
c000993b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000993f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009942:	dc 00                	fadd   QWORD PTR [eax]
c0009944:	dd 18                	fstp   QWORD PTR [eax]
c0009946:	49                   	dec    ecx
c0009947:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000994b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009956:	d9 c0                	fld    st(0)
c0009958:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000995c:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000995f:	dc 00                	fadd   QWORD PTR [eax]
c0009961:	dd 18                	fstp   QWORD PTR [eax]
c0009963:	49                   	dec    ecx
c0009964:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009973:	d9 c0                	fld    st(0)
c0009975:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009979:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000997c:	dc 00                	fadd   QWORD PTR [eax]
c000997e:	dd 18                	fstp   QWORD PTR [eax]
c0009980:	49                   	dec    ecx
c0009981:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009985:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009989:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009990:	d9 c0                	fld    st(0)
c0009992:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009996:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009999:	dc 00                	fadd   QWORD PTR [eax]
c000999b:	dd 18                	fstp   QWORD PTR [eax]
c000999d:	49                   	dec    ecx
c000999e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099ad:	d9 c0                	fld    st(0)
c00099af:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099b3:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099b6:	dc 00                	fadd   QWORD PTR [eax]
c00099b8:	dd 18                	fstp   QWORD PTR [eax]
c00099ba:	49                   	dec    ecx
c00099bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099ca:	d9 c0                	fld    st(0)
c00099cc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099d0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d3:	dc 00                	fadd   QWORD PTR [eax]
c00099d5:	dd 18                	fstp   QWORD PTR [eax]
c00099d7:	49                   	dec    ecx
c00099d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e0:	85 c9                	test   ecx,ecx
c00099e2:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099e9:	d9 c0                	fld    st(0)
c00099eb:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099ef:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099f2:	dc 00                	fadd   QWORD PTR [eax]
c00099f4:	dd 18                	fstp   QWORD PTR [eax]
c00099f6:	0f 8f f9 fe ff ff    	jg     c00098f5 <calc_output_multi+0x204>
c00099fc:	dd d8                	fstp   st(0)
c00099fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a02:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c0009a06:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009a0a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0009a0f:	0f 8f b4 fe ff ff    	jg     c00098c9 <calc_output_multi+0x1d8>
c0009a15:	b9 08 00 00 00       	mov    ecx,0x8
c0009a1a:	89 d8                	mov    eax,ebx
c0009a1c:	99                   	cdq    
c0009a1d:	f7 f9                	idiv   ecx
c0009a1f:	4a                   	dec    edx
c0009a20:	83 fa 06             	cmp    edx,0x6
c0009a23:	77 07                	ja     c0009a2c <calc_output_multi+0x33b>
c0009a25:	ff 24 95 38 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0c8]
c0009a2c:	4b                   	dec    ebx
c0009a2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a31:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a34:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a37:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a3b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a3f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a42:	4b                   	dec    ebx
c0009a43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a47:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a4a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a4d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a51:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a55:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a58:	4b                   	dec    ebx
c0009a59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a5d:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a60:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a63:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a67:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a6b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a6e:	4b                   	dec    ebx
c0009a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a73:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a76:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a79:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a7d:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a81:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a84:	4b                   	dec    ebx
c0009a85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a89:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a8c:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a8f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a93:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a97:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a9a:	4b                   	dec    ebx
c0009a9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a9f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aa2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009aa5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aad:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ab0:	4b                   	dec    ebx
c0009ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab5:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab8:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009abb:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009abf:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009ac3:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac6:	4b                   	dec    ebx
c0009ac7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009acb:	85 db                	test   ebx,ebx
c0009acd:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ad0:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ad3:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ad7:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009adb:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ade:	0f 8f 36 ff ff ff    	jg     c0009a1a <calc_output_multi+0x329>
c0009ae4:	83 c4 4c             	add    esp,0x4c
c0009ae7:	5b                   	pop    ebx
c0009ae8:	5e                   	pop    esi
c0009ae9:	5f                   	pop    edi
c0009aea:	5d                   	pop    ebp
c0009aeb:	c3                   	ret    

c0009aec <double_to_fp>:
c0009aec:	d9 05 8c 10 02 c0    	fld    DWORD PTR ds:0xc002108c
c0009af2:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009af6:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009afa:	e9 61 5c 01 00       	jmp    c001f760 <lrint>

c0009aff <fmod_one>:
c0009aff:	83 ec 2c             	sub    esp,0x2c
c0009b02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b12:	83 ec 08             	sub    esp,0x8
c0009b15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b1d:	e8 3e 5c 01 00       	call   c001f760 <lrint>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b29:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b2d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b31:	de e1                	fsubrp st(1),st
c0009b33:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b37:	d9 ee                	fldz   
c0009b39:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b3d:	df e0                	fnstsw ax
c0009b3f:	f6 c4 45             	test   ah,0x45
c0009b42:	75 0a                	jne    c0009b4e <fmod_one+0x4f>
c0009b44:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b48:	d9 e8                	fld1   
c0009b4a:	de c1                	faddp  st(1),st
c0009b4c:	eb 04                	jmp    c0009b52 <fmod_one+0x53>
c0009b4e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b52:	83 c4 2c             	add    esp,0x2c
c0009b55:	c3                   	ret    

c0009b56 <prepare_data>:
c0009b56:	55                   	push   ebp
c0009b57:	57                   	push   edi
c0009b58:	56                   	push   esi
c0009b59:	53                   	push   ebx
c0009b5a:	83 ec 1c             	sub    esp,0x1c
c0009b5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b61:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b65:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b69:	0f 89 57 01 00 00    	jns    c0009cc6 <prepare_data+0x170>
c0009b6f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b72:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b75:	85 d2                	test   edx,edx
c0009b77:	75 0d                	jne    c0009b86 <prepare_data+0x30>
c0009b79:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b7c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b7f:	29 d0                	sub    eax,edx
c0009b81:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b84:	eb 44                	jmp    c0009bca <prepare_data+0x74>
c0009b86:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b89:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b8c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b8f:	39 c1                	cmp    ecx,eax
c0009b91:	7d 04                	jge    c0009b97 <prepare_data+0x41>
c0009b93:	29 d0                	sub    eax,edx
c0009b95:	eb 2d                	jmp    c0009bc4 <prepare_data+0x6e>
c0009b97:	29 d7                	sub    edi,edx
c0009b99:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b9f:	01 f7                	add    edi,esi
c0009ba1:	29 f2                	sub    edx,esi
c0009ba3:	51                   	push   ecx
c0009ba4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009bab:	8d 14 90             	lea    edx,[eax+edx*4]
c0009bae:	51                   	push   ecx
c0009baf:	52                   	push   edx
c0009bb0:	50                   	push   eax
c0009bb1:	e8 b4 6a ff ff       	call   c000066a <memmove>
c0009bb6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009bb9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bbc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bbf:	29 f0                	sub    eax,esi
c0009bc1:	83 c4 10             	add    esp,0x10
c0009bc4:	29 f0                	sub    eax,esi
c0009bc6:	79 02                	jns    c0009bca <prepare_data+0x74>
c0009bc8:	31 c0                	xor    eax,eax
c0009bca:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009bcd:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bd0:	29 ef                	sub    edi,ebp
c0009bd2:	39 c7                	cmp    edi,eax
c0009bd4:	7e 02                	jle    c0009bd8 <prepare_data+0x82>
c0009bd6:	89 c7                	mov    edi,eax
c0009bd8:	89 f8                	mov    eax,edi
c0009bda:	99                   	cdq    
c0009bdb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bde:	29 d7                	sub    edi,edx
c0009be0:	b8 15 00 00 00       	mov    eax,0x15
c0009be5:	0f 88 dd 00 00 00    	js     c0009cc8 <prepare_data+0x172>
c0009beb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bee:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bf1:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bf4:	0f 8f ce 00 00 00    	jg     c0009cc8 <prepare_data+0x172>
c0009bfa:	50                   	push   eax
c0009bfb:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c02:	50                   	push   eax
c0009c03:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009c09:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c0f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009c12:	50                   	push   eax
c0009c13:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c16:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c1a:	50                   	push   eax
c0009c1b:	e8 82 6a ff ff       	call   c00006a2 <memcpy>
c0009c20:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c23:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c26:	83 c4 10             	add    esp,0x10
c0009c29:	01 fd                	add    ebp,edi
c0009c2b:	01 f9                	add    ecx,edi
c0009c2d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c30:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c33:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c3a:	0f 85 86 00 00 00    	jne    c0009cc6 <prepare_data+0x170>
c0009c40:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c43:	89 e8                	mov    eax,ebp
c0009c45:	29 c8                	sub    eax,ecx
c0009c47:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c4a:	39 f8                	cmp    eax,edi
c0009c4c:	7d 78                	jge    c0009cc6 <prepare_data+0x170>
c0009c4e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c52:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c56:	74 6e                	je     c0009cc6 <prepare_data+0x170>
c0009c58:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c5b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c5f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c62:	29 ef                	sub    edi,ebp
c0009c64:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c68:	7c 29                	jl     c0009c93 <prepare_data+0x13d>
c0009c6a:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c6d:	29 f1                	sub    ecx,esi
c0009c6f:	55                   	push   ebp
c0009c70:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c77:	50                   	push   eax
c0009c78:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c7b:	50                   	push   eax
c0009c7c:	52                   	push   edx
c0009c7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c81:	e8 e4 69 ff ff       	call   c000066a <memmove>
c0009c86:	83 c4 10             	add    esp,0x10
c0009c89:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c8c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c93:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c96:	83 c6 05             	add    esi,0x5
c0009c99:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c9c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c9f:	78 07                	js     c0009ca8 <prepare_data+0x152>
c0009ca1:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009ca4:	39 cf                	cmp    edi,ecx
c0009ca6:	7e 04                	jle    c0009cac <prepare_data+0x156>
c0009ca8:	89 ce                	mov    esi,ecx
c0009caa:	29 c6                	sub    esi,eax
c0009cac:	51                   	push   ecx
c0009cad:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009cb4:	51                   	push   ecx
c0009cb5:	8d 04 82             	lea    eax,[edx+eax*4]
c0009cb8:	6a 00                	push   0x0
c0009cba:	50                   	push   eax
c0009cbb:	e8 18 6a ff ff       	call   c00006d8 <memset>
c0009cc0:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009cc3:	83 c4 10             	add    esp,0x10
c0009cc6:	31 c0                	xor    eax,eax
c0009cc8:	83 c4 1c             	add    esp,0x1c
c0009ccb:	5b                   	pop    ebx
c0009ccc:	5e                   	pop    esi
c0009ccd:	5f                   	pop    edi
c0009cce:	5d                   	pop    ebp
c0009ccf:	c3                   	ret    

c0009cd0 <sinc_multichan_vari_process>:
c0009cd0:	55                   	push   ebp
c0009cd1:	b8 05 00 00 00       	mov    eax,0x5
c0009cd6:	57                   	push   edi
c0009cd7:	56                   	push   esi
c0009cd8:	53                   	push   ebx
c0009cd9:	83 ec 3c             	sub    esp,0x3c
c0009cdc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009ce0:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ce4:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ce7:	85 db                	test   ebx,ebx
c0009ce9:	0f 84 5b 02 00 00    	je     c0009f4a <sinc_multichan_vari_process+0x27a>
c0009cef:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cf5:	0f af d0             	imul   edx,eax
c0009cf8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009cfb:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009cff:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009d06:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009d09:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009d10:	dd 06                	fld    QWORD PTR [esi]
c0009d12:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009d16:	55                   	push   ebp
c0009d17:	55                   	push   ebp
c0009d18:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d1b:	e8 dd f2 ff ff       	call   c0008ffd <is_bad_src_ratio>
c0009d20:	89 c2                	mov    edx,eax
c0009d22:	58                   	pop    eax
c0009d23:	59                   	pop    ecx
c0009d24:	b8 16 00 00 00       	mov    eax,0x16
c0009d29:	85 d2                	test   edx,edx
c0009d2b:	0f 85 19 02 00 00    	jne    c0009f4a <sinc_multichan_vari_process+0x27a>
c0009d31:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009d37:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d3a:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d3d:	dd 06                	fld    QWORD PTR [esi]
c0009d3f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d42:	d8 d1                	fcom   st(1)
c0009d44:	df e0                	fnstsw ax
c0009d46:	9e                   	sahf   
c0009d47:	76 0f                	jbe    c0009d58 <sinc_multichan_vari_process+0x88>
c0009d49:	dd d8                	fstp   st(0)
c0009d4b:	d9 e8                	fld1   
c0009d4d:	d8 d9                	fcomp  st(1)
c0009d4f:	df e0                	fnstsw ax
c0009d51:	9e                   	sahf   
c0009d52:	77 0f                	ja     c0009d63 <sinc_multichan_vari_process+0x93>
c0009d54:	dd d8                	fstp   st(0)
c0009d56:	eb 11                	jmp    c0009d69 <sinc_multichan_vari_process+0x99>
c0009d58:	dd d9                	fstp   st(1)
c0009d5a:	d9 e8                	fld1   
c0009d5c:	d8 d9                	fcomp  st(1)
c0009d5e:	df e0                	fnstsw ax
c0009d60:	9e                   	sahf   
c0009d61:	76 04                	jbe    c0009d67 <sinc_multichan_vari_process+0x97>
c0009d63:	de f9                	fdivp  st(1),st
c0009d65:	eb 02                	jmp    c0009d69 <sinc_multichan_vari_process+0x99>
c0009d67:	dd d8                	fstp   st(0)
c0009d69:	83 ec 10             	sub    esp,0x10
c0009d6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d6f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d72:	e8 e9 59 01 00       	call   c001f760 <lrint>
c0009d77:	40                   	inc    eax
c0009d78:	0f af c5             	imul   eax,ebp
c0009d7b:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d7e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d82:	dd 14 24             	fst    QWORD PTR [esp]
c0009d85:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d89:	e8 71 fd ff ff       	call   c0009aff <fmod_one>
c0009d8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d91:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d98:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d9c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009da0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009da4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009da7:	e8 b4 59 01 00       	call   c001f760 <lrint>
c0009dac:	d9 e8                	fld1   
c0009dae:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009db2:	0f af e8             	imul   ebp,eax
c0009db5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009db9:	01 e8                	add    eax,ebp
c0009dbb:	99                   	cdq    
c0009dbc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009dbf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009dc2:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c0009dc8:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dcc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009dd5:	7d 4b                	jge    c0009e22 <sinc_multichan_vari_process+0x152>
c0009dd7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dda:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009ddd:	01 c8                	add    eax,ecx
c0009ddf:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009de2:	99                   	cdq    
c0009de3:	f7 f9                	idiv   ecx
c0009de5:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009de9:	7d 09                	jge    c0009df4 <sinc_multichan_vari_process+0x124>
c0009deb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dee:	85 c0                	test   eax,eax
c0009df0:	79 57                	jns    c0009e49 <sinc_multichan_vari_process+0x179>
c0009df2:	eb 70                	jmp    c0009e64 <sinc_multichan_vari_process+0x194>
c0009df4:	51                   	push   ecx
c0009df5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009df9:	57                   	push   edi
c0009dfa:	53                   	push   ebx
c0009dfb:	e8 56 fd ff ff       	call   c0009b56 <prepare_data>
c0009e00:	83 c4 10             	add    esp,0x10
c0009e03:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009e06:	85 c0                	test   eax,eax
c0009e08:	0f 85 3c 01 00 00    	jne    c0009f4a <sinc_multichan_vari_process+0x27a>
c0009e0e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009e11:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009e14:	01 c8                	add    eax,ecx
c0009e16:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e19:	99                   	cdq    
c0009e1a:	f7 f9                	idiv   ecx
c0009e1c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e20:	7c c9                	jl     c0009deb <sinc_multichan_vari_process+0x11b>
c0009e22:	dd 04 24             	fld    QWORD PTR [esp]
c0009e25:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e28:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e2c:	dd 1e                	fstp   QWORD PTR [esi]
c0009e2e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e31:	99                   	cdq    
c0009e32:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e35:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e38:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e3b:	99                   	cdq    
c0009e3c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e3f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e42:	31 c0                	xor    eax,eax
c0009e44:	e9 01 01 00 00       	jmp    c0009f4a <sinc_multichan_vari_process+0x27a>
c0009e49:	dd 04 24             	fld    QWORD PTR [esp]
c0009e4c:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e53:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e57:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e5b:	d9 c9                	fxch   st(1)
c0009e5d:	de d9                	fcompp 
c0009e5f:	df e0                	fnstsw ax
c0009e61:	9e                   	sahf   
c0009e62:	73 be                	jae    c0009e22 <sinc_multichan_vari_process+0x152>
c0009e64:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e68:	7e 2f                	jle    c0009e99 <sinc_multichan_vari_process+0x1c9>
c0009e6a:	dd 06                	fld    QWORD PTR [esi]
c0009e6c:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e6f:	83 ec 10             	sub    esp,0x10
c0009e72:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e75:	e8 c6 58 01 00       	call   c001f740 <fabs>
c0009e7a:	83 c4 10             	add    esp,0x10
c0009e7d:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c0009e83:	df e0                	fnstsw ax
c0009e85:	9e                   	sahf   
c0009e86:	76 11                	jbe    c0009e99 <sinc_multichan_vari_process+0x1c9>
c0009e88:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e8b:	dc 26                	fsub   QWORD PTR [esi]
c0009e8d:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e90:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e93:	dc 06                	fadd   QWORD PTR [esi]
c0009e95:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e99:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e9c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009ea0:	d9 e8                	fld1   
c0009ea2:	d8 d9                	fcomp  st(1)
c0009ea4:	df e0                	fnstsw ax
c0009ea6:	9e                   	sahf   
c0009ea7:	77 04                	ja     c0009ead <sinc_multichan_vari_process+0x1dd>
c0009ea9:	dd d8                	fstp   st(0)
c0009eab:	d9 e8                	fld1   
c0009ead:	de c9                	fmulp  st(1),st
c0009eaf:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009eb3:	50                   	push   eax
c0009eb4:	50                   	push   eax
c0009eb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009eb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ebd:	e8 2a fc ff ff       	call   c0009aec <double_to_fp>
c0009ec2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ec6:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eca:	89 c5                	mov    ebp,eax
c0009ecc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ecf:	e8 18 fc ff ff       	call   c0009aec <double_to_fp>
c0009ed4:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009ed7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009eda:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009edd:	89 c1                	mov    ecx,eax
c0009edf:	52                   	push   edx
c0009ee0:	89 d8                	mov    eax,ebx
c0009ee2:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ee6:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ee9:	52                   	push   edx
c0009eea:	52                   	push   edx
c0009eeb:	89 ea                	mov    edx,ebp
c0009eed:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ef3:	e8 f9 f7 ff ff       	call   c00096f1 <calc_output_multi>
c0009ef8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009efb:	d9 e8                	fld1   
c0009efd:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009f01:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009f04:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009f08:	83 c4 10             	add    esp,0x10
c0009f0b:	dd 14 24             	fst    QWORD PTR [esp]
c0009f0e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009f12:	e8 e8 fb ff ff       	call   c0009aff <fmod_one>
c0009f17:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f1a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f21:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f25:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f29:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f2d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f30:	e8 2b 58 01 00       	call   c001f760 <lrint>
c0009f35:	0f af e8             	imul   ebp,eax
c0009f38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f3c:	01 e8                	add    eax,ebp
c0009f3e:	99                   	cdq    
c0009f3f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f45:	e9 82 fe ff ff       	jmp    c0009dcc <sinc_multichan_vari_process+0xfc>
c0009f4a:	83 c4 3c             	add    esp,0x3c
c0009f4d:	5b                   	pop    ebx
c0009f4e:	5e                   	pop    esi
c0009f4f:	5f                   	pop    edi
c0009f50:	5d                   	pop    ebp
c0009f51:	c3                   	ret    

c0009f52 <sinc_hex_vari_process>:
c0009f52:	55                   	push   ebp
c0009f53:	b8 05 00 00 00       	mov    eax,0x5
c0009f58:	57                   	push   edi
c0009f59:	56                   	push   esi
c0009f5a:	53                   	push   ebx
c0009f5b:	83 ec 3c             	sub    esp,0x3c
c0009f5e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f62:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f66:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f69:	85 db                	test   ebx,ebx
c0009f6b:	0f 84 56 02 00 00    	je     c000a1c7 <sinc_hex_vari_process+0x275>
c0009f71:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f74:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f77:	0f af d0             	imul   edx,eax
c0009f7a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f7d:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f81:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f88:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f8b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f92:	dd 06                	fld    QWORD PTR [esi]
c0009f94:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f98:	55                   	push   ebp
c0009f99:	55                   	push   ebp
c0009f9a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f9d:	e8 5b f0 ff ff       	call   c0008ffd <is_bad_src_ratio>
c0009fa2:	89 c2                	mov    edx,eax
c0009fa4:	58                   	pop    eax
c0009fa5:	59                   	pop    ecx
c0009fa6:	b8 16 00 00 00       	mov    eax,0x16
c0009fab:	85 d2                	test   edx,edx
c0009fad:	0f 85 14 02 00 00    	jne    c000a1c7 <sinc_hex_vari_process+0x275>
c0009fb3:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009fb9:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fbc:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fbf:	dd 06                	fld    QWORD PTR [esi]
c0009fc1:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fc4:	d8 d1                	fcom   st(1)
c0009fc6:	df e0                	fnstsw ax
c0009fc8:	9e                   	sahf   
c0009fc9:	76 0f                	jbe    c0009fda <sinc_hex_vari_process+0x88>
c0009fcb:	dd d8                	fstp   st(0)
c0009fcd:	d9 e8                	fld1   
c0009fcf:	d8 d9                	fcomp  st(1)
c0009fd1:	df e0                	fnstsw ax
c0009fd3:	9e                   	sahf   
c0009fd4:	77 0f                	ja     c0009fe5 <sinc_hex_vari_process+0x93>
c0009fd6:	dd d8                	fstp   st(0)
c0009fd8:	eb 11                	jmp    c0009feb <sinc_hex_vari_process+0x99>
c0009fda:	dd d9                	fstp   st(1)
c0009fdc:	d9 e8                	fld1   
c0009fde:	d8 d9                	fcomp  st(1)
c0009fe0:	df e0                	fnstsw ax
c0009fe2:	9e                   	sahf   
c0009fe3:	76 04                	jbe    c0009fe9 <sinc_hex_vari_process+0x97>
c0009fe5:	de f9                	fdivp  st(1),st
c0009fe7:	eb 02                	jmp    c0009feb <sinc_hex_vari_process+0x99>
c0009fe9:	dd d8                	fstp   st(0)
c0009feb:	83 ec 10             	sub    esp,0x10
c0009fee:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ff1:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ff4:	e8 67 57 01 00       	call   c001f760 <lrint>
c0009ff9:	40                   	inc    eax
c0009ffa:	0f af c5             	imul   eax,ebp
c0009ffd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a000:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a004:	dd 14 24             	fst    QWORD PTR [esp]
c000a007:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a00b:	e8 ef fa ff ff       	call   c0009aff <fmod_one>
c000a010:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a013:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a01a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a01e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a022:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a026:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a029:	e8 32 57 01 00       	call   c001f760 <lrint>
c000a02e:	d9 e8                	fld1   
c000a030:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a034:	0f af e8             	imul   ebp,eax
c000a037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a03b:	01 e8                	add    eax,ebp
c000a03d:	99                   	cdq    
c000a03e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a041:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a044:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a04a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a04e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a057:	7d 4b                	jge    c000a0a4 <sinc_hex_vari_process+0x152>
c000a059:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a05c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a05f:	01 c8                	add    eax,ecx
c000a061:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a064:	99                   	cdq    
c000a065:	f7 f9                	idiv   ecx
c000a067:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a06b:	7d 09                	jge    c000a076 <sinc_hex_vari_process+0x124>
c000a06d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a070:	85 c0                	test   eax,eax
c000a072:	79 57                	jns    c000a0cb <sinc_hex_vari_process+0x179>
c000a074:	eb 70                	jmp    c000a0e6 <sinc_hex_vari_process+0x194>
c000a076:	51                   	push   ecx
c000a077:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a07b:	57                   	push   edi
c000a07c:	53                   	push   ebx
c000a07d:	e8 d4 fa ff ff       	call   c0009b56 <prepare_data>
c000a082:	83 c4 10             	add    esp,0x10
c000a085:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a088:	85 c0                	test   eax,eax
c000a08a:	0f 85 37 01 00 00    	jne    c000a1c7 <sinc_hex_vari_process+0x275>
c000a090:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a093:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a096:	01 c8                	add    eax,ecx
c000a098:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a09b:	99                   	cdq    
c000a09c:	f7 f9                	idiv   ecx
c000a09e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a0a2:	7c c9                	jl     c000a06d <sinc_hex_vari_process+0x11b>
c000a0a4:	dd 04 24             	fld    QWORD PTR [esp]
c000a0a7:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a0aa:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a0ae:	dd 1e                	fstp   QWORD PTR [esi]
c000a0b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0b3:	99                   	cdq    
c000a0b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0b7:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0bd:	99                   	cdq    
c000a0be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0c1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0c4:	31 c0                	xor    eax,eax
c000a0c6:	e9 fc 00 00 00       	jmp    c000a1c7 <sinc_hex_vari_process+0x275>
c000a0cb:	dd 04 24             	fld    QWORD PTR [esp]
c000a0ce:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0d5:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0d9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0dd:	d9 c9                	fxch   st(1)
c000a0df:	de d9                	fcompp 
c000a0e1:	df e0                	fnstsw ax
c000a0e3:	9e                   	sahf   
c000a0e4:	73 be                	jae    c000a0a4 <sinc_hex_vari_process+0x152>
c000a0e6:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0ea:	7e 2f                	jle    c000a11b <sinc_hex_vari_process+0x1c9>
c000a0ec:	dd 06                	fld    QWORD PTR [esi]
c000a0ee:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0f1:	83 ec 10             	sub    esp,0x10
c000a0f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0f7:	e8 44 56 01 00       	call   c001f740 <fabs>
c000a0fc:	83 c4 10             	add    esp,0x10
c000a0ff:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a105:	df e0                	fnstsw ax
c000a107:	9e                   	sahf   
c000a108:	76 11                	jbe    c000a11b <sinc_hex_vari_process+0x1c9>
c000a10a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a10d:	dc 26                	fsub   QWORD PTR [esi]
c000a10f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a112:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a115:	dc 06                	fadd   QWORD PTR [esi]
c000a117:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a11b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a11e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a122:	d9 e8                	fld1   
c000a124:	d8 d9                	fcomp  st(1)
c000a126:	df e0                	fnstsw ax
c000a128:	9e                   	sahf   
c000a129:	77 04                	ja     c000a12f <sinc_hex_vari_process+0x1dd>
c000a12b:	dd d8                	fstp   st(0)
c000a12d:	d9 e8                	fld1   
c000a12f:	de c9                	fmulp  st(1),st
c000a131:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a135:	50                   	push   eax
c000a136:	50                   	push   eax
c000a137:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a13b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a13f:	e8 a8 f9 ff ff       	call   c0009aec <double_to_fp>
c000a144:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a148:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a14c:	89 c5                	mov    ebp,eax
c000a14e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a151:	e8 96 f9 ff ff       	call   c0009aec <double_to_fp>
c000a156:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a159:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a15c:	83 c4 0c             	add    esp,0xc
c000a15f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a162:	89 c1                	mov    ecx,eax
c000a164:	52                   	push   edx
c000a165:	89 d8                	mov    eax,ebx
c000a167:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a16b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a16e:	52                   	push   edx
c000a16f:	52                   	push   edx
c000a170:	89 ea                	mov    edx,ebp
c000a172:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a175:	e8 db f2 ff ff       	call   c0009455 <calc_output_hex>
c000a17a:	d9 e8                	fld1   
c000a17c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a180:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a184:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a188:	dd 14 24             	fst    QWORD PTR [esp]
c000a18b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a18f:	e8 6b f9 ff ff       	call   c0009aff <fmod_one>
c000a194:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a197:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a19a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a19e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1a2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a1a6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1aa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1ad:	e8 ae 55 01 00       	call   c001f760 <lrint>
c000a1b2:	0f af e8             	imul   ebp,eax
c000a1b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1b9:	01 e8                	add    eax,ebp
c000a1bb:	99                   	cdq    
c000a1bc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1bf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1c2:	e9 87 fe ff ff       	jmp    c000a04e <sinc_hex_vari_process+0xfc>
c000a1c7:	83 c4 3c             	add    esp,0x3c
c000a1ca:	5b                   	pop    ebx
c000a1cb:	5e                   	pop    esi
c000a1cc:	5f                   	pop    edi
c000a1cd:	5d                   	pop    ebp
c000a1ce:	c3                   	ret    

c000a1cf <sinc_quad_vari_process>:
c000a1cf:	55                   	push   ebp
c000a1d0:	b8 05 00 00 00       	mov    eax,0x5
c000a1d5:	57                   	push   edi
c000a1d6:	56                   	push   esi
c000a1d7:	53                   	push   ebx
c000a1d8:	83 ec 3c             	sub    esp,0x3c
c000a1db:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1df:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1e3:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1e6:	85 db                	test   ebx,ebx
c000a1e8:	0f 84 56 02 00 00    	je     c000a444 <sinc_quad_vari_process+0x275>
c000a1ee:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1f1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1f4:	0f af d0             	imul   edx,eax
c000a1f7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1fa:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1fe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a205:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a208:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a20f:	dd 06                	fld    QWORD PTR [esi]
c000a211:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a215:	55                   	push   ebp
c000a216:	55                   	push   ebp
c000a217:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a21a:	e8 de ed ff ff       	call   c0008ffd <is_bad_src_ratio>
c000a21f:	89 c2                	mov    edx,eax
c000a221:	58                   	pop    eax
c000a222:	59                   	pop    ecx
c000a223:	b8 16 00 00 00       	mov    eax,0x16
c000a228:	85 d2                	test   edx,edx
c000a22a:	0f 85 14 02 00 00    	jne    c000a444 <sinc_quad_vari_process+0x275>
c000a230:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a236:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a239:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a23c:	dd 06                	fld    QWORD PTR [esi]
c000a23e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a241:	d8 d1                	fcom   st(1)
c000a243:	df e0                	fnstsw ax
c000a245:	9e                   	sahf   
c000a246:	76 0f                	jbe    c000a257 <sinc_quad_vari_process+0x88>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	d9 e8                	fld1   
c000a24c:	d8 d9                	fcomp  st(1)
c000a24e:	df e0                	fnstsw ax
c000a250:	9e                   	sahf   
c000a251:	77 0f                	ja     c000a262 <sinc_quad_vari_process+0x93>
c000a253:	dd d8                	fstp   st(0)
c000a255:	eb 11                	jmp    c000a268 <sinc_quad_vari_process+0x99>
c000a257:	dd d9                	fstp   st(1)
c000a259:	d9 e8                	fld1   
c000a25b:	d8 d9                	fcomp  st(1)
c000a25d:	df e0                	fnstsw ax
c000a25f:	9e                   	sahf   
c000a260:	76 04                	jbe    c000a266 <sinc_quad_vari_process+0x97>
c000a262:	de f9                	fdivp  st(1),st
c000a264:	eb 02                	jmp    c000a268 <sinc_quad_vari_process+0x99>
c000a266:	dd d8                	fstp   st(0)
c000a268:	83 ec 10             	sub    esp,0x10
c000a26b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a26e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a271:	e8 ea 54 01 00       	call   c001f760 <lrint>
c000a276:	40                   	inc    eax
c000a277:	0f af c5             	imul   eax,ebp
c000a27a:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a27d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a281:	dd 14 24             	fst    QWORD PTR [esp]
c000a284:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a288:	e8 72 f8 ff ff       	call   c0009aff <fmod_one>
c000a28d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a290:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a293:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a297:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a29b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a29f:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a2a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2a6:	e8 b5 54 01 00       	call   c001f760 <lrint>
c000a2ab:	d9 e8                	fld1   
c000a2ad:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2b1:	0f af e8             	imul   ebp,eax
c000a2b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2b8:	01 e8                	add    eax,ebp
c000a2ba:	99                   	cdq    
c000a2bb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2be:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2c1:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a2c7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2ce:	83 c4 10             	add    esp,0x10
c000a2d1:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2d4:	7d 4b                	jge    c000a321 <sinc_quad_vari_process+0x152>
c000a2d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2dc:	01 c8                	add    eax,ecx
c000a2de:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2e1:	99                   	cdq    
c000a2e2:	f7 f9                	idiv   ecx
c000a2e4:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2e8:	7d 09                	jge    c000a2f3 <sinc_quad_vari_process+0x124>
c000a2ea:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2ed:	85 c0                	test   eax,eax
c000a2ef:	79 57                	jns    c000a348 <sinc_quad_vari_process+0x179>
c000a2f1:	eb 70                	jmp    c000a363 <sinc_quad_vari_process+0x194>
c000a2f3:	51                   	push   ecx
c000a2f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2f8:	57                   	push   edi
c000a2f9:	53                   	push   ebx
c000a2fa:	e8 57 f8 ff ff       	call   c0009b56 <prepare_data>
c000a2ff:	83 c4 10             	add    esp,0x10
c000a302:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a305:	85 c0                	test   eax,eax
c000a307:	0f 85 37 01 00 00    	jne    c000a444 <sinc_quad_vari_process+0x275>
c000a30d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a310:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a313:	01 c8                	add    eax,ecx
c000a315:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a318:	99                   	cdq    
c000a319:	f7 f9                	idiv   ecx
c000a31b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a31f:	7c c9                	jl     c000a2ea <sinc_quad_vari_process+0x11b>
c000a321:	dd 04 24             	fld    QWORD PTR [esp]
c000a324:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a327:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a32b:	dd 1e                	fstp   QWORD PTR [esi]
c000a32d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a330:	99                   	cdq    
c000a331:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a334:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a337:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a33a:	99                   	cdq    
c000a33b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a33e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a341:	31 c0                	xor    eax,eax
c000a343:	e9 fc 00 00 00       	jmp    c000a444 <sinc_quad_vari_process+0x275>
c000a348:	dd 04 24             	fld    QWORD PTR [esp]
c000a34b:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a34e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a352:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a356:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a35a:	d9 c9                	fxch   st(1)
c000a35c:	de d9                	fcompp 
c000a35e:	df e0                	fnstsw ax
c000a360:	9e                   	sahf   
c000a361:	73 be                	jae    c000a321 <sinc_quad_vari_process+0x152>
c000a363:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a367:	7e 2f                	jle    c000a398 <sinc_quad_vari_process+0x1c9>
c000a369:	dd 06                	fld    QWORD PTR [esi]
c000a36b:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a36e:	83 ec 10             	sub    esp,0x10
c000a371:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a374:	e8 c7 53 01 00       	call   c001f740 <fabs>
c000a379:	83 c4 10             	add    esp,0x10
c000a37c:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a382:	df e0                	fnstsw ax
c000a384:	9e                   	sahf   
c000a385:	76 11                	jbe    c000a398 <sinc_quad_vari_process+0x1c9>
c000a387:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a38a:	dc 26                	fsub   QWORD PTR [esi]
c000a38c:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a38f:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a392:	dc 06                	fadd   QWORD PTR [esi]
c000a394:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a398:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a39b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a39f:	d9 e8                	fld1   
c000a3a1:	d8 d9                	fcomp  st(1)
c000a3a3:	df e0                	fnstsw ax
c000a3a5:	9e                   	sahf   
c000a3a6:	77 04                	ja     c000a3ac <sinc_quad_vari_process+0x1dd>
c000a3a8:	dd d8                	fstp   st(0)
c000a3aa:	d9 e8                	fld1   
c000a3ac:	de c9                	fmulp  st(1),st
c000a3ae:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3b2:	50                   	push   eax
c000a3b3:	50                   	push   eax
c000a3b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3bc:	e8 2b f7 ff ff       	call   c0009aec <double_to_fp>
c000a3c1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3c5:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3c9:	89 c5                	mov    ebp,eax
c000a3cb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3ce:	e8 19 f7 ff ff       	call   c0009aec <double_to_fp>
c000a3d3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3d6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3d9:	83 c4 0c             	add    esp,0xc
c000a3dc:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3df:	89 c1                	mov    ecx,eax
c000a3e1:	52                   	push   edx
c000a3e2:	89 d8                	mov    eax,ebx
c000a3e4:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3e8:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3eb:	52                   	push   edx
c000a3ec:	52                   	push   edx
c000a3ed:	89 ea                	mov    edx,ebp
c000a3ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f2:	e8 99 ee ff ff       	call   c0009290 <calc_output_quad>
c000a3f7:	d9 e8                	fld1   
c000a3f9:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3fd:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a401:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a405:	dd 14 24             	fst    QWORD PTR [esp]
c000a408:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a40c:	e8 ee f6 ff ff       	call   c0009aff <fmod_one>
c000a411:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a414:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a417:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a41b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a41f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a423:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a427:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a42a:	e8 31 53 01 00       	call   c001f760 <lrint>
c000a42f:	0f af e8             	imul   ebp,eax
c000a432:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a436:	01 e8                	add    eax,ebp
c000a438:	99                   	cdq    
c000a439:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a43c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a43f:	e9 87 fe ff ff       	jmp    c000a2cb <sinc_quad_vari_process+0xfc>
c000a444:	83 c4 3c             	add    esp,0x3c
c000a447:	5b                   	pop    ebx
c000a448:	5e                   	pop    esi
c000a449:	5f                   	pop    edi
c000a44a:	5d                   	pop    ebp
c000a44b:	c3                   	ret    

c000a44c <sinc_stereo_vari_process>:
c000a44c:	55                   	push   ebp
c000a44d:	b8 05 00 00 00       	mov    eax,0x5
c000a452:	57                   	push   edi
c000a453:	56                   	push   esi
c000a454:	53                   	push   ebx
c000a455:	83 ec 3c             	sub    esp,0x3c
c000a458:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a45c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a460:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a463:	85 db                	test   ebx,ebx
c000a465:	0f 84 56 02 00 00    	je     c000a6c1 <sinc_stereo_vari_process+0x275>
c000a46b:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a46e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a471:	0f af d0             	imul   edx,eax
c000a474:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a477:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a47b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a482:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a485:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a48c:	dd 06                	fld    QWORD PTR [esi]
c000a48e:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a492:	55                   	push   ebp
c000a493:	55                   	push   ebp
c000a494:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a497:	e8 61 eb ff ff       	call   c0008ffd <is_bad_src_ratio>
c000a49c:	89 c2                	mov    edx,eax
c000a49e:	58                   	pop    eax
c000a49f:	59                   	pop    ecx
c000a4a0:	b8 16 00 00 00       	mov    eax,0x16
c000a4a5:	85 d2                	test   edx,edx
c000a4a7:	0f 85 14 02 00 00    	jne    c000a6c1 <sinc_stereo_vari_process+0x275>
c000a4ad:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a4b3:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4b6:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4b9:	dd 06                	fld    QWORD PTR [esi]
c000a4bb:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4be:	d8 d1                	fcom   st(1)
c000a4c0:	df e0                	fnstsw ax
c000a4c2:	9e                   	sahf   
c000a4c3:	76 0f                	jbe    c000a4d4 <sinc_stereo_vari_process+0x88>
c000a4c5:	dd d8                	fstp   st(0)
c000a4c7:	d9 e8                	fld1   
c000a4c9:	d8 d9                	fcomp  st(1)
c000a4cb:	df e0                	fnstsw ax
c000a4cd:	9e                   	sahf   
c000a4ce:	77 0f                	ja     c000a4df <sinc_stereo_vari_process+0x93>
c000a4d0:	dd d8                	fstp   st(0)
c000a4d2:	eb 11                	jmp    c000a4e5 <sinc_stereo_vari_process+0x99>
c000a4d4:	dd d9                	fstp   st(1)
c000a4d6:	d9 e8                	fld1   
c000a4d8:	d8 d9                	fcomp  st(1)
c000a4da:	df e0                	fnstsw ax
c000a4dc:	9e                   	sahf   
c000a4dd:	76 04                	jbe    c000a4e3 <sinc_stereo_vari_process+0x97>
c000a4df:	de f9                	fdivp  st(1),st
c000a4e1:	eb 02                	jmp    c000a4e5 <sinc_stereo_vari_process+0x99>
c000a4e3:	dd d8                	fstp   st(0)
c000a4e5:	83 ec 10             	sub    esp,0x10
c000a4e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4eb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4ee:	e8 6d 52 01 00       	call   c001f760 <lrint>
c000a4f3:	40                   	inc    eax
c000a4f4:	0f af c5             	imul   eax,ebp
c000a4f7:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4fa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4fe:	dd 14 24             	fst    QWORD PTR [esp]
c000a501:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a505:	e8 f5 f5 ff ff       	call   c0009aff <fmod_one>
c000a50a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a50d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a514:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a518:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a51c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a520:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a523:	e8 38 52 01 00       	call   c001f760 <lrint>
c000a528:	d9 e8                	fld1   
c000a52a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a52e:	0f af e8             	imul   ebp,eax
c000a531:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a535:	01 e8                	add    eax,ebp
c000a537:	99                   	cdq    
c000a538:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a53b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a53e:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a544:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a548:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a551:	7d 4b                	jge    c000a59e <sinc_stereo_vari_process+0x152>
c000a553:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a556:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a559:	01 c8                	add    eax,ecx
c000a55b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a55e:	99                   	cdq    
c000a55f:	f7 f9                	idiv   ecx
c000a561:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a565:	7d 09                	jge    c000a570 <sinc_stereo_vari_process+0x124>
c000a567:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a56a:	85 c0                	test   eax,eax
c000a56c:	79 57                	jns    c000a5c5 <sinc_stereo_vari_process+0x179>
c000a56e:	eb 70                	jmp    c000a5e0 <sinc_stereo_vari_process+0x194>
c000a570:	51                   	push   ecx
c000a571:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a575:	57                   	push   edi
c000a576:	53                   	push   ebx
c000a577:	e8 da f5 ff ff       	call   c0009b56 <prepare_data>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a582:	85 c0                	test   eax,eax
c000a584:	0f 85 37 01 00 00    	jne    c000a6c1 <sinc_stereo_vari_process+0x275>
c000a58a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a58d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a590:	01 c8                	add    eax,ecx
c000a592:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a595:	99                   	cdq    
c000a596:	f7 f9                	idiv   ecx
c000a598:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a59c:	7c c9                	jl     c000a567 <sinc_stereo_vari_process+0x11b>
c000a59e:	dd 04 24             	fld    QWORD PTR [esp]
c000a5a1:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a5a4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5a8:	dd 1e                	fstp   QWORD PTR [esi]
c000a5aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5ad:	99                   	cdq    
c000a5ae:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5b1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5b7:	99                   	cdq    
c000a5b8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5bb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5be:	31 c0                	xor    eax,eax
c000a5c0:	e9 fc 00 00 00       	jmp    c000a6c1 <sinc_stereo_vari_process+0x275>
c000a5c5:	dd 04 24             	fld    QWORD PTR [esp]
c000a5c8:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5cf:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5d3:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5d7:	d9 c9                	fxch   st(1)
c000a5d9:	de d9                	fcompp 
c000a5db:	df e0                	fnstsw ax
c000a5dd:	9e                   	sahf   
c000a5de:	73 be                	jae    c000a59e <sinc_stereo_vari_process+0x152>
c000a5e0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5e4:	7e 2f                	jle    c000a615 <sinc_stereo_vari_process+0x1c9>
c000a5e6:	dd 06                	fld    QWORD PTR [esi]
c000a5e8:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5eb:	83 ec 10             	sub    esp,0x10
c000a5ee:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5f1:	e8 4a 51 01 00       	call   c001f740 <fabs>
c000a5f6:	83 c4 10             	add    esp,0x10
c000a5f9:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a5ff:	df e0                	fnstsw ax
c000a601:	9e                   	sahf   
c000a602:	76 11                	jbe    c000a615 <sinc_stereo_vari_process+0x1c9>
c000a604:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a607:	dc 26                	fsub   QWORD PTR [esi]
c000a609:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a60c:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a60f:	dc 06                	fadd   QWORD PTR [esi]
c000a611:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a615:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a618:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a61c:	d9 e8                	fld1   
c000a61e:	d8 d9                	fcomp  st(1)
c000a620:	df e0                	fnstsw ax
c000a622:	9e                   	sahf   
c000a623:	77 04                	ja     c000a629 <sinc_stereo_vari_process+0x1dd>
c000a625:	dd d8                	fstp   st(0)
c000a627:	d9 e8                	fld1   
c000a629:	de c9                	fmulp  st(1),st
c000a62b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a62f:	50                   	push   eax
c000a630:	50                   	push   eax
c000a631:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a635:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a639:	e8 ae f4 ff ff       	call   c0009aec <double_to_fp>
c000a63e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a642:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a646:	89 c5                	mov    ebp,eax
c000a648:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a64b:	e8 9c f4 ff ff       	call   c0009aec <double_to_fp>
c000a650:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a653:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a656:	83 c4 0c             	add    esp,0xc
c000a659:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a65c:	89 c1                	mov    ecx,eax
c000a65e:	52                   	push   edx
c000a65f:	89 d8                	mov    eax,ebx
c000a661:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a665:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a668:	52                   	push   edx
c000a669:	52                   	push   edx
c000a66a:	89 ea                	mov    edx,ebp
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 da ea ff ff       	call   c000914e <calc_output_stereo>
c000a674:	d9 e8                	fld1   
c000a676:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a67a:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a67e:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a682:	dd 14 24             	fst    QWORD PTR [esp]
c000a685:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a689:	e8 71 f4 ff ff       	call   c0009aff <fmod_one>
c000a68e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a691:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a694:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a698:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a69c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a6a0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6a4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6a7:	e8 b4 50 01 00       	call   c001f760 <lrint>
c000a6ac:	0f af e8             	imul   ebp,eax
c000a6af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6b3:	01 e8                	add    eax,ebp
c000a6b5:	99                   	cdq    
c000a6b6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6b9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6bc:	e9 87 fe ff ff       	jmp    c000a548 <sinc_stereo_vari_process+0xfc>
c000a6c1:	83 c4 3c             	add    esp,0x3c
c000a6c4:	5b                   	pop    ebx
c000a6c5:	5e                   	pop    esi
c000a6c6:	5f                   	pop    edi
c000a6c7:	5d                   	pop    ebp
c000a6c8:	c3                   	ret    

c000a6c9 <sinc_mono_vari_process>:
c000a6c9:	55                   	push   ebp
c000a6ca:	b8 05 00 00 00       	mov    eax,0x5
c000a6cf:	57                   	push   edi
c000a6d0:	56                   	push   esi
c000a6d1:	53                   	push   ebx
c000a6d2:	83 ec 3c             	sub    esp,0x3c
c000a6d5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6d9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6dd:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6e0:	85 db                	test   ebx,ebx
c000a6e2:	0f 84 55 02 00 00    	je     c000a93d <sinc_mono_vari_process+0x274>
c000a6e8:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6eb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6ee:	0f af d0             	imul   edx,eax
c000a6f1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6f4:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6f8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6ff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a702:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a709:	dd 06                	fld    QWORD PTR [esi]
c000a70b:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a70f:	51                   	push   ecx
c000a710:	51                   	push   ecx
c000a711:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a714:	e8 e4 e8 ff ff       	call   c0008ffd <is_bad_src_ratio>
c000a719:	5d                   	pop    ebp
c000a71a:	89 c2                	mov    edx,eax
c000a71c:	58                   	pop    eax
c000a71d:	85 d2                	test   edx,edx
c000a71f:	b8 16 00 00 00       	mov    eax,0x16
c000a724:	0f 85 13 02 00 00    	jne    c000a93d <sinc_mono_vari_process+0x274>
c000a72a:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a730:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a733:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a736:	dd 06                	fld    QWORD PTR [esi]
c000a738:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a73b:	d8 d1                	fcom   st(1)
c000a73d:	df e0                	fnstsw ax
c000a73f:	9e                   	sahf   
c000a740:	76 0f                	jbe    c000a751 <sinc_mono_vari_process+0x88>
c000a742:	dd d8                	fstp   st(0)
c000a744:	d9 e8                	fld1   
c000a746:	d8 d9                	fcomp  st(1)
c000a748:	df e0                	fnstsw ax
c000a74a:	9e                   	sahf   
c000a74b:	77 0f                	ja     c000a75c <sinc_mono_vari_process+0x93>
c000a74d:	dd d8                	fstp   st(0)
c000a74f:	eb 11                	jmp    c000a762 <sinc_mono_vari_process+0x99>
c000a751:	dd d9                	fstp   st(1)
c000a753:	d9 e8                	fld1   
c000a755:	d8 d9                	fcomp  st(1)
c000a757:	df e0                	fnstsw ax
c000a759:	9e                   	sahf   
c000a75a:	76 04                	jbe    c000a760 <sinc_mono_vari_process+0x97>
c000a75c:	de f9                	fdivp  st(1),st
c000a75e:	eb 02                	jmp    c000a762 <sinc_mono_vari_process+0x99>
c000a760:	dd d8                	fstp   st(0)
c000a762:	83 ec 10             	sub    esp,0x10
c000a765:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a768:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a76b:	e8 f0 4f 01 00       	call   c001f760 <lrint>
c000a770:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a773:	40                   	inc    eax
c000a774:	dd 14 24             	fst    QWORD PTR [esp]
c000a777:	0f af e8             	imul   ebp,eax
c000a77a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a77e:	e8 7c f3 ff ff       	call   c0009aff <fmod_one>
c000a783:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a786:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a78a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a78d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a791:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a795:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a799:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a79d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7a0:	e8 bb 4f 01 00       	call   c001f760 <lrint>
c000a7a5:	d9 e8                	fld1   
c000a7a7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7ab:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a7b0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a7b4:	99                   	cdq    
c000a7b5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7b8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7bb:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a7c1:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7c8:	83 c4 10             	add    esp,0x10
c000a7cb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7ce:	7d 44                	jge    c000a814 <sinc_mono_vari_process+0x14b>
c000a7d0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7d3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7d6:	01 c8                	add    eax,ecx
c000a7d8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7db:	99                   	cdq    
c000a7dc:	f7 f9                	idiv   ecx
c000a7de:	39 d5                	cmp    ebp,edx
c000a7e0:	7d 09                	jge    c000a7eb <sinc_mono_vari_process+0x122>
c000a7e2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7e5:	85 c0                	test   eax,eax
c000a7e7:	79 52                	jns    c000a83b <sinc_mono_vari_process+0x172>
c000a7e9:	eb 6b                	jmp    c000a856 <sinc_mono_vari_process+0x18d>
c000a7eb:	52                   	push   edx
c000a7ec:	55                   	push   ebp
c000a7ed:	57                   	push   edi
c000a7ee:	53                   	push   ebx
c000a7ef:	e8 62 f3 ff ff       	call   c0009b56 <prepare_data>
c000a7f4:	83 c4 10             	add    esp,0x10
c000a7f7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7fa:	85 c0                	test   eax,eax
c000a7fc:	0f 85 3b 01 00 00    	jne    c000a93d <sinc_mono_vari_process+0x274>
c000a802:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a805:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a808:	01 c8                	add    eax,ecx
c000a80a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a80d:	99                   	cdq    
c000a80e:	f7 f9                	idiv   ecx
c000a810:	39 d5                	cmp    ebp,edx
c000a812:	7c ce                	jl     c000a7e2 <sinc_mono_vari_process+0x119>
c000a814:	dd 04 24             	fld    QWORD PTR [esp]
c000a817:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a81a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a81e:	dd 1e                	fstp   QWORD PTR [esi]
c000a820:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a823:	99                   	cdq    
c000a824:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a827:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a82a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a82d:	99                   	cdq    
c000a82e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a831:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a834:	31 c0                	xor    eax,eax
c000a836:	e9 02 01 00 00       	jmp    c000a93d <sinc_mono_vari_process+0x274>
c000a83b:	dd 04 24             	fld    QWORD PTR [esp]
c000a83e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a841:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a845:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a849:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a84d:	d9 c9                	fxch   st(1)
c000a84f:	de d9                	fcompp 
c000a851:	df e0                	fnstsw ax
c000a853:	9e                   	sahf   
c000a854:	77 be                	ja     c000a814 <sinc_mono_vari_process+0x14b>
c000a856:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a85a:	7e 2f                	jle    c000a88b <sinc_mono_vari_process+0x1c2>
c000a85c:	dd 06                	fld    QWORD PTR [esi]
c000a85e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a861:	83 ec 10             	sub    esp,0x10
c000a864:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a867:	e8 d4 4e 01 00       	call   c001f740 <fabs>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a875:	df e0                	fnstsw ax
c000a877:	9e                   	sahf   
c000a878:	76 11                	jbe    c000a88b <sinc_mono_vari_process+0x1c2>
c000a87a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a87d:	dc 26                	fsub   QWORD PTR [esi]
c000a87f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a882:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a885:	dc 06                	fadd   QWORD PTR [esi]
c000a887:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a88b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a88e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a892:	d9 e8                	fld1   
c000a894:	d8 d9                	fcomp  st(1)
c000a896:	df e0                	fnstsw ax
c000a898:	9e                   	sahf   
c000a899:	77 04                	ja     c000a89f <sinc_mono_vari_process+0x1d6>
c000a89b:	dd d8                	fstp   st(0)
c000a89d:	d9 e8                	fld1   
c000a89f:	de c9                	fmulp  st(1),st
c000a8a1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8a5:	50                   	push   eax
c000a8a6:	50                   	push   eax
c000a8a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8af:	e8 38 f2 ff ff       	call   c0009aec <double_to_fp>
c000a8b4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8b8:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8bc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8c0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8c3:	e8 24 f2 ff ff       	call   c0009aec <double_to_fp>
c000a8c8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8cc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8d0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8d3:	89 c1                	mov    ecx,eax
c000a8d5:	89 d8                	mov    eax,ebx
c000a8d7:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8db:	e8 89 e7 ff ff       	call   c0009069 <calc_output_single>
c000a8e0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8e3:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8e7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8ea:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8ed:	d9 e8                	fld1   
c000a8ef:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8f3:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8f6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8fa:	dd 14 24             	fst    QWORD PTR [esp]
c000a8fd:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a901:	e8 f9 f1 ff ff       	call   c0009aff <fmod_one>
c000a906:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a909:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a90d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a910:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a914:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a918:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a91c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a920:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a923:	e8 38 4e 01 00       	call   c001f760 <lrint>
c000a928:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a92d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a931:	99                   	cdq    
c000a932:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a935:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a938:	e9 88 fe ff ff       	jmp    c000a7c5 <sinc_mono_vari_process+0xfc>
c000a93d:	83 c4 3c             	add    esp,0x3c
c000a940:	5b                   	pop    ebx
c000a941:	5e                   	pop    esi
c000a942:	5f                   	pop    edi
c000a943:	5d                   	pop    ebp
c000a944:	c3                   	ret    

c000a945 <sinc_get_name>:
c000a945:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a949:	31 c0                	xor    eax,eax
c000a94b:	83 fa 02             	cmp    edx,0x2
c000a94e:	77 07                	ja     c000a957 <sinc_get_name+0x12>
c000a950:	8b 04 95 60 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0a0]
c000a957:	c3                   	ret    

c000a958 <sinc_get_description>:
c000a958:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a95c:	31 c0                	xor    eax,eax
c000a95e:	83 fa 02             	cmp    edx,0x2
c000a961:	77 07                	ja     c000a96a <sinc_get_description+0x12>
c000a963:	8b 04 95 54 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0ac]
c000a96a:	c3                   	ret    

c000a96b <sinc_set_converter>:
c000a96b:	53                   	push   ebx
c000a96c:	81 ec 58 08 00 00    	sub    esp,0x858
c000a972:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a979:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a97c:	85 c0                	test   eax,eax
c000a97e:	74 13                	je     c000a993 <sinc_set_converter+0x28>
c000a980:	83 ec 0c             	sub    esp,0xc
c000a983:	50                   	push   eax
c000a984:	e8 7e 16 00 00       	call   c000c007 <free>
c000a989:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a990:	83 c4 10             	add    esp,0x10
c000a993:	50                   	push   eax
c000a994:	68 44 08 00 00       	push   0x844
c000a999:	6a 00                	push   0x0
c000a99b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a99f:	50                   	push   eax
c000a9a0:	e8 33 5d ff ff       	call   c00006d8 <memset>
c000a9a5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a9a8:	83 c4 10             	add    esp,0x10
c000a9ab:	b8 0b 00 00 00       	mov    eax,0xb
c000a9b0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a9b6:	7f 6e                	jg     c000aa26 <sinc_set_converter+0xbb>
c000a9b8:	83 fa 01             	cmp    edx,0x1
c000a9bb:	75 10                	jne    c000a9cd <sinc_set_converter+0x62>
c000a9bd:	c7 43 24 c9 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6c9
c000a9c4:	c7 43 20 c9 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6c9
c000a9cb:	eb 4d                	jmp    c000aa1a <sinc_set_converter+0xaf>
c000a9cd:	83 fa 02             	cmp    edx,0x2
c000a9d0:	75 10                	jne    c000a9e2 <sinc_set_converter+0x77>
c000a9d2:	c7 43 24 4c a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a44c
c000a9d9:	c7 43 20 4c a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a44c
c000a9e0:	eb 38                	jmp    c000aa1a <sinc_set_converter+0xaf>
c000a9e2:	83 fa 04             	cmp    edx,0x4
c000a9e5:	75 10                	jne    c000a9f7 <sinc_set_converter+0x8c>
c000a9e7:	c7 43 24 cf a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1cf
c000a9ee:	c7 43 20 cf a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1cf
c000a9f5:	eb 23                	jmp    c000aa1a <sinc_set_converter+0xaf>
c000a9f7:	83 fa 06             	cmp    edx,0x6
c000a9fa:	75 10                	jne    c000aa0c <sinc_set_converter+0xa1>
c000a9fc:	c7 43 24 52 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f52
c000aa03:	c7 43 20 52 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f52
c000aa0a:	eb 0e                	jmp    c000aa1a <sinc_set_converter+0xaf>
c000aa0c:	c7 43 24 d0 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cd0
c000aa13:	c7 43 20 d0 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cd0
c000aa1a:	c7 43 28 8e 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000968e
c000aa21:	b8 0a 00 00 00       	mov    eax,0xa
c000aa26:	81 c4 58 08 00 00    	add    esp,0x858
c000aa2c:	5b                   	pop    ebx
c000aa2d:	c3                   	ret    

c000aa2e <is_bad_src_ratio>:
c000aa2e:	83 ec 0c             	sub    esp,0xc
c000aa31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa35:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa40:	dd 04 24             	fld    QWORD PTR [esp]
c000aa43:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c000aa49:	de d9                	fcompp 
c000aa4b:	df e0                	fnstsw ax
c000aa4d:	f6 c4 45             	test   ah,0x45
c000aa50:	74 10                	je     c000aa62 <is_bad_src_ratio+0x34>
c000aa52:	dd 04 24             	fld    QWORD PTR [esp]
c000aa55:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000aa5b:	df e0                	fnstsw ax
c000aa5d:	f6 c4 45             	test   ah,0x45
c000aa60:	75 07                	jne    c000aa69 <is_bad_src_ratio+0x3b>
c000aa62:	b8 01 00 00 00       	mov    eax,0x1
c000aa67:	eb 05                	jmp    c000aa6e <is_bad_src_ratio+0x40>
c000aa69:	b8 00 00 00 00       	mov    eax,0x0
c000aa6e:	83 c4 0c             	add    esp,0xc
c000aa71:	c3                   	ret    

c000aa72 <fmod_one>:
c000aa72:	83 ec 2c             	sub    esp,0x2c
c000aa75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa85:	83 ec 08             	sub    esp,0x8
c000aa88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa90:	e8 cb 4c 01 00       	call   c001f760 <lrint>
c000aa95:	83 c4 10             	add    esp,0x10
c000aa98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa9c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aaa0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aaa4:	de e1                	fsubrp st(1),st
c000aaa6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaaa:	d9 ee                	fldz   
c000aaac:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aab0:	df e0                	fnstsw ax
c000aab2:	f6 c4 45             	test   ah,0x45
c000aab5:	75 0a                	jne    c000aac1 <fmod_one+0x4f>
c000aab7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aabb:	d9 e8                	fld1   
c000aabd:	de c1                	faddp  st(1),st
c000aabf:	eb 04                	jmp    c000aac5 <fmod_one+0x53>
c000aac1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aac5:	83 c4 2c             	add    esp,0x2c
c000aac8:	c3                   	ret    

c000aac9 <zoh_vari_process>:
c000aac9:	55                   	push   ebp
c000aaca:	57                   	push   edi
c000aacb:	56                   	push   esi
c000aacc:	53                   	push   ebx
c000aacd:	83 ec 2c             	sub    esp,0x2c
c000aad0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aad4:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aad8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aae0:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aae4:	0f 8e 30 02 00 00    	jle    c000ad1a <zoh_vari_process+0x251>
c000aaea:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aaed:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aaf5:	85 db                	test   ebx,ebx
c000aaf7:	0f 84 1d 02 00 00    	je     c000ad1a <zoh_vari_process+0x251>
c000aafd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab00:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ab04:	74 19                	je     c000ab1f <zoh_vari_process+0x56>
c000ab06:	31 d2                	xor    edx,edx
c000ab08:	39 c2                	cmp    edx,eax
c000ab0a:	7d 0c                	jge    c000ab18 <zoh_vari_process+0x4f>
c000ab0c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ab0e:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ab11:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ab15:	42                   	inc    edx
c000ab16:	eb f0                	jmp    c000ab08 <zoh_vari_process+0x3f>
c000ab18:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab1f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab22:	0f af d0             	imul   edx,eax
c000ab25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab28:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab2c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab33:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab36:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab3d:	dd 07                	fld    QWORD PTR [edi]
c000ab3f:	dd 14 24             	fst    QWORD PTR [esp]
c000ab42:	50                   	push   eax
c000ab43:	50                   	push   eax
c000ab44:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab47:	e8 e2 fe ff ff       	call   c000aa2e <is_bad_src_ratio>
c000ab4c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab50:	5a                   	pop    edx
c000ab51:	59                   	pop    ecx
c000ab52:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab57:	0f 85 b5 01 00 00    	jne    c000ad12 <zoh_vari_process+0x249>
c000ab5d:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab60:	d9 e8                	fld1   
c000ab62:	d8 d1                	fcom   st(1)
c000ab64:	df e0                	fnstsw ax
c000ab66:	9e                   	sahf   
c000ab67:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab6b:	0f 86 83 00 00 00    	jbe    c000abf4 <zoh_vari_process+0x12b>
c000ab71:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab74:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab77:	7d 7b                	jge    c000abf4 <zoh_vari_process+0x12b>
c000ab79:	d9 c0                	fld    st(0)
c000ab7b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab7e:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab81:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab84:	df e0                	fnstsw ax
c000ab86:	9e                   	sahf   
c000ab87:	73 6b                	jae    c000abf4 <zoh_vari_process+0x12b>
c000ab89:	85 d2                	test   edx,edx
c000ab8b:	7e 36                	jle    c000abc3 <zoh_vari_process+0xfa>
c000ab8d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab91:	dd 07                	fld    QWORD PTR [edi]
c000ab93:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab96:	83 ec 10             	sub    esp,0x10
c000ab99:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab9c:	e8 9f 4b 01 00       	call   c001f740 <fabs>
c000aba1:	83 c4 10             	add    esp,0x10
c000aba4:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000abaa:	df e0                	fnstsw ax
c000abac:	9e                   	sahf   
c000abad:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abb1:	76 10                	jbe    c000abc3 <zoh_vari_process+0xfa>
c000abb3:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abb6:	dc 27                	fsub   QWORD PTR [edi]
c000abb8:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abbb:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abbe:	dc 07                	fadd   QWORD PTR [edi]
c000abc0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc3:	31 c0                	xor    eax,eax
c000abc5:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abc8:	7e 13                	jle    c000abdd <zoh_vari_process+0x114>
c000abca:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abce:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abd1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abd4:	40                   	inc    eax
c000abd5:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abd8:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abdb:	eb e8                	jmp    c000abc5 <zoh_vari_process+0xfc>
c000abdd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abe1:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abe4:	de c1                	faddp  st(1),st
c000abe6:	e9 75 ff ff ff       	jmp    c000ab60 <zoh_vari_process+0x97>
c000abeb:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abef:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abf2:	de c1                	faddp  st(1),st
c000abf4:	83 ec 10             	sub    esp,0x10
c000abf7:	dd 14 24             	fst    QWORD PTR [esp]
c000abfa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abfe:	e8 6f fe ff ff       	call   c000aa72 <fmod_one>
c000ac03:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac06:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ac0a:	d8 e1                	fsub   st,st(1)
c000ac0c:	d9 c9                	fxch   st(1)
c000ac0e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac12:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac15:	e8 46 4b 01 00       	call   c001f760 <lrint>
c000ac1a:	83 c4 10             	add    esp,0x10
c000ac1d:	0f af e8             	imul   ebp,eax
c000ac20:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac23:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac26:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac2a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac2d:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac30:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac33:	0f 8d 80 00 00 00    	jge    c000acb9 <zoh_vari_process+0x1f0>
c000ac39:	d9 c0                	fld    st(0)
c000ac3b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac3e:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac42:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac46:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac4a:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac4e:	de d9                	fcompp 
c000ac50:	df e0                	fnstsw ax
c000ac52:	9e                   	sahf   
c000ac53:	72 64                	jb     c000acb9 <zoh_vari_process+0x1f0>
c000ac55:	85 d2                	test   edx,edx
c000ac57:	7e 36                	jle    c000ac8f <zoh_vari_process+0x1c6>
c000ac59:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac5d:	dd 07                	fld    QWORD PTR [edi]
c000ac5f:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac62:	83 ec 10             	sub    esp,0x10
c000ac65:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac68:	e8 d3 4a 01 00       	call   c001f740 <fabs>
c000ac6d:	83 c4 10             	add    esp,0x10
c000ac70:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000ac76:	df e0                	fnstsw ax
c000ac78:	9e                   	sahf   
c000ac79:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac7d:	76 10                	jbe    c000ac8f <zoh_vari_process+0x1c6>
c000ac7f:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac82:	dc 27                	fsub   QWORD PTR [edi]
c000ac84:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac87:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac8a:	dc 07                	fadd   QWORD PTR [edi]
c000ac8c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac8f:	31 d2                	xor    edx,edx
c000ac91:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac94:	39 d0                	cmp    eax,edx
c000ac96:	0f 8e 4f ff ff ff    	jle    c000abeb <zoh_vari_process+0x122>
c000ac9c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac9f:	29 c1                	sub    ecx,eax
c000aca1:	89 c8                	mov    eax,ecx
c000aca3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aca5:	01 d0                	add    eax,edx
c000aca7:	42                   	inc    edx
c000aca8:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000acab:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000acae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000acb1:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000acb4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000acb7:	eb d8                	jmp    c000ac91 <zoh_vari_process+0x1c8>
c000acb9:	39 e9                	cmp    ecx,ebp
c000acbb:	7d 13                	jge    c000acd0 <zoh_vari_process+0x207>
c000acbd:	89 e8                	mov    eax,ebp
c000acbf:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000acc2:	29 c8                	sub    eax,ecx
c000acc4:	99                   	cdq    
c000acc5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000accc:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acd0:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acd3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acd6:	85 c0                	test   eax,eax
c000acd8:	7f 1b                	jg     c000acf5 <zoh_vari_process+0x22c>
c000acda:	dd 04 24             	fld    QWORD PTR [esp]
c000acdd:	dd 1f                	fstp   QWORD PTR [edi]
c000acdf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ace2:	99                   	cdq    
c000ace3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ace6:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ace9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acec:	99                   	cdq    
c000aced:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acf0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acf3:	eb 25                	jmp    c000ad1a <zoh_vari_process+0x251>
c000acf5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000acf8:	31 d2                	xor    edx,edx
c000acfa:	29 e8                	sub    eax,ebp
c000acfc:	c1 e0 02             	shl    eax,0x2
c000acff:	39 d5                	cmp    ebp,edx
c000ad01:	7e d7                	jle    c000acda <zoh_vari_process+0x211>
c000ad03:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ad05:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ad08:	83 c0 04             	add    eax,0x4
c000ad0b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ad0f:	42                   	inc    edx
c000ad10:	eb ed                	jmp    c000acff <zoh_vari_process+0x236>
c000ad12:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad1e:	83 c4 2c             	add    esp,0x2c
c000ad21:	5b                   	pop    ebx
c000ad22:	5e                   	pop    esi
c000ad23:	5f                   	pop    edi
c000ad24:	5d                   	pop    ebp
c000ad25:	c3                   	ret    

c000ad26 <zoh_reset>:
c000ad26:	83 ec 0c             	sub    esp,0xc
c000ad29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad2d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad30:	85 c0                	test   eax,eax
c000ad32:	74 20                	je     c000ad54 <zoh_reset+0x2e>
c000ad34:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad37:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad3e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad41:	51                   	push   ecx
c000ad42:	c1 e2 02             	shl    edx,0x2
c000ad45:	83 c0 1c             	add    eax,0x1c
c000ad48:	52                   	push   edx
c000ad49:	6a 00                	push   0x0
c000ad4b:	50                   	push   eax
c000ad4c:	e8 87 59 ff ff       	call   c00006d8 <memset>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	83 c4 0c             	add    esp,0xc
c000ad57:	c3                   	ret    

c000ad58 <zoh_get_name>:
c000ad58:	31 c0                	xor    eax,eax
c000ad5a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad5f:	75 05                	jne    c000ad66 <zoh_get_name+0xe>
c000ad61:	b8 94 10 02 c0       	mov    eax,0xc0021094
c000ad66:	c3                   	ret    

c000ad67 <zoh_get_description>:
c000ad67:	31 c0                	xor    eax,eax
c000ad69:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad6e:	75 05                	jne    c000ad75 <zoh_get_description+0xe>
c000ad70:	b8 a5 10 02 c0       	mov    eax,0xc00210a5
c000ad75:	c3                   	ret    

c000ad76 <zoh_set_converter>:
c000ad76:	53                   	push   ebx
c000ad77:	b8 0a 00 00 00       	mov    eax,0xa
c000ad7c:	83 ec 08             	sub    esp,0x8
c000ad7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad83:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad88:	75 6e                	jne    c000adf8 <zoh_set_converter+0x82>
c000ad8a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad8d:	85 c0                	test   eax,eax
c000ad8f:	74 13                	je     c000ada4 <zoh_set_converter+0x2e>
c000ad91:	83 ec 0c             	sub    esp,0xc
c000ad94:	50                   	push   eax
c000ad95:	e8 6d 12 00 00       	call   c000c007 <free>
c000ad9a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ada1:	83 c4 10             	add    esp,0x10
c000ada4:	50                   	push   eax
c000ada5:	50                   	push   eax
c000ada6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ada9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000adb0:	50                   	push   eax
c000adb1:	6a 01                	push   0x1
c000adb3:	e8 6f 12 00 00       	call   c000c027 <calloc>
c000adb8:	89 c2                	mov    edx,eax
c000adba:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000adbd:	83 c4 10             	add    esp,0x10
c000adc0:	b8 01 00 00 00       	mov    eax,0x1
c000adc5:	85 d2                	test   edx,edx
c000adc7:	74 2f                	je     c000adf8 <zoh_set_converter+0x82>
c000adc9:	83 ec 0c             	sub    esp,0xc
c000adcc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adcf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000add2:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000add8:	c7 43 24 c9 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aac9
c000addf:	c7 43 20 c9 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aac9
c000ade6:	c7 43 28 26 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad26
c000aded:	53                   	push   ebx
c000adee:	e8 33 ff ff ff       	call   c000ad26 <zoh_reset>
c000adf3:	83 c4 10             	add    esp,0x10
c000adf6:	31 c0                	xor    eax,eax
c000adf8:	83 c4 08             	add    esp,0x8
c000adfb:	5b                   	pop    ebx
c000adfc:	c3                   	ret    
c000adfd:	90                   	nop

c000adfe <Computer::close(int, int, void*)>:
c000adfe:	57                   	push   edi
c000adff:	56                   	push   esi
c000ae00:	53                   	push   ebx
c000ae01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ae0d:	83 ec 0c             	sub    esp,0xc
c000ae10:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae16:	50                   	push   eax
c000ae17:	e8 98 59 00 00       	call   c00107b4 <Device::closeAll()>
c000ae1c:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae22:	83 c4 10             	add    esp,0x10
c000ae25:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae27:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae2b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae33:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae3b:	5b                   	pop    ebx
c000ae3c:	5e                   	pop    esi
c000ae3d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae40:	5f                   	pop    edi
c000ae41:	ff e0                	jmp    eax
c000ae43:	90                   	nop

c000ae44 <Computer::Computer()>:
c000ae44:	83 ec 0c             	sub    esp,0xc
c000ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4b:	83 ec 08             	sub    esp,0x8
c000ae4e:	68 dc 10 02 c0       	push   0xc00210dc
c000ae53:	50                   	push   eax
c000ae54:	e8 d5 59 00 00       	call   c001082e <Device::Device(char const*)>
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c000ae61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae65:	89 10                	mov    DWORD PTR [eax],edx
c000ae67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae79:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae87:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae8d:	83 ca 04             	or     edx,0x4
c000ae90:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aea0:	31 d2                	xor    edx,edx
c000aea2:	88 c2                	mov    dl,al
c000aea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea8:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb9:	31 d2                	xor    edx,edx
c000aebb:	88 c2                	mov    dl,al
c000aebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aed0:	8d 50 01             	lea    edx,[eax+0x1]
c000aed3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aed7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aedd:	31 d2                	xor    edx,edx
c000aedf:	88 c2                	mov    dl,al
c000aee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aee9:	83 e1 3f             	and    ecx,0x3f
c000aeec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aefa:	31 d2                	xor    edx,edx
c000aefc:	88 c2                	mov    dl,al
c000aefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af02:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000af09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af13:	31 d2                	xor    edx,edx
c000af15:	88 c2                	mov    dl,al
c000af17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af2a:	8d 50 01             	lea    edx,[eax+0x1]
c000af2d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af31:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af37:	31 d2                	xor    edx,edx
c000af39:	88 c2                	mov    dl,al
c000af3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af43:	83 e1 3f             	and    ecx,0x3f
c000af46:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af54:	31 d2                	xor    edx,edx
c000af56:	88 c2                	mov    dl,al
c000af58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5c:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af6d:	31 d2                	xor    edx,edx
c000af6f:	88 c2                	mov    dl,al
c000af71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af75:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af84:	8d 50 01             	lea    edx,[eax+0x1]
c000af87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af8b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af91:	31 d2                	xor    edx,edx
c000af93:	88 c2                	mov    dl,al
c000af95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af99:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af9d:	83 e1 3f             	and    ecx,0x3f
c000afa0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000afa4:	90                   	nop
c000afa5:	83 c4 0c             	add    esp,0xc
c000afa8:	c3                   	ret    
c000afa9:	90                   	nop

c000afaa <Computer::setBootMessage(char const*)>:
c000afaa:	c3                   	ret    
c000afab:	90                   	nop

c000afac <Computer::start()>:
c000afac:	56                   	push   esi
c000afad:	53                   	push   ebx
c000afae:	83 ec 14             	sub    esp,0x14
c000afb1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000afb5:	e8 a1 da 00 00       	call   c0018a5b <lockScheduler()>
c000afba:	e8 e5 dd 00 00       	call   c0018da4 <schedule()>
c000afbf:	e8 99 da 00 00       	call   c0018a5d <unlockScheduler()>
c000afc4:	fb                   	sti    
c000afc5:	83 ec 0c             	sub    esp,0xc
c000afc8:	68 3b 07 00 00       	push   0x73b
c000afcd:	e8 22 41 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000afd2:	89 c6                	mov    esi,eax
c000afd4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c000afd9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afe0:	50                   	push   eax
c000afe1:	68 e5 10 02 c0       	push   0xc00210e5
c000afe6:	6a 01                	push   0x1
c000afe8:	56                   	push   esi
c000afe9:	e8 c4 d8 00 00       	call   c00188b2 <Process::Process(bool, char const*, Process*, char**)>
c000afee:	83 c4 20             	add    esp,0x20
c000aff1:	68 ff 00 00 00       	push   0xff
c000aff6:	6a 00                	push   0x0
c000aff8:	68 85 b9 00 c0       	push   0xc000b985
c000affd:	56                   	push   esi
c000affe:	e8 8d db 00 00       	call   c0018b90 <Process::createThread(void (*)(void*), void*, int)>
c000b003:	6a 7a                	push   0x7a
c000b005:	8b 15 f4 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025bf4
c000b00b:	6a 00                	push   0x0
c000b00d:	68 d5 93 01 c0       	push   0xc00193d5
c000b012:	52                   	push   edx
c000b013:	e8 78 db 00 00       	call   c0018b90 <Process::createThread(void (*)(void*), void*, int)>
c000b018:	83 c4 20             	add    esp,0x20
c000b01b:	a3 a8 5b 02 c0       	mov    ds:0xc0025ba8,eax
c000b020:	c6 05 ad 47 02 c0 01 	mov    BYTE PTR ds:0xc00247ad,0x1
c000b027:	e8 60 45 00 00       	call   c000f58c <initVFS()>
c000b02c:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b032:	8b 10                	mov    edx,DWORD PTR [eax]
c000b034:	6a 00                	push   0x0
c000b036:	6a 00                	push   0x0
c000b038:	6a 00                	push   0x0
c000b03a:	50                   	push   eax
c000b03b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b03e:	e8 66 c2 00 00       	call   c00172a9 <setupSystemCalls()>
c000b043:	e8 42 50 00 00       	call   c001008a <loadClockSettings()>
c000b048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b04b:	e8 38 57 00 00       	call   c0010788 <Device::loadDriversForAll()>
c000b050:	bb 02 00 00 00       	mov    ebx,0x2
c000b055:	b8 01 00 00 00       	mov    eax,0x1
c000b05a:	31 d2                	xor    edx,edx
c000b05c:	31 c9                	xor    ecx,ecx
c000b05e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b066:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b06e:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000b074:	59                   	pop    ecx
c000b075:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c000b07b:	5e                   	pop    esi
c000b07c:	6a 01                	push   0x1
c000b07e:	68 f2 10 02 c0       	push   0xc00210f2
c000b083:	e8 ed d3 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c000b088:	5a                   	pop    edx
c000b089:	59                   	pop    ecx
c000b08a:	53                   	push   ebx
c000b08b:	50                   	push   eax
c000b08c:	e8 aa d5 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c000b091:	c7 04 24 e8 22 02 c0 	mov    DWORD PTR [esp],0xc00222e8
c000b098:	e8 8c 41 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b09d:	83 c4 10             	add    esp,0x10
c000b0a0:	83 ec 0c             	sub    esp,0xc
c000b0a3:	6a 02                	push   0x2
c000b0a5:	e8 53 de 00 00       	call   c0018efd <blockTask(TaskState)>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	eb f1                	jmp    c000b0a0 <Computer::start()+0xf4>

c000b0af <firstTask()>:
c000b0af:	83 ec 18             	sub    esp,0x18
c000b0b2:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b0b7:	50                   	push   eax
c000b0b8:	e8 ef fe ff ff       	call   c000afac <Computer::start()>
c000b0bd:	90                   	nop

c000b0be <Computer::detectFeatures()>:
c000b0be:	55                   	push   ebp
c000b0bf:	57                   	push   edi
c000b0c0:	56                   	push   esi
c000b0c1:	53                   	push   ebx
c000b0c2:	83 ec 1c             	sub    esp,0x1c
c000b0c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0c9:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000b0cf:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b0d5:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b0db:	e8 af 52 ff ff       	call   c000038f <detectCPUID>
c000b0e0:	85 c0                	test   eax,eax
c000b0e2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0e8:	0f 95 c2             	setne  dl
c000b0eb:	01 d2                	add    edx,edx
c000b0ed:	83 e0 fd             	and    eax,0xfffffffd
c000b0f0:	09 d0                	or     eax,edx
c000b0f2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0f8:	a8 02                	test   al,0x2
c000b0fa:	75 4e                	jne    c000b14a <Computer::detectFeatures()+0x8c>
c000b0fc:	f6 05 c1 47 02 c0 04 	test   BYTE PTR ds:0xc00247c1,0x4
c000b103:	74 0f                	je     c000b114 <Computer::detectFeatures()+0x56>
c000b105:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b10b:	83 e0 fb             	and    eax,0xfffffffb
c000b10e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b114:	e8 cd 40 01 00       	call   c001f1e6 <x87Detect>
c000b119:	83 e0 01             	and    eax,0x1
c000b11c:	c1 e0 04             	shl    eax,0x4
c000b11f:	88 c2                	mov    dl,al
c000b121:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b127:	83 e0 ef             	and    eax,0xffffffef
c000b12a:	09 d0                	or     eax,edx
c000b12c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b132:	a8 10                	test   al,0x10
c000b134:	0f 85 20 01 00 00    	jne    c000b25a <Computer::detectFeatures()+0x19c>
c000b13a:	84 c0                	test   al,al
c000b13c:	0f 88 3b 01 00 00    	js     c000b27d <Computer::detectFeatures()+0x1bf>
c000b142:	83 c4 1c             	add    esp,0x1c
c000b145:	5b                   	pop    ebx
c000b146:	5e                   	pop    esi
c000b147:	5f                   	pop    edi
c000b148:	5d                   	pop    ebp
c000b149:	c3                   	ret    
c000b14a:	83 ec 0c             	sub    esp,0xc
c000b14d:	6a 20                	push   0x20
c000b14f:	e8 db 96 00 00       	call   c001482f <cpuidCheckEDX(unsigned int)>
c000b154:	83 e0 01             	and    eax,0x1
c000b157:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b15e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b164:	83 e0 f7             	and    eax,0xfffffff7
c000b167:	09 d0                	or     eax,edx
c000b169:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b16f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b176:	e8 b4 96 00 00       	call   c001482f <cpuidCheckEDX(unsigned int)>
c000b17b:	83 e0 01             	and    eax,0x1
c000b17e:	88 c2                	mov    dl,al
c000b180:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b186:	83 e0 fe             	and    eax,0xfffffffe
c000b189:	09 d0                	or     eax,edx
c000b18b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b191:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b198:	e8 92 96 00 00       	call   c001482f <cpuidCheckEDX(unsigned int)>
c000b19d:	c1 e0 07             	shl    eax,0x7
c000b1a0:	88 c2                	mov    dl,al
c000b1a2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b1a8:	83 e0 7f             	and    eax,0x7f
c000b1ab:	09 d0                	or     eax,edx
c000b1ad:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1b3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b1ba:	e8 70 96 00 00       	call   c001482f <cpuidCheckEDX(unsigned int)>
c000b1bf:	83 c4 10             	add    esp,0x10
c000b1c2:	83 e0 01             	and    eax,0x1
c000b1c5:	c1 e0 05             	shl    eax,0x5
c000b1c8:	88 c2                	mov    dl,al
c000b1ca:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1d0:	83 e0 df             	and    eax,0xffffffdf
c000b1d3:	09 d0                	or     eax,edx
c000b1d5:	f7 05 c0 47 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00247c0,0x401
c000b1df:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1e5:	0f 84 b8 00 00 00    	je     c000b2a3 <Computer::detectFeatures()+0x1e5>
c000b1eb:	83 ec 0c             	sub    esp,0xc
c000b1ee:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b1f4:	83 e1 fe             	and    ecx,0xfffffffe
c000b1f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1fb:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b201:	50                   	push   eax
c000b202:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b206:	55                   	push   ebp
c000b207:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b20b:	57                   	push   edi
c000b20c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b210:	56                   	push   esi
c000b211:	68 00 00 00 80       	push   0x80000000
c000b216:	e8 91 95 00 00       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b21b:	83 c4 20             	add    esp,0x20
c000b21e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b225:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b229:	0f 86 cd fe ff ff    	jbe    c000b0fc <Computer::detectFeatures()+0x3e>
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	50                   	push   eax
c000b233:	55                   	push   ebp
c000b234:	57                   	push   edi
c000b235:	56                   	push   esi
c000b236:	68 01 00 00 80       	push   0x80000001
c000b23b:	e8 6c 95 00 00       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b240:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b246:	83 c4 20             	add    esp,0x20
c000b249:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b24f:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b255:	e9 a2 fe ff ff       	jmp    c000b0fc <Computer::detectFeatures()+0x3e>
c000b25a:	e8 41 3f 01 00       	call   c001f1a0 <sseDetect>
c000b25f:	88 c2                	mov    dl,al
c000b261:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b267:	c1 e2 07             	shl    edx,0x7
c000b26a:	83 e0 7f             	and    eax,0x7f
c000b26d:	09 d0                	or     eax,edx
c000b26f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b275:	84 c0                	test   al,al
c000b277:	0f 89 c5 fe ff ff    	jns    c000b142 <Computer::detectFeatures()+0x84>
c000b27d:	e8 0e 3f 01 00       	call   c001f190 <avxDetect>
c000b282:	83 e0 01             	and    eax,0x1
c000b285:	c1 e0 05             	shl    eax,0x5
c000b288:	88 c2                	mov    dl,al
c000b28a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b290:	83 e0 df             	and    eax,0xffffffdf
c000b293:	09 d0                	or     eax,edx
c000b295:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b29b:	83 c4 1c             	add    esp,0x1c
c000b29e:	5b                   	pop    ebx
c000b29f:	5e                   	pop    esi
c000b2a0:	5f                   	pop    edi
c000b2a1:	5d                   	pop    ebp
c000b2a2:	c3                   	ret    
c000b2a3:	83 ec 0c             	sub    esp,0xc
c000b2a6:	68 00 02 00 00       	push   0x200
c000b2ab:	e8 7f 95 00 00       	call   c001482f <cpuidCheckEDX(unsigned int)>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	e9 33 ff ff ff       	jmp    c000b1eb <Computer::detectFeatures()+0x12d>

c000b2b8 <Computer::displayFeatures()>:
c000b2b8:	53                   	push   ebx
c000b2b9:	83 ec 14             	sub    esp,0x14
c000b2bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2c0:	68 15 11 02 c0       	push   0xc0021115
c000b2c5:	e8 5f 3f 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b2ca:	83 c4 10             	add    esp,0x10
c000b2cd:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2d2:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2d9:	74 05                	je     c000b2e0 <Computer::displayFeatures()+0x28>
c000b2db:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2e0:	51                   	push   ecx
c000b2e1:	51                   	push   ecx
c000b2e2:	50                   	push   eax
c000b2e3:	68 28 11 02 c0       	push   0xc0021128
c000b2e8:	e8 3c 3f 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2f5:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2fc:	75 05                	jne    c000b303 <Computer::displayFeatures()+0x4b>
c000b2fe:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b303:	52                   	push   edx
c000b304:	52                   	push   edx
c000b305:	50                   	push   eax
c000b306:	68 39 11 02 c0       	push   0xc0021139
c000b30b:	e8 19 3f 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b318:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b31f:	75 05                	jne    c000b326 <Computer::displayFeatures()+0x6e>
c000b321:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b326:	51                   	push   ecx
c000b327:	51                   	push   ecx
c000b328:	50                   	push   eax
c000b329:	68 4a 11 02 c0       	push   0xc002114a
c000b32e:	e8 f6 3e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b333:	83 c4 10             	add    esp,0x10
c000b336:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b33b:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b342:	75 05                	jne    c000b349 <Computer::displayFeatures()+0x91>
c000b344:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b349:	52                   	push   edx
c000b34a:	52                   	push   edx
c000b34b:	50                   	push   eax
c000b34c:	68 5b 11 02 c0       	push   0xc002115b
c000b351:	e8 d3 3e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b356:	83 c4 10             	add    esp,0x10
c000b359:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b35e:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b365:	75 05                	jne    c000b36c <Computer::displayFeatures()+0xb4>
c000b367:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b36c:	51                   	push   ecx
c000b36d:	51                   	push   ecx
c000b36e:	50                   	push   eax
c000b36f:	68 6c 11 02 c0       	push   0xc002116c
c000b374:	e8 b0 3e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b381:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b388:	75 05                	jne    c000b38f <Computer::displayFeatures()+0xd7>
c000b38a:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b38f:	52                   	push   edx
c000b390:	52                   	push   edx
c000b391:	50                   	push   eax
c000b392:	68 7d 11 02 c0       	push   0xc002117d
c000b397:	e8 8d 3e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b39c:	83 c4 10             	add    esp,0x10
c000b39f:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3a4:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b3ab:	75 05                	jne    c000b3b2 <Computer::displayFeatures()+0xfa>
c000b3ad:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b3b2:	51                   	push   ecx
c000b3b3:	51                   	push   ecx
c000b3b4:	50                   	push   eax
c000b3b5:	68 8e 11 02 c0       	push   0xc002118e
c000b3ba:	e8 6a 3e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b3bf:	83 c4 10             	add    esp,0x10
c000b3c2:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3c7:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3ce:	78 05                	js     c000b3d5 <Computer::displayFeatures()+0x11d>
c000b3d0:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b3d5:	52                   	push   edx
c000b3d6:	52                   	push   edx
c000b3d7:	50                   	push   eax
c000b3d8:	68 9f 11 02 c0       	push   0xc002119f
c000b3dd:	e8 47 3e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3ea:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3f1:	0f 84 93 01 00 00    	je     c000b58a <Computer::displayFeatures()+0x2d2>
c000b3f7:	51                   	push   ecx
c000b3f8:	51                   	push   ecx
c000b3f9:	50                   	push   eax
c000b3fa:	68 b0 11 02 c0       	push   0xc00211b0
c000b3ff:	e8 25 3e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b40c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b413:	0f 84 67 01 00 00    	je     c000b580 <Computer::displayFeatures()+0x2c8>
c000b419:	52                   	push   edx
c000b41a:	52                   	push   edx
c000b41b:	50                   	push   eax
c000b41c:	68 c1 11 02 c0       	push   0xc00211c1
c000b421:	e8 03 3e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b42e:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b435:	0f 84 3b 01 00 00    	je     c000b576 <Computer::displayFeatures()+0x2be>
c000b43b:	51                   	push   ecx
c000b43c:	51                   	push   ecx
c000b43d:	50                   	push   eax
c000b43e:	68 d2 11 02 c0       	push   0xc00211d2
c000b443:	e8 e1 3d 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b450:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b457:	0f 84 0f 01 00 00    	je     c000b56c <Computer::displayFeatures()+0x2b4>
c000b45d:	52                   	push   edx
c000b45e:	52                   	push   edx
c000b45f:	50                   	push   eax
c000b460:	68 e3 11 02 c0       	push   0xc00211e3
c000b465:	e8 bf 3d 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b46a:	83 c4 10             	add    esp,0x10
c000b46d:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b472:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b479:	0f 84 e3 00 00 00    	je     c000b562 <Computer::displayFeatures()+0x2aa>
c000b47f:	51                   	push   ecx
c000b480:	51                   	push   ecx
c000b481:	50                   	push   eax
c000b482:	68 f4 11 02 c0       	push   0xc00211f4
c000b487:	e8 9d 3d 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b48c:	83 c4 10             	add    esp,0x10
c000b48f:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b494:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b49b:	0f 84 b7 00 00 00    	je     c000b558 <Computer::displayFeatures()+0x2a0>
c000b4a1:	52                   	push   edx
c000b4a2:	52                   	push   edx
c000b4a3:	50                   	push   eax
c000b4a4:	68 05 12 02 c0       	push   0xc0021205
c000b4a9:	e8 7b 3d 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b4ae:	83 c4 10             	add    esp,0x10
c000b4b1:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4b6:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b4bd:	0f 84 8b 00 00 00    	je     c000b54e <Computer::displayFeatures()+0x296>
c000b4c3:	51                   	push   ecx
c000b4c4:	51                   	push   ecx
c000b4c5:	50                   	push   eax
c000b4c6:	68 16 12 02 c0       	push   0xc0021216
c000b4cb:	e8 59 3d 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b4d0:	83 c4 10             	add    esp,0x10
c000b4d3:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4d8:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4df:	78 05                	js     c000b4e6 <Computer::displayFeatures()+0x22e>
c000b4e1:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b4e6:	52                   	push   edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	68 27 12 02 c0       	push   0xc0021227
c000b4ee:	e8 36 3d 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4fb:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b502:	74 43                	je     c000b547 <Computer::displayFeatures()+0x28f>
c000b504:	51                   	push   ecx
c000b505:	51                   	push   ecx
c000b506:	50                   	push   eax
c000b507:	68 38 12 02 c0       	push   0xc0021238
c000b50c:	e8 18 3d 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b511:	83 c4 10             	add    esp,0x10
c000b514:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b519:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b520:	74 1e                	je     c000b540 <Computer::displayFeatures()+0x288>
c000b522:	52                   	push   edx
c000b523:	52                   	push   edx
c000b524:	50                   	push   eax
c000b525:	68 49 12 02 c0       	push   0xc0021249
c000b52a:	e8 fa 3c 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b52f:	c7 44 24 20 c6 28 02 c0 	mov    DWORD PTR [esp+0x20],0xc00228c6
c000b537:	83 c4 18             	add    esp,0x18
c000b53a:	5b                   	pop    ebx
c000b53b:	e9 e9 3c 00 00       	jmp    c000f229 <Dbg::kprintf(char const*, ...)>
c000b540:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b545:	eb db                	jmp    c000b522 <Computer::displayFeatures()+0x26a>
c000b547:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b54c:	eb b6                	jmp    c000b504 <Computer::displayFeatures()+0x24c>
c000b54e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b553:	e9 6b ff ff ff       	jmp    c000b4c3 <Computer::displayFeatures()+0x20b>
c000b558:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b55d:	e9 3f ff ff ff       	jmp    c000b4a1 <Computer::displayFeatures()+0x1e9>
c000b562:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b567:	e9 13 ff ff ff       	jmp    c000b47f <Computer::displayFeatures()+0x1c7>
c000b56c:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b571:	e9 e7 fe ff ff       	jmp    c000b45d <Computer::displayFeatures()+0x1a5>
c000b576:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b57b:	e9 bb fe ff ff       	jmp    c000b43b <Computer::displayFeatures()+0x183>
c000b580:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b585:	e9 8f fe ff ff       	jmp    c000b419 <Computer::displayFeatures()+0x161>
c000b58a:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b58f:	e9 63 fe ff ff       	jmp    c000b3f7 <Computer::displayFeatures()+0x13f>

c000b594 <Computer::rdmsr(unsigned int)>:
c000b594:	83 ec 0c             	sub    esp,0xc
c000b597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b59b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5a2:	74 0a                	je     c000b5ae <Computer::rdmsr(unsigned int)+0x1a>
c000b5a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5a8:	0f 32                	rdmsr  
c000b5aa:	83 c4 0c             	add    esp,0xc
c000b5ad:	c3                   	ret    
c000b5ae:	83 ec 0c             	sub    esp,0xc
c000b5b1:	68 5a 12 02 c0       	push   0xc002125a
c000b5b6:	e8 97 a4 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000b5bb:	83 c4 10             	add    esp,0x10
c000b5be:	eb e4                	jmp    c000b5a4 <Computer::rdmsr(unsigned int)+0x10>

c000b5c0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5c0:	57                   	push   edi
c000b5c1:	56                   	push   esi
c000b5c2:	52                   	push   edx
c000b5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5c7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5cb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5cf:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5d6:	74 0e                	je     c000b5e6 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5dc:	89 f0                	mov    eax,esi
c000b5de:	89 fa                	mov    edx,edi
c000b5e0:	0f 30                	wrmsr  
c000b5e2:	58                   	pop    eax
c000b5e3:	5e                   	pop    esi
c000b5e4:	5f                   	pop    edi
c000b5e5:	c3                   	ret    
c000b5e6:	83 ec 0c             	sub    esp,0xc
c000b5e9:	68 60 12 02 c0       	push   0xc0021260
c000b5ee:	e8 5f a4 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	eb e0                	jmp    c000b5d8 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5f8 <Computer::nmiEnabled()>:
c000b5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fc:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b602:	c3                   	ret    
c000b603:	90                   	nop

c000b604 <Computer::readCMOS(unsigned char)>:
c000b604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b60c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b613:	19 c0                	sbb    eax,eax
c000b615:	83 e0 80             	and    eax,0xffffff80
c000b618:	09 d0                	or     eax,edx
c000b61a:	e6 70                	out    0x70,al
c000b61c:	e4 71                	in     al,0x71
c000b61e:	c3                   	ret    
c000b61f:	90                   	nop

c000b620 <Computer::enableNMI(bool)>:
c000b620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b624:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b628:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b62e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b636:	eb cc                	jmp    c000b604 <Computer::readCMOS(unsigned char)>

c000b638 <Computer::open(int, int, void*)>:
c000b638:	56                   	push   esi
c000b639:	53                   	push   ebx
c000b63a:	83 ec 10             	sub    esp,0x10
c000b63d:	f6 05 c0 47 02 c0 04 	test   BYTE PTR ds:0xc00247c0,0x4
c000b644:	0f 94 05 e0 3b 02 c0 	sete   BYTE PTR ds:0xc0023be0
c000b64b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b64f:	68 68 22 00 00       	push   0x2268
c000b654:	e8 9b 3a 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000b659:	89 c6                	mov    esi,eax
c000b65b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b65e:	e8 b9 87 00 00       	call   c0013e1c <ACPI::ACPI()>
c000b663:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b669:	59                   	pop    ecx
c000b66a:	58                   	pop    eax
c000b66b:	56                   	push   esi
c000b66c:	53                   	push   ebx
c000b66d:	e8 cc 4f 00 00       	call   c001063e <Device::addChild(Device*)>
c000b672:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b675:	e8 44 fa ff ff       	call   c000b0be <Computer::detectFeatures()>
c000b67a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b67d:	e8 36 fc ff ff       	call   c000b2b8 <Computer::displayFeatures()>
c000b682:	58                   	pop    eax
c000b683:	5a                   	pop    edx
c000b684:	6a 01                	push   0x1
c000b686:	53                   	push   ebx
c000b687:	e8 94 ff ff ff       	call   c000b620 <Computer::enableNMI(bool)>
c000b68c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b693:	e8 5c 3a 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000b698:	89 c6                	mov    esi,eax
c000b69a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b69d:	e8 58 92 00 00       	call   c00148fa <CPU::CPU()>
c000b6a2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6a8:	59                   	pop    ecx
c000b6a9:	58                   	pop    eax
c000b6aa:	56                   	push   esi
c000b6ab:	53                   	push   ebx
c000b6ac:	e8 8d 4f 00 00       	call   c001063e <Device::addChild(Device*)>
c000b6b1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b6bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6bd:	51                   	push   ecx
c000b6be:	6a 00                	push   0x0
c000b6c0:	6a 00                	push   0x0
c000b6c2:	50                   	push   eax
c000b6c3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6c6:	83 c4 20             	add    esp,0x20
c000b6c9:	e8 d8 54 00 00       	call   c0010ba6 <setupFPU()>
c000b6ce:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6d4:	85 c0                	test   eax,eax
c000b6d6:	74 1e                	je     c000b6f6 <Computer::open(int, int, void*)+0xbe>
c000b6d8:	52                   	push   edx
c000b6d9:	52                   	push   edx
c000b6da:	50                   	push   eax
c000b6db:	53                   	push   ebx
c000b6dc:	e8 5d 4f 00 00       	call   c001063e <Device::addChild(Device*)>
c000b6e1:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6e7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6e9:	6a 00                	push   0x0
c000b6eb:	6a 00                	push   0x0
c000b6ed:	6a 00                	push   0x0
c000b6ef:	50                   	push   eax
c000b6f0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6f3:	83 c4 20             	add    esp,0x20
c000b6f6:	83 ec 0c             	sub    esp,0xc
c000b6f9:	68 af b0 00 c0       	push   0xc000b0af
c000b6fe:	e8 8c d5 00 00       	call   c0018c8f <setupMultitasking(void (*)())>
c000b703:	83 c4 14             	add    esp,0x14
c000b706:	83 c8 ff             	or     eax,0xffffffff
c000b709:	5b                   	pop    ebx
c000b70a:	5e                   	pop    esi
c000b70b:	c3                   	ret    

c000b70c <Computer::disableNMI()>:
c000b70c:	6a 00                	push   0x0
c000b70e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b712:	50                   	push   eax
c000b713:	e8 08 ff ff ff       	call   c000b620 <Computer::enableNMI(bool)>
c000b718:	5a                   	pop    edx
c000b719:	59                   	pop    ecx
c000b71a:	c3                   	ret    
c000b71b:	90                   	nop

c000b71c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b71c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b720:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b724:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b72b:	19 c0                	sbb    eax,eax
c000b72d:	83 e0 80             	and    eax,0xffffff80
c000b730:	09 d0                	or     eax,edx
c000b732:	e6 70                	out    0x70,al
c000b734:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b738:	e6 71                	out    0x71,al
c000b73a:	c3                   	ret    
c000b73b:	90                   	nop

c000b73c <Computer::handleNMI()>:
c000b73c:	56                   	push   esi
c000b73d:	53                   	push   ebx
c000b73e:	83 ec 10             	sub    esp,0x10
c000b741:	e4 92                	in     al,0x92
c000b743:	89 c6                	mov    esi,eax
c000b745:	e4 61                	in     al,0x61
c000b747:	68 66 12 02 c0       	push   0xc0021266
c000b74c:	88 c3                	mov    bl,al
c000b74e:	e8 d6 3a 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b753:	83 c4 10             	add    esp,0x10
c000b756:	83 e6 10             	and    esi,0x10
c000b759:	75 0d                	jne    c000b768 <Computer::handleNMI()+0x2c>
c000b75b:	f6 c3 40             	test   bl,0x40
c000b75e:	75 1d                	jne    c000b77d <Computer::handleNMI()+0x41>
c000b760:	84 db                	test   bl,bl
c000b762:	78 2d                	js     c000b791 <Computer::handleNMI()+0x55>
c000b764:	58                   	pop    eax
c000b765:	5b                   	pop    ebx
c000b766:	5e                   	pop    esi
c000b767:	c3                   	ret    
c000b768:	83 ec 0c             	sub    esp,0xc
c000b76b:	68 77 12 02 c0       	push   0xc0021277
c000b770:	e8 dd a2 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000b775:	83 c4 10             	add    esp,0x10
c000b778:	f6 c3 40             	test   bl,0x40
c000b77b:	74 e3                	je     c000b760 <Computer::handleNMI()+0x24>
c000b77d:	83 ec 0c             	sub    esp,0xc
c000b780:	68 84 12 02 c0       	push   0xc0021284
c000b785:	e8 c8 a2 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	84 db                	test   bl,bl
c000b78f:	79 d3                	jns    c000b764 <Computer::handleNMI()+0x28>
c000b791:	c7 44 24 10 8e 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002128e
c000b799:	5a                   	pop    edx
c000b79a:	5b                   	pop    ebx
c000b79b:	5e                   	pop    esi
c000b79c:	e9 b1 a2 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c000b7a1:	90                   	nop

c000b7a2 <Computer::setDiskActivityLight(int, bool)>:
c000b7a2:	56                   	push   esi
c000b7a3:	53                   	push   ebx
c000b7a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7a8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7ad:	77 1c                	ja     c000b7cb <Computer::setDiskActivityLight(int, bool)+0x29>
c000b7af:	e4 92                	in     al,0x92
c000b7b1:	bb 40 00 00 00       	mov    ebx,0x40
c000b7b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7ba:	89 da                	mov    edx,ebx
c000b7bc:	d3 e2                	shl    edx,cl
c000b7be:	83 f2 ff             	xor    edx,0xffffffff
c000b7c1:	89 f1                	mov    ecx,esi
c000b7c3:	21 d0                	and    eax,edx
c000b7c5:	d3 e3                	shl    ebx,cl
c000b7c7:	09 d8                	or     eax,ebx
c000b7c9:	e6 92                	out    0x92,al
c000b7cb:	5b                   	pop    ebx
c000b7cc:	5e                   	pop    esi
c000b7cd:	c3                   	ret    

c000b7ce <GDTEntry::setBase(unsigned int)>:
c000b7ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7d6:	89 c1                	mov    ecx,eax
c000b7d8:	c1 e9 10             	shr    ecx,0x10
c000b7db:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7df:	c1 e8 18             	shr    eax,0x18
c000b7e2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7e5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7e8:	c3                   	ret    
c000b7e9:	90                   	nop

c000b7ea <GDTEntry::setLimit(unsigned int)>:
c000b7ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7f2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7f5:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7f8:	c1 e8 10             	shr    eax,0x10
c000b7fb:	83 e2 f0             	and    edx,0xfffffff0
c000b7fe:	83 e0 0f             	and    eax,0xf
c000b801:	09 d0                	or     eax,edx
c000b803:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b806:	c3                   	ret    
c000b807:	90                   	nop

c000b808 <GDT::GDT()>:
c000b808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b80c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b816:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b81c:	90                   	nop
c000b81d:	c3                   	ret    

c000b81e <GDT::addEntry(GDTEntry)>:
c000b81e:	53                   	push   ebx
c000b81f:	83 ec 0c             	sub    esp,0xc
c000b822:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b826:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b828:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b82f:	52                   	push   edx
c000b830:	50                   	push   eax
c000b831:	68 c8 12 02 c0       	push   0xc00212c8
c000b836:	e8 ee 39 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000b83b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b83d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b841:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b845:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b849:	8d 50 01             	lea    edx,[eax+0x1]
c000b84c:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b850:	89 13                	mov    DWORD PTR [ebx],edx
c000b852:	c1 e0 03             	shl    eax,0x3
c000b855:	83 c4 18             	add    esp,0x18
c000b858:	5b                   	pop    ebx
c000b859:	c3                   	ret    

c000b85a <GDT::getNumberOfEntries()>:
c000b85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b85e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b860:	c3                   	ret    
c000b861:	90                   	nop

c000b862 <GDT::flush()>:
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	83 c0 04             	add    eax,0x4
c000b869:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b86c:	a3 b2 47 02 c0       	mov    ds:0xc00247b2,eax
c000b871:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b878:	66 89 15 b0 47 02 c0 	mov    WORD PTR ds:0xc00247b0,dx
c000b87f:	e9 7f 4b ff ff       	jmp    c0000403 <loadGDT>

c000b884 <GDT::setup()>:
c000b884:	55                   	push   ebp
c000b885:	57                   	push   edi
c000b886:	56                   	push   esi
c000b887:	53                   	push   ebx
c000b888:	83 ec 3c             	sub    esp,0x3c
c000b88b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b88f:	6a 00                	push   0x0
c000b891:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b895:	53                   	push   ebx
c000b896:	e8 33 ff ff ff       	call   c000b7ce <GDTEntry::setBase(unsigned int)>
c000b89b:	6a 00                	push   0x0
c000b89d:	53                   	push   ebx
c000b89e:	e8 47 ff ff ff       	call   c000b7ea <GDTEntry::setLimit(unsigned int)>
c000b8a3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b8ab:	6a 00                	push   0x0
c000b8ad:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b8b1:	53                   	push   ebx
c000b8b2:	e8 17 ff ff ff       	call   c000b7ce <GDTEntry::setBase(unsigned int)>
c000b8b7:	68 ff ff ff 00       	push   0xffffff
c000b8bc:	53                   	push   ebx
c000b8bd:	e8 28 ff ff ff       	call   c000b7ea <GDTEntry::setLimit(unsigned int)>
c000b8c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8c6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8cb:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8d0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8d4:	83 c4 20             	add    esp,0x20
c000b8d7:	6a 00                	push   0x0
c000b8d9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8dd:	53                   	push   ebx
c000b8de:	e8 eb fe ff ff       	call   c000b7ce <GDTEntry::setBase(unsigned int)>
c000b8e3:	68 ff ff ff 00       	push   0xffffff
c000b8e8:	53                   	push   ebx
c000b8e9:	e8 fc fe ff ff       	call   c000b7ea <GDTEntry::setLimit(unsigned int)>
c000b8ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8f2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8f6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8ff:	0d 00 92 c0 00       	or     eax,0xc09200
c000b904:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b908:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b90c:	89 d8                	mov    eax,ebx
c000b90e:	80 cc 60             	or     ah,0x60
c000b911:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b915:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b919:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b91d:	83 c4 0c             	add    esp,0xc
c000b920:	89 f8                	mov    eax,edi
c000b922:	80 cc 60             	or     ah,0x60
c000b925:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b929:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b92d:	89 c7                	mov    edi,eax
c000b92f:	55                   	push   ebp
c000b930:	e8 e9 fe ff ff       	call   c000b81e <GDT::addEntry(GDTEntry)>
c000b935:	83 c4 0c             	add    esp,0xc
c000b938:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b93c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b940:	55                   	push   ebp
c000b941:	e8 d8 fe ff ff       	call   c000b81e <GDT::addEntry(GDTEntry)>
c000b946:	83 c4 0c             	add    esp,0xc
c000b949:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b94d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b951:	55                   	push   ebp
c000b952:	e8 c7 fe ff ff       	call   c000b81e <GDT::addEntry(GDTEntry)>
c000b957:	83 c4 0c             	add    esp,0xc
c000b95a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b95e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b962:	53                   	push   ebx
c000b963:	51                   	push   ecx
c000b964:	55                   	push   ebp
c000b965:	e8 b4 fe ff ff       	call   c000b81e <GDT::addEntry(GDTEntry)>
c000b96a:	83 c4 0c             	add    esp,0xc
c000b96d:	57                   	push   edi
c000b96e:	56                   	push   esi
c000b96f:	55                   	push   ebp
c000b970:	e8 a9 fe ff ff       	call   c000b81e <GDT::addEntry(GDTEntry)>
c000b975:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b978:	e8 e5 fe ff ff       	call   c000b862 <GDT::flush()>
c000b97d:	83 c4 4c             	add    esp,0x4c
c000b980:	5b                   	pop    ebx
c000b981:	5e                   	pop    esi
c000b982:	5f                   	pop    edi
c000b983:	5d                   	pop    ebp
c000b984:	c3                   	ret    

c000b985 <idleFunction(void*)>:
c000b985:	53                   	push   ebx
c000b986:	83 ec 08             	sub    esp,0x8
c000b989:	e8 cf d0 00 00       	call   c0018a5d <unlockScheduler()>
c000b98e:	e8 53 8f 00 00       	call   c00148e6 <thisCPU()>
c000b993:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b99a:	74 41                	je     c000b9dd <idleFunction(void*)+0x58>
c000b99c:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b9a1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b9a8:	74 33                	je     c000b9dd <idleFunction(void*)+0x58>
c000b9aa:	52                   	push   edx
c000b9ab:	31 db                	xor    ebx,ebx
c000b9ad:	52                   	push   edx
c000b9ae:	68 e1 00 00 00       	push   0xe1
c000b9b3:	50                   	push   eax
c000b9b4:	e8 db fb ff ff       	call   c000b594 <Computer::rdmsr(unsigned int)>
c000b9b9:	53                   	push   ebx
c000b9ba:	83 e0 02             	and    eax,0x2
c000b9bd:	50                   	push   eax
c000b9be:	68 e1 00 00 00       	push   0xe1
c000b9c3:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c000b9c9:	e8 f2 fb ff ff       	call   c000b5c0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9ce:	83 c4 20             	add    esp,0x20
c000b9d1:	e8 45 48 ff ff       	call   c000021b <doTPAUSE>
c000b9d6:	e8 05 3e 01 00       	call   c001f7e0 <idleCommon()>
c000b9db:	eb f4                	jmp    c000b9d1 <idleFunction(void*)+0x4c>
c000b9dd:	fb                   	sti    
c000b9de:	f4                   	hlt    
c000b9df:	e8 fc 3d 01 00       	call   c001f7e0 <idleCommon()>
c000b9e4:	eb f7                	jmp    c000b9dd <idleFunction(void*)+0x58>

c000b9e6 <IDTEntry::IDTEntry(bool)>:
c000b9e6:	83 ec 04             	sub    esp,0x4
c000b9e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9ed:	88 04 24             	mov    BYTE PTR [esp],al
c000b9f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f4:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9fe:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ba02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba06:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba09:	83 e2 f0             	and    edx,0xfffffff0
c000ba0c:	83 ca 0e             	or     edx,0xe
c000ba0f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba16:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba19:	83 e2 ef             	and    edx,0xffffffef
c000ba1c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba1f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba23:	74 04                	je     c000ba29 <IDTEntry::IDTEntry(bool)+0x43>
c000ba25:	b2 03                	mov    dl,0x3
c000ba27:	eb 02                	jmp    c000ba2b <IDTEntry::IDTEntry(bool)+0x45>
c000ba29:	b2 00                	mov    dl,0x0
c000ba2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba2f:	83 e2 03             	and    edx,0x3
c000ba32:	88 d1                	mov    cl,dl
c000ba34:	c1 e1 05             	shl    ecx,0x5
c000ba37:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba3a:	83 e2 9f             	and    edx,0xffffff9f
c000ba3d:	09 ca                	or     edx,ecx
c000ba3f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba46:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba49:	83 ca 80             	or     edx,0xffffff80
c000ba4c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba4f:	90                   	nop
c000ba50:	83 c4 04             	add    esp,0x4
c000ba53:	c3                   	ret    

c000ba54 <IDTEntry::setOffset(unsigned int)>:
c000ba54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba5c:	66 89 02             	mov    WORD PTR [edx],ax
c000ba5f:	c1 e8 10             	shr    eax,0x10
c000ba62:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba66:	c3                   	ret    
c000ba67:	90                   	nop

c000ba68 <IDT::IDT()>:
c000ba68:	90                   	nop
c000ba69:	c3                   	ret    

c000ba6a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba6e:	83 c0 30             	add    eax,0x30
c000ba71:	c3                   	ret    

c000ba72 <IDT::addEntry(IDTEntry, int)>:
c000ba72:	53                   	push   ebx
c000ba73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba7b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba83:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba86:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba8a:	5b                   	pop    ebx
c000ba8b:	c3                   	ret    

c000ba8c <IDT::addEntry(int, void (*)(), bool)>:
c000ba8c:	53                   	push   ebx
c000ba8d:	83 ec 10             	sub    esp,0x10
c000ba90:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba95:	50                   	push   eax
c000ba96:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba9a:	53                   	push   ebx
c000ba9b:	e8 46 ff ff ff       	call   c000b9e6 <IDTEntry::IDTEntry(bool)>
c000baa0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000baa4:	53                   	push   ebx
c000baa5:	e8 aa ff ff ff       	call   c000ba54 <IDTEntry::setOffset(unsigned int)>
c000baaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bab2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bab6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baba:	e8 b3 ff ff ff       	call   c000ba72 <IDT::addEntry(IDTEntry, int)>
c000babf:	83 c4 30             	add    esp,0x30
c000bac2:	5b                   	pop    ebx
c000bac3:	c3                   	ret    

c000bac4 <IDT::flush()>:
c000bac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bac8:	66 c7 05 b8 47 02 c0 ff 07 	mov    WORD PTR ds:0xc00247b8,0x7ff
c000bad1:	a3 ba 47 02 c0       	mov    ds:0xc00247ba,eax
c000bad6:	0f 01 1d b8 47 02 c0 	lidtd  ds:0xc00247b8
c000badd:	c3                   	ret    

c000bade <IDT::setup()>:
c000bade:	57                   	push   edi
c000badf:	56                   	push   esi
c000bae0:	53                   	push   ebx
c000bae1:	83 ec 10             	sub    esp,0x10
c000bae4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bae8:	6a 00                	push   0x0
c000baea:	68 23 04 00 c0       	push   0xc0000423
c000baef:	6a 00                	push   0x0
c000baf1:	53                   	push   ebx
c000baf2:	e8 95 ff ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000baf7:	6a 00                	push   0x0
c000baf9:	68 33 04 00 c0       	push   0xc0000433
c000bafe:	6a 01                	push   0x1
c000bb00:	53                   	push   ebx
c000bb01:	e8 86 ff ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bb06:	83 c4 20             	add    esp,0x20
c000bb09:	6a 00                	push   0x0
c000bb0b:	68 3d 04 00 c0       	push   0xc000043d
c000bb10:	6a 02                	push   0x2
c000bb12:	53                   	push   ebx
c000bb13:	e8 74 ff ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bb18:	6a 00                	push   0x0
c000bb1a:	68 47 04 00 c0       	push   0xc0000447
c000bb1f:	6a 03                	push   0x3
c000bb21:	53                   	push   ebx
c000bb22:	e8 65 ff ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bb27:	83 c4 20             	add    esp,0x20
c000bb2a:	6a 00                	push   0x0
c000bb2c:	68 51 04 00 c0       	push   0xc0000451
c000bb31:	6a 04                	push   0x4
c000bb33:	53                   	push   ebx
c000bb34:	e8 53 ff ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bb39:	6a 00                	push   0x0
c000bb3b:	68 5b 04 00 c0       	push   0xc000045b
c000bb40:	6a 05                	push   0x5
c000bb42:	53                   	push   ebx
c000bb43:	e8 44 ff ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bb48:	83 c4 20             	add    esp,0x20
c000bb4b:	6a 00                	push   0x0
c000bb4d:	68 65 04 00 c0       	push   0xc0000465
c000bb52:	6a 06                	push   0x6
c000bb54:	53                   	push   ebx
c000bb55:	e8 32 ff ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bb5a:	6a 00                	push   0x0
c000bb5c:	68 6f 04 00 c0       	push   0xc000046f
c000bb61:	6a 07                	push   0x7
c000bb63:	53                   	push   ebx
c000bb64:	e8 23 ff ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bb69:	83 c4 20             	add    esp,0x20
c000bb6c:	6a 00                	push   0x0
c000bb6e:	68 79 04 00 c0       	push   0xc0000479
c000bb73:	6a 08                	push   0x8
c000bb75:	53                   	push   ebx
c000bb76:	e8 11 ff ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bb7b:	6a 00                	push   0x0
c000bb7d:	68 81 04 00 c0       	push   0xc0000481
c000bb82:	6a 09                	push   0x9
c000bb84:	53                   	push   ebx
c000bb85:	e8 02 ff ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bb8a:	83 c4 20             	add    esp,0x20
c000bb8d:	6a 00                	push   0x0
c000bb8f:	68 8b 04 00 c0       	push   0xc000048b
c000bb94:	6a 0a                	push   0xa
c000bb96:	53                   	push   ebx
c000bb97:	e8 f0 fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bb9c:	6a 00                	push   0x0
c000bb9e:	68 93 04 00 c0       	push   0xc0000493
c000bba3:	6a 0b                	push   0xb
c000bba5:	53                   	push   ebx
c000bba6:	e8 e1 fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bbab:	83 c4 20             	add    esp,0x20
c000bbae:	6a 00                	push   0x0
c000bbb0:	68 9b 04 00 c0       	push   0xc000049b
c000bbb5:	6a 0c                	push   0xc
c000bbb7:	53                   	push   ebx
c000bbb8:	e8 cf fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bbbd:	6a 00                	push   0x0
c000bbbf:	68 a3 04 00 c0       	push   0xc00004a3
c000bbc4:	6a 0d                	push   0xd
c000bbc6:	53                   	push   ebx
c000bbc7:	e8 c0 fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bbcc:	83 c4 20             	add    esp,0x20
c000bbcf:	6a 00                	push   0x0
c000bbd1:	68 ab 04 00 c0       	push   0xc00004ab
c000bbd6:	6a 0e                	push   0xe
c000bbd8:	53                   	push   ebx
c000bbd9:	e8 ae fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bbde:	6a 00                	push   0x0
c000bbe0:	68 b3 04 00 c0       	push   0xc00004b3
c000bbe5:	6a 0f                	push   0xf
c000bbe7:	53                   	push   ebx
c000bbe8:	e8 9f fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bbed:	83 c4 20             	add    esp,0x20
c000bbf0:	6a 00                	push   0x0
c000bbf2:	68 bd 04 00 c0       	push   0xc00004bd
c000bbf7:	6a 10                	push   0x10
c000bbf9:	53                   	push   ebx
c000bbfa:	e8 8d fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bbff:	6a 00                	push   0x0
c000bc01:	68 c7 04 00 c0       	push   0xc00004c7
c000bc06:	6a 11                	push   0x11
c000bc08:	53                   	push   ebx
c000bc09:	e8 7e fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bc0e:	83 c4 20             	add    esp,0x20
c000bc11:	6a 00                	push   0x0
c000bc13:	68 d1 04 00 c0       	push   0xc00004d1
c000bc18:	6a 12                	push   0x12
c000bc1a:	53                   	push   ebx
c000bc1b:	e8 6c fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bc20:	6a 01                	push   0x1
c000bc22:	68 db 04 00 c0       	push   0xc00004db
c000bc27:	6a 60                	push   0x60
c000bc29:	53                   	push   ebx
c000bc2a:	e8 5d fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bc2f:	83 c4 20             	add    esp,0x20
c000bc32:	6a 00                	push   0x0
c000bc34:	68 e5 04 00 c0       	push   0xc00004e5
c000bc39:	6a 20                	push   0x20
c000bc3b:	53                   	push   ebx
c000bc3c:	e8 4b fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bc41:	6a 00                	push   0x0
c000bc43:	68 ef 04 00 c0       	push   0xc00004ef
c000bc48:	6a 21                	push   0x21
c000bc4a:	53                   	push   ebx
c000bc4b:	e8 3c fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bc50:	83 c4 20             	add    esp,0x20
c000bc53:	6a 00                	push   0x0
c000bc55:	68 f9 04 00 c0       	push   0xc00004f9
c000bc5a:	6a 22                	push   0x22
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 2a fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bc62:	6a 00                	push   0x0
c000bc64:	68 03 05 00 c0       	push   0xc0000503
c000bc69:	6a 23                	push   0x23
c000bc6b:	53                   	push   ebx
c000bc6c:	e8 1b fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bc71:	83 c4 20             	add    esp,0x20
c000bc74:	6a 00                	push   0x0
c000bc76:	68 0d 05 00 c0       	push   0xc000050d
c000bc7b:	6a 24                	push   0x24
c000bc7d:	53                   	push   ebx
c000bc7e:	e8 09 fe ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bc83:	6a 00                	push   0x0
c000bc85:	68 17 05 00 c0       	push   0xc0000517
c000bc8a:	6a 25                	push   0x25
c000bc8c:	53                   	push   ebx
c000bc8d:	e8 fa fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bc92:	83 c4 20             	add    esp,0x20
c000bc95:	6a 00                	push   0x0
c000bc97:	68 21 05 00 c0       	push   0xc0000521
c000bc9c:	6a 26                	push   0x26
c000bc9e:	53                   	push   ebx
c000bc9f:	e8 e8 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bca4:	6a 00                	push   0x0
c000bca6:	68 2b 05 00 c0       	push   0xc000052b
c000bcab:	6a 27                	push   0x27
c000bcad:	53                   	push   ebx
c000bcae:	e8 d9 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bcb3:	83 c4 20             	add    esp,0x20
c000bcb6:	6a 00                	push   0x0
c000bcb8:	68 35 05 00 c0       	push   0xc0000535
c000bcbd:	6a 28                	push   0x28
c000bcbf:	53                   	push   ebx
c000bcc0:	e8 c7 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bcc5:	6a 00                	push   0x0
c000bcc7:	68 3f 05 00 c0       	push   0xc000053f
c000bccc:	6a 29                	push   0x29
c000bcce:	53                   	push   ebx
c000bccf:	e8 b8 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bcd4:	83 c4 20             	add    esp,0x20
c000bcd7:	6a 00                	push   0x0
c000bcd9:	68 49 05 00 c0       	push   0xc0000549
c000bcde:	6a 2a                	push   0x2a
c000bce0:	53                   	push   ebx
c000bce1:	e8 a6 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bce6:	6a 00                	push   0x0
c000bce8:	68 53 05 00 c0       	push   0xc0000553
c000bced:	6a 2b                	push   0x2b
c000bcef:	53                   	push   ebx
c000bcf0:	e8 97 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bcf5:	83 c4 20             	add    esp,0x20
c000bcf8:	6a 00                	push   0x0
c000bcfa:	68 5d 05 00 c0       	push   0xc000055d
c000bcff:	6a 2c                	push   0x2c
c000bd01:	53                   	push   ebx
c000bd02:	e8 85 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bd07:	6a 00                	push   0x0
c000bd09:	68 67 05 00 c0       	push   0xc0000567
c000bd0e:	6a 2d                	push   0x2d
c000bd10:	53                   	push   ebx
c000bd11:	e8 76 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bd16:	83 c4 20             	add    esp,0x20
c000bd19:	6a 00                	push   0x0
c000bd1b:	68 71 05 00 c0       	push   0xc0000571
c000bd20:	6a 2e                	push   0x2e
c000bd22:	53                   	push   ebx
c000bd23:	e8 64 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bd28:	6a 00                	push   0x0
c000bd2a:	68 7b 05 00 c0       	push   0xc000057b
c000bd2f:	6a 2f                	push   0x2f
c000bd31:	53                   	push   ebx
c000bd32:	e8 55 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bd37:	83 c4 20             	add    esp,0x20
c000bd3a:	6a 00                	push   0x0
c000bd3c:	68 85 05 00 c0       	push   0xc0000585
c000bd41:	6a 30                	push   0x30
c000bd43:	53                   	push   ebx
c000bd44:	e8 43 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bd49:	6a 00                	push   0x0
c000bd4b:	68 8f 05 00 c0       	push   0xc000058f
c000bd50:	6a 31                	push   0x31
c000bd52:	53                   	push   ebx
c000bd53:	e8 34 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bd58:	83 c4 20             	add    esp,0x20
c000bd5b:	6a 00                	push   0x0
c000bd5d:	68 99 05 00 c0       	push   0xc0000599
c000bd62:	6a 32                	push   0x32
c000bd64:	53                   	push   ebx
c000bd65:	e8 22 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bd6a:	6a 00                	push   0x0
c000bd6c:	68 a3 05 00 c0       	push   0xc00005a3
c000bd71:	6a 33                	push   0x33
c000bd73:	53                   	push   ebx
c000bd74:	e8 13 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bd79:	83 c4 20             	add    esp,0x20
c000bd7c:	6a 00                	push   0x0
c000bd7e:	68 ad 05 00 c0       	push   0xc00005ad
c000bd83:	6a 34                	push   0x34
c000bd85:	53                   	push   ebx
c000bd86:	e8 01 fd ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bd8b:	6a 00                	push   0x0
c000bd8d:	68 b7 05 00 c0       	push   0xc00005b7
c000bd92:	6a 35                	push   0x35
c000bd94:	53                   	push   ebx
c000bd95:	e8 f2 fc ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bd9a:	83 c4 20             	add    esp,0x20
c000bd9d:	6a 00                	push   0x0
c000bd9f:	68 c1 05 00 c0       	push   0xc00005c1
c000bda4:	6a 36                	push   0x36
c000bda6:	53                   	push   ebx
c000bda7:	e8 e0 fc ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bdac:	6a 00                	push   0x0
c000bdae:	68 cb 05 00 c0       	push   0xc00005cb
c000bdb3:	6a 37                	push   0x37
c000bdb5:	53                   	push   ebx
c000bdb6:	e8 d1 fc ff ff       	call   c000ba8c <IDT::addEntry(int, void (*)(), bool)>
c000bdbb:	83 c4 20             	add    esp,0x20
c000bdbe:	e8 d8 25 00 00       	call   c000e39b <Virt::getAKernelVAS()>
c000bdc3:	52                   	push   edx
c000bdc4:	6a 03                	push   0x3
c000bdc6:	6a 02                	push   0x2
c000bdc8:	50                   	push   eax
c000bdc9:	e8 0e 2c 00 00       	call   c000e9dc <VAS::allocatePages(int, int)>
c000bdce:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdd5:	89 c6                	mov    esi,eax
c000bdd7:	e8 18 33 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000bddc:	81 c6 00 20 00 00    	add    esi,0x2000
c000bde2:	89 04 24             	mov    DWORD PTR [esp],eax
c000bde5:	89 c7                	mov    edi,eax
c000bde7:	e8 ee 1c 00 00       	call   c000dada <TSS::TSS()>
c000bdec:	83 c4 0c             	add    esp,0xc
c000bdef:	68 79 04 00 c0       	push   0xc0000479
c000bdf4:	56                   	push   esi
c000bdf5:	57                   	push   edi
c000bdf6:	e8 1f 1d 00 00       	call   c000db1a <TSS::setup(unsigned long, unsigned long)>
c000bdfb:	59                   	pop    ecx
c000bdfc:	89 c6                	mov    esi,eax
c000bdfe:	5f                   	pop    edi
c000bdff:	6a 00                	push   0x0
c000be01:	8d 44 24 14          	lea    eax,[esp+0x14]
c000be05:	50                   	push   eax
c000be06:	e8 db fb ff ff       	call   c000b9e6 <IDTEntry::IDTEntry(bool)>
c000be0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be0f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be14:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be1a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be21:	80 ce 05             	or     dh,0x5
c000be24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be28:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be2c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be33:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be39:	e8 86 fc ff ff       	call   c000bac4 <IDT::flush()>
c000be3e:	83 c4 20             	add    esp,0x20
c000be41:	5b                   	pop    ebx
c000be42:	5e                   	pop    esi
c000be43:	5f                   	pop    edi
c000be44:	c3                   	ret    

c000be45 <sbrk>:
c000be45:	55                   	push   ebp
c000be46:	57                   	push   edi
c000be47:	56                   	push   esi
c000be48:	53                   	push   ebx
c000be49:	83 ec 1c             	sub    esp,0x1c
c000be4c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be50:	85 db                	test   ebx,ebx
c000be52:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be57:	0f 84 e4 00 00 00    	je     c000bf41 <sbrk+0xfc>
c000be5d:	78 3d                	js     c000be9c <sbrk+0x57>
c000be5f:	e8 82 8a 00 00       	call   c00148e6 <thisCPU()>
c000be64:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be6a:	83 e0 01             	and    eax,0x1
c000be6d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be71:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be7a:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be80:	89 d8                	mov    eax,ebx
c000be82:	c1 f8 1f             	sar    eax,0x1f
c000be85:	25 ff 0f 00 00       	and    eax,0xfff
c000be8a:	01 c3                	add    ebx,eax
c000be8c:	c1 fb 0c             	sar    ebx,0xc
c000be8f:	89 df                	mov    edi,ebx
c000be91:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be95:	be 00 00 00 00       	mov    esi,0x0
c000be9a:	eb 2a                	jmp    c000bec6 <sbrk+0x81>
c000be9c:	83 ec 08             	sub    esp,0x8
c000be9f:	53                   	push   ebx
c000bea0:	68 e4 12 02 c0       	push   0xc00212e4
c000bea5:	e8 7f 33 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000beaa:	83 c4 10             	add    esp,0x10
c000bead:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000beb2:	e9 8a 00 00 00       	jmp    c000bf41 <sbrk+0xfc>
c000beb7:	81 05 c0 3b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023bc0,0x1000
c000bec1:	46                   	inc    esi
c000bec2:	39 f7                	cmp    edi,esi
c000bec4:	74 34                	je     c000befa <sbrk+0xb5>
c000bec6:	e8 d0 24 00 00       	call   c000e39b <Virt::getAKernelVAS()>
c000becb:	89 c3                	mov    ebx,eax
c000becd:	8b 2d c0 3b 02 c0    	mov    ebp,DWORD PTR ds:0xc0023bc0
c000bed3:	e8 f5 06 00 00       	call   c000c5cd <Phys::allocatePage()>
c000bed8:	68 01 04 00 00       	push   0x401
c000bedd:	55                   	push   ebp
c000bede:	50                   	push   eax
c000bedf:	53                   	push   ebx
c000bee0:	e8 f5 29 00 00       	call   c000e8da <VAS::mapPage(unsigned long, unsigned long, int)>
c000bee5:	83 c4 10             	add    esp,0x10
c000bee8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000beed:	74 c8                	je     c000beb7 <sbrk+0x72>
c000beef:	8b 1d c0 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023bc0
c000bef5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bef8:	eb bd                	jmp    c000beb7 <sbrk+0x72>
c000befa:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000beff:	74 48                	je     c000bf49 <sbrk+0x104>
c000bf01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bf05:	89 d3                	mov    ebx,edx
c000bf07:	c1 eb 0a             	shr    ebx,0xa
c000bf0a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf10:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf1a:	c1 e0 0c             	shl    eax,0xc
c000bf1d:	01 d0                	add    eax,edx
c000bf1f:	c1 e8 0a             	shr    eax,0xa
c000bf22:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf27:	2d 00 00 40 00       	sub    eax,0x400000
c000bf2c:	39 c3                	cmp    ebx,eax
c000bf2e:	77 0d                	ja     c000bf3d <sbrk+0xf8>
c000bf30:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf33:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf39:	39 d8                	cmp    eax,ebx
c000bf3b:	73 f3                	jae    c000bf30 <sbrk+0xeb>
c000bf3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf41:	83 c4 1c             	add    esp,0x1c
c000bf44:	5b                   	pop    ebx
c000bf45:	5e                   	pop    esi
c000bf46:	5f                   	pop    edi
c000bf47:	5d                   	pop    ebp
c000bf48:	c3                   	ret    
c000bf49:	e8 a7 38 01 00       	call   c001f7f5 <CPU::readCR3()>
c000bf4e:	83 ec 0c             	sub    esp,0xc
c000bf51:	50                   	push   eax
c000bf52:	e8 b0 38 01 00       	call   c001f807 <CPU::writeCR3(unsigned long)>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	eb e1                	jmp    c000bf3d <sbrk+0xf8>

c000bf5c <mmap>:
c000bf5c:	83 ec 18             	sub    esp,0x18
c000bf5f:	68 14 13 02 c0       	push   0xc0021314
c000bf64:	e8 e9 9a 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000bf69:	b8 00 00 00 00       	mov    eax,0x0
c000bf6e:	83 c4 1c             	add    esp,0x1c
c000bf71:	c3                   	ret    

c000bf72 <munmap>:
c000bf72:	83 ec 18             	sub    esp,0x18
c000bf75:	68 19 13 02 c0       	push   0xc0021319
c000bf7a:	e8 d3 9a 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000bf7f:	b8 00 00 00 00       	mov    eax,0x0
c000bf84:	83 c4 1c             	add    esp,0x1c
c000bf87:	c3                   	ret    

c000bf88 <liballoc_lock()>:
c000bf88:	83 ec 0c             	sub    esp,0xc
c000bf8b:	e8 cb ca 00 00       	call   c0018a5b <lockScheduler()>
c000bf90:	b8 00 00 00 00       	mov    eax,0x0
c000bf95:	83 c4 0c             	add    esp,0xc
c000bf98:	c3                   	ret    

c000bf99 <liballoc_unlock()>:
c000bf99:	83 ec 0c             	sub    esp,0xc
c000bf9c:	e8 bc ca 00 00       	call   c0018a5d <unlockScheduler()>
c000bfa1:	b8 00 00 00 00       	mov    eax,0x0
c000bfa6:	83 c4 0c             	add    esp,0xc
c000bfa9:	c3                   	ret    

c000bfaa <liballoc_alloc(int)>:
c000bfaa:	83 ec 0c             	sub    esp,0xc
c000bfad:	e8 e9 23 00 00       	call   c000e39b <Virt::getAKernelVAS()>
c000bfb2:	83 ec 04             	sub    esp,0x4
c000bfb5:	6a 01                	push   0x1
c000bfb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfbb:	50                   	push   eax
c000bfbc:	e8 1b 2a 00 00       	call   c000e9dc <VAS::allocatePages(int, int)>
c000bfc1:	83 c4 1c             	add    esp,0x1c
c000bfc4:	c3                   	ret    

c000bfc5 <liballoc_free(void*, int)>:
c000bfc5:	83 ec 0c             	sub    esp,0xc
c000bfc8:	e8 ce 23 00 00       	call   c000e39b <Virt::getAKernelVAS()>
c000bfcd:	83 ec 08             	sub    esp,0x8
c000bfd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfd4:	50                   	push   eax
c000bfd5:	e8 a2 26 00 00       	call   c000e67c <VAS::freeAllocatedPages(unsigned long)>
c000bfda:	b8 00 00 00 00       	mov    eax,0x0
c000bfdf:	83 c4 1c             	add    esp,0x1c
c000bfe2:	c3                   	ret    

c000bfe3 <realloc>:
c000bfe3:	83 ec 14             	sub    esp,0x14
c000bfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfee:	e8 63 54 ff ff       	call   c0001456 <dlrealloc>
c000bff3:	83 c4 1c             	add    esp,0x1c
c000bff6:	c3                   	ret    

c000bff7 <malloc>:
c000bff7:	83 ec 18             	sub    esp,0x18
c000bffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bffe:	e8 16 4f ff ff       	call   c0000f19 <dlmalloc>
c000c003:	83 c4 1c             	add    esp,0x1c
c000c006:	c3                   	ret    

c000c007 <free>:
c000c007:	83 ec 18             	sub    esp,0x18
c000c00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c00e:	e8 a8 4b ff ff       	call   c0000bbb <dlfree>
c000c013:	83 c4 1c             	add    esp,0x1c
c000c016:	c3                   	ret    

c000c017 <rfree>:
c000c017:	83 ec 18             	sub    esp,0x18
c000c01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c01e:	e8 e4 ff ff ff       	call   c000c007 <free>
c000c023:	83 c4 1c             	add    esp,0x1c
c000c026:	c3                   	ret    

c000c027 <calloc>:
c000c027:	56                   	push   esi
c000c028:	53                   	push   ebx
c000c029:	83 ec 10             	sub    esp,0x10
c000c02c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c030:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c035:	53                   	push   ebx
c000c036:	e8 bc ff ff ff       	call   c000bff7 <malloc>
c000c03b:	89 c6                	mov    esi,eax
c000c03d:	83 c4 0c             	add    esp,0xc
c000c040:	53                   	push   ebx
c000c041:	6a 00                	push   0x0
c000c043:	50                   	push   eax
c000c044:	e8 8f 46 ff ff       	call   c00006d8 <memset>
c000c049:	89 f0                	mov    eax,esi
c000c04b:	83 c4 14             	add    esp,0x14
c000c04e:	5b                   	pop    ebx
c000c04f:	5e                   	pop    esi
c000c050:	c3                   	ret    

c000c051 <hwTextMode_loadInData(VgaText*)>:
c000c051:	57                   	push   edi
c000c052:	56                   	push   esi
c000c053:	53                   	push   ebx
c000c054:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c058:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c05e:	85 c0                	test   eax,eax
c000c060:	7e 30                	jle    c000c092 <hwTextMode_loadInData(VgaText*)+0x41>
c000c062:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c065:	31 f6                	xor    esi,esi
c000c067:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c06a:	31 c0                	xor    eax,eax
c000c06c:	c1 e1 05             	shl    ecx,0x5
c000c06f:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c075:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c079:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c07d:	40                   	inc    eax
c000c07e:	83 f8 50             	cmp    eax,0x50
c000c081:	75 f2                	jne    c000c075 <hwTextMode_loadInData(VgaText*)+0x24>
c000c083:	46                   	inc    esi
c000c084:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c08a:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c090:	7f d5                	jg     c000c067 <hwTextMode_loadInData(VgaText*)+0x16>
c000c092:	5b                   	pop    ebx
c000c093:	5e                   	pop    esi
c000c094:	5f                   	pop    edi
c000c095:	c3                   	ret    

c000c096 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c096:	56                   	push   esi
c000c097:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c09c:	53                   	push   ebx
c000c09d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c0a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0a5:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c0ab:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c0b1:	c1 e0 04             	shl    eax,0x4
c000c0b4:	83 e6 0f             	and    esi,0xf
c000c0b7:	25 ff 00 00 00       	and    eax,0xff
c000c0bc:	83 c2 02             	add    edx,0x2
c000c0bf:	09 f0                	or     eax,esi
c000c0c1:	41                   	inc    ecx
c000c0c2:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0c6:	c1 e0 08             	shl    eax,0x8
c000c0c9:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0cf:	09 f0                	or     eax,esi
c000c0d1:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0d5:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0db:	75 c8                	jne    c000c0a5 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0dd:	5b                   	pop    ebx
c000c0de:	5e                   	pop    esi
c000c0df:	c3                   	ret    

c000c0e0 <hwTextMode_showCursor(VgaText*, bool)>:
c000c0e0:	56                   	push   esi
c000c0e1:	53                   	push   ebx
c000c0e2:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0e7:	74 38                	je     c000c121 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0e9:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0ee:	b0 0a                	mov    al,0xa
c000c0f0:	89 da                	mov    edx,ebx
c000c0f2:	ee                   	out    dx,al
c000c0f3:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0f8:	89 ca                	mov    edx,ecx
c000c0fa:	ec                   	in     al,dx
c000c0fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0ff:	b2 0f                	mov    dl,0xf
c000c101:	83 e0 c0             	and    eax,0xffffffc0
c000c104:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c10a:	09 d0                	or     eax,edx
c000c10c:	89 ca                	mov    edx,ecx
c000c10e:	ee                   	out    dx,al
c000c10f:	b0 0b                	mov    al,0xb
c000c111:	89 da                	mov    edx,ebx
c000c113:	ee                   	out    dx,al
c000c114:	89 ca                	mov    edx,ecx
c000c116:	ec                   	in     al,dx
c000c117:	83 e0 e0             	and    eax,0xffffffe0
c000c11a:	83 c8 0f             	or     eax,0xf
c000c11d:	ee                   	out    dx,al
c000c11e:	5b                   	pop    ebx
c000c11f:	5e                   	pop    esi
c000c120:	c3                   	ret    
c000c121:	b0 0a                	mov    al,0xa
c000c123:	ba d4 03 00 00       	mov    edx,0x3d4
c000c128:	ee                   	out    dx,al
c000c129:	b0 20                	mov    al,0x20
c000c12b:	ba d5 03 00 00       	mov    edx,0x3d5
c000c130:	ee                   	out    dx,al
c000c131:	5b                   	pop    ebx
c000c132:	5e                   	pop    esi
c000c133:	c3                   	ret    

c000c134 <hwTextMode_update(VgaText*)>:
c000c134:	c3                   	ret    

c000c135 <hwTextMode_updateCursor(VgaText*)>:
c000c135:	56                   	push   esi
c000c136:	b9 19 00 00 00       	mov    ecx,0x19
c000c13b:	53                   	push   ebx
c000c13c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c140:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c146:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c14c:	29 d1                	sub    ecx,edx
c000c14e:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c154:	01 d9                	add    ecx,ebx
c000c156:	b0 0f                	mov    al,0xf
c000c158:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c15b:	c1 e1 04             	shl    ecx,0x4
c000c15e:	01 f1                	add    ecx,esi
c000c160:	be d4 03 00 00       	mov    esi,0x3d4
c000c165:	89 f2                	mov    edx,esi
c000c167:	ee                   	out    dx,al
c000c168:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c16d:	88 c8                	mov    al,cl
c000c16f:	89 da                	mov    edx,ebx
c000c171:	ee                   	out    dx,al
c000c172:	b0 0e                	mov    al,0xe
c000c174:	89 f2                	mov    edx,esi
c000c176:	ee                   	out    dx,al
c000c177:	89 c8                	mov    eax,ecx
c000c179:	89 da                	mov    edx,ebx
c000c17b:	66 c1 e8 08          	shr    ax,0x8
c000c17f:	ee                   	out    dx,al
c000c180:	5b                   	pop    ebx
c000c181:	5e                   	pop    esi
c000c182:	c3                   	ret    

c000c183 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c183:	ba da 03 00 00       	mov    edx,0x3da
c000c188:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c18d:	75 18                	jne    c000c1a7 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c18f:	ec                   	in     al,dx
c000c190:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c195:	b0 30                	mov    al,0x30
c000c197:	89 ca                	mov    edx,ecx
c000c199:	ee                   	out    dx,al
c000c19a:	ba c1 03 00 00       	mov    edx,0x3c1
c000c19f:	ec                   	in     al,dx
c000c1a0:	83 c8 08             	or     eax,0x8
c000c1a3:	89 ca                	mov    edx,ecx
c000c1a5:	ee                   	out    dx,al
c000c1a6:	c3                   	ret    
c000c1a7:	ec                   	in     al,dx
c000c1a8:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1ad:	b0 30                	mov    al,0x30
c000c1af:	89 ca                	mov    edx,ecx
c000c1b1:	ee                   	out    dx,al
c000c1b2:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1b7:	ec                   	in     al,dx
c000c1b8:	83 e0 f7             	and    eax,0xfffffff7
c000c1bb:	89 ca                	mov    edx,ecx
c000c1bd:	ee                   	out    dx,al
c000c1be:	c3                   	ret    

c000c1bf <hwTextMode_scrollScreen(VgaText*)>:
c000c1bf:	55                   	push   ebp
c000c1c0:	bd 02 00 00 00       	mov    ebp,0x2
c000c1c5:	57                   	push   edi
c000c1c6:	56                   	push   esi
c000c1c7:	53                   	push   ebx
c000c1c8:	83 ec 1c             	sub    esp,0x1c
c000c1cb:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1d7:	31 c0                	xor    eax,eax
c000c1d9:	eb 0b                	jmp    c000c1e6 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1db:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1e1:	74 58                	je     c000c23b <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1e3:	43                   	inc    ebx
c000c1e4:	89 f0                	mov    eax,esi
c000c1e6:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1ec:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1f2:	88 13                	mov    BYTE PTR [ebx],dl
c000c1f4:	8d 70 01             	lea    esi,[eax+0x1]
c000c1f7:	83 fd 18             	cmp    ebp,0x18
c000c1fa:	75 df                	jne    c000c1db <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1fc:	a8 01                	test   al,0x1
c000c1fe:	75 13                	jne    c000c213 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c200:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c203:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c209:	75 d8                	jne    c000c1e3 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c20b:	83 c4 1c             	add    esp,0x1c
c000c20e:	5b                   	pop    ebx
c000c20f:	5e                   	pop    esi
c000c210:	5f                   	pop    edi
c000c211:	5d                   	pop    ebp
c000c212:	c3                   	ret    
c000c213:	52                   	push   edx
c000c214:	31 c0                	xor    eax,eax
c000c216:	52                   	push   edx
c000c217:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c21b:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c221:	50                   	push   eax
c000c222:	31 c0                	xor    eax,eax
c000c224:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c228:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c22e:	50                   	push   eax
c000c22f:	e8 84 0b 00 00       	call   c000cdb8 <VgaText::combineColours(unsigned char, unsigned char)>
c000c234:	83 c4 10             	add    esp,0x10
c000c237:	88 07                	mov    BYTE PTR [edi],al
c000c239:	eb c8                	jmp    c000c203 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c23f:	45                   	inc    ebp
c000c240:	05 a0 00 00 00       	add    eax,0xa0
c000c245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c249:	eb 88                	jmp    c000c1d3 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c24b <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c24b:	56                   	push   esi
c000c24c:	31 c0                	xor    eax,eax
c000c24e:	53                   	push   ebx
c000c24f:	83 ec 0c             	sub    esp,0xc
c000c252:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c256:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c25a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c25e:	50                   	push   eax
c000c25f:	31 c0                	xor    eax,eax
c000c261:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c265:	50                   	push   eax
c000c266:	e8 4d 0b 00 00       	call   c000cdb8 <VgaText::combineColours(unsigned char, unsigned char)>
c000c26b:	5a                   	pop    edx
c000c26c:	25 ff 00 00 00       	and    eax,0xff
c000c271:	59                   	pop    ecx
c000c272:	50                   	push   eax
c000c273:	89 f0                	mov    eax,esi
c000c275:	0f be f0             	movsx  esi,al
c000c278:	56                   	push   esi
c000c279:	e8 e0 0b 00 00       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000c27e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c282:	ba 19 00 00 00       	mov    edx,0x19
c000c287:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c28d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c290:	29 f2                	sub    edx,esi
c000c292:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c296:	c1 e1 04             	shl    ecx,0x4
c000c299:	8d 14 92             	lea    edx,[edx+edx*4]
c000c29c:	01 d9                	add    ecx,ebx
c000c29e:	c1 e2 04             	shl    edx,0x4
c000c2a1:	01 ca                	add    edx,ecx
c000c2a3:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c2ab:	83 c4 14             	add    esp,0x14
c000c2ae:	5b                   	pop    ebx
c000c2af:	5e                   	pop    esi
c000c2b0:	c3                   	ret    

c000c2b1 <setupTextMode()>:
c000c2b1:	c7 05 58 48 02 c0 83 c1 00 c0 	mov    DWORD PTR ds:0xc0024858,0xc000c183
c000c2bb:	c7 05 44 48 02 c0 51 c0 00 c0 	mov    DWORD PTR ds:0xc0024844,0xc000c051
c000c2c5:	c7 05 40 48 02 c0 96 c0 00 c0 	mov    DWORD PTR ds:0xc0024840,0xc000c096
c000c2cf:	c7 05 4c 48 02 c0 bf c1 00 c0 	mov    DWORD PTR ds:0xc002484c,0xc000c1bf
c000c2d9:	c7 05 54 48 02 c0 e0 c0 00 c0 	mov    DWORD PTR ds:0xc0024854,0xc000c0e0
c000c2e3:	c7 05 48 48 02 c0 34 c1 00 c0 	mov    DWORD PTR ds:0xc0024848,0xc000c134
c000c2ed:	c7 05 50 48 02 c0 35 c1 00 c0 	mov    DWORD PTR ds:0xc0024850,0xc000c135
c000c2f7:	c7 05 5c 48 02 c0 4b c2 00 c0 	mov    DWORD PTR ds:0xc002485c,0xc000c24b
c000c301:	c3                   	ret    

c000c302 <kernel_main>:
c000c302:	57                   	push   edi
c000c303:	bf f9 03 00 00       	mov    edi,0x3f9
c000c308:	56                   	push   esi
c000c309:	31 f6                	xor    esi,esi
c000c30b:	53                   	push   ebx
c000c30c:	83 ec 10             	sub    esp,0x10
c000c30f:	e8 fe 08 00 00       	call   c000cc12 <installVgaTextImplementation()>
c000c314:	e8 98 ff ff ff       	call   c000c2b1 <setupTextMode()>
c000c319:	89 f0                	mov    eax,esi
c000c31b:	89 fa                	mov    edx,edi
c000c31d:	ee                   	out    dx,al
c000c31e:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c323:	b0 80                	mov    al,0x80
c000c325:	89 da                	mov    edx,ebx
c000c327:	ee                   	out    dx,al
c000c328:	b1 03                	mov    cl,0x3
c000c32a:	ba f8 03 00 00       	mov    edx,0x3f8
c000c32f:	88 c8                	mov    al,cl
c000c331:	ee                   	out    dx,al
c000c332:	89 f0                	mov    eax,esi
c000c334:	89 fa                	mov    edx,edi
c000c336:	ee                   	out    dx,al
c000c337:	88 c8                	mov    al,cl
c000c339:	89 da                	mov    edx,ebx
c000c33b:	ee                   	out    dx,al
c000c33c:	b0 c7                	mov    al,0xc7
c000c33e:	ba fa 03 00 00       	mov    edx,0x3fa
c000c343:	ee                   	out    dx,al
c000c344:	b0 0b                	mov    al,0xb
c000c346:	ba fc 03 00 00       	mov    edx,0x3fc
c000c34b:	ee                   	out    dx,al
c000c34c:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c351:	83 ec 0c             	sub    esp,0xc
c000c354:	05 ff 0f 00 00       	add    eax,0xfff
c000c359:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c35e:	50                   	push   eax
c000c35f:	e8 6d 03 00 00       	call   c000c6d1 <Phys::physicalMemorySetup(unsigned int)>
c000c364:	e8 b6 1f 00 00       	call   c000e31f <Virt::virtualMemorySetup()>
c000c369:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c36f:	83 c4 10             	add    esp,0x10
c000c372:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c378:	75 0e                	jne    c000c388 <kernel_main+0x86>
c000c37a:	89 d8                	mov    eax,ebx
c000c37c:	25 48 03 00 00       	and    eax,0x348
c000c381:	3d 00 03 00 00       	cmp    eax,0x300
c000c386:	74 10                	je     c000c398 <kernel_main+0x96>
c000c388:	83 ec 0c             	sub    esp,0xc
c000c38b:	68 c7 28 02 c0       	push   0xc00228c7
c000c390:	e8 bd 96 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000c395:	83 c4 10             	add    esp,0x10
c000c398:	83 ec 0c             	sub    esp,0xc
c000c39b:	89 1d c0 47 02 c0    	mov    DWORD PTR ds:0xc00247c0,ebx
c000c3a1:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c3a5:	53                   	push   ebx
c000c3a6:	e8 11 21 00 00       	call   c000e4bc <VAS::VAS()>
c000c3ab:	89 1d 04 49 02 c0    	mov    DWORD PTR ds:0xc0024904,ebx
c000c3b1:	e8 6a 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3b6:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3bd:	e8 32 2d 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000c3c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3c5:	89 c6                	mov    esi,eax
c000c3c7:	e8 78 ea ff ff       	call   c000ae44 <Computer::Computer()>
c000c3cc:	6a 00                	push   0x0
c000c3ce:	6a 00                	push   0x0
c000c3d0:	89 35 a8 47 02 c0    	mov    DWORD PTR ds:0xc00247a8,esi
c000c3d6:	6a 00                	push   0x0
c000c3d8:	56                   	push   esi
c000c3d9:	e8 5a f2 ff ff       	call   c000b638 <Computer::open(int, int, void*)>
c000c3de:	83 c4 14             	add    esp,0x14
c000c3e1:	53                   	push   ebx
c000c3e2:	e8 87 23 00 00       	call   c000e76e <VAS::~VAS()>
c000c3e7:	c7 04 24 20 13 02 c0 	mov    DWORD PTR [esp],0xc0021320
c000c3ee:	e8 5f 96 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000c3f3:	83 c4 20             	add    esp,0x20
c000c3f6:	5b                   	pop    ebx
c000c3f7:	5e                   	pop    esi
c000c3f8:	5f                   	pop    edi
c000c3f9:	c3                   	ret    

c000c3fa <Phys::allocateDMA(unsigned long)>:
c000c3fa:	57                   	push   edi
c000c3fb:	31 d2                	xor    edx,edx
c000c3fd:	56                   	push   esi
c000c3fe:	31 ff                	xor    edi,edi
c000c400:	53                   	push   ebx
c000c401:	31 c9                	xor    ecx,ecx
c000c403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c407:	31 f6                	xor    esi,esi
c000c409:	05 ff 0f 00 00       	add    eax,0xfff
c000c40e:	c1 e8 0c             	shr    eax,0xc
c000c411:	eb 17                	jmp    c000c42a <Phys::allocateDMA(unsigned long)+0x30>
c000c413:	85 c9                	test   ecx,ecx
c000c415:	75 04                	jne    c000c41b <Phys::allocateDMA(unsigned long)+0x21>
c000c417:	89 d7                	mov    edi,edx
c000c419:	89 d6                	mov    esi,edx
c000c41b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c41e:	39 d8                	cmp    eax,ebx
c000c420:	74 1f                	je     c000c441 <Phys::allocateDMA(unsigned long)+0x47>
c000c422:	42                   	inc    edx
c000c423:	89 d9                	mov    ecx,ebx
c000c425:	83 fa 2f             	cmp    edx,0x2f
c000c428:	7f 11                	jg     c000c43b <Phys::allocateDMA(unsigned long)+0x41>
c000c42a:	80 ba 00 48 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdb800],0x0
c000c431:	74 e0                	je     c000c413 <Phys::allocateDMA(unsigned long)+0x19>
c000c433:	31 c9                	xor    ecx,ecx
c000c435:	42                   	inc    edx
c000c436:	83 fa 2f             	cmp    edx,0x2f
c000c439:	7e ef                	jle    c000c42a <Phys::allocateDMA(unsigned long)+0x30>
c000c43b:	5b                   	pop    ebx
c000c43c:	31 c0                	xor    eax,eax
c000c43e:	5e                   	pop    esi
c000c43f:	5f                   	pop    edi
c000c440:	c3                   	ret    
c000c441:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c445:	89 d3                	mov    ebx,edx
c000c447:	c1 fb 1f             	sar    ebx,0x1f
c000c44a:	83 e3 0f             	and    ebx,0xf
c000c44d:	01 d3                	add    ebx,edx
c000c44f:	89 f2                	mov    edx,esi
c000c451:	c1 fb 04             	sar    ebx,0x4
c000c454:	c1 fa 04             	sar    edx,0x4
c000c457:	39 da                	cmp    edx,ebx
c000c459:	75 30                	jne    c000c48b <Phys::allocateDMA(unsigned long)+0x91>
c000c45b:	85 c0                	test   eax,eax
c000c45d:	74 1b                	je     c000c47a <Phys::allocateDMA(unsigned long)+0x80>
c000c45f:	bf 00 48 02 c0       	mov    edi,0xc0024800
c000c464:	8d 96 00 48 02 c0    	lea    edx,[esi-0x3ffdb800]
c000c46a:	83 f7 ff             	xor    edi,0xffffffff
c000c46d:	29 f7                	sub    edi,esi
c000c46f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c472:	42                   	inc    edx
c000c473:	8d 04 17             	lea    eax,[edi+edx*1]
c000c476:	39 c1                	cmp    ecx,eax
c000c478:	7f f5                	jg     c000c46f <Phys::allocateDMA(unsigned long)+0x75>
c000c47a:	85 db                	test   ebx,ebx
c000c47c:	74 13                	je     c000c491 <Phys::allocateDMA(unsigned long)+0x97>
c000c47e:	5b                   	pop    ebx
c000c47f:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c485:	c1 e0 0c             	shl    eax,0xc
c000c488:	5e                   	pop    esi
c000c489:	5f                   	pop    edi
c000c48a:	c3                   	ret    
c000c48b:	89 fa                	mov    edx,edi
c000c48d:	31 c9                	xor    ecx,ecx
c000c48f:	eb a4                	jmp    c000c435 <Phys::allocateDMA(unsigned long)+0x3b>
c000c491:	c1 e6 0c             	shl    esi,0xc
c000c494:	5b                   	pop    ebx
c000c495:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c49b:	5e                   	pop    esi
c000c49c:	5f                   	pop    edi
c000c49d:	c3                   	ret    

c000c49e <Phys::freeDMA(unsigned long, unsigned long)>:
c000c49e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4a6:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c4ac:	c1 e9 0c             	shr    ecx,0xc
c000c4af:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4b4:	76 25                	jbe    c000c4db <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4b6:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4bb:	c1 e8 0c             	shr    eax,0xc
c000c4be:	8d 50 10             	lea    edx,[eax+0x10]
c000c4c1:	85 c9                	test   ecx,ecx
c000c4c3:	74 15                	je     c000c4da <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4c5:	8d 82 00 48 02 c0    	lea    eax,[edx-0x3ffdb800]
c000c4cb:	8d 94 11 00 48 02 c0 	lea    edx,[ecx+edx*1-0x3ffdb800]
c000c4d2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4d5:	40                   	inc    eax
c000c4d6:	39 d0                	cmp    eax,edx
c000c4d8:	75 f8                	jne    c000c4d2 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4da:	c3                   	ret    
c000c4db:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4e1:	c1 ea 0c             	shr    edx,0xc
c000c4e4:	eb db                	jmp    c000c4c1 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4e6 <Phys::setPageState(unsigned long, bool)>:
c000c4e6:	56                   	push   esi
c000c4e7:	ba 01 00 00 00       	mov    edx,0x1
c000c4ec:	53                   	push   ebx
c000c4ed:	8b 35 c4 3b 02 c0    	mov    esi,DWORD PTR ds:0xc0023bc4
c000c4f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4fb:	89 c8                	mov    eax,ecx
c000c4fd:	83 e1 07             	and    ecx,0x7
c000c500:	c1 e8 03             	shr    eax,0x3
c000c503:	01 c6                	add    esi,eax
c000c505:	d3 e2                	shl    edx,cl
c000c507:	83 f2 ff             	xor    edx,0xffffffff
c000c50a:	20 16                	and    BYTE PTR [esi],dl
c000c50c:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c512:	01 d0                	add    eax,edx
c000c514:	d3 e3                	shl    ebx,cl
c000c516:	8a 08                	mov    cl,BYTE PTR [eax]
c000c518:	09 d9                	or     ecx,ebx
c000c51a:	88 08                	mov    BYTE PTR [eax],cl
c000c51c:	5b                   	pop    ebx
c000c51d:	5e                   	pop    esi
c000c51e:	c3                   	ret    

c000c51f <Phys::getPageState(unsigned long)>:
c000c51f:	53                   	push   ebx
c000c520:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c526:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c52a:	31 db                	xor    ebx,ebx
c000c52c:	89 c8                	mov    eax,ecx
c000c52e:	83 e1 07             	and    ecx,0x7
c000c531:	c1 e8 03             	shr    eax,0x3
c000c534:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c537:	89 d8                	mov    eax,ebx
c000c539:	5b                   	pop    ebx
c000c53a:	d3 f8                	sar    eax,cl
c000c53c:	83 e0 01             	and    eax,0x1
c000c53f:	c3                   	ret    

c000c540 <Phys::freePage(unsigned long)>:
c000c540:	53                   	push   ebx
c000c541:	83 ec 08             	sub    esp,0x8
c000c544:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c548:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c54e:	76 5a                	jbe    c000c5aa <Phys::freePage(unsigned long)+0x6a>
c000c550:	c1 eb 0c             	shr    ebx,0xc
c000c553:	53                   	push   ebx
c000c554:	e8 c6 ff ff ff       	call   c000c51f <Phys::getPageState(unsigned long)>
c000c559:	5a                   	pop    edx
c000c55a:	84 c0                	test   al,al
c000c55c:	74 5e                	je     c000c5bc <Phys::freePage(unsigned long)+0x7c>
c000c55e:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c563:	48                   	dec    eax
c000c564:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c569:	8d 04 80             	lea    eax,[eax+eax*4]
c000c56c:	8d 04 80             	lea    eax,[eax+eax*4]
c000c56f:	c1 e0 02             	shl    eax,0x2
c000c572:	89 c2                	mov    edx,eax
c000c574:	c1 fa 1f             	sar    edx,0x1f
c000c577:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c57d:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c583:	75 12                	jne    c000c597 <Phys::freePage(unsigned long)+0x57>
c000c585:	51                   	push   ecx
c000c586:	51                   	push   ecx
c000c587:	6a 00                	push   0x0
c000c589:	53                   	push   ebx
c000c58a:	e8 57 ff ff ff       	call   c000c4e6 <Phys::setPageState(unsigned long, bool)>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	83 c4 08             	add    esp,0x8
c000c595:	5b                   	pop    ebx
c000c596:	c3                   	ret    
c000c597:	83 ec 0c             	sub    esp,0xc
c000c59a:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c59f:	50                   	push   eax
c000c5a0:	e8 01 0a 00 00       	call   c000cfa6 <VgaText::updateRAMUsageDisplay(int)>
c000c5a5:	83 c4 10             	add    esp,0x10
c000c5a8:	eb db                	jmp    c000c585 <Phys::freePage(unsigned long)+0x45>
c000c5aa:	68 00 10 00 00       	push   0x1000
c000c5af:	53                   	push   ebx
c000c5b0:	e8 e9 fe ff ff       	call   c000c49e <Phys::freeDMA(unsigned long, unsigned long)>
c000c5b5:	59                   	pop    ecx
c000c5b6:	5b                   	pop    ebx
c000c5b7:	83 c4 08             	add    esp,0x8
c000c5ba:	5b                   	pop    ebx
c000c5bb:	c3                   	ret    
c000c5bc:	c7 44 24 10 3b 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002133b
c000c5c4:	83 c4 08             	add    esp,0x8
c000c5c7:	5b                   	pop    ebx
c000c5c8:	e9 85 94 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>

c000c5cd <Phys::allocatePage()>:
c000c5cd:	56                   	push   esi
c000c5ce:	53                   	push   ebx
c000c5cf:	51                   	push   ecx
c000c5d0:	8b 35 e0 47 02 c0    	mov    esi,DWORD PTR ds:0xc00247e0
c000c5d6:	89 f3                	mov    ebx,esi
c000c5d8:	eb 0a                	jmp    c000c5e4 <Phys::allocatePage()+0x17>
c000c5da:	89 1d e0 47 02 c0    	mov    DWORD PTR ds:0xc00247e0,ebx
c000c5e0:	39 de                	cmp    esi,ebx
c000c5e2:	74 24                	je     c000c608 <Phys::allocatePage()+0x3b>
c000c5e4:	53                   	push   ebx
c000c5e5:	e8 35 ff ff ff       	call   c000c51f <Phys::getPageState(unsigned long)>
c000c5ea:	5a                   	pop    edx
c000c5eb:	84 c0                	test   al,al
c000c5ed:	74 5a                	je     c000c649 <Phys::allocatePage()+0x7c>
c000c5ef:	43                   	inc    ebx
c000c5f0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5f6:	75 e2                	jne    c000c5da <Phys::allocatePage()+0xd>
c000c5f8:	31 db                	xor    ebx,ebx
c000c5fa:	c7 05 e0 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247e0,0x0
c000c604:	39 de                	cmp    esi,ebx
c000c606:	75 dc                	jne    c000c5e4 <Phys::allocatePage()+0x17>
c000c608:	83 ec 0c             	sub    esp,0xc
c000c60b:	68 51 13 02 c0       	push   0xc0021351
c000c610:	e8 14 2c 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000c615:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c61c:	e8 d9 fd ff ff       	call   c000c3fa <Phys::allocateDMA(unsigned long)>
c000c621:	83 c4 10             	add    esp,0x10
c000c624:	85 c0                	test   eax,eax
c000c626:	75 5a                	jne    c000c682 <Phys::allocatePage()+0xb5>
c000c628:	83 ec 0c             	sub    esp,0xc
c000c62b:	68 62 13 02 c0       	push   0xc0021362
c000c630:	e8 1d 94 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000c635:	83 c4 10             	add    esp,0x10
c000c638:	8b 1d e0 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e0
c000c63e:	53                   	push   ebx
c000c63f:	e8 db fe ff ff       	call   c000c51f <Phys::getPageState(unsigned long)>
c000c644:	5a                   	pop    edx
c000c645:	84 c0                	test   al,al
c000c647:	75 a6                	jne    c000c5ef <Phys::allocatePage()+0x22>
c000c649:	6a 01                	push   0x1
c000c64b:	53                   	push   ebx
c000c64c:	e8 95 fe ff ff       	call   c000c4e6 <Phys::setPageState(unsigned long, bool)>
c000c651:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c656:	59                   	pop    ecx
c000c657:	40                   	inc    eax
c000c658:	5b                   	pop    ebx
c000c659:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c65e:	8d 04 80             	lea    eax,[eax+eax*4]
c000c661:	8d 04 80             	lea    eax,[eax+eax*4]
c000c664:	c1 e0 02             	shl    eax,0x2
c000c667:	89 c2                	mov    edx,eax
c000c669:	c1 fa 1f             	sar    edx,0x1f
c000c66c:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c672:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c678:	75 0c                	jne    c000c686 <Phys::allocatePage()+0xb9>
c000c67a:	a1 e0 47 02 c0       	mov    eax,ds:0xc00247e0
c000c67f:	c1 e0 0c             	shl    eax,0xc
c000c682:	5a                   	pop    edx
c000c683:	5b                   	pop    ebx
c000c684:	5e                   	pop    esi
c000c685:	c3                   	ret    
c000c686:	83 ec 0c             	sub    esp,0xc
c000c689:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c68e:	50                   	push   eax
c000c68f:	e8 12 09 00 00       	call   c000cfa6 <VgaText::updateRAMUsageDisplay(int)>
c000c694:	83 c4 10             	add    esp,0x10
c000c697:	eb e1                	jmp    c000c67a <Phys::allocatePage()+0xad>

c000c699 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c699:	56                   	push   esi
c000c69a:	53                   	push   ebx
c000c69b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c69f:	39 1d e4 47 02 c0    	cmp    DWORD PTR ds:0xc00247e4,ebx
c000c6a5:	73 06                	jae    c000c6ad <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c6a7:	89 1d e4 47 02 c0    	mov    DWORD PTR ds:0xc00247e4,ebx
c000c6ad:	c1 eb 0c             	shr    ebx,0xc
c000c6b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6b4:	c1 e8 0c             	shr    eax,0xc
c000c6b7:	39 d8                	cmp    eax,ebx
c000c6b9:	73 13                	jae    c000c6ce <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6bb:	6a 00                	push   0x0
c000c6bd:	8d 70 01             	lea    esi,[eax+0x1]
c000c6c0:	50                   	push   eax
c000c6c1:	e8 20 fe ff ff       	call   c000c4e6 <Phys::setPageState(unsigned long, bool)>
c000c6c6:	5a                   	pop    edx
c000c6c7:	89 f0                	mov    eax,esi
c000c6c9:	59                   	pop    ecx
c000c6ca:	39 f3                	cmp    ebx,esi
c000c6cc:	75 ed                	jne    c000c6bb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6ce:	5b                   	pop    ebx
c000c6cf:	5e                   	pop    esi
c000c6d0:	c3                   	ret    

c000c6d1 <Phys::physicalMemorySetup(unsigned int)>:
c000c6d1:	55                   	push   ebp
c000c6d2:	57                   	push   edi
c000c6d3:	56                   	push   esi
c000c6d4:	53                   	push   ebx
c000c6d5:	31 db                	xor    ebx,ebx
c000c6d7:	83 ec 40             	sub    esp,0x40
c000c6da:	6a 30                	push   0x30
c000c6dc:	6a 00                	push   0x0
c000c6de:	68 00 48 02 c0       	push   0xc0024800
c000c6e3:	e8 f0 3f ff ff       	call   c00006d8 <memset>
c000c6e8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6f1:	05 00 10 00 00       	add    eax,0x1000
c000c6f6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6fa:	83 c4 10             	add    esp,0x10
c000c6fd:	56                   	push   esi
c000c6fe:	56                   	push   esi
c000c6ff:	6a 01                	push   0x1
c000c701:	53                   	push   ebx
c000c702:	43                   	inc    ebx
c000c703:	e8 de fd ff ff       	call   c000c4e6 <Phys::setPageState(unsigned long, bool)>
c000c708:	83 c4 10             	add    esp,0x10
c000c70b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c711:	75 ea                	jne    c000c6fd <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c713:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c719:	66 85 c0             	test   ax,ax
c000c71c:	0f 84 3b 01 00 00    	je     c000c85d <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c722:	89 c7                	mov    edi,eax
c000c724:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c72c:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c732:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c737:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c73b:	eb 6d                	jmp    c000c7aa <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c73d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c741:	89 c1                	mov    ecx,eax
c000c743:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c747:	0f 83 bc 00 00 00    	jae    c000c809 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c74d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c751:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c756:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c75a:	39 f2                	cmp    edx,esi
c000c75c:	19 f8                	sbb    eax,edi
c000c75e:	73 07                	jae    c000c767 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c760:	be 00 00 0a 00       	mov    esi,0xa0000
c000c765:	31 ff                	xor    edi,edi
c000c767:	89 f2                	mov    edx,esi
c000c769:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c76e:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c774:	89 f9                	mov    ecx,edi
c000c776:	83 d1 ff             	adc    ecx,0xffffffff
c000c779:	39 d0                	cmp    eax,edx
c000c77b:	b8 00 00 00 00       	mov    eax,0x0
c000c780:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c784:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c788:	19 c8                	sbb    eax,ecx
c000c78a:	0f 82 0d 01 00 00    	jb     c000c89d <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c790:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c794:	83 c3 18             	add    ebx,0x18
c000c797:	41                   	inc    ecx
c000c798:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c79c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c7a0:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c7a4:	0f 84 c3 00 00 00    	je     c000c86d <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7aa:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c7ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c7af:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c7b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7b6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c7b9:	01 f0                	add    eax,esi
c000c7bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7c6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7ca:	11 fa                	adc    edx,edi
c000c7cc:	55                   	push   ebp
c000c7cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7d1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7d9:	51                   	push   ecx
c000c7da:	56                   	push   esi
c000c7db:	68 9c 13 02 c0       	push   0xc002139c
c000c7e0:	e8 44 2a 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000c7e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7e9:	83 c4 10             	add    esp,0x10
c000c7ec:	09 f8                	or     eax,edi
c000c7ee:	75 7d                	jne    c000c86d <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7f0:	83 fd 01             	cmp    ebp,0x1
c000c7f3:	75 11                	jne    c000c806 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7f5:	ba 00 00 08 00       	mov    edx,0x80000
c000c7fa:	89 c1                	mov    ecx,eax
c000c7fc:	39 f2                	cmp    edx,esi
c000c7fe:	19 f9                	sbb    ecx,edi
c000c800:	0f 83 37 ff ff ff    	jae    c000c73d <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c806:	4d                   	dec    ebp
c000c807:	75 87                	jne    c000c790 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c809:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c80d:	31 d2                	xor    edx,edx
c000c80f:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c813:	89 c8                	mov    eax,ecx
c000c815:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c819:	19 d1                	sbb    ecx,edx
c000c81b:	0f 82 6f ff ff ff    	jb     c000c790 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c821:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c826:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c82a:	b9 00 00 00 00       	mov    ecx,0x0
c000c82f:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c833:	0f 83 57 ff ff ff    	jae    c000c790 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c839:	39 c6                	cmp    esi,eax
c000c83b:	19 d7                	sbb    edi,edx
c000c83d:	73 6a                	jae    c000c8a9 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c83f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c843:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c847:	29 c7                	sub    edi,eax
c000c849:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c84d:	19 d5                	sbb    ebp,edx
c000c84f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c853:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c857:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c85b:	eb 4c                	jmp    c000c8a9 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c85d:	83 ec 0c             	sub    esp,0xc
c000c860:	68 70 13 02 c0       	push   0xc0021370
c000c865:	e8 e8 91 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000c86a:	83 c4 10             	add    esp,0x10
c000c86d:	bb 40 01 00 00       	mov    ebx,0x140
c000c872:	50                   	push   eax
c000c873:	50                   	push   eax
c000c874:	6a 00                	push   0x0
c000c876:	53                   	push   ebx
c000c877:	e8 6a fc ff ff       	call   c000c4e6 <Phys::setPageState(unsigned long, bool)>
c000c87c:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c882:	43                   	inc    ebx
c000c883:	42                   	inc    edx
c000c884:	83 c4 10             	add    esp,0x10
c000c887:	89 15 f0 47 02 c0    	mov    DWORD PTR ds:0xc00247f0,edx
c000c88d:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c893:	75 dd                	jne    c000c872 <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c895:	83 c4 3c             	add    esp,0x3c
c000c898:	5b                   	pop    ebx
c000c899:	5e                   	pop    esi
c000c89a:	5f                   	pop    edi
c000c89b:	5d                   	pop    ebp
c000c89c:	c3                   	ret    
c000c89d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c8a1:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c8a9:	56                   	push   esi
c000c8aa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c8ae:	56                   	push   esi
c000c8af:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c8b3:	57                   	push   edi
c000c8b4:	68 c0 13 02 c0       	push   0xc00213c0
c000c8b9:	e8 6b 29 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000c8be:	5d                   	pop    ebp
c000c8bf:	58                   	pop    eax
c000c8c0:	56                   	push   esi
c000c8c1:	57                   	push   edi
c000c8c2:	e8 d2 fd ff ff       	call   c000c699 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8c7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8cf:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8d3:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c8d9:	83 c4 0c             	add    esp,0xc
c000c8dc:	01 d0                	add    eax,edx
c000c8de:	a3 f0 47 02 c0       	mov    ds:0xc00247f0,eax
c000c8e3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8ea:	52                   	push   edx
c000c8eb:	50                   	push   eax
c000c8ec:	68 7e 13 02 c0       	push   0xc002137e
c000c8f1:	e8 33 29 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	e9 92 fe ff ff       	jmp    c000c790 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8fe <Pipe::isAtty()>:
c000c8fe:	31 c0                	xor    eax,eax
c000c900:	c3                   	ret    
c000c901:	90                   	nop

c000c902 <Pipe::~Pipe()>:
c000c902:	83 ec 0c             	sub    esp,0xc
c000c905:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000c90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c90e:	89 10                	mov    DWORD PTR [eax],edx
c000c910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c914:	83 ec 0c             	sub    esp,0xc
c000c917:	50                   	push   eax
c000c918:	e8 5d 16 00 00       	call   c000df7a <UnixFile::~UnixFile()>
c000c91d:	83 c4 10             	add    esp,0x10
c000c920:	90                   	nop
c000c921:	83 c4 0c             	add    esp,0xc
c000c924:	c3                   	ret    
c000c925:	90                   	nop

c000c926 <Pipe::~Pipe()>:
c000c926:	83 ec 0c             	sub    esp,0xc
c000c929:	83 ec 0c             	sub    esp,0xc
c000c92c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c930:	e8 cd ff ff ff       	call   c000c902 <Pipe::~Pipe()>
c000c935:	83 c4 10             	add    esp,0x10
c000c938:	83 ec 08             	sub    esp,0x8
c000c93b:	6a 20                	push   0x20
c000c93d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c941:	e8 bd 27 00 00       	call   c000f103 <operator delete(void*, unsigned long)>
c000c946:	83 c4 10             	add    esp,0x10
c000c949:	83 c4 0c             	add    esp,0xc
c000c94c:	c3                   	ret    
c000c94d:	90                   	nop

c000c94e <Pipe::read(unsigned long long, void*, int*)>:
c000c94e:	55                   	push   ebp
c000c94f:	57                   	push   edi
c000c950:	56                   	push   esi
c000c951:	53                   	push   ebx
c000c952:	83 ec 1c             	sub    esp,0x1c
c000c955:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c959:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c95d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c961:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c964:	89 c8                	mov    eax,ecx
c000c966:	99                   	cdq    
c000c967:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c96b:	74 19                	je     c000c986 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c96d:	39 f9                	cmp    ecx,edi
c000c96f:	89 d1                	mov    ecx,edx
c000c971:	19 f1                	sbb    ecx,esi
c000c973:	73 11                	jae    c000c986 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c975:	e8 e1 c0 00 00       	call   c0018a5b <lockScheduler()>
c000c97a:	e8 25 c4 00 00       	call   c0018da4 <schedule()>
c000c97f:	e8 d9 c0 00 00       	call   c0018a5d <unlockScheduler()>
c000c984:	eb db                	jmp    c000c961 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c986:	39 f8                	cmp    eax,edi
c000c988:	89 d1                	mov    ecx,edx
c000c98a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c98e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c992:	19 f1                	sbb    ecx,esi
c000c994:	73 08                	jae    c000c99e <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c996:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9a1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9a4:	29 c6                	sub    esi,eax
c000c9a6:	89 f1                	mov    ecx,esi
c000c9a8:	c1 f9 1f             	sar    ecx,0x1f
c000c9ab:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c9af:	89 ca                	mov    edx,ecx
c000c9b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9b5:	19 d1                	sbb    ecx,edx
c000c9b7:	73 04                	jae    c000c9bd <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9b9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9c1:	89 fd                	mov    ebp,edi
c000c9c3:	29 f5                	sub    ebp,esi
c000c9c5:	85 f6                	test   esi,esi
c000c9c7:	74 12                	je     c000c9db <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9c9:	52                   	push   edx
c000c9ca:	56                   	push   esi
c000c9cb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9ce:	50                   	push   eax
c000c9cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9d3:	e8 ca 3c ff ff       	call   c00006a2 <memcpy>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	85 ed                	test   ebp,ebp
c000c9dd:	74 12                	je     c000c9f1 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9df:	50                   	push   eax
c000c9e0:	55                   	push   ebp
c000c9e1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9e4:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9e8:	56                   	push   esi
c000c9e9:	e8 b4 3c ff ff       	call   c00006a2 <memcpy>
c000c9ee:	83 c4 10             	add    esp,0x10
c000c9f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9f4:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9f7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9fa:	99                   	cdq    
c000c9fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9ff:	89 f7                	mov    edi,esi
c000ca01:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ca05:	c1 ff 1f             	sar    edi,0x1f
c000ca08:	57                   	push   edi
c000ca09:	56                   	push   esi
c000ca0a:	52                   	push   edx
c000ca0b:	50                   	push   eax
c000ca0c:	e8 0b 2c 01 00       	call   c001f61c <__umoddi3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca17:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca1c:	75 10                	jne    c000ca2e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca1e:	83 ec 0c             	sub    esp,0xc
c000ca21:	68 e9 13 02 c0       	push   0xc00213e9
c000ca26:	e8 27 90 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000ca2b:	83 c4 10             	add    esp,0x10
c000ca2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca36:	89 10                	mov    DWORD PTR [eax],edx
c000ca38:	83 c4 1c             	add    esp,0x1c
c000ca3b:	31 c0                	xor    eax,eax
c000ca3d:	5b                   	pop    ebx
c000ca3e:	5e                   	pop    esi
c000ca3f:	5f                   	pop    edi
c000ca40:	5d                   	pop    ebp
c000ca41:	c3                   	ret    

c000ca42 <Pipe::write(unsigned long long, void*, int*)>:
c000ca42:	55                   	push   ebp
c000ca43:	57                   	push   edi
c000ca44:	56                   	push   esi
c000ca45:	53                   	push   ebx
c000ca46:	83 ec 1c             	sub    esp,0x1c
c000ca49:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca51:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca55:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca58:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca5b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca5e:	89 de                	mov    esi,ebx
c000ca60:	89 df                	mov    edi,ebx
c000ca62:	c1 ff 1f             	sar    edi,0x1f
c000ca65:	01 c6                	add    esi,eax
c000ca67:	89 c8                	mov    eax,ecx
c000ca69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca6d:	11 d7                	adc    edi,edx
c000ca6f:	99                   	cdq    
c000ca70:	89 d0                	mov    eax,edx
c000ca72:	39 f1                	cmp    ecx,esi
c000ca74:	19 f8                	sbb    eax,edi
c000ca76:	b8 01 00 00 00       	mov    eax,0x1
c000ca7b:	0f 82 80 00 00 00    	jb     c000cb01 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca81:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca84:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca87:	01 d8                	add    eax,ebx
c000ca89:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca8d:	99                   	cdq    
c000ca8e:	f7 f9                	idiv   ecx
c000ca90:	29 d1                	sub    ecx,edx
c000ca92:	89 d7                	mov    edi,edx
c000ca94:	89 c8                	mov    eax,ecx
c000ca96:	99                   	cdq    
c000ca97:	39 ce                	cmp    esi,ecx
c000ca99:	19 d3                	sbb    ebx,edx
c000ca9b:	bb 00 00 00 00       	mov    ebx,0x0
c000caa0:	72 04                	jb     c000caa6 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000caa2:	89 f3                	mov    ebx,esi
c000caa4:	29 cb                	sub    ebx,ecx
c000caa6:	89 f1                	mov    ecx,esi
c000caa8:	29 d9                	sub    ecx,ebx
c000caaa:	74 1a                	je     c000cac6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000caac:	52                   	push   edx
c000caad:	51                   	push   ecx
c000caae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cab2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cab6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000cab9:	57                   	push   edi
c000caba:	e8 e3 3b ff ff       	call   c00006a2 <memcpy>
c000cabf:	83 c4 10             	add    esp,0x10
c000cac2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cac6:	85 db                	test   ebx,ebx
c000cac8:	74 12                	je     c000cadc <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000caca:	50                   	push   eax
c000cacb:	53                   	push   ebx
c000cacc:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cad0:	51                   	push   ecx
c000cad1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cad4:	e8 c9 3b ff ff       	call   c00006a2 <memcpy>
c000cad9:	83 c4 10             	add    esp,0x10
c000cadc:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cadf:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cae4:	75 10                	jne    c000caf6 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cae6:	83 ec 0c             	sub    esp,0xc
c000cae9:	68 05 14 02 c0       	push   0xc0021405
c000caee:	e8 5f 8f 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000caf3:	83 c4 10             	add    esp,0x10
c000caf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cafa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cafd:	89 38                	mov    DWORD PTR [eax],edi
c000caff:	31 c0                	xor    eax,eax
c000cb01:	83 c4 1c             	add    esp,0x1c
c000cb04:	5b                   	pop    ebx
c000cb05:	5e                   	pop    esi
c000cb06:	5f                   	pop    edi
c000cb07:	5d                   	pop    ebp
c000cb08:	c3                   	ret    
c000cb09:	90                   	nop

c000cb0a <Pipe::Pipe(int)>:
c000cb0a:	83 ec 0c             	sub    esp,0xc
c000cb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb11:	83 ec 08             	sub    esp,0x8
c000cb14:	6a 00                	push   0x0
c000cb16:	50                   	push   eax
c000cb17:	e8 bc 12 00 00       	call   c000ddd8 <UnixFile::UnixFile(int)>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000cb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb28:	89 10                	mov    DWORD PTR [eax],edx
c000cb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb32:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb39:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb44:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb4f:	83 ec 0c             	sub    esp,0xc
c000cb52:	50                   	push   eax
c000cb53:	e8 9f f4 ff ff       	call   c000bff7 <malloc>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	89 c2                	mov    edx,eax
c000cb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb61:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb68:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb6c:	90                   	nop
c000cb6d:	83 c4 0c             	add    esp,0xc
c000cb70:	c3                   	ret    
c000cb71:	90                   	nop

c000cb72 <VgaText::isAtty()>:
c000cb72:	b0 01                	mov    al,0x1
c000cb74:	c3                   	ret    
c000cb75:	90                   	nop

c000cb76 <VgaText::~VgaText()>:
c000cb76:	83 ec 0c             	sub    esp,0xc
c000cb79:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000cb7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb82:	89 10                	mov    DWORD PTR [eax],edx
c000cb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb88:	83 ec 0c             	sub    esp,0xc
c000cb8b:	50                   	push   eax
c000cb8c:	e8 e9 13 00 00       	call   c000df7a <UnixFile::~UnixFile()>
c000cb91:	83 c4 10             	add    esp,0x10
c000cb94:	90                   	nop
c000cb95:	83 c4 0c             	add    esp,0xc
c000cb98:	c3                   	ret    
c000cb99:	90                   	nop

c000cb9a <VgaText::~VgaText()>:
c000cb9a:	83 ec 0c             	sub    esp,0xc
c000cb9d:	83 ec 0c             	sub    esp,0xc
c000cba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cba4:	e8 cd ff ff ff       	call   c000cb76 <VgaText::~VgaText()>
c000cba9:	83 c4 10             	add    esp,0x10
c000cbac:	83 ec 08             	sub    esp,0x8
c000cbaf:	68 60 12 00 00       	push   0x1260
c000cbb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb8:	e8 46 25 00 00       	call   c000f103 <operator delete(void*, unsigned long)>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	83 c4 0c             	add    esp,0xc
c000cbc3:	c3                   	ret    

c000cbc4 <VgaText::read(unsigned long long, void*, int*)>:
c000cbc4:	83 ec 10             	sub    esp,0x10
c000cbc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbcb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbd3:	e8 63 58 00 00       	call   c001243b <readKeyboard(VgaText*, char*, unsigned long)>
c000cbd8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbdc:	89 02                	mov    DWORD PTR [edx],eax
c000cbde:	31 c0                	xor    eax,eax
c000cbe0:	83 c4 1c             	add    esp,0x1c
c000cbe3:	c3                   	ret    

c000cbe4 <setTerminalScrollLock(bool)>:
c000cbe4:	c3                   	ret    

c000cbe5 <addToTerminalCycle(VgaText*)>:
c000cbe5:	8b 15 60 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024860
c000cbeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbef:	85 d2                	test   edx,edx
c000cbf1:	75 0c                	jne    c000cbff <addToTerminalCycle(VgaText*)+0x1a>
c000cbf3:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbf9:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000cbfe:	c3                   	ret    
c000cbff:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cc05:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cc0b:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cc11:	c3                   	ret    

c000cc12 <installVgaTextImplementation()>:
c000cc12:	83 ec 10             	sub    esp,0x10
c000cc15:	6a 20                	push   0x20
c000cc17:	6a 00                	push   0x0
c000cc19:	68 40 48 02 c0       	push   0xc0024840
c000cc1e:	e8 b5 3a ff ff       	call   c00006d8 <memset>
c000cc23:	83 c4 1c             	add    esp,0x1c
c000cc26:	c3                   	ret    

c000cc27 <scrollTerminalScrollLock(int)>:
c000cc27:	c3                   	ret    

c000cc28 <VgaText::load()>:
c000cc28:	53                   	push   ebx
c000cc29:	31 c0                	xor    eax,eax
c000cc2b:	83 ec 58             	sub    esp,0x58
c000cc2e:	89 e2                	mov    edx,esp
c000cc30:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc34:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc38:	40                   	inc    eax
c000cc39:	83 f8 50             	cmp    eax,0x50
c000cc3c:	75 f6                	jne    c000cc34 <VgaText::load()+0xc>
c000cc3e:	31 c0                	xor    eax,eax
c000cc40:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc47:	84 c9                	test   cl,cl
c000cc49:	74 06                	je     c000cc51 <VgaText::load()+0x29>
c000cc4b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc4e:	40                   	inc    eax
c000cc4f:	eb ef                	jmp    c000cc40 <VgaText::load()+0x18>
c000cc51:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc57:	85 c0                	test   eax,eax
c000cc59:	74 09                	je     c000cc64 <VgaText::load()+0x3c>
c000cc5b:	51                   	push   ecx
c000cc5c:	51                   	push   ecx
c000cc5d:	52                   	push   edx
c000cc5e:	53                   	push   ebx
c000cc5f:	ff d0                	call   eax
c000cc61:	83 c4 10             	add    esp,0x10
c000cc64:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc6a:	85 c0                	test   eax,eax
c000cc6c:	74 09                	je     c000cc77 <VgaText::load()+0x4f>
c000cc6e:	83 ec 0c             	sub    esp,0xc
c000cc71:	53                   	push   ebx
c000cc72:	ff d0                	call   eax
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	83 c4 58             	add    esp,0x58
c000cc7a:	5b                   	pop    ebx
c000cc7b:	c3                   	ret    

c000cc7c <VgaText::updateCursor()>:
c000cc7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc80:	39 05 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,eax
c000cc86:	75 0c                	jne    c000cc94 <VgaText::updateCursor()+0x18>
c000cc88:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc8e:	85 c0                	test   eax,eax
c000cc90:	74 02                	je     c000cc94 <VgaText::updateCursor()+0x18>
c000cc92:	ff e0                	jmp    eax
c000cc94:	c3                   	ret    
c000cc95:	90                   	nop

c000cc96 <VgaText::showCursor(bool)>:
c000cc96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc9e:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cca4:	c3                   	ret    
c000cca5:	90                   	nop

c000cca6 <VgaText::disableBlink(bool)>:
c000cca6:	56                   	push   esi
c000cca7:	53                   	push   ebx
c000cca8:	51                   	push   ecx
c000cca9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccb1:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000ccb7:	75 18                	jne    c000ccd1 <VgaText::disableBlink(bool)+0x2b>
c000ccb9:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ccbf:	85 c0                	test   eax,eax
c000ccc1:	74 0e                	je     c000ccd1 <VgaText::disableBlink(bool)+0x2b>
c000ccc3:	89 f1                	mov    ecx,esi
c000ccc5:	52                   	push   edx
c000ccc6:	52                   	push   edx
c000ccc7:	0f b6 d1             	movzx  edx,cl
c000ccca:	52                   	push   edx
c000cccb:	53                   	push   ebx
c000cccc:	ff d0                	call   eax
c000ccce:	83 c4 10             	add    esp,0x10
c000ccd1:	89 f0                	mov    eax,esi
c000ccd3:	83 f0 01             	xor    eax,0x1
c000ccd6:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccdc:	58                   	pop    eax
c000ccdd:	5b                   	pop    ebx
c000ccde:	5e                   	pop    esi
c000ccdf:	c3                   	ret    

c000cce0 <VgaText::doANSI_SGR(int)>:
c000cce0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cce8:	85 d2                	test   edx,edx
c000ccea:	75 14                	jne    c000cd00 <VgaText::doANSI_SGR(int)+0x20>
c000ccec:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccf2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccf8:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ccfe:	eb 65                	jmp    c000cd65 <VgaText::doANSI_SGR(int)+0x85>
c000cd00:	83 fa 07             	cmp    edx,0x7
c000cd03:	75 14                	jne    c000cd19 <VgaText::doANSI_SGR(int)+0x39>
c000cd05:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cd0b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cd11:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd17:	eb 4c                	jmp    c000cd65 <VgaText::doANSI_SGR(int)+0x85>
c000cd19:	83 fa 1b             	cmp    edx,0x1b
c000cd1c:	74 ce                	je     c000ccec <VgaText::doANSI_SGR(int)+0xc>
c000cd1e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd21:	83 f9 07             	cmp    ecx,0x7
c000cd24:	77 09                	ja     c000cd2f <VgaText::doANSI_SGR(int)+0x4f>
c000cd26:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd2d:	eb 20                	jmp    c000cd4f <VgaText::doANSI_SGR(int)+0x6f>
c000cd2f:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd32:	83 f9 07             	cmp    ecx,0x7
c000cd35:	77 09                	ja     c000cd40 <VgaText::doANSI_SGR(int)+0x60>
c000cd37:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd3e:	eb 25                	jmp    c000cd65 <VgaText::doANSI_SGR(int)+0x85>
c000cd40:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd43:	83 f9 07             	cmp    ecx,0x7
c000cd46:	77 0e                	ja     c000cd56 <VgaText::doANSI_SGR(int)+0x76>
c000cd48:	8b 14 95 b8 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc548]
c000cd4f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd55:	c3                   	ret    
c000cd56:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd59:	83 f9 07             	cmp    ecx,0x7
c000cd5c:	77 0d                	ja     c000cd6b <VgaText::doANSI_SGR(int)+0x8b>
c000cd5e:	8b 14 95 90 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc570]
c000cd65:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd6b:	c3                   	ret    

c000cd6c <VgaText::setDefaultBgColour(VgaColour)>:
c000cd6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd74:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd7a:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd80:	c3                   	ret    
c000cd81:	90                   	nop

c000cd82 <VgaText::setDefaultFgColour(VgaColour)>:
c000cd82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd8a:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd90:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd96:	c3                   	ret    
c000cd97:	90                   	nop

c000cd98 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd98:	53                   	push   ebx
c000cd99:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cda1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cda5:	51                   	push   ecx
c000cda6:	e8 c1 ff ff ff       	call   c000cd6c <VgaText::setDefaultBgColour(VgaColour)>
c000cdab:	58                   	pop    eax
c000cdac:	5a                   	pop    edx
c000cdad:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cdb1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cdb5:	5b                   	pop    ebx
c000cdb6:	eb ca                	jmp    c000cd82 <VgaText::setDefaultFgColour(VgaColour)>

c000cdb8 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cdb8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cdbd:	c1 e2 04             	shl    edx,0x4
c000cdc0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdc4:	83 e0 0f             	and    eax,0xf
c000cdc7:	09 d0                	or     eax,edx
c000cdc9:	c3                   	ret    

c000cdca <VgaText::scrollScreen()>:
c000cdca:	57                   	push   edi
c000cdcb:	56                   	push   esi
c000cdcc:	be 01 00 00 00       	mov    esi,0x1
c000cdd1:	53                   	push   ebx
c000cdd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdd6:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cddc:	31 ff                	xor    edi,edi
c000cdde:	01 d9                	add    ecx,ebx
c000cde0:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cde3:	83 fe 17             	cmp    esi,0x17
c000cde6:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdec:	75 28                	jne    c000ce16 <VgaText::scrollScreen()+0x4c>
c000cdee:	f7 c7 01 00 00 00    	test   edi,0x1
c000cdf4:	74 1c                	je     c000ce12 <VgaText::scrollScreen()+0x48>
c000cdf6:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cdfd:	50                   	push   eax
c000cdfe:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ce05:	50                   	push   eax
c000ce06:	e8 ad ff ff ff       	call   c000cdb8 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce0b:	5a                   	pop    edx
c000ce0c:	5a                   	pop    edx
c000ce0d:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ce10:	eb 04                	jmp    c000ce16 <VgaText::scrollScreen()+0x4c>
c000ce12:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce16:	47                   	inc    edi
c000ce17:	41                   	inc    ecx
c000ce18:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce1e:	75 c0                	jne    c000cde0 <VgaText::scrollScreen()+0x16>
c000ce20:	46                   	inc    esi
c000ce21:	83 fe 18             	cmp    esi,0x18
c000ce24:	75 b0                	jne    c000cdd6 <VgaText::scrollScreen()+0xc>
c000ce26:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000ce2c:	75 24                	jne    c000ce52 <VgaText::scrollScreen()+0x88>
c000ce2e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce35:	74 08                	je     c000ce3f <VgaText::scrollScreen()+0x75>
c000ce37:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce3d:	eb 13                	jmp    c000ce52 <VgaText::scrollScreen()+0x88>
c000ce3f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce45:	85 c0                	test   eax,eax
c000ce47:	74 09                	je     c000ce52 <VgaText::scrollScreen()+0x88>
c000ce49:	83 ec 0c             	sub    esp,0xc
c000ce4c:	53                   	push   ebx
c000ce4d:	ff d0                	call   eax
c000ce4f:	83 c4 10             	add    esp,0x10
c000ce52:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce56:	5b                   	pop    ebx
c000ce57:	5e                   	pop    esi
c000ce58:	5f                   	pop    edi
c000ce59:	e9 1e fe ff ff       	jmp    c000cc7c <VgaText::updateCursor()>

c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce5e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce63:	c1 e0 08             	shl    eax,0x8
c000ce66:	89 c2                	mov    edx,eax
c000ce68:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce6d:	09 d0                	or     eax,edx
c000ce6f:	c3                   	ret    

c000ce70 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce70:	53                   	push   ebx
c000ce71:	83 ec 08             	sub    esp,0x8
c000ce74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce7d:	50                   	push   eax
c000ce7e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce83:	50                   	push   eax
c000ce84:	e8 2f ff ff ff       	call   c000cdb8 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce89:	5a                   	pop    edx
c000ce8a:	5b                   	pop    ebx
c000ce8b:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce90:	0f b6 c0             	movzx  eax,al
c000ce93:	50                   	push   eax
c000ce94:	53                   	push   ebx
c000ce95:	e8 c4 ff ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000ce9a:	5a                   	pop    edx
c000ce9b:	5a                   	pop    edx
c000ce9c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000cea2:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000cea6:	0f b7 d2             	movzx  edx,dx
c000cea9:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ceae:	39 0d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ecx
c000ceb4:	75 14                	jne    c000ceca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceb6:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cebc:	85 c0                	test   eax,eax
c000cebe:	74 0a                	je     c000ceca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cec0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cec4:	83 c4 08             	add    esp,0x8
c000cec7:	5b                   	pop    ebx
c000cec8:	ff e0                	jmp    eax
c000ceca:	83 c4 08             	add    esp,0x8
c000cecd:	5b                   	pop    ebx
c000cece:	c3                   	ret    
c000cecf:	90                   	nop

c000ced0 <VgaText::getCursorX()>:
c000ced0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced4:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ceda:	c3                   	ret    
c000cedb:	90                   	nop

c000cedc <VgaText::getCursorY()>:
c000cedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cee0:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cee6:	c3                   	ret    
c000cee7:	90                   	nop

c000cee8 <VgaText::setCursor(int, int)>:
c000cee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cef0:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cef6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cefa:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cf00:	e9 77 fd ff ff       	jmp    c000cc7c <VgaText::updateCursor()>
c000cf05:	90                   	nop

c000cf06 <VgaText::setCursorX(int)>:
c000cf06:	83 ec 10             	sub    esp,0x10
c000cf09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf0d:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cf13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf17:	50                   	push   eax
c000cf18:	e8 cb ff ff ff       	call   c000cee8 <VgaText::setCursor(int, int)>
c000cf1d:	83 c4 1c             	add    esp,0x1c
c000cf20:	c3                   	ret    
c000cf21:	90                   	nop

c000cf22 <VgaText::setCursorY(int)>:
c000cf22:	83 ec 10             	sub    esp,0x10
c000cf25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf2d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf33:	50                   	push   eax
c000cf34:	e8 af ff ff ff       	call   c000cee8 <VgaText::setCursor(int, int)>
c000cf39:	83 c4 1c             	add    esp,0x1c
c000cf3c:	c3                   	ret    
c000cf3d:	90                   	nop

c000cf3e <VgaText::incrementCursor(bool)>:
c000cf3e:	56                   	push   esi
c000cf3f:	53                   	push   ebx
c000cf40:	51                   	push   ecx
c000cf41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf49:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf4f:	40                   	inc    eax
c000cf50:	83 f8 50             	cmp    eax,0x50
c000cf53:	74 08                	je     c000cf5d <VgaText::incrementCursor(bool)+0x1f>
c000cf55:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf5b:	eb 33                	jmp    c000cf90 <VgaText::incrementCursor(bool)+0x52>
c000cf5d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf63:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf6d:	8d 50 01             	lea    edx,[eax+0x1]
c000cf70:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf76:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf7c:	75 12                	jne    c000cf90 <VgaText::incrementCursor(bool)+0x52>
c000cf7e:	83 ec 0c             	sub    esp,0xc
c000cf81:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf87:	53                   	push   ebx
c000cf88:	e8 3d fe ff ff       	call   c000cdca <VgaText::scrollScreen()>
c000cf8d:	83 c4 10             	add    esp,0x10
c000cf90:	89 f0                	mov    eax,esi
c000cf92:	84 c0                	test   al,al
c000cf94:	74 0c                	je     c000cfa2 <VgaText::incrementCursor(bool)+0x64>
c000cf96:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf9a:	5a                   	pop    edx
c000cf9b:	5b                   	pop    ebx
c000cf9c:	5e                   	pop    esi
c000cf9d:	e9 da fc ff ff       	jmp    c000cc7c <VgaText::updateCursor()>
c000cfa2:	58                   	pop    eax
c000cfa3:	5b                   	pop    ebx
c000cfa4:	5e                   	pop    esi
c000cfa5:	c3                   	ret    

c000cfa6 <VgaText::updateRAMUsageDisplay(int)>:
c000cfa6:	53                   	push   ebx
c000cfa7:	bb 0a 00 00 00       	mov    ebx,0xa
c000cfac:	6a 0f                	push   0xf
c000cfae:	6a 00                	push   0x0
c000cfb0:	e8 03 fe ff ff       	call   c000cdb8 <VgaText::combineColours(unsigned char, unsigned char)>
c000cfb5:	5a                   	pop    edx
c000cfb6:	59                   	pop    ecx
c000cfb7:	0f b6 c8             	movzx  ecx,al
c000cfba:	51                   	push   ecx
c000cfbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfbf:	99                   	cdq    
c000cfc0:	f7 fb                	idiv   ebx
c000cfc2:	83 c0 30             	add    eax,0x30
c000cfc5:	89 d3                	mov    ebx,edx
c000cfc7:	0f be c0             	movsx  eax,al
c000cfca:	50                   	push   eax
c000cfcb:	e8 8e fe ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfd0:	5a                   	pop    edx
c000cfd1:	83 c3 30             	add    ebx,0x30
c000cfd4:	5a                   	pop    edx
c000cfd5:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfdb:	0f b6 db             	movzx  ebx,bl
c000cfde:	51                   	push   ecx
c000cfdf:	53                   	push   ebx
c000cfe0:	e8 79 fe ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfe5:	5b                   	pop    ebx
c000cfe6:	5a                   	pop    edx
c000cfe7:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfed:	51                   	push   ecx
c000cfee:	6a 25                	push   0x25
c000cff0:	e8 69 fe ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000cff5:	59                   	pop    ecx
c000cff6:	5b                   	pop    ebx
c000cff7:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cffd:	5b                   	pop    ebx
c000cffe:	c3                   	ret    
c000cfff:	90                   	nop

c000d000 <VgaText::updateDiskUsage()>:
c000d000:	55                   	push   ebp
c000d001:	bd 10 27 00 00       	mov    ebp,0x2710
c000d006:	57                   	push   edi
c000d007:	56                   	push   esi
c000d008:	53                   	push   ebx
c000d009:	6a 0f                	push   0xf
c000d00b:	6a 00                	push   0x0
c000d00d:	e8 a6 fd ff ff       	call   c000cdb8 <VgaText::combineColours(unsigned char, unsigned char)>
c000d012:	0f b6 d8             	movzx  ebx,al
c000d015:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d01a:	5a                   	pop    edx
c000d01b:	99                   	cdq    
c000d01c:	f7 fd                	idiv   ebp
c000d01e:	59                   	pop    ecx
c000d01f:	b9 0a 00 00 00       	mov    ecx,0xa
c000d024:	99                   	cdq    
c000d025:	f7 f9                	idiv   ecx
c000d027:	53                   	push   ebx
c000d028:	8d 42 30             	lea    eax,[edx+0x30]
c000d02b:	0f b6 c0             	movzx  eax,al
c000d02e:	50                   	push   eax
c000d02f:	e8 2a fe ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d034:	5e                   	pop    esi
c000d035:	5f                   	pop    edi
c000d036:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d03c:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d041:	bf e8 03 00 00       	mov    edi,0x3e8
c000d046:	99                   	cdq    
c000d047:	f7 ff                	idiv   edi
c000d049:	99                   	cdq    
c000d04a:	f7 f9                	idiv   ecx
c000d04c:	53                   	push   ebx
c000d04d:	8d 42 30             	lea    eax,[edx+0x30]
c000d050:	0f b6 c0             	movzx  eax,al
c000d053:	50                   	push   eax
c000d054:	e8 05 fe ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d059:	5a                   	pop    edx
c000d05a:	5e                   	pop    esi
c000d05b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d061:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d066:	be 64 00 00 00       	mov    esi,0x64
c000d06b:	99                   	cdq    
c000d06c:	f7 fe                	idiv   esi
c000d06e:	99                   	cdq    
c000d06f:	f7 f9                	idiv   ecx
c000d071:	53                   	push   ebx
c000d072:	8d 42 30             	lea    eax,[edx+0x30]
c000d075:	0f b6 c0             	movzx  eax,al
c000d078:	50                   	push   eax
c000d079:	e8 e0 fd ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d07e:	5a                   	pop    edx
c000d07f:	5a                   	pop    edx
c000d080:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d086:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d08b:	53                   	push   ebx
c000d08c:	99                   	cdq    
c000d08d:	f7 f9                	idiv   ecx
c000d08f:	99                   	cdq    
c000d090:	f7 f9                	idiv   ecx
c000d092:	8d 42 30             	lea    eax,[edx+0x30]
c000d095:	0f b6 c0             	movzx  eax,al
c000d098:	50                   	push   eax
c000d099:	e8 c0 fd ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d09e:	5a                   	pop    edx
c000d09f:	5a                   	pop    edx
c000d0a0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d0a6:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d0ab:	53                   	push   ebx
c000d0ac:	99                   	cdq    
c000d0ad:	f7 f9                	idiv   ecx
c000d0af:	8d 42 30             	lea    eax,[edx+0x30]
c000d0b2:	0f b6 c0             	movzx  eax,al
c000d0b5:	50                   	push   eax
c000d0b6:	e8 a3 fd ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d0bb:	5a                   	pop    edx
c000d0bc:	5a                   	pop    edx
c000d0bd:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0c3:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0c8:	53                   	push   ebx
c000d0c9:	99                   	cdq    
c000d0ca:	f7 fd                	idiv   ebp
c000d0cc:	99                   	cdq    
c000d0cd:	f7 f9                	idiv   ecx
c000d0cf:	8d 42 30             	lea    eax,[edx+0x30]
c000d0d2:	0f b6 c0             	movzx  eax,al
c000d0d5:	50                   	push   eax
c000d0d6:	e8 83 fd ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d0db:	5d                   	pop    ebp
c000d0dc:	5a                   	pop    edx
c000d0dd:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0e3:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0e8:	53                   	push   ebx
c000d0e9:	99                   	cdq    
c000d0ea:	f7 ff                	idiv   edi
c000d0ec:	99                   	cdq    
c000d0ed:	f7 f9                	idiv   ecx
c000d0ef:	8d 42 30             	lea    eax,[edx+0x30]
c000d0f2:	0f b6 c0             	movzx  eax,al
c000d0f5:	50                   	push   eax
c000d0f6:	e8 63 fd ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d0fb:	5f                   	pop    edi
c000d0fc:	5d                   	pop    ebp
c000d0fd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d103:	53                   	push   ebx
c000d104:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d109:	99                   	cdq    
c000d10a:	f7 fe                	idiv   esi
c000d10c:	99                   	cdq    
c000d10d:	f7 f9                	idiv   ecx
c000d10f:	8d 42 30             	lea    eax,[edx+0x30]
c000d112:	0f b6 c0             	movzx  eax,al
c000d115:	50                   	push   eax
c000d116:	e8 43 fd ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d11b:	5a                   	pop    edx
c000d11c:	5e                   	pop    esi
c000d11d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d123:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d128:	53                   	push   ebx
c000d129:	99                   	cdq    
c000d12a:	f7 f9                	idiv   ecx
c000d12c:	99                   	cdq    
c000d12d:	f7 f9                	idiv   ecx
c000d12f:	8d 42 30             	lea    eax,[edx+0x30]
c000d132:	0f b6 c0             	movzx  eax,al
c000d135:	50                   	push   eax
c000d136:	e8 23 fd ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d13b:	5f                   	pop    edi
c000d13c:	5d                   	pop    ebp
c000d13d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d143:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d148:	53                   	push   ebx
c000d149:	99                   	cdq    
c000d14a:	f7 f9                	idiv   ecx
c000d14c:	83 c2 30             	add    edx,0x30
c000d14f:	0f b6 d2             	movzx  edx,dl
c000d152:	52                   	push   edx
c000d153:	e8 06 fd ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d158:	5a                   	pop    edx
c000d159:	59                   	pop    ecx
c000d15a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d160:	5b                   	pop    ebx
c000d161:	5e                   	pop    esi
c000d162:	5f                   	pop    edi
c000d163:	5d                   	pop    ebp
c000d164:	c3                   	ret    
c000d165:	90                   	nop

c000d166 <VgaText::updateTitle()>:
c000d166:	53                   	push   ebx
c000d167:	31 c0                	xor    eax,eax
c000d169:	83 ec 58             	sub    esp,0x58
c000d16c:	89 e1                	mov    ecx,esp
c000d16e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d172:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d176:	40                   	inc    eax
c000d177:	83 f8 50             	cmp    eax,0x50
c000d17a:	75 f6                	jne    c000d172 <VgaText::updateTitle()+0xc>
c000d17c:	31 c0                	xor    eax,eax
c000d17e:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d185:	84 db                	test   bl,bl
c000d187:	74 06                	je     c000d18f <VgaText::updateTitle()+0x29>
c000d189:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d18c:	40                   	inc    eax
c000d18d:	eb ef                	jmp    c000d17e <VgaText::updateTitle()+0x18>
c000d18f:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d195:	85 c0                	test   eax,eax
c000d197:	74 09                	je     c000d1a2 <VgaText::updateTitle()+0x3c>
c000d199:	53                   	push   ebx
c000d19a:	53                   	push   ebx
c000d19b:	51                   	push   ecx
c000d19c:	52                   	push   edx
c000d19d:	ff d0                	call   eax
c000d19f:	83 c4 10             	add    esp,0x10
c000d1a2:	e8 59 fe ff ff       	call   c000d000 <VgaText::updateDiskUsage()>
c000d1a7:	83 c4 58             	add    esp,0x58
c000d1aa:	5b                   	pop    ebx
c000d1ab:	c3                   	ret    

c000d1ac <VgaText::setTitleTextColour(VgaColour)>:
c000d1ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1b4:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1ba:	eb aa                	jmp    c000d166 <VgaText::updateTitle()>

c000d1bc <VgaText::setTitleColour(VgaColour)>:
c000d1bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1c4:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1ca:	eb 9a                	jmp    c000d166 <VgaText::updateTitle()>

c000d1cc <VgaText::setTitle(char*)>:
c000d1cc:	53                   	push   ebx
c000d1cd:	83 ec 10             	sub    esp,0x10
c000d1d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1d8:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1de:	50                   	push   eax
c000d1df:	e8 93 35 ff ff       	call   c0000777 <strcpy>
c000d1e4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1e8:	83 c4 18             	add    esp,0x18
c000d1eb:	5b                   	pop    ebx
c000d1ec:	e9 75 ff ff ff       	jmp    c000d166 <VgaText::updateTitle()>
c000d1f1:	90                   	nop

c000d1f2 <VgaText::decrementCursor(bool)>:
c000d1f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1fa:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d200:	85 c0                	test   eax,eax
c000d202:	74 07                	je     c000d20b <VgaText::decrementCursor(bool)+0x19>
c000d204:	48                   	dec    eax
c000d205:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d20b:	84 c9                	test   cl,cl
c000d20d:	74 09                	je     c000d218 <VgaText::decrementCursor(bool)+0x26>
c000d20f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d213:	e9 64 fa ff ff       	jmp    c000cc7c <VgaText::updateCursor()>
c000d218:	c3                   	ret    
c000d219:	90                   	nop

c000d21a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d21a:	53                   	push   ebx
c000d21b:	83 ec 08             	sub    esp,0x8
c000d21e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d222:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d226:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d22a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d22e:	3c 07                	cmp    al,0x7
c000d230:	75 2a                	jne    c000d25c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d232:	a1 0c 49 02 c0       	mov    eax,ds:0xc002490c
c000d237:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d23f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d247:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d24f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d253:	83 c4 08             	add    esp,0x8
c000d256:	5b                   	pop    ebx
c000d257:	e9 c0 2d 00 00       	jmp    c001001c <Buzzer::beep(int, int, bool)>
c000d25c:	3c 0d                	cmp    al,0xd
c000d25e:	75 0c                	jne    c000d26c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d260:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d26a:	eb 3b                	jmp    c000d2a7 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d26c:	3c 0a                	cmp    al,0xa
c000d26e:	75 40                	jne    c000d2b0 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d270:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d276:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d280:	8d 50 01             	lea    edx,[eax+0x1]
c000d283:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d289:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d28f:	75 12                	jne    c000d2a3 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d291:	83 ec 0c             	sub    esp,0xc
c000d294:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d29a:	53                   	push   ebx
c000d29b:	e8 2a fb ff ff       	call   c000cdca <VgaText::scrollScreen()>
c000d2a0:	83 c4 10             	add    esp,0x10
c000d2a3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d2a7:	83 c4 08             	add    esp,0x8
c000d2aa:	5b                   	pop    ebx
c000d2ab:	e9 cc f9 ff ff       	jmp    c000cc7c <VgaText::updateCursor()>
c000d2b0:	3c 08                	cmp    al,0x8
c000d2b2:	75 31                	jne    c000d2e5 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d2b4:	50                   	push   eax
c000d2b5:	50                   	push   eax
c000d2b6:	6a 01                	push   0x1
c000d2b8:	53                   	push   ebx
c000d2b9:	e8 34 ff ff ff       	call   c000d1f2 <VgaText::decrementCursor(bool)>
c000d2be:	5a                   	pop    edx
c000d2bf:	59                   	pop    ecx
c000d2c0:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2c6:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2cc:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2d2:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2d8:	6a 20                	push   0x20
c000d2da:	53                   	push   ebx
c000d2db:	e8 90 fb ff ff       	call   c000ce70 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2e0:	83 c4 28             	add    esp,0x28
c000d2e3:	5b                   	pop    ebx
c000d2e4:	c3                   	ret    
c000d2e5:	83 ec 08             	sub    esp,0x8
c000d2e8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2ee:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2f4:	0f be c0             	movsx  eax,al
c000d2f7:	51                   	push   ecx
c000d2f8:	52                   	push   edx
c000d2f9:	50                   	push   eax
c000d2fa:	53                   	push   ebx
c000d2fb:	e8 70 fb ff ff       	call   c000ce70 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d300:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d304:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d30c:	83 c4 28             	add    esp,0x28
c000d30f:	5b                   	pop    ebx
c000d310:	e9 29 fc ff ff       	jmp    c000cf3e <VgaText::incrementCursor(bool)>
c000d315:	90                   	nop

c000d316 <VgaText::isShowingCursor()>:
c000d316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d31a:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d320:	c3                   	ret    
c000d321:	90                   	nop

c000d322 <VgaText::isBlinkDisabled()>:
c000d322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d326:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d32c:	83 f0 01             	xor    eax,0x1
c000d32f:	c3                   	ret    

c000d330 <VgaText::setCursorHeight(int)>:
c000d330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d338:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d33e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d345:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d349:	e9 48 f9 ff ff       	jmp    c000cc96 <VgaText::showCursor(bool)>

c000d34e <VgaText::getCursorHeight()>:
c000d34e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d352:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d358:	c3                   	ret    

c000d359 <setActiveTerminal(VgaText*)>:
c000d359:	53                   	push   ebx
c000d35a:	83 ec 08             	sub    esp,0x8
c000d35d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d361:	85 db                	test   ebx,ebx
c000d363:	75 11                	jne    c000d376 <setActiveTerminal(VgaText*)+0x1d>
c000d365:	c7 44 24 10 40 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021440
c000d36d:	83 c4 08             	add    esp,0x8
c000d370:	5b                   	pop    ebx
c000d371:	e9 dc 86 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c000d376:	50                   	push   eax
c000d377:	50                   	push   eax
c000d378:	53                   	push   ebx
c000d379:	68 4e 14 02 c0       	push   0xc002144e
c000d37e:	e8 a6 1e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000d383:	a1 64 48 02 c0       	mov    eax,ds:0xc0024864
c000d388:	83 c4 10             	add    esp,0x10
c000d38b:	85 c0                	test   eax,eax
c000d38d:	74 0c                	je     c000d39b <setActiveTerminal(VgaText*)+0x42>
c000d38f:	83 ec 0c             	sub    esp,0xc
c000d392:	50                   	push   eax
c000d393:	e8 e4 f8 ff ff       	call   c000cc7c <VgaText::updateCursor()>
c000d398:	83 c4 10             	add    esp,0x10
c000d39b:	51                   	push   ecx
c000d39c:	89 1d 64 48 02 c0    	mov    DWORD PTR ds:0xc0024864,ebx
c000d3a2:	51                   	push   ecx
c000d3a3:	53                   	push   ebx
c000d3a4:	68 66 14 02 c0       	push   0xc0021466
c000d3a9:	e8 7b 1e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000d3ae:	83 c4 0c             	add    esp,0xc
c000d3b1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3b7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3bd:	53                   	push   ebx
c000d3be:	e8 25 fb ff ff       	call   c000cee8 <VgaText::setCursor(int, int)>
c000d3c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3c6:	e8 57 ff ff ff       	call   c000d322 <VgaText::isBlinkDisabled()>
c000d3cb:	5a                   	pop    edx
c000d3cc:	59                   	pop    ecx
c000d3cd:	0f b6 c0             	movzx  eax,al
c000d3d0:	50                   	push   eax
c000d3d1:	53                   	push   ebx
c000d3d2:	e8 cf f8 ff ff       	call   c000cca6 <VgaText::disableBlink(bool)>
c000d3d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3da:	e8 6f ff ff ff       	call   c000d34e <VgaText::getCursorHeight()>
c000d3df:	5a                   	pop    edx
c000d3e0:	59                   	pop    ecx
c000d3e1:	50                   	push   eax
c000d3e2:	53                   	push   ebx
c000d3e3:	e8 48 ff ff ff       	call   c000d330 <VgaText::setCursorHeight(int)>
c000d3e8:	83 c4 10             	add    esp,0x10
c000d3eb:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3f2:	75 0a                	jne    c000d3fe <setActiveTerminal(VgaText*)+0xa5>
c000d3f4:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3fe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d402:	83 c4 08             	add    esp,0x8
c000d405:	5b                   	pop    ebx
c000d406:	e9 1d f8 ff ff       	jmp    c000cc28 <VgaText::load()>

c000d40b <doTerminalCycle()>:
c000d40b:	83 ec 18             	sub    esp,0x18
c000d40e:	a1 60 48 02 c0       	mov    eax,ds:0xc0024860
c000d413:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d419:	50                   	push   eax
c000d41a:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000d41f:	e8 35 ff ff ff       	call   c000d359 <setActiveTerminal(VgaText*)>
c000d424:	83 c4 1c             	add    esp,0x1c
c000d427:	c3                   	ret    

c000d428 <VgaText::doUpdate()>:
c000d428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d42c:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d432:	85 c0                	test   eax,eax
c000d434:	74 02                	je     c000d438 <VgaText::doUpdate()+0x10>
c000d436:	ff e0                	jmp    eax
c000d438:	c3                   	ret    
c000d439:	90                   	nop

c000d43a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d43a:	55                   	push   ebp
c000d43b:	57                   	push   edi
c000d43c:	56                   	push   esi
c000d43d:	53                   	push   ebx
c000d43e:	83 ec 1c             	sub    esp,0x1c
c000d441:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d445:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d44a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d451:	50                   	push   eax
c000d452:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d457:	50                   	push   eax
c000d458:	e8 5b f9 ff ff       	call   c000cdb8 <VgaText::combineColours(unsigned char, unsigned char)>
c000d45d:	59                   	pop    ecx
c000d45e:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d461:	5b                   	pop    ebx
c000d462:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d46a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d470:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d474:	0f b7 db             	movzx  ebx,bx
c000d477:	01 db                	add    ebx,ebx
c000d479:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d47d:	01 fb                	add    ebx,edi
c000d47f:	31 c0                	xor    eax,eax
c000d481:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d484:	84 c9                	test   cl,cl
c000d486:	0f 84 3d 01 00 00    	je     c000d5c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d48c:	80 f9 0d             	cmp    cl,0xd
c000d48f:	75 0f                	jne    c000d4a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d491:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d49b:	e9 23 01 00 00       	jmp    c000d5c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4a0:	80 f9 0a             	cmp    cl,0xa
c000d4a3:	75 5b                	jne    c000d500 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d4a5:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d4ab:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4b5:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4b8:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4be:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4c4:	75 12                	jne    c000d4d8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4c6:	83 ec 0c             	sub    esp,0xc
c000d4c9:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4cf:	55                   	push   ebp
c000d4d0:	e8 f5 f8 ff ff       	call   c000cdca <VgaText::scrollScreen()>
c000d4d5:	83 c4 10             	add    esp,0x10
c000d4d8:	83 ec 0c             	sub    esp,0xc
c000d4db:	55                   	push   ebp
c000d4dc:	e8 9b f7 ff ff       	call   c000cc7c <VgaText::updateCursor()>
c000d4e1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4e9:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4ef:	83 c4 10             	add    esp,0x10
c000d4f2:	0f b7 db             	movzx  ebx,bx
c000d4f5:	01 db                	add    ebx,ebx
c000d4f7:	31 c0                	xor    eax,eax
c000d4f9:	01 fb                	add    ebx,edi
c000d4fb:	e9 c3 00 00 00       	jmp    c000d5c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d500:	80 f9 08             	cmp    cl,0x8
c000d503:	75 4e                	jne    c000d553 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d505:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d509:	50                   	push   eax
c000d50a:	50                   	push   eax
c000d50b:	6a 01                	push   0x1
c000d50d:	55                   	push   ebp
c000d50e:	e8 df fc ff ff       	call   c000d1f2 <VgaText::decrementCursor(bool)>
c000d513:	58                   	pop    eax
c000d514:	5a                   	pop    edx
c000d515:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d51b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d521:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d527:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d52d:	6a 20                	push   0x20
c000d52f:	55                   	push   ebp
c000d530:	e8 3b f9 ff ff       	call   c000ce70 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d535:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d53d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d543:	83 c4 20             	add    esp,0x20
c000d546:	0f b7 db             	movzx  ebx,bx
c000d549:	01 db                	add    ebx,ebx
c000d54b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d54f:	01 fb                	add    ebx,edi
c000d551:	eb 70                	jmp    c000d5c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d553:	50                   	push   eax
c000d554:	50                   	push   eax
c000d555:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d55a:	50                   	push   eax
c000d55b:	51                   	push   ecx
c000d55c:	e8 fd f8 ff ff       	call   c000ce5e <VgaText::combineCharAndColour(char, unsigned char)>
c000d561:	66 89 03             	mov    WORD PTR [ebx],ax
c000d564:	83 c4 10             	add    esp,0x10
c000d567:	39 2d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebp
c000d56d:	75 2a                	jne    c000d599 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d56f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d575:	85 c0                	test   eax,eax
c000d577:	74 20                	je     c000d599 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d579:	52                   	push   edx
c000d57a:	52                   	push   edx
c000d57b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d581:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d587:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d58b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d58f:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d592:	51                   	push   ecx
c000d593:	55                   	push   ebp
c000d594:	ff d0                	call   eax
c000d596:	83 c4 20             	add    esp,0x20
c000d599:	50                   	push   eax
c000d59a:	83 c3 02             	add    ebx,0x2
c000d59d:	50                   	push   eax
c000d59e:	6a 00                	push   0x0
c000d5a0:	55                   	push   ebp
c000d5a1:	e8 98 f9 ff ff       	call   c000cf3e <VgaText::incrementCursor(bool)>
c000d5a6:	83 c4 10             	add    esp,0x10
c000d5a9:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d5b0:	75 0f                	jne    c000d5c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d5b2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5ba:	0f b7 db             	movzx  ebx,bx
c000d5bd:	01 db                	add    ebx,ebx
c000d5bf:	01 fb                	add    ebx,edi
c000d5c1:	b0 01                	mov    al,0x1
c000d5c3:	46                   	inc    esi
c000d5c4:	e9 b8 fe ff ff       	jmp    c000d481 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5c9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5cd:	83 ec 0c             	sub    esp,0xc
c000d5d0:	55                   	push   ebp
c000d5d1:	e8 a6 f6 ff ff       	call   c000cc7c <VgaText::updateCursor()>
c000d5d6:	83 c4 10             	add    esp,0x10
c000d5d9:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5dd:	84 c0                	test   al,al
c000d5df:	74 0c                	je     c000d5ed <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5e1:	83 ec 0c             	sub    esp,0xc
c000d5e4:	55                   	push   ebp
c000d5e5:	e8 3e fe ff ff       	call   c000d428 <VgaText::doUpdate()>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5f4:	83 c4 1c             	add    esp,0x1c
c000d5f7:	5b                   	pop    ebx
c000d5f8:	5e                   	pop    esi
c000d5f9:	5f                   	pop    edi
c000d5fa:	5d                   	pop    ebp
c000d5fb:	c3                   	ret    

c000d5fc <VgaText::clearScreen()>:
c000d5fc:	57                   	push   edi
c000d5fd:	56                   	push   esi
c000d5fe:	31 f6                	xor    esi,esi
c000d600:	53                   	push   ebx
c000d601:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d605:	52                   	push   edx
c000d606:	6a 00                	push   0x0
c000d608:	6a 00                	push   0x0
c000d60a:	53                   	push   ebx
c000d60b:	e8 d8 f8 ff ff       	call   c000cee8 <VgaText::setCursor(int, int)>
c000d610:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d617:	83 c4 10             	add    esp,0x10
c000d61a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d620:	7e 26                	jle    c000d648 <VgaText::clearScreen()+0x4c>
c000d622:	31 ff                	xor    edi,edi
c000d624:	50                   	push   eax
c000d625:	50                   	push   eax
c000d626:	56                   	push   esi
c000d627:	57                   	push   edi
c000d628:	47                   	inc    edi
c000d629:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d62f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d635:	6a 20                	push   0x20
c000d637:	53                   	push   ebx
c000d638:	e8 33 f8 ff ff       	call   c000ce70 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d63d:	83 c4 20             	add    esp,0x20
c000d640:	83 ff 50             	cmp    edi,0x50
c000d643:	75 df                	jne    c000d624 <VgaText::clearScreen()+0x28>
c000d645:	46                   	inc    esi
c000d646:	eb d2                	jmp    c000d61a <VgaText::clearScreen()+0x1e>
c000d648:	83 ec 0c             	sub    esp,0xc
c000d64b:	53                   	push   ebx
c000d64c:	e8 d7 fd ff ff       	call   c000d428 <VgaText::doUpdate()>
c000d651:	83 c4 10             	add    esp,0x10
c000d654:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d65b:	5b                   	pop    ebx
c000d65c:	5e                   	pop    esi
c000d65d:	5f                   	pop    edi
c000d65e:	c3                   	ret    
c000d65f:	90                   	nop

c000d660 <VgaText::putchar(char)>:
c000d660:	56                   	push   esi
c000d661:	53                   	push   ebx
c000d662:	83 ec 14             	sub    esp,0x14
c000d665:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d669:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d66d:	3c 5b                	cmp    al,0x5b
c000d66f:	75 21                	jne    c000d692 <VgaText::putchar(char)+0x32>
c000d671:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d678:	74 28                	je     c000d6a2 <VgaText::putchar(char)+0x42>
c000d67a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d683:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d68d:	e9 e2 00 00 00       	jmp    c000d774 <VgaText::putchar(char)+0x114>
c000d692:	3c 1b                	cmp    al,0x1b
c000d694:	75 0c                	jne    c000d6a2 <VgaText::putchar(char)+0x42>
c000d696:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d69d:	e9 d2 00 00 00       	jmp    c000d774 <VgaText::putchar(char)+0x114>
c000d6a2:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d6a8:	84 c9                	test   cl,cl
c000d6aa:	0f 84 ab 00 00 00    	je     c000d75b <VgaText::putchar(char)+0xfb>
c000d6b0:	8d 50 c0             	lea    edx,[eax-0x40]
c000d6b3:	80 fa 3e             	cmp    dl,0x3e
c000d6b6:	0f 87 82 00 00 00    	ja     c000d73e <VgaText::putchar(char)+0xde>
c000d6bc:	3c 6d                	cmp    al,0x6d
c000d6be:	75 4d                	jne    c000d70d <VgaText::putchar(char)+0xad>
c000d6c0:	31 f6                	xor    esi,esi
c000d6c2:	31 d2                	xor    edx,edx
c000d6c4:	31 c0                	xor    eax,eax
c000d6c6:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6cc:	7e 30                	jle    c000d6fe <VgaText::putchar(char)+0x9e>
c000d6ce:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6d6:	80 fa 3b             	cmp    dl,0x3b
c000d6d9:	75 17                	jne    c000d6f2 <VgaText::putchar(char)+0x92>
c000d6db:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6df:	50                   	push   eax
c000d6e0:	53                   	push   ebx
c000d6e1:	e8 fa f5 ff ff       	call   c000cce0 <VgaText::doANSI_SGR(int)>
c000d6e6:	59                   	pop    ecx
c000d6e7:	31 d2                	xor    edx,edx
c000d6e9:	58                   	pop    eax
c000d6ea:	31 c0                	xor    eax,eax
c000d6ec:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6f0:	eb 09                	jmp    c000d6fb <VgaText::putchar(char)+0x9b>
c000d6f2:	6b c0 0a             	imul   eax,eax,0xa
c000d6f5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6f9:	88 ca                	mov    dl,cl
c000d6fb:	46                   	inc    esi
c000d6fc:	eb c8                	jmp    c000d6c6 <VgaText::putchar(char)+0x66>
c000d6fe:	84 d2                	test   dl,dl
c000d700:	74 31                	je     c000d733 <VgaText::putchar(char)+0xd3>
c000d702:	50                   	push   eax
c000d703:	53                   	push   ebx
c000d704:	e8 d7 f5 ff ff       	call   c000cce0 <VgaText::doANSI_SGR(int)>
c000d709:	58                   	pop    eax
c000d70a:	5a                   	pop    edx
c000d70b:	eb 26                	jmp    c000d733 <VgaText::putchar(char)+0xd3>
c000d70d:	3c 4a                	cmp    al,0x4a
c000d70f:	75 22                	jne    c000d733 <VgaText::putchar(char)+0xd3>
c000d711:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d718:	75 19                	jne    c000d733 <VgaText::putchar(char)+0xd3>
c000d71a:	83 ec 0c             	sub    esp,0xc
c000d71d:	53                   	push   ebx
c000d71e:	e8 d9 fe ff ff       	call   c000d5fc <VgaText::clearScreen()>
c000d723:	83 c4 0c             	add    esp,0xc
c000d726:	6a 00                	push   0x0
c000d728:	6a 00                	push   0x0
c000d72a:	53                   	push   ebx
c000d72b:	e8 b8 f7 ff ff       	call   c000cee8 <VgaText::setCursor(int, int)>
c000d730:	83 c4 10             	add    esp,0x10
c000d733:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d73c:	eb 36                	jmp    c000d774 <VgaText::putchar(char)+0x114>
c000d73e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d744:	83 fa 0e             	cmp    edx,0xe
c000d747:	7f 2b                	jg     c000d774 <VgaText::putchar(char)+0x114>
c000d749:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d74c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d752:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d759:	eb 19                	jmp    c000d774 <VgaText::putchar(char)+0x114>
c000d75b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d761:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d767:	0f be c0             	movsx  eax,al
c000d76a:	50                   	push   eax
c000d76b:	53                   	push   ebx
c000d76c:	e8 a9 fa ff ff       	call   c000d21a <VgaText::putchar(char, VgaColour, VgaColour)>
c000d771:	83 c4 10             	add    esp,0x10
c000d774:	83 c4 14             	add    esp,0x14
c000d777:	5b                   	pop    ebx
c000d778:	5e                   	pop    esi
c000d779:	c3                   	ret    

c000d77a <VgaText::puts(char const*)>:
c000d77a:	53                   	push   ebx
c000d77b:	83 ec 08             	sub    esp,0x8
c000d77e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d782:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d785:	84 c0                	test   al,al
c000d787:	74 12                	je     c000d79b <VgaText::puts(char const*)+0x21>
c000d789:	51                   	push   ecx
c000d78a:	43                   	inc    ebx
c000d78b:	51                   	push   ecx
c000d78c:	50                   	push   eax
c000d78d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d791:	e8 ca fe ff ff       	call   c000d660 <VgaText::putchar(char)>
c000d796:	83 c4 10             	add    esp,0x10
c000d799:	eb e7                	jmp    c000d782 <VgaText::puts(char const*)+0x8>
c000d79b:	83 c4 08             	add    esp,0x8
c000d79e:	5b                   	pop    ebx
c000d79f:	c3                   	ret    

c000d7a0 <VgaText::putx(unsigned int)>:
c000d7a0:	57                   	push   edi
c000d7a1:	b9 11 00 00 00       	mov    ecx,0x11
c000d7a6:	56                   	push   esi
c000d7a7:	be 82 14 02 c0       	mov    esi,0xc0021482
c000d7ac:	53                   	push   ebx
c000d7ad:	83 ec 20             	sub    esp,0x20
c000d7b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7b4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7b8:	fc                   	cld    
c000d7b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7bb:	be 08 00 00 00       	mov    esi,0x8
c000d7c0:	50                   	push   eax
c000d7c1:	50                   	push   eax
c000d7c2:	89 d8                	mov    eax,ebx
c000d7c4:	c1 e8 1c             	shr    eax,0x1c
c000d7c7:	c1 e3 04             	shl    ebx,0x4
c000d7ca:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7cf:	50                   	push   eax
c000d7d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7d4:	e8 87 fe ff ff       	call   c000d660 <VgaText::putchar(char)>
c000d7d9:	83 c4 10             	add    esp,0x10
c000d7dc:	4e                   	dec    esi
c000d7dd:	75 e1                	jne    c000d7c0 <VgaText::putx(unsigned int)+0x20>
c000d7df:	83 c4 20             	add    esp,0x20
c000d7e2:	5b                   	pop    ebx
c000d7e3:	5e                   	pop    esi
c000d7e4:	5f                   	pop    edi
c000d7e5:	c3                   	ret    

c000d7e6 <VgaText::VgaText(char const*)>:
c000d7e6:	57                   	push   edi
c000d7e7:	56                   	push   esi
c000d7e8:	53                   	push   ebx
c000d7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ed:	83 ec 08             	sub    esp,0x8
c000d7f0:	6a 00                	push   0x0
c000d7f2:	50                   	push   eax
c000d7f3:	e8 e0 05 00 00       	call   c000ddd8 <UnixFile::UnixFile(int)>
c000d7f8:	83 c4 10             	add    esp,0x10
c000d7fb:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000d800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d804:	89 10                	mov    DWORD PTR [eax],edx
c000d806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d818:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d826:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d831:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83c:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d858:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d863:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d874:	bb 40 48 02 c0       	mov    ebx,0xc0024840
c000d879:	b8 08 00 00 00       	mov    eax,0x8
c000d87e:	fc                   	cld    
c000d87f:	89 d7                	mov    edi,edx
c000d881:	89 de                	mov    esi,ebx
c000d883:	89 c1                	mov    ecx,eax
c000d885:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88b:	05 1e 10 00 00       	add    eax,0x101e
c000d890:	83 ec 08             	sub    esp,0x8
c000d893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d897:	50                   	push   eax
c000d898:	e8 da 2e ff ff       	call   c0000777 <strcpy>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a4:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8b2:	83 c0 0c             	add    eax,0xc
c000d8b5:	83 ec 04             	sub    esp,0x4
c000d8b8:	68 00 0f 00 00       	push   0xf00
c000d8bd:	6a 00                	push   0x0
c000d8bf:	50                   	push   eax
c000d8c0:	e8 13 2e ff ff       	call   c00006d8 <memset>
c000d8c5:	83 c4 10             	add    esp,0x10
c000d8c8:	83 ec 04             	sub    esp,0x4
c000d8cb:	6a 00                	push   0x0
c000d8cd:	6a 07                	push   0x7
c000d8cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d3:	e8 c0 f4 ff ff       	call   c000cd98 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	83 ec 08             	sub    esp,0x8
c000d8de:	6a 02                	push   0x2
c000d8e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e4:	e8 47 fa ff ff       	call   c000d330 <VgaText::setCursorHeight(int)>
c000d8e9:	83 c4 10             	add    esp,0x10
c000d8ec:	83 ec 04             	sub    esp,0x4
c000d8ef:	6a 00                	push   0x0
c000d8f1:	6a 00                	push   0x0
c000d8f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f7:	e8 ec f5 ff ff       	call   c000cee8 <VgaText::setCursor(int, int)>
c000d8fc:	83 c4 10             	add    esp,0x10
c000d8ff:	83 ec 08             	sub    esp,0x8
c000d902:	6a 01                	push   0x1
c000d904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d908:	e8 89 f3 ff ff       	call   c000cc96 <VgaText::showCursor(bool)>
c000d90d:	83 c4 10             	add    esp,0x10
c000d910:	83 ec 08             	sub    esp,0x8
c000d913:	6a 01                	push   0x1
c000d915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d919:	e8 88 f3 ff ff       	call   c000cca6 <VgaText::disableBlink(bool)>
c000d91e:	83 c4 10             	add    esp,0x10
c000d921:	83 ec 0c             	sub    esp,0xc
c000d924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d928:	e8 cf fc ff ff       	call   c000d5fc <VgaText::clearScreen()>
c000d92d:	83 c4 10             	add    esp,0x10
c000d930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d934:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d93f:	05 9e 10 00 00       	add    eax,0x109e
c000d944:	83 ec 04             	sub    esp,0x4
c000d947:	68 96 00 00 00       	push   0x96
c000d94c:	6a 00                	push   0x0
c000d94e:	50                   	push   eax
c000d94f:	e8 84 2d ff ff       	call   c00006d8 <memset>
c000d954:	83 c4 10             	add    esp,0x10
c000d957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d95b:	05 34 11 00 00       	add    eax,0x1134
c000d960:	83 ec 04             	sub    esp,0x4
c000d963:	68 2c 01 00 00       	push   0x12c
c000d968:	6a 00                	push   0x0
c000d96a:	50                   	push   eax
c000d96b:	e8 68 2d ff ff       	call   c00006d8 <memset>
c000d970:	83 c4 10             	add    esp,0x10
c000d973:	90                   	nop
c000d974:	5b                   	pop    ebx
c000d975:	5e                   	pop    esi
c000d976:	5f                   	pop    edi
c000d977:	c3                   	ret    

c000d978 <VgaText::receiveKey(unsigned char)>:
c000d978:	55                   	push   ebp
c000d979:	57                   	push   edi
c000d97a:	56                   	push   esi
c000d97b:	53                   	push   ebx
c000d97c:	83 ec 1c             	sub    esp,0x1c
c000d97f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d983:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d987:	84 db                	test   bl,bl
c000d989:	0f 84 c9 00 00 00    	je     c000da58 <VgaText::receiveKey(unsigned char)+0xe0>
c000d98f:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d995:	80 fb 08             	cmp    bl,0x8
c000d998:	75 2c                	jne    c000d9c6 <VgaText::receiveKey(unsigned char)+0x4e>
c000d99a:	83 ec 0c             	sub    esp,0xc
c000d99d:	57                   	push   edi
c000d99e:	e8 52 2d ff ff       	call   c00006f5 <strlen>
c000d9a3:	83 c4 10             	add    esp,0x10
c000d9a6:	85 c0                	test   eax,eax
c000d9a8:	74 41                	je     c000d9eb <VgaText::receiveKey(unsigned char)+0x73>
c000d9aa:	50                   	push   eax
c000d9ab:	50                   	push   eax
c000d9ac:	6a 08                	push   0x8
c000d9ae:	56                   	push   esi
c000d9af:	e8 ac fc ff ff       	call   c000d660 <VgaText::putchar(char)>
c000d9b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9b7:	e8 39 2d ff ff       	call   c00006f5 <strlen>
c000d9bc:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9c4:	eb 22                	jmp    c000d9e8 <VgaText::receiveKey(unsigned char)+0x70>
c000d9c6:	52                   	push   edx
c000d9c7:	52                   	push   edx
c000d9c8:	0f be c3             	movsx  eax,bl
c000d9cb:	50                   	push   eax
c000d9cc:	56                   	push   esi
c000d9cd:	e8 8e fc ff ff       	call   c000d660 <VgaText::putchar(char)>
c000d9d2:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9d6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9db:	59                   	pop    ecx
c000d9dc:	5d                   	pop    ebp
c000d9dd:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9e1:	50                   	push   eax
c000d9e2:	57                   	push   edi
c000d9e3:	e8 46 2e ff ff       	call   c000082e <strcat>
c000d9e8:	83 c4 10             	add    esp,0x10
c000d9eb:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9f2:	75 05                	jne    c000d9f9 <VgaText::receiveKey(unsigned char)+0x81>
c000d9f4:	80 fb 0a             	cmp    bl,0xa
c000d9f7:	75 53                	jne    c000da4c <VgaText::receiveKey(unsigned char)+0xd4>
c000d9f9:	83 ec 0c             	sub    esp,0xc
c000d9fc:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000da02:	53                   	push   ebx
c000da03:	e8 ed 2c ff ff       	call   c00006f5 <strlen>
c000da08:	89 3c 24             	mov    DWORD PTR [esp],edi
c000da0b:	89 c5                	mov    ebp,eax
c000da0d:	e8 e3 2c ff ff       	call   c00006f5 <strlen>
c000da12:	83 c4 10             	add    esp,0x10
c000da15:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da19:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da1e:	76 10                	jbe    c000da30 <VgaText::receiveKey(unsigned char)+0xb8>
c000da20:	83 ec 0c             	sub    esp,0xc
c000da23:	68 93 14 02 c0       	push   0xc0021493
c000da28:	e8 25 80 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000da2d:	83 c4 10             	add    esp,0x10
c000da30:	50                   	push   eax
c000da31:	50                   	push   eax
c000da32:	57                   	push   edi
c000da33:	53                   	push   ebx
c000da34:	e8 f5 2d ff ff       	call   c000082e <strcat>
c000da39:	83 c4 0c             	add    esp,0xc
c000da3c:	68 96 00 00 00       	push   0x96
c000da41:	6a 00                	push   0x0
c000da43:	57                   	push   edi
c000da44:	e8 8f 2c ff ff       	call   c00006d8 <memset>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	56                   	push   esi
c000da50:	e8 d3 f9 ff ff       	call   c000d428 <VgaText::doUpdate()>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	83 c4 1c             	add    esp,0x1c
c000da5b:	5b                   	pop    ebx
c000da5c:	5e                   	pop    esi
c000da5d:	5f                   	pop    edi
c000da5e:	5d                   	pop    ebp
c000da5f:	c3                   	ret    

c000da60 <VgaText::write(unsigned long long, void*, int*)>:
c000da60:	55                   	push   ebp
c000da61:	57                   	push   edi
c000da62:	56                   	push   esi
c000da63:	53                   	push   ebx
c000da64:	83 ec 0c             	sub    esp,0xc
c000da67:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da6b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da6f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da73:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da7a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da7d:	39 eb                	cmp    ebx,ebp
c000da7f:	74 13                	je     c000da94 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da81:	50                   	push   eax
c000da82:	43                   	inc    ebx
c000da83:	50                   	push   eax
c000da84:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da88:	50                   	push   eax
c000da89:	56                   	push   esi
c000da8a:	e8 d1 fb ff ff       	call   c000d660 <VgaText::putchar(char)>
c000da8f:	83 c4 10             	add    esp,0x10
c000da92:	eb e9                	jmp    c000da7d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da94:	83 ec 0c             	sub    esp,0xc
c000da97:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da9e:	56                   	push   esi
c000da9f:	e8 84 f9 ff ff       	call   c000d428 <VgaText::doUpdate()>
c000daa4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000daa8:	89 38                	mov    DWORD PTR [eax],edi
c000daaa:	83 c4 1c             	add    esp,0x1c
c000daad:	31 c0                	xor    eax,eax
c000daaf:	5b                   	pop    ebx
c000dab0:	5e                   	pop    esi
c000dab1:	5f                   	pop    edi
c000dab2:	5d                   	pop    ebp
c000dab3:	c3                   	ret    

c000dab4 <newTerminal(char*)>:
c000dab4:	83 ec 28             	sub    esp,0x28
c000dab7:	68 60 12 00 00       	push   0x1260
c000dabc:	e8 33 16 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000dac1:	5a                   	pop    edx
c000dac2:	59                   	pop    ecx
c000dac3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dac7:	50                   	push   eax
c000dac8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dacc:	e8 15 fd ff ff       	call   c000d7e6 <VgaText::VgaText(char const*)>
c000dad1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dad5:	83 c4 2c             	add    esp,0x2c
c000dad8:	c3                   	ret    
c000dad9:	90                   	nop

c000dada <TSS::TSS()>:
c000dada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dade:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dae5:	90                   	nop
c000dae6:	c3                   	ret    
c000dae7:	90                   	nop

c000dae8 <TSS::setESP(unsigned long)>:
c000dae8:	55                   	push   ebp
c000dae9:	89 e5                	mov    ebp,esp
c000daeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000daf4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000daf7:	90                   	nop
c000daf8:	5d                   	pop    ebp
c000daf9:	c3                   	ret    

c000dafa <TSS::flush()>:
c000dafa:	55                   	push   ebp
c000dafb:	89 e5                	mov    ebp,esp
c000dafd:	83 ec 10             	sub    esp,0x10
c000db00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db03:	8b 00                	mov    eax,DWORD PTR [eax]
c000db05:	83 c8 03             	or     eax,0x3
c000db08:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000db0c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000db10:	66 89 d0             	mov    ax,dx
c000db13:	0f 00 d8             	ltr    ax
c000db16:	90                   	nop
c000db17:	c9                   	leave  
c000db18:	c3                   	ret    
c000db19:	90                   	nop

c000db1a <TSS::setup(unsigned long, unsigned long)>:
c000db1a:	55                   	push   ebp
c000db1b:	89 e5                	mov    ebp,esp
c000db1d:	53                   	push   ebx
c000db1e:	83 ec 14             	sub    esp,0x14
c000db21:	83 ec 0c             	sub    esp,0xc
c000db24:	6a 68                	push   0x68
c000db26:	e8 cc e4 ff ff       	call   c000bff7 <malloc>
c000db2b:	83 c4 10             	add    esp,0x10
c000db2e:	89 c2                	mov    edx,eax
c000db30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db3c:	83 ec 04             	sub    esp,0x4
c000db3f:	6a 68                	push   0x68
c000db41:	6a 00                	push   0x0
c000db43:	50                   	push   eax
c000db44:	e8 8f 2b ff ff       	call   c00006d8 <memset>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db52:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db5e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db6d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db76:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db82:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000dba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000dba9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dbac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dbb5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dbb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbbe:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbc8:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbcb:	e8 25 1c 01 00       	call   c001f7f5 <CPU::readCR3()>
c000dbd0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbd9:	83 ec 08             	sub    esp,0x8
c000dbdc:	50                   	push   eax
c000dbdd:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbe0:	50                   	push   eax
c000dbe1:	e8 e8 db ff ff       	call   c000b7ce <GDTEntry::setBase(unsigned int)>
c000dbe6:	83 c4 10             	add    esp,0x10
c000dbe9:	83 ec 08             	sub    esp,0x8
c000dbec:	6a 68                	push   0x68
c000dbee:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbf1:	50                   	push   eax
c000dbf2:	e8 f3 db ff ff       	call   c000b7ea <GDTEntry::setLimit(unsigned int)>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbfe:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc01:	83 e0 0f             	and    eax,0xf
c000dc04:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc07:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc0a:	83 c8 40             	or     eax,0x40
c000dc0d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc10:	e8 d1 6c 00 00       	call   c00148e6 <thisCPU()>
c000dc15:	05 78 01 00 00       	add    eax,0x178
c000dc1a:	83 ec 04             	sub    esp,0x4
c000dc1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc20:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc23:	50                   	push   eax
c000dc24:	e8 f5 db ff ff       	call   c000b81e <GDT::addEntry(GDTEntry)>
c000dc29:	83 c4 10             	add    esp,0x10
c000dc2c:	89 c2                	mov    edx,eax
c000dc2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc31:	89 10                	mov    DWORD PTR [eax],edx
c000dc33:	e8 ae 6c 00 00       	call   c00148e6 <thisCPU()>
c000dc38:	05 78 01 00 00       	add    eax,0x178
c000dc3d:	83 ec 0c             	sub    esp,0xc
c000dc40:	50                   	push   eax
c000dc41:	e8 1c dc ff ff       	call   c000b862 <GDT::flush()>
c000dc46:	83 c4 10             	add    esp,0x10
c000dc49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc4e:	83 ec 08             	sub    esp,0x8
c000dc51:	50                   	push   eax
c000dc52:	68 fc 14 02 c0       	push   0xc00214fc
c000dc57:	e8 cd 15 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000dc5c:	83 c4 10             	add    esp,0x10
c000dc5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc62:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc64:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc67:	c9                   	leave  
c000dc68:	c3                   	ret    
c000dc69:	90                   	nop

c000dc6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc6a:	55                   	push   ebp
c000dc6b:	57                   	push   edi
c000dc6c:	56                   	push   esi
c000dc6d:	53                   	push   ebx
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc75:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc79:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc7d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc84:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc88:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc8d:	75 08                	jne    c000dc97 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dc8f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc95:	eb 5e                	jmp    c000dcf5 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dc97:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc9c:	75 3d                	jne    c000dcdb <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dc9e:	83 ec 0c             	sub    esp,0xc
c000dca1:	68 1a 15 02 c0       	push   0xc002151a
c000dca6:	e8 7e 15 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000dcab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dcb0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dcb3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dcb9:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcbb:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dcbf:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dcc3:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcc7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dccb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dccf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dcd2:	83 c4 1c             	add    esp,0x1c
c000dcd5:	5b                   	pop    ebx
c000dcd6:	5e                   	pop    esi
c000dcd7:	5f                   	pop    edi
c000dcd8:	5d                   	pop    ebp
c000dcd9:	ff e0                	jmp    eax
c000dcdb:	89 c2                	mov    edx,eax
c000dcdd:	83 e2 fd             	and    edx,0xfffffffd
c000dce0:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dce6:	74 a7                	je     c000dc8f <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dce8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dced:	83 e0 ef             	and    eax,0xffffffef
c000dcf0:	83 f8 08             	cmp    eax,0x8
c000dcf3:	76 9a                	jbe    c000dc8f <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcf5:	83 c4 0c             	add    esp,0xc
c000dcf8:	31 c0                	xor    eax,eax
c000dcfa:	5b                   	pop    ebx
c000dcfb:	5e                   	pop    esi
c000dcfc:	5f                   	pop    edi
c000dcfd:	5d                   	pop    ebp
c000dcfe:	c3                   	ret    
c000dcff:	90                   	nop

c000dd00 <ReservedFilename::isAtty()>:
c000dd00:	83 ec 18             	sub    esp,0x18
c000dd03:	68 27 15 02 c0       	push   0xc0021527
c000dd08:	e8 1c 15 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000dd0d:	83 c4 10             	add    esp,0x10
c000dd10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd14:	31 c0                	xor    eax,eax
c000dd16:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dd1d:	75 12                	jne    c000dd31 <ReservedFilename::isAtty()+0x31>
c000dd1f:	83 ec 0c             	sub    esp,0xc
c000dd22:	68 3d 15 02 c0       	push   0xc002153d
c000dd27:	e8 fd 14 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000dd2c:	83 c4 10             	add    esp,0x10
c000dd2f:	b0 01                	mov    al,0x1
c000dd31:	83 c4 0c             	add    esp,0xc
c000dd34:	c3                   	ret    
c000dd35:	90                   	nop

c000dd36 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dd36:	55                   	push   ebp
c000dd37:	57                   	push   edi
c000dd38:	56                   	push   esi
c000dd39:	53                   	push   ebx
c000dd3a:	83 ec 0c             	sub    esp,0xc
c000dd3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd41:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd45:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dd49:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dd4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd50:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd54:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd59:	75 08                	jne    c000dd63 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dd5b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd61:	eb 63                	jmp    c000ddc6 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd63:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd68:	75 3d                	jne    c000dda7 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dd6a:	83 ec 0c             	sub    esp,0xc
c000dd6d:	68 50 15 02 c0       	push   0xc0021550
c000dd72:	e8 b2 14 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000dd77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd7c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd7f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd85:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd87:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dd8b:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd8f:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd93:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dd97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd9b:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dd9e:	83 c4 1c             	add    esp,0x1c
c000dda1:	5b                   	pop    ebx
c000dda2:	5e                   	pop    esi
c000dda3:	5f                   	pop    edi
c000dda4:	5d                   	pop    ebp
c000dda5:	ff e0                	jmp    eax
c000dda7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000ddac:	75 04                	jne    c000ddb2 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000ddae:	89 33                	mov    DWORD PTR [ebx],esi
c000ddb0:	eb 14                	jmp    c000ddc6 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000ddb2:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000ddb7:	74 a2                	je     c000dd5b <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000ddb9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000ddbe:	83 e0 ef             	and    eax,0xffffffef
c000ddc1:	83 f8 08             	cmp    eax,0x8
c000ddc4:	76 95                	jbe    c000dd5b <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000ddc6:	83 c4 0c             	add    esp,0xc
c000ddc9:	31 c0                	xor    eax,eax
c000ddcb:	5b                   	pop    ebx
c000ddcc:	5e                   	pop    esi
c000ddcd:	5f                   	pop    edi
c000ddce:	5d                   	pop    ebp
c000ddcf:	c3                   	ret    

c000ddd0 <UnixFile::getFileDescriptor()>:
c000ddd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddd7:	c3                   	ret    

c000ddd8 <UnixFile::UnixFile(int)>:
c000ddd8:	53                   	push   ebx
c000ddd9:	83 ec 18             	sub    esp,0x18
c000dddc:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000dde1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dde5:	89 10                	mov    DWORD PTR [eax],edx
c000dde7:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000ddef:	0f 8f 4d 01 00 00    	jg     c000df42 <UnixFile::UnixFile(int)+0x16a>
c000ddf5:	a1 40 3c 02 c0       	mov    eax,ds:0xc0023c40
c000ddfa:	8d 50 01             	lea    edx,[eax+0x1]
c000ddfd:	89 15 40 3c 02 c0    	mov    DWORD PTR ds:0xc0023c40,edx
c000de03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de07:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000de0a:	83 ec 08             	sub    esp,0x8
c000de0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000de11:	68 f8 48 02 c0       	push   0xc00248f8
c000de16:	e8 4f 1a 01 00       	call   c001f86a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	a0 f4 48 02 c0       	mov    al,ds:0xc00248f4
c000de23:	83 f0 01             	xor    eax,0x1
c000de26:	84 c0                	test   al,al
c000de28:	0f 84 15 01 00 00    	je     c000df43 <UnixFile::UnixFile(int)+0x16b>
c000de2e:	c6 05 f4 48 02 c0 01 	mov    BYTE PTR ds:0xc00248f4,0x1
c000de35:	83 ec 0c             	sub    esp,0xc
c000de38:	6a 0c                	push   0xc
c000de3a:	e8 b5 12 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000de3f:	83 c4 10             	add    esp,0x10
c000de42:	89 c3                	mov    ebx,eax
c000de44:	83 ec 08             	sub    esp,0x8
c000de47:	68 03 ff ff 0f       	push   0xfffff03
c000de4c:	53                   	push   ebx
c000de4d:	e8 f6 00 00 00       	call   c000df48 <ReservedFilename::ReservedFilename(int)>
c000de52:	83 c4 10             	add    esp,0x10
c000de55:	89 1d ec 48 02 c0    	mov    DWORD PTR ds:0xc00248ec,ebx
c000de5b:	83 ec 0c             	sub    esp,0xc
c000de5e:	6a 0c                	push   0xc
c000de60:	e8 8f 12 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000de65:	83 c4 10             	add    esp,0x10
c000de68:	89 c3                	mov    ebx,eax
c000de6a:	83 ec 08             	sub    esp,0x8
c000de6d:	68 01 ff ff 0f       	push   0xfffff01
c000de72:	53                   	push   ebx
c000de73:	e8 d0 00 00 00       	call   c000df48 <ReservedFilename::ReservedFilename(int)>
c000de78:	83 c4 10             	add    esp,0x10
c000de7b:	89 1d f0 48 02 c0    	mov    DWORD PTR ds:0xc00248f0,ebx
c000de81:	83 ec 0c             	sub    esp,0xc
c000de84:	6a 0c                	push   0xc
c000de86:	e8 69 12 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000de8b:	83 c4 10             	add    esp,0x10
c000de8e:	89 c3                	mov    ebx,eax
c000de90:	83 ec 08             	sub    esp,0x8
c000de93:	68 00 ff ff 0f       	push   0xfffff00
c000de98:	53                   	push   ebx
c000de99:	e8 aa 00 00 00       	call   c000df48 <ReservedFilename::ReservedFilename(int)>
c000de9e:	83 c4 10             	add    esp,0x10
c000dea1:	89 1d e4 48 02 c0    	mov    DWORD PTR ds:0xc00248e4,ebx
c000dea7:	83 ec 0c             	sub    esp,0xc
c000deaa:	6a 0c                	push   0xc
c000deac:	e8 43 12 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000deb1:	83 c4 10             	add    esp,0x10
c000deb4:	89 c3                	mov    ebx,eax
c000deb6:	83 ec 08             	sub    esp,0x8
c000deb9:	68 02 ff ff 0f       	push   0xfffff02
c000debe:	53                   	push   ebx
c000debf:	e8 84 00 00 00       	call   c000df48 <ReservedFilename::ReservedFilename(int)>
c000dec4:	83 c4 10             	add    esp,0x10
c000dec7:	89 1d e8 48 02 c0    	mov    DWORD PTR ds:0xc00248e8,ebx
c000decd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ded5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000deda:	7f 67                	jg     c000df43 <UnixFile::UnixFile(int)+0x16b>
c000dedc:	83 ec 0c             	sub    esp,0xc
c000dedf:	6a 0c                	push   0xc
c000dee1:	e8 0e 12 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000dee6:	83 c4 10             	add    esp,0x10
c000dee9:	89 c3                	mov    ebx,eax
c000deeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deef:	05 10 ff ff 0f       	add    eax,0xfffff10
c000def4:	83 ec 08             	sub    esp,0x8
c000def7:	50                   	push   eax
c000def8:	53                   	push   ebx
c000def9:	e8 4a 00 00 00       	call   c000df48 <ReservedFilename::ReservedFilename(int)>
c000defe:	83 c4 10             	add    esp,0x10
c000df01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df05:	89 1c 85 c0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb740],ebx
c000df0c:	83 ec 0c             	sub    esp,0xc
c000df0f:	6a 0c                	push   0xc
c000df11:	e8 de 11 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000df16:	83 c4 10             	add    esp,0x10
c000df19:	89 c3                	mov    ebx,eax
c000df1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df1f:	05 20 ff ff 0f       	add    eax,0xfffff20
c000df24:	83 ec 08             	sub    esp,0x8
c000df27:	50                   	push   eax
c000df28:	53                   	push   ebx
c000df29:	e8 1a 00 00 00       	call   c000df48 <ReservedFilename::ReservedFilename(int)>
c000df2e:	83 c4 10             	add    esp,0x10
c000df31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df35:	89 1c 85 80 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb780],ebx
c000df3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000df40:	eb 93                	jmp    c000ded5 <UnixFile::UnixFile(int)+0xfd>
c000df42:	90                   	nop
c000df43:	83 c4 18             	add    esp,0x18
c000df46:	5b                   	pop    ebx
c000df47:	c3                   	ret    

c000df48 <ReservedFilename::ReservedFilename(int)>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4f:	83 ec 08             	sub    esp,0x8
c000df52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df56:	50                   	push   eax
c000df57:	e8 7c fe ff ff       	call   c000ddd8 <UnixFile::UnixFile(int)>
c000df5c:	83 c4 10             	add    esp,0x10
c000df5f:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000df64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df68:	89 10                	mov    DWORD PTR [eax],edx
c000df6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df72:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000df75:	90                   	nop
c000df76:	83 c4 0c             	add    esp,0xc
c000df79:	c3                   	ret    

c000df7a <UnixFile::~UnixFile()>:
c000df7a:	83 ec 1c             	sub    esp,0x1c
c000df7d:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000df82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df86:	89 10                	mov    DWORD PTR [eax],edx
c000df88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df8f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df94:	7f 73                	jg     c000e009 <UnixFile::~UnixFile()+0x8f>
c000df96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df9e:	83 ec 0c             	sub    esp,0xc
c000dfa1:	68 f8 48 02 c0       	push   0xc00248f8
c000dfa6:	e8 93 19 01 00       	call   c001f93e <LinkedList<UnixFile>::getFirstElement()>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb2:	83 ec 0c             	sub    esp,0xc
c000dfb5:	68 f8 48 02 c0       	push   0xc00248f8
c000dfba:	e8 87 19 01 00       	call   c001f946 <LinkedList<UnixFile>::removeFirst()>
c000dfbf:	83 c4 10             	add    esp,0x10
c000dfc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfc6:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dfca:	74 40                	je     c000e00c <UnixFile::~UnixFile()+0x92>
c000dfcc:	83 ec 08             	sub    esp,0x8
c000dfcf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfd3:	68 f8 48 02 c0       	push   0xc00248f8
c000dfd8:	e8 8d 18 01 00       	call   c001f86a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dfdd:	83 c4 10             	add    esp,0x10
c000dfe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfe4:	8d 50 01             	lea    edx,[eax+0x1]
c000dfe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfeb:	3d 88 13 00 00       	cmp    eax,0x1388
c000dff0:	0f 94 c0             	sete   al
c000dff3:	84 c0                	test   al,al
c000dff5:	74 a7                	je     c000df9e <UnixFile::~UnixFile()+0x24>
c000dff7:	83 ec 0c             	sub    esp,0xc
c000dffa:	68 44 16 02 c0       	push   0xc0021644
c000dfff:	e8 4e 7a 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	eb 95                	jmp    c000df9e <UnixFile::~UnixFile()+0x24>
c000e009:	90                   	nop
c000e00a:	eb 01                	jmp    c000e00d <UnixFile::~UnixFile()+0x93>
c000e00c:	90                   	nop
c000e00d:	90                   	nop
c000e00e:	83 c4 1c             	add    esp,0x1c
c000e011:	c3                   	ret    

c000e012 <UnixFile::~UnixFile()>:
c000e012:	83 ec 0c             	sub    esp,0xc
c000e015:	83 ec 0c             	sub    esp,0xc
c000e018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01c:	e8 59 ff ff ff       	call   c000df7a <UnixFile::~UnixFile()>
c000e021:	83 c4 10             	add    esp,0x10
c000e024:	83 ec 08             	sub    esp,0x8
c000e027:	6a 0c                	push   0xc
c000e029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02d:	e8 d1 10 00 00       	call   c000f103 <operator delete(void*, unsigned long)>
c000e032:	83 c4 10             	add    esp,0x10
c000e035:	83 c4 0c             	add    esp,0xc
c000e038:	c3                   	ret    
c000e039:	90                   	nop

c000e03a <ReservedFilename::~ReservedFilename()>:
c000e03a:	83 ec 0c             	sub    esp,0xc
c000e03d:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000e042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e046:	89 10                	mov    DWORD PTR [eax],edx
c000e048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04c:	83 ec 0c             	sub    esp,0xc
c000e04f:	50                   	push   eax
c000e050:	e8 25 ff ff ff       	call   c000df7a <UnixFile::~UnixFile()>
c000e055:	83 c4 10             	add    esp,0x10
c000e058:	90                   	nop
c000e059:	83 c4 0c             	add    esp,0xc
c000e05c:	c3                   	ret    
c000e05d:	90                   	nop

c000e05e <ReservedFilename::~ReservedFilename()>:
c000e05e:	83 ec 0c             	sub    esp,0xc
c000e061:	83 ec 0c             	sub    esp,0xc
c000e064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e068:	e8 cd ff ff ff       	call   c000e03a <ReservedFilename::~ReservedFilename()>
c000e06d:	83 c4 10             	add    esp,0x10
c000e070:	83 ec 08             	sub    esp,0x8
c000e073:	6a 0c                	push   0xc
c000e075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e079:	e8 85 10 00 00       	call   c000f103 <operator delete(void*, unsigned long)>
c000e07e:	83 c4 10             	add    esp,0x10
c000e081:	83 c4 0c             	add    esp,0xc
c000e084:	c3                   	ret    

c000e085 <getFromFileDescriptor(int)>:
c000e085:	53                   	push   ebx
c000e086:	83 ec 08             	sub    esp,0x8
c000e089:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e08d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e093:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e099:	7f 33                	jg     c000e0ce <getFromFileDescriptor(int)+0x49>
c000e09b:	83 ec 0c             	sub    esp,0xc
c000e09e:	68 f8 48 02 c0       	push   0xc00248f8
c000e0a3:	e8 96 18 01 00       	call   c001f93e <LinkedList<UnixFile>::getFirstElement()>
c000e0a8:	83 c4 10             	add    esp,0x10
c000e0ab:	85 c0                	test   eax,eax
c000e0ad:	75 07                	jne    c000e0b6 <getFromFileDescriptor(int)+0x31>
c000e0af:	31 c0                	xor    eax,eax
c000e0b1:	e9 98 00 00 00       	jmp    c000e14e <getFromFileDescriptor(int)+0xc9>
c000e0b6:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e0b9:	0f 84 8f 00 00 00    	je     c000e14e <getFromFileDescriptor(int)+0xc9>
c000e0bf:	52                   	push   edx
c000e0c0:	52                   	push   edx
c000e0c1:	50                   	push   eax
c000e0c2:	68 f8 48 02 c0       	push   0xc00248f8
c000e0c7:	e8 1c 19 01 00       	call   c001f9e8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e0cc:	eb da                	jmp    c000e0a8 <getFromFileDescriptor(int)+0x23>
c000e0ce:	83 ec 0c             	sub    esp,0xc
c000e0d1:	68 5d 15 02 c0       	push   0xc002155d
c000e0d6:	e8 4e 11 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000e0db:	83 c4 10             	add    esp,0x10
c000e0de:	a1 ec 48 02 c0       	mov    eax,ds:0xc00248ec
c000e0e3:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e0e9:	74 63                	je     c000e14e <getFromFileDescriptor(int)+0xc9>
c000e0eb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e0f1:	75 17                	jne    c000e10a <getFromFileDescriptor(int)+0x85>
c000e0f3:	83 ec 0c             	sub    esp,0xc
c000e0f6:	68 84 15 02 c0       	push   0xc0021584
c000e0fb:	e8 29 11 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000e100:	a1 f0 48 02 c0       	mov    eax,ds:0xc00248f0
c000e105:	83 c4 10             	add    esp,0x10
c000e108:	eb 44                	jmp    c000e14e <getFromFileDescriptor(int)+0xc9>
c000e10a:	a1 e8 48 02 c0       	mov    eax,ds:0xc00248e8
c000e10f:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e115:	74 37                	je     c000e14e <getFromFileDescriptor(int)+0xc9>
c000e117:	a1 e4 48 02 c0       	mov    eax,ds:0xc00248e4
c000e11c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e122:	74 2a                	je     c000e14e <getFromFileDescriptor(int)+0xc9>
c000e124:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e12a:	83 f8 08             	cmp    eax,0x8
c000e12d:	77 09                	ja     c000e138 <getFromFileDescriptor(int)+0xb3>
c000e12f:	8b 04 85 c0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb740]
c000e136:	eb 16                	jmp    c000e14e <getFromFileDescriptor(int)+0xc9>
c000e138:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e13e:	83 fb 08             	cmp    ebx,0x8
c000e141:	0f 87 68 ff ff ff    	ja     c000e0af <getFromFileDescriptor(int)+0x2a>
c000e147:	8b 04 9d 80 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb780]
c000e14e:	83 c4 08             	add    esp,0x8
c000e151:	5b                   	pop    ebx
c000e152:	c3                   	ret    

c000e153 <__static_initialization_and_destruction_0(int, int)>:
c000e153:	83 ec 0c             	sub    esp,0xc
c000e156:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e15b:	75 34                	jne    c000e191 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e15d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e165:	75 2a                	jne    c000e191 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e167:	83 ec 0c             	sub    esp,0xc
c000e16a:	68 f8 48 02 c0       	push   0xc00248f8
c000e16f:	e8 9e 16 01 00       	call   c001f812 <LinkedList<UnixFile>::LinkedList()>
c000e174:	83 c4 10             	add    esp,0x10
c000e177:	83 ec 04             	sub    esp,0x4
c000e17a:	68 bc 3b 02 c0       	push   0xc0023bbc
c000e17f:	68 f8 48 02 c0       	push   0xc00248f8
c000e184:	68 10 f8 01 c0       	push   0xc001f810
c000e189:	e8 f1 0e 00 00       	call   c000f07f <__cxa_atexit>
c000e18e:	83 c4 10             	add    esp,0x10
c000e191:	90                   	nop
c000e192:	83 c4 0c             	add    esp,0xc
c000e195:	c3                   	ret    

c000e196 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e196:	83 ec 0c             	sub    esp,0xc
c000e199:	83 ec 08             	sub    esp,0x8
c000e19c:	68 ff ff 00 00       	push   0xffff
c000e1a1:	6a 01                	push   0x1
c000e1a3:	e8 ab ff ff ff       	call   c000e153 <__static_initialization_and_destruction_0(int, int)>
c000e1a8:	83 c4 10             	add    esp,0x10
c000e1ab:	83 c4 0c             	add    esp,0xc
c000e1ae:	c3                   	ret    
c000e1af:	90                   	nop

c000e1b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e1b0:	53                   	push   ebx
c000e1b1:	8b 15 48 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c48
c000e1b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e1bf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e1c5:	89 c8                	mov    eax,ecx
c000e1c7:	d1 e8                	shr    eax,1
c000e1c9:	01 d0                	add    eax,edx
c000e1cb:	83 e1 01             	and    ecx,0x1
c000e1ce:	8a 10                	mov    dl,BYTE PTR [eax]
c000e1d0:	75 09                	jne    c000e1db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e1d2:	83 e2 f0             	and    edx,0xfffffff0
c000e1d5:	09 da                	or     edx,ebx
c000e1d7:	88 10                	mov    BYTE PTR [eax],dl
c000e1d9:	5b                   	pop    ebx
c000e1da:	c3                   	ret    
c000e1db:	c1 e3 04             	shl    ebx,0x4
c000e1de:	83 e2 0f             	and    edx,0xf
c000e1e1:	09 da                	or     edx,ebx
c000e1e3:	88 10                	mov    BYTE PTR [eax],dl
c000e1e5:	5b                   	pop    ebx
c000e1e6:	c3                   	ret    

c000e1e7 <Virt::getPageState(unsigned long)>:
c000e1e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1eb:	8b 0d 48 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c48
c000e1f1:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e1f7:	89 d0                	mov    eax,edx
c000e1f9:	d1 e8                	shr    eax,1
c000e1fb:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e1fe:	88 c8                	mov    al,cl
c000e200:	c0 e8 04             	shr    al,0x4
c000e203:	83 e2 01             	and    edx,0x1
c000e206:	75 05                	jne    c000e20d <Virt::getPageState(unsigned long)+0x26>
c000e208:	88 c8                	mov    al,cl
c000e20a:	83 e0 0f             	and    eax,0xf
c000e20d:	c3                   	ret    

c000e20e <Virt::allocateKernelVirtualPages(int)>:
c000e20e:	55                   	push   ebp
c000e20f:	31 ed                	xor    ebp,ebp
c000e211:	57                   	push   edi
c000e212:	56                   	push   esi
c000e213:	53                   	push   ebx
c000e214:	31 db                	xor    ebx,ebx
c000e216:	83 ec 1c             	sub    esp,0x1c
c000e219:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e21f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e223:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e228:	57                   	push   edi
c000e229:	e8 b9 ff ff ff       	call   c000e1e7 <Virt::getPageState(unsigned long)>
c000e22e:	5a                   	pop    edx
c000e22f:	84 c0                	test   al,al
c000e231:	75 3a                	jne    c000e26d <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e233:	85 db                	test   ebx,ebx
c000e235:	75 02                	jne    c000e239 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e237:	89 fd                	mov    ebp,edi
c000e239:	43                   	inc    ebx
c000e23a:	39 f3                	cmp    ebx,esi
c000e23c:	74 5a                	je     c000e298 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e23e:	47                   	inc    edi
c000e23f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e245:	76 31                	jbe    c000e278 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e247:	c7 05 44 3c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023c44,0xc8000
c000e251:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e256:	75 28                	jne    c000e280 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e258:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e25d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e262:	57                   	push   edi
c000e263:	e8 7f ff ff ff       	call   c000e1e7 <Virt::getPageState(unsigned long)>
c000e268:	5a                   	pop    edx
c000e269:	84 c0                	test   al,al
c000e26b:	74 c6                	je     c000e233 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e26d:	47                   	inc    edi
c000e26e:	31 db                	xor    ebx,ebx
c000e270:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e276:	77 cf                	ja     c000e247 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e278:	89 3d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edi
c000e27e:	eb a8                	jmp    c000e228 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e280:	83 ec 0c             	sub    esp,0xc
c000e283:	68 9c 16 02 c0       	push   0xc002169c
c000e288:	e8 c5 77 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e28d:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e293:	83 c4 10             	add    esp,0x10
c000e296:	eb 90                	jmp    c000e228 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e298:	89 2d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,ebp
c000e29e:	4b                   	dec    ebx
c000e29f:	74 5f                	je     c000e300 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e2a1:	85 f6                	test   esi,esi
c000e2a3:	74 3d                	je     c000e2e2 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e2a5:	89 e8                	mov    eax,ebp
c000e2a7:	31 db                	xor    ebx,ebx
c000e2a9:	8d 7e ff             	lea    edi,[esi-0x1]
c000e2ac:	eb 14                	jmp    c000e2c2 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e2ae:	6a 01                	push   0x1
c000e2b0:	43                   	inc    ebx
c000e2b1:	50                   	push   eax
c000e2b2:	e8 f9 fe ff ff       	call   c000e1b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2b7:	58                   	pop    eax
c000e2b8:	39 f3                	cmp    ebx,esi
c000e2ba:	5a                   	pop    edx
c000e2bb:	74 25                	je     c000e2e2 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e2bd:	a1 44 3c 02 c0       	mov    eax,ds:0xc0023c44
c000e2c2:	8d 50 01             	lea    edx,[eax+0x1]
c000e2c5:	85 db                	test   ebx,ebx
c000e2c7:	89 15 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edx
c000e2cd:	74 20                	je     c000e2ef <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e2cf:	39 df                	cmp    edi,ebx
c000e2d1:	75 db                	jne    c000e2ae <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e2d3:	6a 03                	push   0x3
c000e2d5:	43                   	inc    ebx
c000e2d6:	50                   	push   eax
c000e2d7:	e8 d4 fe ff ff       	call   c000e1b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2dc:	59                   	pop    ecx
c000e2dd:	39 f3                	cmp    ebx,esi
c000e2df:	58                   	pop    eax
c000e2e0:	75 db                	jne    c000e2bd <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2e2:	83 c4 1c             	add    esp,0x1c
c000e2e5:	89 e8                	mov    eax,ebp
c000e2e7:	c1 e0 0c             	shl    eax,0xc
c000e2ea:	5b                   	pop    ebx
c000e2eb:	5e                   	pop    esi
c000e2ec:	5f                   	pop    edi
c000e2ed:	5d                   	pop    ebp
c000e2ee:	c3                   	ret    
c000e2ef:	6a 02                	push   0x2
c000e2f1:	bb 01 00 00 00       	mov    ebx,0x1
c000e2f6:	50                   	push   eax
c000e2f7:	e8 b4 fe ff ff       	call   c000e1b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2fc:	58                   	pop    eax
c000e2fd:	5a                   	pop    edx
c000e2fe:	eb bd                	jmp    c000e2bd <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e300:	6a 04                	push   0x4
c000e302:	8d 45 01             	lea    eax,[ebp+0x1]
c000e305:	55                   	push   ebp
c000e306:	a3 44 3c 02 c0       	mov    ds:0xc0023c44,eax
c000e30b:	e8 a0 fe ff ff       	call   c000e1b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e310:	59                   	pop    ecx
c000e311:	5b                   	pop    ebx
c000e312:	89 e8                	mov    eax,ebp
c000e314:	c1 e0 0c             	shl    eax,0xc
c000e317:	83 c4 1c             	add    esp,0x1c
c000e31a:	5b                   	pop    ebx
c000e31b:	5e                   	pop    esi
c000e31c:	5f                   	pop    edi
c000e31d:	5d                   	pop    ebp
c000e31e:	c3                   	ret    

c000e31f <Virt::virtualMemorySetup()>:
c000e31f:	53                   	push   ebx
c000e320:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e325:	83 ec 08             	sub    esp,0x8
c000e328:	6a 0f                	push   0xf
c000e32a:	53                   	push   ebx
c000e32b:	43                   	inc    ebx
c000e32c:	e8 7f fe ff ff       	call   c000e1b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e331:	59                   	pop    ecx
c000e332:	58                   	pop    eax
c000e333:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e339:	75 ed                	jne    c000e328 <Virt::virtualMemorySetup()+0x9>
c000e33b:	50                   	push   eax
c000e33c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e341:	50                   	push   eax
c000e342:	68 00 00 00 c8       	push   0xc8000000
c000e347:	68 23 18 02 c0       	push   0xc0021823
c000e34c:	e8 d8 0e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000e351:	58                   	pop    eax
c000e352:	5a                   	pop    edx
c000e353:	68 00 f0 ff ef       	push   0xeffff000
c000e358:	68 37 18 02 c0       	push   0xc0021837
c000e35d:	e8 c7 0e 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000e362:	83 c4 10             	add    esp,0x10
c000e365:	50                   	push   eax
c000e366:	50                   	push   eax
c000e367:	6a 00                	push   0x0
c000e369:	53                   	push   ebx
c000e36a:	43                   	inc    ebx
c000e36b:	e8 40 fe ff ff       	call   c000e1b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e370:	83 c4 10             	add    esp,0x10
c000e373:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e379:	75 ea                	jne    c000e365 <Virt::virtualMemorySetup()+0x46>
c000e37b:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e380:	51                   	push   ecx
c000e381:	51                   	push   ecx
c000e382:	6a 0f                	push   0xf
c000e384:	53                   	push   ebx
c000e385:	43                   	inc    ebx
c000e386:	e8 25 fe ff ff       	call   c000e1b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e38b:	83 c4 10             	add    esp,0x10
c000e38e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e394:	75 ea                	jne    c000e380 <Virt::virtualMemorySetup()+0x61>
c000e396:	83 c4 08             	add    esp,0x8
c000e399:	5b                   	pop    ebx
c000e39a:	c3                   	ret    

c000e39b <Virt::getAKernelVAS()>:
c000e39b:	a1 04 49 02 c0       	mov    eax,ds:0xc0024904
c000e3a0:	c3                   	ret    

c000e3a1 <Virt::setupPageSwapping(int)>:
c000e3a1:	57                   	push   edi
c000e3a2:	56                   	push   esi
c000e3a3:	53                   	push   ebx
c000e3a4:	83 ec 1c             	sub    esp,0x1c
c000e3a7:	68 14 01 00 00       	push   0x114
c000e3ac:	e8 43 0d 00 00       	call   c000f0f4 <operator new(unsigned long)>
c000e3b1:	83 c4 0c             	add    esp,0xc
c000e3b4:	8b 3d f4 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025bf4
c000e3ba:	89 c6                	mov    esi,eax
c000e3bc:	57                   	push   edi
c000e3bd:	68 4b 18 02 c0       	push   0xc002184b
c000e3c2:	50                   	push   eax
c000e3c3:	e8 98 13 00 00       	call   c000f760 <File::File(char const*, Process*)>
c000e3c8:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3cb:	e8 6c 15 00 00       	call   c000f93c <File::unlink()>
c000e3d0:	58                   	pop    eax
c000e3d1:	5a                   	pop    edx
c000e3d2:	6a 12                	push   0x12
c000e3d4:	56                   	push   esi
c000e3d5:	e8 ea 13 00 00       	call   c000f7c4 <File::open(FileOpenMode)>
c000e3da:	83 c4 10             	add    esp,0x10
c000e3dd:	85 c0                	test   eax,eax
c000e3df:	0f 85 b6 00 00 00    	jne    c000e49b <Virt::setupPageSwapping(int)+0xfa>
c000e3e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3f1:	c1 e3 08             	shl    ebx,0x8
c000e3f4:	83 ec 0c             	sub    esp,0xc
c000e3f7:	c1 fb 04             	sar    ebx,0x4
c000e3fa:	68 00 00 01 00       	push   0x10000
c000e3ff:	e8 f3 db ff ff       	call   c000bff7 <malloc>
c000e404:	83 c4 0c             	add    esp,0xc
c000e407:	89 c7                	mov    edi,eax
c000e409:	68 00 00 01 00       	push   0x10000
c000e40e:	6a 00                	push   0x0
c000e410:	50                   	push   eax
c000e411:	e8 c2 22 ff ff       	call   c00006d8 <memset>
c000e416:	83 c4 10             	add    esp,0x10
c000e419:	4b                   	dec    ebx
c000e41a:	83 fb ff             	cmp    ebx,0xffffffff
c000e41d:	74 4a                	je     c000e469 <Virt::setupPageSwapping(int)+0xc8>
c000e41f:	83 ec 0c             	sub    esp,0xc
c000e422:	8b 06                	mov    eax,DWORD PTR [esi]
c000e424:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e428:	52                   	push   edx
c000e429:	57                   	push   edi
c000e42a:	6a 00                	push   0x0
c000e42c:	68 00 00 01 00       	push   0x10000
c000e431:	56                   	push   esi
c000e432:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e435:	83 c4 20             	add    esp,0x20
c000e438:	85 c0                	test   eax,eax
c000e43a:	75 4d                	jne    c000e489 <Virt::setupPageSwapping(int)+0xe8>
c000e43c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e440:	3d 00 00 01 00       	cmp    eax,0x10000
c000e445:	74 d2                	je     c000e419 <Virt::setupPageSwapping(int)+0x78>
c000e447:	52                   	push   edx
c000e448:	4b                   	dec    ebx
c000e449:	52                   	push   edx
c000e44a:	50                   	push   eax
c000e44b:	68 9e 18 02 c0       	push   0xc002189e
c000e450:	e8 d4 0d 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000e455:	c7 04 24 a7 18 02 c0 	mov    DWORD PTR [esp],0xc00218a7
c000e45c:	e8 f1 75 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e461:	83 c4 10             	add    esp,0x10
c000e464:	83 fb ff             	cmp    ebx,0xffffffff
c000e467:	75 b6                	jne    c000e41f <Virt::setupPageSwapping(int)+0x7e>
c000e469:	83 ec 0c             	sub    esp,0xc
c000e46c:	56                   	push   esi
c000e46d:	e8 b0 13 00 00       	call   c000f822 <File::close()>
c000e472:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e475:	e8 9d db ff ff       	call   c000c017 <rfree>
c000e47a:	8b 06                	mov    eax,DWORD PTR [esi]
c000e47c:	89 34 24             	mov    DWORD PTR [esp],esi
c000e47f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e482:	83 c4 20             	add    esp,0x20
c000e485:	5b                   	pop    ebx
c000e486:	5e                   	pop    esi
c000e487:	5f                   	pop    edi
c000e488:	c3                   	ret    
c000e489:	51                   	push   ecx
c000e48a:	51                   	push   ecx
c000e48b:	50                   	push   eax
c000e48c:	68 86 18 02 c0       	push   0xc0021886
c000e491:	e8 93 0d 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000e496:	83 c4 10             	add    esp,0x10
c000e499:	eb a1                	jmp    c000e43c <Virt::setupPageSwapping(int)+0x9b>
c000e49b:	53                   	push   ebx
c000e49c:	53                   	push   ebx
c000e49d:	50                   	push   eax
c000e49e:	68 62 18 02 c0       	push   0xc0021862
c000e4a3:	e8 81 0d 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000e4a8:	c7 04 24 6b 18 02 c0 	mov    DWORD PTR [esp],0xc002186b
c000e4af:	e8 9e 75 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e4b4:	83 c4 10             	add    esp,0x10
c000e4b7:	e9 29 ff ff ff       	jmp    c000e3e5 <Virt::setupPageSwapping(int)+0x44>

c000e4bc <VAS::VAS()>:
c000e4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4cb:	a3 04 49 02 c0       	mov    ds:0xc0024904,eax
c000e4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4d4:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e4d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4dc:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e4df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4e3:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e4ea:	90                   	nop
c000e4eb:	c3                   	ret    

c000e4ec <VAS::VAS(VAS*)>:
c000e4ec:	83 ec 0c             	sub    esp,0xc
c000e4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4fa:	83 ec 0c             	sub    esp,0xc
c000e4fd:	68 bc 16 02 c0       	push   0xc00216bc
c000e502:	e8 4b 75 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e507:	83 c4 10             	add    esp,0x10
c000e50a:	90                   	nop
c000e50b:	83 c4 0c             	add    esp,0xc
c000e50e:	c3                   	ret    
c000e50f:	90                   	nop

c000e510 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e514:	89 c2                	mov    edx,eax
c000e516:	c1 ea 16             	shr    edx,0x16
c000e519:	c1 e8 0a             	shr    eax,0xa
c000e51c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e521:	19 c9                	sbb    ecx,ecx
c000e523:	25 fc 0f 00 00       	and    eax,0xffc
c000e528:	c1 e2 0c             	shl    edx,0xc
c000e52b:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e531:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e538:	01 d0                	add    eax,edx
c000e53a:	c3                   	ret    
c000e53b:	90                   	nop

c000e53c <VAS::getPageTableEntry(unsigned long)>:
c000e53c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e540:	89 ca                	mov    edx,ecx
c000e542:	c1 ea 16             	shr    edx,0x16
c000e545:	c1 e9 0a             	shr    ecx,0xa
c000e548:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e54e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e554:	c1 e0 0c             	shl    eax,0xc
c000e557:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e55a:	c3                   	ret    

c000e55b <Virt::freeKernelVirtualPages(unsigned long)>:
c000e55b:	57                   	push   edi
c000e55c:	56                   	push   esi
c000e55d:	be 01 00 00 00       	mov    esi,0x1
c000e562:	53                   	push   ebx
c000e563:	83 ec 10             	sub    esp,0x10
c000e566:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e56a:	c1 eb 0c             	shr    ebx,0xc
c000e56d:	eb 3e                	jmp    c000e5ad <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e56f:	e8 27 fe ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c000e574:	51                   	push   ecx
c000e575:	51                   	push   ecx
c000e576:	57                   	push   edi
c000e577:	50                   	push   eax
c000e578:	e8 bf ff ff ff       	call   c000e53c <VAS::getPageTableEntry(unsigned long)>
c000e57d:	83 c4 10             	add    esp,0x10
c000e580:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e584:	8b 00                	mov    eax,DWORD PTR [eax]
c000e586:	f6 c4 04             	test   ah,0x4
c000e589:	75 5f                	jne    c000e5ea <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e58b:	80 fa 04             	cmp    dl,0x4
c000e58e:	74 78                	je     c000e608 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e590:	80 fa 02             	cmp    dl,0x2
c000e593:	0f 84 88 00 00 00    	je     c000e621 <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e599:	80 fa 03             	cmp    dl,0x3
c000e59c:	0f 84 ac 00 00 00    	je     c000e64e <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e5a2:	fe ca                	dec    dl
c000e5a4:	0f 84 92 00 00 00    	je     c000e63c <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e5aa:	43                   	inc    ebx
c000e5ab:	31 f6                	xor    esi,esi
c000e5ad:	53                   	push   ebx
c000e5ae:	e8 34 fc ff ff       	call   c000e1e7 <Virt::getPageState(unsigned long)>
c000e5b3:	5f                   	pop    edi
c000e5b4:	89 df                	mov    edi,ebx
c000e5b6:	c1 e7 0c             	shl    edi,0xc
c000e5b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5bd:	84 c0                	test   al,al
c000e5bf:	75 ae                	jne    c000e56f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e5c1:	83 ec 0c             	sub    esp,0xc
c000e5c4:	68 ad 18 02 c0       	push   0xc00218ad
c000e5c9:	e8 84 74 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e5ce:	e8 c8 fd ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c000e5d3:	5a                   	pop    edx
c000e5d4:	59                   	pop    ecx
c000e5d5:	57                   	push   edi
c000e5d6:	50                   	push   eax
c000e5d7:	e8 60 ff ff ff       	call   c000e53c <VAS::getPageTableEntry(unsigned long)>
c000e5dc:	83 c4 10             	add    esp,0x10
c000e5df:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5e5:	f6 c4 04             	test   ah,0x4
c000e5e8:	74 c0                	je     c000e5aa <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e5ea:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e5ee:	83 ec 0c             	sub    esp,0xc
c000e5f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5f6:	50                   	push   eax
c000e5f7:	e8 44 df ff ff       	call   c000c540 <Phys::freePage(unsigned long)>
c000e5fc:	83 c4 10             	add    esp,0x10
c000e5ff:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e603:	80 fa 04             	cmp    dl,0x4
c000e606:	75 88                	jne    c000e590 <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e608:	89 f0                	mov    eax,esi
c000e60a:	84 c0                	test   al,al
c000e60c:	75 46                	jne    c000e654 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e60e:	c7 44 24 20 e0 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216e0
c000e616:	83 c4 10             	add    esp,0x10
c000e619:	5b                   	pop    ebx
c000e61a:	5e                   	pop    esi
c000e61b:	5f                   	pop    edi
c000e61c:	e9 31 74 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c000e621:	89 f0                	mov    eax,esi
c000e623:	84 c0                	test   al,al
c000e625:	75 15                	jne    c000e63c <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e627:	83 ec 0c             	sub    esp,0xc
c000e62a:	68 c9 18 02 c0       	push   0xc00218c9
c000e62f:	e8 1e 74 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	e9 6e ff ff ff       	jmp    c000e5aa <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e63c:	50                   	push   eax
c000e63d:	50                   	push   eax
c000e63e:	6a 00                	push   0x0
c000e640:	53                   	push   ebx
c000e641:	e8 6a fb ff ff       	call   c000e1b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e646:	83 c4 10             	add    esp,0x10
c000e649:	e9 5c ff ff ff       	jmp    c000e5aa <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e64e:	89 f0                	mov    eax,esi
c000e650:	84 c0                	test   al,al
c000e652:	75 14                	jne    c000e668 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e654:	52                   	push   edx
c000e655:	52                   	push   edx
c000e656:	6a 00                	push   0x0
c000e658:	53                   	push   ebx
c000e659:	e8 52 fb ff ff       	call   c000e1b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e65e:	83 c4 10             	add    esp,0x10
c000e661:	83 c4 10             	add    esp,0x10
c000e664:	5b                   	pop    ebx
c000e665:	5e                   	pop    esi
c000e666:	5f                   	pop    edi
c000e667:	c3                   	ret    
c000e668:	c7 44 24 20 e5 18 02 c0 	mov    DWORD PTR [esp+0x20],0xc00218e5
c000e670:	83 c4 10             	add    esp,0x10
c000e673:	5b                   	pop    ebx
c000e674:	5e                   	pop    esi
c000e675:	5f                   	pop    edi
c000e676:	e9 d7 73 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c000e67b:	90                   	nop

c000e67c <VAS::freeAllocatedPages(unsigned long)>:
c000e67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e680:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e684:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e688:	74 09                	je     c000e693 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e68a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e68e:	e9 c8 fe ff ff       	jmp    c000e55b <Virt::freeKernelVirtualPages(unsigned long)>
c000e693:	c7 44 24 04 04 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021704
c000e69b:	e9 89 0b 00 00       	jmp    c000f229 <Dbg::kprintf(char const*, ...)>

c000e6a0 <VAS::virtualToPhysical(unsigned long)>:
c000e6a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e6a4:	50                   	push   eax
c000e6a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e6a9:	52                   	push   edx
c000e6aa:	e8 8d fe ff ff       	call   c000e53c <VAS::getPageTableEntry(unsigned long)>
c000e6af:	59                   	pop    ecx
c000e6b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6b2:	5a                   	pop    edx
c000e6b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e6b8:	c3                   	ret    
c000e6b9:	90                   	nop

c000e6ba <VAS::reflagRange(unsigned long, int, int, int)>:
c000e6ba:	55                   	push   ebp
c000e6bb:	57                   	push   edi
c000e6bc:	56                   	push   esi
c000e6bd:	53                   	push   ebx
c000e6be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e6c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6c6:	89 c3                	mov    ebx,eax
c000e6c8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e6cc:	c1 e3 0c             	shl    ebx,0xc
c000e6cf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e6d3:	01 f3                	add    ebx,esi
c000e6d5:	85 c0                	test   eax,eax
c000e6d7:	7e 1f                	jle    c000e6f8 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e6d9:	56                   	push   esi
c000e6da:	81 c6 00 10 00 00    	add    esi,0x1000
c000e6e0:	55                   	push   ebp
c000e6e1:	e8 56 fe ff ff       	call   c000e53c <VAS::getPageTableEntry(unsigned long)>
c000e6e6:	5a                   	pop    edx
c000e6e7:	59                   	pop    ecx
c000e6e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6ea:	21 f9                	and    ecx,edi
c000e6ec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6f0:	09 d1                	or     ecx,edx
c000e6f2:	39 f3                	cmp    ebx,esi
c000e6f4:	89 08                	mov    DWORD PTR [eax],ecx
c000e6f6:	75 e1                	jne    c000e6d9 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e6f8:	5b                   	pop    ebx
c000e6f9:	5e                   	pop    esi
c000e6fa:	5f                   	pop    edi
c000e6fb:	5d                   	pop    ebp
c000e6fc:	c3                   	ret    
c000e6fd:	90                   	nop

c000e6fe <VAS::setToWriteCombining(unsigned long, int)>:
c000e6fe:	83 ec 0c             	sub    esp,0xc
c000e701:	e8 e0 61 00 00       	call   c00148e6 <thisCPU()>
c000e706:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e70d:	75 04                	jne    c000e713 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e70f:	83 c4 0c             	add    esp,0xc
c000e712:	c3                   	ret    
c000e713:	83 ec 0c             	sub    esp,0xc
c000e716:	68 80 00 00 00       	push   0x80
c000e71b:	6a ff                	push   0xffffffff
c000e71d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e721:	50                   	push   eax
c000e722:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e726:	52                   	push   edx
c000e727:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e72b:	51                   	push   ecx
c000e72c:	e8 89 ff ff ff       	call   c000e6ba <VAS::reflagRange(unsigned long, int, int, int)>
c000e731:	83 c4 20             	add    esp,0x20
c000e734:	83 c4 0c             	add    esp,0xc
c000e737:	c3                   	ret    

c000e738 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e738:	83 ec 0c             	sub    esp,0xc
c000e73b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e73f:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e744:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e74b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e74e:	19 c0                	sbb    eax,eax
c000e750:	83 ca 03             	or     edx,0x3
c000e753:	83 e0 fc             	and    eax,0xfffffffc
c000e756:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e75d:	e8 93 10 01 00       	call   c001f7f5 <CPU::readCR3()>
c000e762:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e766:	83 c4 0c             	add    esp,0xc
c000e769:	e9 99 10 01 00       	jmp    c001f807 <CPU::writeCR3(unsigned long)>

c000e76e <VAS::~VAS()>:
c000e76e:	83 ec 2c             	sub    esp,0x2c
c000e771:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e779:	e8 dd a2 00 00       	call   c0018a5b <lockScheduler()>
c000e77e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e783:	8b 00                	mov    eax,DWORD PTR [eax]
c000e785:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e788:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e78e:	83 ec 04             	sub    esp,0x4
c000e791:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e795:	6a 01                	push   0x1
c000e797:	50                   	push   eax
c000e798:	e8 9b ff ff ff       	call   c000e738 <VAS::mapOtherVASIn(bool, VAS*)>
c000e79d:	83 c4 10             	add    esp,0x10
c000e7a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e7a8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e7b0:	0f 8f d7 00 00 00    	jg     c000e88d <VAS::~VAS()+0x11f>
c000e7b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7c1:	c1 e2 02             	shl    edx,0x2
c000e7c4:	01 d0                	add    eax,edx
c000e7c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d0:	83 e0 01             	and    eax,0x1
c000e7d3:	0f 84 ab 00 00 00    	je     c000e884 <VAS::~VAS()+0x116>
c000e7d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7e1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e7e9:	7f 75                	jg     c000e860 <VAS::~VAS()+0xf2>
c000e7eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e7ef:	c1 e0 0a             	shl    eax,0xa
c000e7f2:	89 c2                	mov    edx,eax
c000e7f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7f8:	01 d0                	add    eax,edx
c000e7fa:	c1 e0 0c             	shl    eax,0xc
c000e7fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e801:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e806:	8b 00                	mov    eax,DWORD PTR [eax]
c000e808:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e80b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e811:	83 ec 04             	sub    esp,0x4
c000e814:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e818:	6a 01                	push   0x1
c000e81a:	50                   	push   eax
c000e81b:	e8 f0 fc ff ff       	call   c000e510 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e820:	83 c4 10             	add    esp,0x10
c000e823:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e82b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e82d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e831:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e835:	25 01 04 00 00       	and    eax,0x401
c000e83a:	3d 01 04 00 00       	cmp    eax,0x401
c000e83f:	75 19                	jne    c000e85a <VAS::~VAS()+0xec>
c000e841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e845:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e84a:	83 ec 0c             	sub    esp,0xc
c000e84d:	50                   	push   eax
c000e84e:	e8 ed dc ff ff       	call   c000c540 <Phys::freePage(unsigned long)>
c000e853:	83 c4 10             	add    esp,0x10
c000e856:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e85a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e85e:	eb 81                	jmp    c000e7e1 <VAS::~VAS()+0x73>
c000e860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e864:	25 00 04 00 00       	and    eax,0x400
c000e869:	74 19                	je     c000e884 <VAS::~VAS()+0x116>
c000e86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e874:	83 ec 0c             	sub    esp,0xc
c000e877:	50                   	push   eax
c000e878:	e8 c3 dc ff ff       	call   c000c540 <Phys::freePage(unsigned long)>
c000e87d:	83 c4 10             	add    esp,0x10
c000e880:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e884:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e888:	e9 1b ff ff ff       	jmp    c000e7a8 <VAS::~VAS()+0x3a>
c000e88d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e891:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e894:	83 ec 0c             	sub    esp,0xc
c000e897:	50                   	push   eax
c000e898:	e8 be fc ff ff       	call   c000e55b <Virt::freeKernelVirtualPages(unsigned long)>
c000e89d:	83 c4 10             	add    esp,0x10
c000e8a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e8a7:	83 ec 0c             	sub    esp,0xc
c000e8aa:	50                   	push   eax
c000e8ab:	e8 90 dc ff ff       	call   c000c540 <Phys::freePage(unsigned long)>
c000e8b0:	83 c4 10             	add    esp,0x10
c000e8b3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e8b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8bb:	c1 e0 02             	shl    eax,0x2
c000e8be:	83 ec 08             	sub    esp,0x8
c000e8c1:	50                   	push   eax
c000e8c2:	68 28 17 02 c0       	push   0xc0021728
c000e8c7:	e8 5d 09 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000e8cc:	83 c4 10             	add    esp,0x10
c000e8cf:	e8 89 a1 00 00       	call   c0018a5d <unlockScheduler()>
c000e8d4:	90                   	nop
c000e8d5:	83 c4 2c             	add    esp,0x2c
c000e8d8:	c3                   	ret    
c000e8d9:	90                   	nop

c000e8da <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e8da:	55                   	push   ebp
c000e8db:	57                   	push   edi
c000e8dc:	56                   	push   esi
c000e8dd:	53                   	push   ebx
c000e8de:	83 ec 1c             	sub    esp,0x1c
c000e8e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8e9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e8ef:	77 08                	ja     c000e8f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e8f1:	0f 20 d8             	mov    eax,cr3
c000e8f4:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e8f7:	75 49                	jne    c000e942 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e8f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8fd:	09 d8                	or     eax,ebx
c000e8ff:	a9 ff 0f 00 00       	test   eax,0xfff
c000e904:	75 59                	jne    c000e95f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e906:	89 de                	mov    esi,ebx
c000e908:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e90b:	c1 ee 16             	shr    esi,0x16
c000e90e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e915:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e919:	74 56                	je     c000e971 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e91b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e921:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e925:	c1 eb 0a             	shr    ebx,0xa
c000e928:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e92c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e932:	09 d0                	or     eax,edx
c000e934:	c1 e6 0c             	shl    esi,0xc
c000e937:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e93a:	83 c4 1c             	add    esp,0x1c
c000e93d:	5b                   	pop    ebx
c000e93e:	5e                   	pop    esi
c000e93f:	5f                   	pop    edi
c000e940:	5d                   	pop    ebp
c000e941:	c3                   	ret    
c000e942:	83 ec 0c             	sub    esp,0xc
c000e945:	68 48 17 02 c0       	push   0xc0021748
c000e94a:	e8 da 08 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000e94f:	83 c4 10             	add    esp,0x10
c000e952:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e956:	09 d8                	or     eax,ebx
c000e958:	a9 ff 0f 00 00       	test   eax,0xfff
c000e95d:	74 a7                	je     c000e906 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e95f:	83 ec 0c             	sub    esp,0xc
c000e962:	68 b0 17 02 c0       	push   0xc00217b0
c000e967:	e8 e6 70 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e96c:	83 c4 10             	add    esp,0x10
c000e96f:	eb 95                	jmp    c000e906 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e971:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e975:	e8 53 dc ff ff       	call   c000c5cd <Phys::allocatePage()>
c000e97a:	89 c5                	mov    ebp,eax
c000e97c:	e8 1a fa ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c000e981:	83 ec 0c             	sub    esp,0xc
c000e984:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e988:	6a 01                	push   0x1
c000e98a:	e8 7f f8 ff ff       	call   c000e20e <Virt::allocateKernelVirtualPages(int)>
c000e98f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e996:	6a 01                	push   0x1
c000e998:	50                   	push   eax
c000e999:	55                   	push   ebp
c000e99a:	81 cd 07 04 00 00    	or     ebp,0x407
c000e9a0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e9a4:	51                   	push   ecx
c000e9a5:	e8 22 02 00 00       	call   c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9aa:	83 c4 1c             	add    esp,0x1c
c000e9ad:	68 00 10 00 00       	push   0x1000
c000e9b2:	6a 00                	push   0x0
c000e9b4:	50                   	push   eax
c000e9b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9b9:	e8 1a 1d ff ff       	call   c00006d8 <memset>
c000e9be:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e9c2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e9c5:	e8 91 fb ff ff       	call   c000e55b <Virt::freeKernelVirtualPages(unsigned long)>
c000e9ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9ce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9d1:	83 c4 10             	add    esp,0x10
c000e9d4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e9d7:	e9 3f ff ff ff       	jmp    c000e91b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e9dc <VAS::allocatePages(int, int)>:
c000e9dc:	55                   	push   ebp
c000e9dd:	57                   	push   edi
c000e9de:	56                   	push   esi
c000e9df:	53                   	push   ebx
c000e9e0:	83 ec 1c             	sub    esp,0x1c
c000e9e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e9e7:	e8 fa 5e 00 00       	call   c00148e6 <thisCPU()>
c000e9ec:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e9f2:	83 e0 01             	and    eax,0x1
c000e9f5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e9f9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e9fd:	0f 85 d5 00 00 00    	jne    c000ead8 <VAS::allocatePages(int, int)+0xfc>
c000ea03:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ea06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea0a:	85 c0                	test   eax,eax
c000ea0c:	0f 84 aa 00 00 00    	je     c000eabc <VAS::allocatePages(int, int)+0xe0>
c000ea12:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ea16:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea1a:	c1 e6 0c             	shl    esi,0xc
c000ea1d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ea21:	01 de                	add    esi,ebx
c000ea23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea27:	81 cd 00 04 00 00    	or     ebp,0x400
c000ea2d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ea30:	85 c0                	test   eax,eax
c000ea32:	7e 25                	jle    c000ea59 <VAS::allocatePages(int, int)+0x7d>
c000ea34:	e8 94 db ff ff       	call   c000c5cd <Phys::allocatePage()>
c000ea39:	55                   	push   ebp
c000ea3a:	53                   	push   ebx
c000ea3b:	50                   	push   eax
c000ea3c:	57                   	push   edi
c000ea3d:	e8 98 fe ff ff       	call   c000e8da <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea42:	83 c4 10             	add    esp,0x10
c000ea45:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea4a:	74 03                	je     c000ea4f <VAS::allocatePages(int, int)+0x73>
c000ea4c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea4f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea55:	39 de                	cmp    esi,ebx
c000ea57:	75 db                	jne    c000ea34 <VAS::allocatePages(int, int)+0x58>
c000ea59:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea5e:	74 3f                	je     c000ea9f <VAS::allocatePages(int, int)+0xc3>
c000ea60:	c1 ee 0a             	shr    esi,0xa
c000ea63:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea67:	c1 eb 0a             	shr    ebx,0xa
c000ea6a:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000ea70:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea76:	81 ee 00 00 40 00    	sub    esi,0x400000
c000ea7c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea82:	39 f3                	cmp    ebx,esi
c000ea84:	77 0d                	ja     c000ea93 <VAS::allocatePages(int, int)+0xb7>
c000ea86:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea89:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea8f:	39 de                	cmp    esi,ebx
c000ea91:	73 f3                	jae    c000ea86 <VAS::allocatePages(int, int)+0xaa>
c000ea93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea97:	83 c4 1c             	add    esp,0x1c
c000ea9a:	5b                   	pop    ebx
c000ea9b:	5e                   	pop    esi
c000ea9c:	5f                   	pop    edi
c000ea9d:	5d                   	pop    ebp
c000ea9e:	c3                   	ret    
c000ea9f:	e8 51 0d 01 00       	call   c001f7f5 <CPU::readCR3()>
c000eaa4:	83 ec 0c             	sub    esp,0xc
c000eaa7:	50                   	push   eax
c000eaa8:	e8 5a 0d 01 00       	call   c001f807 <CPU::writeCR3(unsigned long)>
c000eaad:	83 c4 10             	add    esp,0x10
c000eab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eab4:	83 c4 1c             	add    esp,0x1c
c000eab7:	5b                   	pop    ebx
c000eab8:	5e                   	pop    esi
c000eab9:	5f                   	pop    edi
c000eaba:	5d                   	pop    ebp
c000eabb:	c3                   	ret    
c000eabc:	83 ec 0c             	sub    esp,0xc
c000eabf:	68 d4 17 02 c0       	push   0xc00217d4
c000eac4:	e8 89 6f 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000eac9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000eacc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ead0:	83 c4 10             	add    esp,0x10
c000ead3:	e9 3a ff ff ff       	jmp    c000ea12 <VAS::allocatePages(int, int)+0x36>
c000ead8:	83 ec 0c             	sub    esp,0xc
c000eadb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eadf:	53                   	push   ebx
c000eae0:	e8 29 f7 ff ff       	call   c000e20e <Virt::allocateKernelVirtualPages(int)>
c000eae5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eae9:	83 c4 10             	add    esp,0x10
c000eaec:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000eaf1:	0f 87 94 00 00 00    	ja     c000eb8b <VAS::allocatePages(int, int)+0x1af>
c000eaf7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eafb:	85 d2                	test   edx,edx
c000eafd:	7e 3c                	jle    c000eb3b <VAS::allocatePages(int, int)+0x15f>
c000eaff:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb03:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb07:	c1 e5 0c             	shl    ebp,0xc
c000eb0a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eb0e:	81 ce 00 04 00 00    	or     esi,0x400
c000eb14:	01 dd                	add    ebp,ebx
c000eb16:	e8 b2 da ff ff       	call   c000c5cd <Phys::allocatePage()>
c000eb1b:	56                   	push   esi
c000eb1c:	53                   	push   ebx
c000eb1d:	50                   	push   eax
c000eb1e:	57                   	push   edi
c000eb1f:	e8 b6 fd ff ff       	call   c000e8da <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb24:	83 c4 10             	add    esp,0x10
c000eb27:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb2c:	74 03                	je     c000eb31 <VAS::allocatePages(int, int)+0x155>
c000eb2e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb31:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb37:	39 dd                	cmp    ebp,ebx
c000eb39:	75 db                	jne    c000eb16 <VAS::allocatePages(int, int)+0x13a>
c000eb3b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb40:	0f 84 59 ff ff ff    	je     c000ea9f <VAS::allocatePages(int, int)+0xc3>
c000eb46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb4e:	c1 e0 0c             	shl    eax,0xc
c000eb51:	89 d3                	mov    ebx,edx
c000eb53:	c1 eb 0a             	shr    ebx,0xa
c000eb56:	01 d0                	add    eax,edx
c000eb58:	c1 e8 0a             	shr    eax,0xa
c000eb5b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb61:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb66:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb6c:	2d 00 00 40 00       	sub    eax,0x400000
c000eb71:	39 c3                	cmp    ebx,eax
c000eb73:	0f 87 1a ff ff ff    	ja     c000ea93 <VAS::allocatePages(int, int)+0xb7>
c000eb79:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb7c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb82:	39 d8                	cmp    eax,ebx
c000eb84:	73 f3                	jae    c000eb79 <VAS::allocatePages(int, int)+0x19d>
c000eb86:	e9 08 ff ff ff       	jmp    c000ea93 <VAS::allocatePages(int, int)+0xb7>
c000eb8b:	e8 56 5d 00 00       	call   c00148e6 <thisCPU()>
c000eb90:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eb97:	0f 84 5a ff ff ff    	je     c000eaf7 <VAS::allocatePages(int, int)+0x11b>
c000eb9d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eba1:	80 cd 01             	or     ch,0x1
c000eba4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eba8:	e9 4a ff ff ff       	jmp    c000eaf7 <VAS::allocatePages(int, int)+0x11b>
c000ebad:	90                   	nop

c000ebae <VAS::setCPUSpecific(unsigned long)>:
c000ebae:	83 ec 0c             	sub    esp,0xc
c000ebb1:	6a 05                	push   0x5
c000ebb3:	68 00 00 40 c2       	push   0xc2400000
c000ebb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebbc:	50                   	push   eax
c000ebbd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebc1:	52                   	push   edx
c000ebc2:	e8 13 fd ff ff       	call   c000e8da <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebc7:	83 c4 1c             	add    esp,0x1c
c000ebca:	c3                   	ret    
c000ebcb:	90                   	nop

c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000ebcc:	55                   	push   ebp
c000ebcd:	57                   	push   edi
c000ebce:	56                   	push   esi
c000ebcf:	53                   	push   ebx
c000ebd0:	83 ec 1c             	sub    esp,0x1c
c000ebd3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ebd7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ebdb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ebdf:	e8 02 5d 00 00       	call   c00148e6 <thisCPU()>
c000ebe4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ebea:	83 e0 01             	and    eax,0x1
c000ebed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebf1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebf5:	85 c0                	test   eax,eax
c000ebf7:	7e 39                	jle    c000ec32 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000ebf9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebfd:	89 f3                	mov    ebx,esi
c000ebff:	c1 e0 0c             	shl    eax,0xc
c000ec02:	01 f0                	add    eax,esi
c000ec04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec08:	55                   	push   ebp
c000ec09:	53                   	push   ebx
c000ec0a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec0e:	29 f0                	sub    eax,esi
c000ec10:	01 d8                	add    eax,ebx
c000ec12:	50                   	push   eax
c000ec13:	57                   	push   edi
c000ec14:	e8 c1 fc ff ff       	call   c000e8da <VAS::mapPage(unsigned long, unsigned long, int)>
c000ec19:	83 c4 10             	add    esp,0x10
c000ec1c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec21:	74 03                	je     c000ec26 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000ec23:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec26:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec2c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000ec30:	75 d6                	jne    c000ec08 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000ec32:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec37:	74 42                	je     c000ec7b <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000ec39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec3d:	89 f3                	mov    ebx,esi
c000ec3f:	c1 e0 0c             	shl    eax,0xc
c000ec42:	c1 eb 0a             	shr    ebx,0xa
c000ec45:	01 f0                	add    eax,esi
c000ec47:	c1 e8 0a             	shr    eax,0xa
c000ec4a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ec50:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec55:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ec5b:	2d 00 00 40 00       	sub    eax,0x400000
c000ec60:	39 c3                	cmp    ebx,eax
c000ec62:	77 0d                	ja     c000ec71 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ec64:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec67:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec6d:	39 d8                	cmp    eax,ebx
c000ec6f:	73 f3                	jae    c000ec64 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ec71:	83 c4 1c             	add    esp,0x1c
c000ec74:	89 f0                	mov    eax,esi
c000ec76:	5b                   	pop    ebx
c000ec77:	5e                   	pop    esi
c000ec78:	5f                   	pop    edi
c000ec79:	5d                   	pop    ebp
c000ec7a:	c3                   	ret    
c000ec7b:	e8 75 0b 01 00       	call   c001f7f5 <CPU::readCR3()>
c000ec80:	83 ec 0c             	sub    esp,0xc
c000ec83:	50                   	push   eax
c000ec84:	e8 7e 0b 01 00       	call   c001f807 <CPU::writeCR3(unsigned long)>
c000ec89:	83 c4 10             	add    esp,0x10
c000ec8c:	89 f0                	mov    eax,esi
c000ec8e:	83 c4 1c             	add    esp,0x1c
c000ec91:	5b                   	pop    ebx
c000ec92:	5e                   	pop    esi
c000ec93:	5f                   	pop    edi
c000ec94:	5d                   	pop    ebp
c000ec95:	c3                   	ret    

c000ec96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ec96:	55                   	push   ebp
c000ec97:	57                   	push   edi
c000ec98:	56                   	push   esi
c000ec99:	53                   	push   ebx
c000ec9a:	83 ec 1c             	sub    esp,0x1c
c000ec9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eca1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000eca5:	09 f0                	or     eax,esi
c000eca7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ecab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ecaf:	a9 ff 0f 00 00       	test   eax,0xfff
c000ecb4:	75 4c                	jne    c000ed02 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ecb6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecba:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ecbd:	c1 eb 16             	shr    ebx,0x16
c000ecc0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ecc7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000eccb:	74 4f                	je     c000ed1c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000eccd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecd1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ecd5:	c1 e8 0a             	shr    eax,0xa
c000ecd8:	80 fa 01             	cmp    dl,0x1
c000ecdb:	19 d2                	sbb    edx,edx
c000ecdd:	25 fc 0f 00 00       	and    eax,0xffc
c000ece2:	c1 e3 0c             	shl    ebx,0xc
c000ece5:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000eceb:	01 d8                	add    eax,ebx
c000eced:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ecf1:	09 d9                	or     ecx,ebx
c000ecf3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ecfa:	83 c4 1c             	add    esp,0x1c
c000ecfd:	5b                   	pop    ebx
c000ecfe:	5e                   	pop    esi
c000ecff:	5f                   	pop    edi
c000ed00:	5d                   	pop    ebp
c000ed01:	c3                   	ret    
c000ed02:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ed06:	83 ec 0c             	sub    esp,0xc
c000ed09:	68 00 18 02 c0       	push   0xc0021800
c000ed0e:	e8 3f 6d 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000ed13:	83 c4 10             	add    esp,0x10
c000ed16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed1a:	eb 9a                	jmp    c000ecb6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ed1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ed20:	e8 a8 d8 ff ff       	call   c000c5cd <Phys::allocatePage()>
c000ed25:	89 c5                	mov    ebp,eax
c000ed27:	e8 6f f6 ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed33:	6a 01                	push   0x1
c000ed35:	e8 d4 f4 ff ff       	call   c000e20e <Virt::allocateKernelVirtualPages(int)>
c000ed3a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ed41:	6a 01                	push   0x1
c000ed43:	50                   	push   eax
c000ed44:	55                   	push   ebp
c000ed45:	81 cd 07 04 00 00    	or     ebp,0x407
c000ed4b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ed4f:	51                   	push   ecx
c000ed50:	e8 77 fe ff ff       	call   c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed55:	83 c4 1c             	add    esp,0x1c
c000ed58:	68 00 10 00 00       	push   0x1000
c000ed5d:	6a 00                	push   0x0
c000ed5f:	50                   	push   eax
c000ed60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed64:	e8 6f 19 ff ff       	call   c00006d8 <memset>
c000ed69:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ed6d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ed70:	e8 e6 f7 ff ff       	call   c000e55b <Virt::freeKernelVirtualPages(unsigned long)>
c000ed75:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ed78:	83 c4 10             	add    esp,0x10
c000ed7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed7f:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ed82:	e9 46 ff ff ff       	jmp    c000eccd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ed87:	90                   	nop

c000ed88 <VAS::VAS(bool)>:
c000ed88:	53                   	push   ebx
c000ed89:	83 ec 28             	sub    esp,0x28
c000ed8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed90:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ed9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eda3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000eda7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000edaa:	e8 1e d8 ff ff       	call   c000c5cd <Phys::allocatePage()>
c000edaf:	89 c2                	mov    edx,eax
c000edb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000edb8:	e8 de f5 ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c000edbd:	89 c3                	mov    ebx,eax
c000edbf:	83 ec 0c             	sub    esp,0xc
c000edc2:	6a 01                	push   0x1
c000edc4:	e8 45 f4 ff ff       	call   c000e20e <Virt::allocateKernelVirtualPages(int)>
c000edc9:	83 c4 10             	add    esp,0x10
c000edcc:	89 c2                	mov    edx,eax
c000edce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000edd5:	83 ec 0c             	sub    esp,0xc
c000edd8:	6a 03                	push   0x3
c000edda:	6a 01                	push   0x1
c000eddc:	52                   	push   edx
c000eddd:	50                   	push   eax
c000edde:	53                   	push   ebx
c000eddf:	e8 e8 fd ff ff       	call   c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ede4:	83 c4 20             	add    esp,0x20
c000ede7:	89 c2                	mov    edx,eax
c000ede9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eded:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000edf0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000edf8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ee00:	7f 1c                	jg     c000ee1e <VAS::VAS(bool)+0x96>
c000ee02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee06:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee0d:	c1 e2 02             	shl    edx,0x2
c000ee10:	01 d0                	add    eax,edx
c000ee12:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee18:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ee1c:	eb da                	jmp    c000edf8 <VAS::VAS(bool)+0x70>
c000ee1e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ee26:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ee2e:	7f 71                	jg     c000eea1 <VAS::VAS(bool)+0x119>
c000ee30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee34:	2d 00 02 00 00       	sub    eax,0x200
c000ee39:	c1 e0 0c             	shl    eax,0xc
c000ee3c:	83 c8 03             	or     eax,0x3
c000ee3f:	89 c3                	mov    ebx,eax
c000ee41:	e8 a0 5a 00 00       	call   c00148e6 <thisCPU()>
c000ee46:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee4c:	83 e0 10             	and    eax,0x10
c000ee4f:	84 c0                	test   al,al
c000ee51:	74 07                	je     c000ee5a <VAS::VAS(bool)+0xd2>
c000ee53:	b8 00 01 00 00       	mov    eax,0x100
c000ee58:	eb 05                	jmp    c000ee5f <VAS::VAS(bool)+0xd7>
c000ee5a:	b8 00 00 00 00       	mov    eax,0x0
c000ee5f:	09 d8                	or     eax,ebx
c000ee61:	89 c1                	mov    ecx,eax
c000ee63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee6e:	c1 e2 02             	shl    edx,0x2
c000ee71:	01 d0                	add    eax,edx
c000ee73:	89 ca                	mov    edx,ecx
c000ee75:	89 10                	mov    DWORD PTR [eax],edx
c000ee77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee7b:	2d 40 03 00 00       	sub    eax,0x340
c000ee80:	83 f8 7f             	cmp    eax,0x7f
c000ee83:	77 16                	ja     c000ee9b <VAS::VAS(bool)+0x113>
c000ee85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee90:	c1 e2 02             	shl    edx,0x2
c000ee93:	01 d0                	add    eax,edx
c000ee95:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee9b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee9f:	eb 85                	jmp    c000ee26 <VAS::VAS(bool)+0x9e>
c000eea1:	e8 40 5a 00 00       	call   c00148e6 <thisCPU()>
c000eea6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eeac:	83 e0 10             	and    eax,0x10
c000eeaf:	84 c0                	test   al,al
c000eeb1:	74 07                	je     c000eeba <VAS::VAS(bool)+0x132>
c000eeb3:	b8 03 41 00 00       	mov    eax,0x4103
c000eeb8:	eb 05                	jmp    c000eebf <VAS::VAS(bool)+0x137>
c000eeba:	b8 03 40 00 00       	mov    eax,0x4003
c000eebf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eec3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eec6:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eecc:	89 02                	mov    DWORD PTR [edx],eax
c000eece:	e8 13 5a 00 00       	call   c00148e6 <thisCPU()>
c000eed3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eed9:	83 ec 08             	sub    esp,0x8
c000eedc:	50                   	push   eax
c000eedd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eee1:	e8 c8 fc ff ff       	call   c000ebae <VAS::setCPUSpecific(unsigned long)>
c000eee6:	83 c4 10             	add    esp,0x10
c000eee9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeed:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eef0:	e8 f1 59 00 00       	call   c00148e6 <thisCPU()>
c000eef5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eefb:	83 e0 10             	and    eax,0x10
c000eefe:	84 c0                	test   al,al
c000ef00:	74 07                	je     c000ef09 <VAS::VAS(bool)+0x181>
c000ef02:	b8 00 01 00 00       	mov    eax,0x100
c000ef07:	eb 05                	jmp    c000ef0e <VAS::VAS(bool)+0x186>
c000ef09:	b8 00 00 00 00       	mov    eax,0x0
c000ef0e:	09 d8                	or     eax,ebx
c000ef10:	89 c2                	mov    edx,eax
c000ef12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef16:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef19:	05 fc 0f 00 00       	add    eax,0xffc
c000ef1e:	83 ca 03             	or     edx,0x3
c000ef21:	89 10                	mov    DWORD PTR [eax],edx
c000ef23:	e8 be 59 00 00       	call   c00148e6 <thisCPU()>
c000ef28:	83 ec 0c             	sub    esp,0xc
c000ef2b:	50                   	push   eax
c000ef2c:	e8 ef 19 00 00       	call   c0010920 <Device::getName()>
c000ef31:	83 c4 10             	add    esp,0x10
c000ef34:	83 ec 08             	sub    esp,0x8
c000ef37:	68 ff 18 02 c0       	push   0xc00218ff
c000ef3c:	50                   	push   eax
c000ef3d:	e8 86 18 ff ff       	call   c00007c8 <strcmp>
c000ef42:	83 c4 10             	add    esp,0x10
c000ef45:	85 c0                	test   eax,eax
c000ef47:	0f 94 c0             	sete   al
c000ef4a:	84 c0                	test   al,al
c000ef4c:	74 64                	je     c000efb2 <VAS::VAS(bool)+0x22a>
c000ef4e:	e8 e6 9a 00 00       	call   c0018a39 <disableIRQs()>
c000ef53:	e8 8e 59 00 00       	call   c00148e6 <thisCPU()>
c000ef58:	05 7c 09 00 00       	add    eax,0x97c
c000ef5d:	83 ec 0c             	sub    esp,0xc
c000ef60:	50                   	push   eax
c000ef61:	e8 04 cb ff ff       	call   c000ba6a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef66:	83 c4 10             	add    esp,0x10
c000ef69:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef6e:	89 c3                	mov    ebx,eax
c000ef70:	e8 71 59 00 00       	call   c00148e6 <thisCPU()>
c000ef75:	05 7c 09 00 00       	add    eax,0x97c
c000ef7a:	83 ec 0c             	sub    esp,0xc
c000ef7d:	50                   	push   eax
c000ef7e:	e8 e7 ca ff ff       	call   c000ba6a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef83:	83 c4 10             	add    esp,0x10
c000ef86:	83 ec 08             	sub    esp,0x8
c000ef89:	50                   	push   eax
c000ef8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef8e:	e8 a9 f5 ff ff       	call   c000e53c <VAS::getPageTableEntry(unsigned long)>
c000ef93:	83 c4 10             	add    esp,0x10
c000ef96:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef98:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef9d:	6a 11                	push   0x11
c000ef9f:	53                   	push   ebx
c000efa0:	50                   	push   eax
c000efa1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000efa5:	e8 30 f9 ff ff       	call   c000e8da <VAS::mapPage(unsigned long, unsigned long, int)>
c000efaa:	83 c4 10             	add    esp,0x10
c000efad:	e8 9a 9a 00 00       	call   c0018a4c <enableIRQs()>
c000efb2:	90                   	nop
c000efb3:	83 c4 28             	add    esp,0x28
c000efb6:	5b                   	pop    ebx
c000efb7:	c3                   	ret    

c000efb8 <mapVASFirstTime>:
c000efb8:	55                   	push   ebp
c000efb9:	57                   	push   edi
c000efba:	56                   	push   esi
c000efbb:	53                   	push   ebx
c000efbc:	83 ec 0c             	sub    esp,0xc
c000efbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efc4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000efc7:	4a                   	dec    edx
c000efc8:	0f 84 99 00 00 00    	je     c000f067 <mapVASFirstTime+0xaf>
c000efce:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000efd1:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000efd4:	c1 e5 15             	shl    ebp,0x15
c000efd7:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000efdc:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000efe1:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000efe7:	29 eb                	sub    ebx,ebp
c000efe9:	29 ee                	sub    esi,ebp
c000efeb:	e8 dd d5 ff ff       	call   c000c5cd <Phys::allocatePage()>
c000eff0:	83 ec 0c             	sub    esp,0xc
c000eff3:	68 03 04 00 00       	push   0x403
c000eff8:	6a 01                	push   0x1
c000effa:	53                   	push   ebx
c000effb:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000f001:	50                   	push   eax
c000f002:	57                   	push   edi
c000f003:	e8 c4 fb ff ff       	call   c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f008:	83 c4 20             	add    esp,0x20
c000f00b:	39 f3                	cmp    ebx,esi
c000f00d:	75 dc                	jne    c000efeb <mapVASFirstTime+0x33>
c000f00f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000f014:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000f019:	29 e8                	sub    eax,ebp
c000f01b:	29 ee                	sub    esi,ebp
c000f01d:	89 c5                	mov    ebp,eax
c000f01f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000f023:	19 db                	sbb    ebx,ebx
c000f025:	e8 a3 d5 ff ff       	call   c000c5cd <Phys::allocatePage()>
c000f02a:	83 e3 04             	and    ebx,0x4
c000f02d:	83 ec 0c             	sub    esp,0xc
c000f030:	81 c3 03 04 00 00    	add    ebx,0x403
c000f036:	53                   	push   ebx
c000f037:	6a 01                	push   0x1
c000f039:	56                   	push   esi
c000f03a:	81 ee 00 10 00 00    	sub    esi,0x1000
c000f040:	50                   	push   eax
c000f041:	57                   	push   edi
c000f042:	e8 85 fb ff ff       	call   c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f047:	83 c4 20             	add    esp,0x20
c000f04a:	39 f5                	cmp    ebp,esi
c000f04c:	75 d1                	jne    c000f01f <mapVASFirstTime+0x67>
c000f04e:	e8 a2 07 01 00       	call   c001f7f5 <CPU::readCR3()>
c000f053:	83 ec 0c             	sub    esp,0xc
c000f056:	50                   	push   eax
c000f057:	e8 ab 07 01 00       	call   c001f807 <CPU::writeCR3(unsigned long)>
c000f05c:	83 c4 10             	add    esp,0x10
c000f05f:	83 c4 0c             	add    esp,0xc
c000f062:	5b                   	pop    ebx
c000f063:	5e                   	pop    esi
c000f064:	5f                   	pop    edi
c000f065:	5d                   	pop    ebp
c000f066:	c3                   	ret    
c000f067:	83 ec 0c             	sub    esp,0xc
c000f06a:	68 0d 19 02 c0       	push   0xc002190d
c000f06f:	e8 b5 01 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000f074:	83 c4 10             	add    esp,0x10
c000f077:	83 c4 0c             	add    esp,0xc
c000f07a:	5b                   	pop    ebx
c000f07b:	5e                   	pop    esi
c000f07c:	5f                   	pop    edi
c000f07d:	5d                   	pop    ebp
c000f07e:	c3                   	ret    

c000f07f <__cxa_atexit>:
c000f07f:	31 c0                	xor    eax,eax
c000f081:	c3                   	ret    

c000f082 <__cxa_finalize>:
c000f082:	c3                   	ret    

c000f083 <__stack_chk_fail>:
c000f083:	55                   	push   ebp
c000f084:	89 e5                	mov    ebp,esp
c000f086:	83 ec 10             	sub    esp,0x10
c000f089:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f08c:	68 26 19 02 c0       	push   0xc0021926
c000f091:	e8 93 01 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000f096:	58                   	pop    eax
c000f097:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f09a:	5a                   	pop    edx
c000f09b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f09e:	68 26 19 02 c0       	push   0xc0021926
c000f0a3:	e8 81 01 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000f0a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0ab:	59                   	pop    ecx
c000f0ac:	5a                   	pop    edx
c000f0ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0b2:	68 26 19 02 c0       	push   0xc0021926
c000f0b7:	e8 6d 01 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000f0bc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0bf:	59                   	pop    ecx
c000f0c0:	5a                   	pop    edx
c000f0c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0c8:	68 26 19 02 c0       	push   0xc0021926
c000f0cd:	e8 57 01 00 00       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c000f0d2:	c7 04 24 2e 19 02 c0 	mov    DWORD PTR [esp],0xc002192e
c000f0d9:	e8 74 69 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000f0de:	83 c4 10             	add    esp,0x10
c000f0e1:	c9                   	leave  
c000f0e2:	c3                   	ret    

c000f0e3 <__cxa_pure_virtual>:
c000f0e3:	83 ec 18             	sub    esp,0x18
c000f0e6:	68 46 19 02 c0       	push   0xc0021946
c000f0eb:	e8 62 69 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000f0f0:	83 c4 1c             	add    esp,0x1c
c000f0f3:	c3                   	ret    

c000f0f4 <operator new(unsigned long)>:
c000f0f4:	e9 fe ce ff ff       	jmp    c000bff7 <malloc>

c000f0f9 <operator new[](unsigned long)>:
c000f0f9:	e9 f9 ce ff ff       	jmp    c000bff7 <malloc>

c000f0fe <operator delete(void*)>:
c000f0fe:	e9 14 cf ff ff       	jmp    c000c017 <rfree>

c000f103 <operator delete(void*, unsigned long)>:
c000f103:	e9 0f cf ff ff       	jmp    c000c017 <rfree>

c000f108 <operator delete[](void*)>:
c000f108:	e9 0a cf ff ff       	jmp    c000c017 <rfree>

c000f10d <operator delete[](void*, unsigned long)>:
c000f10d:	e9 05 cf ff ff       	jmp    c000c017 <rfree>

c000f112 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f112:	57                   	push   edi
c000f113:	56                   	push   esi
c000f114:	be 5d 19 02 c0       	mov    esi,0xc002195d
c000f119:	53                   	push   ebx
c000f11a:	83 ec 40             	sub    esp,0x40
c000f11d:	a0 5c 19 02 c0       	mov    al,ds:0xc002195c
c000f122:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f126:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f12a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f12e:	b8 3e 00 00 00       	mov    eax,0x3e
c000f133:	f7 c7 02 00 00 00    	test   edi,0x2
c000f139:	75 69                	jne    c000f1a4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f13b:	89 c1                	mov    ecx,eax
c000f13d:	c1 e9 02             	shr    ecx,0x2
c000f140:	fc                   	cld    
c000f141:	31 d2                	xor    edx,edx
c000f143:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f145:	a8 02                	test   al,0x2
c000f147:	74 0b                	je     c000f154 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f149:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f14c:	66 89 17             	mov    WORD PTR [edi],dx
c000f14f:	ba 02 00 00 00       	mov    edx,0x2
c000f154:	a8 01                	test   al,0x1
c000f156:	74 06                	je     c000f15e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f158:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f15b:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f15e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f162:	83 f9 3e             	cmp    ecx,0x3e
c000f165:	7e 05                	jle    c000f16c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f167:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f16c:	89 df                	mov    edi,ebx
c000f16e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f172:	eb 02                	jmp    c000f176 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f174:	89 c7                	mov    edi,eax
c000f176:	31 d2                	xor    edx,edx
c000f178:	89 f8                	mov    eax,edi
c000f17a:	46                   	inc    esi
c000f17b:	f7 f1                	div    ecx
c000f17d:	39 cf                	cmp    edi,ecx
c000f17f:	73 f3                	jae    c000f174 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f181:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f184:	eb 02                	jmp    c000f188 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f186:	89 c3                	mov    ebx,eax
c000f188:	31 d2                	xor    edx,edx
c000f18a:	89 d8                	mov    eax,ebx
c000f18c:	f7 f1                	div    ecx
c000f18e:	4e                   	dec    esi
c000f18f:	39 cb                	cmp    ebx,ecx
c000f191:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f195:	88 16                	mov    BYTE PTR [esi],dl
c000f197:	73 ed                	jae    c000f186 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f199:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f19d:	83 c4 40             	add    esp,0x40
c000f1a0:	5b                   	pop    ebx
c000f1a1:	5e                   	pop    esi
c000f1a2:	5f                   	pop    edi
c000f1a3:	c3                   	ret    
c000f1a4:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f1a7:	83 c7 02             	add    edi,0x2
c000f1aa:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f1ae:	83 c6 02             	add    esi,0x2
c000f1b1:	83 e8 02             	sub    eax,0x2
c000f1b4:	eb 85                	jmp    c000f13b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f1b6 <Dbg::logc(char)>:
c000f1b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1ba:	ba fd 03 00 00       	mov    edx,0x3fd
c000f1bf:	ec                   	in     al,dx
c000f1c0:	a8 20                	test   al,0x20
c000f1c2:	74 fb                	je     c000f1bf <Dbg::logc(char)+0x9>
c000f1c4:	ba f8 03 00 00       	mov    edx,0x3f8
c000f1c9:	88 c8                	mov    al,cl
c000f1cb:	ee                   	out    dx,al
c000f1cc:	c3                   	ret    

c000f1cd <Dbg::logs(char*)>:
c000f1cd:	53                   	push   ebx
c000f1ce:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f1d2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1d5:	84 c0                	test   al,al
c000f1d7:	74 0f                	je     c000f1e8 <Dbg::logs(char*)+0x1b>
c000f1d9:	43                   	inc    ebx
c000f1da:	50                   	push   eax
c000f1db:	e8 d6 ff ff ff       	call   c000f1b6 <Dbg::logc(char)>
c000f1e0:	5a                   	pop    edx
c000f1e1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1e4:	84 c0                	test   al,al
c000f1e6:	75 f1                	jne    c000f1d9 <Dbg::logs(char*)+0xc>
c000f1e8:	5b                   	pop    ebx
c000f1e9:	c3                   	ret    

c000f1ea <Dbg::logWriteInt(unsigned int)>:
c000f1ea:	83 ec 10             	sub    esp,0x10
c000f1ed:	6a 0a                	push   0xa
c000f1ef:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1f3:	50                   	push   eax
c000f1f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1f8:	50                   	push   eax
c000f1f9:	e8 14 ff ff ff       	call   c000f112 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f1fe:	50                   	push   eax
c000f1ff:	e8 c9 ff ff ff       	call   c000f1cd <Dbg::logs(char*)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	c3                   	ret    

c000f208 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f208:	83 ec 10             	sub    esp,0x10
c000f20b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f20f:	50                   	push   eax
c000f210:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f214:	50                   	push   eax
c000f215:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f219:	52                   	push   edx
c000f21a:	e8 f3 fe ff ff       	call   c000f112 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f21f:	50                   	push   eax
c000f220:	e8 a8 ff ff ff       	call   c000f1cd <Dbg::logs(char*)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	c3                   	ret    

c000f229 <Dbg::kprintf(char const*, ...)>:
c000f229:	55                   	push   ebp
c000f22a:	57                   	push   edi
c000f22b:	56                   	push   esi
c000f22c:	53                   	push   ebx
c000f22d:	83 ec 0c             	sub    esp,0xc
c000f230:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f234:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f238:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f23c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f23f:	84 c0                	test   al,al
c000f241:	74 4d                	je     c000f290 <Dbg::kprintf(char const*, ...)+0x67>
c000f243:	31 ff                	xor    edi,edi
c000f245:	8d 77 01             	lea    esi,[edi+0x1]
c000f248:	3c 25                	cmp    al,0x25
c000f24a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f24d:	0f 85 ec 00 00 00    	jne    c000f33f <Dbg::kprintf(char const*, ...)+0x116>
c000f253:	83 c7 02             	add    edi,0x2
c000f256:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f259:	83 e8 25             	sub    eax,0x25
c000f25c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f25f:	3c 53                	cmp    al,0x53
c000f261:	0f 87 c0 00 00 00    	ja     c000f327 <Dbg::kprintf(char const*, ...)+0xfe>
c000f267:	25 ff 00 00 00       	and    eax,0xff
c000f26c:	ff 24 85 9c 19 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde664]
c000f273:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f277:	89 c8                	mov    eax,ecx
c000f279:	83 c1 04             	add    ecx,0x4
c000f27c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f280:	8b 00                	mov    eax,DWORD PTR [eax]
c000f282:	50                   	push   eax
c000f283:	e8 45 ff ff ff       	call   c000f1cd <Dbg::logs(char*)>
c000f288:	58                   	pop    eax
c000f289:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f28c:	84 c0                	test   al,al
c000f28e:	75 b5                	jne    c000f245 <Dbg::kprintf(char const*, ...)+0x1c>
c000f290:	83 c4 0c             	add    esp,0xc
c000f293:	5b                   	pop    ebx
c000f294:	5e                   	pop    esi
c000f295:	5f                   	pop    edi
c000f296:	5d                   	pop    ebp
c000f297:	c3                   	ret    
c000f298:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f29c:	89 d0                	mov    eax,edx
c000f29e:	83 c2 04             	add    edx,0x4
c000f2a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2a7:	50                   	push   eax
c000f2a8:	e8 3d ff ff ff       	call   c000f1ea <Dbg::logWriteInt(unsigned int)>
c000f2ad:	58                   	pop    eax
c000f2ae:	eb d9                	jmp    c000f289 <Dbg::kprintf(char const*, ...)+0x60>
c000f2b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b4:	89 d0                	mov    eax,edx
c000f2b6:	83 c2 04             	add    edx,0x4
c000f2b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2bd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f2c0:	50                   	push   eax
c000f2c1:	e8 f0 fe ff ff       	call   c000f1b6 <Dbg::logc(char)>
c000f2c6:	58                   	pop    eax
c000f2c7:	eb c0                	jmp    c000f289 <Dbg::kprintf(char const*, ...)+0x60>
c000f2c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2cd:	89 c8                	mov    eax,ecx
c000f2cf:	83 c1 04             	add    ecx,0x4
c000f2d2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2d6:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f2d8:	55                   	push   ebp
c000f2d9:	e8 0c ff ff ff       	call   c000f1ea <Dbg::logWriteInt(unsigned int)>
c000f2de:	58                   	pop    eax
c000f2df:	eb a8                	jmp    c000f289 <Dbg::kprintf(char const*, ...)+0x60>
c000f2e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2e5:	89 c8                	mov    eax,ecx
c000f2e7:	83 c1 04             	add    ecx,0x4
c000f2ea:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2ee:	6a 10                	push   0x10
c000f2f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2f2:	51                   	push   ecx
c000f2f3:	e8 10 ff ff ff       	call   c000f208 <Dbg::logWriteIntBase(unsigned int, int)>
c000f2f8:	5d                   	pop    ebp
c000f2f9:	58                   	pop    eax
c000f2fa:	eb 8d                	jmp    c000f289 <Dbg::kprintf(char const*, ...)+0x60>
c000f2fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f300:	89 d0                	mov    eax,edx
c000f302:	83 c2 08             	add    edx,0x8
c000f305:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f309:	6a 10                	push   0x10
c000f30b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f30d:	50                   	push   eax
c000f30e:	e8 f5 fe ff ff       	call   c000f208 <Dbg::logWriteIntBase(unsigned int, int)>
c000f313:	58                   	pop    eax
c000f314:	5a                   	pop    edx
c000f315:	e9 6f ff ff ff       	jmp    c000f289 <Dbg::kprintf(char const*, ...)+0x60>
c000f31a:	6a 25                	push   0x25
c000f31c:	e8 95 fe ff ff       	call   c000f1b6 <Dbg::logc(char)>
c000f321:	5a                   	pop    edx
c000f322:	e9 62 ff ff ff       	jmp    c000f289 <Dbg::kprintf(char const*, ...)+0x60>
c000f327:	6a 25                	push   0x25
c000f329:	e8 88 fe ff ff       	call   c000f1b6 <Dbg::logc(char)>
c000f32e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f332:	50                   	push   eax
c000f333:	e8 7e fe ff ff       	call   c000f1b6 <Dbg::logc(char)>
c000f338:	5a                   	pop    edx
c000f339:	59                   	pop    ecx
c000f33a:	e9 4a ff ff ff       	jmp    c000f289 <Dbg::kprintf(char const*, ...)+0x60>
c000f33f:	50                   	push   eax
c000f340:	89 f7                	mov    edi,esi
c000f342:	e8 6f fe ff ff       	call   c000f1b6 <Dbg::logc(char)>
c000f347:	89 ee                	mov    esi,ebp
c000f349:	58                   	pop    eax
c000f34a:	e9 3a ff ff ff       	jmp    c000f289 <Dbg::kprintf(char const*, ...)+0x60>
c000f34f:	90                   	nop

c000f350 <File::read(unsigned long long, void*, int*)>:
c000f350:	53                   	push   ebx
c000f351:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f355:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f359:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f360:	3c 19                	cmp    al,0x19
c000f362:	77 35                	ja     c000f399 <File::read(unsigned long long, void*, int*)+0x49>
c000f364:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f36b:	85 c0                	test   eax,eax
c000f36d:	74 2a                	je     c000f399 <File::read(unsigned long long, void*, int*)+0x49>
c000f36f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f375:	85 c0                	test   eax,eax
c000f377:	74 20                	je     c000f399 <File::read(unsigned long long, void*, int*)+0x49>
c000f379:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f37d:	74 21                	je     c000f3a0 <File::read(unsigned long long, void*, int*)+0x50>
c000f37f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f381:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f385:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f38b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f38f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f393:	5b                   	pop    ebx
c000f394:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f397:	ff e0                	jmp    eax
c000f399:	b8 0b 00 00 00       	mov    eax,0xb
c000f39e:	eb 05                	jmp    c000f3a5 <File::read(unsigned long long, void*, int*)+0x55>
c000f3a0:	b8 05 00 00 00       	mov    eax,0x5
c000f3a5:	5b                   	pop    ebx
c000f3a6:	c3                   	ret    
c000f3a7:	90                   	nop

c000f3a8 <File::write(unsigned long long, void*, int*)>:
c000f3a8:	53                   	push   ebx
c000f3a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f3b1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3b8:	3c 19                	cmp    al,0x19
c000f3ba:	77 35                	ja     c000f3f1 <File::write(unsigned long long, void*, int*)+0x49>
c000f3bc:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f3c3:	85 c0                	test   eax,eax
c000f3c5:	74 2a                	je     c000f3f1 <File::write(unsigned long long, void*, int*)+0x49>
c000f3c7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f3cd:	85 c0                	test   eax,eax
c000f3cf:	74 20                	je     c000f3f1 <File::write(unsigned long long, void*, int*)+0x49>
c000f3d1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f3d5:	74 21                	je     c000f3f8 <File::write(unsigned long long, void*, int*)+0x50>
c000f3d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f3d9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f3dd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f3e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3eb:	5b                   	pop    ebx
c000f3ec:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f3ef:	ff e0                	jmp    eax
c000f3f1:	b8 0b 00 00 00       	mov    eax,0xb
c000f3f6:	eb 05                	jmp    c000f3fd <File::write(unsigned long long, void*, int*)+0x55>
c000f3f8:	b8 05 00 00 00       	mov    eax,0x5
c000f3fd:	5b                   	pop    ebx
c000f3fe:	c3                   	ret    
c000f3ff:	90                   	nop

c000f400 <Directory::read(unsigned long long, void*, int*)>:
c000f400:	53                   	push   ebx
c000f401:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f405:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f409:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f410:	3c 19                	cmp    al,0x19
c000f412:	77 35                	ja     c000f449 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f414:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f41b:	85 c0                	test   eax,eax
c000f41d:	74 2a                	je     c000f449 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f41f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f425:	85 c0                	test   eax,eax
c000f427:	74 20                	je     c000f449 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f429:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f42d:	74 21                	je     c000f450 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f42f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f431:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f435:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f43b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f43f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f443:	5b                   	pop    ebx
c000f444:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f447:	ff e0                	jmp    eax
c000f449:	b8 0b 00 00 00       	mov    eax,0xb
c000f44e:	eb 05                	jmp    c000f455 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f450:	b8 05 00 00 00       	mov    eax,0x5
c000f455:	5b                   	pop    ebx
c000f456:	c3                   	ret    
c000f457:	90                   	nop

c000f458 <Directory::write(unsigned long long, void*, int*)>:
c000f458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f45c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f463:	b8 0b 00 00 00       	mov    eax,0xb
c000f468:	80 fa 19             	cmp    dl,0x19
c000f46b:	77 18                	ja     c000f485 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f46d:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f474:	85 d2                	test   edx,edx
c000f476:	74 0d                	je     c000f485 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f478:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f47f:	19 c0                	sbb    eax,eax
c000f481:	83 e0 0a             	and    eax,0xa
c000f484:	40                   	inc    eax
c000f485:	c3                   	ret    

c000f486 <File::isAtty()>:
c000f486:	31 c0                	xor    eax,eax
c000f488:	c3                   	ret    
c000f489:	90                   	nop

c000f48a <Directory::isAtty()>:
c000f48a:	31 c0                	xor    eax,eax
c000f48c:	c3                   	ret    
c000f48d:	90                   	nop

c000f48e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f48e:	b8 0a 00 00 00       	mov    eax,0xa
c000f493:	c3                   	ret    

c000f494 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f494:	b8 0a 00 00 00       	mov    eax,0xa
c000f499:	c3                   	ret    

c000f49a <File::~File()>:
c000f49a:	83 ec 0c             	sub    esp,0xc
c000f49d:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4a6:	89 10                	mov    DWORD PTR [eax],edx
c000f4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ac:	83 ec 0c             	sub    esp,0xc
c000f4af:	50                   	push   eax
c000f4b0:	e8 c5 ea ff ff       	call   c000df7a <UnixFile::~UnixFile()>
c000f4b5:	83 c4 10             	add    esp,0x10
c000f4b8:	90                   	nop
c000f4b9:	83 c4 0c             	add    esp,0xc
c000f4bc:	c3                   	ret    
c000f4bd:	90                   	nop

c000f4be <File::~File()>:
c000f4be:	83 ec 0c             	sub    esp,0xc
c000f4c1:	83 ec 0c             	sub    esp,0xc
c000f4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c8:	e8 cd ff ff ff       	call   c000f49a <File::~File()>
c000f4cd:	83 c4 10             	add    esp,0x10
c000f4d0:	83 ec 08             	sub    esp,0x8
c000f4d3:	68 14 01 00 00       	push   0x114
c000f4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4dc:	e8 22 fc ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c000f4e1:	83 c4 10             	add    esp,0x10
c000f4e4:	83 c4 0c             	add    esp,0xc
c000f4e7:	c3                   	ret    

c000f4e8 <Directory::~Directory()>:
c000f4e8:	83 ec 0c             	sub    esp,0xc
c000f4eb:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000f4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4f4:	89 10                	mov    DWORD PTR [eax],edx
c000f4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4fa:	83 ec 0c             	sub    esp,0xc
c000f4fd:	50                   	push   eax
c000f4fe:	e8 77 ea ff ff       	call   c000df7a <UnixFile::~UnixFile()>
c000f503:	83 c4 10             	add    esp,0x10
c000f506:	90                   	nop
c000f507:	83 c4 0c             	add    esp,0xc
c000f50a:	c3                   	ret    
c000f50b:	90                   	nop

c000f50c <Directory::~Directory()>:
c000f50c:	83 ec 0c             	sub    esp,0xc
c000f50f:	83 ec 0c             	sub    esp,0xc
c000f512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f516:	e8 cd ff ff ff       	call   c000f4e8 <Directory::~Directory()>
c000f51b:	83 c4 10             	add    esp,0x10
c000f51e:	83 ec 08             	sub    esp,0x8
c000f521:	68 14 01 00 00       	push   0x114
c000f526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f52a:	e8 d4 fb ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c000f52f:	83 c4 10             	add    esp,0x10
c000f532:	83 c4 0c             	add    esp,0xc
c000f535:	c3                   	ret    

c000f536 <Filesystem::Filesystem()>:
c000f536:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f53b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f53f:	89 10                	mov    DWORD PTR [eax],edx
c000f541:	8b 15 08 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024908
c000f547:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f54b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f54e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f552:	a3 08 49 02 c0       	mov    ds:0xc0024908,eax
c000f557:	90                   	nop
c000f558:	c3                   	ret    
c000f559:	90                   	nop

c000f55a <Filesystem::~Filesystem()>:
c000f55a:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f55f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f563:	89 10                	mov    DWORD PTR [eax],edx
c000f565:	90                   	nop
c000f566:	c3                   	ret    
c000f567:	90                   	nop

c000f568 <Filesystem::~Filesystem()>:
c000f568:	83 ec 0c             	sub    esp,0xc
c000f56b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f56f:	e8 e6 ff ff ff       	call   c000f55a <Filesystem::~Filesystem()>
c000f574:	83 c4 04             	add    esp,0x4
c000f577:	83 ec 08             	sub    esp,0x8
c000f57a:	6a 08                	push   0x8
c000f57c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f580:	e8 7e fb ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c000f585:	83 c4 10             	add    esp,0x10
c000f588:	83 c4 0c             	add    esp,0xc
c000f58b:	c3                   	ret    

c000f58c <initVFS()>:
c000f58c:	83 ec 18             	sub    esp,0x18
c000f58f:	6a 08                	push   0x8
c000f591:	e8 5e fb ff ff       	call   c000f0f4 <operator new(unsigned long)>
c000f596:	89 04 24             	mov    DWORD PTR [esp],eax
c000f599:	e8 d4 b3 00 00       	call   c001a972 <FAT::FAT()>
c000f59e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f5a5:	e8 4a fb ff ff       	call   c000f0f4 <operator new(unsigned long)>
c000f5aa:	89 04 24             	mov    DWORD PTR [esp],eax
c000f5ad:	e8 60 c6 00 00       	call   c001bc12 <ISO9660::ISO9660()>
c000f5b2:	83 c4 1c             	add    esp,0x1c
c000f5b5:	c3                   	ret    

c000f5b6 <standardiseFiles(char*, char const*, char const*)>:
c000f5b6:	55                   	push   ebp
c000f5b7:	57                   	push   edi
c000f5b8:	56                   	push   esi
c000f5b9:	53                   	push   ebx
c000f5ba:	81 ec 10 04 00 00    	sub    esp,0x410
c000f5c0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f5c7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f5ce:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f5d5:	68 00 04 00 00       	push   0x400
c000f5da:	6a 00                	push   0x0
c000f5dc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5e0:	56                   	push   esi
c000f5e1:	e8 f2 10 ff ff       	call   c00006d8 <memset>
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f5ed:	75 0b                	jne    c000f5fa <standardiseFiles(char*, char const*, char const*)+0x44>
c000f5ef:	50                   	push   eax
c000f5f0:	50                   	push   eax
c000f5f1:	57                   	push   edi
c000f5f2:	56                   	push   esi
c000f5f3:	e8 7f 11 ff ff       	call   c0000777 <strcpy>
c000f5f8:	eb 41                	jmp    c000f63b <standardiseFiles(char*, char const*, char const*)+0x85>
c000f5fa:	8a 07                	mov    al,BYTE PTR [edi]
c000f5fc:	3c 5c                	cmp    al,0x5c
c000f5fe:	74 04                	je     c000f604 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f600:	3c 2f                	cmp    al,0x2f
c000f602:	75 18                	jne    c000f61c <standardiseFiles(char*, char const*, char const*)+0x66>
c000f604:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f607:	3c 60                	cmp    al,0x60
c000f609:	7e 03                	jle    c000f60e <standardiseFiles(char*, char const*, char const*)+0x58>
c000f60b:	83 e8 20             	sub    eax,0x20
c000f60e:	88 04 24             	mov    BYTE PTR [esp],al
c000f611:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f618:	50                   	push   eax
c000f619:	50                   	push   eax
c000f61a:	eb 18                	jmp    c000f634 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f61c:	50                   	push   eax
c000f61d:	50                   	push   eax
c000f61e:	55                   	push   ebp
c000f61f:	56                   	push   esi
c000f620:	e8 52 11 ff ff       	call   c0000777 <strcpy>
c000f625:	5a                   	pop    edx
c000f626:	59                   	pop    ecx
c000f627:	68 54 2e 02 c0       	push   0xc0022e54
c000f62c:	56                   	push   esi
c000f62d:	e8 fc 11 ff ff       	call   c000082e <strcat>
c000f632:	5d                   	pop    ebp
c000f633:	58                   	pop    eax
c000f634:	57                   	push   edi
c000f635:	56                   	push   esi
c000f636:	e8 f3 11 ff ff       	call   c000082e <strcat>
c000f63b:	83 c4 10             	add    esp,0x10
c000f63e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f641:	3c 60                	cmp    al,0x60
c000f643:	7e 03                	jle    c000f648 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f645:	83 e8 20             	sub    eax,0x20
c000f648:	88 04 24             	mov    BYTE PTR [esp],al
c000f64b:	88 03                	mov    BYTE PTR [ebx],al
c000f64d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f654:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f65a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f65e:	bf 03 00 00 00       	mov    edi,0x3
c000f663:	b8 03 00 00 00       	mov    eax,0x3
c000f668:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f66b:	84 d2                	test   dl,dl
c000f66d:	0f 84 91 00 00 00    	je     c000f704 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f673:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f676:	80 fa 2f             	cmp    dl,0x2f
c000f679:	74 05                	je     c000f680 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f67b:	80 fa 5c             	cmp    dl,0x5c
c000f67e:	75 12                	jne    c000f692 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f680:	89 c5                	mov    ebp,eax
c000f682:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f687:	74 09                	je     c000f692 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f689:	40                   	inc    eax
c000f68a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f68e:	89 cf                	mov    edi,ecx
c000f690:	eb d6                	jmp    c000f668 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f692:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f697:	75 5b                	jne    c000f6f4 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f699:	80 fa 2e             	cmp    dl,0x2e
c000f69c:	75 56                	jne    c000f6f4 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f69e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f6a2:	74 19                	je     c000f6bd <standardiseFiles(char*, char const*, char const*)+0x107>
c000f6a4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f6a9:	74 53                	je     c000f6fe <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6ab:	89 f9                	mov    ecx,edi
c000f6ad:	41                   	inc    ecx
c000f6ae:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6b1:	80 fa 5c             	cmp    dl,0x5c
c000f6b4:	74 f7                	je     c000f6ad <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6b6:	80 fa 2f             	cmp    dl,0x2f
c000f6b9:	74 f2                	je     c000f6ad <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6bb:	eb d1                	jmp    c000f68e <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6bd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f6c2:	74 3a                	je     c000f6fe <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6c4:	83 f8 03             	cmp    eax,0x3
c000f6c7:	74 c5                	je     c000f68e <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6c9:	41                   	inc    ecx
c000f6ca:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6cd:	80 fa 2f             	cmp    dl,0x2f
c000f6d0:	74 f7                	je     c000f6c9 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6d2:	80 fa 5c             	cmp    dl,0x5c
c000f6d5:	74 f2                	je     c000f6c9 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6d7:	48                   	dec    eax
c000f6d8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6dc:	75 06                	jne    c000f6e4 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6de:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6e2:	eb f3                	jmp    c000f6d7 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f6e4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6e8:	74 07                	je     c000f6f1 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f6ea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6ee:	48                   	dec    eax
c000f6ef:	eb f3                	jmp    c000f6e4 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6f1:	40                   	inc    eax
c000f6f2:	eb 9a                	jmp    c000f68e <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6f4:	80 fa 2f             	cmp    dl,0x2f
c000f6f7:	74 95                	je     c000f68e <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6f9:	80 fa 5c             	cmp    dl,0x5c
c000f6fc:	74 90                	je     c000f68e <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6fe:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f701:	40                   	inc    eax
c000f702:	eb 8a                	jmp    c000f68e <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f704:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f708:	83 ec 0c             	sub    esp,0xc
c000f70b:	53                   	push   ebx
c000f70c:	e8 e4 0f ff ff       	call   c00006f5 <strlen>
c000f711:	83 c4 10             	add    esp,0x10
c000f714:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f719:	75 26                	jne    c000f741 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f71b:	83 ec 0c             	sub    esp,0xc
c000f71e:	53                   	push   ebx
c000f71f:	e8 d1 0f ff ff       	call   c00006f5 <strlen>
c000f724:	83 c4 10             	add    esp,0x10
c000f727:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f72c:	74 26                	je     c000f754 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f72e:	83 ec 0c             	sub    esp,0xc
c000f731:	53                   	push   ebx
c000f732:	e8 be 0f ff ff       	call   c00006f5 <strlen>
c000f737:	83 c4 10             	add    esp,0x10
c000f73a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f73f:	eb c7                	jmp    c000f708 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f741:	83 ec 0c             	sub    esp,0xc
c000f744:	53                   	push   ebx
c000f745:	e8 ab 0f ff ff       	call   c00006f5 <strlen>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f752:	74 c7                	je     c000f71b <standardiseFiles(char*, char const*, char const*)+0x165>
c000f754:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f75a:	5b                   	pop    ebx
c000f75b:	5e                   	pop    esi
c000f75c:	5f                   	pop    edi
c000f75d:	5d                   	pop    ebp
c000f75e:	c3                   	ret    
c000f75f:	90                   	nop

c000f760 <File::File(char const*, Process*)>:
c000f760:	83 ec 0c             	sub    esp,0xc
c000f763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f767:	83 ec 08             	sub    esp,0x8
c000f76a:	6a 00                	push   0x0
c000f76c:	50                   	push   eax
c000f76d:	e8 66 e6 ff ff       	call   c000ddd8 <UnixFile::UnixFile(int)>
c000f772:	83 c4 10             	add    esp,0x10
c000f775:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f77e:	89 10                	mov    DWORD PTR [eax],edx
c000f780:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f784:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f78e:	83 c0 0d             	add    eax,0xd
c000f791:	83 ec 04             	sub    esp,0x4
c000f794:	52                   	push   edx
c000f795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f799:	50                   	push   eax
c000f79a:	e8 17 fe ff ff       	call   c000f5b6 <standardiseFiles(char*, char const*, char const*)>
c000f79f:	83 c4 10             	add    esp,0x10
c000f7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f7a9:	8d 50 bf             	lea    edx,[eax-0x41]
c000f7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7b0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ba:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f7be:	90                   	nop
c000f7bf:	83 c4 0c             	add    esp,0xc
c000f7c2:	c3                   	ret    
c000f7c3:	90                   	nop

c000f7c4 <File::open(FileOpenMode)>:
c000f7c4:	53                   	push   ebx
c000f7c5:	b8 0b 00 00 00       	mov    eax,0xb
c000f7ca:	83 ec 08             	sub    esp,0x8
c000f7cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7d1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7d8:	80 fa 19             	cmp    dl,0x19
c000f7db:	77 40                	ja     c000f81d <File::open(FileOpenMode)+0x59>
c000f7dd:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f7e4:	85 d2                	test   edx,edx
c000f7e6:	74 35                	je     c000f81d <File::open(FileOpenMode)+0x59>
c000f7e8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7ee:	85 d2                	test   edx,edx
c000f7f0:	74 2b                	je     c000f81d <File::open(FileOpenMode)+0x59>
c000f7f2:	b8 06 00 00 00       	mov    eax,0x6
c000f7f7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7fb:	75 20                	jne    c000f81d <File::open(FileOpenMode)+0x59>
c000f7fd:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7ff:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f805:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f809:	51                   	push   ecx
c000f80a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f80d:	51                   	push   ecx
c000f80e:	52                   	push   edx
c000f80f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f812:	83 c4 10             	add    esp,0x10
c000f815:	85 c0                	test   eax,eax
c000f817:	75 04                	jne    c000f81d <File::open(FileOpenMode)+0x59>
c000f819:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f81d:	83 c4 08             	add    esp,0x8
c000f820:	5b                   	pop    ebx
c000f821:	c3                   	ret    

c000f822 <File::close()>:
c000f822:	53                   	push   ebx
c000f823:	b8 0b 00 00 00       	mov    eax,0xb
c000f828:	83 ec 08             	sub    esp,0x8
c000f82b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f82f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f836:	80 fa 19             	cmp    dl,0x19
c000f839:	77 41                	ja     c000f87c <File::close()+0x5a>
c000f83b:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000f842:	85 db                	test   ebx,ebx
c000f844:	74 36                	je     c000f87c <File::close()+0x5a>
c000f846:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f84d:	74 2d                	je     c000f87c <File::close()+0x5a>
c000f84f:	b8 05 00 00 00       	mov    eax,0x5
c000f854:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f858:	74 22                	je     c000f87c <File::close()+0x5a>
c000f85a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f85e:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000f865:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f86b:	53                   	push   ebx
c000f86c:	53                   	push   ebx
c000f86d:	8b 10                	mov    edx,DWORD PTR [eax]
c000f86f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f875:	50                   	push   eax
c000f876:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f879:	83 c4 10             	add    esp,0x10
c000f87c:	83 c4 08             	add    esp,0x8
c000f87f:	5b                   	pop    ebx
c000f880:	c3                   	ret    
c000f881:	90                   	nop

c000f882 <File::seek(unsigned long long)>:
c000f882:	56                   	push   esi
c000f883:	b8 0b 00 00 00       	mov    eax,0xb
c000f888:	53                   	push   ebx
c000f889:	51                   	push   ecx
c000f88a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f88e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f892:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f896:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f89d:	80 fa 19             	cmp    dl,0x19
c000f8a0:	77 31                	ja     c000f8d3 <File::seek(unsigned long long)+0x51>
c000f8a2:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f8a9:	85 d2                	test   edx,edx
c000f8ab:	74 26                	je     c000f8d3 <File::seek(unsigned long long)+0x51>
c000f8ad:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8b3:	85 d2                	test   edx,edx
c000f8b5:	74 1c                	je     c000f8d3 <File::seek(unsigned long long)+0x51>
c000f8b7:	b8 05 00 00 00       	mov    eax,0x5
c000f8bc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f8c0:	74 11                	je     c000f8d3 <File::seek(unsigned long long)+0x51>
c000f8c2:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8c4:	53                   	push   ebx
c000f8c5:	51                   	push   ecx
c000f8c6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f8cc:	52                   	push   edx
c000f8cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f8d0:	83 c4 10             	add    esp,0x10
c000f8d3:	5a                   	pop    edx
c000f8d4:	5b                   	pop    ebx
c000f8d5:	5e                   	pop    esi
c000f8d6:	c3                   	ret    
c000f8d7:	90                   	nop

c000f8d8 <File::tell(unsigned long long*)>:
c000f8d8:	83 ec 0c             	sub    esp,0xc
c000f8db:	b8 0b 00 00 00       	mov    eax,0xb
c000f8e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f8e4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8eb:	80 fa 19             	cmp    dl,0x19
c000f8ee:	77 34                	ja     c000f924 <File::tell(unsigned long long*)+0x4c>
c000f8f0:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f8f7:	85 d2                	test   edx,edx
c000f8f9:	74 29                	je     c000f924 <File::tell(unsigned long long*)+0x4c>
c000f8fb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f901:	85 d2                	test   edx,edx
c000f903:	74 1f                	je     c000f924 <File::tell(unsigned long long*)+0x4c>
c000f905:	b8 05 00 00 00       	mov    eax,0x5
c000f90a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f90e:	74 14                	je     c000f924 <File::tell(unsigned long long*)+0x4c>
c000f910:	50                   	push   eax
c000f911:	8b 02                	mov    eax,DWORD PTR [edx]
c000f913:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f917:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f91d:	52                   	push   edx
c000f91e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	83 c4 0c             	add    esp,0xc
c000f927:	c3                   	ret    

c000f928 <File::rewind()>:
c000f928:	83 ec 10             	sub    esp,0x10
c000f92b:	6a 00                	push   0x0
c000f92d:	6a 00                	push   0x0
c000f92f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f933:	e8 4a ff ff ff       	call   c000f882 <File::seek(unsigned long long)>
c000f938:	83 c4 1c             	add    esp,0x1c
c000f93b:	c3                   	ret    

c000f93c <File::unlink()>:
c000f93c:	83 ec 0c             	sub    esp,0xc
c000f93f:	b8 0b 00 00 00       	mov    eax,0xb
c000f944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f948:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f94f:	80 f9 19             	cmp    cl,0x19
c000f952:	77 2f                	ja     c000f983 <File::unlink()+0x47>
c000f954:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f95b:	85 c9                	test   ecx,ecx
c000f95d:	74 24                	je     c000f983 <File::unlink()+0x47>
c000f95f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f965:	85 c9                	test   ecx,ecx
c000f967:	74 1a                	je     c000f983 <File::unlink()+0x47>
c000f969:	b8 06 00 00 00       	mov    eax,0x6
c000f96e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f972:	75 0f                	jne    c000f983 <File::unlink()+0x47>
c000f974:	50                   	push   eax
c000f975:	83 c2 0d             	add    edx,0xd
c000f978:	50                   	push   eax
c000f979:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f97b:	52                   	push   edx
c000f97c:	51                   	push   ecx
c000f97d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f980:	83 c4 10             	add    esp,0x10
c000f983:	83 c4 0c             	add    esp,0xc
c000f986:	c3                   	ret    
c000f987:	90                   	nop

c000f988 <File::rename(char const*)>:
c000f988:	83 ec 0c             	sub    esp,0xc
c000f98b:	b8 0b 00 00 00       	mov    eax,0xb
c000f990:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f994:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f99b:	80 f9 19             	cmp    cl,0x19
c000f99e:	77 32                	ja     c000f9d2 <File::rename(char const*)+0x4a>
c000f9a0:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f9a7:	85 c9                	test   ecx,ecx
c000f9a9:	74 27                	je     c000f9d2 <File::rename(char const*)+0x4a>
c000f9ab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9b1:	85 c9                	test   ecx,ecx
c000f9b3:	74 1d                	je     c000f9d2 <File::rename(char const*)+0x4a>
c000f9b5:	b8 06 00 00 00       	mov    eax,0x6
c000f9ba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9be:	75 12                	jne    c000f9d2 <File::rename(char const*)+0x4a>
c000f9c0:	50                   	push   eax
c000f9c1:	83 c2 0d             	add    edx,0xd
c000f9c4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9ca:	52                   	push   edx
c000f9cb:	51                   	push   ecx
c000f9cc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f9cf:	83 c4 10             	add    esp,0x10
c000f9d2:	83 c4 0c             	add    esp,0xc
c000f9d5:	c3                   	ret    

c000f9d6 <File::chfatattr(unsigned char, unsigned char)>:
c000f9d6:	57                   	push   edi
c000f9d7:	b8 0b 00 00 00       	mov    eax,0xb
c000f9dc:	56                   	push   esi
c000f9dd:	53                   	push   ebx
c000f9de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f9e6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f9ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9f1:	80 f9 19             	cmp    cl,0x19
c000f9f4:	77 37                	ja     c000fa2d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9f6:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f9fd:	85 c9                	test   ecx,ecx
c000f9ff:	74 2c                	je     c000fa2d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000fa01:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa07:	85 c9                	test   ecx,ecx
c000fa09:	74 22                	je     c000fa2d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000fa0b:	b8 06 00 00 00       	mov    eax,0x6
c000fa10:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa14:	75 17                	jne    c000fa2d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000fa16:	89 f0                	mov    eax,esi
c000fa18:	8b 39                	mov    edi,DWORD PTR [ecx]
c000fa1a:	0f b6 f0             	movzx  esi,al
c000fa1d:	56                   	push   esi
c000fa1e:	83 c2 0d             	add    edx,0xd
c000fa21:	0f b6 db             	movzx  ebx,bl
c000fa24:	53                   	push   ebx
c000fa25:	52                   	push   edx
c000fa26:	51                   	push   ecx
c000fa27:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000fa2a:	83 c4 10             	add    esp,0x10
c000fa2d:	5b                   	pop    ebx
c000fa2e:	5e                   	pop    esi
c000fa2f:	5f                   	pop    edi
c000fa30:	c3                   	ret    
c000fa31:	90                   	nop

c000fa32 <File::exists()>:
c000fa32:	83 ec 0c             	sub    esp,0xc
c000fa35:	31 c0                	xor    eax,eax
c000fa37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa3b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa42:	80 f9 19             	cmp    cl,0x19
c000fa45:	77 24                	ja     c000fa6b <File::exists()+0x39>
c000fa47:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa4e:	85 c9                	test   ecx,ecx
c000fa50:	74 19                	je     c000fa6b <File::exists()+0x39>
c000fa52:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa58:	85 c9                	test   ecx,ecx
c000fa5a:	74 0f                	je     c000fa6b <File::exists()+0x39>
c000fa5c:	50                   	push   eax
c000fa5d:	83 c2 0d             	add    edx,0xd
c000fa60:	50                   	push   eax
c000fa61:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa63:	52                   	push   edx
c000fa64:	51                   	push   ecx
c000fa65:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fa68:	83 c4 10             	add    esp,0x10
c000fa6b:	83 c4 0c             	add    esp,0xc
c000fa6e:	c3                   	ret    
c000fa6f:	90                   	nop

c000fa70 <File::stat(unsigned long long*, bool*)>:
c000fa70:	56                   	push   esi
c000fa71:	53                   	push   ebx
c000fa72:	50                   	push   eax
c000fa73:	b8 0b 00 00 00       	mov    eax,0xb
c000fa78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa7c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa80:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fa84:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa8b:	80 f9 19             	cmp    cl,0x19
c000fa8e:	77 3d                	ja     c000facd <File::stat(unsigned long long*, bool*)+0x5d>
c000fa90:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa97:	85 c9                	test   ecx,ecx
c000fa99:	74 32                	je     c000facd <File::stat(unsigned long long*, bool*)+0x5d>
c000fa9b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000faa1:	85 c9                	test   ecx,ecx
c000faa3:	74 28                	je     c000facd <File::stat(unsigned long long*, bool*)+0x5d>
c000faa5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000faa7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000faab:	74 13                	je     c000fac0 <File::stat(unsigned long long*, bool*)+0x50>
c000faad:	83 ec 04             	sub    esp,0x4
c000fab0:	56                   	push   esi
c000fab1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000fab7:	51                   	push   ecx
c000fab8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000fabb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000fabe:	eb 0a                	jmp    c000faca <File::stat(unsigned long long*, bool*)+0x5a>
c000fac0:	53                   	push   ebx
c000fac1:	83 c2 0d             	add    edx,0xd
c000fac4:	56                   	push   esi
c000fac5:	52                   	push   edx
c000fac6:	51                   	push   ecx
c000fac7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000faca:	83 c4 10             	add    esp,0x10
c000facd:	5a                   	pop    edx
c000face:	5b                   	pop    ebx
c000facf:	5e                   	pop    esi
c000fad0:	c3                   	ret    

c000fad1 <getcwd(Process*, char*, int)>:
c000fad1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fad5:	31 c0                	xor    eax,eax
c000fad7:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fada:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fade:	7d 15                	jge    c000faf5 <getcwd(Process*, char*, int)+0x24>
c000fae0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fae4:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000faeb:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000faee:	84 c9                	test   cl,cl
c000faf0:	74 06                	je     c000faf8 <getcwd(Process*, char*, int)+0x27>
c000faf2:	40                   	inc    eax
c000faf3:	eb e2                	jmp    c000fad7 <getcwd(Process*, char*, int)+0x6>
c000faf5:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000faf8:	31 c0                	xor    eax,eax
c000fafa:	c3                   	ret    

c000fafb <setcwd(Process*, char*)>:
c000fafb:	55                   	push   ebp
c000fafc:	57                   	push   edi
c000fafd:	56                   	push   esi
c000fafe:	53                   	push   ebx
c000faff:	81 ec 20 02 00 00    	sub    esp,0x220
c000fb05:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fb0c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fb12:	57                   	push   edi
c000fb13:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fb1a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fb1e:	56                   	push   esi
c000fb1f:	e8 92 fa ff ff       	call   c000f5b6 <standardiseFiles(char*, char const*, char const*)>
c000fb24:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb27:	e8 c9 0b ff ff       	call   c00006f5 <strlen>
c000fb2c:	83 c4 10             	add    esp,0x10
c000fb2f:	83 f8 02             	cmp    eax,0x2
c000fb32:	77 17                	ja     c000fb4b <setcwd(Process*, char*)+0x50>
c000fb34:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fb39:	83 e8 41             	sub    eax,0x41
c000fb3c:	83 f8 19             	cmp    eax,0x19
c000fb3f:	76 24                	jbe    c000fb65 <setcwd(Process*, char*)+0x6a>
c000fb41:	b8 03 00 00 00       	mov    eax,0x3
c000fb46:	e9 cb 00 00 00       	jmp    c000fc16 <setcwd(Process*, char*)+0x11b>
c000fb4b:	83 ec 0c             	sub    esp,0xc
c000fb4e:	56                   	push   esi
c000fb4f:	e8 a1 0b ff ff       	call   c00006f5 <strlen>
c000fb54:	83 c4 10             	add    esp,0x10
c000fb57:	83 f8 03             	cmp    eax,0x3
c000fb5a:	75 33                	jne    c000fb8f <setcwd(Process*, char*)+0x94>
c000fb5c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fb61:	75 2c                	jne    c000fb8f <setcwd(Process*, char*)+0x94>
c000fb63:	eb cf                	jmp    c000fb34 <setcwd(Process*, char*)+0x39>
c000fb65:	8b 14 85 a0 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb260]
c000fb6c:	b8 05 00 00 00       	mov    eax,0x5
c000fb71:	85 d2                	test   edx,edx
c000fb73:	0f 84 9d 00 00 00    	je     c000fc16 <setcwd(Process*, char*)+0x11b>
c000fb79:	b8 06 00 00 00       	mov    eax,0x6
c000fb7e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fb85:	0f 84 8b 00 00 00    	je     c000fc16 <setcwd(Process*, char*)+0x11b>
c000fb8b:	51                   	push   ecx
c000fb8c:	51                   	push   ecx
c000fb8d:	eb 7b                	jmp    c000fc0a <setcwd(Process*, char*)+0x10f>
c000fb8f:	83 ec 0c             	sub    esp,0xc
c000fb92:	68 14 01 00 00       	push   0x114
c000fb97:	e8 58 f5 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c000fb9c:	83 c4 0c             	add    esp,0xc
c000fb9f:	89 c3                	mov    ebx,eax
c000fba1:	55                   	push   ebp
c000fba2:	56                   	push   esi
c000fba3:	50                   	push   eax
c000fba4:	e8 b7 fb ff ff       	call   c000f760 <File::File(char const*, Process*)>
c000fba9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fbae:	83 c4 0c             	add    esp,0xc
c000fbb1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fbb5:	50                   	push   eax
c000fbb6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fbba:	50                   	push   eax
c000fbbb:	53                   	push   ebx
c000fbbc:	e8 af fe ff ff       	call   c000fa70 <File::stat(unsigned long long*, bool*)>
c000fbc1:	83 c4 10             	add    esp,0x10
c000fbc4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fbc6:	83 f8 02             	cmp    eax,0x2
c000fbc9:	75 09                	jne    c000fbd4 <setcwd(Process*, char*)+0xd9>
c000fbcb:	83 ec 0c             	sub    esp,0xc
c000fbce:	53                   	push   ebx
c000fbcf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fbd2:	eb 0d                	jmp    c000fbe1 <setcwd(Process*, char*)+0xe6>
c000fbd4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fbd7:	85 c0                	test   eax,eax
c000fbd9:	74 10                	je     c000fbeb <setcwd(Process*, char*)+0xf0>
c000fbdb:	83 ec 0c             	sub    esp,0xc
c000fbde:	53                   	push   ebx
c000fbdf:	ff d2                	call   edx
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	b8 01 00 00 00       	mov    eax,0x1
c000fbe9:	eb 2b                	jmp    c000fc16 <setcwd(Process*, char*)+0x11b>
c000fbeb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fbf0:	75 10                	jne    c000fc02 <setcwd(Process*, char*)+0x107>
c000fbf2:	83 ec 0c             	sub    esp,0xc
c000fbf5:	53                   	push   ebx
c000fbf6:	ff d2                	call   edx
c000fbf8:	83 c4 10             	add    esp,0x10
c000fbfb:	b8 02 00 00 00       	mov    eax,0x2
c000fc00:	eb 14                	jmp    c000fc16 <setcwd(Process*, char*)+0x11b>
c000fc02:	83 ec 0c             	sub    esp,0xc
c000fc05:	53                   	push   ebx
c000fc06:	ff d2                	call   edx
c000fc08:	58                   	pop    eax
c000fc09:	5a                   	pop    edx
c000fc0a:	56                   	push   esi
c000fc0b:	57                   	push   edi
c000fc0c:	e8 66 0b ff ff       	call   c0000777 <strcpy>
c000fc11:	83 c4 10             	add    esp,0x10
c000fc14:	31 c0                	xor    eax,eax
c000fc16:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fc1c:	5b                   	pop    ebx
c000fc1d:	5e                   	pop    esi
c000fc1e:	5f                   	pop    edi
c000fc1f:	5d                   	pop    ebp
c000fc20:	c3                   	ret    
c000fc21:	90                   	nop

c000fc22 <Directory::Directory(char const*, Process*)>:
c000fc22:	83 ec 0c             	sub    esp,0xc
c000fc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc29:	83 ec 08             	sub    esp,0x8
c000fc2c:	6a 00                	push   0x0
c000fc2e:	50                   	push   eax
c000fc2f:	e8 a4 e1 ff ff       	call   c000ddd8 <UnixFile::UnixFile(int)>
c000fc34:	83 c4 10             	add    esp,0x10
c000fc37:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000fc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc40:	89 10                	mov    DWORD PTR [eax],edx
c000fc42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc46:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc50:	83 c0 0d             	add    eax,0xd
c000fc53:	83 ec 04             	sub    esp,0x4
c000fc56:	52                   	push   edx
c000fc57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc5b:	50                   	push   eax
c000fc5c:	e8 55 f9 ff ff       	call   c000f5b6 <standardiseFiles(char*, char const*, char const*)>
c000fc61:	83 c4 10             	add    esp,0x10
c000fc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc68:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fc6b:	8d 50 bf             	lea    edx,[eax-0x41]
c000fc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc72:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc7c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fc80:	90                   	nop
c000fc81:	83 c4 0c             	add    esp,0xc
c000fc84:	c3                   	ret    
c000fc85:	90                   	nop

c000fc86 <Directory::open()>:
c000fc86:	53                   	push   ebx
c000fc87:	b8 0b 00 00 00       	mov    eax,0xb
c000fc8c:	83 ec 08             	sub    esp,0x8
c000fc8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc93:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fc9a:	80 fa 19             	cmp    dl,0x19
c000fc9d:	77 3d                	ja     c000fcdc <Directory::open()+0x56>
c000fc9f:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fca6:	85 d2                	test   edx,edx
c000fca8:	74 32                	je     c000fcdc <Directory::open()+0x56>
c000fcaa:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fcb0:	85 d2                	test   edx,edx
c000fcb2:	74 28                	je     c000fcdc <Directory::open()+0x56>
c000fcb4:	b8 06 00 00 00       	mov    eax,0x6
c000fcb9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fcbd:	75 1d                	jne    c000fcdc <Directory::open()+0x56>
c000fcbf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fcc5:	50                   	push   eax
c000fcc6:	8b 02                	mov    eax,DWORD PTR [edx]
c000fcc8:	51                   	push   ecx
c000fcc9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fccc:	51                   	push   ecx
c000fccd:	52                   	push   edx
c000fcce:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fcd1:	83 c4 10             	add    esp,0x10
c000fcd4:	85 c0                	test   eax,eax
c000fcd6:	75 04                	jne    c000fcdc <Directory::open()+0x56>
c000fcd8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fcdc:	83 c4 08             	add    esp,0x8
c000fcdf:	5b                   	pop    ebx
c000fce0:	c3                   	ret    
c000fce1:	90                   	nop

c000fce2 <Directory::close()>:
c000fce2:	53                   	push   ebx
c000fce3:	b8 0b 00 00 00       	mov    eax,0xb
c000fce8:	83 ec 08             	sub    esp,0x8
c000fceb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fcef:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fcf6:	80 fa 19             	cmp    dl,0x19
c000fcf9:	77 41                	ja     c000fd3c <Directory::close()+0x5a>
c000fcfb:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000fd02:	85 db                	test   ebx,ebx
c000fd04:	74 36                	je     c000fd3c <Directory::close()+0x5a>
c000fd06:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fd0d:	74 2d                	je     c000fd3c <Directory::close()+0x5a>
c000fd0f:	b8 05 00 00 00       	mov    eax,0x5
c000fd14:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fd18:	74 22                	je     c000fd3c <Directory::close()+0x5a>
c000fd1a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fd1e:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000fd25:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fd2b:	53                   	push   ebx
c000fd2c:	53                   	push   ebx
c000fd2d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd2f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fd35:	50                   	push   eax
c000fd36:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fd39:	83 c4 10             	add    esp,0x10
c000fd3c:	83 c4 08             	add    esp,0x8
c000fd3f:	5b                   	pop    ebx
c000fd40:	c3                   	ret    
c000fd41:	90                   	nop

c000fd42 <Directory::unlink()>:
c000fd42:	83 ec 0c             	sub    esp,0xc
c000fd45:	b8 0b 00 00 00       	mov    eax,0xb
c000fd4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd55:	80 f9 19             	cmp    cl,0x19
c000fd58:	77 2f                	ja     c000fd89 <Directory::unlink()+0x47>
c000fd5a:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fd61:	85 c9                	test   ecx,ecx
c000fd63:	74 24                	je     c000fd89 <Directory::unlink()+0x47>
c000fd65:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd6b:	85 c9                	test   ecx,ecx
c000fd6d:	74 1a                	je     c000fd89 <Directory::unlink()+0x47>
c000fd6f:	b8 06 00 00 00       	mov    eax,0x6
c000fd74:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd78:	75 0f                	jne    c000fd89 <Directory::unlink()+0x47>
c000fd7a:	50                   	push   eax
c000fd7b:	83 c2 0d             	add    edx,0xd
c000fd7e:	50                   	push   eax
c000fd7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd81:	52                   	push   edx
c000fd82:	51                   	push   ecx
c000fd83:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fd86:	83 c4 10             	add    esp,0x10
c000fd89:	83 c4 0c             	add    esp,0xc
c000fd8c:	c3                   	ret    
c000fd8d:	90                   	nop

c000fd8e <Directory::rename(char const*)>:
c000fd8e:	83 ec 0c             	sub    esp,0xc
c000fd91:	b8 0b 00 00 00       	mov    eax,0xb
c000fd96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd9a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fda1:	80 f9 19             	cmp    cl,0x19
c000fda4:	77 32                	ja     c000fdd8 <Directory::rename(char const*)+0x4a>
c000fda6:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fdad:	85 c9                	test   ecx,ecx
c000fdaf:	74 27                	je     c000fdd8 <Directory::rename(char const*)+0x4a>
c000fdb1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdb7:	85 c9                	test   ecx,ecx
c000fdb9:	74 1d                	je     c000fdd8 <Directory::rename(char const*)+0x4a>
c000fdbb:	b8 06 00 00 00       	mov    eax,0x6
c000fdc0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdc4:	75 12                	jne    c000fdd8 <Directory::rename(char const*)+0x4a>
c000fdc6:	50                   	push   eax
c000fdc7:	83 c2 0d             	add    edx,0xd
c000fdca:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdd0:	52                   	push   edx
c000fdd1:	51                   	push   ecx
c000fdd2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fdd5:	83 c4 10             	add    esp,0x10
c000fdd8:	83 c4 0c             	add    esp,0xc
c000fddb:	c3                   	ret    

c000fddc <Directory::exists()>:
c000fddc:	83 ec 0c             	sub    esp,0xc
c000fddf:	31 c0                	xor    eax,eax
c000fde1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fde5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fdec:	80 f9 19             	cmp    cl,0x19
c000fdef:	77 24                	ja     c000fe15 <Directory::exists()+0x39>
c000fdf1:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fdf8:	85 c9                	test   ecx,ecx
c000fdfa:	74 19                	je     c000fe15 <Directory::exists()+0x39>
c000fdfc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fe02:	85 c9                	test   ecx,ecx
c000fe04:	74 0f                	je     c000fe15 <Directory::exists()+0x39>
c000fe06:	50                   	push   eax
c000fe07:	83 c2 0d             	add    edx,0xd
c000fe0a:	50                   	push   eax
c000fe0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe0d:	52                   	push   edx
c000fe0e:	51                   	push   ecx
c000fe0f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fe12:	83 c4 10             	add    esp,0x10
c000fe15:	83 c4 0c             	add    esp,0xc
c000fe18:	c3                   	ret    
c000fe19:	90                   	nop

c000fe1a <Directory::read(dirent*)>:
c000fe1a:	83 ec 1c             	sub    esp,0x1c
c000fe1d:	b8 0b 00 00 00       	mov    eax,0xb
c000fe22:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fe26:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fe2d:	80 fa 19             	cmp    dl,0x19
c000fe30:	77 30                	ja     c000fe62 <Directory::read(dirent*)+0x48>
c000fe32:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fe39:	85 d2                	test   edx,edx
c000fe3b:	74 25                	je     c000fe62 <Directory::read(dirent*)+0x48>
c000fe3d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fe44:	74 1c                	je     c000fe62 <Directory::read(dirent*)+0x48>
c000fe46:	83 ec 0c             	sub    esp,0xc
c000fe49:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe4b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fe4f:	52                   	push   edx
c000fe50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fe54:	6a 00                	push   0x0
c000fe56:	68 10 01 00 00       	push   0x110
c000fe5b:	51                   	push   ecx
c000fe5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe5f:	83 c4 20             	add    esp,0x20
c000fe62:	83 c4 1c             	add    esp,0x1c
c000fe65:	c3                   	ret    

c000fe66 <Directory::create()>:
c000fe66:	83 ec 0c             	sub    esp,0xc
c000fe69:	b8 0b 00 00 00       	mov    eax,0xb
c000fe6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe72:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fe79:	80 f9 19             	cmp    cl,0x19
c000fe7c:	77 2f                	ja     c000fead <Directory::create()+0x47>
c000fe7e:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fe85:	85 c9                	test   ecx,ecx
c000fe87:	74 24                	je     c000fead <Directory::create()+0x47>
c000fe89:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fe8f:	85 c9                	test   ecx,ecx
c000fe91:	74 1a                	je     c000fead <Directory::create()+0x47>
c000fe93:	b8 06 00 00 00       	mov    eax,0x6
c000fe98:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fe9c:	75 0f                	jne    c000fead <Directory::create()+0x47>
c000fe9e:	50                   	push   eax
c000fe9f:	83 c2 0d             	add    edx,0xd
c000fea2:	50                   	push   eax
c000fea3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fea5:	52                   	push   edx
c000fea6:	51                   	push   ecx
c000fea7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000feaa:	83 c4 10             	add    esp,0x10
c000fead:	83 c4 0c             	add    esp,0xc
c000feb0:	c3                   	ret    
c000feb1:	90                   	nop

c000feb2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000feb2:	b8 0a 00 00 00       	mov    eax,0xa
c000feb7:	c3                   	ret    

c000feb8 <Bus::Bus(char const*)>:
c000feb8:	83 ec 0c             	sub    esp,0xc
c000febb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000febf:	83 ec 08             	sub    esp,0x8
c000fec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fec6:	50                   	push   eax
c000fec7:	e8 62 09 00 00       	call   c001082e <Device::Device(char const*)>
c000fecc:	83 c4 10             	add    esp,0x10
c000fecf:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000fed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed8:	89 10                	mov    DWORD PTR [eax],edx
c000feda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fede:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fee8:	90                   	nop
c000fee9:	83 c4 0c             	add    esp,0xc
c000feec:	c3                   	ret    
c000feed:	90                   	nop

c000feee <Bus::~Bus()>:
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fefa:	89 10                	mov    DWORD PTR [eax],edx
c000fefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff00:	83 ec 0c             	sub    esp,0xc
c000ff03:	50                   	push   eax
c000ff04:	e8 db 05 00 00       	call   c00104e4 <Device::~Device()>
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	90                   	nop
c000ff0d:	83 c4 0c             	add    esp,0xc
c000ff10:	c3                   	ret    
c000ff11:	90                   	nop

c000ff12 <Bus::~Bus()>:
c000ff12:	83 ec 0c             	sub    esp,0xc
c000ff15:	83 ec 0c             	sub    esp,0xc
c000ff18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff1c:	e8 cd ff ff ff       	call   c000feee <Bus::~Bus()>
c000ff21:	83 c4 10             	add    esp,0x10
c000ff24:	83 ec 08             	sub    esp,0x8
c000ff27:	68 58 01 00 00       	push   0x158
c000ff2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff30:	e8 ce f1 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	83 c4 0c             	add    esp,0xc
c000ff3b:	c3                   	ret    

c000ff3c <Buzzer::Buzzer(char const*)>:
c000ff3c:	83 ec 0c             	sub    esp,0xc
c000ff3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff43:	83 ec 08             	sub    esp,0x8
c000ff46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff4a:	50                   	push   eax
c000ff4b:	e8 de 08 00 00       	call   c001082e <Device::Device(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff5c:	89 10                	mov    DWORD PTR [eax],edx
c000ff5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff62:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ff6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff70:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000ff7a:	90                   	nop
c000ff7b:	83 c4 0c             	add    esp,0xc
c000ff7e:	c3                   	ret    
c000ff7f:	90                   	nop

c000ff80 <Buzzer::~Buzzer()>:
c000ff80:	83 ec 0c             	sub    esp,0xc
c000ff83:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8c:	89 10                	mov    DWORD PTR [eax],edx
c000ff8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	50                   	push   eax
c000ff96:	e8 49 05 00 00       	call   c00104e4 <Device::~Device()>
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	90                   	nop
c000ff9f:	83 c4 0c             	add    esp,0xc
c000ffa2:	c3                   	ret    
c000ffa3:	90                   	nop

c000ffa4 <Buzzer::~Buzzer()>:
c000ffa4:	83 ec 0c             	sub    esp,0xc
c000ffa7:	83 ec 0c             	sub    esp,0xc
c000ffaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffae:	e8 cd ff ff ff       	call   c000ff80 <Buzzer::~Buzzer()>
c000ffb3:	83 c4 10             	add    esp,0x10
c000ffb6:	83 ec 08             	sub    esp,0x8
c000ffb9:	68 5c 01 00 00       	push   0x15c
c000ffbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffc2:	e8 3c f1 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c000ffc7:	83 c4 10             	add    esp,0x10
c000ffca:	83 c4 0c             	add    esp,0xc
c000ffcd:	c3                   	ret    

c000ffce <Buzzer::stop()>:
c000ffce:	83 ec 14             	sub    esp,0x14
c000ffd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffd5:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffd7:	6a 00                	push   0x0
c000ffd9:	50                   	push   eax
c000ffda:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ffdd:	83 c4 1c             	add    esp,0x1c
c000ffe0:	c3                   	ret    

c000ffe1 <beepThread(void*)>:
c000ffe1:	53                   	push   ebx
c000ffe2:	83 ec 08             	sub    esp,0x8
c000ffe5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffe9:	e8 6f 8a 00 00       	call   c0018a5d <unlockScheduler()>
c000ffee:	52                   	push   edx
c000ffef:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fff4:	52                   	push   edx
c000fff5:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fffb:	52                   	push   edx
c000fffc:	50                   	push   eax
c000fffd:	e8 b7 8f 00 00       	call   c0018fb9 <nanoSleep(unsigned long long)>
c0010002:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010005:	e8 c4 ff ff ff       	call   c000ffce <Buzzer::stop()>
c001000a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0010012:	83 c4 18             	add    esp,0x18
c0010015:	5b                   	pop    ebx
c0010016:	e9 e2 8e 00 00       	jmp    c0018efd <blockTask(TaskState)>
c001001b:	90                   	nop

c001001c <Buzzer::beep(int, int, bool)>:
c001001c:	57                   	push   edi
c001001d:	56                   	push   esi
c001001e:	53                   	push   ebx
c001001f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010023:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010027:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001002b:	52                   	push   edx
c001002c:	52                   	push   edx
c001002d:	8b 06                	mov    eax,DWORD PTR [esi]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	56                   	push   esi
c0010034:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010037:	89 f8                	mov    eax,edi
c0010039:	83 c4 10             	add    esp,0x10
c001003c:	84 c0                	test   al,al
c001003e:	74 1f                	je     c001005f <Buzzer::beep(int, int, bool)+0x43>
c0010040:	50                   	push   eax
c0010041:	50                   	push   eax
c0010042:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0010048:	99                   	cdq    
c0010049:	52                   	push   edx
c001004a:	50                   	push   eax
c001004b:	e8 69 8f 00 00       	call   c0018fb9 <nanoSleep(unsigned long long)>
c0010050:	83 c4 10             	add    esp,0x10
c0010053:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	5f                   	pop    edi
c001005a:	e9 6f ff ff ff       	jmp    c000ffce <Buzzer::stop()>
c001005f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0010065:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001006a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0010072:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010076:	c7 44 24 14 e1 ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ffe1
c001007e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010082:	5b                   	pop    ebx
c0010083:	5e                   	pop    esi
c0010084:	5f                   	pop    edi
c0010085:	e9 06 8b 00 00       	jmp    c0018b90 <Process::createThread(void (*)(void*), void*, int)>

c001008a <loadClockSettings()>:
c001008a:	c7 05 14 49 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024914,0xa
c0010094:	c6 05 11 49 02 c0 00 	mov    BYTE PTR ds:0xc0024911,0x0
c001009b:	c6 05 10 49 02 c0 01 	mov    BYTE PTR ds:0xc0024910,0x1
c00100a2:	c3                   	ret    
c00100a3:	90                   	nop

c00100a4 <Clock::Clock(char const*)>:
c00100a4:	83 ec 0c             	sub    esp,0xc
c00100a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ab:	83 ec 08             	sub    esp,0x8
c00100ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100b2:	50                   	push   eax
c00100b3:	e8 76 07 00 00       	call   c001082e <Device::Device(char const*)>
c00100b8:	83 c4 10             	add    esp,0x10
c00100bb:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c4:	89 10                	mov    DWORD PTR [eax],edx
c00100c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ca:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00100d4:	90                   	nop
c00100d5:	83 c4 0c             	add    esp,0xc
c00100d8:	c3                   	ret    
c00100d9:	90                   	nop

c00100da <Clock::~Clock()>:
c00100da:	83 ec 0c             	sub    esp,0xc
c00100dd:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e6:	89 10                	mov    DWORD PTR [eax],edx
c00100e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ec:	83 ec 0c             	sub    esp,0xc
c00100ef:	50                   	push   eax
c00100f0:	e8 ef 03 00 00       	call   c00104e4 <Device::~Device()>
c00100f5:	83 c4 10             	add    esp,0x10
c00100f8:	90                   	nop
c00100f9:	83 c4 0c             	add    esp,0xc
c00100fc:	c3                   	ret    
c00100fd:	90                   	nop

c00100fe <Clock::~Clock()>:
c00100fe:	83 ec 0c             	sub    esp,0xc
c0010101:	83 ec 0c             	sub    esp,0xc
c0010104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010108:	e8 cd ff ff ff       	call   c00100da <Clock::~Clock()>
c001010d:	83 c4 10             	add    esp,0x10
c0010110:	83 ec 08             	sub    esp,0x8
c0010113:	68 58 01 00 00       	push   0x158
c0010118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001011c:	e8 e2 ef ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0010121:	83 c4 10             	add    esp,0x10
c0010124:	83 c4 0c             	add    esp,0xc
c0010127:	c3                   	ret    

c0010128 <Clock::timeInSecondsLocal()>:
c0010128:	53                   	push   ebx
c0010129:	83 ec 14             	sub    esp,0x14
c001012c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010130:	8b 10                	mov    edx,DWORD PTR [eax]
c0010132:	50                   	push   eax
c0010133:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010136:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c001013d:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c0010143:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010149:	89 cb                	mov    ebx,ecx
c001014b:	c1 fb 1f             	sar    ebx,0x1f
c001014e:	01 c8                	add    eax,ecx
c0010150:	11 da                	adc    edx,ebx
c0010152:	83 c4 10             	add    esp,0x10
c0010155:	31 c9                	xor    ecx,ecx
c0010157:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c001015e:	74 05                	je     c0010165 <Clock::timeInSecondsLocal()+0x3d>
c0010160:	b9 08 07 00 00       	mov    ecx,0x708
c0010165:	31 db                	xor    ebx,ebx
c0010167:	01 c8                	add    eax,ecx
c0010169:	11 da                	adc    edx,ebx
c001016b:	83 c4 08             	add    esp,0x8
c001016e:	5b                   	pop    ebx
c001016f:	c3                   	ret    

c0010170 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0010170:	57                   	push   edi
c0010171:	56                   	push   esi
c0010172:	53                   	push   ebx
c0010173:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010177:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001017b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001017f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010181:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0010184:	0f b6 05 10 49 02 c0 	movzx  eax,BYTE PTR ds:0xc0024910
c001018b:	03 05 14 49 02 c0    	add    eax,DWORD PTR ds:0xc0024914
c0010191:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0010197:	99                   	cdq    
c0010198:	29 c6                	sub    esi,eax
c001019a:	19 d7                	sbb    edi,edx
c001019c:	89 f0                	mov    eax,esi
c001019e:	89 fa                	mov    edx,edi
c00101a0:	31 f6                	xor    esi,esi
c00101a2:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c00101a9:	74 05                	je     c00101b0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00101ab:	be 08 07 00 00       	mov    esi,0x708
c00101b0:	31 ff                	xor    edi,edi
c00101b2:	29 f0                	sub    eax,esi
c00101b4:	19 fa                	sbb    edx,edi
c00101b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00101ba:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00101be:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00101c2:	89 d8                	mov    eax,ebx
c00101c4:	5b                   	pop    ebx
c00101c5:	5e                   	pop    esi
c00101c6:	5f                   	pop    edi
c00101c7:	ff e0                	jmp    eax

c00101c9 <datetimeToSeconds(datetime_t)>:
c00101c9:	55                   	push   ebp
c00101ca:	57                   	push   edi
c00101cb:	56                   	push   esi
c00101cc:	53                   	push   ebx
c00101cd:	83 ec 14             	sub    esp,0x14
c00101d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00101d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00101d8:	0f b6 f5             	movzx  esi,ch
c00101db:	6b f6 3c             	imul   esi,esi,0x3c
c00101de:	89 cf                	mov    edi,ecx
c00101e0:	89 d3                	mov    ebx,edx
c00101e2:	0f b6 c9             	movzx  ecx,cl
c00101e5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101eb:	0f b6 c6             	movzx  eax,dh
c00101ee:	c1 ef 10             	shr    edi,0x10
c00101f1:	48                   	dec    eax
c00101f2:	c1 eb 10             	shr    ebx,0x10
c00101f5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00101f9:	89 f8                	mov    eax,edi
c00101fb:	0f b6 f8             	movzx  edi,al
c00101fe:	01 fe                	add    esi,edi
c0010200:	01 f1                	add    ecx,esi
c0010202:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010206:	c1 f9 1f             	sar    ecx,0x1f
c0010209:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001020d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010212:	0f b6 d2             	movzx  edx,dl
c0010215:	66 81 eb 6c 07       	sub    bx,0x76c
c001021a:	8b 0c 8d 20 1c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde3e0]
c0010221:	0f b7 f3             	movzx  esi,bx
c0010224:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010228:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001022d:	76 29                	jbe    c0010258 <datetimeToSeconds(datetime_t)+0x8f>
c001022f:	f6 c3 03             	test   bl,0x3
c0010232:	75 24                	jne    c0010258 <datetimeToSeconds(datetime_t)+0x8f>
c0010234:	31 d2                	xor    edx,edx
c0010236:	bf 64 00 00 00       	mov    edi,0x64
c001023b:	89 d8                	mov    eax,ebx
c001023d:	66 f7 f7             	div    di
c0010240:	66 85 d2             	test   dx,dx
c0010243:	75 12                	jne    c0010257 <datetimeToSeconds(datetime_t)+0x8e>
c0010245:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001024b:	bf 90 01 00 00       	mov    edi,0x190
c0010250:	99                   	cdq    
c0010251:	f7 ff                	idiv   edi
c0010253:	85 d2                	test   edx,edx
c0010255:	75 01                	jne    c0010258 <datetimeToSeconds(datetime_t)+0x8f>
c0010257:	41                   	inc    ecx
c0010258:	66 83 fb 46          	cmp    bx,0x46
c001025c:	76 45                	jbe    c00102a3 <datetimeToSeconds(datetime_t)+0xda>
c001025e:	bb 46 00 00 00       	mov    ebx,0x46
c0010263:	bf 64 00 00 00       	mov    edi,0x64
c0010268:	bd 90 01 00 00       	mov    ebp,0x190
c001026d:	b8 6d 01 00 00       	mov    eax,0x16d
c0010272:	f6 c3 03             	test   bl,0x3
c0010275:	75 23                	jne    c001029a <datetimeToSeconds(datetime_t)+0xd1>
c0010277:	89 d8                	mov    eax,ebx
c0010279:	99                   	cdq    
c001027a:	f7 ff                	idiv   edi
c001027c:	85 d2                	test   edx,edx
c001027e:	b8 6e 01 00 00       	mov    eax,0x16e
c0010283:	75 15                	jne    c001029a <datetimeToSeconds(datetime_t)+0xd1>
c0010285:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001028b:	99                   	cdq    
c001028c:	f7 fd                	idiv   ebp
c001028e:	31 c0                	xor    eax,eax
c0010290:	85 d2                	test   edx,edx
c0010292:	0f 94 c0             	sete   al
c0010295:	05 6d 01 00 00       	add    eax,0x16d
c001029a:	43                   	inc    ebx
c001029b:	01 c1                	add    ecx,eax
c001029d:	39 f3                	cmp    ebx,esi
c001029f:	7c cc                	jl     c001026d <datetimeToSeconds(datetime_t)+0xa4>
c00102a1:	eb 3b                	jmp    c00102de <datetimeToSeconds(datetime_t)+0x115>
c00102a3:	74 39                	je     c00102de <datetimeToSeconds(datetime_t)+0x115>
c00102a5:	b8 45 00 00 00       	mov    eax,0x45
c00102aa:	89 c2                	mov    edx,eax
c00102ac:	83 e2 03             	and    edx,0x3
c00102af:	39 f0                	cmp    eax,esi
c00102b1:	7e 13                	jle    c00102c6 <datetimeToSeconds(datetime_t)+0xfd>
c00102b3:	85 d2                	test   edx,edx
c00102b5:	0f 94 c2             	sete   dl
c00102b8:	0f b6 d2             	movzx  edx,dl
c00102bb:	81 c2 6d 01 00 00    	add    edx,0x16d
c00102c1:	48                   	dec    eax
c00102c2:	29 d1                	sub    ecx,edx
c00102c4:	eb e4                	jmp    c00102aa <datetimeToSeconds(datetime_t)+0xe1>
c00102c6:	b8 6d 01 00 00       	mov    eax,0x16d
c00102cb:	85 d2                	test   edx,edx
c00102cd:	75 0d                	jne    c00102dc <datetimeToSeconds(datetime_t)+0x113>
c00102cf:	31 c0                	xor    eax,eax
c00102d1:	66 85 db             	test   bx,bx
c00102d4:	0f 95 c0             	setne  al
c00102d7:	05 6d 01 00 00       	add    eax,0x16d
c00102dc:	29 c1                	sub    ecx,eax
c00102de:	b8 80 51 01 00       	mov    eax,0x15180
c00102e3:	f7 e9                	imul   ecx
c00102e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00102e9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00102ed:	83 c4 14             	add    esp,0x14
c00102f0:	5b                   	pop    ebx
c00102f1:	5e                   	pop    esi
c00102f2:	5f                   	pop    edi
c00102f3:	5d                   	pop    ebp
c00102f4:	c3                   	ret    
c00102f5:	90                   	nop

c00102f6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00102f6:	57                   	push   edi
c00102f7:	56                   	push   esi
c00102f8:	53                   	push   ebx
c00102f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00102ff:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0010302:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001030a:	e8 ba fe ff ff       	call   c00101c9 <datetimeToSeconds(datetime_t)>
c001030f:	59                   	pop    ecx
c0010310:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c0010317:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c001031d:	5b                   	pop    ebx
c001031e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010324:	89 cb                	mov    ebx,ecx
c0010326:	c1 fb 1f             	sar    ebx,0x1f
c0010329:	29 c8                	sub    eax,ecx
c001032b:	19 da                	sbb    edx,ebx
c001032d:	31 c9                	xor    ecx,ecx
c001032f:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c0010336:	74 05                	je     c001033d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010338:	b9 08 07 00 00       	mov    ecx,0x708
c001033d:	31 db                	xor    ebx,ebx
c001033f:	29 c8                	sub    eax,ecx
c0010341:	19 da                	sbb    edx,ebx
c0010343:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010347:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001034b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001034f:	5b                   	pop    ebx
c0010350:	89 f8                	mov    eax,edi
c0010352:	5e                   	pop    esi
c0010353:	5f                   	pop    edi
c0010354:	ff e0                	jmp    eax

c0010356 <secondsToDatetime(unsigned long long)>:
c0010356:	55                   	push   ebp
c0010357:	57                   	push   edi
c0010358:	56                   	push   esi
c0010359:	53                   	push   ebx
c001035a:	83 ec 1c             	sub    esp,0x1c
c001035d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010361:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010365:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010369:	6a 00                	push   0x0
c001036b:	68 80 51 01 00       	push   0x15180
c0010370:	55                   	push   ebp
c0010371:	57                   	push   edi
c0010372:	e8 a5 f1 00 00       	call   c001f51c <__udivdi3>
c0010377:	83 c4 10             	add    esp,0x10
c001037a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001037e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010384:	6a 00                	push   0x0
c0010386:	68 80 51 01 00       	push   0x15180
c001038b:	55                   	push   ebp
c001038c:	57                   	push   edi
c001038d:	e8 8a f2 00 00       	call   c001f61c <__umoddi3>
c0010392:	bf 10 0e 00 00       	mov    edi,0xe10
c0010397:	83 c4 10             	add    esp,0x10
c001039a:	99                   	cdq    
c001039b:	f7 ff                	idiv   edi
c001039d:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00103a0:	89 d0                	mov    eax,edx
c00103a2:	99                   	cdq    
c00103a3:	bf 3c 00 00 00       	mov    edi,0x3c
c00103a8:	f7 ff                	idiv   edi
c00103aa:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00103ad:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00103b0:	85 db                	test   ebx,ebx
c00103b2:	79 11                	jns    c00103c5 <secondsToDatetime(unsigned long long)+0x6f>
c00103b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103b8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00103be:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103c3:	eb 07                	jmp    c00103cc <secondsToDatetime(unsigned long long)+0x76>
c00103c5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103ca:	89 d8                	mov    eax,ebx
c00103cc:	99                   	cdq    
c00103cd:	f7 f9                	idiv   ecx
c00103cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103d3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00103d8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00103e0:	01 c3                	add    ebx,eax
c00103e2:	31 d2                	xor    edx,edx
c00103e4:	89 d8                	mov    eax,ebx
c00103e6:	bf b4 05 00 00       	mov    edi,0x5b4
c00103eb:	f7 f1                	div    ecx
c00103ed:	31 d2                	xor    edx,edx
c00103ef:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00103f4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00103f7:	89 d8                	mov    eax,ebx
c00103f9:	f7 f7                	div    edi
c00103fb:	29 c1                	sub    ecx,eax
c00103fd:	31 d2                	xor    edx,edx
c00103ff:	89 d8                	mov    eax,ebx
c0010401:	f7 f5                	div    ebp
c0010403:	29 c1                	sub    ecx,eax
c0010405:	bd 6d 01 00 00       	mov    ebp,0x16d
c001040a:	89 c8                	mov    eax,ecx
c001040c:	31 d2                	xor    edx,edx
c001040e:	f7 f5                	div    ebp
c0010410:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010414:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010419:	89 c8                	mov    eax,ecx
c001041b:	31 d2                	xor    edx,edx
c001041d:	f7 f5                	div    ebp
c001041f:	01 c3                	add    ebx,eax
c0010421:	31 d2                	xor    edx,edx
c0010423:	89 c8                	mov    eax,ecx
c0010425:	f7 f7                	div    edi
c0010427:	29 c3                	sub    ebx,eax
c0010429:	bf 99 00 00 00       	mov    edi,0x99
c001042e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010436:	29 c3                	sub    ebx,eax
c0010438:	31 d2                	xor    edx,edx
c001043a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001043d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010440:	83 c1 02             	add    ecx,0x2
c0010443:	bb 05 00 00 00       	mov    ebx,0x5
c0010448:	89 c8                	mov    eax,ecx
c001044a:	f7 f7                	div    edi
c001044c:	89 c7                	mov    edi,eax
c001044e:	31 d2                	xor    edx,edx
c0010450:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010456:	83 c0 02             	add    eax,0x2
c0010459:	f7 f3                	div    ebx
c001045b:	89 eb                	mov    ebx,ebp
c001045d:	29 c3                	sub    ebx,eax
c001045f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010465:	19 c0                	sbb    eax,eax
c0010467:	31 d2                	xor    edx,edx
c0010469:	83 e0 0c             	and    eax,0xc
c001046c:	88 1e                	mov    BYTE PTR [esi],bl
c001046e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010472:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001047a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001047e:	83 f9 01             	cmp    ecx,0x1
c0010481:	0f 96 c2             	setbe  dl
c0010484:	01 d0                	add    eax,edx
c0010486:	41                   	inc    ecx
c0010487:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001048b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001048e:	83 c4 1c             	add    esp,0x1c
c0010491:	89 f0                	mov    eax,esi
c0010493:	5b                   	pop    ebx
c0010494:	5e                   	pop    esi
c0010495:	5f                   	pop    edi
c0010496:	5d                   	pop    ebp
c0010497:	c2 04 00             	ret    0x4

c001049a <Clock::timeInDatetimeLocal()>:
c001049a:	53                   	push   ebx
c001049b:	83 ec 14             	sub    esp,0x14
c001049e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00104a6:	e8 7d fc ff ff       	call   c0010128 <Clock::timeInSecondsLocal()>
c00104ab:	83 c4 0c             	add    esp,0xc
c00104ae:	52                   	push   edx
c00104af:	50                   	push   eax
c00104b0:	53                   	push   ebx
c00104b1:	e8 a0 fe ff ff       	call   c0010356 <secondsToDatetime(unsigned long long)>
c00104b6:	83 c4 14             	add    esp,0x14
c00104b9:	89 d8                	mov    eax,ebx
c00104bb:	5b                   	pop    ebx
c00104bc:	c2 04 00             	ret    0x4
c00104bf:	90                   	nop

c00104c0 <Device::hibernate()>:
c00104c0:	c3                   	ret    
c00104c1:	90                   	nop

c00104c2 <Device::wake()>:
c00104c2:	c3                   	ret    
c00104c3:	90                   	nop

c00104c4 <Device::detect()>:
c00104c4:	c3                   	ret    
c00104c5:	90                   	nop

c00104c6 <Device::disableLegacy()>:
c00104c6:	c3                   	ret    
c00104c7:	90                   	nop

c00104c8 <Device::powerSaving(PowerSavingLevel)>:
c00104c8:	c3                   	ret    
c00104c9:	90                   	nop

c00104ca <DriverlessDevice::close(int, int, void*)>:
c00104ca:	31 c0                	xor    eax,eax
c00104cc:	c3                   	ret    
c00104cd:	90                   	nop

c00104ce <DriverlessDevice::detect()>:
c00104ce:	c3                   	ret    
c00104cf:	90                   	nop

c00104d0 <DriverlessDevice::open(int, int, void*)>:
c00104d0:	83 ec 18             	sub    esp,0x18
c00104d3:	68 50 1c 02 c0       	push   0xc0021c50
c00104d8:	e8 75 55 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c00104dd:	83 c8 ff             	or     eax,0xffffffff
c00104e0:	83 c4 1c             	add    esp,0x1c
c00104e3:	c3                   	ret    

c00104e4 <Device::~Device()>:
c00104e4:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c00104e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ed:	89 10                	mov    DWORD PTR [eax],edx
c00104ef:	90                   	nop
c00104f0:	c3                   	ret    
c00104f1:	90                   	nop

c00104f2 <Device::~Device()>:
c00104f2:	83 ec 0c             	sub    esp,0xc
c00104f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104f9:	e8 e6 ff ff ff       	call   c00104e4 <Device::~Device()>
c00104fe:	83 c4 04             	add    esp,0x4
c0010501:	83 ec 08             	sub    esp,0x8
c0010504:	68 58 01 00 00       	push   0x158
c0010509:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050d:	e8 f1 eb ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0010512:	83 c4 10             	add    esp,0x10
c0010515:	83 c4 0c             	add    esp,0xc
c0010518:	c3                   	ret    
c0010519:	90                   	nop

c001051a <Device::findAndLoadDriver()>:
c001051a:	c3                   	ret    
c001051b:	90                   	nop

c001051c <Device::preOpenPCI(PCIDeviceInfo)>:
c001051c:	57                   	push   edi
c001051d:	b9 09 00 00 00       	mov    ecx,0x9
c0010522:	56                   	push   esi
c0010523:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010527:	81 c7 18 01 00 00    	add    edi,0x118
c001052d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010531:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010538:	fc                   	cld    
c0010539:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001053b:	5e                   	pop    esi
c001053c:	5f                   	pop    edi
c001053d:	c3                   	ret    

c001053e <Device::preOpenACPI(void*, char*, char*)>:
c001053e:	56                   	push   esi
c001053f:	53                   	push   ebx
c0010540:	83 ec 08             	sub    esp,0x8
c0010543:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010547:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001054b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001054f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010555:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001055f:	6a 1e                	push   0x1e
c0010561:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010567:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001056b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010571:	50                   	push   eax
c0010572:	e8 2b 01 ff ff       	call   c00006a2 <memcpy>
c0010577:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001057b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001057f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010587:	83 c4 14             	add    esp,0x14
c001058a:	5b                   	pop    ebx
c001058b:	5e                   	pop    esi
c001058c:	e9 11 01 ff ff       	jmp    c00006a2 <memcpy>
c0010591:	90                   	nop

c0010592 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010592:	55                   	push   ebp
c0010593:	57                   	push   edi
c0010594:	56                   	push   esi
c0010595:	53                   	push   ebx
c0010596:	83 ec 0c             	sub    esp,0xc
c0010599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001059d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00105a1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00105a5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00105a9:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00105ae:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105b5:	75 0b                	jne    c00105c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00105b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00105b9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105bd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00105c0:	eb 24                	jmp    c00105e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00105c2:	e8 1f 43 00 00       	call   c00148e6 <thisCPU()>
c00105c7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00105cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00105cf:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00105d3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105d7:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00105db:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00105df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00105e3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00105e6:	83 c4 0c             	add    esp,0xc
c00105e9:	5b                   	pop    ebx
c00105ea:	5e                   	pop    esi
c00105eb:	5f                   	pop    edi
c00105ec:	5d                   	pop    ebp
c00105ed:	ff e0                	jmp    eax
c00105ef:	90                   	nop

c00105f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00105f0:	57                   	push   edi
c00105f1:	56                   	push   esi
c00105f2:	53                   	push   ebx
c00105f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105ff:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010604:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001060b:	75 0b                	jne    c0010618 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001060d:	8b 00                	mov    eax,DWORD PTR [eax]
c001060f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010613:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010616:	eb 20                	jmp    c0010638 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010618:	e8 c9 42 00 00       	call   c00148e6 <thisCPU()>
c001061d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010623:	8b 10                	mov    edx,DWORD PTR [eax]
c0010625:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010629:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001062d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010631:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010635:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010638:	5b                   	pop    ebx
c0010639:	5e                   	pop    esi
c001063a:	5f                   	pop    edi
c001063b:	ff e0                	jmp    eax
c001063d:	90                   	nop

c001063e <Device::addChild(Device*)>:
c001063e:	53                   	push   ebx
c001063f:	83 ec 08             	sub    esp,0x8
c0010642:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010646:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001064a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010650:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010656:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010658:	85 d2                	test   edx,edx
c001065a:	74 04                	je     c0010660 <Device::addChild(Device*)+0x22>
c001065c:	89 d3                	mov    ebx,edx
c001065e:	eb f6                	jmp    c0010656 <Device::addChild(Device*)+0x18>
c0010660:	83 ec 0c             	sub    esp,0xc
c0010663:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010666:	6a 08                	push   0x8
c0010668:	e8 87 ea ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001066d:	89 03                	mov    DWORD PTR [ebx],eax
c001066f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010675:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001067c:	83 c4 18             	add    esp,0x18
c001067f:	5b                   	pop    ebx
c0010680:	c3                   	ret    
c0010681:	90                   	nop

c0010682 <Device::removeAllChildren()>:
c0010682:	56                   	push   esi
c0010683:	53                   	push   ebx
c0010684:	52                   	push   edx
c0010685:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010689:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001068f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010692:	74 17                	je     c00106ab <Device::removeAllChildren()+0x29>
c0010694:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010697:	85 c0                	test   eax,eax
c0010699:	74 0c                	je     c00106a7 <Device::removeAllChildren()+0x25>
c001069b:	83 ec 0c             	sub    esp,0xc
c001069e:	8b 10                	mov    edx,DWORD PTR [eax]
c00106a0:	50                   	push   eax
c00106a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00106a4:	83 c4 10             	add    esp,0x10
c00106a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106a9:	eb e4                	jmp    c001068f <Device::removeAllChildren()+0xd>
c00106ab:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00106b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00106b7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00106bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106c4:	58                   	pop    eax
c00106c5:	5b                   	pop    ebx
c00106c6:	5e                   	pop    esi
c00106c7:	c3                   	ret    

c00106c8 <Device::hibernateAll()>:
c00106c8:	53                   	push   ebx
c00106c9:	83 ec 14             	sub    esp,0x14
c00106cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106d2:	53                   	push   ebx
c00106d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00106d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106dc:	83 c4 10             	add    esp,0x10
c00106df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106e2:	74 0f                	je     c00106f3 <Device::hibernateAll()+0x2b>
c00106e4:	83 ec 0c             	sub    esp,0xc
c00106e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106ea:	e8 d9 ff ff ff       	call   c00106c8 <Device::hibernateAll()>
c00106ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106f1:	eb e9                	jmp    c00106dc <Device::hibernateAll()+0x14>
c00106f3:	83 c4 08             	add    esp,0x8
c00106f6:	5b                   	pop    ebx
c00106f7:	c3                   	ret    

c00106f8 <Device::wakeAll()>:
c00106f8:	53                   	push   ebx
c00106f9:	83 ec 14             	sub    esp,0x14
c00106fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010700:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010702:	53                   	push   ebx
c0010703:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010706:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001070c:	83 c4 10             	add    esp,0x10
c001070f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010712:	74 0f                	je     c0010723 <Device::wakeAll()+0x2b>
c0010714:	83 ec 0c             	sub    esp,0xc
c0010717:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001071a:	e8 d9 ff ff ff       	call   c00106f8 <Device::wakeAll()>
c001071f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010721:	eb e9                	jmp    c001070c <Device::wakeAll()+0x14>
c0010723:	83 c4 08             	add    esp,0x8
c0010726:	5b                   	pop    ebx
c0010727:	c3                   	ret    

c0010728 <Device::detectAll()>:
c0010728:	53                   	push   ebx
c0010729:	83 ec 14             	sub    esp,0x14
c001072c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010730:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010732:	53                   	push   ebx
c0010733:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010736:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001073c:	83 c4 10             	add    esp,0x10
c001073f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010742:	74 0f                	je     c0010753 <Device::detectAll()+0x2b>
c0010744:	83 ec 0c             	sub    esp,0xc
c0010747:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001074a:	e8 d9 ff ff ff       	call   c0010728 <Device::detectAll()>
c001074f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010751:	eb e9                	jmp    c001073c <Device::detectAll()+0x14>
c0010753:	83 c4 08             	add    esp,0x8
c0010756:	5b                   	pop    ebx
c0010757:	c3                   	ret    

c0010758 <Device::disableLegacyAll()>:
c0010758:	53                   	push   ebx
c0010759:	83 ec 14             	sub    esp,0x14
c001075c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010760:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010762:	53                   	push   ebx
c0010763:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010766:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001076c:	83 c4 10             	add    esp,0x10
c001076f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010772:	74 0f                	je     c0010783 <Device::disableLegacyAll()+0x2b>
c0010774:	83 ec 0c             	sub    esp,0xc
c0010777:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001077a:	e8 d9 ff ff ff       	call   c0010758 <Device::disableLegacyAll()>
c001077f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010781:	eb e9                	jmp    c001076c <Device::disableLegacyAll()+0x14>
c0010783:	83 c4 08             	add    esp,0x8
c0010786:	5b                   	pop    ebx
c0010787:	c3                   	ret    

c0010788 <Device::loadDriversForAll()>:
c0010788:	53                   	push   ebx
c0010789:	83 ec 08             	sub    esp,0x8
c001078c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010790:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010796:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010798:	85 db                	test   ebx,ebx
c001079a:	74 12                	je     c00107ae <Device::loadDriversForAll()+0x26>
c001079c:	83 ec 0c             	sub    esp,0xc
c001079f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00107a2:	e8 e1 ff ff ff       	call   c0010788 <Device::loadDriversForAll()>
c00107a7:	83 c4 10             	add    esp,0x10
c00107aa:	89 d8                	mov    eax,ebx
c00107ac:	eb e8                	jmp    c0010796 <Device::loadDriversForAll()+0xe>
c00107ae:	83 c4 08             	add    esp,0x8
c00107b1:	5b                   	pop    ebx
c00107b2:	c3                   	ret    
c00107b3:	90                   	nop

c00107b4 <Device::closeAll()>:
c00107b4:	53                   	push   ebx
c00107b5:	83 ec 08             	sub    esp,0x8
c00107b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107be:	6a 00                	push   0x0
c00107c0:	6a 00                	push   0x0
c00107c2:	6a 00                	push   0x0
c00107c4:	53                   	push   ebx
c00107c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00107c8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107ce:	83 c4 10             	add    esp,0x10
c00107d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107d4:	74 0f                	je     c00107e5 <Device::closeAll()+0x31>
c00107d6:	83 ec 0c             	sub    esp,0xc
c00107d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107dc:	e8 d3 ff ff ff       	call   c00107b4 <Device::closeAll()>
c00107e1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107e3:	eb e9                	jmp    c00107ce <Device::closeAll()+0x1a>
c00107e5:	83 c4 08             	add    esp,0x8
c00107e8:	5b                   	pop    ebx
c00107e9:	c3                   	ret    

c00107ea <Device::powerSavingAll(PowerSavingLevel)>:
c00107ea:	56                   	push   esi
c00107eb:	53                   	push   ebx
c00107ec:	83 ec 0c             	sub    esp,0xc
c00107ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107f3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00107f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107f9:	56                   	push   esi
c00107fa:	53                   	push   ebx
c00107fb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00107fe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010804:	83 c4 10             	add    esp,0x10
c0010807:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001080a:	74 0f                	je     c001081b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001080c:	52                   	push   edx
c001080d:	52                   	push   edx
c001080e:	56                   	push   esi
c001080f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010812:	e8 d3 ff ff ff       	call   c00107ea <Device::powerSavingAll(PowerSavingLevel)>
c0010817:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010819:	eb e9                	jmp    c0010804 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001081b:	58                   	pop    eax
c001081c:	5b                   	pop    ebx
c001081d:	5e                   	pop    esi
c001081e:	c3                   	ret    
c001081f:	90                   	nop

c0010820 <Device::setName(char const*)>:
c0010820:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010828:	e9 4a ff fe ff       	jmp    c0000777 <strcpy>
c001082d:	90                   	nop

c001082e <Device::Device(char const*)>:
c001082e:	83 ec 0c             	sub    esp,0xc
c0010831:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c0010836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083a:	89 10                	mov    DWORD PTR [eax],edx
c001083c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010840:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001084a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010874:	83 ec 08             	sub    esp,0x8
c0010877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001087b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001087f:	e8 9c ff ff ff       	call   c0010820 <Device::setName(char const*)>
c0010884:	83 c4 10             	add    esp,0x10
c0010887:	83 ec 0c             	sub    esp,0xc
c001088a:	6a 08                	push   0x8
c001088c:	e8 63 e8 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0010891:	83 c4 10             	add    esp,0x10
c0010894:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001089a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108a5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00108ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108af:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00108f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00108fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010902:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010910:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001091a:	90                   	nop
c001091b:	83 c4 0c             	add    esp,0xc
c001091e:	c3                   	ret    
c001091f:	90                   	nop

c0010920 <Device::getName()>:
c0010920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010924:	05 d0 00 00 00       	add    eax,0xd0
c0010929:	c3                   	ret    

c001092a <DriverlessDevice::DriverlessDevice(char const*)>:
c001092a:	83 ec 0c             	sub    esp,0xc
c001092d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010931:	83 ec 08             	sub    esp,0x8
c0010934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010938:	50                   	push   eax
c0010939:	e8 f0 fe ff ff       	call   c001082e <Device::Device(char const*)>
c001093e:	83 c4 10             	add    esp,0x10
c0010941:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c0010946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094a:	89 10                	mov    DWORD PTR [eax],edx
c001094c:	90                   	nop
c001094d:	83 c4 0c             	add    esp,0xc
c0010950:	c3                   	ret    
c0010951:	90                   	nop

c0010952 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010952:	57                   	push   edi
c0010953:	56                   	push   esi
c0010954:	53                   	push   ebx
c0010955:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010959:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001095d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010961:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010967:	75 0c                	jne    c0010975 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010969:	52                   	push   edx
c001096a:	52                   	push   edx
c001096b:	53                   	push   ebx
c001096c:	56                   	push   esi
c001096d:	e8 c2 f0 00 00       	call   c001fa34 <LinkedList<Device>::addElement(Device*)>
c0010972:	83 c4 10             	add    esp,0x10
c0010975:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001097b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001097e:	74 12                	je     c0010992 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010980:	50                   	push   eax
c0010981:	57                   	push   edi
c0010982:	56                   	push   esi
c0010983:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010986:	e8 c7 ff ff ff       	call   c0010952 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001098b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001098d:	83 c4 10             	add    esp,0x10
c0010990:	eb e9                	jmp    c001097b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010992:	5b                   	pop    ebx
c0010993:	5e                   	pop    esi
c0010994:	5f                   	pop    edi
c0010995:	c3                   	ret    

c0010996 <getDevicesOfType(DeviceType)>:
c0010996:	53                   	push   ebx
c0010997:	83 ec 14             	sub    esp,0x14
c001099a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001099e:	53                   	push   ebx
c001099f:	e8 6c f1 00 00       	call   c001fb10 <LinkedList<Device>::LinkedList()>
c00109a4:	83 c4 0c             	add    esp,0xc
c00109a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109ab:	53                   	push   ebx
c00109ac:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c00109b2:	e8 9b ff ff ff       	call   c0010952 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00109b7:	83 c4 18             	add    esp,0x18
c00109ba:	89 d8                	mov    eax,ebx
c00109bc:	5b                   	pop    ebx
c00109bd:	c2 04 00             	ret    0x4

c00109c0 <HardDiskController::HardDiskController(char const*)>:
c00109c0:	83 ec 0c             	sub    esp,0xc
c00109c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c7:	83 ec 08             	sub    esp,0x8
c00109ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ce:	50                   	push   eax
c00109cf:	e8 5a fe ff ff       	call   c001082e <Device::Device(char const*)>
c00109d4:	83 c4 10             	add    esp,0x10
c00109d7:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e0:	89 10                	mov    DWORD PTR [eax],edx
c00109e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00109f0:	90                   	nop
c00109f1:	83 c4 0c             	add    esp,0xc
c00109f4:	c3                   	ret    
c00109f5:	90                   	nop

c00109f6 <HardDiskController::~HardDiskController()>:
c00109f6:	83 ec 0c             	sub    esp,0xc
c00109f9:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a02:	89 10                	mov    DWORD PTR [eax],edx
c0010a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a08:	83 ec 0c             	sub    esp,0xc
c0010a0b:	50                   	push   eax
c0010a0c:	e8 d3 fa ff ff       	call   c00104e4 <Device::~Device()>
c0010a11:	83 c4 10             	add    esp,0x10
c0010a14:	90                   	nop
c0010a15:	83 c4 0c             	add    esp,0xc
c0010a18:	c3                   	ret    
c0010a19:	90                   	nop

c0010a1a <HardDiskController::~HardDiskController()>:
c0010a1a:	83 ec 0c             	sub    esp,0xc
c0010a1d:	83 ec 0c             	sub    esp,0xc
c0010a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a24:	e8 cd ff ff ff       	call   c00109f6 <HardDiskController::~HardDiskController()>
c0010a29:	83 c4 10             	add    esp,0x10
c0010a2c:	83 ec 08             	sub    esp,0x8
c0010a2f:	68 58 01 00 00       	push   0x158
c0010a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a38:	e8 c6 e6 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0010a3d:	83 c4 10             	add    esp,0x10
c0010a40:	83 c4 0c             	add    esp,0xc
c0010a43:	c3                   	ret    

c0010a44 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010a44:	83 ec 0c             	sub    esp,0xc
c0010a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4b:	83 ec 08             	sub    esp,0x8
c0010a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a52:	50                   	push   eax
c0010a53:	e8 d6 fd ff ff       	call   c001082e <Device::Device(char const*)>
c0010a58:	83 c4 10             	add    esp,0x10
c0010a5b:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a64:	89 10                	mov    DWORD PTR [eax],edx
c0010a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a75:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a80:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010aa6:	90                   	nop
c0010aa7:	83 c4 0c             	add    esp,0xc
c0010aaa:	c3                   	ret    
c0010aab:	90                   	nop

c0010aac <PhysicalDisk::startCache()>:
c0010aac:	56                   	push   esi
c0010aad:	53                   	push   ebx
c0010aae:	83 ec 10             	sub    esp,0x10
c0010ab1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010ab5:	6a 30                	push   0x30
c0010ab7:	e8 38 e6 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0010abc:	89 c6                	mov    esi,eax
c0010abe:	58                   	pop    eax
c0010abf:	5a                   	pop    edx
c0010ac0:	53                   	push   ebx
c0010ac1:	56                   	push   esi
c0010ac2:	e8 35 25 00 00       	call   c0012ffc <VCache::VCache(PhysicalDisk*)>
c0010ac7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010acd:	83 c4 14             	add    esp,0x14
c0010ad0:	5b                   	pop    ebx
c0010ad1:	5e                   	pop    esi
c0010ad2:	c3                   	ret    
c0010ad3:	90                   	nop

c0010ad4 <PhysicalDisk::~PhysicalDisk()>:
c0010ad4:	83 ec 0c             	sub    esp,0xc
c0010ad7:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae0:	89 10                	mov    DWORD PTR [eax],edx
c0010ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae6:	83 ec 0c             	sub    esp,0xc
c0010ae9:	50                   	push   eax
c0010aea:	e8 f5 f9 ff ff       	call   c00104e4 <Device::~Device()>
c0010aef:	83 c4 10             	add    esp,0x10
c0010af2:	90                   	nop
c0010af3:	83 c4 0c             	add    esp,0xc
c0010af6:	c3                   	ret    
c0010af7:	90                   	nop

c0010af8 <PhysicalDisk::~PhysicalDisk()>:
c0010af8:	83 ec 0c             	sub    esp,0xc
c0010afb:	83 ec 0c             	sub    esp,0xc
c0010afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b02:	e8 cd ff ff ff       	call   c0010ad4 <PhysicalDisk::~PhysicalDisk()>
c0010b07:	83 c4 10             	add    esp,0x10
c0010b0a:	83 ec 08             	sub    esp,0x8
c0010b0d:	68 6c 01 00 00       	push   0x16c
c0010b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b16:	e8 e8 e5 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0010b1b:	83 c4 10             	add    esp,0x10
c0010b1e:	83 c4 0c             	add    esp,0xc
c0010b21:	c3                   	ret    

c0010b22 <FPU::FPU(char const*)>:
c0010b22:	83 ec 0c             	sub    esp,0xc
c0010b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b29:	83 ec 08             	sub    esp,0x8
c0010b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b30:	50                   	push   eax
c0010b31:	e8 f8 fc ff ff       	call   c001082e <Device::Device(char const*)>
c0010b36:	83 c4 10             	add    esp,0x10
c0010b39:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b42:	89 10                	mov    DWORD PTR [eax],edx
c0010b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b48:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010b52:	90                   	nop
c0010b53:	83 c4 0c             	add    esp,0xc
c0010b56:	c3                   	ret    
c0010b57:	90                   	nop

c0010b58 <FPU::~FPU()>:
c0010b58:	83 ec 0c             	sub    esp,0xc
c0010b5b:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b64:	89 10                	mov    DWORD PTR [eax],edx
c0010b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6a:	83 ec 0c             	sub    esp,0xc
c0010b6d:	50                   	push   eax
c0010b6e:	e8 71 f9 ff ff       	call   c00104e4 <Device::~Device()>
c0010b73:	83 c4 10             	add    esp,0x10
c0010b76:	90                   	nop
c0010b77:	83 c4 0c             	add    esp,0xc
c0010b7a:	c3                   	ret    
c0010b7b:	90                   	nop

c0010b7c <FPU::~FPU()>:
c0010b7c:	83 ec 0c             	sub    esp,0xc
c0010b7f:	83 ec 0c             	sub    esp,0xc
c0010b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b86:	e8 cd ff ff ff       	call   c0010b58 <FPU::~FPU()>
c0010b8b:	83 c4 10             	add    esp,0x10
c0010b8e:	83 ec 08             	sub    esp,0x8
c0010b91:	68 58 01 00 00       	push   0x158
c0010b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b9a:	e8 64 e5 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0010b9f:	83 c4 10             	add    esp,0x10
c0010ba2:	83 c4 0c             	add    esp,0xc
c0010ba5:	c3                   	ret    

c0010ba6 <setupFPU()>:
c0010ba6:	53                   	push   ebx
c0010ba7:	83 ec 08             	sub    esp,0x8
c0010baa:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010baf:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010bb6:	74 19                	je     c0010bd1 <setupFPU()+0x2b>
c0010bb8:	83 ec 0c             	sub    esp,0xc
c0010bbb:	68 58 01 00 00       	push   0x158
c0010bc0:	e8 2f e5 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0010bc5:	89 c3                	mov    ebx,eax
c0010bc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bca:	e8 91 d5 00 00       	call   c001e160 <AVX::AVX()>
c0010bcf:	eb 5b                	jmp    c0010c2c <setupFPU()+0x86>
c0010bd1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bd7:	84 c0                	test   al,al
c0010bd9:	79 19                	jns    c0010bf4 <setupFPU()+0x4e>
c0010bdb:	83 ec 0c             	sub    esp,0xc
c0010bde:	68 58 01 00 00       	push   0x158
c0010be3:	e8 0c e5 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0010be8:	89 c3                	mov    ebx,eax
c0010bea:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bed:	e8 94 d6 00 00       	call   c001e286 <SSE::SSE()>
c0010bf2:	eb 38                	jmp    c0010c2c <setupFPU()+0x86>
c0010bf4:	a8 20                	test   al,0x20
c0010bf6:	74 19                	je     c0010c11 <setupFPU()+0x6b>
c0010bf8:	83 ec 0c             	sub    esp,0xc
c0010bfb:	68 58 01 00 00       	push   0x158
c0010c00:	e8 ef e4 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0010c05:	89 c3                	mov    ebx,eax
c0010c07:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c0a:	e8 e1 d5 00 00       	call   c001e1f0 <MMX::MMX()>
c0010c0f:	eb 1b                	jmp    c0010c2c <setupFPU()+0x86>
c0010c11:	a8 10                	test   al,0x10
c0010c13:	74 1c                	je     c0010c31 <setupFPU()+0x8b>
c0010c15:	83 ec 0c             	sub    esp,0xc
c0010c18:	68 58 01 00 00       	push   0x158
c0010c1d:	e8 d2 e4 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0010c22:	89 c3                	mov    ebx,eax
c0010c24:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c27:	e8 e8 d6 00 00       	call   c001e314 <x87::x87()>
c0010c2c:	83 c4 10             	add    esp,0x10
c0010c2f:	eb 2c                	jmp    c0010c5d <setupFPU()+0xb7>
c0010c31:	83 ec 0c             	sub    esp,0xc
c0010c34:	31 db                	xor    ebx,ebx
c0010c36:	68 28 1d 02 c0       	push   0xc0021d28
c0010c3b:	e8 e9 e5 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0010c40:	e8 a1 3c 00 00       	call   c00148e6 <thisCPU()>
c0010c45:	e8 9c 3c 00 00       	call   c00148e6 <thisCPU()>
c0010c4a:	e8 19 ef 00 00       	call   c001fb68 <CPU::readCR0()>
c0010c4f:	83 c8 04             	or     eax,0x4
c0010c52:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c55:	e8 20 ef 00 00       	call   c001fb7a <CPU::writeCR0(unsigned long)>
c0010c5a:	83 c4 10             	add    esp,0x10
c0010c5d:	83 c4 08             	add    esp,0x8
c0010c60:	89 d8                	mov    eax,ebx
c0010c62:	5b                   	pop    ebx
c0010c63:	c3                   	ret    

c0010c64 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010c64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c6c:	c1 e0 04             	shl    eax,0x4
c0010c6f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010c73:	8d 50 10             	lea    edx,[eax+0x10]
c0010c76:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010c7c:	74 08                	je     c0010c86 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010c7e:	83 c0 04             	add    eax,0x4
c0010c81:	39 d0                	cmp    eax,edx
c0010c83:	75 f1                	jne    c0010c76 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010c85:	c3                   	ret    
c0010c86:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c90:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c9a:	eb e2                	jmp    c0010c7e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010c9c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010c9c:	57                   	push   edi
c0010c9d:	31 c0                	xor    eax,eax
c0010c9f:	56                   	push   esi
c0010ca0:	53                   	push   ebx
c0010ca1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010ca5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ca9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010cad:	89 da                	mov    edx,ebx
c0010caf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010cb3:	c1 e2 04             	shl    edx,0x4
c0010cb6:	01 ca                	add    edx,ecx
c0010cb8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010cc0:	74 16                	je     c0010cd8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010cc2:	40                   	inc    eax
c0010cc3:	83 f8 04             	cmp    eax,0x4
c0010cc6:	75 f0                	jne    c0010cb8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010cc8:	c7 44 24 10 6c 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d6c
c0010cd0:	5b                   	pop    ebx
c0010cd1:	5e                   	pop    esi
c0010cd2:	5f                   	pop    edi
c0010cd3:	e9 7a 4d 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c0010cd8:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010cdb:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010cde:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010ce4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010cea:	5b                   	pop    ebx
c0010ceb:	5e                   	pop    esi
c0010cec:	5f                   	pop    edi
c0010ced:	c3                   	ret    

c0010cee <doubleFault(regs*, void*)>:
c0010cee:	55                   	push   ebp
c0010cef:	89 e5                	mov    ebp,esp
c0010cf1:	83 ec 08             	sub    esp,0x8
c0010cf4:	83 ec 0c             	sub    esp,0xc
c0010cf7:	68 a7 1d 02 c0       	push   0xc0021da7
c0010cfc:	e8 51 4d 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0010d01:	83 c4 10             	add    esp,0x10
c0010d04:	90                   	nop
c0010d05:	c9                   	leave  
c0010d06:	c3                   	ret    
c0010d07:	90                   	nop

c0010d08 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010d08:	56                   	push   esi
c0010d09:	53                   	push   ebx
c0010d0a:	50                   	push   eax
c0010d0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010d13:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d18:	75 35                	jne    c0010d4f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010d1a:	8d 43 20             	lea    eax,[ebx+0x20]
c0010d1d:	31 d2                	xor    edx,edx
c0010d1f:	89 c1                	mov    ecx,eax
c0010d21:	c1 e1 04             	shl    ecx,0x4
c0010d24:	01 f1                	add    ecx,esi
c0010d26:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010d2e:	74 3e                	je     c0010d6e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010d30:	42                   	inc    edx
c0010d31:	83 fa 04             	cmp    edx,0x4
c0010d34:	75 f0                	jne    c0010d26 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010d36:	83 ec 0c             	sub    esp,0xc
c0010d39:	68 ec 1d 02 c0       	push   0xc0021dec
c0010d3e:	e8 0f 4d 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0010d43:	83 c4 10             	add    esp,0x10
c0010d46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d4b:	5a                   	pop    edx
c0010d4c:	5b                   	pop    ebx
c0010d4d:	5e                   	pop    esi
c0010d4e:	c3                   	ret    
c0010d4f:	83 ec 0c             	sub    esp,0xc
c0010d52:	56                   	push   esi
c0010d53:	e8 c8 fb ff ff       	call   c0010920 <Device::getName()>
c0010d58:	83 c4 10             	add    esp,0x10
c0010d5b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d5e:	75 ba                	jne    c0010d1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d60:	83 fb 0f             	cmp    ebx,0xf
c0010d63:	7f 29                	jg     c0010d8e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010d65:	0f b6 9b 00 3f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc100]
c0010d6c:	eb ac                	jmp    c0010d1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d6e:	8d 04 82             	lea    eax,[edx+eax*4]
c0010d71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010d75:	8d 04 86             	lea    eax,[esi+eax*4]
c0010d78:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010d7e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010d82:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010d88:	89 d8                	mov    eax,ebx
c0010d8a:	5a                   	pop    edx
c0010d8b:	5b                   	pop    ebx
c0010d8c:	5e                   	pop    esi
c0010d8d:	c3                   	ret    
c0010d8e:	83 ec 0c             	sub    esp,0xc
c0010d91:	68 b4 1d 02 c0       	push   0xc0021db4
c0010d96:	e8 b7 4c 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0010d9b:	83 c4 10             	add    esp,0x10
c0010d9e:	e9 77 ff ff ff       	jmp    c0010d1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010da3:	90                   	nop

c0010da4 <InterruptController::clearAllHandlers(int, bool)>:
c0010da4:	56                   	push   esi
c0010da5:	53                   	push   ebx
c0010da6:	52                   	push   edx
c0010da7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010dab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010daf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010db4:	75 61                	jne    c0010e17 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010db6:	8d 46 20             	lea    eax,[esi+0x20]
c0010db9:	c1 e6 04             	shl    esi,0x4
c0010dbc:	c1 e0 04             	shl    eax,0x4
c0010dbf:	01 de                	add    esi,ebx
c0010dc1:	01 d8                	add    eax,ebx
c0010dc3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010dcd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010dd7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010de1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010deb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010df5:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010dff:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010e09:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010e13:	58                   	pop    eax
c0010e14:	5b                   	pop    ebx
c0010e15:	5e                   	pop    esi
c0010e16:	c3                   	ret    
c0010e17:	83 ec 0c             	sub    esp,0xc
c0010e1a:	53                   	push   ebx
c0010e1b:	e8 00 fb ff ff       	call   c0010920 <Device::getName()>
c0010e20:	83 c4 10             	add    esp,0x10
c0010e23:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e26:	75 8e                	jne    c0010db6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e28:	83 fe 0f             	cmp    esi,0xf
c0010e2b:	7f 09                	jg     c0010e36 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010e2d:	0f b6 b6 00 3f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc100]
c0010e34:	eb 80                	jmp    c0010db6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e36:	83 ec 0c             	sub    esp,0xc
c0010e39:	68 28 1e 02 c0       	push   0xc0021e28
c0010e3e:	e8 0f 4c 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0010e43:	83 c4 10             	add    esp,0x10
c0010e46:	e9 6b ff ff ff       	jmp    c0010db6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e4b:	90                   	nop

c0010e4c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010e4c:	56                   	push   esi
c0010e4d:	53                   	push   ebx
c0010e4e:	52                   	push   edx
c0010e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e57:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010e5c:	75 3a                	jne    c0010e98 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010e5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e62:	8d 50 20             	lea    edx,[eax+0x20]
c0010e65:	c1 e2 04             	shl    edx,0x4
c0010e68:	8d 04 16             	lea    eax,[esi+edx*1]
c0010e6b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010e6f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010e75:	74 0b                	je     c0010e82 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010e77:	83 c0 04             	add    eax,0x4
c0010e7a:	39 d0                	cmp    eax,edx
c0010e7c:	75 f1                	jne    c0010e6f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010e7e:	58                   	pop    eax
c0010e7f:	5b                   	pop    ebx
c0010e80:	5e                   	pop    esi
c0010e81:	c3                   	ret    
c0010e82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010e8c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010e96:	eb df                	jmp    c0010e77 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010e98:	83 ec 0c             	sub    esp,0xc
c0010e9b:	56                   	push   esi
c0010e9c:	e8 7f fa ff ff       	call   c0010920 <Device::getName()>
c0010ea1:	83 c4 10             	add    esp,0x10
c0010ea4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010ea7:	75 b5                	jne    c0010e5e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010ea9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010eae:	7f 11                	jg     c0010ec1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010eb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010eb4:	0f b6 80 00 3f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc100]
c0010ebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010ebf:	eb 9d                	jmp    c0010e5e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010ec1:	83 ec 0c             	sub    esp,0xc
c0010ec4:	68 28 1e 02 c0       	push   0xc0021e28
c0010ec9:	e8 84 4b 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	eb 8b                	jmp    c0010e5e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010ed3 <nmiHandler(regs*, void*)>:
c0010ed3:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010ed8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010edc:	e9 5b a8 ff ff       	jmp    c000b73c <Computer::handleNMI()>

c0010ee1 <int_handler>:
c0010ee1:	55                   	push   ebp
c0010ee2:	57                   	push   edi
c0010ee3:	56                   	push   esi
c0010ee4:	53                   	push   ebx
c0010ee5:	83 ec 0c             	sub    esp,0xc
c0010ee8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010eec:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010ef3:	74 0b                	je     c0010f00 <int_handler+0x1f>
c0010ef5:	fa                   	cli    
c0010ef6:	f4                   	hlt    
c0010ef7:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010efe:	75 f5                	jne    c0010ef5 <int_handler+0x14>
c0010f00:	e8 e1 39 00 00       	call   c00148e6 <thisCPU()>
c0010f05:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010f08:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010f0e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f11:	83 f8 17             	cmp    eax,0x17
c0010f14:	77 13                	ja     c0010f29 <int_handler+0x48>
c0010f16:	83 ec 08             	sub    esp,0x8
c0010f19:	8b 17                	mov    edx,DWORD PTR [edi]
c0010f1b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f1e:	0f b6 c0             	movzx  eax,al
c0010f21:	50                   	push   eax
c0010f22:	57                   	push   edi
c0010f23:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010f26:	83 c4 10             	add    esp,0x10
c0010f29:	83 c3 15             	add    ebx,0x15
c0010f2c:	c1 e3 04             	shl    ebx,0x4
c0010f2f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010f33:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010f3a:	31 db                	xor    ebx,ebx
c0010f3c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010f40:	85 c0                	test   eax,eax
c0010f42:	74 13                	je     c0010f57 <int_handler+0x76>
c0010f44:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010f47:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010f4b:	74 1c                	je     c0010f69 <int_handler+0x88>
c0010f4d:	83 ec 08             	sub    esp,0x8
c0010f50:	52                   	push   edx
c0010f51:	56                   	push   esi
c0010f52:	ff d0                	call   eax
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	43                   	inc    ebx
c0010f58:	83 fb 04             	cmp    ebx,0x4
c0010f5b:	75 df                	jne    c0010f3c <int_handler+0x5b>
c0010f5d:	83 c4 0c             	add    esp,0xc
c0010f60:	31 c0                	xor    eax,eax
c0010f62:	5b                   	pop    ebx
c0010f63:	31 d2                	xor    edx,edx
c0010f65:	5e                   	pop    esi
c0010f66:	5f                   	pop    edi
c0010f67:	5d                   	pop    ebp
c0010f68:	c3                   	ret    
c0010f69:	83 ec 08             	sub    esp,0x8
c0010f6c:	52                   	push   edx
c0010f6d:	56                   	push   esi
c0010f6e:	ff d0                	call   eax
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	83 c4 0c             	add    esp,0xc
c0010f76:	5b                   	pop    ebx
c0010f77:	5e                   	pop    esi
c0010f78:	5f                   	pop    edi
c0010f79:	5d                   	pop    ebp
c0010f7a:	c3                   	ret    
c0010f7b:	90                   	nop

c0010f7c <InterruptController::InterruptController(char const*)>:
c0010f7c:	83 ec 1c             	sub    esp,0x1c
c0010f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f83:	83 ec 08             	sub    esp,0x8
c0010f86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f8a:	50                   	push   eax
c0010f8b:	e8 9e f8 ff ff       	call   c001082e <Device::Device(char const*)>
c0010f90:	83 c4 10             	add    esp,0x10
c0010f93:	ba 64 20 02 c0       	mov    edx,0xc0022064
c0010f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f9c:	89 10                	mov    DWORD PTR [eax],edx
c0010f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fa2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010fac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fb4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010fbc:	7f 5e                	jg     c001101c <InterruptController::InterruptController(char const*)+0xa0>
c0010fbe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fc6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010fcb:	7f 49                	jg     c0011016 <InterruptController::InterruptController(char const*)+0x9a>
c0010fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fd5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fe0:	01 ca                	add    edx,ecx
c0010fe2:	83 c2 54             	add    edx,0x54
c0010fe5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010fed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ff1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ff5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011000:	01 ca                	add    edx,ecx
c0011002:	81 c2 54 04 00 00    	add    edx,0x454
c0011008:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0011010:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011014:	eb b0                	jmp    c0010fc6 <InterruptController::InterruptController(char const*)+0x4a>
c0011016:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001101a:	eb 98                	jmp    c0010fb4 <InterruptController::InterruptController(char const*)+0x38>
c001101c:	90                   	nop
c001101d:	83 c4 1c             	add    esp,0x1c
c0011020:	c3                   	ret    
c0011021:	90                   	nop

c0011022 <InterruptController::~InterruptController()>:
c0011022:	83 ec 0c             	sub    esp,0xc
c0011025:	ba 64 20 02 c0       	mov    edx,0xc0022064
c001102a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102e:	89 10                	mov    DWORD PTR [eax],edx
c0011030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	50                   	push   eax
c0011038:	e8 a7 f4 ff ff       	call   c00104e4 <Device::~Device()>
c001103d:	83 c4 10             	add    esp,0x10
c0011040:	90                   	nop
c0011041:	83 c4 0c             	add    esp,0xc
c0011044:	c3                   	ret    
c0011045:	90                   	nop

c0011046 <InterruptController::~InterruptController()>:
c0011046:	83 ec 0c             	sub    esp,0xc
c0011049:	83 ec 0c             	sub    esp,0xc
c001104c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011050:	e8 cd ff ff ff       	call   c0011022 <InterruptController::~InterruptController()>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	83 ec 08             	sub    esp,0x8
c001105b:	68 58 21 00 00       	push   0x2158
c0011060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011064:	e8 9a e0 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0011069:	83 c4 10             	add    esp,0x10
c001106c:	83 c4 0c             	add    esp,0xc
c001106f:	c3                   	ret    

c0011070 <displayDebugInfo(regs*)>:
c0011070:	55                   	push   ebp
c0011071:	57                   	push   edi
c0011072:	56                   	push   esi
c0011073:	53                   	push   ebx
c0011074:	83 ec 24             	sub    esp,0x24
c0011077:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001107b:	0f 20 c2             	mov    edx,cr0
c001107e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0011082:	0f 20 d7             	mov    edi,cr2
c0011085:	0f 20 de             	mov    esi,cr3
c0011088:	0f 20 e5             	mov    ebp,cr4
c001108b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001108e:	68 62 1e 02 c0       	push   0xc0021e62
c0011093:	e8 91 e1 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0011098:	58                   	pop    eax
c0011099:	5a                   	pop    edx
c001109a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001109d:	68 6d 1e 02 c0       	push   0xc0021e6d
c00110a2:	e8 82 e1 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00110a7:	59                   	pop    ecx
c00110a8:	58                   	pop    eax
c00110a9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00110ac:	68 78 1e 02 c0       	push   0xc0021e78
c00110b1:	e8 73 e1 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00110b6:	58                   	pop    eax
c00110b7:	5a                   	pop    edx
c00110b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110bb:	68 83 1e 02 c0       	push   0xc0021e83
c00110c0:	e8 64 e1 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00110c5:	59                   	pop    ecx
c00110c6:	58                   	pop    eax
c00110c7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110ca:	68 8e 1e 02 c0       	push   0xc0021e8e
c00110cf:	e8 55 e1 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00110d4:	58                   	pop    eax
c00110d5:	5a                   	pop    edx
c00110d6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00110d9:	68 99 1e 02 c0       	push   0xc0021e99
c00110de:	e8 46 e1 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00110e3:	59                   	pop    ecx
c00110e4:	58                   	pop    eax
c00110e5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110e8:	68 a4 1e 02 c0       	push   0xc0021ea4
c00110ed:	e8 37 e1 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00110f2:	58                   	pop    eax
c00110f3:	5a                   	pop    edx
c00110f4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110f7:	68 af 1e 02 c0       	push   0xc0021eaf
c00110fc:	e8 28 e1 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0011101:	59                   	pop    ecx
c0011102:	58                   	pop    eax
c0011103:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011106:	68 ba 1e 02 c0       	push   0xc0021eba
c001110b:	e8 19 e1 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0011110:	58                   	pop    eax
c0011111:	5a                   	pop    edx
c0011112:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011115:	68 c9 1e 02 c0       	push   0xc0021ec9
c001111a:	e8 0a e1 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001111f:	59                   	pop    ecx
c0011120:	58                   	pop    eax
c0011121:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011124:	68 d4 1e 02 c0       	push   0xc0021ed4
c0011129:	e8 fb e0 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001112e:	58                   	pop    eax
c001112f:	5a                   	pop    edx
c0011130:	57                   	push   edi
c0011131:	68 df 1e 02 c0       	push   0xc0021edf
c0011136:	e8 ee e0 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001113b:	59                   	pop    ecx
c001113c:	58                   	pop    eax
c001113d:	56                   	push   esi
c001113e:	68 ea 1e 02 c0       	push   0xc0021eea
c0011143:	e8 e1 e0 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0011148:	58                   	pop    eax
c0011149:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001114e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011154:	e8 00 c2 ff ff       	call   c000d359 <setActiveTerminal(VgaText*)>
c0011159:	58                   	pop    eax
c001115a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001115d:	5a                   	pop    edx
c001115e:	c1 e0 05             	shl    eax,0x5
c0011161:	05 60 3c 02 c0       	add    eax,0xc0023c60
c0011166:	50                   	push   eax
c0011167:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001116c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011172:	e8 03 c6 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0011177:	59                   	pop    ecx
c0011178:	58                   	pop    eax
c0011179:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001117e:	68 f5 1e 02 c0       	push   0xc0021ef5
c0011183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011189:	e8 ec c5 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c001118e:	58                   	pop    eax
c001118f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011194:	5a                   	pop    edx
c0011195:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011198:	83 c0 0c             	add    eax,0xc
c001119b:	50                   	push   eax
c001119c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a7:	e8 ce c5 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c00111ac:	59                   	pop    ecx
c00111ad:	58                   	pop    eax
c00111ae:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111b3:	68 fe 1e 02 c0       	push   0xc0021efe
c00111b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111be:	e8 b7 c5 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c00111c3:	58                   	pop    eax
c00111c4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111c9:	5a                   	pop    edx
c00111ca:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111d3:	e8 c8 c5 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c00111d8:	59                   	pop    ecx
c00111d9:	58                   	pop    eax
c00111da:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111df:	68 06 1f 02 c0       	push   0xc0021f06
c00111e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111ea:	e8 8b c5 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c00111ef:	58                   	pop    eax
c00111f0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111f5:	5a                   	pop    edx
c00111f6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00111f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111ff:	e8 9c c5 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0011204:	59                   	pop    ecx
c0011205:	58                   	pop    eax
c0011206:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001120b:	68 0e 1f 02 c0       	push   0xc0021f0e
c0011210:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011216:	e8 5f c5 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c001121b:	58                   	pop    eax
c001121c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011221:	5a                   	pop    edx
c0011222:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011225:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001122b:	e8 70 c5 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0011230:	59                   	pop    ecx
c0011231:	58                   	pop    eax
c0011232:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011237:	68 16 1f 02 c0       	push   0xc0021f16
c001123c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011242:	e8 33 c5 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0011247:	58                   	pop    eax
c0011248:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001124d:	5a                   	pop    edx
c001124e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011251:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011257:	e8 44 c5 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c001125c:	59                   	pop    ecx
c001125d:	58                   	pop    eax
c001125e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011263:	68 1e 1f 02 c0       	push   0xc0021f1e
c0011268:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001126e:	e8 07 c5 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0011273:	58                   	pop    eax
c0011274:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011279:	5a                   	pop    edx
c001127a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001127d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011283:	e8 18 c5 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0011288:	59                   	pop    ecx
c0011289:	58                   	pop    eax
c001128a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001128f:	68 26 1f 02 c0       	push   0xc0021f26
c0011294:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001129a:	e8 db c4 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c001129f:	58                   	pop    eax
c00112a0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112a5:	5a                   	pop    edx
c00112a6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00112a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112af:	e8 ec c4 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c00112b4:	59                   	pop    ecx
c00112b5:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112ba:	5b                   	pop    ebx
c00112bb:	68 2e 1f 02 c0       	push   0xc0021f2e
c00112c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112c6:	e8 af c4 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c00112cb:	58                   	pop    eax
c00112cc:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112d1:	5a                   	pop    edx
c00112d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112d6:	52                   	push   edx
c00112d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112dd:	e8 be c4 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c00112e2:	59                   	pop    ecx
c00112e3:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112e8:	5b                   	pop    ebx
c00112e9:	68 37 1f 02 c0       	push   0xc0021f37
c00112ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112f4:	e8 81 c4 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c00112f9:	58                   	pop    eax
c00112fa:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112ff:	5a                   	pop    edx
c0011300:	57                   	push   edi
c0011301:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011307:	e8 94 c4 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c001130c:	59                   	pop    ecx
c001130d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011312:	5b                   	pop    ebx
c0011313:	68 3f 1f 02 c0       	push   0xc0021f3f
c0011318:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001131e:	e8 57 c4 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0011323:	5f                   	pop    edi
c0011324:	58                   	pop    eax
c0011325:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001132a:	56                   	push   esi
c001132b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011331:	e8 6a c4 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0011336:	58                   	pop    eax
c0011337:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001133c:	5a                   	pop    edx
c001133d:	68 47 1f 02 c0       	push   0xc0021f47
c0011342:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011348:	e8 2d c4 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c001134d:	59                   	pop    ecx
c001134e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011353:	5b                   	pop    ebx
c0011354:	55                   	push   ebp
c0011355:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001135b:	e8 40 c4 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0011360:	5e                   	pop    esi
c0011361:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011366:	5f                   	pop    edi
c0011367:	68 4f 1f 02 c0       	push   0xc0021f4f
c001136c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011372:	e8 03 c4 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0011377:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001137c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011382:	e8 fc e7 00 00       	call   c001fb83 <CPU::readDR0()>
c0011387:	5d                   	pop    ebp
c0011388:	5a                   	pop    edx
c0011389:	50                   	push   eax
c001138a:	53                   	push   ebx
c001138b:	e8 10 c4 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0011390:	59                   	pop    ecx
c0011391:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011396:	5b                   	pop    ebx
c0011397:	68 58 1f 02 c0       	push   0xc0021f58
c001139c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113a2:	e8 d3 c3 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c00113a7:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113ac:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113b2:	e8 de e7 00 00       	call   c001fb95 <CPU::readDR1()>
c00113b7:	5e                   	pop    esi
c00113b8:	5f                   	pop    edi
c00113b9:	50                   	push   eax
c00113ba:	53                   	push   ebx
c00113bb:	e8 e0 c3 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c00113c0:	5d                   	pop    ebp
c00113c1:	58                   	pop    eax
c00113c2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113c7:	68 60 1f 02 c0       	push   0xc0021f60
c00113cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113d2:	e8 a3 c3 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c00113d7:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113dc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113e2:	e8 c0 e7 00 00       	call   c001fba7 <CPU::readDR2()>
c00113e7:	5a                   	pop    edx
c00113e8:	59                   	pop    ecx
c00113e9:	50                   	push   eax
c00113ea:	53                   	push   ebx
c00113eb:	e8 b0 c3 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c00113f0:	5b                   	pop    ebx
c00113f1:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113f6:	5e                   	pop    esi
c00113f7:	68 68 1f 02 c0       	push   0xc0021f68
c00113fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011402:	e8 73 c3 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0011407:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001140c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011412:	e8 a2 e7 00 00       	call   c001fbb9 <CPU::readDR3()>
c0011417:	5f                   	pop    edi
c0011418:	5d                   	pop    ebp
c0011419:	50                   	push   eax
c001141a:	53                   	push   ebx
c001141b:	e8 80 c3 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0011420:	58                   	pop    eax
c0011421:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011426:	5a                   	pop    edx
c0011427:	68 70 1f 02 c0       	push   0xc0021f70
c001142c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011432:	e8 43 c3 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0011437:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001143c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011442:	e8 84 e7 00 00       	call   c001fbcb <CPU::readDR6()>
c0011447:	59                   	pop    ecx
c0011448:	5e                   	pop    esi
c0011449:	50                   	push   eax
c001144a:	53                   	push   ebx
c001144b:	e8 50 c3 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0011450:	5f                   	pop    edi
c0011451:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011456:	5d                   	pop    ebp
c0011457:	68 78 1f 02 c0       	push   0xc0021f78
c001145c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011462:	e8 13 c3 ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0011467:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001146c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011472:	e8 66 e7 00 00       	call   c001fbdd <CPU::readDR7()>
c0011477:	5a                   	pop    edx
c0011478:	59                   	pop    ecx
c0011479:	50                   	push   eax
c001147a:	53                   	push   ebx
c001147b:	e8 20 c3 ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0011480:	fa                   	cli    
c0011481:	f4                   	hlt    
c0011482:	83 c4 10             	add    esp,0x10
c0011485:	eb fe                	jmp    c0011485 <displayDebugInfo(regs*)+0x415>

c0011487 <x87EmulHandler(regs*, void*)>:
c0011487:	53                   	push   ebx
c0011488:	83 ec 08             	sub    esp,0x8
c001148b:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0011490:	85 c0                	test   eax,eax
c0011492:	74 15                	je     c00114a9 <x87EmulHandler(regs*, void*)+0x22>
c0011494:	83 ec 0c             	sub    esp,0xc
c0011497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001149b:	ff d0                	call   eax
c001149d:	83 c4 10             	add    esp,0x10
c00114a0:	84 c0                	test   al,al
c00114a2:	74 2f                	je     c00114d3 <x87EmulHandler(regs*, void*)+0x4c>
c00114a4:	83 c4 08             	add    esp,0x8
c00114a7:	5b                   	pop    ebx
c00114a8:	c3                   	ret    
c00114a9:	83 ec 08             	sub    esp,0x8
c00114ac:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c00114b2:	6a 01                	push   0x1
c00114b4:	68 80 1f 02 c0       	push   0xc0021f80
c00114b9:	e8 b7 6f 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c00114be:	5a                   	pop    edx
c00114bf:	59                   	pop    ecx
c00114c0:	53                   	push   ebx
c00114c1:	50                   	push   eax
c00114c2:	e8 74 71 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c00114c7:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c00114cc:	83 c4 10             	add    esp,0x10
c00114cf:	85 c0                	test   eax,eax
c00114d1:	75 c1                	jne    c0011494 <x87EmulHandler(regs*, void*)+0xd>
c00114d3:	83 ec 0c             	sub    esp,0xc
c00114d6:	68 9d 1f 02 c0       	push   0xc0021f9d
c00114db:	e8 49 dd ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00114e0:	58                   	pop    eax
c00114e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e5:	e8 86 fb ff ff       	call   c0011070 <displayDebugInfo(regs*)>

c00114ea <gpFault(regs*, void*)>:
c00114ea:	53                   	push   ebx
c00114eb:	83 ec 14             	sub    esp,0x14
c00114ee:	c7 05 30 49 02 c0 ed 98 01 c0 	mov    DWORD PTR ds:0xc0024930,0xc00198ed
c00114f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00114fc:	53                   	push   ebx
c00114fd:	e8 eb 83 00 00       	call   c00198ed <Vm::faultHandler(regs*)>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	84 c0                	test   al,al
c0011507:	74 05                	je     c001150e <gpFault(regs*, void*)+0x24>
c0011509:	83 c4 08             	add    esp,0x8
c001150c:	5b                   	pop    ebx
c001150d:	c3                   	ret    
c001150e:	83 ec 0c             	sub    esp,0xc
c0011511:	68 9d 1f 02 c0       	push   0xc0021f9d
c0011516:	e8 0e dd ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001151b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001151e:	e8 4d fb ff ff       	call   c0011070 <displayDebugInfo(regs*)>

c0011523 <pgFault(regs*, void*)>:
c0011523:	83 ec 18             	sub    esp,0x18
c0011526:	68 b8 1f 02 c0       	push   0xc0021fb8
c001152b:	e8 f9 dc ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0011530:	58                   	pop    eax
c0011531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011535:	e8 36 fb ff ff       	call   c0011070 <displayDebugInfo(regs*)>

c001153a <otherISRHandler(regs*, void*)>:
c001153a:	53                   	push   ebx
c001153b:	83 ec 0c             	sub    esp,0xc
c001153e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011542:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011545:	50                   	push   eax
c0011546:	50                   	push   eax
c0011547:	68 c5 1f 02 c0       	push   0xc0021fc5
c001154c:	e8 d8 dc ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0011551:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011554:	e8 17 fb ff ff       	call   c0011070 <displayDebugInfo(regs*)>

c0011559 <opcodeFault(regs*, void*)>:
c0011559:	55                   	push   ebp
c001155a:	89 e5                	mov    ebp,esp
c001155c:	56                   	push   esi
c001155d:	53                   	push   ebx
c001155e:	83 ec 40             	sub    esp,0x40
c0011561:	e8 80 33 00 00       	call   c00148e6 <thisCPU()>
c0011566:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001156c:	84 c0                	test   al,al
c001156e:	74 24                	je     c0011594 <opcodeFault(regs*, void*)+0x3b>
c0011570:	83 ec 0c             	sub    esp,0xc
c0011573:	68 e4 1f 02 c0       	push   0xc0021fe4
c0011578:	e8 ac dc ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011583:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011586:	8d 50 19             	lea    edx,[eax+0x19]
c0011589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001158f:	e9 71 05 00 00       	jmp    c0011b05 <opcodeFault(regs*, void*)+0x5ac>
c0011594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011597:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001159a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001159d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00115a1:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115ab:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00115ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115b1:	8a 00                	mov    al,BYTE PTR [eax]
c00115b3:	3c f0                	cmp    al,0xf0
c00115b5:	75 17                	jne    c00115ce <opcodeFault(regs*, void*)+0x75>
c00115b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115c0:	8d 50 01             	lea    edx,[eax+0x1]
c00115c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c9:	e9 da 00 00 00       	jmp    c00116a8 <opcodeFault(regs*, void*)+0x14f>
c00115ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115d1:	8a 00                	mov    al,BYTE PTR [eax]
c00115d3:	3c f2                	cmp    al,0xf2
c00115d5:	74 09                	je     c00115e0 <opcodeFault(regs*, void*)+0x87>
c00115d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115da:	8a 00                	mov    al,BYTE PTR [eax]
c00115dc:	3c f3                	cmp    al,0xf3
c00115de:	75 1b                	jne    c00115fb <opcodeFault(regs*, void*)+0xa2>
c00115e0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115e4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115ed:	8d 50 01             	lea    edx,[eax+0x1]
c00115f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115f6:	e9 ad 00 00 00       	jmp    c00116a8 <opcodeFault(regs*, void*)+0x14f>
c00115fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115fe:	8a 00                	mov    al,BYTE PTR [eax]
c0011600:	3c 66                	cmp    al,0x66
c0011602:	75 1f                	jne    c0011623 <opcodeFault(regs*, void*)+0xca>
c0011604:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011608:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001160c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001160f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011612:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011615:	8d 50 01             	lea    edx,[eax+0x1]
c0011618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001161e:	e9 85 00 00 00       	jmp    c00116a8 <opcodeFault(regs*, void*)+0x14f>
c0011623:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011626:	8a 00                	mov    al,BYTE PTR [eax]
c0011628:	3c 67                	cmp    al,0x67
c001162a:	75 18                	jne    c0011644 <opcodeFault(regs*, void*)+0xeb>
c001162c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011630:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011636:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011639:	8d 50 01             	lea    edx,[eax+0x1]
c001163c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001163f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011642:	eb 64                	jmp    c00116a8 <opcodeFault(regs*, void*)+0x14f>
c0011644:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011647:	8a 00                	mov    al,BYTE PTR [eax]
c0011649:	3c 2e                	cmp    al,0x2e
c001164b:	74 09                	je     c0011656 <opcodeFault(regs*, void*)+0xfd>
c001164d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011650:	8a 00                	mov    al,BYTE PTR [eax]
c0011652:	3c 3e                	cmp    al,0x3e
c0011654:	75 18                	jne    c001166e <opcodeFault(regs*, void*)+0x115>
c0011656:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001165a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001165d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011660:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011663:	8d 50 01             	lea    edx,[eax+0x1]
c0011666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011669:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001166c:	eb 3a                	jmp    c00116a8 <opcodeFault(regs*, void*)+0x14f>
c001166e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011671:	8a 00                	mov    al,BYTE PTR [eax]
c0011673:	3c 36                	cmp    al,0x36
c0011675:	74 1b                	je     c0011692 <opcodeFault(regs*, void*)+0x139>
c0011677:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001167a:	8a 00                	mov    al,BYTE PTR [eax]
c001167c:	3c 26                	cmp    al,0x26
c001167e:	74 12                	je     c0011692 <opcodeFault(regs*, void*)+0x139>
c0011680:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011683:	8a 00                	mov    al,BYTE PTR [eax]
c0011685:	3c 64                	cmp    al,0x64
c0011687:	74 09                	je     c0011692 <opcodeFault(regs*, void*)+0x139>
c0011689:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001168c:	8a 00                	mov    al,BYTE PTR [eax]
c001168e:	3c 65                	cmp    al,0x65
c0011690:	75 16                	jne    c00116a8 <opcodeFault(regs*, void*)+0x14f>
c0011692:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011696:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001169c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001169f:	8d 50 01             	lea    edx,[eax+0x1]
c00116a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116a5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116ab:	8a 00                	mov    al,BYTE PTR [eax]
c00116ad:	3c 0f                	cmp    al,0xf
c00116af:	0f 85 a7 00 00 00    	jne    c001175c <opcodeFault(regs*, void*)+0x203>
c00116b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116b8:	40                   	inc    eax
c00116b9:	8a 00                	mov    al,BYTE PTR [eax]
c00116bb:	3c c2                	cmp    al,0xc2
c00116bd:	74 0e                	je     c00116cd <opcodeFault(regs*, void*)+0x174>
c00116bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116c2:	40                   	inc    eax
c00116c3:	8a 00                	mov    al,BYTE PTR [eax]
c00116c5:	3c c3                	cmp    al,0xc3
c00116c7:	0f 85 8f 00 00 00    	jne    c001175c <opcodeFault(regs*, void*)+0x203>
c00116cd:	83 ec 0c             	sub    esp,0xc
c00116d0:	68 07 20 02 c0       	push   0xc0022007
c00116d5:	e8 4f db ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00116da:	83 c4 10             	add    esp,0x10
c00116dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116e3:	8d 50 01             	lea    edx,[eax+0x1]
c00116e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116ec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00116ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116f2:	8a 00                	mov    al,BYTE PTR [eax]
c00116f4:	8d 50 fe             	lea    edx,[eax-0x2]
c00116f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116fa:	88 10                	mov    BYTE PTR [eax],dl
c00116fc:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00116ff:	50                   	push   eax
c0011700:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0011703:	50                   	push   eax
c0011704:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0011707:	50                   	push   eax
c0011708:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001170b:	e8 42 41 00 00       	call   c0015852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011710:	83 c4 10             	add    esp,0x10
c0011713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011716:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011719:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001171c:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001171f:	01 d0                	add    eax,edx
c0011721:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0011724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011727:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001172a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001172d:	48                   	dec    eax
c001172e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011734:	83 ec 04             	sub    esp,0x4
c0011737:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001173a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001173d:	50                   	push   eax
c001173e:	e8 0d ea fe ff       	call   c0000150 <voodooXADD>
c0011743:	83 c4 10             	add    esp,0x10
c0011746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011749:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001174c:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001174f:	01 c2                	add    edx,eax
c0011751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011754:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011757:	e9 a9 03 00 00       	jmp    c0011b05 <opcodeFault(regs*, void*)+0x5ac>
c001175c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001175f:	8a 00                	mov    al,BYTE PTR [eax]
c0011761:	3c 0f                	cmp    al,0xf
c0011763:	0f 85 8b 01 00 00    	jne    c00118f4 <opcodeFault(regs*, void*)+0x39b>
c0011769:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001176c:	40                   	inc    eax
c001176d:	8a 00                	mov    al,BYTE PTR [eax]
c001176f:	3c c7                	cmp    al,0xc7
c0011771:	0f 86 7d 01 00 00    	jbe    c00118f4 <opcodeFault(regs*, void*)+0x39b>
c0011777:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001177a:	40                   	inc    eax
c001177b:	8a 00                	mov    al,BYTE PTR [eax]
c001177d:	3c cf                	cmp    al,0xcf
c001177f:	0f 87 6f 01 00 00    	ja     c00118f4 <opcodeFault(regs*, void*)+0x39b>
c0011785:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011788:	40                   	inc    eax
c0011789:	8a 00                	mov    al,BYTE PTR [eax]
c001178b:	83 c0 38             	add    eax,0x38
c001178e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0011791:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011795:	75 0b                	jne    c00117a2 <opcodeFault(regs*, void*)+0x249>
c0011797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001179a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001179d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117a0:	eb 75                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2be>
c00117a2:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00117a6:	75 0b                	jne    c00117b3 <opcodeFault(regs*, void*)+0x25a>
c00117a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00117ae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117b1:	eb 64                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2be>
c00117b3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00117b7:	75 0b                	jne    c00117c4 <opcodeFault(regs*, void*)+0x26b>
c00117b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117bc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00117bf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117c2:	eb 53                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2be>
c00117c4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117c8:	75 0b                	jne    c00117d5 <opcodeFault(regs*, void*)+0x27c>
c00117ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117d0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117d3:	eb 42                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2be>
c00117d5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117d9:	75 0b                	jne    c00117e6 <opcodeFault(regs*, void*)+0x28d>
c00117db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117de:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00117e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117e4:	eb 31                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2be>
c00117e6:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117ea:	75 0b                	jne    c00117f7 <opcodeFault(regs*, void*)+0x29e>
c00117ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ef:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00117f2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117f5:	eb 20                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2be>
c00117f7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117fb:	75 0b                	jne    c0011808 <opcodeFault(regs*, void*)+0x2af>
c00117fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011800:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011803:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011806:	eb 0f                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2be>
c0011808:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001180c:	75 09                	jne    c0011817 <opcodeFault(regs*, void*)+0x2be>
c001180e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011811:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011814:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011817:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001181b:	74 10                	je     c001182d <opcodeFault(regs*, void*)+0x2d4>
c001181d:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011824:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001182b:	eb 2d                	jmp    c001185a <opcodeFault(regs*, void*)+0x301>
c001182d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011830:	c1 e0 18             	shl    eax,0x18
c0011833:	89 c2                	mov    edx,eax
c0011835:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011838:	c1 e0 08             	shl    eax,0x8
c001183b:	25 00 00 ff 00       	and    eax,0xff0000
c0011840:	09 c2                	or     edx,eax
c0011842:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011845:	c1 e8 08             	shr    eax,0x8
c0011848:	25 00 ff 00 00       	and    eax,0xff00
c001184d:	09 c2                	or     edx,eax
c001184f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011852:	c1 e8 18             	shr    eax,0x18
c0011855:	09 d0                	or     eax,edx
c0011857:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001185a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001185e:	75 0b                	jne    c001186b <opcodeFault(regs*, void*)+0x312>
c0011860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011863:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011866:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011869:	eb 75                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x387>
c001186b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001186f:	75 0b                	jne    c001187c <opcodeFault(regs*, void*)+0x323>
c0011871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011874:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011877:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001187a:	eb 64                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x387>
c001187c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0011880:	75 0b                	jne    c001188d <opcodeFault(regs*, void*)+0x334>
c0011882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011885:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011888:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001188b:	eb 53                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x387>
c001188d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0011891:	75 0b                	jne    c001189e <opcodeFault(regs*, void*)+0x345>
c0011893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011896:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001189c:	eb 42                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x387>
c001189e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00118a2:	75 0b                	jne    c00118af <opcodeFault(regs*, void*)+0x356>
c00118a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118aa:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00118ad:	eb 31                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x387>
c00118af:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00118b3:	75 0b                	jne    c00118c0 <opcodeFault(regs*, void*)+0x367>
c00118b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00118be:	eb 20                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x387>
c00118c0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00118c4:	75 0b                	jne    c00118d1 <opcodeFault(regs*, void*)+0x378>
c00118c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118cc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00118cf:	eb 0f                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x387>
c00118d1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00118d5:	75 09                	jne    c00118e0 <opcodeFault(regs*, void*)+0x387>
c00118d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118dd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00118e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118e6:	8d 50 02             	lea    edx,[eax+0x2]
c00118e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00118ef:	e9 11 02 00 00       	jmp    c0011b05 <opcodeFault(regs*, void*)+0x5ac>
c00118f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118f7:	8a 00                	mov    al,BYTE PTR [eax]
c00118f9:	3c 0f                	cmp    al,0xf
c00118fb:	0f 85 76 01 00 00    	jne    c0011a77 <opcodeFault(regs*, void*)+0x51e>
c0011901:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011904:	40                   	inc    eax
c0011905:	8a 00                	mov    al,BYTE PTR [eax]
c0011907:	3c c7                	cmp    al,0xc7
c0011909:	0f 85 68 01 00 00    	jne    c0011a77 <opcodeFault(regs*, void*)+0x51e>
c001190f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011915:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011918:	8d 50 01             	lea    edx,[eax+0x1]
c001191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011921:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011924:	50                   	push   eax
c0011925:	8d 45 bb             	lea    eax,[ebp-0x45]
c0011928:	50                   	push   eax
c0011929:	8d 45 bc             	lea    eax,[ebp-0x44]
c001192c:	50                   	push   eax
c001192d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011930:	e8 1d 3f 00 00       	call   c0015852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001193b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001193e:	83 f0 01             	xor    eax,0x1
c0011941:	84 c0                	test   al,al
c0011943:	0f 84 2e 01 00 00    	je     c0011a77 <opcodeFault(regs*, void*)+0x51e>
c0011949:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001194c:	3c 01                	cmp    al,0x1
c001194e:	0f 85 23 01 00 00    	jne    c0011a77 <opcodeFault(regs*, void*)+0x51e>
c0011954:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011957:	83 f0 01             	xor    eax,0x1
c001195a:	84 c0                	test   al,al
c001195c:	0f 84 15 01 00 00    	je     c0011a77 <opcodeFault(regs*, void*)+0x51e>
c0011962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011965:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011968:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001196b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0011972:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011975:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011978:	89 c2                	mov    edx,eax
c001197a:	b8 00 00 00 00       	mov    eax,0x0
c001197f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011982:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011988:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001198b:	ba 00 00 00 00       	mov    edx,0x0
c0011990:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0011993:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0011996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011999:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001199c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001199f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00119a6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119a9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119ac:	89 c2                	mov    edx,eax
c00119ae:	b8 00 00 00 00       	mov    eax,0x0
c00119b3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00119b6:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00119b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119bf:	ba 00 00 00 00       	mov    edx,0x0
c00119c4:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00119c7:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00119ca:	e8 8c 70 00 00       	call   c0018a5b <lockScheduler()>
c00119cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119d2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00119d7:	89 c1                	mov    ecx,eax
c00119d9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00119dc:	89 cb                	mov    ebx,ecx
c00119de:	89 d0                	mov    eax,edx
c00119e0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00119e3:	89 c6                	mov    esi,eax
c00119e5:	89 f0                	mov    eax,esi
c00119e7:	09 d8                	or     eax,ebx
c00119e9:	85 c0                	test   eax,eax
c00119eb:	75 21                	jne    c0011a0e <opcodeFault(regs*, void*)+0x4b5>
c00119ed:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00119f0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119f3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119f6:	89 01                	mov    DWORD PTR [ecx],eax
c00119f8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00119fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a01:	83 c8 40             	or     eax,0x40
c0011a04:	89 c2                	mov    edx,eax
c0011a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a09:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a0c:	eb 3e                	jmp    c0011a4c <opcodeFault(regs*, void*)+0x4f3>
c0011a0e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011a11:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011a14:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a16:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011a19:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011a1c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a22:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011a25:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011a28:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011a2b:	89 d0                	mov    eax,edx
c0011a2d:	31 d2                	xor    edx,edx
c0011a2f:	89 c3                	mov    ebx,eax
c0011a31:	89 d6                	mov    esi,edx
c0011a33:	89 da                	mov    edx,ebx
c0011a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a38:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a41:	83 e0 bf             	and    eax,0xffffffbf
c0011a44:	89 c2                	mov    edx,eax
c0011a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a49:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a4c:	e8 0c 70 00 00       	call   c0018a5d <unlockScheduler()>
c0011a51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a54:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011a57:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011a5a:	01 c2                	add    edx,eax
c0011a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a5f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a62:	83 ec 0c             	sub    esp,0xc
c0011a65:	68 16 20 02 c0       	push   0xc0022016
c0011a6a:	e8 ba d7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0011a6f:	83 c4 10             	add    esp,0x10
c0011a72:	e9 8e 00 00 00       	jmp    c0011b05 <opcodeFault(regs*, void*)+0x5ac>
c0011a77:	83 ec 0c             	sub    esp,0xc
c0011a7a:	68 29 20 02 c0       	push   0xc0022029
c0011a7f:	e8 a5 d7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0011a84:	83 c4 10             	add    esp,0x10
c0011a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a8a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a93:	c1 e0 04             	shl    eax,0x4
c0011a96:	01 d0                	add    eax,edx
c0011a98:	83 c0 03             	add    eax,0x3
c0011a9b:	8a 00                	mov    al,BYTE PTR [eax]
c0011a9d:	0f b6 d8             	movzx  ebx,al
c0011aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aac:	c1 e0 04             	shl    eax,0x4
c0011aaf:	01 d0                	add    eax,edx
c0011ab1:	83 c0 02             	add    eax,0x2
c0011ab4:	8a 00                	mov    al,BYTE PTR [eax]
c0011ab6:	0f b6 c8             	movzx  ecx,al
c0011ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011abc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac5:	c1 e0 04             	shl    eax,0x4
c0011ac8:	01 d0                	add    eax,edx
c0011aca:	40                   	inc    eax
c0011acb:	8a 00                	mov    al,BYTE PTR [eax]
c0011acd:	0f b6 d0             	movzx  edx,al
c0011ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ad3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ad9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011adc:	c1 e0 04             	shl    eax,0x4
c0011adf:	01 f0                	add    eax,esi
c0011ae1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ae3:	0f b6 c0             	movzx  eax,al
c0011ae6:	83 ec 0c             	sub    esp,0xc
c0011ae9:	53                   	push   ebx
c0011aea:	51                   	push   ecx
c0011aeb:	52                   	push   edx
c0011aec:	50                   	push   eax
c0011aed:	68 3c 20 02 c0       	push   0xc002203c
c0011af2:	e8 32 d7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0011af7:	83 c4 20             	add    esp,0x20
c0011afa:	83 ec 0c             	sub    esp,0xc
c0011afd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011b00:	e8 6b f5 ff ff       	call   c0011070 <displayDebugInfo(regs*)>
c0011b05:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011b08:	5b                   	pop    ebx
c0011b09:	5e                   	pop    esi
c0011b0a:	5d                   	pop    ebp
c0011b0b:	c3                   	ret    

c0011b0c <displayProgramFault(char const*)>:
c0011b0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b14:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011b1a:	85 c0                	test   eax,eax
c0011b1c:	74 15                	je     c0011b33 <displayProgramFault(char const*)+0x27>
c0011b1e:	83 ec 0c             	sub    esp,0xc
c0011b21:	6a 04                	push   0x4
c0011b23:	6a 0f                	push   0xf
c0011b25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b29:	50                   	push   eax
c0011b2a:	e8 0b b9 ff ff       	call   c000d43a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011b2f:	83 c4 1c             	add    esp,0x1c
c0011b32:	c3                   	ret    
c0011b33:	c3                   	ret    

c0011b34 <setupInterruptController()>:
c0011b34:	55                   	push   ebp
c0011b35:	89 e5                	mov    ebp,esp
c0011b37:	53                   	push   ebx
c0011b38:	83 ec 14             	sub    esp,0x14
c0011b3b:	e8 a3 2d 00 00       	call   c00148e3 <getCPUNumber()>
c0011b40:	85 c0                	test   eax,eax
c0011b42:	0f 95 c0             	setne  al
c0011b45:	84 c0                	test   al,al
c0011b47:	74 56                	je     c0011b9f <setupInterruptController()+0x6b>
c0011b49:	83 ec 0c             	sub    esp,0xc
c0011b4c:	68 58 21 00 00       	push   0x2158
c0011b51:	e8 9e d5 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0011b56:	83 c4 10             	add    esp,0x10
c0011b59:	89 c3                	mov    ebx,eax
c0011b5b:	83 ec 0c             	sub    esp,0xc
c0011b5e:	53                   	push   ebx
c0011b5f:	e8 6a c9 00 00       	call   c001e4ce <APIC::APIC()>
c0011b64:	83 c4 10             	add    esp,0x10
c0011b67:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011b6a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011b6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b72:	83 c0 08             	add    eax,0x8
c0011b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b77:	6a 00                	push   0x0
c0011b79:	6a 00                	push   0x0
c0011b7b:	6a 00                	push   0x0
c0011b7d:	52                   	push   edx
c0011b7e:	ff d0                	call   eax
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011b88:	83 ec 08             	sub    esp,0x8
c0011b8b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b8e:	50                   	push   eax
c0011b8f:	e8 aa ea ff ff       	call   c001063e <Device::addChild(Device*)>
c0011b94:	83 c4 10             	add    esp,0x10
c0011b97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b9a:	e9 48 03 00 00       	jmp    c0011ee7 <setupInterruptController()+0x3b3>
c0011b9f:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011ba4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011baa:	83 e0 01             	and    eax,0x1
c0011bad:	84 c0                	test   al,al
c0011baf:	0f 95 c0             	setne  al
c0011bb2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011bb5:	83 ec 0c             	sub    esp,0xc
c0011bb8:	68 58 21 00 00       	push   0x2158
c0011bbd:	e8 32 d5 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0011bc2:	83 c4 10             	add    esp,0x10
c0011bc5:	89 c3                	mov    ebx,eax
c0011bc7:	83 ec 0c             	sub    esp,0xc
c0011bca:	53                   	push   ebx
c0011bcb:	e8 f8 cd 00 00       	call   c001e9c8 <PIC::PIC()>
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011bd6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bde:	83 c0 08             	add    eax,0x8
c0011be1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be3:	6a 00                	push   0x0
c0011be5:	6a 00                	push   0x0
c0011be7:	6a 00                	push   0x0
c0011be9:	52                   	push   edx
c0011bea:	ff d0                	call   eax
c0011bec:	83 c4 10             	add    esp,0x10
c0011bef:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011bf3:	74 6e                	je     c0011c63 <setupInterruptController()+0x12f>
c0011bf5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bfd:	83 c0 0c             	add    eax,0xc
c0011c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c02:	6a 00                	push   0x0
c0011c04:	6a 00                	push   0x0
c0011c06:	6a 00                	push   0x0
c0011c08:	52                   	push   edx
c0011c09:	ff d0                	call   eax
c0011c0b:	83 c4 10             	add    esp,0x10
c0011c0e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011c12:	74 15                	je     c0011c29 <setupInterruptController()+0xf5>
c0011c14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c19:	83 c0 04             	add    eax,0x4
c0011c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1e:	83 ec 0c             	sub    esp,0xc
c0011c21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c24:	ff d0                	call   eax
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	83 ec 0c             	sub    esp,0xc
c0011c2c:	68 58 21 00 00       	push   0x2158
c0011c31:	e8 be d4 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0011c36:	83 c4 10             	add    esp,0x10
c0011c39:	89 c3                	mov    ebx,eax
c0011c3b:	83 ec 0c             	sub    esp,0xc
c0011c3e:	53                   	push   ebx
c0011c3f:	e8 8a c8 00 00       	call   c001e4ce <APIC::APIC()>
c0011c44:	83 c4 10             	add    esp,0x10
c0011c47:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011c4a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c52:	83 c0 08             	add    eax,0x8
c0011c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c57:	6a 00                	push   0x0
c0011c59:	6a 00                	push   0x0
c0011c5b:	6a 00                	push   0x0
c0011c5d:	52                   	push   edx
c0011c5e:	ff d0                	call   eax
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011c68:	83 ec 08             	sub    esp,0x8
c0011c6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c6e:	50                   	push   eax
c0011c6f:	e8 ca e9 ff ff       	call   c001063e <Device::addChild(Device*)>
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c7c:	83 c0 24             	add    eax,0x24
c0011c7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c81:	6a 00                	push   0x0
c0011c83:	68 3a 15 01 c0       	push   0xc001153a
c0011c88:	6a 00                	push   0x0
c0011c8a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c8d:	ff d0                	call   eax
c0011c8f:	83 c4 10             	add    esp,0x10
c0011c92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c97:	83 c0 24             	add    eax,0x24
c0011c9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c9c:	6a 00                	push   0x0
c0011c9e:	68 3a 15 01 c0       	push   0xc001153a
c0011ca3:	6a 01                	push   0x1
c0011ca5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ca8:	ff d0                	call   eax
c0011caa:	83 c4 10             	add    esp,0x10
c0011cad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb2:	83 c0 24             	add    eax,0x24
c0011cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb7:	6a 00                	push   0x0
c0011cb9:	68 d3 0e 01 c0       	push   0xc0010ed3
c0011cbe:	6a 02                	push   0x2
c0011cc0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cc3:	ff d0                	call   eax
c0011cc5:	83 c4 10             	add    esp,0x10
c0011cc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ccd:	83 c0 24             	add    eax,0x24
c0011cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd2:	6a 00                	push   0x0
c0011cd4:	68 3a 15 01 c0       	push   0xc001153a
c0011cd9:	6a 03                	push   0x3
c0011cdb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cde:	ff d0                	call   eax
c0011ce0:	83 c4 10             	add    esp,0x10
c0011ce3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce8:	83 c0 24             	add    eax,0x24
c0011ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ced:	6a 00                	push   0x0
c0011cef:	68 3a 15 01 c0       	push   0xc001153a
c0011cf4:	6a 04                	push   0x4
c0011cf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cf9:	ff d0                	call   eax
c0011cfb:	83 c4 10             	add    esp,0x10
c0011cfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d03:	83 c0 24             	add    eax,0x24
c0011d06:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d08:	6a 00                	push   0x0
c0011d0a:	68 3a 15 01 c0       	push   0xc001153a
c0011d0f:	6a 05                	push   0x5
c0011d11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d14:	ff d0                	call   eax
c0011d16:	83 c4 10             	add    esp,0x10
c0011d19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d1e:	83 c0 24             	add    eax,0x24
c0011d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d23:	6a 00                	push   0x0
c0011d25:	68 59 15 01 c0       	push   0xc0011559
c0011d2a:	6a 06                	push   0x6
c0011d2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d2f:	ff d0                	call   eax
c0011d31:	83 c4 10             	add    esp,0x10
c0011d34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d37:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d39:	83 c0 24             	add    eax,0x24
c0011d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d3e:	6a 00                	push   0x0
c0011d40:	68 87 14 01 c0       	push   0xc0011487
c0011d45:	6a 07                	push   0x7
c0011d47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d4a:	ff d0                	call   eax
c0011d4c:	83 c4 10             	add    esp,0x10
c0011d4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d54:	83 c0 24             	add    eax,0x24
c0011d57:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d59:	6a 00                	push   0x0
c0011d5b:	68 ee 0c 01 c0       	push   0xc0010cee
c0011d60:	6a 08                	push   0x8
c0011d62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d65:	ff d0                	call   eax
c0011d67:	83 c4 10             	add    esp,0x10
c0011d6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d6f:	83 c0 24             	add    eax,0x24
c0011d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d74:	6a 00                	push   0x0
c0011d76:	68 3a 15 01 c0       	push   0xc001153a
c0011d7b:	6a 09                	push   0x9
c0011d7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d80:	ff d0                	call   eax
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8a:	83 c0 24             	add    eax,0x24
c0011d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8f:	6a 00                	push   0x0
c0011d91:	68 3a 15 01 c0       	push   0xc001153a
c0011d96:	6a 0a                	push   0xa
c0011d98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d9b:	ff d0                	call   eax
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011da3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da5:	83 c0 24             	add    eax,0x24
c0011da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011daa:	6a 00                	push   0x0
c0011dac:	68 3a 15 01 c0       	push   0xc001153a
c0011db1:	6a 0b                	push   0xb
c0011db3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011db6:	ff d0                	call   eax
c0011db8:	83 c4 10             	add    esp,0x10
c0011dbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc0:	83 c0 24             	add    eax,0x24
c0011dc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc5:	6a 00                	push   0x0
c0011dc7:	68 3a 15 01 c0       	push   0xc001153a
c0011dcc:	6a 0c                	push   0xc
c0011dce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dd1:	ff d0                	call   eax
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ddb:	83 c0 24             	add    eax,0x24
c0011dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de0:	6a 00                	push   0x0
c0011de2:	68 ea 14 01 c0       	push   0xc00114ea
c0011de7:	6a 0d                	push   0xd
c0011de9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dec:	ff d0                	call   eax
c0011dee:	83 c4 10             	add    esp,0x10
c0011df1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011df4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df6:	83 c0 24             	add    eax,0x24
c0011df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dfb:	6a 00                	push   0x0
c0011dfd:	68 23 15 01 c0       	push   0xc0011523
c0011e02:	6a 0e                	push   0xe
c0011e04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e07:	ff d0                	call   eax
c0011e09:	83 c4 10             	add    esp,0x10
c0011e0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e11:	83 c0 24             	add    eax,0x24
c0011e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e16:	6a 00                	push   0x0
c0011e18:	68 3a 15 01 c0       	push   0xc001153a
c0011e1d:	6a 0f                	push   0xf
c0011e1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e22:	ff d0                	call   eax
c0011e24:	83 c4 10             	add    esp,0x10
c0011e27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e2c:	83 c0 24             	add    eax,0x24
c0011e2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e31:	6a 00                	push   0x0
c0011e33:	68 3a 15 01 c0       	push   0xc001153a
c0011e38:	6a 10                	push   0x10
c0011e3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e3d:	ff d0                	call   eax
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e47:	83 c0 24             	add    eax,0x24
c0011e4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e4c:	6a 00                	push   0x0
c0011e4e:	68 3a 15 01 c0       	push   0xc001153a
c0011e53:	6a 11                	push   0x11
c0011e55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e58:	ff d0                	call   eax
c0011e5a:	83 c4 10             	add    esp,0x10
c0011e5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e62:	83 c0 24             	add    eax,0x24
c0011e65:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e67:	6a 00                	push   0x0
c0011e69:	68 3a 15 01 c0       	push   0xc001153a
c0011e6e:	6a 12                	push   0x12
c0011e70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e73:	ff d0                	call   eax
c0011e75:	83 c4 10             	add    esp,0x10
c0011e78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e7d:	83 c0 24             	add    eax,0x24
c0011e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e82:	6a 00                	push   0x0
c0011e84:	68 3a 15 01 c0       	push   0xc001153a
c0011e89:	6a 13                	push   0x13
c0011e8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e8e:	ff d0                	call   eax
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e96:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e98:	83 c0 24             	add    eax,0x24
c0011e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e9d:	6a 00                	push   0x0
c0011e9f:	68 3a 15 01 c0       	push   0xc001153a
c0011ea4:	6a 14                	push   0x14
c0011ea6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ea9:	ff d0                	call   eax
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011eb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb3:	83 c0 24             	add    eax,0x24
c0011eb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb8:	6a 00                	push   0x0
c0011eba:	68 3a 15 01 c0       	push   0xc001153a
c0011ebf:	6a 1e                	push   0x1e
c0011ec1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ec4:	ff d0                	call   eax
c0011ec6:	83 c4 10             	add    esp,0x10
c0011ec9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ece:	83 c0 24             	add    eax,0x24
c0011ed1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ed3:	6a 00                	push   0x0
c0011ed5:	68 62 74 01 c0       	push   0xc0017462
c0011eda:	6a 60                	push   0x60
c0011edc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011edf:	ff d0                	call   eax
c0011ee1:	83 c4 10             	add    esp,0x10
c0011ee4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ee7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011eea:	c9                   	leave  
c0011eeb:	c3                   	ret    

c0011eec <InterruptController::convertLegacyIRQNumber(int)>:
c0011eec:	55                   	push   ebp
c0011eed:	89 e5                	mov    ebp,esp
c0011eef:	83 ec 08             	sub    esp,0x8
c0011ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ef5:	83 ec 0c             	sub    esp,0xc
c0011ef8:	50                   	push   eax
c0011ef9:	e8 22 ea ff ff       	call   c0010920 <Device::getName()>
c0011efe:	83 c4 10             	add    esp,0x10
c0011f01:	8a 00                	mov    al,BYTE PTR [eax]
c0011f03:	3c 41                	cmp    al,0x41
c0011f05:	0f 94 c0             	sete   al
c0011f08:	84 c0                	test   al,al
c0011f0a:	74 28                	je     c0011f34 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f0c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011f10:	7f 12                	jg     c0011f24 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011f12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f15:	05 00 3f 02 c0       	add    eax,0xc0023f00
c0011f1a:	8a 00                	mov    al,BYTE PTR [eax]
c0011f1c:	0f b6 c0             	movzx  eax,al
c0011f1f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011f22:	eb 10                	jmp    c0011f34 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f24:	83 ec 0c             	sub    esp,0xc
c0011f27:	68 b4 1d 02 c0       	push   0xc0021db4
c0011f2c:	e8 21 3b 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0011f31:	83 c4 10             	add    esp,0x10
c0011f34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f37:	c9                   	leave  
c0011f38:	c3                   	ret    
c0011f39:	90                   	nop

c0011f3a <startGUI(void*)>:
c0011f3a:	55                   	push   ebp
c0011f3b:	89 e5                	mov    ebp,esp
c0011f3d:	53                   	push   ebx
c0011f3e:	83 ec 04             	sub    esp,0x4
c0011f41:	e8 17 6b 00 00       	call   c0018a5d <unlockScheduler()>
c0011f46:	e8 fb 6a 00 00       	call   c0018a46 <getIRQNestingLevel()>
c0011f4b:	83 ec 08             	sub    esp,0x8
c0011f4e:	50                   	push   eax
c0011f4f:	68 a4 20 02 c0       	push   0xc00220a4
c0011f54:	e8 d0 d2 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f62:	83 ec 08             	sub    esp,0x8
c0011f65:	6a 01                	push   0x1
c0011f67:	68 be 20 02 c0       	push   0xc00220be
c0011f6c:	e8 04 65 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	83 ec 08             	sub    esp,0x8
c0011f77:	53                   	push   ebx
c0011f78:	50                   	push   eax
c0011f79:	e8 bd 66 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c0011f7e:	83 c4 10             	add    esp,0x10
c0011f81:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f87:	83 ec 08             	sub    esp,0x8
c0011f8a:	6a 01                	push   0x1
c0011f8c:	68 d8 20 02 c0       	push   0xc00220d8
c0011f91:	e8 df 64 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c0011f96:	83 c4 10             	add    esp,0x10
c0011f99:	83 ec 08             	sub    esp,0x8
c0011f9c:	53                   	push   ebx
c0011f9d:	50                   	push   eax
c0011f9e:	e8 98 66 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c0011fa3:	83 c4 10             	add    esp,0x10
c0011fa6:	90                   	nop
c0011fa7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011faa:	c9                   	leave  
c0011fab:	c3                   	ret    

c0011fac <sendKeyToTerminal(unsigned char)>:
c0011fac:	55                   	push   ebp
c0011fad:	89 e5                	mov    ebp,esp
c0011faf:	83 ec 28             	sub    esp,0x28
c0011fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fb5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011fb8:	8b 15 64 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024864
c0011fbe:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011fc1:	25 ff 00 00 00       	and    eax,0xff
c0011fc6:	83 ec 08             	sub    esp,0x8
c0011fc9:	50                   	push   eax
c0011fca:	52                   	push   edx
c0011fcb:	e8 a8 b9 ff ff       	call   c000d978 <VgaText::receiveKey(unsigned char)>
c0011fd0:	83 c4 10             	add    esp,0x10
c0011fd3:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011fd7:	75 41                	jne    c001201a <sendKeyToTerminal(unsigned char)+0x6e>
c0011fd9:	e8 a4 6a 00 00       	call   c0018a82 <lockStuff()>
c0011fde:	a1 40 49 02 c0       	mov    eax,ds:0xc0024940
c0011fe3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fe6:	c7 05 40 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024940,0x0
c0011ff0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011ff4:	74 1f                	je     c0012015 <sendKeyToTerminal(unsigned char)+0x69>
c0011ff6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ff9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011ffc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011fff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012002:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0012005:	83 ec 0c             	sub    esp,0xc
c0012008:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001200b:	e8 6f 70 00 00       	call   c001907f <unblockTask(ThreadControlBlock*)>
c0012010:	83 c4 10             	add    esp,0x10
c0012013:	eb db                	jmp    c0011ff0 <sendKeyToTerminal(unsigned char)+0x44>
c0012015:	e8 0f 6e 00 00       	call   c0018e29 <unlockStuff()>
c001201a:	90                   	nop
c001201b:	c9                   	leave  
c001201c:	c3                   	ret    

c001201d <sendKeyboardToken(KeyboardToken)>:
c001201d:	55                   	push   ebp
c001201e:	89 e5                	mov    ebp,esp
c0012020:	83 ec 18             	sub    esp,0x18
c0012023:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0012026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012029:	25 ff ff 00 00       	and    eax,0xffff
c001202e:	83 f2 01             	xor    edx,0x1
c0012031:	88 90 60 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb6a0],dl
c0012037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001203a:	66 3d 03 02          	cmp    ax,0x203
c001203e:	75 07                	jne    c0012047 <sendKeyboardToken(KeyboardToken)+0x2a>
c0012040:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c0012045:	84 c0                	test   al,al
c0012047:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001204b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001204e:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c0012053:	38 c2                	cmp    dl,al
c0012055:	74 1e                	je     c0012075 <sendKeyboardToken(KeyboardToken)+0x58>
c0012057:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001205a:	a2 68 4d 02 c0       	mov    ds:0xc0024d68,al
c001205f:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c0012064:	25 ff 00 00 00       	and    eax,0xff
c0012069:	83 ec 0c             	sub    esp,0xc
c001206c:	50                   	push   eax
c001206d:	e8 72 ab ff ff       	call   c000cbe4 <setTerminalScrollLock(bool)>
c0012072:	83 c4 10             	add    esp,0x10
c0012075:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0012078:	84 c0                	test   al,al
c001207a:	0f 84 ae 00 00 00    	je     c001212e <sendKeyboardToken(KeyboardToken)+0x111>
c0012080:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012083:	66 3d 10 03          	cmp    ax,0x310
c0012087:	75 06                	jne    c001208f <sendKeyboardToken(KeyboardToken)+0x72>
c0012089:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001208f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012092:	66 3d 11 03          	cmp    ax,0x311
c0012096:	75 06                	jne    c001209e <sendKeyboardToken(KeyboardToken)+0x81>
c0012098:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001209e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a1:	66 3d 12 03          	cmp    ax,0x312
c00120a5:	75 06                	jne    c00120ad <sendKeyboardToken(KeyboardToken)+0x90>
c00120a7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00120ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b0:	66 3d 13 03          	cmp    ax,0x313
c00120b4:	75 06                	jne    c00120bc <sendKeyboardToken(KeyboardToken)+0x9f>
c00120b6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00120bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120bf:	66 3d 14 03          	cmp    ax,0x314
c00120c3:	75 06                	jne    c00120cb <sendKeyboardToken(KeyboardToken)+0xae>
c00120c5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00120cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ce:	66 3d 15 03          	cmp    ax,0x315
c00120d2:	75 06                	jne    c00120da <sendKeyboardToken(KeyboardToken)+0xbd>
c00120d4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120dd:	66 3d 16 03          	cmp    ax,0x316
c00120e1:	75 06                	jne    c00120e9 <sendKeyboardToken(KeyboardToken)+0xcc>
c00120e3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00120e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ec:	66 3d 17 03          	cmp    ax,0x317
c00120f0:	75 06                	jne    c00120f8 <sendKeyboardToken(KeyboardToken)+0xdb>
c00120f2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00120f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120fb:	66 3d 18 03          	cmp    ax,0x318
c00120ff:	75 06                	jne    c0012107 <sendKeyboardToken(KeyboardToken)+0xea>
c0012101:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0012107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001210a:	66 3d 19 03          	cmp    ax,0x319
c001210e:	75 06                	jne    c0012116 <sendKeyboardToken(KeyboardToken)+0xf9>
c0012110:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0012116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012119:	66 3d 1a 03          	cmp    ax,0x31a
c001211d:	0f 85 c9 00 00 00    	jne    c00121ec <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012123:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0012129:	e9 be 00 00 00       	jmp    c00121ec <sendKeyboardToken(KeyboardToken)+0x1cf>
c001212e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012131:	66 3d 10 03          	cmp    ax,0x310
c0012135:	75 0a                	jne    c0012141 <sendKeyboardToken(KeyboardToken)+0x124>
c0012137:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001213d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012144:	66 3d 11 03          	cmp    ax,0x311
c0012148:	75 0a                	jne    c0012154 <sendKeyboardToken(KeyboardToken)+0x137>
c001214a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012150:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012157:	66 3d 12 03          	cmp    ax,0x312
c001215b:	75 0a                	jne    c0012167 <sendKeyboardToken(KeyboardToken)+0x14a>
c001215d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012163:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001216a:	66 3d 13 03          	cmp    ax,0x313
c001216e:	75 0a                	jne    c001217a <sendKeyboardToken(KeyboardToken)+0x15d>
c0012170:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012176:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001217a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001217d:	66 3d 14 03          	cmp    ax,0x314
c0012181:	75 0a                	jne    c001218d <sendKeyboardToken(KeyboardToken)+0x170>
c0012183:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0012189:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001218d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012190:	66 3d 15 03          	cmp    ax,0x315
c0012194:	75 0a                	jne    c00121a0 <sendKeyboardToken(KeyboardToken)+0x183>
c0012196:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001219c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121a3:	66 3d 16 03          	cmp    ax,0x316
c00121a7:	75 0a                	jne    c00121b3 <sendKeyboardToken(KeyboardToken)+0x196>
c00121a9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00121af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121b6:	66 3d 17 03          	cmp    ax,0x317
c00121ba:	75 0a                	jne    c00121c6 <sendKeyboardToken(KeyboardToken)+0x1a9>
c00121bc:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00121c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121c9:	66 3d 18 03          	cmp    ax,0x318
c00121cd:	75 0a                	jne    c00121d9 <sendKeyboardToken(KeyboardToken)+0x1bc>
c00121cf:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00121d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121dc:	66 3d 19 03          	cmp    ax,0x319
c00121e0:	75 0a                	jne    c00121ec <sendKeyboardToken(KeyboardToken)+0x1cf>
c00121e2:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00121e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121ef:	66 3d 00 02          	cmp    ax,0x200
c00121f3:	75 2a                	jne    c001221f <sendKeyboardToken(KeyboardToken)+0x202>
c00121f5:	a0 60 4d 02 c0       	mov    al,ds:0xc0024d60
c00121fa:	83 f0 01             	xor    eax,0x1
c00121fd:	84 c0                	test   al,al
c00121ff:	74 1e                	je     c001221f <sendKeyboardToken(KeyboardToken)+0x202>
c0012201:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0012206:	6a 01                	push   0x1
c0012208:	6a 00                	push   0x0
c001220a:	68 3a 1f 01 c0       	push   0xc0011f3a
c001220f:	50                   	push   eax
c0012210:	e8 7b 69 00 00       	call   c0018b90 <Process::createThread(void (*)(void*), void*, int)>
c0012215:	83 c4 10             	add    esp,0x10
c0012218:	c6 05 60 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024d60,0x1
c001221f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012222:	66 3d 1d 03          	cmp    ax,0x31d
c0012226:	75 06                	jne    c001222e <sendKeyboardToken(KeyboardToken)+0x211>
c0012228:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001222e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012231:	66 3d 1c 03          	cmp    ax,0x31c
c0012235:	75 06                	jne    c001223d <sendKeyboardToken(KeyboardToken)+0x220>
c0012237:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001223d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012240:	66 3d 1b 03          	cmp    ax,0x31b
c0012244:	75 06                	jne    c001224c <sendKeyboardToken(KeyboardToken)+0x22f>
c0012246:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001224c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001224f:	66 3d 1e 03          	cmp    ax,0x31e
c0012253:	75 06                	jne    c001225b <sendKeyboardToken(KeyboardToken)+0x23e>
c0012255:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001225b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001225e:	66 3d 1f 03          	cmp    ax,0x31f
c0012262:	75 06                	jne    c001226a <sendKeyboardToken(KeyboardToken)+0x24d>
c0012264:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001226a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001226d:	66 3d 1a 03          	cmp    ax,0x31a
c0012271:	75 06                	jne    c0012279 <sendKeyboardToken(KeyboardToken)+0x25c>
c0012273:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0012279:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001227d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012280:	83 f0 01             	xor    eax,0x1
c0012283:	84 c0                	test   al,al
c0012285:	74 7b                	je     c0012302 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0012287:	a0 61 4a 02 c0       	mov    al,ds:0xc0024a61
c001228c:	84 c0                	test   al,al
c001228e:	74 43                	je     c00122d3 <sendKeyboardToken(KeyboardToken)+0x2b6>
c0012290:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012294:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0012298:	74 2d                	je     c00122c7 <sendKeyboardToken(KeyboardToken)+0x2aa>
c001229a:	8b 15 64 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d64
c00122a0:	89 d0                	mov    eax,edx
c00122a2:	c1 e0 02             	shl    eax,0x2
c00122a5:	01 d0                	add    eax,edx
c00122a7:	01 c0                	add    eax,eax
c00122a9:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c00122ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122b1:	25 ff ff 00 00       	and    eax,0xffff
c00122b6:	8d 50 d0             	lea    edx,[eax-0x30]
c00122b9:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122be:	01 d0                	add    eax,edx
c00122c0:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c00122c5:	eb 71                	jmp    c0012338 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122c7:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c00122d1:	eb 65                	jmp    c0012338 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122d3:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122d8:	85 c0                	test   eax,eax
c00122da:	74 1a                	je     c00122f6 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00122dc:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122e1:	25 ff 00 00 00       	and    eax,0xff
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	50                   	push   eax
c00122ea:	e8 bd fc ff ff       	call   c0011fac <sendKeyToTerminal(unsigned char)>
c00122ef:	83 c4 10             	add    esp,0x10
c00122f2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00122f6:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c0012300:	eb 36                	jmp    c0012338 <sendKeyboardToken(KeyboardToken)+0x31b>
c0012302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012305:	66 3d 01 01          	cmp    ax,0x101
c0012309:	75 2d                	jne    c0012338 <sendKeyboardToken(KeyboardToken)+0x31b>
c001230b:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c0012310:	85 c0                	test   eax,eax
c0012312:	74 1a                	je     c001232e <sendKeyboardToken(KeyboardToken)+0x311>
c0012314:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c0012319:	25 ff 00 00 00       	and    eax,0xff
c001231e:	83 ec 0c             	sub    esp,0xc
c0012321:	50                   	push   eax
c0012322:	e8 85 fc ff ff       	call   c0011fac <sendKeyToTerminal(unsigned char)>
c0012327:	83 c4 10             	add    esp,0x10
c001232a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001232e:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c0012338:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001233b:	83 f0 01             	xor    eax,0x1
c001233e:	84 c0                	test   al,al
c0012340:	74 4e                	je     c0012390 <sendKeyboardToken(KeyboardToken)+0x373>
c0012342:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012345:	83 f0 01             	xor    eax,0x1
c0012348:	84 c0                	test   al,al
c001234a:	74 44                	je     c0012390 <sendKeyboardToken(KeyboardToken)+0x373>
c001234c:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c0012351:	83 f0 01             	xor    eax,0x1
c0012354:	84 c0                	test   al,al
c0012356:	74 38                	je     c0012390 <sendKeyboardToken(KeyboardToken)+0x373>
c0012358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001235b:	66 83 f8 1f          	cmp    ax,0x1f
c001235f:	76 09                	jbe    c001236a <sendKeyboardToken(KeyboardToken)+0x34d>
c0012361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012364:	66 83 f8 7e          	cmp    ax,0x7e
c0012368:	76 12                	jbe    c001237c <sendKeyboardToken(KeyboardToken)+0x35f>
c001236a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001236d:	66 83 f8 0a          	cmp    ax,0xa
c0012371:	74 09                	je     c001237c <sendKeyboardToken(KeyboardToken)+0x35f>
c0012373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012376:	66 83 f8 08          	cmp    ax,0x8
c001237a:	75 14                	jne    c0012390 <sendKeyboardToken(KeyboardToken)+0x373>
c001237c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001237f:	25 ff 00 00 00       	and    eax,0xff
c0012384:	83 ec 0c             	sub    esp,0xc
c0012387:	50                   	push   eax
c0012388:	e8 1f fc ff ff       	call   c0011fac <sendKeyToTerminal(unsigned char)>
c001238d:	83 c4 10             	add    esp,0x10
c0012390:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012393:	83 f0 01             	xor    eax,0x1
c0012396:	84 c0                	test   al,al
c0012398:	74 51                	je     c00123eb <sendKeyboardToken(KeyboardToken)+0x3ce>
c001239a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001239d:	83 f0 01             	xor    eax,0x1
c00123a0:	84 c0                	test   al,al
c00123a2:	74 47                	je     c00123eb <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123a4:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c00123a9:	84 c0                	test   al,al
c00123ab:	74 3e                	je     c00123eb <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b0:	66 83 f8 3f          	cmp    ax,0x3f
c00123b4:	76 35                	jbe    c00123eb <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b9:	66 83 f8 7f          	cmp    ax,0x7f
c00123bd:	77 2c                	ja     c00123eb <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123c2:	88 c2                	mov    dl,al
c00123c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123c7:	66 83 f8 5f          	cmp    ax,0x5f
c00123cb:	76 04                	jbe    c00123d1 <sendKeyboardToken(KeyboardToken)+0x3b4>
c00123cd:	b0 20                	mov    al,0x20
c00123cf:	eb 02                	jmp    c00123d3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c00123d1:	b0 00                	mov    al,0x0
c00123d3:	29 c2                	sub    edx,eax
c00123d5:	88 d0                	mov    al,dl
c00123d7:	83 e8 40             	sub    eax,0x40
c00123da:	25 ff 00 00 00       	and    eax,0xff
c00123df:	83 ec 0c             	sub    esp,0xc
c00123e2:	50                   	push   eax
c00123e3:	e8 c4 fb ff ff       	call   c0011fac <sendKeyToTerminal(unsigned char)>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123ee:	66 3d 00 03          	cmp    ax,0x300
c00123f2:	75 0f                	jne    c0012403 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123f4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00123f7:	83 f0 01             	xor    eax,0x1
c00123fa:	84 c0                	test   al,al
c00123fc:	74 05                	je     c0012403 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123fe:	e8 08 b0 ff ff       	call   c000d40b <doTerminalCycle()>
c0012403:	90                   	nop
c0012404:	c9                   	leave  
c0012405:	c3                   	ret    

c0012406 <clearInternalKeybuffer(VgaText*)>:
c0012406:	55                   	push   ebp
c0012407:	89 e5                	mov    ebp,esp
c0012409:	83 ec 08             	sub    esp,0x8
c001240c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001240f:	05 34 11 00 00       	add    eax,0x1134
c0012414:	83 ec 0c             	sub    esp,0xc
c0012417:	50                   	push   eax
c0012418:	e8 d8 e2 fe ff       	call   c00006f5 <strlen>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012423:	81 c2 34 11 00 00    	add    edx,0x1134
c0012429:	83 ec 04             	sub    esp,0x4
c001242c:	50                   	push   eax
c001242d:	6a 00                	push   0x0
c001242f:	52                   	push   edx
c0012430:	e8 a3 e2 fe ff       	call   c00006d8 <memset>
c0012435:	83 c4 10             	add    esp,0x10
c0012438:	90                   	nop
c0012439:	c9                   	leave  
c001243a:	c3                   	ret    

c001243b <readKeyboard(VgaText*, char*, unsigned long)>:
c001243b:	55                   	push   ebp
c001243c:	89 e5                	mov    ebp,esp
c001243e:	83 ec 18             	sub    esp,0x18
c0012441:	fb                   	sti    
c0012442:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0012449:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001244d:	74 77                	je     c00124c6 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c001244f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012452:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012458:	84 c0                	test   al,al
c001245a:	75 02                	jne    c001245e <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c001245c:	eb f1                	jmp    c001244f <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c001245e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012461:	8d 50 01             	lea    edx,[eax+0x1]
c0012464:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0012467:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001246a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0012470:	88 10                	mov    BYTE PTR [eax],dl
c0012472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012475:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001247b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001247e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012481:	05 34 11 00 00       	add    eax,0x1134
c0012486:	83 ec 0c             	sub    esp,0xc
c0012489:	50                   	push   eax
c001248a:	e8 66 e2 fe ff       	call   c00006f5 <strlen>
c001248f:	83 c4 10             	add    esp,0x10
c0012492:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012495:	81 c2 34 11 00 00    	add    edx,0x1134
c001249b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001249e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00124a1:	81 c2 34 11 00 00    	add    edx,0x1134
c00124a7:	83 ec 04             	sub    esp,0x4
c00124aa:	50                   	push   eax
c00124ab:	51                   	push   ecx
c00124ac:	52                   	push   edx
c00124ad:	e8 b8 e1 fe ff       	call   c000066a <memmove>
c00124b2:	83 c4 10             	add    esp,0x10
c00124b5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00124b8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00124bb:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00124bf:	75 88                	jne    c0012449 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00124c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124c4:	eb 03                	jmp    c00124c9 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00124c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124c9:	c9                   	leave  
c00124ca:	c3                   	ret    
c00124cb:	90                   	nop

c00124cc <Keyboard::Keyboard(char const*)>:
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d3:	83 ec 08             	sub    esp,0x8
c00124d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124da:	50                   	push   eax
c00124db:	e8 4e e3 ff ff       	call   c001082e <Device::Device(char const*)>
c00124e0:	83 c4 10             	add    esp,0x10
c00124e3:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c00124e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ec:	89 10                	mov    DWORD PTR [eax],edx
c00124ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00124fc:	c6 05 44 49 02 c0 01 	mov    BYTE PTR ds:0xc0024944,0x1
c0012503:	90                   	nop
c0012504:	83 c4 0c             	add    esp,0xc
c0012507:	c3                   	ret    

c0012508 <Keyboard::~Keyboard()>:
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c0012510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012514:	89 10                	mov    DWORD PTR [eax],edx
c0012516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251a:	83 ec 0c             	sub    esp,0xc
c001251d:	50                   	push   eax
c001251e:	e8 c1 df ff ff       	call   c00104e4 <Device::~Device()>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	90                   	nop
c0012527:	83 c4 0c             	add    esp,0xc
c001252a:	c3                   	ret    
c001252b:	90                   	nop

c001252c <Keyboard::~Keyboard()>:
c001252c:	83 ec 0c             	sub    esp,0xc
c001252f:	83 ec 0c             	sub    esp,0xc
c0012532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012536:	e8 cd ff ff ff       	call   c0012508 <Keyboard::~Keyboard()>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	83 ec 08             	sub    esp,0x8
c0012541:	68 5c 01 00 00       	push   0x15c
c0012546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001254a:	e8 b4 cb ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	83 c4 0c             	add    esp,0xc
c0012555:	c3                   	ret    

c0012556 <LogicalDisk::close(int, int, void*)>:
c0012556:	83 c8 ff             	or     eax,0xffffffff
c0012559:	c3                   	ret    

c001255a <LogicalDisk::~LogicalDisk()>:
c001255a:	83 ec 0c             	sub    esp,0xc
c001255d:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0012562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012566:	89 10                	mov    DWORD PTR [eax],edx
c0012568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001256c:	83 ec 0c             	sub    esp,0xc
c001256f:	50                   	push   eax
c0012570:	e8 6f df ff ff       	call   c00104e4 <Device::~Device()>
c0012575:	83 c4 10             	add    esp,0x10
c0012578:	90                   	nop
c0012579:	83 c4 0c             	add    esp,0xc
c001257c:	c3                   	ret    
c001257d:	90                   	nop

c001257e <LogicalDisk::~LogicalDisk()>:
c001257e:	83 ec 0c             	sub    esp,0xc
c0012581:	83 ec 0c             	sub    esp,0xc
c0012584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012588:	e8 cd ff ff ff       	call   c001255a <LogicalDisk::~LogicalDisk()>
c001258d:	83 c4 10             	add    esp,0x10
c0012590:	83 ec 08             	sub    esp,0x8
c0012593:	68 74 01 00 00       	push   0x174
c0012598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001259c:	e8 62 cb ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c00125a1:	83 c4 10             	add    esp,0x10
c00125a4:	83 c4 0c             	add    esp,0xc
c00125a7:	c3                   	ret    

c00125a8 <LogicalDisk::open(int, int, void*)>:
c00125a8:	83 ec 18             	sub    esp,0x18
c00125ab:	68 28 21 02 c0       	push   0xc0022128
c00125b0:	e8 9d 34 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c00125b5:	83 c8 ff             	or     eax,0xffffffff
c00125b8:	83 c4 1c             	add    esp,0x1c
c00125bb:	c3                   	ret    

c00125bc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00125bc:	53                   	push   ebx
c00125bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125c9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00125cf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00125d5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00125db:	77 10                	ja     c00125ed <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00125dd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00125e3:	89 d3                	mov    ebx,edx
c00125e5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00125eb:	72 05                	jb     c00125f2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00125ed:	83 c8 ff             	or     eax,0xffffffff
c00125f0:	89 c2                	mov    edx,eax
c00125f2:	5b                   	pop    ebx
c00125f3:	c3                   	ret    

c00125f4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00125f4:	56                   	push   esi
c00125f5:	83 c8 ff             	or     eax,0xffffffff
c00125f8:	53                   	push   ebx
c00125f9:	89 c2                	mov    edx,eax
c00125fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125ff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0012603:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012607:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001260d:	77 27                	ja     c0012636 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001260f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0012615:	89 d8                	mov    eax,ebx
c0012617:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001261d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012622:	89 c2                	mov    edx,eax
c0012624:	73 10                	jae    c0012636 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012626:	89 c8                	mov    eax,ecx
c0012628:	89 da                	mov    edx,ebx
c001262a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012630:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0012636:	5b                   	pop    ebx
c0012637:	5e                   	pop    esi
c0012638:	c3                   	ret    
c0012639:	90                   	nop

c001263a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001263a:	83 ec 1c             	sub    esp,0x1c
c001263d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012641:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012649:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001264d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012651:	89 04 24             	mov    DWORD PTR [esp],eax
c0012654:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012658:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001265c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012660:	83 ec 08             	sub    esp,0x8
c0012663:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012667:	50                   	push   eax
c0012668:	e8 c1 e1 ff ff       	call   c001082e <Device::Device(char const*)>
c001266d:	83 c4 10             	add    esp,0x10
c0012670:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0012675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012679:	89 10                	mov    DWORD PTR [eax],edx
c001267b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001267f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001268a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012695:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001269f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126ab:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00126b1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00126b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00126be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126c2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00126c8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00126ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00126d6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00126dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126e0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126ea:	90                   	nop
c00126eb:	83 c4 1c             	add    esp,0x1c
c00126ee:	c3                   	ret    
c00126ef:	90                   	nop

c00126f0 <LogicalDisk::assignDriveLetter()>:
c00126f0:	55                   	push   ebp
c00126f1:	57                   	push   edi
c00126f2:	56                   	push   esi
c00126f3:	53                   	push   ebx
c00126f4:	83 ec 14             	sub    esp,0x14
c00126f7:	8b 3d 80 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d80
c00126fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012701:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0012705:	8b 3d 84 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d84
c001270b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0012711:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012715:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001271b:	3c 01                	cmp    al,0x1
c001271d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012721:	19 c0                	sbb    eax,eax
c0012723:	83 e0 02             	and    eax,0x2
c0012726:	83 c0 41             	add    eax,0x41
c0012729:	0f be e8             	movsx  ebp,al
c001272c:	3c 43                	cmp    al,0x43
c001272e:	75 10                	jne    c0012740 <LogicalDisk::assignDriveLetter()+0x50>
c0012730:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0012737:	75 5d                	jne    c0012796 <LogicalDisk::assignDriveLetter()+0xa6>
c0012739:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001273e:	75 56                	jne    c0012796 <LogicalDisk::assignDriveLetter()+0xa6>
c0012740:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012743:	ba 01 00 00 00       	mov    edx,0x1
c0012748:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001274c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012750:	d3 e2                	shl    edx,cl
c0012752:	89 d7                	mov    edi,edx
c0012754:	89 d6                	mov    esi,edx
c0012756:	c1 ff 1f             	sar    edi,0x1f
c0012759:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001275d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012761:	21 f9                	and    ecx,edi
c0012763:	09 d1                	or     ecx,edx
c0012765:	75 2f                	jne    c0012796 <LogicalDisk::assignDriveLetter()+0xa6>
c0012767:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001276b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001276f:	09 f2                	or     edx,esi
c0012771:	89 15 80 4d 02 c0    	mov    DWORD PTR ds:0xc0024d80,edx
c0012777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001277b:	09 fa                	or     edx,edi
c001277d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0012781:	89 15 84 4d 02 c0    	mov    DWORD PTR ds:0xc0024d84,edx
c0012787:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001278d:	89 1c bd a0 4d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb260],ebx
c0012794:	eb 08                	jmp    c001279e <LogicalDisk::assignDriveLetter()+0xae>
c0012796:	40                   	inc    eax
c0012797:	45                   	inc    ebp
c0012798:	3c 5b                	cmp    al,0x5b
c001279a:	75 90                	jne    c001272c <LogicalDisk::assignDriveLetter()+0x3c>
c001279c:	31 c0                	xor    eax,eax
c001279e:	83 c4 14             	add    esp,0x14
c00127a1:	5b                   	pop    ebx
c00127a2:	5e                   	pop    esi
c00127a3:	5f                   	pop    edi
c00127a4:	5d                   	pop    ebp
c00127a5:	c3                   	ret    

c00127a6 <LogicalDisk::mount()>:
c00127a6:	56                   	push   esi
c00127a7:	53                   	push   ebx
c00127a8:	51                   	push   ecx
c00127a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127ad:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c00127b3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00127bd:	85 db                	test   ebx,ebx
c00127bf:	74 50                	je     c0012811 <LogicalDisk::mount()+0x6b>
c00127c1:	e8 80 62 00 00       	call   c0018a46 <getIRQNestingLevel()>
c00127c6:	52                   	push   edx
c00127c7:	52                   	push   edx
c00127c8:	50                   	push   eax
c00127c9:	68 4c 21 02 c0       	push   0xc002214c
c00127ce:	e8 56 ca ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00127d3:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00127da:	83 c4 0c             	add    esp,0xc
c00127dd:	83 e8 41             	sub    eax,0x41
c00127e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127e2:	50                   	push   eax
c00127e3:	56                   	push   esi
c00127e4:	53                   	push   ebx
c00127e5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127e8:	83 c4 10             	add    esp,0x10
c00127eb:	84 c0                	test   al,al
c00127ed:	74 08                	je     c00127f7 <LogicalDisk::mount()+0x51>
c00127ef:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00127f5:	eb 1c                	jmp    c0012813 <LogicalDisk::mount()+0x6d>
c00127f7:	e8 4a 62 00 00       	call   c0018a46 <getIRQNestingLevel()>
c00127fc:	51                   	push   ecx
c00127fd:	51                   	push   ecx
c00127fe:	50                   	push   eax
c00127ff:	68 67 21 02 c0       	push   0xc0022167
c0012804:	e8 20 ca ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0012809:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001280c:	83 c4 10             	add    esp,0x10
c001280f:	eb ac                	jmp    c00127bd <LogicalDisk::mount()+0x17>
c0012811:	31 c0                	xor    eax,eax
c0012813:	5a                   	pop    edx
c0012814:	5b                   	pop    ebx
c0012815:	5e                   	pop    esi
c0012816:	c3                   	ret    
c0012817:	90                   	nop

c0012818 <LogicalDisk::unmount()>:
c0012818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001281c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012826:	c3                   	ret    
c0012827:	90                   	nop

c0012828 <LogicalDisk::unassignDriveLetter()>:
c0012828:	57                   	push   edi
c0012829:	56                   	push   esi
c001282a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001282e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012835:	84 c9                	test   cl,cl
c0012837:	75 0f                	jne    c0012848 <LogicalDisk::unassignDriveLetter()+0x20>
c0012839:	c7 44 24 0c 82 21 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022182
c0012841:	5e                   	pop    esi
c0012842:	5f                   	pop    edi
c0012843:	e9 0a 32 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c0012848:	83 e9 41             	sub    ecx,0x41
c001284b:	b8 01 00 00 00       	mov    eax,0x1
c0012850:	d3 e0                	shl    eax,cl
c0012852:	89 c7                	mov    edi,eax
c0012854:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001285b:	c1 ff 1f             	sar    edi,0x1f
c001285e:	c7 04 8d a0 4d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb260],0x0
c0012869:	89 fe                	mov    esi,edi
c001286b:	f7 d6                	not    esi
c001286d:	f7 d0                	not    eax
c001286f:	21 35 84 4d 02 c0    	and    DWORD PTR ds:0xc0024d84,esi
c0012875:	5e                   	pop    esi
c0012876:	21 05 80 4d 02 c0    	and    DWORD PTR ds:0xc0024d80,eax
c001287c:	5f                   	pop    edi
c001287d:	c3                   	ret    

c001287e <LogicalDisk::read(unsigned long long, int, void*)>:
c001287e:	57                   	push   edi
c001287f:	56                   	push   esi
c0012880:	53                   	push   ebx
c0012881:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012885:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012889:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001288d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012891:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012897:	77 41                	ja     c00128da <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0012899:	99                   	cdq    
c001289a:	01 c8                	add    eax,ecx
c001289c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00128a2:	11 da                	adc    edx,ebx
c00128a4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00128aa:	19 d7                	sbb    edi,edx
c00128ac:	72 33                	jb     c00128e1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00128ae:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00128b4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00128ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00128be:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00128c2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00128c8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128d2:	5b                   	pop    ebx
c00128d3:	5e                   	pop    esi
c00128d4:	5f                   	pop    edi
c00128d5:	e9 9a 09 00 00       	jmp    c0013274 <VCache::read(unsigned long long, int, void*)>
c00128da:	b8 05 00 00 00       	mov    eax,0x5
c00128df:	eb 05                	jmp    c00128e6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00128e1:	b8 07 00 00 00       	mov    eax,0x7
c00128e6:	5b                   	pop    ebx
c00128e7:	5e                   	pop    esi
c00128e8:	5f                   	pop    edi
c00128e9:	c3                   	ret    

c00128ea <LogicalDisk::write(unsigned long long, int, void*)>:
c00128ea:	57                   	push   edi
c00128eb:	56                   	push   esi
c00128ec:	53                   	push   ebx
c00128ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128f5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128fd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012903:	77 41                	ja     c0012946 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0012905:	99                   	cdq    
c0012906:	01 c8                	add    eax,ecx
c0012908:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001290e:	11 da                	adc    edx,ebx
c0012910:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012916:	19 d7                	sbb    edi,edx
c0012918:	72 33                	jb     c001294d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001291a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012920:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012926:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001292a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001292e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012934:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001293a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001293e:	5b                   	pop    ebx
c001293f:	5e                   	pop    esi
c0012940:	5f                   	pop    edi
c0012941:	e9 4a 08 00 00       	jmp    c0013190 <VCache::write(unsigned long long, int, void*)>
c0012946:	b8 05 00 00 00       	mov    eax,0x5
c001294b:	eb 05                	jmp    c0012952 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001294d:	b8 07 00 00 00       	mov    eax,0x7
c0012952:	5b                   	pop    ebx
c0012953:	5e                   	pop    esi
c0012954:	5f                   	pop    edi
c0012955:	c3                   	ret    

c0012956 <Mouse::Mouse(char const*)>:
c0012956:	83 ec 0c             	sub    esp,0xc
c0012959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295d:	83 ec 08             	sub    esp,0x8
c0012960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012964:	50                   	push   eax
c0012965:	e8 c4 de ff ff       	call   c001082e <Device::Device(char const*)>
c001296a:	83 c4 10             	add    esp,0x10
c001296d:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c0012972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012976:	89 10                	mov    DWORD PTR [eax],edx
c0012978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001297c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012986:	90                   	nop
c0012987:	83 c4 0c             	add    esp,0xc
c001298a:	c3                   	ret    
c001298b:	90                   	nop

c001298c <Mouse::~Mouse()>:
c001298c:	83 ec 0c             	sub    esp,0xc
c001298f:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c0012994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012998:	89 10                	mov    DWORD PTR [eax],edx
c001299a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001299e:	83 ec 0c             	sub    esp,0xc
c00129a1:	50                   	push   eax
c00129a2:	e8 3d db ff ff       	call   c00104e4 <Device::~Device()>
c00129a7:	83 c4 10             	add    esp,0x10
c00129aa:	90                   	nop
c00129ab:	83 c4 0c             	add    esp,0xc
c00129ae:	c3                   	ret    
c00129af:	90                   	nop

c00129b0 <Mouse::~Mouse()>:
c00129b0:	83 ec 0c             	sub    esp,0xc
c00129b3:	83 ec 0c             	sub    esp,0xc
c00129b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ba:	e8 cd ff ff ff       	call   c001298c <Mouse::~Mouse()>
c00129bf:	83 c4 10             	add    esp,0x10
c00129c2:	83 ec 08             	sub    esp,0x8
c00129c5:	68 58 01 00 00       	push   0x158
c00129ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ce:	e8 30 c7 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c00129d3:	83 c4 10             	add    esp,0x10
c00129d6:	83 c4 0c             	add    esp,0xc
c00129d9:	c3                   	ret    

c00129da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00129da:	55                   	push   ebp
c00129db:	57                   	push   edi
c00129dc:	56                   	push   esi
c00129dd:	53                   	push   ebx
c00129de:	81 ec 28 01 00 00    	sub    esp,0x128
c00129e4:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00129eb:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00129f2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129f9:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012a00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012a04:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012a08:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a0f:	e8 0c df ff ff       	call   c0010920 <Device::getName()>
c0012a14:	5a                   	pop    edx
c0012a15:	59                   	pop    ecx
c0012a16:	50                   	push   eax
c0012a17:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012a1b:	55                   	push   ebp
c0012a1c:	e8 56 dd fe ff       	call   c0000777 <strcpy>
c0012a21:	5b                   	pop    ebx
c0012a22:	58                   	pop    eax
c0012a23:	68 fc 21 02 c0       	push   0xc00221fc
c0012a28:	55                   	push   ebp
c0012a29:	e8 00 de fe ff       	call   c000082e <strcat>
c0012a2e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012a35:	e8 ba c6 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0012a3a:	83 c4 0c             	add    esp,0xc
c0012a3d:	89 c3                	mov    ebx,eax
c0012a3f:	57                   	push   edi
c0012a40:	56                   	push   esi
c0012a41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a49:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012a50:	55                   	push   ebp
c0012a51:	50                   	push   eax
c0012a52:	e8 e3 fb ff ff       	call   c001263a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a57:	83 c4 14             	add    esp,0x14
c0012a5a:	53                   	push   ebx
c0012a5b:	e8 90 fc ff ff       	call   c00126f0 <LogicalDisk::assignDriveLetter()>
c0012a60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a63:	e8 3e fd ff ff       	call   c00127a6 <LogicalDisk::mount()>
c0012a68:	58                   	pop    eax
c0012a69:	5a                   	pop    edx
c0012a6a:	53                   	push   ebx
c0012a6b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a72:	e8 c7 db ff ff       	call   c001063e <Device::addChild(Device*)>
c0012a77:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012a7d:	5b                   	pop    ebx
c0012a7e:	5e                   	pop    esi
c0012a7f:	5f                   	pop    edi
c0012a80:	5d                   	pop    ebp
c0012a81:	c3                   	ret    

c0012a82 <createPartitionsForDisk(PhysicalDisk*)>:
c0012a82:	55                   	push   ebp
c0012a83:	57                   	push   edi
c0012a84:	56                   	push   esi
c0012a85:	53                   	push   ebx
c0012a86:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012a8c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012a93:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012a99:	3d 00 02 00 00       	cmp    eax,0x200
c0012a9e:	74 27                	je     c0012ac7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012aa0:	83 ec 10             	sub    esp,0x10
c0012aa3:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012aa9:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012aaf:	99                   	cdq    
c0012ab0:	52                   	push   edx
c0012ab1:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012ab5:	50                   	push   eax
c0012ab6:	89 fd                	mov    ebp,edi
c0012ab8:	c1 e6 0a             	shl    esi,0xa
c0012abb:	55                   	push   ebp
c0012abc:	56                   	push   esi
c0012abd:	e8 5a ca 00 00       	call   c001f51c <__udivdi3>
c0012ac2:	e9 b1 00 00 00       	jmp    c0012b78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012ac7:	83 ec 0c             	sub    esp,0xc
c0012aca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012acc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012ad0:	56                   	push   esi
c0012ad1:	6a 01                	push   0x1
c0012ad3:	6a 00                	push   0x0
c0012ad5:	6a 00                	push   0x0
c0012ad7:	53                   	push   ebx
c0012ad8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012adb:	83 c4 20             	add    esp,0x20
c0012ade:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012ae6:	75 0a                	jne    c0012af2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012ae8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012af0:	74 2c                	je     c0012b1e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012af2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012af8:	83 ec 10             	sub    esp,0x10
c0012afb:	89 f7                	mov    edi,esi
c0012afd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b03:	c1 ff 1f             	sar    edi,0x1f
c0012b06:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b0c:	57                   	push   edi
c0012b0d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b11:	c1 e0 0a             	shl    eax,0xa
c0012b14:	56                   	push   esi
c0012b15:	52                   	push   edx
c0012b16:	50                   	push   eax
c0012b17:	e8 00 ca 00 00       	call   c001f51c <__udivdi3>
c0012b1c:	eb 5a                	jmp    c0012b78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012b1e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012b25:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012b2c:	83 e0 7f             	and    eax,0x7f
c0012b2f:	83 e1 7f             	and    ecx,0x7f
c0012b32:	01 c1                	add    ecx,eax
c0012b34:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012b3b:	83 e0 7f             	and    eax,0x7f
c0012b3e:	01 c1                	add    ecx,eax
c0012b40:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012b47:	83 e0 7f             	and    eax,0x7f
c0012b4a:	00 c1                	add    cl,al
c0012b4c:	74 41                	je     c0012b8f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012b4e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b54:	83 ec 10             	sub    esp,0x10
c0012b57:	89 f7                	mov    edi,esi
c0012b59:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b5f:	c1 ff 1f             	sar    edi,0x1f
c0012b62:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b68:	57                   	push   edi
c0012b69:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b6d:	c1 e0 0a             	shl    eax,0xa
c0012b70:	56                   	push   esi
c0012b71:	52                   	push   edx
c0012b72:	50                   	push   eax
c0012b73:	e8 a4 c9 00 00       	call   c001f51c <__udivdi3>
c0012b78:	83 c4 14             	add    esp,0x14
c0012b7b:	52                   	push   edx
c0012b7c:	50                   	push   eax
c0012b7d:	6a 00                	push   0x0
c0012b7f:	6a 00                	push   0x0
c0012b81:	53                   	push   ebx
c0012b82:	e8 53 fe ff ff       	call   c00129da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012b87:	83 c4 20             	add    esp,0x20
c0012b8a:	e9 79 01 00 00       	jmp    c0012d08 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012b8f:	89 f0                	mov    eax,esi
c0012b91:	31 f6                	xor    esi,esi
c0012b93:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012b9a:	75 02                	jne    c0012b9e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012b9c:	89 f1                	mov    ecx,esi
c0012b9e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012ba5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012bac:	c1 e2 08             	shl    edx,0x8
c0012baf:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012bb7:	c1 e7 10             	shl    edi,0x10
c0012bba:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012bc2:	09 fa                	or     edx,edi
c0012bc4:	83 c0 10             	add    eax,0x10
c0012bc7:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012bce:	09 fa                	or     edx,edi
c0012bd0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012bd7:	c1 e7 18             	shl    edi,0x18
c0012bda:	09 fa                	or     edx,edi
c0012bdc:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012be0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012be7:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012bee:	c1 e7 10             	shl    edi,0x10
c0012bf1:	c1 e2 08             	shl    edx,0x8
c0012bf4:	09 fa                	or     edx,edi
c0012bf6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012bfd:	09 fa                	or     edx,edi
c0012bff:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012c06:	c1 e7 18             	shl    edi,0x18
c0012c09:	09 fa                	or     edx,edi
c0012c0b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012c0f:	46                   	inc    esi
c0012c10:	83 fe 04             	cmp    esi,0x4
c0012c13:	0f 85 7a ff ff ff    	jne    c0012b93 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c1d:	83 f0 01             	xor    eax,0x1
c0012c20:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012c24:	75 57                	jne    c0012c7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c2a:	83 f0 01             	xor    eax,0x1
c0012c2d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012c31:	75 4a                	jne    c0012c7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c33:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012c39:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012c3d:	89 f7                	mov    edi,esi
c0012c3f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012c47:	c1 ff 1f             	sar    edi,0x1f
c0012c4a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c52:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012c58:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012c5e:	57                   	push   edi
c0012c5f:	56                   	push   esi
c0012c60:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012c64:	c1 e0 0a             	shl    eax,0xa
c0012c67:	52                   	push   edx
c0012c68:	50                   	push   eax
c0012c69:	e8 ae c8 00 00       	call   c001f51c <__udivdi3>
c0012c6e:	83 c4 10             	add    esp,0x10
c0012c71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c79:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012c7d:	84 c9                	test   cl,cl
c0012c7f:	74 53                	je     c0012cd4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012c81:	0f b6 c9             	movzx  ecx,cl
c0012c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c94:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012c98:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012c9c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012ca0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ca4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012cac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012cb0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012cb4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012cb8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012cbc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012cc0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012cc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012cc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ccc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012cd0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012cd4:	31 ed                	xor    ebp,ebp
c0012cd6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012cda:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012cde:	89 f8                	mov    eax,edi
c0012ce0:	09 f0                	or     eax,esi
c0012ce2:	74 1e                	je     c0012d02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012ce4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012ce8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012cec:	89 d1                	mov    ecx,edx
c0012cee:	09 c1                	or     ecx,eax
c0012cf0:	74 10                	je     c0012d02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cf2:	83 ec 0c             	sub    esp,0xc
c0012cf5:	57                   	push   edi
c0012cf6:	56                   	push   esi
c0012cf7:	52                   	push   edx
c0012cf8:	50                   	push   eax
c0012cf9:	53                   	push   ebx
c0012cfa:	e8 db fc ff ff       	call   c00129da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012cff:	83 c4 20             	add    esp,0x20
c0012d02:	45                   	inc    ebp
c0012d03:	83 fd 04             	cmp    ebp,0x4
c0012d06:	75 ce                	jne    c0012cd6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012d08:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012d0e:	5b                   	pop    ebx
c0012d0f:	5e                   	pop    esi
c0012d10:	5f                   	pop    edi
c0012d11:	5d                   	pop    ebp
c0012d12:	c3                   	ret    
c0012d13:	90                   	nop

c0012d14 <Timer::Timer(char const*)>:
c0012d14:	83 ec 0c             	sub    esp,0xc
c0012d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1b:	83 ec 08             	sub    esp,0x8
c0012d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d22:	50                   	push   eax
c0012d23:	e8 06 db ff ff       	call   c001082e <Device::Device(char const*)>
c0012d28:	83 c4 10             	add    esp,0x10
c0012d2b:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d34:	89 10                	mov    DWORD PTR [eax],edx
c0012d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d3a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012d44:	90                   	nop
c0012d45:	83 c4 0c             	add    esp,0xc
c0012d48:	c3                   	ret    
c0012d49:	90                   	nop

c0012d4a <Timer::~Timer()>:
c0012d4a:	83 ec 0c             	sub    esp,0xc
c0012d4d:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d56:	89 10                	mov    DWORD PTR [eax],edx
c0012d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	50                   	push   eax
c0012d60:	e8 7f d7 ff ff       	call   c00104e4 <Device::~Device()>
c0012d65:	83 c4 10             	add    esp,0x10
c0012d68:	90                   	nop
c0012d69:	83 c4 0c             	add    esp,0xc
c0012d6c:	c3                   	ret    
c0012d6d:	90                   	nop

c0012d6e <Timer::~Timer()>:
c0012d6e:	83 ec 0c             	sub    esp,0xc
c0012d71:	83 ec 0c             	sub    esp,0xc
c0012d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d78:	e8 cd ff ff ff       	call   c0012d4a <Timer::~Timer()>
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	83 ec 08             	sub    esp,0x8
c0012d83:	68 5c 01 00 00       	push   0x15c
c0012d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d8c:	e8 72 c3 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	83 c4 0c             	add    esp,0xc
c0012d97:	c3                   	ret    

c0012d98 <Timer::read()>:
c0012d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d9c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012da2:	c3                   	ret    

c0012da3 <timerHandler(unsigned long long)>:
c0012da3:	55                   	push   ebp
c0012da4:	57                   	push   edi
c0012da5:	56                   	push   esi
c0012da6:	53                   	push   ebx
c0012da7:	83 ec 0c             	sub    esp,0xc
c0012daa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012dae:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012db2:	01 35 10 4e 02 c0    	add    DWORD PTR ds:0xc0024e10,esi
c0012db8:	11 3d 14 4e 02 c0    	adc    DWORD PTR ds:0xc0024e14,edi
c0012dbe:	80 3d ad 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ad,0x0
c0012dc5:	0f 84 07 01 00 00    	je     c0012ed2 <timerHandler(unsigned long long)+0x12f>
c0012dcb:	e8 b2 5c 00 00       	call   c0018a82 <lockStuff()>
c0012dd0:	83 ec 0c             	sub    esp,0xc
c0012dd3:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012dd8:	e8 13 ce 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ddd:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012de4:	89 c3                	mov    ebx,eax
c0012de6:	e8 0d ce 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012deb:	83 c4 10             	add    esp,0x10
c0012dee:	84 c0                	test   al,al
c0012df0:	74 60                	je     c0012e52 <timerHandler(unsigned long long)+0xaf>
c0012df2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012df8:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012dfb:	85 c0                	test   eax,eax
c0012dfd:	0f 85 91 00 00 00    	jne    c0012e94 <timerHandler(unsigned long long)+0xf1>
c0012e03:	e9 be 00 00 00       	jmp    c0012ec6 <timerHandler(unsigned long long)+0x123>
c0012e08:	83 ec 0c             	sub    esp,0xc
c0012e0b:	55                   	push   ebp
c0012e0c:	e8 6e 62 00 00       	call   c001907f <unblockTask(ThreadControlBlock*)>
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	39 eb                	cmp    ebx,ebp
c0012e16:	75 12                	jne    c0012e2a <timerHandler(unsigned long long)+0x87>
c0012e18:	83 ec 0c             	sub    esp,0xc
c0012e1b:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e20:	e8 cb cd 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e25:	89 c3                	mov    ebx,eax
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	83 ec 0c             	sub    esp,0xc
c0012e2d:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e32:	e8 c1 cd 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e37:	83 c4 10             	add    esp,0x10
c0012e3a:	84 c0                	test   al,al
c0012e3c:	75 b4                	jne    c0012df2 <timerHandler(unsigned long long)+0x4f>
c0012e3e:	83 ec 0c             	sub    esp,0xc
c0012e41:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e46:	e8 a5 cd 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e4b:	83 c4 10             	add    esp,0x10
c0012e4e:	39 d8                	cmp    eax,ebx
c0012e50:	74 a0                	je     c0012df2 <timerHandler(unsigned long long)+0x4f>
c0012e52:	83 ec 0c             	sub    esp,0xc
c0012e55:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e5a:	e8 91 cd 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e5f:	89 c5                	mov    ebp,eax
c0012e61:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012e68:	e8 a7 cd 00 00       	call   c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012e6d:	83 c4 10             	add    esp,0x10
c0012e70:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012e73:	a1 14 4e 02 c0       	mov    eax,ds:0xc0024e14
c0012e78:	39 15 10 4e 02 c0    	cmp    DWORD PTR ds:0xc0024e10,edx
c0012e7e:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012e81:	19 c8                	sbb    eax,ecx
c0012e83:	73 83                	jae    c0012e08 <timerHandler(unsigned long long)+0x65>
c0012e85:	50                   	push   eax
c0012e86:	50                   	push   eax
c0012e87:	55                   	push   ebp
c0012e88:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e8d:	e8 30 ce 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e92:	eb 93                	jmp    c0012e27 <timerHandler(unsigned long long)+0x84>
c0012e94:	80 3d ac 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ac,0x0
c0012e9b:	74 29                	je     c0012ec6 <timerHandler(unsigned long long)+0x123>
c0012e9d:	39 c6                	cmp    esi,eax
c0012e9f:	bb 00 00 00 00       	mov    ebx,0x0
c0012ea4:	19 df                	sbb    edi,ebx
c0012ea6:	72 19                	jb     c0012ec1 <timerHandler(unsigned long long)+0x11e>
c0012ea8:	e8 ae 5b 00 00       	call   c0018a5b <lockScheduler()>
c0012ead:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012eb2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012eb5:	e8 ea 5e 00 00       	call   c0018da4 <schedule()>
c0012eba:	e8 9e 5b 00 00       	call   c0018a5d <unlockScheduler()>
c0012ebf:	eb 05                	jmp    c0012ec6 <timerHandler(unsigned long long)+0x123>
c0012ec1:	29 f0                	sub    eax,esi
c0012ec3:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012ec6:	83 c4 0c             	add    esp,0xc
c0012ec9:	5b                   	pop    ebx
c0012eca:	5e                   	pop    esi
c0012ecb:	5f                   	pop    edi
c0012ecc:	5d                   	pop    ebp
c0012ecd:	e9 57 5f 00 00       	jmp    c0018e29 <unlockStuff()>
c0012ed2:	83 c4 0c             	add    esp,0xc
c0012ed5:	5b                   	pop    ebx
c0012ed6:	5e                   	pop    esi
c0012ed7:	5f                   	pop    edi
c0012ed8:	5d                   	pop    ebp
c0012ed9:	c3                   	ret    

c0012eda <setupTimer(int)>:
c0012eda:	57                   	push   edi
c0012edb:	56                   	push   esi
c0012edc:	53                   	push   ebx
c0012edd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ee1:	e8 fd 19 00 00       	call   c00148e3 <getCPUNumber()>
c0012ee6:	85 c0                	test   eax,eax
c0012ee8:	74 32                	je     c0012f1c <setupTimer(int)+0x42>
c0012eea:	83 ec 0c             	sub    esp,0xc
c0012eed:	68 60 01 00 00       	push   0x160
c0012ef2:	e8 fd c1 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0012ef7:	89 04 24             	mov    DWORD PTR [esp],eax
c0012efa:	89 c3                	mov    ebx,eax
c0012efc:	e8 a7 c0 00 00       	call   c001efa8 <APICTimer::APICTimer()>
c0012f01:	6a 00                	push   0x0
c0012f03:	6a 00                	push   0x0
c0012f05:	56                   	push   esi
c0012f06:	53                   	push   ebx
c0012f07:	e8 96 bf 00 00       	call   c001eea2 <APICTimer::open(int, int, void*)>
c0012f0c:	83 c4 20             	add    esp,0x20
c0012f0f:	e8 d2 19 00 00       	call   c00148e6 <thisCPU()>
c0012f14:	56                   	push   esi
c0012f15:	56                   	push   esi
c0012f16:	53                   	push   ebx
c0012f17:	e9 96 00 00 00       	jmp    c0012fb2 <setupTimer(int)+0xd8>
c0012f1c:	e8 c5 19 00 00       	call   c00148e6 <thisCPU()>
c0012f21:	83 ec 0c             	sub    esp,0xc
c0012f24:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f2a:	e8 f1 d9 ff ff       	call   c0010920 <Device::getName()>
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012f35:	0f 85 87 00 00 00    	jne    c0012fc2 <setupTimer(int)+0xe8>
c0012f3b:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0012f40:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012f47:	74 79                	je     c0012fc2 <setupTimer(int)+0xe8>
c0012f49:	83 ec 0c             	sub    esp,0xc
c0012f4c:	68 5c 01 00 00       	push   0x15c
c0012f51:	e8 9e c1 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0012f56:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f59:	89 c3                	mov    ebx,eax
c0012f5b:	e8 a4 c1 00 00       	call   c001f104 <PIT::PIT()>
c0012f60:	59                   	pop    ecx
c0012f61:	5f                   	pop    edi
c0012f62:	53                   	push   ebx
c0012f63:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012f69:	e8 d0 d6 ff ff       	call   c001063e <Device::addChild(Device*)>
c0012f6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f70:	6a 00                	push   0x0
c0012f72:	6a 00                	push   0x0
c0012f74:	56                   	push   esi
c0012f75:	53                   	push   ebx
c0012f76:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f79:	83 c4 14             	add    esp,0x14
c0012f7c:	68 60 01 00 00       	push   0x160
c0012f81:	e8 6e c1 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0012f86:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f89:	89 c7                	mov    edi,eax
c0012f8b:	e8 18 c0 00 00       	call   c001efa8 <APICTimer::APICTimer()>
c0012f90:	6a 00                	push   0x0
c0012f92:	6a 00                	push   0x0
c0012f94:	56                   	push   esi
c0012f95:	57                   	push   edi
c0012f96:	e8 07 bf 00 00       	call   c001eea2 <APICTimer::open(int, int, void*)>
c0012f9b:	83 c4 20             	add    esp,0x20
c0012f9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fa0:	6a 00                	push   0x0
c0012fa2:	6a 00                	push   0x0
c0012fa4:	6a 00                	push   0x0
c0012fa6:	53                   	push   ebx
c0012fa7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012faa:	e8 37 19 00 00       	call   c00148e6 <thisCPU()>
c0012faf:	5a                   	pop    edx
c0012fb0:	59                   	pop    ecx
c0012fb1:	57                   	push   edi
c0012fb2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012fb8:	e8 81 d6 ff ff       	call   c001063e <Device::addChild(Device*)>
c0012fbd:	83 c4 10             	add    esp,0x10
c0012fc0:	eb 33                	jmp    c0012ff5 <setupTimer(int)+0x11b>
c0012fc2:	83 ec 0c             	sub    esp,0xc
c0012fc5:	68 5c 01 00 00       	push   0x15c
c0012fca:	e8 25 c1 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0012fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0012fd2:	89 c3                	mov    ebx,eax
c0012fd4:	e8 2b c1 00 00       	call   c001f104 <PIT::PIT()>
c0012fd9:	58                   	pop    eax
c0012fda:	5a                   	pop    edx
c0012fdb:	53                   	push   ebx
c0012fdc:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012fe2:	e8 57 d6 ff ff       	call   c001063e <Device::addChild(Device*)>
c0012fe7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fe9:	6a 00                	push   0x0
c0012feb:	6a 00                	push   0x0
c0012fed:	56                   	push   esi
c0012fee:	53                   	push   ebx
c0012fef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ff2:	83 c4 20             	add    esp,0x20
c0012ff5:	89 d8                	mov    eax,ebx
c0012ff7:	5b                   	pop    ebx
c0012ff8:	5e                   	pop    esi
c0012ff9:	5f                   	pop    edi
c0012ffa:	c3                   	ret    
c0012ffb:	90                   	nop

c0012ffc <VCache::VCache(PhysicalDisk*)>:
c0012ffc:	53                   	push   ebx
c0012ffd:	83 ec 08             	sub    esp,0x8
c0013000:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0013005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013009:	89 10                	mov    DWORD PTR [eax],edx
c001300b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0013016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0013021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013025:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001302c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013037:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001303e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013049:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0013050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013054:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0013058:	83 ec 0c             	sub    esp,0xc
c001305b:	6a 10                	push   0x10
c001305d:	e8 92 c0 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0013062:	83 c4 10             	add    esp,0x10
c0013065:	89 c3                	mov    ebx,eax
c0013067:	83 ec 0c             	sub    esp,0xc
c001306a:	53                   	push   ebx
c001306b:	e8 0e 5b 00 00       	call   c0018b7e <Mutex::Mutex()>
c0013070:	83 c4 10             	add    esp,0x10
c0013073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013077:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001307a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001307e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013082:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0013085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013089:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0013090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013094:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001309a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00130a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130a5:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00130ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00130b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130b5:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00130b8:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00130bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130bf:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00130c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130cd:	c1 e0 06             	shl    eax,0x6
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	50                   	push   eax
c00130d4:	e8 1e 8f ff ff       	call   c000bff7 <malloc>
c00130d9:	83 c4 10             	add    esp,0x10
c00130dc:	89 c2                	mov    edx,eax
c00130de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00130e5:	90                   	nop
c00130e6:	83 c4 08             	add    esp,0x8
c00130e9:	5b                   	pop    ebx
c00130ea:	c3                   	ret    
c00130eb:	90                   	nop

c00130ec <VCache::writeWriteBuffer()>:
c00130ec:	53                   	push   ebx
c00130ed:	83 ec 14             	sub    esp,0x14
c00130f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00130f9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013102:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013105:	50                   	push   eax
c0013106:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013109:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0013110:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0013117:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001311b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013122:	83 c4 28             	add    esp,0x28
c0013125:	5b                   	pop    ebx
c0013126:	c3                   	ret    
c0013127:	90                   	nop

c0013128 <VCache::~VCache()>:
c0013128:	83 ec 0c             	sub    esp,0xc
c001312b:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0013130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013134:	89 10                	mov    DWORD PTR [eax],edx
c0013136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001313a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001313d:	84 c0                	test   al,al
c001313f:	74 0f                	je     c0013150 <VCache::~VCache()+0x28>
c0013141:	83 ec 0c             	sub    esp,0xc
c0013144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013148:	e8 9f ff ff ff       	call   c00130ec <VCache::writeWriteBuffer()>
c001314d:	83 c4 10             	add    esp,0x10
c0013150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013154:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013157:	83 ec 0c             	sub    esp,0xc
c001315a:	50                   	push   eax
c001315b:	e8 a7 8e ff ff       	call   c000c007 <free>
c0013160:	83 c4 10             	add    esp,0x10
c0013163:	90                   	nop
c0013164:	83 c4 0c             	add    esp,0xc
c0013167:	c3                   	ret    

c0013168 <VCache::~VCache()>:
c0013168:	83 ec 0c             	sub    esp,0xc
c001316b:	83 ec 0c             	sub    esp,0xc
c001316e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013172:	e8 b1 ff ff ff       	call   c0013128 <VCache::~VCache()>
c0013177:	83 c4 10             	add    esp,0x10
c001317a:	83 ec 08             	sub    esp,0x8
c001317d:	6a 30                	push   0x30
c001317f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013183:	e8 7b bf ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	83 c4 0c             	add    esp,0xc
c001318e:	c3                   	ret    
c001318f:	90                   	nop

c0013190 <VCache::write(unsigned long long, int, void*)>:
c0013190:	55                   	push   ebp
c0013191:	57                   	push   edi
c0013192:	56                   	push   esi
c0013193:	53                   	push   ebx
c0013194:	83 ec 28             	sub    esp,0x28
c0013197:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001319b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001319f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00131a3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00131a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131aa:	e8 3d 5e 00 00       	call   c0018fec <Semaphore::acquire()>
c00131af:	83 c4 10             	add    esp,0x10
c00131b2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131b6:	74 66                	je     c001321e <VCache::write(unsigned long long, int, void*)+0x8e>
c00131b8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131bb:	99                   	cdq    
c00131bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131c0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00131c3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00131c6:	89 c1                	mov    ecx,eax
c00131c8:	31 f1                	xor    ecx,esi
c00131ca:	89 d0                	mov    eax,edx
c00131cc:	31 f8                	xor    eax,edi
c00131ce:	89 ca                	mov    edx,ecx
c00131d0:	09 c2                	or     edx,eax
c00131d2:	75 3e                	jne    c0013212 <VCache::write(unsigned long long, int, void*)+0x82>
c00131d4:	83 fd 01             	cmp    ebp,0x1
c00131d7:	75 39                	jne    c0013212 <VCache::write(unsigned long long, int, void*)+0x82>
c00131d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00131e2:	51                   	push   ecx
c00131e3:	50                   	push   eax
c00131e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00131e8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131ec:	0f af c8             	imul   ecx,eax
c00131ef:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00131f2:	51                   	push   ecx
c00131f3:	e8 aa d4 fe ff       	call   c00006a2 <memcpy>
c00131f8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131fb:	83 c4 10             	add    esp,0x10
c00131fe:	40                   	inc    eax
c00131ff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0013202:	83 f8 40             	cmp    eax,0x40
c0013205:	75 57                	jne    c001325e <VCache::write(unsigned long long, int, void*)+0xce>
c0013207:	83 ec 0c             	sub    esp,0xc
c001320a:	53                   	push   ebx
c001320b:	e8 dc fe ff ff       	call   c00130ec <VCache::writeWriteBuffer()>
c0013210:	eb 34                	jmp    c0013246 <VCache::write(unsigned long long, int, void*)+0xb6>
c0013212:	83 ec 0c             	sub    esp,0xc
c0013215:	53                   	push   ebx
c0013216:	e8 d1 fe ff ff       	call   c00130ec <VCache::writeWriteBuffer()>
c001321b:	83 c4 10             	add    esp,0x10
c001321e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013221:	83 fd 3f             	cmp    ebp,0x3f
c0013224:	7f 25                	jg     c001324b <VCache::write(unsigned long long, int, void*)+0xbb>
c0013226:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0013229:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001322c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001322f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013233:	52                   	push   edx
c0013234:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001323a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001323e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013241:	e8 5c d4 fe ff       	call   c00006a2 <memcpy>
c0013246:	83 c4 10             	add    esp,0x10
c0013249:	eb 13                	jmp    c001325e <VCache::write(unsigned long long, int, void*)+0xce>
c001324b:	83 ec 0c             	sub    esp,0xc
c001324e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013250:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013254:	55                   	push   ebp
c0013255:	57                   	push   edi
c0013256:	56                   	push   esi
c0013257:	50                   	push   eax
c0013258:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001325b:	83 c4 20             	add    esp,0x20
c001325e:	83 ec 0c             	sub    esp,0xc
c0013261:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013264:	e8 0f 63 00 00       	call   c0019578 <Semaphore::release()>
c0013269:	83 c4 2c             	add    esp,0x2c
c001326c:	5b                   	pop    ebx
c001326d:	31 c0                	xor    eax,eax
c001326f:	5e                   	pop    esi
c0013270:	5f                   	pop    edi
c0013271:	5d                   	pop    ebp
c0013272:	c3                   	ret    
c0013273:	90                   	nop

c0013274 <VCache::read(unsigned long long, int, void*)>:
c0013274:	57                   	push   edi
c0013275:	56                   	push   esi
c0013276:	53                   	push   ebx
c0013277:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001327b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001327f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013283:	83 ec 0c             	sub    esp,0xc
c0013286:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013289:	e8 5e 5d 00 00       	call   c0018fec <Semaphore::acquire()>
c001328e:	83 c4 10             	add    esp,0x10
c0013291:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0013295:	74 0c                	je     c00132a3 <VCache::read(unsigned long long, int, void*)+0x2f>
c0013297:	83 ec 0c             	sub    esp,0xc
c001329a:	53                   	push   ebx
c001329b:	e8 4c fe ff ff       	call   c00130ec <VCache::writeWriteBuffer()>
c00132a0:	83 c4 10             	add    esp,0x10
c00132a3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00132a6:	83 ec 0c             	sub    esp,0xc
c00132a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00132ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132b3:	57                   	push   edi
c00132b4:	56                   	push   esi
c00132b5:	50                   	push   eax
c00132b6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132b9:	83 c4 14             	add    esp,0x14
c00132bc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00132bf:	e8 b4 62 00 00       	call   c0019578 <Semaphore::release()>
c00132c4:	83 c4 10             	add    esp,0x10
c00132c7:	5b                   	pop    ebx
c00132c8:	31 c0                	xor    eax,eax
c00132ca:	5e                   	pop    esi
c00132cb:	5f                   	pop    edi
c00132cc:	c3                   	ret    
c00132cd:	90                   	nop

c00132ce <Video::putrect(int, int, int, int, unsigned int)>:
c00132ce:	55                   	push   ebp
c00132cf:	57                   	push   edi
c00132d0:	56                   	push   esi
c00132d1:	53                   	push   ebx
c00132d2:	83 ec 1c             	sub    esp,0x1c
c00132d5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00132d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00132e1:	01 e8                	add    eax,ebp
c00132e3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00132e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132ef:	01 df                	add    edi,ebx
c00132f1:	39 fb                	cmp    ebx,edi
c00132f3:	7d 1b                	jge    c0013310 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00132f5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00132f9:	7d 12                	jge    c001330d <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00132fb:	8b 16                	mov    edx,DWORD PTR [esi]
c00132fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013301:	53                   	push   ebx
c0013302:	55                   	push   ebp
c0013303:	45                   	inc    ebp
c0013304:	56                   	push   esi
c0013305:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013308:	83 c4 10             	add    esp,0x10
c001330b:	eb e8                	jmp    c00132f5 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c001330d:	43                   	inc    ebx
c001330e:	eb e1                	jmp    c00132f1 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0013310:	83 c4 1c             	add    esp,0x1c
c0013313:	5b                   	pop    ebx
c0013314:	5e                   	pop    esi
c0013315:	5f                   	pop    edi
c0013316:	5d                   	pop    ebp
c0013317:	c3                   	ret    

c0013318 <Video::blit(unsigned int*, int, int, int, int)>:
c0013318:	55                   	push   ebp
c0013319:	57                   	push   edi
c001331a:	56                   	push   esi
c001331b:	53                   	push   ebx
c001331c:	83 ec 1c             	sub    esp,0x1c
c001331f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013323:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013327:	85 c0                	test   eax,eax
c0013329:	79 02                	jns    c001332d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001332b:	31 c0                	xor    eax,eax
c001332d:	c1 e0 02             	shl    eax,0x2
c0013330:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013334:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013338:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001333c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013340:	39 d8                	cmp    eax,ebx
c0013342:	7e 49                	jle    c001338d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013344:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001334a:	7c 41                	jl     c001338d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001334c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013350:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0013354:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013358:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001335c:	39 f9                	cmp    ecx,edi
c001335e:	7e 22                	jle    c0013382 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013360:	83 c5 04             	add    ebp,0x4
c0013363:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013369:	7c 14                	jl     c001337f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001336b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001336d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0013370:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013374:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013378:	56                   	push   esi
c0013379:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001337c:	83 c4 10             	add    esp,0x10
c001337f:	47                   	inc    edi
c0013380:	eb d2                	jmp    c0013354 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0013382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013386:	43                   	inc    ebx
c0013387:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001338b:	eb ab                	jmp    c0013338 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001338d:	83 c4 1c             	add    esp,0x1c
c0013390:	5b                   	pop    ebx
c0013391:	5e                   	pop    esi
c0013392:	5f                   	pop    edi
c0013393:	5d                   	pop    ebp
c0013394:	c3                   	ret    
c0013395:	90                   	nop

c0013396 <Video::clearScreen(unsigned int)>:
c0013396:	57                   	push   edi
c0013397:	56                   	push   esi
c0013398:	53                   	push   ebx
c0013399:	31 db                	xor    ebx,ebx
c001339b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001339f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00133a5:	7e 1f                	jle    c00133c6 <Video::clearScreen(unsigned int)+0x30>
c00133a7:	31 ff                	xor    edi,edi
c00133a9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00133af:	7e 12                	jle    c00133c3 <Video::clearScreen(unsigned int)+0x2d>
c00133b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00133b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133b7:	53                   	push   ebx
c00133b8:	57                   	push   edi
c00133b9:	47                   	inc    edi
c00133ba:	56                   	push   esi
c00133bb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133be:	83 c4 10             	add    esp,0x10
c00133c1:	eb e6                	jmp    c00133a9 <Video::clearScreen(unsigned int)+0x13>
c00133c3:	43                   	inc    ebx
c00133c4:	eb d9                	jmp    c001339f <Video::clearScreen(unsigned int)+0x9>
c00133c6:	5b                   	pop    ebx
c00133c7:	5e                   	pop    esi
c00133c8:	5f                   	pop    edi
c00133c9:	c3                   	ret    

c00133ca <Video::putpixel(int, int, unsigned int)>:
c00133ca:	c7 44 24 04 48 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022248
c00133d2:	e9 52 be ff ff       	jmp    c000f229 <Dbg::kprintf(char const*, ...)>
c00133d7:	90                   	nop

c00133d8 <Video::Video(char const*)>:
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133df:	83 ec 08             	sub    esp,0x8
c00133e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e6:	50                   	push   eax
c00133e7:	e8 42 d4 ff ff       	call   c001082e <Device::Device(char const*)>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	ba 60 22 02 c0       	mov    edx,0xc0022260
c00133f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f8:	89 10                	mov    DWORD PTR [eax],edx
c00133fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fe:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0013408:	90                   	nop
c0013409:	83 c4 0c             	add    esp,0xc
c001340c:	c3                   	ret    
c001340d:	90                   	nop

c001340e <Video::~Video()>:
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	ba 60 22 02 c0       	mov    edx,0xc0022260
c0013416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341a:	89 10                	mov    DWORD PTR [eax],edx
c001341c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013420:	83 ec 0c             	sub    esp,0xc
c0013423:	50                   	push   eax
c0013424:	e8 bb d0 ff ff       	call   c00104e4 <Device::~Device()>
c0013429:	83 c4 10             	add    esp,0x10
c001342c:	90                   	nop
c001342d:	83 c4 0c             	add    esp,0xc
c0013430:	c3                   	ret    
c0013431:	90                   	nop

c0013432 <Video::~Video()>:
c0013432:	83 ec 0c             	sub    esp,0xc
c0013435:	83 ec 0c             	sub    esp,0xc
c0013438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001343c:	e8 cd ff ff ff       	call   c001340e <Video::~Video()>
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	83 ec 08             	sub    esp,0x8
c0013447:	68 64 01 00 00       	push   0x164
c001344c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013450:	e8 ae bc ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0013455:	83 c4 10             	add    esp,0x10
c0013458:	83 c4 0c             	add    esp,0xc
c001345b:	c3                   	ret    

c001345c <Video::isMonochrome()>:
c001345c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013460:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0013466:	c3                   	ret    
c0013467:	90                   	nop

c0013468 <Video::getWidth()>:
c0013468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001346c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013472:	c3                   	ret    
c0013473:	90                   	nop

c0013474 <Video::getHeight()>:
c0013474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013478:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001347e:	c3                   	ret    
c001347f:	90                   	nop

c0013480 <Video::drawCursor(int, int, unsigned char*, int)>:
c0013480:	55                   	push   ebp
c0013481:	57                   	push   edi
c0013482:	56                   	push   esi
c0013483:	53                   	push   ebx
c0013484:	83 ec 2c             	sub    esp,0x2c
c0013487:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001348b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001348f:	83 f8 01             	cmp    eax,0x1
c0013492:	19 c9                	sbb    ecx,ecx
c0013494:	31 db                	xor    ebx,ebx
c0013496:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001349a:	89 cd                	mov    ebp,ecx
c001349c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00134a4:	f7 d5                	not    ebp
c00134a6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00134ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00134b0:	01 d8                	add    eax,ebx
c00134b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134b6:	56                   	push   esi
c00134b7:	e8 b8 ff ff ff       	call   c0013474 <Video::getHeight()>
c00134bc:	59                   	pop    ecx
c00134bd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00134c1:	7e 70                	jle    c0013533 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00134c3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134c7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00134cb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00134ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134d6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00134dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134e1:	89 f8                	mov    eax,edi
c00134e3:	83 c0 20             	add    eax,0x20
c00134e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134ea:	56                   	push   esi
c00134eb:	e8 78 ff ff ff       	call   c0013468 <Video::getWidth()>
c00134f0:	5a                   	pop    edx
c00134f1:	39 c7                	cmp    edi,eax
c00134f3:	7d 34                	jge    c0013529 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00134f5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00134fa:	74 05                	je     c0013501 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00134fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00134fe:	55                   	push   ebp
c00134ff:	eb 0d                	jmp    c001350e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0013501:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0013506:	74 12                	je     c001351a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0013508:	8b 06                	mov    eax,DWORD PTR [esi]
c001350a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001350e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013512:	57                   	push   edi
c0013513:	56                   	push   esi
c0013514:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	47                   	inc    edi
c001351b:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001351f:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013523:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013527:	75 c1                	jne    c00134ea <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0013529:	43                   	inc    ebx
c001352a:	83 fb 20             	cmp    ebx,0x20
c001352d:	0f 85 79 ff ff ff    	jne    c00134ac <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013533:	83 c4 2c             	add    esp,0x2c
c0013536:	5b                   	pop    ebx
c0013537:	5e                   	pop    esi
c0013538:	5f                   	pop    edi
c0013539:	5d                   	pop    ebp
c001353a:	c3                   	ret    
c001353b:	90                   	nop

c001353c <ACPI::close(int, int, void*)>:
c001353c:	83 ec 1c             	sub    esp,0x1c
c001353f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0013547:	74 0a                	je     c0013553 <ACPI::close(int, int, void*)+0x17>
c0013549:	b8 00 00 00 00       	mov    eax,0x0
c001354e:	e9 9e 00 00 00       	jmp    c00135f1 <ACPI::close(int, int, void*)+0xb5>
c0013553:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0013558:	75 37                	jne    c0013591 <ACPI::close(int, int, void*)+0x55>
c001355a:	83 ec 0c             	sub    esp,0xc
c001355d:	68 98 22 02 c0       	push   0xc0022298
c0013562:	e8 c2 bc ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0013567:	83 c4 10             	add    esp,0x10
c001356a:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c001356f:	85 c0                	test   eax,eax
c0013571:	74 07                	je     c001357a <ACPI::close(int, int, void*)+0x3e>
c0013573:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013578:	ff d0                	call   eax
c001357a:	83 ec 0c             	sub    esp,0xc
c001357d:	68 6c 23 02 c0       	push   0xc002236c
c0013582:	e8 cb 24 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001358f:	eb 60                	jmp    c00135f1 <ACPI::close(int, int, void*)+0xb5>
c0013591:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0013596:	75 54                	jne    c00135ec <ACPI::close(int, int, void*)+0xb0>
c0013598:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c001359d:	85 c0                	test   eax,eax
c001359f:	74 07                	je     c00135a8 <ACPI::close(int, int, void*)+0x6c>
c00135a1:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c00135a6:	ff d0                	call   eax
c00135a8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00135ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135b1:	25 ff 00 00 00       	and    eax,0xff
c00135b6:	83 e0 02             	and    eax,0x2
c00135b9:	74 1c                	je     c00135d7 <ACPI::close(int, int, void*)+0x9b>
c00135bb:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00135c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135c6:	89 c2                	mov    edx,eax
c00135c8:	ec                   	in     al,dx
c00135c9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00135cd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00135d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135d5:	eb d6                	jmp    c00135ad <ACPI::close(int, int, void*)+0x71>
c00135d7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00135de:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00135e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135eb:	ee                   	out    dx,al
c00135ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00135f1:	83 c4 1c             	add    esp,0x1c
c00135f4:	c3                   	ret    

c00135f5 <findRSDP()>:
c00135f5:	83 ec 1c             	sub    esp,0x1c
c00135f8:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00135fd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013603:	83 e0 04             	and    eax,0x4
c0013606:	84 c0                	test   al,al
c0013608:	75 07                	jne    c0013611 <findRSDP()+0x1c>
c001360a:	b8 00 00 00 00       	mov    eax,0x0
c001360f:	eb 6a                	jmp    c001367b <findRSDP()+0x86>
c0013611:	a1 f0 47 02 c0       	mov    eax,ds:0xc00247f0
c0013616:	3d ff 07 00 00       	cmp    eax,0x7ff
c001361b:	7f 1b                	jg     c0013638 <findRSDP()+0x43>
c001361d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013622:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013628:	83 e2 fb             	and    edx,0xfffffffb
c001362b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013631:	b8 00 00 00 00       	mov    eax,0x0
c0013636:	eb 43                	jmp    c001367b <findRSDP()+0x86>
c0013638:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013640:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0013648:	77 2c                	ja     c0013676 <findRSDP()+0x81>
c001364a:	83 ec 04             	sub    esp,0x4
c001364d:	6a 08                	push   0x8
c001364f:	68 a5 22 02 c0       	push   0xc00222a5
c0013654:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013658:	e8 e2 cf fe ff       	call   c000063f <memcmp>
c001365d:	83 c4 10             	add    esp,0x10
c0013660:	85 c0                	test   eax,eax
c0013662:	0f 94 c0             	sete   al
c0013665:	84 c0                	test   al,al
c0013667:	74 06                	je     c001366f <findRSDP()+0x7a>
c0013669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001366d:	eb 0c                	jmp    c001367b <findRSDP()+0x86>
c001366f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013674:	eb ca                	jmp    c0013640 <findRSDP()+0x4b>
c0013676:	b8 00 00 00 00       	mov    eax,0x0
c001367b:	83 c4 1c             	add    esp,0x1c
c001367e:	c3                   	ret    

c001367f <loadACPITables(unsigned char*)>:
c001367f:	56                   	push   esi
c0013680:	53                   	push   ebx
c0013681:	83 ec 44             	sub    esp,0x44
c0013684:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013689:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001368f:	83 e0 04             	and    eax,0x4
c0013692:	84 c0                	test   al,al
c0013694:	0f 84 05 02 00 00    	je     c001389f <loadACPITables(unsigned char*)+0x220>
c001369a:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c001369f:	84 c0                	test   al,al
c00136a1:	74 75                	je     c0013718 <loadACPITables(unsigned char*)+0x99>
c00136a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136a7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00136ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136b2:	83 e8 24             	sub    eax,0x24
c00136b5:	c1 e8 03             	shr    eax,0x3
c00136b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00136bc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00136c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136c8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00136cc:	0f 8d b2 00 00 00    	jge    c0013784 <loadACPITables(unsigned char*)+0x105>
c00136d2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136d6:	83 c0 24             	add    eax,0x24
c00136d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00136dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00136e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136e9:	c1 e0 03             	shl    eax,0x3
c00136ec:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00136f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00136f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00136f9:	89 c1                	mov    ecx,eax
c00136fb:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c0013700:	8d 50 01             	lea    edx,[eax+0x1]
c0013703:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c0013709:	89 ca                	mov    edx,ecx
c001370b:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013712:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013716:	eb ac                	jmp    c00136c4 <loadACPITables(unsigned char*)+0x45>
c0013718:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001371c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013724:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013727:	83 e8 24             	sub    eax,0x24
c001372a:	c1 e8 02             	shr    eax,0x2
c001372d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013731:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0013739:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001373d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013741:	7d 41                	jge    c0013784 <loadACPITables(unsigned char*)+0x105>
c0013743:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013747:	83 c0 24             	add    eax,0x24
c001374a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001374e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013752:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013756:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001375a:	c1 e0 02             	shl    eax,0x2
c001375d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013765:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013767:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c001376c:	8d 50 01             	lea    edx,[eax+0x1]
c001376f:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c0013775:	89 ca                	mov    edx,ecx
c0013777:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c001377e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0013782:	eb b5                	jmp    c0013739 <loadACPITables(unsigned char*)+0xba>
c0013784:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001378c:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c0013791:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0013795:	0f 8d 05 01 00 00    	jge    c00138a0 <loadACPITables(unsigned char*)+0x221>
c001379b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001379f:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c00137a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b6:	25 ff 0f 00 00       	and    eax,0xfff
c00137bb:	89 c6                	mov    esi,eax
c00137bd:	e8 d9 ab ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c00137c2:	89 c3                	mov    ebx,eax
c00137c4:	83 ec 0c             	sub    esp,0xc
c00137c7:	6a 01                	push   0x1
c00137c9:	e8 40 aa ff ff       	call   c000e20e <Virt::allocateKernelVirtualPages(int)>
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137d5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137db:	83 ec 0c             	sub    esp,0xc
c00137de:	6a 01                	push   0x1
c00137e0:	6a 01                	push   0x1
c00137e2:	50                   	push   eax
c00137e3:	52                   	push   edx
c00137e4:	53                   	push   ebx
c00137e5:	e8 e2 b3 ff ff       	call   c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137ea:	83 c4 20             	add    esp,0x20
c00137ed:	09 f0                	or     eax,esi
c00137ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137f7:	c1 e0 03             	shl    eax,0x3
c00137fa:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00137ff:	83 ec 04             	sub    esp,0x4
c0013802:	6a 04                	push   0x4
c0013804:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013808:	50                   	push   eax
c0013809:	e8 94 ce fe ff       	call   c00006a2 <memcpy>
c001380e:	83 c4 10             	add    esp,0x10
c0013811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013815:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013818:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001381c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013820:	05 00 10 00 00       	add    eax,0x1000
c0013825:	c1 e8 0c             	shr    eax,0xc
c0013828:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001382c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013830:	89 04 24             	mov    DWORD PTR [esp],eax
c0013833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013837:	25 ff 0f 00 00       	and    eax,0xfff
c001383c:	89 c6                	mov    esi,eax
c001383e:	e8 58 ab ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c0013843:	89 c3                	mov    ebx,eax
c0013845:	83 ec 0c             	sub    esp,0xc
c0013848:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001384c:	e8 bd a9 ff ff       	call   c000e20e <Virt::allocateKernelVirtualPages(int)>
c0013851:	83 c4 10             	add    esp,0x10
c0013854:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013858:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001385e:	83 ec 0c             	sub    esp,0xc
c0013861:	6a 01                	push   0x1
c0013863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013867:	50                   	push   eax
c0013868:	52                   	push   edx
c0013869:	53                   	push   ebx
c001386a:	e8 5d b3 ff ff       	call   c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001386f:	83 c4 20             	add    esp,0x20
c0013872:	09 f0                	or     eax,esi
c0013874:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013878:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001387b:	83 ec 0c             	sub    esp,0xc
c001387e:	50                   	push   eax
c001387f:	e8 d7 ac ff ff       	call   c000e55b <Virt::freeKernelVirtualPages(unsigned long)>
c0013884:	83 c4 10             	add    esp,0x10
c0013887:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001388b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001388f:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013896:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001389a:	e9 ed fe ff ff       	jmp    c001378c <loadACPITables(unsigned char*)+0x10d>
c001389f:	90                   	nop
c00138a0:	83 c4 44             	add    esp,0x44
c00138a3:	5b                   	pop    ebx
c00138a4:	5e                   	pop    esi
c00138a5:	c3                   	ret    

c00138a6 <findRSDT(unsigned char*)>:
c00138a6:	56                   	push   esi
c00138a7:	53                   	push   ebx
c00138a8:	83 ec 44             	sub    esp,0x44
c00138ab:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00138b0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138b6:	83 e0 04             	and    eax,0x4
c00138b9:	84 c0                	test   al,al
c00138bb:	75 0a                	jne    c00138c7 <findRSDT(unsigned char*)+0x21>
c00138bd:	b8 00 00 00 00       	mov    eax,0x0
c00138c2:	e9 f7 00 00 00       	jmp    c00139be <findRSDT(unsigned char*)+0x118>
c00138c7:	83 ec 04             	sub    esp,0x4
c00138ca:	6a 24                	push   0x24
c00138cc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00138d0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00138d4:	50                   	push   eax
c00138d5:	e8 c8 cd fe ff       	call   c00006a2 <memcpy>
c00138da:	83 c4 10             	add    esp,0x10
c00138dd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00138e1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00138e5:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00138ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00138f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013901:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013905:	25 ff 0f 00 00       	and    eax,0xfff
c001390a:	89 c6                	mov    esi,eax
c001390c:	e8 8a aa ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c0013911:	89 c3                	mov    ebx,eax
c0013913:	83 ec 0c             	sub    esp,0xc
c0013916:	6a 02                	push   0x2
c0013918:	e8 f1 a8 ff ff       	call   c000e20e <Virt::allocateKernelVirtualPages(int)>
c001391d:	83 c4 10             	add    esp,0x10
c0013920:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013924:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001392a:	83 ec 0c             	sub    esp,0xc
c001392d:	6a 01                	push   0x1
c001392f:	6a 02                	push   0x2
c0013931:	50                   	push   eax
c0013932:	52                   	push   edx
c0013933:	53                   	push   ebx
c0013934:	e8 93 b2 ff ff       	call   c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013939:	83 c4 20             	add    esp,0x20
c001393c:	09 f0                	or     eax,esi
c001393e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013946:	25 ff 0f 00 00       	and    eax,0xfff
c001394b:	89 c6                	mov    esi,eax
c001394d:	e8 49 aa ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c0013952:	89 c3                	mov    ebx,eax
c0013954:	83 ec 0c             	sub    esp,0xc
c0013957:	6a 02                	push   0x2
c0013959:	e8 b0 a8 ff ff       	call   c000e20e <Virt::allocateKernelVirtualPages(int)>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013965:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001396b:	83 ec 0c             	sub    esp,0xc
c001396e:	6a 01                	push   0x1
c0013970:	6a 02                	push   0x2
c0013972:	50                   	push   eax
c0013973:	52                   	push   edx
c0013974:	53                   	push   ebx
c0013975:	e8 52 b2 ff ff       	call   c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001397a:	83 c4 20             	add    esp,0x20
c001397d:	09 f0                	or     eax,esi
c001397f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013983:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013988:	75 11                	jne    c001399b <findRSDT(unsigned char*)+0xf5>
c001398a:	c6 05 40 50 02 c0 00 	mov    BYTE PTR ds:0xc0025040,0x0
c0013991:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013995:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013999:	eb 1f                	jmp    c00139ba <findRSDT(unsigned char*)+0x114>
c001399b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00139a0:	75 11                	jne    c00139b3 <findRSDT(unsigned char*)+0x10d>
c00139a2:	c6 05 40 50 02 c0 01 	mov    BYTE PTR ds:0xc0025040,0x1
c00139a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00139ad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00139b1:	eb 07                	jmp    c00139ba <findRSDT(unsigned char*)+0x114>
c00139b3:	b8 00 00 00 00       	mov    eax,0x0
c00139b8:	eb 04                	jmp    c00139be <findRSDT(unsigned char*)+0x118>
c00139ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00139be:	83 c4 44             	add    esp,0x44
c00139c1:	5b                   	pop    ebx
c00139c2:	5e                   	pop    esi
c00139c3:	c3                   	ret    

c00139c4 <findDataTable(unsigned char*, char*)>:
c00139c4:	83 ec 1c             	sub    esp,0x1c
c00139c7:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00139cc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139d2:	83 e0 04             	and    eax,0x4
c00139d5:	84 c0                	test   al,al
c00139d7:	75 07                	jne    c00139e0 <findDataTable(unsigned char*, char*)+0x1c>
c00139d9:	b8 00 00 00 00       	mov    eax,0x0
c00139de:	eb 7c                	jmp    c0013a5c <findDataTable(unsigned char*, char*)+0x98>
c00139e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139e8:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00139ed:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00139f1:	7d 3a                	jge    c0013a2d <findDataTable(unsigned char*, char*)+0x69>
c00139f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139f7:	c1 e0 03             	shl    eax,0x3
c00139fa:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00139ff:	83 ec 04             	sub    esp,0x4
c0013a02:	6a 04                	push   0x4
c0013a04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a08:	50                   	push   eax
c0013a09:	e8 31 cc fe ff       	call   c000063f <memcmp>
c0013a0e:	83 c4 10             	add    esp,0x10
c0013a11:	85 c0                	test   eax,eax
c0013a13:	0f 94 c0             	sete   al
c0013a16:	84 c0                	test   al,al
c0013a18:	74 0d                	je     c0013a27 <findDataTable(unsigned char*, char*)+0x63>
c0013a1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a1e:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c0013a25:	eb 35                	jmp    c0013a5c <findDataTable(unsigned char*, char*)+0x98>
c0013a27:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013a2b:	eb bb                	jmp    c00139e8 <findDataTable(unsigned char*, char*)+0x24>
c0013a2d:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c0013a32:	84 c0                	test   al,al
c0013a34:	74 07                	je     c0013a3d <findDataTable(unsigned char*, char*)+0x79>
c0013a36:	b8 58 00 00 00       	mov    eax,0x58
c0013a3b:	eb 05                	jmp    c0013a42 <findDataTable(unsigned char*, char*)+0x7e>
c0013a3d:	b8 52 00 00 00       	mov    eax,0x52
c0013a42:	83 ec 04             	sub    esp,0x4
c0013a45:	50                   	push   eax
c0013a46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a4a:	68 90 23 02 c0       	push   0xc0022390
c0013a4f:	e8 d5 b7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0013a54:	83 c4 10             	add    esp,0x10
c0013a57:	b8 00 00 00 00       	mov    eax,0x0
c0013a5c:	83 c4 1c             	add    esp,0x1c
c0013a5f:	c3                   	ret    

c0013a60 <scanMADT()>:
c0013a60:	83 ec 2c             	sub    esp,0x2c
c0013a63:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a68:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a6e:	83 e0 04             	and    eax,0x4
c0013a71:	84 c0                	test   al,al
c0013a73:	0f 84 9a 03 00 00    	je     c0013e13 <scanMADT()+0x3b3>
c0013a79:	e8 77 fb ff ff       	call   c00135f5 <findRSDP()>
c0013a7e:	a3 4c 50 02 c0       	mov    ds:0xc002504c,eax
c0013a83:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013a88:	85 c0                	test   eax,eax
c0013a8a:	75 19                	jne    c0013aa5 <scanMADT()+0x45>
c0013a8c:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a91:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a97:	83 e2 fb             	and    edx,0xfffffffb
c0013a9a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013aa0:	e9 72 03 00 00       	jmp    c0013e17 <scanMADT()+0x3b7>
c0013aa5:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013aaa:	83 ec 0c             	sub    esp,0xc
c0013aad:	50                   	push   eax
c0013aae:	e8 f3 fd ff ff       	call   c00138a6 <findRSDT(unsigned char*)>
c0013ab3:	83 c4 10             	add    esp,0x10
c0013ab6:	a3 48 50 02 c0       	mov    ds:0xc0025048,eax
c0013abb:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013ac0:	85 c0                	test   eax,eax
c0013ac2:	75 19                	jne    c0013add <scanMADT()+0x7d>
c0013ac4:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013ac9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013acf:	83 e2 fb             	and    edx,0xfffffffb
c0013ad2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013ad8:	e9 3a 03 00 00       	jmp    c0013e17 <scanMADT()+0x3b7>
c0013add:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013ae2:	83 ec 0c             	sub    esp,0xc
c0013ae5:	50                   	push   eax
c0013ae6:	e8 94 fb ff ff       	call   c001367f <loadACPITables(unsigned char*)>
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013af3:	83 ec 08             	sub    esp,0x8
c0013af6:	68 ae 22 02 c0       	push   0xc00222ae
c0013afb:	50                   	push   eax
c0013afc:	e8 c3 fe ff ff       	call   c00139c4 <findDataTable(unsigned char*, char*)>
c0013b01:	83 c4 10             	add    esp,0x10
c0013b04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013b08:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013b0d:	75 19                	jne    c0013b28 <scanMADT()+0xc8>
c0013b0f:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013b14:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013b1a:	83 e2 fe             	and    edx,0xfffffffe
c0013b1d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013b23:	e9 ef 02 00 00       	jmp    c0013e17 <scanMADT()+0x3b7>
c0013b28:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b37:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013b3b:	0f 87 d6 02 00 00    	ja     c0013e17 <scanMADT()+0x3b7>
c0013b41:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013b49:	0f 87 c8 02 00 00    	ja     c0013e17 <scanMADT()+0x3b7>
c0013b4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b5b:	8d 50 01             	lea    edx,[eax+0x1]
c0013b5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b66:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b6a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b72:	8d 50 01             	lea    edx,[eax+0x1]
c0013b75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b7d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b81:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013b85:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013b8a:	0f 86 86 02 00 00    	jbe    c0013e16 <scanMADT()+0x3b6>
c0013b90:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013b95:	75 5b                	jne    c0013bf2 <scanMADT()+0x192>
c0013b97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b9b:	8d 50 01             	lea    edx,[eax+0x1]
c0013b9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ba2:	8a 15 80 51 02 c0    	mov    dl,BYTE PTR ds:0xc0025180
c0013ba8:	81 e2 ff 00 00 00    	and    edx,0xff
c0013bae:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bb2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013bb6:	88 82 c0 51 02 c0    	mov    BYTE PTR [edx-0x3ffdae40],al
c0013bbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013bc0:	8d 42 01             	lea    eax,[edx+0x1]
c0013bc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bc7:	a0 80 51 02 c0       	mov    al,ds:0xc0025180
c0013bcc:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bcf:	88 0d 80 51 02 c0    	mov    BYTE PTR ds:0xc0025180,cl
c0013bd5:	25 ff 00 00 00       	and    eax,0xff
c0013bda:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bde:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013be2:	88 90 a0 51 02 c0    	mov    BYTE PTR [eax-0x3ffdae60],dl
c0013be8:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bed:	e9 0a 02 00 00       	jmp    c0013dfc <scanMADT()+0x39c>
c0013bf2:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013bf7:	0f 85 29 01 00 00    	jne    c0013d26 <scanMADT()+0x2c6>
c0013bfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c01:	8d 50 01             	lea    edx,[eax+0x1]
c0013c04:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c08:	8a 15 50 50 02 c0    	mov    dl,BYTE PTR ds:0xc0025050
c0013c0e:	81 e2 ff 00 00 00    	and    edx,0xff
c0013c14:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c18:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013c1c:	88 82 60 50 02 c0    	mov    BYTE PTR [edx-0x3ffdafa0],al
c0013c22:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013c26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c2e:	01 d0                	add    eax,edx
c0013c30:	83 c0 2c             	add    eax,0x2c
c0013c33:	8a 00                	mov    al,BYTE PTR [eax]
c0013c35:	31 d2                	xor    edx,edx
c0013c37:	88 c2                	mov    dl,al
c0013c39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c3d:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c44:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c48:	25 ff 00 00 00       	and    eax,0xff
c0013c4d:	c1 e0 08             	shl    eax,0x8
c0013c50:	89 d1                	mov    ecx,edx
c0013c52:	09 c1                	or     ecx,eax
c0013c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c58:	8d 50 02             	lea    edx,[eax+0x2]
c0013c5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c5f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c63:	25 ff 00 00 00       	and    eax,0xff
c0013c68:	c1 e0 10             	shl    eax,0x10
c0013c6b:	09 c1                	or     ecx,eax
c0013c6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c71:	8d 50 03             	lea    edx,[eax+0x3]
c0013c74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c78:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c7c:	25 ff 00 00 00       	and    eax,0xff
c0013c81:	c1 e0 18             	shl    eax,0x18
c0013c84:	09 c1                	or     ecx,eax
c0013c86:	89 ca                	mov    edx,ecx
c0013c88:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013c8d:	25 ff 00 00 00       	and    eax,0xff
c0013c92:	89 14 85 80 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf80],edx
c0013c99:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca6:	01 d0                	add    eax,edx
c0013ca8:	83 c0 2c             	add    eax,0x2c
c0013cab:	8a 00                	mov    al,BYTE PTR [eax]
c0013cad:	31 d2                	xor    edx,edx
c0013caf:	88 c2                	mov    dl,al
c0013cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cb5:	8d 48 01             	lea    ecx,[eax+0x1]
c0013cb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cbc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013cc0:	25 ff 00 00 00       	and    eax,0xff
c0013cc5:	c1 e0 08             	shl    eax,0x8
c0013cc8:	89 d1                	mov    ecx,edx
c0013cca:	09 c1                	or     ecx,eax
c0013ccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cd0:	8d 50 02             	lea    edx,[eax+0x2]
c0013cd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cd7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cdb:	25 ff 00 00 00       	and    eax,0xff
c0013ce0:	c1 e0 10             	shl    eax,0x10
c0013ce3:	09 c1                	or     ecx,eax
c0013ce5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ce9:	8d 50 03             	lea    edx,[eax+0x3]
c0013cec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cf0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cf4:	25 ff 00 00 00       	and    eax,0xff
c0013cf9:	c1 e0 18             	shl    eax,0x18
c0013cfc:	09 c1                	or     ecx,eax
c0013cfe:	89 ca                	mov    edx,ecx
c0013d00:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013d05:	25 ff 00 00 00       	and    eax,0xff
c0013d0a:	89 14 85 00 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf00],edx
c0013d11:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013d16:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013d1b:	40                   	inc    eax
c0013d1c:	a2 50 50 02 c0       	mov    ds:0xc0025050,al
c0013d21:	e9 d6 00 00 00       	jmp    c0013dfc <scanMADT()+0x39c>
c0013d26:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013d2b:	0f 85 b1 00 00 00    	jne    c0013de2 <scanMADT()+0x382>
c0013d31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d35:	8d 50 01             	lea    edx,[eax+0x1]
c0013d38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d40:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d44:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d4c:	8d 50 01             	lea    edx,[eax+0x1]
c0013d4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d57:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d5b:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013d5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d67:	01 d0                	add    eax,edx
c0013d69:	83 c0 2c             	add    eax,0x2c
c0013d6c:	8a 00                	mov    al,BYTE PTR [eax]
c0013d6e:	31 d2                	xor    edx,edx
c0013d70:	88 c2                	mov    dl,al
c0013d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d76:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d7d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013d81:	25 ff 00 00 00       	and    eax,0xff
c0013d86:	c1 e0 08             	shl    eax,0x8
c0013d89:	89 d1                	mov    ecx,edx
c0013d8b:	09 c1                	or     ecx,eax
c0013d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d91:	8d 50 02             	lea    edx,[eax+0x2]
c0013d94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d98:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d9c:	25 ff 00 00 00       	and    eax,0xff
c0013da1:	c1 e0 10             	shl    eax,0x10
c0013da4:	09 c1                	or     ecx,eax
c0013da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013daa:	8d 50 03             	lea    edx,[eax+0x3]
c0013dad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013db1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013db5:	25 ff 00 00 00       	and    eax,0xff
c0013dba:	c1 e0 18             	shl    eax,0x18
c0013dbd:	09 c8                	or     eax,ecx
c0013dbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013dc3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013dc8:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013dcd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013dd1:	25 ff 00 00 00       	and    eax,0xff
c0013dd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dda:	88 90 00 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc100],dl
c0013de0:	eb 1a                	jmp    c0013dfc <scanMADT()+0x39c>
c0013de2:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013de7:	75 07                	jne    c0013df0 <scanMADT()+0x390>
c0013de9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013dee:	eb 0c                	jmp    c0013dfc <scanMADT()+0x39c>
c0013df0:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013df5:	75 05                	jne    c0013dfc <scanMADT()+0x39c>
c0013df7:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013dfc:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013e00:	31 d2                	xor    edx,edx
c0013e02:	88 c2                	mov    dl,al
c0013e04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e08:	01 d0                	add    eax,edx
c0013e0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e0e:	e9 1d fd ff ff       	jmp    c0013b30 <scanMADT()+0xd0>
c0013e13:	90                   	nop
c0013e14:	eb 01                	jmp    c0013e17 <scanMADT()+0x3b7>
c0013e16:	90                   	nop
c0013e17:	83 c4 2c             	add    esp,0x2c
c0013e1a:	c3                   	ret    
c0013e1b:	90                   	nop

c0013e1c <ACPI::ACPI()>:
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e23:	83 ec 08             	sub    esp,0x8
c0013e26:	68 b3 22 02 c0       	push   0xc00222b3
c0013e2b:	50                   	push   eax
c0013e2c:	e8 fd c9 ff ff       	call   c001082e <Device::Device(char const*)>
c0013e31:	83 c4 10             	add    esp,0x10
c0013e34:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c0013e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3d:	89 10                	mov    DWORD PTR [eax],edx
c0013e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e43:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4e:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5c:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6a:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013e71:	e8 ea fb ff ff       	call   c0013a60 <scanMADT()>
c0013e76:	90                   	nop
c0013e77:	83 c4 0c             	add    esp,0xc
c0013e7a:	c3                   	ret    
c0013e7b:	90                   	nop

c0013e7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013e7c:	83 ec 2c             	sub    esp,0x2c
c0013e7f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013e83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e87:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013e8b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e8f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013e94:	88 d0                	mov    al,dl
c0013e96:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e9a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013e9f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013ea7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013eab:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013eb1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013eb5:	0f 8d 97 00 00 00    	jge    c0013f52 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ebf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ec3:	83 c2 2a             	add    edx,0x2a
c0013ec6:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013eca:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013ecf:	75 78                	jne    c0013f49 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ed1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ed5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ed9:	83 c2 2a             	add    edx,0x2a
c0013edc:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013ee0:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013ee4:	75 63                	jne    c0013f49 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ee6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013eeb:	74 3a                	je     c0013f27 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013eed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ef1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ef5:	83 c2 2a             	add    edx,0x2a
c0013ef8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013efc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013f03:	39 c2                	cmp    edx,eax
c0013f05:	74 10                	je     c0013f17 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013f07:	83 ec 0c             	sub    esp,0xc
c0013f0a:	68 c0 23 02 c0       	push   0xc00223c0
c0013f0f:	e8 3e 1b 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0013f14:	83 c4 10             	add    esp,0x10
c0013f17:	83 ec 0c             	sub    esp,0xc
c0013f1a:	68 b8 22 02 c0       	push   0xc00222b8
c0013f1f:	e8 2e 1b 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f33:	83 c2 2a             	add    edx,0x2a
c0013f36:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013f3a:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f3c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013f3f:	89 01                	mov    DWORD PTR [ecx],eax
c0013f41:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013f44:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013f49:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013f4d:	e9 55 ff ff ff       	jmp    c0013ea7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013f52:	90                   	nop
c0013f53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f57:	83 c4 2c             	add    esp,0x2c
c0013f5a:	c2 04 00             	ret    0x4
c0013f5d:	90                   	nop

c0013f5e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013f5e:	56                   	push   esi
c0013f5f:	53                   	push   ebx
c0013f60:	83 ec 14             	sub    esp,0x14
c0013f63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f6b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013f6f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013f74:	88 c8                	mov    al,cl
c0013f76:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013f7a:	88 d0                	mov    al,dl
c0013f7c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f84:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013f8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f8e:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013f94:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013f98:	31 c9                	xor    ecx,ecx
c0013f9a:	88 c1                	mov    cl,al
c0013f9c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013fa0:	31 d2                	xor    edx,edx
c0013fa2:	88 c2                	mov    dl,al
c0013fa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fa8:	25 ff ff 00 00       	and    eax,0xffff
c0013fad:	83 ec 04             	sub    esp,0x4
c0013fb0:	56                   	push   esi
c0013fb1:	53                   	push   ebx
c0013fb2:	51                   	push   ecx
c0013fb3:	52                   	push   edx
c0013fb4:	50                   	push   eax
c0013fb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fb9:	68 f0 23 02 c0       	push   0xc00223f0
c0013fbe:	e8 66 b2 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0013fc3:	83 c4 20             	add    esp,0x20
c0013fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fca:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013fd7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013fdb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013fe9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fed:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013ff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ff4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ffd:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0014003:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0014007:	8d 48 01             	lea    ecx,[eax+0x1]
c001400a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400e:	83 c2 2a             	add    edx,0x2a
c0014011:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0014015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014019:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001401f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014023:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0014026:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001402a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001402e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014032:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014038:	8d 50 01             	lea    edx,[eax+0x1]
c001403b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001403f:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0014045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014049:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001404f:	3d 00 08 00 00       	cmp    eax,0x800
c0014054:	75 10                	jne    c0014066 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c0014056:	83 ec 0c             	sub    esp,0xc
c0014059:	68 c7 22 02 c0       	push   0xc00222c7
c001405e:	e8 ef 19 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0014063:	83 c4 10             	add    esp,0x10
c0014066:	90                   	nop
c0014067:	83 c4 14             	add    esp,0x14
c001406a:	5b                   	pop    ebx
c001406b:	5e                   	pop    esi
c001406c:	c3                   	ret    
c001406d:	90                   	nop

c001406e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001406e:	b8 00 00 00 00       	mov    eax,0x0
c0014073:	c3                   	ret    

c0014074 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0014074:	83 ec 1c             	sub    esp,0x1c
c0014077:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001407b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001407e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014082:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c0014088:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001408c:	25 ff 00 00 00       	and    eax,0xff
c0014091:	83 ec 08             	sub    esp,0x8
c0014094:	50                   	push   eax
c0014095:	52                   	push   edx
c0014096:	e8 69 75 ff ff       	call   c000b604 <Computer::readCMOS(unsigned char)>
c001409b:	83 c4 10             	add    esp,0x10
c001409e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00140a2:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00140a8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00140ac:	25 ff 00 00 00       	and    eax,0xff
c00140b1:	83 ec 04             	sub    esp,0x4
c00140b4:	6a 01                	push   0x1
c00140b6:	50                   	push   eax
c00140b7:	52                   	push   edx
c00140b8:	e8 5f 76 ff ff       	call   c000b71c <Computer::writeCMOS(unsigned char, unsigned char)>
c00140bd:	83 c4 10             	add    esp,0x10
c00140c0:	90                   	nop
c00140c1:	83 c4 1c             	add    esp,0x1c
c00140c4:	c3                   	ret    
c00140c5:	90                   	nop

c00140c6 <ACPI::open(int, int, void*)>:
c00140c6:	53                   	push   ebx
c00140c7:	83 ec 18             	sub    esp,0x18
c00140ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140ce:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00140d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140d9:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00140df:	84 c0                	test   al,al
c00140e1:	74 60                	je     c0014143 <ACPI::open(int, int, void*)+0x7d>
c00140e3:	83 ec 0c             	sub    esp,0xc
c00140e6:	68 58 01 00 00       	push   0x158
c00140eb:	e8 04 b0 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	89 c3                	mov    ebx,eax
c00140f5:	83 ec 0c             	sub    esp,0xc
c00140f8:	53                   	push   ebx
c00140f9:	e8 a8 80 00 00       	call   c001c1a6 <PCI::PCI()>
c00140fe:	83 c4 10             	add    esp,0x10
c0014101:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0014105:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014109:	83 ec 08             	sub    esp,0x8
c001410c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014110:	50                   	push   eax
c0014111:	e8 28 c5 ff ff       	call   c001063e <Device::addChild(Device*)>
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001411d:	8b 00                	mov    eax,DWORD PTR [eax]
c001411f:	83 c0 08             	add    eax,0x8
c0014122:	8b 00                	mov    eax,DWORD PTR [eax]
c0014124:	6a 00                	push   0x0
c0014126:	6a 00                	push   0x0
c0014128:	6a 00                	push   0x0
c001412a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001412e:	ff d0                	call   eax
c0014130:	83 c4 10             	add    esp,0x10
c0014133:	83 ec 0c             	sub    esp,0xc
c0014136:	68 e4 22 02 c0       	push   0xc00222e4
c001413b:	e8 e9 b0 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	83 ec 0c             	sub    esp,0xc
c0014146:	68 ef 22 02 c0       	push   0xc00222ef
c001414b:	e8 43 38 00 00       	call   c0017993 <Thr::loadKernelSymbolTable(char const*)>
c0014150:	83 c4 10             	add    esp,0x10
c0014153:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0014159:	83 ec 08             	sub    esp,0x8
c001415c:	6a 01                	push   0x1
c001415e:	68 0d 23 02 c0       	push   0xc002230d
c0014163:	e8 0d 43 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c0014168:	83 c4 10             	add    esp,0x10
c001416b:	83 ec 08             	sub    esp,0x8
c001416e:	53                   	push   ebx
c001416f:	50                   	push   eax
c0014170:	e8 c6 44 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c001417e:	83 ec 08             	sub    esp,0x8
c0014181:	6a 01                	push   0x1
c0014183:	68 2a 23 02 c0       	push   0xc002232a
c0014188:	e8 e8 42 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c001418d:	83 c4 10             	add    esp,0x10
c0014190:	83 ec 08             	sub    esp,0x8
c0014193:	53                   	push   ebx
c0014194:	50                   	push   eax
c0014195:	e8 a1 44 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c001419a:	83 c4 10             	add    esp,0x10
c001419d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00141a2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00141a8:	83 e0 04             	and    eax,0x4
c00141ab:	84 c0                	test   al,al
c00141ad:	0f 84 cf 00 00 00    	je     c0014282 <ACPI::open(int, int, void*)+0x1bc>
c00141b3:	83 ec 0c             	sub    esp,0xc
c00141b6:	68 14 01 00 00       	push   0x114
c00141bb:	e8 34 af ff ff       	call   c000f0f4 <operator new(unsigned long)>
c00141c0:	83 c4 10             	add    esp,0x10
c00141c3:	89 c3                	mov    ebx,eax
c00141c5:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00141ca:	83 ec 04             	sub    esp,0x4
c00141cd:	50                   	push   eax
c00141ce:	68 47 23 02 c0       	push   0xc0022347
c00141d3:	53                   	push   ebx
c00141d4:	e8 87 b5 ff ff       	call   c000f760 <File::File(char const*, Process*)>
c00141d9:	83 c4 10             	add    esp,0x10
c00141dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00141e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00141e5:	74 17                	je     c00141fe <ACPI::open(int, int, void*)+0x138>
c00141e7:	83 ec 0c             	sub    esp,0xc
c00141ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141ee:	e8 3f b8 ff ff       	call   c000fa32 <File::exists()>
c00141f3:	83 c4 10             	add    esp,0x10
c00141f6:	84 c0                	test   al,al
c00141f8:	74 04                	je     c00141fe <ACPI::open(int, int, void*)+0x138>
c00141fa:	b0 01                	mov    al,0x1
c00141fc:	eb 02                	jmp    c0014200 <ACPI::open(int, int, void*)+0x13a>
c00141fe:	b0 00                	mov    al,0x0
c0014200:	84 c0                	test   al,al
c0014202:	74 25                	je     c0014229 <ACPI::open(int, int, void*)+0x163>
c0014204:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c001420a:	83 ec 08             	sub    esp,0x8
c001420d:	6a 01                	push   0x1
c001420f:	68 47 23 02 c0       	push   0xc0022347
c0014214:	e8 5c 42 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c0014219:	83 c4 10             	add    esp,0x10
c001421c:	83 ec 08             	sub    esp,0x8
c001421f:	53                   	push   ebx
c0014220:	50                   	push   eax
c0014221:	e8 15 44 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c0014226:	83 c4 10             	add    esp,0x10
c0014229:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001422e:	74 1e                	je     c001424e <ACPI::open(int, int, void*)+0x188>
c0014230:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014235:	74 17                	je     c001424e <ACPI::open(int, int, void*)+0x188>
c0014237:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001423b:	8b 00                	mov    eax,DWORD PTR [eax]
c001423d:	83 c0 08             	add    eax,0x8
c0014240:	8b 00                	mov    eax,DWORD PTR [eax]
c0014242:	83 ec 0c             	sub    esp,0xc
c0014245:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014249:	ff d0                	call   eax
c001424b:	83 c4 10             	add    esp,0x10
c001424e:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0014253:	83 ec 08             	sub    esp,0x8
c0014256:	68 64 23 02 c0       	push   0xc0022364
c001425b:	50                   	push   eax
c001425c:	e8 63 f7 ff ff       	call   c00139c4 <findDataTable(unsigned char*, char*)>
c0014261:	83 c4 10             	add    esp,0x10
c0014264:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014268:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001426d:	74 13                	je     c0014282 <ACPI::open(int, int, void*)+0x1bc>
c001426f:	83 ec 08             	sub    esp,0x8
c0014272:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014276:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001427a:	e8 f5 fd ff ff       	call   c0014074 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	b8 00 00 00 00       	mov    eax,0x0
c0014287:	83 c4 18             	add    esp,0x18
c001428a:	5b                   	pop    ebx
c001428b:	c3                   	ret    

c001428c <ACPI::sleep()>:
c001428c:	83 ec 0c             	sub    esp,0xc
c001428f:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c0014294:	85 c0                	test   eax,eax
c0014296:	74 07                	je     c001429f <ACPI::sleep()+0x13>
c0014298:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c001429d:	ff d0                	call   eax
c001429f:	90                   	nop
c00142a0:	83 c4 0c             	add    esp,0xc
c00142a3:	c3                   	ret    

c00142a4 <CPU::close(int, int, void*)>:
c00142a4:	31 c0                	xor    eax,eax
c00142a6:	c3                   	ret    

c00142a7 <lookupAMDCPUName(unsigned char, unsigned char)>:
c00142a7:	55                   	push   ebp
c00142a8:	57                   	push   edi
c00142a9:	56                   	push   esi
c00142aa:	53                   	push   ebx
c00142ab:	51                   	push   ecx
c00142ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00142b4:	89 d6                	mov    esi,edx
c00142b6:	89 cd                	mov    ebp,ecx
c00142b8:	80 fa 04             	cmp    dl,0x4
c00142bb:	75 28                	jne    c00142e5 <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00142bd:	8d 41 f9             	lea    eax,[ecx-0x7]
c00142c0:	3c 03                	cmp    al,0x3
c00142c2:	0f 86 64 01 00 00    	jbe    c001442c <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142c8:	80 f9 03             	cmp    cl,0x3
c00142cb:	0f 84 5b 01 00 00    	je     c001442c <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142d1:	8d 79 f2             	lea    edi,[ecx-0xe]
c00142d4:	b8 d0 40 02 c0       	mov    eax,0xc00240d0
c00142d9:	89 fb                	mov    ebx,edi
c00142db:	80 fb 01             	cmp    bl,0x1
c00142de:	77 4e                	ja     c001432e <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00142e0:	e9 61 01 00 00       	jmp    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142e5:	80 fa 05             	cmp    dl,0x5
c00142e8:	75 4d                	jne    c0014337 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00142ea:	b8 e0 40 02 c0       	mov    eax,0xc00240e0
c00142ef:	80 f9 03             	cmp    cl,0x3
c00142f2:	0f 86 4e 01 00 00    	jbe    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142f8:	8d 79 fa             	lea    edi,[ecx-0x6]
c00142fb:	b8 f0 40 02 c0       	mov    eax,0xc00240f0
c0014300:	89 fb                	mov    ebx,edi
c0014302:	80 fb 01             	cmp    bl,0x1
c0014305:	0f 86 3b 01 00 00    	jbe    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001430b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0014310:	80 f9 08             	cmp    cl,0x8
c0014313:	0f 84 2d 01 00 00    	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014319:	89 cf                	mov    edi,ecx
c001431b:	b8 10 41 02 c0       	mov    eax,0xc0024110
c0014320:	83 e7 fb             	and    edi,0xfffffffb
c0014323:	89 fb                	mov    ebx,edi
c0014325:	80 fb 09             	cmp    bl,0x9
c0014328:	0f 84 18 01 00 00    	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001432e:	31 c0                	xor    eax,eax
c0014330:	89 eb                	mov    ebx,ebp
c0014332:	0f b6 fb             	movzx  edi,bl
c0014335:	eb 30                	jmp    c0014367 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0014337:	31 c0                	xor    eax,eax
c0014339:	80 fa 06             	cmp    dl,0x6
c001433c:	75 f2                	jne    c0014330 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001433e:	80 f9 0a             	cmp    cl,0xa
c0014341:	77 ed                	ja     c0014330 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014343:	bf de 05 00 00       	mov    edi,0x5de
c0014348:	0f a3 cf             	bt     edi,ecx
c001434b:	73 e3                	jae    c0014330 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001434d:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0014352:	e9 ef 00 00 00       	jmp    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014357:	39 c7                	cmp    edi,eax
c0014359:	0f 84 d4 00 00 00    	je     c0014433 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c001435f:	40                   	inc    eax
c0014360:	3d d0 00 00 00       	cmp    eax,0xd0
c0014365:	74 09                	je     c0014370 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0014367:	89 f3                	mov    ebx,esi
c0014369:	80 fb 0f             	cmp    bl,0xf
c001436c:	75 f1                	jne    c001435f <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c001436e:	eb e7                	jmp    c0014357 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0014370:	80 fa 10             	cmp    dl,0x10
c0014373:	75 19                	jne    c001438e <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0014375:	8d 41 fc             	lea    eax,[ecx-0x4]
c0014378:	83 e0 fb             	and    eax,0xfffffffb
c001437b:	3c 02                	cmp    al,0x2
c001437d:	0f 86 b7 00 00 00    	jbe    c001443a <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014383:	80 f9 02             	cmp    cl,0x2
c0014386:	0f 84 ae 00 00 00    	je     c001443a <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c001438c:	eb 13                	jmp    c00143a1 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c001438e:	80 fa 11             	cmp    dl,0x11
c0014391:	75 0e                	jne    c00143a1 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014393:	b8 30 41 02 c0       	mov    eax,0xc0024130
c0014398:	80 f9 03             	cmp    cl,0x3
c001439b:	0f 84 a5 00 00 00    	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143a1:	80 fa 12             	cmp    dl,0x12
c00143a4:	75 0e                	jne    c00143b4 <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c00143a6:	b8 40 41 02 c0       	mov    eax,0xc0024140
c00143ab:	80 f9 01             	cmp    cl,0x1
c00143ae:	0f 84 92 00 00 00    	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143b4:	80 fa 14             	cmp    dl,0x14
c00143b7:	be 01 00 00 00       	mov    esi,0x1
c00143bc:	0f 94 c3             	sete   bl
c00143bf:	80 f9 13             	cmp    cl,0x13
c00143c2:	77 0c                	ja     c00143d0 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00143c4:	be 04 00 09 00       	mov    esi,0x90004
c00143c9:	d3 ee                	shr    esi,cl
c00143cb:	f7 d6                	not    esi
c00143cd:	83 e6 01             	and    esi,0x1
c00143d0:	8d 41 ff             	lea    eax,[ecx-0x1]
c00143d3:	3c 01                	cmp    al,0x1
c00143d5:	b8 50 41 02 c0       	mov    eax,0xc0024150
c00143da:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00143df:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00143e3:	75 61                	jne    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143e5:	80 fa 15             	cmp    dl,0x15
c00143e8:	75 1f                	jne    c0014409 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00143ea:	b8 60 41 02 c0       	mov    eax,0xc0024160
c00143ef:	80 f9 01             	cmp    cl,0x1
c00143f2:	74 52                	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143f4:	89 f3                	mov    ebx,esi
c00143f6:	b8 70 41 02 c0       	mov    eax,0xc0024170
c00143fb:	84 db                	test   bl,bl
c00143fd:	74 47                	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143ff:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0014404:	80 f9 30             	cmp    cl,0x30
c0014407:	74 3d                	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014409:	80 fa 16             	cmp    dl,0x16
c001440c:	0f 94 c2             	sete   dl
c001440f:	84 c9                	test   cl,cl
c0014411:	75 09                	jne    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0014413:	b8 90 41 02 c0       	mov    eax,0xc0024190
c0014418:	84 d2                	test   dl,dl
c001441a:	75 2a                	jne    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001441c:	80 f9 30             	cmp    cl,0x30
c001441f:	75 20                	jne    c0014441 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014421:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0014426:	84 d2                	test   dl,dl
c0014428:	75 1c                	jne    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001442a:	eb 15                	jmp    c0014441 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c001442c:	b8 c0 40 02 c0       	mov    eax,0xc00240c0
c0014431:	eb 13                	jmp    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014433:	b8 30 41 02 c0       	mov    eax,0xc0024130
c0014438:	eb 0c                	jmp    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001443a:	b8 40 41 02 c0       	mov    eax,0xc0024140
c001443f:	eb 05                	jmp    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014441:	b8 72 27 02 c0       	mov    eax,0xc0022772
c0014446:	5a                   	pop    edx
c0014447:	5b                   	pop    ebx
c0014448:	5e                   	pop    esi
c0014449:	5f                   	pop    edi
c001444a:	5d                   	pop    ebp
c001444b:	c3                   	ret    

c001444c <lookupIntelCPUName(unsigned char, unsigned char)>:
c001444c:	53                   	push   ebx
c001444d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014451:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014455:	80 f9 04             	cmp    cl,0x4
c0014458:	75 6a                	jne    c00144c4 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c001445a:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c001445f:	80 fa 01             	cmp    dl,0x1
c0014462:	0f 86 9b 02 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014468:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c001446d:	80 fa 02             	cmp    dl,0x2
c0014470:	0f 84 8d 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014476:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c001447b:	80 fa 03             	cmp    dl,0x3
c001447e:	0f 84 7f 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014484:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c0014489:	80 fa 04             	cmp    dl,0x4
c001448c:	0f 84 71 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014492:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0014497:	80 fa 05             	cmp    dl,0x5
c001449a:	0f 84 63 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144a0:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c00144a5:	80 fa 07             	cmp    dl,0x7
c00144a8:	0f 84 55 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ae:	8d 5a f8             	lea    ebx,[edx-0x8]
c00144b1:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00144b6:	80 fb 01             	cmp    bl,0x1
c00144b9:	0f 87 e0 01 00 00    	ja     c001469f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00144bf:	e9 3f 02 00 00       	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144c4:	80 f9 05             	cmp    cl,0x5
c00144c7:	75 3e                	jne    c0014507 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00144c9:	8d 5a ff             	lea    ebx,[edx-0x1]
c00144cc:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00144d1:	80 fb 02             	cmp    bl,0x2
c00144d4:	0f 86 29 02 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144da:	80 fa 04             	cmp    dl,0x4
c00144dd:	0f 84 f1 01 00 00    	je     c00146d4 <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00144e3:	80 fa 07             	cmp    dl,0x7
c00144e6:	0f 84 17 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ec:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00144f1:	80 fa 08             	cmp    dl,0x8
c00144f4:	0f 84 09 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144fa:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c00144ff:	80 fa 09             	cmp    dl,0x9
c0014502:	e9 96 01 00 00       	jmp    c001469d <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c0014507:	80 f9 06             	cmp    cl,0x6
c001450a:	0f 85 80 01 00 00    	jne    c0014690 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c0014510:	b8 b0 3f 02 c0       	mov    eax,0xc0023fb0
c0014515:	80 fa 01             	cmp    dl,0x1
c0014518:	0f 84 e5 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001451e:	8d 42 fb             	lea    eax,[edx-0x5]
c0014521:	3c 01                	cmp    al,0x1
c0014523:	0f 86 b2 01 00 00    	jbe    c00146db <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014529:	80 fa 03             	cmp    dl,0x3
c001452c:	0f 84 a9 01 00 00    	je     c00146db <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014532:	8d 5a f9             	lea    ebx,[edx-0x7]
c0014535:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c001453a:	80 fb 01             	cmp    bl,0x1
c001453d:	0f 86 c0 01 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014543:	80 fa 09             	cmp    dl,0x9
c0014546:	0f 84 96 01 00 00    	je     c00146e2 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c001454c:	8d 5a f6             	lea    ebx,[edx-0xa]
c001454f:	80 fb 01             	cmp    bl,0x1
c0014552:	0f 86 ab 01 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014558:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c001455d:	80 fa 0d             	cmp    dl,0xd
c0014560:	0f 84 9d 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014566:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c001456b:	80 fa 0e             	cmp    dl,0xe
c001456e:	0f 84 8f 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014574:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014579:	80 fa 0f             	cmp    dl,0xf
c001457c:	0f 84 81 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014582:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c0014587:	80 fa 15             	cmp    dl,0x15
c001458a:	0f 84 73 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014590:	8d 5a ea             	lea    ebx,[edx-0x16]
c0014593:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014598:	80 fb 01             	cmp    bl,0x1
c001459b:	0f 86 62 01 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145a1:	80 fa 1a             	cmp    dl,0x1a
c00145a4:	0f 84 3f 01 00 00    	je     c00146e9 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c00145aa:	80 fa 1c             	cmp    dl,0x1c
c00145ad:	0f 84 3d 01 00 00    	je     c00146f0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c00145b3:	80 fa 1d             	cmp    dl,0x1d
c00145b6:	0f 84 47 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145bc:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145c1:	80 fa 25             	cmp    dl,0x25
c00145c4:	0f 84 39 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ca:	8d 5a da             	lea    ebx,[edx-0x26]
c00145cd:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00145d2:	80 fb 01             	cmp    bl,0x1
c00145d5:	0f 86 28 01 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145db:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145e0:	80 fa 2a             	cmp    dl,0x2a
c00145e3:	0f 84 1a 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e9:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145ee:	80 fa 2c             	cmp    dl,0x2c
c00145f1:	0f 84 0c 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f7:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145fc:	80 fa 2d             	cmp    dl,0x2d
c00145ff:	0f 84 fe 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014605:	b8 10 40 02 c0       	mov    eax,0xc0024010
c001460a:	80 fa 2e             	cmp    dl,0x2e
c001460d:	0f 84 f0 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014613:	b8 30 40 02 c0       	mov    eax,0xc0024030
c0014618:	80 fa 2f             	cmp    dl,0x2f
c001461b:	0f 84 e2 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014621:	8d 5a cb             	lea    ebx,[edx-0x35]
c0014624:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0014629:	80 fb 01             	cmp    bl,0x1
c001462c:	0f 86 d1 00 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014632:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0014637:	80 fa 37             	cmp    dl,0x37
c001463a:	0f 84 c3 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014640:	b8 60 40 02 c0       	mov    eax,0xc0024060
c0014645:	80 fa 3a             	cmp    dl,0x3a
c0014648:	0f 84 b5 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001464e:	b8 70 40 02 c0       	mov    eax,0xc0024070
c0014653:	80 fa 3c             	cmp    dl,0x3c
c0014656:	0f 84 a7 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001465c:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0014661:	80 fa 3d             	cmp    dl,0x3d
c0014664:	0f 84 99 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001466a:	b8 60 40 02 c0       	mov    eax,0xc0024060
c001466f:	80 fa 3e             	cmp    dl,0x3e
c0014672:	0f 84 8b 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014678:	8d 42 bb             	lea    eax,[edx-0x45]
c001467b:	3c 01                	cmp    al,0x1
c001467d:	76 78                	jbe    c00146f7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001467f:	80 fa 3f             	cmp    dl,0x3f
c0014682:	74 73                	je     c00146f7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014684:	80 fa 4a             	cmp    dl,0x4a
c0014687:	74 75                	je     c00146fe <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014689:	80 fa 4d             	cmp    dl,0x4d
c001468c:	75 11                	jne    c001469f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001468e:	eb 6e                	jmp    c00146fe <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014690:	80 f9 0b             	cmp    cl,0xb
c0014693:	75 0a                	jne    c001469f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014695:	b8 90 40 02 c0       	mov    eax,0xc0024090
c001469a:	80 fa 01             	cmp    dl,0x1
c001469d:	74 64                	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001469f:	80 f9 0f             	cmp    cl,0xf
c00146a2:	b8 a0 40 02 c0       	mov    eax,0xc00240a0
c00146a7:	0f 94 c1             	sete   cl
c00146aa:	80 fa 02             	cmp    dl,0x2
c00146ad:	0f 96 c3             	setbe  bl
c00146b0:	84 cb                	test   bl,cl
c00146b2:	75 4f                	jne    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146b4:	8d 42 fd             	lea    eax,[edx-0x3]
c00146b7:	3c 01                	cmp    al,0x1
c00146b9:	0f 96 c0             	setbe  al
c00146bc:	80 fa 06             	cmp    dl,0x6
c00146bf:	0f 94 c2             	sete   dl
c00146c2:	09 c2                	or     edx,eax
c00146c4:	b8 72 27 02 c0       	mov    eax,0xc0022772
c00146c9:	84 ca                	test   dl,cl
c00146cb:	74 36                	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146cd:	b8 b0 40 02 c0       	mov    eax,0xc00240b0
c00146d2:	eb 2f                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d4:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00146d9:	eb 28                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146db:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c00146e0:	eb 21                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e2:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c00146e7:	eb 1a                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e9:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00146ee:	eb 13                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146f0:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00146f5:	eb 0c                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146f7:	b8 70 40 02 c0       	mov    eax,0xc0024070
c00146fc:	eb 05                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146fe:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0014703:	5b                   	pop    ebx
c0014704:	c3                   	ret    

c0014705 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0014705:	60                   	pusha  
c0014706:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001470a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001470e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014712:	9c                   	pushf  
c0014713:	fa                   	cli    
c0014714:	0f 09                	wbinvd 
c0014716:	0f 30                	wrmsr  
c0014718:	9d                   	popf   
c0014719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001471d:	89 02                	mov    DWORD PTR [edx],eax
c001471f:	61                   	popa   
c0014720:	c3                   	ret    

c0014721 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014721:	60                   	pusha  
c0014722:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014726:	9c                   	pushf  
c0014727:	fa                   	cli    
c0014728:	0f 09                	wbinvd 
c001472a:	31 c0                	xor    eax,eax
c001472c:	31 d2                	xor    edx,edx
c001472e:	0f 32                	rdmsr  
c0014730:	9d                   	popf   
c0014731:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014735:	89 02                	mov    DWORD PTR [edx],eax
c0014737:	61                   	popa   
c0014738:	c3                   	ret    

c0014739 <AMD_K6_writeback(int, int, int)>:
c0014739:	56                   	push   esi
c001473a:	53                   	push   ebx
c001473b:	83 ec 10             	sub    esp,0x10
c001473e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014742:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014747:	75 5d                	jne    c00147a6 <AMD_K6_writeback(int, int, int)+0x6d>
c0014749:	83 f8 08             	cmp    eax,0x8
c001474c:	75 09                	jne    c0014757 <AMD_K6_writeback(int, int, int)+0x1e>
c001474e:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014753:	7e 13                	jle    c0014768 <AMD_K6_writeback(int, int, int)+0x2f>
c0014755:	eb 30                	jmp    c0014787 <AMD_K6_writeback(int, int, int)+0x4e>
c0014757:	83 f8 06             	cmp    eax,0x6
c001475a:	7c 4a                	jl     c00147a6 <AMD_K6_writeback(int, int, int)+0x6d>
c001475c:	83 f8 07             	cmp    eax,0x7
c001475f:	7e 07                	jle    c0014768 <AMD_K6_writeback(int, int, int)+0x2f>
c0014761:	83 f8 09             	cmp    eax,0x9
c0014764:	74 21                	je     c0014787 <AMD_K6_writeback(int, int, int)+0x4e>
c0014766:	eb 3e                	jmp    c00147a6 <AMD_K6_writeback(int, int, int)+0x6d>
c0014768:	89 e6                	mov    esi,esp
c001476a:	8b 1d e4 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e4
c0014770:	c1 eb 15             	shr    ebx,0x15
c0014773:	56                   	push   esi
c0014774:	68 82 00 00 c0       	push   0xc0000082
c0014779:	e8 a3 ff ff ff       	call   c0014721 <AMD_K6_read_msr(unsigned int, REGS*)>
c001477e:	56                   	push   esi
c001477f:	83 e3 7e             	and    ebx,0x7e
c0014782:	6a 00                	push   0x0
c0014784:	53                   	push   ebx
c0014785:	eb 12                	jmp    c0014799 <AMD_K6_writeback(int, int, int)+0x60>
c0014787:	89 e3                	mov    ebx,esp
c0014789:	53                   	push   ebx
c001478a:	68 82 00 00 c0       	push   0xc0000082
c001478f:	e8 8d ff ff ff       	call   c0014721 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014794:	53                   	push   ebx
c0014795:	6a 00                	push   0x0
c0014797:	6a 00                	push   0x0
c0014799:	68 82 00 00 c0       	push   0xc0000082
c001479e:	e8 62 ff ff ff       	call   c0014705 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00147a3:	83 c4 18             	add    esp,0x18
c00147a6:	83 c4 10             	add    esp,0x10
c00147a9:	5b                   	pop    ebx
c00147aa:	5e                   	pop    esi
c00147ab:	c3                   	ret    

c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00147ac:	55                   	push   ebp
c00147ad:	57                   	push   edi
c00147ae:	56                   	push   esi
c00147af:	53                   	push   ebx
c00147b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00147b8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00147bc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00147c0:	39 05 c0 41 02 c0    	cmp    DWORD PTR ds:0xc00241c0,eax
c00147c6:	75 23                	jne    c00147eb <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00147c8:	a1 ec 51 02 c0       	mov    eax,ds:0xc00251ec
c00147cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147d1:	89 06                	mov    DWORD PTR [esi],eax
c00147d3:	a1 e8 51 02 c0       	mov    eax,ds:0xc00251e8
c00147d8:	89 07                	mov    DWORD PTR [edi],eax
c00147da:	a1 e4 51 02 c0       	mov    eax,ds:0xc00251e4
c00147df:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00147e2:	a1 e0 51 02 c0       	mov    eax,ds:0xc00251e0
c00147e7:	89 02                	mov    DWORD PTR [edx],eax
c00147e9:	eb 3f                	jmp    c001482a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00147eb:	31 c9                	xor    ecx,ecx
c00147ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147f1:	0f a2                	cpuid  
c00147f3:	89 06                	mov    DWORD PTR [esi],eax
c00147f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147f9:	89 1f                	mov    DWORD PTR [edi],ebx
c00147fb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00147fe:	89 10                	mov    DWORD PTR [eax],edx
c0014800:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014804:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c0014809:	8b 06                	mov    eax,DWORD PTR [esi]
c001480b:	a3 ec 51 02 c0       	mov    ds:0xc00251ec,eax
c0014810:	8b 07                	mov    eax,DWORD PTR [edi]
c0014812:	a3 e8 51 02 c0       	mov    ds:0xc00251e8,eax
c0014817:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001481a:	a3 e4 51 02 c0       	mov    ds:0xc00251e4,eax
c001481f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014823:	8b 00                	mov    eax,DWORD PTR [eax]
c0014825:	a3 e0 51 02 c0       	mov    ds:0xc00251e0,eax
c001482a:	5b                   	pop    ebx
c001482b:	5e                   	pop    esi
c001482c:	5f                   	pop    edi
c001482d:	5d                   	pop    ebp
c001482e:	c3                   	ret    

c001482f <cpuidCheckEDX(unsigned int)>:
c001482f:	83 ec 10             	sub    esp,0x10
c0014832:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014836:	50                   	push   eax
c0014837:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001483b:	50                   	push   eax
c001483c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014840:	50                   	push   eax
c0014841:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014845:	50                   	push   eax
c0014846:	6a 01                	push   0x1
c0014848:	e8 5f ff ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001484d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014851:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0014855:	0f 95 c0             	setne  al
c0014858:	83 c4 24             	add    esp,0x24
c001485b:	c3                   	ret    

c001485c <cpuidCheckECX(unsigned int)>:
c001485c:	83 ec 10             	sub    esp,0x10
c001485f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014863:	50                   	push   eax
c0014864:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014868:	50                   	push   eax
c0014869:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001486d:	50                   	push   eax
c001486e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014872:	50                   	push   eax
c0014873:	6a 01                	push   0x1
c0014875:	e8 32 ff ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001487a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001487e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014882:	0f 95 c0             	setne  al
c0014885:	83 c4 24             	add    esp,0x24
c0014888:	c3                   	ret    

c0014889 <cpuidCheckExtendedEBX(unsigned int)>:
c0014889:	83 ec 10             	sub    esp,0x10
c001488c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014890:	50                   	push   eax
c0014891:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014895:	50                   	push   eax
c0014896:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001489a:	50                   	push   eax
c001489b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001489f:	50                   	push   eax
c00148a0:	6a 07                	push   0x7
c00148a2:	e8 05 ff ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148ab:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00148af:	0f 95 c0             	setne  al
c00148b2:	83 c4 24             	add    esp,0x24
c00148b5:	c3                   	ret    

c00148b6 <cpuidCheckExtendedECX(unsigned int)>:
c00148b6:	83 ec 10             	sub    esp,0x10
c00148b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148bd:	50                   	push   eax
c00148be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148c2:	50                   	push   eax
c00148c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148c7:	50                   	push   eax
c00148c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148cc:	50                   	push   eax
c00148cd:	6a 07                	push   0x7
c00148cf:	e8 d8 fe ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148d8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00148dc:	0f 95 c0             	setne  al
c00148df:	83 c4 24             	add    esp,0x24
c00148e2:	c3                   	ret    

c00148e3 <getCPUNumber()>:
c00148e3:	31 c0                	xor    eax,eax
c00148e5:	c3                   	ret    

c00148e6 <thisCPU()>:
c00148e6:	e8 f8 ff ff ff       	call   c00148e3 <getCPUNumber()>
c00148eb:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00148f1:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00148f8:	c3                   	ret    
c00148f9:	90                   	nop

c00148fa <CPU::CPU()>:
c00148fa:	83 ec 0c             	sub    esp,0xc
c00148fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014901:	83 ec 08             	sub    esp,0x8
c0014904:	68 72 27 02 c0       	push   0xc0022772
c0014909:	50                   	push   eax
c001490a:	e8 1f bf ff ff       	call   c001082e <Device::Device(char const*)>
c001490f:	83 c4 10             	add    esp,0x10
c0014912:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c0014917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001491b:	89 10                	mov    DWORD PTR [eax],edx
c001491d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014921:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001492b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001492f:	05 78 01 00 00       	add    eax,0x178
c0014934:	83 ec 0c             	sub    esp,0xc
c0014937:	50                   	push   eax
c0014938:	e8 cb 6e ff ff       	call   c000b808 <GDT::GDT()>
c001493d:	83 c4 10             	add    esp,0x10
c0014940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014944:	05 7c 09 00 00       	add    eax,0x97c
c0014949:	83 ec 0c             	sub    esp,0xc
c001494c:	50                   	push   eax
c001494d:	e8 16 71 ff ff       	call   c000ba68 <IDT::IDT()>
c0014952:	83 c4 10             	add    esp,0x10
c0014955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014959:	05 7c 11 00 00       	add    eax,0x117c
c001495e:	83 ec 0c             	sub    esp,0xc
c0014961:	50                   	push   eax
c0014962:	e8 73 91 ff ff       	call   c000dada <TSS::TSS()>
c0014967:	83 c4 10             	add    esp,0x10
c001496a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001496e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014979:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014983:	90                   	nop
c0014984:	83 c4 0c             	add    esp,0xc
c0014987:	c3                   	ret    

c0014988 <CPU::displayFeatures()>:
c0014988:	53                   	push   ebx
c0014989:	83 ec 10             	sub    esp,0x10
c001498c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014990:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014996:	68 80 24 02 c0       	push   0xc0022480
c001499b:	e8 89 a8 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00149a0:	59                   	pop    ecx
c00149a1:	58                   	pop    eax
c00149a2:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00149a8:	50                   	push   eax
c00149a9:	68 91 24 02 c0       	push   0xc0022491
c00149ae:	e8 76 a8 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00149b3:	58                   	pop    eax
c00149b4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149ba:	c1 e8 0e             	shr    eax,0xe
c00149bd:	5a                   	pop    edx
c00149be:	0f b6 c0             	movzx  eax,al
c00149c1:	50                   	push   eax
c00149c2:	68 a2 24 02 c0       	push   0xc00224a2
c00149c7:	e8 5d a8 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00149cc:	59                   	pop    ecx
c00149cd:	58                   	pop    eax
c00149ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149d4:	66 c1 e8 06          	shr    ax,0x6
c00149d8:	0f b6 c0             	movzx  eax,al
c00149db:	50                   	push   eax
c00149dc:	68 b3 24 02 c0       	push   0xc00224b3
c00149e1:	e8 43 a8 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00149e6:	c7 04 24 c6 28 02 c0 	mov    DWORD PTR [esp],0xc00228c6
c00149ed:	e8 37 a8 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00149f2:	83 c4 10             	add    esp,0x10
c00149f5:	b8 12 11 02 c0       	mov    eax,0xc0021112
c00149fa:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0014a01:	74 05                	je     c0014a08 <CPU::displayFeatures()+0x80>
c0014a03:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a08:	52                   	push   edx
c0014a09:	52                   	push   edx
c0014a0a:	50                   	push   eax
c0014a0b:	68 c4 24 02 c0       	push   0xc00224c4
c0014a10:	e8 14 a8 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014a15:	83 c4 10             	add    esp,0x10
c0014a18:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a1d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014a24:	78 05                	js     c0014a2b <CPU::displayFeatures()+0xa3>
c0014a26:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a2b:	51                   	push   ecx
c0014a2c:	51                   	push   ecx
c0014a2d:	50                   	push   eax
c0014a2e:	68 db 24 02 c0       	push   0xc00224db
c0014a33:	e8 f1 a7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014a38:	83 c4 10             	add    esp,0x10
c0014a3b:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a40:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014a47:	75 05                	jne    c0014a4e <CPU::displayFeatures()+0xc6>
c0014a49:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a4e:	52                   	push   edx
c0014a4f:	52                   	push   edx
c0014a50:	50                   	push   eax
c0014a51:	68 f2 24 02 c0       	push   0xc00224f2
c0014a56:	e8 ce a7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014a5b:	83 c4 10             	add    esp,0x10
c0014a5e:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a63:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014a6a:	75 05                	jne    c0014a71 <CPU::displayFeatures()+0xe9>
c0014a6c:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a71:	51                   	push   ecx
c0014a72:	51                   	push   ecx
c0014a73:	50                   	push   eax
c0014a74:	68 09 25 02 c0       	push   0xc0022509
c0014a79:	e8 ab a7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a86:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014a8d:	75 05                	jne    c0014a94 <CPU::displayFeatures()+0x10c>
c0014a8f:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a94:	52                   	push   edx
c0014a95:	52                   	push   edx
c0014a96:	50                   	push   eax
c0014a97:	68 20 25 02 c0       	push   0xc0022520
c0014a9c:	e8 88 a7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014aa1:	83 c4 10             	add    esp,0x10
c0014aa4:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014aa9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014ab0:	75 05                	jne    c0014ab7 <CPU::displayFeatures()+0x12f>
c0014ab2:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014ab7:	51                   	push   ecx
c0014ab8:	51                   	push   ecx
c0014ab9:	50                   	push   eax
c0014aba:	68 37 25 02 c0       	push   0xc0022537
c0014abf:	e8 65 a7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014ac4:	83 c4 10             	add    esp,0x10
c0014ac7:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014acc:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014ad3:	75 05                	jne    c0014ada <CPU::displayFeatures()+0x152>
c0014ad5:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014ada:	52                   	push   edx
c0014adb:	52                   	push   edx
c0014adc:	50                   	push   eax
c0014add:	68 4e 25 02 c0       	push   0xc002254e
c0014ae2:	e8 42 a7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014ae7:	83 c4 10             	add    esp,0x10
c0014aea:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014aef:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014af6:	75 05                	jne    c0014afd <CPU::displayFeatures()+0x175>
c0014af8:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014afd:	51                   	push   ecx
c0014afe:	51                   	push   ecx
c0014aff:	50                   	push   eax
c0014b00:	68 65 25 02 c0       	push   0xc0022565
c0014b05:	e8 1f a7 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b12:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b19:	75 05                	jne    c0014b20 <CPU::displayFeatures()+0x198>
c0014b1b:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b20:	52                   	push   edx
c0014b21:	52                   	push   edx
c0014b22:	50                   	push   eax
c0014b23:	68 7c 25 02 c0       	push   0xc002257c
c0014b28:	e8 fc a6 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014b2d:	83 c4 10             	add    esp,0x10
c0014b30:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b35:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014b3c:	75 05                	jne    c0014b43 <CPU::displayFeatures()+0x1bb>
c0014b3e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b43:	51                   	push   ecx
c0014b44:	51                   	push   ecx
c0014b45:	50                   	push   eax
c0014b46:	68 93 25 02 c0       	push   0xc0022593
c0014b4b:	e8 d9 a6 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014b50:	83 c4 10             	add    esp,0x10
c0014b53:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b58:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b5f:	75 05                	jne    c0014b66 <CPU::displayFeatures()+0x1de>
c0014b61:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b66:	52                   	push   edx
c0014b67:	52                   	push   edx
c0014b68:	50                   	push   eax
c0014b69:	68 aa 25 02 c0       	push   0xc00225aa
c0014b6e:	e8 b6 a6 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014b73:	83 c4 10             	add    esp,0x10
c0014b76:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b7b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014b82:	75 05                	jne    c0014b89 <CPU::displayFeatures()+0x201>
c0014b84:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b89:	51                   	push   ecx
c0014b8a:	51                   	push   ecx
c0014b8b:	50                   	push   eax
c0014b8c:	68 c1 25 02 c0       	push   0xc00225c1
c0014b91:	e8 93 a6 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014b96:	83 c4 10             	add    esp,0x10
c0014b99:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b9e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014ba5:	75 05                	jne    c0014bac <CPU::displayFeatures()+0x224>
c0014ba7:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bac:	52                   	push   edx
c0014bad:	52                   	push   edx
c0014bae:	50                   	push   eax
c0014baf:	68 d8 25 02 c0       	push   0xc00225d8
c0014bb4:	e8 70 a6 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014bb9:	83 c4 10             	add    esp,0x10
c0014bbc:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014bc1:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014bc8:	78 05                	js     c0014bcf <CPU::displayFeatures()+0x247>
c0014bca:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bcf:	51                   	push   ecx
c0014bd0:	51                   	push   ecx
c0014bd1:	50                   	push   eax
c0014bd2:	68 ef 25 02 c0       	push   0xc00225ef
c0014bd7:	e8 4d a6 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014be4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014beb:	75 05                	jne    c0014bf2 <CPU::displayFeatures()+0x26a>
c0014bed:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bf2:	52                   	push   edx
c0014bf3:	52                   	push   edx
c0014bf4:	50                   	push   eax
c0014bf5:	68 06 26 02 c0       	push   0xc0022606
c0014bfa:	e8 2a a6 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0014bff:	83 c4 18             	add    esp,0x18
c0014c02:	5b                   	pop    ebx
c0014c03:	c3                   	ret    

c0014c04 <CPU::detectFeatures()>:
c0014c04:	55                   	push   ebp
c0014c05:	57                   	push   edi
c0014c06:	56                   	push   esi
c0014c07:	53                   	push   ebx
c0014c08:	83 ec 50             	sub    esp,0x50
c0014c0b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014c0f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014c19:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014c20:	6a 0d                	push   0xd
c0014c22:	6a 00                	push   0x0
c0014c24:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014c2a:	57                   	push   edi
c0014c2b:	e8 a8 ba fe ff       	call   c00006d8 <memset>
c0014c30:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0014c35:	83 c4 10             	add    esp,0x10
c0014c38:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014c3f:	0f 84 04 09 00 00    	je     c0015549 <CPU::detectFeatures()+0x945>
c0014c45:	83 ec 0c             	sub    esp,0xc
c0014c48:	6a 10                	push   0x10
c0014c4a:	e8 e0 fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014c4f:	83 e0 01             	and    eax,0x1
c0014c52:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c55:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c5b:	83 e0 fd             	and    eax,0xfffffffd
c0014c5e:	09 d0                	or     eax,edx
c0014c60:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c66:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014c6d:	e8 bd fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014c72:	83 e0 01             	and    eax,0x1
c0014c75:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014c7c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c82:	83 e0 fb             	and    eax,0xfffffffb
c0014c85:	09 d0                	or     eax,edx
c0014c87:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c8d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014c94:	e8 96 fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014c99:	83 e0 01             	and    eax,0x1
c0014c9c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014ca3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ca9:	83 e0 f7             	and    eax,0xfffffff7
c0014cac:	09 d0                	or     eax,edx
c0014cae:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cb4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014cbb:	e8 6f fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014cc0:	83 e0 01             	and    eax,0x1
c0014cc3:	c1 e0 04             	shl    eax,0x4
c0014cc6:	88 c2                	mov    dl,al
c0014cc8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cce:	83 e0 ef             	and    eax,0xffffffef
c0014cd1:	09 d0                	or     eax,edx
c0014cd3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cd9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014ce0:	e8 4a fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014ce5:	83 e0 01             	and    eax,0x1
c0014ce8:	c1 e0 05             	shl    eax,0x5
c0014ceb:	88 c2                	mov    dl,al
c0014ced:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cf3:	83 e0 df             	and    eax,0xffffffdf
c0014cf6:	09 d0                	or     eax,edx
c0014cf8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cfe:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014d05:	e8 25 fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014d0a:	83 e0 01             	and    eax,0x1
c0014d0d:	8d 14 00             	lea    edx,[eax+eax*1]
c0014d10:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014d16:	83 e0 fd             	and    eax,0xfffffffd
c0014d19:	09 d0                	or     eax,edx
c0014d1b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014d21:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014d28:	e8 02 fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014d2d:	83 e0 01             	and    eax,0x1
c0014d30:	c1 e0 06             	shl    eax,0x6
c0014d33:	88 c2                	mov    dl,al
c0014d35:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014d3b:	83 e0 bf             	and    eax,0xffffffbf
c0014d3e:	09 d0                	or     eax,edx
c0014d40:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014d46:	58                   	pop    eax
c0014d47:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014d4b:	56                   	push   esi
c0014d4c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014d50:	55                   	push   ebp
c0014d51:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014d55:	50                   	push   eax
c0014d56:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014d5a:	52                   	push   edx
c0014d5b:	6a 00                	push   0x0
c0014d5d:	e8 4a fa ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014d62:	83 c4 1c             	add    esp,0x1c
c0014d65:	6a 04                	push   0x4
c0014d67:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014d6b:	50                   	push   eax
c0014d6c:	57                   	push   edi
c0014d6d:	e8 30 b9 fe ff       	call   c00006a2 <memcpy>
c0014d72:	83 c4 0c             	add    esp,0xc
c0014d75:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014d7b:	6a 04                	push   0x4
c0014d7d:	56                   	push   esi
c0014d7e:	50                   	push   eax
c0014d7f:	e8 1e b9 fe ff       	call   c00006a2 <memcpy>
c0014d84:	83 c4 0c             	add    esp,0xc
c0014d87:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014d8d:	6a 04                	push   0x4
c0014d8f:	55                   	push   ebp
c0014d90:	50                   	push   eax
c0014d91:	e8 0c b9 fe ff       	call   c00006a2 <memcpy>
c0014d96:	58                   	pop    eax
c0014d97:	5a                   	pop    edx
c0014d98:	68 1d 26 02 c0       	push   0xc002261d
c0014d9d:	57                   	push   edi
c0014d9e:	e8 25 ba fe ff       	call   c00007c8 <strcmp>
c0014da3:	83 c4 10             	add    esp,0x10
c0014da6:	85 c0                	test   eax,eax
c0014da8:	75 0f                	jne    c0014db9 <CPU::detectFeatures()+0x1b5>
c0014daa:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014db4:	e9 22 02 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014db9:	50                   	push   eax
c0014dba:	50                   	push   eax
c0014dbb:	68 2a 26 02 c0       	push   0xc002262a
c0014dc0:	57                   	push   edi
c0014dc1:	e8 02 ba fe ff       	call   c00007c8 <strcmp>
c0014dc6:	83 c4 10             	add    esp,0x10
c0014dc9:	85 c0                	test   eax,eax
c0014dcb:	74 dd                	je     c0014daa <CPU::detectFeatures()+0x1a6>
c0014dcd:	51                   	push   ecx
c0014dce:	51                   	push   ecx
c0014dcf:	68 37 26 02 c0       	push   0xc0022637
c0014dd4:	57                   	push   edi
c0014dd5:	e8 ee b9 fe ff       	call   c00007c8 <strcmp>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	85 c0                	test   eax,eax
c0014ddf:	74 2a                	je     c0014e0b <CPU::detectFeatures()+0x207>
c0014de1:	52                   	push   edx
c0014de2:	52                   	push   edx
c0014de3:	68 44 26 02 c0       	push   0xc0022644
c0014de8:	57                   	push   edi
c0014de9:	e8 da b9 fe ff       	call   c00007c8 <strcmp>
c0014dee:	83 c4 10             	add    esp,0x10
c0014df1:	85 c0                	test   eax,eax
c0014df3:	74 16                	je     c0014e0b <CPU::detectFeatures()+0x207>
c0014df5:	50                   	push   eax
c0014df6:	50                   	push   eax
c0014df7:	68 51 26 02 c0       	push   0xc0022651
c0014dfc:	57                   	push   edi
c0014dfd:	e8 c6 b9 fe ff       	call   c00007c8 <strcmp>
c0014e02:	83 c4 10             	add    esp,0x10
c0014e05:	85 c0                	test   eax,eax
c0014e07:	74 48                	je     c0014e51 <CPU::detectFeatures()+0x24d>
c0014e09:	eb 0f                	jmp    c0014e1a <CPU::detectFeatures()+0x216>
c0014e0b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014e15:	e9 c1 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014e1a:	50                   	push   eax
c0014e1b:	50                   	push   eax
c0014e1c:	68 5e 26 02 c0       	push   0xc002265e
c0014e21:	57                   	push   edi
c0014e22:	e8 a1 b9 fe ff       	call   c00007c8 <strcmp>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	85 c0                	test   eax,eax
c0014e2c:	74 23                	je     c0014e51 <CPU::detectFeatures()+0x24d>
c0014e2e:	50                   	push   eax
c0014e2f:	50                   	push   eax
c0014e30:	68 6b 26 02 c0       	push   0xc002266b
c0014e35:	57                   	push   edi
c0014e36:	e8 8d b9 fe ff       	call   c00007c8 <strcmp>
c0014e3b:	83 c4 10             	add    esp,0x10
c0014e3e:	85 c0                	test   eax,eax
c0014e40:	75 1e                	jne    c0014e60 <CPU::detectFeatures()+0x25c>
c0014e42:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014e4c:	e9 8a 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014e51:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014e5b:	e9 7b 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014e60:	50                   	push   eax
c0014e61:	50                   	push   eax
c0014e62:	68 78 26 02 c0       	push   0xc0022678
c0014e67:	57                   	push   edi
c0014e68:	e8 5b b9 fe ff       	call   c00007c8 <strcmp>
c0014e6d:	83 c4 10             	add    esp,0x10
c0014e70:	85 c0                	test   eax,eax
c0014e72:	75 0f                	jne    c0014e83 <CPU::detectFeatures()+0x27f>
c0014e74:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014e7e:	e9 58 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014e83:	50                   	push   eax
c0014e84:	50                   	push   eax
c0014e85:	68 37 26 02 c0       	push   0xc0022637
c0014e8a:	57                   	push   edi
c0014e8b:	e8 38 b9 fe ff       	call   c00007c8 <strcmp>
c0014e90:	83 c4 10             	add    esp,0x10
c0014e93:	85 c0                	test   eax,eax
c0014e95:	75 0f                	jne    c0014ea6 <CPU::detectFeatures()+0x2a2>
c0014e97:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014ea1:	e9 35 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014ea6:	50                   	push   eax
c0014ea7:	50                   	push   eax
c0014ea8:	68 85 26 02 c0       	push   0xc0022685
c0014ead:	57                   	push   edi
c0014eae:	e8 15 b9 fe ff       	call   c00007c8 <strcmp>
c0014eb3:	83 c4 10             	add    esp,0x10
c0014eb6:	85 c0                	test   eax,eax
c0014eb8:	75 0f                	jne    c0014ec9 <CPU::detectFeatures()+0x2c5>
c0014eba:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014ec4:	e9 12 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014ec9:	51                   	push   ecx
c0014eca:	51                   	push   ecx
c0014ecb:	68 92 26 02 c0       	push   0xc0022692
c0014ed0:	57                   	push   edi
c0014ed1:	e8 f2 b8 fe ff       	call   c00007c8 <strcmp>
c0014ed6:	83 c4 10             	add    esp,0x10
c0014ed9:	85 c0                	test   eax,eax
c0014edb:	75 0f                	jne    c0014eec <CPU::detectFeatures()+0x2e8>
c0014edd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014ee7:	e9 ef 00 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014eec:	52                   	push   edx
c0014eed:	52                   	push   edx
c0014eee:	68 9f 26 02 c0       	push   0xc002269f
c0014ef3:	57                   	push   edi
c0014ef4:	e8 cf b8 fe ff       	call   c00007c8 <strcmp>
c0014ef9:	83 c4 10             	add    esp,0x10
c0014efc:	85 c0                	test   eax,eax
c0014efe:	75 0f                	jne    c0014f0f <CPU::detectFeatures()+0x30b>
c0014f00:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014f0a:	e9 cc 00 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014f0f:	50                   	push   eax
c0014f10:	50                   	push   eax
c0014f11:	68 ac 26 02 c0       	push   0xc00226ac
c0014f16:	57                   	push   edi
c0014f17:	e8 ac b8 fe ff       	call   c00007c8 <strcmp>
c0014f1c:	83 c4 10             	add    esp,0x10
c0014f1f:	85 c0                	test   eax,eax
c0014f21:	75 0f                	jne    c0014f32 <CPU::detectFeatures()+0x32e>
c0014f23:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014f2d:	e9 a9 00 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014f32:	50                   	push   eax
c0014f33:	50                   	push   eax
c0014f34:	68 b9 26 02 c0       	push   0xc00226b9
c0014f39:	57                   	push   edi
c0014f3a:	e8 89 b8 fe ff       	call   c00007c8 <strcmp>
c0014f3f:	83 c4 10             	add    esp,0x10
c0014f42:	85 c0                	test   eax,eax
c0014f44:	75 0f                	jne    c0014f55 <CPU::detectFeatures()+0x351>
c0014f46:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014f50:	e9 86 00 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014f55:	50                   	push   eax
c0014f56:	50                   	push   eax
c0014f57:	68 c6 26 02 c0       	push   0xc00226c6
c0014f5c:	57                   	push   edi
c0014f5d:	e8 66 b8 fe ff       	call   c00007c8 <strcmp>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	85 c0                	test   eax,eax
c0014f67:	75 0c                	jne    c0014f75 <CPU::detectFeatures()+0x371>
c0014f69:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014f73:	eb 66                	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014f75:	50                   	push   eax
c0014f76:	50                   	push   eax
c0014f77:	68 d3 26 02 c0       	push   0xc00226d3
c0014f7c:	57                   	push   edi
c0014f7d:	e8 46 b8 fe ff       	call   c00007c8 <strcmp>
c0014f82:	83 c4 10             	add    esp,0x10
c0014f85:	85 c0                	test   eax,eax
c0014f87:	75 0c                	jne    c0014f95 <CPU::detectFeatures()+0x391>
c0014f89:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014f93:	eb 46                	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014f95:	50                   	push   eax
c0014f96:	50                   	push   eax
c0014f97:	68 e0 26 02 c0       	push   0xc00226e0
c0014f9c:	57                   	push   edi
c0014f9d:	e8 26 b8 fe ff       	call   c00007c8 <strcmp>
c0014fa2:	83 c4 10             	add    esp,0x10
c0014fa5:	85 c0                	test   eax,eax
c0014fa7:	74 e0                	je     c0014f89 <CPU::detectFeatures()+0x385>
c0014fa9:	50                   	push   eax
c0014faa:	50                   	push   eax
c0014fab:	68 ed 26 02 c0       	push   0xc00226ed
c0014fb0:	57                   	push   edi
c0014fb1:	e8 12 b8 fe ff       	call   c00007c8 <strcmp>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	85 c0                	test   eax,eax
c0014fbb:	74 cc                	je     c0014f89 <CPU::detectFeatures()+0x385>
c0014fbd:	51                   	push   ecx
c0014fbe:	51                   	push   ecx
c0014fbf:	68 fa 26 02 c0       	push   0xc00226fa
c0014fc4:	57                   	push   edi
c0014fc5:	e8 fe b7 fe ff       	call   c00007c8 <strcmp>
c0014fca:	83 c4 10             	add    esp,0x10
c0014fcd:	85 c0                	test   eax,eax
c0014fcf:	74 b8                	je     c0014f89 <CPU::detectFeatures()+0x385>
c0014fd1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014fdb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014fe0:	0f 86 be 00 00 00    	jbe    c00150a4 <CPU::detectFeatures()+0x4a0>
c0014fe6:	83 ec 0c             	sub    esp,0xc
c0014fe9:	68 80 00 00 00       	push   0x80
c0014fee:	e8 96 f8 ff ff       	call   c0014889 <cpuidCheckExtendedEBX(unsigned int)>
c0014ff3:	83 e0 01             	and    eax,0x1
c0014ff6:	c1 e0 06             	shl    eax,0x6
c0014ff9:	88 c2                	mov    dl,al
c0014ffb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0015001:	83 e0 bf             	and    eax,0xffffffbf
c0015004:	09 d0                	or     eax,edx
c0015006:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001500c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0015013:	e8 71 f8 ff ff       	call   c0014889 <cpuidCheckExtendedEBX(unsigned int)>
c0015018:	83 e0 01             	and    eax,0x1
c001501b:	c1 e0 04             	shl    eax,0x4
c001501e:	88 c2                	mov    dl,al
c0015020:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015026:	83 e0 ef             	and    eax,0xffffffef
c0015029:	09 d0                	or     eax,edx
c001502b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015031:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0015038:	e8 4c f8 ff ff       	call   c0014889 <cpuidCheckExtendedEBX(unsigned int)>
c001503d:	c1 e0 07             	shl    eax,0x7
c0015040:	88 c2                	mov    dl,al
c0015042:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0015048:	83 e0 7f             	and    eax,0x7f
c001504b:	09 d0                	or     eax,edx
c001504d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0015053:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001505a:	e8 57 f8 ff ff       	call   c00148b6 <cpuidCheckExtendedECX(unsigned int)>
c001505f:	83 e0 01             	and    eax,0x1
c0015062:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015069:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001506f:	83 e0 f7             	and    eax,0xfffffff7
c0015072:	09 d0                	or     eax,edx
c0015074:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001507a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0015081:	e8 30 f8 ff ff       	call   c00148b6 <cpuidCheckExtendedECX(unsigned int)>
c0015086:	83 c4 10             	add    esp,0x10
c0015089:	83 e0 01             	and    eax,0x1
c001508c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0015093:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0015099:	83 e0 fb             	and    eax,0xfffffffb
c001509c:	09 d0                	or     eax,edx
c001509e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00150a4:	83 ec 0c             	sub    esp,0xc
c00150a7:	56                   	push   esi
c00150a8:	55                   	push   ebp
c00150a9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00150ad:	57                   	push   edi
c00150ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00150b2:	50                   	push   eax
c00150b3:	6a 01                	push   0x1
c00150b5:	e8 f2 f6 ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150be:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00150c4:	88 c1                	mov    cl,al
c00150c6:	83 e2 f0             	and    edx,0xfffffff0
c00150c9:	83 e1 0f             	and    ecx,0xf
c00150cc:	09 ca                	or     edx,ecx
c00150ce:	88 c1                	mov    cl,al
c00150d0:	c0 e9 04             	shr    cl,0x4
c00150d3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00150d9:	0f b6 d1             	movzx  edx,cl
c00150dc:	c1 e2 06             	shl    edx,0x6
c00150df:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c00150e3:	89 d5                	mov    ebp,edx
c00150e5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00150eb:	66 81 e2 3f c0       	and    dx,0xc03f
c00150f0:	83 c4 20             	add    esp,0x20
c00150f3:	09 ea                	or     edx,ebp
c00150f5:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00150fc:	89 c2                	mov    edx,eax
c00150fe:	c1 ea 08             	shr    edx,0x8
c0015101:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0015107:	83 e2 0f             	and    edx,0xf
c001510a:	83 e1 3f             	and    ecx,0x3f
c001510d:	89 d5                	mov    ebp,edx
c001510f:	c1 e5 06             	shl    ebp,0x6
c0015112:	09 cd                	or     ebp,ecx
c0015114:	89 e9                	mov    ecx,ebp
c0015116:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001511c:	88 d1                	mov    cl,dl
c001511e:	c0 e9 02             	shr    cl,0x2
c0015121:	89 cd                	mov    ebp,ecx
c0015123:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0015129:	83 e1 c0             	and    ecx,0xffffffc0
c001512c:	09 cd                	or     ebp,ecx
c001512e:	89 e9                	mov    ecx,ebp
c0015130:	89 c5                	mov    ebp,eax
c0015132:	c1 ed 0c             	shr    ebp,0xc
c0015135:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001513b:	83 e5 03             	and    ebp,0x3
c001513e:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0015144:	c1 e5 04             	shl    ebp,0x4
c0015147:	83 e1 cf             	and    ecx,0xffffffcf
c001514a:	09 cd                	or     ebp,ecx
c001514c:	80 fa 06             	cmp    dl,0x6
c001514f:	89 e9                	mov    ecx,ebp
c0015151:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0015157:	74 05                	je     c001515e <CPU::detectFeatures()+0x55a>
c0015159:	80 fa 0f             	cmp    dl,0xf
c001515c:	75 5d                	jne    c00151bb <CPU::detectFeatures()+0x5b7>
c001515e:	89 c5                	mov    ebp,eax
c0015160:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015164:	c1 ed 10             	shr    ebp,0x10
c0015167:	c1 e5 04             	shl    ebp,0x4
c001516a:	09 e9                	or     ecx,ebp
c001516c:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0015172:	0f b6 c9             	movzx  ecx,cl
c0015175:	c1 e1 06             	shl    ecx,0x6
c0015178:	66 81 e5 3f c0       	and    bp,0xc03f
c001517d:	09 e9                	or     ecx,ebp
c001517f:	80 fa 0f             	cmp    dl,0xf
c0015182:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0015189:	75 30                	jne    c00151bb <CPU::detectFeatures()+0x5b7>
c001518b:	c1 e8 14             	shr    eax,0x14
c001518e:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0015194:	83 c0 0f             	add    eax,0xf
c0015197:	83 e2 3f             	and    edx,0x3f
c001519a:	88 c1                	mov    cl,al
c001519c:	c1 e1 06             	shl    ecx,0x6
c001519f:	c0 e8 02             	shr    al,0x2
c00151a2:	09 ca                	or     edx,ecx
c00151a4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00151aa:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00151b0:	83 e2 c0             	and    edx,0xffffffc0
c00151b3:	09 d0                	or     eax,edx
c00151b5:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00151bb:	83 ec 0c             	sub    esp,0xc
c00151be:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00151c5:	56                   	push   esi
c00151c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00151ca:	50                   	push   eax
c00151cb:	57                   	push   edi
c00151cc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00151d0:	55                   	push   ebp
c00151d1:	68 00 00 00 80       	push   0x80000000
c00151d6:	e8 d1 f5 ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151db:	83 c4 20             	add    esp,0x20
c00151de:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00151e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00151ea:	76 1e                	jbe    c001520a <CPU::detectFeatures()+0x606>
c00151ec:	83 ec 0c             	sub    esp,0xc
c00151ef:	56                   	push   esi
c00151f0:	50                   	push   eax
c00151f1:	57                   	push   edi
c00151f2:	55                   	push   ebp
c00151f3:	68 01 00 00 80       	push   0x80000001
c00151f8:	e8 af f5 ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151fd:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0015207:	83 c4 20             	add    esp,0x20
c001520a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0015210:	83 f8 01             	cmp    eax,0x1
c0015213:	75 6f                	jne    c0015284 <CPU::detectFeatures()+0x680>
c0015215:	51                   	push   ecx
c0015216:	51                   	push   ecx
c0015217:	68 06 27 02 c0       	push   0xc0022706
c001521c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015220:	56                   	push   esi
c0015221:	e8 51 b5 fe ff       	call   c0000777 <strcpy>
c0015226:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001522c:	5f                   	pop    edi
c001522d:	66 c1 e8 06          	shr    ax,0x6
c0015231:	5d                   	pop    ebp
c0015232:	0f b6 c0             	movzx  eax,al
c0015235:	50                   	push   eax
c0015236:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001523c:	c1 e8 0e             	shr    eax,0xe
c001523f:	0f b6 c0             	movzx  eax,al
c0015242:	50                   	push   eax
c0015243:	e8 04 f2 ff ff       	call   c001444c <lookupIntelCPUName(unsigned char, unsigned char)>
c0015248:	5a                   	pop    edx
c0015249:	59                   	pop    ecx
c001524a:	50                   	push   eax
c001524b:	56                   	push   esi
c001524c:	e8 dd b5 fe ff       	call   c000082e <strcat>
c0015251:	5f                   	pop    edi
c0015252:	5d                   	pop    ebp
c0015253:	56                   	push   esi
c0015254:	53                   	push   ebx
c0015255:	e8 c6 b5 ff ff       	call   c0010820 <Device::setName(char const*)>
c001525a:	58                   	pop    eax
c001525b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015261:	5a                   	pop    edx
c0015262:	68 0d 27 02 c0       	push   0xc002270d
c0015267:	50                   	push   eax
c0015268:	e8 5b b5 fe ff       	call   c00007c8 <strcmp>
c001526d:	83 c4 10             	add    esp,0x10
c0015270:	85 c0                	test   eax,eax
c0015272:	0f 85 53 03 00 00    	jne    c00155cb <CPU::detectFeatures()+0x9c7>
c0015278:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001527f:	e9 47 03 00 00       	jmp    c00155cb <CPU::detectFeatures()+0x9c7>
c0015284:	83 f8 02             	cmp    eax,0x2
c0015287:	0f 85 b5 00 00 00    	jne    c0015342 <CPU::detectFeatures()+0x73e>
c001528d:	57                   	push   edi
c001528e:	57                   	push   edi
c001528f:	68 1f 27 02 c0       	push   0xc002271f
c0015294:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015298:	56                   	push   esi
c0015299:	e8 d9 b4 fe ff       	call   c0000777 <strcpy>
c001529e:	5d                   	pop    ebp
c001529f:	58                   	pop    eax
c00152a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152a6:	66 c1 e8 06          	shr    ax,0x6
c00152aa:	0f b6 c0             	movzx  eax,al
c00152ad:	50                   	push   eax
c00152ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152b4:	c1 e8 0e             	shr    eax,0xe
c00152b7:	0f b6 c0             	movzx  eax,al
c00152ba:	50                   	push   eax
c00152bb:	e8 e7 ef ff ff       	call   c00142a7 <lookupAMDCPUName(unsigned char, unsigned char)>
c00152c0:	5a                   	pop    edx
c00152c1:	59                   	pop    ecx
c00152c2:	50                   	push   eax
c00152c3:	56                   	push   esi
c00152c4:	e8 65 b5 fe ff       	call   c000082e <strcat>
c00152c9:	5f                   	pop    edi
c00152ca:	5d                   	pop    ebp
c00152cb:	56                   	push   esi
c00152cc:	53                   	push   ebx
c00152cd:	e8 4e b5 ff ff       	call   c0010820 <Device::setName(char const*)>
c00152d2:	58                   	pop    eax
c00152d3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00152d9:	5a                   	pop    edx
c00152da:	68 24 27 02 c0       	push   0xc0022724
c00152df:	50                   	push   eax
c00152e0:	e8 e3 b4 fe ff       	call   c00007c8 <strcmp>
c00152e5:	83 c4 10             	add    esp,0x10
c00152e8:	85 c0                	test   eax,eax
c00152ea:	75 20                	jne    c001530c <CPU::detectFeatures()+0x708>
c00152ec:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00152f2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00152f8:	a8 01                	test   al,0x1
c00152fa:	74 10                	je     c001530c <CPU::detectFeatures()+0x708>
c00152fc:	83 e0 fe             	and    eax,0xfffffffe
c00152ff:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0015305:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001530c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015312:	c1 e8 0e             	shr    eax,0xe
c0015315:	3c 05                	cmp    al,0x5
c0015317:	0f 85 ae 02 00 00    	jne    c00155cb <CPU::detectFeatures()+0x9c7>
c001531d:	56                   	push   esi
c001531e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0015324:	83 e0 0f             	and    eax,0xf
c0015327:	50                   	push   eax
c0015328:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001532e:	66 c1 e8 06          	shr    ax,0x6
c0015332:	0f b6 c0             	movzx  eax,al
c0015335:	50                   	push   eax
c0015336:	6a 05                	push   0x5
c0015338:	e8 fc f3 ff ff       	call   c0014739 <AMD_K6_writeback(int, int, int)>
c001533d:	e9 ff 01 00 00       	jmp    c0015541 <CPU::detectFeatures()+0x93d>
c0015342:	89 c1                	mov    ecx,eax
c0015344:	83 e1 fd             	and    ecx,0xfffffffd
c0015347:	83 f9 04             	cmp    ecx,0x4
c001534a:	74 09                	je     c0015355 <CPU::detectFeatures()+0x751>
c001534c:	83 f8 03             	cmp    eax,0x3
c001534f:	0f 85 6f 01 00 00    	jne    c00154c4 <CPU::detectFeatures()+0x8c0>
c0015355:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001535b:	c1 ea 0e             	shr    edx,0xe
c001535e:	80 fa 05             	cmp    dl,0x5
c0015361:	75 62                	jne    c00153c5 <CPU::detectFeatures()+0x7c1>
c0015363:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015369:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001536e:	66 81 fa 00 01       	cmp    dx,0x100
c0015373:	75 0c                	jne    c0015381 <CPU::detectFeatures()+0x77d>
c0015375:	51                   	push   ecx
c0015376:	51                   	push   ecx
c0015377:	68 2b 27 02 c0       	push   0xc002272b
c001537c:	e9 ba 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015381:	66 81 fa 00 02       	cmp    dx,0x200
c0015386:	75 0c                	jne    c0015394 <CPU::detectFeatures()+0x790>
c0015388:	52                   	push   edx
c0015389:	52                   	push   edx
c001538a:	68 3e 27 02 c0       	push   0xc002273e
c001538f:	e9 a7 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015394:	66 81 fa 40 02       	cmp    dx,0x240
c0015399:	75 0c                	jne    c00153a7 <CPU::detectFeatures()+0x7a3>
c001539b:	50                   	push   eax
c001539c:	50                   	push   eax
c001539d:	68 50 27 02 c0       	push   0xc0022750
c00153a2:	e9 94 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c00153a7:	83 f8 06             	cmp    eax,0x6
c00153aa:	0f 84 ee 00 00 00    	je     c001549e <CPU::detectFeatures()+0x89a>
c00153b0:	83 f9 04             	cmp    ecx,0x4
c00153b3:	0f 84 f6 00 00 00    	je     c00154af <CPU::detectFeatures()+0x8ab>
c00153b9:	50                   	push   eax
c00153ba:	50                   	push   eax
c00153bb:	68 76 27 02 c0       	push   0xc0022776
c00153c0:	e9 76 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c00153c5:	80 fa 06             	cmp    dl,0x6
c00153c8:	0f 85 cb 00 00 00    	jne    c0015499 <CPU::detectFeatures()+0x895>
c00153ce:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00153d4:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00153d9:	66 81 fa 80 01       	cmp    dx,0x180
c00153de:	75 0c                	jne    c00153ec <CPU::detectFeatures()+0x7e8>
c00153e0:	50                   	push   eax
c00153e1:	50                   	push   eax
c00153e2:	68 81 27 02 c0       	push   0xc0022781
c00153e7:	e9 4f 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c00153ec:	66 81 fa c0 01       	cmp    dx,0x1c0
c00153f1:	74 07                	je     c00153fa <CPU::detectFeatures()+0x7f6>
c00153f3:	66 81 fa 00 02       	cmp    dx,0x200
c00153f8:	75 0c                	jne    c0015406 <CPU::detectFeatures()+0x802>
c00153fa:	50                   	push   eax
c00153fb:	50                   	push   eax
c00153fc:	68 91 27 02 c0       	push   0xc0022791
c0015401:	e9 35 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015406:	66 81 fa 40 02       	cmp    dx,0x240
c001540b:	75 0c                	jne    c0015419 <CPU::detectFeatures()+0x815>
c001540d:	50                   	push   eax
c001540e:	50                   	push   eax
c001540f:	68 98 27 02 c0       	push   0xc0022798
c0015414:	e9 22 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015419:	66 81 fa 80 02       	cmp    dx,0x280
c001541e:	74 07                	je     c0015427 <CPU::detectFeatures()+0x823>
c0015420:	66 81 fa 40 03       	cmp    dx,0x340
c0015425:	75 0c                	jne    c0015433 <CPU::detectFeatures()+0x82f>
c0015427:	50                   	push   eax
c0015428:	50                   	push   eax
c0015429:	68 a1 27 02 c0       	push   0xc00227a1
c001542e:	e9 08 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015433:	66 81 fa c0 03       	cmp    dx,0x3c0
c0015438:	75 0c                	jne    c0015446 <CPU::detectFeatures()+0x842>
c001543a:	55                   	push   ebp
c001543b:	55                   	push   ebp
c001543c:	68 a8 27 02 c0       	push   0xc00227a8
c0015441:	e9 f5 00 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015446:	83 f8 06             	cmp    eax,0x6
c0015449:	74 53                	je     c001549e <CPU::detectFeatures()+0x89a>
c001544b:	83 f9 04             	cmp    ecx,0x4
c001544e:	74 5f                	je     c00154af <CPU::detectFeatures()+0x8ab>
c0015450:	57                   	push   edi
c0015451:	57                   	push   edi
c0015452:	68 b1 27 02 c0       	push   0xc00227b1
c0015457:	53                   	push   ebx
c0015458:	e8 c3 b3 ff ff       	call   c0010820 <Device::setName(char const*)>
c001545d:	b1 c1                	mov    cl,0xc1
c001545f:	88 c8                	mov    al,cl
c0015461:	e6 22                	out    0x22,al
c0015463:	e4 23                	in     al,0x23
c0015465:	88 c2                	mov    dl,al
c0015467:	88 c8                	mov    al,cl
c0015469:	e6 22                	out    0x22,al
c001546b:	88 d0                	mov    al,dl
c001546d:	83 c8 10             	or     eax,0x10
c0015470:	e6 23                	out    0x23,al
c0015472:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0015479:	89 d0                	mov    eax,edx
c001547b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001547e:	40                   	inc    eax
c001547f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0015485:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0015489:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001548f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0015494:	e9 a8 00 00 00       	jmp    c0015541 <CPU::detectFeatures()+0x93d>
c0015499:	83 f8 06             	cmp    eax,0x6
c001549c:	75 0c                	jne    c00154aa <CPU::detectFeatures()+0x8a6>
c001549e:	56                   	push   esi
c001549f:	56                   	push   esi
c00154a0:	68 62 27 02 c0       	push   0xc0022762
c00154a5:	e9 91 00 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154aa:	83 f9 04             	cmp    ecx,0x4
c00154ad:	75 0c                	jne    c00154bb <CPU::detectFeatures()+0x8b7>
c00154af:	51                   	push   ecx
c00154b0:	51                   	push   ecx
c00154b1:	68 6e 27 02 c0       	push   0xc002276e
c00154b6:	e9 80 00 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154bb:	52                   	push   edx
c00154bc:	52                   	push   edx
c00154bd:	68 bc 27 02 c0       	push   0xc00227bc
c00154c2:	eb 77                	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154c4:	83 f8 07             	cmp    eax,0x7
c00154c7:	75 09                	jne    c00154d2 <CPU::detectFeatures()+0x8ce>
c00154c9:	50                   	push   eax
c00154ca:	50                   	push   eax
c00154cb:	68 c6 27 02 c0       	push   0xc00227c6
c00154d0:	eb 69                	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154d2:	83 f8 0a             	cmp    eax,0xa
c00154d5:	75 09                	jne    c00154e0 <CPU::detectFeatures()+0x8dc>
c00154d7:	50                   	push   eax
c00154d8:	50                   	push   eax
c00154d9:	68 d1 27 02 c0       	push   0xc00227d1
c00154de:	eb 5b                	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154e0:	83 f8 0b             	cmp    eax,0xb
c00154e3:	75 09                	jne    c00154ee <CPU::detectFeatures()+0x8ea>
c00154e5:	50                   	push   eax
c00154e6:	50                   	push   eax
c00154e7:	68 d9 27 02 c0       	push   0xc00227d9
c00154ec:	eb 4d                	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154ee:	83 f8 08             	cmp    eax,0x8
c00154f1:	75 09                	jne    c00154fc <CPU::detectFeatures()+0x8f8>
c00154f3:	50                   	push   eax
c00154f4:	50                   	push   eax
c00154f5:	68 e2 27 02 c0       	push   0xc00227e2
c00154fa:	eb 3f                	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154fc:	83 f8 09             	cmp    eax,0x9
c00154ff:	75 09                	jne    c001550a <CPU::detectFeatures()+0x906>
c0015501:	50                   	push   eax
c0015502:	50                   	push   eax
c0015503:	68 ea 27 02 c0       	push   0xc00227ea
c0015508:	eb 31                	jmp    c001553b <CPU::detectFeatures()+0x937>
c001550a:	83 f8 05             	cmp    eax,0x5
c001550d:	75 09                	jne    c0015518 <CPU::detectFeatures()+0x914>
c001550f:	50                   	push   eax
c0015510:	50                   	push   eax
c0015511:	68 f2 27 02 c0       	push   0xc00227f2
c0015516:	eb 23                	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015518:	83 f8 0c             	cmp    eax,0xc
c001551b:	75 09                	jne    c0015526 <CPU::detectFeatures()+0x922>
c001551d:	55                   	push   ebp
c001551e:	55                   	push   ebp
c001551f:	68 00 28 02 c0       	push   0xc0022800
c0015524:	eb 15                	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015526:	83 f8 0d             	cmp    eax,0xd
c0015529:	75 09                	jne    c0015534 <CPU::detectFeatures()+0x930>
c001552b:	57                   	push   edi
c001552c:	57                   	push   edi
c001552d:	68 0b 28 02 c0       	push   0xc002280b
c0015532:	eb 07                	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015534:	56                   	push   esi
c0015535:	56                   	push   esi
c0015536:	68 1f 28 02 c0       	push   0xc002281f
c001553b:	53                   	push   ebx
c001553c:	e8 df b2 ff ff       	call   c0010820 <Device::setName(char const*)>
c0015541:	83 c4 10             	add    esp,0x10
c0015544:	e9 82 00 00 00       	jmp    c00155cb <CPU::detectFeatures()+0x9c7>
c0015549:	51                   	push   ecx
c001554a:	51                   	push   ecx
c001554b:	68 6b 26 02 c0       	push   0xc002266b
c0015550:	57                   	push   edi
c0015551:	e8 21 b2 fe ff       	call   c0000777 <strcpy>
c0015556:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015560:	e8 e5 ac fe ff       	call   c000024a <is486>
c0015565:	83 c4 10             	add    esp,0x10
c0015568:	85 c0                	test   eax,eax
c001556a:	74 2d                	je     c0015599 <CPU::detectFeatures()+0x995>
c001556c:	52                   	push   edx
c001556d:	52                   	push   edx
c001556e:	68 2b 28 02 c0       	push   0xc002282b
c0015573:	53                   	push   ebx
c0015574:	e8 a7 b2 ff ff       	call   c0010820 <Device::setName(char const*)>
c0015579:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015580:	e8 e3 a5 00 00       	call   c001fb68 <CPU::readCR0()>
c0015585:	83 c4 10             	add    esp,0x10
c0015588:	83 e0 14             	and    eax,0x14
c001558b:	83 f8 04             	cmp    eax,0x4
c001558e:	75 1f                	jne    c00155af <CPU::detectFeatures()+0x9ab>
c0015590:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015597:	eb 32                	jmp    c00155cb <CPU::detectFeatures()+0x9c7>
c0015599:	50                   	push   eax
c001559a:	50                   	push   eax
c001559b:	68 36 28 02 c0       	push   0xc0022836
c00155a0:	53                   	push   ebx
c00155a1:	e8 7a b2 ff ff       	call   c0010820 <Device::setName(char const*)>
c00155a6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00155ad:	eb d1                	jmp    c0015580 <CPU::detectFeatures()+0x97c>
c00155af:	e8 71 ac fe ff       	call   c0000225 <hasLegacyFPU>
c00155b4:	83 e0 01             	and    eax,0x1
c00155b7:	8d 14 00             	lea    edx,[eax+eax*1]
c00155ba:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00155c0:	83 e0 fd             	and    eax,0xfffffffd
c00155c3:	09 d0                	or     eax,edx
c00155c5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00155cb:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00155d2:	83 c4 4c             	add    esp,0x4c
c00155d5:	5b                   	pop    ebx
c00155d6:	5e                   	pop    esi
c00155d7:	5f                   	pop    edi
c00155d8:	5d                   	pop    ebp
c00155d9:	c3                   	ret    

c00155da <CPU::setupSMEP()>:
c00155da:	83 ec 0c             	sub    esp,0xc
c00155dd:	e8 50 a8 00 00       	call   c001fe32 <CPU::readCR4()>
c00155e2:	0d 00 00 10 00       	or     eax,0x100000
c00155e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155eb:	83 c4 0c             	add    esp,0xc
c00155ee:	e9 5a a8 00 00       	jmp    c001fe4d <CPU::writeCR4(unsigned long)>
c00155f3:	90                   	nop

c00155f4 <CPU::setupUMIP()>:
c00155f4:	83 ec 0c             	sub    esp,0xc
c00155f7:	e8 36 a8 00 00       	call   c001fe32 <CPU::readCR4()>
c00155fc:	80 cc 08             	or     ah,0x8
c00155ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015603:	83 c4 0c             	add    esp,0xc
c0015606:	e9 42 a8 00 00       	jmp    c001fe4d <CPU::writeCR4(unsigned long)>
c001560b:	90                   	nop

c001560c <CPU::setupTSC()>:
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	e8 1e a8 00 00       	call   c001fe32 <CPU::readCR4()>
c0015614:	83 c8 04             	or     eax,0x4
c0015617:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001561b:	83 c4 0c             	add    esp,0xc
c001561e:	e9 2a a8 00 00       	jmp    c001fe4d <CPU::writeCR4(unsigned long)>
c0015623:	90                   	nop

c0015624 <CPU::setupLargePages()>:
c0015624:	83 ec 0c             	sub    esp,0xc
c0015627:	e8 06 a8 00 00       	call   c001fe32 <CPU::readCR4()>
c001562c:	83 c8 10             	or     eax,0x10
c001562f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015633:	83 c4 0c             	add    esp,0xc
c0015636:	e9 12 a8 00 00       	jmp    c001fe4d <CPU::writeCR4(unsigned long)>
c001563b:	90                   	nop

c001563c <CPU::setupPAT()>:
c001563c:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0015641:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0015648:	74 2c                	je     c0015676 <CPU::setupPAT()+0x3a>
c001564a:	53                   	push   ebx
c001564b:	83 ec 10             	sub    esp,0x10
c001564e:	68 77 02 00 00       	push   0x277
c0015653:	50                   	push   eax
c0015654:	e8 3b 5f ff ff       	call   c000b594 <Computer::rdmsr(unsigned int)>
c0015659:	83 e2 f8             	and    edx,0xfffffff8
c001565c:	83 ca 01             	or     edx,0x1
c001565f:	52                   	push   edx
c0015660:	50                   	push   eax
c0015661:	68 77 02 00 00       	push   0x277
c0015666:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c001566c:	e8 4f 5f ff ff       	call   c000b5c0 <Computer::wrmsr(unsigned int, unsigned long long)>
c0015671:	83 c4 28             	add    esp,0x28
c0015674:	5b                   	pop    ebx
c0015675:	c3                   	ret    
c0015676:	c3                   	ret    
c0015677:	90                   	nop

c0015678 <CPU::setupMTRR()>:
c0015678:	c3                   	ret    
c0015679:	90                   	nop

c001567a <CPU::setupGlobalPages()>:
c001567a:	83 ec 0c             	sub    esp,0xc
c001567d:	e8 b0 a7 00 00       	call   c001fe32 <CPU::readCR4()>
c0015682:	0c 80                	or     al,0x80
c0015684:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015688:	83 c4 0c             	add    esp,0xc
c001568b:	e9 bd a7 00 00       	jmp    c001fe4d <CPU::writeCR4(unsigned long)>

c0015690 <CPU::allowUsermodeDataAccess()>:
c0015690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015694:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001569b:	74 03                	je     c00156a0 <CPU::allowUsermodeDataAccess()+0x10>
c001569d:	0f 01 cb             	stac   
c00156a0:	c3                   	ret    
c00156a1:	90                   	nop

c00156a2 <CPU::prohibitUsermodeDataAccess()>:
c00156a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156a6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00156ad:	74 03                	je     c00156b2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00156af:	0f 01 ca             	clac   
c00156b2:	c3                   	ret    
c00156b3:	90                   	nop

c00156b4 <CPU::setupSMAP()>:
c00156b4:	53                   	push   ebx
c00156b5:	83 ec 08             	sub    esp,0x8
c00156b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156bc:	e8 71 a7 00 00       	call   c001fe32 <CPU::readCR4()>
c00156c1:	83 ec 0c             	sub    esp,0xc
c00156c4:	0d 00 00 20 00       	or     eax,0x200000
c00156c9:	50                   	push   eax
c00156ca:	e8 7e a7 00 00       	call   c001fe4d <CPU::writeCR4(unsigned long)>
c00156cf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00156d3:	83 c4 18             	add    esp,0x18
c00156d6:	5b                   	pop    ebx
c00156d7:	eb c9                	jmp    c00156a2 <CPU::prohibitUsermodeDataAccess()>
c00156d9:	90                   	nop

c00156da <CPU::setupFeatures()>:
c00156da:	53                   	push   ebx
c00156db:	83 ec 08             	sub    esp,0x8
c00156de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156e2:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00156e9:	74 0c                	je     c00156f7 <CPU::setupFeatures()+0x1d>
c00156eb:	83 ec 0c             	sub    esp,0xc
c00156ee:	53                   	push   ebx
c00156ef:	e8 e6 fe ff ff       	call   c00155da <CPU::setupSMEP()>
c00156f4:	83 c4 10             	add    esp,0x10
c00156f7:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00156fe:	74 0c                	je     c001570c <CPU::setupFeatures()+0x32>
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	53                   	push   ebx
c0015704:	e8 ab ff ff ff       	call   c00156b4 <CPU::setupSMAP()>
c0015709:	83 c4 10             	add    esp,0x10
c001570c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0015713:	74 0c                	je     c0015721 <CPU::setupFeatures()+0x47>
c0015715:	83 ec 0c             	sub    esp,0xc
c0015718:	53                   	push   ebx
c0015719:	e8 d6 fe ff ff       	call   c00155f4 <CPU::setupUMIP()>
c001571e:	83 c4 10             	add    esp,0x10
c0015721:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0015728:	74 0c                	je     c0015736 <CPU::setupFeatures()+0x5c>
c001572a:	83 ec 0c             	sub    esp,0xc
c001572d:	53                   	push   ebx
c001572e:	e8 d9 fe ff ff       	call   c001560c <CPU::setupTSC()>
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001573d:	74 0c                	je     c001574b <CPU::setupFeatures()+0x71>
c001573f:	83 ec 0c             	sub    esp,0xc
c0015742:	53                   	push   ebx
c0015743:	e8 dc fe ff ff       	call   c0015624 <CPU::setupLargePages()>
c0015748:	83 c4 10             	add    esp,0x10
c001574b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015752:	74 0c                	je     c0015760 <CPU::setupFeatures()+0x86>
c0015754:	83 ec 0c             	sub    esp,0xc
c0015757:	53                   	push   ebx
c0015758:	e8 1d ff ff ff       	call   c001567a <CPU::setupGlobalPages()>
c001575d:	83 c4 10             	add    esp,0x10
c0015760:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015767:	74 0d                	je     c0015776 <CPU::setupFeatures()+0x9c>
c0015769:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001576d:	83 c4 08             	add    esp,0x8
c0015770:	5b                   	pop    ebx
c0015771:	e9 c6 fe ff ff       	jmp    c001563c <CPU::setupPAT()>
c0015776:	83 c4 08             	add    esp,0x8
c0015779:	5b                   	pop    ebx
c001577a:	c3                   	ret    
c001577b:	90                   	nop

c001577c <CPU::open(int, int, void*)>:
c001577c:	57                   	push   edi
c001577d:	56                   	push   esi
c001577e:	53                   	push   ebx
c001577f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015783:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015787:	83 ec 0c             	sub    esp,0xc
c001578a:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015790:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015796:	50                   	push   eax
c0015797:	e8 e8 60 ff ff       	call   c000b884 <GDT::setup()>
c001579c:	83 c4 0c             	add    esp,0xc
c001579f:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00157a5:	6a 00                	push   0x0
c00157a7:	68 ef be ad de       	push   0xdeadbeef
c00157ac:	57                   	push   edi
c00157ad:	e8 68 83 ff ff       	call   c000db1a <TSS::setup(unsigned long, unsigned long)>
c00157b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157b5:	e8 40 83 ff ff       	call   c000dafa <TSS::flush()>
c00157ba:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00157c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00157c3:	e8 16 63 ff ff       	call   c000bade <IDT::setup()>
c00157c8:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00157cf:	e8 70 a6 00 00       	call   c001fe44 <CPU::writeDR7(unsigned long)>
c00157d4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00157de:	e8 ea 6d ff ff       	call   c000c5cd <Phys::allocatePage()>
c00157e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00157e9:	89 30                	mov    DWORD PTR [eax],esi
c00157eb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00157f1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00157f4:	58                   	pop    eax
c00157f5:	5a                   	pop    edx
c00157f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00157fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015800:	e8 a9 93 ff ff       	call   c000ebae <VAS::setCPUSpecific(unsigned long)>
c0015805:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015808:	e8 f7 f3 ff ff       	call   c0014c04 <CPU::detectFeatures()>
c001580d:	e8 22 c3 ff ff       	call   c0011b34 <setupInterruptController()>
c0015812:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0015818:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c001581d:	83 e0 10             	and    eax,0x10
c0015820:	83 f8 01             	cmp    eax,0x1
c0015823:	19 c0                	sbb    eax,eax
c0015825:	83 e0 46             	and    eax,0x46
c0015828:	83 c0 1e             	add    eax,0x1e
c001582b:	89 04 24             	mov    DWORD PTR [esp],eax
c001582e:	e8 a7 d6 ff ff       	call   c0012eda <setupTimer(int)>
c0015833:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0015839:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001583c:	e8 99 fe ff ff       	call   c00156da <CPU::setupFeatures()>
c0015841:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015844:	e8 3f f1 ff ff       	call   c0014988 <CPU::displayFeatures()>
c0015849:	83 c4 10             	add    esp,0x10
c001584c:	5b                   	pop    ebx
c001584d:	31 c0                	xor    eax,eax
c001584f:	5e                   	pop    esi
c0015850:	5f                   	pop    edi
c0015851:	c3                   	ret    

c0015852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015852:	56                   	push   esi
c0015853:	53                   	push   ebx
c0015854:	51                   	push   ecx
c0015855:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015859:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001585d:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015860:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015863:	88 c1                	mov    cl,al
c0015865:	c0 e9 06             	shr    cl,0x6
c0015868:	88 0c 24             	mov    BYTE PTR [esp],cl
c001586b:	88 c1                	mov    cl,al
c001586d:	66 c1 e8 03          	shr    ax,0x3
c0015871:	83 e1 07             	and    ecx,0x7
c0015874:	83 e0 07             	and    eax,0x7
c0015877:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001587b:	88 06                	mov    BYTE PTR [esi],al
c001587d:	74 7f                	je     c00158fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001587f:	80 f9 04             	cmp    cl,0x4
c0015882:	74 7a                	je     c00158fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015884:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015888:	75 05                	jne    c001588f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c001588a:	80 f9 05             	cmp    cl,0x5
c001588d:	74 6f                	je     c00158fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001588f:	84 c9                	test   cl,cl
c0015891:	75 05                	jne    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c0015893:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015896:	eb 3c                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015898:	80 f9 01             	cmp    cl,0x1
c001589b:	75 05                	jne    c00158a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c001589d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00158a0:	eb 32                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158a2:	80 f9 02             	cmp    cl,0x2
c00158a5:	75 05                	jne    c00158ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c00158a7:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00158aa:	eb 28                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158ac:	31 c0                	xor    eax,eax
c00158ae:	80 f9 03             	cmp    cl,0x3
c00158b1:	75 05                	jne    c00158b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c00158b3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00158b6:	eb 1c                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158b8:	80 f9 05             	cmp    cl,0x5
c00158bb:	75 05                	jne    c00158c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00158bd:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158c0:	eb 12                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158c2:	80 f9 06             	cmp    cl,0x6
c00158c5:	75 05                	jne    c00158cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00158c7:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158ca:	eb 08                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158cc:	80 f9 07             	cmp    cl,0x7
c00158cf:	75 03                	jne    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158d1:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158d4:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00158d8:	75 10                	jne    c00158ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00158da:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00158de:	b9 03 00 00 00       	mov    ecx,0x3
c00158e3:	01 d0                	add    eax,edx
c00158e5:	e9 42 01 00 00       	jmp    c0015a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158ea:	b9 02 00 00 00       	mov    ecx,0x2
c00158ef:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00158f3:	0f 85 33 01 00 00    	jne    c0015a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158f9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00158fc:	eb 18                	jmp    c0015916 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00158fe:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015902:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c0015907:	80 f9 05             	cmp    cl,0x5
c001590a:	0f 94 c0             	sete   al
c001590d:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c0015911:	74 0d                	je     c0015920 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0015913:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0015916:	b9 06 00 00 00       	mov    ecx,0x6
c001591b:	e9 0c 01 00 00       	jmp    c0015a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015920:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015924:	0f 84 06 01 00 00    	je     c0015a30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c001592a:	80 f9 04             	cmp    cl,0x4
c001592d:	0f 85 06 01 00 00    	jne    c0015a39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015933:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0015936:	89 c6                	mov    esi,eax
c0015938:	88 c1                	mov    cl,al
c001593a:	66 c1 ee 03          	shr    si,0x3
c001593e:	c0 e9 06             	shr    cl,0x6
c0015941:	83 e6 07             	and    esi,0x7
c0015944:	24 07                	and    al,0x7
c0015946:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c001594a:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001594e:	89 f1                	mov    ecx,esi
c0015950:	75 05                	jne    c0015957 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c0015952:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c0015955:	eb 4b                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015957:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001595c:	75 05                	jne    c0015963 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c001595e:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015961:	eb 3f                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015963:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015968:	75 05                	jne    c001596f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c001596a:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c001596d:	eb 33                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001596f:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015974:	75 05                	jne    c001597b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015976:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015979:	eb 27                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001597b:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c0015980:	75 05                	jne    c0015987 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c0015982:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c0015985:	eb 1b                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015987:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c001598c:	75 05                	jne    c0015993 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c001598e:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c0015991:	eb 0f                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015993:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015998:	75 05                	jne    c001599f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c001599a:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c001599d:	eb 03                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001599f:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00159a2:	84 c9                	test   cl,cl
c00159a4:	75 05                	jne    c00159ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00159a6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c00159a9:	eb 3c                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159ab:	80 f9 01             	cmp    cl,0x1
c00159ae:	75 05                	jne    c00159b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00159b0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00159b3:	eb 32                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159b5:	80 f9 02             	cmp    cl,0x2
c00159b8:	75 05                	jne    c00159bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00159ba:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00159bd:	eb 28                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159bf:	80 f9 03             	cmp    cl,0x3
c00159c2:	75 05                	jne    c00159c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00159c4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00159c7:	eb 1e                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159c9:	31 c0                	xor    eax,eax
c00159cb:	80 f9 04             	cmp    cl,0x4
c00159ce:	74 17                	je     c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159d0:	80 f9 05             	cmp    cl,0x5
c00159d3:	75 05                	jne    c00159da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00159d5:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00159d8:	eb 0d                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159da:	80 f9 06             	cmp    cl,0x6
c00159dd:	75 05                	jne    c00159e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00159df:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00159e2:	eb 03                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159e4:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00159e7:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00159ec:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00159f0:	0f 94 c2             	sete   dl
c00159f3:	d3 e0                	shl    eax,cl
c00159f5:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00159f9:	74 07                	je     c0015a02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00159fb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00159fe:	31 d2                	xor    edx,edx
c0015a00:	eb 23                	jmp    c0015a25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0015a02:	01 f0                	add    eax,esi
c0015a04:	b9 03 00 00 00       	mov    ecx,0x3
c0015a09:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015a0d:	74 33                	je     c0015a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a0f:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015a13:	75 0d                	jne    c0015a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c0015a15:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0015a19:	01 c8                	add    eax,ecx
c0015a1b:	b9 04 00 00 00       	mov    ecx,0x4
c0015a20:	eb 20                	jmp    c0015a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a22:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015a25:	b9 07 00 00 00       	mov    ecx,0x7
c0015a2a:	eb 16                	jmp    c0015a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a2c:	31 d2                	xor    edx,edx
c0015a2e:	eb 12                	jmp    c0015a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a30:	b9 02 00 00 00       	mov    ecx,0x2
c0015a35:	b2 01                	mov    dl,0x1
c0015a37:	eb 07                	jmp    c0015a40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015a39:	31 d2                	xor    edx,edx
c0015a3b:	b9 02 00 00 00       	mov    ecx,0x2
c0015a40:	31 c0                	xor    eax,eax
c0015a42:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a46:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015a48:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015a4c:	88 11                	mov    BYTE PTR [ecx],dl
c0015a4e:	5a                   	pop    edx
c0015a4f:	5b                   	pop    ebx
c0015a50:	5e                   	pop    esi
c0015a51:	c3                   	ret    

c0015a52 <Krnl::panic(char const*)>:
c0015a52:	55                   	push   ebp
c0015a53:	89 e5                	mov    ebp,esp
c0015a55:	53                   	push   ebx
c0015a56:	51                   	push   ecx
c0015a57:	a1 f0 51 02 c0       	mov    eax,ds:0xc00251f0
c0015a5c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015a5f:	85 c0                	test   eax,eax
c0015a61:	74 02                	je     c0015a65 <Krnl::panic(char const*)+0x13>
c0015a63:	ff d0                	call   eax
c0015a65:	fa                   	cli    
c0015a66:	50                   	push   eax
c0015a67:	c6 05 f4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251f4,0x1
c0015a6e:	50                   	push   eax
c0015a6f:	c6 05 e0 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023be0,0x0
c0015a76:	53                   	push   ebx
c0015a77:	68 70 28 02 c0       	push   0xc0022870
c0015a7c:	e8 a8 97 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0015a81:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a86:	5a                   	pop    edx
c0015a87:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a8d:	51                   	push   ecx
c0015a8e:	e8 c6 78 ff ff       	call   c000d359 <setActiveTerminal(VgaText*)>
c0015a93:	83 c4 0c             	add    esp,0xc
c0015a96:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a9b:	6a 01                	push   0x1
c0015a9d:	6a 0f                	push   0xf
c0015a9f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015aa5:	50                   	push   eax
c0015aa6:	e8 ed 72 ff ff       	call   c000cd98 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015aab:	58                   	pop    eax
c0015aac:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ab1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ab7:	50                   	push   eax
c0015ab8:	e8 3f 7b ff ff       	call   c000d5fc <VgaText::clearScreen()>
c0015abd:	58                   	pop    eax
c0015abe:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ac3:	5a                   	pop    edx
c0015ac4:	68 89 28 02 c0       	push   0xc0022889
c0015ac9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015acf:	51                   	push   ecx
c0015ad0:	e8 a5 7c ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015ad5:	58                   	pop    eax
c0015ad6:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015adb:	5a                   	pop    edx
c0015adc:	68 30 29 02 c0       	push   0xc0022930
c0015ae1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ae7:	51                   	push   ecx
c0015ae8:	e8 8d 7c ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015aed:	58                   	pop    eax
c0015aee:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015af3:	5a                   	pop    edx
c0015af4:	68 a5 28 02 c0       	push   0xc00228a5
c0015af9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015aff:	51                   	push   ecx
c0015b00:	e8 75 7c ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015b05:	58                   	pop    eax
c0015b06:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b0b:	5a                   	pop    edx
c0015b0c:	53                   	push   ebx
c0015b0d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b13:	51                   	push   ecx
c0015b14:	e8 61 7c ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015b19:	5b                   	pop    ebx
c0015b1a:	58                   	pop    eax
c0015b1b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b20:	68 c5 28 02 c0       	push   0xc00228c5
c0015b25:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b2b:	50                   	push   eax
c0015b2c:	e8 49 7c ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015b31:	58                   	pop    eax
c0015b32:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b37:	5a                   	pop    edx
c0015b38:	68 6c 29 02 c0       	push   0xc002296c
c0015b3d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b43:	51                   	push   ecx
c0015b44:	e8 31 7c ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015b49:	5b                   	pop    ebx
c0015b4a:	58                   	pop    eax
c0015b4b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b50:	68 a5 28 02 c0       	push   0xc00228a5
c0015b55:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b5b:	50                   	push   eax
c0015b5c:	e8 19 7c ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015b61:	58                   	pop    eax
c0015b62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b67:	5a                   	pop    edx
c0015b68:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b6b:	83 c0 0c             	add    eax,0xc
c0015b6e:	50                   	push   eax
c0015b6f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b74:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b7a:	51                   	push   ecx
c0015b7b:	e8 fa 7b ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015b80:	5b                   	pop    ebx
c0015b81:	58                   	pop    eax
c0015b82:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b87:	68 c4 28 02 c0       	push   0xc00228c4
c0015b8c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b92:	50                   	push   eax
c0015b93:	e8 e2 7b ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015b98:	58                   	pop    eax
c0015b99:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b9e:	5a                   	pop    edx
c0015b9f:	68 98 29 02 c0       	push   0xc0022998
c0015ba4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015baa:	51                   	push   ecx
c0015bab:	e8 ca 7b ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015bb0:	5b                   	pop    ebx
c0015bb1:	58                   	pop    eax
c0015bb2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015bb7:	68 d8 29 02 c0       	push   0xc00229d8
c0015bbc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bc2:	50                   	push   eax
c0015bc3:	e8 b2 7b ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015bc8:	58                   	pop    eax
c0015bc9:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015bce:	5a                   	pop    edx
c0015bcf:	68 b0 28 02 c0       	push   0xc00228b0
c0015bd4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bda:	51                   	push   ecx
c0015bdb:	e8 9a 7b ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015be0:	5b                   	pop    ebx
c0015be1:	58                   	pop    eax
c0015be2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015be5:	50                   	push   eax
c0015be6:	68 c8 28 02 c0       	push   0xc00228c8
c0015beb:	e8 39 96 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0015bf0:	58                   	pop    eax
c0015bf1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bf4:	5a                   	pop    edx
c0015bf5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bf8:	51                   	push   ecx
c0015bf9:	68 d1 28 02 c0       	push   0xc00228d1
c0015bfe:	e8 26 96 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0015c03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015c06:	5b                   	pop    ebx
c0015c07:	5a                   	pop    edx
c0015c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015c0d:	51                   	push   ecx
c0015c0e:	68 da 28 02 c0       	push   0xc00228da
c0015c13:	e8 11 96 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0015c18:	5b                   	pop    ebx
c0015c19:	58                   	pop    eax
c0015c1a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c1f:	68 1c 2a 02 c0       	push   0xc0022a1c
c0015c24:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c2a:	50                   	push   eax
c0015c2b:	e8 4a 7b ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015c30:	58                   	pop    eax
c0015c31:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c36:	5a                   	pop    edx
c0015c37:	68 e3 28 02 c0       	push   0xc00228e3
c0015c3c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c42:	51                   	push   ecx
c0015c43:	e8 32 7b ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015c48:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c4d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c53:	e8 10 9f 00 00       	call   c001fb68 <CPU::readCR0()>
c0015c58:	5a                   	pop    edx
c0015c59:	59                   	pop    ecx
c0015c5a:	50                   	push   eax
c0015c5b:	53                   	push   ebx
c0015c5c:	e8 3f 7b ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0015c61:	5b                   	pop    ebx
c0015c62:	58                   	pop    eax
c0015c63:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c68:	68 ed 28 02 c0       	push   0xc00228ed
c0015c6d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c73:	50                   	push   eax
c0015c74:	e8 01 7b ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015c79:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c7e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c84:	e8 cd a1 00 00       	call   c001fe56 <CPU::readCR2()>
c0015c89:	5a                   	pop    edx
c0015c8a:	59                   	pop    ecx
c0015c8b:	50                   	push   eax
c0015c8c:	53                   	push   ebx
c0015c8d:	e8 0e 7b ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0015c92:	5b                   	pop    ebx
c0015c93:	58                   	pop    eax
c0015c94:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c99:	68 f7 28 02 c0       	push   0xc00228f7
c0015c9e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ca4:	50                   	push   eax
c0015ca5:	e8 d0 7a ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015caa:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015caf:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015cb5:	e8 3b 9b 00 00       	call   c001f7f5 <CPU::readCR3()>
c0015cba:	5a                   	pop    edx
c0015cbb:	59                   	pop    ecx
c0015cbc:	50                   	push   eax
c0015cbd:	53                   	push   ebx
c0015cbe:	e8 dd 7a ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0015cc3:	5b                   	pop    ebx
c0015cc4:	58                   	pop    eax
c0015cc5:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cca:	68 0a 29 02 c0       	push   0xc002290a
c0015ccf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cd5:	50                   	push   eax
c0015cd6:	e8 9f 7a ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015cdb:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ce0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ce6:	e8 47 a1 00 00       	call   c001fe32 <CPU::readCR4()>
c0015ceb:	5a                   	pop    edx
c0015cec:	59                   	pop    ecx
c0015ced:	50                   	push   eax
c0015cee:	53                   	push   ebx
c0015cef:	e8 ac 7a ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0015cf4:	5b                   	pop    ebx
c0015cf5:	58                   	pop    eax
c0015cf6:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cfb:	68 14 29 02 c0       	push   0xc0022914
c0015d00:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d06:	50                   	push   eax
c0015d07:	e8 6e 7a ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015d0c:	5a                   	pop    edx
c0015d0d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d12:	59                   	pop    ecx
c0015d13:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015d16:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d1c:	53                   	push   ebx
c0015d1d:	50                   	push   eax
c0015d1e:	e8 7d 7a ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0015d23:	58                   	pop    eax
c0015d24:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d29:	5a                   	pop    edx
c0015d2a:	68 2b 29 02 c0       	push   0xc002292b
c0015d2f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015d35:	51                   	push   ecx
c0015d36:	e8 3f 7a ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015d3b:	5b                   	pop    ebx
c0015d3c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d41:	5a                   	pop    edx
c0015d42:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d45:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d4b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015d4e:	51                   	push   ecx
c0015d4f:	50                   	push   eax
c0015d50:	e8 4b 7a ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0015d55:	5b                   	pop    ebx
c0015d56:	58                   	pop    eax
c0015d57:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d5c:	68 2b 29 02 c0       	push   0xc002292b
c0015d61:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d67:	50                   	push   eax
c0015d68:	e8 0d 7a ff ff       	call   c000d77a <VgaText::puts(char const*)>
c0015d6d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d70:	59                   	pop    ecx
c0015d71:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d76:	5b                   	pop    ebx
c0015d77:	8b 12                	mov    edx,DWORD PTR [edx]
c0015d79:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d7f:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015d82:	52                   	push   edx
c0015d83:	50                   	push   eax
c0015d84:	e8 17 7a ff ff       	call   c000d7a0 <VgaText::putx(unsigned int)>
c0015d89:	83 c4 10             	add    esp,0x10
c0015d8c:	b2 fe                	mov    dl,0xfe
c0015d8e:	e4 60                	in     al,0x60
c0015d90:	3c 1c                	cmp    al,0x1c
c0015d92:	74 04                	je     c0015d98 <Krnl::panic(char const*)+0x346>
c0015d94:	3c 5a                	cmp    al,0x5a
c0015d96:	75 f6                	jne    c0015d8e <Krnl::panic(char const*)+0x33c>
c0015d98:	e4 64                	in     al,0x64
c0015d9a:	a8 02                	test   al,0x2
c0015d9c:	75 fa                	jne    c0015d98 <Krnl::panic(char const*)+0x346>
c0015d9e:	88 d0                	mov    al,dl
c0015da0:	e6 64                	out    0x64,al
c0015da2:	fa                   	cli    
c0015da3:	f4                   	hlt    
c0015da4:	eb e8                	jmp    c0015d8e <Krnl::panic(char const*)+0x33c>

c0015da6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015da6:	55                   	push   ebp
c0015da7:	57                   	push   edi
c0015da8:	56                   	push   esi
c0015da9:	53                   	push   ebx
c0015daa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015db0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015db7:	8d 46 01             	lea    eax,[esi+0x1]
c0015dba:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015dbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015dc0:	80 fb 40             	cmp    bl,0x40
c0015dc3:	75 19                	jne    c0015dde <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015dc5:	8a 06                	mov    al,BYTE PTR [esi]
c0015dc7:	84 c0                	test   al,al
c0015dc9:	74 07                	je     c0015dd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dcb:	3c 3a                	cmp    al,0x3a
c0015dcd:	74 03                	je     c0015dd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dcf:	46                   	inc    esi
c0015dd0:	eb f3                	jmp    c0015dc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015dd2:	84 c0                	test   al,al
c0015dd4:	0f 84 1f 01 00 00    	je     c0015ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dda:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ddd:	46                   	inc    esi
c0015dde:	50                   	push   eax
c0015ddf:	6a 40                	push   0x40
c0015de1:	6a 00                	push   0x0
c0015de3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015de7:	50                   	push   eax
c0015de8:	e8 eb a8 fe ff       	call   c00006d8 <memset>
c0015ded:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015df4:	31 d2                	xor    edx,edx
c0015df6:	83 c4 10             	add    esp,0x10
c0015df9:	8a 07                	mov    al,BYTE PTR [edi]
c0015dfb:	84 c0                	test   al,al
c0015dfd:	0f 84 f6 00 00 00    	je     c0015ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e03:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015e09:	0f 8f ea 00 00 00    	jg     c0015ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e0f:	3c 0a                	cmp    al,0xa
c0015e11:	0f 85 d3 00 00 00    	jne    c0015eea <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015e17:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015e1c:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015e20:	f6 c1 df             	test   cl,0xdf
c0015e23:	0f 94 c2             	sete   dl
c0015e26:	80 f9 23             	cmp    cl,0x23
c0015e29:	0f 94 c0             	sete   al
c0015e2c:	08 c2                	or     dl,al
c0015e2e:	75 47                	jne    c0015e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e30:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015e33:	3c 01                	cmp    al,0x1
c0015e35:	76 40                	jbe    c0015e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e37:	80 f9 5b             	cmp    cl,0x5b
c0015e3a:	75 3f                	jne    c0015e7b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015e3c:	80 fb 40             	cmp    bl,0x40
c0015e3f:	75 36                	jne    c0015e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e41:	83 ec 0c             	sub    esp,0xc
c0015e44:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015e48:	55                   	push   ebp
c0015e49:	e8 a7 a8 fe ff       	call   c00006f5 <strlen>
c0015e4e:	83 c4 10             	add    esp,0x10
c0015e51:	83 f8 3f             	cmp    eax,0x3f
c0015e54:	0f 87 9f 00 00 00    	ja     c0015ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e5a:	50                   	push   eax
c0015e5b:	50                   	push   eax
c0015e5c:	55                   	push   ebp
c0015e5d:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015e61:	55                   	push   ebp
c0015e62:	e8 10 a9 fe ff       	call   c0000777 <strcpy>
c0015e67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e6a:	e8 86 a8 fe ff       	call   c00006f5 <strlen>
c0015e6f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015e74:	83 c4 10             	add    esp,0x10
c0015e77:	31 c9                	xor    ecx,ecx
c0015e79:	eb 76                	jmp    c0015ef1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015e7b:	80 fb 40             	cmp    bl,0x40
c0015e7e:	74 06                	je     c0015e86 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015e80:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015e84:	eb 19                	jmp    c0015e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e86:	51                   	push   ecx
c0015e87:	51                   	push   ecx
c0015e88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e8c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e90:	50                   	push   eax
c0015e91:	e8 32 a9 fe ff       	call   c00007c8 <strcmp>
c0015e96:	83 c4 10             	add    esp,0x10
c0015e99:	85 c0                	test   eax,eax
c0015e9b:	75 da                	jne    c0015e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e9d:	eb e1                	jmp    c0015e80 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015e9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015ea2:	84 c0                	test   al,al
c0015ea4:	0f 94 c1             	sete   cl
c0015ea7:	3c 3d                	cmp    al,0x3d
c0015ea9:	0f 94 c2             	sete   dl
c0015eac:	08 d1                	or     cl,dl
c0015eae:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015eb2:	75 03                	jne    c0015eb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015eb4:	45                   	inc    ebp
c0015eb5:	eb e8                	jmp    c0015e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015eb7:	84 c0                	test   al,al
c0015eb9:	74 3e                	je     c0015ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015ebb:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015ebf:	52                   	push   edx
c0015ec0:	52                   	push   edx
c0015ec1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015ec5:	50                   	push   eax
c0015ec6:	56                   	push   esi
c0015ec7:	e8 fc a8 fe ff       	call   c00007c8 <strcmp>
c0015ecc:	83 c4 10             	add    esp,0x10
c0015ecf:	85 c0                	test   eax,eax
c0015ed1:	75 a4                	jne    c0015e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015ed3:	50                   	push   eax
c0015ed4:	8d 55 01             	lea    edx,[ebp+0x1]
c0015ed7:	50                   	push   eax
c0015ed8:	52                   	push   edx
c0015ed9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015ee0:	e8 92 a8 fe ff       	call   c0000777 <strcpy>
c0015ee5:	83 c4 10             	add    esp,0x10
c0015ee8:	eb 14                	jmp    c0015efe <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015eea:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015eed:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015ef1:	47                   	inc    edi
c0015ef2:	89 ca                	mov    edx,ecx
c0015ef4:	e9 00 ff ff ff       	jmp    c0015df9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015ef9:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015efe:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015f02:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015f08:	5b                   	pop    ebx
c0015f09:	5e                   	pop    esi
c0015f0a:	5f                   	pop    edi
c0015f0b:	5d                   	pop    ebp
c0015f0c:	c3                   	ret    

c0015f0d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015f0d:	57                   	push   edi
c0015f0e:	56                   	push   esi
c0015f0f:	53                   	push   ebx
c0015f10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015f16:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015f1d:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015f24:	53                   	push   ebx
c0015f25:	e8 cb a7 fe ff       	call   c00006f5 <strlen>
c0015f2a:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f2d:	89 c7                	mov    edi,eax
c0015f2f:	e8 c1 a7 fe ff       	call   c00006f5 <strlen>
c0015f34:	83 c4 10             	add    esp,0x10
c0015f37:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015f3b:	31 ff                	xor    edi,edi
c0015f3d:	3d ff 00 00 00       	cmp    eax,0xff
c0015f42:	0f 87 18 01 00 00    	ja     c0016060 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f48:	51                   	push   ecx
c0015f49:	51                   	push   ecx
c0015f4a:	56                   	push   esi
c0015f4b:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015f4f:	56                   	push   esi
c0015f50:	e8 22 a8 fe ff       	call   c0000777 <strcpy>
c0015f55:	58                   	pop    eax
c0015f56:	5a                   	pop    edx
c0015f57:	68 54 2e 02 c0       	push   0xc0022e54
c0015f5c:	56                   	push   esi
c0015f5d:	e8 cc a8 fe ff       	call   c000082e <strcat>
c0015f62:	59                   	pop    ecx
c0015f63:	58                   	pop    eax
c0015f64:	53                   	push   ebx
c0015f65:	56                   	push   esi
c0015f66:	e8 c3 a8 fe ff       	call   c000082e <strcat>
c0015f6b:	58                   	pop    eax
c0015f6c:	5a                   	pop    edx
c0015f6d:	68 42 2a 02 c0       	push   0xc0022a42
c0015f72:	56                   	push   esi
c0015f73:	e8 b6 a8 fe ff       	call   c000082e <strcat>
c0015f78:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f7f:	e8 70 91 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0015f84:	83 c4 0c             	add    esp,0xc
c0015f87:	89 c3                	mov    ebx,eax
c0015f89:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c0015f8f:	56                   	push   esi
c0015f90:	50                   	push   eax
c0015f91:	e8 ca 97 ff ff       	call   c000f760 <File::File(char const*, Process*)>
c0015f96:	59                   	pop    ecx
c0015f97:	5e                   	pop    esi
c0015f98:	6a 01                	push   0x1
c0015f9a:	53                   	push   ebx
c0015f9b:	e8 24 98 ff ff       	call   c000f7c4 <File::open(FileOpenMode)>
c0015fa0:	83 c4 10             	add    esp,0x10
c0015fa3:	85 c0                	test   eax,eax
c0015fa5:	74 08                	je     c0015faf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015fa7:	83 ec 0c             	sub    esp,0xc
c0015faa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fac:	53                   	push   ebx
c0015fad:	eb 2e                	jmp    c0015fdd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015faf:	52                   	push   edx
c0015fb0:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015fb4:	50                   	push   eax
c0015fb5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015fb9:	50                   	push   eax
c0015fba:	53                   	push   ebx
c0015fbb:	e8 b0 9a ff ff       	call   c000fa70 <File::stat(unsigned long long*, bool*)>
c0015fc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015fc4:	83 c4 10             	add    esp,0x10
c0015fc7:	89 c1                	mov    ecx,eax
c0015fc9:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015fcd:	75 13                	jne    c0015fe2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015fcf:	83 ec 0c             	sub    esp,0xc
c0015fd2:	53                   	push   ebx
c0015fd3:	e8 4a 98 ff ff       	call   c000f822 <File::close()>
c0015fd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fdd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fe0:	eb 7b                	jmp    c001605d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015fe2:	83 ec 0c             	sub    esp,0xc
c0015fe5:	50                   	push   eax
c0015fe6:	e8 0c 60 ff ff       	call   c000bff7 <malloc>
c0015feb:	89 c6                	mov    esi,eax
c0015fed:	58                   	pop    eax
c0015fee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ff0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015ff4:	52                   	push   edx
c0015ff5:	56                   	push   esi
c0015ff6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ffa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ffe:	53                   	push   ebx
c0015fff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016002:	83 c4 20             	add    esp,0x20
c0016005:	85 c0                	test   eax,eax
c0016007:	75 0a                	jne    c0016013 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0016009:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001600d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016011:	74 18                	je     c001602b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0016013:	83 ec 0c             	sub    esp,0xc
c0016016:	31 ff                	xor    edi,edi
c0016018:	53                   	push   ebx
c0016019:	e8 04 98 ff ff       	call   c000f822 <File::close()>
c001601e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016023:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016026:	83 c4 10             	add    esp,0x10
c0016029:	eb 35                	jmp    c0016060 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001602b:	83 ec 0c             	sub    esp,0xc
c001602e:	53                   	push   ebx
c001602f:	e8 ee 97 ff ff       	call   c000f822 <File::close()>
c0016034:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016036:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016039:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001603c:	83 c4 0c             	add    esp,0xc
c001603f:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016046:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001604d:	56                   	push   esi
c001604e:	e8 53 fd ff ff       	call   c0015da6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0016053:	89 34 24             	mov    DWORD PTR [esp],esi
c0016056:	89 c7                	mov    edi,eax
c0016058:	e8 aa 5f ff ff       	call   c000c007 <free>
c001605d:	83 c4 10             	add    esp,0x10
c0016060:	81 c4 10 01 00 00    	add    esp,0x110
c0016066:	89 f8                	mov    eax,edi
c0016068:	5b                   	pop    ebx
c0016069:	5e                   	pop    esi
c001606a:	5f                   	pop    edi
c001606b:	c3                   	ret    

c001606c <Reg::getLine(char*, char*, char*)>:
c001606c:	57                   	push   edi
c001606d:	56                   	push   esi
c001606e:	53                   	push   ebx
c001606f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016073:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016077:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001607b:	57                   	push   edi
c001607c:	56                   	push   esi
c001607d:	53                   	push   ebx
c001607e:	68 47 2a 02 c0       	push   0xc0022a47
c0016083:	e8 85 fe ff ff       	call   c0015f0d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0016088:	83 c4 10             	add    esp,0x10
c001608b:	84 c0                	test   al,al
c001608d:	75 10                	jne    c001609f <Reg::getLine(char*, char*, char*)+0x33>
c001608f:	57                   	push   edi
c0016090:	56                   	push   esi
c0016091:	53                   	push   ebx
c0016092:	68 6c 2a 02 c0       	push   0xc0022a6c
c0016097:	e8 71 fe ff ff       	call   c0015f0d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001609c:	83 c4 10             	add    esp,0x10
c001609f:	5b                   	pop    ebx
c00160a0:	5e                   	pop    esi
c00160a1:	5f                   	pop    edi
c00160a2:	c3                   	ret    

c00160a3 <Reg::readInt(char*, char*, int*)>:
c00160a3:	55                   	push   ebp
c00160a4:	57                   	push   edi
c00160a5:	56                   	push   esi
c00160a6:	53                   	push   ebx
c00160a7:	81 ec f0 00 00 00    	sub    esp,0xf0
c00160ad:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00160b1:	57                   	push   edi
c00160b2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160b9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160c0:	e8 a7 ff ff ff       	call   c001606c <Reg::getLine(char*, char*, char*)>
c00160c5:	83 c4 10             	add    esp,0x10
c00160c8:	84 c0                	test   al,al
c00160ca:	0f 84 b2 00 00 00    	je     c0016182 <Reg::readInt(char*, char*, int*)+0xdf>
c00160d0:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00160d4:	80 fa 2b             	cmp    dl,0x2b
c00160d7:	74 0c                	je     c00160e5 <Reg::readInt(char*, char*, int*)+0x42>
c00160d9:	80 fa 2d             	cmp    dl,0x2d
c00160dc:	75 0e                	jne    c00160ec <Reg::readInt(char*, char*, int*)+0x49>
c00160de:	ba 01 00 00 00       	mov    edx,0x1
c00160e3:	eb 0b                	jmp    c00160f0 <Reg::readInt(char*, char*, int*)+0x4d>
c00160e5:	ba 01 00 00 00       	mov    edx,0x1
c00160ea:	eb 02                	jmp    c00160ee <Reg::readInt(char*, char*, int*)+0x4b>
c00160ec:	31 d2                	xor    edx,edx
c00160ee:	31 c0                	xor    eax,eax
c00160f0:	be 0a 00 00 00       	mov    esi,0xa
c00160f5:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00160fa:	75 20                	jne    c001611c <Reg::readInt(char*, char*, int*)+0x79>
c00160fc:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0016100:	80 f9 78             	cmp    cl,0x78
c0016103:	75 0a                	jne    c001610f <Reg::readInt(char*, char*, int*)+0x6c>
c0016105:	83 c2 02             	add    edx,0x2
c0016108:	be 10 00 00 00       	mov    esi,0x10
c001610d:	eb 0d                	jmp    c001611c <Reg::readInt(char*, char*, int*)+0x79>
c001610f:	80 f9 62             	cmp    cl,0x62
c0016112:	75 08                	jne    c001611c <Reg::readInt(char*, char*, int*)+0x79>
c0016114:	83 c2 02             	add    edx,0x2
c0016117:	be 02 00 00 00       	mov    esi,0x2
c001611c:	01 d7                	add    edi,edx
c001611e:	31 d2                	xor    edx,edx
c0016120:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016122:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016126:	84 db                	test   bl,bl
c0016128:	0f 94 c3             	sete   bl
c001612b:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0016130:	0f 94 c1             	sete   cl
c0016133:	08 cb                	or     bl,cl
c0016135:	75 3a                	jne    c0016171 <Reg::readInt(char*, char*, int*)+0xce>
c0016137:	0f af d6             	imul   edx,esi
c001613a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001613f:	83 fe 10             	cmp    esi,0x10
c0016142:	75 26                	jne    c001616a <Reg::readInt(char*, char*, int*)+0xc7>
c0016144:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016148:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001614b:	89 e9                	mov    ecx,ebp
c001614d:	80 f9 05             	cmp    cl,0x5
c0016150:	77 06                	ja     c0016158 <Reg::readInt(char*, char*, int*)+0xb5>
c0016152:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016156:	eb 16                	jmp    c001616e <Reg::readInt(char*, char*, int*)+0xcb>
c0016158:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001615c:	83 e9 61             	sub    ecx,0x61
c001615f:	80 f9 05             	cmp    cl,0x5
c0016162:	77 06                	ja     c001616a <Reg::readInt(char*, char*, int*)+0xc7>
c0016164:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016168:	eb 04                	jmp    c001616e <Reg::readInt(char*, char*, int*)+0xcb>
c001616a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001616e:	47                   	inc    edi
c001616f:	eb af                	jmp    c0016120 <Reg::readInt(char*, char*, int*)+0x7d>
c0016171:	84 c0                	test   al,al
c0016173:	74 02                	je     c0016177 <Reg::readInt(char*, char*, int*)+0xd4>
c0016175:	f7 da                	neg    edx
c0016177:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001617e:	89 10                	mov    DWORD PTR [eax],edx
c0016180:	88 d8                	mov    al,bl
c0016182:	81 c4 ec 00 00 00    	add    esp,0xec
c0016188:	5b                   	pop    ebx
c0016189:	5e                   	pop    esi
c001618a:	5f                   	pop    edi
c001618b:	5d                   	pop    ebp
c001618c:	c3                   	ret    

c001618d <Reg::readString(char*, char*, char*, int)>:
c001618d:	57                   	push   edi
c001618e:	56                   	push   esi
c001618f:	53                   	push   ebx
c0016190:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016196:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001619a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00161a1:	57                   	push   edi
c00161a2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00161a9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00161b0:	e8 b7 fe ff ff       	call   c001606c <Reg::getLine(char*, char*, char*)>
c00161b5:	83 c4 10             	add    esp,0x10
c00161b8:	89 c6                	mov    esi,eax
c00161ba:	84 c0                	test   al,al
c00161bc:	74 44                	je     c0016202 <Reg::readString(char*, char*, char*, int)+0x75>
c00161be:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00161c5:	31 c0                	xor    eax,eax
c00161c7:	4a                   	dec    edx
c00161c8:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00161cb:	84 c9                	test   cl,cl
c00161cd:	74 0f                	je     c00161de <Reg::readString(char*, char*, char*, int)+0x51>
c00161cf:	39 c2                	cmp    edx,eax
c00161d1:	7e 0b                	jle    c00161de <Reg::readString(char*, char*, char*, int)+0x51>
c00161d3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00161d6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00161db:	40                   	inc    eax
c00161dc:	eb ea                	jmp    c00161c8 <Reg::readString(char*, char*, char*, int)+0x3b>
c00161de:	83 ec 0c             	sub    esp,0xc
c00161e1:	53                   	push   ebx
c00161e2:	e8 0e a5 fe ff       	call   c00006f5 <strlen>
c00161e7:	83 c4 10             	add    esp,0x10
c00161ea:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00161ef:	75 11                	jne    c0016202 <Reg::readString(char*, char*, char*, int)+0x75>
c00161f1:	83 ec 0c             	sub    esp,0xc
c00161f4:	53                   	push   ebx
c00161f5:	e8 fb a4 fe ff       	call   c00006f5 <strlen>
c00161fa:	83 c4 10             	add    esp,0x10
c00161fd:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0016202:	81 c4 d0 00 00 00    	add    esp,0xd0
c0016208:	89 f0                	mov    eax,esi
c001620a:	5b                   	pop    ebx
c001620b:	5e                   	pop    esi
c001620c:	5f                   	pop    edi
c001620d:	c3                   	ret    

c001620e <Reg::readBool(char*, char*, bool*)>:
c001620e:	83 ec 20             	sub    esp,0x20
c0016211:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016215:	50                   	push   eax
c0016216:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001621a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001621e:	e8 80 fe ff ff       	call   c00160a3 <Reg::readInt(char*, char*, int*)>
c0016223:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016227:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001622c:	0f 95 02             	setne  BYTE PTR [edx]
c001622f:	83 c4 2c             	add    esp,0x2c
c0016232:	c3                   	ret    

c0016233 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016233:	53                   	push   ebx
c0016234:	83 ec 1c             	sub    esp,0x1c
c0016237:	8d 44 24 13          	lea    eax,[esp+0x13]
c001623b:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001623f:	50                   	push   eax
c0016240:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016244:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016248:	e8 c1 ff ff ff       	call   c001620e <Reg::readBool(char*, char*, bool*)>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	84 c0                	test   al,al
c0016252:	74 04                	je     c0016258 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016254:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016258:	83 c4 18             	add    esp,0x18
c001625b:	88 d8                	mov    al,bl
c001625d:	5b                   	pop    ebx
c001625e:	c3                   	ret    

c001625f <Reg::readIntWithDefault(char*, char*, int)>:
c001625f:	53                   	push   ebx
c0016260:	83 ec 1c             	sub    esp,0x1c
c0016263:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016267:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001626b:	50                   	push   eax
c001626c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016270:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016274:	e8 2a fe ff ff       	call   c00160a3 <Reg::readInt(char*, char*, int*)>
c0016279:	83 c4 10             	add    esp,0x10
c001627c:	84 c0                	test   al,al
c001627e:	74 04                	je     c0016284 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0016280:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016284:	83 c4 18             	add    esp,0x18
c0016287:	89 d8                	mov    eax,ebx
c0016289:	5b                   	pop    ebx
c001628a:	c3                   	ret    

c001628b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001628b:	56                   	push   esi
c001628c:	53                   	push   ebx
c001628d:	51                   	push   ecx
c001628e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016292:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001629a:	56                   	push   esi
c001629b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001629f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162a3:	e8 e5 fe ff ff       	call   c001618d <Reg::readString(char*, char*, char*, int)>
c00162a8:	83 c4 10             	add    esp,0x10
c00162ab:	84 c0                	test   al,al
c00162ad:	74 02                	je     c00162b1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00162af:	89 f3                	mov    ebx,esi
c00162b1:	5a                   	pop    edx
c00162b2:	89 d8                	mov    eax,ebx
c00162b4:	5b                   	pop    ebx
c00162b5:	5e                   	pop    esi
c00162b6:	c3                   	ret    

c00162b7 <Sys::exit(regs*)>:
c00162b7:	83 ec 18             	sub    esp,0x18
c00162ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162be:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00162c1:	e8 c2 31 00 00       	call   c0019488 <terminateTask(int)>
c00162c6:	83 c8 ff             	or     eax,0xffffffff
c00162c9:	89 c2                	mov    edx,eax
c00162cb:	83 c4 1c             	add    esp,0x1c
c00162ce:	c3                   	ret    

c00162cf <Sys::loadDLL(regs*)>:
c00162cf:	56                   	push   esi
c00162d0:	31 d2                	xor    edx,edx
c00162d2:	53                   	push   ebx
c00162d3:	b8 01 00 00 00       	mov    eax,0x1
c00162d8:	51                   	push   ecx
c00162d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162dd:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162e1:	74 7d                	je     c0016360 <Sys::loadDLL(regs*)+0x91>
c00162e3:	83 ec 0c             	sub    esp,0xc
c00162e6:	68 14 01 00 00       	push   0x114
c00162eb:	e8 04 8e ff ff       	call   c000f0f4 <operator new(unsigned long)>
c00162f0:	89 c3                	mov    ebx,eax
c00162f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162f7:	83 c4 0c             	add    esp,0xc
c00162fa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162fd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016300:	53                   	push   ebx
c0016301:	e8 5a 94 ff ff       	call   c000f760 <File::File(char const*, Process*)>
c0016306:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016309:	e8 24 97 ff ff       	call   c000fa32 <File::exists()>
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	84 c0                	test   al,al
c0016313:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016315:	75 11                	jne    c0016328 <Sys::loadDLL(regs*)+0x59>
c0016317:	83 ec 0c             	sub    esp,0xc
c001631a:	53                   	push   ebx
c001631b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001631e:	83 c4 10             	add    esp,0x10
c0016321:	b8 03 00 00 00       	mov    eax,0x3
c0016326:	eb 36                	jmp    c001635e <Sys::loadDLL(regs*)+0x8f>
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	53                   	push   ebx
c001632c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001632f:	58                   	pop    eax
c0016330:	5a                   	pop    edx
c0016331:	6a 00                	push   0x0
c0016333:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016336:	e8 3a 21 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	89 c1                	mov    ecx,eax
c0016340:	31 d2                	xor    edx,edx
c0016342:	b8 04 00 00 00       	mov    eax,0x4
c0016347:	85 c9                	test   ecx,ecx
c0016349:	74 15                	je     c0016360 <Sys::loadDLL(regs*)+0x91>
c001634b:	53                   	push   ebx
c001634c:	53                   	push   ebx
c001634d:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0016353:	51                   	push   ecx
c0016354:	e8 e2 22 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c0016359:	83 c4 10             	add    esp,0x10
c001635c:	31 c0                	xor    eax,eax
c001635e:	31 d2                	xor    edx,edx
c0016360:	59                   	pop    ecx
c0016361:	5b                   	pop    ebx
c0016362:	5e                   	pop    esi
c0016363:	c3                   	ret    

c0016364 <Sys::read(regs*)>:
c0016364:	57                   	push   edi
c0016365:	56                   	push   esi
c0016366:	53                   	push   ebx
c0016367:	83 ec 10             	sub    esp,0x10
c001636a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001636e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016371:	83 f8 02             	cmp    eax,0x2
c0016374:	77 10                	ja     c0016386 <Sys::read(regs*)+0x22>
c0016376:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001637b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001637e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016384:	eb 0e                	jmp    c0016394 <Sys::read(regs*)+0x30>
c0016386:	83 ec 0c             	sub    esp,0xc
c0016389:	50                   	push   eax
c001638a:	e8 f6 7c ff ff       	call   c000e085 <getFromFileDescriptor(int)>
c001638f:	83 c4 10             	add    esp,0x10
c0016392:	89 c1                	mov    ecx,eax
c0016394:	83 c8 ff             	or     eax,0xffffffff
c0016397:	85 c9                	test   ecx,ecx
c0016399:	89 c2                	mov    edx,eax
c001639b:	74 28                	je     c00163c5 <Sys::read(regs*)+0x61>
c001639d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00163a5:	83 ec 0c             	sub    esp,0xc
c00163a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00163aa:	31 ff                	xor    edi,edi
c00163ac:	8d 54 24 18          	lea    edx,[esp+0x18]
c00163b0:	52                   	push   edx
c00163b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163b4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00163b7:	57                   	push   edi
c00163b8:	56                   	push   esi
c00163b9:	51                   	push   ecx
c00163ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163c1:	83 c4 20             	add    esp,0x20
c00163c4:	99                   	cdq    
c00163c5:	83 c4 10             	add    esp,0x10
c00163c8:	5b                   	pop    ebx
c00163c9:	5e                   	pop    esi
c00163ca:	5f                   	pop    edi
c00163cb:	c3                   	ret    

c00163cc <Sys::sbrk(regs*)>:
c00163cc:	56                   	push   esi
c00163cd:	53                   	push   ebx
c00163ce:	50                   	push   eax
c00163cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163db:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163de:	85 db                	test   ebx,ebx
c00163e0:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00163e6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163e9:	74 02                	je     c00163ed <Sys::sbrk(regs*)+0x21>
c00163eb:	79 06                	jns    c00163f3 <Sys::sbrk(regs*)+0x27>
c00163ed:	89 f0                	mov    eax,esi
c00163ef:	31 d2                	xor    edx,edx
c00163f1:	eb 2a                	jmp    c001641d <Sys::sbrk(regs*)+0x51>
c00163f3:	83 c8 ff             	or     eax,0xffffffff
c00163f6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163fc:	89 c2                	mov    edx,eax
c00163fe:	77 1d                	ja     c001641d <Sys::sbrk(regs*)+0x51>
c0016400:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0016406:	50                   	push   eax
c0016407:	c1 ea 0c             	shr    edx,0xc
c001640a:	68 07 04 00 00       	push   0x407
c001640f:	52                   	push   edx
c0016410:	51                   	push   ecx
c0016411:	e8 c6 85 ff ff       	call   c000e9dc <VAS::allocatePages(int, int)>
c0016416:	89 f0                	mov    eax,esi
c0016418:	31 d2                	xor    edx,edx
c001641a:	83 c4 10             	add    esp,0x10
c001641d:	59                   	pop    ecx
c001641e:	5b                   	pop    ebx
c001641f:	5e                   	pop    esi
c0016420:	c3                   	ret    

c0016421 <Sys::write(regs*)>:
c0016421:	57                   	push   edi
c0016422:	56                   	push   esi
c0016423:	53                   	push   ebx
c0016424:	83 ec 18             	sub    esp,0x18
c0016427:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001642b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001642e:	68 87 2a 02 c0       	push   0xc0022a87
c0016433:	e8 f1 8d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0016438:	83 c4 10             	add    esp,0x10
c001643b:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c001643f:	77 10                	ja     c0016451 <Sys::write(regs*)+0x30>
c0016441:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016446:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016449:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001644f:	eb 1b                	jmp    c001646c <Sys::write(regs*)+0x4b>
c0016451:	83 ec 0c             	sub    esp,0xc
c0016454:	68 a6 2a 02 c0       	push   0xc0022aa6
c0016459:	e8 cb 8d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001645e:	58                   	pop    eax
c001645f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016462:	e8 1e 7c ff ff       	call   c000e085 <getFromFileDescriptor(int)>
c0016467:	83 c4 10             	add    esp,0x10
c001646a:	89 c1                	mov    ecx,eax
c001646c:	83 c8 ff             	or     eax,0xffffffff
c001646f:	85 c9                	test   ecx,ecx
c0016471:	89 c2                	mov    edx,eax
c0016473:	74 28                	je     c001649d <Sys::write(regs*)+0x7c>
c0016475:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001647d:	83 ec 0c             	sub    esp,0xc
c0016480:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016482:	31 ff                	xor    edi,edi
c0016484:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016488:	52                   	push   edx
c0016489:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001648c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001648f:	57                   	push   edi
c0016490:	56                   	push   esi
c0016491:	51                   	push   ecx
c0016492:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016495:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016499:	83 c4 20             	add    esp,0x20
c001649c:	99                   	cdq    
c001649d:	83 c4 10             	add    esp,0x10
c00164a0:	5b                   	pop    ebx
c00164a1:	5e                   	pop    esi
c00164a2:	5f                   	pop    edi
c00164a3:	c3                   	ret    

c00164a4 <Sys::yield(regs*)>:
c00164a4:	83 ec 0c             	sub    esp,0xc
c00164a7:	e8 af 25 00 00       	call   c0018a5b <lockScheduler()>
c00164ac:	e8 f3 28 00 00       	call   c0018da4 <schedule()>
c00164b1:	e8 a7 25 00 00       	call   c0018a5d <unlockScheduler()>
c00164b6:	31 c0                	xor    eax,eax
c00164b8:	31 d2                	xor    edx,edx
c00164ba:	83 c4 0c             	add    esp,0xc
c00164bd:	c3                   	ret    

c00164be <sysCallGetPID(regs*)>:
c00164be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00164c8:	89 c2                	mov    edx,eax
c00164ca:	c1 fa 1f             	sar    edx,0x1f
c00164cd:	c3                   	ret    

c00164ce <sysCallSeekDir(regs*)>:
c00164ce:	31 c0                	xor    eax,eax
c00164d0:	31 d2                	xor    edx,edx
c00164d2:	c3                   	ret    

c00164d3 <sysCallTellDir(regs*)>:
c00164d3:	31 c0                	xor    eax,eax
c00164d5:	31 d2                	xor    edx,edx
c00164d7:	c3                   	ret    

c00164d8 <sysCallVerify(regs*)>:
c00164d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164dc:	31 d2                	xor    edx,edx
c00164de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164e1:	c3                   	ret    

c00164e2 <sysCallFork(regs*)>:
c00164e2:	83 c8 ff             	or     eax,0xffffffff
c00164e5:	83 ca ff             	or     edx,0xffffffff
c00164e8:	c3                   	ret    

c00164e9 <sysCallExecve(regs*)>:
c00164e9:	83 c8 ff             	or     eax,0xffffffff
c00164ec:	83 ca ff             	or     edx,0xffffffff
c00164ef:	c3                   	ret    

c00164f0 <sysCallGetArgc(regs*)>:
c00164f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164f8:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00164fe:	89 c2                	mov    edx,eax
c0016500:	c1 fa 1f             	sar    edx,0x1f
c0016503:	c3                   	ret    

c0016504 <sysFormatDisk(regs*)>:
c0016504:	56                   	push   esi
c0016505:	53                   	push   ebx
c0016506:	50                   	push   eax
c0016507:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001650b:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c0016511:	eb 2a                	jmp    c001653d <sysFormatDisk(regs*)+0x39>
c0016513:	83 ec 0c             	sub    esp,0xc
c0016516:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0016519:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001651c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001651e:	51                   	push   ecx
c001651f:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0016522:	51                   	push   ecx
c0016523:	50                   	push   eax
c0016524:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001652b:	50                   	push   eax
c001652c:	53                   	push   ebx
c001652d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016530:	83 c4 20             	add    esp,0x20
c0016533:	89 c1                	mov    ecx,eax
c0016535:	83 f8 08             	cmp    eax,0x8
c0016538:	75 12                	jne    c001654c <sysFormatDisk(regs*)+0x48>
c001653a:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001653d:	85 db                	test   ebx,ebx
c001653f:	75 d2                	jne    c0016513 <sysFormatDisk(regs*)+0xf>
c0016541:	b8 03 00 00 00       	mov    eax,0x3
c0016546:	31 d2                	xor    edx,edx
c0016548:	59                   	pop    ecx
c0016549:	5b                   	pop    ebx
c001654a:	5e                   	pop    esi
c001654b:	c3                   	ret    
c001654c:	85 c0                	test   eax,eax
c001654e:	74 13                	je     c0016563 <sysFormatDisk(regs*)+0x5f>
c0016550:	31 d2                	xor    edx,edx
c0016552:	b8 01 00 00 00       	mov    eax,0x1
c0016557:	83 f9 09             	cmp    ecx,0x9
c001655a:	74 ec                	je     c0016548 <sysFormatDisk(regs*)+0x44>
c001655c:	b8 02 00 00 00       	mov    eax,0x2
c0016561:	eb e3                	jmp    c0016546 <sysFormatDisk(regs*)+0x42>
c0016563:	31 c0                	xor    eax,eax
c0016565:	eb df                	jmp    c0016546 <sysFormatDisk(regs*)+0x42>

c0016567 <sysSetDiskVolumeLabel(regs*)>:
c0016567:	56                   	push   esi
c0016568:	53                   	push   ebx
c0016569:	53                   	push   ebx
c001656a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001656e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016571:	83 f8 19             	cmp    eax,0x19
c0016574:	77 2d                	ja     c00165a3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016576:	8b 0c 85 a0 4d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb260]
c001657d:	85 c9                	test   ecx,ecx
c001657f:	74 22                	je     c00165a3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016581:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0016584:	85 d2                	test   edx,edx
c0016586:	74 1b                	je     c00165a3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016588:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001658e:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016590:	52                   	push   edx
c0016591:	50                   	push   eax
c0016592:	51                   	push   ecx
c0016593:	53                   	push   ebx
c0016594:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	89 c2                	mov    edx,eax
c001659c:	c1 fa 1f             	sar    edx,0x1f
c001659f:	59                   	pop    ecx
c00165a0:	5b                   	pop    ebx
c00165a1:	5e                   	pop    esi
c00165a2:	c3                   	ret    
c00165a3:	59                   	pop    ecx
c00165a4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165a9:	5b                   	pop    ebx
c00165aa:	83 ca ff             	or     edx,0xffffffff
c00165ad:	5e                   	pop    esi
c00165ae:	c3                   	ret    

c00165af <sysGetDiskVolumeLabel(regs*)>:
c00165af:	57                   	push   edi
c00165b0:	56                   	push   esi
c00165b1:	53                   	push   ebx
c00165b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165b9:	83 fa 19             	cmp    edx,0x19
c00165bc:	77 38                	ja     c00165f6 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165be:	8b 0c 95 a0 4d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb260]
c00165c5:	85 c9                	test   ecx,ecx
c00165c7:	74 2d                	je     c00165f6 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165c9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165cc:	85 db                	test   ebx,ebx
c00165ce:	74 26                	je     c00165f6 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165d3:	85 c0                	test   eax,eax
c00165d5:	74 1f                	je     c00165f6 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165d7:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00165dd:	83 ec 0c             	sub    esp,0xc
c00165e0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00165e2:	50                   	push   eax
c00165e3:	53                   	push   ebx
c00165e4:	52                   	push   edx
c00165e5:	51                   	push   ecx
c00165e6:	56                   	push   esi
c00165e7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00165ea:	83 c4 20             	add    esp,0x20
c00165ed:	89 c2                	mov    edx,eax
c00165ef:	c1 fa 1f             	sar    edx,0x1f
c00165f2:	5b                   	pop    ebx
c00165f3:	5e                   	pop    esi
c00165f4:	5f                   	pop    edi
c00165f5:	c3                   	ret    
c00165f6:	5b                   	pop    ebx
c00165f7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165fc:	5e                   	pop    esi
c00165fd:	83 ca ff             	or     edx,0xffffffff
c0016600:	5f                   	pop    edi
c0016601:	c3                   	ret    

c0016602 <sysShutdown(regs*)>:
c0016602:	57                   	push   edi
c0016603:	56                   	push   esi
c0016604:	56                   	push   esi
c0016605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016609:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001660c:	85 c0                	test   eax,eax
c001660e:	74 18                	je     c0016628 <sysShutdown(regs*)+0x26>
c0016610:	83 f8 01             	cmp    eax,0x1
c0016613:	74 51                	je     c0016666 <sysShutdown(regs*)+0x64>
c0016615:	83 ce ff             	or     esi,0xffffffff
c0016618:	83 cf ff             	or     edi,0xffffffff
c001661b:	83 f8 02             	cmp    eax,0x2
c001661e:	74 2a                	je     c001664a <sysShutdown(regs*)+0x48>
c0016620:	59                   	pop    ecx
c0016621:	89 f0                	mov    eax,esi
c0016623:	5e                   	pop    esi
c0016624:	89 fa                	mov    edx,edi
c0016626:	5f                   	pop    edi
c0016627:	c3                   	ret    
c0016628:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001662d:	83 ce ff             	or     esi,0xffffffff
c0016630:	83 cf ff             	or     edi,0xffffffff
c0016633:	8b 10                	mov    edx,DWORD PTR [eax]
c0016635:	6a 00                	push   0x0
c0016637:	6a 00                	push   0x0
c0016639:	6a 00                	push   0x0
c001663b:	50                   	push   eax
c001663c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001663f:	83 c4 10             	add    esp,0x10
c0016642:	89 f0                	mov    eax,esi
c0016644:	89 fa                	mov    edx,edi
c0016646:	59                   	pop    ecx
c0016647:	5e                   	pop    esi
c0016648:	5f                   	pop    edi
c0016649:	c3                   	ret    
c001664a:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001664f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016651:	6a 00                	push   0x0
c0016653:	6a 00                	push   0x0
c0016655:	6a 01                	push   0x1
c0016657:	50                   	push   eax
c0016658:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001665b:	83 c4 10             	add    esp,0x10
c001665e:	89 f0                	mov    eax,esi
c0016660:	89 fa                	mov    edx,edi
c0016662:	59                   	pop    ecx
c0016663:	5e                   	pop    esi
c0016664:	5f                   	pop    edi
c0016665:	c3                   	ret    
c0016666:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c001666b:	85 c0                	test   eax,eax
c001666d:	74 02                	je     c0016671 <sysShutdown(regs*)+0x6f>
c001666f:	ff d0                	call   eax
c0016671:	31 f6                	xor    esi,esi
c0016673:	59                   	pop    ecx
c0016674:	31 ff                	xor    edi,edi
c0016676:	89 f0                	mov    eax,esi
c0016678:	5e                   	pop    esi
c0016679:	89 fa                	mov    edx,edi
c001667b:	5f                   	pop    edi
c001667c:	c3                   	ret    

c001667d <sysCallGetCwd(regs*)>:
c001667d:	83 ec 10             	sub    esp,0x10
c0016680:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016684:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016687:	52                   	push   edx
c0016688:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001668b:	51                   	push   ecx
c001668c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016691:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016694:	50                   	push   eax
c0016695:	e8 37 94 ff ff       	call   c000fad1 <getcwd(Process*, char*, int)>
c001669a:	89 c2                	mov    edx,eax
c001669c:	83 c4 1c             	add    esp,0x1c
c001669f:	c1 fa 1f             	sar    edx,0x1f
c00166a2:	c3                   	ret    

c00166a3 <sysCallSetCwd(regs*)>:
c00166a3:	83 ec 14             	sub    esp,0x14
c00166a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00166ad:	50                   	push   eax
c00166ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166b3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00166b6:	52                   	push   edx
c00166b7:	e8 3f 94 ff ff       	call   c000fafb <setcwd(Process*, char*)>
c00166bc:	89 c2                	mov    edx,eax
c00166be:	83 c4 1c             	add    esp,0x1c
c00166c1:	c1 fa 1f             	sar    edx,0x1f
c00166c4:	c3                   	ret    

c00166c5 <sysCallRealpath(regs*)>:
c00166c5:	53                   	push   ebx
c00166c6:	83 ec 08             	sub    esp,0x8
c00166c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166cd:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00166d0:	85 c9                	test   ecx,ecx
c00166d2:	74 35                	je     c0016709 <sysCallRealpath(regs*)+0x44>
c00166d4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166d7:	31 d2                	xor    edx,edx
c00166d9:	b8 01 00 00 00       	mov    eax,0x1
c00166de:	85 db                	test   ebx,ebx
c00166e0:	75 05                	jne    c00166e7 <sysCallRealpath(regs*)+0x22>
c00166e2:	83 c4 08             	add    esp,0x8
c00166e5:	5b                   	pop    ebx
c00166e6:	c3                   	ret    
c00166e7:	50                   	push   eax
c00166e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166f0:	05 0c 01 00 00       	add    eax,0x10c
c00166f5:	50                   	push   eax
c00166f6:	51                   	push   ecx
c00166f7:	53                   	push   ebx
c00166f8:	e8 b9 8e ff ff       	call   c000f5b6 <standardiseFiles(char*, char const*, char const*)>
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	31 c0                	xor    eax,eax
c0016702:	31 d2                	xor    edx,edx
c0016704:	83 c4 08             	add    esp,0x8
c0016707:	5b                   	pop    ebx
c0016708:	c3                   	ret    
c0016709:	b8 01 00 00 00       	mov    eax,0x1
c001670e:	31 d2                	xor    edx,edx
c0016710:	eb f2                	jmp    c0016704 <sysCallRealpath(regs*)+0x3f>

c0016712 <sysCallReadDir(regs*)>:
c0016712:	53                   	push   ebx
c0016713:	83 ec 18             	sub    esp,0x18
c0016716:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001671a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001671d:	83 f8 02             	cmp    eax,0x2
c0016720:	76 56                	jbe    c0016778 <sysCallReadDir(regs*)+0x66>
c0016722:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016725:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001672b:	77 57                	ja     c0016784 <sysCallReadDir(regs*)+0x72>
c001672d:	83 ec 0c             	sub    esp,0xc
c0016730:	50                   	push   eax
c0016731:	e8 4f 79 ff ff       	call   c000e085 <getFromFileDescriptor(int)>
c0016736:	83 c4 10             	add    esp,0x10
c0016739:	85 c0                	test   eax,eax
c001673b:	74 57                	je     c0016794 <sysCallReadDir(regs*)+0x82>
c001673d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016745:	83 ec 0c             	sub    esp,0xc
c0016748:	8b 10                	mov    edx,DWORD PTR [eax]
c001674a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001674e:	51                   	push   ecx
c001674f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0016752:	51                   	push   ecx
c0016753:	6a 00                	push   0x0
c0016755:	68 10 01 00 00       	push   0x110
c001675a:	50                   	push   eax
c001675b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001675e:	83 c4 20             	add    esp,0x20
c0016761:	89 c1                	mov    ecx,eax
c0016763:	85 c0                	test   eax,eax
c0016765:	74 38                	je     c001679f <sysCallReadDir(regs*)+0x8d>
c0016767:	31 d2                	xor    edx,edx
c0016769:	b8 02 00 00 00       	mov    eax,0x2
c001676e:	83 f9 07             	cmp    ecx,0x7
c0016771:	74 05                	je     c0016778 <sysCallReadDir(regs*)+0x66>
c0016773:	83 c4 18             	add    esp,0x18
c0016776:	5b                   	pop    ebx
c0016777:	c3                   	ret    
c0016778:	b8 01 00 00 00       	mov    eax,0x1
c001677d:	31 d2                	xor    edx,edx
c001677f:	83 c4 18             	add    esp,0x18
c0016782:	5b                   	pop    ebx
c0016783:	c3                   	ret    
c0016784:	53                   	push   ebx
c0016785:	53                   	push   ebx
c0016786:	52                   	push   edx
c0016787:	68 c8 2a 02 c0       	push   0xc0022ac8
c001678c:	e8 98 8a ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0016791:	83 c4 10             	add    esp,0x10
c0016794:	83 c4 18             	add    esp,0x18
c0016797:	83 c8 ff             	or     eax,0xffffffff
c001679a:	83 ca ff             	or     edx,0xffffffff
c001679d:	5b                   	pop    ebx
c001679e:	c3                   	ret    
c001679f:	31 c0                	xor    eax,eax
c00167a1:	31 d2                	xor    edx,edx
c00167a3:	eb da                	jmp    c001677f <sysCallReadDir(regs*)+0x6d>

c00167a5 <sysCallIsATTY(regs*)>:
c00167a5:	83 ec 0c             	sub    esp,0xc
c00167a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00167af:	83 f8 02             	cmp    eax,0x2
c00167b2:	76 07                	jbe    c00167bb <sysCallIsATTY(regs*)+0x16>
c00167b4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00167b9:	75 28                	jne    c00167e3 <sysCallIsATTY(regs*)+0x3e>
c00167bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167c3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00167c9:	85 c0                	test   eax,eax
c00167cb:	74 26                	je     c00167f3 <sysCallIsATTY(regs*)+0x4e>
c00167cd:	83 ec 0c             	sub    esp,0xc
c00167d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00167d2:	50                   	push   eax
c00167d3:	ff 12                	call   DWORD PTR [edx]
c00167d5:	83 c4 10             	add    esp,0x10
c00167d8:	25 ff 00 00 00       	and    eax,0xff
c00167dd:	31 d2                	xor    edx,edx
c00167df:	83 c4 0c             	add    esp,0xc
c00167e2:	c3                   	ret    
c00167e3:	83 ec 0c             	sub    esp,0xc
c00167e6:	50                   	push   eax
c00167e7:	e8 99 78 ff ff       	call   c000e085 <getFromFileDescriptor(int)>
c00167ec:	83 c4 10             	add    esp,0x10
c00167ef:	85 c0                	test   eax,eax
c00167f1:	75 da                	jne    c00167cd <sysCallIsATTY(regs*)+0x28>
c00167f3:	83 c8 ff             	or     eax,0xffffffff
c00167f6:	83 ca ff             	or     edx,0xffffffff
c00167f9:	83 c4 0c             	add    esp,0xc
c00167fc:	c3                   	ret    

c00167fd <sysCallSeek(regs*)>:
c00167fd:	53                   	push   ebx
c00167fe:	83 ec 08             	sub    esp,0x8
c0016801:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016805:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016808:	83 f8 02             	cmp    eax,0x2
c001680b:	76 4b                	jbe    c0016858 <sysCallSeek(regs*)+0x5b>
c001680d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016812:	77 34                	ja     c0016848 <sysCallSeek(regs*)+0x4b>
c0016814:	83 ec 0c             	sub    esp,0xc
c0016817:	50                   	push   eax
c0016818:	e8 68 78 ff ff       	call   c000e085 <getFromFileDescriptor(int)>
c001681d:	83 c4 0c             	add    esp,0xc
c0016820:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016823:	31 db                	xor    ebx,ebx
c0016825:	53                   	push   ebx
c0016826:	51                   	push   ecx
c0016827:	50                   	push   eax
c0016828:	e8 55 90 ff ff       	call   c000f882 <File::seek(unsigned long long)>
c001682d:	83 c4 10             	add    esp,0x10
c0016830:	85 c0                	test   eax,eax
c0016832:	0f 95 c0             	setne  al
c0016835:	25 ff 00 00 00       	and    eax,0xff
c001683a:	31 d2                	xor    edx,edx
c001683c:	f7 d8                	neg    eax
c001683e:	83 d2 00             	adc    edx,0x0
c0016841:	83 c4 08             	add    esp,0x8
c0016844:	f7 da                	neg    edx
c0016846:	5b                   	pop    ebx
c0016847:	c3                   	ret    
c0016848:	52                   	push   edx
c0016849:	52                   	push   edx
c001684a:	50                   	push   eax
c001684b:	68 84 2b 02 c0       	push   0xc0022b84
c0016850:	e8 d4 89 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0016855:	83 c4 10             	add    esp,0x10
c0016858:	83 c4 08             	add    esp,0x8
c001685b:	83 c8 ff             	or     eax,0xffffffff
c001685e:	83 ca ff             	or     edx,0xffffffff
c0016861:	5b                   	pop    ebx
c0016862:	c3                   	ret    

c0016863 <sysCallTell(regs*)>:
c0016863:	53                   	push   ebx
c0016864:	83 ec 08             	sub    esp,0x8
c0016867:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001686b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001686e:	83 f8 02             	cmp    eax,0x2
c0016871:	76 60                	jbe    c00168d3 <sysCallTell(regs*)+0x70>
c0016873:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016878:	77 30                	ja     c00168aa <sysCallTell(regs*)+0x47>
c001687a:	83 ec 0c             	sub    esp,0xc
c001687d:	50                   	push   eax
c001687e:	e8 02 78 ff ff       	call   c000e085 <getFromFileDescriptor(int)>
c0016883:	5a                   	pop    edx
c0016884:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016887:	59                   	pop    ecx
c0016888:	53                   	push   ebx
c0016889:	50                   	push   eax
c001688a:	e8 49 90 ff ff       	call   c000f8d8 <File::tell(unsigned long long*)>
c001688f:	83 c4 10             	add    esp,0x10
c0016892:	85 c0                	test   eax,eax
c0016894:	0f 95 c0             	setne  al
c0016897:	25 ff 00 00 00       	and    eax,0xff
c001689c:	31 d2                	xor    edx,edx
c001689e:	f7 d8                	neg    eax
c00168a0:	83 d2 00             	adc    edx,0x0
c00168a3:	83 c4 08             	add    esp,0x8
c00168a6:	f7 da                	neg    edx
c00168a8:	5b                   	pop    ebx
c00168a9:	c3                   	ret    
c00168aa:	52                   	push   edx
c00168ab:	52                   	push   edx
c00168ac:	50                   	push   eax
c00168ad:	68 9e 2b 02 c0       	push   0xc0022b9e
c00168b2:	e8 72 89 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00168b7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	31 d2                	xor    edx,edx
c00168bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168cc:	83 c4 08             	add    esp,0x8
c00168cf:	31 c0                	xor    eax,eax
c00168d1:	5b                   	pop    ebx
c00168d2:	c3                   	ret    
c00168d3:	83 c4 08             	add    esp,0x8
c00168d6:	83 c8 ff             	or     eax,0xffffffff
c00168d9:	83 ca ff             	or     edx,0xffffffff
c00168dc:	5b                   	pop    ebx
c00168dd:	c3                   	ret    

c00168de <sysCallSizeFromFilename(regs*)>:
c00168de:	57                   	push   edi
c00168df:	56                   	push   esi
c00168e0:	53                   	push   ebx
c00168e1:	83 ec 10             	sub    esp,0x10
c00168e4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168e8:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00168eb:	83 fb 02             	cmp    ebx,0x2
c00168ee:	0f 86 8b 00 00 00    	jbe    c001697f <sysCallSizeFromFilename(regs*)+0xa1>
c00168f4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00168fa:	77 58                	ja     c0016954 <sysCallSizeFromFilename(regs*)+0x76>
c00168fc:	83 ec 0c             	sub    esp,0xc
c00168ff:	68 14 01 00 00       	push   0x114
c0016904:	e8 eb 87 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0016909:	89 c7                	mov    edi,eax
c001690b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016910:	83 c4 0c             	add    esp,0xc
c0016913:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016916:	50                   	push   eax
c0016917:	53                   	push   ebx
c0016918:	57                   	push   edi
c0016919:	e8 42 8e ff ff       	call   c000f760 <File::File(char const*, Process*)>
c001691e:	83 c4 0c             	add    esp,0xc
c0016921:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016925:	50                   	push   eax
c0016926:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0016929:	52                   	push   edx
c001692a:	57                   	push   edi
c001692b:	e8 40 91 ff ff       	call   c000fa70 <File::stat(unsigned long long*, bool*)>
c0016930:	89 c3                	mov    ebx,eax
c0016932:	8b 07                	mov    eax,DWORD PTR [edi]
c0016934:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016937:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001693a:	31 c0                	xor    eax,eax
c001693c:	83 c4 10             	add    esp,0x10
c001693f:	85 db                	test   ebx,ebx
c0016941:	0f 95 c0             	setne  al
c0016944:	31 d2                	xor    edx,edx
c0016946:	f7 d8                	neg    eax
c0016948:	83 d2 00             	adc    edx,0x0
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	f7 da                	neg    edx
c0016950:	5b                   	pop    ebx
c0016951:	5e                   	pop    esi
c0016952:	5f                   	pop    edi
c0016953:	c3                   	ret    
c0016954:	51                   	push   ecx
c0016955:	51                   	push   ecx
c0016956:	53                   	push   ebx
c0016957:	68 b8 2b 02 c0       	push   0xc0022bb8
c001695c:	e8 c8 88 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0016961:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	31 d2                	xor    edx,edx
c0016969:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001696f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	31 c0                	xor    eax,eax
c001697b:	5b                   	pop    ebx
c001697c:	5e                   	pop    esi
c001697d:	5f                   	pop    edi
c001697e:	c3                   	ret    
c001697f:	83 c4 10             	add    esp,0x10
c0016982:	83 c8 ff             	or     eax,0xffffffff
c0016985:	83 ca ff             	or     edx,0xffffffff
c0016988:	5b                   	pop    ebx
c0016989:	5e                   	pop    esi
c001698a:	5f                   	pop    edi
c001698b:	c3                   	ret    

c001698c <sysCallSize(regs*)>:
c001698c:	53                   	push   ebx
c001698d:	83 ec 18             	sub    esp,0x18
c0016990:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016994:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016997:	83 f8 02             	cmp    eax,0x2
c001699a:	76 66                	jbe    c0016a02 <sysCallSize(regs*)+0x76>
c001699c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00169a1:	77 36                	ja     c00169d9 <sysCallSize(regs*)+0x4d>
c00169a3:	83 ec 0c             	sub    esp,0xc
c00169a6:	50                   	push   eax
c00169a7:	e8 d9 76 ff ff       	call   c000e085 <getFromFileDescriptor(int)>
c00169ac:	83 c4 0c             	add    esp,0xc
c00169af:	8d 54 24 13          	lea    edx,[esp+0x13]
c00169b3:	52                   	push   edx
c00169b4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00169b7:	52                   	push   edx
c00169b8:	50                   	push   eax
c00169b9:	e8 b2 90 ff ff       	call   c000fa70 <File::stat(unsigned long long*, bool*)>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	85 c0                	test   eax,eax
c00169c3:	0f 95 c0             	setne  al
c00169c6:	25 ff 00 00 00       	and    eax,0xff
c00169cb:	31 d2                	xor    edx,edx
c00169cd:	f7 d8                	neg    eax
c00169cf:	83 d2 00             	adc    edx,0x0
c00169d2:	83 c4 18             	add    esp,0x18
c00169d5:	f7 da                	neg    edx
c00169d7:	5b                   	pop    ebx
c00169d8:	c3                   	ret    
c00169d9:	51                   	push   ecx
c00169da:	51                   	push   ecx
c00169db:	50                   	push   eax
c00169dc:	68 b8 2b 02 c0       	push   0xc0022bb8
c00169e1:	e8 43 88 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00169e6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169e9:	83 c4 10             	add    esp,0x10
c00169ec:	31 d2                	xor    edx,edx
c00169ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169fb:	83 c4 18             	add    esp,0x18
c00169fe:	31 c0                	xor    eax,eax
c0016a00:	5b                   	pop    ebx
c0016a01:	c3                   	ret    
c0016a02:	83 c4 18             	add    esp,0x18
c0016a05:	83 c8 ff             	or     eax,0xffffffff
c0016a08:	83 ca ff             	or     edx,0xffffffff
c0016a0b:	5b                   	pop    ebx
c0016a0c:	c3                   	ret    

c0016a0d <sysCallClose(regs*)>:
c0016a0d:	53                   	push   ebx
c0016a0e:	83 ec 08             	sub    esp,0x8
c0016a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a15:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a18:	83 f8 02             	cmp    eax,0x2
c0016a1b:	76 4f                	jbe    c0016a6c <sysCallClose(regs*)+0x5f>
c0016a1d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016a22:	74 53                	je     c0016a77 <sysCallClose(regs*)+0x6a>
c0016a24:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a29:	74 5b                	je     c0016a86 <sysCallClose(regs*)+0x79>
c0016a2b:	77 2f                	ja     c0016a5c <sysCallClose(regs*)+0x4f>
c0016a2d:	83 ec 0c             	sub    esp,0xc
c0016a30:	50                   	push   eax
c0016a31:	e8 4f 76 ff ff       	call   c000e085 <getFromFileDescriptor(int)>
c0016a36:	89 c3                	mov    ebx,eax
c0016a38:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a3b:	e8 e2 8d ff ff       	call   c000f822 <File::close()>
c0016a40:	83 c4 10             	add    esp,0x10
c0016a43:	85 db                	test   ebx,ebx
c0016a45:	74 0c                	je     c0016a53 <sysCallClose(regs*)+0x46>
c0016a47:	83 ec 0c             	sub    esp,0xc
c0016a4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a4c:	53                   	push   ebx
c0016a4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a50:	83 c4 10             	add    esp,0x10
c0016a53:	83 c4 08             	add    esp,0x8
c0016a56:	31 c0                	xor    eax,eax
c0016a58:	31 d2                	xor    edx,edx
c0016a5a:	5b                   	pop    ebx
c0016a5b:	c3                   	ret    
c0016a5c:	52                   	push   edx
c0016a5d:	52                   	push   edx
c0016a5e:	50                   	push   eax
c0016a5f:	68 ec 2a 02 c0       	push   0xc0022aec
c0016a64:	e8 c0 87 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0016a69:	83 c4 10             	add    esp,0x10
c0016a6c:	83 c4 08             	add    esp,0x8
c0016a6f:	83 c8 ff             	or     eax,0xffffffff
c0016a72:	83 ca ff             	or     edx,0xffffffff
c0016a75:	5b                   	pop    ebx
c0016a76:	c3                   	ret    
c0016a77:	83 ec 0c             	sub    esp,0xc
c0016a7a:	68 d3 2b 02 c0       	push   0xc0022bd3
c0016a7f:	e8 a5 87 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0016a84:	eb ca                	jmp    c0016a50 <sysCallClose(regs*)+0x43>
c0016a86:	83 ec 0c             	sub    esp,0xc
c0016a89:	68 e1 2b 02 c0       	push   0xc0022be1
c0016a8e:	eb ef                	jmp    c0016a7f <sysCallClose(regs*)+0x72>

c0016a90 <sysCallOpenDir(regs*)>:
c0016a90:	56                   	push   esi
c0016a91:	53                   	push   ebx
c0016a92:	50                   	push   eax
c0016a93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a97:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a9a:	85 c0                	test   eax,eax
c0016a9c:	74 53                	je     c0016af1 <sysCallOpenDir(regs*)+0x61>
c0016a9e:	83 ec 0c             	sub    esp,0xc
c0016aa1:	68 14 01 00 00       	push   0x114
c0016aa6:	e8 49 86 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0016aab:	89 c6                	mov    esi,eax
c0016aad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ab2:	83 c4 0c             	add    esp,0xc
c0016ab5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ab8:	50                   	push   eax
c0016ab9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016abc:	50                   	push   eax
c0016abd:	56                   	push   esi
c0016abe:	e8 5f 91 ff ff       	call   c000fc22 <Directory::Directory(char const*, Process*)>
c0016ac3:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ac6:	e8 bb 91 ff ff       	call   c000fc86 <Directory::open()>
c0016acb:	83 c4 10             	add    esp,0x10
c0016ace:	85 c0                	test   eax,eax
c0016ad0:	75 1f                	jne    c0016af1 <sysCallOpenDir(regs*)+0x61>
c0016ad2:	83 ec 0c             	sub    esp,0xc
c0016ad5:	56                   	push   esi
c0016ad6:	e8 f5 72 ff ff       	call   c000ddd0 <UnixFile::getFileDescriptor()>
c0016adb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	89 02                	mov    DWORD PTR [edx],eax
c0016ae3:	c1 f8 1f             	sar    eax,0x1f
c0016ae6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016ae9:	31 c0                	xor    eax,eax
c0016aeb:	59                   	pop    ecx
c0016aec:	31 d2                	xor    edx,edx
c0016aee:	5b                   	pop    ebx
c0016aef:	5e                   	pop    esi
c0016af0:	c3                   	ret    
c0016af1:	59                   	pop    ecx
c0016af2:	83 c8 ff             	or     eax,0xffffffff
c0016af5:	5b                   	pop    ebx
c0016af6:	83 ca ff             	or     edx,0xffffffff
c0016af9:	5e                   	pop    esi
c0016afa:	c3                   	ret    

c0016afb <sysCallMakeDir(regs*)>:
c0016afb:	56                   	push   esi
c0016afc:	53                   	push   ebx
c0016afd:	83 ec 10             	sub    esp,0x10
c0016b00:	68 14 01 00 00       	push   0x114
c0016b05:	e8 ea 85 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0016b0a:	89 c3                	mov    ebx,eax
c0016b0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b11:	83 c4 0c             	add    esp,0xc
c0016b14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b17:	50                   	push   eax
c0016b18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b1c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016b1f:	52                   	push   edx
c0016b20:	53                   	push   ebx
c0016b21:	e8 fc 90 ff ff       	call   c000fc22 <Directory::Directory(char const*, Process*)>
c0016b26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b29:	e8 38 93 ff ff       	call   c000fe66 <Directory::create()>
c0016b2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b31:	89 c6                	mov    esi,eax
c0016b33:	e8 aa 91 ff ff       	call   c000fce2 <Directory::close()>
c0016b38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b40:	31 c0                	xor    eax,eax
c0016b42:	85 f6                	test   esi,esi
c0016b44:	0f 95 c0             	setne  al
c0016b47:	31 d2                	xor    edx,edx
c0016b49:	f7 d8                	neg    eax
c0016b4b:	83 d2 00             	adc    edx,0x0
c0016b4e:	83 c4 14             	add    esp,0x14
c0016b51:	f7 da                	neg    edx
c0016b53:	5b                   	pop    ebx
c0016b54:	5e                   	pop    esi
c0016b55:	c3                   	ret    

c0016b56 <sysCallCloseDir(regs*)>:
c0016b56:	53                   	push   ebx
c0016b57:	83 ec 08             	sub    esp,0x8
c0016b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b5e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b61:	83 f8 02             	cmp    eax,0x2
c0016b64:	76 46                	jbe    c0016bac <sysCallCloseDir(regs*)+0x56>
c0016b66:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b6b:	77 2f                	ja     c0016b9c <sysCallCloseDir(regs*)+0x46>
c0016b6d:	83 ec 0c             	sub    esp,0xc
c0016b70:	50                   	push   eax
c0016b71:	e8 0f 75 ff ff       	call   c000e085 <getFromFileDescriptor(int)>
c0016b76:	89 c3                	mov    ebx,eax
c0016b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b7b:	e8 62 91 ff ff       	call   c000fce2 <Directory::close()>
c0016b80:	83 c4 10             	add    esp,0x10
c0016b83:	85 db                	test   ebx,ebx
c0016b85:	74 0c                	je     c0016b93 <sysCallCloseDir(regs*)+0x3d>
c0016b87:	83 ec 0c             	sub    esp,0xc
c0016b8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b8c:	53                   	push   ebx
c0016b8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b90:	83 c4 10             	add    esp,0x10
c0016b93:	83 c4 08             	add    esp,0x8
c0016b96:	31 c0                	xor    eax,eax
c0016b98:	31 d2                	xor    edx,edx
c0016b9a:	5b                   	pop    ebx
c0016b9b:	c3                   	ret    
c0016b9c:	52                   	push   edx
c0016b9d:	52                   	push   edx
c0016b9e:	50                   	push   eax
c0016b9f:	68 14 2b 02 c0       	push   0xc0022b14
c0016ba4:	e8 80 86 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0016ba9:	83 c4 10             	add    esp,0x10
c0016bac:	83 c4 08             	add    esp,0x8
c0016baf:	83 c8 ff             	or     eax,0xffffffff
c0016bb2:	83 ca ff             	or     edx,0xffffffff
c0016bb5:	5b                   	pop    ebx
c0016bb6:	c3                   	ret    

c0016bb7 <sysCallWait(regs*)>:
c0016bb7:	83 ec 10             	sub    esp,0x10
c0016bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bbe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016bc1:	52                   	push   edx
c0016bc2:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016bc5:	51                   	push   ecx
c0016bc6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016bc9:	50                   	push   eax
c0016bca:	e8 4f 23 00 00       	call   c0018f1e <waitTask(int, int*, int)>
c0016bcf:	89 c2                	mov    edx,eax
c0016bd1:	83 c4 1c             	add    esp,0x1c
c0016bd4:	c1 fa 1f             	sar    edx,0x1f
c0016bd7:	c3                   	ret    

c0016bd8 <sysCallRmdir(regs*)>:
c0016bd8:	56                   	push   esi
c0016bd9:	53                   	push   ebx
c0016bda:	83 ec 10             	sub    esp,0x10
c0016bdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016be1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016be4:	68 14 01 00 00       	push   0x114
c0016be9:	e8 06 85 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0016bee:	83 c4 0c             	add    esp,0xc
c0016bf1:	89 c3                	mov    ebx,eax
c0016bf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bf8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016bfb:	50                   	push   eax
c0016bfc:	56                   	push   esi
c0016bfd:	53                   	push   ebx
c0016bfe:	e8 5d 8b ff ff       	call   c000f760 <File::File(char const*, Process*)>
c0016c03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c06:	e8 31 8d ff ff       	call   c000f93c <File::unlink()>
c0016c0b:	89 c6                	mov    esi,eax
c0016c0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c12:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c15:	31 c0                	xor    eax,eax
c0016c17:	85 f6                	test   esi,esi
c0016c19:	0f 95 c0             	setne  al
c0016c1c:	31 d2                	xor    edx,edx
c0016c1e:	f7 d8                	neg    eax
c0016c20:	83 d2 00             	adc    edx,0x0
c0016c23:	83 c4 14             	add    esp,0x14
c0016c26:	f7 da                	neg    edx
c0016c28:	5b                   	pop    ebx
c0016c29:	5e                   	pop    esi
c0016c2a:	c3                   	ret    

c0016c2b <sysCallUnlink(regs*)>:
c0016c2b:	56                   	push   esi
c0016c2c:	53                   	push   ebx
c0016c2d:	83 ec 10             	sub    esp,0x10
c0016c30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c34:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c37:	68 14 01 00 00       	push   0x114
c0016c3c:	e8 b3 84 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0016c41:	83 c4 0c             	add    esp,0xc
c0016c44:	89 c3                	mov    ebx,eax
c0016c46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c4b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c4e:	50                   	push   eax
c0016c4f:	56                   	push   esi
c0016c50:	53                   	push   ebx
c0016c51:	e8 0a 8b ff ff       	call   c000f760 <File::File(char const*, Process*)>
c0016c56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c59:	e8 de 8c ff ff       	call   c000f93c <File::unlink()>
c0016c5e:	89 c6                	mov    esi,eax
c0016c60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c68:	31 c0                	xor    eax,eax
c0016c6a:	85 f6                	test   esi,esi
c0016c6c:	0f 95 c0             	setne  al
c0016c6f:	31 d2                	xor    edx,edx
c0016c71:	f7 d8                	neg    eax
c0016c73:	83 d2 00             	adc    edx,0x0
c0016c76:	83 c4 14             	add    esp,0x14
c0016c79:	f7 da                	neg    edx
c0016c7b:	5b                   	pop    ebx
c0016c7c:	5e                   	pop    esi
c0016c7d:	c3                   	ret    

c0016c7e <sysCallGetArgv(regs*)>:
c0016c7e:	83 ec 0c             	sub    esp,0xc
c0016c81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c85:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016c88:	85 c0                	test   eax,eax
c0016c8a:	78 2b                	js     c0016cb7 <sysCallGetArgv(regs*)+0x39>
c0016c8c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c92:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016c95:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016c9b:	7d 1a                	jge    c0016cb7 <sysCallGetArgv(regs*)+0x39>
c0016c9d:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016ca4:	85 c0                	test   eax,eax
c0016ca6:	74 17                	je     c0016cbf <sysCallGetArgv(regs*)+0x41>
c0016ca8:	51                   	push   ecx
c0016ca9:	51                   	push   ecx
c0016caa:	50                   	push   eax
c0016cab:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016cae:	50                   	push   eax
c0016caf:	e8 c3 9a fe ff       	call   c0000777 <strcpy>
c0016cb4:	83 c4 10             	add    esp,0x10
c0016cb7:	31 c0                	xor    eax,eax
c0016cb9:	31 d2                	xor    edx,edx
c0016cbb:	83 c4 0c             	add    esp,0xc
c0016cbe:	c3                   	ret    
c0016cbf:	b8 01 00 00 00       	mov    eax,0x1
c0016cc4:	31 d2                	xor    edx,edx
c0016cc6:	83 c4 0c             	add    esp,0xc
c0016cc9:	c3                   	ret    

c0016cca <sysCallTTYName(regs*)>:
c0016cca:	56                   	push   esi
c0016ccb:	53                   	push   ebx
c0016ccc:	50                   	push   eax
c0016ccd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cd1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cd4:	85 c0                	test   eax,eax
c0016cd6:	74 4d                	je     c0016d25 <sysCallTTYName(regs*)+0x5b>
c0016cd8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016cdb:	83 f8 02             	cmp    eax,0x2
c0016cde:	76 07                	jbe    c0016ce7 <sysCallTTYName(regs*)+0x1d>
c0016ce0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016ce5:	75 54                	jne    c0016d3b <sysCallTTYName(regs*)+0x71>
c0016ce7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cef:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016cf5:	85 db                	test   ebx,ebx
c0016cf7:	74 2c                	je     c0016d25 <sysCallTTYName(regs*)+0x5b>
c0016cf9:	83 ec 0c             	sub    esp,0xc
c0016cfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cfe:	53                   	push   ebx
c0016cff:	ff 10                	call   DWORD PTR [eax]
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	84 c0                	test   al,al
c0016d06:	74 28                	je     c0016d30 <sysCallTTYName(regs*)+0x66>
c0016d08:	50                   	push   eax
c0016d09:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016d0f:	50                   	push   eax
c0016d10:	53                   	push   ebx
c0016d11:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016d14:	50                   	push   eax
c0016d15:	e8 5d 9a fe ff       	call   c0000777 <strcpy>
c0016d1a:	83 c4 10             	add    esp,0x10
c0016d1d:	31 c0                	xor    eax,eax
c0016d1f:	31 d2                	xor    edx,edx
c0016d21:	59                   	pop    ecx
c0016d22:	5b                   	pop    ebx
c0016d23:	5e                   	pop    esi
c0016d24:	c3                   	ret    
c0016d25:	59                   	pop    ecx
c0016d26:	b8 01 00 00 00       	mov    eax,0x1
c0016d2b:	5b                   	pop    ebx
c0016d2c:	31 d2                	xor    edx,edx
c0016d2e:	5e                   	pop    esi
c0016d2f:	c3                   	ret    
c0016d30:	59                   	pop    ecx
c0016d31:	b8 02 00 00 00       	mov    eax,0x2
c0016d36:	5b                   	pop    ebx
c0016d37:	31 d2                	xor    edx,edx
c0016d39:	5e                   	pop    esi
c0016d3a:	c3                   	ret    
c0016d3b:	83 ec 0c             	sub    esp,0xc
c0016d3e:	50                   	push   eax
c0016d3f:	e8 41 73 ff ff       	call   c000e085 <getFromFileDescriptor(int)>
c0016d44:	83 c4 10             	add    esp,0x10
c0016d47:	89 c3                	mov    ebx,eax
c0016d49:	eb aa                	jmp    c0016cf5 <sysCallTTYName(regs*)+0x2b>

c0016d4b <sysCallGetEnv(regs*)>:
c0016d4b:	83 ec 0c             	sub    esp,0xc
c0016d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d52:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d55:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d58:	85 d2                	test   edx,edx
c0016d5a:	75 22                	jne    c0016d7e <sysCallGetEnv(regs*)+0x33>
c0016d5c:	31 c0                	xor    eax,eax
c0016d5e:	31 d2                	xor    edx,edx
c0016d60:	85 c9                	test   ecx,ecx
c0016d62:	74 04                	je     c0016d68 <sysCallGetEnv(regs*)+0x1d>
c0016d64:	83 c4 0c             	add    esp,0xc
c0016d67:	c3                   	ret    
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	68 38 2b 02 c0       	push   0xc0022b38
c0016d70:	e8 80 99 fe ff       	call   c00006f5 <strlen>
c0016d75:	83 c4 10             	add    esp,0x10
c0016d78:	31 d2                	xor    edx,edx
c0016d7a:	83 c4 0c             	add    esp,0xc
c0016d7d:	c3                   	ret    
c0016d7e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016d81:	85 c9                	test   ecx,ecx
c0016d83:	74 0b                	je     c0016d90 <sysCallGetEnv(regs*)+0x45>
c0016d85:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016d88:	31 c0                	xor    eax,eax
c0016d8a:	31 d2                	xor    edx,edx
c0016d8c:	83 c4 0c             	add    esp,0xc
c0016d8f:	c3                   	ret    
c0016d90:	52                   	push   edx
c0016d91:	52                   	push   edx
c0016d92:	68 38 2b 02 c0       	push   0xc0022b38
c0016d97:	50                   	push   eax
c0016d98:	e8 da 99 fe ff       	call   c0000777 <strcpy>
c0016d9d:	83 c4 10             	add    esp,0x10
c0016da0:	eb e6                	jmp    c0016d88 <sysCallGetEnv(regs*)+0x3d>

c0016da2 <sysCallUSleep(regs*)>:
c0016da2:	57                   	push   edi
c0016da3:	56                   	push   esi
c0016da4:	53                   	push   ebx
c0016da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da9:	52                   	push   edx
c0016daa:	52                   	push   edx
c0016dab:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016dae:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016db1:	89 c8                	mov    eax,ecx
c0016db3:	89 da                	mov    edx,ebx
c0016db5:	0f a4 c2 05          	shld   edx,eax,0x5
c0016db9:	c1 e0 05             	shl    eax,0x5
c0016dbc:	29 c8                	sub    eax,ecx
c0016dbe:	19 da                	sbb    edx,ebx
c0016dc0:	0f a4 c2 02          	shld   edx,eax,0x2
c0016dc4:	c1 e0 02             	shl    eax,0x2
c0016dc7:	01 c8                	add    eax,ecx
c0016dc9:	11 da                	adc    edx,ebx
c0016dcb:	0f a4 c2 03          	shld   edx,eax,0x3
c0016dcf:	c1 e0 03             	shl    eax,0x3
c0016dd2:	52                   	push   edx
c0016dd3:	50                   	push   eax
c0016dd4:	e8 e0 21 00 00       	call   c0018fb9 <nanoSleep(unsigned long long)>
c0016dd9:	83 c4 10             	add    esp,0x10
c0016ddc:	31 c0                	xor    eax,eax
c0016dde:	31 d2                	xor    edx,edx
c0016de0:	5b                   	pop    ebx
c0016de1:	5e                   	pop    esi
c0016de2:	5f                   	pop    edi
c0016de3:	c3                   	ret    

c0016de4 <sysCallSpawn(regs*)>:
c0016de4:	56                   	push   esi
c0016de5:	53                   	push   ebx
c0016de6:	50                   	push   eax
c0016de7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016deb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016dee:	85 c0                	test   eax,eax
c0016df0:	75 08                	jne    c0016dfa <sysCallSpawn(regs*)+0x16>
c0016df2:	59                   	pop    ecx
c0016df3:	31 c0                	xor    eax,eax
c0016df5:	5b                   	pop    ebx
c0016df6:	31 d2                	xor    edx,edx
c0016df8:	5e                   	pop    esi
c0016df9:	c3                   	ret    
c0016dfa:	83 ec 0c             	sub    esp,0xc
c0016dfd:	68 3b 07 00 00       	push   0x73b
c0016e02:	e8 ed 82 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0016e07:	89 c6                	mov    esi,eax
c0016e09:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016e0c:	50                   	push   eax
c0016e0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e15:	50                   	push   eax
c0016e16:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e19:	50                   	push   eax
c0016e1a:	56                   	push   esi
c0016e1b:	e8 d6 18 00 00       	call   c00186f6 <Process::Process(char const*, Process*, char**)>
c0016e20:	83 c4 20             	add    esp,0x20
c0016e23:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016e2a:	75 c6                	jne    c0016df2 <sysCallSpawn(regs*)+0xe>
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	56                   	push   esi
c0016e30:	e8 3d 1e 00 00       	call   c0018c72 <Process::createUserThread()>
c0016e35:	83 c4 10             	add    esp,0x10
c0016e38:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e3a:	89 c2                	mov    edx,eax
c0016e3c:	c1 fa 1f             	sar    edx,0x1f
c0016e3f:	59                   	pop    ecx
c0016e40:	5b                   	pop    ebx
c0016e41:	5e                   	pop    esi
c0016e42:	c3                   	ret    

c0016e43 <sysAppSettings(regs*)>:
c0016e43:	53                   	push   ebx
c0016e44:	31 d2                	xor    edx,edx
c0016e46:	83 ec 08             	sub    esp,0x8
c0016e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e4d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016e50:	b8 01 00 00 00       	mov    eax,0x1
c0016e55:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016e5b:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016e61:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016e66:	75 30                	jne    c0016e98 <sysAppSettings(regs*)+0x55>
c0016e68:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016e6e:	83 e0 1f             	and    eax,0x1f
c0016e71:	3c 01                	cmp    al,0x1
c0016e73:	74 28                	je     c0016e9d <sysAppSettings(regs*)+0x5a>
c0016e75:	3c 07                	cmp    al,0x7
c0016e77:	0f 84 be 00 00 00    	je     c0016f3b <sysAppSettings(regs*)+0xf8>
c0016e7d:	84 c0                	test   al,al
c0016e7f:	0f 84 da 00 00 00    	je     c0016f5f <sysAppSettings(regs*)+0x11c>
c0016e85:	3c 08                	cmp    al,0x8
c0016e87:	74 6d                	je     c0016ef6 <sysAppSettings(regs*)+0xb3>
c0016e89:	25 ff 00 00 00       	and    eax,0xff
c0016e8e:	05 e8 03 00 00       	add    eax,0x3e8
c0016e93:	89 c2                	mov    edx,eax
c0016e95:	c1 fa 1f             	sar    edx,0x1f
c0016e98:	83 c4 08             	add    esp,0x8
c0016e9b:	5b                   	pop    ebx
c0016e9c:	c3                   	ret    
c0016e9d:	50                   	push   eax
c0016e9e:	68 00 01 00 00       	push   0x100
c0016ea3:	6a 00                	push   0x0
c0016ea5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eaa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ead:	83 c0 0c             	add    eax,0xc
c0016eb0:	50                   	push   eax
c0016eb1:	e8 22 98 fe ff       	call   c00006d8 <memset>
c0016eb6:	83 c4 0c             	add    esp,0xc
c0016eb9:	68 ff 00 00 00       	push   0xff
c0016ebe:	53                   	push   ebx
c0016ebf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ec4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ec7:	83 c0 0c             	add    eax,0xc
c0016eca:	50                   	push   eax
c0016ecb:	e8 d2 97 fe ff       	call   c00006a2 <memcpy>
c0016ed0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed5:	5a                   	pop    edx
c0016ed6:	59                   	pop    ecx
c0016ed7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016eda:	8d 50 0c             	lea    edx,[eax+0xc]
c0016edd:	52                   	push   edx
c0016ede:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ee4:	53                   	push   ebx
c0016ee5:	e8 e2 62 ff ff       	call   c000d1cc <VgaText::setTitle(char*)>
c0016eea:	83 c4 10             	add    esp,0x10
c0016eed:	31 c0                	xor    eax,eax
c0016eef:	31 d2                	xor    edx,edx
c0016ef1:	83 c4 08             	add    esp,0x8
c0016ef4:	5b                   	pop    ebx
c0016ef5:	c3                   	ret    
c0016ef6:	50                   	push   eax
c0016ef7:	50                   	push   eax
c0016ef8:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016efe:	83 e0 0f             	and    eax,0xf
c0016f01:	50                   	push   eax
c0016f02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f0a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016f10:	50                   	push   eax
c0016f11:	e8 a6 62 ff ff       	call   c000d1bc <VgaText::setTitleColour(VgaColour)>
c0016f16:	58                   	pop    eax
c0016f17:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016f1d:	c1 e8 04             	shr    eax,0x4
c0016f20:	5a                   	pop    edx
c0016f21:	83 e0 0f             	and    eax,0xf
c0016f24:	50                   	push   eax
c0016f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f2d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016f33:	51                   	push   ecx
c0016f34:	e8 73 62 ff ff       	call   c000d1ac <VgaText::setTitleTextColour(VgaColour)>
c0016f39:	eb af                	jmp    c0016eea <sysAppSettings(regs*)+0xa7>
c0016f3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f43:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016f49:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016f4f:	c0 e8 06             	shr    al,0x6
c0016f52:	83 e0 01             	and    eax,0x1
c0016f55:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016f5b:	31 c0                	xor    eax,eax
c0016f5d:	eb 90                	jmp    c0016eef <sysAppSettings(regs*)+0xac>
c0016f5f:	b8 02 00 00 00       	mov    eax,0x2
c0016f64:	31 d2                	xor    edx,edx
c0016f66:	eb 89                	jmp    c0016ef1 <sysAppSettings(regs*)+0xae>

c0016f68 <sysSetFatAttrib(regs*)>:
c0016f68:	57                   	push   edi
c0016f69:	56                   	push   esi
c0016f6a:	53                   	push   ebx
c0016f6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f6f:	83 ec 0c             	sub    esp,0xc
c0016f72:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016f75:	68 14 01 00 00       	push   0x114
c0016f7a:	e8 75 81 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0016f7f:	83 c4 0c             	add    esp,0xc
c0016f82:	89 c3                	mov    ebx,eax
c0016f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f8c:	50                   	push   eax
c0016f8d:	57                   	push   edi
c0016f8e:	53                   	push   ebx
c0016f8f:	e8 cc 87 ff ff       	call   c000f760 <File::File(char const*, Process*)>
c0016f94:	83 c4 0c             	add    esp,0xc
c0016f97:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016f9a:	0f b6 d4             	movzx  edx,ah
c0016f9d:	52                   	push   edx
c0016f9e:	25 ff 00 00 00       	and    eax,0xff
c0016fa3:	50                   	push   eax
c0016fa4:	53                   	push   ebx
c0016fa5:	e8 2c 8a ff ff       	call   c000f9d6 <File::chfatattr(unsigned char, unsigned char)>
c0016faa:	89 c6                	mov    esi,eax
c0016fac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	31 c0                	xor    eax,eax
c0016fb9:	85 f6                	test   esi,esi
c0016fbb:	0f 95 c0             	setne  al
c0016fbe:	5b                   	pop    ebx
c0016fbf:	31 d2                	xor    edx,edx
c0016fc1:	f7 d8                	neg    eax
c0016fc3:	83 d2 00             	adc    edx,0x0
c0016fc6:	5e                   	pop    esi
c0016fc7:	f7 da                	neg    edx
c0016fc9:	5f                   	pop    edi
c0016fca:	c3                   	ret    

c0016fcb <sysPanic(regs*)>:
c0016fcb:	83 ec 18             	sub    esp,0x18
c0016fce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fd2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016fd5:	50                   	push   eax
c0016fd6:	e8 77 ea ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0016fdb:	c7 04 24 ef 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bef
c0016fe2:	e8 6b ea ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0016fe7:	b8 01 00 00 00       	mov    eax,0x1
c0016fec:	31 d2                	xor    edx,edx
c0016fee:	83 c4 1c             	add    esp,0x1c
c0016ff1:	c3                   	ret    

c0016ff2 <sysPipe(regs*)>:
c0016ff2:	57                   	push   edi
c0016ff3:	56                   	push   esi
c0016ff4:	53                   	push   ebx
c0016ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff9:	83 ec 0c             	sub    esp,0xc
c0016ffc:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016fff:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0017002:	6a 20                	push   0x20
c0017004:	e8 eb 80 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0017009:	89 c3                	mov    ebx,eax
c001700b:	58                   	pop    eax
c001700c:	5a                   	pop    edx
c001700d:	68 00 50 00 00       	push   0x5000
c0017012:	53                   	push   ebx
c0017013:	e8 f2 5a ff ff       	call   c000cb0a <Pipe::Pipe(int)>
c0017018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001701b:	e8 b0 6d ff ff       	call   c000ddd0 <UnixFile::getFileDescriptor()>
c0017020:	89 07                	mov    DWORD PTR [edi],eax
c0017022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017025:	e8 a6 6d ff ff       	call   c000ddd0 <UnixFile::getFileDescriptor()>
c001702a:	83 c4 10             	add    esp,0x10
c001702d:	89 06                	mov    DWORD PTR [esi],eax
c001702f:	31 d2                	xor    edx,edx
c0017031:	5b                   	pop    ebx
c0017032:	31 c0                	xor    eax,eax
c0017034:	5e                   	pop    esi
c0017035:	5f                   	pop    edi
c0017036:	c3                   	ret    

c0017037 <sysGetUnixTime(regs*)>:
c0017037:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001703c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017042:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017046:	e9 dd 90 ff ff       	jmp    c0010128 <Clock::timeInSecondsLocal()>

c001704b <string_ends_with(char const*, char const*)>:
c001704b:	57                   	push   edi
c001704c:	56                   	push   esi
c001704d:	53                   	push   ebx
c001704e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017052:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017056:	83 ec 0c             	sub    esp,0xc
c0017059:	53                   	push   ebx
c001705a:	e8 96 96 fe ff       	call   c00006f5 <strlen>
c001705f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017062:	89 c6                	mov    esi,eax
c0017064:	e8 8c 96 fe ff       	call   c00006f5 <strlen>
c0017069:	83 c4 10             	add    esp,0x10
c001706c:	31 d2                	xor    edx,edx
c001706e:	39 c6                	cmp    esi,eax
c0017070:	7d 06                	jge    c0017078 <string_ends_with(char const*, char const*)+0x2d>
c0017072:	5b                   	pop    ebx
c0017073:	89 d0                	mov    eax,edx
c0017075:	5e                   	pop    esi
c0017076:	5f                   	pop    edi
c0017077:	c3                   	ret    
c0017078:	52                   	push   edx
c0017079:	29 c6                	sub    esi,eax
c001707b:	52                   	push   edx
c001707c:	01 f3                	add    ebx,esi
c001707e:	57                   	push   edi
c001707f:	53                   	push   ebx
c0017080:	e8 43 97 fe ff       	call   c00007c8 <strcmp>
c0017085:	83 c4 10             	add    esp,0x10
c0017088:	31 d2                	xor    edx,edx
c001708a:	85 c0                	test   eax,eax
c001708c:	5b                   	pop    ebx
c001708d:	0f 94 c2             	sete   dl
c0017090:	5e                   	pop    esi
c0017091:	89 d0                	mov    eax,edx
c0017093:	5f                   	pop    edi
c0017094:	c3                   	ret    

c0017095 <sysCallOpen(regs*)>:
c0017095:	56                   	push   esi
c0017096:	53                   	push   ebx
c0017097:	81 ec 04 01 00 00    	sub    esp,0x104
c001709d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00170a4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00170a7:	85 c9                	test   ecx,ecx
c00170a9:	0f 84 bb 00 00 00    	je     c001716a <sysCallOpen(regs*)+0xd5>
c00170af:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170b2:	85 c0                	test   eax,eax
c00170b4:	0f 84 b0 00 00 00    	je     c001716a <sysCallOpen(regs*)+0xd5>
c00170ba:	52                   	push   edx
c00170bb:	68 fe 2b 02 c0       	push   0xc0022bfe
c00170c0:	50                   	push   eax
c00170c1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00170c5:	56                   	push   esi
c00170c6:	e8 eb 84 ff ff       	call   c000f5b6 <standardiseFiles(char*, char const*, char const*)>
c00170cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00170ce:	e8 22 96 fe ff       	call   c00006f5 <strlen>
c00170d3:	83 c4 10             	add    esp,0x10
c00170d6:	48                   	dec    eax
c00170d7:	74 25                	je     c00170fe <sysCallOpen(regs*)+0x69>
c00170d9:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00170dc:	80 fa 2e             	cmp    dl,0x2e
c00170df:	74 19                	je     c00170fa <sysCallOpen(regs*)+0x65>
c00170e1:	80 fa 3a             	cmp    dl,0x3a
c00170e4:	74 14                	je     c00170fa <sysCallOpen(regs*)+0x65>
c00170e6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00170ea:	48                   	dec    eax
c00170eb:	74 11                	je     c00170fe <sysCallOpen(regs*)+0x69>
c00170ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00170f0:	80 fa 3a             	cmp    dl,0x3a
c00170f3:	74 05                	je     c00170fa <sysCallOpen(regs*)+0x65>
c00170f5:	80 fa 2e             	cmp    dl,0x2e
c00170f8:	75 ec                	jne    c00170e6 <sysCallOpen(regs*)+0x51>
c00170fa:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00170fe:	51                   	push   ecx
c00170ff:	51                   	push   ecx
c0017100:	68 02 2c 02 c0       	push   0xc0022c02
c0017105:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017108:	50                   	push   eax
c0017109:	e8 3d ff ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c001710e:	83 c4 10             	add    esp,0x10
c0017111:	85 c0                	test   eax,eax
c0017113:	75 17                	jne    c001712c <sysCallOpen(regs*)+0x97>
c0017115:	50                   	push   eax
c0017116:	50                   	push   eax
c0017117:	68 23 2c 02 c0       	push   0xc0022c23
c001711c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001711f:	50                   	push   eax
c0017120:	e8 26 ff ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c0017125:	83 c4 10             	add    esp,0x10
c0017128:	85 c0                	test   eax,eax
c001712a:	74 4d                	je     c0017179 <sysCallOpen(regs*)+0xe4>
c001712c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001712f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017135:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001713c:	50                   	push   eax
c001713d:	50                   	push   eax
c001713e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017141:	8b 10                	mov    edx,DWORD PTR [eax]
c0017143:	52                   	push   edx
c0017144:	68 07 2c 02 c0       	push   0xc0022c07
c0017149:	e8 db 80 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001714e:	c7 04 24 16 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c16
c0017155:	e8 cf 80 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001715a:	83 c4 10             	add    esp,0x10
c001715d:	81 c4 04 01 00 00    	add    esp,0x104
c0017163:	31 c0                	xor    eax,eax
c0017165:	31 d2                	xor    edx,edx
c0017167:	5b                   	pop    ebx
c0017168:	5e                   	pop    esi
c0017169:	c3                   	ret    
c001716a:	81 c4 04 01 00 00    	add    esp,0x104
c0017170:	83 c8 ff             	or     eax,0xffffffff
c0017173:	83 ca ff             	or     edx,0xffffffff
c0017176:	5b                   	pop    ebx
c0017177:	5e                   	pop    esi
c0017178:	c3                   	ret    
c0017179:	50                   	push   eax
c001717a:	50                   	push   eax
c001717b:	68 03 2c 02 c0       	push   0xc0022c03
c0017180:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017183:	50                   	push   eax
c0017184:	e8 3f 96 fe ff       	call   c00007c8 <strcmp>
c0017189:	83 c4 10             	add    esp,0x10
c001718c:	85 c0                	test   eax,eax
c001718e:	74 9c                	je     c001712c <sysCallOpen(regs*)+0x97>
c0017190:	50                   	push   eax
c0017191:	50                   	push   eax
c0017192:	68 02 2c 02 c0       	push   0xc0022c02
c0017197:	56                   	push   esi
c0017198:	e8 ae fe ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	85 c0                	test   eax,eax
c00171a2:	75 88                	jne    c001712c <sysCallOpen(regs*)+0x97>
c00171a4:	52                   	push   edx
c00171a5:	52                   	push   edx
c00171a6:	68 28 2c 02 c0       	push   0xc0022c28
c00171ab:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00171ae:	51                   	push   ecx
c00171af:	e8 97 fe ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	85 c0                	test   eax,eax
c00171b9:	0f 85 d5 00 00 00    	jne    c0017294 <sysCallOpen(regs*)+0x1ff>
c00171bf:	50                   	push   eax
c00171c0:	50                   	push   eax
c00171c1:	68 2d 2c 02 c0       	push   0xc0022c2d
c00171c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171c9:	50                   	push   eax
c00171ca:	e8 7c fe ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c00171cf:	83 c4 10             	add    esp,0x10
c00171d2:	85 c0                	test   eax,eax
c00171d4:	0f 85 ba 00 00 00    	jne    c0017294 <sysCallOpen(regs*)+0x1ff>
c00171da:	50                   	push   eax
c00171db:	50                   	push   eax
c00171dc:	68 29 2c 02 c0       	push   0xc0022c29
c00171e1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171e4:	50                   	push   eax
c00171e5:	e8 de 95 fe ff       	call   c00007c8 <strcmp>
c00171ea:	83 c4 10             	add    esp,0x10
c00171ed:	85 c0                	test   eax,eax
c00171ef:	0f 84 9f 00 00 00    	je     c0017294 <sysCallOpen(regs*)+0x1ff>
c00171f5:	50                   	push   eax
c00171f6:	50                   	push   eax
c00171f7:	68 28 2c 02 c0       	push   0xc0022c28
c00171fc:	56                   	push   esi
c00171fd:	e8 49 fe ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c0017202:	83 c4 10             	add    esp,0x10
c0017205:	85 c0                	test   eax,eax
c0017207:	0f 85 87 00 00 00    	jne    c0017294 <sysCallOpen(regs*)+0x1ff>
c001720d:	83 ec 0c             	sub    esp,0xc
c0017210:	68 14 01 00 00       	push   0x114
c0017215:	e8 da 7e ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001721a:	89 c6                	mov    esi,eax
c001721c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017221:	83 c4 0c             	add    esp,0xc
c0017224:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0017227:	51                   	push   ecx
c0017228:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001722b:	50                   	push   eax
c001722c:	56                   	push   esi
c001722d:	e8 2e 85 ff ff       	call   c000f760 <File::File(char const*, Process*)>
c0017232:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017235:	83 c4 10             	add    esp,0x10
c0017238:	89 d0                	mov    eax,edx
c001723a:	25 ff 00 00 00       	and    eax,0xff
c001723f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017242:	89 d0                	mov    eax,edx
c0017244:	83 e0 01             	and    eax,0x1
c0017247:	f6 c2 02             	test   dl,0x2
c001724a:	74 03                	je     c001724f <sysCallOpen(regs*)+0x1ba>
c001724c:	83 c8 02             	or     eax,0x2
c001724f:	f6 c2 04             	test   dl,0x4
c0017252:	74 03                	je     c0017257 <sysCallOpen(regs*)+0x1c2>
c0017254:	83 c8 04             	or     eax,0x4
c0017257:	f6 c2 08             	test   dl,0x8
c001725a:	74 03                	je     c001725f <sysCallOpen(regs*)+0x1ca>
c001725c:	83 c8 0a             	or     eax,0xa
c001725f:	83 e2 10             	and    edx,0x10
c0017262:	74 03                	je     c0017267 <sysCallOpen(regs*)+0x1d2>
c0017264:	83 c8 12             	or     eax,0x12
c0017267:	52                   	push   edx
c0017268:	52                   	push   edx
c0017269:	50                   	push   eax
c001726a:	56                   	push   esi
c001726b:	e8 54 85 ff ff       	call   c000f7c4 <File::open(FileOpenMode)>
c0017270:	83 c4 10             	add    esp,0x10
c0017273:	85 c0                	test   eax,eax
c0017275:	0f 85 ef fe ff ff    	jne    c001716a <sysCallOpen(regs*)+0xd5>
c001727b:	83 ec 0c             	sub    esp,0xc
c001727e:	56                   	push   esi
c001727f:	e8 4c 6b ff ff       	call   c000ddd0 <UnixFile::getFileDescriptor()>
c0017284:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017287:	89 02                	mov    DWORD PTR [edx],eax
c0017289:	c1 f8 1f             	sar    eax,0x1f
c001728c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001728f:	e9 c6 fe ff ff       	jmp    c001715a <sysCallOpen(regs*)+0xc5>
c0017294:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017297:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001729d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00172a4:	e9 b4 fe ff ff       	jmp    c001715d <sysCallOpen(regs*)+0xc8>

c00172a9 <setupSystemCalls()>:
c00172a9:	c7 05 00 52 02 c0 a4 64 01 c0 	mov    DWORD PTR ds:0xc0025200,0xc00164a4
c00172b3:	c7 05 04 52 02 c0 b7 62 01 c0 	mov    DWORD PTR ds:0xc0025204,0xc00162b7
c00172bd:	c7 05 08 52 02 c0 cc 63 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc00163cc
c00172c7:	c7 05 0c 52 02 c0 21 64 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0016421
c00172d1:	c7 05 10 52 02 c0 64 63 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc0016364
c00172db:	c7 05 14 52 02 c0 be 64 01 c0 	mov    DWORD PTR ds:0xc0025214,0xc00164be
c00172e5:	c7 05 18 52 02 c0 7d 66 01 c0 	mov    DWORD PTR ds:0xc0025218,0xc001667d
c00172ef:	c7 05 1c 52 02 c0 a3 66 01 c0 	mov    DWORD PTR ds:0xc002521c,0xc00166a3
c00172f9:	c7 05 24 52 02 c0 0d 6a 01 c0 	mov    DWORD PTR ds:0xc0025224,0xc0016a0d
c0017303:	c7 05 20 52 02 c0 95 70 01 c0 	mov    DWORD PTR ds:0xc0025220,0xc0017095
c001730d:	c7 05 28 52 02 c0 90 6a 01 c0 	mov    DWORD PTR ds:0xc0025228,0xc0016a90
c0017317:	c7 05 2c 52 02 c0 12 67 01 c0 	mov    DWORD PTR ds:0xc002522c,0xc0016712
c0017321:	c7 05 30 52 02 c0 ce 64 01 c0 	mov    DWORD PTR ds:0xc0025230,0xc00164ce
c001732b:	c7 05 34 52 02 c0 d3 64 01 c0 	mov    DWORD PTR ds:0xc0025234,0xc00164d3
c0017335:	c7 05 38 52 02 c0 fb 6a 01 c0 	mov    DWORD PTR ds:0xc0025238,0xc0016afb
c001733f:	c7 05 3c 52 02 c0 56 6b 01 c0 	mov    DWORD PTR ds:0xc002523c,0xc0016b56
c0017349:	c7 05 40 52 02 c0 fd 67 01 c0 	mov    DWORD PTR ds:0xc0025240,0xc00167fd
c0017353:	c7 05 44 52 02 c0 63 68 01 c0 	mov    DWORD PTR ds:0xc0025244,0xc0016863
c001735d:	c7 05 48 52 02 c0 8c 69 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc001698c
c0017367:	c7 05 4c 52 02 c0 d8 64 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc00164d8
c0017371:	c7 05 50 52 02 c0 b7 6b 01 c0 	mov    DWORD PTR ds:0xc0025250,0xc0016bb7
c001737b:	c7 05 54 52 02 c0 e2 64 01 c0 	mov    DWORD PTR ds:0xc0025254,0xc00164e2
c0017385:	c7 05 58 52 02 c0 e9 64 01 c0 	mov    DWORD PTR ds:0xc0025258,0xc00164e9
c001738f:	c7 05 5c 52 02 c0 d8 6b 01 c0 	mov    DWORD PTR ds:0xc002525c,0xc0016bd8
c0017399:	c7 05 60 52 02 c0 2b 6c 01 c0 	mov    DWORD PTR ds:0xc0025260,0xc0016c2b
c00173a3:	c7 05 64 52 02 c0 f0 64 01 c0 	mov    DWORD PTR ds:0xc0025264,0xc00164f0
c00173ad:	c7 05 68 52 02 c0 7e 6c 01 c0 	mov    DWORD PTR ds:0xc0025268,0xc0016c7e
c00173b7:	c7 05 6c 52 02 c0 c5 66 01 c0 	mov    DWORD PTR ds:0xc002526c,0xc00166c5
c00173c1:	c7 05 70 52 02 c0 ca 6c 01 c0 	mov    DWORD PTR ds:0xc0025270,0xc0016cca
c00173cb:	c7 05 74 52 02 c0 a5 67 01 c0 	mov    DWORD PTR ds:0xc0025274,0xc00167a5
c00173d5:	c7 05 78 52 02 c0 a2 6d 01 c0 	mov    DWORD PTR ds:0xc0025278,0xc0016da2
c00173df:	c7 05 7c 52 02 c0 de 68 01 c0 	mov    DWORD PTR ds:0xc002527c,0xc00168de
c00173e9:	c7 05 80 52 02 c0 e4 6d 01 c0 	mov    DWORD PTR ds:0xc0025280,0xc0016de4
c00173f3:	c7 05 84 52 02 c0 4b 6d 01 c0 	mov    DWORD PTR ds:0xc0025284,0xc0016d4b
c00173fd:	c7 05 88 52 02 c0 43 6e 01 c0 	mov    DWORD PTR ds:0xc0025288,0xc0016e43
c0017407:	c7 05 8c 52 02 c0 04 65 01 c0 	mov    DWORD PTR ds:0xc002528c,0xc0016504
c0017411:	c7 05 90 52 02 c0 67 65 01 c0 	mov    DWORD PTR ds:0xc0025290,0xc0016567
c001741b:	c7 05 94 52 02 c0 af 65 01 c0 	mov    DWORD PTR ds:0xc0025294,0xc00165af
c0017425:	c7 05 98 52 02 c0 68 6f 01 c0 	mov    DWORD PTR ds:0xc0025298,0xc0016f68
c001742f:	c7 05 9c 52 02 c0 cb 6f 01 c0 	mov    DWORD PTR ds:0xc002529c,0xc0016fcb
c0017439:	c7 05 a0 52 02 c0 02 66 01 c0 	mov    DWORD PTR ds:0xc00252a0,0xc0016602
c0017443:	c7 05 a4 52 02 c0 f2 6f 01 c0 	mov    DWORD PTR ds:0xc00252a4,0xc0016ff2
c001744d:	c7 05 a8 52 02 c0 37 70 01 c0 	mov    DWORD PTR ds:0xc00252a8,0xc0017037
c0017457:	c7 05 ac 52 02 c0 cf 62 01 c0 	mov    DWORD PTR ds:0xc00252ac,0xc00162cf
c0017461:	c3                   	ret    

c0017462 <systemCall(regs*, void*)>:
c0017462:	53                   	push   ebx
c0017463:	83 ec 08             	sub    esp,0x8
c0017466:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001746a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001746d:	83 f8 7f             	cmp    eax,0x7f
c0017470:	77 16                	ja     c0017488 <systemCall(regs*, void*)+0x26>
c0017472:	8b 14 85 00 52 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae00]
c0017479:	85 d2                	test   edx,edx
c001747b:	74 0b                	je     c0017488 <systemCall(regs*, void*)+0x26>
c001747d:	83 ec 0c             	sub    esp,0xc
c0017480:	53                   	push   ebx
c0017481:	ff d2                	call   edx
c0017483:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017486:	eb 0d                	jmp    c0017495 <systemCall(regs*, void*)+0x33>
c0017488:	52                   	push   edx
c0017489:	52                   	push   edx
c001748a:	50                   	push   eax
c001748b:	68 32 2c 02 c0       	push   0xc0022c32
c0017490:	e8 94 7d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0017495:	83 c4 10             	add    esp,0x10
c0017498:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001749d:	83 c4 08             	add    esp,0x8
c00174a0:	31 d2                	xor    edx,edx
c00174a2:	5b                   	pop    ebx
c00174a3:	c3                   	ret    

c00174a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00174a4:	55                   	push   ebp
c00174a5:	89 e5                	mov    ebp,esp
c00174a7:	57                   	push   edi
c00174a8:	56                   	push   esi
c00174a9:	53                   	push   ebx
c00174aa:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00174b0:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00174b3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00174b6:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00174bd:	74 27                	je     c00174e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174bf:	85 c0                	test   eax,eax
c00174c1:	74 23                	je     c00174e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174c3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00174c7:	75 1d                	jne    c00174e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174c9:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00174cc:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00174d2:	89 d1                	mov    ecx,edx
c00174d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174da:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00174e0:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00174e3:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00174e6:	83 ec 0c             	sub    esp,0xc
c00174e9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00174ec:	05 ff 0f 00 00       	add    eax,0xfff
c00174f1:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00174f7:	6a 01                	push   0x1
c00174f9:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00174ff:	e8 0a 6d ff ff       	call   c000e20e <Virt::allocateKernelVirtualPages(int)>
c0017504:	83 c4 10             	add    esp,0x10
c0017507:	89 c6                	mov    esi,eax
c0017509:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001750f:	0f 86 21 01 00 00    	jbe    c0017636 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0017515:	c1 eb 0c             	shr    ebx,0xc
c0017518:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0017522:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017528:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001752b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001752e:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0017534:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017537:	29 d8                	sub    eax,ebx
c0017539:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001753f:	0f 83 f4 00 00 00    	jae    c0017639 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0017545:	83 ec 0c             	sub    esp,0xc
c0017548:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001754b:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0017551:	3d 00 10 00 00       	cmp    eax,0x1000
c0017556:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017558:	52                   	push   edx
c0017559:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001755f:	52                   	push   edx
c0017560:	76 05                	jbe    c0017567 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0017562:	b8 00 10 00 00       	mov    eax,0x1000
c0017567:	31 d2                	xor    edx,edx
c0017569:	52                   	push   edx
c001756a:	50                   	push   eax
c001756b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001756e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017571:	83 c4 20             	add    esp,0x20
c0017574:	85 c0                	test   eax,eax
c0017576:	74 1f                	je     c0017597 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017578:	51                   	push   ecx
c0017579:	51                   	push   ecx
c001757a:	50                   	push   eax
c001757b:	68 46 2c 02 c0       	push   0xc0022c46
c0017580:	e8 a4 7c ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0017585:	89 34 24             	mov    DWORD PTR [esp],esi
c0017588:	e8 ce 6f ff ff       	call   c000e55b <Virt::freeKernelVirtualPages(unsigned long)>
c001758d:	83 c4 10             	add    esp,0x10
c0017590:	31 c0                	xor    eax,eax
c0017592:	e9 7c 01 00 00       	jmp    c0017713 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0017597:	e8 bf 14 00 00       	call   c0018a5b <lockScheduler()>
c001759c:	e8 2c 50 ff ff       	call   c000c5cd <Phys::allocatePage()>
c00175a1:	6a 07                	push   0x7
c00175a3:	56                   	push   esi
c00175a4:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00175aa:	50                   	push   eax
c00175ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175b1:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175b4:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175ba:	e8 1b 73 ff ff       	call   c000e8da <VAS::mapPage(unsigned long, unsigned long, int)>
c00175bf:	83 c4 0c             	add    esp,0xc
c00175c2:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175c8:	6a 00                	push   0x0
c00175ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175d0:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175d3:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175d9:	e8 5a 71 ff ff       	call   c000e738 <VAS::mapOtherVASIn(bool, VAS*)>
c00175de:	58                   	pop    eax
c00175df:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00175e5:	5a                   	pop    edx
c00175e6:	68 07 04 00 00       	push   0x407
c00175eb:	53                   	push   ebx
c00175ec:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175f2:	50                   	push   eax
c00175f3:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175f9:	6a 00                	push   0x0
c00175fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017600:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017603:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017609:	e8 88 76 ff ff       	call   c000ec96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001760e:	83 c4 1c             	add    esp,0x1c
c0017611:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017617:	68 00 10 00 00       	push   0x1000
c001761c:	50                   	push   eax
c001761d:	56                   	push   esi
c001761e:	e8 7f 90 fe ff       	call   c00006a2 <memcpy>
c0017623:	e8 35 14 00 00       	call   c0018a5d <unlockScheduler()>
c0017628:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001762e:	83 c4 10             	add    esp,0x10
c0017631:	e9 f5 fe ff ff       	jmp    c001752b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0017636:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017639:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0017643:	0f 86 bc 00 00 00    	jbe    c0017705 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0017649:	e8 0d 14 00 00       	call   c0018a5b <lockScheduler()>
c001764e:	51                   	push   ecx
c001764f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017655:	6a 00                	push   0x0
c0017657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001765c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001765f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017665:	e8 ce 70 ff ff       	call   c000e738 <VAS::mapOtherVASIn(bool, VAS*)>
c001766a:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0017670:	c1 e8 0c             	shr    eax,0xc
c0017673:	83 c4 10             	add    esp,0x10
c0017676:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001767c:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017686:	e8 42 4f ff ff       	call   c000c5cd <Phys::allocatePage()>
c001768b:	6a 07                	push   0x7
c001768d:	56                   	push   esi
c001768e:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017694:	50                   	push   eax
c0017695:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001769b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001769e:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00176a4:	e8 31 72 ff ff       	call   c000e8da <VAS::mapPage(unsigned long, unsigned long, int)>
c00176a9:	58                   	pop    eax
c00176aa:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00176b0:	5a                   	pop    edx
c00176b1:	68 07 04 00 00       	push   0x407
c00176b6:	53                   	push   ebx
c00176b7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00176bd:	50                   	push   eax
c00176be:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00176c4:	6a 00                	push   0x0
c00176c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00176ce:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00176d4:	e8 bd 75 ff ff       	call   c000ec96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00176d9:	83 c4 1c             	add    esp,0x1c
c00176dc:	68 00 10 00 00       	push   0x1000
c00176e1:	6a 00                	push   0x0
c00176e3:	56                   	push   esi
c00176e4:	e8 ef 8f fe ff       	call   c00006d8 <memset>
c00176e9:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00176ef:	83 c4 10             	add    esp,0x10
c00176f2:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00176f8:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00176fe:	77 86                	ja     c0017686 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c0017700:	e8 58 13 00 00       	call   c0018a5d <unlockScheduler()>
c0017705:	83 ec 0c             	sub    esp,0xc
c0017708:	56                   	push   esi
c0017709:	e8 4d 6e ff ff       	call   c000e55b <Virt::freeKernelVirtualPages(unsigned long)>
c001770e:	83 c4 10             	add    esp,0x10
c0017711:	b0 01                	mov    al,0x1
c0017713:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017716:	5b                   	pop    ebx
c0017717:	5e                   	pop    esi
c0017718:	5f                   	pop    edi
c0017719:	5d                   	pop    ebp
c001771a:	c3                   	ret    

c001771b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001771b:	55                   	push   ebp
c001771c:	57                   	push   edi
c001771d:	56                   	push   esi
c001771e:	53                   	push   ebx
c001771f:	83 ec 48             	sub    esp,0x48
c0017722:	68 14 01 00 00       	push   0x114
c0017727:	e8 c8 79 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001772c:	83 c4 0c             	add    esp,0xc
c001772f:	89 c6                	mov    esi,eax
c0017731:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017735:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017739:	50                   	push   eax
c001773a:	e8 21 80 ff ff       	call   c000f760 <File::File(char const*, Process*)>
c001773f:	58                   	pop    eax
c0017740:	5a                   	pop    edx
c0017741:	6a 01                	push   0x1
c0017743:	56                   	push   esi
c0017744:	e8 7b 80 ff ff       	call   c000f7c4 <File::open(FileOpenMode)>
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	85 c0                	test   eax,eax
c001774e:	0f 85 47 01 00 00    	jne    c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017754:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001775c:	83 ec 0c             	sub    esp,0xc
c001775f:	6a 34                	push   0x34
c0017761:	e8 91 48 ff ff       	call   c000bff7 <malloc>
c0017766:	89 c3                	mov    ebx,eax
c0017768:	58                   	pop    eax
c0017769:	8b 06                	mov    eax,DWORD PTR [esi]
c001776b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001776f:	57                   	push   edi
c0017770:	53                   	push   ebx
c0017771:	6a 00                	push   0x0
c0017773:	6a 34                	push   0x34
c0017775:	56                   	push   esi
c0017776:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017779:	83 c4 20             	add    esp,0x20
c001777c:	85 c0                	test   eax,eax
c001777e:	0f 85 17 01 00 00    	jne    c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017784:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001778a:	0f 85 0b 01 00 00    	jne    c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017790:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017793:	85 c0                	test   eax,eax
c0017795:	0f 84 00 01 00 00    	je     c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001779b:	31 d2                	xor    edx,edx
c001779d:	55                   	push   ebp
c001779e:	52                   	push   edx
c001779f:	50                   	push   eax
c00177a0:	56                   	push   esi
c00177a1:	e8 dc 80 ff ff       	call   c000f882 <File::seek(unsigned long long)>
c00177a6:	83 c4 10             	add    esp,0x10
c00177a9:	85 c0                	test   eax,eax
c00177ab:	0f 85 ea 00 00 00    	jne    c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177b1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00177b4:	83 ec 0c             	sub    esp,0xc
c00177b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177bb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177bf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177c3:	0f af c2             	imul   eax,edx
c00177c6:	50                   	push   eax
c00177c7:	e8 2b 48 ff ff       	call   c000bff7 <malloc>
c00177cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00177d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177d7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177db:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177df:	0f af c2             	imul   eax,edx
c00177e2:	99                   	cdq    
c00177e3:	52                   	push   edx
c00177e4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00177e6:	50                   	push   eax
c00177e7:	56                   	push   esi
c00177e8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177eb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00177ee:	83 c4 20             	add    esp,0x20
c00177f1:	85 c0                	test   eax,eax
c00177f3:	0f 84 a2 00 00 00    	je     c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177f9:	31 d2                	xor    edx,edx
c00177fb:	51                   	push   ecx
c00177fc:	52                   	push   edx
c00177fd:	50                   	push   eax
c00177fe:	56                   	push   esi
c00177ff:	e8 7e 80 ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017804:	83 c4 10             	add    esp,0x10
c0017807:	85 c0                	test   eax,eax
c0017809:	0f 85 8c 00 00 00    	jne    c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001780f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017813:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017817:	0f af c2             	imul   eax,edx
c001781a:	83 ec 0c             	sub    esp,0xc
c001781d:	31 ed                	xor    ebp,ebp
c001781f:	50                   	push   eax
c0017820:	e8 d2 47 ff ff       	call   c000bff7 <malloc>
c0017825:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017829:	89 3c 24             	mov    DWORD PTR [esp],edi
c001782c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017830:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017834:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017838:	0f af c2             	imul   eax,edx
c001783b:	99                   	cdq    
c001783c:	52                   	push   edx
c001783d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001783f:	50                   	push   eax
c0017840:	56                   	push   esi
c0017841:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017844:	83 c4 20             	add    esp,0x20
c0017847:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001784f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017853:	0f 86 80 00 00 00    	jbe    c00178d9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017859:	0f b7 fd             	movzx  edi,bp
c001785c:	c1 e7 05             	shl    edi,0x5
c001785f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017863:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017866:	75 6b                	jne    c00178d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017868:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001786b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001786f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017876:	52                   	push   edx
c0017877:	31 d2                	xor    edx,edx
c0017879:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001787c:	52                   	push   edx
c001787d:	50                   	push   eax
c001787e:	56                   	push   esi
c001787f:	e8 fe 7f ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017884:	83 c4 10             	add    esp,0x10
c0017887:	85 c0                	test   eax,eax
c0017889:	74 17                	je     c00178a2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001788b:	83 ec 0c             	sub    esp,0xc
c001788e:	68 71 2c 02 c0       	push   0xc0022c71
c0017893:	e8 91 79 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0017898:	83 c4 10             	add    esp,0x10
c001789b:	31 c0                	xor    eax,eax
c001789d:	e9 87 00 00 00       	jmp    c0017929 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00178a2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00178a5:	83 ec 0c             	sub    esp,0xc
c00178a8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00178ab:	50                   	push   eax
c00178ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00178b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178b4:	56                   	push   esi
c00178b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00178b9:	e8 e6 fb ff ff       	call   c00174a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00178be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178c2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00178c6:	83 c4 20             	add    esp,0x20
c00178c9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00178cd:	73 04                	jae    c00178d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00178cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178d3:	45                   	inc    ebp
c00178d4:	e9 76 ff ff ff       	jmp    c001784f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00178d9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00178dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178e5:	83 ec 0c             	sub    esp,0xc
c00178e8:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00178ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c00178f3:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00178f9:	05 00 10 00 00       	add    eax,0x1000
c00178fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017905:	e8 fd 46 ff ff       	call   c000c007 <free>
c001790a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001790d:	e8 f5 46 ff ff       	call   c000c007 <free>
c0017912:	58                   	pop    eax
c0017913:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017917:	e8 eb 46 ff ff       	call   c000c007 <free>
c001791c:	89 34 24             	mov    DWORD PTR [esp],esi
c001791f:	e8 fe 7e ff ff       	call   c000f822 <File::close()>
c0017924:	83 c4 10             	add    esp,0x10
c0017927:	b0 01                	mov    al,0x1
c0017929:	83 c4 3c             	add    esp,0x3c
c001792c:	5b                   	pop    ebx
c001792d:	5e                   	pop    esi
c001792e:	5f                   	pop    edi
c001792f:	5d                   	pop    ebp
c0017930:	c3                   	ret    

c0017931 <Thr::runtimeReferenceHelper()>:
c0017931:	83 ec 18             	sub    esp,0x18
c0017934:	68 79 2c 02 c0       	push   0xc0022c79
c0017939:	e8 eb 78 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001793e:	fa                   	cli    
c001793f:	83 c4 10             	add    esp,0x10
c0017942:	eb fe                	jmp    c0017942 <Thr::runtimeReferenceHelper()+0x11>

c0017944 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017944:	57                   	push   edi
c0017945:	56                   	push   esi
c0017946:	53                   	push   ebx
c0017947:	31 db                	xor    ebx,ebx
c0017949:	39 1d a0 5b 02 c0    	cmp    DWORD PTR ds:0xc0025ba0,ebx
c001794f:	7e 3c                	jle    c001798d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017951:	8b 34 9d 20 5b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda4e0]
c0017958:	31 ff                	xor    edi,edi
c001795a:	39 3c 9d 20 5a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda5e0],edi
c0017961:	7e 27                	jle    c001798a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017963:	50                   	push   eax
c0017964:	50                   	push   eax
c0017965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017969:	8b 06                	mov    eax,DWORD PTR [esi]
c001796b:	03 04 9d a0 5a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda560]
c0017972:	50                   	push   eax
c0017973:	e8 50 8e fe ff       	call   c00007c8 <strcmp>
c0017978:	83 c4 10             	add    esp,0x10
c001797b:	85 c0                	test   eax,eax
c001797d:	75 05                	jne    c0017984 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001797f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017982:	eb 0b                	jmp    c001798f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017984:	83 c6 10             	add    esi,0x10
c0017987:	47                   	inc    edi
c0017988:	eb d0                	jmp    c001795a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001798a:	43                   	inc    ebx
c001798b:	eb bc                	jmp    c0017949 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001798d:	31 c0                	xor    eax,eax
c001798f:	5b                   	pop    ebx
c0017990:	5e                   	pop    esi
c0017991:	5f                   	pop    edi
c0017992:	c3                   	ret    

c0017993 <Thr::loadKernelSymbolTable(char const*)>:
c0017993:	55                   	push   ebp
c0017994:	57                   	push   edi
c0017995:	56                   	push   esi
c0017996:	53                   	push   ebx
c0017997:	83 ec 68             	sub    esp,0x68
c001799a:	8b 35 f4 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025bf4
c00179a0:	68 14 01 00 00       	push   0x114
c00179a5:	e8 4a 77 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c00179aa:	83 c4 0c             	add    esp,0xc
c00179ad:	89 c3                	mov    ebx,eax
c00179af:	56                   	push   esi
c00179b0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00179b4:	50                   	push   eax
c00179b5:	e8 a6 7d ff ff       	call   c000f760 <File::File(char const*, Process*)>
c00179ba:	5e                   	pop    esi
c00179bb:	5f                   	pop    edi
c00179bc:	6a 01                	push   0x1
c00179be:	53                   	push   ebx
c00179bf:	e8 00 7e ff ff       	call   c000f7c4 <File::open(FileOpenMode)>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	31 d2                	xor    edx,edx
c00179c9:	85 c0                	test   eax,eax
c00179cb:	0f 85 79 02 00 00    	jne    c0017c4a <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179d1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00179d9:	83 ec 0c             	sub    esp,0xc
c00179dc:	6a 34                	push   0x34
c00179de:	e8 14 46 ff ff       	call   c000bff7 <malloc>
c00179e3:	59                   	pop    ecx
c00179e4:	89 c7                	mov    edi,eax
c00179e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179e8:	8d 74 24 34          	lea    esi,[esp+0x34]
c00179ec:	56                   	push   esi
c00179ed:	57                   	push   edi
c00179ee:	6a 00                	push   0x0
c00179f0:	6a 34                	push   0x34
c00179f2:	53                   	push   ebx
c00179f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179f6:	83 c4 20             	add    esp,0x20
c00179f9:	85 c0                	test   eax,eax
c00179fb:	74 17                	je     c0017a14 <Thr::loadKernelSymbolTable(char const*)+0x81>
c00179fd:	83 ec 0c             	sub    esp,0xc
c0017a00:	68 9b 2c 02 c0       	push   0xc0022c9b
c0017a05:	e8 48 e0 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0017a0a:	83 c4 10             	add    esp,0x10
c0017a0d:	31 d2                	xor    edx,edx
c0017a0f:	e9 36 02 00 00       	jmp    c0017c4a <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017a14:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017a1a:	75 e1                	jne    c00179fd <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a1c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017a1f:	85 c0                	test   eax,eax
c0017a21:	74 da                	je     c00179fd <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a23:	52                   	push   edx
c0017a24:	31 d2                	xor    edx,edx
c0017a26:	52                   	push   edx
c0017a27:	50                   	push   eax
c0017a28:	53                   	push   ebx
c0017a29:	e8 54 7e ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017a2e:	83 c4 10             	add    esp,0x10
c0017a31:	85 c0                	test   eax,eax
c0017a33:	75 c8                	jne    c00179fd <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a35:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a39:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a3d:	0f af c2             	imul   eax,edx
c0017a40:	83 ec 0c             	sub    esp,0xc
c0017a43:	31 ed                	xor    ebp,ebp
c0017a45:	50                   	push   eax
c0017a46:	e8 ac 45 ff ff       	call   c000bff7 <malloc>
c0017a4b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a56:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a5a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a5e:	0f af c2             	imul   eax,edx
c0017a61:	99                   	cdq    
c0017a62:	52                   	push   edx
c0017a63:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a65:	50                   	push   eax
c0017a66:	53                   	push   ebx
c0017a67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a6a:	83 c4 20             	add    esp,0x20
c0017a6d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a75:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017a7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a85:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a8d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017a91:	0f 86 aa 00 00 00    	jbe    c0017b41 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017a97:	0f b7 f5             	movzx  esi,bp
c0017a9a:	6b f6 28             	imul   esi,esi,0x28
c0017a9d:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017aa1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017aa4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017aa8:	50                   	push   eax
c0017aa9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017aad:	6b c0 28             	imul   eax,eax,0x28
c0017ab0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017ab4:	8b 16                	mov    edx,DWORD PTR [esi]
c0017ab6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017aba:	89 d0                	mov    eax,edx
c0017abc:	31 d2                	xor    edx,edx
c0017abe:	52                   	push   edx
c0017abf:	50                   	push   eax
c0017ac0:	53                   	push   ebx
c0017ac1:	e8 bc 7d ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017ac6:	83 c4 0c             	add    esp,0xc
c0017ac9:	6a 20                	push   0x20
c0017acb:	6a 00                	push   0x0
c0017acd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017ad1:	52                   	push   edx
c0017ad2:	e8 01 8c fe ff       	call   c00006d8 <memset>
c0017ad7:	58                   	pop    eax
c0017ad8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ada:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017ade:	51                   	push   ecx
c0017adf:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017ae3:	52                   	push   edx
c0017ae4:	6a 00                	push   0x0
c0017ae6:	6a 1f                	push   0x1f
c0017ae8:	53                   	push   ebx
c0017ae9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017aec:	83 c4 18             	add    esp,0x18
c0017aef:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017af4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017af8:	52                   	push   edx
c0017af9:	e8 ca 8c fe ff       	call   c00007c8 <strcmp>
c0017afe:	83 c4 10             	add    esp,0x10
c0017b01:	85 c0                	test   eax,eax
c0017b03:	75 0f                	jne    c0017b14 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017b05:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b14:	50                   	push   eax
c0017b15:	50                   	push   eax
c0017b16:	68 ba 2c 02 c0       	push   0xc0022cba
c0017b1b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017b1f:	50                   	push   eax
c0017b20:	e8 a3 8c fe ff       	call   c00007c8 <strcmp>
c0017b25:	83 c4 10             	add    esp,0x10
c0017b28:	85 c0                	test   eax,eax
c0017b2a:	75 0f                	jne    c0017b3b <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017b2c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b3b:	45                   	inc    ebp
c0017b3c:	e9 4c ff ff ff       	jmp    c0017a8d <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017b41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017b46:	75 10                	jne    c0017b58 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017b48:	83 ec 0c             	sub    esp,0xc
c0017b4b:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b50:	e8 fd de ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b5d:	75 10                	jne    c0017b6f <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017b5f:	83 ec 0c             	sub    esp,0xc
c0017b62:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b67:	e8 e6 de ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0017b6c:	83 c4 10             	add    esp,0x10
c0017b6f:	31 d2                	xor    edx,edx
c0017b71:	50                   	push   eax
c0017b72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b76:	52                   	push   edx
c0017b77:	50                   	push   eax
c0017b78:	53                   	push   ebx
c0017b79:	e8 04 7d ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017b7e:	5a                   	pop    edx
c0017b7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b83:	e8 6f 44 ff ff       	call   c000bff7 <malloc>
c0017b88:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b90:	89 c1                	mov    ecx,eax
c0017b92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b9a:	5e                   	pop    esi
c0017b9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b9d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017ba1:	55                   	push   ebp
c0017ba2:	51                   	push   ecx
c0017ba3:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017ba7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017baf:	53                   	push   ebx
c0017bb0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bb3:	83 c4 14             	add    esp,0x14
c0017bb6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bba:	e8 38 44 ff ff       	call   c000bff7 <malloc>
c0017bbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bc2:	89 c6                	mov    esi,eax
c0017bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bc6:	56                   	push   esi
c0017bc7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bcb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bcf:	53                   	push   ebx
c0017bd0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bd7:	8b 15 a0 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba0
c0017bdd:	c1 e8 04             	shr    eax,0x4
c0017be0:	83 c4 1c             	add    esp,0x1c
c0017be3:	89 04 95 20 5a 02 c0 	mov    DWORD PTR [edx*4-0x3ffda5e0],eax
c0017bea:	31 d2                	xor    edx,edx
c0017bec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bf0:	52                   	push   edx
c0017bf1:	50                   	push   eax
c0017bf2:	53                   	push   ebx
c0017bf3:	e8 8a 7c ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017bf8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bfb:	31 d2                	xor    edx,edx
c0017bfd:	56                   	push   esi
c0017bfe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c02:	52                   	push   edx
c0017c03:	50                   	push   eax
c0017c04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c06:	53                   	push   ebx
c0017c07:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017c0a:	83 c4 14             	add    esp,0x14
c0017c0d:	53                   	push   ebx
c0017c0e:	e8 0f 7c ff ff       	call   c000f822 <File::close()>
c0017c13:	5d                   	pop    ebp
c0017c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c18:	e8 ea 43 ff ff       	call   c000c007 <free>
c0017c1d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c20:	e8 e2 43 ff ff       	call   c000c007 <free>
c0017c25:	a1 a0 5b 02 c0       	mov    eax,ds:0xc0025ba0
c0017c2a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c2e:	8d 50 01             	lea    edx,[eax+0x1]
c0017c31:	89 15 a0 5b 02 c0    	mov    DWORD PTR ds:0xc0025ba0,edx
c0017c37:	89 0c 85 20 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda4e0],ecx
c0017c3e:	89 34 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],esi
c0017c45:	83 c4 10             	add    esp,0x10
c0017c48:	b2 01                	mov    dl,0x1
c0017c4a:	83 c4 5c             	add    esp,0x5c
c0017c4d:	88 d0                	mov    al,dl
c0017c4f:	5b                   	pop    ebx
c0017c50:	5e                   	pop    esi
c0017c51:	5f                   	pop    edi
c0017c52:	5d                   	pop    ebp
c0017c53:	c3                   	ret    

c0017c54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017c54:	55                   	push   ebp
c0017c55:	57                   	push   edi
c0017c56:	56                   	push   esi
c0017c57:	53                   	push   ebx
c0017c58:	81 ec 68 03 00 00    	sub    esp,0x368
c0017c5e:	8b 1d f4 5b 02 c0    	mov    ebx,DWORD PTR ds:0xc0025bf4
c0017c64:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017c6b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017c6f:	68 14 01 00 00       	push   0x114
c0017c74:	e8 7b 74 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0017c79:	83 c4 0c             	add    esp,0xc
c0017c7c:	53                   	push   ebx
c0017c7d:	89 c7                	mov    edi,eax
c0017c7f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017c86:	50                   	push   eax
c0017c87:	e8 d4 7a ff ff       	call   c000f760 <File::File(char const*, Process*)>
c0017c8c:	5e                   	pop    esi
c0017c8d:	5d                   	pop    ebp
c0017c8e:	6a 01                	push   0x1
c0017c90:	57                   	push   edi
c0017c91:	e8 2e 7b ff ff       	call   c000f7c4 <File::open(FileOpenMode)>
c0017c96:	83 c4 10             	add    esp,0x10
c0017c99:	85 c0                	test   eax,eax
c0017c9b:	0f 85 10 07 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ca1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017ca9:	83 ec 0c             	sub    esp,0xc
c0017cac:	6a 34                	push   0x34
c0017cae:	e8 44 43 ff ff       	call   c000bff7 <malloc>
c0017cb3:	5b                   	pop    ebx
c0017cb4:	89 c5                	mov    ebp,eax
c0017cb6:	8b 07                	mov    eax,DWORD PTR [edi]
c0017cb8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017cbc:	53                   	push   ebx
c0017cbd:	55                   	push   ebp
c0017cbe:	6a 00                	push   0x0
c0017cc0:	6a 34                	push   0x34
c0017cc2:	57                   	push   edi
c0017cc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cc6:	83 c4 20             	add    esp,0x20
c0017cc9:	85 c0                	test   eax,eax
c0017ccb:	0f 85 e0 06 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cd1:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017cd8:	0f 85 d3 06 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cde:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017ce1:	85 c0                	test   eax,eax
c0017ce3:	0f 84 c8 06 00 00    	je     c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ce9:	31 d2                	xor    edx,edx
c0017ceb:	51                   	push   ecx
c0017cec:	52                   	push   edx
c0017ced:	50                   	push   eax
c0017cee:	57                   	push   edi
c0017cef:	e8 8e 7b ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017cf4:	83 c4 10             	add    esp,0x10
c0017cf7:	85 c0                	test   eax,eax
c0017cf9:	0f 85 b2 06 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cff:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017d02:	83 ec 0c             	sub    esp,0xc
c0017d05:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017d09:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d0d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d11:	0f af c2             	imul   eax,edx
c0017d14:	50                   	push   eax
c0017d15:	e8 dd 42 ff ff       	call   c000bff7 <malloc>
c0017d1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d25:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d29:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d2d:	0f af c2             	imul   eax,edx
c0017d30:	99                   	cdq    
c0017d31:	52                   	push   edx
c0017d32:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d34:	50                   	push   eax
c0017d35:	57                   	push   edi
c0017d36:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d39:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d3c:	83 c4 20             	add    esp,0x20
c0017d3f:	85 c0                	test   eax,eax
c0017d41:	0f 84 6a 06 00 00    	je     c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d47:	52                   	push   edx
c0017d48:	31 d2                	xor    edx,edx
c0017d4a:	52                   	push   edx
c0017d4b:	50                   	push   eax
c0017d4c:	57                   	push   edi
c0017d4d:	e8 30 7b ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017d52:	83 c4 10             	add    esp,0x10
c0017d55:	85 c0                	test   eax,eax
c0017d57:	0f 85 54 06 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d5d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d61:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d65:	0f af c2             	imul   eax,edx
c0017d68:	83 ec 0c             	sub    esp,0xc
c0017d6b:	31 f6                	xor    esi,esi
c0017d6d:	50                   	push   eax
c0017d6e:	e8 84 42 ff ff       	call   c000bff7 <malloc>
c0017d73:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d7e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d82:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d86:	0f af c2             	imul   eax,edx
c0017d89:	99                   	cdq    
c0017d8a:	52                   	push   edx
c0017d8b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d8d:	50                   	push   eax
c0017d8e:	57                   	push   edi
c0017d8f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d92:	83 c4 20             	add    esp,0x20
c0017d95:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017d99:	0f 86 af 00 00 00    	jbe    c0017e4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017d9f:	0f b7 de             	movzx  ebx,si
c0017da2:	c1 e3 05             	shl    ebx,0x5
c0017da5:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017da9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017dac:	0f 85 96 00 00 00    	jne    c0017e48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017db2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017db5:	31 d2                	xor    edx,edx
c0017db7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dbb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017dbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017dc2:	50                   	push   eax
c0017dc3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017dc6:	52                   	push   edx
c0017dc7:	50                   	push   eax
c0017dc8:	57                   	push   edi
c0017dc9:	e8 b4 7a ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017dce:	83 c4 10             	add    esp,0x10
c0017dd1:	85 c0                	test   eax,eax
c0017dd3:	0f 85 d8 05 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017dd9:	52                   	push   edx
c0017dda:	52                   	push   edx
c0017ddb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ddf:	68 dc 2c 02 c0       	push   0xc0022cdc
c0017de4:	e8 40 74 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0017de9:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017df0:	31 d2                	xor    edx,edx
c0017df2:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017df6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017dfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017dfe:	59                   	pop    ecx
c0017dff:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e01:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e08:	50                   	push   eax
c0017e09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e11:	52                   	push   edx
c0017e12:	50                   	push   eax
c0017e13:	57                   	push   edi
c0017e14:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e17:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e1a:	83 c4 18             	add    esp,0x18
c0017e1d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e20:	50                   	push   eax
c0017e21:	68 00 2d 02 c0       	push   0xc0022d00
c0017e26:	e8 fe 73 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0017e2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e2e:	83 c4 0c             	add    esp,0xc
c0017e31:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e34:	50                   	push   eax
c0017e35:	6a 00                	push   0x0
c0017e37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e3b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017e3f:	50                   	push   eax
c0017e40:	e8 93 88 fe ff       	call   c00006d8 <memset>
c0017e45:	83 c4 10             	add    esp,0x10
c0017e48:	46                   	inc    esi
c0017e49:	e9 47 ff ff ff       	jmp    c0017d95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017e4e:	50                   	push   eax
c0017e4f:	31 db                	xor    ebx,ebx
c0017e51:	68 00 01 00 00       	push   0x100
c0017e56:	6a 00                	push   0x0
c0017e58:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017e5c:	50                   	push   eax
c0017e5d:	e8 76 88 fe ff       	call   c00006d8 <memset>
c0017e62:	83 c4 0c             	add    esp,0xc
c0017e65:	68 00 01 00 00       	push   0x100
c0017e6a:	6a 00                	push   0x0
c0017e6c:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017e73:	50                   	push   eax
c0017e74:	e8 5f 88 fe ff       	call   c00006d8 <memset>
c0017e79:	83 c4 10             	add    esp,0x10
c0017e7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017e84:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e94:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017e9c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ea4:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017ea8:	0f 86 2f 01 00 00    	jbe    c0017fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017eae:	0f b7 f3             	movzx  esi,bx
c0017eb1:	6b f6 28             	imul   esi,esi,0x28
c0017eb4:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017eb8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ebb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ebf:	50                   	push   eax
c0017ec0:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017ec4:	6b d2 28             	imul   edx,edx,0x28
c0017ec7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ecb:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ecd:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017ed1:	31 d2                	xor    edx,edx
c0017ed3:	52                   	push   edx
c0017ed4:	50                   	push   eax
c0017ed5:	57                   	push   edi
c0017ed6:	e8 a7 79 ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017edb:	83 c4 0c             	add    esp,0xc
c0017ede:	6a 20                	push   0x20
c0017ee0:	6a 00                	push   0x0
c0017ee2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ee9:	51                   	push   ecx
c0017eea:	e8 e9 87 fe ff       	call   c00006d8 <memset>
c0017eef:	58                   	pop    eax
c0017ef0:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ef2:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ef6:	52                   	push   edx
c0017ef7:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017efe:	51                   	push   ecx
c0017eff:	6a 00                	push   0x0
c0017f01:	6a 1f                	push   0x1f
c0017f03:	57                   	push   edi
c0017f04:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017f07:	83 c4 1c             	add    esp,0x1c
c0017f0a:	6a 09                	push   0x9
c0017f0c:	68 1d 2d 02 c0       	push   0xc0022d1d
c0017f11:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017f18:	51                   	push   ecx
c0017f19:	e8 21 87 fe ff       	call   c000063f <memcmp>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	85 c0                	test   eax,eax
c0017f23:	75 21                	jne    c0017f46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f31:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f35:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f38:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f3f:	89 c8                	mov    eax,ecx
c0017f41:	40                   	inc    eax
c0017f42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f46:	50                   	push   eax
c0017f47:	6a 09                	push   0x9
c0017f49:	68 27 2d 02 c0       	push   0xc0022d27
c0017f4e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f55:	50                   	push   eax
c0017f56:	e8 e4 86 fe ff       	call   c000063f <memcmp>
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	85 c0                	test   eax,eax
c0017f60:	75 21                	jne    c0017f83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f6e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f72:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f75:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f7c:	89 c8                	mov    eax,ecx
c0017f7e:	40                   	inc    eax
c0017f7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f83:	50                   	push   eax
c0017f84:	50                   	push   eax
c0017f85:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017f8a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f91:	50                   	push   eax
c0017f92:	e8 31 88 fe ff       	call   c00007c8 <strcmp>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	85 c0                	test   eax,eax
c0017f9c:	75 0f                	jne    c0017fad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017f9e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fa1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017fa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fa9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fad:	50                   	push   eax
c0017fae:	50                   	push   eax
c0017faf:	68 ba 2c 02 c0       	push   0xc0022cba
c0017fb4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017fbb:	50                   	push   eax
c0017fbc:	e8 07 88 fe ff       	call   c00007c8 <strcmp>
c0017fc1:	83 c4 10             	add    esp,0x10
c0017fc4:	85 c0                	test   eax,eax
c0017fc6:	75 0f                	jne    c0017fd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017fc8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fd3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017fd7:	43                   	inc    ebx
c0017fd8:	e9 c7 fe ff ff       	jmp    c0017ea4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017fdd:	31 d2                	xor    edx,edx
c0017fdf:	50                   	push   eax
c0017fe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fe4:	52                   	push   edx
c0017fe5:	50                   	push   eax
c0017fe6:	57                   	push   edi
c0017fe7:	e8 96 78 ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0017fec:	5a                   	pop    edx
c0017fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ff1:	e8 01 40 ff ff       	call   c000bff7 <malloc>
c0017ff6:	31 d2                	xor    edx,edx
c0017ff8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017ffc:	59                   	pop    ecx
c0017ffd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017fff:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0018003:	53                   	push   ebx
c0018004:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018008:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001800c:	52                   	push   edx
c001800d:	50                   	push   eax
c001800e:	57                   	push   edi
c001800f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018012:	83 c4 14             	add    esp,0x14
c0018015:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018019:	e8 d9 3f ff ff       	call   c000bff7 <malloc>
c001801e:	31 d2                	xor    edx,edx
c0018020:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018024:	83 c4 0c             	add    esp,0xc
c0018027:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001802b:	52                   	push   edx
c001802c:	50                   	push   eax
c001802d:	57                   	push   edi
c001802e:	e8 4f 78 ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0018033:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018036:	31 d2                	xor    edx,edx
c0018038:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001803c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018040:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018042:	52                   	push   edx
c0018043:	50                   	push   eax
c0018044:	57                   	push   edi
c0018045:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018048:	83 c4 20             	add    esp,0x20
c001804b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018053:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018057:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001805b:	0f 84 54 03 00 00    	je     c00183b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0018061:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0018068:	31 d2                	xor    edx,edx
c001806a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001806e:	c1 e8 03             	shr    eax,0x3
c0018071:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018075:	50                   	push   eax
c0018076:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001807a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001807e:	52                   	push   edx
c001807f:	50                   	push   eax
c0018080:	57                   	push   edi
c0018081:	e8 fc 77 ff ff       	call   c000f882 <File::seek(unsigned long long)>
c0018086:	58                   	pop    eax
c0018087:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001808b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0018092:	e8 60 3f ff ff       	call   c000bff7 <malloc>
c0018097:	31 d2                	xor    edx,edx
c0018099:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001809d:	58                   	pop    eax
c001809e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00180a0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00180a4:	50                   	push   eax
c00180a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00180a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180ad:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00180b4:	52                   	push   edx
c00180b5:	50                   	push   eax
c00180b6:	57                   	push   edi
c00180b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00180ba:	83 c4 20             	add    esp,0x20
c00180bd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00180c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00180c9:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00180cd:	0f 8d c6 02 00 00    	jge    c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c00180d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180db:	31 db                	xor    ebx,ebx
c00180dd:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00180e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180e8:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00180ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180f0:	c1 e8 08             	shr    eax,0x8
c00180f3:	89 c6                	mov    esi,eax
c00180f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00180f9:	c1 e6 04             	shl    esi,0x4
c00180fc:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0018100:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018103:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018107:	85 c0                	test   eax,eax
c0018109:	0f 85 17 01 00 00    	jne    c0018226 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001810f:	83 ec 0c             	sub    esp,0xc
c0018112:	b3 01                	mov    bl,0x1
c0018114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018118:	03 06                	add    eax,DWORD PTR [esi]
c001811a:	50                   	push   eax
c001811b:	e8 24 f8 ff ff       	call   c0017944 <Thr::getAddressOfKernelSymbol(char const*)>
c0018120:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018124:	83 c4 10             	add    esp,0x10
c0018127:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001812c:	0f 85 f4 00 00 00    	jne    c0018226 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018132:	50                   	push   eax
c0018133:	50                   	push   eax
c0018134:	68 31 2d 02 c0       	push   0xc0022d31
c0018139:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001813d:	03 06                	add    eax,DWORD PTR [esi]
c001813f:	50                   	push   eax
c0018140:	e8 83 86 fe ff       	call   c00007c8 <strcmp>
c0018145:	83 c4 10             	add    esp,0x10
c0018148:	85 c0                	test   eax,eax
c001814a:	75 0a                	jne    c0018156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001814c:	b8 1c f5 01 c0       	mov    eax,0xc001f51c
c0018151:	e9 ca 00 00 00       	jmp    c0018220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018156:	50                   	push   eax
c0018157:	50                   	push   eax
c0018158:	68 3b 2d 02 c0       	push   0xc0022d3b
c001815d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018161:	03 06                	add    eax,DWORD PTR [esi]
c0018163:	50                   	push   eax
c0018164:	e8 5f 86 fe ff       	call   c00007c8 <strcmp>
c0018169:	83 c4 10             	add    esp,0x10
c001816c:	85 c0                	test   eax,eax
c001816e:	75 0a                	jne    c001817a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0018170:	b8 50 f2 01 c0       	mov    eax,0xc001f250
c0018175:	e9 a6 00 00 00       	jmp    c0018220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001817a:	53                   	push   ebx
c001817b:	53                   	push   ebx
c001817c:	68 44 2d 02 c0       	push   0xc0022d44
c0018181:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018185:	03 06                	add    eax,DWORD PTR [esi]
c0018187:	50                   	push   eax
c0018188:	e8 3b 86 fe ff       	call   c00007c8 <strcmp>
c001818d:	83 c4 10             	add    esp,0x10
c0018190:	85 c0                	test   eax,eax
c0018192:	75 0a                	jne    c001819e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0018194:	b8 1c f6 01 c0       	mov    eax,0xc001f61c
c0018199:	e9 82 00 00 00       	jmp    c0018220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001819e:	51                   	push   ecx
c001819f:	51                   	push   ecx
c00181a0:	68 4e 2d 02 c0       	push   0xc0022d4e
c00181a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181a9:	03 06                	add    eax,DWORD PTR [esi]
c00181ab:	50                   	push   eax
c00181ac:	e8 17 86 fe ff       	call   c00007c8 <strcmp>
c00181b1:	83 c4 10             	add    esp,0x10
c00181b4:	85 c0                	test   eax,eax
c00181b6:	74 63                	je     c001821b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c00181b8:	50                   	push   eax
c00181b9:	50                   	push   eax
c00181ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181be:	03 06                	add    eax,DWORD PTR [esi]
c00181c0:	50                   	push   eax
c00181c1:	68 57 2d 02 c0       	push   0xc0022d57
c00181c6:	e8 5e 70 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00181cb:	58                   	pop    eax
c00181cc:	5a                   	pop    edx
c00181cd:	68 71 2d 02 c0       	push   0xc0022d71
c00181d2:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00181d9:	53                   	push   ebx
c00181da:	e8 98 85 fe ff       	call   c0000777 <strcpy>
c00181df:	59                   	pop    ecx
c00181e0:	58                   	pop    eax
c00181e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181e5:	03 06                	add    eax,DWORD PTR [esi]
c00181e7:	50                   	push   eax
c00181e8:	53                   	push   ebx
c00181e9:	e8 40 86 fe ff       	call   c000082e <strcat>
c00181ee:	58                   	pop    eax
c00181ef:	5a                   	pop    edx
c00181f0:	68 07 2e 02 c0       	push   0xc0022e07
c00181f5:	53                   	push   ebx
c00181f6:	e8 33 86 fe ff       	call   c000082e <strcat>
c00181fb:	83 c4 10             	add    esp,0x10
c00181fe:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018203:	0f 84 4b 01 00 00    	je     c0018354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018209:	83 ec 0c             	sub    esp,0xc
c001820c:	53                   	push   ebx
c001820d:	e8 40 d8 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0018212:	83 c4 10             	add    esp,0x10
c0018215:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0018219:	eb 0b                	jmp    c0018226 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001821b:	b8 9c f3 01 c0       	mov    eax,0xc001f39c
c0018220:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018224:	b3 01                	mov    bl,0x1
c0018226:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001822b:	0f 85 80 00 00 00    	jne    c00182b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0018231:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018238:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001823c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018240:	01 ce                	add    esi,ecx
c0018242:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001824a:	0f 94 c2             	sete   dl
c001824d:	8b 06                	mov    eax,DWORD PTR [esi]
c001824f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018257:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001825c:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0018260:	84 db                	test   bl,bl
c0018262:	74 31                	je     c0018295 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0018264:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018268:	01 c3                	add    ebx,eax
c001826a:	84 d2                	test   dl,dl
c001826c:	75 0a                	jne    c0018278 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001826e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018272:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018276:	76 32                	jbe    c00182aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018278:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001827d:	0f 84 d1 00 00 00    	je     c0018354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018283:	83 ec 0c             	sub    esp,0xc
c0018286:	68 88 2d 02 c0       	push   0xc0022d88
c001828b:	e8 c2 d7 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0018290:	83 c4 10             	add    esp,0x10
c0018293:	eb 15                	jmp    c00182aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018295:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0018298:	84 d2                	test   dl,dl
c001829a:	75 0e                	jne    c00182aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001829c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182a0:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182a4:	77 04                	ja     c00182aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00182a6:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00182aa:	89 1e                	mov    DWORD PTR [esi],ebx
c00182ac:	e9 df 00 00 00       	jmp    c0018390 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00182b1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00182b6:	75 6e                	jne    c0018326 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00182b8:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00182bf:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00182c3:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00182c7:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00182cf:	74 17                	je     c00182e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182d1:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00182d9:	74 0d                	je     c00182e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182db:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182df:	83 e8 04             	sub    eax,0x4
c00182e2:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182e6:	76 17                	jbe    c00182ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00182e8:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00182ed:	74 65                	je     c0018354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00182ef:	83 ec 0c             	sub    esp,0xc
c00182f2:	68 a4 2d 02 c0       	push   0xc0022da4
c00182f7:	e8 56 d7 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	8b 16                	mov    edx,DWORD PTR [esi]
c0018301:	84 db                	test   bl,bl
c0018303:	74 13                	je     c0018318 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0018305:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018309:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0018310:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018314:	01 d0                	add    eax,edx
c0018316:	eb 06                	jmp    c001831e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0018318:	89 d0                	mov    eax,edx
c001831a:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001831e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0018322:	89 06                	mov    DWORD PTR [esi],eax
c0018324:	eb 6a                	jmp    c0018390 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018326:	50                   	push   eax
c0018327:	50                   	push   eax
c0018328:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001832d:	50                   	push   eax
c001832e:	68 c0 2d 02 c0       	push   0xc0022dc0
c0018333:	e8 f1 6e ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0018338:	83 c4 10             	add    esp,0x10
c001833b:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018340:	74 12                	je     c0018354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018342:	83 ec 0c             	sub    esp,0xc
c0018345:	68 cb 2d 02 c0       	push   0xc0022dcb
c001834a:	e8 03 d7 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	eb 3c                	jmp    c0018390 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018354:	83 ec 0c             	sub    esp,0xc
c0018357:	57                   	push   edi
c0018358:	e8 c5 74 ff ff       	call   c000f822 <File::close()>
c001835d:	8b 07                	mov    eax,DWORD PTR [edi]
c001835f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018362:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018365:	59                   	pop    ecx
c0018366:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001836a:	e8 98 3c ff ff       	call   c000c007 <free>
c001836f:	5b                   	pop    ebx
c0018370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018374:	e8 8e 3c ff ff       	call   c000c007 <free>
c0018379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001837c:	e8 86 3c ff ff       	call   c000c007 <free>
c0018381:	5e                   	pop    esi
c0018382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018386:	e8 7c 3c ff ff       	call   c000c007 <free>
c001838b:	83 c4 10             	add    esp,0x10
c001838e:	eb 21                	jmp    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0018390:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0018394:	e9 2c fd ff ff       	jmp    c00180c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0018399:	83 ec 0c             	sub    esp,0xc
c001839c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00183a0:	e8 62 3c ff ff       	call   c000c007 <free>
c00183a5:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00183a9:	83 c4 10             	add    esp,0x10
c00183ac:	e9 a2 fc ff ff       	jmp    c0018053 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c00183b1:	31 c0                	xor    eax,eax
c00183b3:	eb 32                	jmp    c00183e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00183b5:	83 ec 0c             	sub    esp,0xc
c00183b8:	57                   	push   edi
c00183b9:	e8 64 74 ff ff       	call   c000f822 <File::close()>
c00183be:	8b 07                	mov    eax,DWORD PTR [edi]
c00183c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00183c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183c6:	58                   	pop    eax
c00183c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00183cb:	e8 37 3c ff ff       	call   c000c007 <free>
c00183d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00183d3:	e8 2f 3c ff ff       	call   c000c007 <free>
c00183d8:	5a                   	pop    edx
c00183d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00183dd:	e8 25 3c ff ff       	call   c000c007 <free>
c00183e2:	83 c4 10             	add    esp,0x10
c00183e5:	b0 01                	mov    al,0x1
c00183e7:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183ed:	5b                   	pop    ebx
c00183ee:	5e                   	pop    esi
c00183ef:	5f                   	pop    edi
c00183f0:	5d                   	pop    ebp
c00183f1:	c3                   	ret    

c00183f2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00183f2:	56                   	push   esi
c00183f3:	31 d2                	xor    edx,edx
c00183f5:	53                   	push   ebx
c00183f6:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c00183fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018400:	39 d3                	cmp    ebx,edx
c0018402:	7e 1b                	jle    c001841f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0018404:	8b 04 95 20 56 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda9e0]
c001840b:	39 c8                	cmp    eax,ecx
c001840d:	77 0d                	ja     c001841c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001840f:	8b 34 95 20 54 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdabe0]
c0018416:	01 c6                	add    esi,eax
c0018418:	39 ce                	cmp    esi,ecx
c001841a:	77 05                	ja     c0018421 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001841c:	42                   	inc    edx
c001841d:	eb e1                	jmp    c0018400 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001841f:	31 c0                	xor    eax,eax
c0018421:	5b                   	pop    ebx
c0018422:	5e                   	pop    esi
c0018423:	c3                   	ret    

c0018424 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018424:	53                   	push   ebx
c0018425:	31 c0                	xor    eax,eax
c0018427:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001842b:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c0018431:	39 c3                	cmp    ebx,eax
c0018433:	7e 22                	jle    c0018457 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018435:	8b 14 85 20 56 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda9e0]
c001843c:	39 ca                	cmp    edx,ecx
c001843e:	77 14                	ja     c0018454 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018440:	03 14 85 20 54 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdabe0]
c0018447:	39 ca                	cmp    edx,ecx
c0018449:	76 09                	jbe    c0018454 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001844b:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c0018452:	eb 05                	jmp    c0018459 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018454:	40                   	inc    eax
c0018455:	eb da                	jmp    c0018431 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018457:	31 c0                	xor    eax,eax
c0018459:	5b                   	pop    ebx
c001845a:	c3                   	ret    

c001845b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001845b:	53                   	push   ebx
c001845c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018460:	53                   	push   ebx
c0018461:	e8 8c ff ff ff       	call   c00183f2 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018466:	5a                   	pop    edx
c0018467:	31 d2                	xor    edx,edx
c0018469:	85 c0                	test   eax,eax
c001846b:	74 04                	je     c0018471 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001846d:	89 da                	mov    edx,ebx
c001846f:	29 c2                	sub    edx,eax
c0018471:	89 d0                	mov    eax,edx
c0018473:	5b                   	pop    ebx
c0018474:	c3                   	ret    

c0018475 <Thr::loadDLL(char const*, bool)>:
c0018475:	55                   	push   ebp
c0018476:	57                   	push   edi
c0018477:	56                   	push   esi
c0018478:	53                   	push   ebx
c0018479:	81 ec 34 01 00 00    	sub    esp,0x134
c001847f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018486:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001848d:	56                   	push   esi
c001848e:	68 e3 2d 02 c0       	push   0xc0022de3
c0018493:	e8 91 6d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0018498:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001849f:	e8 50 6c ff ff       	call   c000f0f4 <operator new(unsigned long)>
c00184a4:	83 c4 0c             	add    esp,0xc
c00184a7:	89 c3                	mov    ebx,eax
c00184a9:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c00184af:	56                   	push   esi
c00184b0:	50                   	push   eax
c00184b1:	e8 aa 72 ff ff       	call   c000f760 <File::File(char const*, Process*)>
c00184b6:	83 c4 0c             	add    esp,0xc
c00184b9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00184bd:	50                   	push   eax
c00184be:	8d 44 24 20          	lea    eax,[esp+0x20]
c00184c2:	50                   	push   eax
c00184c3:	53                   	push   ebx
c00184c4:	e8 a7 75 ff ff       	call   c000fa70 <File::stat(unsigned long long*, bool*)>
c00184c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00184d9:	75 0a                	jne    c00184e5 <Thr::loadDLL(char const*, bool)+0x70>
c00184db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184df:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00184e3:	75 3c                	jne    c0018521 <Thr::loadDLL(char const*, bool)+0xac>
c00184e5:	89 e8                	mov    eax,ebp
c00184e7:	84 c0                	test   al,al
c00184e9:	0f 84 3d 01 00 00    	je     c001862c <Thr::loadDLL(char const*, bool)+0x1b7>
c00184ef:	50                   	push   eax
c00184f0:	50                   	push   eax
c00184f1:	68 f4 2d 02 c0       	push   0xc0022df4
c00184f6:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00184fa:	53                   	push   ebx
c00184fb:	e8 77 82 fe ff       	call   c0000777 <strcpy>
c0018500:	58                   	pop    eax
c0018501:	5a                   	pop    edx
c0018502:	56                   	push   esi
c0018503:	53                   	push   ebx
c0018504:	e8 25 83 fe ff       	call   c000082e <strcat>
c0018509:	59                   	pop    ecx
c001850a:	5f                   	pop    edi
c001850b:	68 07 2e 02 c0       	push   0xc0022e07
c0018510:	53                   	push   ebx
c0018511:	e8 18 83 fe ff       	call   c000082e <strcat>
c0018516:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018519:	e8 34 d5 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001851e:	83 c4 10             	add    esp,0x10
c0018521:	e8 75 5e ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c0018526:	51                   	push   ecx
c0018527:	6a 03                	push   0x3
c0018529:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001852d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018531:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018537:	83 d3 00             	adc    ebx,0x0
c001853a:	89 ca                	mov    edx,ecx
c001853c:	89 d1                	mov    ecx,edx
c001853e:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0018542:	51                   	push   ecx
c0018543:	50                   	push   eax
c0018544:	e8 93 64 ff ff       	call   c000e9dc <VAS::allocatePages(int, int)>
c0018549:	89 34 24             	mov    DWORD PTR [esp],esi
c001854c:	89 c3                	mov    ebx,eax
c001854e:	e8 a2 81 fe ff       	call   c00006f5 <strlen>
c0018553:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c0018559:	40                   	inc    eax
c001855a:	89 04 24             	mov    DWORD PTR [esp],eax
c001855d:	e8 95 3a ff ff       	call   c000bff7 <malloc>
c0018562:	89 04 bd 20 58 02 c0 	mov    DWORD PTR [edi*4-0x3ffda7e0],eax
c0018569:	5f                   	pop    edi
c001856a:	58                   	pop    eax
c001856b:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c0018570:	56                   	push   esi
c0018571:	ff 34 85 20 58 02 c0 	push   DWORD PTR [eax*4-0x3ffda7e0]
c0018578:	e8 fa 81 fe ff       	call   c0000777 <strcpy>
c001857d:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c0018582:	8d 50 01             	lea    edx,[eax+0x1]
c0018585:	89 1c 85 20 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9e0],ebx
c001858c:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c0018592:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018596:	83 c4 0c             	add    esp,0xc
c0018599:	89 14 85 20 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdabe0],edx
c00185a0:	6a 01                	push   0x1
c00185a2:	53                   	push   ebx
c00185a3:	56                   	push   esi
c00185a4:	e8 ab f6 ff ff       	call   c0017c54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00185a9:	83 c4 10             	add    esp,0x10
c00185ac:	89 c7                	mov    edi,eax
c00185ae:	fe c8                	dec    al
c00185b0:	74 16                	je     c00185c8 <Thr::loadDLL(char const*, bool)+0x153>
c00185b2:	89 e8                	mov    eax,ebp
c00185b4:	84 c0                	test   al,al
c00185b6:	74 10                	je     c00185c8 <Thr::loadDLL(char const*, bool)+0x153>
c00185b8:	83 ec 0c             	sub    esp,0xc
c00185bb:	68 09 2e 02 c0       	push   0xc0022e09
c00185c0:	e8 8d d4 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c00185c5:	83 c4 10             	add    esp,0x10
c00185c8:	31 f6                	xor    esi,esi
c00185ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185d2:	05 ff 0f 00 00       	add    eax,0xfff
c00185d7:	83 d2 00             	adc    edx,0x0
c00185da:	0f ac d0 0c          	shrd   eax,edx,0xc
c00185de:	c1 ea 0c             	shr    edx,0xc
c00185e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185e9:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00185ed:	ba 00 00 00 00       	mov    edx,0x0
c00185f2:	89 d0                	mov    eax,edx
c00185f4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00185f8:	73 2c                	jae    c0018626 <Thr::loadDLL(char const*, bool)+0x1b1>
c00185fa:	e8 9c 5d ff ff       	call   c000e39b <Virt::getAKernelVAS()>
c00185ff:	89 f5                	mov    ebp,esi
c0018601:	c1 e5 0c             	shl    ebp,0xc
c0018604:	52                   	push   edx
c0018605:	52                   	push   edx
c0018606:	01 dd                	add    ebp,ebx
c0018608:	55                   	push   ebp
c0018609:	50                   	push   eax
c001860a:	e8 2d 5f ff ff       	call   c000e53c <VAS::getPageTableEntry(unsigned long)>
c001860f:	83 c4 10             	add    esp,0x10
c0018612:	f6 00 60             	test   BYTE PTR [eax],0x60
c0018615:	75 0c                	jne    c0018623 <Thr::loadDLL(char const*, bool)+0x1ae>
c0018617:	83 ec 0c             	sub    esp,0xc
c001861a:	55                   	push   ebp
c001861b:	e8 20 3f ff ff       	call   c000c540 <Phys::freePage(unsigned long)>
c0018620:	83 c4 10             	add    esp,0x10
c0018623:	46                   	inc    esi
c0018624:	eb a4                	jmp    c00185ca <Thr::loadDLL(char const*, bool)+0x155>
c0018626:	89 f8                	mov    eax,edi
c0018628:	84 c0                	test   al,al
c001862a:	75 02                	jne    c001862e <Thr::loadDLL(char const*, bool)+0x1b9>
c001862c:	31 db                	xor    ebx,ebx
c001862e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018634:	89 d8                	mov    eax,ebx
c0018636:	5b                   	pop    ebx
c0018637:	5e                   	pop    esi
c0018638:	5f                   	pop    edi
c0018639:	5d                   	pop    ebp
c001863a:	c3                   	ret    

c001863b <Thr::executeDLL(unsigned long, void*)>:
c001863b:	56                   	push   esi
c001863c:	53                   	push   ebx
c001863d:	51                   	push   ecx
c001863e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018646:	85 db                	test   ebx,ebx
c0018648:	75 10                	jne    c001865a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001864a:	83 ec 0c             	sub    esp,0xc
c001864d:	68 28 2e 02 c0       	push   0xc0022e28
c0018652:	e8 fb d3 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0018657:	83 c4 10             	add    esp,0x10
c001865a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001865e:	5a                   	pop    edx
c001865f:	89 d8                	mov    eax,ebx
c0018661:	5b                   	pop    ebx
c0018662:	5e                   	pop    esi
c0018663:	ff e0                	jmp    eax
c0018665:	90                   	nop

c0018666 <changeTSS>:
c0018666:	83 ec 0c             	sub    esp,0xc
c0018669:	e8 78 c2 ff ff       	call   c00148e6 <thisCPU()>
c001866e:	52                   	push   edx
c001866f:	05 7c 11 00 00       	add    eax,0x117c
c0018674:	52                   	push   edx
c0018675:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001867b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001867e:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0018683:	c1 e1 15             	shl    ecx,0x15
c0018686:	29 ca                	sub    edx,ecx
c0018688:	52                   	push   edx
c0018689:	50                   	push   eax
c001868a:	e8 59 54 ff ff       	call   c000dae8 <TSS::setESP(unsigned long)>
c001868f:	83 c4 1c             	add    esp,0x1c
c0018692:	c3                   	ret    
c0018693:	90                   	nop

c0018694 <Process::addArgs(char**)>:
c0018694:	57                   	push   edi
c0018695:	56                   	push   esi
c0018696:	53                   	push   ebx
c0018697:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001869b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001869f:	85 ff                	test   edi,edi
c00186a1:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00186ab:	74 45                	je     c00186f2 <Process::addArgs(char**)+0x5e>
c00186ad:	8b 07                	mov    eax,DWORD PTR [edi]
c00186af:	85 c0                	test   eax,eax
c00186b1:	74 3f                	je     c00186f2 <Process::addArgs(char**)+0x5e>
c00186b3:	31 db                	xor    ebx,ebx
c00186b5:	83 ec 0c             	sub    esp,0xc
c00186b8:	50                   	push   eax
c00186b9:	e8 37 80 fe ff       	call   c00006f5 <strlen>
c00186be:	40                   	inc    eax
c00186bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00186c2:	e8 30 39 ff ff       	call   c000bff7 <malloc>
c00186c7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00186ce:	5a                   	pop    edx
c00186cf:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00186d2:	59                   	pop    ecx
c00186d3:	43                   	inc    ebx
c00186d4:	52                   	push   edx
c00186d5:	50                   	push   eax
c00186d6:	e8 9c 80 fe ff       	call   c0000777 <strcpy>
c00186db:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00186e1:	83 c4 10             	add    esp,0x10
c00186e4:	41                   	inc    ecx
c00186e5:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00186eb:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00186ee:	85 c0                	test   eax,eax
c00186f0:	75 c3                	jne    c00186b5 <Process::addArgs(char**)+0x21>
c00186f2:	5b                   	pop    ebx
c00186f3:	5e                   	pop    esi
c00186f4:	5f                   	pop    edi
c00186f5:	c3                   	ret    

c00186f6 <Process::Process(char const*, Process*, char**)>:
c00186f6:	56                   	push   esi
c00186f7:	53                   	push   ebx
c00186f8:	83 ec 14             	sub    esp,0x14
c00186fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186ff:	05 0c 02 00 00       	add    eax,0x20c
c0018704:	bb 07 00 00 00       	mov    ebx,0x7
c0018709:	89 c6                	mov    esi,eax
c001870b:	85 db                	test   ebx,ebx
c001870d:	78 12                	js     c0018721 <Process::Process(char const*, Process*, char**)+0x2b>
c001870f:	83 ec 0c             	sub    esp,0xc
c0018712:	56                   	push   esi
c0018713:	e8 52 77 00 00       	call   c001fe6a <ThreadControlBlock::ThreadControlBlock()>
c0018718:	83 c4 10             	add    esp,0x10
c001871b:	83 c6 63             	add    esi,0x63
c001871e:	4b                   	dec    ebx
c001871f:	eb ea                	jmp    c001870b <Process::Process(char const*, Process*, char**)+0x15>
c0018721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018725:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001872c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018730:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018739:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c001873e:	8d 50 01             	lea    edx,[eax+0x1]
c0018741:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c0018747:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001874b:	89 02                	mov    DWORD PTR [edx],eax
c001874d:	83 ec 0c             	sub    esp,0xc
c0018750:	6a 10                	push   0x10
c0018752:	e8 9d 69 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0018757:	83 c4 10             	add    esp,0x10
c001875a:	89 c3                	mov    ebx,eax
c001875c:	83 ec 08             	sub    esp,0x8
c001875f:	6a 00                	push   0x0
c0018761:	53                   	push   ebx
c0018762:	e8 21 66 ff ff       	call   c000ed88 <VAS::VAS(bool)>
c0018767:	83 c4 10             	add    esp,0x10
c001876a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001876e:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018778:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018786:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001878a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018794:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001879a:	85 c0                	test   eax,eax
c001879c:	74 42                	je     c00187e0 <Process::Process(char const*, Process*, char**)+0xea>
c001879e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187a8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00187ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187b2:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00187b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187bc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187c2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00187c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187cc:	05 0c 01 00 00       	add    eax,0x10c
c00187d1:	83 ec 08             	sub    esp,0x8
c00187d4:	52                   	push   edx
c00187d5:	50                   	push   eax
c00187d6:	e8 9c 7f fe ff       	call   c0000777 <strcpy>
c00187db:	83 c4 10             	add    esp,0x10
c00187de:	eb 5c                	jmp    c001883c <Process::Process(char const*, Process*, char**)+0x146>
c00187e0:	83 ec 0c             	sub    esp,0xc
c00187e3:	68 60 12 00 00       	push   0x1260
c00187e8:	e8 07 69 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c00187ed:	83 c4 10             	add    esp,0x10
c00187f0:	89 c3                	mov    ebx,eax
c00187f2:	83 ec 08             	sub    esp,0x8
c00187f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187f9:	53                   	push   ebx
c00187fa:	e8 e7 4f ff ff       	call   c000d7e6 <VgaText::VgaText(char const*)>
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018806:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001880c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018810:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018816:	83 ec 0c             	sub    esp,0xc
c0018819:	50                   	push   eax
c001881a:	e8 c6 43 ff ff       	call   c000cbe5 <addToTerminalCycle(VgaText*)>
c001881f:	83 c4 10             	add    esp,0x10
c0018822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018826:	05 0c 01 00 00       	add    eax,0x10c
c001882b:	83 ec 08             	sub    esp,0x8
c001882e:	68 52 2e 02 c0       	push   0xc0022e52
c0018833:	50                   	push   eax
c0018834:	e8 3e 7f fe ff       	call   c0000777 <strcpy>
c0018839:	83 c4 10             	add    esp,0x10
c001883c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018840:	83 c0 0c             	add    eax,0xc
c0018843:	83 ec 08             	sub    esp,0x8
c0018846:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001884a:	50                   	push   eax
c001884b:	e8 27 7f fe ff       	call   c0000777 <strcpy>
c0018850:	83 c4 10             	add    esp,0x10
c0018853:	83 ec 08             	sub    esp,0x8
c0018856:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001885a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001885e:	e8 31 fe ff ff       	call   c0018694 <Process::addArgs(char**)>
c0018863:	83 c4 10             	add    esp,0x10
c0018866:	83 ec 08             	sub    esp,0x8
c0018869:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001886d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018871:	e8 a5 ee ff ff       	call   c001771b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018876:	83 c4 10             	add    esp,0x10
c0018879:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001887d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018881:	83 f0 01             	xor    eax,0x1
c0018884:	88 c2                	mov    dl,al
c0018886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001888a:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018890:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018894:	25 ff 00 00 00       	and    eax,0xff
c0018899:	83 ec 08             	sub    esp,0x8
c001889c:	50                   	push   eax
c001889d:	68 50 2f 02 c0       	push   0xc0022f50
c00188a2:	e8 82 69 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00188a7:	83 c4 10             	add    esp,0x10
c00188aa:	90                   	nop
c00188ab:	83 c4 14             	add    esp,0x14
c00188ae:	5b                   	pop    ebx
c00188af:	5e                   	pop    esi
c00188b0:	c3                   	ret    
c00188b1:	90                   	nop

c00188b2 <Process::Process(bool, char const*, Process*, char**)>:
c00188b2:	56                   	push   esi
c00188b3:	53                   	push   ebx
c00188b4:	83 ec 14             	sub    esp,0x14
c00188b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188bb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188c3:	05 0c 02 00 00       	add    eax,0x20c
c00188c8:	bb 07 00 00 00       	mov    ebx,0x7
c00188cd:	89 c6                	mov    esi,eax
c00188cf:	85 db                	test   ebx,ebx
c00188d1:	78 12                	js     c00188e5 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00188d3:	83 ec 0c             	sub    esp,0xc
c00188d6:	56                   	push   esi
c00188d7:	e8 8e 75 00 00       	call   c001fe6a <ThreadControlBlock::ThreadControlBlock()>
c00188dc:	83 c4 10             	add    esp,0x10
c00188df:	83 c6 63             	add    esi,0x63
c00188e2:	4b                   	dec    ebx
c00188e3:	eb ea                	jmp    c00188cf <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00188e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e9:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00188f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188f4:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00188fd:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c0018902:	8d 50 01             	lea    edx,[eax+0x1]
c0018905:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c001890b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001890f:	89 02                	mov    DWORD PTR [edx],eax
c0018911:	83 ec 0c             	sub    esp,0xc
c0018914:	6a 10                	push   0x10
c0018916:	e8 d9 67 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001891b:	83 c4 10             	add    esp,0x10
c001891e:	89 c3                	mov    ebx,eax
c0018920:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018924:	25 ff 00 00 00       	and    eax,0xff
c0018929:	83 ec 08             	sub    esp,0x8
c001892c:	50                   	push   eax
c001892d:	53                   	push   ebx
c001892e:	e8 55 64 ff ff       	call   c000ed88 <VAS::VAS(bool)>
c0018933:	83 c4 10             	add    esp,0x10
c0018936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001893a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018944:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001894e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018952:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018956:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001895c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018960:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018966:	85 c0                	test   eax,eax
c0018968:	74 42                	je     c00189ac <Process::Process(bool, char const*, Process*, char**)+0xfa>
c001896a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001896e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018974:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001897a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001897e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018988:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001898e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018998:	05 0c 01 00 00       	add    eax,0x10c
c001899d:	83 ec 08             	sub    esp,0x8
c00189a0:	52                   	push   edx
c00189a1:	50                   	push   eax
c00189a2:	e8 d0 7d fe ff       	call   c0000777 <strcpy>
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	eb 5c                	jmp    c0018a08 <Process::Process(bool, char const*, Process*, char**)+0x156>
c00189ac:	83 ec 0c             	sub    esp,0xc
c00189af:	68 60 12 00 00       	push   0x1260
c00189b4:	e8 3b 67 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c00189b9:	83 c4 10             	add    esp,0x10
c00189bc:	89 c3                	mov    ebx,eax
c00189be:	83 ec 08             	sub    esp,0x8
c00189c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189c5:	53                   	push   ebx
c00189c6:	e8 1b 4e ff ff       	call   c000d7e6 <VgaText::VgaText(char const*)>
c00189cb:	83 c4 10             	add    esp,0x10
c00189ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00189d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189dc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00189e2:	83 ec 0c             	sub    esp,0xc
c00189e5:	50                   	push   eax
c00189e6:	e8 fa 41 ff ff       	call   c000cbe5 <addToTerminalCycle(VgaText*)>
c00189eb:	83 c4 10             	add    esp,0x10
c00189ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189f2:	05 0c 01 00 00       	add    eax,0x10c
c00189f7:	83 ec 08             	sub    esp,0x8
c00189fa:	68 52 2e 02 c0       	push   0xc0022e52
c00189ff:	50                   	push   eax
c0018a00:	e8 72 7d fe ff       	call   c0000777 <strcpy>
c0018a05:	83 c4 10             	add    esp,0x10
c0018a08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a0c:	83 c0 0c             	add    eax,0xc
c0018a0f:	83 ec 08             	sub    esp,0x8
c0018a12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a16:	50                   	push   eax
c0018a17:	e8 5b 7d fe ff       	call   c0000777 <strcpy>
c0018a1c:	83 c4 10             	add    esp,0x10
c0018a1f:	83 ec 08             	sub    esp,0x8
c0018a22:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a2a:	e8 65 fc ff ff       	call   c0018694 <Process::addArgs(char**)>
c0018a2f:	83 c4 10             	add    esp,0x10
c0018a32:	90                   	nop
c0018a33:	83 c4 14             	add    esp,0x14
c0018a36:	5b                   	pop    ebx
c0018a37:	5e                   	pop    esi
c0018a38:	c3                   	ret    

c0018a39 <disableIRQs()>:
c0018a39:	fa                   	cli    
c0018a3a:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a3f:	40                   	inc    eax
c0018a40:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a45:	c3                   	ret    

c0018a46 <getIRQNestingLevel()>:
c0018a46:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a4b:	c3                   	ret    

c0018a4c <enableIRQs()>:
c0018a4c:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a51:	48                   	dec    eax
c0018a52:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a57:	75 01                	jne    c0018a5a <enableIRQs()+0xe>
c0018a59:	fb                   	sti    
c0018a5a:	c3                   	ret    

c0018a5b <lockScheduler()>:
c0018a5b:	eb dc                	jmp    c0018a39 <disableIRQs()>

c0018a5d <unlockScheduler()>:
c0018a5d:	eb ed                	jmp    c0018a4c <enableIRQs()>

c0018a5f <userModeEntryPoint(void*)>:
c0018a5f:	83 ec 0c             	sub    esp,0xc
c0018a62:	e8 f6 ff ff ff       	call   c0018a5d <unlockScheduler()>
c0018a67:	fb                   	sti    
c0018a68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a70:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018a76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a7a:	83 c4 0c             	add    esp,0xc
c0018a7d:	e9 2f 78 fe ff       	jmp    c00002b1 <goToUsermode>

c0018a82 <lockStuff()>:
c0018a82:	e8 b2 ff ff ff       	call   c0018a39 <disableIRQs()>
c0018a87:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018a8c:	40                   	inc    eax
c0018a8d:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018a92:	c3                   	ret    

c0018a93 <taskStartupFunction>:
c0018a93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a98:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018a9b:	c3                   	ret    

c0018a9c <updateTimeUsed()>:
c0018a9c:	57                   	push   edi
c0018a9d:	56                   	push   esi
c0018a9e:	53                   	push   ebx
c0018a9f:	e8 42 be ff ff       	call   c00148e6 <thisCPU()>
c0018aa4:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018aab:	74 49                	je     c0018af6 <updateTimeUsed()+0x5a>
c0018aad:	0f 31                	rdtsc  
c0018aaf:	89 c1                	mov    ecx,eax
c0018ab1:	a3 08 5c 02 c0       	mov    ds:0xc0025c08,eax
c0018ab6:	2b 0d f8 5b 02 c0    	sub    ecx,DWORD PTR ds:0xc0025bf8
c0018abc:	a3 f8 5b 02 c0       	mov    ds:0xc0025bf8,eax
c0018ac1:	89 0d 00 5c 02 c0    	mov    DWORD PTR ds:0xc0025c00,ecx
c0018ac7:	89 d3                	mov    ebx,edx
c0018ac9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ace:	89 15 0c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c0c,edx
c0018ad4:	1b 1d fc 5b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0025bfc
c0018ada:	89 15 fc 5b 02 c0    	mov    DWORD PTR ds:0xc0025bfc,edx
c0018ae0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018ae3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018ae6:	01 f1                	add    ecx,esi
c0018ae8:	89 1d 04 5c 02 c0    	mov    DWORD PTR ds:0xc0025c04,ebx
c0018aee:	11 fb                	adc    ebx,edi
c0018af0:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018af3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018af6:	5b                   	pop    ebx
c0018af7:	5e                   	pop    esi
c0018af8:	5f                   	pop    edi
c0018af9:	c3                   	ret    

c0018afa <switchToThread(ThreadControlBlock*)>:
c0018afa:	53                   	push   ebx
c0018afb:	83 ec 08             	sub    esp,0x8
c0018afe:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018b03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b07:	85 c0                	test   eax,eax
c0018b09:	75 36                	jne    c0018b41 <switchToThread(ThreadControlBlock*)+0x47>
c0018b0b:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018b0e:	80 fa ff             	cmp    dl,0xff
c0018b11:	74 2a                	je     c0018b3d <switchToThread(ThreadControlBlock*)+0x43>
c0018b13:	81 e2 ff 00 00 00    	and    edx,0xff
c0018b19:	b8 84 03 00 00       	mov    eax,0x384
c0018b1e:	29 d0                	sub    eax,edx
c0018b20:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018b23:	c1 e0 10             	shl    eax,0x10
c0018b26:	01 c8                	add    eax,ecx
c0018b28:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018b2b:	e8 6c ff ff ff       	call   c0018a9c <updateTimeUsed()>
c0018b30:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b34:	83 c4 08             	add    esp,0x8
c0018b37:	5b                   	pop    ebx
c0018b38:	e9 b2 77 fe ff       	jmp    c00002ef <switchToThreadASM>
c0018b3d:	31 c0                	xor    eax,eax
c0018b3f:	eb e7                	jmp    c0018b28 <switchToThread(ThreadControlBlock*)+0x2e>
c0018b41:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018b4b:	83 c4 08             	add    esp,0x8
c0018b4e:	5b                   	pop    ebx
c0018b4f:	c3                   	ret    

c0018b50 <Semaphore::Semaphore(int)>:
c0018b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b58:	89 10                	mov    DWORD PTR [eax],edx
c0018b5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b5e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018b65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b74:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b7b:	90                   	nop
c0018b7c:	c3                   	ret    
c0018b7d:	90                   	nop

c0018b7e <Mutex::Mutex()>:
c0018b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b82:	6a 01                	push   0x1
c0018b84:	50                   	push   eax
c0018b85:	e8 c6 ff ff ff       	call   c0018b50 <Semaphore::Semaphore(int)>
c0018b8a:	83 c4 08             	add    esp,0x8
c0018b8d:	90                   	nop
c0018b8e:	c3                   	ret    
c0018b8f:	90                   	nop

c0018b90 <Process::createThread(void (*)(void*), void*, int)>:
c0018b90:	55                   	push   ebp
c0018b91:	31 c9                	xor    ecx,ecx
c0018b93:	57                   	push   edi
c0018b94:	56                   	push   esi
c0018b95:	53                   	push   ebx
c0018b96:	83 ec 1c             	sub    esp,0x1c
c0018b99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b9d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018ba4:	89 f2                	mov    edx,esi
c0018ba6:	31 c0                	xor    eax,eax
c0018ba8:	66 89 d0             	mov    ax,dx
c0018bab:	83 e2 01             	and    edx,0x1
c0018bae:	74 14                	je     c0018bc4 <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018bb0:	d1 f8                	sar    eax,1
c0018bb2:	41                   	inc    ecx
c0018bb3:	89 c2                	mov    edx,eax
c0018bb5:	83 f9 10             	cmp    ecx,0x10
c0018bb8:	75 ec                	jne    c0018ba6 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018bba:	83 c4 1c             	add    esp,0x1c
c0018bbd:	31 c0                	xor    eax,eax
c0018bbf:	5b                   	pop    ebx
c0018bc0:	5e                   	pop    esi
c0018bc1:	5f                   	pop    edi
c0018bc2:	5d                   	pop    ebp
c0018bc3:	c3                   	ret    
c0018bc4:	b8 01 00 00 00       	mov    eax,0x1
c0018bc9:	d3 e0                	shl    eax,cl
c0018bcb:	09 c6                	or     esi,eax
c0018bcd:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bd3:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018bda:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018bdd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018be0:	89 f0                	mov    eax,esi
c0018be2:	c1 e0 05             	shl    eax,0x5
c0018be5:	01 c6                	add    esi,eax
c0018be7:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018bea:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018bf0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018bf4:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018bfa:	89 ca                	mov    edx,ecx
c0018bfc:	f7 da                	neg    edx
c0018bfe:	c1 e2 15             	shl    edx,0x15
c0018c01:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018c07:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018c0d:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018c13:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018c19:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c1d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018c23:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c27:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018c31:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018c37:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018c41:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018c4b:	52                   	push   edx
c0018c4c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018c53:	52                   	push   edx
c0018c54:	50                   	push   eax
c0018c55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c59:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c5e:	e8 5f 70 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c6a:	83 c4 1c             	add    esp,0x1c
c0018c6d:	5b                   	pop    ebx
c0018c6e:	5e                   	pop    esi
c0018c6f:	5f                   	pop    edi
c0018c70:	5d                   	pop    ebp
c0018c71:	c3                   	ret    

c0018c72 <Process::createUserThread()>:
c0018c72:	83 ec 0c             	sub    esp,0xc
c0018c75:	68 80 00 00 00       	push   0x80
c0018c7a:	6a 00                	push   0x0
c0018c7c:	68 5f 8a 01 c0       	push   0xc0018a5f
c0018c81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c85:	50                   	push   eax
c0018c86:	e8 05 ff ff ff       	call   c0018b90 <Process::createThread(void (*)(void*), void*, int)>
c0018c8b:	83 c4 1c             	add    esp,0x1c
c0018c8e:	c3                   	ret    

c0018c8f <setupMultitasking(void (*)())>:
c0018c8f:	56                   	push   esi
c0018c90:	53                   	push   ebx
c0018c91:	51                   	push   ecx
c0018c92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c96:	eb 10                	jmp    c0018ca8 <setupMultitasking(void (*)())+0x19>
c0018c98:	83 ec 0c             	sub    esp,0xc
c0018c9b:	68 e8 5b 02 c0       	push   0xc0025be8
c0018ca0:	e8 6f 6f 00 00       	call   c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018ca5:	83 c4 10             	add    esp,0x10
c0018ca8:	83 ec 0c             	sub    esp,0xc
c0018cab:	68 e8 5b 02 c0       	push   0xc0025be8
c0018cb0:	e8 43 6f 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018cb5:	83 c4 10             	add    esp,0x10
c0018cb8:	84 c0                	test   al,al
c0018cba:	74 dc                	je     c0018c98 <setupMultitasking(void (*)())+0x9>
c0018cbc:	83 ec 0c             	sub    esp,0xc
c0018cbf:	68 3b 07 00 00       	push   0x73b
c0018cc4:	e8 2b 64 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c0018cc9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018cd0:	6a 00                	push   0x0
c0018cd2:	68 56 2e 02 c0       	push   0xc0022e56
c0018cd7:	89 c3                	mov    ebx,eax
c0018cd9:	6a 01                	push   0x1
c0018cdb:	50                   	push   eax
c0018cdc:	e8 d1 fb ff ff       	call   c00188b2 <Process::Process(bool, char const*, Process*, char**)>
c0018ce1:	83 c4 18             	add    esp,0x18
c0018ce4:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018cea:	89 1d f4 5b 02 c0    	mov    DWORD PTR ds:0xc0025bf4,ebx
c0018cf0:	50                   	push   eax
c0018cf1:	68 78 2f 02 c0       	push   0xc0022f78
c0018cf6:	e8 2e 65 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0018cfb:	5a                   	pop    edx
c0018cfc:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018d02:	51                   	push   ecx
c0018d03:	e8 51 46 ff ff       	call   c000d359 <setActiveTerminal(VgaText*)>
c0018d08:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018d0f:	83 c8 01             	or     eax,0x1
c0018d12:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018d19:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018d1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d22:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018d2c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018d32:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018d3c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018d46:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018d4c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018d52:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018d5c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018d62:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d6c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018d76:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d7c:	58                   	pop    eax
c0018d7d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d83:	5a                   	pop    edx
c0018d84:	68 52 2e 02 c0       	push   0xc0022e52
c0018d89:	50                   	push   eax
c0018d8a:	e8 e8 79 fe ff       	call   c0000777 <strcpy>
c0018d8f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018d96:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d9a:	83 c4 14             	add    esp,0x14
c0018d9d:	5b                   	pop    ebx
c0018d9e:	5e                   	pop    esi
c0018d9f:	e9 3d 75 fe ff       	jmp    c00002e1 <switchToThreadASMFirstTime>

c0018da4 <schedule()>:
c0018da4:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018da9:	85 c0                	test   eax,eax
c0018dab:	74 0b                	je     c0018db8 <schedule()+0x14>
c0018dad:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018db7:	c3                   	ret    
c0018db8:	53                   	push   ebx
c0018db9:	83 ec 14             	sub    esp,0x14
c0018dbc:	68 e8 5b 02 c0       	push   0xc0025be8
c0018dc1:	e8 32 6e 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018dc6:	83 c4 10             	add    esp,0x10
c0018dc9:	84 c0                	test   al,al
c0018dcb:	75 38                	jne    c0018e05 <schedule()+0x61>
c0018dcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dd2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018dd5:	4a                   	dec    edx
c0018dd6:	74 32                	je     c0018e0a <schedule()+0x66>
c0018dd8:	83 ec 0c             	sub    esp,0xc
c0018ddb:	68 e8 5b 02 c0       	push   0xc0025be8
c0018de0:	e8 0b 6e 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018de5:	89 c3                	mov    ebx,eax
c0018de7:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0018dee:	e8 21 6e 00 00       	call   c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018df3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018dfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018dfd:	e8 f8 fc ff ff       	call   c0018afa <switchToThread(ThreadControlBlock*)>
c0018e02:	83 c4 10             	add    esp,0x10
c0018e05:	83 c4 08             	add    esp,0x8
c0018e08:	5b                   	pop    ebx
c0018e09:	c3                   	ret    
c0018e0a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018e11:	51                   	push   ecx
c0018e12:	51                   	push   ecx
c0018e13:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018e19:	53                   	push   ebx
c0018e1a:	68 e8 5b 02 c0       	push   0xc0025be8
c0018e1f:	e8 9e 6e 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e24:	83 c4 10             	add    esp,0x10
c0018e27:	eb af                	jmp    c0018dd8 <schedule()+0x34>

c0018e29 <unlockStuff()>:
c0018e29:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018e2e:	48                   	dec    eax
c0018e2f:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018e34:	75 09                	jne    c0018e3f <unlockStuff()+0x16>
c0018e36:	a1 c4 5b 02 c0       	mov    eax,ds:0xc0025bc4
c0018e3b:	85 c0                	test   eax,eax
c0018e3d:	75 05                	jne    c0018e44 <unlockStuff()+0x1b>
c0018e3f:	e9 08 fc ff ff       	jmp    c0018a4c <enableIRQs()>
c0018e44:	83 ec 0c             	sub    esp,0xc
c0018e47:	c7 05 c4 5b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x0
c0018e51:	e8 4e ff ff ff       	call   c0018da4 <schedule()>
c0018e56:	83 c4 0c             	add    esp,0xc
c0018e59:	e9 ee fb ff ff       	jmp    c0018a4c <enableIRQs()>

c0018e5e <Semaphore::tryAcquire()>:
c0018e5e:	83 ec 0c             	sub    esp,0xc
c0018e61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e65:	e8 18 fc ff ff       	call   c0018a82 <lockStuff()>
c0018e6a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e6d:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018e6f:	7c 0b                	jl     c0018e7c <Semaphore::tryAcquire()+0x1e>
c0018e71:	e8 b3 ff ff ff       	call   c0018e29 <unlockStuff()>
c0018e76:	31 c0                	xor    eax,eax
c0018e78:	83 c4 0c             	add    esp,0xc
c0018e7b:	c3                   	ret    
c0018e7c:	40                   	inc    eax
c0018e7d:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018e80:	e8 a4 ff ff ff       	call   c0018e29 <unlockStuff()>
c0018e85:	b0 01                	mov    al,0x1
c0018e87:	83 c4 0c             	add    esp,0xc
c0018e8a:	c3                   	ret    
c0018e8b:	90                   	nop

c0018e8c <Semaphore::assertLocked(char const*)>:
c0018e8c:	83 ec 0c             	sub    esp,0xc
c0018e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e93:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018e97:	e8 e6 fb ff ff       	call   c0018a82 <lockStuff()>
c0018e9c:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e9e:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018ea1:	7c 05                	jl     c0018ea8 <Semaphore::assertLocked(char const*)+0x1c>
c0018ea3:	83 c4 0c             	add    esp,0xc
c0018ea6:	eb 81                	jmp    c0018e29 <unlockStuff()>
c0018ea8:	83 ec 0c             	sub    esp,0xc
c0018eab:	51                   	push   ecx
c0018eac:	e8 a1 cb ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0018eb1:	83 c4 10             	add    esp,0x10
c0018eb4:	83 c4 0c             	add    esp,0xc
c0018eb7:	e9 6d ff ff ff       	jmp    c0018e29 <unlockStuff()>

c0018ebc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018ebc:	83 ec 0c             	sub    esp,0xc
c0018ebf:	e8 82 fb ff ff       	call   c0018a46 <getIRQNestingLevel()>
c0018ec4:	52                   	push   edx
c0018ec5:	52                   	push   edx
c0018ec6:	50                   	push   eax
c0018ec7:	68 ac 2f 02 c0       	push   0xc0022fac
c0018ecc:	e8 58 63 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0018ed1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018eda:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018edd:	e8 c2 fe ff ff       	call   c0018da4 <schedule()>
c0018ee2:	e8 76 fb ff ff       	call   c0018a5d <unlockScheduler()>
c0018ee7:	e8 5a fb ff ff       	call   c0018a46 <getIRQNestingLevel()>
c0018eec:	59                   	pop    ecx
c0018eed:	5a                   	pop    edx
c0018eee:	50                   	push   eax
c0018eef:	68 e0 2f 02 c0       	push   0xc0022fe0
c0018ef4:	e8 30 63 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0018ef9:	83 c4 1c             	add    esp,0x1c
c0018efc:	c3                   	ret    

c0018efd <blockTask(TaskState)>:
c0018efd:	83 ec 0c             	sub    esp,0xc
c0018f00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f04:	e8 52 fb ff ff       	call   c0018a5b <lockScheduler()>
c0018f09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018f11:	e8 8e fe ff ff       	call   c0018da4 <schedule()>
c0018f16:	83 c4 0c             	add    esp,0xc
c0018f19:	e9 3f fb ff ff       	jmp    c0018a5d <unlockScheduler()>

c0018f1e <waitTask(int, int*, int)>:
c0018f1e:	83 ec 18             	sub    esp,0x18
c0018f21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f2a:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f36:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018f39:	6a 07                	push   0x7
c0018f3b:	e8 bd ff ff ff       	call   c0018efd <blockTask(TaskState)>
c0018f40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f45:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018f48:	83 c4 10             	add    esp,0x10
c0018f4b:	85 d2                	test   edx,edx
c0018f4d:	74 0a                	je     c0018f59 <waitTask(int, int*, int)+0x3b>
c0018f4f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018f52:	89 02                	mov    DWORD PTR [edx],eax
c0018f54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f59:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018f5c:	83 c4 0c             	add    esp,0xc
c0018f5f:	c3                   	ret    

c0018f60 <nanoSleepUntil(unsigned long long)>:
c0018f60:	53                   	push   ebx
c0018f61:	83 ec 08             	sub    esp,0x8
c0018f64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f6c:	3b 0d 10 4e 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024e10
c0018f72:	89 d8                	mov    eax,ebx
c0018f74:	1b 05 14 4e 02 c0    	sbb    eax,DWORD PTR ds:0xc0024e14
c0018f7a:	73 05                	jae    c0018f81 <nanoSleepUntil(unsigned long long)+0x21>
c0018f7c:	83 c4 08             	add    esp,0x8
c0018f7f:	5b                   	pop    ebx
c0018f80:	c3                   	ret    
c0018f81:	e8 fc fa ff ff       	call   c0018a82 <lockStuff()>
c0018f86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f8b:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018f8e:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018f91:	51                   	push   ecx
c0018f92:	51                   	push   ecx
c0018f93:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018f99:	53                   	push   ebx
c0018f9a:	68 dc 5b 02 c0       	push   0xc0025bdc
c0018f9f:	e8 1e 6d 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018fa4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018fab:	e8 4d ff ff ff       	call   c0018efd <blockTask(TaskState)>
c0018fb0:	83 c4 18             	add    esp,0x18
c0018fb3:	5b                   	pop    ebx
c0018fb4:	e9 70 fe ff ff       	jmp    c0018e29 <unlockStuff()>

c0018fb9 <nanoSleep(unsigned long long)>:
c0018fb9:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c0018fbe:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c0018fc4:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018fc8:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018fcc:	eb 92                	jmp    c0018f60 <nanoSleepUntil(unsigned long long)>

c0018fce <sleep(unsigned long long)>:
c0018fce:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018fd3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018fdb:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018fdf:	01 ca                	add    edx,ecx
c0018fe1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fe5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018fe9:	eb ce                	jmp    c0018fb9 <nanoSleep(unsigned long long)>
c0018feb:	90                   	nop

c0018fec <Semaphore::acquire()>:
c0018fec:	83 ec 0c             	sub    esp,0xc
c0018fef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ff3:	e8 8a fa ff ff       	call   c0018a82 <lockStuff()>
c0018ff8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018ffb:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018ffd:	7d 0c                	jge    c001900b <Semaphore::acquire()+0x1f>
c0018fff:	40                   	inc    eax
c0019000:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0019003:	83 c4 0c             	add    esp,0xc
c0019006:	e9 1e fe ff ff       	jmp    c0018e29 <unlockStuff()>
c001900b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019010:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0019017:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001901a:	85 c0                	test   eax,eax
c001901c:	74 29                	je     c0019047 <Semaphore::acquire()+0x5b>
c001901e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0019021:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019027:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001902a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001902f:	83 ec 0c             	sub    esp,0xc
c0019032:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0019035:	6a 05                	push   0x5
c0019037:	e8 c1 fe ff ff       	call   c0018efd <blockTask(TaskState)>
c001903c:	83 c4 10             	add    esp,0x10
c001903f:	83 c4 0c             	add    esp,0xc
c0019042:	e9 e2 fd ff ff       	jmp    c0018e29 <unlockStuff()>
c0019047:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001904c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001904f:	eb d9                	jmp    c001902a <Semaphore::acquire()+0x3e>

c0019051 <taskReturned>:
c0019051:	83 ec 18             	sub    esp,0x18
c0019054:	68 14 30 02 c0       	push   0xc0023014
c0019059:	e8 f4 c9 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001905e:	83 c4 10             	add    esp,0x10
c0019061:	83 ec 0c             	sub    esp,0xc
c0019064:	6a 02                	push   0x2
c0019066:	e8 92 fe ff ff       	call   c0018efd <blockTask(TaskState)>
c001906b:	e8 eb f9 ff ff       	call   c0018a5b <lockScheduler()>
c0019070:	e8 2f fd ff ff       	call   c0018da4 <schedule()>
c0019075:	e8 e3 f9 ff ff       	call   c0018a5d <unlockScheduler()>
c001907a:	83 c4 10             	add    esp,0x10
c001907d:	eb e2                	jmp    c0019061 <taskReturned+0x10>

c001907f <unblockTask(ThreadControlBlock*)>:
c001907f:	53                   	push   ebx
c0019080:	83 ec 08             	sub    esp,0x8
c0019083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019087:	e8 cf f9 ff ff       	call   c0018a5b <lockScheduler()>
c001908c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001908f:	85 c0                	test   eax,eax
c0019091:	74 5b                	je     c00190ee <unblockTask(ThreadControlBlock*)+0x6f>
c0019093:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019096:	48                   	dec    eax
c0019097:	74 30                	je     c00190c9 <unblockTask(ThreadControlBlock*)+0x4a>
c0019099:	83 ec 0c             	sub    esp,0xc
c001909c:	68 e8 5b 02 c0       	push   0xc0025be8
c00190a1:	e8 4a 6b 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00190a6:	83 c4 10             	add    esp,0x10
c00190a9:	85 c0                	test   eax,eax
c00190ab:	75 16                	jne    c00190c3 <unblockTask(ThreadControlBlock*)+0x44>
c00190ad:	eb 64                	jmp    c0019113 <unblockTask(ThreadControlBlock*)+0x94>
c00190af:	52                   	push   edx
c00190b0:	52                   	push   edx
c00190b1:	50                   	push   eax
c00190b2:	68 e8 5b 02 c0       	push   0xc0025be8
c00190b7:	e8 44 6e 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00190bc:	83 c4 10             	add    esp,0x10
c00190bf:	85 c0                	test   eax,eax
c00190c1:	74 50                	je     c0019113 <unblockTask(ThreadControlBlock*)+0x94>
c00190c3:	39 c3                	cmp    ebx,eax
c00190c5:	75 e8                	jne    c00190af <unblockTask(ThreadControlBlock*)+0x30>
c00190c7:	eb 1c                	jmp    c00190e5 <unblockTask(ThreadControlBlock*)+0x66>
c00190c9:	83 ec 0c             	sub    esp,0xc
c00190cc:	68 04 31 02 c0       	push   0xc0023104
c00190d1:	e8 53 61 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00190d6:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c00190dd:	e8 47 61 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00190e2:	83 c4 10             	add    esp,0x10
c00190e5:	83 c4 08             	add    esp,0x8
c00190e8:	5b                   	pop    ebx
c00190e9:	e9 6f f9 ff ff       	jmp    c0018a5d <unlockScheduler()>
c00190ee:	83 ec 0c             	sub    esp,0xc
c00190f1:	68 48 30 02 c0       	push   0xc0023048
c00190f6:	e8 2e 61 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00190fb:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c0019102:	e8 22 61 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0019107:	83 c4 10             	add    esp,0x10
c001910a:	83 c4 08             	add    esp,0x8
c001910d:	5b                   	pop    ebx
c001910e:	e9 4a f9 ff ff       	jmp    c0018a5d <unlockScheduler()>
c0019113:	50                   	push   eax
c0019114:	50                   	push   eax
c0019115:	53                   	push   ebx
c0019116:	68 e8 5b 02 c0       	push   0xc0025be8
c001911b:	e8 a2 6b 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019120:	83 c4 10             	add    esp,0x10
c0019123:	83 c4 08             	add    esp,0x8
c0019126:	5b                   	pop    ebx
c0019127:	e9 31 f9 ff ff       	jmp    c0018a5d <unlockScheduler()>

c001912c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001912c:	55                   	push   ebp
c001912d:	57                   	push   edi
c001912e:	56                   	push   esi
c001912f:	53                   	push   ebx
c0019130:	83 ec 1c             	sub    esp,0x1c
c0019133:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019137:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001913a:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0019140:	85 ed                	test   ebp,ebp
c0019142:	7e 21                	jle    c0019165 <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c0019144:	31 f6                	xor    esi,esi
c0019146:	83 ec 0c             	sub    esp,0xc
c0019149:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0019150:	46                   	inc    esi
c0019151:	57                   	push   edi
c0019152:	e8 b0 2e ff ff       	call   c000c007 <free>
c0019157:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001915a:	83 c4 10             	add    esp,0x10
c001915d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0019163:	7f e1                	jg     c0019146 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0019165:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001916f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019174:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019177:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001917a:	d3 c0                	rol    eax,cl
c001917c:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0019183:	21 c1                	and    ecx,eax
c0019185:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c001918c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001918f:	89 f7                	mov    edi,esi
c0019191:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0019199:	0f 85 4f 01 00 00    	jne    c00192ee <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c001919f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191a5:	85 c0                	test   eax,eax
c00191a7:	0f 84 aa 00 00 00    	je     c0019257 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191ad:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00191b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00191b4:	31 c9                	xor    ecx,ecx
c00191b6:	eb 10                	jmp    c00191c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c00191b8:	41                   	inc    ecx
c00191b9:	83 f9 10             	cmp    ecx,0x10
c00191bc:	0f 84 95 00 00 00    	je     c0019257 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191c2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191c8:	31 d2                	xor    edx,edx
c00191ca:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00191d1:	d3 fa                	sar    edx,cl
c00191d3:	83 e2 01             	and    edx,0x1
c00191d6:	74 e0                	je     c00191b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191d8:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00191db:	89 d5                	mov    ebp,edx
c00191dd:	c1 e5 05             	shl    ebp,0x5
c00191e0:	01 ea                	add    edx,ebp
c00191e2:	01 d0                	add    eax,edx
c00191e4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00191ea:	83 fd 07             	cmp    ebp,0x7
c00191ed:	75 c9                	jne    c00191b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191ef:	05 40 02 00 00       	add    eax,0x240
c00191f4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00191f7:	83 fd ff             	cmp    ebp,0xffffffff
c00191fa:	0f 8c 07 01 00 00    	jl     c0019307 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c0019200:	0f 84 b4 01 00 00    	je     c00193ba <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c0019206:	85 ed                	test   ebp,ebp
c0019208:	0f 84 9b 01 00 00    	je     c00193a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c001920e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0019210:	75 a6                	jne    c00191b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019212:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019218:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001921c:	01 d0                	add    eax,edx
c001921e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019222:	83 ec 0c             	sub    esp,0xc
c0019225:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001922b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001922e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0019234:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001923b:	50                   	push   eax
c001923c:	e8 3e fe ff ff       	call   c001907f <unblockTask(ThreadControlBlock*)>
c0019241:	83 c4 10             	add    esp,0x10
c0019244:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019248:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001924b:	41                   	inc    ecx
c001924c:	89 f7                	mov    edi,esi
c001924e:	83 f9 10             	cmp    ecx,0x10
c0019251:	0f 85 6b ff ff ff    	jne    c00191c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0019257:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001925d:	85 c0                	test   eax,eax
c001925f:	74 5d                	je     c00192be <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019261:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019267:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001926d:	74 4f                	je     c00192be <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c001926f:	83 ec 0c             	sub    esp,0xc
c0019272:	68 e8 5b 02 c0       	push   0xc0025be8
c0019277:	e8 74 69 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001927c:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019283:	89 c7                	mov    edi,eax
c0019285:	e8 6e 69 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	84 c0                	test   al,al
c001928f:	0f 84 e2 00 00 00    	je     c0019377 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0019295:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019298:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001929e:	85 d2                	test   edx,edx
c00192a0:	74 0f                	je     c00192b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c00192a2:	83 ec 0c             	sub    esp,0xc
c00192a5:	8b 02                	mov    eax,DWORD PTR [edx]
c00192a7:	52                   	push   edx
c00192a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00192ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00192bb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00192be:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00192c4:	85 db                	test   ebx,ebx
c00192c6:	74 16                	je     c00192de <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00192c8:	83 ec 0c             	sub    esp,0xc
c00192cb:	53                   	push   ebx
c00192cc:	e8 9d 54 ff ff       	call   c000e76e <VAS::~VAS()>
c00192d1:	5a                   	pop    edx
c00192d2:	59                   	pop    ecx
c00192d3:	6a 10                	push   0x10
c00192d5:	53                   	push   ebx
c00192d6:	e8 28 5e ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c00192db:	83 c4 10             	add    esp,0x10
c00192de:	83 ec 0c             	sub    esp,0xc
c00192e1:	68 5d 2e 02 c0       	push   0xc0022e5d
c00192e6:	e8 3e 5f ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00192eb:	83 c4 10             	add    esp,0x10
c00192ee:	50                   	push   eax
c00192ef:	50                   	push   eax
c00192f0:	68 3b 07 00 00       	push   0x73b
c00192f5:	68 6b 2e 02 c0       	push   0xc0022e6b
c00192fa:	e8 2a 5f ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00192ff:	83 c4 2c             	add    esp,0x2c
c0019302:	5b                   	pop    ebx
c0019303:	5e                   	pop    esi
c0019304:	5f                   	pop    edi
c0019305:	5d                   	pop    ebp
c0019306:	c3                   	ret    
c0019307:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001930b:	83 ec 0c             	sub    esp,0xc
c001930e:	68 48 31 02 c0       	push   0xc0023148
c0019313:	e8 3a c7 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0019318:	83 c4 10             	add    esp,0x10
c001931b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001931e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019322:	89 f7                	mov    edi,esi
c0019324:	e9 8f fe ff ff       	jmp    c00191b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019329:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001932f:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0019335:	75 1c                	jne    c0019353 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019337:	83 ec 0c             	sub    esp,0xc
c001933a:	68 b0 31 02 c0       	push   0xc00231b0
c001933f:	e8 e5 5e ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0019344:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001934b:	e8 ad fb ff ff       	call   c0018efd <blockTask(TaskState)>
c0019350:	83 c4 10             	add    esp,0x10
c0019353:	55                   	push   ebp
c0019354:	55                   	push   ebp
c0019355:	56                   	push   esi
c0019356:	68 e8 5b 02 c0       	push   0xc0025be8
c001935b:	e8 62 69 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019360:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019367:	e8 84 68 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001936c:	83 c4 10             	add    esp,0x10
c001936f:	39 f8                	cmp    eax,edi
c0019371:	0f 84 1e ff ff ff    	je     c0019295 <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0019377:	83 ec 0c             	sub    esp,0xc
c001937a:	68 e8 5b 02 c0       	push   0xc0025be8
c001937f:	e8 6c 68 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019384:	89 c6                	mov    esi,eax
c0019386:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c001938d:	e8 82 68 00 00       	call   c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019392:	83 c4 10             	add    esp,0x10
c0019395:	39 f3                	cmp    ebx,esi
c0019397:	74 ba                	je     c0019353 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019399:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001939c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001939f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c00193a5:	75 ac                	jne    c0019353 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c00193a7:	eb 80                	jmp    c0019329 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c00193a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193ad:	83 ec 0c             	sub    esp,0xc
c00193b0:	68 7c 31 02 c0       	push   0xc002317c
c00193b5:	e9 59 ff ff ff       	jmp    c0019313 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c00193ba:	8b 36                	mov    esi,DWORD PTR [esi]
c00193bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193c0:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00193c3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00193c6:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00193cc:	01 d7                	add    edi,edx
c00193ce:	89 f8                	mov    eax,edi
c00193d0:	e9 49 fe ff ff       	jmp    c001921e <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00193d5 <cleanerTaskFunction(void*)>:
c00193d5:	53                   	push   ebx
c00193d6:	83 ec 08             	sub    esp,0x8
c00193d9:	e8 7f f6 ff ff       	call   c0018a5d <unlockScheduler()>
c00193de:	e8 78 f6 ff ff       	call   c0018a5b <lockScheduler()>
c00193e3:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c00193ea:	0f 85 8e 00 00 00    	jne    c001947e <cleanerTaskFunction(void*)+0xa9>
c00193f0:	83 ec 0c             	sub    esp,0xc
c00193f3:	6a 02                	push   0x2
c00193f5:	e8 c2 fa ff ff       	call   c0018ebc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00193fa:	83 c4 10             	add    esp,0x10
c00193fd:	c6 05 ac 5b 02 c0 00 	mov    BYTE PTR ds:0xc0025bac,0x0
c0019404:	e8 79 f6 ff ff       	call   c0018a82 <lockStuff()>
c0019409:	e8 4d f6 ff ff       	call   c0018a5b <lockScheduler()>
c001940e:	83 ec 0c             	sub    esp,0xc
c0019411:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019416:	e8 dd 67 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001941b:	83 c4 10             	add    esp,0x10
c001941e:	84 c0                	test   al,al
c0019420:	75 40                	jne    c0019462 <cleanerTaskFunction(void*)+0x8d>
c0019422:	83 ec 0c             	sub    esp,0xc
c0019425:	68 d0 5b 02 c0       	push   0xc0025bd0
c001942a:	e8 c1 67 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001942f:	89 c3                	mov    ebx,eax
c0019431:	c7 04 24 d0 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bd0
c0019438:	e8 d7 67 00 00       	call   c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001943d:	c7 04 24 81 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e81
c0019444:	e8 e0 5d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0019449:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001944c:	e8 db fc ff ff       	call   c001912c <cleanupTerminatedTask(ThreadControlBlock*)>
c0019451:	c7 04 24 9a 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e9a
c0019458:	e8 cc 5d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001945d:	83 c4 10             	add    esp,0x10
c0019460:	eb ac                	jmp    c001940e <cleanerTaskFunction(void*)+0x39>
c0019462:	e8 f6 f5 ff ff       	call   c0018a5d <unlockScheduler()>
c0019467:	e8 bd f9 ff ff       	call   c0018e29 <unlockStuff()>
c001946c:	e8 ea f5 ff ff       	call   c0018a5b <lockScheduler()>
c0019471:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c0019478:	0f 84 72 ff ff ff    	je     c00193f0 <cleanerTaskFunction(void*)+0x1b>
c001947e:	e8 da f5 ff ff       	call   c0018a5d <unlockScheduler()>
c0019483:	e9 75 ff ff ff       	jmp    c00193fd <cleanerTaskFunction(void*)+0x28>

c0019488 <terminateTask(int)>:
c0019488:	83 ec 14             	sub    esp,0x14
c001948b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019490:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019493:	83 c0 0c             	add    eax,0xc
c0019496:	50                   	push   eax
c0019497:	68 d8 31 02 c0       	push   0xc00231d8
c001949c:	e8 88 5d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00194a1:	e8 dc f5 ff ff       	call   c0018a82 <lockStuff()>
c00194a6:	e8 b0 f5 ff ff       	call   c0018a5b <lockScheduler()>
c00194ab:	c7 04 24 ad 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ead
c00194b2:	e8 72 5d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00194b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00194c0:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00194c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194c8:	59                   	pop    ecx
c00194c9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194cc:	5a                   	pop    edx
c00194cd:	50                   	push   eax
c00194ce:	68 d0 5b 02 c0       	push   0xc0025bd0
c00194d3:	e8 ea 67 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194dd:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00194e4:	c7 04 24 c7 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ec7
c00194eb:	e8 39 5d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c00194f0:	8b 0d a8 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba8
c00194f6:	83 c4 10             	add    esp,0x10
c00194f9:	85 c9                	test   ecx,ecx
c00194fb:	74 5b                	je     c0019558 <terminateTask(int)+0xd0>
c00194fd:	83 ec 0c             	sub    esp,0xc
c0019500:	68 e1 2e 02 c0       	push   0xc0022ee1
c0019505:	e8 1f 5d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001950a:	58                   	pop    eax
c001950b:	8b 15 a8 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba8
c0019511:	52                   	push   edx
c0019512:	c6 05 ac 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025bac,0x1
c0019519:	e8 61 fb ff ff       	call   c001907f <unblockTask(ThreadControlBlock*)>
c001951e:	c7 04 24 fb 2e 02 c0 	mov    DWORD PTR [esp],0xc0022efb
c0019525:	e8 ff 5c ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001952a:	83 c4 10             	add    esp,0x10
c001952d:	e8 2b f5 ff ff       	call   c0018a5d <unlockScheduler()>
c0019532:	e8 f2 f8 ff ff       	call   c0018e29 <unlockStuff()>
c0019537:	83 ec 0c             	sub    esp,0xc
c001953a:	68 33 2f 02 c0       	push   0xc0022f33
c001953f:	e8 e5 5c ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	e8 0f f5 ff ff       	call   c0018a5b <lockScheduler()>
c001954c:	e8 53 f8 ff ff       	call   c0018da4 <schedule()>
c0019551:	e8 07 f5 ff ff       	call   c0018a5d <unlockScheduler()>
c0019556:	eb ef                	jmp    c0019547 <terminateTask(int)+0xbf>
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	68 15 2f 02 c0       	push   0xc0022f15
c0019560:	e8 c4 5c ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0019565:	83 c4 10             	add    esp,0x10
c0019568:	eb c3                	jmp    c001952d <terminateTask(int)+0xa5>

c001956a <Thr::terminateFromIRQ(int)>:
c001956a:	83 ec 18             	sub    esp,0x18
c001956d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019571:	50                   	push   eax
c0019572:	e8 11 ff ff ff       	call   c0019488 <terminateTask(int)>
c0019577:	90                   	nop

c0019578 <Semaphore::release()>:
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001957f:	e8 fe f4 ff ff       	call   c0018a82 <lockStuff()>
c0019584:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019587:	85 c0                	test   eax,eax
c0019589:	74 1a                	je     c00195a5 <Semaphore::release()+0x2d>
c001958b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001958e:	83 ec 0c             	sub    esp,0xc
c0019591:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0019594:	50                   	push   eax
c0019595:	e8 e5 fa ff ff       	call   c001907f <unblockTask(ThreadControlBlock*)>
c001959a:	83 c4 10             	add    esp,0x10
c001959d:	83 c4 0c             	add    esp,0xc
c00195a0:	e9 84 f8 ff ff       	jmp    c0018e29 <unlockStuff()>
c00195a5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00195a8:	48                   	dec    eax
c00195a9:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c00195ac:	83 c4 0c             	add    esp,0xc
c00195af:	e9 75 f8 ff ff       	jmp    c0018e29 <unlockStuff()>

c00195b4 <__static_initialization_and_destruction_0(int, int)>:
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00195bc:	0f 85 88 00 00 00    	jne    c001964a <__static_initialization_and_destruction_0(int, int)+0x96>
c00195c2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00195ca:	75 7e                	jne    c001964a <__static_initialization_and_destruction_0(int, int)+0x96>
c00195cc:	83 ec 0c             	sub    esp,0xc
c00195cf:	68 e8 5b 02 c0       	push   0xc0025be8
c00195d4:	e8 cf 68 00 00       	call   c001fea8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195d9:	83 c4 10             	add    esp,0x10
c00195dc:	83 ec 04             	sub    esp,0x4
c00195df:	68 bc 3b 02 c0       	push   0xc0023bbc
c00195e4:	68 e8 5b 02 c0       	push   0xc0025be8
c00195e9:	68 68 fe 01 c0       	push   0xc001fe68
c00195ee:	e8 8c 5a ff ff       	call   c000f07f <__cxa_atexit>
c00195f3:	83 c4 10             	add    esp,0x10
c00195f6:	83 ec 0c             	sub    esp,0xc
c00195f9:	68 dc 5b 02 c0       	push   0xc0025bdc
c00195fe:	e8 a5 68 00 00       	call   c001fea8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019603:	83 c4 10             	add    esp,0x10
c0019606:	83 ec 04             	sub    esp,0x4
c0019609:	68 bc 3b 02 c0       	push   0xc0023bbc
c001960e:	68 dc 5b 02 c0       	push   0xc0025bdc
c0019613:	68 68 fe 01 c0       	push   0xc001fe68
c0019618:	e8 62 5a ff ff       	call   c000f07f <__cxa_atexit>
c001961d:	83 c4 10             	add    esp,0x10
c0019620:	83 ec 0c             	sub    esp,0xc
c0019623:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019628:	e8 7b 68 00 00       	call   c001fea8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001962d:	83 c4 10             	add    esp,0x10
c0019630:	83 ec 04             	sub    esp,0x4
c0019633:	68 bc 3b 02 c0       	push   0xc0023bbc
c0019638:	68 d0 5b 02 c0       	push   0xc0025bd0
c001963d:	68 68 fe 01 c0       	push   0xc001fe68
c0019642:	e8 38 5a ff ff       	call   c000f07f <__cxa_atexit>
c0019647:	83 c4 10             	add    esp,0x10
c001964a:	90                   	nop
c001964b:	83 c4 0c             	add    esp,0xc
c001964e:	c3                   	ret    

c001964f <_GLOBAL__sub_I_kernelProcess>:
c001964f:	83 ec 0c             	sub    esp,0xc
c0019652:	83 ec 08             	sub    esp,0x8
c0019655:	68 ff ff 00 00       	push   0xffff
c001965a:	6a 01                	push   0x1
c001965c:	e8 53 ff ff ff       	call   c00195b4 <__static_initialization_and_destruction_0(int, int)>
c0019661:	83 c4 10             	add    esp,0x10
c0019664:	83 c4 0c             	add    esp,0xc
c0019667:	c3                   	ret    

c0019668 <Vm::vm8086EntryPoint(void*)>:
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	e8 ed f3 ff ff       	call   c0018a5d <unlockScheduler()>
c0019670:	fb                   	sti    
c0019671:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019676:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001967a:	52                   	push   edx
c001967b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001967f:	52                   	push   edx
c0019680:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019684:	52                   	push   edx
c0019685:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019689:	50                   	push   eax
c001968a:	e8 f1 6b fe ff       	call   c0000280 <goToVM86>
c001968f:	83 c4 1c             	add    esp,0x1c
c0019692:	c3                   	ret    

c0019693 <Vm::inbv(unsigned short)>:
c0019693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019697:	ec                   	in     al,dx
c0019698:	c3                   	ret    

c0019699 <Vm::outbv(unsigned short, unsigned char)>:
c0019699:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001969d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196a1:	ee                   	out    dx,al
c00196a2:	c3                   	ret    

c00196a3 <Vm::realToLinear(unsigned short, unsigned short)>:
c00196a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00196ad:	c1 e0 04             	shl    eax,0x4
c00196b0:	01 d0                	add    eax,edx
c00196b2:	c3                   	ret    

c00196b3 <Vm::getSegment(unsigned int)>:
c00196b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196b7:	c1 e8 10             	shr    eax,0x10
c00196ba:	c3                   	ret    

c00196bb <Vm::getOffset(unsigned int)>:
c00196bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196bf:	c3                   	ret    

c00196c0 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00196c0:	55                   	push   ebp
c00196c1:	57                   	push   edi
c00196c2:	56                   	push   esi
c00196c3:	53                   	push   ebx
c00196c4:	83 ec 2c             	sub    esp,0x2c
c00196c7:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00196cb:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00196cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00196d3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00196d7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00196db:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00196df:	e8 77 f3 ff ff       	call   c0018a5b <lockScheduler()>
c00196e4:	68 80 00 00 00       	push   0x80
c00196e9:	6a 00                	push   0x0
c00196eb:	68 68 96 01 c0       	push   0xc0019668
c00196f0:	55                   	push   ebp
c00196f1:	e8 9a f4 ff ff       	call   c0018b90 <Process::createThread(void (*)(void*), void*, int)>
c00196f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196fa:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00196fe:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0019702:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0019706:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001970a:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001970e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019715:	e8 da 59 ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001971a:	83 c4 0c             	add    esp,0xc
c001971d:	55                   	push   ebp
c001971e:	89 c3                	mov    ebx,eax
c0019720:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019724:	50                   	push   eax
c0019725:	e8 36 60 ff ff       	call   c000f760 <File::File(char const*, Process*)>
c001972a:	83 c4 0c             	add    esp,0xc
c001972d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019731:	50                   	push   eax
c0019732:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019736:	50                   	push   eax
c0019737:	53                   	push   ebx
c0019738:	e8 33 63 ff ff       	call   c000fa70 <File::stat(unsigned long long*, bool*)>
c001973d:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0019741:	83 c4 10             	add    esp,0x10
c0019744:	84 d2                	test   dl,dl
c0019746:	74 1c                	je     c0019764 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019748:	83 ec 0c             	sub    esp,0xc
c001974b:	68 f7 31 02 c0       	push   0xc00231f7
c0019750:	e8 fd c2 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0019755:	e8 03 f3 ff ff       	call   c0018a5d <unlockScheduler()>
c001975a:	83 c4 10             	add    esp,0x10
c001975d:	31 d2                	xor    edx,edx
c001975f:	e9 81 00 00 00       	jmp    c00197e5 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019764:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019768:	51                   	push   ecx
c0019769:	51                   	push   ecx
c001976a:	6a 01                	push   0x1
c001976c:	53                   	push   ebx
c001976d:	e8 52 60 ff ff       	call   c000f7c4 <File::open(FileOpenMode)>
c0019772:	83 c4 10             	add    esp,0x10
c0019775:	85 c0                	test   eax,eax
c0019777:	74 1b                	je     c0019794 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019779:	83 ec 0c             	sub    esp,0xc
c001977c:	68 10 32 02 c0       	push   0xc0023210
c0019781:	e8 cc c2 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0019786:	e8 d2 f2 ff ff       	call   c0018a5d <unlockScheduler()>
c001978b:	83 c4 10             	add    esp,0x10
c001978e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019792:	eb 51                	jmp    c00197e5 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019794:	83 ec 0c             	sub    esp,0xc
c0019797:	0f b7 ff             	movzx  edi,di
c001979a:	6a 07                	push   0x7
c001979c:	68 00 01 00 00       	push   0x100
c00197a1:	6a 00                	push   0x0
c00197a3:	6a 00                	push   0x0
c00197a5:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00197ab:	e8 1c 54 ff ff       	call   c000ebcc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00197b0:	83 c4 18             	add    esp,0x18
c00197b3:	0f b7 f6             	movzx  esi,si
c00197b6:	57                   	push   edi
c00197b7:	56                   	push   esi
c00197b8:	e8 e6 fe ff ff       	call   c00196a3 <Vm::realToLinear(unsigned short, unsigned short)>
c00197bd:	5a                   	pop    edx
c00197be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00197c0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00197c4:	51                   	push   ecx
c00197c5:	50                   	push   eax
c00197c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197ce:	53                   	push   ebx
c00197cf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00197d2:	83 c4 14             	add    esp,0x14
c00197d5:	53                   	push   ebx
c00197d6:	e8 47 60 ff ff       	call   c000f822 <File::close()>
c00197db:	e8 7d f2 ff ff       	call   c0018a5d <unlockScheduler()>
c00197e0:	83 c4 10             	add    esp,0x10
c00197e3:	b2 01                	mov    dl,0x1
c00197e5:	83 c4 2c             	add    esp,0x2c
c00197e8:	88 d0                	mov    al,dl
c00197ea:	5b                   	pop    ebx
c00197eb:	5e                   	pop    esi
c00197ec:	5f                   	pop    edi
c00197ed:	5d                   	pop    ebp
c00197ee:	c3                   	ret    

c00197ef <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00197ef:	57                   	push   edi
c00197f0:	56                   	push   esi
c00197f1:	53                   	push   ebx
c00197f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197fa:	83 e8 06             	sub    eax,0x6
c00197fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019801:	0f b7 c0             	movzx  eax,ax
c0019804:	50                   	push   eax
c0019805:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001980a:	50                   	push   eax
c001980b:	e8 93 fe ff ff       	call   c00196a3 <Vm::realToLinear(unsigned short, unsigned short)>
c0019810:	5a                   	pop    edx
c0019811:	5e                   	pop    esi
c0019812:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019815:	8d 56 fa             	lea    edx,[esi-0x6]
c0019818:	81 e2 ff ff 00 00    	and    edx,0xffff
c001981e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019821:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019824:	83 c2 02             	add    edx,0x2
c0019827:	66 89 10             	mov    WORD PTR [eax],dx
c001982a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001982d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019831:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019834:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019838:	89 d6                	mov    esi,edx
c001983a:	66 81 e6 ff fd       	and    si,0xfdff
c001983f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019845:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019849:	74 07                	je     c0019852 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001984b:	89 d6                	mov    esi,edx
c001984d:	66 81 ce 00 02       	or     si,0x200
c0019852:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019856:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001985b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001985f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019867:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001986a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019872:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019875:	5b                   	pop    ebx
c0019876:	5e                   	pop    esi
c0019877:	5f                   	pop    edi
c0019878:	c3                   	ret    

c0019879 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019879:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001987e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019883:	c1 e0 04             	shl    eax,0x4
c0019886:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019889:	c3                   	ret    

c001988a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001988a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001988f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019894:	c1 e0 04             	shl    eax,0x4
c0019897:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001989b:	c3                   	ret    

c001989c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001989c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198a1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198a6:	c1 e0 04             	shl    eax,0x4
c00198a9:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00198ac:	c3                   	ret    

c00198ad <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00198ad:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198b2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198b7:	c1 e0 04             	shl    eax,0x4
c00198ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198be:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00198c1:	c3                   	ret    

c00198c2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00198c2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198c7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198cc:	c1 e0 04             	shl    eax,0x4
c00198cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198d3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00198d7:	c3                   	ret    

c00198d8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00198d8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198dd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198e2:	c1 e0 04             	shl    eax,0x4
c00198e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198e9:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00198ec:	c3                   	ret    

c00198ed <Vm::faultHandler(regs*)>:
c00198ed:	55                   	push   ebp
c00198ee:	57                   	push   edi
c00198ef:	56                   	push   esi
c00198f0:	53                   	push   ebx
c00198f1:	83 ec 1c             	sub    esp,0x1c
c00198f4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00198f8:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00198fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00198ff:	52                   	push   edx
c0019900:	0f b7 f0             	movzx  esi,ax
c0019903:	0f b7 c0             	movzx  eax,ax
c0019906:	50                   	push   eax
c0019907:	e8 97 fd ff ff       	call   c00196a3 <Vm::realToLinear(unsigned short, unsigned short)>
c001990c:	5a                   	pop    edx
c001990d:	89 c7                	mov    edi,eax
c001990f:	59                   	pop    ecx
c0019910:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019913:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019917:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001991a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001991f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019923:	0f b7 c5             	movzx  eax,bp
c0019926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001992a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001992e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019932:	e8 6c fd ff ff       	call   c00196a3 <Vm::realToLinear(unsigned short, unsigned short)>
c0019937:	5a                   	pop    edx
c0019938:	59                   	pop    ecx
c0019939:	b1 06                	mov    cl,0x6
c001993b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019940:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019945:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019948:	80 fa 9d             	cmp    dl,0x9d
c001994b:	0f 84 1d 02 00 00    	je     c0019b6e <Vm::faultHandler(regs*)+0x281>
c0019951:	0f 87 8e 00 00 00    	ja     c00199e5 <Vm::faultHandler(regs*)+0xf8>
c0019957:	80 fa 66             	cmp    dl,0x66
c001995a:	0f 84 89 01 00 00    	je     c0019ae9 <Vm::faultHandler(regs*)+0x1fc>
c0019960:	77 44                	ja     c00199a6 <Vm::faultHandler(regs*)+0xb9>
c0019962:	80 fa 36             	cmp    dl,0x36
c0019965:	0f 84 74 01 00 00    	je     c0019adf <Vm::faultHandler(regs*)+0x1f2>
c001996b:	77 1a                	ja     c0019987 <Vm::faultHandler(regs*)+0x9a>
c001996d:	80 fa 26             	cmp    dl,0x26
c0019970:	0f 84 4b 01 00 00    	je     c0019ac1 <Vm::faultHandler(regs*)+0x1d4>
c0019976:	80 fa 2e             	cmp    dl,0x2e
c0019979:	0f 85 4a 05 00 00    	jne    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c001997f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019982:	31 c9                	xor    ecx,ecx
c0019984:	47                   	inc    edi
c0019985:	eb be                	jmp    c0019945 <Vm::faultHandler(regs*)+0x58>
c0019987:	80 fa 64             	cmp    dl,0x64
c001998a:	0f 84 3b 01 00 00    	je     c0019acb <Vm::faultHandler(regs*)+0x1de>
c0019990:	0f 87 3f 01 00 00    	ja     c0019ad5 <Vm::faultHandler(regs*)+0x1e8>
c0019996:	80 fa 3e             	cmp    dl,0x3e
c0019999:	0f 85 2a 05 00 00    	jne    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c001999f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199a2:	b1 01                	mov    cl,0x1
c00199a4:	eb de                	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c00199a6:	80 fa 6d             	cmp    dl,0x6d
c00199a9:	0f 84 bf 02 00 00    	je     c0019c6e <Vm::faultHandler(regs*)+0x381>
c00199af:	77 17                	ja     c00199c8 <Vm::faultHandler(regs*)+0xdb>
c00199b1:	80 fa 67             	cmp    dl,0x67
c00199b4:	0f 84 3c 01 00 00    	je     c0019af6 <Vm::faultHandler(regs*)+0x209>
c00199ba:	80 fa 6c             	cmp    dl,0x6c
c00199bd:	0f 84 5d 02 00 00    	je     c0019c20 <Vm::faultHandler(regs*)+0x333>
c00199c3:	e9 01 05 00 00       	jmp    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c00199c8:	80 fa 6f             	cmp    dl,0x6f
c00199cb:	0f 84 8b 03 00 00    	je     c0019d5c <Vm::faultHandler(regs*)+0x46f>
c00199d1:	0f 82 0f 03 00 00    	jb     c0019ce6 <Vm::faultHandler(regs*)+0x3f9>
c00199d7:	80 fa 9c             	cmp    dl,0x9c
c00199da:	0f 84 23 01 00 00    	je     c0019b03 <Vm::faultHandler(regs*)+0x216>
c00199e0:	e9 e4 04 00 00       	jmp    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c00199e5:	80 fa ec             	cmp    dl,0xec
c00199e8:	0f 84 7f 04 00 00    	je     c0019e6d <Vm::faultHandler(regs*)+0x580>
c00199ee:	77 7b                	ja     c0019a6b <Vm::faultHandler(regs*)+0x17e>
c00199f0:	80 fa e4             	cmp    dl,0xe4
c00199f3:	0f 84 fe 03 00 00    	je     c0019df7 <Vm::faultHandler(regs*)+0x50a>
c00199f9:	77 53                	ja     c0019a4e <Vm::faultHandler(regs*)+0x161>
c00199fb:	80 fa cd             	cmp    dl,0xcd
c00199fe:	0f 84 cd 01 00 00    	je     c0019bd1 <Vm::faultHandler(regs*)+0x2e4>
c0019a04:	80 fa cf             	cmp    dl,0xcf
c0019a07:	0f 85 bc 04 00 00    	jne    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c0019a0d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019a10:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019a13:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019a17:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019a1a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019a1e:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a24:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a27:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019a2b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a31:	66 c1 e8 09          	shr    ax,0x9
c0019a35:	83 e0 01             	and    eax,0x1
c0019a38:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a3b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a3e:	83 c0 06             	add    eax,0x6
c0019a41:	25 ff ff 00 00       	and    eax,0xffff
c0019a46:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019a49:	e9 77 04 00 00       	jmp    c0019ec5 <Vm::faultHandler(regs*)+0x5d8>
c0019a4e:	80 fa e6             	cmp    dl,0xe6
c0019a51:	0f 84 ea 03 00 00    	je     c0019e41 <Vm::faultHandler(regs*)+0x554>
c0019a57:	0f 82 b6 03 00 00    	jb     c0019e13 <Vm::faultHandler(regs*)+0x526>
c0019a5d:	80 fa e7             	cmp    dl,0xe7
c0019a60:	0f 84 f2 03 00 00    	je     c0019e58 <Vm::faultHandler(regs*)+0x56b>
c0019a66:	e9 5e 04 00 00       	jmp    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c0019a6b:	80 fa ef             	cmp    dl,0xef
c0019a6e:	0f 84 3c 04 00 00    	je     c0019eb0 <Vm::faultHandler(regs*)+0x5c3>
c0019a74:	77 28                	ja     c0019a9e <Vm::faultHandler(regs*)+0x1b1>
c0019a76:	80 fa ed             	cmp    dl,0xed
c0019a79:	0f 84 0a 04 00 00    	je     c0019e89 <Vm::faultHandler(regs*)+0x59c>
c0019a7f:	80 fa ee             	cmp    dl,0xee
c0019a82:	0f 85 41 04 00 00    	jne    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c0019a88:	50                   	push   eax
c0019a89:	50                   	push   eax
c0019a8a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019a8e:	50                   	push   eax
c0019a8f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a93:	50                   	push   eax
c0019a94:	e8 00 fc ff ff       	call   c0019699 <Vm::outbv(unsigned short, unsigned char)>
c0019a99:	e9 0a 04 00 00       	jmp    c0019ea8 <Vm::faultHandler(regs*)+0x5bb>
c0019a9e:	80 fa fa             	cmp    dl,0xfa
c0019aa1:	0f 84 5d 01 00 00    	je     c0019c04 <Vm::faultHandler(regs*)+0x317>
c0019aa7:	80 fa fb             	cmp    dl,0xfb
c0019aaa:	0f 84 62 01 00 00    	je     c0019c12 <Vm::faultHandler(regs*)+0x325>
c0019ab0:	80 fa f3             	cmp    dl,0xf3
c0019ab3:	0f 85 10 04 00 00    	jne    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c0019ab9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019abc:	e9 c3 fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019ac1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ac4:	b1 02                	mov    cl,0x2
c0019ac6:	e9 b9 fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019acb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ace:	b1 03                	mov    cl,0x3
c0019ad0:	e9 af fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019ad5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ad8:	b1 04                	mov    cl,0x4
c0019ada:	e9 a5 fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019adf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ae2:	b1 05                	mov    cl,0x5
c0019ae4:	e9 9b fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019ae9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aec:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019af1:	e9 8e fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019af6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019af9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019afe:	e9 81 fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019b03:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019b06:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019b0a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b0f:	74 30                	je     c0019b41 <Vm::faultHandler(regs*)+0x254>
c0019b11:	83 e9 04             	sub    ecx,0x4
c0019b14:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b1a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b20:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b23:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b26:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b2c:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b30:	0f 84 8c 03 00 00    	je     c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019b36:	80 ce 02             	or     dh,0x2
c0019b39:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b3c:	e9 81 03 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019b41:	83 e9 02             	sub    ecx,0x2
c0019b44:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b4a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b4d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b51:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b57:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b5b:	74 05                	je     c0019b62 <Vm::faultHandler(regs*)+0x275>
c0019b5d:	80 ce 02             	or     dh,0x2
c0019b60:	eb 03                	jmp    c0019b65 <Vm::faultHandler(regs*)+0x278>
c0019b62:	80 e6 fd             	and    dh,0xfd
c0019b65:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b69:	e9 54 03 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019b6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b73:	74 2a                	je     c0019b9f <Vm::faultHandler(regs*)+0x2b2>
c0019b75:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b77:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b7d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b83:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b88:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b8e:	c1 e8 09             	shr    eax,0x9
c0019b91:	83 e0 01             	and    eax,0x1
c0019b94:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019b97:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019b9a:	83 c0 04             	add    eax,0x4
c0019b9d:	eb 25                	jmp    c0019bc4 <Vm::faultHandler(regs*)+0x2d7>
c0019b9f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019ba2:	81 ca 00 02 02 00    	or     edx,0x20200
c0019ba8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019bab:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019bae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019bb4:	66 c1 e8 09          	shr    ax,0x9
c0019bb8:	83 e0 01             	and    eax,0x1
c0019bbb:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019bbe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019bc1:	83 c0 02             	add    eax,0x2
c0019bc4:	25 ff ff 00 00       	and    eax,0xffff
c0019bc9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019bcc:	e9 f1 02 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019bd1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bd5:	3c ff                	cmp    al,0xff
c0019bd7:	75 10                	jne    c0019be9 <Vm::faultHandler(regs*)+0x2fc>
c0019bd9:	83 ec 0c             	sub    esp,0xc
c0019bdc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019bdf:	e8 86 f9 ff ff       	call   c001956a <Thr::terminateFromIRQ(int)>
c0019be4:	e9 c2 02 00 00       	jmp    c0019eab <Vm::faultHandler(regs*)+0x5be>
c0019be9:	83 ec 0c             	sub    esp,0xc
c0019bec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bf4:	57                   	push   edi
c0019bf5:	50                   	push   eax
c0019bf6:	53                   	push   ebx
c0019bf7:	e8 f3 fb ff ff       	call   c00197ef <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019bfc:	83 c4 20             	add    esp,0x20
c0019bff:	e9 c1 02 00 00       	jmp    c0019ec5 <Vm::faultHandler(regs*)+0x5d8>
c0019c04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c09:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019c0d:	e9 b0 02 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019c12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c17:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019c1b:	e9 a2 02 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019c20:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c25:	74 0d                	je     c0019c34 <Vm::faultHandler(regs*)+0x347>
c0019c27:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019c2e:	0f 87 e9 02 00 00    	ja     c0019f1d <Vm::faultHandler(regs*)+0x630>
c0019c34:	83 ec 0c             	sub    esp,0xc
c0019c37:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019c3a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c3e:	50                   	push   eax
c0019c3f:	e8 4f fa ff ff       	call   c0019693 <Vm::inbv(unsigned short)>
c0019c44:	83 c4 0c             	add    esp,0xc
c0019c47:	0f b6 c0             	movzx  eax,al
c0019c4a:	50                   	push   eax
c0019c4b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019c4f:	0f b7 c9             	movzx  ecx,cx
c0019c52:	50                   	push   eax
c0019c53:	51                   	push   ecx
c0019c54:	e8 54 fc ff ff       	call   c00198ad <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019c59:	83 c4 10             	add    esp,0x10
c0019c5c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c5f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c63:	74 03                	je     c0019c68 <Vm::faultHandler(regs*)+0x37b>
c0019c65:	48                   	dec    eax
c0019c66:	eb 01                	jmp    c0019c69 <Vm::faultHandler(regs*)+0x37c>
c0019c68:	40                   	inc    eax
c0019c69:	0f b7 c0             	movzx  eax,ax
c0019c6c:	eb 70                	jmp    c0019cde <Vm::faultHandler(regs*)+0x3f1>
c0019c6e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c71:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019c74:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c79:	74 0c                	je     c0019c87 <Vm::faultHandler(regs*)+0x39a>
c0019c7b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c81:	0f 87 96 02 00 00    	ja     c0019f1d <Vm::faultHandler(regs*)+0x630>
c0019c87:	0f b7 c9             	movzx  ecx,cx
c0019c8a:	0f b7 f6             	movzx  esi,si
c0019c8d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c90:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c95:	74 20                	je     c0019cb7 <Vm::faultHandler(regs*)+0x3ca>
c0019c97:	ed                   	in     eax,dx
c0019c98:	55                   	push   ebp
c0019c99:	50                   	push   eax
c0019c9a:	51                   	push   ecx
c0019c9b:	56                   	push   esi
c0019c9c:	e8 37 fc ff ff       	call   c00198d8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019ca1:	83 c4 10             	add    esp,0x10
c0019ca4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ca7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019cab:	74 05                	je     c0019cb2 <Vm::faultHandler(regs*)+0x3c5>
c0019cad:	83 e8 04             	sub    eax,0x4
c0019cb0:	eb 27                	jmp    c0019cd9 <Vm::faultHandler(regs*)+0x3ec>
c0019cb2:	83 c0 04             	add    eax,0x4
c0019cb5:	eb 22                	jmp    c0019cd9 <Vm::faultHandler(regs*)+0x3ec>
c0019cb7:	66 ed                	in     ax,dx
c0019cb9:	0f b7 c0             	movzx  eax,ax
c0019cbc:	57                   	push   edi
c0019cbd:	50                   	push   eax
c0019cbe:	51                   	push   ecx
c0019cbf:	56                   	push   esi
c0019cc0:	e8 fd fb ff ff       	call   c00198c2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019cc5:	83 c4 10             	add    esp,0x10
c0019cc8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ccb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019ccf:	74 05                	je     c0019cd6 <Vm::faultHandler(regs*)+0x3e9>
c0019cd1:	83 e8 02             	sub    eax,0x2
c0019cd4:	eb 03                	jmp    c0019cd9 <Vm::faultHandler(regs*)+0x3ec>
c0019cd6:	83 c0 02             	add    eax,0x2
c0019cd9:	25 ff ff 00 00       	and    eax,0xffff
c0019cde:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019ce1:	e9 dc 01 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019ce6:	49                   	dec    ecx
c0019ce7:	80 f9 05             	cmp    cl,0x5
c0019cea:	77 24                	ja     c0019d10 <Vm::faultHandler(regs*)+0x423>
c0019cec:	0f b6 c9             	movzx  ecx,cl
c0019cef:	ff 24 8d 58 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcda8]
c0019cf6:	0f b7 f5             	movzx  esi,bp
c0019cf9:	eb 15                	jmp    c0019d10 <Vm::faultHandler(regs*)+0x423>
c0019cfb:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019cff:	eb 0f                	jmp    c0019d10 <Vm::faultHandler(regs*)+0x423>
c0019d01:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019d05:	eb 09                	jmp    c0019d10 <Vm::faultHandler(regs*)+0x423>
c0019d07:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019d0b:	eb 03                	jmp    c0019d10 <Vm::faultHandler(regs*)+0x423>
c0019d0d:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019d10:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d13:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d18:	74 0b                	je     c0019d25 <Vm::faultHandler(regs*)+0x438>
c0019d1a:	3d ff ff 00 00       	cmp    eax,0xffff
c0019d1f:	0f 87 f8 01 00 00    	ja     c0019f1d <Vm::faultHandler(regs*)+0x630>
c0019d25:	52                   	push   edx
c0019d26:	52                   	push   edx
c0019d27:	0f b7 c0             	movzx  eax,ax
c0019d2a:	50                   	push   eax
c0019d2b:	56                   	push   esi
c0019d2c:	e8 48 fb ff ff       	call   c0019879 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019d31:	59                   	pop    ecx
c0019d32:	5e                   	pop    esi
c0019d33:	0f b6 c0             	movzx  eax,al
c0019d36:	50                   	push   eax
c0019d37:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d3b:	50                   	push   eax
c0019d3c:	e8 58 f9 ff ff       	call   c0019699 <Vm::outbv(unsigned short, unsigned char)>
c0019d41:	83 c4 10             	add    esp,0x10
c0019d44:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d47:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019d4b:	74 03                	je     c0019d50 <Vm::faultHandler(regs*)+0x463>
c0019d4d:	48                   	dec    eax
c0019d4e:	eb 01                	jmp    c0019d51 <Vm::faultHandler(regs*)+0x464>
c0019d50:	40                   	inc    eax
c0019d51:	0f b7 c0             	movzx  eax,ax
c0019d54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019d57:	e9 66 01 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019d5c:	49                   	dec    ecx
c0019d5d:	80 f9 05             	cmp    cl,0x5
c0019d60:	77 1f                	ja     c0019d81 <Vm::faultHandler(regs*)+0x494>
c0019d62:	0f b6 c9             	movzx  ecx,cl
c0019d65:	ff 24 8d 70 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcd90]
c0019d6c:	89 ee                	mov    esi,ebp
c0019d6e:	eb 11                	jmp    c0019d81 <Vm::faultHandler(regs*)+0x494>
c0019d70:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019d73:	eb 0c                	jmp    c0019d81 <Vm::faultHandler(regs*)+0x494>
c0019d75:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019d78:	eb 07                	jmp    c0019d81 <Vm::faultHandler(regs*)+0x494>
c0019d7a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019d7d:	eb 02                	jmp    c0019d81 <Vm::faultHandler(regs*)+0x494>
c0019d7f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019d81:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019d84:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d89:	74 0c                	je     c0019d97 <Vm::faultHandler(regs*)+0x4aa>
c0019d8b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019d91:	0f 87 86 01 00 00    	ja     c0019f1d <Vm::faultHandler(regs*)+0x630>
c0019d97:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019d9a:	0f b7 d6             	movzx  edx,si
c0019d9d:	81 e7 00 04 00 00    	and    edi,0x400
c0019da3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019da6:	0f b7 c1             	movzx  eax,cx
c0019da9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019dae:	74 1d                	je     c0019dcd <Vm::faultHandler(regs*)+0x4e0>
c0019db0:	55                   	push   ebp
c0019db1:	55                   	push   ebp
c0019db2:	50                   	push   eax
c0019db3:	52                   	push   edx
c0019db4:	e8 e3 fa ff ff       	call   c001989c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019db9:	83 c4 10             	add    esp,0x10
c0019dbc:	89 f2                	mov    edx,esi
c0019dbe:	ef                   	out    dx,eax
c0019dbf:	85 ff                	test   edi,edi
c0019dc1:	74 05                	je     c0019dc8 <Vm::faultHandler(regs*)+0x4db>
c0019dc3:	83 e9 04             	sub    ecx,0x4
c0019dc6:	eb 21                	jmp    c0019de9 <Vm::faultHandler(regs*)+0x4fc>
c0019dc8:	83 c1 04             	add    ecx,0x4
c0019dcb:	eb 1c                	jmp    c0019de9 <Vm::faultHandler(regs*)+0x4fc>
c0019dcd:	55                   	push   ebp
c0019dce:	55                   	push   ebp
c0019dcf:	50                   	push   eax
c0019dd0:	52                   	push   edx
c0019dd1:	e8 b4 fa ff ff       	call   c001988a <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019dd6:	83 c4 10             	add    esp,0x10
c0019dd9:	89 f2                	mov    edx,esi
c0019ddb:	66 ef                	out    dx,ax
c0019ddd:	85 ff                	test   edi,edi
c0019ddf:	74 05                	je     c0019de6 <Vm::faultHandler(regs*)+0x4f9>
c0019de1:	83 e9 02             	sub    ecx,0x2
c0019de4:	eb 03                	jmp    c0019de9 <Vm::faultHandler(regs*)+0x4fc>
c0019de6:	83 c1 02             	add    ecx,0x2
c0019de9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019def:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019df2:	e9 cb 00 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019df7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019dfe:	83 ec 0c             	sub    esp,0xc
c0019e01:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e05:	50                   	push   eax
c0019e06:	e8 88 f8 ff ff       	call   c0019693 <Vm::inbv(unsigned short)>
c0019e0b:	0f b6 c0             	movzx  eax,al
c0019e0e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e11:	eb 3f                	jmp    c0019e52 <Vm::faultHandler(regs*)+0x565>
c0019e13:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e18:	74 07                	je     c0019e21 <Vm::faultHandler(regs*)+0x534>
c0019e1a:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e1e:	ed                   	in     eax,dx
c0019e1f:	eb 14                	jmp    c0019e35 <Vm::faultHandler(regs*)+0x548>
c0019e21:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019e24:	66 31 c9             	xor    cx,cx
c0019e27:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019e2a:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e2e:	66 ed                	in     ax,dx
c0019e30:	0f b7 c0             	movzx  eax,ax
c0019e33:	09 c8                	or     eax,ecx
c0019e35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e38:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e3c:	e9 84 00 00 00       	jmp    c0019ec5 <Vm::faultHandler(regs*)+0x5d8>
c0019e41:	52                   	push   edx
c0019e42:	52                   	push   edx
c0019e43:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019e47:	50                   	push   eax
c0019e48:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e4c:	50                   	push   eax
c0019e4d:	e8 47 f8 ff ff       	call   c0019699 <Vm::outbv(unsigned short, unsigned char)>
c0019e52:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e56:	eb 53                	jmp    c0019eab <Vm::faultHandler(regs*)+0x5be>
c0019e58:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e5b:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e5f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e64:	74 03                	je     c0019e69 <Vm::faultHandler(regs*)+0x57c>
c0019e66:	ef                   	out    dx,eax
c0019e67:	eb cf                	jmp    c0019e38 <Vm::faultHandler(regs*)+0x54b>
c0019e69:	66 ef                	out    dx,ax
c0019e6b:	eb cb                	jmp    c0019e38 <Vm::faultHandler(regs*)+0x54b>
c0019e6d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019e74:	83 ec 0c             	sub    esp,0xc
c0019e77:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019e7b:	50                   	push   eax
c0019e7c:	e8 12 f8 ff ff       	call   c0019693 <Vm::inbv(unsigned short)>
c0019e81:	0f b6 c0             	movzx  eax,al
c0019e84:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e87:	eb 1f                	jmp    c0019ea8 <Vm::faultHandler(regs*)+0x5bb>
c0019e89:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e8c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e91:	74 03                	je     c0019e96 <Vm::faultHandler(regs*)+0x5a9>
c0019e93:	ed                   	in     eax,dx
c0019e94:	eb 0d                	jmp    c0019ea3 <Vm::faultHandler(regs*)+0x5b6>
c0019e96:	66 ed                	in     ax,dx
c0019e98:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019e9b:	66 31 d2             	xor    dx,dx
c0019e9e:	0f b7 c0             	movzx  eax,ax
c0019ea1:	09 d0                	or     eax,edx
c0019ea3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019ea6:	eb 1a                	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019ea8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019eab:	83 c4 10             	add    esp,0x10
c0019eae:	eb 15                	jmp    c0019ec5 <Vm::faultHandler(regs*)+0x5d8>
c0019eb0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019eb3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019eb6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ebb:	74 03                	je     c0019ec0 <Vm::faultHandler(regs*)+0x5d3>
c0019ebd:	ef                   	out    dx,eax
c0019ebe:	eb 02                	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019ec0:	66 ef                	out    dx,ax
c0019ec2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ec5:	b0 01                	mov    al,0x1
c0019ec7:	eb 56                	jmp    c0019f1f <Vm::faultHandler(regs*)+0x632>
c0019ec9:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019ecd:	50                   	push   eax
c0019ece:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019ed2:	50                   	push   eax
c0019ed3:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019ed7:	50                   	push   eax
c0019ed8:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019edc:	50                   	push   eax
c0019edd:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019ee1:	50                   	push   eax
c0019ee2:	52                   	push   edx
c0019ee3:	52                   	push   edx
c0019ee4:	68 29 32 02 c0       	push   0xc0023229
c0019ee9:	e8 3b 53 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c0019eee:	83 c4 20             	add    esp,0x20
c0019ef1:	83 ec 0c             	sub    esp,0xc
c0019ef4:	6a 60                	push   0x60
c0019ef6:	e8 98 f7 ff ff       	call   c0019693 <Vm::inbv(unsigned short)>
c0019efb:	83 c4 10             	add    esp,0x10
c0019efe:	3c 1c                	cmp    al,0x1c
c0019f00:	74 04                	je     c0019f06 <Vm::faultHandler(regs*)+0x619>
c0019f02:	3c 5a                	cmp    al,0x5a
c0019f04:	75 eb                	jne    c0019ef1 <Vm::faultHandler(regs*)+0x604>
c0019f06:	3c 1c                	cmp    al,0x1c
c0019f08:	74 04                	je     c0019f0e <Vm::faultHandler(regs*)+0x621>
c0019f0a:	3c 5a                	cmp    al,0x5a
c0019f0c:	75 0f                	jne    c0019f1d <Vm::faultHandler(regs*)+0x630>
c0019f0e:	83 ec 0c             	sub    esp,0xc
c0019f11:	6a 60                	push   0x60
c0019f13:	e8 7b f7 ff ff       	call   c0019693 <Vm::inbv(unsigned short)>
c0019f18:	83 c4 10             	add    esp,0x10
c0019f1b:	eb e9                	jmp    c0019f06 <Vm::faultHandler(regs*)+0x619>
c0019f1d:	31 c0                	xor    eax,eax
c0019f1f:	83 c4 1c             	add    esp,0x1c
c0019f22:	5b                   	pop    ebx
c0019f23:	5e                   	pop    esi
c0019f24:	5f                   	pop    edi
c0019f25:	5d                   	pop    ebp
c0019f26:	c3                   	ret    
c0019f27:	90                   	nop

c0019f28 <FAT::getName()>:
c0019f28:	b8 88 32 02 c0       	mov    eax,0xc0023288
c0019f2d:	c3                   	ret    

c0019f2e <FAT::tell(void*, unsigned long long*)>:
c0019f2e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f33:	75 06                	jne    c0019f3b <FAT::tell(void*, unsigned long long*)+0xd>
c0019f35:	b8 04 00 00 00       	mov    eax,0x4
c0019f3a:	c3                   	ret    
c0019f3b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f40:	75 06                	jne    c0019f48 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019f42:	b8 04 00 00 00       	mov    eax,0x4
c0019f47:	c3                   	ret    
c0019f48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f4c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019f4f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019f52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f56:	89 01                	mov    DWORD PTR [ecx],eax
c0019f58:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f5b:	b8 00 00 00 00       	mov    eax,0x0
c0019f60:	c3                   	ret    
c0019f61:	90                   	nop

c0019f62 <FAT::stat(void*, unsigned long long*)>:
c0019f62:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f67:	75 06                	jne    c0019f6f <FAT::stat(void*, unsigned long long*)+0xd>
c0019f69:	b8 04 00 00 00       	mov    eax,0x4
c0019f6e:	c3                   	ret    
c0019f6f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f74:	75 06                	jne    c0019f7c <FAT::stat(void*, unsigned long long*)+0x1a>
c0019f76:	b8 04 00 00 00       	mov    eax,0x4
c0019f7b:	c3                   	ret    
c0019f7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f80:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019f83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019f86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f8a:	89 01                	mov    DWORD PTR [ecx],eax
c0019f8c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f8f:	b8 00 00 00 00       	mov    eax,0x0
c0019f94:	c3                   	ret    
c0019f95:	90                   	nop

c0019f96 <FAT::~FAT()>:
c0019f96:	83 ec 0c             	sub    esp,0xc
c0019f99:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c0019f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa2:	89 10                	mov    DWORD PTR [eax],edx
c0019fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	50                   	push   eax
c0019fac:	e8 a9 55 ff ff       	call   c000f55a <Filesystem::~Filesystem()>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	90                   	nop
c0019fb5:	83 c4 0c             	add    esp,0xc
c0019fb8:	c3                   	ret    
c0019fb9:	90                   	nop

c0019fba <FAT::~FAT()>:
c0019fba:	83 ec 0c             	sub    esp,0xc
c0019fbd:	83 ec 0c             	sub    esp,0xc
c0019fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fc4:	e8 cd ff ff ff       	call   c0019f96 <FAT::~FAT()>
c0019fc9:	83 c4 10             	add    esp,0x10
c0019fcc:	83 ec 08             	sub    esp,0x8
c0019fcf:	6a 08                	push   0x8
c0019fd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fd5:	e8 29 51 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0019fda:	83 c4 10             	add    esp,0x10
c0019fdd:	83 c4 0c             	add    esp,0xc
c0019fe0:	c3                   	ret    
c0019fe1:	90                   	nop

c0019fe2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fe2:	83 ec 1c             	sub    esp,0x1c
c0019fe5:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019fec:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019ff1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ff5:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c0019ffc:	83 f8 ff             	cmp    eax,0xffffffff
c0019fff:	75 34                	jne    c001a035 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001a001:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a005:	88 c2                	mov    dl,al
c001a007:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a00c:	01 d0                	add    eax,edx
c001a00e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a012:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a018:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a01c:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a023:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a028:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a02c:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a033:	eb 17                	jmp    c001a04c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001a035:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a039:	88 c2                	mov    dl,al
c001a03b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a03f:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a046:	01 d0                	add    eax,edx
c001a048:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a04c:	83 ec 04             	sub    esp,0x4
c001a04f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a053:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a057:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a05b:	50                   	push   eax
c001a05c:	e8 8a ca fe ff       	call   c0006aeb <f_getlabel>
c001a061:	83 c4 10             	add    esp,0x10
c001a064:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a068:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a06d:	75 07                	jne    c001a076 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001a06f:	b8 00 00 00 00       	mov    eax,0x0
c001a074:	eb 05                	jmp    c001a07b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001a076:	b8 01 00 00 00       	mov    eax,0x1
c001a07b:	83 c4 1c             	add    esp,0x1c
c001a07e:	c3                   	ret    
c001a07f:	90                   	nop

c001a080 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a080:	57                   	push   edi
c001a081:	83 ec 58             	sub    esp,0x58
c001a084:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a08c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a090:	b8 00 00 00 00       	mov    eax,0x0
c001a095:	b9 0f 00 00 00       	mov    ecx,0xf
c001a09a:	fc                   	cld    
c001a09b:	89 d7                	mov    edi,edx
c001a09d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a09f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0a3:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a0aa:	83 f8 ff             	cmp    eax,0xffffffff
c001a0ad:	75 34                	jne    c001a0e3 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001a0af:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0b3:	88 c2                	mov    dl,al
c001a0b5:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0ba:	01 d0                	add    eax,edx
c001a0bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0c0:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a0c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0ca:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a0d1:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0d6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a0da:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a0e1:	eb 17                	jmp    c001a0fa <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001a0e3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0e7:	88 c2                	mov    dl,al
c001a0e9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0ed:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a0f4:	01 d0                	add    eax,edx
c001a0f6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0fa:	83 ec 08             	sub    esp,0x8
c001a0fd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a101:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a105:	50                   	push   eax
c001a106:	e8 23 67 fe ff       	call   c000082e <strcat>
c001a10b:	83 c4 10             	add    esp,0x10
c001a10e:	83 ec 0c             	sub    esp,0xc
c001a111:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a115:	50                   	push   eax
c001a116:	e8 c4 cb fe ff       	call   c0006cdf <f_setlabel>
c001a11b:	83 c4 10             	add    esp,0x10
c001a11e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a122:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a127:	75 07                	jne    c001a130 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a129:	b8 00 00 00 00       	mov    eax,0x0
c001a12e:	eb 05                	jmp    c001a135 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a130:	b8 01 00 00 00       	mov    eax,0x1
c001a135:	83 c4 58             	add    esp,0x58
c001a138:	5f                   	pop    edi
c001a139:	c3                   	ret    

c001a13a <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a13a:	83 ec 2c             	sub    esp,0x2c
c001a13d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a145:	83 ec 08             	sub    esp,0x8
c001a148:	68 ac 32 02 c0       	push   0xc00232ac
c001a14d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a151:	e8 72 66 fe ff       	call   c00007c8 <strcmp>
c001a156:	83 c4 10             	add    esp,0x10
c001a159:	85 c0                	test   eax,eax
c001a15b:	0f 94 c0             	sete   al
c001a15e:	84 c0                	test   al,al
c001a160:	74 0d                	je     c001a16f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a162:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a16a:	e9 a6 00 00 00       	jmp    c001a215 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a16f:	83 ec 08             	sub    esp,0x8
c001a172:	68 9e 32 02 c0       	push   0xc002329e
c001a177:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a17b:	e8 48 66 fe ff       	call   c00007c8 <strcmp>
c001a180:	83 c4 10             	add    esp,0x10
c001a183:	85 c0                	test   eax,eax
c001a185:	0f 94 c0             	sete   al
c001a188:	84 c0                	test   al,al
c001a18a:	74 0a                	je     c001a196 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a18c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a194:	eb 7f                	jmp    c001a215 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a196:	83 ec 08             	sub    esp,0x8
c001a199:	68 a4 32 02 c0       	push   0xc00232a4
c001a19e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1a2:	e8 21 66 fe ff       	call   c00007c8 <strcmp>
c001a1a7:	83 c4 10             	add    esp,0x10
c001a1aa:	85 c0                	test   eax,eax
c001a1ac:	0f 94 c0             	sete   al
c001a1af:	84 c0                	test   al,al
c001a1b1:	74 0a                	je     c001a1bd <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a1b3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a1bb:	eb 58                	jmp    c001a215 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1bd:	83 ec 08             	sub    esp,0x8
c001a1c0:	68 6c 05 02 c0       	push   0xc002056c
c001a1c5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1c9:	e8 fa 65 fe ff       	call   c00007c8 <strcmp>
c001a1ce:	83 c4 10             	add    esp,0x10
c001a1d1:	85 c0                	test   eax,eax
c001a1d3:	0f 94 c0             	sete   al
c001a1d6:	84 c0                	test   al,al
c001a1d8:	74 0a                	je     c001a1e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a1da:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a1e2:	eb 31                	jmp    c001a215 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1e4:	83 ec 08             	sub    esp,0x8
c001a1e7:	68 aa 32 02 c0       	push   0xc00232aa
c001a1ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1f0:	e8 d3 65 fe ff       	call   c00007c8 <strcmp>
c001a1f5:	83 c4 10             	add    esp,0x10
c001a1f8:	85 c0                	test   eax,eax
c001a1fa:	0f 94 c0             	sete   al
c001a1fd:	84 c0                	test   al,al
c001a1ff:	74 0a                	je     c001a20b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a201:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a209:	eb 0a                	jmp    c001a215 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a20b:	b8 08 00 00 00       	mov    eax,0x8
c001a210:	e9 04 01 00 00       	jmp    c001a319 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a215:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a21c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a221:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a225:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a22c:	83 f8 ff             	cmp    eax,0xffffffff
c001a22f:	75 34                	jne    c001a265 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a231:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a235:	88 c2                	mov    dl,al
c001a237:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a23c:	01 d0                	add    eax,edx
c001a23e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a242:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a248:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a24c:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a253:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a258:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a25c:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a263:	eb 17                	jmp    c001a27c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a265:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a269:	88 c2                	mov    dl,al
c001a26b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a26f:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a276:	01 d0                	add    eax,edx
c001a278:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a27c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a280:	88 04 24             	mov    BYTE PTR [esp],al
c001a283:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a287:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a28b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a293:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a298:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a2a0:	83 ec 0c             	sub    esp,0xc
c001a2a3:	68 00 20 00 00       	push   0x2000
c001a2a8:	e8 4a 1d ff ff       	call   c000bff7 <malloc>
c001a2ad:	83 c4 10             	add    esp,0x10
c001a2b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2b4:	68 00 20 00 00       	push   0x2000
c001a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2c1:	50                   	push   eax
c001a2c2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a2c6:	50                   	push   eax
c001a2c7:	e8 5e ce fe ff       	call   c000712a <f_mkfs>
c001a2cc:	83 c4 10             	add    esp,0x10
c001a2cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2d8:	75 07                	jne    c001a2e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a2da:	b8 00 00 00 00       	mov    eax,0x0
c001a2df:	eb 38                	jmp    c001a319 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2e1:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a2e6:	75 17                	jne    c001a2ff <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a2e8:	83 ec 0c             	sub    esp,0xc
c001a2eb:	68 dc 32 02 c0       	push   0xc00232dc
c001a2f0:	e8 34 4f ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001a2f5:	83 c4 10             	add    esp,0x10
c001a2f8:	b8 09 00 00 00       	mov    eax,0x9
c001a2fd:	eb 1a                	jmp    c001a319 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a303:	83 ec 08             	sub    esp,0x8
c001a306:	50                   	push   eax
c001a307:	68 b0 32 02 c0       	push   0xc00232b0
c001a30c:	e8 18 4f ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001a311:	83 c4 10             	add    esp,0x10
c001a314:	b8 01 00 00 00       	mov    eax,0x1
c001a319:	83 c4 2c             	add    esp,0x2c
c001a31c:	c3                   	ret    
c001a31d:	90                   	nop

c001a31e <FAT::tryMount(LogicalDisk*, int)>:
c001a31e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a324:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a329:	83 f8 14             	cmp    eax,0x14
c001a32c:	75 17                	jne    c001a345 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a32e:	83 ec 0c             	sub    esp,0xc
c001a331:	68 c2 32 02 c0       	push   0xc00232c2
c001a336:	e8 17 b7 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	b0 00                	mov    al,0x0
c001a340:	e9 d7 01 00 00       	jmp    c001a51c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a345:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a34c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a352:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a358:	3d 00 02 00 00       	cmp    eax,0x200
c001a35d:	74 07                	je     c001a366 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a35f:	b0 00                	mov    al,0x0
c001a361:	e9 b6 01 00 00       	jmp    c001a51c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a366:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a36e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a375:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a37c:	83 f8 ff             	cmp    eax,0xffffffff
c001a37f:	74 07                	je     c001a388 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a381:	b0 01                	mov    al,0x1
c001a383:	e9 94 01 00 00       	jmp    c001a51c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a388:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a392:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a39a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a3a1:	88 c2                	mov    dl,al
c001a3a3:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a3a8:	01 d0                	add    eax,edx
c001a3aa:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a3b1:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a3b7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a3be:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a3c5:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a3ca:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a3d1:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a3d8:	83 ec 0c             	sub    esp,0xc
c001a3db:	68 54 02 00 00       	push   0x254
c001a3e0:	e8 12 1c ff ff       	call   c000bff7 <malloc>
c001a3e5:	83 c4 10             	add    esp,0x10
c001a3e8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a3ef:	83 ec 04             	sub    esp,0x4
c001a3f2:	6a 00                	push   0x0
c001a3f4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3fb:	50                   	push   eax
c001a3fc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a403:	e8 11 a9 fe ff       	call   c0004d19 <f_mount>
c001a408:	83 c4 10             	add    esp,0x10
c001a40b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a412:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a41a:	74 19                	je     c001a435 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a41c:	83 ec 0c             	sub    esp,0xc
c001a41f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a426:	e8 ec 1b ff ff       	call   c000c017 <rfree>
c001a42b:	83 c4 10             	add    esp,0x10
c001a42e:	b0 00                	mov    al,0x0
c001a430:	e9 e7 00 00 00       	jmp    c001a51c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a435:	83 ec 04             	sub    esp,0x4
c001a438:	68 00 01 00 00       	push   0x100
c001a43d:	6a 00                	push   0x0
c001a43f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a446:	50                   	push   eax
c001a447:	e8 8c 62 fe ff       	call   c00006d8 <memset>
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	83 ec 08             	sub    esp,0x8
c001a452:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a459:	50                   	push   eax
c001a45a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a461:	50                   	push   eax
c001a462:	e8 c7 63 fe ff       	call   c000082e <strcat>
c001a467:	83 c4 10             	add    esp,0x10
c001a46a:	83 ec 08             	sub    esp,0x8
c001a46d:	68 d0 32 02 c0       	push   0xc00232d0
c001a472:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a479:	50                   	push   eax
c001a47a:	e8 af 63 fe ff       	call   c000082e <strcat>
c001a47f:	83 c4 10             	add    esp,0x10
c001a482:	83 ec 04             	sub    esp,0x4
c001a485:	6a 01                	push   0x1
c001a487:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a48e:	50                   	push   eax
c001a48f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a493:	50                   	push   eax
c001a494:	e8 e2 a8 fe ff       	call   c0004d7b <f_open>
c001a499:	83 c4 10             	add    esp,0x10
c001a49c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a4a3:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a4aa:	85 c0                	test   eax,eax
c001a4ac:	74 0a                	je     c001a4b8 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a4ae:	78 2d                	js     c001a4dd <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4b0:	83 e8 04             	sub    eax,0x4
c001a4b3:	83 f8 01             	cmp    eax,0x1
c001a4b6:	77 25                	ja     c001a4dd <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4b8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a4c0:	83 ec 0c             	sub    esp,0xc
c001a4c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4c7:	50                   	push   eax
c001a4c8:	e8 00 b4 fe ff       	call   c00058cd <f_close>
c001a4cd:	83 c4 10             	add    esp,0x10
c001a4d0:	90                   	nop
c001a4d1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a4d9:	74 3a                	je     c001a515 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a4db:	eb 2d                	jmp    c001a50a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a4dd:	83 ec 0c             	sub    esp,0xc
c001a4e0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a4e7:	e8 2b 1b ff ff       	call   c000c017 <rfree>
c001a4ec:	83 c4 10             	add    esp,0x10
c001a4ef:	83 ec 04             	sub    esp,0x4
c001a4f2:	6a 00                	push   0x0
c001a4f4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a4fb:	50                   	push   eax
c001a4fc:	6a 00                	push   0x0
c001a4fe:	e8 16 a8 fe ff       	call   c0004d19 <f_mount>
c001a503:	83 c4 10             	add    esp,0x10
c001a506:	b0 00                	mov    al,0x0
c001a508:	eb 12                	jmp    c001a51c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a50a:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a50f:	40                   	inc    eax
c001a510:	a3 20 5c 02 c0       	mov    ds:0xc0025c20,eax
c001a515:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a51c:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a522:	c3                   	ret    
c001a523:	90                   	nop

c001a524 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a524:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a52a:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a532:	74 0a                	je     c001a53e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a534:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a53c:	75 0a                	jne    c001a548 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a53e:	b8 04 00 00 00       	mov    eax,0x4
c001a543:	e9 dd 00 00 00       	jmp    c001a625 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a548:	83 ec 08             	sub    esp,0x8
c001a54b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a552:	50                   	push   eax
c001a553:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a55a:	e8 26 b9 fe ff       	call   c0005e85 <f_readdir>
c001a55f:	83 c4 10             	add    esp,0x10
c001a562:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a569:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a56f:	83 ec 0c             	sub    esp,0xc
c001a572:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a579:	83 c0 1a             	add    eax,0x1a
c001a57c:	50                   	push   eax
c001a57d:	e8 73 61 fe ff       	call   c00006f5 <strlen>
c001a582:	83 c4 10             	add    esp,0x10
c001a585:	ba 00 00 00 00       	mov    edx,0x0
c001a58a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a58e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a592:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a599:	25 ff 00 00 00       	and    eax,0xff
c001a59e:	83 e0 10             	and    eax,0x10
c001a5a1:	74 07                	je     c001a5aa <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a5a3:	b8 02 00 00 00       	mov    eax,0x2
c001a5a8:	eb 05                	jmp    c001a5af <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a5aa:	b8 01 00 00 00       	mov    eax,0x1
c001a5af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5b3:	83 ec 08             	sub    esp,0x8
c001a5b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a5bd:	83 c0 1a             	add    eax,0x1a
c001a5c0:	50                   	push   eax
c001a5c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a5c5:	83 c0 10             	add    eax,0x10
c001a5c8:	50                   	push   eax
c001a5c9:	e8 a9 61 fe ff       	call   c0000777 <strcpy>
c001a5ce:	83 c4 10             	add    esp,0x10
c001a5d1:	83 ec 04             	sub    esp,0x4
c001a5d4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a5db:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5df:	50                   	push   eax
c001a5e0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a5e7:	e8 b6 60 fe ff       	call   c00006a2 <memcpy>
c001a5ec:	83 c4 10             	add    esp,0x10
c001a5ef:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a5f6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a5fc:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a603:	84 c0                	test   al,al
c001a605:	75 07                	jne    c001a60e <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a607:	b8 07 00 00 00       	mov    eax,0x7
c001a60c:	eb 17                	jmp    c001a625 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a60e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a615:	85 c0                	test   eax,eax
c001a617:	75 07                	jne    c001a620 <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a619:	b8 00 00 00 00       	mov    eax,0x0
c001a61e:	eb 05                	jmp    c001a625 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a620:	b8 01 00 00 00       	mov    eax,0x1
c001a625:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a62b:	c3                   	ret    

c001a62c <FAT::read(void*, unsigned long, void*, int*)>:
c001a62c:	83 ec 1c             	sub    esp,0x1c
c001a62f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a634:	74 07                	je     c001a63d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a636:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a63b:	75 07                	jne    c001a644 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a63d:	b8 04 00 00 00       	mov    eax,0x4
c001a642:	eb 3d                	jmp    c001a681 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a644:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a648:	50                   	push   eax
c001a649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a64d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a651:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a655:	e8 5d ab fe ff       	call   c00051b7 <f_read>
c001a65a:	83 c4 10             	add    esp,0x10
c001a65d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a661:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a665:	89 c2                	mov    edx,eax
c001a667:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a66b:	89 10                	mov    DWORD PTR [eax],edx
c001a66d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a671:	85 c0                	test   eax,eax
c001a673:	75 07                	jne    c001a67c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a675:	b8 00 00 00 00       	mov    eax,0x0
c001a67a:	eb 05                	jmp    c001a681 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a67c:	b8 01 00 00 00       	mov    eax,0x1
c001a681:	83 c4 1c             	add    esp,0x1c
c001a684:	c3                   	ret    
c001a685:	90                   	nop

c001a686 <FAT::write(void*, unsigned long, void*, int*)>:
c001a686:	83 ec 1c             	sub    esp,0x1c
c001a689:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a68e:	74 07                	je     c001a697 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a690:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a695:	75 07                	jne    c001a69e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a697:	b8 04 00 00 00       	mov    eax,0x4
c001a69c:	eb 3d                	jmp    c001a6db <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a69e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6a2:	50                   	push   eax
c001a6a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a6ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6af:	e8 83 ad fe ff       	call   c0005437 <f_write>
c001a6b4:	83 c4 10             	add    esp,0x10
c001a6b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6bf:	89 c2                	mov    edx,eax
c001a6c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6c5:	89 10                	mov    DWORD PTR [eax],edx
c001a6c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6cb:	85 c0                	test   eax,eax
c001a6cd:	75 07                	jne    c001a6d6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a6cf:	b8 00 00 00 00       	mov    eax,0x0
c001a6d4:	eb 05                	jmp    c001a6db <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a6d6:	b8 01 00 00 00       	mov    eax,0x1
c001a6db:	83 c4 1c             	add    esp,0x1c
c001a6de:	c3                   	ret    
c001a6df:	90                   	nop

c001a6e0 <FAT::close(void*)>:
c001a6e0:	83 ec 1c             	sub    esp,0x1c
c001a6e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6e8:	75 07                	jne    c001a6f1 <FAT::close(void*)+0x11>
c001a6ea:	b8 04 00 00 00       	mov    eax,0x4
c001a6ef:	eb 36                	jmp    c001a727 <FAT::close(void*)+0x47>
c001a6f1:	83 ec 0c             	sub    esp,0xc
c001a6f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6f8:	e8 d0 b1 fe ff       	call   c00058cd <f_close>
c001a6fd:	83 c4 10             	add    esp,0x10
c001a700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a704:	83 ec 0c             	sub    esp,0xc
c001a707:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a70b:	e8 f7 18 ff ff       	call   c000c007 <free>
c001a710:	83 c4 10             	add    esp,0x10
c001a713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a717:	85 c0                	test   eax,eax
c001a719:	75 07                	jne    c001a722 <FAT::close(void*)+0x42>
c001a71b:	b8 00 00 00 00       	mov    eax,0x0
c001a720:	eb 05                	jmp    c001a727 <FAT::close(void*)+0x47>
c001a722:	b8 01 00 00 00       	mov    eax,0x1
c001a727:	83 c4 1c             	add    esp,0x1c
c001a72a:	c3                   	ret    
c001a72b:	90                   	nop

c001a72c <FAT::closeDir(void*)>:
c001a72c:	83 ec 1c             	sub    esp,0x1c
c001a72f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a734:	75 07                	jne    c001a73d <FAT::closeDir(void*)+0x11>
c001a736:	b8 04 00 00 00       	mov    eax,0x4
c001a73b:	eb 36                	jmp    c001a773 <FAT::closeDir(void*)+0x47>
c001a73d:	83 ec 0c             	sub    esp,0xc
c001a740:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a744:	e8 1a b7 fe ff       	call   c0005e63 <f_closedir>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a750:	83 ec 0c             	sub    esp,0xc
c001a753:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a757:	e8 ab 18 ff ff       	call   c000c007 <free>
c001a75c:	83 c4 10             	add    esp,0x10
c001a75f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a763:	85 c0                	test   eax,eax
c001a765:	75 07                	jne    c001a76e <FAT::closeDir(void*)+0x42>
c001a767:	b8 00 00 00 00       	mov    eax,0x0
c001a76c:	eb 05                	jmp    c001a773 <FAT::closeDir(void*)+0x47>
c001a76e:	b8 01 00 00 00       	mov    eax,0x1
c001a773:	83 c4 1c             	add    esp,0x1c
c001a776:	c3                   	ret    
c001a777:	90                   	nop

c001a778 <FAT::seek(void*, unsigned long long)>:
c001a778:	83 ec 2c             	sub    esp,0x2c
c001a77b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a77f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a783:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a787:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a78b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a790:	75 07                	jne    c001a799 <FAT::seek(void*, unsigned long long)+0x21>
c001a792:	b8 04 00 00 00       	mov    eax,0x4
c001a797:	eb 2f                	jmp    c001a7c8 <FAT::seek(void*, unsigned long long)+0x50>
c001a799:	83 ec 04             	sub    esp,0x4
c001a79c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a7a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a7a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a7a8:	e8 4f b1 fe ff       	call   c00058fc <f_lseek>
c001a7ad:	83 c4 10             	add    esp,0x10
c001a7b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7b8:	85 c0                	test   eax,eax
c001a7ba:	75 07                	jne    c001a7c3 <FAT::seek(void*, unsigned long long)+0x4b>
c001a7bc:	b8 00 00 00 00       	mov    eax,0x0
c001a7c1:	eb 05                	jmp    c001a7c8 <FAT::seek(void*, unsigned long long)+0x50>
c001a7c3:	b8 01 00 00 00       	mov    eax,0x1
c001a7c8:	83 c4 2c             	add    esp,0x2c
c001a7cb:	c3                   	ret    

c001a7cc <fatWrapperReadDisk>:
c001a7cc:	83 ec 1c             	sub    esp,0x1c
c001a7cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7db:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a7e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7e6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7ea:	25 ff 00 00 00       	and    eax,0xff
c001a7ef:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a7f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7fa:	83 ec 0c             	sub    esp,0xc
c001a7fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a801:	52                   	push   edx
c001a802:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a806:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a80a:	50                   	push   eax
c001a80b:	e8 6e 80 ff ff       	call   c001287e <LogicalDisk::read(unsigned long long, int, void*)>
c001a810:	83 c4 20             	add    esp,0x20
c001a813:	83 c4 1c             	add    esp,0x1c
c001a816:	c3                   	ret    

c001a817 <fatWrapperWriteDisk>:
c001a817:	83 ec 1c             	sub    esp,0x1c
c001a81a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a81e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a822:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a826:	89 04 24             	mov    DWORD PTR [esp],eax
c001a829:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a82d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a831:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a835:	25 ff 00 00 00       	and    eax,0xff
c001a83a:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a841:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a845:	83 ec 0c             	sub    esp,0xc
c001a848:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a84c:	52                   	push   edx
c001a84d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a851:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a855:	50                   	push   eax
c001a856:	e8 8f 80 ff ff       	call   c00128ea <LogicalDisk::write(unsigned long long, int, void*)>
c001a85b:	83 c4 20             	add    esp,0x20
c001a85e:	83 c4 1c             	add    esp,0x1c
c001a861:	c3                   	ret    

c001a862 <fatWrapperIoctl>:
c001a862:	53                   	push   ebx
c001a863:	83 ec 28             	sub    esp,0x28
c001a866:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a86a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a86e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a872:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a876:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a87b:	75 35                	jne    c001a8b2 <fatWrapperIoctl+0x50>
c001a87d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a881:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a885:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a889:	25 ff 00 00 00       	and    eax,0xff
c001a88e:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a895:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a89b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a8a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8a5:	66 89 02             	mov    WORD PTR [edx],ax
c001a8a8:	b8 00 00 00 00       	mov    eax,0x0
c001a8ad:	e9 bb 00 00 00       	jmp    c001a96d <fatWrapperIoctl+0x10b>
c001a8b2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a8b7:	75 73                	jne    c001a92c <fatWrapperIoctl+0xca>
c001a8b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8c1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8c5:	25 ff 00 00 00       	and    eax,0xff
c001a8ca:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a8d1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8d7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a8dd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a8e3:	89 c8                	mov    eax,ecx
c001a8e5:	89 da                	mov    edx,ebx
c001a8e7:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a8eb:	c1 e0 0a             	shl    eax,0xa
c001a8ee:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a8f2:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a8f8:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c001a8ff:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a905:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a90b:	89 cb                	mov    ebx,ecx
c001a90d:	c1 fb 1f             	sar    ebx,0x1f
c001a910:	53                   	push   ebx
c001a911:	51                   	push   ecx
c001a912:	52                   	push   edx
c001a913:	50                   	push   eax
c001a914:	e8 03 4c 00 00       	call   c001f51c <__udivdi3>
c001a919:	83 c4 10             	add    esp,0x10
c001a91c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a920:	89 01                	mov    DWORD PTR [ecx],eax
c001a922:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a925:	b8 00 00 00 00       	mov    eax,0x0
c001a92a:	eb 41                	jmp    c001a96d <fatWrapperIoctl+0x10b>
c001a92c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a931:	75 07                	jne    c001a93a <fatWrapperIoctl+0xd8>
c001a933:	b8 00 00 00 00       	mov    eax,0x0
c001a938:	eb 33                	jmp    c001a96d <fatWrapperIoctl+0x10b>
c001a93a:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a93f:	75 19                	jne    c001a95a <fatWrapperIoctl+0xf8>
c001a941:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a945:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a949:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a94d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a953:	b8 00 00 00 00       	mov    eax,0x0
c001a958:	eb 13                	jmp    c001a96d <fatWrapperIoctl+0x10b>
c001a95a:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a95f:	75 07                	jne    c001a968 <fatWrapperIoctl+0x106>
c001a961:	b8 00 00 00 00       	mov    eax,0x0
c001a966:	eb 05                	jmp    c001a96d <fatWrapperIoctl+0x10b>
c001a968:	b8 04 00 00 00       	mov    eax,0x4
c001a96d:	83 c4 28             	add    esp,0x28
c001a970:	5b                   	pop    ebx
c001a971:	c3                   	ret    

c001a972 <FAT::FAT()>:
c001a972:	83 ec 1c             	sub    esp,0x1c
c001a975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a979:	83 ec 0c             	sub    esp,0xc
c001a97c:	50                   	push   eax
c001a97d:	e8 b4 4b ff ff       	call   c000f536 <Filesystem::Filesystem()>
c001a982:	83 c4 10             	add    esp,0x10
c001a985:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001a98a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a98e:	89 10                	mov    DWORD PTR [eax],edx
c001a990:	c7 05 20 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025c20,0x0
c001a99a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9a2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a9a7:	7f 15                	jg     c001a9be <FAT::FAT()+0x4c>
c001a9a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9ad:	c7 04 85 40 5c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda3c0],0xffffffff
c001a9b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9bc:	eb e4                	jmp    c001a9a2 <FAT::FAT()+0x30>
c001a9be:	90                   	nop
c001a9bf:	83 c4 1c             	add    esp,0x1c
c001a9c2:	c3                   	ret    
c001a9c3:	90                   	nop

c001a9c4 <FAT::fixFilepath(char*)>:
c001a9c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9c8:	8a 00                	mov    al,BYTE PTR [eax]
c001a9ca:	3c 40                	cmp    al,0x40
c001a9cc:	7e 2c                	jle    c001a9fa <FAT::fixFilepath(char*)+0x36>
c001a9ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9d2:	8a 00                	mov    al,BYTE PTR [eax]
c001a9d4:	83 e8 41             	sub    eax,0x41
c001a9d7:	88 c2                	mov    dl,al
c001a9d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9dd:	88 10                	mov    BYTE PTR [eax],dl
c001a9df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9e3:	8a 00                	mov    al,BYTE PTR [eax]
c001a9e5:	0f be c0             	movsx  eax,al
c001a9e8:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a9ef:	83 c0 30             	add    eax,0x30
c001a9f2:	88 c2                	mov    dl,al
c001a9f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9f8:	88 10                	mov    BYTE PTR [eax],dl
c001a9fa:	90                   	nop
c001a9fb:	c3                   	ret    

c001a9fc <FAT::open(char const*, void**, FileOpenMode)>:
c001a9fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa02:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa0a:	74 0a                	je     c001aa16 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001aa0c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa14:	75 0a                	jne    c001aa20 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001aa16:	b8 04 00 00 00       	mov    eax,0x4
c001aa1b:	e9 00 01 00 00       	jmp    c001ab20 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aa20:	83 ec 08             	sub    esp,0x8
c001aa23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa2e:	50                   	push   eax
c001aa2f:	e8 43 5d fe ff       	call   c0000777 <strcpy>
c001aa34:	83 c4 10             	add    esp,0x10
c001aa37:	83 ec 08             	sub    esp,0x8
c001aa3a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa3e:	50                   	push   eax
c001aa3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa46:	e8 79 ff ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001aa4b:	83 c4 10             	add    esp,0x10
c001aa4e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001aa56:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa5d:	83 e0 01             	and    eax,0x1
c001aa60:	74 08                	je     c001aa6a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001aa62:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001aa6a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa71:	83 e0 04             	and    eax,0x4
c001aa74:	74 10                	je     c001aa86 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001aa76:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001aa7e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa86:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa8d:	83 e0 02             	and    eax,0x2
c001aa90:	74 08                	je     c001aa9a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001aa92:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa9a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aaa1:	83 e0 08             	and    eax,0x8
c001aaa4:	74 08                	je     c001aaae <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001aaa6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001aaae:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aab5:	83 e0 10             	and    eax,0x10
c001aab8:	74 08                	je     c001aac2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001aaba:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001aac2:	83 ec 0c             	sub    esp,0xc
c001aac5:	68 50 02 00 00       	push   0x250
c001aaca:	e8 28 15 ff ff       	call   c000bff7 <malloc>
c001aacf:	83 c4 10             	add    esp,0x10
c001aad2:	89 c2                	mov    edx,eax
c001aad4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aadb:	89 10                	mov    DWORD PTR [eax],edx
c001aadd:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aae4:	31 d2                	xor    edx,edx
c001aae6:	88 c2                	mov    dl,al
c001aae8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aaef:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaf1:	83 ec 04             	sub    esp,0x4
c001aaf4:	52                   	push   edx
c001aaf5:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aaf9:	52                   	push   edx
c001aafa:	50                   	push   eax
c001aafb:	e8 7b a2 fe ff       	call   c0004d7b <f_open>
c001ab00:	83 c4 10             	add    esp,0x10
c001ab03:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ab0a:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ab12:	74 07                	je     c001ab1b <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001ab14:	b8 01 00 00 00       	mov    eax,0x1
c001ab19:	eb 05                	jmp    c001ab20 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001ab1b:	b8 00 00 00 00       	mov    eax,0x0
c001ab20:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab26:	c3                   	ret    
c001ab27:	90                   	nop

c001ab28 <FAT::openDir(char const*, void**)>:
c001ab28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab36:	74 0a                	je     c001ab42 <FAT::openDir(char const*, void**)+0x1a>
c001ab38:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ab40:	75 07                	jne    c001ab49 <FAT::openDir(char const*, void**)+0x21>
c001ab42:	b8 04 00 00 00       	mov    eax,0x4
c001ab47:	eb 7d                	jmp    c001abc6 <FAT::openDir(char const*, void**)+0x9e>
c001ab49:	83 ec 08             	sub    esp,0x8
c001ab4c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab53:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab57:	50                   	push   eax
c001ab58:	e8 1a 5c fe ff       	call   c0000777 <strcpy>
c001ab5d:	83 c4 10             	add    esp,0x10
c001ab60:	83 ec 08             	sub    esp,0x8
c001ab63:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab67:	50                   	push   eax
c001ab68:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab6f:	e8 50 fe ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	83 ec 0c             	sub    esp,0xc
c001ab7a:	6a 4c                	push   0x4c
c001ab7c:	e8 76 14 ff ff       	call   c000bff7 <malloc>
c001ab81:	83 c4 10             	add    esp,0x10
c001ab84:	89 c2                	mov    edx,eax
c001ab86:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab8d:	89 10                	mov    DWORD PTR [eax],edx
c001ab8f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab96:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab98:	83 ec 08             	sub    esp,0x8
c001ab9b:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ab9f:	52                   	push   edx
c001aba0:	50                   	push   eax
c001aba1:	e8 bb b1 fe ff       	call   c0005d61 <f_opendir>
c001aba6:	83 c4 10             	add    esp,0x10
c001aba9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001abb0:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001abb8:	74 07                	je     c001abc1 <FAT::openDir(char const*, void**)+0x99>
c001abba:	b8 01 00 00 00       	mov    eax,0x1
c001abbf:	eb 05                	jmp    c001abc6 <FAT::openDir(char const*, void**)+0x9e>
c001abc1:	b8 00 00 00 00       	mov    eax,0x0
c001abc6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001abcc:	c3                   	ret    
c001abcd:	90                   	nop

c001abce <FAT::stat(char const*, unsigned long long*, bool*)>:
c001abce:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001abd4:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001abdc:	75 0a                	jne    c001abe8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001abde:	b8 04 00 00 00       	mov    eax,0x4
c001abe3:	e9 cb 00 00 00       	jmp    c001acb3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abe8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001abf0:	75 0a                	jne    c001abfc <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001abf2:	b8 04 00 00 00       	mov    eax,0x4
c001abf7:	e9 b7 00 00 00       	jmp    c001acb3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abfc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ac04:	75 0a                	jne    c001ac10 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001ac06:	b8 04 00 00 00       	mov    eax,0x4
c001ac0b:	e9 a3 00 00 00       	jmp    c001acb3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac10:	83 ec 08             	sub    esp,0x8
c001ac13:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac1a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac21:	50                   	push   eax
c001ac22:	e8 50 5b fe ff       	call   c0000777 <strcpy>
c001ac27:	83 c4 10             	add    esp,0x10
c001ac2a:	83 ec 08             	sub    esp,0x8
c001ac2d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ac34:	50                   	push   eax
c001ac35:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac3c:	e8 83 fd ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001ac41:	83 c4 10             	add    esp,0x10
c001ac44:	83 ec 08             	sub    esp,0x8
c001ac47:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac4b:	50                   	push   eax
c001ac4c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac53:	50                   	push   eax
c001ac54:	e8 c7 b2 fe ff       	call   c0005f20 <f_stat>
c001ac59:	83 c4 10             	add    esp,0x10
c001ac5c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ac63:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ac6a:	85 c0                	test   eax,eax
c001ac6c:	74 07                	je     c001ac75 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ac6e:	83 f8 04             	cmp    eax,0x4
c001ac71:	74 34                	je     c001aca7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ac73:	eb 39                	jmp    c001acae <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ac75:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac79:	25 ff 00 00 00       	and    eax,0xff
c001ac7e:	83 e0 10             	and    eax,0x10
c001ac81:	0f 95 c2             	setne  dl
c001ac84:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ac8b:	88 10                	mov    BYTE PTR [eax],dl
c001ac8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac94:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ac9b:	89 01                	mov    DWORD PTR [ecx],eax
c001ac9d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aca0:	b8 00 00 00 00       	mov    eax,0x0
c001aca5:	eb 0c                	jmp    c001acb3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aca7:	b8 02 00 00 00       	mov    eax,0x2
c001acac:	eb 05                	jmp    c001acb3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001acae:	b8 01 00 00 00       	mov    eax,0x1
c001acb3:	81 c4 2c 02 00 00    	add    esp,0x22c
c001acb9:	c3                   	ret    

c001acba <FAT::unlink(char const*)>:
c001acba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001acc0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001acc8:	75 07                	jne    c001acd1 <FAT::unlink(char const*)+0x17>
c001acca:	b8 04 00 00 00       	mov    eax,0x4
c001accf:	eb 5c                	jmp    c001ad2d <FAT::unlink(char const*)+0x73>
c001acd1:	83 ec 08             	sub    esp,0x8
c001acd4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acdb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acdf:	50                   	push   eax
c001ace0:	e8 92 5a fe ff       	call   c0000777 <strcpy>
c001ace5:	83 c4 10             	add    esp,0x10
c001ace8:	83 ec 08             	sub    esp,0x8
c001aceb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acef:	50                   	push   eax
c001acf0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acf7:	e8 c8 fc ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001acfc:	83 c4 10             	add    esp,0x10
c001acff:	83 ec 0c             	sub    esp,0xc
c001ad02:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad06:	50                   	push   eax
c001ad07:	e8 83 b5 fe ff       	call   c000628f <f_unlink>
c001ad0c:	83 c4 10             	add    esp,0x10
c001ad0f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad16:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad1d:	85 c0                	test   eax,eax
c001ad1f:	75 07                	jne    c001ad28 <FAT::unlink(char const*)+0x6e>
c001ad21:	b8 00 00 00 00       	mov    eax,0x0
c001ad26:	eb 05                	jmp    c001ad2d <FAT::unlink(char const*)+0x73>
c001ad28:	b8 01 00 00 00       	mov    eax,0x1
c001ad2d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad33:	c3                   	ret    

c001ad34 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ad34:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad3a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ad41:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ad48:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ad4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad50:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ad58:	75 0a                	jne    c001ad64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ad5a:	b8 04 00 00 00       	mov    eax,0x4
c001ad5f:	e9 43 01 00 00       	jmp    c001aea7 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad64:	83 ec 08             	sub    esp,0x8
c001ad67:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad6e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad72:	50                   	push   eax
c001ad73:	e8 ff 59 fe ff       	call   c0000777 <strcpy>
c001ad78:	83 c4 10             	add    esp,0x10
c001ad7b:	83 ec 08             	sub    esp,0x8
c001ad7e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad82:	50                   	push   eax
c001ad83:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad8a:	e8 35 fc ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ad9a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ada2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ada6:	25 ff 00 00 00       	and    eax,0xff
c001adab:	83 e0 01             	and    eax,0x1
c001adae:	74 08                	je     c001adb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001adb0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001adb8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adbc:	25 ff 00 00 00       	and    eax,0xff
c001adc1:	83 e0 02             	and    eax,0x2
c001adc4:	74 08                	je     c001adce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001adc6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001adce:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001add2:	25 ff 00 00 00       	and    eax,0xff
c001add7:	83 e0 04             	and    eax,0x4
c001adda:	74 08                	je     c001ade4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001addc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001ade4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ade8:	25 ff 00 00 00       	and    eax,0xff
c001aded:	83 e0 08             	and    eax,0x8
c001adf0:	74 08                	je     c001adfa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001adf2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001adfa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001adfe:	25 ff 00 00 00       	and    eax,0xff
c001ae03:	83 e0 01             	and    eax,0x1
c001ae06:	74 08                	je     c001ae10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001ae08:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ae10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae14:	25 ff 00 00 00       	and    eax,0xff
c001ae19:	83 e0 02             	and    eax,0x2
c001ae1c:	74 08                	je     c001ae26 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001ae1e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ae26:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae2a:	25 ff 00 00 00       	and    eax,0xff
c001ae2f:	83 e0 04             	and    eax,0x4
c001ae32:	74 08                	je     c001ae3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ae34:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ae3c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae40:	25 ff 00 00 00       	and    eax,0xff
c001ae45:	83 e0 08             	and    eax,0x8
c001ae48:	74 08                	je     c001ae52 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ae4a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ae52:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae59:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ae60:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ae67:	31 d2                	xor    edx,edx
c001ae69:	88 c2                	mov    dl,al
c001ae6b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae72:	25 ff 00 00 00       	and    eax,0xff
c001ae77:	83 ec 04             	sub    esp,0x4
c001ae7a:	52                   	push   edx
c001ae7b:	50                   	push   eax
c001ae7c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae80:	50                   	push   eax
c001ae81:	e8 a9 ba fe ff       	call   c000692f <f_chmod>
c001ae86:	83 c4 10             	add    esp,0x10
c001ae89:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ae90:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ae97:	85 c0                	test   eax,eax
c001ae99:	75 07                	jne    c001aea2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ae9b:	b8 00 00 00 00       	mov    eax,0x0
c001aea0:	eb 05                	jmp    c001aea7 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001aea2:	b8 01 00 00 00       	mov    eax,0x1
c001aea7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aead:	c3                   	ret    

c001aeae <FAT::rename(char const*, char const*)>:
c001aeae:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aeb4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001aebc:	74 0a                	je     c001aec8 <FAT::rename(char const*, char const*)+0x1a>
c001aebe:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aec6:	75 0a                	jne    c001aed2 <FAT::rename(char const*, char const*)+0x24>
c001aec8:	b8 04 00 00 00       	mov    eax,0x4
c001aecd:	e9 98 00 00 00       	jmp    c001af6a <FAT::rename(char const*, char const*)+0xbc>
c001aed2:	83 ec 08             	sub    esp,0x8
c001aed5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aedc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aee3:	50                   	push   eax
c001aee4:	e8 8e 58 fe ff       	call   c0000777 <strcpy>
c001aee9:	83 c4 10             	add    esp,0x10
c001aeec:	83 ec 08             	sub    esp,0x8
c001aeef:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aef6:	50                   	push   eax
c001aef7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aefe:	e8 c1 fa ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001af03:	83 c4 10             	add    esp,0x10
c001af06:	83 ec 08             	sub    esp,0x8
c001af09:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001af10:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af14:	50                   	push   eax
c001af15:	e8 5d 58 fe ff       	call   c0000777 <strcpy>
c001af1a:	83 c4 10             	add    esp,0x10
c001af1d:	83 ec 08             	sub    esp,0x8
c001af20:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af24:	50                   	push   eax
c001af25:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001af2c:	e8 93 fa ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001af31:	83 c4 10             	add    esp,0x10
c001af34:	83 ec 08             	sub    esp,0x8
c001af37:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af3b:	50                   	push   eax
c001af3c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001af43:	50                   	push   eax
c001af44:	e8 f3 b6 fe ff       	call   c000663c <f_rename>
c001af49:	83 c4 10             	add    esp,0x10
c001af4c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001af53:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001af5a:	85 c0                	test   eax,eax
c001af5c:	75 07                	jne    c001af65 <FAT::rename(char const*, char const*)+0xb7>
c001af5e:	b8 00 00 00 00       	mov    eax,0x0
c001af63:	eb 05                	jmp    c001af6a <FAT::rename(char const*, char const*)+0xbc>
c001af65:	b8 01 00 00 00       	mov    eax,0x1
c001af6a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af70:	c3                   	ret    
c001af71:	90                   	nop

c001af72 <FAT::mkdir(char const*)>:
c001af72:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001af78:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001af80:	75 07                	jne    c001af89 <FAT::mkdir(char const*)+0x17>
c001af82:	b8 04 00 00 00       	mov    eax,0x4
c001af87:	eb 5c                	jmp    c001afe5 <FAT::mkdir(char const*)+0x73>
c001af89:	83 ec 08             	sub    esp,0x8
c001af8c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af93:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af97:	50                   	push   eax
c001af98:	e8 da 57 fe ff       	call   c0000777 <strcpy>
c001af9d:	83 c4 10             	add    esp,0x10
c001afa0:	83 ec 08             	sub    esp,0x8
c001afa3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001afa7:	50                   	push   eax
c001afa8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001afaf:	e8 10 fa ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001afb4:	83 c4 10             	add    esp,0x10
c001afb7:	83 ec 0c             	sub    esp,0xc
c001afba:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afbe:	50                   	push   eax
c001afbf:	e8 4c b4 fe ff       	call   c0006410 <f_mkdir>
c001afc4:	83 c4 10             	add    esp,0x10
c001afc7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001afce:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001afd5:	85 c0                	test   eax,eax
c001afd7:	75 07                	jne    c001afe0 <FAT::mkdir(char const*)+0x6e>
c001afd9:	b8 00 00 00 00       	mov    eax,0x0
c001afde:	eb 05                	jmp    c001afe5 <FAT::mkdir(char const*)+0x73>
c001afe0:	b8 01 00 00 00       	mov    eax,0x1
c001afe5:	81 c4 1c 01 00 00    	add    esp,0x11c
c001afeb:	c3                   	ret    

c001afec <FAT::exists(char const*)>:
c001afec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aff2:	83 ec 08             	sub    esp,0x8
c001aff5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001affc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b000:	50                   	push   eax
c001b001:	e8 71 57 fe ff       	call   c0000777 <strcpy>
c001b006:	83 c4 10             	add    esp,0x10
c001b009:	83 ec 08             	sub    esp,0x8
c001b00c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b010:	50                   	push   eax
c001b011:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b018:	e8 a7 f9 ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001b01d:	83 c4 10             	add    esp,0x10
c001b020:	83 ec 08             	sub    esp,0x8
c001b023:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b02a:	50                   	push   eax
c001b02b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b02f:	50                   	push   eax
c001b030:	e8 eb ae fe ff       	call   c0005f20 <f_stat>
c001b035:	83 c4 10             	add    esp,0x10
c001b038:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b03f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b046:	85 c0                	test   eax,eax
c001b048:	75 04                	jne    c001b04e <FAT::exists(char const*)+0x62>
c001b04a:	b0 01                	mov    al,0x1
c001b04c:	eb 02                	jmp    c001b050 <FAT::exists(char const*)+0x64>
c001b04e:	b0 00                	mov    al,0x0
c001b050:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b056:	c3                   	ret    
c001b057:	90                   	nop

c001b058 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b058:	b8 08 00 00 00       	mov    eax,0x8
c001b05d:	c3                   	ret    

c001b05e <ISO9660::seek(void*, unsigned long long)>:
c001b05e:	53                   	push   ebx
c001b05f:	b8 04 00 00 00       	mov    eax,0x4
c001b064:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b068:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b06c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b070:	85 d2                	test   edx,edx
c001b072:	74 17                	je     c001b08b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b074:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b077:	89 c8                	mov    eax,ecx
c001b079:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b07c:	b8 01 00 00 00       	mov    eax,0x1
c001b081:	73 08                	jae    c001b08b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b083:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b086:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b089:	31 c0                	xor    eax,eax
c001b08b:	5b                   	pop    ebx
c001b08c:	c3                   	ret    
c001b08d:	90                   	nop

c001b08e <ISO9660::tell(void*, unsigned long long*)>:
c001b08e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b096:	85 d2                	test   edx,edx
c001b098:	74 12                	je     c001b0ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b09a:	85 c0                	test   eax,eax
c001b09c:	74 0e                	je     c001b0ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b09e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b0a1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b0a4:	89 10                	mov    DWORD PTR [eax],edx
c001b0a6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0a9:	31 c0                	xor    eax,eax
c001b0ab:	c3                   	ret    
c001b0ac:	b8 04 00 00 00       	mov    eax,0x4
c001b0b1:	c3                   	ret    

c001b0b2 <ISO9660::getName()>:
c001b0b2:	b8 68 33 02 c0       	mov    eax,0xc0023368
c001b0b7:	c3                   	ret    

c001b0b8 <ISO9660::stat(void*, unsigned long long*)>:
c001b0b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b0bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0c0:	85 d2                	test   edx,edx
c001b0c2:	74 12                	je     c001b0d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0c4:	85 c0                	test   eax,eax
c001b0c6:	74 0e                	je     c001b0d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0c8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b0cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b0ce:	89 10                	mov    DWORD PTR [eax],edx
c001b0d0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0d3:	31 c0                	xor    eax,eax
c001b0d5:	c3                   	ret    
c001b0d6:	b8 04 00 00 00       	mov    eax,0x4
c001b0db:	c3                   	ret    

c001b0dc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b0dc:	b8 01 00 00 00       	mov    eax,0x1
c001b0e1:	c3                   	ret    

c001b0e2 <ISO9660::unlink(char const*)>:
c001b0e2:	b8 01 00 00 00       	mov    eax,0x1
c001b0e7:	c3                   	ret    

c001b0e8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b0e8:	b8 01 00 00 00       	mov    eax,0x1
c001b0ed:	c3                   	ret    

c001b0ee <ISO9660::rename(char const*, char const*)>:
c001b0ee:	b8 01 00 00 00       	mov    eax,0x1
c001b0f3:	c3                   	ret    

c001b0f4 <ISO9660::mkdir(char const*)>:
c001b0f4:	b8 01 00 00 00       	mov    eax,0x1
c001b0f9:	c3                   	ret    

c001b0fa <ISO9660::close(void*)>:
c001b0fa:	83 ec 0c             	sub    esp,0xc
c001b0fd:	b8 04 00 00 00       	mov    eax,0x4
c001b102:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b106:	85 d2                	test   edx,edx
c001b108:	74 0e                	je     c001b118 <ISO9660::close(void*)+0x1e>
c001b10a:	83 ec 0c             	sub    esp,0xc
c001b10d:	52                   	push   edx
c001b10e:	e8 f4 0e ff ff       	call   c000c007 <free>
c001b113:	83 c4 10             	add    esp,0x10
c001b116:	31 c0                	xor    eax,eax
c001b118:	83 c4 0c             	add    esp,0xc
c001b11b:	c3                   	ret    

c001b11c <ISO9660::closeDir(void*)>:
c001b11c:	83 ec 0c             	sub    esp,0xc
c001b11f:	b8 04 00 00 00       	mov    eax,0x4
c001b124:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b128:	85 d2                	test   edx,edx
c001b12a:	74 0e                	je     c001b13a <ISO9660::closeDir(void*)+0x1e>
c001b12c:	83 ec 0c             	sub    esp,0xc
c001b12f:	52                   	push   edx
c001b130:	e8 d2 0e ff ff       	call   c000c007 <free>
c001b135:	83 c4 10             	add    esp,0x10
c001b138:	31 c0                	xor    eax,eax
c001b13a:	83 c4 0c             	add    esp,0xc
c001b13d:	c3                   	ret    

c001b13e <ISO9660::~ISO9660()>:
c001b13e:	83 ec 0c             	sub    esp,0xc
c001b141:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001b146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b14a:	89 10                	mov    DWORD PTR [eax],edx
c001b14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b150:	83 ec 0c             	sub    esp,0xc
c001b153:	50                   	push   eax
c001b154:	e8 01 44 ff ff       	call   c000f55a <Filesystem::~Filesystem()>
c001b159:	83 c4 10             	add    esp,0x10
c001b15c:	90                   	nop
c001b15d:	83 c4 0c             	add    esp,0xc
c001b160:	c3                   	ret    
c001b161:	90                   	nop

c001b162 <ISO9660::~ISO9660()>:
c001b162:	83 ec 0c             	sub    esp,0xc
c001b165:	83 ec 0c             	sub    esp,0xc
c001b168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b16c:	e8 cd ff ff ff       	call   c001b13e <ISO9660::~ISO9660()>
c001b171:	83 c4 10             	add    esp,0x10
c001b174:	83 ec 08             	sub    esp,0x8
c001b177:	6a 08                	push   0x8
c001b179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b17d:	e8 81 3f ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001b182:	83 c4 10             	add    esp,0x10
c001b185:	83 c4 0c             	add    esp,0xc
c001b188:	c3                   	ret    

c001b189 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b189:	55                   	push   ebp
c001b18a:	31 c9                	xor    ecx,ecx
c001b18c:	57                   	push   edi
c001b18d:	56                   	push   esi
c001b18e:	53                   	push   ebx
c001b18f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b193:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b197:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b19b:	89 eb                	mov    ebx,ebp
c001b19d:	39 ce                	cmp    esi,ecx
c001b19f:	7e 17                	jle    c001b1b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b1a1:	31 d2                	xor    edx,edx
c001b1a3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b1a7:	7d 13                	jge    c001b1bc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b1a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b1ad:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b1b0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b1b3:	75 0d                	jne    c001b1c2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b1b5:	42                   	inc    edx
c001b1b6:	eb eb                	jmp    c001b1a3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b1b8:	31 c0                	xor    eax,eax
c001b1ba:	eb 0a                	jmp    c001b1c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1bc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b1c0:	eb 04                	jmp    c001b1c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1c2:	41                   	inc    ecx
c001b1c3:	43                   	inc    ebx
c001b1c4:	eb d7                	jmp    c001b19d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b1c6:	5b                   	pop    ebx
c001b1c7:	5e                   	pop    esi
c001b1c8:	5f                   	pop    edi
c001b1c9:	5d                   	pop    ebp
c001b1ca:	c3                   	ret    

c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1cb:	56                   	push   esi
c001b1cc:	53                   	push   ebx
c001b1cd:	52                   	push   edx
c001b1ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1da:	39 0d 20 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d20,ecx
c001b1e0:	75 08                	jne    c001b1ea <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b1e2:	38 05 c8 41 02 c0    	cmp    BYTE PTR ds:0xc00241c8,al
c001b1e8:	74 2b                	je     c001b215 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b1ea:	83 ec 0c             	sub    esp,0xc
c001b1ed:	31 db                	xor    ebx,ebx
c001b1ef:	a2 c8 41 02 c0       	mov    ds:0xc00241c8,al
c001b1f4:	89 0d 20 5d 02 c0    	mov    DWORD PTR ds:0xc0025d20,ecx
c001b1fa:	68 40 5d 02 c0       	push   0xc0025d40
c001b1ff:	6a 01                	push   0x1
c001b201:	53                   	push   ebx
c001b202:	0f be c0             	movsx  eax,al
c001b205:	51                   	push   ecx
c001b206:	ff 34 85 9c 4c 02 c0 	push   DWORD PTR [eax*4-0x3ffdb364]
c001b20d:	e8 6c 76 ff ff       	call   c001287e <LogicalDisk::read(unsigned long long, int, void*)>
c001b212:	83 c4 20             	add    esp,0x20
c001b215:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b21d:	c7 44 24 14 40 5d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025d40
c001b225:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b229:	58                   	pop    eax
c001b22a:	5b                   	pop    ebx
c001b22b:	5e                   	pop    esi
c001b22c:	e9 71 54 fe ff       	jmp    c00006a2 <memcpy>
c001b231:	90                   	nop

c001b232 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b232:	81 ec 10 08 00 00    	sub    esp,0x810
c001b238:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b23f:	83 c0 41             	add    eax,0x41
c001b242:	0f be c0             	movsx  eax,al
c001b245:	50                   	push   eax
c001b246:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b24a:	50                   	push   eax
c001b24b:	6a 10                	push   0x10
c001b24d:	e8 79 ff ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b252:	83 c4 10             	add    esp,0x10
c001b255:	31 c0                	xor    eax,eax
c001b257:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b25c:	75 1d                	jne    c001b27b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b25e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b263:	75 16                	jne    c001b27b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b265:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b26a:	75 0f                	jne    c001b27b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b26c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b271:	75 08                	jne    c001b27b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b273:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b278:	0f 94 c0             	sete   al
c001b27b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b281:	c3                   	ret    

c001b282 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b282:	55                   	push   ebp
c001b283:	57                   	push   edi
c001b284:	56                   	push   esi
c001b285:	53                   	push   ebx
c001b286:	81 ec 34 08 00 00    	sub    esp,0x834
c001b28c:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b293:	55                   	push   ebp
c001b294:	68 83 33 02 c0       	push   0xc0023383
c001b299:	e8 8b 3f ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001b29e:	83 c4 10             	add    esp,0x10
c001b2a1:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b2a9:	0f 84 06 02 00 00    	je     c001b4b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2af:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b2b7:	0f 84 f8 01 00 00    	je     c001b4b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2bd:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b2c4:	b8 01 00 00 00       	mov    eax,0x1
c001b2c9:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b2cd:	0f 85 e7 01 00 00    	jne    c001b4ba <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b2d3:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b2d6:	31 d2                	xor    edx,edx
c001b2d8:	89 e9                	mov    ecx,ebp
c001b2da:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b2dd:	01 f1                	add    ecx,esi
c001b2df:	89 d3                	mov    ebx,edx
c001b2e1:	11 fb                	adc    ebx,edi
c001b2e3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2e7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2eb:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b2f2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b2f5:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b2f8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b2fc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b300:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b304:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b308:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b30c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b310:	72 19                	jb     c001b32b <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b312:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b31a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b31e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b321:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b325:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b329:	eb 13                	jmp    c001b33e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b32b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b32f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b333:	29 f0                	sub    eax,esi
c001b335:	19 fa                	sbb    edx,edi
c001b337:	89 04 24             	mov    DWORD PTR [esp],eax
c001b33a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b33e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b345:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b348:	8b 00                	mov    eax,DWORD PTR [eax]
c001b34a:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b34e:	c1 e0 0b             	shl    eax,0xb
c001b351:	53                   	push   ebx
c001b352:	01 c6                	add    esi,eax
c001b354:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b35b:	11 d7                	adc    edi,edx
c001b35d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b361:	50                   	push   eax
c001b362:	89 fa                	mov    edx,edi
c001b364:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b368:	50                   	push   eax
c001b369:	89 f0                	mov    eax,esi
c001b36b:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b36f:	50                   	push   eax
c001b370:	e8 56 fe ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b375:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b37c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b380:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b384:	83 c4 10             	add    esp,0x10
c001b387:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b38a:	b8 00 08 00 00       	mov    eax,0x800
c001b38f:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b395:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b399:	29 d0                	sub    eax,edx
c001b39b:	39 c1                	cmp    ecx,eax
c001b39d:	83 db 00             	sbb    ebx,0x0
c001b3a0:	7d 19                	jge    c001b3bb <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b3a2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b3a7:	75 16                	jne    c001b3bf <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b3a9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b3b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3b6:	e9 f6 00 00 00       	jmp    c001b4b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b3bb:	89 c5                	mov    ebp,eax
c001b3bd:	eb 03                	jmp    c001b3c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b3bf:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b3c2:	51                   	push   ecx
c001b3c3:	55                   	push   ebp
c001b3c4:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b3c8:	50                   	push   eax
c001b3c9:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b3d0:	e8 cd 52 fe ff       	call   c00006a2 <memcpy>
c001b3d5:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b3dc:	01 e8                	add    eax,ebp
c001b3de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3e6:	89 e8                	mov    eax,ebp
c001b3e8:	99                   	cdq    
c001b3e9:	01 ee                	add    esi,ebp
c001b3eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3ef:	11 d7                	adc    edi,edx
c001b3f1:	29 e9                	sub    ecx,ebp
c001b3f3:	19 d3                	sbb    ebx,edx
c001b3f5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b3f9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b405:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b408:	b8 00 00 00 00       	mov    eax,0x0
c001b40d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b411:	7d 3f                	jge    c001b452 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b413:	52                   	push   edx
c001b414:	89 fa                	mov    edx,edi
c001b416:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b41d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b421:	50                   	push   eax
c001b422:	89 f0                	mov    eax,esi
c001b424:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b428:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b42c:	50                   	push   eax
c001b42d:	e8 99 fd ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b432:	81 c6 00 08 00 00    	add    esi,0x800
c001b438:	83 d7 00             	adc    edi,0x0
c001b43b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b443:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b44b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b450:	eb ab                	jmp    c001b3fd <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b456:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b459:	74 34                	je     c001b48f <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b45b:	50                   	push   eax
c001b45c:	89 fa                	mov    edx,edi
c001b45e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b465:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b469:	50                   	push   eax
c001b46a:	89 f0                	mov    eax,esi
c001b46c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b470:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b474:	55                   	push   ebp
c001b475:	50                   	push   eax
c001b476:	e8 50 fd ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b47b:	83 c4 0c             	add    esp,0xc
c001b47e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b482:	55                   	push   ebp
c001b483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b487:	e8 16 52 fe ff       	call   c00006a2 <memcpy>
c001b48c:	83 c4 10             	add    esp,0x10
c001b48f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b496:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b49a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b49e:	89 38                	mov    DWORD PTR [eax],edi
c001b4a0:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b4a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4ab:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b4ae:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b4b1:	31 c0                	xor    eax,eax
c001b4b3:	eb 05                	jmp    c001b4ba <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b4b5:	b8 04 00 00 00       	mov    eax,0x4
c001b4ba:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b4c0:	5b                   	pop    ebx
c001b4c1:	5e                   	pop    esi
c001b4c2:	5f                   	pop    edi
c001b4c3:	5d                   	pop    ebp
c001b4c4:	c3                   	ret    
c001b4c5:	90                   	nop

c001b4c6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b4c6:	55                   	push   ebp
c001b4c7:	57                   	push   edi
c001b4c8:	56                   	push   esi
c001b4c9:	53                   	push   ebx
c001b4ca:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b4d0:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b4d7:	85 f6                	test   esi,esi
c001b4d9:	0f 84 62 02 00 00    	je     c001b741 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4df:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b4e7:	0f 84 54 02 00 00    	je     c001b741 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4ed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b4f0:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b4f3:	75 0a                	jne    c001b4ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b4f5:	b8 07 00 00 00       	mov    eax,0x7
c001b4fa:	e9 47 02 00 00       	jmp    c001b746 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b4ff:	50                   	push   eax
c001b500:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b504:	50                   	push   eax
c001b505:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b50c:	53                   	push   ebx
c001b50d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b50f:	c1 e0 0b             	shl    eax,0xb
c001b512:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b515:	c1 e8 0b             	shr    eax,0xb
c001b518:	50                   	push   eax
c001b519:	e8 ad fc ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b51e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	89 c1                	mov    ecx,eax
c001b526:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b529:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b52f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b532:	84 db                	test   bl,bl
c001b534:	0f 85 90 00 00 00    	jne    c001b5ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b53a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b540:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b546:	29 c7                	sub    edi,eax
c001b548:	89 fb                	mov    ebx,edi
c001b54a:	c1 fb 1f             	sar    ebx,0x1f
c001b54d:	01 f8                	add    eax,edi
c001b54f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b553:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b556:	11 da                	adc    edx,ebx
c001b558:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b55b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b55e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b562:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b565:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b568:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b56b:	89 d8                	mov    eax,ebx
c001b56d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b571:	ba 00 00 00 00       	mov    edx,0x0
c001b576:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b57a:	b8 00 00 00 00       	mov    eax,0x0
c001b57f:	73 0b                	jae    c001b58c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b581:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b584:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b588:	29 f8                	sub    eax,edi
c001b58a:	19 da                	sbb    edx,ebx
c001b58c:	89 d3                	mov    ebx,edx
c001b58e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b591:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b594:	09 c3                	or     ebx,eax
c001b596:	0f 84 59 ff ff ff    	je     c001b4f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b59c:	55                   	push   ebp
c001b59d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b5a1:	50                   	push   eax
c001b5a2:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b5a9:	53                   	push   ebx
c001b5aa:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5ac:	c1 e0 0b             	shl    eax,0xb
c001b5af:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b5b3:	c1 e8 0b             	shr    eax,0xb
c001b5b6:	50                   	push   eax
c001b5b7:	e8 0f fc ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b5bc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5bf:	83 c4 10             	add    esp,0x10
c001b5c2:	25 ff 07 00 00       	and    eax,0x7ff
c001b5c7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b5ca:	57                   	push   edi
c001b5cb:	6a 28                	push   0x28
c001b5cd:	6a 00                	push   0x0
c001b5cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5d3:	50                   	push   eax
c001b5d4:	e8 ff 50 fe ff       	call   c00006d8 <memset>
c001b5d9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b5dc:	31 d2                	xor    edx,edx
c001b5de:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b5e4:	89 f8                	mov    eax,edi
c001b5e6:	83 c0 21             	add    eax,0x21
c001b5e9:	83 d2 00             	adc    edx,0x0
c001b5ec:	89 c7                	mov    edi,eax
c001b5ee:	89 d5                	mov    ebp,edx
c001b5f0:	83 c4 10             	add    esp,0x10
c001b5f3:	31 c9                	xor    ecx,ecx
c001b5f5:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b5fc:	83 f9 28             	cmp    ecx,0x28
c001b5ff:	0f 94 c2             	sete   dl
c001b602:	88 04 24             	mov    BYTE PTR [esp],al
c001b605:	88 d0                	mov    al,dl
c001b607:	ba ff 07 00 00       	mov    edx,0x7ff
c001b60c:	39 fa                	cmp    edx,edi
c001b60e:	ba 00 00 00 00       	mov    edx,0x0
c001b613:	19 ea                	sbb    edx,ebp
c001b615:	0f 92 c2             	setb   dl
c001b618:	09 c2                	or     edx,eax
c001b61a:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b61e:	0f 94 c0             	sete   al
c001b621:	08 d0                	or     al,dl
c001b623:	75 16                	jne    c001b63b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b625:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b629:	74 10                	je     c001b63b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b62b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b62e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b632:	41                   	inc    ecx
c001b633:	83 c7 01             	add    edi,0x1
c001b636:	83 d5 00             	adc    ebp,0x0
c001b639:	eb ba                	jmp    c001b5f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b63b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b642:	83 ec 0c             	sub    esp,0xc
c001b645:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b649:	57                   	push   edi
c001b64a:	e8 a6 50 fe ff       	call   c00006f5 <strlen>
c001b64f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b653:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b656:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b65d:	25 ff 07 00 00       	and    eax,0x7ff
c001b662:	01 c8                	add    eax,ecx
c001b664:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b66c:	5a                   	pop    edx
c001b66d:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b674:	59                   	pop    ecx
c001b675:	0f 95 c0             	setne  al
c001b678:	0f b6 c0             	movzx  eax,al
c001b67b:	40                   	inc    eax
c001b67c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b680:	57                   	push   edi
c001b681:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b685:	50                   	push   eax
c001b686:	e8 ec 50 fe ff       	call   c0000777 <strcpy>
c001b68b:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b68f:	83 c4 10             	add    esp,0x10
c001b692:	84 c0                	test   al,al
c001b694:	75 21                	jne    c001b6b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b696:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b69e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6a6:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6ae:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b6b5:	eb 28                	jmp    c001b6df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6b7:	fe c8                	dec    al
c001b6b9:	75 24                	jne    c001b6df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6bb:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b6c3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6cb:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6d3:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b6da:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b6df:	50                   	push   eax
c001b6e0:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b6e7:	0f b6 fb             	movzx  edi,bl
c001b6ea:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6ee:	31 db                	xor    ebx,ebx
c001b6f0:	50                   	push   eax
c001b6f1:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b6f8:	e8 a5 4f fe ff       	call   c00006a2 <memcpy>
c001b6fd:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b704:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b70a:	89 f9                	mov    ecx,edi
c001b70c:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b70f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b712:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b715:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b718:	83 c4 10             	add    esp,0x10
c001b71b:	39 c7                	cmp    edi,eax
c001b71d:	89 df                	mov    edi,ebx
c001b71f:	19 d7                	sbb    edi,edx
c001b721:	72 10                	jb     c001b733 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b723:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b72a:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b731:	eb 0a                	jmp    c001b73d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b733:	29 c8                	sub    eax,ecx
c001b735:	19 da                	sbb    edx,ebx
c001b737:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b73a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b73d:	31 c0                	xor    eax,eax
c001b73f:	eb 05                	jmp    c001b746 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b741:	b8 04 00 00 00       	mov    eax,0x4
c001b746:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b74c:	5b                   	pop    ebx
c001b74d:	5e                   	pop    esi
c001b74e:	5f                   	pop    edi
c001b74f:	5d                   	pop    ebp
c001b750:	c3                   	ret    

c001b751 <readRoot(unsigned int*, unsigned int*, char)>:
c001b751:	81 ec 40 08 00 00    	sub    esp,0x840
c001b757:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b75f:	50                   	push   eax
c001b760:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b764:	50                   	push   eax
c001b765:	6a 10                	push   0x10
c001b767:	e8 5f fa ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b76c:	83 c4 0c             	add    esp,0xc
c001b76f:	6a 22                	push   0x22
c001b771:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b778:	50                   	push   eax
c001b779:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b77d:	50                   	push   eax
c001b77e:	e8 1f 4f fe ff       	call   c00006a2 <memcpy>
c001b783:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b78a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b78e:	89 10                	mov    DWORD PTR [eax],edx
c001b790:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b797:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b79b:	89 10                	mov    DWORD PTR [eax],edx
c001b79d:	b0 01                	mov    al,0x1
c001b79f:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b7a5:	c3                   	ret    

c001b7a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b7a6:	55                   	push   ebp
c001b7a7:	57                   	push   edi
c001b7a8:	56                   	push   esi
c001b7a9:	53                   	push   ebx
c001b7aa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7b0:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b7b7:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b7be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7c2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b7c6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7ca:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b7ce:	75 03                	jne    c001b7d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7d0:	83 c3 02             	add    ebx,0x2
c001b7d3:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b7d6:	75 03                	jne    c001b7db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b7d8:	43                   	inc    ebx
c001b7d9:	eb f8                	jmp    c001b7d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7db:	51                   	push   ecx
c001b7dc:	68 00 01 00 00       	push   0x100
c001b7e1:	6a 00                	push   0x0
c001b7e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7e7:	50                   	push   eax
c001b7e8:	e8 eb 4e fe ff       	call   c00006d8 <memset>
c001b7ed:	83 c4 10             	add    esp,0x10
c001b7f0:	31 d2                	xor    edx,edx
c001b7f2:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b7f5:	84 c0                	test   al,al
c001b7f7:	74 21                	je     c001b81a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b7f9:	3c 2f                	cmp    al,0x2f
c001b7fb:	75 0b                	jne    c001b808 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b7fd:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b801:	bd 01 00 00 00       	mov    ebp,0x1
c001b806:	eb 14                	jmp    c001b81c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b808:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b80b:	80 f9 19             	cmp    cl,0x19
c001b80e:	77 03                	ja     c001b813 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b810:	83 e8 20             	sub    eax,0x20
c001b813:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b817:	42                   	inc    edx
c001b818:	eb d8                	jmp    c001b7f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b81a:	31 ed                	xor    ebp,ebp
c001b81c:	83 ec 0c             	sub    esp,0xc
c001b81f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b826:	e8 cc 07 ff ff       	call   c000bff7 <malloc>
c001b82b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b832:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b838:	89 c6                	mov    esi,eax
c001b83a:	c1 ef 0b             	shr    edi,0xb
c001b83d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b844:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b848:	83 c4 10             	add    esp,0x10
c001b84b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b850:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b854:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b85b:	74 28                	je     c001b885 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b85d:	52                   	push   edx
c001b85e:	57                   	push   edi
c001b85f:	50                   	push   eax
c001b860:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b864:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b86b:	e8 5b f9 ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b870:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b874:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b87b:	05 00 08 00 00       	add    eax,0x800
c001b880:	83 c4 10             	add    esp,0x10
c001b883:	eb cb                	jmp    c001b850 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b885:	83 ec 0c             	sub    esp,0xc
c001b888:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b88c:	57                   	push   edi
c001b88d:	e8 63 4e fe ff       	call   c00006f5 <strlen>
c001b892:	50                   	push   eax
c001b893:	57                   	push   edi
c001b894:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b89b:	56                   	push   esi
c001b89c:	e8 e8 f8 ff ff       	call   c001b189 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b8a1:	83 c4 20             	add    esp,0x20
c001b8a4:	85 c0                	test   eax,eax
c001b8a6:	75 13                	jne    c001b8bb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b8a8:	83 ec 0c             	sub    esp,0xc
c001b8ab:	56                   	push   esi
c001b8ac:	e8 56 07 ff ff       	call   c000c007 <free>
c001b8b1:	83 c4 10             	add    esp,0x10
c001b8b4:	31 c0                	xor    eax,eax
c001b8b6:	e9 b3 00 00 00       	jmp    c001b96e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b8bb:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b8bf:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b8c3:	c1 e7 08             	shl    edi,0x8
c001b8c6:	c1 e2 10             	shl    edx,0x10
c001b8c9:	09 d7                	or     edi,edx
c001b8cb:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b8cf:	09 d7                	or     edi,edx
c001b8d1:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b8d5:	c1 e2 18             	shl    edx,0x18
c001b8d8:	09 d7                	or     edi,edx
c001b8da:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b8de:	89 d1                	mov    ecx,edx
c001b8e0:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b8e4:	c1 e1 08             	shl    ecx,0x8
c001b8e7:	c1 e2 10             	shl    edx,0x10
c001b8ea:	09 ca                	or     edx,ecx
c001b8ec:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b8f0:	09 ca                	or     edx,ecx
c001b8f2:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b8f6:	c1 e1 18             	shl    ecx,0x18
c001b8f9:	09 ca                	or     edx,ecx
c001b8fb:	89 e9                	mov    ecx,ebp
c001b8fd:	84 c9                	test   cl,cl
c001b8ff:	74 3c                	je     c001b93d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b901:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b905:	83 ec 0c             	sub    esp,0xc
c001b908:	56                   	push   esi
c001b909:	e8 f9 06 ff ff       	call   c000c007 <free>
c001b90e:	83 c4 0c             	add    esp,0xc
c001b911:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b918:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b91d:	50                   	push   eax
c001b91e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b925:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b92c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b930:	52                   	push   edx
c001b931:	57                   	push   edi
c001b932:	53                   	push   ebx
c001b933:	e8 6e fe ff ff       	call   c001b7a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b938:	83 c4 20             	add    esp,0x20
c001b93b:	eb 31                	jmp    c001b96e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b93d:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b944:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b947:	d0 e8                	shr    al,1
c001b949:	83 ec 0c             	sub    esp,0xc
c001b94c:	89 3b                	mov    DWORD PTR [ebx],edi
c001b94e:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b955:	83 e0 01             	and    eax,0x1
c001b958:	89 13                	mov    DWORD PTR [ebx],edx
c001b95a:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b961:	89 03                	mov    DWORD PTR [ebx],eax
c001b963:	56                   	push   esi
c001b964:	e8 9e 06 ff ff       	call   c000c007 <free>
c001b969:	83 c4 10             	add    esp,0x10
c001b96c:	b0 01                	mov    al,0x1
c001b96e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b974:	5b                   	pop    ebx
c001b975:	5e                   	pop    esi
c001b976:	5f                   	pop    edi
c001b977:	5d                   	pop    ebp
c001b978:	c3                   	ret    

c001b979 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b979:	55                   	push   ebp
c001b97a:	57                   	push   edi
c001b97b:	56                   	push   esi
c001b97c:	53                   	push   ebx
c001b97d:	83 ec 20             	sub    esp,0x20
c001b980:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b984:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b988:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b98d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b991:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b999:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b9a1:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b9a7:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b9ad:	57                   	push   edi
c001b9ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9b2:	50                   	push   eax
c001b9b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9b7:	50                   	push   eax
c001b9b8:	e8 94 fd ff ff       	call   c001b751 <readRoot(unsigned int*, unsigned int*, char)>
c001b9bd:	5a                   	pop    edx
c001b9be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b9c2:	e8 2e 4d fe ff       	call   c00006f5 <strlen>
c001b9c7:	83 c4 10             	add    esp,0x10
c001b9ca:	83 f8 03             	cmp    eax,0x3
c001b9cd:	77 17                	ja     c001b9e6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b9cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9d3:	89 03                	mov    DWORD PTR [ebx],eax
c001b9d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9d9:	89 06                	mov    DWORD PTR [esi],eax
c001b9db:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b9e2:	b0 01                	mov    al,0x1
c001b9e4:	eb 19                	jmp    c001b9ff <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b9e6:	50                   	push   eax
c001b9e7:	55                   	push   ebp
c001b9e8:	57                   	push   edi
c001b9e9:	56                   	push   esi
c001b9ea:	53                   	push   ebx
c001b9eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b9f7:	e8 aa fd ff ff       	call   c001b7a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b9fc:	83 c4 20             	add    esp,0x20
c001b9ff:	83 c4 1c             	add    esp,0x1c
c001ba02:	5b                   	pop    ebx
c001ba03:	5e                   	pop    esi
c001ba04:	5f                   	pop    edi
c001ba05:	5d                   	pop    ebp
c001ba06:	c3                   	ret    
c001ba07:	90                   	nop

c001ba08 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ba08:	57                   	push   edi
c001ba09:	56                   	push   esi
c001ba0a:	53                   	push   ebx
c001ba0b:	83 ec 10             	sub    esp,0x10
c001ba0e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ba12:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba16:	85 f6                	test   esi,esi
c001ba18:	74 7b                	je     c001ba95 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba1a:	85 ff                	test   edi,edi
c001ba1c:	74 77                	je     c001ba95 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba1e:	83 ec 0c             	sub    esp,0xc
c001ba21:	6a 1c                	push   0x1c
c001ba23:	e8 cf 05 ff ff       	call   c000bff7 <malloc>
c001ba28:	89 07                	mov    DWORD PTR [edi],eax
c001ba2a:	89 c3                	mov    ebx,eax
c001ba2c:	58                   	pop    eax
c001ba2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba31:	50                   	push   eax
c001ba32:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba35:	50                   	push   eax
c001ba36:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba3a:	50                   	push   eax
c001ba3b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba3f:	50                   	push   eax
c001ba40:	56                   	push   esi
c001ba41:	e8 33 ff ff ff       	call   c001b979 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba46:	83 c4 20             	add    esp,0x20
c001ba49:	84 c0                	test   al,al
c001ba4b:	74 07                	je     c001ba54 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ba4d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba52:	74 0b                	je     c001ba5f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ba54:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba58:	b8 01 00 00 00       	mov    eax,0x1
c001ba5d:	eb 3b                	jmp    c001ba9a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba63:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ba67:	89 03                	mov    DWORD PTR [ebx],eax
c001ba69:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ba70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba74:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ba7b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba82:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ba85:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ba8c:	8a 06                	mov    al,BYTE PTR [esi]
c001ba8e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ba91:	31 c0                	xor    eax,eax
c001ba93:	eb 05                	jmp    c001ba9a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba95:	b8 04 00 00 00       	mov    eax,0x4
c001ba9a:	83 c4 10             	add    esp,0x10
c001ba9d:	5b                   	pop    ebx
c001ba9e:	5e                   	pop    esi
c001ba9f:	5f                   	pop    edi
c001baa0:	c3                   	ret    
c001baa1:	90                   	nop

c001baa2 <ISO9660::exists(char const*)>:
c001baa2:	83 ec 28             	sub    esp,0x28
c001baa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001baa9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001baad:	52                   	push   edx
c001baae:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001bab1:	52                   	push   edx
c001bab2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001bab6:	52                   	push   edx
c001bab7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001babb:	52                   	push   edx
c001babc:	50                   	push   eax
c001babd:	e8 b7 fe ff ff       	call   c001b979 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bac2:	83 c4 3c             	add    esp,0x3c
c001bac5:	c3                   	ret    

c001bac6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bac6:	56                   	push   esi
c001bac7:	53                   	push   ebx
c001bac8:	83 ec 14             	sub    esp,0x14
c001bacb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bacf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bad3:	85 db                	test   ebx,ebx
c001bad5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bad9:	0f 94 c2             	sete   dl
c001badc:	85 f6                	test   esi,esi
c001bade:	0f 94 c0             	sete   al
c001bae1:	08 c2                	or     dl,al
c001bae3:	75 68                	jne    c001bb4d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bae5:	85 c9                	test   ecx,ecx
c001bae7:	74 64                	je     c001bb4d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bae9:	83 ec 0c             	sub    esp,0xc
c001baec:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001baef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001baf5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bafc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb00:	50                   	push   eax
c001bb01:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001bb04:	50                   	push   eax
c001bb05:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb09:	50                   	push   eax
c001bb0a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb0e:	50                   	push   eax
c001bb0f:	51                   	push   ecx
c001bb10:	e8 64 fe ff ff       	call   c001b979 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb15:	83 c4 20             	add    esp,0x20
c001bb18:	ba 01 00 00 00       	mov    edx,0x1
c001bb1d:	84 c0                	test   al,al
c001bb1f:	74 31                	je     c001bb52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb25:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb2c:	89 03                	mov    DWORD PTR [ebx],eax
c001bb2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb32:	85 c0                	test   eax,eax
c001bb34:	ba 00 00 00 00       	mov    edx,0x0
c001bb39:	0f 95 06             	setne  BYTE PTR [esi]
c001bb3c:	74 14                	je     c001bb52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb3e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bb44:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb4b:	eb 05                	jmp    c001bb52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb4d:	ba 04 00 00 00       	mov    edx,0x4
c001bb52:	83 c4 14             	add    esp,0x14
c001bb55:	89 d0                	mov    eax,edx
c001bb57:	5b                   	pop    ebx
c001bb58:	5e                   	pop    esi
c001bb59:	c3                   	ret    

c001bb5a <ISO9660::openDir(char const*, void**)>:
c001bb5a:	57                   	push   edi
c001bb5b:	56                   	push   esi
c001bb5c:	53                   	push   ebx
c001bb5d:	83 ec 10             	sub    esp,0x10
c001bb60:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bb64:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb68:	85 f6                	test   esi,esi
c001bb6a:	0f 84 95 00 00 00    	je     c001bc05 <ISO9660::openDir(char const*, void**)+0xab>
c001bb70:	85 ff                	test   edi,edi
c001bb72:	0f 84 8d 00 00 00    	je     c001bc05 <ISO9660::openDir(char const*, void**)+0xab>
c001bb78:	83 ec 0c             	sub    esp,0xc
c001bb7b:	6a 1c                	push   0x1c
c001bb7d:	e8 75 04 ff ff       	call   c000bff7 <malloc>
c001bb82:	89 07                	mov    DWORD PTR [edi],eax
c001bb84:	89 c3                	mov    ebx,eax
c001bb86:	59                   	pop    ecx
c001bb87:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb8b:	50                   	push   eax
c001bb8c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001bb8f:	50                   	push   eax
c001bb90:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb94:	50                   	push   eax
c001bb95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb99:	50                   	push   eax
c001bb9a:	56                   	push   esi
c001bb9b:	e8 d9 fd ff ff       	call   c001b979 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bba0:	83 c4 20             	add    esp,0x20
c001bba3:	84 c0                	test   al,al
c001bba5:	74 07                	je     c001bbae <ISO9660::openDir(char const*, void**)+0x54>
c001bba7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bbac:	75 21                	jne    c001bbcf <ISO9660::openDir(char const*, void**)+0x75>
c001bbae:	52                   	push   edx
c001bbaf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bbb3:	0f b6 c0             	movzx  eax,al
c001bbb6:	50                   	push   eax
c001bbb7:	68 96 33 02 c0       	push   0xc0023396
c001bbbc:	e8 68 36 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001bbc1:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bbc5:	83 c4 10             	add    esp,0x10
c001bbc8:	b8 01 00 00 00       	mov    eax,0x1
c001bbcd:	eb 3b                	jmp    c001bc0a <ISO9660::openDir(char const*, void**)+0xb0>
c001bbcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbd3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bbd7:	89 03                	mov    DWORD PTR [ebx],eax
c001bbd9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bbe0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbe4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bbeb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bbf2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bbf5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bbfc:	8a 06                	mov    al,BYTE PTR [esi]
c001bbfe:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bc01:	31 c0                	xor    eax,eax
c001bc03:	eb 05                	jmp    c001bc0a <ISO9660::openDir(char const*, void**)+0xb0>
c001bc05:	b8 04 00 00 00       	mov    eax,0x4
c001bc0a:	83 c4 10             	add    esp,0x10
c001bc0d:	5b                   	pop    ebx
c001bc0e:	5e                   	pop    esi
c001bc0f:	5f                   	pop    edi
c001bc10:	c3                   	ret    
c001bc11:	90                   	nop

c001bc12 <ISO9660::ISO9660()>:
c001bc12:	83 ec 0c             	sub    esp,0xc
c001bc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc19:	83 ec 0c             	sub    esp,0xc
c001bc1c:	50                   	push   eax
c001bc1d:	e8 14 39 ff ff       	call   c000f536 <Filesystem::Filesystem()>
c001bc22:	83 c4 10             	add    esp,0x10
c001bc25:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001bc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2e:	89 10                	mov    DWORD PTR [eax],edx
c001bc30:	90                   	nop
c001bc31:	83 c4 0c             	add    esp,0xc
c001bc34:	c3                   	ret    
c001bc35:	90                   	nop

c001bc36 <SoundChannel::~SoundChannel()>:
c001bc36:	83 ec 0c             	sub    esp,0xc
c001bc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc40:	83 ec 0c             	sub    esp,0xc
c001bc43:	50                   	push   eax
c001bc44:	e8 be 03 ff ff       	call   c000c007 <free>
c001bc49:	83 c4 10             	add    esp,0x10
c001bc4c:	90                   	nop
c001bc4d:	83 c4 0c             	add    esp,0xc
c001bc50:	c3                   	ret    
c001bc51:	90                   	nop

c001bc52 <SoundChannel::setSpeed(float)>:
c001bc52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc56:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bc5a:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bc5d:	c3                   	ret    

c001bc5e <SoundChannel::getSpeed()>:
c001bc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc62:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bc65:	c3                   	ret    

c001bc66 <SoundChannel::setVolume(int)>:
c001bc66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc6a:	83 f8 64             	cmp    eax,0x64
c001bc6d:	7e 05                	jle    c001bc74 <SoundChannel::setVolume(int)+0xe>
c001bc6f:	b8 64 00 00 00       	mov    eax,0x64
c001bc74:	85 c0                	test   eax,eax
c001bc76:	79 02                	jns    c001bc7a <SoundChannel::setVolume(int)+0x14>
c001bc78:	31 c0                	xor    eax,eax
c001bc7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc7e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bc81:	c3                   	ret    

c001bc82 <SoundChannel::getVolume()>:
c001bc82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc86:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bc89:	c3                   	ret    

c001bc8a <SoundChannel::pause()>:
c001bc8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc8e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bc92:	c3                   	ret    
c001bc93:	90                   	nop

c001bc94 <SoundChannel::SoundChannel(int, int, int, int)>:
c001bc94:	83 ec 1c             	sub    esp,0x1c
c001bc97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc9b:	e8 ea ff ff ff       	call   c001bc8a <SoundChannel::pause()>
c001bca0:	83 c4 04             	add    esp,0x4
c001bca3:	6a 50                	push   0x50
c001bca5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bca9:	e8 b8 ff ff ff       	call   c001bc66 <SoundChannel::setVolume(int)>
c001bcae:	83 c4 08             	add    esp,0x8
c001bcb1:	d9 e8                	fld1   
c001bcb3:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bcb7:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bcba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bcbe:	e8 8f ff ff ff       	call   c001bc52 <SoundChannel::setSpeed(float)>
c001bcc3:	83 c4 08             	add    esp,0x8
c001bcc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcce:	89 10                	mov    DWORD PTR [eax],edx
c001bcd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcd8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bcdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcdf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bce3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bce6:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bceb:	75 26                	jne    c001bd13 <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcf1:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcfa:	0f af c2             	imul   eax,edx
c001bcfd:	89 c2                	mov    edx,eax
c001bcff:	c1 fa 1f             	sar    edx,0x1f
c001bd02:	83 e2 03             	and    edx,0x3
c001bd05:	01 d0                	add    eax,edx
c001bd07:	c1 f8 02             	sar    eax,0x2
c001bd0a:	05 a0 0f 00 00       	add    eax,0xfa0
c001bd0f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd17:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bd1b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bd1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd22:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bd29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd2d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bd34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd38:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd3b:	c1 e0 02             	shl    eax,0x2
c001bd3e:	83 ec 0c             	sub    esp,0xc
c001bd41:	50                   	push   eax
c001bd42:	e8 b0 02 ff ff       	call   c000bff7 <malloc>
c001bd47:	83 c4 10             	add    esp,0x10
c001bd4a:	89 c2                	mov    edx,eax
c001bd4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd50:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bd53:	83 ec 04             	sub    esp,0x4
c001bd56:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bd5a:	50                   	push   eax
c001bd5b:	6a 01                	push   0x1
c001bd5d:	6a 04                	push   0x4
c001bd5f:	e8 9c cb fe ff       	call   c0008900 <src_new>
c001bd64:	83 c4 10             	add    esp,0x10
c001bd67:	89 c2                	mov    edx,eax
c001bd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd6d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd74:	85 c0                	test   eax,eax
c001bd76:	74 10                	je     c001bd88 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bd78:	83 ec 0c             	sub    esp,0xc
c001bd7b:	68 18 34 02 c0       	push   0xc0023418
c001bd80:	e8 cd 9c ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001bd85:	83 c4 10             	add    esp,0x10
c001bd88:	90                   	nop
c001bd89:	83 c4 1c             	add    esp,0x1c
c001bd8c:	c3                   	ret    
c001bd8d:	90                   	nop

c001bd8e <SoundChannel::play()>:
c001bd8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd92:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bd96:	c3                   	ret    
c001bd97:	90                   	nop

c001bd98 <SoundChannel::paused()>:
c001bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bd9f:	c3                   	ret    

c001bda0 <SoundChannel::getSampleRate()>:
c001bda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bda6:	c3                   	ret    
c001bda7:	90                   	nop

c001bda8 <SoundChannel::getBits()>:
c001bda8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bdaf:	c3                   	ret    

c001bdb0 <SoundChannel::getBufferUsed()>:
c001bdb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdb4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bdb7:	c3                   	ret    

c001bdb8 <SoundChannel::getBufferSize()>:
c001bdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdbc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bdbf:	c3                   	ret    

c001bdc0 <SoundChannel::unbuffer(float*, int, int)>:
c001bdc0:	53                   	push   ebx
c001bdc1:	83 ec 40             	sub    esp,0x40
c001bdc4:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bdc8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bdd0:	db 03                	fild   DWORD PTR [ebx]
c001bdd2:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bdd6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bdd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bddd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bde0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bde4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bde8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bdec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bdf4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdf8:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bdfb:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bdff:	50                   	push   eax
c001be00:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001be03:	e8 b2 c7 fe ff       	call   c00085ba <src_process>
c001be08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001be0c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001be0f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001be12:	83 c4 0c             	add    esp,0xc
c001be15:	29 d0                	sub    eax,edx
c001be17:	c1 e0 02             	shl    eax,0x2
c001be1a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001be1d:	50                   	push   eax
c001be1e:	8d 04 91             	lea    eax,[ecx+edx*4]
c001be21:	50                   	push   eax
c001be22:	51                   	push   ecx
c001be23:	e8 42 48 fe ff       	call   c000066a <memmove>
c001be28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be2c:	83 c4 48             	add    esp,0x48
c001be2f:	5b                   	pop    ebx
c001be30:	c3                   	ret    
c001be31:	90                   	nop

c001be32 <SoundChannel::buffer8(unsigned char*, int)>:
c001be32:	53                   	push   ebx
c001be33:	31 c0                	xor    eax,eax
c001be35:	83 ec 08             	sub    esp,0x8
c001be38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be3c:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001be3f:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001be42:	74 35                	je     c001be79 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be44:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001be48:	7d 2f                	jge    c001be79 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001be4e:	d9 05 34 34 02 c0    	fld    DWORD PTR ds:0xc0023434
c001be54:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001be58:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001be5d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001be60:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001be64:	40                   	inc    eax
c001be65:	8d 59 01             	lea    ebx,[ecx+0x1]
c001be68:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001be6b:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001be6e:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001be71:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be74:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001be77:	eb c9                	jmp    c001be42 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001be79:	83 c4 08             	add    esp,0x8
c001be7c:	5b                   	pop    ebx
c001be7d:	c3                   	ret    

c001be7e <SoundDevice::SoundDevice(char const*)>:
c001be7e:	83 ec 1c             	sub    esp,0x1c
c001be81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be85:	83 ec 08             	sub    esp,0x8
c001be88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be8c:	50                   	push   eax
c001be8d:	e8 9c 49 ff ff       	call   c001082e <Device::Device(char const*)>
c001be92:	83 c4 10             	add    esp,0x10
c001be95:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001be9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be9e:	89 10                	mov    DWORD PTR [eax],edx
c001bea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bea4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001beae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beb2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bebc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bec4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bec9:	7f 19                	jg     c001bee4 <SoundDevice::SoundDevice(char const*)+0x66>
c001becb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001becf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bed3:	83 c2 54             	add    edx,0x54
c001bed6:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bede:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bee2:	eb e0                	jmp    c001bec4 <SoundDevice::SoundDevice(char const*)+0x46>
c001bee4:	90                   	nop
c001bee5:	83 c4 1c             	add    esp,0x1c
c001bee8:	c3                   	ret    
c001bee9:	90                   	nop

c001beea <SoundDevice::~SoundDevice()>:
c001beea:	53                   	push   ebx
c001beeb:	83 ec 18             	sub    esp,0x18
c001beee:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001bef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bef7:	89 10                	mov    DWORD PTR [eax],edx
c001bef9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bf01:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bf06:	7f 46                	jg     c001bf4e <SoundDevice::~SoundDevice()+0x64>
c001bf08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf10:	83 c2 54             	add    edx,0x54
c001bf13:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bf17:	85 c0                	test   eax,eax
c001bf19:	74 2d                	je     c001bf48 <SoundDevice::~SoundDevice()+0x5e>
c001bf1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf23:	83 c2 54             	add    edx,0x54
c001bf26:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bf2a:	85 db                	test   ebx,ebx
c001bf2c:	74 1a                	je     c001bf48 <SoundDevice::~SoundDevice()+0x5e>
c001bf2e:	83 ec 0c             	sub    esp,0xc
c001bf31:	53                   	push   ebx
c001bf32:	e8 ff fc ff ff       	call   c001bc36 <SoundChannel::~SoundChannel()>
c001bf37:	83 c4 10             	add    esp,0x10
c001bf3a:	83 ec 08             	sub    esp,0x8
c001bf3d:	6a 2c                	push   0x2c
c001bf3f:	53                   	push   ebx
c001bf40:	e8 be 31 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001bf45:	83 c4 10             	add    esp,0x10
c001bf48:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bf4c:	eb b3                	jmp    c001bf01 <SoundDevice::~SoundDevice()+0x17>
c001bf4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf52:	83 ec 0c             	sub    esp,0xc
c001bf55:	50                   	push   eax
c001bf56:	e8 89 45 ff ff       	call   c00104e4 <Device::~Device()>
c001bf5b:	83 c4 10             	add    esp,0x10
c001bf5e:	90                   	nop
c001bf5f:	83 c4 18             	add    esp,0x18
c001bf62:	5b                   	pop    ebx
c001bf63:	c3                   	ret    

c001bf64 <SoundDevice::~SoundDevice()>:
c001bf64:	83 ec 0c             	sub    esp,0xc
c001bf67:	83 ec 0c             	sub    esp,0xc
c001bf6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf6e:	e8 77 ff ff ff       	call   c001beea <SoundDevice::~SoundDevice()>
c001bf73:	83 c4 10             	add    esp,0x10
c001bf76:	83 ec 08             	sub    esp,0x8
c001bf79:	68 e4 01 00 00       	push   0x1e4
c001bf7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf82:	e8 7c 31 ff ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001bf87:	83 c4 10             	add    esp,0x10
c001bf8a:	83 c4 0c             	add    esp,0xc
c001bf8d:	c3                   	ret    

c001bf8e <SoundDevice::getFreeChannelNum()>:
c001bf8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf92:	31 c0                	xor    eax,eax
c001bf94:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bf9c:	74 09                	je     c001bfa7 <SoundDevice::getFreeChannelNum()+0x19>
c001bf9e:	40                   	inc    eax
c001bf9f:	83 f8 20             	cmp    eax,0x20
c001bfa2:	75 f0                	jne    c001bf94 <SoundDevice::getFreeChannelNum()+0x6>
c001bfa4:	83 c8 ff             	or     eax,0xffffffff
c001bfa7:	c3                   	ret    

c001bfa8 <SoundDevice::addChannel(SoundChannel*)>:
c001bfa8:	56                   	push   esi
c001bfa9:	53                   	push   ebx
c001bfaa:	51                   	push   ecx
c001bfab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfaf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bfb3:	53                   	push   ebx
c001bfb4:	e8 d5 ff ff ff       	call   c001bf8e <SoundDevice::getFreeChannelNum()>
c001bfb9:	5a                   	pop    edx
c001bfba:	83 f8 ff             	cmp    eax,0xffffffff
c001bfbd:	74 51                	je     c001c010 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfbf:	85 f6                	test   esi,esi
c001bfc1:	74 4d                	je     c001c010 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfc3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bfca:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bfd1:	75 30                	jne    c001c003 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bfd3:	83 ec 0c             	sub    esp,0xc
c001bfd6:	56                   	push   esi
c001bfd7:	e8 c4 fd ff ff       	call   c001bda0 <SoundChannel::getSampleRate()>
c001bfdc:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bfe2:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfe5:	e8 be fd ff ff       	call   c001bda8 <SoundChannel::getBits()>
c001bfea:	83 c4 0c             	add    esp,0xc
c001bfed:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bff3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bff5:	50                   	push   eax
c001bff6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bffc:	53                   	push   ebx
c001bffd:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001c000:	83 c4 10             	add    esp,0x10
c001c003:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001c009:	b8 01 00 00 00       	mov    eax,0x1
c001c00e:	eb 03                	jmp    c001c013 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001c010:	83 c8 ff             	or     eax,0xffffffff
c001c013:	5a                   	pop    edx
c001c014:	5b                   	pop    ebx
c001c015:	5e                   	pop    esi
c001c016:	c3                   	ret    
c001c017:	90                   	nop

c001c018 <SoundDevice::removeChannel(int)>:
c001c018:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c01c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c020:	83 fa 1f             	cmp    edx,0x1f
c001c023:	77 23                	ja     c001c048 <SoundDevice::removeChannel(int)+0x30>
c001c025:	8d 14 90             	lea    edx,[eax+edx*4]
c001c028:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001c02f:	74 17                	je     c001c048 <SoundDevice::removeChannel(int)+0x30>
c001c031:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001c03b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001c041:	75 05                	jne    c001c048 <SoundDevice::removeChannel(int)+0x30>
c001c043:	8b 00                	mov    eax,DWORD PTR [eax]
c001c045:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001c048:	c3                   	ret    
c001c049:	90                   	nop

c001c04a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001c04a:	56                   	push   esi
c001c04b:	53                   	push   ebx
c001c04c:	31 db                	xor    ebx,ebx
c001c04e:	83 ec 14             	sub    esp,0x14
c001c051:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c055:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001c059:	7d 55                	jge    c001c0b0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001c05b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c05f:	d9 e8                	fld1   
c001c061:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001c064:	d8 0d 70 34 02 c0    	fmul   DWORD PTR ds:0xc0023470
c001c06a:	d8 0d 74 34 02 c0    	fmul   DWORD PTR ds:0xc0023474
c001c070:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001c074:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c078:	d8 15 78 34 02 c0    	fcom   DWORD PTR ds:0xc0023478
c001c07e:	df e0                	fnstsw ax
c001c080:	9e                   	sahf   
c001c081:	72 08                	jb     c001c08b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001c083:	dd d8                	fstp   st(0)
c001c085:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001c089:	eb 22                	jmp    c001c0ad <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c08b:	d9 ee                	fldz   
c001c08d:	d8 d9                	fcomp  st(1)
c001c08f:	df e0                	fnstsw ax
c001c091:	9e                   	sahf   
c001c092:	72 08                	jb     c001c09c <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001c094:	dd d8                	fstp   st(0)
c001c096:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001c09a:	eb 11                	jmp    c001c0ad <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c09c:	83 ec 10             	sub    esp,0x10
c001c09f:	d9 1c 24             	fstp   DWORD PTR [esp]
c001c0a2:	e8 c5 36 00 00       	call   c001f76c <lrintf>
c001c0a7:	83 c4 10             	add    esp,0x10
c001c0aa:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001c0ad:	43                   	inc    ebx
c001c0ae:	eb a5                	jmp    c001c055 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001c0b0:	83 c4 14             	add    esp,0x14
c001c0b3:	5b                   	pop    ebx
c001c0b4:	5e                   	pop    esi
c001c0b5:	c3                   	ret    

c001c0b6 <SoundDevice::getAudio(int, float*, float*)>:
c001c0b6:	55                   	push   ebp
c001c0b7:	57                   	push   edi
c001c0b8:	56                   	push   esi
c001c0b9:	53                   	push   ebx
c001c0ba:	31 db                	xor    ebx,ebx
c001c0bc:	83 ec 20             	sub    esp,0x20
c001c0bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0c3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0c7:	c1 e0 02             	shl    eax,0x2
c001c0ca:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c0ce:	50                   	push   eax
c001c0cf:	6a 00                	push   0x0
c001c0d1:	55                   	push   ebp
c001c0d2:	e8 01 46 fe ff       	call   c00006d8 <memset>
c001c0d7:	83 c4 10             	add    esp,0x10
c001c0da:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c0de:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001c0e5:	85 c0                	test   eax,eax
c001c0e7:	0f 84 8c 00 00 00    	je     c001c179 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0ed:	83 ec 0c             	sub    esp,0xc
c001c0f0:	50                   	push   eax
c001c0f1:	e8 a2 fc ff ff       	call   c001bd98 <SoundChannel::paused()>
c001c0f6:	83 c4 10             	add    esp,0x10
c001c0f9:	84 c0                	test   al,al
c001c0fb:	75 7c                	jne    c001c179 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0fd:	83 ec 0c             	sub    esp,0xc
c001c100:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c107:	e8 76 fb ff ff       	call   c001bc82 <SoundChannel::getVolume()>
c001c10c:	83 c4 10             	add    esp,0x10
c001c10f:	85 c0                	test   eax,eax
c001c111:	74 66                	je     c001c179 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c113:	83 ec 0c             	sub    esp,0xc
c001c116:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c11d:	e8 60 fb ff ff       	call   c001bc82 <SoundChannel::getVolume()>
c001c122:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c126:	d9 05 7c 34 02 c0    	fld    DWORD PTR ds:0xc002347c
c001c12c:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c130:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c134:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c138:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c13e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c142:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c149:	e8 72 fc ff ff       	call   c001bdc0 <SoundChannel::unbuffer(float*, int, int)>
c001c14e:	83 c4 20             	add    esp,0x20
c001c151:	31 d2                	xor    edx,edx
c001c153:	39 c2                	cmp    edx,eax
c001c155:	7d 1c                	jge    c001c173 <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c157:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c15b:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c15f:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c162:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c168:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c16c:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c170:	42                   	inc    edx
c001c171:	eb e0                	jmp    c001c153 <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c173:	39 c7                	cmp    edi,eax
c001c175:	7e 02                	jle    c001c179 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c177:	89 c7                	mov    edi,eax
c001c179:	43                   	inc    ebx
c001c17a:	83 fb 20             	cmp    ebx,0x20
c001c17d:	0f 85 5b ff ff ff    	jne    c001c0de <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c183:	83 c4 1c             	add    esp,0x1c
c001c186:	89 f8                	mov    eax,edi
c001c188:	5b                   	pop    ebx
c001c189:	5e                   	pop    esi
c001c18a:	5f                   	pop    edi
c001c18b:	5d                   	pop    ebp
c001c18c:	c3                   	ret    
c001c18d:	90                   	nop

c001c18e <PCI::open(int, int, void*)>:
c001c18e:	83 ec 18             	sub    esp,0x18
c001c191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c195:	8b 10                	mov    edx,DWORD PTR [eax]
c001c197:	50                   	push   eax
c001c198:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c19b:	31 c0                	xor    eax,eax
c001c19d:	83 c4 1c             	add    esp,0x1c
c001c1a0:	c3                   	ret    
c001c1a1:	90                   	nop

c001c1a2 <PCI::close(int, int, void*)>:
c001c1a2:	31 c0                	xor    eax,eax
c001c1a4:	c3                   	ret    
c001c1a5:	90                   	nop

c001c1a6 <PCI::PCI()>:
c001c1a6:	83 ec 0c             	sub    esp,0xc
c001c1a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ad:	83 ec 08             	sub    esp,0x8
c001c1b0:	68 80 34 02 c0       	push   0xc0023480
c001c1b5:	50                   	push   eax
c001c1b6:	e8 fd 3c ff ff       	call   c000feb8 <Bus::Bus(char const*)>
c001c1bb:	83 c4 10             	add    esp,0x10
c001c1be:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001c1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c7:	89 10                	mov    DWORD PTR [eax],edx
c001c1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1d3:	31 d2                	xor    edx,edx
c001c1d5:	88 c2                	mov    dl,al
c001c1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1db:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1ec:	31 d2                	xor    edx,edx
c001c1ee:	88 c2                	mov    dl,al
c001c1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c203:	8d 50 01             	lea    edx,[eax+0x1]
c001c206:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c20a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c210:	31 d2                	xor    edx,edx
c001c212:	88 c2                	mov    dl,al
c001c214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c218:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c21c:	83 c9 c0             	or     ecx,0xffffffc0
c001c21f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c223:	90                   	nop
c001c224:	83 c4 0c             	add    esp,0xc
c001c227:	c3                   	ret    

c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c228:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c22c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c231:	c1 e0 10             	shl    eax,0x10
c001c234:	89 ca                	mov    edx,ecx
c001c236:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c23c:	09 d0                	or     eax,edx
c001c23e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c243:	c1 e2 08             	shl    edx,0x8
c001c246:	09 d0                	or     eax,edx
c001c248:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c24d:	c1 e2 0b             	shl    edx,0xb
c001c250:	09 d0                	or     eax,edx
c001c252:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c257:	0d 00 00 00 80       	or     eax,0x80000000
c001c25c:	ef                   	out    dx,eax
c001c25d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c262:	ed                   	in     eax,dx
c001c263:	83 e1 02             	and    ecx,0x2
c001c266:	0f b6 c9             	movzx  ecx,cl
c001c269:	c1 e1 03             	shl    ecx,0x3
c001c26c:	d3 e8                	shr    eax,cl
c001c26e:	c3                   	ret    
c001c26f:	90                   	nop

c001c270 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c270:	6a 00                	push   0x0
c001c272:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c277:	50                   	push   eax
c001c278:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c27d:	50                   	push   eax
c001c27e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c283:	50                   	push   eax
c001c284:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c288:	e8 9b ff ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c28d:	83 c4 14             	add    esp,0x14
c001c290:	c3                   	ret    
c001c291:	90                   	nop

c001c292 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c292:	6a 0e                	push   0xe
c001c294:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c299:	50                   	push   eax
c001c29a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c29f:	50                   	push   eax
c001c2a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2a5:	50                   	push   eax
c001c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c2aa:	e8 79 ff ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2af:	83 c4 14             	add    esp,0x14
c001c2b2:	0f b6 c0             	movzx  eax,al
c001c2b5:	c3                   	ret    

c001c2b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c2b6:	55                   	push   ebp
c001c2b7:	57                   	push   edi
c001c2b8:	56                   	push   esi
c001c2b9:	53                   	push   ebx
c001c2ba:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c2bf:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c2c4:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c2c9:	6a 0a                	push   0xa
c001c2cb:	56                   	push   esi
c001c2cc:	55                   	push   ebp
c001c2cd:	57                   	push   edi
c001c2ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2d2:	e8 51 ff ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2d7:	6a 0a                	push   0xa
c001c2d9:	89 c3                	mov    ebx,eax
c001c2db:	56                   	push   esi
c001c2dc:	55                   	push   ebp
c001c2dd:	57                   	push   edi
c001c2de:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c2e2:	e8 41 ff ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2e7:	83 c4 28             	add    esp,0x28
c001c2ea:	0f b6 db             	movzx  ebx,bl
c001c2ed:	25 00 ff 00 00       	and    eax,0xff00
c001c2f2:	09 d8                	or     eax,ebx
c001c2f4:	5b                   	pop    ebx
c001c2f5:	5e                   	pop    esi
c001c2f6:	5f                   	pop    edi
c001c2f7:	5d                   	pop    ebp
c001c2f8:	c3                   	ret    
c001c2f9:	90                   	nop

c001c2fa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c2fa:	6a 08                	push   0x8
c001c2fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c301:	50                   	push   eax
c001c302:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c307:	50                   	push   eax
c001c308:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c30d:	50                   	push   eax
c001c30e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c312:	e8 11 ff ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c317:	83 c4 14             	add    esp,0x14
c001c31a:	0f b6 c4             	movzx  eax,ah
c001c31d:	c3                   	ret    

c001c31e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c31e:	6a 08                	push   0x8
c001c320:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c325:	50                   	push   eax
c001c326:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c32b:	50                   	push   eax
c001c32c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c331:	50                   	push   eax
c001c332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c336:	e8 ed fe ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c33b:	83 c4 14             	add    esp,0x14
c001c33e:	c3                   	ret    
c001c33f:	90                   	nop

c001c340 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c340:	6a 3c                	push   0x3c
c001c342:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c347:	50                   	push   eax
c001c348:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c34d:	50                   	push   eax
c001c34e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c353:	50                   	push   eax
c001c354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c358:	e8 cb fe ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c35d:	83 c4 14             	add    esp,0x14
c001c360:	c3                   	ret    
c001c361:	90                   	nop

c001c362 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c362:	6a 18                	push   0x18
c001c364:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c369:	50                   	push   eax
c001c36a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c36f:	50                   	push   eax
c001c370:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c375:	50                   	push   eax
c001c376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c37a:	e8 a9 fe ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c37f:	83 c4 14             	add    esp,0x14
c001c382:	0f b6 c4             	movzx  eax,ah
c001c385:	c3                   	ret    

c001c386 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c386:	55                   	push   ebp
c001c387:	57                   	push   edi
c001c388:	56                   	push   esi
c001c389:	53                   	push   ebx
c001c38a:	50                   	push   eax
c001c38b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c38f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c394:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c39b:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c3a0:	8d 43 12             	lea    eax,[ebx+0x12]
c001c3a3:	83 c3 10             	add    ebx,0x10
c001c3a6:	0f b6 c0             	movzx  eax,al
c001c3a9:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c3ae:	50                   	push   eax
c001c3af:	51                   	push   ecx
c001c3b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3b4:	57                   	push   edi
c001c3b5:	55                   	push   ebp
c001c3b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c3ba:	e8 69 fe ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3bf:	0f b6 db             	movzx  ebx,bl
c001c3c2:	53                   	push   ebx
c001c3c3:	89 c6                	mov    esi,eax
c001c3c5:	c1 e6 10             	shl    esi,0x10
c001c3c8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3cc:	51                   	push   ecx
c001c3cd:	57                   	push   edi
c001c3ce:	55                   	push   ebp
c001c3cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c3d3:	e8 50 fe ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3d8:	83 c4 2c             	add    esp,0x2c
c001c3db:	0f b7 c0             	movzx  eax,ax
c001c3de:	5b                   	pop    ebx
c001c3df:	09 f0                	or     eax,esi
c001c3e1:	5e                   	pop    esi
c001c3e2:	5f                   	pop    edi
c001c3e3:	5d                   	pop    ebp
c001c3e4:	c3                   	ret    
c001c3e5:	90                   	nop

c001c3e6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c3e6:	53                   	push   ebx
c001c3e7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c3ec:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c3f1:	c1 e1 10             	shl    ecx,0x10
c001c3f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3f8:	25 fc 00 00 00       	and    eax,0xfc
c001c3fd:	09 c1                	or     ecx,eax
c001c3ff:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c404:	c1 e0 08             	shl    eax,0x8
c001c407:	09 c1                	or     ecx,eax
c001c409:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c40e:	c1 e0 0b             	shl    eax,0xb
c001c411:	09 c1                	or     ecx,eax
c001c413:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c419:	89 c8                	mov    eax,ecx
c001c41b:	ef                   	out    dx,eax
c001c41c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c421:	ed                   	in     eax,dx
c001c422:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c427:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c42c:	74 0a                	je     c001c438 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c42e:	0f b7 d8             	movzx  ebx,ax
c001c431:	89 d0                	mov    eax,edx
c001c433:	c1 e0 10             	shl    eax,0x10
c001c436:	eb 05                	jmp    c001c43d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c438:	66 31 c0             	xor    ax,ax
c001c43b:	89 d3                	mov    ebx,edx
c001c43d:	09 c3                	or     ebx,eax
c001c43f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c444:	89 c8                	mov    eax,ecx
c001c446:	ef                   	out    dx,eax
c001c447:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c44c:	89 d8                	mov    eax,ebx
c001c44e:	ef                   	out    dx,eax
c001c44f:	5b                   	pop    ebx
c001c450:	c3                   	ret    
c001c451:	90                   	nop

c001c452 <PCI::checkBus(unsigned char)>:
c001c452:	56                   	push   esi
c001c453:	31 f6                	xor    esi,esi
c001c455:	53                   	push   ebx
c001c456:	51                   	push   ecx
c001c457:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001c45b:	52                   	push   edx
c001c45c:	56                   	push   esi
c001c45d:	46                   	inc    esi
c001c45e:	0f b6 c3             	movzx  eax,bl
c001c461:	50                   	push   eax
c001c462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c466:	e8 4d 03 00 00       	call   c001c7b8 <PCI::checkDevice(unsigned char, unsigned char)>
c001c46b:	83 c4 10             	add    esp,0x10
c001c46e:	83 fe 20             	cmp    esi,0x20
c001c471:	75 e8                	jne    c001c45b <PCI::checkBus(unsigned char)+0x9>
c001c473:	58                   	pop    eax
c001c474:	5b                   	pop    ebx
c001c475:	5e                   	pop    esi
c001c476:	c3                   	ret    
c001c477:	90                   	nop

c001c478 <PCI::foundDevice(PCIDeviceInfo)>:
c001c478:	55                   	push   ebp
c001c479:	57                   	push   edi
c001c47a:	56                   	push   esi
c001c47b:	53                   	push   ebx
c001c47c:	83 ec 1c             	sub    esp,0x1c
c001c47f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c483:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c489:	0f 84 51 01 00 00    	je     c001c5e0 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c48f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c493:	66 81 f9 06 04       	cmp    cx,0x406
c001c498:	75 2c                	jne    c001c4c6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c49a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c49f:	50                   	push   eax
c001c4a0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c4a5:	50                   	push   eax
c001c4a6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c4ab:	50                   	push   eax
c001c4ac:	56                   	push   esi
c001c4ad:	e8 b0 fe ff ff       	call   c001c362 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c4b2:	0f b6 c0             	movzx  eax,al
c001c4b5:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c4bd:	83 c4 2c             	add    esp,0x2c
c001c4c0:	5b                   	pop    ebx
c001c4c1:	5e                   	pop    esi
c001c4c2:	5f                   	pop    edi
c001c4c3:	5d                   	pop    ebp
c001c4c4:	eb 8c                	jmp    c001c452 <PCI::checkBus(unsigned char)>
c001c4c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4ca:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c4d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4d4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c4d8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4dc:	88 d3                	mov    bl,dl
c001c4de:	85 c0                	test   eax,eax
c001c4e0:	74 33                	je     c001c515 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c4e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4e5:	85 d2                	test   edx,edx
c001c4e7:	74 28                	je     c001c511 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4e9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4ef:	31 ef                	xor    edi,ebp
c001c4f1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4f7:	75 18                	jne    c001c511 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4fd:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c503:	75 0c                	jne    c001c511 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c505:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c50b:	0f 84 cf 00 00 00    	je     c001c5e0 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c511:	8b 00                	mov    eax,DWORD PTR [eax]
c001c513:	eb c9                	jmp    c001c4de <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c515:	66 81 f9 01 06       	cmp    cx,0x601
c001c51a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c51e:	75 18                	jne    c001c538 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c520:	83 ec 0c             	sub    esp,0xc
c001c523:	68 58 01 00 00       	push   0x158
c001c528:	e8 c7 2b ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001c52d:	59                   	pop    ecx
c001c52e:	89 c5                	mov    ebp,eax
c001c530:	5f                   	pop    edi
c001c531:	68 88 34 02 c0       	push   0xc0023488
c001c536:	eb 7d                	jmp    c001c5b5 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c538:	66 81 f9 01 01       	cmp    cx,0x101
c001c53d:	75 60                	jne    c001c59f <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c53f:	83 ec 0c             	sub    esp,0xc
c001c542:	68 70 02 00 00       	push   0x270
c001c547:	e8 a8 2b ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001c54c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c54f:	89 c5                	mov    ebp,eax
c001c551:	e8 26 03 00 00       	call   c001c87c <IDE::IDE()>
c001c556:	58                   	pop    eax
c001c557:	5a                   	pop    edx
c001c558:	55                   	push   ebp
c001c559:	56                   	push   esi
c001c55a:	e8 df 40 ff ff       	call   c001063e <Device::addChild(Device*)>
c001c55f:	83 ec 1c             	sub    esp,0x1c
c001c562:	b9 09 00 00 00       	mov    ecx,0x9
c001c567:	fc                   	cld    
c001c568:	89 e7                	mov    edi,esp
c001c56a:	89 de                	mov    esi,ebx
c001c56c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c56e:	55                   	push   ebp
c001c56f:	e8 a8 3f ff ff       	call   c001051c <Device::preOpenPCI(PCIDeviceInfo)>
c001c574:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c577:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c57b:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c583:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c58b:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c593:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c596:	83 c4 4c             	add    esp,0x4c
c001c599:	5b                   	pop    ebx
c001c59a:	5e                   	pop    esi
c001c59b:	5f                   	pop    edi
c001c59c:	5d                   	pop    ebp
c001c59d:	ff e0                	jmp    eax
c001c59f:	83 ec 0c             	sub    esp,0xc
c001c5a2:	68 58 01 00 00       	push   0x158
c001c5a7:	e8 48 2b ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001c5ac:	59                   	pop    ecx
c001c5ad:	89 c5                	mov    ebp,eax
c001c5af:	5f                   	pop    edi
c001c5b0:	68 a7 34 02 c0       	push   0xc00234a7
c001c5b5:	55                   	push   ebp
c001c5b6:	e8 6f 43 ff ff       	call   c001092a <DriverlessDevice::DriverlessDevice(char const*)>
c001c5bb:	58                   	pop    eax
c001c5bc:	5a                   	pop    edx
c001c5bd:	55                   	push   ebp
c001c5be:	56                   	push   esi
c001c5bf:	e8 7a 40 ff ff       	call   c001063e <Device::addChild(Device*)>
c001c5c4:	b9 09 00 00 00       	mov    ecx,0x9
c001c5c9:	fc                   	cld    
c001c5ca:	89 df                	mov    edi,ebx
c001c5cc:	89 de                	mov    esi,ebx
c001c5ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5d0:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c5d4:	83 c4 2c             	add    esp,0x2c
c001c5d7:	5b                   	pop    ebx
c001c5d8:	5e                   	pop    esi
c001c5d9:	5f                   	pop    edi
c001c5da:	5d                   	pop    ebp
c001c5db:	e9 3c 3f ff ff       	jmp    c001051c <Device::preOpenPCI(PCIDeviceInfo)>
c001c5e0:	83 c4 1c             	add    esp,0x1c
c001c5e3:	5b                   	pop    ebx
c001c5e4:	5e                   	pop    esi
c001c5e5:	5f                   	pop    edi
c001c5e6:	5d                   	pop    ebp
c001c5e7:	c3                   	ret    

c001c5e8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c5e8:	55                   	push   ebp
c001c5e9:	57                   	push   edi
c001c5ea:	56                   	push   esi
c001c5eb:	53                   	push   ebx
c001c5ec:	83 ec 5c             	sub    esp,0x5c
c001c5ef:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5f7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c5fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5ff:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c603:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c607:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c60c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c611:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c616:	6a 0c                	push   0xc
c001c618:	55                   	push   ebp
c001c619:	53                   	push   ebx
c001c61a:	57                   	push   edi
c001c61b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c622:	e8 01 fc ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c627:	83 c4 0c             	add    esp,0xc
c001c62a:	6a 00                	push   0x0
c001c62c:	68 c1 34 02 c0       	push   0xc00234c1
c001c631:	e8 f3 2b ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001c636:	55                   	push   ebp
c001c637:	53                   	push   ebx
c001c638:	57                   	push   edi
c001c639:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c640:	e8 71 fc ff ff       	call   c001c2b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c645:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001c64a:	83 c4 20             	add    esp,0x20
c001c64d:	55                   	push   ebp
c001c64e:	53                   	push   ebx
c001c64f:	57                   	push   edi
c001c650:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c654:	e8 e7 fc ff ff       	call   c001c340 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c659:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001c660:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c664:	55                   	push   ebp
c001c665:	53                   	push   ebx
c001c666:	57                   	push   edi
c001c667:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c66e:	e8 b5 fb ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c673:	0f b6 c4             	movzx  eax,ah
c001c676:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c67a:	83 c4 18             	add    esp,0x18
c001c67d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c681:	68 d5 34 02 c0       	push   0xc00234d5
c001c686:	e8 9e 2b ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001c68b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c68f:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c693:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001c698:	83 c4 10             	add    esp,0x10
c001c69b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c6a1:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c6a8:	74 6c                	je     c001c716 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6aa:	31 f6                	xor    esi,esi
c001c6ac:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6b2:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6b8:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c6be:	7e 56                	jle    c001c716 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6c0:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c6c3:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c6ca:	39 cb                	cmp    ebx,ecx
c001c6cc:	75 45                	jne    c001c713 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6ce:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c6d5:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c6d9:	75 38                	jne    c001c713 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6db:	83 ec 0c             	sub    esp,0xc
c001c6de:	68 e4 34 02 c0       	push   0xc00234e4
c001c6e3:	e8 41 2b ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001c6e8:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6ee:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6f4:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c6fc:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c700:	52                   	push   edx
c001c701:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c705:	53                   	push   ebx
c001c706:	68 09 35 02 c0       	push   0xc0023509
c001c70b:	e8 19 2b ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001c710:	83 c4 20             	add    esp,0x20
c001c713:	46                   	inc    esi
c001c714:	eb 96                	jmp    c001c6ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c716:	31 d2                	xor    edx,edx
c001c718:	83 ec 0c             	sub    esp,0xc
c001c71b:	55                   	push   ebp
c001c71c:	53                   	push   ebx
c001c71d:	57                   	push   edi
c001c71e:	52                   	push   edx
c001c71f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c723:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c72a:	e8 57 fc ff ff       	call   c001c386 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c72f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c733:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c737:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c73b:	42                   	inc    edx
c001c73c:	83 c4 20             	add    esp,0x20
c001c73f:	83 fa 06             	cmp    edx,0x6
c001c742:	75 d4                	jne    c001c718 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c744:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c748:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c74c:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c750:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c754:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c758:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c75c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c761:	86 e0                	xchg   al,ah
c001c763:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c768:	55                   	push   ebp
c001c769:	53                   	push   ebx
c001c76a:	57                   	push   edi
c001c76b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c76f:	e8 86 fb ff ff       	call   c001c2fa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c774:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c778:	55                   	push   ebp
c001c779:	53                   	push   ebx
c001c77a:	57                   	push   edi
c001c77b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c782:	e8 e9 fa ff ff       	call   c001c270 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c787:	83 ec 0c             	sub    esp,0xc
c001c78a:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c78f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c793:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c797:	b9 09 00 00 00       	mov    ecx,0x9
c001c79c:	fc                   	cld    
c001c79d:	89 e7                	mov    edi,esp
c001c79f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c7a1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c7a8:	e8 cb fc ff ff       	call   c001c478 <PCI::foundDevice(PCIDeviceInfo)>
c001c7ad:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c7b3:	5b                   	pop    ebx
c001c7b4:	5e                   	pop    esi
c001c7b5:	5f                   	pop    edi
c001c7b6:	5d                   	pop    ebp
c001c7b7:	c3                   	ret    

c001c7b8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c7b8:	55                   	push   ebp
c001c7b9:	57                   	push   edi
c001c7ba:	56                   	push   esi
c001c7bb:	53                   	push   ebx
c001c7bc:	83 ec 0c             	sub    esp,0xc
c001c7bf:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c7c4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c7c8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c7cd:	6a 00                	push   0x0
c001c7cf:	56                   	push   esi
c001c7d0:	57                   	push   edi
c001c7d1:	55                   	push   ebp
c001c7d2:	e8 99 fa ff ff       	call   c001c270 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7d7:	6a 00                	push   0x0
c001c7d9:	56                   	push   esi
c001c7da:	57                   	push   edi
c001c7db:	55                   	push   ebp
c001c7dc:	e8 07 fe ff ff       	call   c001c5e8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7e1:	83 c4 20             	add    esp,0x20
c001c7e4:	6a 00                	push   0x0
c001c7e6:	56                   	push   esi
c001c7e7:	57                   	push   edi
c001c7e8:	55                   	push   ebp
c001c7e9:	e8 a4 fa ff ff       	call   c001c292 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7ee:	83 c4 10             	add    esp,0x10
c001c7f1:	84 c0                	test   al,al
c001c7f3:	79 27                	jns    c001c81c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c7f5:	bb 01 00 00 00       	mov    ebx,0x1
c001c7fa:	53                   	push   ebx
c001c7fb:	56                   	push   esi
c001c7fc:	57                   	push   edi
c001c7fd:	55                   	push   ebp
c001c7fe:	e8 6d fa ff ff       	call   c001c270 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c803:	83 c4 10             	add    esp,0x10
c001c806:	66 40                	inc    ax
c001c808:	74 0c                	je     c001c816 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c80a:	53                   	push   ebx
c001c80b:	56                   	push   esi
c001c80c:	57                   	push   edi
c001c80d:	55                   	push   ebp
c001c80e:	e8 d5 fd ff ff       	call   c001c5e8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c813:	83 c4 10             	add    esp,0x10
c001c816:	43                   	inc    ebx
c001c817:	83 fb 08             	cmp    ebx,0x8
c001c81a:	75 de                	jne    c001c7fa <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c81c:	83 c4 0c             	add    esp,0xc
c001c81f:	5b                   	pop    ebx
c001c820:	5e                   	pop    esi
c001c821:	5f                   	pop    edi
c001c822:	5d                   	pop    ebp
c001c823:	c3                   	ret    

c001c824 <PCI::detect()>:
c001c824:	56                   	push   esi
c001c825:	53                   	push   ebx
c001c826:	53                   	push   ebx
c001c827:	31 db                	xor    ebx,ebx
c001c829:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c82d:	6a 00                	push   0x0
c001c82f:	6a 00                	push   0x0
c001c831:	6a 00                	push   0x0
c001c833:	56                   	push   esi
c001c834:	e8 59 fa ff ff       	call   c001c292 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c839:	83 c4 10             	add    esp,0x10
c001c83c:	a8 80                	test   al,0x80
c001c83e:	75 21                	jne    c001c861 <PCI::detect()+0x3d>
c001c840:	51                   	push   ecx
c001c841:	51                   	push   ecx
c001c842:	6a 00                	push   0x0
c001c844:	56                   	push   esi
c001c845:	e8 08 fc ff ff       	call   c001c452 <PCI::checkBus(unsigned char)>
c001c84a:	83 c4 10             	add    esp,0x10
c001c84d:	eb 24                	jmp    c001c873 <PCI::detect()+0x4f>
c001c84f:	52                   	push   edx
c001c850:	52                   	push   edx
c001c851:	53                   	push   ebx
c001c852:	43                   	inc    ebx
c001c853:	56                   	push   esi
c001c854:	e8 f9 fb ff ff       	call   c001c452 <PCI::checkBus(unsigned char)>
c001c859:	83 c4 10             	add    esp,0x10
c001c85c:	83 fb 08             	cmp    ebx,0x8
c001c85f:	74 12                	je     c001c873 <PCI::detect()+0x4f>
c001c861:	53                   	push   ebx
c001c862:	6a 00                	push   0x0
c001c864:	6a 00                	push   0x0
c001c866:	56                   	push   esi
c001c867:	e8 04 fa ff ff       	call   c001c270 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c86c:	83 c4 10             	add    esp,0x10
c001c86f:	66 40                	inc    ax
c001c871:	74 dc                	je     c001c84f <PCI::detect()+0x2b>
c001c873:	58                   	pop    eax
c001c874:	5b                   	pop    ebx
c001c875:	5e                   	pop    esi
c001c876:	c3                   	ret    
c001c877:	90                   	nop

c001c878 <IDE::close(int, int, void*)>:
c001c878:	83 c8 ff             	or     eax,0xffffffff
c001c87b:	c3                   	ret    

c001c87c <IDE::IDE()>:
c001c87c:	83 ec 0c             	sub    esp,0xc
c001c87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c883:	83 ec 08             	sub    esp,0x8
c001c886:	68 50 35 02 c0       	push   0xc0023550
c001c88b:	50                   	push   eax
c001c88c:	e8 2f 41 ff ff       	call   c00109c0 <HardDiskController::HardDiskController(char const*)>
c001c891:	83 c4 10             	add    esp,0x10
c001c894:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001c899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89d:	89 10                	mov    DWORD PTR [eax],edx
c001c89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c8aa:	90                   	nop
c001c8ab:	83 c4 0c             	add    esp,0xc
c001c8ae:	c3                   	ret    
c001c8af:	90                   	nop

c001c8b0 <IDE::prepareInterrupt(unsigned char)>:
c001c8b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8b9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c8c1:	c3                   	ret    

c001c8c2 <selectDrive(unsigned char, unsigned char)>:
c001c8c2:	c3                   	ret    
c001c8c3:	90                   	nop

c001c8c4 <IDE::getBase(unsigned char)>:
c001c8c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c8c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8cd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c8d5:	c3                   	ret    

c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c8d6:	55                   	push   ebp
c001c8d7:	57                   	push   edi
c001c8d8:	56                   	push   esi
c001c8d9:	53                   	push   ebx
c001c8da:	83 ec 1c             	sub    esp,0x1c
c001c8dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c8e5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c8e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8ed:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c8f0:	80 f9 03             	cmp    cl,0x3
c001c8f3:	77 51                	ja     c001c946 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c8f5:	0f b6 f2             	movzx  esi,dl
c001c8f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8fc:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8ff:	0f b6 db             	movzx  ebx,bl
c001c902:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c906:	83 ca 80             	or     edx,0xffffff80
c001c909:	0f b6 d2             	movzx  edx,dl
c001c90c:	52                   	push   edx
c001c90d:	6a 0c                	push   0xc
c001c90f:	56                   	push   esi
c001c910:	57                   	push   edi
c001c911:	e8 c0 ff ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c916:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c91b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c91f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c923:	ee                   	out    dx,al
c001c924:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c929:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c92d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c931:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c935:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c93d:	83 c4 2c             	add    esp,0x2c
c001c940:	5b                   	pop    ebx
c001c941:	5e                   	pop    esi
c001c942:	5f                   	pop    edi
c001c943:	5d                   	pop    ebp
c001c944:	eb 90                	jmp    c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c946:	80 fb 07             	cmp    bl,0x7
c001c949:	77 12                	ja     c001c95d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c94b:	0f b6 d2             	movzx  edx,dl
c001c94e:	0f b6 db             	movzx  ebx,bl
c001c951:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c959:	89 da                	mov    edx,ebx
c001c95b:	eb 2f                	jmp    c001c98c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c95d:	80 fb 0d             	cmp    bl,0xd
c001c960:	77 13                	ja     c001c975 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c962:	0f b6 d2             	movzx  edx,dl
c001c965:	0f b6 db             	movzx  ebx,bl
c001c968:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c96f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c973:	eb 17                	jmp    c001c98c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c975:	80 fb 15             	cmp    bl,0x15
c001c978:	77 13                	ja     c001c98d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c97a:	0f b6 d2             	movzx  edx,dl
c001c97d:	0f b6 db             	movzx  ebx,bl
c001c980:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c988:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c98c:	ee                   	out    dx,al
c001c98d:	83 c4 1c             	add    esp,0x1c
c001c990:	5b                   	pop    ebx
c001c991:	5e                   	pop    esi
c001c992:	5f                   	pop    edi
c001c993:	5d                   	pop    ebp
c001c994:	c3                   	ret    
c001c995:	90                   	nop

c001c996 <IDE::read(unsigned char, unsigned char)>:
c001c996:	55                   	push   ebp
c001c997:	57                   	push   edi
c001c998:	56                   	push   esi
c001c999:	53                   	push   ebx
c001c99a:	83 ec 1c             	sub    esp,0x1c
c001c99d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c9a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c9a5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c9a9:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c9ac:	3c 03                	cmp    al,0x3
c001c9ae:	77 43                	ja     c001c9f3 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c9b0:	0f b6 f2             	movzx  esi,dl
c001c9b3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c9b6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c9ba:	83 c8 80             	or     eax,0xffffff80
c001c9bd:	0f b6 c0             	movzx  eax,al
c001c9c0:	50                   	push   eax
c001c9c1:	6a 0c                	push   0xc
c001c9c3:	56                   	push   esi
c001c9c4:	57                   	push   edi
c001c9c5:	e8 0c ff ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ca:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c9cf:	0f b6 c3             	movzx  eax,bl
c001c9d2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c9d6:	ec                   	in     al,dx
c001c9d7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c9dc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c9e0:	52                   	push   edx
c001c9e1:	6a 0c                	push   0xc
c001c9e3:	56                   	push   esi
c001c9e4:	57                   	push   edi
c001c9e5:	e8 ec fe ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ea:	83 c4 20             	add    esp,0x20
c001c9ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c9f1:	eb 49                	jmp    c001ca3c <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9f3:	80 fb 07             	cmp    bl,0x7
c001c9f6:	77 12                	ja     c001ca0a <IDE::read(unsigned char, unsigned char)+0x74>
c001c9f8:	0f b6 d2             	movzx  edx,dl
c001c9fb:	0f b6 c3             	movzx  eax,bl
c001c9fe:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001ca06:	89 c2                	mov    edx,eax
c001ca08:	eb 31                	jmp    c001ca3b <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca0a:	80 fb 0d             	cmp    bl,0xd
c001ca0d:	77 13                	ja     c001ca22 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ca0f:	0f b6 d2             	movzx  edx,dl
c001ca12:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ca19:	0f b6 d3             	movzx  edx,bl
c001ca1c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ca20:	eb 19                	jmp    c001ca3b <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca22:	31 c0                	xor    eax,eax
c001ca24:	80 fb 15             	cmp    bl,0x15
c001ca27:	77 13                	ja     c001ca3c <IDE::read(unsigned char, unsigned char)+0xa6>
c001ca29:	0f b6 d2             	movzx  edx,dl
c001ca2c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ca34:	0f b6 d3             	movzx  edx,bl
c001ca37:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ca3b:	ec                   	in     al,dx
c001ca3c:	83 c4 1c             	add    esp,0x1c
c001ca3f:	5b                   	pop    ebx
c001ca40:	5e                   	pop    esi
c001ca41:	5f                   	pop    edi
c001ca42:	5d                   	pop    ebp
c001ca43:	c3                   	ret    

c001ca44 <IDE::waitInterrupt(unsigned char)>:
c001ca44:	57                   	push   edi
c001ca45:	56                   	push   esi
c001ca46:	31 f6                	xor    esi,esi
c001ca48:	53                   	push   ebx
c001ca49:	83 ec 10             	sub    esp,0x10
c001ca4c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001ca50:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ca54:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca58:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca5d:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001ca64:	84 db                	test   bl,bl
c001ca66:	75 37                	jne    c001ca9f <IDE::waitInterrupt(unsigned char)+0x5b>
c001ca68:	52                   	push   edx
c001ca69:	6a 0c                	push   0xc
c001ca6b:	50                   	push   eax
c001ca6c:	57                   	push   edi
c001ca6d:	e8 24 ff ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001ca72:	83 c4 10             	add    esp,0x10
c001ca75:	a8 01                	test   al,0x1
c001ca77:	75 2e                	jne    c001caa7 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca79:	f7 c6 04 00 00 00    	test   esi,0x4
c001ca7f:	75 16                	jne    c001ca97 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca81:	83 fe 32             	cmp    esi,0x32
c001ca84:	7e 11                	jle    c001ca97 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca86:	50                   	push   eax
c001ca87:	50                   	push   eax
c001ca88:	6a 00                	push   0x0
c001ca8a:	68 80 96 98 00       	push   0x989680
c001ca8f:	e8 25 c5 ff ff       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001ca94:	83 c4 10             	add    esp,0x10
c001ca97:	83 fe 3c             	cmp    esi,0x3c
c001ca9a:	74 0b                	je     c001caa7 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca9c:	46                   	inc    esi
c001ca9d:	eb b9                	jmp    c001ca58 <IDE::waitInterrupt(unsigned char)+0x14>
c001ca9f:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001caa7:	83 c4 10             	add    esp,0x10
c001caaa:	88 d8                	mov    al,bl
c001caac:	5b                   	pop    ebx
c001caad:	5e                   	pop    esi
c001caae:	5f                   	pop    edi
c001caaf:	c3                   	ret    

c001cab0 <ideChannel0IRQHandler(regs*, void*)>:
c001cab0:	83 ec 10             	sub    esp,0x10
c001cab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cab7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001cabe:	6a 07                	push   0x7
c001cac0:	6a 00                	push   0x0
c001cac2:	50                   	push   eax
c001cac3:	e8 ce fe ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001cac8:	83 c4 1c             	add    esp,0x1c
c001cacb:	c3                   	ret    

c001cacc <ideChannel1IRQHandler(regs*, void*)>:
c001cacc:	83 ec 10             	sub    esp,0x10
c001cacf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cad3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cada:	6a 07                	push   0x7
c001cadc:	6a 01                	push   0x1
c001cade:	50                   	push   eax
c001cadf:	e8 b2 fe ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001cae4:	83 c4 1c             	add    esp,0x1c
c001cae7:	c3                   	ret    

c001cae8 <IDE::enableIRQs(unsigned char, bool)>:
c001cae8:	57                   	push   edi
c001cae9:	56                   	push   esi
c001caea:	be 04 00 00 00       	mov    esi,0x4
c001caef:	53                   	push   ebx
c001caf0:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001caf5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001cafa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cafe:	0f 94 c0             	sete   al
c001cb01:	01 c0                	add    eax,eax
c001cb03:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001cb0a:	0f b6 c0             	movzx  eax,al
c001cb0d:	50                   	push   eax
c001cb0e:	6a 0c                	push   0xc
c001cb10:	57                   	push   edi
c001cb11:	53                   	push   ebx
c001cb12:	e8 bf fd ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb17:	83 c4 10             	add    esp,0x10
c001cb1a:	50                   	push   eax
c001cb1b:	6a 0c                	push   0xc
c001cb1d:	57                   	push   edi
c001cb1e:	53                   	push   ebx
c001cb1f:	e8 72 fe ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001cb24:	83 c4 10             	add    esp,0x10
c001cb27:	4e                   	dec    esi
c001cb28:	75 f0                	jne    c001cb1a <IDE::enableIRQs(unsigned char, bool)+0x32>
c001cb2a:	5b                   	pop    ebx
c001cb2b:	5e                   	pop    esi
c001cb2c:	5f                   	pop    edi
c001cb2d:	c3                   	ret    

c001cb2e <IDE::open(int, int, void*)>:
c001cb2e:	55                   	push   ebp
c001cb2f:	57                   	push   edi
c001cb30:	56                   	push   esi
c001cb31:	53                   	push   ebx
c001cb32:	83 ec 1c             	sub    esp,0x1c
c001cb35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cb39:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cb42:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cb4b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cb52:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cb59:	0f 85 b2 02 00 00    	jne    c001ce11 <IDE::open(int, int, void*)+0x2e3>
c001cb5f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb65:	88 04 24             	mov    BYTE PTR [esp],al
c001cb68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb6b:	83 e0 7f             	and    eax,0x7f
c001cb6e:	83 f8 05             	cmp    eax,0x5
c001cb71:	74 05                	je     c001cb78 <IDE::open(int, int, void*)+0x4a>
c001cb73:	83 f8 0f             	cmp    eax,0xf
c001cb76:	75 32                	jne    c001cbaa <IDE::open(int, int, void*)+0x7c>
c001cb78:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb7e:	83 e0 fc             	and    eax,0xfffffffc
c001cb81:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb88:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb8e:	83 e0 fc             	and    eax,0xfffffffc
c001cb91:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb98:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb9e:	83 e0 fc             	and    eax,0xfffffffc
c001cba1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cba8:	eb 14                	jmp    c001cbbe <IDE::open(int, int, void*)+0x90>
c001cbaa:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cbb4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cbbe:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cbc5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cbcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbd0:	89 c6                	mov    esi,eax
c001cbd2:	89 e8                	mov    eax,ebp
c001cbd4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cbd9:	c1 e6 10             	shl    esi,0x10
c001cbdc:	89 fa                	mov    edx,edi
c001cbde:	c1 e0 0b             	shl    eax,0xb
c001cbe1:	09 f0                	or     eax,esi
c001cbe3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cbea:	c1 e6 08             	shl    esi,0x8
c001cbed:	09 c6                	or     esi,eax
c001cbef:	89 f0                	mov    eax,esi
c001cbf1:	0d 08 00 00 80       	or     eax,0x80000008
c001cbf6:	ef                   	out    dx,eax
c001cbf7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cbfc:	89 ca                	mov    edx,ecx
c001cbfe:	ed                   	in     eax,dx
c001cbff:	c1 e8 10             	shr    eax,0x10
c001cc02:	3d ff ff 00 00       	cmp    eax,0xffff
c001cc07:	0f 84 f3 00 00 00    	je     c001cd00 <IDE::open(int, int, void*)+0x1d2>
c001cc0d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cc13:	89 fa                	mov    edx,edi
c001cc15:	89 f0                	mov    eax,esi
c001cc17:	ef                   	out    dx,eax
c001cc18:	b0 fe                	mov    al,0xfe
c001cc1a:	89 ca                	mov    edx,ecx
c001cc1c:	ee                   	out    dx,al
c001cc1d:	89 f0                	mov    eax,esi
c001cc1f:	89 fa                	mov    edx,edi
c001cc21:	ef                   	out    dx,eax
c001cc22:	89 ca                	mov    edx,ecx
c001cc24:	ed                   	in     eax,dx
c001cc25:	3c fe                	cmp    al,0xfe
c001cc27:	0f 85 a9 00 00 00    	jne    c001ccd6 <IDE::open(int, int, void*)+0x1a8>
c001cc2d:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001cc33:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cc3a:	74 33                	je     c001cc6f <IDE::open(int, int, void*)+0x141>
c001cc3c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cc42:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cc46:	40                   	inc    eax
c001cc47:	83 ec 0c             	sub    esp,0xc
c001cc4a:	0f b6 c0             	movzx  eax,al
c001cc4d:	50                   	push   eax
c001cc4e:	55                   	push   ebp
c001cc4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc53:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cc59:	51                   	push   ecx
c001cc5a:	e8 1d 72 ff ff       	call   c0013e7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cc5f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cc64:	83 c4 1c             	add    esp,0x1c
c001cc67:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc6d:	eb 0a                	jmp    c001cc79 <IDE::open(int, int, void*)+0x14b>
c001cc6f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc79:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc80:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc87:	c1 e1 10             	shl    ecx,0x10
c001cc8a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc8f:	c1 e0 08             	shl    eax,0x8
c001cc92:	89 fa                	mov    edx,edi
c001cc94:	09 c1                	or     ecx,eax
c001cc96:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc9d:	c1 e0 0b             	shl    eax,0xb
c001cca0:	09 c1                	or     ecx,eax
c001cca2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cca8:	89 c8                	mov    eax,ecx
c001ccaa:	ef                   	out    dx,eax
c001ccab:	be fc 0c 00 00       	mov    esi,0xcfc
c001ccb0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ccb6:	89 f2                	mov    edx,esi
c001ccb8:	ee                   	out    dx,al
c001ccb9:	89 c8                	mov    eax,ecx
c001ccbb:	89 fa                	mov    edx,edi
c001ccbd:	ef                   	out    dx,eax
c001ccbe:	89 f2                	mov    edx,esi
c001ccc0:	ed                   	in     eax,dx
c001ccc1:	0f b6 c0             	movzx  eax,al
c001ccc4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ccca:	74 44                	je     c001cd10 <IDE::open(int, int, void*)+0x1e2>
c001cccc:	83 ec 0c             	sub    esp,0xc
c001cccf:	68 68 35 02 c0       	push   0xc0023568
c001ccd4:	eb 32                	jmp    c001cd08 <IDE::open(int, int, void*)+0x1da>
c001ccd6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ccdf:	75 15                	jne    c001ccf6 <IDE::open(int, int, void*)+0x1c8>
c001cce1:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001cce5:	74 06                	je     c001cced <IDE::open(int, int, void*)+0x1bf>
c001cce7:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001cceb:	75 09                	jne    c001ccf6 <IDE::open(int, int, void*)+0x1c8>
c001cced:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ccf4:	eb 1a                	jmp    c001cd10 <IDE::open(int, int, void*)+0x1e2>
c001ccf6:	83 ec 0c             	sub    esp,0xc
c001ccf9:	68 70 35 02 c0       	push   0xc0023570
c001ccfe:	eb 08                	jmp    c001cd08 <IDE::open(int, int, void*)+0x1da>
c001cd00:	83 ec 0c             	sub    esp,0xc
c001cd03:	68 a1 35 02 c0       	push   0xc00235a1
c001cd08:	e8 45 8d ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cd17:	79 1a                	jns    c001cd33 <IDE::open(int, int, void*)+0x205>
c001cd19:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cd1f:	83 e0 fc             	and    eax,0xfffffffc
c001cd22:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cd29:	83 c0 08             	add    eax,0x8
c001cd2c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cd33:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cd39:	89 c2                	mov    edx,eax
c001cd3b:	83 e2 0f             	and    edx,0xf
c001cd3e:	66 83 fa 08          	cmp    dx,0x8
c001cd42:	75 0a                	jne    c001cd4e <IDE::open(int, int, void*)+0x220>
c001cd44:	83 e8 02             	sub    eax,0x2
c001cd47:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cd4e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cd54:	89 c2                	mov    edx,eax
c001cd56:	83 e2 0f             	and    edx,0xf
c001cd59:	66 83 fa 08          	cmp    dx,0x8
c001cd5d:	75 0a                	jne    c001cd69 <IDE::open(int, int, void*)+0x23b>
c001cd5f:	83 e8 02             	sub    eax,0x2
c001cd62:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cd69:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cd70:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cd77:	89 d0                	mov    eax,edx
c001cd79:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd7c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd80:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cd84:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cd87:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd8c:	0f b6 c9             	movzx  ecx,cl
c001cd8f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cd96:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd99:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd9d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cda1:	8d 50 02             	lea    edx,[eax+0x2]
c001cda4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cda9:	0f b6 d2             	movzx  edx,dl
c001cdac:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cdb2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdb5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cdb9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cdbd:	8d 48 03             	lea    ecx,[eax+0x3]
c001cdc0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdc5:	0f b6 c9             	movzx  ecx,cl
c001cdc8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cdce:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cdd1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cdd5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cdd9:	8d 50 04             	lea    edx,[eax+0x4]
c001cddc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cde2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cde7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cdee:	66 85 f6             	test   si,si
c001cdf1:	74 3e                	je     c001ce31 <IDE::open(int, int, void*)+0x303>
c001cdf3:	0f b6 d2             	movzx  edx,dl
c001cdf6:	83 c0 05             	add    eax,0x5
c001cdf9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdfc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ce00:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ce04:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ce0a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ce0f:	eb 20                	jmp    c001ce31 <IDE::open(int, int, void*)+0x303>
c001ce11:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ce1b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ce25:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce2c:	e9 02 ff ff ff       	jmp    c001cd33 <IDE::open(int, int, void*)+0x205>
c001ce31:	52                   	push   edx
c001ce32:	52                   	push   edx
c001ce33:	6a 00                	push   0x0
c001ce35:	53                   	push   ebx
c001ce36:	e8 75 fa ff ff       	call   c001c8b0 <IDE::prepareInterrupt(unsigned char)>
c001ce3b:	59                   	pop    ecx
c001ce3c:	5e                   	pop    esi
c001ce3d:	6a 01                	push   0x1
c001ce3f:	53                   	push   ebx
c001ce40:	e8 6b fa ff ff       	call   c001c8b0 <IDE::prepareInterrupt(unsigned char)>
c001ce45:	83 c4 0c             	add    esp,0xc
c001ce48:	6a 00                	push   0x0
c001ce4a:	6a 00                	push   0x0
c001ce4c:	53                   	push   ebx
c001ce4d:	e8 96 fc ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001ce52:	83 c4 0c             	add    esp,0xc
c001ce55:	6a 00                	push   0x0
c001ce57:	6a 01                	push   0x1
c001ce59:	53                   	push   ebx
c001ce5a:	e8 89 fc ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001ce5f:	83 c4 10             	add    esp,0x10
c001ce62:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ce69:	74 40                	je     c001ceab <IDE::open(int, int, void*)+0x37d>
c001ce6b:	83 ec 0c             	sub    esp,0xc
c001ce6e:	68 cb 35 02 c0       	push   0xc00235cb
c001ce73:	e8 b1 23 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001ce78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce7b:	6a 01                	push   0x1
c001ce7d:	68 b0 ca 01 c0       	push   0xc001cab0
c001ce82:	6a 0e                	push   0xe
c001ce84:	53                   	push   ebx
c001ce85:	e8 08 37 ff ff       	call   c0010592 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce8a:	83 c4 14             	add    esp,0x14
c001ce8d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ce93:	53                   	push   ebx
c001ce94:	6a 01                	push   0x1
c001ce96:	68 cc ca 01 c0       	push   0xc001cacc
c001ce9b:	6a 0f                	push   0xf
c001ce9d:	53                   	push   ebx
c001ce9e:	e8 ef 36 ff ff       	call   c0010592 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cea3:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cea9:	eb 4a                	jmp    c001cef5 <IDE::open(int, int, void*)+0x3c7>
c001ceab:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ceb5:	50                   	push   eax
c001ceb6:	6a 0f                	push   0xf
c001ceb8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cebe:	68 e7 35 02 c0       	push   0xc00235e7
c001cec3:	e8 61 23 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001cec8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cecb:	6a 00                	push   0x0
c001cecd:	68 b0 ca 01 c0       	push   0xc001cab0
c001ced2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ced8:	53                   	push   ebx
c001ced9:	e8 b4 36 ff ff       	call   c0010592 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cede:	83 c4 14             	add    esp,0x14
c001cee1:	53                   	push   ebx
c001cee2:	6a 00                	push   0x0
c001cee4:	68 cc ca 01 c0       	push   0xc001cacc
c001cee9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ceef:	53                   	push   ebx
c001cef0:	e8 9d 36 ff ff       	call   c0010592 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cef5:	83 c4 20             	add    esp,0x20
c001cef8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cefa:	83 ec 0c             	sub    esp,0xc
c001cefd:	53                   	push   ebx
c001cefe:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cf01:	83 c4 0c             	add    esp,0xc
c001cf04:	6a 07                	push   0x7
c001cf06:	6a 00                	push   0x0
c001cf08:	53                   	push   ebx
c001cf09:	e8 88 fa ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001cf0e:	83 c4 0c             	add    esp,0xc
c001cf11:	6a 07                	push   0x7
c001cf13:	6a 01                	push   0x1
c001cf15:	53                   	push   ebx
c001cf16:	e8 7b fa ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001cf1b:	83 c4 0c             	add    esp,0xc
c001cf1e:	6a 01                	push   0x1
c001cf20:	6a 00                	push   0x0
c001cf22:	53                   	push   ebx
c001cf23:	e8 c0 fb ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001cf28:	83 c4 0c             	add    esp,0xc
c001cf2b:	6a 01                	push   0x1
c001cf2d:	6a 01                	push   0x1
c001cf2f:	53                   	push   ebx
c001cf30:	e8 b3 fb ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001cf35:	83 c4 2c             	add    esp,0x2c
c001cf38:	31 c0                	xor    eax,eax
c001cf3a:	5b                   	pop    ebx
c001cf3b:	5e                   	pop    esi
c001cf3c:	5f                   	pop    edi
c001cf3d:	5d                   	pop    ebp
c001cf3e:	c3                   	ret    
c001cf3f:	90                   	nop

c001cf40 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cf40:	55                   	push   ebp
c001cf41:	57                   	push   edi
c001cf42:	56                   	push   esi
c001cf43:	53                   	push   ebx
c001cf44:	83 ec 1c             	sub    esp,0x1c
c001cf47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf53:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cf57:	8d 50 f8             	lea    edx,[eax-0x8]
c001cf5a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cf5e:	80 fa 03             	cmp    dl,0x3
c001cf61:	77 5d                	ja     c001cfc0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cf63:	0f b6 db             	movzx  ebx,bl
c001cf66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf6e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cf71:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cf75:	83 ca 80             	or     edx,0xffffff80
c001cf78:	0f b6 d2             	movzx  edx,dl
c001cf7b:	52                   	push   edx
c001cf7c:	6a 0c                	push   0xc
c001cf7e:	53                   	push   ebx
c001cf7f:	56                   	push   esi
c001cf80:	e8 51 f9 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf89:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cf8e:	0f b6 c0             	movzx  eax,al
c001cf91:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf95:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cf99:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cf9b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cfa0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cfa4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cfa8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cfac:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cfb4:	83 c4 2c             	add    esp,0x2c
c001cfb7:	5b                   	pop    ebx
c001cfb8:	5e                   	pop    esi
c001cfb9:	5f                   	pop    edi
c001cfba:	5d                   	pop    ebp
c001cfbb:	e9 16 f9 ff ff       	jmp    c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfc0:	3c 07                	cmp    al,0x7
c001cfc2:	77 10                	ja     c001cfd4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cfc4:	0f b6 db             	movzx  ebx,bl
c001cfc7:	0f b6 d0             	movzx  edx,al
c001cfca:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cfd2:	eb 2d                	jmp    c001d001 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfd4:	3c 0d                	cmp    al,0xd
c001cfd6:	77 13                	ja     c001cfeb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cfd8:	0f b6 db             	movzx  ebx,bl
c001cfdb:	0f b6 c0             	movzx  eax,al
c001cfde:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cfe5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cfe9:	eb 16                	jmp    c001d001 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfeb:	3c 15                	cmp    al,0x15
c001cfed:	77 14                	ja     c001d003 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cfef:	0f b6 db             	movzx  ebx,bl
c001cff2:	0f b6 c0             	movzx  eax,al
c001cff5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cffd:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001d001:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d003:	83 c4 1c             	add    esp,0x1c
c001d006:	5b                   	pop    ebx
c001d007:	5e                   	pop    esi
c001d008:	5f                   	pop    edi
c001d009:	5d                   	pop    ebp
c001d00a:	c3                   	ret    
c001d00b:	90                   	nop

c001d00c <IDE::detect()>:
c001d00c:	55                   	push   ebp
c001d00d:	57                   	push   edi
c001d00e:	56                   	push   esi
c001d00f:	53                   	push   ebx
c001d010:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001d016:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001d01d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001d024:	0f 85 c0 02 00 00    	jne    c001d2ea <IDE::detect()+0x2de>
c001d02a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d031:	31 f6                	xor    esi,esi
c001d033:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d03b:	31 ed                	xor    ebp,ebp
c001d03d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d041:	c1 e0 06             	shl    eax,0x6
c001d044:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d04c:	89 e8                	mov    eax,ebp
c001d04e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d052:	c1 e0 04             	shl    eax,0x4
c001d055:	83 c8 a0             	or     eax,0xffffffa0
c001d058:	0f b6 c0             	movzx  eax,al
c001d05b:	50                   	push   eax
c001d05c:	6a 06                	push   0x6
c001d05e:	56                   	push   esi
c001d05f:	53                   	push   ebx
c001d060:	e8 71 f8 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d065:	83 c4 0c             	add    esp,0xc
c001d068:	6a 0c                	push   0xc
c001d06a:	56                   	push   esi
c001d06b:	53                   	push   ebx
c001d06c:	e8 25 f9 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d071:	83 c4 0c             	add    esp,0xc
c001d074:	6a 0c                	push   0xc
c001d076:	56                   	push   esi
c001d077:	53                   	push   ebx
c001d078:	e8 19 f9 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d07d:	83 c4 0c             	add    esp,0xc
c001d080:	6a 0c                	push   0xc
c001d082:	56                   	push   esi
c001d083:	53                   	push   ebx
c001d084:	e8 0d f9 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d089:	83 c4 0c             	add    esp,0xc
c001d08c:	6a 0c                	push   0xc
c001d08e:	56                   	push   esi
c001d08f:	53                   	push   ebx
c001d090:	e8 01 f9 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d095:	68 ec 00 00 00       	push   0xec
c001d09a:	6a 07                	push   0x7
c001d09c:	56                   	push   esi
c001d09d:	53                   	push   ebx
c001d09e:	e8 33 f8 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0a3:	83 c4 1c             	add    esp,0x1c
c001d0a6:	6a 0c                	push   0xc
c001d0a8:	56                   	push   esi
c001d0a9:	53                   	push   ebx
c001d0aa:	e8 e7 f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0af:	83 c4 0c             	add    esp,0xc
c001d0b2:	6a 0c                	push   0xc
c001d0b4:	56                   	push   esi
c001d0b5:	53                   	push   ebx
c001d0b6:	e8 db f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0bb:	83 c4 0c             	add    esp,0xc
c001d0be:	6a 0c                	push   0xc
c001d0c0:	56                   	push   esi
c001d0c1:	53                   	push   ebx
c001d0c2:	e8 cf f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0c7:	83 c4 0c             	add    esp,0xc
c001d0ca:	6a 0c                	push   0xc
c001d0cc:	56                   	push   esi
c001d0cd:	53                   	push   ebx
c001d0ce:	e8 c3 f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0d3:	83 c4 0c             	add    esp,0xc
c001d0d6:	6a 0c                	push   0xc
c001d0d8:	56                   	push   esi
c001d0d9:	53                   	push   ebx
c001d0da:	e8 b7 f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0df:	83 c4 10             	add    esp,0x10
c001d0e2:	84 c0                	test   al,al
c001d0e4:	0f 84 8b 01 00 00    	je     c001d275 <IDE::detect()+0x269>
c001d0ea:	31 ff                	xor    edi,edi
c001d0ec:	50                   	push   eax
c001d0ed:	6a 0c                	push   0xc
c001d0ef:	56                   	push   esi
c001d0f0:	53                   	push   ebx
c001d0f1:	e8 a0 f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	a8 01                	test   al,0x1
c001d0fb:	0f 85 8e 01 00 00    	jne    c001d28f <IDE::detect()+0x283>
c001d101:	84 c0                	test   al,al
c001d103:	78 04                	js     c001d109 <IDE::detect()+0xfd>
c001d105:	a8 08                	test   al,0x8
c001d107:	75 27                	jne    c001d130 <IDE::detect()+0x124>
c001d109:	47                   	inc    edi
c001d10a:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d110:	7e da                	jle    c001d0ec <IDE::detect()+0xe0>
c001d112:	50                   	push   eax
c001d113:	50                   	push   eax
c001d114:	6a 00                	push   0x0
c001d116:	68 40 4b 4c 00       	push   0x4c4b40
c001d11b:	e8 99 be ff ff       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001d120:	83 c4 10             	add    esp,0x10
c001d123:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d129:	75 c1                	jne    c001d0ec <IDE::detect()+0xe0>
c001d12b:	e9 5f 01 00 00       	jmp    c001d28f <IDE::detect()+0x283>
c001d130:	31 c9                	xor    ecx,ecx
c001d132:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d136:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d13a:	83 ec 0c             	sub    esp,0xc
c001d13d:	68 80 00 00 00       	push   0x80
c001d142:	57                   	push   edi
c001d143:	6a 00                	push   0x0
c001d145:	56                   	push   esi
c001d146:	53                   	push   ebx
c001d147:	e8 f4 fd ff ff       	call   c001cf40 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d14c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d150:	c1 e0 06             	shl    eax,0x6
c001d153:	01 d8                	add    eax,ebx
c001d155:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d15a:	89 d1                	mov    ecx,edx
c001d15c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d163:	89 f2                	mov    edx,esi
c001d165:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d16c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d172:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d176:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d17c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d180:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d187:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d18f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d196:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d19e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d1a4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d1ab:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d1b1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1b5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d1b9:	83 c4 20             	add    esp,0x20
c001d1bc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d1bf:	83 c7 02             	add    edi,0x2
c001d1c2:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d1c8:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d1cb:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d1d1:	83 c0 02             	add    eax,0x2
c001d1d4:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d1d8:	75 e2                	jne    c001d1bc <IDE::detect()+0x1b0>
c001d1da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1de:	c1 e0 06             	shl    eax,0x6
c001d1e1:	01 d8                	add    eax,ebx
c001d1e3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d1e9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d1f0:	66 c1 ea 09          	shr    dx,0x9
c001d1f4:	83 e2 01             	and    edx,0x1
c001d1f7:	84 c9                	test   cl,cl
c001d1f9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d1ff:	75 2f                	jne    c001d230 <IDE::detect()+0x224>
c001d201:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d207:	85 c0                	test   eax,eax
c001d209:	74 66                	je     c001d271 <IDE::detect()+0x265>
c001d20b:	50                   	push   eax
c001d20c:	55                   	push   ebp
c001d20d:	56                   	push   esi
c001d20e:	68 03 36 02 c0       	push   0xc0023603
c001d213:	e8 11 20 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d218:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d21f:	e8 d0 1e ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001d224:	89 c7                	mov    edi,eax
c001d226:	89 04 24             	mov    DWORD PTR [esp],eax
c001d229:	e8 f4 02 00 00       	call   c001d522 <ATA::ATA()>
c001d22e:	eb 28                	jmp    c001d258 <IDE::detect()+0x24c>
c001d230:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d236:	55                   	push   ebp
c001d237:	56                   	push   esi
c001d238:	68 32 36 02 c0       	push   0xc0023632
c001d23d:	e8 e7 1f ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d242:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d249:	e8 a6 1e ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001d24e:	89 c7                	mov    edi,eax
c001d250:	89 04 24             	mov    DWORD PTR [esp],eax
c001d253:	e8 1e 09 00 00       	call   c001db76 <ATAPI::ATAPI()>
c001d258:	5a                   	pop    edx
c001d259:	59                   	pop    ecx
c001d25a:	57                   	push   edi
c001d25b:	53                   	push   ebx
c001d25c:	e8 dd 33 ff ff       	call   c001063e <Device::addChild(Device*)>
c001d261:	8b 07                	mov    eax,DWORD PTR [edi]
c001d263:	53                   	push   ebx
c001d264:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d268:	6a 00                	push   0x0
c001d26a:	57                   	push   edi
c001d26b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d26e:	83 c4 20             	add    esp,0x20
c001d271:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d275:	4d                   	dec    ebp
c001d276:	74 0a                	je     c001d282 <IDE::detect()+0x276>
c001d278:	bd 01 00 00 00       	mov    ebp,0x1
c001d27d:	e9 bb fd ff ff       	jmp    c001d03d <IDE::detect()+0x31>
c001d282:	4e                   	dec    esi
c001d283:	74 65                	je     c001d2ea <IDE::detect()+0x2de>
c001d285:	be 01 00 00 00       	mov    esi,0x1
c001d28a:	e9 ac fd ff ff       	jmp    c001d03b <IDE::detect()+0x2f>
c001d28f:	50                   	push   eax
c001d290:	6a 04                	push   0x4
c001d292:	56                   	push   esi
c001d293:	53                   	push   ebx
c001d294:	e8 fd f6 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d299:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d29d:	83 c4 0c             	add    esp,0xc
c001d2a0:	6a 05                	push   0x5
c001d2a2:	56                   	push   esi
c001d2a3:	53                   	push   ebx
c001d2a4:	e8 ed f6 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d2a9:	83 c4 10             	add    esp,0x10
c001d2ac:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d2b0:	80 fa 14             	cmp    dl,0x14
c001d2b3:	74 2f                	je     c001d2e4 <IDE::detect()+0x2d8>
c001d2b5:	80 fa 69             	cmp    dl,0x69
c001d2b8:	75 bb                	jne    c001d275 <IDE::detect()+0x269>
c001d2ba:	3c 96                	cmp    al,0x96
c001d2bc:	75 b7                	jne    c001d275 <IDE::detect()+0x269>
c001d2be:	68 a1 00 00 00       	push   0xa1
c001d2c3:	6a 07                	push   0x7
c001d2c5:	56                   	push   esi
c001d2c6:	53                   	push   ebx
c001d2c7:	e8 0a f6 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2cc:	5f                   	pop    edi
c001d2cd:	58                   	pop    eax
c001d2ce:	6a 00                	push   0x0
c001d2d0:	68 40 42 0f 00       	push   0xf4240
c001d2d5:	e8 df bc ff ff       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001d2da:	83 c4 10             	add    esp,0x10
c001d2dd:	b1 01                	mov    cl,0x1
c001d2df:	e9 4e fe ff ff       	jmp    c001d132 <IDE::detect()+0x126>
c001d2e4:	3c eb                	cmp    al,0xeb
c001d2e6:	75 cd                	jne    c001d2b5 <IDE::detect()+0x2a9>
c001d2e8:	eb d4                	jmp    c001d2be <IDE::detect()+0x2b2>
c001d2ea:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2f0:	5b                   	pop    ebx
c001d2f1:	5e                   	pop    esi
c001d2f2:	5f                   	pop    edi
c001d2f3:	5d                   	pop    ebp
c001d2f4:	c3                   	ret    
c001d2f5:	90                   	nop

c001d2f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d2f6:	55                   	push   ebp
c001d2f7:	57                   	push   edi
c001d2f8:	56                   	push   esi
c001d2f9:	53                   	push   ebx
c001d2fa:	83 ec 1c             	sub    esp,0x1c
c001d2fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d301:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d305:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d309:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d30d:	88 c3                	mov    bl,al
c001d30f:	84 c0                	test   al,al
c001d311:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d315:	0f 84 67 01 00 00    	je     c001d482 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d31b:	83 ec 0c             	sub    esp,0xc
c001d31e:	68 63 36 02 c0       	push   0xc0023663
c001d323:	e8 01 1f ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d328:	83 c4 10             	add    esp,0x10
c001d32b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d32f:	3c 01                	cmp    al,0x1
c001d331:	75 17                	jne    c001d34a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d333:	83 ec 0c             	sub    esp,0xc
c001d336:	b3 13                	mov    bl,0x13
c001d338:	68 6f 36 02 c0       	push   0xc002366f
c001d33d:	e8 e7 1e ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d342:	83 c4 10             	add    esp,0x10
c001d345:	e9 25 01 00 00       	jmp    c001d46f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d34a:	3c 02                	cmp    al,0x2
c001d34c:	0f 85 ef 00 00 00    	jne    c001d441 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d352:	01 f6                	add    esi,esi
c001d354:	52                   	push   edx
c001d355:	09 ee                	or     esi,ebp
c001d357:	6a 01                	push   0x1
c001d359:	89 f0                	mov    eax,esi
c001d35b:	0f b6 f0             	movzx  esi,al
c001d35e:	c1 e6 06             	shl    esi,0x6
c001d361:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d369:	50                   	push   eax
c001d36a:	57                   	push   edi
c001d36b:	e8 26 f6 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d370:	83 c4 10             	add    esp,0x10
c001d373:	89 c6                	mov    esi,eax
c001d375:	a8 01                	test   al,0x1
c001d377:	74 12                	je     c001d38b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d379:	83 ec 0c             	sub    esp,0xc
c001d37c:	b3 07                	mov    bl,0x7
c001d37e:	68 84 36 02 c0       	push   0xc0023684
c001d383:	e8 a1 1e ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d388:	83 c4 10             	add    esp,0x10
c001d38b:	f7 c6 02 00 00 00    	test   esi,0x2
c001d391:	74 12                	je     c001d3a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d393:	83 ec 0c             	sub    esp,0xc
c001d396:	b3 03                	mov    bl,0x3
c001d398:	68 a2 36 02 c0       	push   0xc00236a2
c001d39d:	e8 87 1e ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	f7 c6 04 00 00 00    	test   esi,0x4
c001d3ab:	74 12                	je     c001d3bf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d3ad:	83 ec 0c             	sub    esp,0xc
c001d3b0:	b3 14                	mov    bl,0x14
c001d3b2:	68 c2 36 02 c0       	push   0xc00236c2
c001d3b7:	e8 6d 1e ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d3bc:	83 c4 10             	add    esp,0x10
c001d3bf:	f7 c6 08 00 00 00    	test   esi,0x8
c001d3c5:	74 12                	je     c001d3d9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d3c7:	83 ec 0c             	sub    esp,0xc
c001d3ca:	b3 03                	mov    bl,0x3
c001d3cc:	68 a2 36 02 c0       	push   0xc00236a2
c001d3d1:	e8 53 1e ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d3d6:	83 c4 10             	add    esp,0x10
c001d3d9:	f7 c6 10 00 00 00    	test   esi,0x10
c001d3df:	74 12                	je     c001d3f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d3e1:	83 ec 0c             	sub    esp,0xc
c001d3e4:	b3 15                	mov    bl,0x15
c001d3e6:	68 da 36 02 c0       	push   0xc00236da
c001d3eb:	e8 39 1e ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d3f0:	83 c4 10             	add    esp,0x10
c001d3f3:	f7 c6 20 00 00 00    	test   esi,0x20
c001d3f9:	74 12                	je     c001d40d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d3fb:	83 ec 0c             	sub    esp,0xc
c001d3fe:	b3 03                	mov    bl,0x3
c001d400:	68 a2 36 02 c0       	push   0xc00236a2
c001d405:	e8 1f 1e ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d40a:	83 c4 10             	add    esp,0x10
c001d40d:	f7 c6 40 00 00 00    	test   esi,0x40
c001d413:	74 12                	je     c001d427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d415:	83 ec 0c             	sub    esp,0xc
c001d418:	b3 16                	mov    bl,0x16
c001d41a:	68 f4 36 02 c0       	push   0xc00236f4
c001d41f:	e8 05 1e ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d424:	83 c4 10             	add    esp,0x10
c001d427:	89 f0                	mov    eax,esi
c001d429:	84 c0                	test   al,al
c001d42b:	79 42                	jns    c001d46f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d42d:	83 ec 0c             	sub    esp,0xc
c001d430:	b3 0d                	mov    bl,0xd
c001d432:	68 15 37 02 c0       	push   0xc0023715
c001d437:	e8 ed 1d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d43c:	83 c4 10             	add    esp,0x10
c001d43f:	eb 2e                	jmp    c001d46f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d441:	3c 03                	cmp    al,0x3
c001d443:	75 14                	jne    c001d459 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d445:	83 ec 0c             	sub    esp,0xc
c001d448:	b3 17                	mov    bl,0x17
c001d44a:	68 29 37 02 c0       	push   0xc0023729
c001d44f:	e8 d5 1d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d454:	83 c4 10             	add    esp,0x10
c001d457:	eb 16                	jmp    c001d46f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d459:	3c 04                	cmp    al,0x4
c001d45b:	75 12                	jne    c001d46f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d45d:	83 ec 0c             	sub    esp,0xc
c001d460:	b3 08                	mov    bl,0x8
c001d462:	68 3f 37 02 c0       	push   0xc002373f
c001d467:	e8 bd 1d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d46c:	83 c4 10             	add    esp,0x10
c001d46f:	50                   	push   eax
c001d470:	50                   	push   eax
c001d471:	0f b6 c3             	movzx  eax,bl
c001d474:	50                   	push   eax
c001d475:	68 57 37 02 c0       	push   0xc0023757
c001d47a:	e8 aa 1d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d47f:	83 c4 10             	add    esp,0x10
c001d482:	83 c4 1c             	add    esp,0x1c
c001d485:	88 d8                	mov    al,bl
c001d487:	5b                   	pop    ebx
c001d488:	5e                   	pop    esi
c001d489:	5f                   	pop    edi
c001d48a:	5d                   	pop    ebp
c001d48b:	c3                   	ret    

c001d48c <IDE::polling(unsigned char, unsigned int)>:
c001d48c:	55                   	push   ebp
c001d48d:	bd 04 00 00 00       	mov    ebp,0x4
c001d492:	57                   	push   edi
c001d493:	56                   	push   esi
c001d494:	53                   	push   ebx
c001d495:	83 ec 0c             	sub    esp,0xc
c001d498:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d49c:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d4a0:	52                   	push   edx
c001d4a1:	6a 0c                	push   0xc
c001d4a3:	0f b6 f3             	movzx  esi,bl
c001d4a6:	56                   	push   esi
c001d4a7:	57                   	push   edi
c001d4a8:	e8 e9 f4 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d4ad:	83 c4 10             	add    esp,0x10
c001d4b0:	4d                   	dec    ebp
c001d4b1:	75 ed                	jne    c001d4a0 <IDE::polling(unsigned char, unsigned int)+0x14>
c001d4b3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d4b8:	50                   	push   eax
c001d4b9:	6a 0c                	push   0xc
c001d4bb:	56                   	push   esi
c001d4bc:	57                   	push   edi
c001d4bd:	e8 d4 f4 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d4c2:	83 c4 10             	add    esp,0x10
c001d4c5:	a8 01                	test   al,0x1
c001d4c7:	74 12                	je     c001d4db <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d4c9:	83 ec 0c             	sub    esp,0xc
c001d4cc:	68 71 37 02 c0       	push   0xc0023771
c001d4d1:	e8 53 1d ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001d4d6:	83 c4 10             	add    esp,0x10
c001d4d9:	eb 17                	jmp    c001d4f2 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4db:	a8 20                	test   al,0x20
c001d4dd:	75 0f                	jne    c001d4ee <IDE::polling(unsigned char, unsigned int)+0x62>
c001d4df:	4b                   	dec    ebx
c001d4e0:	74 10                	je     c001d4f2 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4e2:	84 c0                	test   al,al
c001d4e4:	78 d2                	js     c001d4b8 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4e6:	a8 08                	test   al,0x8
c001d4e8:	74 ce                	je     c001d4b8 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4ea:	31 c0                	xor    eax,eax
c001d4ec:	eb 06                	jmp    c001d4f4 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4ee:	b0 01                	mov    al,0x1
c001d4f0:	eb 02                	jmp    c001d4f4 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4f2:	b0 02                	mov    al,0x2
c001d4f4:	83 c4 0c             	add    esp,0xc
c001d4f7:	5b                   	pop    ebx
c001d4f8:	5e                   	pop    esi
c001d4f9:	5f                   	pop    edi
c001d4fa:	5d                   	pop    ebp
c001d4fb:	c3                   	ret    

c001d4fc <ATA::close(int, int, void*)>:
c001d4fc:	83 ec 0c             	sub    esp,0xc
c001d4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d503:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d509:	85 c0                	test   eax,eax
c001d50b:	74 0c                	je     c001d519 <ATA::close(int, int, void*)+0x1d>
c001d50d:	83 ec 0c             	sub    esp,0xc
c001d510:	8b 10                	mov    edx,DWORD PTR [eax]
c001d512:	50                   	push   eax
c001d513:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d516:	83 c4 10             	add    esp,0x10
c001d519:	31 c0                	xor    eax,eax
c001d51b:	83 c4 0c             	add    esp,0xc
c001d51e:	c3                   	ret    
c001d51f:	90                   	nop

c001d520 <ATA::powerSaving(PowerSavingLevel)>:
c001d520:	c3                   	ret    
c001d521:	90                   	nop

c001d522 <ATA::ATA()>:
c001d522:	83 ec 0c             	sub    esp,0xc
c001d525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d529:	83 ec 04             	sub    esp,0x4
c001d52c:	68 00 02 00 00       	push   0x200
c001d531:	68 b4 37 02 c0       	push   0xc00237b4
c001d536:	50                   	push   eax
c001d537:	e8 08 35 ff ff       	call   c0010a44 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d53c:	83 c4 10             	add    esp,0x10
c001d53f:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001d544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d548:	89 10                	mov    DWORD PTR [eax],edx
c001d54a:	90                   	nop
c001d54b:	83 c4 0c             	add    esp,0xc
c001d54e:	c3                   	ret    
c001d54f:	90                   	nop

c001d550 <ATA::flush(bool)>:
c001d550:	53                   	push   ebx
c001d551:	83 ec 08             	sub    esp,0x8
c001d554:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d559:	19 c0                	sbb    eax,eax
c001d55b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d55f:	83 e0 fd             	and    eax,0xfffffffd
c001d562:	05 ea 00 00 00       	add    eax,0xea
c001d567:	50                   	push   eax
c001d568:	6a 07                	push   0x7
c001d56a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d571:	50                   	push   eax
c001d572:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d578:	e8 59 f3 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d57d:	83 c4 0c             	add    esp,0xc
c001d580:	6a 00                	push   0x0
c001d582:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d589:	50                   	push   eax
c001d58a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d590:	e8 f7 fe ff ff       	call   c001d48c <IDE::polling(unsigned char, unsigned int)>
c001d595:	83 c4 18             	add    esp,0x18
c001d598:	5b                   	pop    ebx
c001d599:	c3                   	ret    

c001d59a <ATA::readyForCommand()>:
c001d59a:	56                   	push   esi
c001d59b:	53                   	push   ebx
c001d59c:	31 db                	xor    ebx,ebx
c001d59e:	50                   	push   eax
c001d59f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5a3:	50                   	push   eax
c001d5a4:	6a 0c                	push   0xc
c001d5a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d5ad:	50                   	push   eax
c001d5ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5b4:	e8 dd f3 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d5b9:	83 c4 10             	add    esp,0x10
c001d5bc:	a8 88                	test   al,0x88
c001d5be:	74 23                	je     c001d5e3 <ATA::readyForCommand()+0x49>
c001d5c0:	43                   	inc    ebx
c001d5c1:	83 fb 63             	cmp    ebx,0x63
c001d5c4:	7e dd                	jle    c001d5a3 <ATA::readyForCommand()+0x9>
c001d5c6:	51                   	push   ecx
c001d5c7:	51                   	push   ecx
c001d5c8:	6a 00                	push   0x0
c001d5ca:	68 40 42 0f 00       	push   0xf4240
c001d5cf:	e8 e5 b9 ff ff       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001d5d4:	83 c4 10             	add    esp,0x10
c001d5d7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d5dd:	75 c4                	jne    c001d5a3 <ATA::readyForCommand()+0x9>
c001d5df:	31 c0                	xor    eax,eax
c001d5e1:	eb 02                	jmp    c001d5e5 <ATA::readyForCommand()+0x4b>
c001d5e3:	b0 01                	mov    al,0x1
c001d5e5:	5a                   	pop    edx
c001d5e6:	5b                   	pop    ebx
c001d5e7:	5e                   	pop    esi
c001d5e8:	c3                   	ret    
c001d5e9:	90                   	nop

c001d5ea <ATA::access(unsigned long long, int, void*, bool)>:
c001d5ea:	55                   	push   ebp
c001d5eb:	57                   	push   edi
c001d5ec:	56                   	push   esi
c001d5ed:	53                   	push   ebx
c001d5ee:	83 ec 2c             	sub    esp,0x2c
c001d5f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d5f5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d5f9:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5fc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d600:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d603:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d607:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d60b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d611:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d615:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d61b:	c1 e0 06             	shl    eax,0x6
c001d61e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d622:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d62a:	74 5d                	je     c001d689 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d62c:	89 fa                	mov    edx,edi
c001d62e:	89 f0                	mov    eax,esi
c001d630:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d634:	c1 ea 1c             	shr    edx,0x1c
c001d637:	89 d1                	mov    ecx,edx
c001d639:	09 c1                	or     ecx,eax
c001d63b:	74 25                	je     c001d662 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d63d:	31 ed                	xor    ebp,ebp
c001d63f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d646:	89 fa                	mov    edx,edi
c001d648:	89 f0                	mov    eax,esi
c001d64a:	0f ad d0             	shrd   eax,edx,cl
c001d64d:	d3 ea                	shr    edx,cl
c001d64f:	f6 c1 20             	test   cl,0x20
c001d652:	74 02                	je     c001d656 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d654:	89 d0                	mov    eax,edx
c001d656:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d65a:	45                   	inc    ebp
c001d65b:	83 fd 06             	cmp    ebp,0x6
c001d65e:	75 df                	jne    c001d63f <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d660:	eb 73                	jmp    c001d6d5 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d662:	89 f0                	mov    eax,esi
c001d664:	89 fa                	mov    edx,edi
c001d666:	0f ac d0 10          	shrd   eax,edx,0x10
c001d66a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d66f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d673:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d67a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d67f:	c1 ee 18             	shr    esi,0x18
c001d682:	bf 01 00 00 00       	mov    edi,0x1
c001d687:	eb 53                	jmp    c001d6dc <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d689:	6a 00                	push   0x0
c001d68b:	6a 3f                	push   0x3f
c001d68d:	57                   	push   edi
c001d68e:	56                   	push   esi
c001d68f:	e8 88 1f 00 00       	call   c001f61c <__umoddi3>
c001d694:	83 c4 10             	add    esp,0x10
c001d697:	40                   	inc    eax
c001d698:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d69c:	6a 00                	push   0x0
c001d69e:	68 f0 03 00 00       	push   0x3f0
c001d6a3:	57                   	push   edi
c001d6a4:	56                   	push   esi
c001d6a5:	e8 72 1e 00 00       	call   c001f51c <__udivdi3>
c001d6aa:	83 c4 10             	add    esp,0x10
c001d6ad:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d6b2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d6b9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d6be:	6a 00                	push   0x0
c001d6c0:	6a 3f                	push   0x3f
c001d6c2:	57                   	push   edi
c001d6c3:	31 ff                	xor    edi,edi
c001d6c5:	56                   	push   esi
c001d6c6:	e8 51 1e 00 00       	call   c001f51c <__udivdi3>
c001d6cb:	89 c6                	mov    esi,eax
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	83 e6 0f             	and    esi,0xf
c001d6d3:	eb 07                	jmp    c001d6dc <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d6d5:	31 f6                	xor    esi,esi
c001d6d7:	bf 02 00 00 00       	mov    edi,0x2
c001d6dc:	50                   	push   eax
c001d6dd:	6a 00                	push   0x0
c001d6df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6e6:	50                   	push   eax
c001d6e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6eb:	e8 f8 f3 ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001d6f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6f3:	e8 a2 fe ff ff       	call   c001d59a <ATA::readyForCommand()>
c001d6f8:	83 c4 10             	add    esp,0x10
c001d6fb:	84 c0                	test   al,al
c001d6fd:	75 0a                	jne    c001d709 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d6ff:	be 01 00 00 00       	mov    esi,0x1
c001d704:	e9 79 02 00 00       	jmp    c001d982 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d709:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d70f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d715:	c1 e0 04             	shl    eax,0x4
c001d718:	09 c6                	or     esi,eax
c001d71a:	89 f8                	mov    eax,edi
c001d71c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d723:	84 c0                	test   al,al
c001d725:	75 05                	jne    c001d72c <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d727:	83 ce a0             	or     esi,0xffffffa0
c001d72a:	eb 03                	jmp    c001d72f <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d72c:	83 ce e0             	or     esi,0xffffffe0
c001d72f:	89 f0                	mov    eax,esi
c001d731:	0f b6 f0             	movzx  esi,al
c001d734:	56                   	push   esi
c001d735:	6a 06                	push   0x6
c001d737:	51                   	push   ecx
c001d738:	52                   	push   edx
c001d739:	e8 98 f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d73e:	83 c4 10             	add    esp,0x10
c001d741:	6a 00                	push   0x0
c001d743:	6a 01                	push   0x1
c001d745:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d74c:	50                   	push   eax
c001d74d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d753:	e8 7e f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d758:	89 f8                	mov    eax,edi
c001d75a:	83 c4 10             	add    esp,0x10
c001d75d:	3c 02                	cmp    al,0x2
c001d75f:	75 6e                	jne    c001d7cf <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d761:	6a 00                	push   0x0
c001d763:	6a 08                	push   0x8
c001d765:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d76c:	50                   	push   eax
c001d76d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d773:	e8 5e f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d778:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d77d:	50                   	push   eax
c001d77e:	6a 09                	push   0x9
c001d780:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d787:	50                   	push   eax
c001d788:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d78e:	e8 43 f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d793:	83 c4 20             	add    esp,0x20
c001d796:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d79b:	50                   	push   eax
c001d79c:	6a 0a                	push   0xa
c001d79e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7a5:	50                   	push   eax
c001d7a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7ac:	e8 25 f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7b1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d7b6:	50                   	push   eax
c001d7b7:	6a 0b                	push   0xb
c001d7b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7c0:	50                   	push   eax
c001d7c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7c7:	e8 0a f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7cc:	83 c4 20             	add    esp,0x20
c001d7cf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d7d4:	50                   	push   eax
c001d7d5:	6a 02                	push   0x2
c001d7d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7de:	50                   	push   eax
c001d7df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7e5:	e8 ec f0 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ea:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d7ef:	50                   	push   eax
c001d7f0:	6a 03                	push   0x3
c001d7f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7f9:	50                   	push   eax
c001d7fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d800:	e8 d1 f0 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d805:	83 c4 20             	add    esp,0x20
c001d808:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d80d:	50                   	push   eax
c001d80e:	6a 04                	push   0x4
c001d810:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d817:	50                   	push   eax
c001d818:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d81e:	e8 b3 f0 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d823:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d828:	50                   	push   eax
c001d829:	6a 05                	push   0x5
c001d82b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d832:	50                   	push   eax
c001d833:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d839:	e8 98 f0 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d83e:	83 c4 20             	add    esp,0x20
c001d841:	89 f8                	mov    eax,edi
c001d843:	3c 02                	cmp    al,0x2
c001d845:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d84a:	75 06                	jne    c001d852 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d84c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d850:	75 40                	jne    c001d892 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d852:	89 f8                	mov    eax,edi
c001d854:	3c 02                	cmp    al,0x2
c001d856:	0f 95 c1             	setne  cl
c001d859:	74 0b                	je     c001d866 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d85b:	b8 30 00 00 00       	mov    eax,0x30
c001d860:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d864:	75 31                	jne    c001d897 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d866:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d869:	83 f2 01             	xor    edx,0x1
c001d86c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d871:	74 09                	je     c001d87c <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d873:	b8 24 00 00 00       	mov    eax,0x24
c001d878:	84 d2                	test   dl,dl
c001d87a:	75 1b                	jne    c001d897 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d87c:	84 c9                	test   cl,cl
c001d87e:	0f 84 7b fe ff ff    	je     c001d6ff <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d884:	b8 20 00 00 00       	mov    eax,0x20
c001d889:	84 d2                	test   dl,dl
c001d88b:	75 0a                	jne    c001d897 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d88d:	e9 6d fe ff ff       	jmp    c001d6ff <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d892:	b8 34 00 00 00       	mov    eax,0x34
c001d897:	50                   	push   eax
c001d898:	6a 07                	push   0x7
c001d89a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8a1:	50                   	push   eax
c001d8a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8a8:	e8 29 f0 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8ad:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d8b1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d8b5:	83 c4 10             	add    esp,0x10
c001d8b8:	85 f6                	test   esi,esi
c001d8ba:	0f 84 a9 00 00 00    	je     c001d969 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d8c0:	50                   	push   eax
c001d8c1:	6a 01                	push   0x1
c001d8c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8ca:	50                   	push   eax
c001d8cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8d1:	e8 b6 fb ff ff       	call   c001d48c <IDE::polling(unsigned char, unsigned int)>
c001d8d6:	83 c4 10             	add    esp,0x10
c001d8d9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d8df:	84 c0                	test   al,al
c001d8e1:	74 1d                	je     c001d900 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d8e3:	0f b6 f0             	movzx  esi,al
c001d8e6:	56                   	push   esi
c001d8e7:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d8ee:	0f b6 d2             	movzx  edx,dl
c001d8f1:	50                   	push   eax
c001d8f2:	52                   	push   edx
c001d8f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8f9:	e8 f8 f9 ff ff       	call   c001d2f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d8fe:	eb 7f                	jmp    c001d97f <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d900:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d905:	74 41                	je     c001d948 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d907:	31 c9                	xor    ecx,ecx
c001d909:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d90d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d911:	50                   	push   eax
c001d912:	50                   	push   eax
c001d913:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d91a:	50                   	push   eax
c001d91b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d921:	e8 9e ef ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001d926:	89 c2                	mov    edx,eax
c001d928:	89 e8                	mov    eax,ebp
c001d92a:	66 ef                	out    dx,ax
c001d92c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d930:	83 c4 10             	add    esp,0x10
c001d933:	41                   	inc    ecx
c001d934:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d93a:	75 cd                	jne    c001d909 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d93c:	4e                   	dec    esi
c001d93d:	81 c7 00 02 00 00    	add    edi,0x200
c001d943:	e9 70 ff ff ff       	jmp    c001d8b8 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d948:	51                   	push   ecx
c001d949:	51                   	push   ecx
c001d94a:	0f b6 d2             	movzx  edx,dl
c001d94d:	52                   	push   edx
c001d94e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d954:	e8 6b ef ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001d959:	b9 00 01 00 00       	mov    ecx,0x100
c001d95e:	89 c2                	mov    edx,eax
c001d960:	fc                   	cld    
c001d961:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d964:	83 c4 10             	add    esp,0x10
c001d967:	eb d3                	jmp    c001d93c <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d969:	31 f6                	xor    esi,esi
c001d96b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d96f:	74 11                	je     c001d982 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d971:	50                   	push   eax
c001d972:	50                   	push   eax
c001d973:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d978:	50                   	push   eax
c001d979:	53                   	push   ebx
c001d97a:	e8 d1 fb ff ff       	call   c001d550 <ATA::flush(bool)>
c001d97f:	83 c4 10             	add    esp,0x10
c001d982:	83 c4 2c             	add    esp,0x2c
c001d985:	89 f0                	mov    eax,esi
c001d987:	5b                   	pop    ebx
c001d988:	5e                   	pop    esi
c001d989:	5f                   	pop    edi
c001d98a:	5d                   	pop    ebp
c001d98b:	c3                   	ret    

c001d98c <ATA::read(unsigned long long, int, void*)>:
c001d98c:	57                   	push   edi
c001d98d:	b8 04 00 00 00       	mov    eax,0x4
c001d992:	56                   	push   esi
c001d993:	53                   	push   ebx
c001d994:	83 ec 10             	sub    esp,0x10
c001d997:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d99b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d99f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d9a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9a7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d9aa:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d9b0:	77 3b                	ja     c001d9ed <ATA::read(unsigned long long, int, void*)+0x61>
c001d9b2:	b8 06 00 00 00       	mov    eax,0x6
c001d9b7:	85 d2                	test   edx,edx
c001d9b9:	74 32                	je     c001d9ed <ATA::read(unsigned long long, int, void*)+0x61>
c001d9bb:	50                   	push   eax
c001d9bc:	50                   	push   eax
c001d9bd:	6a 00                	push   0x0
c001d9bf:	52                   	push   edx
c001d9c0:	53                   	push   ebx
c001d9c1:	57                   	push   edi
c001d9c2:	56                   	push   esi
c001d9c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9c7:	e8 1e fc ff ff       	call   c001d5ea <ATA::access(unsigned long long, int, void*, bool)>
c001d9cc:	83 c4 20             	add    esp,0x20
c001d9cf:	85 c0                	test   eax,eax
c001d9d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9d5:	75 11                	jne    c001d9e8 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d9d7:	01 1d 44 65 02 c0    	add    DWORD PTR ds:0xc0026544,ebx
c001d9dd:	e8 1e f6 fe ff       	call   c000d000 <VgaText::updateDiskUsage()>
c001d9e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9e6:	eb 05                	jmp    c001d9ed <ATA::read(unsigned long long, int, void*)+0x61>
c001d9e8:	b8 01 00 00 00       	mov    eax,0x1
c001d9ed:	83 c4 10             	add    esp,0x10
c001d9f0:	5b                   	pop    ebx
c001d9f1:	5e                   	pop    esi
c001d9f2:	5f                   	pop    edi
c001d9f3:	c3                   	ret    

c001d9f4 <ATA::write(unsigned long long, int, void*)>:
c001d9f4:	57                   	push   edi
c001d9f5:	b8 04 00 00 00       	mov    eax,0x4
c001d9fa:	56                   	push   esi
c001d9fb:	53                   	push   ebx
c001d9fc:	83 ec 10             	sub    esp,0x10
c001d9ff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001da03:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001da07:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001da0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da0f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001da12:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001da18:	77 3b                	ja     c001da55 <ATA::write(unsigned long long, int, void*)+0x61>
c001da1a:	b8 06 00 00 00       	mov    eax,0x6
c001da1f:	85 d2                	test   edx,edx
c001da21:	74 32                	je     c001da55 <ATA::write(unsigned long long, int, void*)+0x61>
c001da23:	50                   	push   eax
c001da24:	50                   	push   eax
c001da25:	6a 01                	push   0x1
c001da27:	52                   	push   edx
c001da28:	53                   	push   ebx
c001da29:	57                   	push   edi
c001da2a:	56                   	push   esi
c001da2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da2f:	e8 b6 fb ff ff       	call   c001d5ea <ATA::access(unsigned long long, int, void*, bool)>
c001da34:	83 c4 20             	add    esp,0x20
c001da37:	85 c0                	test   eax,eax
c001da39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da3d:	75 11                	jne    c001da50 <ATA::write(unsigned long long, int, void*)+0x5c>
c001da3f:	01 1d 40 65 02 c0    	add    DWORD PTR ds:0xc0026540,ebx
c001da45:	e8 b6 f5 fe ff       	call   c000d000 <VgaText::updateDiskUsage()>
c001da4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da4e:	eb 05                	jmp    c001da55 <ATA::write(unsigned long long, int, void*)+0x61>
c001da50:	b8 01 00 00 00       	mov    eax,0x1
c001da55:	83 c4 10             	add    esp,0x10
c001da58:	5b                   	pop    ebx
c001da59:	5e                   	pop    esi
c001da5a:	5f                   	pop    edi
c001da5b:	c3                   	ret    

c001da5c <ATA::detectCHS()>:
c001da5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da60:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001da66:	c1 e0 06             	shl    eax,0x6
c001da69:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001da6f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001da79:	c7 44 24 04 c3 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc00237c3
c001da81:	e9 cc 7f ff ff       	jmp    c0015a52 <Krnl::panic(char const*)>

c001da86 <ATA::open(int, int, void*)>:
c001da86:	53                   	push   ebx
c001da87:	83 ec 08             	sub    esp,0x8
c001da8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da96:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da9c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001daa2:	c1 e0 06             	shl    eax,0x6
c001daa5:	01 d0                	add    eax,edx
c001daa7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001daae:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dab4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dabb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dac5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dacb:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dad2:	75 0c                	jne    c001dae0 <ATA::open(int, int, void*)+0x5a>
c001dad4:	83 ec 0c             	sub    esp,0xc
c001dad7:	53                   	push   ebx
c001dad8:	e8 7f ff ff ff       	call   c001da5c <ATA::detectCHS()>
c001dadd:	83 c4 10             	add    esp,0x10
c001dae0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dae6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001daec:	c1 e0 06             	shl    eax,0x6
c001daef:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001daf6:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db00:	d1 e8                	shr    eax,1
c001db02:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001db08:	6a 04                	push   0x4
c001db0a:	6a 0c                	push   0xc
c001db0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db13:	50                   	push   eax
c001db14:	52                   	push   edx
c001db15:	e8 bc ed ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db1a:	90                   	nop
c001db1b:	90                   	nop
c001db1c:	6a 00                	push   0x0
c001db1e:	6a 0c                	push   0xc
c001db20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db27:	50                   	push   eax
c001db28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db2e:	e8 a3 ed ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db33:	83 c4 14             	add    esp,0x14
c001db36:	53                   	push   ebx
c001db37:	e8 70 2f ff ff       	call   c0010aac <PhysicalDisk::startCache()>
c001db3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db3f:	e8 3e 4f ff ff       	call   c0012a82 <createPartitionsForDisk(PhysicalDisk*)>
c001db44:	83 c4 18             	add    esp,0x18
c001db47:	31 c0                	xor    eax,eax
c001db49:	5b                   	pop    ebx
c001db4a:	c3                   	ret    
c001db4b:	90                   	nop

c001db4c <ATAPI::write(unsigned long long, int, void*)>:
c001db4c:	b8 03 00 00 00       	mov    eax,0x3
c001db51:	c3                   	ret    

c001db52 <ATAPI::close(int, int, void*)>:
c001db52:	83 ec 0c             	sub    esp,0xc
c001db55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db59:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db5f:	85 c0                	test   eax,eax
c001db61:	74 0c                	je     c001db6f <ATAPI::close(int, int, void*)+0x1d>
c001db63:	83 ec 0c             	sub    esp,0xc
c001db66:	8b 10                	mov    edx,DWORD PTR [eax]
c001db68:	50                   	push   eax
c001db69:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db6c:	83 c4 10             	add    esp,0x10
c001db6f:	31 c0                	xor    eax,eax
c001db71:	83 c4 0c             	add    esp,0xc
c001db74:	c3                   	ret    
c001db75:	90                   	nop

c001db76 <ATAPI::ATAPI()>:
c001db76:	83 ec 0c             	sub    esp,0xc
c001db79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7d:	83 ec 04             	sub    esp,0x4
c001db80:	68 00 08 00 00       	push   0x800
c001db85:	68 0c 38 02 c0       	push   0xc002380c
c001db8a:	50                   	push   eax
c001db8b:	e8 b4 2e ff ff       	call   c0010a44 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db90:	83 c4 10             	add    esp,0x10
c001db93:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001db98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db9c:	89 10                	mov    DWORD PTR [eax],edx
c001db9e:	90                   	nop
c001db9f:	83 c4 0c             	add    esp,0xc
c001dba2:	c3                   	ret    
c001dba3:	90                   	nop

c001dba4 <ATAPI::readyForCommand()>:
c001dba4:	56                   	push   esi
c001dba5:	53                   	push   ebx
c001dba6:	31 db                	xor    ebx,ebx
c001dba8:	50                   	push   eax
c001dba9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dbad:	50                   	push   eax
c001dbae:	6a 0c                	push   0xc
c001dbb0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dbb7:	50                   	push   eax
c001dbb8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dbbe:	e8 d3 ed ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001dbc3:	83 c4 10             	add    esp,0x10
c001dbc6:	a8 88                	test   al,0x88
c001dbc8:	74 23                	je     c001dbed <ATAPI::readyForCommand()+0x49>
c001dbca:	43                   	inc    ebx
c001dbcb:	83 fb 63             	cmp    ebx,0x63
c001dbce:	7e dd                	jle    c001dbad <ATAPI::readyForCommand()+0x9>
c001dbd0:	51                   	push   ecx
c001dbd1:	51                   	push   ecx
c001dbd2:	6a 00                	push   0x0
c001dbd4:	68 40 42 0f 00       	push   0xf4240
c001dbd9:	e8 db b3 ff ff       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dbe7:	75 c4                	jne    c001dbad <ATAPI::readyForCommand()+0x9>
c001dbe9:	31 c0                	xor    eax,eax
c001dbeb:	eb 02                	jmp    c001dbef <ATAPI::readyForCommand()+0x4b>
c001dbed:	b0 01                	mov    al,0x1
c001dbef:	5a                   	pop    edx
c001dbf0:	5b                   	pop    ebx
c001dbf1:	5e                   	pop    esi
c001dbf2:	c3                   	ret    
c001dbf3:	90                   	nop

c001dbf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dbf4:	55                   	push   ebp
c001dbf5:	57                   	push   edi
c001dbf6:	56                   	push   esi
c001dbf7:	53                   	push   ebx
c001dbf8:	83 ec 20             	sub    esp,0x20
c001dbfb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dbff:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dc03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc07:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dc0b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dc0f:	6a 01                	push   0x1
c001dc11:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc18:	50                   	push   eax
c001dc19:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc1f:	e8 c4 ee ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001dc24:	5e                   	pop    esi
c001dc25:	58                   	pop    eax
c001dc26:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc2d:	50                   	push   eax
c001dc2e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc34:	e8 77 ec ff ff       	call   c001c8b0 <IDE::prepareInterrupt(unsigned char)>
c001dc39:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc3c:	e8 63 ff ff ff       	call   c001dba4 <ATAPI::readyForCommand()>
c001dc41:	83 c4 10             	add    esp,0x10
c001dc44:	84 c0                	test   al,al
c001dc46:	75 0a                	jne    c001dc52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dc48:	bb 01 00 00 00       	mov    ebx,0x1
c001dc4d:	e9 57 02 00 00       	jmp    c001dea9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc52:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001dc58:	c1 e0 04             	shl    eax,0x4
c001dc5b:	0f b6 c0             	movzx  eax,al
c001dc5e:	50                   	push   eax
c001dc5f:	6a 06                	push   0x6
c001dc61:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc68:	50                   	push   eax
c001dc69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc6f:	e8 62 ec ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc74:	6a 00                	push   0x0
c001dc76:	6a 01                	push   0x1
c001dc78:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc7f:	50                   	push   eax
c001dc80:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc86:	e8 4b ec ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc8b:	83 c4 20             	add    esp,0x20
c001dc8e:	0f b6 c3             	movzx  eax,bl
c001dc91:	50                   	push   eax
c001dc92:	6a 04                	push   0x4
c001dc94:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc9b:	50                   	push   eax
c001dc9c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dca2:	0f b6 df             	movzx  ebx,bh
c001dca5:	e8 2c ec ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcaa:	53                   	push   ebx
c001dcab:	6a 05                	push   0x5
c001dcad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcb4:	50                   	push   eax
c001dcb5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcbb:	e8 16 ec ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcc0:	83 c4 20             	add    esp,0x20
c001dcc3:	68 a0 00 00 00       	push   0xa0
c001dcc8:	6a 07                	push   0x7
c001dcca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcd1:	50                   	push   eax
c001dcd2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcd8:	e8 f9 eb ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcdd:	83 c4 0c             	add    esp,0xc
c001dce0:	6a 01                	push   0x1
c001dce2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dce9:	50                   	push   eax
c001dcea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcf0:	e8 97 f7 ff ff       	call   c001d48c <IDE::polling(unsigned char, unsigned int)>
c001dcf5:	83 c4 10             	add    esp,0x10
c001dcf8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dcfe:	84 c0                	test   al,al
c001dd00:	74 23                	je     c001dd25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dd02:	0f b6 d8             	movzx  ebx,al
c001dd05:	53                   	push   ebx
c001dd06:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dd0d:	0f b6 d2             	movzx  edx,dl
c001dd10:	50                   	push   eax
c001dd11:	52                   	push   edx
c001dd12:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd18:	e8 d9 f5 ff ff       	call   c001d2f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dd1d:	83 c4 10             	add    esp,0x10
c001dd20:	e9 84 01 00 00       	jmp    c001dea9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd25:	53                   	push   ebx
c001dd26:	53                   	push   ebx
c001dd27:	0f b6 d2             	movzx  edx,dl
c001dd2a:	52                   	push   edx
c001dd2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd31:	e8 8e eb ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001dd36:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dd3a:	b9 06 00 00 00       	mov    ecx,0x6
c001dd3f:	89 c2                	mov    edx,eax
c001dd41:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dd44:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dd48:	83 c4 10             	add    esp,0x10
c001dd4b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd51:	85 db                	test   ebx,ebx
c001dd53:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd5a:	0f 84 ec 00 00 00    	je     c001de4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dd60:	51                   	push   ecx
c001dd61:	51                   	push   ecx
c001dd62:	52                   	push   edx
c001dd63:	50                   	push   eax
c001dd64:	e8 db ec ff ff       	call   c001ca44 <IDE::waitInterrupt(unsigned char)>
c001dd69:	83 c4 10             	add    esp,0x10
c001dd6c:	84 c0                	test   al,al
c001dd6e:	0f 84 d4 fe ff ff    	je     c001dc48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd74:	56                   	push   esi
c001dd75:	56                   	push   esi
c001dd76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd7d:	50                   	push   eax
c001dd7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd84:	e8 27 eb ff ff       	call   c001c8b0 <IDE::prepareInterrupt(unsigned char)>
c001dd89:	83 c4 0c             	add    esp,0xc
c001dd8c:	6a 04                	push   0x4
c001dd8e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd95:	50                   	push   eax
c001dd96:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd9c:	e8 f5 eb ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001dda1:	83 c4 0c             	add    esp,0xc
c001dda4:	6a 05                	push   0x5
c001dda6:	89 c6                	mov    esi,eax
c001dda8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddaf:	50                   	push   eax
c001ddb0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddb6:	e8 db eb ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001ddbb:	89 f1                	mov    ecx,esi
c001ddbd:	0f b6 c0             	movzx  eax,al
c001ddc0:	c1 e0 08             	shl    eax,0x8
c001ddc3:	0f b6 f1             	movzx  esi,cl
c001ddc6:	09 c6                	or     esi,eax
c001ddc8:	d1 fe                	sar    esi,1
c001ddca:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ddce:	83 c4 10             	add    esp,0x10
c001ddd1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ddd6:	74 41                	je     c001de19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ddd8:	31 c9                	xor    ecx,ecx
c001ddda:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dde0:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dde4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ddeb:	75 0a                	jne    c001ddf7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dded:	01 c9                	add    ecx,ecx
c001ddef:	01 cd                	add    ebp,ecx
c001ddf1:	4b                   	dec    ebx
c001ddf2:	e9 54 ff ff ff       	jmp    c001dd4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ddf7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ddfc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de00:	51                   	push   ecx
c001de01:	51                   	push   ecx
c001de02:	52                   	push   edx
c001de03:	50                   	push   eax
c001de04:	e8 bb ea ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001de09:	89 c2                	mov    edx,eax
c001de0b:	89 f0                	mov    eax,esi
c001de0d:	66 ef                	out    dx,ax
c001de0f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001de13:	83 c4 10             	add    esp,0x10
c001de16:	41                   	inc    ecx
c001de17:	eb c1                	jmp    c001ddda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001de19:	31 f6                	xor    esi,esi
c001de1b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de21:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001de25:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de2c:	75 06                	jne    c001de34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001de2e:	01 f6                	add    esi,esi
c001de30:	01 f5                	add    ebp,esi
c001de32:	eb bd                	jmp    c001ddf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001de34:	51                   	push   ecx
c001de35:	51                   	push   ecx
c001de36:	52                   	push   edx
c001de37:	50                   	push   eax
c001de38:	e8 87 ea ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001de3d:	89 c2                	mov    edx,eax
c001de3f:	66 ed                	in     ax,dx
c001de41:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001de46:	83 c4 10             	add    esp,0x10
c001de49:	46                   	inc    esi
c001de4a:	eb cf                	jmp    c001de1b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001de4c:	51                   	push   ecx
c001de4d:	51                   	push   ecx
c001de4e:	52                   	push   edx
c001de4f:	50                   	push   eax
c001de50:	e8 ef eb ff ff       	call   c001ca44 <IDE::waitInterrupt(unsigned char)>
c001de55:	83 c4 10             	add    esp,0x10
c001de58:	84 c0                	test   al,al
c001de5a:	0f 84 e8 fd ff ff    	je     c001dc48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001de60:	52                   	push   edx
c001de61:	bb a0 86 01 00       	mov    ebx,0x186a0
c001de66:	52                   	push   edx
c001de67:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de6e:	50                   	push   eax
c001de6f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de75:	e8 36 ea ff ff       	call   c001c8b0 <IDE::prepareInterrupt(unsigned char)>
c001de7a:	83 c4 10             	add    esp,0x10
c001de7d:	50                   	push   eax
c001de7e:	50                   	push   eax
c001de7f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de86:	50                   	push   eax
c001de87:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de8d:	e8 32 ea ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001de92:	8d 50 07             	lea    edx,[eax+0x7]
c001de95:	ec                   	in     al,dx
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	a8 88                	test   al,0x88
c001de9b:	74 0a                	je     c001dea7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001de9d:	4b                   	dec    ebx
c001de9e:	75 dd                	jne    c001de7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dea0:	bb 02 00 00 00       	mov    ebx,0x2
c001dea5:	eb 02                	jmp    c001dea9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dea7:	31 db                	xor    ebx,ebx
c001dea9:	83 c4 1c             	add    esp,0x1c
c001deac:	89 d8                	mov    eax,ebx
c001deae:	5b                   	pop    ebx
c001deaf:	5e                   	pop    esi
c001deb0:	5f                   	pop    edi
c001deb1:	5d                   	pop    ebp
c001deb2:	c3                   	ret    
c001deb3:	90                   	nop

c001deb4 <ATAPI::diskRemoved()>:
c001deb4:	83 ec 18             	sub    esp,0x18
c001deb7:	68 17 38 02 c0       	push   0xc0023817
c001debc:	e8 68 13 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001dec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dec5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001decc:	83 c4 1c             	add    esp,0x1c
c001decf:	c3                   	ret    

c001ded0 <ATAPI::eject()>:
c001ded0:	57                   	push   edi
c001ded1:	b9 03 00 00 00       	mov    ecx,0x3
c001ded6:	53                   	push   ebx
c001ded7:	83 ec 14             	sub    esp,0x14
c001deda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dede:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dee2:	fc                   	cld    
c001dee3:	31 c0                	xor    eax,eax
c001dee5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dee7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001deec:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001def1:	50                   	push   eax
c001def2:	50                   	push   eax
c001def3:	6a 00                	push   0x0
c001def5:	6a 00                	push   0x0
c001def7:	6a 00                	push   0x0
c001def9:	6a 02                	push   0x2
c001defb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001deff:	50                   	push   eax
c001df00:	53                   	push   ebx
c001df01:	e8 ee fc ff ff       	call   c001dbf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df06:	83 c4 14             	add    esp,0x14
c001df09:	53                   	push   ebx
c001df0a:	e8 a5 ff ff ff       	call   c001deb4 <ATAPI::diskRemoved()>
c001df0f:	83 c4 24             	add    esp,0x24
c001df12:	5b                   	pop    ebx
c001df13:	5f                   	pop    edi
c001df14:	c3                   	ret    
c001df15:	90                   	nop

c001df16 <ATAPI::diskInserted()>:
c001df16:	53                   	push   ebx
c001df17:	83 ec 14             	sub    esp,0x14
c001df1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001df1e:	68 2d 38 02 c0       	push   0xc002382d
c001df23:	e8 01 13 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001df28:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001df2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df32:	e8 75 2b ff ff       	call   c0010aac <PhysicalDisk::startCache()>
c001df37:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001df3b:	83 c4 18             	add    esp,0x18
c001df3e:	5b                   	pop    ebx
c001df3f:	e9 3e 4b ff ff       	jmp    c0012a82 <createPartitionsForDisk(PhysicalDisk*)>

c001df44 <ATAPI::detectMedia()>:
c001df44:	56                   	push   esi
c001df45:	53                   	push   ebx
c001df46:	83 ec 28             	sub    esp,0x28
c001df49:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df4d:	6a 0c                	push   0xc
c001df4f:	6a 00                	push   0x0
c001df51:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001df55:	56                   	push   esi
c001df56:	e8 7d 27 fe ff       	call   c00006d8 <memset>
c001df5b:	58                   	pop    eax
c001df5c:	5a                   	pop    edx
c001df5d:	6a 00                	push   0x0
c001df5f:	6a 00                	push   0x0
c001df61:	6a 00                	push   0x0
c001df63:	6a 00                	push   0x0
c001df65:	56                   	push   esi
c001df66:	53                   	push   ebx
c001df67:	e8 88 fc ff ff       	call   c001dbf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df6c:	83 c4 1c             	add    esp,0x1c
c001df6f:	6a 0c                	push   0xc
c001df71:	6a 00                	push   0x0
c001df73:	56                   	push   esi
c001df74:	e8 5f 27 fe ff       	call   c00006d8 <memset>
c001df79:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001df7e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001df83:	59                   	pop    ecx
c001df84:	58                   	pop    eax
c001df85:	6a 01                	push   0x1
c001df87:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001df8b:	50                   	push   eax
c001df8c:	6a 00                	push   0x0
c001df8e:	6a 12                	push   0x12
c001df90:	56                   	push   esi
c001df91:	53                   	push   ebx
c001df92:	e8 5d fc ff ff       	call   c001dbf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df97:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001df9b:	83 c4 20             	add    esp,0x20
c001df9e:	83 e0 7f             	and    eax,0x7f
c001dfa1:	3c 70                	cmp    al,0x70
c001dfa3:	74 15                	je     c001dfba <ATAPI::detectMedia()+0x76>
c001dfa5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfac:	75 0c                	jne    c001dfba <ATAPI::detectMedia()+0x76>
c001dfae:	83 ec 0c             	sub    esp,0xc
c001dfb1:	53                   	push   ebx
c001dfb2:	e8 5f ff ff ff       	call   c001df16 <ATAPI::diskInserted()>
c001dfb7:	83 c4 10             	add    esp,0x10
c001dfba:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dfbe:	83 e0 0f             	and    eax,0xf
c001dfc1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dfc6:	75 18                	jne    c001dfe0 <ATAPI::detectMedia()+0x9c>
c001dfc8:	3c 02                	cmp    al,0x2
c001dfca:	75 14                	jne    c001dfe0 <ATAPI::detectMedia()+0x9c>
c001dfcc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfd3:	74 24                	je     c001dff9 <ATAPI::detectMedia()+0xb5>
c001dfd5:	83 ec 0c             	sub    esp,0xc
c001dfd8:	53                   	push   ebx
c001dfd9:	e8 d6 fe ff ff       	call   c001deb4 <ATAPI::diskRemoved()>
c001dfde:	eb 16                	jmp    c001dff6 <ATAPI::detectMedia()+0xb2>
c001dfe0:	84 c0                	test   al,al
c001dfe2:	75 15                	jne    c001dff9 <ATAPI::detectMedia()+0xb5>
c001dfe4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfeb:	75 0c                	jne    c001dff9 <ATAPI::detectMedia()+0xb5>
c001dfed:	83 ec 0c             	sub    esp,0xc
c001dff0:	53                   	push   ebx
c001dff1:	e8 20 ff ff ff       	call   c001df16 <ATAPI::diskInserted()>
c001dff6:	83 c4 10             	add    esp,0x10
c001dff9:	83 c4 24             	add    esp,0x24
c001dffc:	5b                   	pop    ebx
c001dffd:	5e                   	pop    esi
c001dffe:	c3                   	ret    
c001dfff:	90                   	nop

c001e000 <ATAPI::open(int, int, void*)>:
c001e000:	53                   	push   ebx
c001e001:	83 ec 08             	sub    esp,0x8
c001e004:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e00c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e010:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e016:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e01c:	c1 e0 06             	shl    eax,0x6
c001e01f:	01 d0                	add    eax,edx
c001e021:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e028:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e02e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e035:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e03f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e045:	6a 04                	push   0x4
c001e047:	6a 0c                	push   0xc
c001e049:	51                   	push   ecx
c001e04a:	52                   	push   edx
c001e04b:	e8 86 e8 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e050:	90                   	nop
c001e051:	90                   	nop
c001e052:	6a 00                	push   0x0
c001e054:	6a 0c                	push   0xc
c001e056:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e05d:	50                   	push   eax
c001e05e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e064:	e8 6d e8 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e069:	83 c4 14             	add    esp,0x14
c001e06c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e073:	53                   	push   ebx
c001e074:	e8 cb fe ff ff       	call   c001df44 <ATAPI::detectMedia()>
c001e079:	83 c4 18             	add    esp,0x18
c001e07c:	31 c0                	xor    eax,eax
c001e07e:	5b                   	pop    ebx
c001e07f:	c3                   	ret    

c001e080 <ATAPI::read(unsigned long long, int, void*)>:
c001e080:	55                   	push   ebp
c001e081:	57                   	push   edi
c001e082:	56                   	push   esi
c001e083:	53                   	push   ebx
c001e084:	83 ec 1c             	sub    esp,0x1c
c001e087:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e08b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e08f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e093:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e09a:	74 3c                	je     c001e0d8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e09c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e0a0:	b9 03 00 00 00       	mov    ecx,0x3
c001e0a5:	fc                   	cld    
c001e0a6:	31 c0                	xor    eax,eax
c001e0a8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0aa:	0f ce                	bswap  esi
c001e0ac:	89 e8                	mov    eax,ebp
c001e0ae:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e0b3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e0b7:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e0bb:	50                   	push   eax
c001e0bc:	50                   	push   eax
c001e0bd:	55                   	push   ebp
c001e0be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0c2:	c1 e5 0b             	shl    ebp,0xb
c001e0c5:	6a 00                	push   0x0
c001e0c7:	55                   	push   ebp
c001e0c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0cc:	50                   	push   eax
c001e0cd:	53                   	push   ebx
c001e0ce:	e8 21 fb ff ff       	call   c001dbf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0d3:	83 c4 20             	add    esp,0x20
c001e0d6:	eb 1a                	jmp    c001e0f2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e0d8:	83 ec 0c             	sub    esp,0xc
c001e0db:	53                   	push   ebx
c001e0dc:	e8 63 fe ff ff       	call   c001df44 <ATAPI::detectMedia()>
c001e0e1:	83 c4 10             	add    esp,0x10
c001e0e4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0eb:	75 af                	jne    c001e09c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e0ed:	b8 02 00 00 00       	mov    eax,0x2
c001e0f2:	83 c4 1c             	add    esp,0x1c
c001e0f5:	5b                   	pop    ebx
c001e0f6:	5e                   	pop    esi
c001e0f7:	5f                   	pop    edi
c001e0f8:	5d                   	pop    ebp
c001e0f9:	c3                   	ret    

c001e0fa <AVX::open(int, int, void*)>:
c001e0fa:	83 ec 0c             	sub    esp,0xc
c001e0fd:	e8 96 10 00 00       	call   c001f198 <avxInit>
c001e102:	b8 00 00 00 00       	mov    eax,0x0
c001e107:	83 c4 0c             	add    esp,0xc
c001e10a:	c3                   	ret    
c001e10b:	90                   	nop

c001e10c <AVX::close(int, int, void*)>:
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	e8 85 10 00 00       	call   c001f199 <avxClose>
c001e114:	b8 00 00 00 00       	mov    eax,0x0
c001e119:	83 c4 0c             	add    esp,0xc
c001e11c:	c3                   	ret    
c001e11d:	90                   	nop

c001e11e <AVX::available()>:
c001e11e:	83 ec 0c             	sub    esp,0xc
c001e121:	e8 6a 10 00 00       	call   c001f190 <avxDetect>
c001e126:	85 c0                	test   eax,eax
c001e128:	0f 95 c0             	setne  al
c001e12b:	83 c4 0c             	add    esp,0xc
c001e12e:	c3                   	ret    
c001e12f:	90                   	nop

c001e130 <AVX::save(void*)>:
c001e130:	83 ec 0c             	sub    esp,0xc
c001e133:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e137:	83 ec 0c             	sub    esp,0xc
c001e13a:	50                   	push   eax
c001e13b:	e8 56 10 00 00       	call   c001f196 <avxSave>
c001e140:	83 c4 10             	add    esp,0x10
c001e143:	90                   	nop
c001e144:	83 c4 0c             	add    esp,0xc
c001e147:	c3                   	ret    

c001e148 <AVX::load(void*)>:
c001e148:	83 ec 0c             	sub    esp,0xc
c001e14b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e14f:	83 ec 0c             	sub    esp,0xc
c001e152:	50                   	push   eax
c001e153:	e8 3f 10 00 00       	call   c001f197 <avxLoad>
c001e158:	83 c4 10             	add    esp,0x10
c001e15b:	90                   	nop
c001e15c:	83 c4 0c             	add    esp,0xc
c001e15f:	c3                   	ret    

c001e160 <AVX::AVX()>:
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e167:	83 ec 08             	sub    esp,0x8
c001e16a:	68 78 38 02 c0       	push   0xc0023878
c001e16f:	50                   	push   eax
c001e170:	e8 ad 29 ff ff       	call   c0010b22 <FPU::FPU(char const*)>
c001e175:	83 c4 10             	add    esp,0x10
c001e178:	ba 88 38 02 c0       	mov    edx,0xc0023888
c001e17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e181:	89 10                	mov    DWORD PTR [eax],edx
c001e183:	90                   	nop
c001e184:	83 c4 0c             	add    esp,0xc
c001e187:	c3                   	ret    

c001e188 <MMX::available()>:
c001e188:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e18d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e193:	83 e0 20             	and    eax,0x20
c001e196:	84 c0                	test   al,al
c001e198:	0f 95 c0             	setne  al
c001e19b:	c3                   	ret    

c001e19c <MMX::open(int, int, void*)>:
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	e8 68 10 00 00       	call   c001f20c <x87Init>
c001e1a4:	b8 00 00 00 00       	mov    eax,0x0
c001e1a9:	83 c4 0c             	add    esp,0xc
c001e1ac:	c3                   	ret    
c001e1ad:	90                   	nop

c001e1ae <MMX::close(int, int, void*)>:
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	e8 70 10 00 00       	call   c001f226 <x87Close>
c001e1b6:	b8 00 00 00 00       	mov    eax,0x0
c001e1bb:	83 c4 0c             	add    esp,0xc
c001e1be:	c3                   	ret    
c001e1bf:	90                   	nop

c001e1c0 <MMX::save(void*)>:
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1c7:	83 ec 0c             	sub    esp,0xc
c001e1ca:	50                   	push   eax
c001e1cb:	e8 31 10 00 00       	call   c001f201 <x87Save>
c001e1d0:	83 c4 10             	add    esp,0x10
c001e1d3:	90                   	nop
c001e1d4:	83 c4 0c             	add    esp,0xc
c001e1d7:	c3                   	ret    

c001e1d8 <MMX::load(void*)>:
c001e1d8:	83 ec 0c             	sub    esp,0xc
c001e1db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1df:	83 ec 0c             	sub    esp,0xc
c001e1e2:	50                   	push   eax
c001e1e3:	e8 1f 10 00 00       	call   c001f207 <x87Load>
c001e1e8:	83 c4 10             	add    esp,0x10
c001e1eb:	90                   	nop
c001e1ec:	83 c4 0c             	add    esp,0xc
c001e1ef:	c3                   	ret    

c001e1f0 <MMX::MMX()>:
c001e1f0:	83 ec 0c             	sub    esp,0xc
c001e1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f7:	83 ec 08             	sub    esp,0x8
c001e1fa:	68 b8 38 02 c0       	push   0xc00238b8
c001e1ff:	50                   	push   eax
c001e200:	e8 1d 29 ff ff       	call   c0010b22 <FPU::FPU(char const*)>
c001e205:	83 c4 10             	add    esp,0x10
c001e208:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c001e20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e211:	89 10                	mov    DWORD PTR [eax],edx
c001e213:	90                   	nop
c001e214:	83 c4 0c             	add    esp,0xc
c001e217:	c3                   	ret    

c001e218 <SSE::open(int, int, void*)>:
c001e218:	83 ec 0c             	sub    esp,0xc
c001e21b:	e8 a7 0f 00 00       	call   c001f1c7 <sseInit>
c001e220:	b8 00 00 00 00       	mov    eax,0x0
c001e225:	83 c4 0c             	add    esp,0xc
c001e228:	c3                   	ret    
c001e229:	90                   	nop

c001e22a <SSE::close(int, int, void*)>:
c001e22a:	83 ec 0c             	sub    esp,0xc
c001e22d:	e8 a5 0f 00 00       	call   c001f1d7 <sseClose>
c001e232:	b8 00 00 00 00       	mov    eax,0x0
c001e237:	83 c4 0c             	add    esp,0xc
c001e23a:	c3                   	ret    
c001e23b:	90                   	nop

c001e23c <SSE::available()>:
c001e23c:	83 ec 1c             	sub    esp,0x1c
c001e23f:	e8 5c 0f 00 00       	call   c001f1a0 <sseDetect>
c001e244:	85 c0                	test   eax,eax
c001e246:	0f 95 c0             	setne  al
c001e249:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e24d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e251:	83 c4 1c             	add    esp,0x1c
c001e254:	c3                   	ret    
c001e255:	90                   	nop

c001e256 <SSE::save(void*)>:
c001e256:	83 ec 0c             	sub    esp,0xc
c001e259:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e25d:	83 ec 0c             	sub    esp,0xc
c001e260:	50                   	push   eax
c001e261:	e8 55 0f 00 00       	call   c001f1bb <sseSave>
c001e266:	83 c4 10             	add    esp,0x10
c001e269:	90                   	nop
c001e26a:	83 c4 0c             	add    esp,0xc
c001e26d:	c3                   	ret    

c001e26e <SSE::load(void*)>:
c001e26e:	83 ec 0c             	sub    esp,0xc
c001e271:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e275:	83 ec 0c             	sub    esp,0xc
c001e278:	50                   	push   eax
c001e279:	e8 43 0f 00 00       	call   c001f1c1 <sseLoad>
c001e27e:	83 c4 10             	add    esp,0x10
c001e281:	90                   	nop
c001e282:	83 c4 0c             	add    esp,0xc
c001e285:	c3                   	ret    

c001e286 <SSE::SSE()>:
c001e286:	83 ec 0c             	sub    esp,0xc
c001e289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28d:	83 ec 08             	sub    esp,0x8
c001e290:	68 f8 38 02 c0       	push   0xc00238f8
c001e295:	50                   	push   eax
c001e296:	e8 87 28 ff ff       	call   c0010b22 <FPU::FPU(char const*)>
c001e29b:	83 c4 10             	add    esp,0x10
c001e29e:	ba 08 39 02 c0       	mov    edx,0xc0023908
c001e2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a7:	89 10                	mov    DWORD PTR [eax],edx
c001e2a9:	90                   	nop
c001e2aa:	83 c4 0c             	add    esp,0xc
c001e2ad:	c3                   	ret    

c001e2ae <x87::open(int, int, void*)>:
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	e8 56 0f 00 00       	call   c001f20c <x87Init>
c001e2b6:	b8 00 00 00 00       	mov    eax,0x0
c001e2bb:	83 c4 0c             	add    esp,0xc
c001e2be:	c3                   	ret    
c001e2bf:	90                   	nop

c001e2c0 <x87::close(int, int, void*)>:
c001e2c0:	83 ec 0c             	sub    esp,0xc
c001e2c3:	e8 5e 0f 00 00       	call   c001f226 <x87Close>
c001e2c8:	b8 00 00 00 00       	mov    eax,0x0
c001e2cd:	83 c4 0c             	add    esp,0xc
c001e2d0:	c3                   	ret    
c001e2d1:	90                   	nop

c001e2d2 <x87::available()>:
c001e2d2:	83 ec 0c             	sub    esp,0xc
c001e2d5:	e8 0c 0f 00 00       	call   c001f1e6 <x87Detect>
c001e2da:	85 c0                	test   eax,eax
c001e2dc:	0f 95 c0             	setne  al
c001e2df:	83 c4 0c             	add    esp,0xc
c001e2e2:	c3                   	ret    
c001e2e3:	90                   	nop

c001e2e4 <x87::save(void*)>:
c001e2e4:	83 ec 0c             	sub    esp,0xc
c001e2e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2eb:	83 ec 0c             	sub    esp,0xc
c001e2ee:	50                   	push   eax
c001e2ef:	e8 0d 0f 00 00       	call   c001f201 <x87Save>
c001e2f4:	83 c4 10             	add    esp,0x10
c001e2f7:	90                   	nop
c001e2f8:	83 c4 0c             	add    esp,0xc
c001e2fb:	c3                   	ret    

c001e2fc <x87::load(void*)>:
c001e2fc:	83 ec 0c             	sub    esp,0xc
c001e2ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e303:	83 ec 0c             	sub    esp,0xc
c001e306:	50                   	push   eax
c001e307:	e8 fb 0e 00 00       	call   c001f207 <x87Load>
c001e30c:	83 c4 10             	add    esp,0x10
c001e30f:	90                   	nop
c001e310:	83 c4 0c             	add    esp,0xc
c001e313:	c3                   	ret    

c001e314 <x87::x87()>:
c001e314:	83 ec 0c             	sub    esp,0xc
c001e317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31b:	83 ec 08             	sub    esp,0x8
c001e31e:	68 38 39 02 c0       	push   0xc0023938
c001e323:	50                   	push   eax
c001e324:	e8 f9 27 ff ff       	call   c0010b22 <FPU::FPU(char const*)>
c001e329:	83 c4 10             	add    esp,0x10
c001e32c:	ba 48 39 02 c0       	mov    edx,0xc0023948
c001e331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e335:	89 10                	mov    DWORD PTR [eax],edx
c001e337:	90                   	nop
c001e338:	83 c4 0c             	add    esp,0xc
c001e33b:	c3                   	ret    

c001e33c <APIC::disable()>:
c001e33c:	90                   	nop
c001e33d:	c3                   	ret    

c001e33e <APIC::close(int, int, void*)>:
c001e33e:	55                   	push   ebp
c001e33f:	89 e5                	mov    ebp,esp
c001e341:	83 ec 08             	sub    esp,0x8
c001e344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e347:	8b 00                	mov    eax,DWORD PTR [eax]
c001e349:	83 c0 3c             	add    eax,0x3c
c001e34c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e34e:	83 ec 0c             	sub    esp,0xc
c001e351:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e354:	ff d0                	call   eax
c001e356:	83 c4 10             	add    esp,0x10
c001e359:	b8 00 00 00 00       	mov    eax,0x0
c001e35e:	c9                   	leave  
c001e35f:	c3                   	ret    

c001e360 <IOAPIC::close(int, int, void*)>:
c001e360:	b8 00 00 00 00       	mov    eax,0x0
c001e365:	c3                   	ret    

c001e366 <APIC::io_wait()>:
c001e366:	eb 00                	jmp    c001e368 <APIC::io_wait()+0x2>
c001e368:	eb 00                	jmp    c001e36a <APIC::io_wait()+0x4>
c001e36a:	90                   	nop
c001e36b:	c3                   	ret    

c001e36c <APIC::getBase()>:
c001e36c:	55                   	push   ebp
c001e36d:	89 e5                	mov    ebp,esp
c001e36f:	83 ec 18             	sub    esp,0x18
c001e372:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e377:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e37d:	83 e0 08             	and    eax,0x8
c001e380:	84 c0                	test   al,al
c001e382:	75 07                	jne    c001e38b <APIC::getBase()+0x1f>
c001e384:	b8 00 00 00 00       	mov    eax,0x0
c001e389:	eb 21                	jmp    c001e3ac <APIC::getBase()+0x40>
c001e38b:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e390:	83 ec 08             	sub    esp,0x8
c001e393:	6a 1b                	push   0x1b
c001e395:	50                   	push   eax
c001e396:	e8 f9 d1 fe ff       	call   c000b594 <Computer::rdmsr(unsigned int)>
c001e39b:	83 c4 10             	add    esp,0x10
c001e39e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e3a1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e3a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e3a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e3ac:	c9                   	leave  
c001e3ad:	c3                   	ret    

c001e3ae <APIC::eoi(unsigned char)>:
c001e3ae:	55                   	push   ebp
c001e3af:	89 e5                	mov    ebp,esp
c001e3b1:	83 ec 28             	sub    esp,0x28
c001e3b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e3b7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e3ba:	83 ec 0c             	sub    esp,0xc
c001e3bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3c0:	e8 a7 ff ff ff       	call   c001e36c <APIC::getBase()>
c001e3c5:	83 c4 10             	add    esp,0x10
c001e3c8:	05 b0 00 00 00       	add    eax,0xb0
c001e3cd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e3d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e3d3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e3d9:	90                   	nop
c001e3da:	c9                   	leave  
c001e3db:	c3                   	ret    

c001e3dc <APIC::open(int, int, void*)>:
c001e3dc:	55                   	push   ebp
c001e3dd:	89 e5                	mov    ebp,esp
c001e3df:	57                   	push   edi
c001e3e0:	56                   	push   esi
c001e3e1:	53                   	push   ebx
c001e3e2:	83 ec 1c             	sub    esp,0x1c
c001e3e5:	83 ec 0c             	sub    esp,0xc
c001e3e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3eb:	e8 7c ff ff ff       	call   c001e36c <APIC::getBase()>
c001e3f0:	83 c4 10             	add    esp,0x10
c001e3f3:	05 f0 00 00 00       	add    eax,0xf0
c001e3f8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e3fb:	83 ec 0c             	sub    esp,0xc
c001e3fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e401:	e8 66 ff ff ff       	call   c001e36c <APIC::getBase()>
c001e406:	83 c4 10             	add    esp,0x10
c001e409:	89 c2                	mov    edx,eax
c001e40b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e40e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e414:	89 c7                	mov    edi,eax
c001e416:	81 e7 ff 00 00 00    	and    edi,0xff
c001e41c:	89 d0                	mov    eax,edx
c001e41e:	ba 00 00 00 00       	mov    edx,0x0
c001e423:	89 c1                	mov    ecx,eax
c001e425:	80 e5 ff             	and    ch,0xff
c001e428:	89 cb                	mov    ebx,ecx
c001e42a:	89 d0                	mov    eax,edx
c001e42c:	25 ff 00 00 00       	and    eax,0xff
c001e431:	89 c6                	mov    esi,eax
c001e433:	89 d8                	mov    eax,ebx
c001e435:	89 f2                	mov    edx,esi
c001e437:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e43a:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e43d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e441:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e445:	83 e0 00             	and    eax,0x0
c001e448:	09 d0                	or     eax,edx
c001e44a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e451:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e457:	8d 50 01             	lea    edx,[eax+0x1]
c001e45a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e45d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e463:	31 d2                	xor    edx,edx
c001e465:	88 c2                	mov    dl,al
c001e467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e46a:	83 c2 08             	add    edx,0x8
c001e46d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e471:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e477:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e47d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e481:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e484:	8b 00                	mov    eax,DWORD PTR [eax]
c001e486:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e489:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e490:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e493:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e496:	89 10                	mov    DWORD PTR [eax],edx
c001e498:	b8 00 00 00 00       	mov    eax,0x0
c001e49d:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e4a0:	5b                   	pop    ebx
c001e4a1:	5e                   	pop    esi
c001e4a2:	5f                   	pop    edi
c001e4a3:	5d                   	pop    ebp
c001e4a4:	c3                   	ret    
c001e4a5:	90                   	nop

c001e4a6 <IOAPIC::IOAPIC()>:
c001e4a6:	83 ec 0c             	sub    esp,0xc
c001e4a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ad:	83 ec 08             	sub    esp,0x8
c001e4b0:	68 78 39 02 c0       	push   0xc0023978
c001e4b5:	50                   	push   eax
c001e4b6:	e8 73 23 ff ff       	call   c001082e <Device::Device(char const*)>
c001e4bb:	83 c4 10             	add    esp,0x10
c001e4be:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c001e4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c7:	89 10                	mov    DWORD PTR [eax],edx
c001e4c9:	90                   	nop
c001e4ca:	83 c4 0c             	add    esp,0xc
c001e4cd:	c3                   	ret    

c001e4ce <APIC::APIC()>:
c001e4ce:	53                   	push   ebx
c001e4cf:	83 ec 18             	sub    esp,0x18
c001e4d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4d6:	83 ec 08             	sub    esp,0x8
c001e4d9:	68 80 39 02 c0       	push   0xc0023980
c001e4de:	50                   	push   eax
c001e4df:	e8 98 2a ff ff       	call   c0010f7c <InterruptController::InterruptController(char const*)>
c001e4e4:	83 c4 10             	add    esp,0x10
c001e4e7:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c001e4ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4f0:	89 10                	mov    DWORD PTR [eax],edx
c001e4f2:	a0 a0 65 02 c0       	mov    al,ds:0xc00265a0
c001e4f7:	83 f0 01             	xor    eax,0x1
c001e4fa:	84 c0                	test   al,al
c001e4fc:	0f 84 a2 00 00 00    	je     c001e5a4 <APIC::APIC()+0xd6>
c001e502:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e507:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c001e50c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e510:	0f 83 87 00 00 00    	jae    c001e59d <APIC::APIC()+0xcf>
c001e516:	83 ec 0c             	sub    esp,0xc
c001e519:	68 68 01 00 00       	push   0x168
c001e51e:	e8 d1 0b ff ff       	call   c000f0f4 <operator new(unsigned long)>
c001e523:	83 c4 10             	add    esp,0x10
c001e526:	89 c3                	mov    ebx,eax
c001e528:	83 ec 0c             	sub    esp,0xc
c001e52b:	53                   	push   ebx
c001e52c:	e8 75 ff ff ff       	call   c001e4a6 <IOAPIC::IOAPIC()>
c001e531:	83 c4 10             	add    esp,0x10
c001e534:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e538:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e53c:	25 ff 00 00 00       	and    eax,0xff
c001e541:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e545:	89 14 85 80 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9a80],edx
c001e54c:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e551:	40                   	inc    eax
c001e552:	a3 60 65 02 c0       	mov    ds:0xc0026560,eax
c001e557:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e55c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e562:	83 ec 08             	sub    esp,0x8
c001e565:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e569:	50                   	push   eax
c001e56a:	e8 cf 20 ff ff       	call   c001063e <Device::addChild(Device*)>
c001e56f:	83 c4 10             	add    esp,0x10
c001e572:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e576:	8b 00                	mov    eax,DWORD PTR [eax]
c001e578:	83 c0 08             	add    eax,0x8
c001e57b:	8b 10                	mov    edx,DWORD PTR [eax]
c001e57d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e581:	25 ff 00 00 00       	and    eax,0xff
c001e586:	6a 00                	push   0x0
c001e588:	6a 00                	push   0x0
c001e58a:	50                   	push   eax
c001e58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e58f:	ff d2                	call   edx
c001e591:	83 c4 10             	add    esp,0x10
c001e594:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e598:	e9 6a ff ff ff       	jmp    c001e507 <APIC::APIC()+0x39>
c001e59d:	c6 05 a0 65 02 c0 01 	mov    BYTE PTR ds:0xc00265a0,0x1
c001e5a4:	90                   	nop
c001e5a5:	83 c4 18             	add    esp,0x18
c001e5a8:	5b                   	pop    ebx
c001e5a9:	c3                   	ret    

c001e5aa <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e5aa:	55                   	push   ebp
c001e5ab:	89 e5                	mov    ebp,esp
c001e5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e5b6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5b9:	72 1d                	jb     c001e5d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5be:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5c7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e5cd:	01 d0                	add    eax,edx
c001e5cf:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5d2:	73 04                	jae    c001e5d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5d4:	b0 01                	mov    al,0x1
c001e5d6:	eb 02                	jmp    c001e5da <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5d8:	b0 00                	mov    al,0x0
c001e5da:	5d                   	pop    ebp
c001e5db:	c3                   	ret    

c001e5dc <IOAPIC::read(int)>:
c001e5dc:	55                   	push   ebp
c001e5dd:	89 e5                	mov    ebp,esp
c001e5df:	83 ec 10             	sub    esp,0x10
c001e5e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5e5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5eb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5f1:	31 d2                	xor    edx,edx
c001e5f3:	88 c2                	mov    dl,al
c001e5f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5f8:	89 10                	mov    DWORD PTR [eax],edx
c001e5fa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5fd:	83 c0 10             	add    eax,0x10
c001e600:	8b 00                	mov    eax,DWORD PTR [eax]
c001e602:	c9                   	leave  
c001e603:	c3                   	ret    

c001e604 <IOAPIC::open(int, int, void*)>:
c001e604:	55                   	push   ebp
c001e605:	89 e5                	mov    ebp,esp
c001e607:	57                   	push   edi
c001e608:	56                   	push   esi
c001e609:	53                   	push   ebx
c001e60a:	83 ec 0c             	sub    esp,0xc
c001e60d:	83 ec 0c             	sub    esp,0xc
c001e610:	68 ab 39 02 c0       	push   0xc00239ab
c001e615:	e8 0f 0c ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001e61a:	83 c4 10             	add    esp,0x10
c001e61d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e620:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e623:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e62c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e632:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c001e639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e63c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e645:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e64b:	8b 14 85 00 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf00]
c001e652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e655:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e65b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e65e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e667:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e66d:	89 c7                	mov    edi,eax
c001e66f:	81 e7 ff 00 00 00    	and    edi,0xff
c001e675:	89 d0                	mov    eax,edx
c001e677:	ba 00 00 00 00       	mov    edx,0x0
c001e67c:	89 c1                	mov    ecx,eax
c001e67e:	80 e5 ff             	and    ch,0xff
c001e681:	89 cb                	mov    ebx,ecx
c001e683:	89 d0                	mov    eax,edx
c001e685:	25 ff 00 00 00       	and    eax,0xff
c001e68a:	89 c6                	mov    esi,eax
c001e68c:	89 d8                	mov    eax,ebx
c001e68e:	89 f2                	mov    edx,esi
c001e690:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e693:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e696:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e69a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e69e:	83 e0 00             	and    eax,0x0
c001e6a1:	09 d0                	or     eax,edx
c001e6a3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e6a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6aa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e6b0:	8d 50 01             	lea    edx,[eax+0x1]
c001e6b3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e6b6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e6bc:	31 d2                	xor    edx,edx
c001e6be:	88 c2                	mov    dl,al
c001e6c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6c3:	83 c2 08             	add    edx,0x8
c001e6c6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e6ca:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e6d0:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e6d6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e6da:	83 ec 08             	sub    esp,0x8
c001e6dd:	6a 01                	push   0x1
c001e6df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6e2:	e8 f5 fe ff ff       	call   c001e5dc <IOAPIC::read(int)>
c001e6e7:	83 c4 10             	add    esp,0x10
c001e6ea:	c1 f8 10             	sar    eax,0x10
c001e6ed:	25 ff 00 00 00       	and    eax,0xff
c001e6f2:	8d 50 01             	lea    edx,[eax+0x1]
c001e6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6f8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6fe:	b8 00 00 00 00       	mov    eax,0x0
c001e703:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e706:	5b                   	pop    ebx
c001e707:	5e                   	pop    esi
c001e708:	5f                   	pop    edi
c001e709:	5d                   	pop    ebp
c001e70a:	c3                   	ret    
c001e70b:	90                   	nop

c001e70c <IOAPIC::write(int, int)>:
c001e70c:	55                   	push   ebp
c001e70d:	89 e5                	mov    ebp,esp
c001e70f:	83 ec 10             	sub    esp,0x10
c001e712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e715:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e71b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e71e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e721:	31 d2                	xor    edx,edx
c001e723:	88 c2                	mov    dl,al
c001e725:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e728:	89 10                	mov    DWORD PTR [eax],edx
c001e72a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e72d:	8d 50 10             	lea    edx,[eax+0x10]
c001e730:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e733:	89 02                	mov    DWORD PTR [edx],eax
c001e735:	90                   	nop
c001e736:	c9                   	leave  
c001e737:	c3                   	ret    

c001e738 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e738:	55                   	push   ebp
c001e739:	89 e5                	mov    ebp,esp
c001e73b:	83 ec 20             	sub    esp,0x20
c001e73e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e741:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e744:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e747:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e74a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e74d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e750:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e753:	88 d0                	mov    al,dl
c001e755:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e758:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e75b:	25 ff 00 00 00       	and    eax,0xff
c001e760:	83 c0 08             	add    eax,0x8
c001e763:	01 c0                	add    eax,eax
c001e765:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e768:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e76b:	25 ff 00 00 00       	and    eax,0xff
c001e770:	83 c0 08             	add    eax,0x8
c001e773:	01 c0                	add    eax,eax
c001e775:	40                   	inc    eax
c001e776:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e779:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e77c:	50                   	push   eax
c001e77d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e780:	e8 57 fe ff ff       	call   c001e5dc <IOAPIC::read(int)>
c001e785:	83 c4 08             	add    esp,0x8
c001e788:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e78b:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e792:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e795:	c1 e0 18             	shl    eax,0x18
c001e798:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e79b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e79e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e7a1:	52                   	push   edx
c001e7a2:	50                   	push   eax
c001e7a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7a6:	e8 61 ff ff ff       	call   c001e70c <IOAPIC::write(int, int)>
c001e7ab:	83 c4 0c             	add    esp,0xc
c001e7ae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7b1:	50                   	push   eax
c001e7b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7b5:	e8 22 fe ff ff       	call   c001e5dc <IOAPIC::read(int)>
c001e7ba:	83 c4 08             	add    esp,0x8
c001e7bd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7c0:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e7c7:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e7ce:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e7d5:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e7dc:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e7df:	25 ff 00 00 00       	and    eax,0xff
c001e7e4:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e7e7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e7ea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7ed:	52                   	push   edx
c001e7ee:	50                   	push   eax
c001e7ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7f2:	e8 15 ff ff ff       	call   c001e70c <IOAPIC::write(int, int)>
c001e7f7:	83 c4 0c             	add    esp,0xc
c001e7fa:	90                   	nop
c001e7fb:	c9                   	leave  
c001e7fc:	c3                   	ret    
c001e7fd:	90                   	nop

c001e7fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e7fe:	55                   	push   ebp
c001e7ff:	89 e5                	mov    ebp,esp
c001e801:	56                   	push   esi
c001e802:	53                   	push   ebx
c001e803:	83 ec 20             	sub    esp,0x20
c001e806:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e809:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e80c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e810:	74 2a                	je     c001e83c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e812:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e816:	7f 14                	jg     c001e82c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e818:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e81b:	05 00 3f 02 c0       	add    eax,0xc0023f00
c001e820:	8a 00                	mov    al,BYTE PTR [eax]
c001e822:	25 ff 00 00 00       	and    eax,0xff
c001e827:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e82a:	eb 10                	jmp    c001e83c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e82c:	83 ec 0c             	sub    esp,0xc
c001e82f:	68 bc 39 02 c0       	push   0xc00239bc
c001e834:	e8 19 72 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001e839:	83 c4 10             	add    esp,0x10
c001e83c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e840:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e845:	83 ec 08             	sub    esp,0x8
c001e848:	50                   	push   eax
c001e849:	68 f4 39 02 c0       	push   0xc00239f4
c001e84e:	e8 d6 09 ff ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001e853:	83 c4 10             	add    esp,0x10
c001e856:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e85d:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e862:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e865:	7d 64                	jge    c001e8cb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e867:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e86a:	8b 04 85 80 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9a80]
c001e871:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e874:	83 ec 08             	sub    esp,0x8
c001e877:	52                   	push   edx
c001e878:	50                   	push   eax
c001e879:	e8 2c fd ff ff       	call   c001e5aa <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e87e:	83 c4 10             	add    esp,0x10
c001e881:	84 c0                	test   al,al
c001e883:	74 41                	je     c001e8c6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e885:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e888:	8b 1c 85 80 65 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9a80]
c001e88f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e892:	83 c0 20             	add    eax,0x20
c001e895:	89 c6                	mov    esi,eax
c001e897:	81 e6 ff 00 00 00    	and    esi,0xff
c001e89d:	e8 41 60 ff ff       	call   c00148e3 <getCPUNumber()>
c001e8a2:	89 c2                	mov    edx,eax
c001e8a4:	c1 fa 1f             	sar    edx,0x1f
c001e8a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e8aa:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e8b0:	83 ec 0c             	sub    esp,0xc
c001e8b3:	56                   	push   esi
c001e8b4:	52                   	push   edx
c001e8b5:	50                   	push   eax
c001e8b6:	51                   	push   ecx
c001e8b7:	53                   	push   ebx
c001e8b8:	e8 7b fe ff ff       	call   c001e738 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e8bd:	83 c4 20             	add    esp,0x20
c001e8c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e8c4:	eb 05                	jmp    c001e8cb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e8c6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e8c9:	eb 92                	jmp    c001e85d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e8cb:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e8ce:	83 f0 01             	xor    eax,0x1
c001e8d1:	84 c0                	test   al,al
c001e8d3:	74 10                	je     c001e8e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e8d5:	83 ec 0c             	sub    esp,0xc
c001e8d8:	68 0b 3a 02 c0       	push   0xc0023a0b
c001e8dd:	e8 70 71 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001e8e2:	83 c4 10             	add    esp,0x10
c001e8e5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e8e9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e8f0:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e8f4:	7f 65                	jg     c001e95b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e8f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8fc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e903:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e906:	01 ca                	add    edx,ecx
c001e908:	83 c2 54             	add    edx,0x54
c001e90b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e90f:	85 c0                	test   eax,eax
c001e911:	75 43                	jne    c001e956 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e916:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e919:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e920:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e923:	01 ca                	add    edx,ecx
c001e925:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e928:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e92b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e92f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e932:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e935:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e93c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e93f:	01 ca                	add    edx,ecx
c001e941:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e947:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e94a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e94e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e951:	83 e8 20             	sub    eax,0x20
c001e954:	eb 1a                	jmp    c001e970 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e956:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e959:	eb 95                	jmp    c001e8f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e95b:	83 ec 0c             	sub    esp,0xc
c001e95e:	68 18 3a 02 c0       	push   0xc0023a18
c001e963:	e8 ea 70 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001e968:	83 c4 10             	add    esp,0x10
c001e96b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e970:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e973:	5b                   	pop    ebx
c001e974:	5e                   	pop    esi
c001e975:	5d                   	pop    ebp
c001e976:	c3                   	ret    
c001e977:	90                   	nop

c001e978 <PIC::disable()>:
c001e978:	55                   	push   ebp
c001e979:	89 e5                	mov    ebp,esp
c001e97b:	83 ec 10             	sub    esp,0x10
c001e97e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e984:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e988:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e98b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e98f:	ee                   	out    dx,al
c001e990:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e996:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e99a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e99d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e9a1:	ee                   	out    dx,al
c001e9a2:	90                   	nop
c001e9a3:	c9                   	leave  
c001e9a4:	c3                   	ret    
c001e9a5:	90                   	nop

c001e9a6 <PIC::close(int, int, void*)>:
c001e9a6:	55                   	push   ebp
c001e9a7:	89 e5                	mov    ebp,esp
c001e9a9:	83 ec 08             	sub    esp,0x8
c001e9ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9af:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b1:	83 c0 3c             	add    eax,0x3c
c001e9b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b6:	83 ec 0c             	sub    esp,0xc
c001e9b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9bc:	ff d0                	call   eax
c001e9be:	83 c4 10             	add    esp,0x10
c001e9c1:	b8 00 00 00 00       	mov    eax,0x0
c001e9c6:	c9                   	leave  
c001e9c7:	c3                   	ret    

c001e9c8 <PIC::PIC()>:
c001e9c8:	83 ec 0c             	sub    esp,0xc
c001e9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cf:	83 ec 08             	sub    esp,0x8
c001e9d2:	68 c4 3a 02 c0       	push   0xc0023ac4
c001e9d7:	50                   	push   eax
c001e9d8:	e8 9f 25 ff ff       	call   c0010f7c <InterruptController::InterruptController(char const*)>
c001e9dd:	83 c4 10             	add    esp,0x10
c001e9e0:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c001e9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e9:	89 10                	mov    DWORD PTR [eax],edx
c001e9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9f5:	31 d2                	xor    edx,edx
c001e9f7:	88 c2                	mov    dl,al
c001e9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fd:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001ea04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea08:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea0e:	31 d2                	xor    edx,edx
c001ea10:	88 c2                	mov    dl,al
c001ea12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea16:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea25:	8d 50 01             	lea    edx,[eax+0x1]
c001ea28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea2c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea32:	31 d2                	xor    edx,edx
c001ea34:	88 c2                	mov    dl,al
c001ea36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea3e:	83 e1 3f             	and    ecx,0x3f
c001ea41:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea49:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea4f:	31 d2                	xor    edx,edx
c001ea51:	88 c2                	mov    dl,al
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea68:	31 d2                	xor    edx,edx
c001ea6a:	88 c2                	mov    dl,al
c001ea6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea70:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea79:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea7f:	8d 50 01             	lea    edx,[eax+0x1]
c001ea82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea86:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea8c:	31 d2                	xor    edx,edx
c001ea8e:	88 c2                	mov    dl,al
c001ea90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea94:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea98:	83 e1 3f             	and    ecx,0x3f
c001ea9b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea9f:	90                   	nop
c001eaa0:	83 c4 0c             	add    esp,0xc
c001eaa3:	c3                   	ret    

c001eaa4 <PIC::ioWait()>:
c001eaa4:	eb 00                	jmp    c001eaa6 <PIC::ioWait()+0x2>
c001eaa6:	eb 00                	jmp    c001eaa8 <PIC::ioWait()+0x4>
c001eaa8:	90                   	nop
c001eaa9:	c3                   	ret    

c001eaaa <PIC::getIRQReg(int)>:
c001eaaa:	55                   	push   ebp
c001eaab:	89 e5                	mov    ebp,esp
c001eaad:	83 ec 10             	sub    esp,0x10
c001eab0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eab3:	25 ff 00 00 00       	and    eax,0xff
c001eab8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eabe:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001eac1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eac4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eac8:	ee                   	out    dx,al
c001eac9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eacc:	25 ff 00 00 00       	and    eax,0xff
c001ead1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ead7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001eada:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eadd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eae1:	ee                   	out    dx,al
c001eae2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001eae8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001eaec:	89 c2                	mov    edx,eax
c001eaee:	ec                   	in     al,dx
c001eaef:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001eaf2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eaf5:	25 ff 00 00 00       	and    eax,0xff
c001eafa:	c1 e0 08             	shl    eax,0x8
c001eafd:	89 c1                	mov    ecx,eax
c001eaff:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001eb05:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb09:	89 c2                	mov    edx,eax
c001eb0b:	ec                   	in     al,dx
c001eb0c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001eb0f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001eb12:	25 ff 00 00 00       	and    eax,0xff
c001eb17:	09 c8                	or     eax,ecx
c001eb19:	c9                   	leave  
c001eb1a:	c3                   	ret    
c001eb1b:	90                   	nop

c001eb1c <PIC::eoi(unsigned char)>:
c001eb1c:	55                   	push   ebp
c001eb1d:	89 e5                	mov    ebp,esp
c001eb1f:	83 ec 14             	sub    esp,0x14
c001eb22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb25:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001eb28:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb2c:	75 23                	jne    c001eb51 <PIC::eoi(unsigned char)+0x35>
c001eb2e:	6a 0b                	push   0xb
c001eb30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb33:	e8 72 ff ff ff       	call   c001eaaa <PIC::getIRQReg(int)>
c001eb38:	83 c4 08             	add    esp,0x8
c001eb3b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001eb3f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb43:	25 ff ff 00 00       	and    eax,0xffff
c001eb48:	25 80 00 00 00       	and    eax,0x80
c001eb4d:	85 c0                	test   eax,eax
c001eb4f:	74 5f                	je     c001ebb0 <PIC::eoi(unsigned char)+0x94>
c001eb51:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001eb55:	75 2d                	jne    c001eb84 <PIC::eoi(unsigned char)+0x68>
c001eb57:	6a 0b                	push   0xb
c001eb59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb5c:	e8 49 ff ff ff       	call   c001eaaa <PIC::getIRQReg(int)>
c001eb61:	83 c4 08             	add    esp,0x8
c001eb64:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001eb68:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb6b:	66 85 c0             	test   ax,ax
c001eb6e:	78 14                	js     c001eb84 <PIC::eoi(unsigned char)+0x68>
c001eb70:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001eb76:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001eb7a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eb7d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001eb81:	ee                   	out    dx,al
c001eb82:	eb 2d                	jmp    c001ebb1 <PIC::eoi(unsigned char)+0x95>
c001eb84:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb88:	76 12                	jbe    c001eb9c <PIC::eoi(unsigned char)+0x80>
c001eb8a:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eb90:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001eb94:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eb97:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eb9b:	ee                   	out    dx,al
c001eb9c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eba2:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001eba6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eba9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ebad:	ee                   	out    dx,al
c001ebae:	eb 01                	jmp    c001ebb1 <PIC::eoi(unsigned char)+0x95>
c001ebb0:	90                   	nop
c001ebb1:	c9                   	leave  
c001ebb2:	c3                   	ret    
c001ebb3:	90                   	nop

c001ebb4 <PIC::remap()>:
c001ebb4:	55                   	push   ebp
c001ebb5:	89 e5                	mov    ebp,esp
c001ebb7:	83 ec 48             	sub    esp,0x48
c001ebba:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ebc1:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ebc8:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ebce:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ebd1:	89 c2                	mov    edx,eax
c001ebd3:	ec                   	in     al,dx
c001ebd4:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ebd7:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ebda:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ebdd:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ebe3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ebe6:	89 c2                	mov    edx,eax
c001ebe8:	ec                   	in     al,dx
c001ebe9:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ebec:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ebef:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ebf2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ebf8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ebfc:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ebff:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ec02:	ee                   	out    dx,al
c001ec03:	83 ec 0c             	sub    esp,0xc
c001ec06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec09:	e8 96 fe ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ec0e:	83 c4 10             	add    esp,0x10
c001ec11:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ec17:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ec1b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ec1e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ec21:	ee                   	out    dx,al
c001ec22:	83 ec 0c             	sub    esp,0xc
c001ec25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec28:	e8 77 fe ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ec2d:	83 c4 10             	add    esp,0x10
c001ec30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ec33:	25 ff 00 00 00       	and    eax,0xff
c001ec38:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ec3e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ec41:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001ec44:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001ec47:	ee                   	out    dx,al
c001ec48:	83 ec 0c             	sub    esp,0xc
c001ec4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec4e:	e8 51 fe ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ec53:	83 c4 10             	add    esp,0x10
c001ec56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec59:	25 ff 00 00 00       	and    eax,0xff
c001ec5e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ec64:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ec67:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ec6a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec6d:	ee                   	out    dx,al
c001ec6e:	83 ec 0c             	sub    esp,0xc
c001ec71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec74:	e8 2b fe ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ec79:	83 c4 10             	add    esp,0x10
c001ec7c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ec82:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ec86:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ec89:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ec8c:	ee                   	out    dx,al
c001ec8d:	83 ec 0c             	sub    esp,0xc
c001ec90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec93:	e8 0c fe ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ec98:	83 c4 10             	add    esp,0x10
c001ec9b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001eca1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001eca5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001eca8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001ecab:	ee                   	out    dx,al
c001ecac:	83 ec 0c             	sub    esp,0xc
c001ecaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecb2:	e8 ed fd ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ecb7:	83 c4 10             	add    esp,0x10
c001ecba:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001ecc0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001ecc4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001ecc7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001ecca:	ee                   	out    dx,al
c001eccb:	83 ec 0c             	sub    esp,0xc
c001ecce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecd1:	e8 ce fd ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ecd6:	83 c4 10             	add    esp,0x10
c001ecd9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001ecdf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001ece3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ece6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ece9:	ee                   	out    dx,al
c001ecea:	83 ec 0c             	sub    esp,0xc
c001eced:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecf0:	e8 af fd ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ecf5:	83 c4 10             	add    esp,0x10
c001ecf8:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ecfb:	25 ff 00 00 00       	and    eax,0xff
c001ed00:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ed06:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ed09:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ed0c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed0f:	ee                   	out    dx,al
c001ed10:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ed13:	25 ff 00 00 00       	and    eax,0xff
c001ed18:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ed1e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ed21:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ed24:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed27:	ee                   	out    dx,al
c001ed28:	90                   	nop
c001ed29:	c9                   	leave  
c001ed2a:	c3                   	ret    
c001ed2b:	90                   	nop

c001ed2c <PIC::open(int, int, void*)>:
c001ed2c:	55                   	push   ebp
c001ed2d:	89 e5                	mov    ebp,esp
c001ed2f:	83 ec 18             	sub    esp,0x18
c001ed32:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ed38:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ed3c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ed3f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ed43:	ee                   	out    dx,al
c001ed44:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ed4a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ed4e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ed51:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ed55:	ee                   	out    dx,al
c001ed56:	83 ec 0c             	sub    esp,0xc
c001ed59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed5c:	e8 53 fe ff ff       	call   c001ebb4 <PIC::remap()>
c001ed61:	83 c4 10             	add    esp,0x10
c001ed64:	b8 00 00 00 00       	mov    eax,0x0
c001ed69:	c9                   	leave  
c001ed6a:	c3                   	ret    
c001ed6b:	90                   	nop

c001ed6c <APICTimer::close(int, int, void*)>:
c001ed6c:	b8 00 00 00 00       	mov    eax,0x0
c001ed71:	c3                   	ret    

c001ed72 <apicTimerHandler(regs*, void*)>:
c001ed72:	83 ec 0c             	sub    esp,0xc
c001ed75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed79:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed7b:	89 c2                	mov    edx,eax
c001ed7d:	c1 fa 1f             	sar    edx,0x1f
c001ed80:	52                   	push   edx
c001ed81:	50                   	push   eax
c001ed82:	6a 00                	push   0x0
c001ed84:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed89:	e8 8e 07 00 00       	call   c001f51c <__udivdi3>
c001ed8e:	83 c4 10             	add    esp,0x10
c001ed91:	83 ec 08             	sub    esp,0x8
c001ed94:	52                   	push   edx
c001ed95:	50                   	push   eax
c001ed96:	e8 08 40 ff ff       	call   c0012da3 <timerHandler(unsigned long long)>
c001ed9b:	83 c4 10             	add    esp,0x10
c001ed9e:	90                   	nop
c001ed9f:	83 c4 0c             	add    esp,0xc
c001eda2:	c3                   	ret    
c001eda3:	90                   	nop

c001eda4 <APICTimer::write(int)>:
c001eda4:	53                   	push   ebx
c001eda5:	83 ec 28             	sub    esp,0x28
c001eda8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001edac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001edb0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001edb6:	e8 2b 5b ff ff       	call   c00148e6 <thisCPU()>
c001edbb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001edc1:	83 ec 0c             	sub    esp,0xc
c001edc4:	50                   	push   eax
c001edc5:	e8 a2 f5 ff ff       	call   c001e36c <APIC::getBase()>
c001edca:	83 c4 10             	add    esp,0x10
c001edcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edd1:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001edd6:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001eddc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ede0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ede4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ede8:	05 e0 03 00 00       	add    eax,0x3e0
c001eded:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001edf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edf7:	05 80 03 00 00       	add    eax,0x380
c001edfc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001ee02:	fb                   	sti    
c001ee03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee0b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ee10:	83 d2 00             	adc    edx,0x0
c001ee13:	89 c1                	mov    ecx,eax
c001ee15:	89 d3                	mov    ebx,edx
c001ee17:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001ee1c:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001ee22:	39 c8                	cmp    eax,ecx
c001ee24:	89 d0                	mov    eax,edx
c001ee26:	19 d8                	sbb    eax,ebx
c001ee28:	73 02                	jae    c001ee2c <APICTimer::write(int)+0x88>
c001ee2a:	eb d7                	jmp    c001ee03 <APICTimer::write(int)+0x5f>
c001ee2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee30:	05 20 03 00 00       	add    eax,0x320
c001ee35:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ee3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee3f:	05 90 03 00 00       	add    eax,0x390
c001ee44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee46:	f7 d0                	not    eax
c001ee48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee4c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee54:	ba 00 00 00 00       	mov    edx,0x0
c001ee59:	f7 f3                	div    ebx
c001ee5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ee63:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee69:	0d 00 00 02 00       	or     eax,0x20000
c001ee6e:	89 c2                	mov    edx,eax
c001ee70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee74:	05 20 03 00 00       	add    eax,0x320
c001ee79:	89 10                	mov    DWORD PTR [eax],edx
c001ee7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee7f:	05 e0 03 00 00       	add    eax,0x3e0
c001ee84:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ee8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee8e:	05 80 03 00 00       	add    eax,0x380
c001ee93:	89 c2                	mov    edx,eax
c001ee95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee99:	89 02                	mov    DWORD PTR [edx],eax
c001ee9b:	90                   	nop
c001ee9c:	83 c4 28             	add    esp,0x28
c001ee9f:	5b                   	pop    ebx
c001eea0:	c3                   	ret    
c001eea1:	90                   	nop

c001eea2 <APICTimer::open(int, int, void*)>:
c001eea2:	57                   	push   edi
c001eea3:	56                   	push   esi
c001eea4:	53                   	push   ebx
c001eea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea9:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeab:	83 c0 24             	add    eax,0x24
c001eeae:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeb0:	83 ec 08             	sub    esp,0x8
c001eeb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eebb:	ff d0                	call   eax
c001eebd:	83 c4 10             	add    esp,0x10
c001eec0:	e8 21 5a ff ff       	call   c00148e6 <thisCPU()>
c001eec5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eecb:	83 ec 0c             	sub    esp,0xc
c001eece:	50                   	push   eax
c001eecf:	e8 98 f4 ff ff       	call   c001e36c <APIC::getBase()>
c001eed4:	83 c4 10             	add    esp,0x10
c001eed7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eee7:	89 c7                	mov    edi,eax
c001eee9:	81 e7 ff 00 00 00    	and    edi,0xff
c001eeef:	89 d0                	mov    eax,edx
c001eef1:	ba 00 00 00 00       	mov    edx,0x0
c001eef6:	89 c1                	mov    ecx,eax
c001eef8:	80 e5 ff             	and    ch,0xff
c001eefb:	89 cb                	mov    ebx,ecx
c001eefd:	89 d0                	mov    eax,edx
c001eeff:	25 ff 00 00 00       	and    eax,0xff
c001ef04:	89 c6                	mov    esi,eax
c001ef06:	89 d8                	mov    eax,ebx
c001ef08:	89 f2                	mov    edx,esi
c001ef0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef0e:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ef11:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ef15:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef19:	83 e0 00             	and    eax,0x0
c001ef1c:	09 d0                	or     eax,edx
c001ef1e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef26:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef2c:	8d 50 01             	lea    edx,[eax+0x1]
c001ef2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef33:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ef39:	31 d2                	xor    edx,edx
c001ef3b:	88 c2                	mov    dl,al
c001ef3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef41:	83 c2 08             	add    edx,0x8
c001ef44:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef48:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ef4e:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ef54:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef6e:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef78:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef7e:	83 ec 0c             	sub    esp,0xc
c001ef81:	51                   	push   ecx
c001ef82:	6a 01                	push   0x1
c001ef84:	68 72 ed 01 c0       	push   0xc001ed72
c001ef89:	52                   	push   edx
c001ef8a:	50                   	push   eax
c001ef8b:	e8 02 16 ff ff       	call   c0010592 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef90:	83 c4 20             	add    esp,0x20
c001ef93:	89 c2                	mov    edx,eax
c001ef95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef99:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef9f:	b8 00 00 00 00       	mov    eax,0x0
c001efa4:	5b                   	pop    ebx
c001efa5:	5e                   	pop    esi
c001efa6:	5f                   	pop    edi
c001efa7:	c3                   	ret    

c001efa8 <APICTimer::APICTimer()>:
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efaf:	83 ec 08             	sub    esp,0x8
c001efb2:	68 30 3b 02 c0       	push   0xc0023b30
c001efb7:	50                   	push   eax
c001efb8:	e8 57 3d ff ff       	call   c0012d14 <Timer::Timer(char const*)>
c001efbd:	83 c4 10             	add    esp,0x10
c001efc0:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c001efc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc9:	89 10                	mov    DWORD PTR [eax],edx
c001efcb:	90                   	nop
c001efcc:	83 c4 0c             	add    esp,0xc
c001efcf:	c3                   	ret    

c001efd0 <PIT::write(int)>:
c001efd0:	83 ec 10             	sub    esp,0x10
c001efd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001efdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efe1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efe5:	a3 a4 65 02 c0       	mov    ds:0xc00265a4,eax
c001efea:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efef:	89 c2                	mov    edx,eax
c001eff1:	c1 fa 1f             	sar    edx,0x1f
c001eff4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001effc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f003:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f008:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f00c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f011:	ee                   	out    dx,al
c001f012:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f016:	25 ff 00 00 00       	and    eax,0xff
c001f01b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f022:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f026:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f02a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f02f:	ee                   	out    dx,al
c001f030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f034:	c1 f8 08             	sar    eax,0x8
c001f037:	25 ff 00 00 00       	and    eax,0xff
c001f03c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f043:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f047:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f04b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f050:	ee                   	out    dx,al
c001f051:	90                   	nop
c001f052:	83 c4 10             	add    esp,0x10
c001f055:	c3                   	ret    

c001f056 <pitHandler(regs*, void*)>:
c001f056:	83 ec 0c             	sub    esp,0xc
c001f059:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c001f05e:	89 c2                	mov    edx,eax
c001f060:	c1 fa 1f             	sar    edx,0x1f
c001f063:	52                   	push   edx
c001f064:	50                   	push   eax
c001f065:	6a 00                	push   0x0
c001f067:	68 00 ca 9a 3b       	push   0x3b9aca00
c001f06c:	e8 ab 04 00 00       	call   c001f51c <__udivdi3>
c001f071:	83 c4 10             	add    esp,0x10
c001f074:	83 ec 08             	sub    esp,0x8
c001f077:	52                   	push   edx
c001f078:	50                   	push   eax
c001f079:	e8 25 3d ff ff       	call   c0012da3 <timerHandler(unsigned long long)>
c001f07e:	83 c4 10             	add    esp,0x10
c001f081:	90                   	nop
c001f082:	83 c4 0c             	add    esp,0xc
c001f085:	c3                   	ret    

c001f086 <PIT::open(int, int, void*)>:
c001f086:	83 ec 0c             	sub    esp,0xc
c001f089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f08f:	83 c0 24             	add    eax,0x24
c001f092:	8b 00                	mov    eax,DWORD PTR [eax]
c001f094:	83 ec 08             	sub    esp,0x8
c001f097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f09f:	ff d0                	call   eax
c001f0a1:	83 c4 10             	add    esp,0x10
c001f0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a8:	83 ec 0c             	sub    esp,0xc
c001f0ab:	6a 00                	push   0x0
c001f0ad:	6a 01                	push   0x1
c001f0af:	68 56 f0 01 c0       	push   0xc001f056
c001f0b4:	6a 00                	push   0x0
c001f0b6:	50                   	push   eax
c001f0b7:	e8 d6 14 ff ff       	call   c0010592 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0bc:	83 c4 20             	add    esp,0x20
c001f0bf:	89 c2                	mov    edx,eax
c001f0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f0cb:	b8 00 00 00 00       	mov    eax,0x0
c001f0d0:	83 c4 0c             	add    esp,0xc
c001f0d3:	c3                   	ret    

c001f0d4 <PIT::close(int, int, void*)>:
c001f0d4:	83 ec 0c             	sub    esp,0xc
c001f0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0db:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e9:	6a 01                	push   0x1
c001f0eb:	68 56 f0 01 c0       	push   0xc001f056
c001f0f0:	6a 00                	push   0x0
c001f0f2:	50                   	push   eax
c001f0f3:	e8 f8 14 ff ff       	call   c00105f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0f8:	83 c4 10             	add    esp,0x10
c001f0fb:	b8 00 00 00 00       	mov    eax,0x0
c001f100:	83 c4 0c             	add    esp,0xc
c001f103:	c3                   	ret    

c001f104 <PIT::PIT()>:
c001f104:	83 ec 0c             	sub    esp,0xc
c001f107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10b:	83 ec 08             	sub    esp,0x8
c001f10e:	68 6c 3b 02 c0       	push   0xc0023b6c
c001f113:	50                   	push   eax
c001f114:	e8 fb 3b ff ff       	call   c0012d14 <Timer::Timer(char const*)>
c001f119:	83 c4 10             	add    esp,0x10
c001f11c:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c001f121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f125:	89 10                	mov    DWORD PTR [eax],edx
c001f127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f131:	31 d2                	xor    edx,edx
c001f133:	88 c2                	mov    dl,al
c001f135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f139:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f144:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f14a:	31 d2                	xor    edx,edx
c001f14c:	88 c2                	mov    dl,al
c001f14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f152:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f161:	8d 50 01             	lea    edx,[eax+0x1]
c001f164:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f168:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f16e:	31 d2                	xor    edx,edx
c001f170:	88 c2                	mov    dl,al
c001f172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f176:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f17a:	83 e1 3f             	and    ecx,0x3f
c001f17d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f181:	90                   	nop
c001f182:	83 c4 0c             	add    esp,0xc
c001f185:	c3                   	ret    
c001f186:	66 90                	xchg   ax,ax
c001f188:	66 90                	xchg   ax,ax
c001f18a:	66 90                	xchg   ax,ax
c001f18c:	66 90                	xchg   ax,ax
c001f18e:	66 90                	xchg   ax,ax

c001f190 <avxDetect>:
c001f190:	b8 00 00 00 00       	mov    eax,0x0
c001f195:	c3                   	ret    

c001f196 <avxSave>:
c001f196:	c3                   	ret    

c001f197 <avxLoad>:
c001f197:	c3                   	ret    

c001f198 <avxInit>:
c001f198:	c3                   	ret    

c001f199 <avxClose>:
c001f199:	c3                   	ret    
c001f19a:	66 90                	xchg   ax,ax
c001f19c:	66 90                	xchg   ax,ax
c001f19e:	66 90                	xchg   ax,ax

c001f1a0 <sseDetect>:
c001f1a0:	b8 01 00 00 00       	mov    eax,0x1
c001f1a5:	0f a2                	cpuid  
c001f1a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f1ad:	74 06                	je     c001f1b5 <sseDetect.noSSE>
c001f1af:	b8 01 00 00 00       	mov    eax,0x1
c001f1b4:	c3                   	ret    

c001f1b5 <sseDetect.noSSE>:
c001f1b5:	b8 00 00 00 00       	mov    eax,0x0
c001f1ba:	c3                   	ret    

c001f1bb <sseSave>:
c001f1bb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f1c0:	c3                   	ret    

c001f1c1 <sseLoad>:
c001f1c1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f1c6:	c3                   	ret    

c001f1c7 <sseInit>:
c001f1c7:	e8 40 00 00 00       	call   c001f20c <x87Init>
c001f1cc:	0f 20 e0             	mov    eax,cr4
c001f1cf:	66 0d 00 06          	or     ax,0x600
c001f1d3:	0f 22 e0             	mov    cr4,eax
c001f1d6:	c3                   	ret    

c001f1d7 <sseClose>:
c001f1d7:	c3                   	ret    
c001f1d8:	66 90                	xchg   ax,ax
c001f1da:	66 90                	xchg   ax,ax
c001f1dc:	66 90                	xchg   ax,ax
c001f1de:	66 90                	xchg   ax,ax

c001f1e0 <value_37F>:
c001f1e0:	7f 03                	jg     c001f1e5 <value_37A+0x1>

c001f1e2 <value_37E>:
c001f1e2:	7e 03                	jle    c001f1e7 <x87Detect+0x1>

c001f1e4 <value_37A>:
c001f1e4:	7a 03                	jp     c001f1e9 <x87Detect+0x3>

c001f1e6 <x87Detect>:
c001f1e6:	b8 01 00 00 00       	mov    eax,0x1
c001f1eb:	0f a2                	cpuid  
c001f1ed:	f7 c2 01 00 00 00    	test   edx,0x1
c001f1f3:	74 06                	je     c001f1fb <x87Detect.nox87>
c001f1f5:	b8 01 00 00 00       	mov    eax,0x1
c001f1fa:	c3                   	ret    

c001f1fb <x87Detect.nox87>:
c001f1fb:	b8 00 00 00 00       	mov    eax,0x0
c001f200:	c3                   	ret    

c001f201 <x87Save>:
c001f201:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f206:	c3                   	ret    

c001f207 <x87Load>:
c001f207:	dd 64 24 08          	frstor [esp+0x8]
c001f20b:	c3                   	ret    

c001f20c <x87Init>:
c001f20c:	9b db e3             	finit  
c001f20f:	0f 20 c0             	mov    eax,cr0
c001f212:	66 25 fb ff          	and    ax,0xfffb
c001f216:	66 0d 22 00          	or     ax,0x22
c001f21a:	0f 22 c0             	mov    cr0,eax
c001f21d:	0f 06                	clts   
c001f21f:	d9 2d e4 f1 01 c0    	fldcw  WORD PTR ds:0xc001f1e4
c001f225:	c3                   	ret    

c001f226 <x87Close>:
c001f226:	c3                   	ret    
c001f227:	90                   	nop

c001f228 <__do_global_ctors_aux>:
c001f228:	a1 08 03 02 c0       	mov    eax,ds:0xc0020308
c001f22d:	83 f8 ff             	cmp    eax,0xffffffff
c001f230:	74 1a                	je     c001f24c <__do_global_ctors_aux+0x24>
c001f232:	55                   	push   ebp
c001f233:	89 e5                	mov    ebp,esp
c001f235:	53                   	push   ebx
c001f236:	52                   	push   edx
c001f237:	bb 08 03 02 c0       	mov    ebx,0xc0020308
c001f23c:	ff d0                	call   eax
c001f23e:	83 eb 04             	sub    ebx,0x4
c001f241:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f243:	83 f8 ff             	cmp    eax,0xffffffff
c001f246:	75 f4                	jne    c001f23c <__do_global_ctors_aux+0x14>
c001f248:	58                   	pop    eax
c001f249:	5b                   	pop    ebx
c001f24a:	5d                   	pop    ebp
c001f24b:	c3                   	ret    
c001f24c:	c3                   	ret    
c001f24d:	66 90                	xchg   ax,ax
c001f24f:	90                   	nop

c001f250 <__divdi3>:
c001f250:	55                   	push   ebp
c001f251:	57                   	push   edi
c001f252:	56                   	push   esi
c001f253:	53                   	push   ebx
c001f254:	83 ec 1c             	sub    esp,0x1c
c001f257:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f25b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f25f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f262:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f266:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f26a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f26e:	85 db                	test   ebx,ebx
c001f270:	0f 88 8e 00 00 00    	js     c001f304 <__divdi3+0xb4>
c001f276:	89 dd                	mov    ebp,ebx
c001f278:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f280:	89 d3                	mov    ebx,edx
c001f282:	85 d2                	test   edx,edx
c001f284:	79 0d                	jns    c001f293 <__divdi3+0x43>
c001f286:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f28a:	f7 d8                	neg    eax
c001f28c:	83 d2 00             	adc    edx,0x0
c001f28f:	f7 da                	neg    edx
c001f291:	89 d3                	mov    ebx,edx
c001f293:	89 c7                	mov    edi,eax
c001f295:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f298:	85 db                	test   ebx,ebx
c001f29a:	75 48                	jne    c001f2e4 <__divdi3+0x94>
c001f29c:	39 ef                	cmp    edi,ebp
c001f29e:	76 24                	jbe    c001f2c4 <__divdi3+0x74>
c001f2a0:	89 ea                	mov    edx,ebp
c001f2a2:	f7 f7                	div    edi
c001f2a4:	89 c1                	mov    ecx,eax
c001f2a6:	31 f6                	xor    esi,esi
c001f2a8:	89 c8                	mov    eax,ecx
c001f2aa:	89 f2                	mov    edx,esi
c001f2ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2b0:	85 c9                	test   ecx,ecx
c001f2b2:	74 07                	je     c001f2bb <__divdi3+0x6b>
c001f2b4:	f7 d8                	neg    eax
c001f2b6:	83 d2 00             	adc    edx,0x0
c001f2b9:	f7 da                	neg    edx
c001f2bb:	83 c4 1c             	add    esp,0x1c
c001f2be:	5b                   	pop    ebx
c001f2bf:	5e                   	pop    esi
c001f2c0:	5f                   	pop    edi
c001f2c1:	5d                   	pop    ebp
c001f2c2:	c3                   	ret    
c001f2c3:	90                   	nop
c001f2c4:	85 ff                	test   edi,edi
c001f2c6:	75 0b                	jne    c001f2d3 <__divdi3+0x83>
c001f2c8:	b8 01 00 00 00       	mov    eax,0x1
c001f2cd:	31 d2                	xor    edx,edx
c001f2cf:	f7 f3                	div    ebx
c001f2d1:	89 c7                	mov    edi,eax
c001f2d3:	31 d2                	xor    edx,edx
c001f2d5:	89 e8                	mov    eax,ebp
c001f2d7:	f7 f7                	div    edi
c001f2d9:	89 c6                	mov    esi,eax
c001f2db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2de:	f7 f7                	div    edi
c001f2e0:	89 c1                	mov    ecx,eax
c001f2e2:	eb c4                	jmp    c001f2a8 <__divdi3+0x58>
c001f2e4:	39 eb                	cmp    ebx,ebp
c001f2e6:	77 3c                	ja     c001f324 <__divdi3+0xd4>
c001f2e8:	0f bd f3             	bsr    esi,ebx
c001f2eb:	83 f6 1f             	xor    esi,0x1f
c001f2ee:	75 40                	jne    c001f330 <__divdi3+0xe0>
c001f2f0:	39 eb                	cmp    ebx,ebp
c001f2f2:	72 09                	jb     c001f2fd <__divdi3+0xad>
c001f2f4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2f7:	0f 87 97 00 00 00    	ja     c001f394 <__divdi3+0x144>
c001f2fd:	b9 01 00 00 00       	mov    ecx,0x1
c001f302:	eb a4                	jmp    c001f2a8 <__divdi3+0x58>
c001f304:	f7 d9                	neg    ecx
c001f306:	83 d3 00             	adc    ebx,0x0
c001f309:	f7 db                	neg    ebx
c001f30b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f30e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f312:	89 dd                	mov    ebp,ebx
c001f314:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f31c:	e9 5f ff ff ff       	jmp    c001f280 <__divdi3+0x30>
c001f321:	8d 76 00             	lea    esi,[esi+0x0]
c001f324:	31 f6                	xor    esi,esi
c001f326:	31 c9                	xor    ecx,ecx
c001f328:	e9 7b ff ff ff       	jmp    c001f2a8 <__divdi3+0x58>
c001f32d:	8d 76 00             	lea    esi,[esi+0x0]
c001f330:	b8 20 00 00 00       	mov    eax,0x20
c001f335:	29 f0                	sub    eax,esi
c001f337:	89 f1                	mov    ecx,esi
c001f339:	d3 e3                	shl    ebx,cl
c001f33b:	89 fa                	mov    edx,edi
c001f33d:	88 c1                	mov    cl,al
c001f33f:	d3 ea                	shr    edx,cl
c001f341:	09 da                	or     edx,ebx
c001f343:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f347:	89 f1                	mov    ecx,esi
c001f349:	d3 e7                	shl    edi,cl
c001f34b:	89 eb                	mov    ebx,ebp
c001f34d:	88 c1                	mov    cl,al
c001f34f:	d3 eb                	shr    ebx,cl
c001f351:	89 f1                	mov    ecx,esi
c001f353:	d3 e5                	shl    ebp,cl
c001f355:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f358:	88 c1                	mov    cl,al
c001f35a:	d3 ea                	shr    edx,cl
c001f35c:	09 d5                	or     ebp,edx
c001f35e:	89 e8                	mov    eax,ebp
c001f360:	89 da                	mov    edx,ebx
c001f362:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f366:	89 d3                	mov    ebx,edx
c001f368:	89 c5                	mov    ebp,eax
c001f36a:	f7 e7                	mul    edi
c001f36c:	39 d3                	cmp    ebx,edx
c001f36e:	72 18                	jb     c001f388 <__divdi3+0x138>
c001f370:	74 0a                	je     c001f37c <__divdi3+0x12c>
c001f372:	89 e9                	mov    ecx,ebp
c001f374:	31 f6                	xor    esi,esi
c001f376:	e9 2d ff ff ff       	jmp    c001f2a8 <__divdi3+0x58>
c001f37b:	90                   	nop
c001f37c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f37f:	89 f1                	mov    ecx,esi
c001f381:	d3 e7                	shl    edi,cl
c001f383:	39 c7                	cmp    edi,eax
c001f385:	73 eb                	jae    c001f372 <__divdi3+0x122>
c001f387:	90                   	nop
c001f388:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f38b:	31 f6                	xor    esi,esi
c001f38d:	e9 16 ff ff ff       	jmp    c001f2a8 <__divdi3+0x58>
c001f392:	66 90                	xchg   ax,ax
c001f394:	31 c9                	xor    ecx,ecx
c001f396:	e9 0d ff ff ff       	jmp    c001f2a8 <__divdi3+0x58>
c001f39b:	90                   	nop

c001f39c <__moddi3>:
c001f39c:	55                   	push   ebp
c001f39d:	57                   	push   edi
c001f39e:	56                   	push   esi
c001f39f:	53                   	push   ebx
c001f3a0:	83 ec 2c             	sub    esp,0x2c
c001f3a3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f3a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f3ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f3af:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f3b3:	85 db                	test   ebx,ebx
c001f3b5:	0f 88 85 00 00 00    	js     c001f440 <__moddi3+0xa4>
c001f3bb:	89 de                	mov    esi,ebx
c001f3bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f3c5:	89 d7                	mov    edi,edx
c001f3c7:	85 d2                	test   edx,edx
c001f3c9:	79 09                	jns    c001f3d4 <__moddi3+0x38>
c001f3cb:	f7 d8                	neg    eax
c001f3cd:	83 d2 00             	adc    edx,0x0
c001f3d0:	f7 da                	neg    edx
c001f3d2:	89 d7                	mov    edi,edx
c001f3d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3d8:	89 cd                	mov    ebp,ecx
c001f3da:	85 ff                	test   edi,edi
c001f3dc:	75 52                	jne    c001f430 <__moddi3+0x94>
c001f3de:	89 c3                	mov    ebx,eax
c001f3e0:	39 f0                	cmp    eax,esi
c001f3e2:	76 24                	jbe    c001f408 <__moddi3+0x6c>
c001f3e4:	89 c8                	mov    eax,ecx
c001f3e6:	89 f2                	mov    edx,esi
c001f3e8:	f7 f3                	div    ebx
c001f3ea:	89 d6                	mov    esi,edx
c001f3ec:	89 f0                	mov    eax,esi
c001f3ee:	31 d2                	xor    edx,edx
c001f3f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3f4:	85 c9                	test   ecx,ecx
c001f3f6:	74 07                	je     c001f3ff <__moddi3+0x63>
c001f3f8:	f7 d8                	neg    eax
c001f3fa:	83 d2 00             	adc    edx,0x0
c001f3fd:	f7 da                	neg    edx
c001f3ff:	83 c4 2c             	add    esp,0x2c
c001f402:	5b                   	pop    ebx
c001f403:	5e                   	pop    esi
c001f404:	5f                   	pop    edi
c001f405:	5d                   	pop    ebp
c001f406:	c3                   	ret    
c001f407:	90                   	nop
c001f408:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f40c:	85 db                	test   ebx,ebx
c001f40e:	75 0d                	jne    c001f41d <__moddi3+0x81>
c001f410:	b8 01 00 00 00       	mov    eax,0x1
c001f415:	31 d2                	xor    edx,edx
c001f417:	f7 f7                	div    edi
c001f419:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f41d:	89 f0                	mov    eax,esi
c001f41f:	31 d2                	xor    edx,edx
c001f421:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f425:	f7 f7                	div    edi
c001f427:	89 e8                	mov    eax,ebp
c001f429:	f7 f7                	div    edi
c001f42b:	89 d6                	mov    esi,edx
c001f42d:	eb bd                	jmp    c001f3ec <__moddi3+0x50>
c001f42f:	90                   	nop
c001f430:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f434:	39 f7                	cmp    edi,esi
c001f436:	76 20                	jbe    c001f458 <__moddi3+0xbc>
c001f438:	89 c8                	mov    eax,ecx
c001f43a:	89 f2                	mov    edx,esi
c001f43c:	eb b2                	jmp    c001f3f0 <__moddi3+0x54>
c001f43e:	66 90                	xchg   ax,ax
c001f440:	f7 d9                	neg    ecx
c001f442:	83 d3 00             	adc    ebx,0x0
c001f445:	f7 db                	neg    ebx
c001f447:	89 de                	mov    esi,ebx
c001f449:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f451:	e9 6f ff ff ff       	jmp    c001f3c5 <__moddi3+0x29>
c001f456:	66 90                	xchg   ax,ax
c001f458:	0f bd c7             	bsr    eax,edi
c001f45b:	83 f0 1f             	xor    eax,0x1f
c001f45e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f462:	75 24                	jne    c001f488 <__moddi3+0xec>
c001f464:	39 f7                	cmp    edi,esi
c001f466:	72 06                	jb     c001f46e <__moddi3+0xd2>
c001f468:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f46c:	77 0c                	ja     c001f47a <__moddi3+0xde>
c001f46e:	89 e9                	mov    ecx,ebp
c001f470:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f474:	19 fe                	sbb    esi,edi
c001f476:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f47a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f47e:	89 f2                	mov    edx,esi
c001f480:	e9 6b ff ff ff       	jmp    c001f3f0 <__moddi3+0x54>
c001f485:	8d 76 00             	lea    esi,[esi+0x0]
c001f488:	b8 20 00 00 00       	mov    eax,0x20
c001f48d:	89 c2                	mov    edx,eax
c001f48f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f493:	29 da                	sub    edx,ebx
c001f495:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f499:	88 d9                	mov    cl,bl
c001f49b:	d3 e7                	shl    edi,cl
c001f49d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4a1:	88 d1                	mov    cl,dl
c001f4a3:	d3 e8                	shr    eax,cl
c001f4a5:	09 c7                	or     edi,eax
c001f4a7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f4ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f4af:	89 d8                	mov    eax,ebx
c001f4b1:	88 d9                	mov    cl,bl
c001f4b3:	d3 e7                	shl    edi,cl
c001f4b5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4b9:	89 f3                	mov    ebx,esi
c001f4bb:	88 d1                	mov    cl,dl
c001f4bd:	d3 eb                	shr    ebx,cl
c001f4bf:	89 c7                	mov    edi,eax
c001f4c1:	88 c1                	mov    cl,al
c001f4c3:	d3 e6                	shl    esi,cl
c001f4c5:	89 e8                	mov    eax,ebp
c001f4c7:	88 d1                	mov    cl,dl
c001f4c9:	d3 e8                	shr    eax,cl
c001f4cb:	09 f0                	or     eax,esi
c001f4cd:	89 f9                	mov    ecx,edi
c001f4cf:	d3 e5                	shl    ebp,cl
c001f4d1:	89 da                	mov    edx,ebx
c001f4d3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f4d7:	89 d3                	mov    ebx,edx
c001f4d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4dd:	89 c6                	mov    esi,eax
c001f4df:	89 d1                	mov    ecx,edx
c001f4e1:	39 d3                	cmp    ebx,edx
c001f4e3:	72 27                	jb     c001f50c <__moddi3+0x170>
c001f4e5:	74 21                	je     c001f508 <__moddi3+0x16c>
c001f4e7:	29 f5                	sub    ebp,esi
c001f4e9:	19 cb                	sbb    ebx,ecx
c001f4eb:	89 de                	mov    esi,ebx
c001f4ed:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f4f1:	d3 e6                	shl    esi,cl
c001f4f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f4f7:	89 f9                	mov    ecx,edi
c001f4f9:	d3 ed                	shr    ebp,cl
c001f4fb:	09 ee                	or     esi,ebp
c001f4fd:	89 f0                	mov    eax,esi
c001f4ff:	d3 eb                	shr    ebx,cl
c001f501:	89 da                	mov    edx,ebx
c001f503:	e9 e8 fe ff ff       	jmp    c001f3f0 <__moddi3+0x54>
c001f508:	39 c5                	cmp    ebp,eax
c001f50a:	73 db                	jae    c001f4e7 <__moddi3+0x14b>
c001f50c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f510:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f514:	89 d1                	mov    ecx,edx
c001f516:	89 c6                	mov    esi,eax
c001f518:	eb cd                	jmp    c001f4e7 <__moddi3+0x14b>
c001f51a:	66 90                	xchg   ax,ax

c001f51c <__udivdi3>:
c001f51c:	55                   	push   ebp
c001f51d:	57                   	push   edi
c001f51e:	56                   	push   esi
c001f51f:	53                   	push   ebx
c001f520:	83 ec 1c             	sub    esp,0x1c
c001f523:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f527:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f52b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f52f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f533:	85 d2                	test   edx,edx
c001f535:	75 41                	jne    c001f578 <__udivdi3+0x5c>
c001f537:	39 f7                	cmp    edi,esi
c001f539:	76 15                	jbe    c001f550 <__udivdi3+0x34>
c001f53b:	89 e8                	mov    eax,ebp
c001f53d:	89 f2                	mov    edx,esi
c001f53f:	f7 f7                	div    edi
c001f541:	31 db                	xor    ebx,ebx
c001f543:	89 da                	mov    edx,ebx
c001f545:	83 c4 1c             	add    esp,0x1c
c001f548:	5b                   	pop    ebx
c001f549:	5e                   	pop    esi
c001f54a:	5f                   	pop    edi
c001f54b:	5d                   	pop    ebp
c001f54c:	c3                   	ret    
c001f54d:	8d 76 00             	lea    esi,[esi+0x0]
c001f550:	89 f9                	mov    ecx,edi
c001f552:	85 ff                	test   edi,edi
c001f554:	75 0b                	jne    c001f561 <__udivdi3+0x45>
c001f556:	b8 01 00 00 00       	mov    eax,0x1
c001f55b:	31 d2                	xor    edx,edx
c001f55d:	f7 f7                	div    edi
c001f55f:	89 c1                	mov    ecx,eax
c001f561:	31 d2                	xor    edx,edx
c001f563:	89 f0                	mov    eax,esi
c001f565:	f7 f1                	div    ecx
c001f567:	89 c3                	mov    ebx,eax
c001f569:	89 e8                	mov    eax,ebp
c001f56b:	f7 f1                	div    ecx
c001f56d:	89 da                	mov    edx,ebx
c001f56f:	83 c4 1c             	add    esp,0x1c
c001f572:	5b                   	pop    ebx
c001f573:	5e                   	pop    esi
c001f574:	5f                   	pop    edi
c001f575:	5d                   	pop    ebp
c001f576:	c3                   	ret    
c001f577:	90                   	nop
c001f578:	39 f2                	cmp    edx,esi
c001f57a:	77 1c                	ja     c001f598 <__udivdi3+0x7c>
c001f57c:	0f bd da             	bsr    ebx,edx
c001f57f:	83 f3 1f             	xor    ebx,0x1f
c001f582:	75 24                	jne    c001f5a8 <__udivdi3+0x8c>
c001f584:	39 f2                	cmp    edx,esi
c001f586:	72 08                	jb     c001f590 <__udivdi3+0x74>
c001f588:	39 ef                	cmp    edi,ebp
c001f58a:	0f 87 84 00 00 00    	ja     c001f614 <__udivdi3+0xf8>
c001f590:	b8 01 00 00 00       	mov    eax,0x1
c001f595:	eb ac                	jmp    c001f543 <__udivdi3+0x27>
c001f597:	90                   	nop
c001f598:	31 db                	xor    ebx,ebx
c001f59a:	31 c0                	xor    eax,eax
c001f59c:	89 da                	mov    edx,ebx
c001f59e:	83 c4 1c             	add    esp,0x1c
c001f5a1:	5b                   	pop    ebx
c001f5a2:	5e                   	pop    esi
c001f5a3:	5f                   	pop    edi
c001f5a4:	5d                   	pop    ebp
c001f5a5:	c3                   	ret    
c001f5a6:	66 90                	xchg   ax,ax
c001f5a8:	b8 20 00 00 00       	mov    eax,0x20
c001f5ad:	29 d8                	sub    eax,ebx
c001f5af:	88 d9                	mov    cl,bl
c001f5b1:	d3 e2                	shl    edx,cl
c001f5b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f5b7:	89 fa                	mov    edx,edi
c001f5b9:	88 c1                	mov    cl,al
c001f5bb:	d3 ea                	shr    edx,cl
c001f5bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5c1:	09 d1                	or     ecx,edx
c001f5c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5c7:	88 d9                	mov    cl,bl
c001f5c9:	d3 e7                	shl    edi,cl
c001f5cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5cf:	89 f7                	mov    edi,esi
c001f5d1:	88 c1                	mov    cl,al
c001f5d3:	d3 ef                	shr    edi,cl
c001f5d5:	88 d9                	mov    cl,bl
c001f5d7:	d3 e6                	shl    esi,cl
c001f5d9:	89 ea                	mov    edx,ebp
c001f5db:	88 c1                	mov    cl,al
c001f5dd:	d3 ea                	shr    edx,cl
c001f5df:	09 d6                	or     esi,edx
c001f5e1:	89 f0                	mov    eax,esi
c001f5e3:	89 fa                	mov    edx,edi
c001f5e5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5e9:	89 d7                	mov    edi,edx
c001f5eb:	89 c6                	mov    esi,eax
c001f5ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5f1:	39 d7                	cmp    edi,edx
c001f5f3:	72 13                	jb     c001f608 <__udivdi3+0xec>
c001f5f5:	74 09                	je     c001f600 <__udivdi3+0xe4>
c001f5f7:	89 f0                	mov    eax,esi
c001f5f9:	31 db                	xor    ebx,ebx
c001f5fb:	e9 43 ff ff ff       	jmp    c001f543 <__udivdi3+0x27>
c001f600:	88 d9                	mov    cl,bl
c001f602:	d3 e5                	shl    ebp,cl
c001f604:	39 c5                	cmp    ebp,eax
c001f606:	73 ef                	jae    c001f5f7 <__udivdi3+0xdb>
c001f608:	8d 46 ff             	lea    eax,[esi-0x1]
c001f60b:	31 db                	xor    ebx,ebx
c001f60d:	e9 31 ff ff ff       	jmp    c001f543 <__udivdi3+0x27>
c001f612:	66 90                	xchg   ax,ax
c001f614:	31 c0                	xor    eax,eax
c001f616:	e9 28 ff ff ff       	jmp    c001f543 <__udivdi3+0x27>
c001f61b:	90                   	nop

c001f61c <__umoddi3>:
c001f61c:	55                   	push   ebp
c001f61d:	57                   	push   edi
c001f61e:	56                   	push   esi
c001f61f:	53                   	push   ebx
c001f620:	83 ec 1c             	sub    esp,0x1c
c001f623:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f627:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f62b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f62f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f633:	89 da                	mov    edx,ebx
c001f635:	85 c0                	test   eax,eax
c001f637:	75 37                	jne    c001f670 <__umoddi3+0x54>
c001f639:	39 df                	cmp    edi,ebx
c001f63b:	76 13                	jbe    c001f650 <__umoddi3+0x34>
c001f63d:	89 f0                	mov    eax,esi
c001f63f:	f7 f7                	div    edi
c001f641:	89 d0                	mov    eax,edx
c001f643:	31 d2                	xor    edx,edx
c001f645:	83 c4 1c             	add    esp,0x1c
c001f648:	5b                   	pop    ebx
c001f649:	5e                   	pop    esi
c001f64a:	5f                   	pop    edi
c001f64b:	5d                   	pop    ebp
c001f64c:	c3                   	ret    
c001f64d:	8d 76 00             	lea    esi,[esi+0x0]
c001f650:	89 fd                	mov    ebp,edi
c001f652:	85 ff                	test   edi,edi
c001f654:	75 0b                	jne    c001f661 <__umoddi3+0x45>
c001f656:	b8 01 00 00 00       	mov    eax,0x1
c001f65b:	31 d2                	xor    edx,edx
c001f65d:	f7 f7                	div    edi
c001f65f:	89 c5                	mov    ebp,eax
c001f661:	89 d8                	mov    eax,ebx
c001f663:	31 d2                	xor    edx,edx
c001f665:	f7 f5                	div    ebp
c001f667:	89 f0                	mov    eax,esi
c001f669:	f7 f5                	div    ebp
c001f66b:	89 d0                	mov    eax,edx
c001f66d:	eb d4                	jmp    c001f643 <__umoddi3+0x27>
c001f66f:	90                   	nop
c001f670:	89 f1                	mov    ecx,esi
c001f672:	39 d8                	cmp    eax,ebx
c001f674:	76 0a                	jbe    c001f680 <__umoddi3+0x64>
c001f676:	89 f0                	mov    eax,esi
c001f678:	83 c4 1c             	add    esp,0x1c
c001f67b:	5b                   	pop    ebx
c001f67c:	5e                   	pop    esi
c001f67d:	5f                   	pop    edi
c001f67e:	5d                   	pop    ebp
c001f67f:	c3                   	ret    
c001f680:	0f bd e8             	bsr    ebp,eax
c001f683:	83 f5 1f             	xor    ebp,0x1f
c001f686:	75 1c                	jne    c001f6a4 <__umoddi3+0x88>
c001f688:	39 d8                	cmp    eax,ebx
c001f68a:	72 04                	jb     c001f690 <__umoddi3+0x74>
c001f68c:	39 f7                	cmp    edi,esi
c001f68e:	77 08                	ja     c001f698 <__umoddi3+0x7c>
c001f690:	89 da                	mov    edx,ebx
c001f692:	29 fe                	sub    esi,edi
c001f694:	19 c2                	sbb    edx,eax
c001f696:	89 f1                	mov    ecx,esi
c001f698:	89 c8                	mov    eax,ecx
c001f69a:	83 c4 1c             	add    esp,0x1c
c001f69d:	5b                   	pop    ebx
c001f69e:	5e                   	pop    esi
c001f69f:	5f                   	pop    edi
c001f6a0:	5d                   	pop    ebp
c001f6a1:	c3                   	ret    
c001f6a2:	66 90                	xchg   ax,ax
c001f6a4:	ba 20 00 00 00       	mov    edx,0x20
c001f6a9:	29 ea                	sub    edx,ebp
c001f6ab:	89 e9                	mov    ecx,ebp
c001f6ad:	d3 e0                	shl    eax,cl
c001f6af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f6b3:	89 f8                	mov    eax,edi
c001f6b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f6b9:	88 d1                	mov    cl,dl
c001f6bb:	d3 e8                	shr    eax,cl
c001f6bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6c1:	09 c1                	or     ecx,eax
c001f6c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f6c7:	89 e9                	mov    ecx,ebp
c001f6c9:	d3 e7                	shl    edi,cl
c001f6cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6cf:	89 d8                	mov    eax,ebx
c001f6d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6d5:	88 d1                	mov    cl,dl
c001f6d7:	d3 e8                	shr    eax,cl
c001f6d9:	89 c7                	mov    edi,eax
c001f6db:	89 e9                	mov    ecx,ebp
c001f6dd:	d3 e3                	shl    ebx,cl
c001f6df:	89 f0                	mov    eax,esi
c001f6e1:	88 d1                	mov    cl,dl
c001f6e3:	d3 e8                	shr    eax,cl
c001f6e5:	09 d8                	or     eax,ebx
c001f6e7:	89 e9                	mov    ecx,ebp
c001f6e9:	d3 e6                	shl    esi,cl
c001f6eb:	89 f3                	mov    ebx,esi
c001f6ed:	89 fa                	mov    edx,edi
c001f6ef:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f6f3:	89 d1                	mov    ecx,edx
c001f6f5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6f9:	89 c6                	mov    esi,eax
c001f6fb:	89 d7                	mov    edi,edx
c001f6fd:	39 d1                	cmp    ecx,edx
c001f6ff:	72 27                	jb     c001f728 <__umoddi3+0x10c>
c001f701:	74 21                	je     c001f724 <__umoddi3+0x108>
c001f703:	89 ca                	mov    edx,ecx
c001f705:	29 f3                	sub    ebx,esi
c001f707:	19 fa                	sbb    edx,edi
c001f709:	89 d0                	mov    eax,edx
c001f70b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f70f:	d3 e0                	shl    eax,cl
c001f711:	89 e9                	mov    ecx,ebp
c001f713:	d3 eb                	shr    ebx,cl
c001f715:	09 d8                	or     eax,ebx
c001f717:	d3 ea                	shr    edx,cl
c001f719:	83 c4 1c             	add    esp,0x1c
c001f71c:	5b                   	pop    ebx
c001f71d:	5e                   	pop    esi
c001f71e:	5f                   	pop    edi
c001f71f:	5d                   	pop    ebp
c001f720:	c3                   	ret    
c001f721:	8d 76 00             	lea    esi,[esi+0x0]
c001f724:	39 c3                	cmp    ebx,eax
c001f726:	73 db                	jae    c001f703 <__umoddi3+0xe7>
c001f728:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f72c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f730:	89 d7                	mov    edi,edx
c001f732:	89 c6                	mov    esi,eax
c001f734:	eb cd                	jmp    c001f703 <__umoddi3+0xe7>
c001f736:	66 90                	xchg   ax,ax
c001f738:	66 90                	xchg   ax,ax
c001f73a:	66 90                	xchg   ax,ax
c001f73c:	66 90                	xchg   ax,ax
c001f73e:	66 90                	xchg   ax,ax

c001f740 <fabs>:
c001f740:	83 ec 0c             	sub    esp,0xc
c001f743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f747:	89 04 24             	mov    DWORD PTR [esp],eax
c001f74a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f74e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f753:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f757:	dd 04 24             	fld    QWORD PTR [esp]
c001f75a:	83 c4 0c             	add    esp,0xc
c001f75d:	c3                   	ret    
c001f75e:	66 90                	xchg   ax,ax

c001f760 <lrint>:
c001f760:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f764:	83 ec 04             	sub    esp,0x4
c001f767:	db 1c 24             	fistp  DWORD PTR [esp]
c001f76a:	58                   	pop    eax
c001f76b:	c3                   	ret    

c001f76c <lrintf>:
c001f76c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f770:	83 ec 04             	sub    esp,0x4
c001f773:	db 1c 24             	fistp  DWORD PTR [esp]
c001f776:	58                   	pop    eax
c001f777:	c3                   	ret    

Disassembly of section .init:

c001f778 <_init>:
c001f778:	55                   	push   ebp
c001f779:	89 e5                	mov    ebp,esp
c001f77b:	e8 98 09 fe ff       	call   c0000118 <frame_dummy>
c001f780:	e8 a3 fa ff ff       	call   c001f228 <__do_global_ctors_aux>
c001f785:	5d                   	pop    ebp
c001f786:	c3                   	ret    

Disassembly of section .fini:

c001f787 <_fini>:
c001f787:	55                   	push   ebp
c001f788:	89 e5                	mov    ebp,esp
c001f78a:	e8 19 09 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f78f:	5d                   	pop    ebp
c001f790:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f792 <Computer::~Computer()>:
c001f792:	83 ec 0c             	sub    esp,0xc
c001f795:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c001f79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79e:	89 10                	mov    DWORD PTR [eax],edx
c001f7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a4:	83 ec 0c             	sub    esp,0xc
c001f7a7:	50                   	push   eax
c001f7a8:	e8 37 0d ff ff       	call   c00104e4 <Device::~Device()>
c001f7ad:	83 c4 10             	add    esp,0x10
c001f7b0:	90                   	nop
c001f7b1:	83 c4 0c             	add    esp,0xc
c001f7b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f7b6 <Computer::~Computer()>:
c001f7b6:	83 ec 0c             	sub    esp,0xc
c001f7b9:	83 ec 0c             	sub    esp,0xc
c001f7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7c0:	e8 cd ff ff ff       	call   c001f792 <Computer::~Computer()>
c001f7c5:	83 c4 10             	add    esp,0x10
c001f7c8:	83 ec 08             	sub    esp,0x8
c001f7cb:	68 ec 01 00 00       	push   0x1ec
c001f7d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d4:	e8 2a f9 fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001f7d9:	83 c4 10             	add    esp,0x10
c001f7dc:	83 c4 0c             	add    esp,0xc
c001f7df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f7e0 <idleCommon()>:
c001f7e0:	83 ec 0c             	sub    esp,0xc
c001f7e3:	e8 73 92 ff ff       	call   c0018a5b <lockScheduler()>
c001f7e8:	e8 b7 95 ff ff       	call   c0018da4 <schedule()>
c001f7ed:	83 c4 0c             	add    esp,0xc
c001f7f0:	e9 68 92 ff ff       	jmp    c0018a5d <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f7f5 <CPU::readCR3()>:
c001f7f5:	83 ec 10             	sub    esp,0x10
c001f7f8:	0f 20 d8             	mov    eax,cr3
c001f7fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f803:	83 c4 10             	add    esp,0x10
c001f806:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f807 <CPU::writeCR3(unsigned long)>:
c001f807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f80b:	0f 22 d8             	mov    cr3,eax
c001f80e:	90                   	nop
c001f80f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f810 <LinkedList<UnixFile>::~LinkedList()>:
c001f810:	90                   	nop
c001f811:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f812 <LinkedList<UnixFile>::LinkedList()>:
c001f812:	83 ec 0c             	sub    esp,0xc
c001f815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f819:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f823:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f839:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f843:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f855:	83 ec 0c             	sub    esp,0xc
c001f858:	68 9d 15 02 c0       	push   0xc002159d
c001f85d:	e8 c7 f9 fe ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001f862:	83 c4 10             	add    esp,0x10
c001f865:	90                   	nop
c001f866:	83 c4 0c             	add    esp,0xc
c001f869:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f86a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f86a:	83 ec 0c             	sub    esp,0xc
c001f86d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f872:	75 10                	jne    c001f884 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f874:	83 ec 0c             	sub    esp,0xc
c001f877:	68 b8 15 02 c0       	push   0xc00215b8
c001f87c:	e8 d1 61 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f881:	83 c4 10             	add    esp,0x10
c001f884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f888:	8b 00                	mov    eax,DWORD PTR [eax]
c001f88a:	85 c0                	test   eax,eax
c001f88c:	74 34                	je     c001f8c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f892:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f895:	85 c0                	test   eax,eax
c001f897:	74 29                	je     c001f8c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8c0:	eb 65                	jmp    c001f927 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c8:	85 c0                	test   eax,eax
c001f8ca:	75 4b                	jne    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8d3:	85 c0                	test   eax,eax
c001f8d5:	75 40                	jne    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8df:	89 10                	mov    DWORD PTR [eax],edx
c001f8e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f901:	85 c0                	test   eax,eax
c001f903:	74 22                	je     c001f927 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f905:	83 ec 0c             	sub    esp,0xc
c001f908:	68 da 15 02 c0       	push   0xc00215da
c001f90d:	e8 40 61 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f912:	83 c4 10             	add    esp,0x10
c001f915:	eb 10                	jmp    c001f927 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f917:	83 ec 0c             	sub    esp,0xc
c001f91a:	68 e4 15 02 c0       	push   0xc00215e4
c001f91f:	e8 2e 61 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f924:	83 c4 10             	add    esp,0x10
c001f927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f92e:	8d 50 01             	lea    edx,[eax+0x1]
c001f931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f935:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f938:	90                   	nop
c001f939:	83 c4 0c             	add    esp,0xc
c001f93c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f93e <LinkedList<UnixFile>::getFirstElement()>:
c001f93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f942:	8b 00                	mov    eax,DWORD PTR [eax]
c001f944:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f946 <LinkedList<UnixFile>::removeFirst()>:
c001f946:	83 ec 0c             	sub    esp,0xc
c001f949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f94f:	85 c0                	test   eax,eax
c001f951:	75 12                	jne    c001f965 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	68 f0 15 02 c0       	push   0xc00215f0
c001f95b:	e8 f2 60 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f960:	83 c4 10             	add    esp,0x10
c001f963:	eb 7e                	jmp    c001f9e3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f969:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f96c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f96f:	85 c0                	test   eax,eax
c001f971:	74 10                	je     c001f983 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f973:	83 ec 0c             	sub    esp,0xc
c001f976:	68 3b 16 02 c0       	push   0xc002163b
c001f97b:	e8 d2 60 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f980:	83 c4 10             	add    esp,0x10
c001f983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f987:	8b 00                	mov    eax,DWORD PTR [eax]
c001f989:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f98c:	85 c0                	test   eax,eax
c001f98e:	75 33                	jne    c001f9c3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f994:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9ac:	83 f8 01             	cmp    eax,0x1
c001f9af:	74 21                	je     c001f9d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9b1:	83 ec 0c             	sub    esp,0xc
c001f9b4:	68 14 16 02 c0       	push   0xc0021614
c001f9b9:	e8 94 60 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f9be:	83 c4 10             	add    esp,0x10
c001f9c1:	eb 0f                	jmp    c001f9d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	89 10                	mov    DWORD PTR [eax],edx
c001f9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9d9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9e3:	83 c4 0c             	add    esp,0xc
c001f9e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f9e8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f9e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9ef:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f9f0 <DriverlessDevice::~DriverlessDevice()>:
c001f9f0:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c001f9f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9f9:	89 10                	mov    DWORD PTR [eax],edx
c001f9fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ff:	50                   	push   eax
c001fa00:	e8 df 0a ff ff       	call   c00104e4 <Device::~Device()>
c001fa05:	83 c4 04             	add    esp,0x4
c001fa08:	90                   	nop
c001fa09:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fa0a <DriverlessDevice::~DriverlessDevice()>:
c001fa0a:	83 ec 0c             	sub    esp,0xc
c001fa0d:	83 ec 0c             	sub    esp,0xc
c001fa10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa14:	e8 d7 ff ff ff       	call   c001f9f0 <DriverlessDevice::~DriverlessDevice()>
c001fa19:	83 c4 10             	add    esp,0x10
c001fa1c:	83 ec 08             	sub    esp,0x8
c001fa1f:	68 58 01 00 00       	push   0x158
c001fa24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa28:	e8 d6 f6 fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001fa2d:	83 c4 10             	add    esp,0x10
c001fa30:	83 c4 0c             	add    esp,0xc
c001fa33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fa34 <LinkedList<Device>::addElement(Device*)>:
c001fa34:	83 ec 0c             	sub    esp,0xc
c001fa37:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa3c:	75 10                	jne    c001fa4e <LinkedList<Device>::addElement(Device*)+0x1a>
c001fa3e:	83 ec 0c             	sub    esp,0xc
c001fa41:	68 b8 15 02 c0       	push   0xc00215b8
c001fa46:	e8 07 60 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fa4b:	83 c4 10             	add    esp,0x10
c001fa4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa52:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa54:	85 c0                	test   eax,eax
c001fa56:	74 3a                	je     c001fa92 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa5f:	85 c0                	test   eax,eax
c001fa61:	74 2f                	je     c001fa92 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa6e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa86:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa90:	eb 68                	jmp    c001fafa <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa96:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa98:	85 c0                	test   eax,eax
c001fa9a:	75 4e                	jne    c001faea <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faa3:	85 c0                	test   eax,eax
c001faa5:	75 43                	jne    c001faea <LinkedList<Device>::addElement(Device*)+0xb6>
c001faa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faaf:	89 10                	mov    DWORD PTR [eax],edx
c001fab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fab9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fac3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001facd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fad4:	85 c0                	test   eax,eax
c001fad6:	74 22                	je     c001fafa <LinkedList<Device>::addElement(Device*)+0xc6>
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	68 da 15 02 c0       	push   0xc00215da
c001fae0:	e8 6d 5f ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fae5:	83 c4 10             	add    esp,0x10
c001fae8:	eb 10                	jmp    c001fafa <LinkedList<Device>::addElement(Device*)+0xc6>
c001faea:	83 ec 0c             	sub    esp,0xc
c001faed:	68 e4 15 02 c0       	push   0xc00215e4
c001faf2:	e8 5b 5f ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001faf7:	83 c4 10             	add    esp,0x10
c001fafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb01:	8d 50 01             	lea    edx,[eax+0x1]
c001fb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb08:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb0b:	90                   	nop
c001fb0c:	83 c4 0c             	add    esp,0xc
c001fb0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fb10 <LinkedList<Device>::LinkedList()>:
c001fb10:	83 ec 0c             	sub    esp,0xc
c001fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb53:	83 ec 0c             	sub    esp,0xc
c001fb56:	68 9d 15 02 c0       	push   0xc002159d
c001fb5b:	e8 c9 f6 fe ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001fb60:	83 c4 10             	add    esp,0x10
c001fb63:	90                   	nop
c001fb64:	83 c4 0c             	add    esp,0xc
c001fb67:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fb68 <CPU::readCR0()>:
c001fb68:	83 ec 10             	sub    esp,0x10
c001fb6b:	0f 20 c0             	mov    eax,cr0
c001fb6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb76:	83 c4 10             	add    esp,0x10
c001fb79:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fb7a <CPU::writeCR0(unsigned long)>:
c001fb7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb7e:	0f 22 c0             	mov    cr0,eax
c001fb81:	90                   	nop
c001fb82:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fb83 <CPU::readDR0()>:
c001fb83:	83 ec 10             	sub    esp,0x10
c001fb86:	0f 21 c0             	mov    eax,db0
c001fb89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb91:	83 c4 10             	add    esp,0x10
c001fb94:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fb95 <CPU::readDR1()>:
c001fb95:	83 ec 10             	sub    esp,0x10
c001fb98:	0f 21 c8             	mov    eax,db1
c001fb9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba3:	83 c4 10             	add    esp,0x10
c001fba6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fba7 <CPU::readDR2()>:
c001fba7:	83 ec 10             	sub    esp,0x10
c001fbaa:	0f 21 d0             	mov    eax,db2
c001fbad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbb5:	83 c4 10             	add    esp,0x10
c001fbb8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fbb9 <CPU::readDR3()>:
c001fbb9:	83 ec 10             	sub    esp,0x10
c001fbbc:	0f 21 d8             	mov    eax,db3
c001fbbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbc7:	83 c4 10             	add    esp,0x10
c001fbca:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fbcb <CPU::readDR6()>:
c001fbcb:	83 ec 10             	sub    esp,0x10
c001fbce:	0f 21 f0             	mov    eax,db6
c001fbd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbd9:	83 c4 10             	add    esp,0x10
c001fbdc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fbdd <CPU::readDR7()>:
c001fbdd:	83 ec 10             	sub    esp,0x10
c001fbe0:	0f 21 f8             	mov    eax,db7
c001fbe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbeb:	83 c4 10             	add    esp,0x10
c001fbee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fbf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbf6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fbf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbfe:	85 c0                	test   eax,eax
c001fc00:	75 0e                	jne    c001fc10 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fc02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc09:	85 c0                	test   eax,eax
c001fc0b:	75 03                	jne    c001fc10 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fc0d:	b0 01                	mov    al,0x1
c001fc0f:	c3                   	ret    
c001fc10:	b0 00                	mov    al,0x0
c001fc12:	90                   	nop
c001fc13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc1d:	85 c0                	test   eax,eax
c001fc1f:	75 15                	jne    c001fc36 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fc21:	83 ec 0c             	sub    esp,0xc
c001fc24:	68 f0 15 02 c0       	push   0xc00215f0
c001fc29:	e8 24 5e ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fc2e:	83 c4 10             	add    esp,0x10
c001fc31:	e9 88 00 00 00       	jmp    c001fcbe <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc40:	85 c0                	test   eax,eax
c001fc42:	0f 95 c0             	setne  al
c001fc45:	84 c0                	test   al,al
c001fc47:	74 10                	je     c001fc59 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fc49:	83 ec 0c             	sub    esp,0xc
c001fc4c:	68 3b 16 02 c0       	push   0xc002163b
c001fc51:	e8 fc 5d ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fc56:	83 c4 10             	add    esp,0x10
c001fc59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc62:	85 c0                	test   eax,eax
c001fc64:	0f 94 c0             	sete   al
c001fc67:	84 c0                	test   al,al
c001fc69:	74 33                	je     c001fc9e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fc6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc87:	83 f8 01             	cmp    eax,0x1
c001fc8a:	74 21                	je     c001fcad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	68 14 16 02 c0       	push   0xc0021614
c001fc94:	e8 b9 5d ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	eb 0f                	jmp    c001fcad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca2:	8b 00                	mov    eax,DWORD PTR [eax]
c001fca4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcab:	89 10                	mov    DWORD PTR [eax],edx
c001fcad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcb4:	8d 50 ff             	lea    edx,[eax-0x1]
c001fcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcbe:	83 c4 0c             	add    esp,0xc
c001fcc1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fcc2:	83 ec 0c             	sub    esp,0xc
c001fcc5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcca:	75 10                	jne    c001fcdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fccc:	83 ec 0c             	sub    esp,0xc
c001fccf:	68 b8 15 02 c0       	push   0xc00215b8
c001fcd4:	e8 79 5d ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fcd9:	83 c4 10             	add    esp,0x10
c001fcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fce2:	85 c0                	test   eax,eax
c001fce4:	74 34                	je     c001fd1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fced:	85 c0                	test   eax,eax
c001fcef:	74 29                	je     c001fd1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcfc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fcff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd11:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd18:	eb 65                	jmp    c001fd7f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd20:	85 c0                	test   eax,eax
c001fd22:	75 4b                	jne    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd2b:	85 c0                	test   eax,eax
c001fd2d:	75 40                	jne    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd37:	89 10                	mov    DWORD PTR [eax],edx
c001fd39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd41:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd4b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd59:	85 c0                	test   eax,eax
c001fd5b:	74 22                	je     c001fd7f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd5d:	83 ec 0c             	sub    esp,0xc
c001fd60:	68 da 15 02 c0       	push   0xc00215da
c001fd65:	e8 e8 5c ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fd6a:	83 c4 10             	add    esp,0x10
c001fd6d:	eb 10                	jmp    c001fd7f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd6f:	83 ec 0c             	sub    esp,0xc
c001fd72:	68 e4 15 02 c0       	push   0xc00215e4
c001fd77:	e8 d6 5c ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fd7c:	83 c4 10             	add    esp,0x10
c001fd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd86:	8d 50 01             	lea    edx,[eax+0x1]
c001fd89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd90:	90                   	nop
c001fd91:	83 c4 0c             	add    esp,0xc
c001fd94:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fd96 <ACPI::~ACPI()>:
c001fd96:	83 ec 0c             	sub    esp,0xc
c001fd99:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c001fd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda2:	89 10                	mov    DWORD PTR [eax],edx
c001fda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda8:	83 ec 0c             	sub    esp,0xc
c001fdab:	50                   	push   eax
c001fdac:	e8 33 07 ff ff       	call   c00104e4 <Device::~Device()>
c001fdb1:	83 c4 10             	add    esp,0x10
c001fdb4:	90                   	nop
c001fdb5:	83 c4 0c             	add    esp,0xc
c001fdb8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fdba <ACPI::~ACPI()>:
c001fdba:	83 ec 0c             	sub    esp,0xc
c001fdbd:	83 ec 0c             	sub    esp,0xc
c001fdc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc4:	e8 cd ff ff ff       	call   c001fd96 <ACPI::~ACPI()>
c001fdc9:	83 c4 10             	add    esp,0x10
c001fdcc:	83 ec 08             	sub    esp,0x8
c001fdcf:	68 68 22 00 00       	push   0x2268
c001fdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdd8:	e8 26 f3 fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001fddd:	83 c4 10             	add    esp,0x10
c001fde0:	83 c4 0c             	add    esp,0xc
c001fde3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fde4 <CPU::~CPU()>:
c001fde4:	83 ec 0c             	sub    esp,0xc
c001fde7:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c001fdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf0:	89 10                	mov    DWORD PTR [eax],edx
c001fdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf6:	83 ec 0c             	sub    esp,0xc
c001fdf9:	50                   	push   eax
c001fdfa:	e8 e5 06 ff ff       	call   c00104e4 <Device::~Device()>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	90                   	nop
c001fe03:	83 c4 0c             	add    esp,0xc
c001fe06:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fe08 <CPU::~CPU()>:
c001fe08:	83 ec 0c             	sub    esp,0xc
c001fe0b:	83 ec 0c             	sub    esp,0xc
c001fe0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe12:	e8 cd ff ff ff       	call   c001fde4 <CPU::~CPU()>
c001fe17:	83 c4 10             	add    esp,0x10
c001fe1a:	83 ec 08             	sub    esp,0x8
c001fe1d:	68 98 11 00 00       	push   0x1198
c001fe22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe26:	e8 d8 f2 fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	83 c4 0c             	add    esp,0xc
c001fe31:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fe32 <CPU::readCR4()>:
c001fe32:	83 ec 10             	sub    esp,0x10
c001fe35:	0f 20 e0             	mov    eax,cr4
c001fe38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe40:	83 c4 10             	add    esp,0x10
c001fe43:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fe44 <CPU::writeDR7(unsigned long)>:
c001fe44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe48:	0f 23 f8             	mov    db7,eax
c001fe4b:	90                   	nop
c001fe4c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fe4d <CPU::writeCR4(unsigned long)>:
c001fe4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe51:	0f 22 e0             	mov    cr4,eax
c001fe54:	90                   	nop
c001fe55:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fe56 <CPU::readCR2()>:
c001fe56:	83 ec 10             	sub    esp,0x10
c001fe59:	0f 20 d0             	mov    eax,cr2
c001fe5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe64:	83 c4 10             	add    esp,0x10
c001fe67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fe68 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fe68:	90                   	nop
c001fe69:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fe6a <ThreadControlBlock::ThreadControlBlock()>:
c001fe6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe6e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe79:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fe80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe84:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fe8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe8f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fe96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe9a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fe9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fea2:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fea6:	90                   	nop
c001fea7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fea8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fea8:	83 ec 0c             	sub    esp,0xc
c001feab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001feb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001feeb:	83 ec 0c             	sub    esp,0xc
c001feee:	68 9d 15 02 c0       	push   0xc002159d
c001fef3:	e8 31 f3 fe ff       	call   c000f229 <Dbg::kprintf(char const*, ...)>
c001fef8:	83 c4 10             	add    esp,0x10
c001fefb:	90                   	nop
c001fefc:	83 c4 0c             	add    esp,0xc
c001feff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ff00 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ff00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff04:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ff07:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ff08 <PCI::~PCI()>:
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001ff10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff14:	89 10                	mov    DWORD PTR [eax],edx
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	83 ec 0c             	sub    esp,0xc
c001ff1d:	50                   	push   eax
c001ff1e:	e8 cb ff fe ff       	call   c000feee <Bus::~Bus()>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	90                   	nop
c001ff27:	83 c4 0c             	add    esp,0xc
c001ff2a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ff2c <PCI::~PCI()>:
c001ff2c:	83 ec 0c             	sub    esp,0xc
c001ff2f:	83 ec 0c             	sub    esp,0xc
c001ff32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff36:	e8 cd ff ff ff       	call   c001ff08 <PCI::~PCI()>
c001ff3b:	83 c4 10             	add    esp,0x10
c001ff3e:	83 ec 08             	sub    esp,0x8
c001ff41:	68 58 01 00 00       	push   0x158
c001ff46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff4a:	e8 b4 f1 fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001ff4f:	83 c4 10             	add    esp,0x10
c001ff52:	83 c4 0c             	add    esp,0xc
c001ff55:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ff56 <IDE::~IDE()>:
c001ff56:	83 ec 0c             	sub    esp,0xc
c001ff59:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001ff5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff62:	89 10                	mov    DWORD PTR [eax],edx
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	83 ec 0c             	sub    esp,0xc
c001ff6b:	50                   	push   eax
c001ff6c:	e8 85 0a ff ff       	call   c00109f6 <HardDiskController::~HardDiskController()>
c001ff71:	83 c4 10             	add    esp,0x10
c001ff74:	90                   	nop
c001ff75:	83 c4 0c             	add    esp,0xc
c001ff78:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ff7a <IDE::~IDE()>:
c001ff7a:	83 ec 0c             	sub    esp,0xc
c001ff7d:	83 ec 0c             	sub    esp,0xc
c001ff80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff84:	e8 cd ff ff ff       	call   c001ff56 <IDE::~IDE()>
c001ff89:	83 c4 10             	add    esp,0x10
c001ff8c:	83 ec 08             	sub    esp,0x8
c001ff8f:	68 70 02 00 00       	push   0x270
c001ff94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff98:	e8 66 f1 fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001ff9d:	83 c4 10             	add    esp,0x10
c001ffa0:	83 c4 0c             	add    esp,0xc
c001ffa3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ffa4 <ATA::~ATA()>:
c001ffa4:	83 ec 0c             	sub    esp,0xc
c001ffa7:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001ffac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb0:	89 10                	mov    DWORD PTR [eax],edx
c001ffb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb6:	83 ec 0c             	sub    esp,0xc
c001ffb9:	50                   	push   eax
c001ffba:	e8 15 0b ff ff       	call   c0010ad4 <PhysicalDisk::~PhysicalDisk()>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	90                   	nop
c001ffc3:	83 c4 0c             	add    esp,0xc
c001ffc6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ffc8 <ATA::~ATA()>:
c001ffc8:	83 ec 0c             	sub    esp,0xc
c001ffcb:	83 ec 0c             	sub    esp,0xc
c001ffce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd2:	e8 cd ff ff ff       	call   c001ffa4 <ATA::~ATA()>
c001ffd7:	83 c4 10             	add    esp,0x10
c001ffda:	83 ec 08             	sub    esp,0x8
c001ffdd:	68 7c 01 00 00       	push   0x17c
c001ffe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffe6:	e8 18 f1 fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c001ffeb:	83 c4 10             	add    esp,0x10
c001ffee:	83 c4 0c             	add    esp,0xc
c001fff1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fff2 <ATAPI::~ATAPI()>:
c001fff2:	83 ec 0c             	sub    esp,0xc
c001fff5:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001fffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffe:	89 10                	mov    DWORD PTR [eax],edx
c0020000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020004:	83 ec 0c             	sub    esp,0xc
c0020007:	50                   	push   eax
c0020008:	e8 c7 0a ff ff       	call   c0010ad4 <PhysicalDisk::~PhysicalDisk()>
c002000d:	83 c4 10             	add    esp,0x10
c0020010:	90                   	nop
c0020011:	83 c4 0c             	add    esp,0xc
c0020014:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020016 <ATAPI::~ATAPI()>:
c0020016:	83 ec 0c             	sub    esp,0xc
c0020019:	83 ec 0c             	sub    esp,0xc
c002001c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020020:	e8 cd ff ff ff       	call   c001fff2 <ATAPI::~ATAPI()>
c0020025:	83 c4 10             	add    esp,0x10
c0020028:	83 ec 08             	sub    esp,0x8
c002002b:	68 80 01 00 00       	push   0x180
c0020030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020034:	e8 ca f0 fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0020039:	83 c4 10             	add    esp,0x10
c002003c:	83 c4 0c             	add    esp,0xc
c002003f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0020040 <AVX::~AVX()>:
c0020040:	83 ec 0c             	sub    esp,0xc
c0020043:	ba 88 38 02 c0       	mov    edx,0xc0023888
c0020048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002004c:	89 10                	mov    DWORD PTR [eax],edx
c002004e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020052:	83 ec 0c             	sub    esp,0xc
c0020055:	50                   	push   eax
c0020056:	e8 fd 0a ff ff       	call   c0010b58 <FPU::~FPU()>
c002005b:	83 c4 10             	add    esp,0x10
c002005e:	90                   	nop
c002005f:	83 c4 0c             	add    esp,0xc
c0020062:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0020064 <AVX::~AVX()>:
c0020064:	83 ec 0c             	sub    esp,0xc
c0020067:	83 ec 0c             	sub    esp,0xc
c002006a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002006e:	e8 cd ff ff ff       	call   c0020040 <AVX::~AVX()>
c0020073:	83 c4 10             	add    esp,0x10
c0020076:	83 ec 08             	sub    esp,0x8
c0020079:	68 58 01 00 00       	push   0x158
c002007e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020082:	e8 7c f0 fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0020087:	83 c4 10             	add    esp,0x10
c002008a:	83 c4 0c             	add    esp,0xc
c002008d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002008e <MMX::~MMX()>:
c002008e:	83 ec 0c             	sub    esp,0xc
c0020091:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c0020096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009a:	89 10                	mov    DWORD PTR [eax],edx
c002009c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a0:	83 ec 0c             	sub    esp,0xc
c00200a3:	50                   	push   eax
c00200a4:	e8 af 0a ff ff       	call   c0010b58 <FPU::~FPU()>
c00200a9:	83 c4 10             	add    esp,0x10
c00200ac:	90                   	nop
c00200ad:	83 c4 0c             	add    esp,0xc
c00200b0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00200b2 <MMX::~MMX()>:
c00200b2:	83 ec 0c             	sub    esp,0xc
c00200b5:	83 ec 0c             	sub    esp,0xc
c00200b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200bc:	e8 cd ff ff ff       	call   c002008e <MMX::~MMX()>
c00200c1:	83 c4 10             	add    esp,0x10
c00200c4:	83 ec 08             	sub    esp,0x8
c00200c7:	68 58 01 00 00       	push   0x158
c00200cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200d0:	e8 2e f0 fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c00200d5:	83 c4 10             	add    esp,0x10
c00200d8:	83 c4 0c             	add    esp,0xc
c00200db:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00200dc <SSE::~SSE()>:
c00200dc:	83 ec 0c             	sub    esp,0xc
c00200df:	ba 08 39 02 c0       	mov    edx,0xc0023908
c00200e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e8:	89 10                	mov    DWORD PTR [eax],edx
c00200ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ee:	83 ec 0c             	sub    esp,0xc
c00200f1:	50                   	push   eax
c00200f2:	e8 61 0a ff ff       	call   c0010b58 <FPU::~FPU()>
c00200f7:	83 c4 10             	add    esp,0x10
c00200fa:	90                   	nop
c00200fb:	83 c4 0c             	add    esp,0xc
c00200fe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0020100 <SSE::~SSE()>:
c0020100:	83 ec 0c             	sub    esp,0xc
c0020103:	83 ec 0c             	sub    esp,0xc
c0020106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002010a:	e8 cd ff ff ff       	call   c00200dc <SSE::~SSE()>
c002010f:	83 c4 10             	add    esp,0x10
c0020112:	83 ec 08             	sub    esp,0x8
c0020115:	68 58 01 00 00       	push   0x158
c002011a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002011e:	e8 e0 ef fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0020123:	83 c4 10             	add    esp,0x10
c0020126:	83 c4 0c             	add    esp,0xc
c0020129:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002012a <x87::~x87()>:
c002012a:	83 ec 0c             	sub    esp,0xc
c002012d:	ba 48 39 02 c0       	mov    edx,0xc0023948
c0020132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020136:	89 10                	mov    DWORD PTR [eax],edx
c0020138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013c:	83 ec 0c             	sub    esp,0xc
c002013f:	50                   	push   eax
c0020140:	e8 13 0a ff ff       	call   c0010b58 <FPU::~FPU()>
c0020145:	83 c4 10             	add    esp,0x10
c0020148:	90                   	nop
c0020149:	83 c4 0c             	add    esp,0xc
c002014c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002014e <x87::~x87()>:
c002014e:	83 ec 0c             	sub    esp,0xc
c0020151:	83 ec 0c             	sub    esp,0xc
c0020154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020158:	e8 cd ff ff ff       	call   c002012a <x87::~x87()>
c002015d:	83 c4 10             	add    esp,0x10
c0020160:	83 ec 08             	sub    esp,0x8
c0020163:	68 58 01 00 00       	push   0x158
c0020168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002016c:	e8 92 ef fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c0020171:	83 c4 10             	add    esp,0x10
c0020174:	83 c4 0c             	add    esp,0xc
c0020177:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020178 <IOAPIC::~IOAPIC()>:
c0020178:	83 ec 0c             	sub    esp,0xc
c002017b:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c0020180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020184:	89 10                	mov    DWORD PTR [eax],edx
c0020186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002018a:	83 ec 0c             	sub    esp,0xc
c002018d:	50                   	push   eax
c002018e:	e8 51 03 ff ff       	call   c00104e4 <Device::~Device()>
c0020193:	83 c4 10             	add    esp,0x10
c0020196:	90                   	nop
c0020197:	83 c4 0c             	add    esp,0xc
c002019a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002019c <IOAPIC::~IOAPIC()>:
c002019c:	83 ec 0c             	sub    esp,0xc
c002019f:	83 ec 0c             	sub    esp,0xc
c00201a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a6:	e8 cd ff ff ff       	call   c0020178 <IOAPIC::~IOAPIC()>
c00201ab:	83 c4 10             	add    esp,0x10
c00201ae:	83 ec 08             	sub    esp,0x8
c00201b1:	68 68 01 00 00       	push   0x168
c00201b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ba:	e8 44 ef fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c00201bf:	83 c4 10             	add    esp,0x10
c00201c2:	83 c4 0c             	add    esp,0xc
c00201c5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00201c6 <APIC::~APIC()>:
c00201c6:	83 ec 0c             	sub    esp,0xc
c00201c9:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	89 10                	mov    DWORD PTR [eax],edx
c00201d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d8:	83 ec 0c             	sub    esp,0xc
c00201db:	50                   	push   eax
c00201dc:	e8 41 0e ff ff       	call   c0011022 <InterruptController::~InterruptController()>
c00201e1:	83 c4 10             	add    esp,0x10
c00201e4:	90                   	nop
c00201e5:	83 c4 0c             	add    esp,0xc
c00201e8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00201ea <APIC::~APIC()>:
c00201ea:	83 ec 0c             	sub    esp,0xc
c00201ed:	83 ec 0c             	sub    esp,0xc
c00201f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f4:	e8 cd ff ff ff       	call   c00201c6 <APIC::~APIC()>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	83 ec 08             	sub    esp,0x8
c00201ff:	68 58 21 00 00       	push   0x2158
c0020204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020208:	e8 f6 ee fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c002020d:	83 c4 10             	add    esp,0x10
c0020210:	83 c4 0c             	add    esp,0xc
c0020213:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0020214 <PIC::~PIC()>:
c0020214:	83 ec 0c             	sub    esp,0xc
c0020217:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c002021c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020220:	89 10                	mov    DWORD PTR [eax],edx
c0020222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020226:	83 ec 0c             	sub    esp,0xc
c0020229:	50                   	push   eax
c002022a:	e8 f3 0d ff ff       	call   c0011022 <InterruptController::~InterruptController()>
c002022f:	83 c4 10             	add    esp,0x10
c0020232:	90                   	nop
c0020233:	83 c4 0c             	add    esp,0xc
c0020236:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020238 <PIC::~PIC()>:
c0020238:	83 ec 0c             	sub    esp,0xc
c002023b:	83 ec 0c             	sub    esp,0xc
c002023e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020242:	e8 cd ff ff ff       	call   c0020214 <PIC::~PIC()>
c0020247:	83 c4 10             	add    esp,0x10
c002024a:	83 ec 08             	sub    esp,0x8
c002024d:	68 58 21 00 00       	push   0x2158
c0020252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020256:	e8 a8 ee fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c002025b:	83 c4 10             	add    esp,0x10
c002025e:	83 c4 0c             	add    esp,0xc
c0020261:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020262 <APICTimer::~APICTimer()>:
c0020262:	83 ec 0c             	sub    esp,0xc
c0020265:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c002026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026e:	89 10                	mov    DWORD PTR [eax],edx
c0020270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020274:	83 ec 0c             	sub    esp,0xc
c0020277:	50                   	push   eax
c0020278:	e8 cd 2a ff ff       	call   c0012d4a <Timer::~Timer()>
c002027d:	83 c4 10             	add    esp,0x10
c0020280:	90                   	nop
c0020281:	83 c4 0c             	add    esp,0xc
c0020284:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020286 <APICTimer::~APICTimer()>:
c0020286:	83 ec 0c             	sub    esp,0xc
c0020289:	83 ec 0c             	sub    esp,0xc
c002028c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020290:	e8 cd ff ff ff       	call   c0020262 <APICTimer::~APICTimer()>
c0020295:	83 c4 10             	add    esp,0x10
c0020298:	83 ec 08             	sub    esp,0x8
c002029b:	68 60 01 00 00       	push   0x160
c00202a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a4:	e8 5a ee fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c00202a9:	83 c4 10             	add    esp,0x10
c00202ac:	83 c4 0c             	add    esp,0xc
c00202af:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00202b0 <PIT::~PIT()>:
c00202b0:	83 ec 0c             	sub    esp,0xc
c00202b3:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c00202b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202bc:	89 10                	mov    DWORD PTR [eax],edx
c00202be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c2:	83 ec 0c             	sub    esp,0xc
c00202c5:	50                   	push   eax
c00202c6:	e8 7f 2a ff ff       	call   c0012d4a <Timer::~Timer()>
c00202cb:	83 c4 10             	add    esp,0x10
c00202ce:	90                   	nop
c00202cf:	83 c4 0c             	add    esp,0xc
c00202d2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00202d4 <PIT::~PIT()>:
c00202d4:	83 ec 0c             	sub    esp,0xc
c00202d7:	83 ec 0c             	sub    esp,0xc
c00202da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202de:	e8 cd ff ff ff       	call   c00202b0 <PIT::~PIT()>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	83 ec 08             	sub    esp,0x8
c00202e9:	68 5c 01 00 00       	push   0x15c
c00202ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f2:	e8 0c ee fe ff       	call   c000f103 <operator delete(void*, unsigned long)>
c00202f7:	83 c4 10             	add    esp,0x10
c00202fa:	83 c4 0c             	add    esp,0xc
c00202fd:	c3                   	ret    
