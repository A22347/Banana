
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ed be 00 00       	call   c000bf0d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 e9 01 00       	call   c001e948 <_init>
c0000025:	c3                   	ret    
c0000026:	bb d2 f4 01 c0       	mov    ebx,0xc001f4d2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb dc f4 01 c0    	cmp    ebx,0xc001f4dc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 6c 30 02 c0       	mov    eax,0xc002306c
c0000049:	3d 6c 30 02 c0       	cmp    eax,0xc002306c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 6c 30 02 c0       	push   0xc002306c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 6c 30 02 c0       	mov    eax,0xc002306c
c0000075:	2d 6c 30 02 c0       	sub    eax,0xc002306c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 6c 30 02 c0       	push   0xc002306c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 0c 32 02 c0 00 	cmp    BYTE PTR ds:0xc002320c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e4 f4 01 c0       	mov    ebx,0xc001f4e4
c00000bb:	81 eb e0 f4 01 c0    	sub    ebx,0xc001f4e0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e0 f4 01 c0       	mov    esi,0xc001f4e0
c00000ca:	a1 10 32 02 c0       	mov    eax,ds:0xc0023210
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 10 32 02 c0       	mov    ds:0xc0023210,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 10 32 02 c0       	mov    eax,ds:0xc0023210
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 6c 30 02 c0       	push   0xc002306c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 0c 32 02 c0 01 	mov    BYTE PTR ds:0xc002320c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 14 32 02 c0       	push   0xc0023214
c000012c:	68 6c 30 02 c0       	push   0xc002306c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 19 eb 00 00       	call   c000ed78 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 0d 75 01 00       	call   c0017776 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 f9 78 01 00       	call   c0017b89 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 9f 80 01 00       	call   c0018338 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 ce 74 01 00       	call   c0017776 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 50 36 02 c0 	lgdtd  ds:0xc0023650
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 45 0c 01 c0       	mov    ecx,0xc0010c45
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 45 0c 01 c0       	mov    ecx,0xc0010c45
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 2c 32 02 c0    	mov    ebx,DWORD PTR ds:0xc002322c
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 2c 32 02 c0       	mov    ds:0xc002322c,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 2c 32 02 c0       	mov    eax,ds:0xc002322c
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 2c 32 02 c0    	mov    DWORD PTR ds:0xc002322c,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 00 f5 01 c0 02 	test   BYTE PTR [edx-0x3ffe0b00],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 00 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0b00],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 00 f5 01 c0 08 	test   BYTE PTR [edx-0x3ffe0b00],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 00 f5 01 c0 04 	test   BYTE PTR [edi-0x3ffe0b00],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 00 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0b00],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 40 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023240
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 40 32 02 c0    	mov    DWORD PTR ds:0xc0023240,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 44 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcdbc]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 44 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcdbc],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 40 32 02 c0    	mov    DWORD PTR ds:0xc0023240,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 6c 32 02 c0    	cmp    DWORD PTR ds:0xc002326c,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d 7c 32 02 c0    	mov    ecx,DWORD PTR ds:0xc002327c
c0000b8d:	c7 42 0c 74 32 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023274
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 7c 32 02 c0    	mov    DWORD PTR ds:0xc002327c,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 6c 32 02 c0    	mov    DWORD PTR ds:0xc002326c,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 40 32 02 c0 02 	test   BYTE PTR ds:0xc0023240,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 40 32 02 c0       	mov    eax,0xc0023240
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 fd ad 00 00       	call   c000ba6b <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 3f ad 00 00       	call   c000ba6b <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 29 ad 00 00       	call   c000ba6b <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 05 ad 00 00       	call   c000ba6b <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 40 32 02 c0    	mov    edi,DWORD PTR ds:0xc0023240
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 40 32 02 c0       	mov    eax,0xc0023240
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 44 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcdbc]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 44 32 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcdbc],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 74 32 02 c0 	lea    edx,[eax*8-0x3ffdcd8c]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 40 32 02 c0       	mov    eax,0xc0023240
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 80 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023280
c0000f0f:	81 fb 74 32 02 c0    	cmp    ebx,0xc0023274
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d 74 32 02 c0       	cmp    eax,0xc0023274
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d 70 32 02 c0    	cmp    DWORD PTR ds:0xc0023270,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 7c 32 02 c0       	mov    ds:0xc002327c,eax
c0000f4b:	a3 80 32 02 c0       	mov    ds:0xc0023280,eax
c0000f50:	a3 70 32 02 c0       	mov    ds:0xc0023270,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 74 32 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023274
c0000f5e:	c7 40 0c 74 32 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023274
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 80 32 02 c0       	mov    ds:0xc0023280,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 74 32 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023274
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 38 32 02 c0 	lea    ebp,[edx*4-0x3ffdcdc8]
c0000faf:	8b 14 95 40 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcdc0]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 40 32 02 c0 	lea    ecx,[edx*4-0x3ffdcdc0]
c0000fca:	8b 14 95 40 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcdc0]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd 74 35 02 c0 	or     DWORD PTR [edi*4-0x3ffdca8c],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 74 32 02 c0 	lea    eax,[eax*8-0x3ffdcd8c]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d 7c 32 02 c0    	mov    DWORD PTR ds:0xc002327c,ecx
c0001084:	89 0d 80 32 02 c0    	mov    DWORD PTR ds:0xc0023280,ecx
c000108a:	c7 41 08 74 32 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023274
c0001091:	c7 41 0c 74 32 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023274
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd 6c 32 02 c0 	lea    edx,[ecx*8-0x3ffdcd94]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d 74 35 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdca8c]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d 74 35 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdca8c]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 6c 32 02 c0 	lea    edx,[eax*4-0x3ffdcd94]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d 74 35 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdca8c],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d 7c 32 02 c0    	mov    DWORD PTR ds:0xc002327c,edi
c0001157:	89 3d 80 32 02 c0    	mov    DWORD PTR ds:0xc0023280,edi
c000115d:	c7 47 08 74 32 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023274
c0001164:	c7 47 0c 74 32 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023274
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d 70 32 02 c0    	mov    DWORD PTR ds:0xc0023270,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 6c 32 02 c0       	mov    eax,ds:0xc002326c
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d 6c 32 02 c0    	mov    DWORD PTR ds:0xc002326c,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 40 32 02 c0       	mov    edx,0xc0023240
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 40 32 02 c0 00 	cmp    DWORD PTR ds:0xc0023240,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 40 32 02 c0       	mov    eax,0xc0023240
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 94 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023594
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 94 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023594,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 94 35 02 c0    	mov    DWORD PTR ds:0xc0023594,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 6c 32 02 c0    	cmp    DWORD PTR ds:0xc002326c,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d 6c 32 02 c0    	mov    DWORD PTR ds:0xc002326c,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 40 32 02 c0 00 	cmp    DWORD PTR ds:0xc0023240,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 40 32 02 c0       	mov    eax,0xc0023240
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 9c 35 02 c0    	push   DWORD PTR ds:0xc002359c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 40 32 02 c0 00 	cmp    DWORD PTR ds:0xc0023240,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 40 32 02 c0       	mov    eax,0xc0023240
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 9c 35 02 c0       	mov    eax,ds:0xc002359c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 40 32 02 c0       	mov    eax,0xc0023240
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d 6c 32 02 c0 00 	cmp    DWORD PTR ds:0xc002326c,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 40 32 02 c0       	mov    eax,0xc0023240
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 6c 32 02 c0       	mov    eax,ds:0xc002326c
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 44 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcdbc]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 74 32 02 c0       	mov    eax,0xc0023274
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d 6c 35 02 c0       	cmp    eax,0xc002356c
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 a8 35 02 c0       	mov    eax,ds:0xc00235a8
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 90 35 02 c0    	mov    esi,DWORD PTR ds:0xc0023590
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 a4 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235a4
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 b4 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235b4
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 40 32 02 c0       	mov    eax,0xc0023240
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 04 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe09fc]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 40 32 02 c0       	mov    eax,ds:0xc0023240
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 40 32 02 c0       	mov    ds:0xc0023240,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 84 35 02 c0    	mov    DWORD PTR ds:0xc0023584,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 88 35 02 c0    	mov    DWORD PTR ds:0xc0023588,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 8c 35 02 c0    	mov    DWORD PTR ds:0xc002358c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 94 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023594,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 60 4b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb4a0]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 41 81 01 00       	jmp    c0019a9a <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 60 4b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb4a0]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 72 81 01 00       	jmp    c0019ae1 <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 60 4b 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb4a0]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 9a 81 01 00       	jmp    c0019b28 <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 7b ca 01 00       	call   c001e6ec <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 20 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe08e0]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 20 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe08e0]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba 20 f6 01 c0       	mov    edx,0xc001f620
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba 40 f7 01 c0       	mov    edx,0xc001f740
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba 50 21 02 c0       	mov    edx,0xc0022150
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba 4c f7 01 c0       	mov    edx,0xc001f74c
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba 30 f7 01 c0       	mov    edx,0xc001f730
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 e0 35 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdca20]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 c0 35 02 c0    	mov    ax,ds:0xc00235c0
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 c0 35 02 c0    	mov    ds:0xc00235c0,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 78 b8 01 00       	call   c001e6ec <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 52 f7 01 c0       	mov    eax,0xc001f752
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad a0 f6 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0960]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 5b f7 01 c0       	mov    eax,0xc001f75b
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 20 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe08e0]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 43 a2 01 00       	call   c001e6ec <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba 30 f7 01 c0       	mov    edx,0xc001f730
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba 20 f6 01 c0       	mov    edx,0xc001f620
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba 30 f6 01 c0       	mov    edx,0xc001f630
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 e0 35 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdca20]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 e0 35 02 c0 	mov    DWORD PTR [edx*4-0x3ffdca20],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 0a 8c 01 00       	call   c001e6ec <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 f0 8b 01 00       	call   c001e6ec <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 77 f6 01 c0       	mov    eax,0xc001f677
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 70 f6 01 c0       	mov    eax,0xc001f670
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 e0 35 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdca20]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be 60 f6 01 c0       	mov    esi,0xc001f660
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 33 73 01 00       	call   c001e6ec <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba 40 f7 01 c0       	mov    edx,0xc001f740
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba 50 f6 01 c0       	mov    edx,0xc001f650
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba 62 f7 01 c0       	mov    edx,0xc001f762
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba 6e f7 01 c0       	mov    edx,0xc001f76e
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 82 f7 01 c0       	mov    edx,0xc001f782
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 4e 3a 00 00       	call   c000bc1e <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 48 3a 00 00       	call   c000bc2e <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c a0 fa 01 c0 	mov    DWORD PTR [esp+0xc],0xc001faa0
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 a0 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001faa0
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 a0 f8 01 c0       	mov    eax,0xc001f8a0
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 e0 f7 01 c0       	mov    eax,0xc001f7e0
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 a0 f7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0860]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 60 00 02 c0    	fld    QWORD PTR ds:0xc0020060
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d 68 00 02 c0    	fcomp  QWORD PTR ds:0xc0020068
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 49 37 00 00       	call   c000bc2e <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 33 37 00 00       	call   c000bc2e <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 80 00 02 c0    	fld    DWORD PTR ds:0xc0020080
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 3b 63 01 00       	call   c001e910 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 70 00 02 c0    	fld    QWORD PTR ds:0xc0020070
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 d7 33 00 00       	call   c000bc4e <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 72 33 00 00       	call   c000bc2e <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 a0 fb 01 c0       	mov    eax,0xc001fba0
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 00 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0000]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 84 00 02 c0    	fld    DWORD PTR ds:0xc0020084
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 88 00 02 c0    	fld    DWORD PTR ds:0xc0020088
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 78 00 02 c0    	fcom   QWORD PTR ds:0xc0020078
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 8c 00 02 c0    	fld    DWORD PTR ds:0xc002008c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 79 5e 01 00       	call   c001e930 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 90 00 02 c0    	fld    DWORD PTR ds:0xc0020090
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 88 00 02 c0    	fld    DWORD PTR ds:0xc0020088
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 78 00 02 c0    	fcom   QWORD PTR ds:0xc0020078
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 8c 00 02 c0    	fld    DWORD PTR ds:0xc002008c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 ed 5d 01 00       	call   c001e930 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 60 00 02 c0    	fld    QWORD PTR ds:0xc0020060
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d 68 00 02 c0    	fcomp  QWORD PTR ds:0xc0020068
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 7a 5d 01 00       	call   c001e930 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 46 5c 01 00       	call   c001e910 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d d8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200d8
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 df 5b 01 00       	call   c001e930 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 6c 5b 01 00       	call   c001e910 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d d8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200d8
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 94 00 02 c0       	mov    eax,0xc0020094
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 a8 00 02 c0       	mov    eax,0xc00200a8
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 45 2d 00 00       	call   c000bc2e <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 47 2d 00 00       	call   c000bc4e <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f21:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 60 00 02 c0    	fld    QWORD PTR ds:0xc0020060
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d 68 00 02 c0    	fcomp  QWORD PTR ds:0xc0020068
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 68 02 02 c0    	fld    DWORD PTR ds:0xc0020268
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 e0 00 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdff20]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 fc 00 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdff04]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 18 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfee8]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 6c 02 02 c0    	fld    DWORD PTR ds:0xc002026c
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 de 4e 01 00       	jmp    c001e930 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 bb 4e 01 00       	call   c001e930 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 70 02 02 c0    	fld    DWORD PTR ds:0xc0020270
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 66 4c 01 00       	call   c001e930 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 31 4c 01 00       	call   c001e930 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 d8 00 02 c0    	fadd   QWORD PTR ds:0xc00200d8
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 43 4b 01 00       	call   c001e910 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d 60 02 02 c0    	fcomp  QWORD PTR ds:0xc0020260
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 a6 4a 01 00       	call   c001e930 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 70 02 02 c0    	fld    DWORD PTR ds:0xc0020270
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 e2 49 01 00       	call   c001e930 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 ad 49 01 00       	call   c001e930 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 d8 00 02 c0    	fadd   QWORD PTR ds:0xc00200d8
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 bf 48 01 00       	call   c001e910 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d 60 02 02 c0    	fcomp  QWORD PTR ds:0xc0020260
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 27 48 01 00       	call   c001e930 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 70 02 02 c0    	fld    DWORD PTR ds:0xc0020270
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 63 47 01 00       	call   c001e930 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 2e 47 01 00       	call   c001e930 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 d8 00 02 c0    	fadd   QWORD PTR ds:0xc00200d8
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 40 46 01 00       	call   c001e910 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d 60 02 02 c0    	fcomp  QWORD PTR ds:0xc0020260
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 a8 45 01 00       	call   c001e930 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 70 02 02 c0    	fld    DWORD PTR ds:0xc0020270
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 e4 44 01 00       	call   c001e930 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 af 44 01 00       	call   c001e930 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 d8 00 02 c0    	fadd   QWORD PTR ds:0xc00200d8
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 c1 43 01 00       	call   c001e910 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d 60 02 02 c0    	fcomp  QWORD PTR ds:0xc0020260
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 29 43 01 00       	call   c001e930 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 70 02 02 c0    	fld    DWORD PTR ds:0xc0020270
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 65 42 01 00       	call   c001e930 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 30 42 01 00       	call   c001e930 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 d8 00 02 c0    	fadd   QWORD PTR ds:0xc00200d8
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 49 41 01 00       	call   c001e910 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d 60 02 02 c0    	fcomp  QWORD PTR ds:0xc0020260
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 ab 40 01 00       	call   c001e930 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 40 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfec0]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 34 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfecc]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 48 13 00 00       	call   c000bc2e <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 60 00 02 c0    	fld    QWORD PTR ds:0xc0020060
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d 68 00 02 c0    	fcomp  QWORD PTR ds:0xc0020068
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 3e 3f 01 00       	call   c001e930 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 12 3e 01 00       	call   c001e910 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d d8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200d8
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 b7 3d 01 00       	call   c001e930 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 44 3d 01 00       	call   c001e910 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d d8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200d8
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 74 02 02 c0       	mov    eax,0xc0020274
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 85 02 02 c0       	mov    eax,0xc0020285
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 33 0f 00 00       	call   c000bc2e <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 35 0f 00 00       	call   c000bc4e <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad33:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 a9 57 00 00       	call   c0010524 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 bc 02 02 c0       	push   0xc00202bc
c000adb1:	50                   	push   eax
c000adb2:	e8 e7 57 00 00       	call   c001059e <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba 38 03 02 c0       	mov    edx,0xc0020338
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 4a cc 00 00       	call   c0017b56 <lockScheduler()>
c000af0c:	e8 79 cf 00 00       	call   c0017e8a <schedule()>
c000af11:	e8 42 cc 00 00       	call   c0017b58 <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 90 3f 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 94 4a 02 c0    	push   DWORD PTR ds:0xc0024a94
c000af33:	68 c5 02 02 c0       	push   0xc00202c5
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 76 ca 00 00       	call   c00179b6 <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 ab b5 00 c0       	push   0xc000b5ab
c000af4f:	56                   	push   esi
c000af50:	e8 2b cd 00 00       	call   c0017c80 <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 b9 86 01 c0       	push   0xc00186b9
c000af5e:	ff 35 94 4a 02 c0    	push   DWORD PTR ds:0xc0024a94
c000af64:	e8 17 cd 00 00       	call   c0017c80 <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 48 4a 02 c0       	mov    ds:0xc0024a48,eax
c000af71:	c6 05 4d 36 02 c0 01 	mov    BYTE PTR ds:0xc002364d,0x1
c000af78:	e8 81 43 00 00       	call   c000f2fe <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 af b4 00 00       	call   c0016443 <setupSystemCalls()>
c000af94:	e8 63 4e 00 00       	call   c000fdfc <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 57 55 00 00       	call   c00104f8 <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d 48 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023648
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 d2 02 02 c0       	push   0xc00202d2
c000afb0:	e8 43 c6 00 00       	call   c00175f8 <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 8d c7 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 3c 13 02 c0 	mov    DWORD PTR [esp],0xc002133c
c000afc5:	e8 d9 3f 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 7e d1 00 00       	call   c0018155 <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 48 36 02 c0    	push   DWORD PTR ds:0xc0023648
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 61 36 02 c0 04 	test   BYTE PTR ds:0xc0023661,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 81 33 01 00       	call   c001e3b6 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 0b 8e 00 00       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 e4 8d 00 00       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 c2 8d 00 00       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 a0 8d 00 00       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 60 36 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023660,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 c9 8c 00 00       	call   c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 a4 8c 00 00       	call   c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 05 32 01 00       	call   c001e370 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 d2 31 01 00       	call   c001e360 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 bf 8c 00 00       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 ee 02 02 c0       	push   0xc00202ee
c000b1e8:	e8 4b 9a 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 f4 02 02 c0       	push   0xc00202f4
c000b220:	e8 13 9a 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 60 36 02 c0 04 	test   BYTE PTR ds:0xc0023660,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 80 2a 02 c0 	sete   BYTE PTR ds:0xc0022a80
c000b284:	e8 2b 3c 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 05 82 00 00       	call   c0013498 <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 0c 51 00 00       	call   c00103ae <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 f4 3b 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 7c 8c 00 00       	call   c0013f46 <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 d5 50 00 00       	call   c00103ae <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 21 56 00 00       	call   c0010916 <setupFPU()>
c000b2f5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fb:	85 c0                	test   eax,eax
c000b2fd:	74 1f                	je     c000b31e <Computer::open(int, int, void*)+0xb6>
c000b2ff:	83 ec 08             	sub    esp,0x8
c000b302:	50                   	push   eax
c000b303:	53                   	push   ebx
c000b304:	e8 a5 50 00 00       	call   c00103ae <Device::addChild(Device*)>
c000b309:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b311:	6a 00                	push   0x0
c000b313:	6a 00                	push   0x0
c000b315:	6a 00                	push   0x0
c000b317:	50                   	push   eax
c000b318:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b31b:	83 c4 20             	add    esp,0x20
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 dc af 00 c0       	push   0xc000afdc
c000b326:	e8 55 ca 00 00       	call   c0017d80 <setupMultitasking(void (*)())>
c000b32b:	83 c4 14             	add    esp,0x14
c000b32e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b333:	5b                   	pop    ebx
c000b334:	5e                   	pop    esi
c000b335:	c3                   	ret    

c000b336 <Computer::disableNMI()>:
c000b336:	6a 00                	push   0x0
c000b338:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b33c:	e8 0f ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b341:	58                   	pop    eax
c000b342:	5a                   	pop    edx
c000b343:	c3                   	ret    

c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b348:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b34f:	19 c0                	sbb    eax,eax
c000b351:	83 e0 80             	and    eax,0xffffff80
c000b354:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b358:	e6 70                	out    0x70,al
c000b35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b35e:	e6 71                	out    0x71,al
c000b360:	c3                   	ret    
c000b361:	90                   	nop

c000b362 <Computer::handleNMI()>:
c000b362:	56                   	push   esi
c000b363:	53                   	push   ebx
c000b364:	83 ec 10             	sub    esp,0x10
c000b367:	e4 92                	in     al,0x92
c000b369:	89 c6                	mov    esi,eax
c000b36b:	e4 61                	in     al,0x61
c000b36d:	68 fa 02 02 c0       	push   0xc00202fa
c000b372:	88 c3                	mov    bl,al
c000b374:	e8 2a 3c 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	83 e6 10             	and    esi,0x10
c000b37f:	75 0d                	jne    c000b38e <Computer::handleNMI()+0x2c>
c000b381:	f6 c3 40             	test   bl,0x40
c000b384:	75 1d                	jne    c000b3a3 <Computer::handleNMI()+0x41>
c000b386:	84 db                	test   bl,bl
c000b388:	78 2d                	js     c000b3b7 <Computer::handleNMI()+0x55>
c000b38a:	58                   	pop    eax
c000b38b:	5b                   	pop    ebx
c000b38c:	5e                   	pop    esi
c000b38d:	c3                   	ret    
c000b38e:	83 ec 0c             	sub    esp,0xc
c000b391:	68 0b 03 02 c0       	push   0xc002030b
c000b396:	e8 9d 98 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	f6 c3 40             	test   bl,0x40
c000b3a1:	74 e3                	je     c000b386 <Computer::handleNMI()+0x24>
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	68 18 03 02 c0       	push   0xc0020318
c000b3ab:	e8 88 98 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	84 db                	test   bl,bl
c000b3b5:	79 d3                	jns    c000b38a <Computer::handleNMI()+0x28>
c000b3b7:	c7 44 24 10 22 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020322
c000b3bf:	5a                   	pop    edx
c000b3c0:	5b                   	pop    ebx
c000b3c1:	5e                   	pop    esi
c000b3c2:	e9 71 98 00 00       	jmp    c0014c38 <Krnl::panic(char const*)>
c000b3c7:	90                   	nop

c000b3c8 <Computer::setDiskActivityLight(int, bool)>:
c000b3c8:	56                   	push   esi
c000b3c9:	53                   	push   ebx
c000b3ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3ce:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3d3:	77 1b                	ja     c000b3f0 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3d5:	e4 92                	in     al,0x92
c000b3d7:	bb 40 00 00 00       	mov    ebx,0x40
c000b3dc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3e0:	89 da                	mov    edx,ebx
c000b3e2:	d3 e2                	shl    edx,cl
c000b3e4:	89 f1                	mov    ecx,esi
c000b3e6:	f7 d2                	not    edx
c000b3e8:	d3 e3                	shl    ebx,cl
c000b3ea:	21 d0                	and    eax,edx
c000b3ec:	09 d8                	or     eax,ebx
c000b3ee:	e6 92                	out    0x92,al
c000b3f0:	5b                   	pop    ebx
c000b3f1:	5e                   	pop    esi
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <GDTEntry::setBase(unsigned int)>:
c000b3f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3fc:	89 c1                	mov    ecx,eax
c000b3fe:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b402:	c1 e9 10             	shr    ecx,0x10
c000b405:	c1 e8 18             	shr    eax,0x18
c000b408:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b40b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <GDTEntry::setLimit(unsigned int)>:
c000b410:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b418:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b41b:	66 89 01             	mov    WORD PTR [ecx],ax
c000b41e:	83 e2 f0             	and    edx,0xfffffff0
c000b421:	c1 e8 10             	shr    eax,0x10
c000b424:	83 e0 0f             	and    eax,0xf
c000b427:	09 d0                	or     eax,edx
c000b429:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b42c:	c3                   	ret    
c000b42d:	90                   	nop

c000b42e <GDT::GDT()>:
c000b42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b432:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b43c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b442:	90                   	nop
c000b443:	c3                   	ret    

c000b444 <GDT::addEntry(GDTEntry)>:
c000b444:	53                   	push   ebx
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b44c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b455:	52                   	push   edx
c000b456:	50                   	push   eax
c000b457:	68 5c 03 02 c0       	push   0xc002035c
c000b45c:	e8 42 3b 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000b461:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b467:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b46b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b46f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b473:	8d 50 01             	lea    edx,[eax+0x1]
c000b476:	c1 e0 03             	shl    eax,0x3
c000b479:	89 13                	mov    DWORD PTR [ebx],edx
c000b47b:	83 c4 18             	add    esp,0x18
c000b47e:	5b                   	pop    ebx
c000b47f:	c3                   	ret    

c000b480 <GDT::getNumberOfEntries()>:
c000b480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b484:	8b 00                	mov    eax,DWORD PTR [eax]
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <GDT::flush()>:
c000b488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b48e:	83 c0 04             	add    eax,0x4
c000b491:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b498:	a3 52 36 02 c0       	mov    ds:0xc0023652,eax
c000b49d:	66 89 15 50 36 02 c0 	mov    WORD PTR ds:0xc0023650,dx
c000b4a4:	e9 8a 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4a9:	90                   	nop

c000b4aa <GDT::setup()>:
c000b4aa:	55                   	push   ebp
c000b4ab:	57                   	push   edi
c000b4ac:	56                   	push   esi
c000b4ad:	53                   	push   ebx
c000b4ae:	83 ec 3c             	sub    esp,0x3c
c000b4b1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4b5:	6a 00                	push   0x0
c000b4b7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4bb:	53                   	push   ebx
c000b4bc:	e8 33 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4c1:	6a 00                	push   0x0
c000b4c3:	53                   	push   ebx
c000b4c4:	e8 47 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4c9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4d1:	6a 00                	push   0x0
c000b4d3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4d7:	53                   	push   ebx
c000b4d8:	e8 17 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4dd:	68 ff ff ff 00       	push   0xffffff
c000b4e2:	53                   	push   ebx
c000b4e3:	e8 28 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4ec:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4f1:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4fa:	83 c4 20             	add    esp,0x20
c000b4fd:	6a 00                	push   0x0
c000b4ff:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b503:	53                   	push   ebx
c000b504:	e8 eb fe ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b509:	68 ff ff ff 00       	push   0xffffff
c000b50e:	53                   	push   ebx
c000b50f:	e8 fc fe ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b514:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b518:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b51c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b520:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b524:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b528:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b52d:	0d 00 92 c0 00       	or     eax,0xc09200
c000b532:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b536:	89 d8                	mov    eax,ebx
c000b538:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b53c:	80 cc 60             	or     ah,0x60
c000b53f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b543:	83 c4 0c             	add    esp,0xc
c000b546:	89 f8                	mov    eax,edi
c000b548:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b54c:	80 cc 60             	or     ah,0x60
c000b54f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b553:	89 c7                	mov    edi,eax
c000b555:	55                   	push   ebp
c000b556:	e8 e9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b562:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b566:	55                   	push   ebp
c000b567:	e8 d8 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b56c:	83 c4 0c             	add    esp,0xc
c000b56f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b573:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b577:	55                   	push   ebp
c000b578:	e8 c7 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b57d:	83 c4 0c             	add    esp,0xc
c000b580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b588:	53                   	push   ebx
c000b589:	51                   	push   ecx
c000b58a:	55                   	push   ebp
c000b58b:	e8 b4 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b590:	83 c4 0c             	add    esp,0xc
c000b593:	57                   	push   edi
c000b594:	56                   	push   esi
c000b595:	55                   	push   ebp
c000b596:	e8 a9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b59b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b59e:	e8 e5 fe ff ff       	call   c000b488 <GDT::flush()>
c000b5a3:	83 c4 4c             	add    esp,0x4c
c000b5a6:	5b                   	pop    ebx
c000b5a7:	5e                   	pop    esi
c000b5a8:	5f                   	pop    edi
c000b5a9:	5d                   	pop    ebp
c000b5aa:	c3                   	ret    

c000b5ab <idleFunction(void*)>:
c000b5ab:	53                   	push   ebx
c000b5ac:	83 ec 08             	sub    esp,0x8
c000b5af:	e8 a4 c5 00 00       	call   c0017b58 <unlockScheduler()>
c000b5b4:	e8 79 89 00 00       	call   c0013f32 <thisCPU()>
c000b5b9:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5c0:	74 41                	je     c000b603 <idleFunction(void*)+0x58>
c000b5c2:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c000b5c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ce:	74 33                	je     c000b603 <idleFunction(void*)+0x58>
c000b5d0:	31 db                	xor    ebx,ebx
c000b5d2:	52                   	push   edx
c000b5d3:	52                   	push   edx
c000b5d4:	68 e1 00 00 00       	push   0xe1
c000b5d9:	50                   	push   eax
c000b5da:	e8 e7 fb ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000b5df:	53                   	push   ebx
c000b5e0:	83 e0 02             	and    eax,0x2
c000b5e3:	50                   	push   eax
c000b5e4:	68 e1 00 00 00       	push   0xe1
c000b5e9:	ff 35 48 36 02 c0    	push   DWORD PTR ds:0xc0023648
c000b5ef:	e8 fe fb ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5f4:	83 c4 20             	add    esp,0x20
c000b5f7:	e8 54 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5fc:	e8 af 33 01 00       	call   c001e9b0 <idleCommon()>
c000b601:	eb f4                	jmp    c000b5f7 <idleFunction(void*)+0x4c>
c000b603:	fb                   	sti    
c000b604:	f4                   	hlt    
c000b605:	e8 a6 33 01 00       	call   c001e9b0 <idleCommon()>
c000b60a:	eb f7                	jmp    c000b603 <idleFunction(void*)+0x58>

c000b60c <IDTEntry::IDTEntry(bool)>:
c000b60c:	83 ec 04             	sub    esp,0x4
c000b60f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b613:	88 04 24             	mov    BYTE PTR [esp],al
c000b616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b624:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b62f:	83 e2 f0             	and    edx,0xfffffff0
c000b632:	83 ca 0e             	or     edx,0xe
c000b635:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b63c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b63f:	83 e2 ef             	and    edx,0xffffffef
c000b642:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b645:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b649:	74 04                	je     c000b64f <IDTEntry::IDTEntry(bool)+0x43>
c000b64b:	b2 03                	mov    dl,0x3
c000b64d:	eb 02                	jmp    c000b651 <IDTEntry::IDTEntry(bool)+0x45>
c000b64f:	b2 00                	mov    dl,0x0
c000b651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b655:	83 e2 03             	and    edx,0x3
c000b658:	88 d1                	mov    cl,dl
c000b65a:	c1 e1 05             	shl    ecx,0x5
c000b65d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b660:	83 e2 9f             	and    edx,0xffffff9f
c000b663:	09 ca                	or     edx,ecx
c000b665:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b668:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b66f:	83 ca 80             	or     edx,0xffffff80
c000b672:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b675:	90                   	nop
c000b676:	83 c4 04             	add    esp,0x4
c000b679:	c3                   	ret    

c000b67a <IDTEntry::setOffset(unsigned int)>:
c000b67a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b682:	66 89 02             	mov    WORD PTR [edx],ax
c000b685:	c1 e8 10             	shr    eax,0x10
c000b688:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b68c:	c3                   	ret    
c000b68d:	90                   	nop

c000b68e <IDT::IDT()>:
c000b68e:	90                   	nop
c000b68f:	c3                   	ret    

c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b694:	83 c0 30             	add    eax,0x30
c000b697:	c3                   	ret    

c000b698 <IDT::addEntry(IDTEntry, int)>:
c000b698:	53                   	push   ebx
c000b699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b69d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6a9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6ac:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6b0:	5b                   	pop    ebx
c000b6b1:	c3                   	ret    

c000b6b2 <IDT::addEntry(int, void (*)(), bool)>:
c000b6b2:	53                   	push   ebx
c000b6b3:	83 ec 10             	sub    esp,0x10
c000b6b6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6bb:	50                   	push   eax
c000b6bc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6c0:	53                   	push   ebx
c000b6c1:	e8 46 ff ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000b6c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6ca:	53                   	push   ebx
c000b6cb:	e8 aa ff ff ff       	call   c000b67a <IDTEntry::setOffset(unsigned int)>
c000b6d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6e0:	e8 b3 ff ff ff       	call   c000b698 <IDT::addEntry(IDTEntry, int)>
c000b6e5:	83 c4 30             	add    esp,0x30
c000b6e8:	5b                   	pop    ebx
c000b6e9:	c3                   	ret    

c000b6ea <IDT::flush()>:
c000b6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ee:	66 c7 05 58 36 02 c0 ff 07 	mov    WORD PTR ds:0xc0023658,0x7ff
c000b6f7:	a3 5a 36 02 c0       	mov    ds:0xc002365a,eax
c000b6fc:	0f 01 1d 58 36 02 c0 	lidtd  ds:0xc0023658
c000b703:	c3                   	ret    

c000b704 <IDT::setup()>:
c000b704:	57                   	push   edi
c000b705:	56                   	push   esi
c000b706:	53                   	push   ebx
c000b707:	83 ec 10             	sub    esp,0x10
c000b70a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b70e:	6a 00                	push   0x0
c000b710:	68 53 03 00 c0       	push   0xc0000353
c000b715:	6a 00                	push   0x0
c000b717:	53                   	push   ebx
c000b718:	e8 95 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b71d:	6a 00                	push   0x0
c000b71f:	68 63 03 00 c0       	push   0xc0000363
c000b724:	6a 01                	push   0x1
c000b726:	53                   	push   ebx
c000b727:	e8 86 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b72c:	83 c4 20             	add    esp,0x20
c000b72f:	6a 00                	push   0x0
c000b731:	68 6d 03 00 c0       	push   0xc000036d
c000b736:	6a 02                	push   0x2
c000b738:	53                   	push   ebx
c000b739:	e8 74 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b73e:	6a 00                	push   0x0
c000b740:	68 77 03 00 c0       	push   0xc0000377
c000b745:	6a 03                	push   0x3
c000b747:	53                   	push   ebx
c000b748:	e8 65 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b74d:	83 c4 20             	add    esp,0x20
c000b750:	6a 00                	push   0x0
c000b752:	68 81 03 00 c0       	push   0xc0000381
c000b757:	6a 04                	push   0x4
c000b759:	53                   	push   ebx
c000b75a:	e8 53 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b75f:	6a 00                	push   0x0
c000b761:	68 8b 03 00 c0       	push   0xc000038b
c000b766:	6a 05                	push   0x5
c000b768:	53                   	push   ebx
c000b769:	e8 44 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b76e:	83 c4 20             	add    esp,0x20
c000b771:	6a 00                	push   0x0
c000b773:	68 95 03 00 c0       	push   0xc0000395
c000b778:	6a 06                	push   0x6
c000b77a:	53                   	push   ebx
c000b77b:	e8 32 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b780:	6a 00                	push   0x0
c000b782:	68 9f 03 00 c0       	push   0xc000039f
c000b787:	6a 07                	push   0x7
c000b789:	53                   	push   ebx
c000b78a:	e8 23 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b78f:	83 c4 20             	add    esp,0x20
c000b792:	6a 00                	push   0x0
c000b794:	68 a9 03 00 c0       	push   0xc00003a9
c000b799:	6a 08                	push   0x8
c000b79b:	53                   	push   ebx
c000b79c:	e8 11 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7a1:	6a 00                	push   0x0
c000b7a3:	68 b1 03 00 c0       	push   0xc00003b1
c000b7a8:	6a 09                	push   0x9
c000b7aa:	53                   	push   ebx
c000b7ab:	e8 02 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7b0:	83 c4 20             	add    esp,0x20
c000b7b3:	6a 00                	push   0x0
c000b7b5:	68 bb 03 00 c0       	push   0xc00003bb
c000b7ba:	6a 0a                	push   0xa
c000b7bc:	53                   	push   ebx
c000b7bd:	e8 f0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7c2:	6a 00                	push   0x0
c000b7c4:	68 c3 03 00 c0       	push   0xc00003c3
c000b7c9:	6a 0b                	push   0xb
c000b7cb:	53                   	push   ebx
c000b7cc:	e8 e1 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7d1:	83 c4 20             	add    esp,0x20
c000b7d4:	6a 00                	push   0x0
c000b7d6:	68 cb 03 00 c0       	push   0xc00003cb
c000b7db:	6a 0c                	push   0xc
c000b7dd:	53                   	push   ebx
c000b7de:	e8 cf fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7e3:	6a 00                	push   0x0
c000b7e5:	68 d3 03 00 c0       	push   0xc00003d3
c000b7ea:	6a 0d                	push   0xd
c000b7ec:	53                   	push   ebx
c000b7ed:	e8 c0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7f2:	83 c4 20             	add    esp,0x20
c000b7f5:	6a 00                	push   0x0
c000b7f7:	68 db 03 00 c0       	push   0xc00003db
c000b7fc:	6a 0e                	push   0xe
c000b7fe:	53                   	push   ebx
c000b7ff:	e8 ae fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b804:	6a 00                	push   0x0
c000b806:	68 e3 03 00 c0       	push   0xc00003e3
c000b80b:	6a 0f                	push   0xf
c000b80d:	53                   	push   ebx
c000b80e:	e8 9f fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b813:	83 c4 20             	add    esp,0x20
c000b816:	6a 00                	push   0x0
c000b818:	68 ed 03 00 c0       	push   0xc00003ed
c000b81d:	6a 10                	push   0x10
c000b81f:	53                   	push   ebx
c000b820:	e8 8d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b825:	6a 00                	push   0x0
c000b827:	68 f7 03 00 c0       	push   0xc00003f7
c000b82c:	6a 11                	push   0x11
c000b82e:	53                   	push   ebx
c000b82f:	e8 7e fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b834:	83 c4 20             	add    esp,0x20
c000b837:	6a 00                	push   0x0
c000b839:	68 01 04 00 c0       	push   0xc0000401
c000b83e:	6a 12                	push   0x12
c000b840:	53                   	push   ebx
c000b841:	e8 6c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b846:	6a 01                	push   0x1
c000b848:	68 0b 04 00 c0       	push   0xc000040b
c000b84d:	6a 60                	push   0x60
c000b84f:	53                   	push   ebx
c000b850:	e8 5d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b855:	83 c4 20             	add    esp,0x20
c000b858:	6a 00                	push   0x0
c000b85a:	68 15 04 00 c0       	push   0xc0000415
c000b85f:	6a 20                	push   0x20
c000b861:	53                   	push   ebx
c000b862:	e8 4b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b867:	6a 00                	push   0x0
c000b869:	68 1f 04 00 c0       	push   0xc000041f
c000b86e:	6a 21                	push   0x21
c000b870:	53                   	push   ebx
c000b871:	e8 3c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b876:	83 c4 20             	add    esp,0x20
c000b879:	6a 00                	push   0x0
c000b87b:	68 29 04 00 c0       	push   0xc0000429
c000b880:	6a 22                	push   0x22
c000b882:	53                   	push   ebx
c000b883:	e8 2a fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b888:	6a 00                	push   0x0
c000b88a:	68 33 04 00 c0       	push   0xc0000433
c000b88f:	6a 23                	push   0x23
c000b891:	53                   	push   ebx
c000b892:	e8 1b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b897:	83 c4 20             	add    esp,0x20
c000b89a:	6a 00                	push   0x0
c000b89c:	68 3d 04 00 c0       	push   0xc000043d
c000b8a1:	6a 24                	push   0x24
c000b8a3:	53                   	push   ebx
c000b8a4:	e8 09 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8a9:	6a 00                	push   0x0
c000b8ab:	68 47 04 00 c0       	push   0xc0000447
c000b8b0:	6a 25                	push   0x25
c000b8b2:	53                   	push   ebx
c000b8b3:	e8 fa fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8b8:	83 c4 20             	add    esp,0x20
c000b8bb:	6a 00                	push   0x0
c000b8bd:	68 51 04 00 c0       	push   0xc0000451
c000b8c2:	6a 26                	push   0x26
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 e8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8ca:	6a 00                	push   0x0
c000b8cc:	68 5b 04 00 c0       	push   0xc000045b
c000b8d1:	6a 27                	push   0x27
c000b8d3:	53                   	push   ebx
c000b8d4:	e8 d9 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8d9:	83 c4 20             	add    esp,0x20
c000b8dc:	6a 00                	push   0x0
c000b8de:	68 65 04 00 c0       	push   0xc0000465
c000b8e3:	6a 28                	push   0x28
c000b8e5:	53                   	push   ebx
c000b8e6:	e8 c7 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8eb:	6a 00                	push   0x0
c000b8ed:	68 6f 04 00 c0       	push   0xc000046f
c000b8f2:	6a 29                	push   0x29
c000b8f4:	53                   	push   ebx
c000b8f5:	e8 b8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8fa:	83 c4 20             	add    esp,0x20
c000b8fd:	6a 00                	push   0x0
c000b8ff:	68 79 04 00 c0       	push   0xc0000479
c000b904:	6a 2a                	push   0x2a
c000b906:	53                   	push   ebx
c000b907:	e8 a6 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b90c:	6a 00                	push   0x0
c000b90e:	68 83 04 00 c0       	push   0xc0000483
c000b913:	6a 2b                	push   0x2b
c000b915:	53                   	push   ebx
c000b916:	e8 97 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b91b:	83 c4 20             	add    esp,0x20
c000b91e:	6a 00                	push   0x0
c000b920:	68 8d 04 00 c0       	push   0xc000048d
c000b925:	6a 2c                	push   0x2c
c000b927:	53                   	push   ebx
c000b928:	e8 85 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b92d:	6a 00                	push   0x0
c000b92f:	68 97 04 00 c0       	push   0xc0000497
c000b934:	6a 2d                	push   0x2d
c000b936:	53                   	push   ebx
c000b937:	e8 76 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b93c:	83 c4 20             	add    esp,0x20
c000b93f:	6a 00                	push   0x0
c000b941:	68 a1 04 00 c0       	push   0xc00004a1
c000b946:	6a 2e                	push   0x2e
c000b948:	53                   	push   ebx
c000b949:	e8 64 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b94e:	6a 00                	push   0x0
c000b950:	68 ab 04 00 c0       	push   0xc00004ab
c000b955:	6a 2f                	push   0x2f
c000b957:	53                   	push   ebx
c000b958:	e8 55 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b95d:	83 c4 20             	add    esp,0x20
c000b960:	6a 00                	push   0x0
c000b962:	68 b5 04 00 c0       	push   0xc00004b5
c000b967:	6a 30                	push   0x30
c000b969:	53                   	push   ebx
c000b96a:	e8 43 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b96f:	6a 00                	push   0x0
c000b971:	68 bf 04 00 c0       	push   0xc00004bf
c000b976:	6a 31                	push   0x31
c000b978:	53                   	push   ebx
c000b979:	e8 34 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b97e:	83 c4 20             	add    esp,0x20
c000b981:	6a 00                	push   0x0
c000b983:	68 c9 04 00 c0       	push   0xc00004c9
c000b988:	6a 32                	push   0x32
c000b98a:	53                   	push   ebx
c000b98b:	e8 22 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b990:	6a 00                	push   0x0
c000b992:	68 d3 04 00 c0       	push   0xc00004d3
c000b997:	6a 33                	push   0x33
c000b999:	53                   	push   ebx
c000b99a:	e8 13 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b99f:	83 c4 20             	add    esp,0x20
c000b9a2:	6a 00                	push   0x0
c000b9a4:	68 dd 04 00 c0       	push   0xc00004dd
c000b9a9:	6a 34                	push   0x34
c000b9ab:	53                   	push   ebx
c000b9ac:	e8 01 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9b1:	6a 00                	push   0x0
c000b9b3:	68 e7 04 00 c0       	push   0xc00004e7
c000b9b8:	6a 35                	push   0x35
c000b9ba:	53                   	push   ebx
c000b9bb:	e8 f2 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9c0:	83 c4 20             	add    esp,0x20
c000b9c3:	6a 00                	push   0x0
c000b9c5:	68 f1 04 00 c0       	push   0xc00004f1
c000b9ca:	6a 36                	push   0x36
c000b9cc:	53                   	push   ebx
c000b9cd:	e8 e0 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9d2:	6a 00                	push   0x0
c000b9d4:	68 fb 04 00 c0       	push   0xc00004fb
c000b9d9:	6a 37                	push   0x37
c000b9db:	53                   	push   ebx
c000b9dc:	e8 d1 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9e1:	83 c4 20             	add    esp,0x20
c000b9e4:	e8 ca 24 00 00       	call   c000deb3 <Virt::getAKernelVAS()>
c000b9e9:	52                   	push   edx
c000b9ea:	6a 03                	push   0x3
c000b9ec:	6a 02                	push   0x2
c000b9ee:	50                   	push   eax
c000b9ef:	e8 66 2a 00 00       	call   c000e45a <VAS::allocatePages(int, int)>
c000b9f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9fb:	89 c6                	mov    esi,eax
c000b9fd:	e8 b2 34 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000ba02:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba08:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba0b:	89 c7                	mov    edi,eax
c000ba0d:	e8 3a 1c 00 00       	call   c000d64c <TSS::TSS()>
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	68 a9 03 00 c0       	push   0xc00003a9
c000ba1a:	56                   	push   esi
c000ba1b:	57                   	push   edi
c000ba1c:	e8 6b 1c 00 00       	call   c000d68c <TSS::setup(unsigned long, unsigned long)>
c000ba21:	59                   	pop    ecx
c000ba22:	89 c6                	mov    esi,eax
c000ba24:	5f                   	pop    edi
c000ba25:	6a 00                	push   0x0
c000ba27:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba2b:	50                   	push   eax
c000ba2c:	e8 db fb ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000ba31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba35:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba3a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba41:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba4b:	80 ce 05             	or     dh,0x5
c000ba4e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba59:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba5f:	e8 86 fc ff ff       	call   c000b6ea <IDT::flush()>
c000ba64:	83 c4 20             	add    esp,0x20
c000ba67:	5b                   	pop    ebx
c000ba68:	5e                   	pop    esi
c000ba69:	5f                   	pop    edi
c000ba6a:	c3                   	ret    

c000ba6b <sbrk>:
c000ba6b:	55                   	push   ebp
c000ba6c:	57                   	push   edi
c000ba6d:	56                   	push   esi
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 1c             	sub    esp,0x1c
c000ba72:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ba76:	85 db                	test   ebx,ebx
c000ba78:	74 37                	je     c000bab1 <sbrk+0x46>
c000ba7a:	78 3f                	js     c000babb <sbrk+0x50>
c000ba7c:	e8 b1 84 00 00       	call   c0013f32 <thisCPU()>
c000ba81:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ba87:	83 e0 01             	and    eax,0x1
c000ba8a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ba8e:	a1 64 2a 02 c0       	mov    eax,ds:0xc0022a64
c000ba93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba97:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000ba9d:	89 d8                	mov    eax,ebx
c000ba9f:	78 35                	js     c000bad6 <sbrk+0x6b>
c000baa1:	c1 f8 0c             	sar    eax,0xc
c000baa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa8:	89 c7                	mov    edi,eax
c000baaa:	be 00 00 00 00       	mov    esi,0x0
c000baaf:	eb 3c                	jmp    c000baed <sbrk+0x82>
c000bab1:	a1 64 2a 02 c0       	mov    eax,ds:0xc0022a64
c000bab6:	e9 ad 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000babb:	83 ec 08             	sub    esp,0x8
c000babe:	53                   	push   ebx
c000babf:	68 78 03 02 c0       	push   0xc0020378
c000bac4:	e8 da 34 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bad1:	e9 92 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000bad6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000badc:	eb c3                	jmp    c000baa1 <sbrk+0x36>
c000bade:	81 05 64 2a 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022a64,0x1000
c000bae8:	46                   	inc    esi
c000bae9:	39 f7                	cmp    edi,esi
c000baeb:	74 34                	je     c000bb21 <sbrk+0xb6>
c000baed:	e8 c1 23 00 00       	call   c000deb3 <Virt::getAKernelVAS()>
c000baf2:	89 c3                	mov    ebx,eax
c000baf4:	8b 2d 64 2a 02 c0    	mov    ebp,DWORD PTR ds:0xc0022a64
c000bafa:	e8 c9 06 00 00       	call   c000c1c8 <Phys::allocatePage()>
c000baff:	68 01 04 00 00       	push   0x401
c000bb04:	55                   	push   ebp
c000bb05:	50                   	push   eax
c000bb06:	53                   	push   ebx
c000bb07:	e8 4e 28 00 00       	call   c000e35a <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb14:	74 c8                	je     c000bade <sbrk+0x73>
c000bb16:	8b 1d 64 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a64
c000bb1c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb1f:	eb bd                	jmp    c000bade <sbrk+0x73>
c000bb21:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb26:	74 48                	je     c000bb70 <sbrk+0x105>
c000bb28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb2c:	89 d3                	mov    ebx,edx
c000bb2e:	c1 eb 0a             	shr    ebx,0xa
c000bb31:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb37:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb41:	c1 e0 0c             	shl    eax,0xc
c000bb44:	01 d0                	add    eax,edx
c000bb46:	c1 e8 0a             	shr    eax,0xa
c000bb49:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb4e:	2d 00 00 40 00       	sub    eax,0x400000
c000bb53:	39 c3                	cmp    ebx,eax
c000bb55:	77 0d                	ja     c000bb64 <sbrk+0xf9>
c000bb57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb60:	39 d8                	cmp    eax,ebx
c000bb62:	73 f3                	jae    c000bb57 <sbrk+0xec>
c000bb64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb68:	83 c4 1c             	add    esp,0x1c
c000bb6b:	5b                   	pop    ebx
c000bb6c:	5e                   	pop    esi
c000bb6d:	5f                   	pop    edi
c000bb6e:	5d                   	pop    ebp
c000bb6f:	c3                   	ret    
c000bb70:	e8 50 2e 01 00       	call   c001e9c5 <CPU::readCR3()>
c000bb75:	83 ec 0c             	sub    esp,0xc
c000bb78:	50                   	push   eax
c000bb79:	e8 59 2e 01 00       	call   c001e9d7 <CPU::writeCR3(unsigned long)>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	eb e1                	jmp    c000bb64 <sbrk+0xf9>

c000bb83 <mmap>:
c000bb83:	83 ec 18             	sub    esp,0x18
c000bb86:	68 a8 03 02 c0       	push   0xc00203a8
c000bb8b:	e8 a8 90 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000bb90:	b8 00 00 00 00       	mov    eax,0x0
c000bb95:	83 c4 1c             	add    esp,0x1c
c000bb98:	c3                   	ret    

c000bb99 <munmap>:
c000bb99:	83 ec 18             	sub    esp,0x18
c000bb9c:	68 ad 03 02 c0       	push   0xc00203ad
c000bba1:	e8 92 90 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000bba6:	b8 00 00 00 00       	mov    eax,0x0
c000bbab:	83 c4 1c             	add    esp,0x1c
c000bbae:	c3                   	ret    

c000bbaf <liballoc_lock()>:
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	e8 9f bf 00 00       	call   c0017b56 <lockScheduler()>
c000bbb7:	b8 00 00 00 00       	mov    eax,0x0
c000bbbc:	83 c4 0c             	add    esp,0xc
c000bbbf:	c3                   	ret    

c000bbc0 <liballoc_unlock()>:
c000bbc0:	83 ec 0c             	sub    esp,0xc
c000bbc3:	e8 90 bf 00 00       	call   c0017b58 <unlockScheduler()>
c000bbc8:	b8 00 00 00 00       	mov    eax,0x0
c000bbcd:	83 c4 0c             	add    esp,0xc
c000bbd0:	c3                   	ret    

c000bbd1 <liballoc_alloc(int)>:
c000bbd1:	83 ec 0c             	sub    esp,0xc
c000bbd4:	e8 da 22 00 00       	call   c000deb3 <Virt::getAKernelVAS()>
c000bbd9:	83 ec 04             	sub    esp,0x4
c000bbdc:	6a 01                	push   0x1
c000bbde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbe2:	50                   	push   eax
c000bbe3:	e8 72 28 00 00       	call   c000e45a <VAS::allocatePages(int, int)>
c000bbe8:	83 c4 1c             	add    esp,0x1c
c000bbeb:	c3                   	ret    

c000bbec <liballoc_free(void*, int)>:
c000bbec:	83 ec 0c             	sub    esp,0xc
c000bbef:	e8 bf 22 00 00       	call   c000deb3 <Virt::getAKernelVAS()>
c000bbf4:	83 ec 08             	sub    esp,0x8
c000bbf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbfb:	50                   	push   eax
c000bbfc:	e8 7b 25 00 00       	call   c000e17c <VAS::freeAllocatedPages(unsigned long)>
c000bc01:	b8 00 00 00 00       	mov    eax,0x0
c000bc06:	83 c4 1c             	add    esp,0x1c
c000bc09:	c3                   	ret    

c000bc0a <realloc>:
c000bc0a:	83 ec 14             	sub    esp,0x14
c000bc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc15:	e8 67 57 ff ff       	call   c0001381 <dlrealloc>
c000bc1a:	83 c4 1c             	add    esp,0x1c
c000bc1d:	c3                   	ret    

c000bc1e <malloc>:
c000bc1e:	83 ec 18             	sub    esp,0x18
c000bc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc25:	e8 1a 52 ff ff       	call   c0000e44 <dlmalloc>
c000bc2a:	83 c4 1c             	add    esp,0x1c
c000bc2d:	c3                   	ret    

c000bc2e <free>:
c000bc2e:	83 ec 18             	sub    esp,0x18
c000bc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc35:	e8 af 4e ff ff       	call   c0000ae9 <dlfree>
c000bc3a:	83 c4 1c             	add    esp,0x1c
c000bc3d:	c3                   	ret    

c000bc3e <rfree>:
c000bc3e:	83 ec 18             	sub    esp,0x18
c000bc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc45:	e8 e4 ff ff ff       	call   c000bc2e <free>
c000bc4a:	83 c4 1c             	add    esp,0x1c
c000bc4d:	c3                   	ret    

c000bc4e <calloc>:
c000bc4e:	56                   	push   esi
c000bc4f:	53                   	push   ebx
c000bc50:	83 ec 10             	sub    esp,0x10
c000bc53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc57:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 bc ff ff ff       	call   c000bc1e <malloc>
c000bc62:	89 c6                	mov    esi,eax
c000bc64:	83 c4 0c             	add    esp,0xc
c000bc67:	53                   	push   ebx
c000bc68:	6a 00                	push   0x0
c000bc6a:	50                   	push   eax
c000bc6b:	e8 98 49 ff ff       	call   c0000608 <memset>
c000bc70:	89 f0                	mov    eax,esi
c000bc72:	83 c4 14             	add    esp,0x14
c000bc75:	5b                   	pop    ebx
c000bc76:	5e                   	pop    esi
c000bc77:	c3                   	ret    

c000bc78 <hwTextMode_loadInData(VgaText*)>:
c000bc78:	57                   	push   edi
c000bc79:	56                   	push   esi
c000bc7a:	53                   	push   ebx
c000bc7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc7f:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bc85:	85 c0                	test   eax,eax
c000bc87:	7e 30                	jle    c000bcb9 <hwTextMode_loadInData(VgaText*)+0x41>
c000bc89:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bc8c:	31 f6                	xor    esi,esi
c000bc8e:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bc91:	31 c0                	xor    eax,eax
c000bc93:	c1 e1 05             	shl    ecx,0x5
c000bc96:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bc9c:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bca0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bca4:	40                   	inc    eax
c000bca5:	83 f8 50             	cmp    eax,0x50
c000bca8:	75 f2                	jne    c000bc9c <hwTextMode_loadInData(VgaText*)+0x24>
c000bcaa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bcb0:	46                   	inc    esi
c000bcb1:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bcb7:	7f d5                	jg     c000bc8e <hwTextMode_loadInData(VgaText*)+0x16>
c000bcb9:	5b                   	pop    ebx
c000bcba:	5e                   	pop    esi
c000bcbb:	5f                   	pop    edi
c000bcbc:	c3                   	ret    

c000bcbd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bcbd:	56                   	push   esi
c000bcbe:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcc3:	53                   	push   ebx
c000bcc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bccc:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bcd2:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bcd8:	c1 e0 04             	shl    eax,0x4
c000bcdb:	83 e6 0f             	and    esi,0xf
c000bcde:	0f b6 c0             	movzx  eax,al
c000bce1:	41                   	inc    ecx
c000bce2:	09 f0                	or     eax,esi
c000bce4:	83 c2 02             	add    edx,0x2
c000bce7:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bceb:	c1 e0 08             	shl    eax,0x8
c000bcee:	09 f0                	or     eax,esi
c000bcf0:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bcf4:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bcfa:	75 d0                	jne    c000bccc <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bcfc:	5b                   	pop    ebx
c000bcfd:	5e                   	pop    esi
c000bcfe:	c3                   	ret    

c000bcff <hwTextMode_showCursor(VgaText*, bool)>:
c000bcff:	56                   	push   esi
c000bd00:	53                   	push   ebx
c000bd01:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd06:	74 38                	je     c000bd40 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd08:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd0d:	b0 0a                	mov    al,0xa
c000bd0f:	89 da                	mov    edx,ebx
c000bd11:	ee                   	out    dx,al
c000bd12:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd17:	89 ca                	mov    edx,ecx
c000bd19:	ec                   	in     al,dx
c000bd1a:	b2 0f                	mov    dl,0xf
c000bd1c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd20:	83 e0 c0             	and    eax,0xffffffc0
c000bd23:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd29:	09 d0                	or     eax,edx
c000bd2b:	89 ca                	mov    edx,ecx
c000bd2d:	ee                   	out    dx,al
c000bd2e:	b0 0b                	mov    al,0xb
c000bd30:	89 da                	mov    edx,ebx
c000bd32:	ee                   	out    dx,al
c000bd33:	89 ca                	mov    edx,ecx
c000bd35:	ec                   	in     al,dx
c000bd36:	83 e0 e0             	and    eax,0xffffffe0
c000bd39:	83 c8 0f             	or     eax,0xf
c000bd3c:	ee                   	out    dx,al
c000bd3d:	5b                   	pop    ebx
c000bd3e:	5e                   	pop    esi
c000bd3f:	c3                   	ret    
c000bd40:	b0 0a                	mov    al,0xa
c000bd42:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd47:	ee                   	out    dx,al
c000bd48:	b0 20                	mov    al,0x20
c000bd4a:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd4f:	ee                   	out    dx,al
c000bd50:	5b                   	pop    ebx
c000bd51:	5e                   	pop    esi
c000bd52:	c3                   	ret    

c000bd53 <hwTextMode_update(VgaText*)>:
c000bd53:	c3                   	ret    

c000bd54 <hwTextMode_updateCursor(VgaText*)>:
c000bd54:	56                   	push   esi
c000bd55:	b9 19 00 00 00       	mov    ecx,0x19
c000bd5a:	53                   	push   ebx
c000bd5b:	be d4 03 00 00       	mov    esi,0x3d4
c000bd60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd64:	89 f2                	mov    edx,esi
c000bd66:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd6c:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bd72:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bd75:	c1 e1 04             	shl    ecx,0x4
c000bd78:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bd7e:	b0 0f                	mov    al,0xf
c000bd80:	ee                   	out    dx,al
c000bd81:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bd86:	88 c8                	mov    al,cl
c000bd88:	89 da                	mov    edx,ebx
c000bd8a:	ee                   	out    dx,al
c000bd8b:	b0 0e                	mov    al,0xe
c000bd8d:	89 f2                	mov    edx,esi
c000bd8f:	ee                   	out    dx,al
c000bd90:	89 c8                	mov    eax,ecx
c000bd92:	89 da                	mov    edx,ebx
c000bd94:	66 c1 e8 08          	shr    ax,0x8
c000bd98:	ee                   	out    dx,al
c000bd99:	5b                   	pop    ebx
c000bd9a:	5e                   	pop    esi
c000bd9b:	c3                   	ret    

c000bd9c <hwTextMode_disableBlink(VgaText*, bool)>:
c000bd9c:	ba da 03 00 00       	mov    edx,0x3da
c000bda1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bda6:	75 18                	jne    c000bdc0 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bda8:	ec                   	in     al,dx
c000bda9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdae:	b0 30                	mov    al,0x30
c000bdb0:	89 ca                	mov    edx,ecx
c000bdb2:	ee                   	out    dx,al
c000bdb3:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdb8:	ec                   	in     al,dx
c000bdb9:	83 c8 08             	or     eax,0x8
c000bdbc:	89 ca                	mov    edx,ecx
c000bdbe:	ee                   	out    dx,al
c000bdbf:	c3                   	ret    
c000bdc0:	ec                   	in     al,dx
c000bdc1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdc6:	b0 30                	mov    al,0x30
c000bdc8:	89 ca                	mov    edx,ecx
c000bdca:	ee                   	out    dx,al
c000bdcb:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdd0:	ec                   	in     al,dx
c000bdd1:	83 e0 f7             	and    eax,0xfffffff7
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	ee                   	out    dx,al
c000bdd7:	c3                   	ret    

c000bdd8 <hwTextMode_scrollScreen(VgaText*)>:
c000bdd8:	55                   	push   ebp
c000bdd9:	bd 02 00 00 00       	mov    ebp,0x2
c000bdde:	57                   	push   edi
c000bddf:	56                   	push   esi
c000bde0:	53                   	push   ebx
c000bde1:	83 ec 1c             	sub    esp,0x1c
c000bde4:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000bdec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bdf0:	31 c0                	xor    eax,eax
c000bdf2:	eb 0b                	jmp    c000bdff <hwTextMode_scrollScreen(VgaText*)+0x27>
c000bdf4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000bdfa:	74 57                	je     c000be53 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000bdfc:	43                   	inc    ebx
c000bdfd:	89 f0                	mov    eax,esi
c000bdff:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000be05:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be0b:	88 13                	mov    BYTE PTR [ebx],dl
c000be0d:	8d 70 01             	lea    esi,[eax+0x1]
c000be10:	83 fd 18             	cmp    ebp,0x18
c000be13:	75 df                	jne    c000bdf4 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be15:	a8 01                	test   al,0x1
c000be17:	75 13                	jne    c000be2c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be19:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be1c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be22:	75 d8                	jne    c000bdfc <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be24:	83 c4 1c             	add    esp,0x1c
c000be27:	5b                   	pop    ebx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 08             	sub    esp,0x8
c000be2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be33:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be3a:	50                   	push   eax
c000be3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be3f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be46:	50                   	push   eax
c000be47:	e8 e0 0a 00 00       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	88 07                	mov    BYTE PTR [edi],al
c000be51:	eb c9                	jmp    c000be1c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be53:	45                   	inc    ebp
c000be54:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be5c:	eb 8e                	jmp    c000bdec <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be5e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be5e:	56                   	push   esi
c000be5f:	53                   	push   ebx
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be6b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be70:	50                   	push   eax
c000be71:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be76:	50                   	push   eax
c000be77:	e8 b0 0a 00 00       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000be7c:	5a                   	pop    edx
c000be7d:	0f b6 c0             	movzx  eax,al
c000be80:	59                   	pop    ecx
c000be81:	50                   	push   eax
c000be82:	89 f0                	mov    eax,esi
c000be84:	0f be f0             	movsx  esi,al
c000be87:	56                   	push   esi
c000be88:	e8 45 0b 00 00       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000be8d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be91:	ba 19 00 00 00       	mov    edx,0x19
c000be96:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000be9c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be9f:	8d 14 92             	lea    edx,[edx+edx*4]
c000bea2:	c1 e1 04             	shl    ecx,0x4
c000bea5:	c1 e2 04             	shl    edx,0x4
c000bea8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000beac:	01 ca                	add    edx,ecx
c000beae:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000beb6:	83 c4 14             	add    esp,0x14
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	c3                   	ret    

c000bebc <setupTextMode()>:
c000bebc:	c7 05 f8 36 02 c0 9c bd 00 c0 	mov    DWORD PTR ds:0xc00236f8,0xc000bd9c
c000bec6:	c7 05 e4 36 02 c0 78 bc 00 c0 	mov    DWORD PTR ds:0xc00236e4,0xc000bc78
c000bed0:	c7 05 e0 36 02 c0 bd bc 00 c0 	mov    DWORD PTR ds:0xc00236e0,0xc000bcbd
c000beda:	c7 05 ec 36 02 c0 d8 bd 00 c0 	mov    DWORD PTR ds:0xc00236ec,0xc000bdd8
c000bee4:	c7 05 f4 36 02 c0 ff bc 00 c0 	mov    DWORD PTR ds:0xc00236f4,0xc000bcff
c000beee:	c7 05 e8 36 02 c0 53 bd 00 c0 	mov    DWORD PTR ds:0xc00236e8,0xc000bd53
c000bef8:	c7 05 f0 36 02 c0 54 bd 00 c0 	mov    DWORD PTR ds:0xc00236f0,0xc000bd54
c000bf02:	c7 05 fc 36 02 c0 5e be 00 c0 	mov    DWORD PTR ds:0xc00236fc,0xc000be5e
c000bf0c:	c3                   	ret    

c000bf0d <kernel_main>:
c000bf0d:	57                   	push   edi
c000bf0e:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf13:	56                   	push   esi
c000bf14:	31 f6                	xor    esi,esi
c000bf16:	53                   	push   ebx
c000bf17:	83 ec 10             	sub    esp,0x10
c000bf1a:	e8 67 08 00 00       	call   c000c786 <installVgaTextImplementation()>
c000bf1f:	e8 98 ff ff ff       	call   c000bebc <setupTextMode()>
c000bf24:	89 f0                	mov    eax,esi
c000bf26:	89 fa                	mov    edx,edi
c000bf28:	ee                   	out    dx,al
c000bf29:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf2e:	b0 80                	mov    al,0x80
c000bf30:	89 da                	mov    edx,ebx
c000bf32:	ee                   	out    dx,al
c000bf33:	b1 03                	mov    cl,0x3
c000bf35:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf3a:	88 c8                	mov    al,cl
c000bf3c:	ee                   	out    dx,al
c000bf3d:	89 f0                	mov    eax,esi
c000bf3f:	89 fa                	mov    edx,edi
c000bf41:	ee                   	out    dx,al
c000bf42:	88 c8                	mov    al,cl
c000bf44:	89 da                	mov    edx,ebx
c000bf46:	ee                   	out    dx,al
c000bf47:	b0 c7                	mov    al,0xc7
c000bf49:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf4e:	ee                   	out    dx,al
c000bf4f:	b0 0b                	mov    al,0xb
c000bf51:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf56:	ee                   	out    dx,al
c000bf57:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	05 ff 0f 00 00       	add    eax,0xfff
c000bf64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf69:	50                   	push   eax
c000bf6a:	e8 4d 03 00 00       	call   c000c2bc <Phys::physicalMemorySetup(unsigned int)>
c000bf6f:	e8 c0 1e 00 00       	call   c000de34 <Virt::virtualMemorySetup()>
c000bf74:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bf7a:	83 c4 10             	add    esp,0x10
c000bf7d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bf83:	75 0e                	jne    c000bf93 <kernel_main+0x86>
c000bf85:	89 d8                	mov    eax,ebx
c000bf87:	25 48 03 00 00       	and    eax,0x348
c000bf8c:	3d 00 03 00 00       	cmp    eax,0x300
c000bf91:	74 10                	je     c000bfa3 <kernel_main+0x96>
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	68 7b 17 02 c0       	push   0xc002177b
c000bf9b:	e8 98 8c 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000bfa0:	83 c4 10             	add    esp,0x10
c000bfa3:	83 ec 0c             	sub    esp,0xc
c000bfa6:	89 1d 60 36 02 c0    	mov    DWORD PTR ds:0xc0023660,ebx
c000bfac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfb0:	53                   	push   ebx
c000bfb1:	e8 28 20 00 00       	call   c000dfde <VAS::VAS()>
c000bfb6:	89 1d a4 37 02 c0    	mov    DWORD PTR ds:0xc00237a4,ebx
c000bfbc:	e8 5f 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfc1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bfc8:	e8 e7 2e 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000bfcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd0:	89 c6                	mov    esi,eax
c000bfd2:	e8 cb ed ff ff       	call   c000ada2 <Computer::Computer()>
c000bfd7:	6a 00                	push   0x0
c000bfd9:	89 35 48 36 02 c0    	mov    DWORD PTR ds:0xc0023648,esi
c000bfdf:	6a 00                	push   0x0
c000bfe1:	6a 00                	push   0x0
c000bfe3:	56                   	push   esi
c000bfe4:	e8 7f f2 ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000bfe9:	83 c4 14             	add    esp,0x14
c000bfec:	53                   	push   ebx
c000bfed:	e8 fc 21 00 00       	call   c000e1ee <VAS::~VAS()>
c000bff2:	c7 04 24 b4 03 02 c0 	mov    DWORD PTR [esp],0xc00203b4
c000bff9:	e8 3a 8c 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000bffe:	83 c4 20             	add    esp,0x20
c000c001:	5b                   	pop    ebx
c000c002:	5e                   	pop    esi
c000c003:	5f                   	pop    edi
c000c004:	c3                   	ret    

c000c005 <Phys::allocateDMA(unsigned long)>:
c000c005:	55                   	push   ebp
c000c006:	31 d2                	xor    edx,edx
c000c008:	57                   	push   edi
c000c009:	31 ed                	xor    ebp,ebp
c000c00b:	56                   	push   esi
c000c00c:	31 c9                	xor    ecx,ecx
c000c00e:	53                   	push   ebx
c000c00f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c013:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c019:	31 c0                	xor    eax,eax
c000c01b:	c1 ee 0c             	shr    esi,0xc
c000c01e:	eb 17                	jmp    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c020:	85 c9                	test   ecx,ecx
c000c022:	75 04                	jne    c000c028 <Phys::allocateDMA(unsigned long)+0x23>
c000c024:	89 d5                	mov    ebp,edx
c000c026:	89 d0                	mov    eax,edx
c000c028:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c02b:	39 de                	cmp    esi,ebx
c000c02d:	74 20                	je     c000c04f <Phys::allocateDMA(unsigned long)+0x4a>
c000c02f:	42                   	inc    edx
c000c030:	89 d9                	mov    ecx,ebx
c000c032:	83 fa 2f             	cmp    edx,0x2f
c000c035:	7f 11                	jg     c000c048 <Phys::allocateDMA(unsigned long)+0x43>
c000c037:	80 ba a0 36 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdc960],0x0
c000c03e:	74 e0                	je     c000c020 <Phys::allocateDMA(unsigned long)+0x1b>
c000c040:	31 c9                	xor    ecx,ecx
c000c042:	42                   	inc    edx
c000c043:	83 fa 2f             	cmp    edx,0x2f
c000c046:	7e ef                	jle    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c048:	5b                   	pop    ebx
c000c049:	31 c0                	xor    eax,eax
c000c04b:	5e                   	pop    esi
c000c04c:	5f                   	pop    edi
c000c04d:	5d                   	pop    ebp
c000c04e:	c3                   	ret    
c000c04f:	8d 14 30             	lea    edx,[eax+esi*1]
c000c052:	89 d7                	mov    edi,edx
c000c054:	4f                   	dec    edi
c000c055:	79 03                	jns    c000c05a <Phys::allocateDMA(unsigned long)+0x55>
c000c057:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c05a:	c1 ff 04             	sar    edi,0x4
c000c05d:	89 c2                	mov    edx,eax
c000c05f:	c1 fa 04             	sar    edx,0x4
c000c062:	39 fa                	cmp    edx,edi
c000c064:	75 2f                	jne    c000c095 <Phys::allocateDMA(unsigned long)+0x90>
c000c066:	85 db                	test   ebx,ebx
c000c068:	74 1a                	je     c000c084 <Phys::allocateDMA(unsigned long)+0x7f>
c000c06a:	be a0 36 02 c0       	mov    esi,0xc00236a0
c000c06f:	8d 90 a0 36 02 c0    	lea    edx,[eax-0x3ffdc960]
c000c075:	f7 d6                	not    esi
c000c077:	29 c6                	sub    esi,eax
c000c079:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c07c:	42                   	inc    edx
c000c07d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c080:	39 d9                	cmp    ecx,ebx
c000c082:	7f f5                	jg     c000c079 <Phys::allocateDMA(unsigned long)+0x74>
c000c084:	85 ff                	test   edi,edi
c000c086:	74 13                	je     c000c09b <Phys::allocateDMA(unsigned long)+0x96>
c000c088:	5b                   	pop    ebx
c000c089:	05 50 20 0c 00       	add    eax,0xc2050
c000c08e:	5e                   	pop    esi
c000c08f:	c1 e0 0c             	shl    eax,0xc
c000c092:	5f                   	pop    edi
c000c093:	5d                   	pop    ebp
c000c094:	c3                   	ret    
c000c095:	89 ea                	mov    edx,ebp
c000c097:	31 c9                	xor    ecx,ecx
c000c099:	eb a7                	jmp    c000c042 <Phys::allocateDMA(unsigned long)+0x3d>
c000c09b:	5b                   	pop    ebx
c000c09c:	c1 e0 0c             	shl    eax,0xc
c000c09f:	5e                   	pop    esi
c000c0a0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c0a5:	5f                   	pop    edi
c000c0a6:	5d                   	pop    ebp
c000c0a7:	c3                   	ret    

c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0b0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0b6:	c1 e9 0c             	shr    ecx,0xc
c000c0b9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0be:	76 25                	jbe    c000c0e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0c0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0c5:	c1 e8 0c             	shr    eax,0xc
c000c0c8:	8d 50 10             	lea    edx,[eax+0x10]
c000c0cb:	85 c9                	test   ecx,ecx
c000c0cd:	74 15                	je     c000c0e4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0cf:	8d 82 a0 36 02 c0    	lea    eax,[edx-0x3ffdc960]
c000c0d5:	8d 94 11 a0 36 02 c0 	lea    edx,[ecx+edx*1-0x3ffdc960]
c000c0dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c0df:	40                   	inc    eax
c000c0e0:	39 d0                	cmp    eax,edx
c000c0e2:	75 f8                	jne    c000c0dc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c0e4:	c3                   	ret    
c000c0e5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c0eb:	c1 ea 0c             	shr    edx,0xc
c000c0ee:	eb db                	jmp    c000c0cb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c0f0 <Phys::setPageState(unsigned long, bool)>:
c000c0f0:	56                   	push   esi
c000c0f1:	ba 01 00 00 00       	mov    edx,0x1
c000c0f6:	53                   	push   ebx
c000c0f7:	8b 35 68 2a 02 c0    	mov    esi,DWORD PTR ds:0xc0022a68
c000c0fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c105:	89 c8                	mov    eax,ecx
c000c107:	83 e1 07             	and    ecx,0x7
c000c10a:	c1 e8 03             	shr    eax,0x3
c000c10d:	d3 e3                	shl    ebx,cl
c000c10f:	01 c6                	add    esi,eax
c000c111:	d3 e2                	shl    edx,cl
c000c113:	f7 d2                	not    edx
c000c115:	20 16                	and    BYTE PTR [esi],dl
c000c117:	03 05 68 2a 02 c0    	add    eax,DWORD PTR ds:0xc0022a68
c000c11d:	08 18                	or     BYTE PTR [eax],bl
c000c11f:	5b                   	pop    ebx
c000c120:	5e                   	pop    esi
c000c121:	c3                   	ret    

c000c122 <Phys::getPageState(unsigned long)>:
c000c122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c126:	8b 15 68 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a68
c000c12c:	89 c8                	mov    eax,ecx
c000c12e:	83 e1 07             	and    ecx,0x7
c000c131:	c1 e8 03             	shr    eax,0x3
c000c134:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c138:	d3 f8                	sar    eax,cl
c000c13a:	83 e0 01             	and    eax,0x1
c000c13d:	c3                   	ret    

c000c13e <Phys::freePage(unsigned long)>:
c000c13e:	53                   	push   ebx
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c146:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c14c:	76 57                	jbe    c000c1a5 <Phys::freePage(unsigned long)+0x67>
c000c14e:	c1 eb 0c             	shr    ebx,0xc
c000c151:	53                   	push   ebx
c000c152:	e8 cb ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c157:	5a                   	pop    edx
c000c158:	84 c0                	test   al,al
c000c15a:	74 5b                	je     c000c1b7 <Phys::freePage(unsigned long)+0x79>
c000c15c:	a1 8c 36 02 c0       	mov    eax,ds:0xc002368c
c000c161:	48                   	dec    eax
c000c162:	a3 8c 36 02 c0       	mov    ds:0xc002368c,eax
c000c167:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16d:	c1 e0 02             	shl    eax,0x2
c000c170:	99                   	cdq    
c000c171:	f7 3d 90 36 02 c0    	idiv   DWORD PTR ds:0xc0023690
c000c177:	39 05 88 36 02 c0    	cmp    DWORD PTR ds:0xc0023688,eax
c000c17d:	75 13                	jne    c000c192 <Phys::freePage(unsigned long)+0x54>
c000c17f:	83 ec 08             	sub    esp,0x8
c000c182:	6a 00                	push   0x0
c000c184:	53                   	push   ebx
c000c185:	e8 66 ff ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	83 c4 08             	add    esp,0x8
c000c190:	5b                   	pop    ebx
c000c191:	c3                   	ret    
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	a3 88 36 02 c0       	mov    ds:0xc0023688,eax
c000c19a:	50                   	push   eax
c000c19b:	e8 7a 09 00 00       	call   c000cb1a <VgaText::updateRAMUsageDisplay(int)>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	eb da                	jmp    c000c17f <Phys::freePage(unsigned long)+0x41>
c000c1a5:	68 00 10 00 00       	push   0x1000
c000c1aa:	53                   	push   ebx
c000c1ab:	e8 f8 fe ff ff       	call   c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1b0:	59                   	pop    ecx
c000c1b1:	5b                   	pop    ebx
c000c1b2:	83 c4 08             	add    esp,0x8
c000c1b5:	5b                   	pop    ebx
c000c1b6:	c3                   	ret    
c000c1b7:	c7 44 24 10 cf 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc00203cf
c000c1bf:	83 c4 08             	add    esp,0x8
c000c1c2:	5b                   	pop    ebx
c000c1c3:	e9 70 8a 00 00       	jmp    c0014c38 <Krnl::panic(char const*)>

c000c1c8 <Phys::allocatePage()>:
c000c1c8:	56                   	push   esi
c000c1c9:	53                   	push   ebx
c000c1ca:	51                   	push   ecx
c000c1cb:	8b 35 80 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023680
c000c1d1:	89 f3                	mov    ebx,esi
c000c1d3:	eb 0a                	jmp    c000c1df <Phys::allocatePage()+0x17>
c000c1d5:	89 1d 80 36 02 c0    	mov    DWORD PTR ds:0xc0023680,ebx
c000c1db:	39 de                	cmp    esi,ebx
c000c1dd:	74 24                	je     c000c203 <Phys::allocatePage()+0x3b>
c000c1df:	53                   	push   ebx
c000c1e0:	e8 3d ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c1e5:	5a                   	pop    edx
c000c1e6:	84 c0                	test   al,al
c000c1e8:	74 4e                	je     c000c238 <Phys::allocatePage()+0x70>
c000c1ea:	43                   	inc    ebx
c000c1eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c1f1:	75 e2                	jne    c000c1d5 <Phys::allocatePage()+0xd>
c000c1f3:	31 db                	xor    ebx,ebx
c000c1f5:	c7 05 80 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023680,0x0
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 dc                	jne    c000c1df <Phys::allocatePage()+0x17>
c000c203:	83 ec 0c             	sub    esp,0xc
c000c206:	68 00 10 00 00       	push   0x1000
c000c20b:	e8 f5 fd ff ff       	call   c000c005 <Phys::allocateDMA(unsigned long)>
c000c210:	83 c4 10             	add    esp,0x10
c000c213:	85 c0                	test   eax,eax
c000c215:	75 56                	jne    c000c26d <Phys::allocatePage()+0xa5>
c000c217:	83 ec 0c             	sub    esp,0xc
c000c21a:	68 e5 03 02 c0       	push   0xc00203e5
c000c21f:	e8 14 8a 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	8b 1d 80 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023680
c000c22d:	53                   	push   ebx
c000c22e:	e8 ef fe ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c233:	5a                   	pop    edx
c000c234:	84 c0                	test   al,al
c000c236:	75 b2                	jne    c000c1ea <Phys::allocatePage()+0x22>
c000c238:	6a 01                	push   0x1
c000c23a:	53                   	push   ebx
c000c23b:	e8 b0 fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c240:	a1 8c 36 02 c0       	mov    eax,ds:0xc002368c
c000c245:	59                   	pop    ecx
c000c246:	40                   	inc    eax
c000c247:	5b                   	pop    ebx
c000c248:	a3 8c 36 02 c0       	mov    ds:0xc002368c,eax
c000c24d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c250:	8d 04 80             	lea    eax,[eax+eax*4]
c000c253:	c1 e0 02             	shl    eax,0x2
c000c256:	99                   	cdq    
c000c257:	f7 3d 90 36 02 c0    	idiv   DWORD PTR ds:0xc0023690
c000c25d:	39 05 88 36 02 c0    	cmp    DWORD PTR ds:0xc0023688,eax
c000c263:	75 0c                	jne    c000c271 <Phys::allocatePage()+0xa9>
c000c265:	a1 80 36 02 c0       	mov    eax,ds:0xc0023680
c000c26a:	c1 e0 0c             	shl    eax,0xc
c000c26d:	5a                   	pop    edx
c000c26e:	5b                   	pop    ebx
c000c26f:	5e                   	pop    esi
c000c270:	c3                   	ret    
c000c271:	83 ec 0c             	sub    esp,0xc
c000c274:	a3 88 36 02 c0       	mov    ds:0xc0023688,eax
c000c279:	50                   	push   eax
c000c27a:	e8 9b 08 00 00       	call   c000cb1a <VgaText::updateRAMUsageDisplay(int)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	eb e1                	jmp    c000c265 <Phys::allocatePage()+0x9d>

c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c284:	56                   	push   esi
c000c285:	53                   	push   ebx
c000c286:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c28a:	39 1d 84 36 02 c0    	cmp    DWORD PTR ds:0xc0023684,ebx
c000c290:	73 06                	jae    c000c298 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c292:	89 1d 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,ebx
c000c298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c29c:	c1 eb 0c             	shr    ebx,0xc
c000c29f:	c1 e8 0c             	shr    eax,0xc
c000c2a2:	39 d8                	cmp    eax,ebx
c000c2a4:	73 13                	jae    c000c2b9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2a6:	6a 00                	push   0x0
c000c2a8:	8d 70 01             	lea    esi,[eax+0x1]
c000c2ab:	50                   	push   eax
c000c2ac:	e8 3f fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2b1:	5a                   	pop    edx
c000c2b2:	89 f0                	mov    eax,esi
c000c2b4:	59                   	pop    ecx
c000c2b5:	39 f3                	cmp    ebx,esi
c000c2b7:	75 ed                	jne    c000c2a6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2b9:	5b                   	pop    ebx
c000c2ba:	5e                   	pop    esi
c000c2bb:	c3                   	ret    

c000c2bc <Phys::physicalMemorySetup(unsigned int)>:
c000c2bc:	55                   	push   ebp
c000c2bd:	57                   	push   edi
c000c2be:	56                   	push   esi
c000c2bf:	53                   	push   ebx
c000c2c0:	31 db                	xor    ebx,ebx
c000c2c2:	83 ec 30             	sub    esp,0x30
c000c2c5:	6a 30                	push   0x30
c000c2c7:	6a 00                	push   0x0
c000c2c9:	68 a0 36 02 c0       	push   0xc00236a0
c000c2ce:	e8 35 43 ff ff       	call   c0000608 <memset>
c000c2d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2dc:	05 00 10 00 00       	add    eax,0x1000
c000c2e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2e5:	83 c4 10             	add    esp,0x10
c000c2e8:	83 ec 08             	sub    esp,0x8
c000c2eb:	6a 01                	push   0x1
c000c2ed:	53                   	push   ebx
c000c2ee:	43                   	inc    ebx
c000c2ef:	e8 fc fd ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c2fd:	75 e9                	jne    c000c2e8 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c2ff:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c306:	66 85 c0             	test   ax,ax
c000c309:	0f 84 28 01 00 00    	je     c000c437 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c30f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c313:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000c319:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000c31e:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000c324:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000c32a:	89 f1                	mov    ecx,esi
c000c32c:	89 fb                	mov    ebx,edi
c000c32e:	01 c1                	add    ecx,eax
c000c330:	89 d5                	mov    ebp,edx
c000c332:	11 d3                	adc    ebx,edx
c000c334:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c337:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c33b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c33f:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000c345:	09 dd                	or     ebp,ebx
c000c347:	0f 85 fa 00 00 00    	jne    c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c34d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c351:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c359:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000c361:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c365:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c36d:	eb 45                	jmp    c000c3b4 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000c36f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000c373:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000c378:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c37c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c380:	0f 84 c1 00 00 00    	je     c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c386:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c38a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c38d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c390:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000c393:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000c396:	89 c1                	mov    ecx,eax
c000c398:	89 d3                	mov    ebx,edx
c000c39a:	01 f1                	add    ecx,esi
c000c39c:	11 fb                	adc    ebx,edi
c000c39e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3a1:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c3a5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000c3a8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3ac:	09 d3                	or     ebx,edx
c000c3ae:	0f 85 93 00 00 00    	jne    c000c447 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c3b4:	49                   	dec    ecx
c000c3b5:	75 b8                	jne    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c3ba:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c3be:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3c2:	39 e9                	cmp    ecx,ebp
c000c3c4:	89 d9                	mov    ecx,ebx
c000c3c6:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3ca:	72 a3                	jb     c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3cc:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c3d1:	39 f1                	cmp    ecx,esi
c000c3d3:	b9 00 00 00 00       	mov    ecx,0x0
c000c3d8:	19 f9                	sbb    ecx,edi
c000c3da:	73 93                	jae    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3dc:	39 e8                	cmp    eax,ebp
c000c3de:	89 d1                	mov    ecx,edx
c000c3e0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3e4:	73 13                	jae    c000c3f9 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000c3e6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c3e9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c3ed:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000c3f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c3f5:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000c3f9:	83 ec 08             	sub    esp,0x8
c000c3fc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c400:	50                   	push   eax
c000c401:	e8 7e fe ff ff       	call   c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c406:	83 c4 0c             	add    esp,0xc
c000c409:	89 fa                	mov    edx,edi
c000c40b:	89 f0                	mov    eax,esi
c000c40d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c411:	03 05 90 36 02 c0    	add    eax,DWORD PTR ds:0xc0023690
c000c417:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c41e:	a3 90 36 02 c0       	mov    ds:0xc0023690,eax
c000c423:	52                   	push   edx
c000c424:	50                   	push   eax
c000c425:	68 01 04 02 c0       	push   0xc0020401
c000c42a:	e8 74 2b 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000c42f:	83 c4 10             	add    esp,0x10
c000c432:	e9 38 ff ff ff       	jmp    c000c36f <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c437:	83 ec 0c             	sub    esp,0xc
c000c43a:	68 f3 03 02 c0       	push   0xc00203f3
c000c43f:	e8 f4 87 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000c444:	83 c4 10             	add    esp,0x10
c000c447:	bb 40 01 00 00       	mov    ebx,0x140
c000c44c:	83 ec 08             	sub    esp,0x8
c000c44f:	6a 00                	push   0x0
c000c451:	53                   	push   ebx
c000c452:	43                   	inc    ebx
c000c453:	e8 98 fc ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c458:	ff 05 90 36 02 c0    	inc    DWORD PTR ds:0xc0023690
c000c45e:	83 c4 10             	add    esp,0x10
c000c461:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c467:	75 e3                	jne    c000c44c <Phys::physicalMemorySetup(unsigned int)+0x190>
c000c469:	83 c4 2c             	add    esp,0x2c
c000c46c:	5b                   	pop    ebx
c000c46d:	5e                   	pop    esi
c000c46e:	5f                   	pop    edi
c000c46f:	5d                   	pop    ebp
c000c470:	c3                   	ret    
c000c471:	90                   	nop

c000c472 <Pipe::isAtty()>:
c000c472:	31 c0                	xor    eax,eax
c000c474:	c3                   	ret    
c000c475:	90                   	nop

c000c476 <Pipe::~Pipe()>:
c000c476:	83 ec 0c             	sub    esp,0xc
c000c479:	ba 60 04 02 c0       	mov    edx,0xc0020460
c000c47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c482:	89 10                	mov    DWORD PTR [eax],edx
c000c484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c488:	83 ec 0c             	sub    esp,0xc
c000c48b:	50                   	push   eax
c000c48c:	e8 37 16 00 00       	call   c000dac8 <UnixFile::~UnixFile()>
c000c491:	83 c4 10             	add    esp,0x10
c000c494:	90                   	nop
c000c495:	83 c4 0c             	add    esp,0xc
c000c498:	c3                   	ret    
c000c499:	90                   	nop

c000c49a <Pipe::~Pipe()>:
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	83 ec 0c             	sub    esp,0xc
c000c4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a4:	e8 cd ff ff ff       	call   c000c476 <Pipe::~Pipe()>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	83 ec 08             	sub    esp,0x8
c000c4af:	6a 20                	push   0x20
c000c4b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b5:	e8 09 2a 00 00       	call   c000eec3 <operator delete(void*, unsigned long)>
c000c4ba:	83 c4 10             	add    esp,0x10
c000c4bd:	83 c4 0c             	add    esp,0xc
c000c4c0:	c3                   	ret    
c000c4c1:	90                   	nop

c000c4c2 <Pipe::read(unsigned long long, void*, int*)>:
c000c4c2:	55                   	push   ebp
c000c4c3:	57                   	push   edi
c000c4c4:	56                   	push   esi
c000c4c5:	53                   	push   ebx
c000c4c6:	83 ec 1c             	sub    esp,0x1c
c000c4c9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c4cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4d5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c4d8:	89 c8                	mov    eax,ecx
c000c4da:	99                   	cdq    
c000c4db:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c4df:	74 19                	je     c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e1:	39 f9                	cmp    ecx,edi
c000c4e3:	89 d1                	mov    ecx,edx
c000c4e5:	19 f1                	sbb    ecx,esi
c000c4e7:	73 11                	jae    c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e9:	e8 68 b6 00 00       	call   c0017b56 <lockScheduler()>
c000c4ee:	e8 97 b9 00 00       	call   c0017e8a <schedule()>
c000c4f3:	e8 60 b6 00 00       	call   c0017b58 <unlockScheduler()>
c000c4f8:	eb db                	jmp    c000c4d5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c4fa:	39 f8                	cmp    eax,edi
c000c4fc:	89 d1                	mov    ecx,edx
c000c4fe:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c502:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c506:	19 f1                	sbb    ecx,esi
c000c508:	73 08                	jae    c000c512 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c50a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c50e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c512:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c515:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c518:	29 c6                	sub    esi,eax
c000c51a:	89 f1                	mov    ecx,esi
c000c51c:	c1 f9 1f             	sar    ecx,0x1f
c000c51f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c523:	89 ca                	mov    edx,ecx
c000c525:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c529:	19 d1                	sbb    ecx,edx
c000c52b:	73 04                	jae    c000c531 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c52d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c531:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c535:	89 fd                	mov    ebp,edi
c000c537:	29 f5                	sub    ebp,esi
c000c539:	85 f6                	test   esi,esi
c000c53b:	74 12                	je     c000c54f <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c53d:	52                   	push   edx
c000c53e:	56                   	push   esi
c000c53f:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c542:	50                   	push   eax
c000c543:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c547:	e8 86 40 ff ff       	call   c00005d2 <memcpy>
c000c54c:	83 c4 10             	add    esp,0x10
c000c54f:	85 ed                	test   ebp,ebp
c000c551:	74 12                	je     c000c565 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c553:	50                   	push   eax
c000c554:	55                   	push   ebp
c000c555:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c558:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c55c:	56                   	push   esi
c000c55d:	e8 70 40 ff ff       	call   c00005d2 <memcpy>
c000c562:	83 c4 10             	add    esp,0x10
c000c565:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c56b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c56e:	99                   	cdq    
c000c56f:	89 f7                	mov    edi,esi
c000c571:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c575:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c579:	c1 ff 1f             	sar    edi,0x1f
c000c57c:	57                   	push   edi
c000c57d:	56                   	push   esi
c000c57e:	52                   	push   edx
c000c57f:	50                   	push   eax
c000c580:	e8 67 22 01 00       	call   c001e7ec <__umoddi3>
c000c585:	83 c4 10             	add    esp,0x10
c000c588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c58b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c590:	75 10                	jne    c000c5a2 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c592:	83 ec 0c             	sub    esp,0xc
c000c595:	68 1d 04 02 c0       	push   0xc002041d
c000c59a:	e8 99 86 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c5aa:	89 10                	mov    DWORD PTR [eax],edx
c000c5ac:	83 c4 1c             	add    esp,0x1c
c000c5af:	31 c0                	xor    eax,eax
c000c5b1:	5b                   	pop    ebx
c000c5b2:	5e                   	pop    esi
c000c5b3:	5f                   	pop    edi
c000c5b4:	5d                   	pop    ebp
c000c5b5:	c3                   	ret    

c000c5b6 <Pipe::write(unsigned long long, void*, int*)>:
c000c5b6:	55                   	push   ebp
c000c5b7:	57                   	push   edi
c000c5b8:	56                   	push   esi
c000c5b9:	53                   	push   ebx
c000c5ba:	83 ec 1c             	sub    esp,0x1c
c000c5bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5c1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c5c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5cc:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c5cf:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c5d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d6:	89 de                	mov    esi,ebx
c000c5d8:	89 df                	mov    edi,ebx
c000c5da:	c1 ff 1f             	sar    edi,0x1f
c000c5dd:	01 c6                	add    esi,eax
c000c5df:	89 c8                	mov    eax,ecx
c000c5e1:	11 d7                	adc    edi,edx
c000c5e3:	99                   	cdq    
c000c5e4:	39 f1                	cmp    ecx,esi
c000c5e6:	89 d0                	mov    eax,edx
c000c5e8:	19 f8                	sbb    eax,edi
c000c5ea:	b8 01 00 00 00       	mov    eax,0x1
c000c5ef:	0f 82 80 00 00 00    	jb     c000c675 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c5f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c5f8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c5fb:	01 d8                	add    eax,ebx
c000c5fd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c601:	99                   	cdq    
c000c602:	f7 f9                	idiv   ecx
c000c604:	29 d1                	sub    ecx,edx
c000c606:	89 d7                	mov    edi,edx
c000c608:	89 c8                	mov    eax,ecx
c000c60a:	99                   	cdq    
c000c60b:	39 ce                	cmp    esi,ecx
c000c60d:	19 d3                	sbb    ebx,edx
c000c60f:	bb 00 00 00 00       	mov    ebx,0x0
c000c614:	72 04                	jb     c000c61a <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c616:	89 f3                	mov    ebx,esi
c000c618:	29 cb                	sub    ebx,ecx
c000c61a:	89 f1                	mov    ecx,esi
c000c61c:	29 d9                	sub    ecx,ebx
c000c61e:	74 1a                	je     c000c63a <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c620:	52                   	push   edx
c000c621:	51                   	push   ecx
c000c622:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c626:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c62a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c62d:	57                   	push   edi
c000c62e:	e8 9f 3f ff ff       	call   c00005d2 <memcpy>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c63a:	85 db                	test   ebx,ebx
c000c63c:	74 12                	je     c000c650 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c63e:	50                   	push   eax
c000c63f:	53                   	push   ebx
c000c640:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c644:	51                   	push   ecx
c000c645:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c648:	e8 85 3f ff ff       	call   c00005d2 <memcpy>
c000c64d:	83 c4 10             	add    esp,0x10
c000c650:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c653:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c658:	75 10                	jne    c000c66a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c65a:	83 ec 0c             	sub    esp,0xc
c000c65d:	68 39 04 02 c0       	push   0xc0020439
c000c662:	e8 d1 85 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000c667:	83 c4 10             	add    esp,0x10
c000c66a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c66e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c671:	89 38                	mov    DWORD PTR [eax],edi
c000c673:	31 c0                	xor    eax,eax
c000c675:	83 c4 1c             	add    esp,0x1c
c000c678:	5b                   	pop    ebx
c000c679:	5e                   	pop    esi
c000c67a:	5f                   	pop    edi
c000c67b:	5d                   	pop    ebp
c000c67c:	c3                   	ret    
c000c67d:	90                   	nop

c000c67e <Pipe::Pipe(int)>:
c000c67e:	83 ec 0c             	sub    esp,0xc
c000c681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c685:	83 ec 08             	sub    esp,0x8
c000c688:	6a 00                	push   0x0
c000c68a:	50                   	push   eax
c000c68b:	e8 a0 12 00 00       	call   c000d930 <UnixFile::UnixFile(int)>
c000c690:	83 c4 10             	add    esp,0x10
c000c693:	ba 60 04 02 c0       	mov    edx,0xc0020460
c000c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c69c:	89 10                	mov    DWORD PTR [eax],edx
c000c69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ad:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6b8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c6bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6c3:	83 ec 0c             	sub    esp,0xc
c000c6c6:	50                   	push   eax
c000c6c7:	e8 52 f5 ff ff       	call   c000bc1e <malloc>
c000c6cc:	83 c4 10             	add    esp,0x10
c000c6cf:	89 c2                	mov    edx,eax
c000c6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6dc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c6e0:	90                   	nop
c000c6e1:	83 c4 0c             	add    esp,0xc
c000c6e4:	c3                   	ret    
c000c6e5:	90                   	nop

c000c6e6 <VgaText::isAtty()>:
c000c6e6:	b0 01                	mov    al,0x1
c000c6e8:	c3                   	ret    
c000c6e9:	90                   	nop

c000c6ea <VgaText::~VgaText()>:
c000c6ea:	83 ec 0c             	sub    esp,0xc
c000c6ed:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c000c6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6f6:	89 10                	mov    DWORD PTR [eax],edx
c000c6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6fc:	83 ec 0c             	sub    esp,0xc
c000c6ff:	50                   	push   eax
c000c700:	e8 c3 13 00 00       	call   c000dac8 <UnixFile::~UnixFile()>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	90                   	nop
c000c709:	83 c4 0c             	add    esp,0xc
c000c70c:	c3                   	ret    
c000c70d:	90                   	nop

c000c70e <VgaText::~VgaText()>:
c000c70e:	83 ec 0c             	sub    esp,0xc
c000c711:	83 ec 0c             	sub    esp,0xc
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	e8 cd ff ff ff       	call   c000c6ea <VgaText::~VgaText()>
c000c71d:	83 c4 10             	add    esp,0x10
c000c720:	83 ec 08             	sub    esp,0x8
c000c723:	68 60 12 00 00       	push   0x1260
c000c728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c72c:	e8 92 27 00 00       	call   c000eec3 <operator delete(void*, unsigned long)>
c000c731:	83 c4 10             	add    esp,0x10
c000c734:	83 c4 0c             	add    esp,0xc
c000c737:	c3                   	ret    

c000c738 <VgaText::read(unsigned long long, void*, int*)>:
c000c738:	83 ec 10             	sub    esp,0x10
c000c73b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c747:	e8 98 53 00 00       	call   c0011ae4 <readKeyboard(VgaText*, char*, unsigned long)>
c000c74c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c750:	89 02                	mov    DWORD PTR [edx],eax
c000c752:	31 c0                	xor    eax,eax
c000c754:	83 c4 1c             	add    esp,0x1c
c000c757:	c3                   	ret    

c000c758 <setTerminalScrollLock(bool)>:
c000c758:	c3                   	ret    

c000c759 <addToTerminalCycle(VgaText*)>:
c000c759:	8b 15 00 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023700
c000c75f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c763:	85 d2                	test   edx,edx
c000c765:	75 0c                	jne    c000c773 <addToTerminalCycle(VgaText*)+0x1a>
c000c767:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c76d:	a3 00 37 02 c0       	mov    ds:0xc0023700,eax
c000c772:	c3                   	ret    
c000c773:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c779:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c77f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c785:	c3                   	ret    

c000c786 <installVgaTextImplementation()>:
c000c786:	83 ec 10             	sub    esp,0x10
c000c789:	6a 20                	push   0x20
c000c78b:	6a 00                	push   0x0
c000c78d:	68 e0 36 02 c0       	push   0xc00236e0
c000c792:	e8 71 3e ff ff       	call   c0000608 <memset>
c000c797:	83 c4 1c             	add    esp,0x1c
c000c79a:	c3                   	ret    

c000c79b <scrollTerminalScrollLock(int)>:
c000c79b:	c3                   	ret    

c000c79c <VgaText::load()>:
c000c79c:	53                   	push   ebx
c000c79d:	31 c0                	xor    eax,eax
c000c79f:	83 ec 58             	sub    esp,0x58
c000c7a2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c7a6:	89 e2                	mov    edx,esp
c000c7a8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c7ac:	40                   	inc    eax
c000c7ad:	83 f8 50             	cmp    eax,0x50
c000c7b0:	75 f6                	jne    c000c7a8 <VgaText::load()+0xc>
c000c7b2:	31 c0                	xor    eax,eax
c000c7b4:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c7bb:	84 c9                	test   cl,cl
c000c7bd:	74 06                	je     c000c7c5 <VgaText::load()+0x29>
c000c7bf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c7c2:	40                   	inc    eax
c000c7c3:	eb ef                	jmp    c000c7b4 <VgaText::load()+0x18>
c000c7c5:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c7cb:	85 c0                	test   eax,eax
c000c7cd:	74 09                	je     c000c7d8 <VgaText::load()+0x3c>
c000c7cf:	51                   	push   ecx
c000c7d0:	51                   	push   ecx
c000c7d1:	52                   	push   edx
c000c7d2:	53                   	push   ebx
c000c7d3:	ff d0                	call   eax
c000c7d5:	83 c4 10             	add    esp,0x10
c000c7d8:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c7de:	85 c0                	test   eax,eax
c000c7e0:	74 09                	je     c000c7eb <VgaText::load()+0x4f>
c000c7e2:	83 ec 0c             	sub    esp,0xc
c000c7e5:	53                   	push   ebx
c000c7e6:	ff d0                	call   eax
c000c7e8:	83 c4 10             	add    esp,0x10
c000c7eb:	83 c4 58             	add    esp,0x58
c000c7ee:	5b                   	pop    ebx
c000c7ef:	c3                   	ret    

c000c7f0 <VgaText::updateCursor()>:
c000c7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7f4:	39 05 04 37 02 c0    	cmp    DWORD PTR ds:0xc0023704,eax
c000c7fa:	75 0c                	jne    c000c808 <VgaText::updateCursor()+0x18>
c000c7fc:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c802:	85 c0                	test   eax,eax
c000c804:	74 02                	je     c000c808 <VgaText::updateCursor()+0x18>
c000c806:	ff e0                	jmp    eax
c000c808:	c3                   	ret    
c000c809:	90                   	nop

c000c80a <VgaText::showCursor(bool)>:
c000c80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c80e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c812:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c818:	c3                   	ret    
c000c819:	90                   	nop

c000c81a <VgaText::disableBlink(bool)>:
c000c81a:	56                   	push   esi
c000c81b:	53                   	push   ebx
c000c81c:	51                   	push   ecx
c000c81d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c821:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c825:	39 1d 04 37 02 c0    	cmp    DWORD PTR ds:0xc0023704,ebx
c000c82b:	75 18                	jne    c000c845 <VgaText::disableBlink(bool)+0x2b>
c000c82d:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c833:	85 c0                	test   eax,eax
c000c835:	74 0e                	je     c000c845 <VgaText::disableBlink(bool)+0x2b>
c000c837:	89 f1                	mov    ecx,esi
c000c839:	52                   	push   edx
c000c83a:	52                   	push   edx
c000c83b:	0f b6 d1             	movzx  edx,cl
c000c83e:	52                   	push   edx
c000c83f:	53                   	push   ebx
c000c840:	ff d0                	call   eax
c000c842:	83 c4 10             	add    esp,0x10
c000c845:	89 f0                	mov    eax,esi
c000c847:	83 f0 01             	xor    eax,0x1
c000c84a:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c850:	58                   	pop    eax
c000c851:	5b                   	pop    ebx
c000c852:	5e                   	pop    esi
c000c853:	c3                   	ret    

c000c854 <VgaText::doANSI_SGR(int)>:
c000c854:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c85c:	85 d2                	test   edx,edx
c000c85e:	75 14                	jne    c000c874 <VgaText::doANSI_SGR(int)+0x20>
c000c860:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c866:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c86c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c872:	eb 65                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c874:	83 fa 07             	cmp    edx,0x7
c000c877:	75 14                	jne    c000c88d <VgaText::doANSI_SGR(int)+0x39>
c000c879:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c87f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c885:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c88b:	eb 4c                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c88d:	83 fa 1b             	cmp    edx,0x1b
c000c890:	74 ce                	je     c000c860 <VgaText::doANSI_SGR(int)+0xc>
c000c892:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c895:	83 f9 07             	cmp    ecx,0x7
c000c898:	77 09                	ja     c000c8a3 <VgaText::doANSI_SGR(int)+0x4f>
c000c89a:	8b 14 8d a0 2a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd560]
c000c8a1:	eb 20                	jmp    c000c8c3 <VgaText::doANSI_SGR(int)+0x6f>
c000c8a3:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c8a6:	83 f9 07             	cmp    ecx,0x7
c000c8a9:	77 09                	ja     c000c8b4 <VgaText::doANSI_SGR(int)+0x60>
c000c8ab:	8b 14 8d a0 2a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd560]
c000c8b2:	eb 25                	jmp    c000c8d9 <VgaText::doANSI_SGR(int)+0x85>
c000c8b4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c8b7:	83 f9 07             	cmp    ecx,0x7
c000c8ba:	77 0e                	ja     c000c8ca <VgaText::doANSI_SGR(int)+0x76>
c000c8bc:	8b 14 95 58 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd6a8]
c000c8c3:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8c9:	c3                   	ret    
c000c8ca:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c8cd:	83 f9 07             	cmp    ecx,0x7
c000c8d0:	77 0d                	ja     c000c8df <VgaText::doANSI_SGR(int)+0x8b>
c000c8d2:	8b 14 95 30 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd6d0]
c000c8d9:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8df:	c3                   	ret    

c000c8e0 <VgaText::setDefaultBgColour(VgaColour)>:
c000c8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8e8:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c8ee:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <VgaText::setDefaultFgColour(VgaColour)>:
c000c8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8fe:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c904:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c90c:	53                   	push   ebx
c000c90d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c911:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c915:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c919:	51                   	push   ecx
c000c91a:	e8 c1 ff ff ff       	call   c000c8e0 <VgaText::setDefaultBgColour(VgaColour)>
c000c91f:	58                   	pop    eax
c000c920:	5a                   	pop    edx
c000c921:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c925:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c929:	5b                   	pop    ebx
c000c92a:	eb ca                	jmp    c000c8f6 <VgaText::setDefaultFgColour(VgaColour)>

c000c92c <VgaText::combineColours(unsigned char, unsigned char)>:
c000c92c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c930:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c935:	83 e0 0f             	and    eax,0xf
c000c938:	c1 e2 04             	shl    edx,0x4
c000c93b:	09 d0                	or     eax,edx
c000c93d:	c3                   	ret    

c000c93e <VgaText::scrollScreen()>:
c000c93e:	57                   	push   edi
c000c93f:	56                   	push   esi
c000c940:	be 01 00 00 00       	mov    esi,0x1
c000c945:	53                   	push   ebx
c000c946:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c94a:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c950:	31 ff                	xor    edi,edi
c000c952:	01 d9                	add    ecx,ebx
c000c954:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c957:	83 fe 17             	cmp    esi,0x17
c000c95a:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c960:	75 28                	jne    c000c98a <VgaText::scrollScreen()+0x4c>
c000c962:	f7 c7 01 00 00 00    	test   edi,0x1
c000c968:	74 1c                	je     c000c986 <VgaText::scrollScreen()+0x48>
c000c96a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c971:	50                   	push   eax
c000c972:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c979:	50                   	push   eax
c000c97a:	e8 ad ff ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000c97f:	5a                   	pop    edx
c000c980:	5a                   	pop    edx
c000c981:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c984:	eb 04                	jmp    c000c98a <VgaText::scrollScreen()+0x4c>
c000c986:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000c98a:	47                   	inc    edi
c000c98b:	41                   	inc    ecx
c000c98c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000c992:	75 c0                	jne    c000c954 <VgaText::scrollScreen()+0x16>
c000c994:	46                   	inc    esi
c000c995:	83 fe 18             	cmp    esi,0x18
c000c998:	75 b0                	jne    c000c94a <VgaText::scrollScreen()+0xc>
c000c99a:	39 1d 04 37 02 c0    	cmp    DWORD PTR ds:0xc0023704,ebx
c000c9a0:	75 24                	jne    c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9a2:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000c9a9:	74 08                	je     c000c9b3 <VgaText::scrollScreen()+0x75>
c000c9ab:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000c9b1:	eb 13                	jmp    c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9b3:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000c9b9:	85 c0                	test   eax,eax
c000c9bb:	74 09                	je     c000c9c6 <VgaText::scrollScreen()+0x88>
c000c9bd:	83 ec 0c             	sub    esp,0xc
c000c9c0:	53                   	push   ebx
c000c9c1:	ff d0                	call   eax
c000c9c3:	83 c4 10             	add    esp,0x10
c000c9c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c9ca:	5b                   	pop    ebx
c000c9cb:	5e                   	pop    esi
c000c9cc:	5f                   	pop    edi
c000c9cd:	e9 1e fe ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>

c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>:
c000c9d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000c9d7:	c1 e0 08             	shl    eax,0x8
c000c9da:	89 c2                	mov    edx,eax
c000c9dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000c9e1:	09 d0                	or     eax,edx
c000c9e3:	c3                   	ret    

c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000c9e4:	53                   	push   ebx
c000c9e5:	83 ec 08             	sub    esp,0x8
c000c9e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9ec:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f1:	50                   	push   eax
c000c9f2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f7:	50                   	push   eax
c000c9f8:	e8 2f ff ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000c9fd:	5a                   	pop    edx
c000c9fe:	0f b6 c0             	movzx  eax,al
c000ca01:	5b                   	pop    ebx
c000ca02:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ca07:	50                   	push   eax
c000ca08:	53                   	push   ebx
c000ca09:	e8 c4 ff ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ca0e:	5a                   	pop    edx
c000ca0f:	5a                   	pop    edx
c000ca10:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca16:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca1a:	0f b7 d2             	movzx  edx,dx
c000ca1d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca22:	39 0d 04 37 02 c0    	cmp    DWORD PTR ds:0xc0023704,ecx
c000ca28:	75 14                	jne    c000ca3e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca2a:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ca30:	85 c0                	test   eax,eax
c000ca32:	74 0a                	je     c000ca3e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca34:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca38:	83 c4 08             	add    esp,0x8
c000ca3b:	5b                   	pop    ebx
c000ca3c:	ff e0                	jmp    eax
c000ca3e:	83 c4 08             	add    esp,0x8
c000ca41:	5b                   	pop    ebx
c000ca42:	c3                   	ret    
c000ca43:	90                   	nop

c000ca44 <VgaText::getCursorX()>:
c000ca44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca48:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ca4e:	c3                   	ret    
c000ca4f:	90                   	nop

c000ca50 <VgaText::getCursorY()>:
c000ca50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca54:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ca5a:	c3                   	ret    
c000ca5b:	90                   	nop

c000ca5c <VgaText::setCursor(int, int)>:
c000ca5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca64:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ca6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca6e:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ca74:	e9 77 fd ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000ca79:	90                   	nop

c000ca7a <VgaText::setCursorX(int)>:
c000ca7a:	83 ec 10             	sub    esp,0x10
c000ca7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca81:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	50                   	push   eax
c000ca8c:	e8 cb ff ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000ca91:	83 c4 1c             	add    esp,0x1c
c000ca94:	c3                   	ret    
c000ca95:	90                   	nop

c000ca96 <VgaText::setCursorY(int)>:
c000ca96:	83 ec 10             	sub    esp,0x10
c000ca99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000caa1:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000caa7:	50                   	push   eax
c000caa8:	e8 af ff ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000caad:	83 c4 1c             	add    esp,0x1c
c000cab0:	c3                   	ret    
c000cab1:	90                   	nop

c000cab2 <VgaText::incrementCursor(bool)>:
c000cab2:	56                   	push   esi
c000cab3:	53                   	push   ebx
c000cab4:	51                   	push   ecx
c000cab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cab9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cabd:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cac3:	40                   	inc    eax
c000cac4:	83 f8 50             	cmp    eax,0x50
c000cac7:	74 08                	je     c000cad1 <VgaText::incrementCursor(bool)+0x1f>
c000cac9:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cacf:	eb 33                	jmp    c000cb04 <VgaText::incrementCursor(bool)+0x52>
c000cad1:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cad7:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cae1:	8d 50 01             	lea    edx,[eax+0x1]
c000cae4:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000caea:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000caf0:	75 12                	jne    c000cb04 <VgaText::incrementCursor(bool)+0x52>
c000caf2:	83 ec 0c             	sub    esp,0xc
c000caf5:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cafb:	53                   	push   ebx
c000cafc:	e8 3d fe ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000cb01:	83 c4 10             	add    esp,0x10
c000cb04:	89 f0                	mov    eax,esi
c000cb06:	84 c0                	test   al,al
c000cb08:	74 0c                	je     c000cb16 <VgaText::incrementCursor(bool)+0x64>
c000cb0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb0e:	5a                   	pop    edx
c000cb0f:	5b                   	pop    ebx
c000cb10:	5e                   	pop    esi
c000cb11:	e9 da fc ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000cb16:	58                   	pop    eax
c000cb17:	5b                   	pop    ebx
c000cb18:	5e                   	pop    esi
c000cb19:	c3                   	ret    

c000cb1a <VgaText::updateRAMUsageDisplay(int)>:
c000cb1a:	53                   	push   ebx
c000cb1b:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb20:	6a 0f                	push   0xf
c000cb22:	6a 00                	push   0x0
c000cb24:	e8 03 fe ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb29:	5a                   	pop    edx
c000cb2a:	59                   	pop    ecx
c000cb2b:	0f b6 c8             	movzx  ecx,al
c000cb2e:	51                   	push   ecx
c000cb2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb33:	99                   	cdq    
c000cb34:	f7 fb                	idiv   ebx
c000cb36:	89 d3                	mov    ebx,edx
c000cb38:	83 c0 30             	add    eax,0x30
c000cb3b:	83 c3 30             	add    ebx,0x30
c000cb3e:	0f be c0             	movsx  eax,al
c000cb41:	0f b6 db             	movzx  ebx,bl
c000cb44:	50                   	push   eax
c000cb45:	e8 88 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb4a:	5a                   	pop    edx
c000cb4b:	5a                   	pop    edx
c000cb4c:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cb52:	51                   	push   ecx
c000cb53:	53                   	push   ebx
c000cb54:	e8 79 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb59:	5b                   	pop    ebx
c000cb5a:	5a                   	pop    edx
c000cb5b:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cb61:	51                   	push   ecx
c000cb62:	6a 25                	push   0x25
c000cb64:	e8 69 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb69:	59                   	pop    ecx
c000cb6a:	5b                   	pop    ebx
c000cb6b:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cb71:	5b                   	pop    ebx
c000cb72:	c3                   	ret    
c000cb73:	90                   	nop

c000cb74 <VgaText::updateDiskUsage()>:
c000cb74:	55                   	push   ebp
c000cb75:	bd 10 27 00 00       	mov    ebp,0x2710
c000cb7a:	57                   	push   edi
c000cb7b:	56                   	push   esi
c000cb7c:	53                   	push   ebx
c000cb7d:	6a 0f                	push   0xf
c000cb7f:	6a 00                	push   0x0
c000cb81:	e8 a6 fd ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cb86:	5a                   	pop    edx
c000cb87:	0f b6 d8             	movzx  ebx,al
c000cb8a:	59                   	pop    ecx
c000cb8b:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000cb90:	53                   	push   ebx
c000cb91:	b9 0a 00 00 00       	mov    ecx,0xa
c000cb96:	99                   	cdq    
c000cb97:	f7 fd                	idiv   ebp
c000cb99:	99                   	cdq    
c000cb9a:	f7 f9                	idiv   ecx
c000cb9c:	8d 42 30             	lea    eax,[edx+0x30]
c000cb9f:	0f b6 c0             	movzx  eax,al
c000cba2:	50                   	push   eax
c000cba3:	e8 2a fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cba8:	5e                   	pop    esi
c000cba9:	5f                   	pop    edi
c000cbaa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cbb0:	bf e8 03 00 00       	mov    edi,0x3e8
c000cbb5:	53                   	push   ebx
c000cbb6:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000cbbb:	99                   	cdq    
c000cbbc:	f7 ff                	idiv   edi
c000cbbe:	99                   	cdq    
c000cbbf:	f7 f9                	idiv   ecx
c000cbc1:	8d 42 30             	lea    eax,[edx+0x30]
c000cbc4:	0f b6 c0             	movzx  eax,al
c000cbc7:	50                   	push   eax
c000cbc8:	e8 05 fe ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbcd:	5a                   	pop    edx
c000cbce:	5e                   	pop    esi
c000cbcf:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cbd5:	be 64 00 00 00       	mov    esi,0x64
c000cbda:	53                   	push   ebx
c000cbdb:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000cbe0:	99                   	cdq    
c000cbe1:	f7 fe                	idiv   esi
c000cbe3:	99                   	cdq    
c000cbe4:	f7 f9                	idiv   ecx
c000cbe6:	8d 42 30             	lea    eax,[edx+0x30]
c000cbe9:	0f b6 c0             	movzx  eax,al
c000cbec:	50                   	push   eax
c000cbed:	e8 e0 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbf2:	5a                   	pop    edx
c000cbf3:	5a                   	pop    edx
c000cbf4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cbfa:	53                   	push   ebx
c000cbfb:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000cc00:	99                   	cdq    
c000cc01:	f7 f9                	idiv   ecx
c000cc03:	99                   	cdq    
c000cc04:	f7 f9                	idiv   ecx
c000cc06:	8d 42 30             	lea    eax,[edx+0x30]
c000cc09:	0f b6 c0             	movzx  eax,al
c000cc0c:	50                   	push   eax
c000cc0d:	e8 c0 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc12:	5a                   	pop    edx
c000cc13:	5a                   	pop    edx
c000cc14:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc1a:	53                   	push   ebx
c000cc1b:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000cc20:	99                   	cdq    
c000cc21:	f7 f9                	idiv   ecx
c000cc23:	8d 42 30             	lea    eax,[edx+0x30]
c000cc26:	0f b6 c0             	movzx  eax,al
c000cc29:	50                   	push   eax
c000cc2a:	e8 a3 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc2f:	5a                   	pop    edx
c000cc30:	5a                   	pop    edx
c000cc31:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cc37:	53                   	push   ebx
c000cc38:	a1 e0 53 02 c0       	mov    eax,ds:0xc00253e0
c000cc3d:	99                   	cdq    
c000cc3e:	f7 fd                	idiv   ebp
c000cc40:	99                   	cdq    
c000cc41:	f7 f9                	idiv   ecx
c000cc43:	8d 42 30             	lea    eax,[edx+0x30]
c000cc46:	0f b6 c0             	movzx  eax,al
c000cc49:	50                   	push   eax
c000cc4a:	e8 83 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc4f:	5d                   	pop    ebp
c000cc50:	5a                   	pop    edx
c000cc51:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cc57:	53                   	push   ebx
c000cc58:	a1 e0 53 02 c0       	mov    eax,ds:0xc00253e0
c000cc5d:	99                   	cdq    
c000cc5e:	f7 ff                	idiv   edi
c000cc60:	99                   	cdq    
c000cc61:	f7 f9                	idiv   ecx
c000cc63:	8d 42 30             	lea    eax,[edx+0x30]
c000cc66:	0f b6 c0             	movzx  eax,al
c000cc69:	50                   	push   eax
c000cc6a:	e8 63 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc6f:	5f                   	pop    edi
c000cc70:	5d                   	pop    ebp
c000cc71:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000cc77:	53                   	push   ebx
c000cc78:	a1 e0 53 02 c0       	mov    eax,ds:0xc00253e0
c000cc7d:	99                   	cdq    
c000cc7e:	f7 fe                	idiv   esi
c000cc80:	99                   	cdq    
c000cc81:	f7 f9                	idiv   ecx
c000cc83:	8d 42 30             	lea    eax,[edx+0x30]
c000cc86:	0f b6 c0             	movzx  eax,al
c000cc89:	50                   	push   eax
c000cc8a:	e8 43 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc8f:	5a                   	pop    edx
c000cc90:	5e                   	pop    esi
c000cc91:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cc97:	53                   	push   ebx
c000cc98:	a1 e0 53 02 c0       	mov    eax,ds:0xc00253e0
c000cc9d:	99                   	cdq    
c000cc9e:	f7 f9                	idiv   ecx
c000cca0:	99                   	cdq    
c000cca1:	f7 f9                	idiv   ecx
c000cca3:	8d 42 30             	lea    eax,[edx+0x30]
c000cca6:	0f b6 c0             	movzx  eax,al
c000cca9:	50                   	push   eax
c000ccaa:	e8 23 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccaf:	5f                   	pop    edi
c000ccb0:	5d                   	pop    ebp
c000ccb1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000ccb7:	53                   	push   ebx
c000ccb8:	a1 e0 53 02 c0       	mov    eax,ds:0xc00253e0
c000ccbd:	99                   	cdq    
c000ccbe:	f7 f9                	idiv   ecx
c000ccc0:	83 c2 30             	add    edx,0x30
c000ccc3:	0f b6 d2             	movzx  edx,dl
c000ccc6:	52                   	push   edx
c000ccc7:	e8 06 fd ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000cccc:	5a                   	pop    edx
c000cccd:	59                   	pop    ecx
c000ccce:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000ccd4:	5b                   	pop    ebx
c000ccd5:	5e                   	pop    esi
c000ccd6:	5f                   	pop    edi
c000ccd7:	5d                   	pop    ebp
c000ccd8:	c3                   	ret    
c000ccd9:	90                   	nop

c000ccda <VgaText::updateTitle()>:
c000ccda:	53                   	push   ebx
c000ccdb:	31 c0                	xor    eax,eax
c000ccdd:	83 ec 58             	sub    esp,0x58
c000cce0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000cce4:	89 e1                	mov    ecx,esp
c000cce6:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ccea:	40                   	inc    eax
c000cceb:	83 f8 50             	cmp    eax,0x50
c000ccee:	75 f6                	jne    c000cce6 <VgaText::updateTitle()+0xc>
c000ccf0:	31 c0                	xor    eax,eax
c000ccf2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000ccf9:	84 db                	test   bl,bl
c000ccfb:	74 06                	je     c000cd03 <VgaText::updateTitle()+0x29>
c000ccfd:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000cd00:	40                   	inc    eax
c000cd01:	eb ef                	jmp    c000ccf2 <VgaText::updateTitle()+0x18>
c000cd03:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000cd09:	85 c0                	test   eax,eax
c000cd0b:	74 09                	je     c000cd16 <VgaText::updateTitle()+0x3c>
c000cd0d:	53                   	push   ebx
c000cd0e:	53                   	push   ebx
c000cd0f:	51                   	push   ecx
c000cd10:	52                   	push   edx
c000cd11:	ff d0                	call   eax
c000cd13:	83 c4 10             	add    esp,0x10
c000cd16:	e8 59 fe ff ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c000cd1b:	83 c4 58             	add    esp,0x58
c000cd1e:	5b                   	pop    ebx
c000cd1f:	c3                   	ret    

c000cd20 <VgaText::setTitleTextColour(VgaColour)>:
c000cd20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd28:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cd2e:	eb aa                	jmp    c000ccda <VgaText::updateTitle()>

c000cd30 <VgaText::setTitleColour(VgaColour)>:
c000cd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd38:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cd3e:	eb 9a                	jmp    c000ccda <VgaText::updateTitle()>

c000cd40 <VgaText::setTitle(char*)>:
c000cd40:	53                   	push   ebx
c000cd41:	83 ec 10             	sub    esp,0x10
c000cd44:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cd52:	50                   	push   eax
c000cd53:	e8 4f 39 ff ff       	call   c00006a7 <strcpy>
c000cd58:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cd5c:	83 c4 18             	add    esp,0x18
c000cd5f:	5b                   	pop    ebx
c000cd60:	e9 75 ff ff ff       	jmp    c000ccda <VgaText::updateTitle()>
c000cd65:	90                   	nop

c000cd66 <VgaText::decrementCursor(bool)>:
c000cd66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd6e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cd74:	85 c0                	test   eax,eax
c000cd76:	74 07                	je     c000cd7f <VgaText::decrementCursor(bool)+0x19>
c000cd78:	48                   	dec    eax
c000cd79:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cd7f:	84 c9                	test   cl,cl
c000cd81:	74 09                	je     c000cd8c <VgaText::decrementCursor(bool)+0x26>
c000cd83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd87:	e9 64 fa ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000cd8c:	c3                   	ret    
c000cd8d:	90                   	nop

c000cd8e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000cd8e:	53                   	push   ebx
c000cd8f:	83 ec 08             	sub    esp,0x8
c000cd92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cd96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cda2:	3c 07                	cmp    al,0x7
c000cda4:	75 2a                	jne    c000cdd0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000cda6:	a1 ac 37 02 c0       	mov    eax,ds:0xc00237ac
c000cdab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cdb3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000cdbb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000cdc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdc7:	83 c4 08             	add    esp,0x8
c000cdca:	5b                   	pop    ebx
c000cdcb:	e9 be 2f 00 00       	jmp    c000fd8e <Buzzer::beep(int, int, bool)>
c000cdd0:	3c 0d                	cmp    al,0xd
c000cdd2:	75 0c                	jne    c000cde0 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000cdd4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdde:	eb 3b                	jmp    c000ce1b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000cde0:	3c 0a                	cmp    al,0xa
c000cde2:	75 40                	jne    c000ce24 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000cde4:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cdea:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdf4:	8d 50 01             	lea    edx,[eax+0x1]
c000cdf7:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cdfd:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ce03:	75 12                	jne    c000ce17 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000ce05:	83 ec 0c             	sub    esp,0xc
c000ce08:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce0e:	53                   	push   ebx
c000ce0f:	e8 2a fb ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000ce14:	83 c4 10             	add    esp,0x10
c000ce17:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce1b:	83 c4 08             	add    esp,0x8
c000ce1e:	5b                   	pop    ebx
c000ce1f:	e9 cc f9 ff ff       	jmp    c000c7f0 <VgaText::updateCursor()>
c000ce24:	3c 08                	cmp    al,0x8
c000ce26:	75 31                	jne    c000ce59 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ce28:	50                   	push   eax
c000ce29:	50                   	push   eax
c000ce2a:	6a 01                	push   0x1
c000ce2c:	53                   	push   ebx
c000ce2d:	e8 34 ff ff ff       	call   c000cd66 <VgaText::decrementCursor(bool)>
c000ce32:	5a                   	pop    edx
c000ce33:	59                   	pop    ecx
c000ce34:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce3a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce40:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000ce46:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ce4c:	6a 20                	push   0x20
c000ce4e:	53                   	push   ebx
c000ce4f:	e8 90 fb ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce54:	83 c4 28             	add    esp,0x28
c000ce57:	5b                   	pop    ebx
c000ce58:	c3                   	ret    
c000ce59:	83 ec 08             	sub    esp,0x8
c000ce5c:	0f be c0             	movsx  eax,al
c000ce5f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce65:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce6b:	51                   	push   ecx
c000ce6c:	52                   	push   edx
c000ce6d:	50                   	push   eax
c000ce6e:	53                   	push   ebx
c000ce6f:	e8 70 fb ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce74:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ce78:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ce80:	83 c4 28             	add    esp,0x28
c000ce83:	5b                   	pop    ebx
c000ce84:	e9 29 fc ff ff       	jmp    c000cab2 <VgaText::incrementCursor(bool)>
c000ce89:	90                   	nop

c000ce8a <VgaText::isShowingCursor()>:
c000ce8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce8e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000ce94:	c3                   	ret    
c000ce95:	90                   	nop

c000ce96 <VgaText::isBlinkDisabled()>:
c000ce96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce9a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000cea0:	83 f0 01             	xor    eax,0x1
c000cea3:	c3                   	ret    

c000cea4 <VgaText::setCursorHeight(int)>:
c000cea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cea8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ceac:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000ceb2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000ceb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cebd:	e9 48 f9 ff ff       	jmp    c000c80a <VgaText::showCursor(bool)>

c000cec2 <VgaText::getCursorHeight()>:
c000cec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cecc:	c3                   	ret    

c000cecd <setActiveTerminal(VgaText*)>:
c000cecd:	53                   	push   ebx
c000cece:	83 ec 08             	sub    esp,0x8
c000ced1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	75 11                	jne    c000ceea <setActiveTerminal(VgaText*)+0x1d>
c000ced9:	c7 44 24 10 74 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020474
c000cee1:	83 c4 08             	add    esp,0x8
c000cee4:	5b                   	pop    ebx
c000cee5:	e9 4e 7d 00 00       	jmp    c0014c38 <Krnl::panic(char const*)>
c000ceea:	50                   	push   eax
c000ceeb:	50                   	push   eax
c000ceec:	53                   	push   ebx
c000ceed:	68 82 04 02 c0       	push   0xc0020482
c000cef2:	e8 ac 20 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000cef7:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	85 c0                	test   eax,eax
c000cf01:	74 0c                	je     c000cf0f <setActiveTerminal(VgaText*)+0x42>
c000cf03:	83 ec 0c             	sub    esp,0xc
c000cf06:	50                   	push   eax
c000cf07:	e8 e4 f8 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	89 1d 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,ebx
c000cf15:	51                   	push   ecx
c000cf16:	51                   	push   ecx
c000cf17:	53                   	push   ebx
c000cf18:	68 9a 04 02 c0       	push   0xc002049a
c000cf1d:	e8 81 20 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000cf22:	83 c4 0c             	add    esp,0xc
c000cf25:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cf2b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cf31:	53                   	push   ebx
c000cf32:	e8 25 fb ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000cf37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf3a:	e8 57 ff ff ff       	call   c000ce96 <VgaText::isBlinkDisabled()>
c000cf3f:	5a                   	pop    edx
c000cf40:	0f b6 c0             	movzx  eax,al
c000cf43:	59                   	pop    ecx
c000cf44:	50                   	push   eax
c000cf45:	53                   	push   ebx
c000cf46:	e8 cf f8 ff ff       	call   c000c81a <VgaText::disableBlink(bool)>
c000cf4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf4e:	e8 6f ff ff ff       	call   c000cec2 <VgaText::getCursorHeight()>
c000cf53:	5a                   	pop    edx
c000cf54:	59                   	pop    ecx
c000cf55:	50                   	push   eax
c000cf56:	53                   	push   ebx
c000cf57:	e8 48 ff ff ff       	call   c000cea4 <VgaText::setCursorHeight(int)>
c000cf5c:	83 c4 10             	add    esp,0x10
c000cf5f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cf66:	75 0a                	jne    c000cf72 <setActiveTerminal(VgaText*)+0xa5>
c000cf68:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cf72:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf76:	83 c4 08             	add    esp,0x8
c000cf79:	5b                   	pop    ebx
c000cf7a:	e9 1d f8 ff ff       	jmp    c000c79c <VgaText::load()>

c000cf7f <doTerminalCycle()>:
c000cf7f:	83 ec 18             	sub    esp,0x18
c000cf82:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c000cf87:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000cf8d:	50                   	push   eax
c000cf8e:	a3 00 37 02 c0       	mov    ds:0xc0023700,eax
c000cf93:	e8 35 ff ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c000cf98:	83 c4 1c             	add    esp,0x1c
c000cf9b:	c3                   	ret    

c000cf9c <VgaText::doUpdate()>:
c000cf9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfa0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000cfa6:	85 c0                	test   eax,eax
c000cfa8:	74 02                	je     c000cfac <VgaText::doUpdate()+0x10>
c000cfaa:	ff e0                	jmp    eax
c000cfac:	c3                   	ret    
c000cfad:	90                   	nop

c000cfae <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000cfae:	55                   	push   ebp
c000cfaf:	57                   	push   edi
c000cfb0:	56                   	push   esi
c000cfb1:	53                   	push   ebx
c000cfb2:	83 ec 1c             	sub    esp,0x1c
c000cfb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cfb9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfbe:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000cfc5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000cfc8:	50                   	push   eax
c000cfc9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfce:	50                   	push   eax
c000cfcf:	e8 58 f9 ff ff       	call   c000c92c <VgaText::combineColours(unsigned char, unsigned char)>
c000cfd4:	59                   	pop    ecx
c000cfd5:	0f b6 c0             	movzx  eax,al
c000cfd8:	5b                   	pop    ebx
c000cfd9:	31 c9                	xor    ecx,ecx
c000cfdb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000cfe3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cfe7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000cfed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cff1:	0f b7 db             	movzx  ebx,bx
c000cff4:	01 db                	add    ebx,ebx
c000cff6:	01 fb                	add    ebx,edi
c000cff8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cffb:	84 c0                	test   al,al
c000cffd:	0f 84 38 01 00 00    	je     c000d13b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d003:	3c 0d                	cmp    al,0xd
c000d005:	75 0f                	jne    c000d016 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d007:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d011:	e9 1f 01 00 00       	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d016:	3c 0a                	cmp    al,0xa
c000d018:	75 5b                	jne    c000d075 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d01a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d020:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d02a:	8d 48 01             	lea    ecx,[eax+0x1]
c000d02d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d033:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d039:	75 12                	jne    c000d04d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d03b:	83 ec 0c             	sub    esp,0xc
c000d03e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d044:	55                   	push   ebp
c000d045:	e8 f4 f8 ff ff       	call   c000c93e <VgaText::scrollScreen()>
c000d04a:	83 c4 10             	add    esp,0x10
c000d04d:	83 ec 0c             	sub    esp,0xc
c000d050:	55                   	push   ebp
c000d051:	e8 9a f7 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000d056:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d05e:	83 c4 10             	add    esp,0x10
c000d061:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d067:	31 c9                	xor    ecx,ecx
c000d069:	0f b7 db             	movzx  ebx,bx
c000d06c:	01 db                	add    ebx,ebx
c000d06e:	01 fb                	add    ebx,edi
c000d070:	e9 c0 00 00 00       	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d075:	3c 08                	cmp    al,0x8
c000d077:	75 4e                	jne    c000d0c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d079:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d07d:	53                   	push   ebx
c000d07e:	53                   	push   ebx
c000d07f:	6a 01                	push   0x1
c000d081:	55                   	push   ebp
c000d082:	e8 df fc ff ff       	call   c000cd66 <VgaText::decrementCursor(bool)>
c000d087:	58                   	pop    eax
c000d088:	5a                   	pop    edx
c000d089:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d08f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d095:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d09b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d0a1:	6a 20                	push   0x20
c000d0a3:	55                   	push   ebp
c000d0a4:	e8 3b f9 ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d0a9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0b1:	83 c4 20             	add    esp,0x20
c000d0b4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0ba:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d0be:	0f b7 db             	movzx  ebx,bx
c000d0c1:	01 db                	add    ebx,ebx
c000d0c3:	01 fb                	add    ebx,edi
c000d0c5:	eb 6e                	jmp    c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0c7:	51                   	push   ecx
c000d0c8:	51                   	push   ecx
c000d0c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d0cd:	50                   	push   eax
c000d0ce:	e8 ff f8 ff ff       	call   c000c9d2 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0d3:	83 c4 10             	add    esp,0x10
c000d0d6:	66 89 03             	mov    WORD PTR [ebx],ax
c000d0d9:	39 2d 04 37 02 c0    	cmp    DWORD PTR ds:0xc0023704,ebp
c000d0df:	75 2a                	jne    c000d10b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0e1:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d0e7:	85 c0                	test   eax,eax
c000d0e9:	74 20                	je     c000d10b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0eb:	52                   	push   edx
c000d0ec:	52                   	push   edx
c000d0ed:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d0f3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d0f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d101:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d104:	51                   	push   ecx
c000d105:	55                   	push   ebp
c000d106:	ff d0                	call   eax
c000d108:	83 c4 20             	add    esp,0x20
c000d10b:	83 c3 02             	add    ebx,0x2
c000d10e:	50                   	push   eax
c000d10f:	50                   	push   eax
c000d110:	6a 00                	push   0x0
c000d112:	55                   	push   ebp
c000d113:	e8 9a f9 ff ff       	call   c000cab2 <VgaText::incrementCursor(bool)>
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d122:	75 0f                	jne    c000d133 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d124:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d12c:	0f b7 db             	movzx  ebx,bx
c000d12f:	01 db                	add    ebx,ebx
c000d131:	01 fb                	add    ebx,edi
c000d133:	b1 01                	mov    cl,0x1
c000d135:	46                   	inc    esi
c000d136:	e9 bd fe ff ff       	jmp    c000cff8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d13b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d13f:	83 ec 0c             	sub    esp,0xc
c000d142:	55                   	push   ebp
c000d143:	e8 a8 f6 ff ff       	call   c000c7f0 <VgaText::updateCursor()>
c000d148:	83 c4 10             	add    esp,0x10
c000d14b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d14f:	84 c9                	test   cl,cl
c000d151:	74 0c                	je     c000d15f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d153:	83 ec 0c             	sub    esp,0xc
c000d156:	55                   	push   ebp
c000d157:	e8 40 fe ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d166:	83 c4 1c             	add    esp,0x1c
c000d169:	5b                   	pop    ebx
c000d16a:	5e                   	pop    esi
c000d16b:	5f                   	pop    edi
c000d16c:	5d                   	pop    ebp
c000d16d:	c3                   	ret    

c000d16e <VgaText::clearScreen()>:
c000d16e:	57                   	push   edi
c000d16f:	56                   	push   esi
c000d170:	31 f6                	xor    esi,esi
c000d172:	53                   	push   ebx
c000d173:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d177:	52                   	push   edx
c000d178:	6a 00                	push   0x0
c000d17a:	6a 00                	push   0x0
c000d17c:	53                   	push   ebx
c000d17d:	e8 da f8 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d182:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d192:	7e 26                	jle    c000d1ba <VgaText::clearScreen()+0x4c>
c000d194:	31 ff                	xor    edi,edi
c000d196:	50                   	push   eax
c000d197:	50                   	push   eax
c000d198:	56                   	push   esi
c000d199:	57                   	push   edi
c000d19a:	47                   	inc    edi
c000d19b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d1a1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d1a7:	6a 20                	push   0x20
c000d1a9:	53                   	push   ebx
c000d1aa:	e8 35 f8 ff ff       	call   c000c9e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d1af:	83 c4 20             	add    esp,0x20
c000d1b2:	83 ff 50             	cmp    edi,0x50
c000d1b5:	75 df                	jne    c000d196 <VgaText::clearScreen()+0x28>
c000d1b7:	46                   	inc    esi
c000d1b8:	eb d2                	jmp    c000d18c <VgaText::clearScreen()+0x1e>
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	53                   	push   ebx
c000d1be:	e8 d9 fd ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d1c3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	5b                   	pop    ebx
c000d1ce:	5e                   	pop    esi
c000d1cf:	5f                   	pop    edi
c000d1d0:	c3                   	ret    
c000d1d1:	90                   	nop

c000d1d2 <VgaText::putchar(char)>:
c000d1d2:	56                   	push   esi
c000d1d3:	53                   	push   ebx
c000d1d4:	83 ec 14             	sub    esp,0x14
c000d1d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d1db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d1df:	3c 5b                	cmp    al,0x5b
c000d1e1:	75 21                	jne    c000d204 <VgaText::putchar(char)+0x32>
c000d1e3:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d1ea:	74 28                	je     c000d214 <VgaText::putchar(char)+0x42>
c000d1ec:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d1f5:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d1ff:	e9 e2 00 00 00       	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d204:	3c 1b                	cmp    al,0x1b
c000d206:	75 0c                	jne    c000d214 <VgaText::putchar(char)+0x42>
c000d208:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d20f:	e9 d2 00 00 00       	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d214:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d21a:	84 c9                	test   cl,cl
c000d21c:	0f 84 ab 00 00 00    	je     c000d2cd <VgaText::putchar(char)+0xfb>
c000d222:	8d 50 c0             	lea    edx,[eax-0x40]
c000d225:	80 fa 3e             	cmp    dl,0x3e
c000d228:	0f 87 82 00 00 00    	ja     c000d2b0 <VgaText::putchar(char)+0xde>
c000d22e:	3c 6d                	cmp    al,0x6d
c000d230:	75 4d                	jne    c000d27f <VgaText::putchar(char)+0xad>
c000d232:	31 f6                	xor    esi,esi
c000d234:	31 d2                	xor    edx,edx
c000d236:	31 c0                	xor    eax,eax
c000d238:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d23e:	7e 30                	jle    c000d270 <VgaText::putchar(char)+0x9e>
c000d240:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d248:	80 fa 3b             	cmp    dl,0x3b
c000d24b:	75 17                	jne    c000d264 <VgaText::putchar(char)+0x92>
c000d24d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d251:	50                   	push   eax
c000d252:	53                   	push   ebx
c000d253:	e8 fc f5 ff ff       	call   c000c854 <VgaText::doANSI_SGR(int)>
c000d258:	59                   	pop    ecx
c000d259:	31 d2                	xor    edx,edx
c000d25b:	58                   	pop    eax
c000d25c:	31 c0                	xor    eax,eax
c000d25e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d262:	eb 09                	jmp    c000d26d <VgaText::putchar(char)+0x9b>
c000d264:	6b c0 0a             	imul   eax,eax,0xa
c000d267:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d26b:	88 ca                	mov    dl,cl
c000d26d:	46                   	inc    esi
c000d26e:	eb c8                	jmp    c000d238 <VgaText::putchar(char)+0x66>
c000d270:	84 d2                	test   dl,dl
c000d272:	74 31                	je     c000d2a5 <VgaText::putchar(char)+0xd3>
c000d274:	50                   	push   eax
c000d275:	53                   	push   ebx
c000d276:	e8 d9 f5 ff ff       	call   c000c854 <VgaText::doANSI_SGR(int)>
c000d27b:	58                   	pop    eax
c000d27c:	5a                   	pop    edx
c000d27d:	eb 26                	jmp    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d27f:	3c 4a                	cmp    al,0x4a
c000d281:	75 22                	jne    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d283:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d28a:	75 19                	jne    c000d2a5 <VgaText::putchar(char)+0xd3>
c000d28c:	83 ec 0c             	sub    esp,0xc
c000d28f:	53                   	push   ebx
c000d290:	e8 d9 fe ff ff       	call   c000d16e <VgaText::clearScreen()>
c000d295:	83 c4 0c             	add    esp,0xc
c000d298:	6a 00                	push   0x0
c000d29a:	6a 00                	push   0x0
c000d29c:	53                   	push   ebx
c000d29d:	e8 ba f7 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d2a2:	83 c4 10             	add    esp,0x10
c000d2a5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d2ae:	eb 36                	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d2b0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d2b6:	83 fa 0e             	cmp    edx,0xe
c000d2b9:	7f 2b                	jg     c000d2e6 <VgaText::putchar(char)+0x114>
c000d2bb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2be:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d2c4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d2cb:	eb 19                	jmp    c000d2e6 <VgaText::putchar(char)+0x114>
c000d2cd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2d3:	0f be c0             	movsx  eax,al
c000d2d6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2dc:	50                   	push   eax
c000d2dd:	53                   	push   ebx
c000d2de:	e8 ab fa ff ff       	call   c000cd8e <VgaText::putchar(char, VgaColour, VgaColour)>
c000d2e3:	83 c4 10             	add    esp,0x10
c000d2e6:	83 c4 14             	add    esp,0x14
c000d2e9:	5b                   	pop    ebx
c000d2ea:	5e                   	pop    esi
c000d2eb:	c3                   	ret    

c000d2ec <VgaText::puts(char const*)>:
c000d2ec:	53                   	push   ebx
c000d2ed:	83 ec 08             	sub    esp,0x8
c000d2f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d2f7:	84 c0                	test   al,al
c000d2f9:	74 12                	je     c000d30d <VgaText::puts(char const*)+0x21>
c000d2fb:	43                   	inc    ebx
c000d2fc:	51                   	push   ecx
c000d2fd:	51                   	push   ecx
c000d2fe:	50                   	push   eax
c000d2ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d303:	e8 ca fe ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	eb e7                	jmp    c000d2f4 <VgaText::puts(char const*)+0x8>
c000d30d:	83 c4 08             	add    esp,0x8
c000d310:	5b                   	pop    ebx
c000d311:	c3                   	ret    

c000d312 <VgaText::putx(unsigned int)>:
c000d312:	57                   	push   edi
c000d313:	b9 11 00 00 00       	mov    ecx,0x11
c000d318:	56                   	push   esi
c000d319:	be b6 04 02 c0       	mov    esi,0xc00204b6
c000d31e:	53                   	push   ebx
c000d31f:	83 ec 20             	sub    esp,0x20
c000d322:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d326:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d32a:	fc                   	cld    
c000d32b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d32d:	be 08 00 00 00       	mov    esi,0x8
c000d332:	50                   	push   eax
c000d333:	50                   	push   eax
c000d334:	89 d8                	mov    eax,ebx
c000d336:	c1 e3 04             	shl    ebx,0x4
c000d339:	c1 e8 1c             	shr    eax,0x1c
c000d33c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d341:	50                   	push   eax
c000d342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d346:	e8 87 fe ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d34b:	83 c4 10             	add    esp,0x10
c000d34e:	4e                   	dec    esi
c000d34f:	75 e1                	jne    c000d332 <VgaText::putx(unsigned int)+0x20>
c000d351:	83 c4 20             	add    esp,0x20
c000d354:	5b                   	pop    ebx
c000d355:	5e                   	pop    esi
c000d356:	5f                   	pop    edi
c000d357:	c3                   	ret    

c000d358 <VgaText::VgaText(char const*)>:
c000d358:	57                   	push   edi
c000d359:	56                   	push   esi
c000d35a:	53                   	push   ebx
c000d35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35f:	83 ec 08             	sub    esp,0x8
c000d362:	6a 00                	push   0x0
c000d364:	50                   	push   eax
c000d365:	e8 c6 05 00 00       	call   c000d930 <UnixFile::UnixFile(int)>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c000d372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d376:	89 10                	mov    DWORD PTR [eax],edx
c000d378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d398:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ae:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3bc:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ca:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e0:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d3e6:	bb e0 36 02 c0       	mov    ebx,0xc00236e0
c000d3eb:	b8 08 00 00 00       	mov    eax,0x8
c000d3f0:	fc                   	cld    
c000d3f1:	89 d7                	mov    edi,edx
c000d3f3:	89 de                	mov    esi,ebx
c000d3f5:	89 c1                	mov    ecx,eax
c000d3f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3fd:	05 1e 10 00 00       	add    eax,0x101e
c000d402:	83 ec 08             	sub    esp,0x8
c000d405:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d409:	50                   	push   eax
c000d40a:	e8 98 32 ff ff       	call   c00006a7 <strcpy>
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d416:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d424:	83 c0 0c             	add    eax,0xc
c000d427:	83 ec 04             	sub    esp,0x4
c000d42a:	68 00 0f 00 00       	push   0xf00
c000d42f:	6a 00                	push   0x0
c000d431:	50                   	push   eax
c000d432:	e8 d1 31 ff ff       	call   c0000608 <memset>
c000d437:	83 c4 10             	add    esp,0x10
c000d43a:	83 ec 04             	sub    esp,0x4
c000d43d:	6a 00                	push   0x0
c000d43f:	6a 07                	push   0x7
c000d441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d445:	e8 c2 f4 ff ff       	call   c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d44a:	83 c4 10             	add    esp,0x10
c000d44d:	83 ec 08             	sub    esp,0x8
c000d450:	6a 02                	push   0x2
c000d452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d456:	e8 49 fa ff ff       	call   c000cea4 <VgaText::setCursorHeight(int)>
c000d45b:	83 c4 10             	add    esp,0x10
c000d45e:	83 ec 04             	sub    esp,0x4
c000d461:	6a 00                	push   0x0
c000d463:	6a 00                	push   0x0
c000d465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d469:	e8 ee f5 ff ff       	call   c000ca5c <VgaText::setCursor(int, int)>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	83 ec 08             	sub    esp,0x8
c000d474:	6a 01                	push   0x1
c000d476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47a:	e8 8b f3 ff ff       	call   c000c80a <VgaText::showCursor(bool)>
c000d47f:	83 c4 10             	add    esp,0x10
c000d482:	83 ec 08             	sub    esp,0x8
c000d485:	6a 01                	push   0x1
c000d487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48b:	e8 8a f3 ff ff       	call   c000c81a <VgaText::disableBlink(bool)>
c000d490:	83 c4 10             	add    esp,0x10
c000d493:	83 ec 0c             	sub    esp,0xc
c000d496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49a:	e8 cf fc ff ff       	call   c000d16e <VgaText::clearScreen()>
c000d49f:	83 c4 10             	add    esp,0x10
c000d4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b1:	05 9e 10 00 00       	add    eax,0x109e
c000d4b6:	83 ec 04             	sub    esp,0x4
c000d4b9:	68 96 00 00 00       	push   0x96
c000d4be:	6a 00                	push   0x0
c000d4c0:	50                   	push   eax
c000d4c1:	e8 42 31 ff ff       	call   c0000608 <memset>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4cd:	05 34 11 00 00       	add    eax,0x1134
c000d4d2:	83 ec 04             	sub    esp,0x4
c000d4d5:	68 2c 01 00 00       	push   0x12c
c000d4da:	6a 00                	push   0x0
c000d4dc:	50                   	push   eax
c000d4dd:	e8 26 31 ff ff       	call   c0000608 <memset>
c000d4e2:	83 c4 10             	add    esp,0x10
c000d4e5:	90                   	nop
c000d4e6:	5b                   	pop    ebx
c000d4e7:	5e                   	pop    esi
c000d4e8:	5f                   	pop    edi
c000d4e9:	c3                   	ret    

c000d4ea <VgaText::receiveKey(unsigned char)>:
c000d4ea:	55                   	push   ebp
c000d4eb:	57                   	push   edi
c000d4ec:	56                   	push   esi
c000d4ed:	53                   	push   ebx
c000d4ee:	83 ec 1c             	sub    esp,0x1c
c000d4f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d4f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d4f9:	84 db                	test   bl,bl
c000d4fb:	0f 84 c9 00 00 00    	je     c000d5ca <VgaText::receiveKey(unsigned char)+0xe0>
c000d501:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d507:	80 fb 08             	cmp    bl,0x8
c000d50a:	75 2c                	jne    c000d538 <VgaText::receiveKey(unsigned char)+0x4e>
c000d50c:	83 ec 0c             	sub    esp,0xc
c000d50f:	57                   	push   edi
c000d510:	e8 10 31 ff ff       	call   c0000625 <strlen>
c000d515:	83 c4 10             	add    esp,0x10
c000d518:	85 c0                	test   eax,eax
c000d51a:	74 41                	je     c000d55d <VgaText::receiveKey(unsigned char)+0x73>
c000d51c:	50                   	push   eax
c000d51d:	50                   	push   eax
c000d51e:	6a 08                	push   0x8
c000d520:	56                   	push   esi
c000d521:	e8 ac fc ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d526:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d529:	e8 f7 30 ff ff       	call   c0000625 <strlen>
c000d52e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d536:	eb 22                	jmp    c000d55a <VgaText::receiveKey(unsigned char)+0x70>
c000d538:	0f be c3             	movsx  eax,bl
c000d53b:	52                   	push   edx
c000d53c:	52                   	push   edx
c000d53d:	50                   	push   eax
c000d53e:	56                   	push   esi
c000d53f:	e8 8e fc ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d544:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d548:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d54d:	59                   	pop    ecx
c000d54e:	5d                   	pop    ebp
c000d54f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d553:	50                   	push   eax
c000d554:	57                   	push   edi
c000d555:	e8 04 32 ff ff       	call   c000075e <strcat>
c000d55a:	83 c4 10             	add    esp,0x10
c000d55d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d564:	75 05                	jne    c000d56b <VgaText::receiveKey(unsigned char)+0x81>
c000d566:	80 fb 0a             	cmp    bl,0xa
c000d569:	75 53                	jne    c000d5be <VgaText::receiveKey(unsigned char)+0xd4>
c000d56b:	83 ec 0c             	sub    esp,0xc
c000d56e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d574:	53                   	push   ebx
c000d575:	e8 ab 30 ff ff       	call   c0000625 <strlen>
c000d57a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d57d:	89 c5                	mov    ebp,eax
c000d57f:	e8 a1 30 ff ff       	call   c0000625 <strlen>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d58b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d590:	76 10                	jbe    c000d5a2 <VgaText::receiveKey(unsigned char)+0xb8>
c000d592:	83 ec 0c             	sub    esp,0xc
c000d595:	68 c7 04 02 c0       	push   0xc00204c7
c000d59a:	e8 99 76 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000d59f:	83 c4 10             	add    esp,0x10
c000d5a2:	50                   	push   eax
c000d5a3:	50                   	push   eax
c000d5a4:	57                   	push   edi
c000d5a5:	53                   	push   ebx
c000d5a6:	e8 b3 31 ff ff       	call   c000075e <strcat>
c000d5ab:	83 c4 0c             	add    esp,0xc
c000d5ae:	68 96 00 00 00       	push   0x96
c000d5b3:	6a 00                	push   0x0
c000d5b5:	57                   	push   edi
c000d5b6:	e8 4d 30 ff ff       	call   c0000608 <memset>
c000d5bb:	83 c4 10             	add    esp,0x10
c000d5be:	83 ec 0c             	sub    esp,0xc
c000d5c1:	56                   	push   esi
c000d5c2:	e8 d5 f9 ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d5c7:	83 c4 10             	add    esp,0x10
c000d5ca:	83 c4 1c             	add    esp,0x1c
c000d5cd:	5b                   	pop    ebx
c000d5ce:	5e                   	pop    esi
c000d5cf:	5f                   	pop    edi
c000d5d0:	5d                   	pop    ebp
c000d5d1:	c3                   	ret    

c000d5d2 <VgaText::write(unsigned long long, void*, int*)>:
c000d5d2:	55                   	push   ebp
c000d5d3:	57                   	push   edi
c000d5d4:	56                   	push   esi
c000d5d5:	53                   	push   ebx
c000d5d6:	83 ec 0c             	sub    esp,0xc
c000d5d9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d5dd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d5e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d5e5:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d5ec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d5ef:	39 eb                	cmp    ebx,ebp
c000d5f1:	74 13                	je     c000d606 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d5f3:	43                   	inc    ebx
c000d5f4:	50                   	push   eax
c000d5f5:	50                   	push   eax
c000d5f6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d5fa:	50                   	push   eax
c000d5fb:	56                   	push   esi
c000d5fc:	e8 d1 fb ff ff       	call   c000d1d2 <VgaText::putchar(char)>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	eb e9                	jmp    c000d5ef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d606:	83 ec 0c             	sub    esp,0xc
c000d609:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d610:	56                   	push   esi
c000d611:	e8 86 f9 ff ff       	call   c000cf9c <VgaText::doUpdate()>
c000d616:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d61a:	89 38                	mov    DWORD PTR [eax],edi
c000d61c:	83 c4 1c             	add    esp,0x1c
c000d61f:	31 c0                	xor    eax,eax
c000d621:	5b                   	pop    ebx
c000d622:	5e                   	pop    esi
c000d623:	5f                   	pop    edi
c000d624:	5d                   	pop    ebp
c000d625:	c3                   	ret    

c000d626 <newTerminal(char*)>:
c000d626:	83 ec 28             	sub    esp,0x28
c000d629:	68 60 12 00 00       	push   0x1260
c000d62e:	e8 81 18 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000d633:	5a                   	pop    edx
c000d634:	59                   	pop    ecx
c000d635:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d639:	50                   	push   eax
c000d63a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d63e:	e8 15 fd ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c000d643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d647:	83 c4 2c             	add    esp,0x2c
c000d64a:	c3                   	ret    
c000d64b:	90                   	nop

c000d64c <TSS::TSS()>:
c000d64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d650:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d657:	90                   	nop
c000d658:	c3                   	ret    
c000d659:	90                   	nop

c000d65a <TSS::setESP(unsigned long)>:
c000d65a:	55                   	push   ebp
c000d65b:	89 e5                	mov    ebp,esp
c000d65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d663:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d666:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d669:	90                   	nop
c000d66a:	5d                   	pop    ebp
c000d66b:	c3                   	ret    

c000d66c <TSS::flush()>:
c000d66c:	55                   	push   ebp
c000d66d:	89 e5                	mov    ebp,esp
c000d66f:	83 ec 10             	sub    esp,0x10
c000d672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d675:	8b 00                	mov    eax,DWORD PTR [eax]
c000d677:	83 c8 03             	or     eax,0x3
c000d67a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d67e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d682:	66 89 d0             	mov    ax,dx
c000d685:	0f 00 d8             	ltr    ax
c000d688:	90                   	nop
c000d689:	c9                   	leave  
c000d68a:	c3                   	ret    
c000d68b:	90                   	nop

c000d68c <TSS::setup(unsigned long, unsigned long)>:
c000d68c:	55                   	push   ebp
c000d68d:	89 e5                	mov    ebp,esp
c000d68f:	53                   	push   ebx
c000d690:	83 ec 14             	sub    esp,0x14
c000d693:	83 ec 0c             	sub    esp,0xc
c000d696:	6a 68                	push   0x68
c000d698:	e8 81 e5 ff ff       	call   c000bc1e <malloc>
c000d69d:	83 c4 10             	add    esp,0x10
c000d6a0:	89 c2                	mov    edx,eax
c000d6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6ae:	83 ec 04             	sub    esp,0x4
c000d6b1:	6a 68                	push   0x68
c000d6b3:	6a 00                	push   0x0
c000d6b5:	50                   	push   eax
c000d6b6:	e8 4d 2f ff ff       	call   c0000608 <memset>
c000d6bb:	83 c4 10             	add    esp,0x10
c000d6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6c4:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d6ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6d0:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d6df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e8:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6f4:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d6fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d700:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d709:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d70c:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d715:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d718:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d71b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d71e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d724:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d727:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d72a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d72d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d730:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73a:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d73d:	e8 83 12 01 00       	call   c001e9c5 <CPU::readCR3()>
c000d742:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d74b:	83 ec 08             	sub    esp,0x8
c000d74e:	50                   	push   eax
c000d74f:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d752:	50                   	push   eax
c000d753:	e8 9c dc ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	83 ec 08             	sub    esp,0x8
c000d75e:	6a 68                	push   0x68
c000d760:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d763:	50                   	push   eax
c000d764:	e8 a7 dc ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d770:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d773:	83 e0 0f             	and    eax,0xf
c000d776:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d779:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d77c:	83 c8 40             	or     eax,0x40
c000d77f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d782:	e8 ab 67 00 00       	call   c0013f32 <thisCPU()>
c000d787:	05 78 01 00 00       	add    eax,0x178
c000d78c:	83 ec 04             	sub    esp,0x4
c000d78f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d792:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d795:	50                   	push   eax
c000d796:	e8 a9 dc ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000d79b:	83 c4 10             	add    esp,0x10
c000d79e:	89 c2                	mov    edx,eax
c000d7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a3:	89 10                	mov    DWORD PTR [eax],edx
c000d7a5:	e8 88 67 00 00       	call   c0013f32 <thisCPU()>
c000d7aa:	05 78 01 00 00       	add    eax,0x178
c000d7af:	83 ec 0c             	sub    esp,0xc
c000d7b2:	50                   	push   eax
c000d7b3:	e8 d0 dc ff ff       	call   c000b488 <GDT::flush()>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7be:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7c0:	83 ec 08             	sub    esp,0x8
c000d7c3:	50                   	push   eax
c000d7c4:	68 30 05 02 c0       	push   0xc0020530
c000d7c9:	e8 d5 17 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000d7ce:	83 c4 10             	add    esp,0x10
c000d7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d7d9:	c9                   	leave  
c000d7da:	c3                   	ret    
c000d7db:	90                   	nop

c000d7dc <ReservedFilename::isAtty()>:
c000d7dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7e3:	31 c0                	xor    eax,eax
c000d7e5:	81 fa 03 ff ff 7f    	cmp    edx,0x7fffff03
c000d7eb:	74 09                	je     c000d7f6 <ReservedFilename::isAtty()+0x1a>
c000d7ed:	81 fa 01 ff ff 7f    	cmp    edx,0x7fffff01
c000d7f3:	0f 94 c0             	sete   al
c000d7f6:	c3                   	ret    
c000d7f7:	90                   	nop

c000d7f8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d7f8:	55                   	push   ebp
c000d7f9:	57                   	push   edi
c000d7fa:	56                   	push   esi
c000d7fb:	53                   	push   ebx
c000d7fc:	83 ec 0c             	sub    esp,0xc
c000d7ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d803:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d807:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d80a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d80e:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d812:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d816:	3d 03 ff ff 7f       	cmp    eax,0x7fffff03
c000d81b:	75 08                	jne    c000d825 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000d81d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d823:	eb 5e                	jmp    c000d883 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000d825:	3d 01 ff ff 7f       	cmp    eax,0x7fffff01
c000d82a:	75 3d                	jne    c000d869 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000d82c:	83 ec 0c             	sub    esp,0xc
c000d82f:	68 4e 05 02 c0       	push   0xc002054e
c000d834:	e8 6a 17 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000d839:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d83e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d841:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d847:	8b 10                	mov    edx,DWORD PTR [eax]
c000d849:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d84d:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d851:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d855:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d859:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d85d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d860:	83 c4 1c             	add    esp,0x1c
c000d863:	5b                   	pop    ebx
c000d864:	5e                   	pop    esi
c000d865:	5f                   	pop    edi
c000d866:	5d                   	pop    ebp
c000d867:	ff e0                	jmp    eax
c000d869:	89 c2                	mov    edx,eax
c000d86b:	83 e2 fd             	and    edx,0xfffffffd
c000d86e:	81 fa 00 ff ff 7f    	cmp    edx,0x7fffff00
c000d874:	74 a7                	je     c000d81d <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d876:	2d 10 ff ff 7f       	sub    eax,0x7fffff10
c000d87b:	83 e0 ef             	and    eax,0xffffffef
c000d87e:	83 f8 08             	cmp    eax,0x8
c000d881:	76 9a                	jbe    c000d81d <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d883:	83 c4 0c             	add    esp,0xc
c000d886:	31 c0                	xor    eax,eax
c000d888:	5b                   	pop    ebx
c000d889:	5e                   	pop    esi
c000d88a:	5f                   	pop    edi
c000d88b:	5d                   	pop    ebp
c000d88c:	c3                   	ret    
c000d88d:	90                   	nop

c000d88e <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d88e:	55                   	push   ebp
c000d88f:	57                   	push   edi
c000d890:	56                   	push   esi
c000d891:	53                   	push   ebx
c000d892:	83 ec 0c             	sub    esp,0xc
c000d895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d899:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d89d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d8a4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d8a8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8ac:	3d 03 ff ff 7f       	cmp    eax,0x7fffff03
c000d8b1:	75 08                	jne    c000d8bb <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000d8b3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d8b9:	eb 63                	jmp    c000d91e <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d8bb:	3d 01 ff ff 7f       	cmp    eax,0x7fffff01
c000d8c0:	75 3d                	jne    c000d8ff <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000d8c2:	83 ec 0c             	sub    esp,0xc
c000d8c5:	68 5b 05 02 c0       	push   0xc002055b
c000d8ca:	e8 d4 16 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000d8cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d8d7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d8dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8df:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d8e3:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d8e7:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d8eb:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d8f6:	83 c4 1c             	add    esp,0x1c
c000d8f9:	5b                   	pop    ebx
c000d8fa:	5e                   	pop    esi
c000d8fb:	5f                   	pop    edi
c000d8fc:	5d                   	pop    ebp
c000d8fd:	ff e0                	jmp    eax
c000d8ff:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c000d904:	75 04                	jne    c000d90a <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000d906:	89 33                	mov    DWORD PTR [ebx],esi
c000d908:	eb 14                	jmp    c000d91e <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d90a:	3d 02 ff ff 7f       	cmp    eax,0x7fffff02
c000d90f:	74 a2                	je     c000d8b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d911:	2d 10 ff ff 7f       	sub    eax,0x7fffff10
c000d916:	83 e0 ef             	and    eax,0xffffffef
c000d919:	83 f8 08             	cmp    eax,0x8
c000d91c:	76 95                	jbe    c000d8b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d91e:	83 c4 0c             	add    esp,0xc
c000d921:	31 c0                	xor    eax,eax
c000d923:	5b                   	pop    ebx
c000d924:	5e                   	pop    esi
c000d925:	5f                   	pop    edi
c000d926:	5d                   	pop    ebp
c000d927:	c3                   	ret    

c000d928 <UnixFile::getFileDescriptor()>:
c000d928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d92c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d92f:	c3                   	ret    

c000d930 <UnixFile::UnixFile(int)>:
c000d930:	53                   	push   ebx
c000d931:	83 ec 18             	sub    esp,0x18
c000d934:	ba 38 06 02 c0       	mov    edx,0xc0020638
c000d939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d93d:	89 10                	mov    DWORD PTR [eax],edx
c000d93f:	81 7c 24 24 ff fe ff 7f 	cmp    DWORD PTR [esp+0x24],0x7ffffeff
c000d947:	0f 8f 4d 01 00 00    	jg     c000da9a <UnixFile::UnixFile(int)+0x16a>
c000d94d:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c000d952:	8d 50 01             	lea    edx,[eax+0x1]
c000d955:	89 15 e0 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae0,edx
c000d95b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d95f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d962:	83 ec 08             	sub    esp,0x8
c000d965:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d969:	68 98 37 02 c0       	push   0xc0023798
c000d96e:	e8 c7 10 01 00       	call   c001ea3a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d973:	83 c4 10             	add    esp,0x10
c000d976:	a0 94 37 02 c0       	mov    al,ds:0xc0023794
c000d97b:	83 f0 01             	xor    eax,0x1
c000d97e:	84 c0                	test   al,al
c000d980:	0f 84 15 01 00 00    	je     c000da9b <UnixFile::UnixFile(int)+0x16b>
c000d986:	c6 05 94 37 02 c0 01 	mov    BYTE PTR ds:0xc0023794,0x1
c000d98d:	83 ec 0c             	sub    esp,0xc
c000d990:	6a 0c                	push   0xc
c000d992:	e8 1d 15 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000d997:	83 c4 10             	add    esp,0x10
c000d99a:	89 c3                	mov    ebx,eax
c000d99c:	83 ec 08             	sub    esp,0x8
c000d99f:	68 03 ff ff 7f       	push   0x7fffff03
c000d9a4:	53                   	push   ebx
c000d9a5:	e8 f6 00 00 00       	call   c000daa0 <ReservedFilename::ReservedFilename(int)>
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	89 1d 8c 37 02 c0    	mov    DWORD PTR ds:0xc002378c,ebx
c000d9b3:	83 ec 0c             	sub    esp,0xc
c000d9b6:	6a 0c                	push   0xc
c000d9b8:	e8 f7 14 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000d9bd:	83 c4 10             	add    esp,0x10
c000d9c0:	89 c3                	mov    ebx,eax
c000d9c2:	83 ec 08             	sub    esp,0x8
c000d9c5:	68 01 ff ff 7f       	push   0x7fffff01
c000d9ca:	53                   	push   ebx
c000d9cb:	e8 d0 00 00 00       	call   c000daa0 <ReservedFilename::ReservedFilename(int)>
c000d9d0:	83 c4 10             	add    esp,0x10
c000d9d3:	89 1d 90 37 02 c0    	mov    DWORD PTR ds:0xc0023790,ebx
c000d9d9:	83 ec 0c             	sub    esp,0xc
c000d9dc:	6a 0c                	push   0xc
c000d9de:	e8 d1 14 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000d9e3:	83 c4 10             	add    esp,0x10
c000d9e6:	89 c3                	mov    ebx,eax
c000d9e8:	83 ec 08             	sub    esp,0x8
c000d9eb:	68 00 ff ff 7f       	push   0x7fffff00
c000d9f0:	53                   	push   ebx
c000d9f1:	e8 aa 00 00 00       	call   c000daa0 <ReservedFilename::ReservedFilename(int)>
c000d9f6:	83 c4 10             	add    esp,0x10
c000d9f9:	89 1d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ebx
c000d9ff:	83 ec 0c             	sub    esp,0xc
c000da02:	6a 0c                	push   0xc
c000da04:	e8 ab 14 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000da09:	83 c4 10             	add    esp,0x10
c000da0c:	89 c3                	mov    ebx,eax
c000da0e:	83 ec 08             	sub    esp,0x8
c000da11:	68 02 ff ff 7f       	push   0x7fffff02
c000da16:	53                   	push   ebx
c000da17:	e8 84 00 00 00       	call   c000daa0 <ReservedFilename::ReservedFilename(int)>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	89 1d 88 37 02 c0    	mov    DWORD PTR ds:0xc0023788,ebx
c000da25:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da2d:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000da32:	7f 67                	jg     c000da9b <UnixFile::UnixFile(int)+0x16b>
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	6a 0c                	push   0xc
c000da39:	e8 76 14 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000da3e:	83 c4 10             	add    esp,0x10
c000da41:	89 c3                	mov    ebx,eax
c000da43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da47:	05 10 ff ff 7f       	add    eax,0x7fffff10
c000da4c:	83 ec 08             	sub    esp,0x8
c000da4f:	50                   	push   eax
c000da50:	53                   	push   ebx
c000da51:	e8 4a 00 00 00       	call   c000daa0 <ReservedFilename::ReservedFilename(int)>
c000da56:	83 c4 10             	add    esp,0x10
c000da59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da5d:	89 1c 85 60 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc8a0],ebx
c000da64:	83 ec 0c             	sub    esp,0xc
c000da67:	6a 0c                	push   0xc
c000da69:	e8 46 14 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000da6e:	83 c4 10             	add    esp,0x10
c000da71:	89 c3                	mov    ebx,eax
c000da73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da77:	05 20 ff ff 7f       	add    eax,0x7fffff20
c000da7c:	83 ec 08             	sub    esp,0x8
c000da7f:	50                   	push   eax
c000da80:	53                   	push   ebx
c000da81:	e8 1a 00 00 00       	call   c000daa0 <ReservedFilename::ReservedFilename(int)>
c000da86:	83 c4 10             	add    esp,0x10
c000da89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da8d:	89 1c 85 20 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc8e0],ebx
c000da94:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000da98:	eb 93                	jmp    c000da2d <UnixFile::UnixFile(int)+0xfd>
c000da9a:	90                   	nop
c000da9b:	83 c4 18             	add    esp,0x18
c000da9e:	5b                   	pop    ebx
c000da9f:	c3                   	ret    

c000daa0 <ReservedFilename::ReservedFilename(int)>:
c000daa0:	83 ec 0c             	sub    esp,0xc
c000daa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa7:	83 ec 08             	sub    esp,0x8
c000daaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daae:	50                   	push   eax
c000daaf:	e8 7c fe ff ff       	call   c000d930 <UnixFile::UnixFile(int)>
c000dab4:	83 c4 10             	add    esp,0x10
c000dab7:	ba 54 06 02 c0       	mov    edx,0xc0020654
c000dabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac0:	89 10                	mov    DWORD PTR [eax],edx
c000dac2:	90                   	nop
c000dac3:	83 c4 0c             	add    esp,0xc
c000dac6:	c3                   	ret    
c000dac7:	90                   	nop

c000dac8 <UnixFile::~UnixFile()>:
c000dac8:	83 ec 1c             	sub    esp,0x1c
c000dacb:	ba 38 06 02 c0       	mov    edx,0xc0020638
c000dad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad4:	89 10                	mov    DWORD PTR [eax],edx
c000dad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dadd:	3d ff fe ff 7f       	cmp    eax,0x7ffffeff
c000dae2:	7f 73                	jg     c000db57 <UnixFile::~UnixFile()+0x8f>
c000dae4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	68 98 37 02 c0       	push   0xc0023798
c000daf4:	e8 15 10 01 00       	call   c001eb0e <LinkedList<UnixFile>::getFirstElement()>
c000daf9:	83 c4 10             	add    esp,0x10
c000dafc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db00:	83 ec 0c             	sub    esp,0xc
c000db03:	68 98 37 02 c0       	push   0xc0023798
c000db08:	e8 09 10 01 00       	call   c001eb16 <LinkedList<UnixFile>::removeFirst()>
c000db0d:	83 c4 10             	add    esp,0x10
c000db10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db14:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000db18:	74 40                	je     c000db5a <UnixFile::~UnixFile()+0x92>
c000db1a:	83 ec 08             	sub    esp,0x8
c000db1d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db21:	68 98 37 02 c0       	push   0xc0023798
c000db26:	e8 0f 0f 01 00       	call   c001ea3a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000db2b:	83 c4 10             	add    esp,0x10
c000db2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db32:	8d 50 01             	lea    edx,[eax+0x1]
c000db35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db39:	3d 88 13 00 00       	cmp    eax,0x1388
c000db3e:	0f 94 c0             	sete   al
c000db41:	84 c0                	test   al,al
c000db43:	74 a7                	je     c000daec <UnixFile::~UnixFile()+0x24>
c000db45:	83 ec 0c             	sub    esp,0xc
c000db48:	68 10 06 02 c0       	push   0xc0020610
c000db4d:	e8 e6 70 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000db52:	83 c4 10             	add    esp,0x10
c000db55:	eb 95                	jmp    c000daec <UnixFile::~UnixFile()+0x24>
c000db57:	90                   	nop
c000db58:	eb 01                	jmp    c000db5b <UnixFile::~UnixFile()+0x93>
c000db5a:	90                   	nop
c000db5b:	90                   	nop
c000db5c:	83 c4 1c             	add    esp,0x1c
c000db5f:	c3                   	ret    

c000db60 <UnixFile::~UnixFile()>:
c000db60:	83 ec 0c             	sub    esp,0xc
c000db63:	83 ec 0c             	sub    esp,0xc
c000db66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6a:	e8 59 ff ff ff       	call   c000dac8 <UnixFile::~UnixFile()>
c000db6f:	83 c4 10             	add    esp,0x10
c000db72:	83 ec 08             	sub    esp,0x8
c000db75:	6a 0c                	push   0xc
c000db77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db7b:	e8 43 13 00 00       	call   c000eec3 <operator delete(void*, unsigned long)>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	83 c4 0c             	add    esp,0xc
c000db86:	c3                   	ret    
c000db87:	90                   	nop

c000db88 <ReservedFilename::~ReservedFilename()>:
c000db88:	83 ec 0c             	sub    esp,0xc
c000db8b:	ba 54 06 02 c0       	mov    edx,0xc0020654
c000db90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db94:	89 10                	mov    DWORD PTR [eax],edx
c000db96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db9a:	83 ec 0c             	sub    esp,0xc
c000db9d:	50                   	push   eax
c000db9e:	e8 25 ff ff ff       	call   c000dac8 <UnixFile::~UnixFile()>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	90                   	nop
c000dba7:	83 c4 0c             	add    esp,0xc
c000dbaa:	c3                   	ret    
c000dbab:	90                   	nop

c000dbac <ReservedFilename::~ReservedFilename()>:
c000dbac:	83 ec 0c             	sub    esp,0xc
c000dbaf:	83 ec 0c             	sub    esp,0xc
c000dbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb6:	e8 cd ff ff ff       	call   c000db88 <ReservedFilename::~ReservedFilename()>
c000dbbb:	83 c4 10             	add    esp,0x10
c000dbbe:	83 ec 08             	sub    esp,0x8
c000dbc1:	6a 0c                	push   0xc
c000dbc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc7:	e8 f7 12 00 00       	call   c000eec3 <operator delete(void*, unsigned long)>
c000dbcc:	83 c4 10             	add    esp,0x10
c000dbcf:	83 c4 0c             	add    esp,0xc
c000dbd2:	c3                   	ret    

c000dbd3 <getFromFileDescriptor(int)>:
c000dbd3:	53                   	push   ebx
c000dbd4:	83 ec 08             	sub    esp,0x8
c000dbd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbdb:	81 fb ff fe ff 7f    	cmp    ebx,0x7ffffeff
c000dbe1:	7f 2c                	jg     c000dc0f <getFromFileDescriptor(int)+0x3c>
c000dbe3:	83 ec 0c             	sub    esp,0xc
c000dbe6:	68 98 37 02 c0       	push   0xc0023798
c000dbeb:	e8 1e 0f 01 00       	call   c001eb0e <LinkedList<UnixFile>::getFirstElement()>
c000dbf0:	83 c4 10             	add    esp,0x10
c000dbf3:	85 c0                	test   eax,eax
c000dbf5:	75 04                	jne    c000dbfb <getFromFileDescriptor(int)+0x28>
c000dbf7:	31 c0                	xor    eax,eax
c000dbf9:	eb 6e                	jmp    c000dc69 <getFromFileDescriptor(int)+0x96>
c000dbfb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dbfe:	74 69                	je     c000dc69 <getFromFileDescriptor(int)+0x96>
c000dc00:	52                   	push   edx
c000dc01:	52                   	push   edx
c000dc02:	50                   	push   eax
c000dc03:	68 98 37 02 c0       	push   0xc0023798
c000dc08:	e8 ab 0f 01 00       	call   c001ebb8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dc0d:	eb e1                	jmp    c000dbf0 <getFromFileDescriptor(int)+0x1d>
c000dc0f:	a1 8c 37 02 c0       	mov    eax,ds:0xc002378c
c000dc14:	81 fb 03 ff ff 7f    	cmp    ebx,0x7fffff03
c000dc1a:	74 4d                	je     c000dc69 <getFromFileDescriptor(int)+0x96>
c000dc1c:	a1 90 37 02 c0       	mov    eax,ds:0xc0023790
c000dc21:	81 fb 01 ff ff 7f    	cmp    ebx,0x7fffff01
c000dc27:	74 40                	je     c000dc69 <getFromFileDescriptor(int)+0x96>
c000dc29:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000dc2e:	81 fb 02 ff ff 7f    	cmp    ebx,0x7fffff02
c000dc34:	74 33                	je     c000dc69 <getFromFileDescriptor(int)+0x96>
c000dc36:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000dc3b:	81 fb 00 ff ff 7f    	cmp    ebx,0x7fffff00
c000dc41:	74 26                	je     c000dc69 <getFromFileDescriptor(int)+0x96>
c000dc43:	8d 83 f0 00 00 80    	lea    eax,[ebx-0x7fffff10]
c000dc49:	83 f8 08             	cmp    eax,0x8
c000dc4c:	77 09                	ja     c000dc57 <getFromFileDescriptor(int)+0x84>
c000dc4e:	8b 04 85 60 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8a0]
c000dc55:	eb 12                	jmp    c000dc69 <getFromFileDescriptor(int)+0x96>
c000dc57:	81 eb 20 ff ff 7f    	sub    ebx,0x7fffff20
c000dc5d:	83 fb 08             	cmp    ebx,0x8
c000dc60:	77 95                	ja     c000dbf7 <getFromFileDescriptor(int)+0x24>
c000dc62:	8b 04 9d 20 37 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc8e0]
c000dc69:	83 c4 08             	add    esp,0x8
c000dc6c:	5b                   	pop    ebx
c000dc6d:	c3                   	ret    

c000dc6e <__static_initialization_and_destruction_0(int, int)>:
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dc76:	75 34                	jne    c000dcac <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dc78:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dc80:	75 2a                	jne    c000dcac <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dc82:	83 ec 0c             	sub    esp,0xc
c000dc85:	68 98 37 02 c0       	push   0xc0023798
c000dc8a:	e8 53 0d 01 00       	call   c001e9e2 <LinkedList<UnixFile>::LinkedList()>
c000dc8f:	83 c4 10             	add    esp,0x10
c000dc92:	83 ec 04             	sub    esp,0x4
c000dc95:	68 60 2a 02 c0       	push   0xc0022a60
c000dc9a:	68 98 37 02 c0       	push   0xc0023798
c000dc9f:	68 e0 e9 01 c0       	push   0xc001e9e0
c000dca4:	e8 96 11 00 00       	call   c000ee3f <__cxa_atexit>
c000dca9:	83 c4 10             	add    esp,0x10
c000dcac:	90                   	nop
c000dcad:	83 c4 0c             	add    esp,0xc
c000dcb0:	c3                   	ret    

c000dcb1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000dcb1:	83 ec 0c             	sub    esp,0xc
c000dcb4:	83 ec 08             	sub    esp,0x8
c000dcb7:	68 ff ff 00 00       	push   0xffff
c000dcbc:	6a 01                	push   0x1
c000dcbe:	e8 ab ff ff ff       	call   c000dc6e <__static_initialization_and_destruction_0(int, int)>
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	83 c4 0c             	add    esp,0xc
c000dcc9:	c3                   	ret    

c000dcca <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000dcca:	53                   	push   ebx
c000dccb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dccf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dcd3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000dcd9:	89 c8                	mov    eax,ecx
c000dcdb:	d1 e8                	shr    eax,1
c000dcdd:	03 05 e8 2a 02 c0    	add    eax,DWORD PTR ds:0xc0022ae8
c000dce3:	83 e1 01             	and    ecx,0x1
c000dce6:	8a 10                	mov    dl,BYTE PTR [eax]
c000dce8:	75 09                	jne    c000dcf3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000dcea:	83 e2 f0             	and    edx,0xfffffff0
c000dced:	09 da                	or     edx,ebx
c000dcef:	88 10                	mov    BYTE PTR [eax],dl
c000dcf1:	5b                   	pop    ebx
c000dcf2:	c3                   	ret    
c000dcf3:	c1 e3 04             	shl    ebx,0x4
c000dcf6:	83 e2 0f             	and    edx,0xf
c000dcf9:	09 da                	or     edx,ebx
c000dcfb:	88 10                	mov    BYTE PTR [eax],dl
c000dcfd:	5b                   	pop    ebx
c000dcfe:	c3                   	ret    

c000dcff <Virt::getPageState(unsigned long)>:
c000dcff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd03:	8b 0d e8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ae8
c000dd09:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000dd0f:	89 d0                	mov    eax,edx
c000dd11:	d1 e8                	shr    eax,1
c000dd13:	83 e2 01             	and    edx,0x1
c000dd16:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000dd19:	75 04                	jne    c000dd1f <Virt::getPageState(unsigned long)+0x20>
c000dd1b:	83 e0 0f             	and    eax,0xf
c000dd1e:	c3                   	ret    
c000dd1f:	c0 e8 04             	shr    al,0x4
c000dd22:	c3                   	ret    

c000dd23 <Virt::allocateKernelVirtualPages(int)>:
c000dd23:	55                   	push   ebp
c000dd24:	31 ed                	xor    ebp,ebp
c000dd26:	57                   	push   edi
c000dd27:	56                   	push   esi
c000dd28:	53                   	push   ebx
c000dd29:	31 db                	xor    ebx,ebx
c000dd2b:	83 ec 1c             	sub    esp,0x1c
c000dd2e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd32:	8b 3d e4 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022ae4
c000dd38:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000dd3d:	57                   	push   edi
c000dd3e:	e8 bc ff ff ff       	call   c000dcff <Virt::getPageState(unsigned long)>
c000dd43:	5a                   	pop    edx
c000dd44:	84 c0                	test   al,al
c000dd46:	75 3a                	jne    c000dd82 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000dd48:	85 db                	test   ebx,ebx
c000dd4a:	75 02                	jne    c000dd4e <Virt::allocateKernelVirtualPages(int)+0x2b>
c000dd4c:	89 fd                	mov    ebp,edi
c000dd4e:	43                   	inc    ebx
c000dd4f:	39 f3                	cmp    ebx,esi
c000dd51:	74 5a                	je     c000ddad <Virt::allocateKernelVirtualPages(int)+0x8a>
c000dd53:	47                   	inc    edi
c000dd54:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dd5a:	76 31                	jbe    c000dd8d <Virt::allocateKernelVirtualPages(int)+0x6a>
c000dd5c:	c7 05 e4 2a 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022ae4,0xc8000
c000dd66:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd6b:	75 28                	jne    c000dd95 <Virt::allocateKernelVirtualPages(int)+0x72>
c000dd6d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000dd72:	bf 00 80 0c 00       	mov    edi,0xc8000
c000dd77:	57                   	push   edi
c000dd78:	e8 82 ff ff ff       	call   c000dcff <Virt::getPageState(unsigned long)>
c000dd7d:	5a                   	pop    edx
c000dd7e:	84 c0                	test   al,al
c000dd80:	74 c6                	je     c000dd48 <Virt::allocateKernelVirtualPages(int)+0x25>
c000dd82:	31 db                	xor    ebx,ebx
c000dd84:	47                   	inc    edi
c000dd85:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dd8b:	77 cf                	ja     c000dd5c <Virt::allocateKernelVirtualPages(int)+0x39>
c000dd8d:	89 3d e4 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae4,edi
c000dd93:	eb a8                	jmp    c000dd3d <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dd95:	83 ec 0c             	sub    esp,0xc
c000dd98:	68 68 06 02 c0       	push   0xc0020668
c000dd9d:	e8 96 6e 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000dda2:	8b 3d e4 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022ae4
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	eb 90                	jmp    c000dd3d <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ddad:	89 2d e4 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae4,ebp
c000ddb3:	4b                   	dec    ebx
c000ddb4:	74 5f                	je     c000de15 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ddb6:	85 f6                	test   esi,esi
c000ddb8:	74 3d                	je     c000ddf7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ddba:	89 e8                	mov    eax,ebp
c000ddbc:	31 db                	xor    ebx,ebx
c000ddbe:	8d 7e ff             	lea    edi,[esi-0x1]
c000ddc1:	eb 14                	jmp    c000ddd7 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ddc3:	6a 01                	push   0x1
c000ddc5:	43                   	inc    ebx
c000ddc6:	50                   	push   eax
c000ddc7:	e8 fe fe ff ff       	call   c000dcca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ddcc:	58                   	pop    eax
c000ddcd:	39 f3                	cmp    ebx,esi
c000ddcf:	5a                   	pop    edx
c000ddd0:	74 25                	je     c000ddf7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ddd2:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c000ddd7:	8d 50 01             	lea    edx,[eax+0x1]
c000ddda:	85 db                	test   ebx,ebx
c000dddc:	89 15 e4 2a 02 c0    	mov    DWORD PTR ds:0xc0022ae4,edx
c000dde2:	74 20                	je     c000de04 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000dde4:	39 df                	cmp    edi,ebx
c000dde6:	75 db                	jne    c000ddc3 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000dde8:	6a 03                	push   0x3
c000ddea:	43                   	inc    ebx
c000ddeb:	50                   	push   eax
c000ddec:	e8 d9 fe ff ff       	call   c000dcca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ddf1:	59                   	pop    ecx
c000ddf2:	39 f3                	cmp    ebx,esi
c000ddf4:	58                   	pop    eax
c000ddf5:	75 db                	jne    c000ddd2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000ddf7:	83 c4 1c             	add    esp,0x1c
c000ddfa:	89 e8                	mov    eax,ebp
c000ddfc:	5b                   	pop    ebx
c000ddfd:	c1 e0 0c             	shl    eax,0xc
c000de00:	5e                   	pop    esi
c000de01:	5f                   	pop    edi
c000de02:	5d                   	pop    ebp
c000de03:	c3                   	ret    
c000de04:	6a 02                	push   0x2
c000de06:	bb 01 00 00 00       	mov    ebx,0x1
c000de0b:	50                   	push   eax
c000de0c:	e8 b9 fe ff ff       	call   c000dcca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de11:	58                   	pop    eax
c000de12:	5a                   	pop    edx
c000de13:	eb bd                	jmp    c000ddd2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de15:	6a 04                	push   0x4
c000de17:	8d 45 01             	lea    eax,[ebp+0x1]
c000de1a:	55                   	push   ebp
c000de1b:	a3 e4 2a 02 c0       	mov    ds:0xc0022ae4,eax
c000de20:	e8 a5 fe ff ff       	call   c000dcca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de25:	59                   	pop    ecx
c000de26:	89 e8                	mov    eax,ebp
c000de28:	5b                   	pop    ebx
c000de29:	c1 e0 0c             	shl    eax,0xc
c000de2c:	83 c4 1c             	add    esp,0x1c
c000de2f:	5b                   	pop    ebx
c000de30:	5e                   	pop    esi
c000de31:	5f                   	pop    edi
c000de32:	5d                   	pop    ebp
c000de33:	c3                   	ret    

c000de34 <Virt::virtualMemorySetup()>:
c000de34:	53                   	push   ebx
c000de35:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000de3a:	83 ec 08             	sub    esp,0x8
c000de3d:	6a 0f                	push   0xf
c000de3f:	53                   	push   ebx
c000de40:	43                   	inc    ebx
c000de41:	e8 84 fe ff ff       	call   c000dcca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de46:	59                   	pop    ecx
c000de47:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000de4d:	58                   	pop    eax
c000de4e:	75 ed                	jne    c000de3d <Virt::virtualMemorySetup()+0x9>
c000de50:	83 ec 08             	sub    esp,0x8
c000de53:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000de58:	68 00 00 00 c8       	push   0xc8000000
c000de5d:	68 13 08 02 c0       	push   0xc0020813
c000de62:	e8 3c 11 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000de67:	58                   	pop    eax
c000de68:	5a                   	pop    edx
c000de69:	68 00 f0 ff ef       	push   0xeffff000
c000de6e:	68 27 08 02 c0       	push   0xc0020827
c000de73:	e8 2b 11 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000de78:	83 c4 10             	add    esp,0x10
c000de7b:	83 ec 08             	sub    esp,0x8
c000de7e:	6a 00                	push   0x0
c000de80:	53                   	push   ebx
c000de81:	43                   	inc    ebx
c000de82:	e8 43 fe ff ff       	call   c000dcca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de87:	83 c4 10             	add    esp,0x10
c000de8a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000de90:	75 e9                	jne    c000de7b <Virt::virtualMemorySetup()+0x47>
c000de92:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000de97:	83 ec 08             	sub    esp,0x8
c000de9a:	6a 0f                	push   0xf
c000de9c:	53                   	push   ebx
c000de9d:	43                   	inc    ebx
c000de9e:	e8 27 fe ff ff       	call   c000dcca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dea3:	83 c4 10             	add    esp,0x10
c000dea6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000deac:	75 e9                	jne    c000de97 <Virt::virtualMemorySetup()+0x63>
c000deae:	83 c4 08             	add    esp,0x8
c000deb1:	5b                   	pop    ebx
c000deb2:	c3                   	ret    

c000deb3 <Virt::getAKernelVAS()>:
c000deb3:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c000deb8:	c3                   	ret    

c000deb9 <Virt::setupPageSwapping(int)>:
c000deb9:	57                   	push   edi
c000deba:	56                   	push   esi
c000debb:	53                   	push   ebx
c000debc:	83 ec 1c             	sub    esp,0x1c
c000debf:	68 14 01 00 00       	push   0x114
c000dec4:	e8 eb 0f 00 00       	call   c000eeb4 <operator new(unsigned long)>
c000dec9:	83 c4 0c             	add    esp,0xc
c000decc:	89 c6                	mov    esi,eax
c000dece:	ff 35 94 4a 02 c0    	push   DWORD PTR ds:0xc0024a94
c000ded4:	68 3b 08 02 c0       	push   0xc002083b
c000ded9:	50                   	push   eax
c000deda:	e8 f3 15 00 00       	call   c000f4d2 <File::File(char const*, Process*)>
c000dedf:	89 34 24             	mov    DWORD PTR [esp],esi
c000dee2:	e8 c7 17 00 00       	call   c000f6ae <File::unlink()>
c000dee7:	58                   	pop    eax
c000dee8:	5a                   	pop    edx
c000dee9:	6a 12                	push   0x12
c000deeb:	56                   	push   esi
c000deec:	e8 45 16 00 00       	call   c000f536 <File::open(FileOpenMode)>
c000def1:	83 c4 10             	add    esp,0x10
c000def4:	85 c0                	test   eax,eax
c000def6:	0f 85 bf 00 00 00    	jne    c000dfbb <Virt::setupPageSwapping(int)+0x102>
c000defc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000df00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df08:	c1 e3 08             	shl    ebx,0x8
c000df0b:	83 ec 0c             	sub    esp,0xc
c000df0e:	68 00 00 01 00       	push   0x10000
c000df13:	e8 06 dd ff ff       	call   c000bc1e <malloc>
c000df18:	83 c4 0c             	add    esp,0xc
c000df1b:	89 c7                	mov    edi,eax
c000df1d:	68 00 00 01 00       	push   0x10000
c000df22:	6a 00                	push   0x0
c000df24:	50                   	push   eax
c000df25:	e8 de 26 ff ff       	call   c0000608 <memset>
c000df2a:	83 c4 10             	add    esp,0x10
c000df2d:	85 db                	test   ebx,ebx
c000df2f:	79 03                	jns    c000df34 <Virt::setupPageSwapping(int)+0x7b>
c000df31:	83 c3 0f             	add    ebx,0xf
c000df34:	c1 fb 04             	sar    ebx,0x4
c000df37:	4b                   	dec    ebx
c000df38:	83 fb ff             	cmp    ebx,0xffffffff
c000df3b:	74 4b                	je     c000df88 <Virt::setupPageSwapping(int)+0xcf>
c000df3d:	83 ec 0c             	sub    esp,0xc
c000df40:	8b 06                	mov    eax,DWORD PTR [esi]
c000df42:	8d 54 24 18          	lea    edx,[esp+0x18]
c000df46:	52                   	push   edx
c000df47:	57                   	push   edi
c000df48:	6a 00                	push   0x0
c000df4a:	68 00 00 01 00       	push   0x10000
c000df4f:	56                   	push   esi
c000df50:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df53:	83 c4 20             	add    esp,0x20
c000df56:	85 c0                	test   eax,eax
c000df58:	75 4e                	jne    c000dfa8 <Virt::setupPageSwapping(int)+0xef>
c000df5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df5e:	3d 00 00 01 00       	cmp    eax,0x10000
c000df63:	74 d2                	je     c000df37 <Virt::setupPageSwapping(int)+0x7e>
c000df65:	83 ec 08             	sub    esp,0x8
c000df68:	4b                   	dec    ebx
c000df69:	50                   	push   eax
c000df6a:	68 8e 08 02 c0       	push   0xc002088e
c000df6f:	e8 2f 10 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000df74:	c7 04 24 97 08 02 c0 	mov    DWORD PTR [esp],0xc0020897
c000df7b:	e8 b8 6c 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000df80:	83 c4 10             	add    esp,0x10
c000df83:	83 fb ff             	cmp    ebx,0xffffffff
c000df86:	75 b5                	jne    c000df3d <Virt::setupPageSwapping(int)+0x84>
c000df88:	83 ec 0c             	sub    esp,0xc
c000df8b:	56                   	push   esi
c000df8c:	e8 03 16 00 00       	call   c000f594 <File::close()>
c000df91:	89 3c 24             	mov    DWORD PTR [esp],edi
c000df94:	e8 a5 dc ff ff       	call   c000bc3e <rfree>
c000df99:	89 34 24             	mov    DWORD PTR [esp],esi
c000df9c:	8b 06                	mov    eax,DWORD PTR [esi]
c000df9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dfa1:	83 c4 20             	add    esp,0x20
c000dfa4:	5b                   	pop    ebx
c000dfa5:	5e                   	pop    esi
c000dfa6:	5f                   	pop    edi
c000dfa7:	c3                   	ret    
c000dfa8:	83 ec 08             	sub    esp,0x8
c000dfab:	50                   	push   eax
c000dfac:	68 76 08 02 c0       	push   0xc0020876
c000dfb1:	e8 ed 0f 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000dfb6:	83 c4 10             	add    esp,0x10
c000dfb9:	eb 9f                	jmp    c000df5a <Virt::setupPageSwapping(int)+0xa1>
c000dfbb:	83 ec 08             	sub    esp,0x8
c000dfbe:	50                   	push   eax
c000dfbf:	68 52 08 02 c0       	push   0xc0020852
c000dfc4:	e8 da 0f 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000dfc9:	c7 04 24 5b 08 02 c0 	mov    DWORD PTR [esp],0xc002085b
c000dfd0:	e8 63 6c 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000dfd5:	83 c4 10             	add    esp,0x10
c000dfd8:	e9 1f ff ff ff       	jmp    c000defc <Virt::setupPageSwapping(int)+0x43>
c000dfdd:	90                   	nop

c000dfde <VAS::VAS()>:
c000dfde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfe2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dfe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfed:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c000dff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dff6:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000dffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dffe:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e001:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e005:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e00c:	90                   	nop
c000e00d:	c3                   	ret    

c000e00e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e00e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e012:	89 c2                	mov    edx,eax
c000e014:	c1 e8 0a             	shr    eax,0xa
c000e017:	c1 ea 16             	shr    edx,0x16
c000e01a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e01f:	19 c9                	sbb    ecx,ecx
c000e021:	c1 e2 0c             	shl    edx,0xc
c000e024:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e02a:	25 fc 0f 00 00       	and    eax,0xffc
c000e02f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e036:	01 d0                	add    eax,edx
c000e038:	c3                   	ret    
c000e039:	90                   	nop

c000e03a <VAS::getPageTableEntry(unsigned long)>:
c000e03a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e03e:	89 ca                	mov    edx,ecx
c000e040:	c1 e9 0a             	shr    ecx,0xa
c000e043:	c1 ea 16             	shr    edx,0x16
c000e046:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e04c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e052:	c1 e0 0c             	shl    eax,0xc
c000e055:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e058:	c3                   	ret    

c000e059 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e059:	57                   	push   edi
c000e05a:	56                   	push   esi
c000e05b:	be 01 00 00 00       	mov    esi,0x1
c000e060:	53                   	push   ebx
c000e061:	83 ec 10             	sub    esp,0x10
c000e064:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e068:	c1 eb 0c             	shr    ebx,0xc
c000e06b:	eb 3f                	jmp    c000e0ac <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e06d:	e8 41 fe ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c000e072:	83 ec 08             	sub    esp,0x8
c000e075:	57                   	push   edi
c000e076:	50                   	push   eax
c000e077:	e8 be ff ff ff       	call   c000e03a <VAS::getPageTableEntry(unsigned long)>
c000e07c:	83 c4 10             	add    esp,0x10
c000e07f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e081:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e085:	f6 c4 04             	test   ah,0x4
c000e088:	75 5f                	jne    c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e08a:	80 fa 04             	cmp    dl,0x4
c000e08d:	74 78                	je     c000e107 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e08f:	80 fa 02             	cmp    dl,0x2
c000e092:	0f 84 88 00 00 00    	je     c000e120 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e098:	80 fa 03             	cmp    dl,0x3
c000e09b:	0f 84 ad 00 00 00    	je     c000e14e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e0a1:	fe ca                	dec    dl
c000e0a3:	0f 84 92 00 00 00    	je     c000e13b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e0a9:	43                   	inc    ebx
c000e0aa:	31 f6                	xor    esi,esi
c000e0ac:	53                   	push   ebx
c000e0ad:	e8 4d fc ff ff       	call   c000dcff <Virt::getPageState(unsigned long)>
c000e0b2:	5f                   	pop    edi
c000e0b3:	89 df                	mov    edi,ebx
c000e0b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e0b9:	c1 e7 0c             	shl    edi,0xc
c000e0bc:	84 c0                	test   al,al
c000e0be:	75 ad                	jne    c000e06d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e0c0:	83 ec 0c             	sub    esp,0xc
c000e0c3:	68 9d 08 02 c0       	push   0xc002089d
c000e0c8:	e8 6b 6b 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000e0cd:	e8 e1 fd ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c000e0d2:	5a                   	pop    edx
c000e0d3:	59                   	pop    ecx
c000e0d4:	57                   	push   edi
c000e0d5:	50                   	push   eax
c000e0d6:	e8 5f ff ff ff       	call   c000e03a <VAS::getPageTableEntry(unsigned long)>
c000e0db:	83 c4 10             	add    esp,0x10
c000e0de:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0e0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e0e4:	f6 c4 04             	test   ah,0x4
c000e0e7:	74 c0                	je     c000e0a9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e0e9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e0ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e0f2:	83 ec 0c             	sub    esp,0xc
c000e0f5:	50                   	push   eax
c000e0f6:	e8 43 e0 ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e0fb:	83 c4 10             	add    esp,0x10
c000e0fe:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e102:	80 fa 04             	cmp    dl,0x4
c000e105:	75 88                	jne    c000e08f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e107:	89 f0                	mov    eax,esi
c000e109:	84 c0                	test   al,al
c000e10b:	75 47                	jne    c000e154 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e10d:	c7 44 24 20 88 06 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020688
c000e115:	83 c4 10             	add    esp,0x10
c000e118:	5b                   	pop    ebx
c000e119:	5e                   	pop    esi
c000e11a:	5f                   	pop    edi
c000e11b:	e9 18 6b 00 00       	jmp    c0014c38 <Krnl::panic(char const*)>
c000e120:	89 f0                	mov    eax,esi
c000e122:	84 c0                	test   al,al
c000e124:	75 15                	jne    c000e13b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e126:	83 ec 0c             	sub    esp,0xc
c000e129:	68 b9 08 02 c0       	push   0xc00208b9
c000e12e:	e8 05 6b 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000e133:	83 c4 10             	add    esp,0x10
c000e136:	e9 6e ff ff ff       	jmp    c000e0a9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e13b:	83 ec 08             	sub    esp,0x8
c000e13e:	6a 00                	push   0x0
c000e140:	53                   	push   ebx
c000e141:	e8 84 fb ff ff       	call   c000dcca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e146:	83 c4 10             	add    esp,0x10
c000e149:	e9 5b ff ff ff       	jmp    c000e0a9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e14e:	89 f0                	mov    eax,esi
c000e150:	84 c0                	test   al,al
c000e152:	75 15                	jne    c000e169 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e154:	83 ec 08             	sub    esp,0x8
c000e157:	6a 00                	push   0x0
c000e159:	53                   	push   ebx
c000e15a:	e8 6b fb ff ff       	call   c000dcca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e15f:	83 c4 10             	add    esp,0x10
c000e162:	83 c4 10             	add    esp,0x10
c000e165:	5b                   	pop    ebx
c000e166:	5e                   	pop    esi
c000e167:	5f                   	pop    edi
c000e168:	c3                   	ret    
c000e169:	c7 44 24 20 d5 08 02 c0 	mov    DWORD PTR [esp+0x20],0xc00208d5
c000e171:	83 c4 10             	add    esp,0x10
c000e174:	5b                   	pop    ebx
c000e175:	5e                   	pop    esi
c000e176:	5f                   	pop    edi
c000e177:	e9 bc 6a 00 00       	jmp    c0014c38 <Krnl::panic(char const*)>

c000e17c <VAS::freeAllocatedPages(unsigned long)>:
c000e17c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e184:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e188:	74 09                	je     c000e193 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e18a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e18e:	e9 c6 fe ff ff       	jmp    c000e059 <Virt::freeKernelVirtualPages(unsigned long)>
c000e193:	c7 44 24 04 ac 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206ac
c000e19b:	e9 03 0e 00 00       	jmp    c000efa3 <Dbg::kprintf(char const*, ...)>

c000e1a0 <VAS::virtualToPhysical(unsigned long)>:
c000e1a0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1a4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1a8:	e8 8d fe ff ff       	call   c000e03a <VAS::getPageTableEntry(unsigned long)>
c000e1ad:	5a                   	pop    edx
c000e1ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1b0:	59                   	pop    ecx
c000e1b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e1b6:	c3                   	ret    
c000e1b7:	90                   	nop

c000e1b8 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e1b8:	83 ec 0c             	sub    esp,0xc
c000e1bb:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e1c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e1c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1cb:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e1ce:	19 c0                	sbb    eax,eax
c000e1d0:	83 ca 03             	or     edx,0x3
c000e1d3:	83 e0 fc             	and    eax,0xfffffffc
c000e1d6:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e1dd:	e8 e3 07 01 00       	call   c001e9c5 <CPU::readCR3()>
c000e1e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e1e6:	83 c4 0c             	add    esp,0xc
c000e1e9:	e9 e9 07 01 00       	jmp    c001e9d7 <CPU::writeCR3(unsigned long)>

c000e1ee <VAS::~VAS()>:
c000e1ee:	83 ec 2c             	sub    esp,0x2c
c000e1f1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e1f9:	e8 58 99 00 00       	call   c0017b56 <lockScheduler()>
c000e1fe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e203:	8b 00                	mov    eax,DWORD PTR [eax]
c000e205:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e208:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e20e:	83 ec 04             	sub    esp,0x4
c000e211:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e215:	6a 01                	push   0x1
c000e217:	50                   	push   eax
c000e218:	e8 9b ff ff ff       	call   c000e1b8 <VAS::mapOtherVASIn(bool, VAS*)>
c000e21d:	83 c4 10             	add    esp,0x10
c000e220:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e228:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e230:	0f 8f d7 00 00 00    	jg     c000e30d <VAS::~VAS()+0x11f>
c000e236:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e23a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e23d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e241:	c1 e2 02             	shl    edx,0x2
c000e244:	01 d0                	add    eax,edx
c000e246:	8b 00                	mov    eax,DWORD PTR [eax]
c000e248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e250:	83 e0 01             	and    eax,0x1
c000e253:	0f 84 ab 00 00 00    	je     c000e304 <VAS::~VAS()+0x116>
c000e259:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e261:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e269:	7f 75                	jg     c000e2e0 <VAS::~VAS()+0xf2>
c000e26b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e26f:	c1 e0 0a             	shl    eax,0xa
c000e272:	89 c2                	mov    edx,eax
c000e274:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e278:	01 d0                	add    eax,edx
c000e27a:	c1 e0 0c             	shl    eax,0xc
c000e27d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e281:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e286:	8b 00                	mov    eax,DWORD PTR [eax]
c000e288:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e28b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e291:	83 ec 04             	sub    esp,0x4
c000e294:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e298:	6a 01                	push   0x1
c000e29a:	50                   	push   eax
c000e29b:	e8 6e fd ff ff       	call   c000e00e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e2a0:	83 c4 10             	add    esp,0x10
c000e2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e2b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2b5:	25 01 04 00 00       	and    eax,0x401
c000e2ba:	3d 01 04 00 00       	cmp    eax,0x401
c000e2bf:	75 19                	jne    c000e2da <VAS::~VAS()+0xec>
c000e2c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e2ca:	83 ec 0c             	sub    esp,0xc
c000e2cd:	50                   	push   eax
c000e2ce:	e8 6b de ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e2d3:	83 c4 10             	add    esp,0x10
c000e2d6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e2da:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e2de:	eb 81                	jmp    c000e261 <VAS::~VAS()+0x73>
c000e2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e4:	25 00 04 00 00       	and    eax,0x400
c000e2e9:	74 19                	je     c000e304 <VAS::~VAS()+0x116>
c000e2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e2f4:	83 ec 0c             	sub    esp,0xc
c000e2f7:	50                   	push   eax
c000e2f8:	e8 41 de ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e2fd:	83 c4 10             	add    esp,0x10
c000e300:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e304:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e308:	e9 1b ff ff ff       	jmp    c000e228 <VAS::~VAS()+0x3a>
c000e30d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e311:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e314:	83 ec 0c             	sub    esp,0xc
c000e317:	50                   	push   eax
c000e318:	e8 3c fd ff ff       	call   c000e059 <Virt::freeKernelVirtualPages(unsigned long)>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e324:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e327:	83 ec 0c             	sub    esp,0xc
c000e32a:	50                   	push   eax
c000e32b:	e8 0e de ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e337:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e33b:	c1 e0 02             	shl    eax,0x2
c000e33e:	83 ec 08             	sub    esp,0x8
c000e341:	50                   	push   eax
c000e342:	68 d0 06 02 c0       	push   0xc00206d0
c000e347:	e8 57 0c 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e34c:	83 c4 10             	add    esp,0x10
c000e34f:	e8 04 98 00 00       	call   c0017b58 <unlockScheduler()>
c000e354:	90                   	nop
c000e355:	83 c4 2c             	add    esp,0x2c
c000e358:	c3                   	ret    
c000e359:	90                   	nop

c000e35a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e35a:	55                   	push   ebp
c000e35b:	57                   	push   edi
c000e35c:	56                   	push   esi
c000e35d:	53                   	push   ebx
c000e35e:	83 ec 1c             	sub    esp,0x1c
c000e361:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e365:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e369:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e36f:	77 08                	ja     c000e379 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e371:	0f 20 d8             	mov    eax,cr3
c000e374:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e377:	75 47                	jne    c000e3c0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e379:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e37d:	09 d8                	or     eax,ebx
c000e37f:	a9 ff 0f 00 00       	test   eax,0xfff
c000e384:	75 57                	jne    c000e3dd <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e386:	89 de                	mov    esi,ebx
c000e388:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e38b:	c1 ee 16             	shr    esi,0x16
c000e38e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e395:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e399:	74 54                	je     c000e3ef <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e39b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e39f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e3a5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e3a9:	c1 e6 0c             	shl    esi,0xc
c000e3ac:	c1 eb 0a             	shr    ebx,0xa
c000e3af:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e3b5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e3b8:	83 c4 1c             	add    esp,0x1c
c000e3bb:	5b                   	pop    ebx
c000e3bc:	5e                   	pop    esi
c000e3bd:	5f                   	pop    edi
c000e3be:	5d                   	pop    ebp
c000e3bf:	c3                   	ret    
c000e3c0:	83 ec 0c             	sub    esp,0xc
c000e3c3:	68 f0 06 02 c0       	push   0xc00206f0
c000e3c8:	e8 d6 0b 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e3cd:	83 c4 10             	add    esp,0x10
c000e3d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e3d4:	09 d8                	or     eax,ebx
c000e3d6:	a9 ff 0f 00 00       	test   eax,0xfff
c000e3db:	74 a9                	je     c000e386 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e3dd:	83 ec 0c             	sub    esp,0xc
c000e3e0:	68 58 07 02 c0       	push   0xc0020758
c000e3e5:	e8 4e 68 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000e3ea:	83 c4 10             	add    esp,0x10
c000e3ed:	eb 97                	jmp    c000e386 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e3ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3f3:	e8 d0 dd ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e3f8:	89 c5                	mov    ebp,eax
c000e3fa:	e8 b4 fa ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c000e3ff:	83 ec 0c             	sub    esp,0xc
c000e402:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e406:	6a 01                	push   0x1
c000e408:	e8 16 f9 ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c000e40d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e414:	6a 01                	push   0x1
c000e416:	50                   	push   eax
c000e417:	55                   	push   ebp
c000e418:	81 cd 07 04 00 00    	or     ebp,0x407
c000e41e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e422:	51                   	push   ecx
c000e423:	e8 1e 02 00 00       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e428:	83 c4 1c             	add    esp,0x1c
c000e42b:	68 00 10 00 00       	push   0x1000
c000e430:	6a 00                	push   0x0
c000e432:	50                   	push   eax
c000e433:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e437:	e8 cc 21 ff ff       	call   c0000608 <memset>
c000e43c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e440:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e443:	e8 11 fc ff ff       	call   c000e059 <Virt::freeKernelVirtualPages(unsigned long)>
c000e448:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e44c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e44f:	83 c4 10             	add    esp,0x10
c000e452:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e455:	e9 41 ff ff ff       	jmp    c000e39b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e45a <VAS::allocatePages(int, int)>:
c000e45a:	55                   	push   ebp
c000e45b:	57                   	push   edi
c000e45c:	56                   	push   esi
c000e45d:	53                   	push   ebx
c000e45e:	83 ec 1c             	sub    esp,0x1c
c000e461:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e465:	e8 c8 5a 00 00       	call   c0013f32 <thisCPU()>
c000e46a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e470:	83 e0 01             	and    eax,0x1
c000e473:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e477:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e47b:	0f 85 d7 00 00 00    	jne    c000e558 <VAS::allocatePages(int, int)+0xfe>
c000e481:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e484:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e488:	85 c0                	test   eax,eax
c000e48a:	0f 84 ac 00 00 00    	je     c000e53c <VAS::allocatePages(int, int)+0xe2>
c000e490:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e494:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e498:	c1 e6 0c             	shl    esi,0xc
c000e49b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e49f:	85 c0                	test   eax,eax
c000e4a1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e4a4:	7e 33                	jle    c000e4d9 <VAS::allocatePages(int, int)+0x7f>
c000e4a6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e4aa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e4ae:	81 cd 00 04 00 00    	or     ebp,0x400
c000e4b4:	e8 0f dd ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e4b9:	55                   	push   ebp
c000e4ba:	53                   	push   ebx
c000e4bb:	50                   	push   eax
c000e4bc:	57                   	push   edi
c000e4bd:	e8 98 fe ff ff       	call   c000e35a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e4c2:	83 c4 10             	add    esp,0x10
c000e4c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e4ca:	74 03                	je     c000e4cf <VAS::allocatePages(int, int)+0x75>
c000e4cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e4cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e4d5:	39 de                	cmp    esi,ebx
c000e4d7:	75 db                	jne    c000e4b4 <VAS::allocatePages(int, int)+0x5a>
c000e4d9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e4de:	74 3f                	je     c000e51f <VAS::allocatePages(int, int)+0xc5>
c000e4e0:	c1 ee 0a             	shr    esi,0xa
c000e4e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e4e7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e4ed:	c1 eb 0a             	shr    ebx,0xa
c000e4f0:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e4f6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e4fc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e502:	39 f3                	cmp    ebx,esi
c000e504:	77 0d                	ja     c000e513 <VAS::allocatePages(int, int)+0xb9>
c000e506:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e509:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e50f:	39 de                	cmp    esi,ebx
c000e511:	73 f3                	jae    c000e506 <VAS::allocatePages(int, int)+0xac>
c000e513:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e517:	83 c4 1c             	add    esp,0x1c
c000e51a:	5b                   	pop    ebx
c000e51b:	5e                   	pop    esi
c000e51c:	5f                   	pop    edi
c000e51d:	5d                   	pop    ebp
c000e51e:	c3                   	ret    
c000e51f:	e8 a1 04 01 00       	call   c001e9c5 <CPU::readCR3()>
c000e524:	83 ec 0c             	sub    esp,0xc
c000e527:	50                   	push   eax
c000e528:	e8 aa 04 01 00       	call   c001e9d7 <CPU::writeCR3(unsigned long)>
c000e52d:	83 c4 10             	add    esp,0x10
c000e530:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e534:	83 c4 1c             	add    esp,0x1c
c000e537:	5b                   	pop    ebx
c000e538:	5e                   	pop    esi
c000e539:	5f                   	pop    edi
c000e53a:	5d                   	pop    ebp
c000e53b:	c3                   	ret    
c000e53c:	83 ec 0c             	sub    esp,0xc
c000e53f:	68 7c 07 02 c0       	push   0xc002077c
c000e544:	e8 ef 66 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000e549:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e54c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e550:	83 c4 10             	add    esp,0x10
c000e553:	e9 38 ff ff ff       	jmp    c000e490 <VAS::allocatePages(int, int)+0x36>
c000e558:	83 ec 0c             	sub    esp,0xc
c000e55b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e55f:	e8 bf f7 ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c000e564:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e568:	83 c4 10             	add    esp,0x10
c000e56b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e570:	0f 87 94 00 00 00    	ja     c000e60a <VAS::allocatePages(int, int)+0x1b0>
c000e576:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e57a:	85 d2                	test   edx,edx
c000e57c:	7e 3c                	jle    c000e5ba <VAS::allocatePages(int, int)+0x160>
c000e57e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e582:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e586:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e58a:	c1 e5 0c             	shl    ebp,0xc
c000e58d:	81 ce 00 04 00 00    	or     esi,0x400
c000e593:	01 dd                	add    ebp,ebx
c000e595:	e8 2e dc ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e59a:	56                   	push   esi
c000e59b:	53                   	push   ebx
c000e59c:	50                   	push   eax
c000e59d:	57                   	push   edi
c000e59e:	e8 b7 fd ff ff       	call   c000e35a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e5a3:	83 c4 10             	add    esp,0x10
c000e5a6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5ab:	74 03                	je     c000e5b0 <VAS::allocatePages(int, int)+0x156>
c000e5ad:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e5b0:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e5b6:	39 dd                	cmp    ebp,ebx
c000e5b8:	75 db                	jne    c000e595 <VAS::allocatePages(int, int)+0x13b>
c000e5ba:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5bf:	0f 84 5a ff ff ff    	je     c000e51f <VAS::allocatePages(int, int)+0xc5>
c000e5c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e5cd:	89 d3                	mov    ebx,edx
c000e5cf:	c1 e0 0c             	shl    eax,0xc
c000e5d2:	c1 eb 0a             	shr    ebx,0xa
c000e5d5:	01 d0                	add    eax,edx
c000e5d7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e5dd:	c1 e8 0a             	shr    eax,0xa
c000e5e0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e5e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5eb:	2d 00 00 40 00       	sub    eax,0x400000
c000e5f0:	39 c3                	cmp    ebx,eax
c000e5f2:	0f 87 1b ff ff ff    	ja     c000e513 <VAS::allocatePages(int, int)+0xb9>
c000e5f8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e5fb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e601:	39 d8                	cmp    eax,ebx
c000e603:	73 f3                	jae    c000e5f8 <VAS::allocatePages(int, int)+0x19e>
c000e605:	e9 09 ff ff ff       	jmp    c000e513 <VAS::allocatePages(int, int)+0xb9>
c000e60a:	e8 23 59 00 00       	call   c0013f32 <thisCPU()>
c000e60f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e616:	0f 84 5a ff ff ff    	je     c000e576 <VAS::allocatePages(int, int)+0x11c>
c000e61c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e624:	e9 4d ff ff ff       	jmp    c000e576 <VAS::allocatePages(int, int)+0x11c>
c000e629:	90                   	nop

c000e62a <VAS::setCPUSpecific(unsigned long)>:
c000e62a:	83 ec 0c             	sub    esp,0xc
c000e62d:	6a 05                	push   0x5
c000e62f:	68 00 00 40 c2       	push   0xc2400000
c000e634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e63c:	e8 19 fd ff ff       	call   c000e35a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e641:	83 c4 1c             	add    esp,0x1c
c000e644:	c3                   	ret    
c000e645:	90                   	nop

c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e646:	55                   	push   ebp
c000e647:	57                   	push   edi
c000e648:	56                   	push   esi
c000e649:	53                   	push   ebx
c000e64a:	83 ec 1c             	sub    esp,0x1c
c000e64d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e651:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e655:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e659:	e8 d4 58 00 00       	call   c0013f32 <thisCPU()>
c000e65e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e664:	83 e0 01             	and    eax,0x1
c000e667:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e66b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e66f:	85 c0                	test   eax,eax
c000e671:	7e 39                	jle    c000e6ac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e673:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e677:	89 f3                	mov    ebx,esi
c000e679:	c1 e0 0c             	shl    eax,0xc
c000e67c:	01 f0                	add    eax,esi
c000e67e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e682:	55                   	push   ebp
c000e683:	53                   	push   ebx
c000e684:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e688:	29 f0                	sub    eax,esi
c000e68a:	01 d8                	add    eax,ebx
c000e68c:	50                   	push   eax
c000e68d:	57                   	push   edi
c000e68e:	e8 c7 fc ff ff       	call   c000e35a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e693:	83 c4 10             	add    esp,0x10
c000e696:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e69b:	74 03                	je     c000e6a0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e69d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e6a0:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e6a6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e6aa:	75 d6                	jne    c000e682 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e6ac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e6b1:	74 42                	je     c000e6f5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e6b3:	89 f3                	mov    ebx,esi
c000e6b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6b9:	c1 eb 0a             	shr    ebx,0xa
c000e6bc:	c1 e0 0c             	shl    eax,0xc
c000e6bf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e6c5:	01 f0                	add    eax,esi
c000e6c7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e6cd:	c1 e8 0a             	shr    eax,0xa
c000e6d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e6d5:	2d 00 00 40 00       	sub    eax,0x400000
c000e6da:	39 c3                	cmp    ebx,eax
c000e6dc:	77 0d                	ja     c000e6eb <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e6de:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e6e1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e6e7:	39 d8                	cmp    eax,ebx
c000e6e9:	73 f3                	jae    c000e6de <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e6eb:	83 c4 1c             	add    esp,0x1c
c000e6ee:	89 f0                	mov    eax,esi
c000e6f0:	5b                   	pop    ebx
c000e6f1:	5e                   	pop    esi
c000e6f2:	5f                   	pop    edi
c000e6f3:	5d                   	pop    ebp
c000e6f4:	c3                   	ret    
c000e6f5:	e8 cb 02 01 00       	call   c001e9c5 <CPU::readCR3()>
c000e6fa:	83 ec 0c             	sub    esp,0xc
c000e6fd:	50                   	push   eax
c000e6fe:	e8 d4 02 01 00       	call   c001e9d7 <CPU::writeCR3(unsigned long)>
c000e703:	89 f0                	mov    eax,esi
c000e705:	83 c4 10             	add    esp,0x10
c000e708:	83 c4 1c             	add    esp,0x1c
c000e70b:	5b                   	pop    ebx
c000e70c:	5e                   	pop    esi
c000e70d:	5f                   	pop    edi
c000e70e:	5d                   	pop    ebp
c000e70f:	c3                   	ret    

c000e710 <VAS::VAS(VAS*)>:
c000e710:	53                   	push   ebx
c000e711:	83 ec 38             	sub    esp,0x38
c000e714:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e718:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e71f:	e8 59 94 00 00       	call   c0017b7d <lockStuff()>
c000e724:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e728:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e72b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e72f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e732:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e736:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c000e739:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e73d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e740:	e8 83 da ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e745:	89 c2                	mov    edx,eax
c000e747:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e74b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e74e:	e8 60 f7 ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c000e753:	89 c3                	mov    ebx,eax
c000e755:	83 ec 0c             	sub    esp,0xc
c000e758:	6a 01                	push   0x1
c000e75a:	e8 c4 f5 ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c000e75f:	83 c4 10             	add    esp,0x10
c000e762:	89 c2                	mov    edx,eax
c000e764:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e768:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e76b:	83 ec 0c             	sub    esp,0xc
c000e76e:	6a 03                	push   0x3
c000e770:	6a 01                	push   0x1
c000e772:	52                   	push   edx
c000e773:	50                   	push   eax
c000e774:	53                   	push   ebx
c000e775:	e8 cc fe ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e77a:	83 c4 20             	add    esp,0x20
c000e77d:	89 c2                	mov    edx,eax
c000e77f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e783:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e786:	83 ec 04             	sub    esp,0x4
c000e789:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e78d:	6a 01                	push   0x1
c000e78f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e793:	e8 20 fa ff ff       	call   c000e1b8 <VAS::mapOtherVASIn(bool, VAS*)>
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	83 ec 0c             	sub    esp,0xc
c000e79e:	6a 01                	push   0x1
c000e7a0:	e8 7e f5 ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c000e7a5:	83 c4 10             	add    esp,0x10
c000e7a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	6a 01                	push   0x1
c000e7b1:	e8 6d f5 ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c000e7b6:	83 c4 10             	add    esp,0x10
c000e7b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e7bd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e7c5:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c000e7cd:	0f 8f 5e 02 00 00    	jg     c000ea31 <VAS::VAS(VAS*)+0x321>
c000e7d3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e7d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7dd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e7e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7e6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e7ea:	c1 e2 02             	shl    edx,0x2
c000e7ed:	01 d0                	add    eax,edx
c000e7ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e7f5:	83 ec 08             	sub    esp,0x8
c000e7f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e7fc:	68 ef 08 02 c0       	push   0xc00208ef
c000e801:	e8 9d 07 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e806:	83 c4 10             	add    esp,0x10
c000e809:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e80d:	25 01 04 00 00       	and    eax,0x401
c000e812:	3d 01 04 00 00       	cmp    eax,0x401
c000e817:	0f 85 e5 01 00 00    	jne    c000ea02 <VAS::VAS(VAS*)+0x2f2>
c000e81d:	83 ec 0c             	sub    esp,0xc
c000e820:	68 00 09 02 c0       	push   0xc0020900
c000e825:	e8 79 07 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e82a:	83 c4 10             	add    esp,0x10
c000e82d:	e8 96 d9 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e832:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e836:	83 ec 08             	sub    esp,0x8
c000e839:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e83d:	68 16 09 02 c0       	push   0xc0020916
c000e842:	e8 5c 07 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e847:	83 c4 10             	add    esp,0x10
c000e84a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e84e:	25 ff 0f 00 00       	and    eax,0xfff
c000e853:	89 c1                	mov    ecx,eax
c000e855:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e859:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e85c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e860:	c1 e2 02             	shl    edx,0x2
c000e863:	01 c2                	add    edx,eax
c000e865:	89 c8                	mov    eax,ecx
c000e867:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c000e86b:	89 02                	mov    DWORD PTR [edx],eax
c000e86d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000e875:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c000e87d:	0f 8f a5 01 00 00    	jg     c000ea28 <VAS::VAS(VAS*)+0x318>
c000e883:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e887:	c1 e0 0a             	shl    eax,0xa
c000e88a:	89 c2                	mov    edx,eax
c000e88c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e890:	01 d0                	add    eax,edx
c000e892:	c1 e0 0c             	shl    eax,0xc
c000e895:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e899:	83 ec 08             	sub    esp,0x8
c000e89c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e8a4:	e8 91 f7 ff ff       	call   c000e03a <VAS::getPageTableEntry(unsigned long)>
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8b2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e8b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e8bc:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e8c2:	83 ec 04             	sub    esp,0x4
c000e8c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8c9:	6a 01                	push   0x1
c000e8cb:	50                   	push   eax
c000e8cc:	e8 3d f7 ff ff       	call   c000e00e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e8d1:	83 c4 10             	add    esp,0x10
c000e8d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8d8:	83 ec 04             	sub    esp,0x4
c000e8db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8e3:	68 a8 07 02 c0       	push   0xc00207a8
c000e8e8:	e8 b6 06 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e8ed:	83 c4 10             	add    esp,0x10
c000e8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f4:	25 01 04 00 00       	and    eax,0x401
c000e8f9:	3d 01 04 00 00       	cmp    eax,0x401
c000e8fe:	0f 85 db 00 00 00    	jne    c000e9df <VAS::VAS(VAS*)+0x2cf>
c000e904:	83 ec 0c             	sub    esp,0xc
c000e907:	68 25 09 02 c0       	push   0xc0020925
c000e90c:	e8 92 06 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e911:	83 c4 10             	add    esp,0x10
c000e914:	e8 af d8 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e919:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e91d:	83 ec 08             	sub    esp,0x8
c000e920:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e924:	68 34 09 02 c0       	push   0xc0020934
c000e929:	e8 75 06 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e92e:	83 c4 10             	add    esp,0x10
c000e931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e935:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e93a:	83 ec 08             	sub    esp,0x8
c000e93d:	50                   	push   eax
c000e93e:	68 48 09 02 c0       	push   0xc0020948
c000e943:	e8 5b 06 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e948:	83 c4 10             	add    esp,0x10
c000e94b:	e8 63 f5 ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	6a 03                	push   0x3
c000e955:	6a 01                	push   0x1
c000e957:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e95b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e95f:	50                   	push   eax
c000e960:	e8 e1 fc ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e965:	83 c4 20             	add    esp,0x20
c000e968:	e8 46 f5 ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c000e96d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e971:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e977:	83 ec 0c             	sub    esp,0xc
c000e97a:	6a 03                	push   0x3
c000e97c:	6a 01                	push   0x1
c000e97e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e982:	52                   	push   edx
c000e983:	50                   	push   eax
c000e984:	e8 bd fc ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e989:	83 c4 20             	add    esp,0x20
c000e98c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e994:	83 ec 04             	sub    esp,0x4
c000e997:	68 00 10 00 00       	push   0x1000
c000e99c:	52                   	push   edx
c000e99d:	50                   	push   eax
c000e99e:	e8 2f 1c ff ff       	call   c00005d2 <memcpy>
c000e9a3:	83 c4 10             	add    esp,0x10
c000e9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9aa:	25 ff 0f 00 00       	and    eax,0xfff
c000e9af:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e9b3:	89 c2                	mov    edx,eax
c000e9b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9b9:	89 10                	mov    DWORD PTR [eax],edx
c000e9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9bf:	25 ff 0f 00 00       	and    eax,0xfff
c000e9c4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e9c8:	83 ec 04             	sub    esp,0x4
c000e9cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9cf:	50                   	push   eax
c000e9d0:	68 cc 07 02 c0       	push   0xc00207cc
c000e9d5:	e8 c9 05 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e9da:	83 c4 10             	add    esp,0x10
c000e9dd:	eb 1a                	jmp    c000e9f9 <VAS::VAS(VAS*)+0x2e9>
c000e9df:	83 ec 0c             	sub    esp,0xc
c000e9e2:	68 5c 09 02 c0       	push   0xc002095c
c000e9e7:	e8 b7 05 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000e9ec:	83 c4 10             	add    esp,0x10
c000e9ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9f7:	89 10                	mov    DWORD PTR [eax],edx
c000e9f9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000e9fd:	e9 73 fe ff ff       	jmp    c000e875 <VAS::VAS(VAS*)+0x165>
c000ea02:	83 ec 0c             	sub    esp,0xc
c000ea05:	68 60 09 02 c0       	push   0xc0020960
c000ea0a:	e8 94 05 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000ea0f:	83 c4 10             	add    esp,0x10
c000ea12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea16:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea19:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ea1d:	c1 e2 02             	shl    edx,0x2
c000ea20:	01 c2                	add    edx,eax
c000ea22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea26:	89 02                	mov    DWORD PTR [edx],eax
c000ea28:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea2c:	e9 94 fd ff ff       	jmp    c000e7c5 <VAS::VAS(VAS*)+0xb5>
c000ea31:	83 ec 0c             	sub    esp,0xc
c000ea34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea38:	e8 1c f6 ff ff       	call   c000e059 <Virt::freeKernelVirtualPages(unsigned long)>
c000ea3d:	83 c4 10             	add    esp,0x10
c000ea40:	83 ec 0c             	sub    esp,0xc
c000ea43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea47:	e8 0d f6 ff ff       	call   c000e059 <Virt::freeKernelVirtualPages(unsigned long)>
c000ea4c:	83 c4 10             	add    esp,0x10
c000ea4f:	e8 bb 94 00 00       	call   c0017f0f <unlockStuff()>
c000ea54:	90                   	nop
c000ea55:	83 c4 38             	add    esp,0x38
c000ea58:	5b                   	pop    ebx
c000ea59:	c3                   	ret    

c000ea5a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ea5a:	55                   	push   ebp
c000ea5b:	57                   	push   edi
c000ea5c:	56                   	push   esi
c000ea5d:	53                   	push   ebx
c000ea5e:	83 ec 1c             	sub    esp,0x1c
c000ea61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea69:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000ea6d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ea71:	a9 ff 0f 00 00       	test   eax,0xfff
c000ea76:	75 4a                	jne    c000eac2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000ea78:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea7c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ea7f:	c1 eb 16             	shr    ebx,0x16
c000ea82:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ea89:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ea8d:	74 4d                	je     c000eadc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000ea8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea93:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ea97:	c1 e8 0a             	shr    eax,0xa
c000ea9a:	80 fa 01             	cmp    dl,0x1
c000ea9d:	19 d2                	sbb    edx,edx
c000ea9f:	c1 e3 0c             	shl    ebx,0xc
c000eaa2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000eaa6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000eaac:	25 fc 0f 00 00       	and    eax,0xffc
c000eab1:	01 d8                	add    eax,ebx
c000eab3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000eaba:	83 c4 1c             	add    esp,0x1c
c000eabd:	5b                   	pop    ebx
c000eabe:	5e                   	pop    esi
c000eabf:	5f                   	pop    edi
c000eac0:	5d                   	pop    ebp
c000eac1:	c3                   	ret    
c000eac2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000eac6:	83 ec 0c             	sub    esp,0xc
c000eac9:	68 f0 07 02 c0       	push   0xc00207f0
c000eace:	e8 65 61 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000ead3:	83 c4 10             	add    esp,0x10
c000ead6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eada:	eb 9c                	jmp    c000ea78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000eadc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eae0:	e8 e3 d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000eae5:	89 c5                	mov    ebp,eax
c000eae7:	e8 c7 f3 ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c000eaec:	83 ec 0c             	sub    esp,0xc
c000eaef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eaf3:	6a 01                	push   0x1
c000eaf5:	e8 29 f2 ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c000eafa:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000eb01:	6a 01                	push   0x1
c000eb03:	50                   	push   eax
c000eb04:	55                   	push   ebp
c000eb05:	81 cd 07 04 00 00    	or     ebp,0x407
c000eb0b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000eb0f:	51                   	push   ecx
c000eb10:	e8 31 fb ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eb15:	83 c4 1c             	add    esp,0x1c
c000eb18:	68 00 10 00 00       	push   0x1000
c000eb1d:	6a 00                	push   0x0
c000eb1f:	50                   	push   eax
c000eb20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb24:	e8 df 1a ff ff       	call   c0000608 <memset>
c000eb29:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000eb2d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000eb30:	e8 24 f5 ff ff       	call   c000e059 <Virt::freeKernelVirtualPages(unsigned long)>
c000eb35:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eb38:	83 c4 10             	add    esp,0x10
c000eb3b:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000eb3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb42:	e9 48 ff ff ff       	jmp    c000ea8f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000eb47:	90                   	nop

c000eb48 <VAS::VAS(bool)>:
c000eb48:	53                   	push   ebx
c000eb49:	83 ec 28             	sub    esp,0x28
c000eb4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb50:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000eb54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eb5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb63:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000eb67:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000eb6a:	e8 59 d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000eb6f:	89 c2                	mov    edx,eax
c000eb71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eb78:	e8 36 f3 ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c000eb7d:	89 c3                	mov    ebx,eax
c000eb7f:	83 ec 0c             	sub    esp,0xc
c000eb82:	6a 01                	push   0x1
c000eb84:	e8 9a f1 ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c000eb89:	83 c4 10             	add    esp,0x10
c000eb8c:	89 c2                	mov    edx,eax
c000eb8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eb95:	83 ec 0c             	sub    esp,0xc
c000eb98:	6a 03                	push   0x3
c000eb9a:	6a 01                	push   0x1
c000eb9c:	52                   	push   edx
c000eb9d:	50                   	push   eax
c000eb9e:	53                   	push   ebx
c000eb9f:	e8 a2 fa ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eba4:	83 c4 20             	add    esp,0x20
c000eba7:	89 c2                	mov    edx,eax
c000eba9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebad:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ebb0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ebb8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ebc0:	7f 1c                	jg     c000ebde <VAS::VAS(bool)+0x96>
c000ebc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebc6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ebc9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebcd:	c1 e2 02             	shl    edx,0x2
c000ebd0:	01 d0                	add    eax,edx
c000ebd2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ebd8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ebdc:	eb da                	jmp    c000ebb8 <VAS::VAS(bool)+0x70>
c000ebde:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ebe6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ebee:	7f 71                	jg     c000ec61 <VAS::VAS(bool)+0x119>
c000ebf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebf4:	2d 00 02 00 00       	sub    eax,0x200
c000ebf9:	c1 e0 0c             	shl    eax,0xc
c000ebfc:	83 c8 03             	or     eax,0x3
c000ebff:	89 c3                	mov    ebx,eax
c000ec01:	e8 2c 53 00 00       	call   c0013f32 <thisCPU()>
c000ec06:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ec0c:	83 e0 10             	and    eax,0x10
c000ec0f:	84 c0                	test   al,al
c000ec11:	74 07                	je     c000ec1a <VAS::VAS(bool)+0xd2>
c000ec13:	b8 00 01 00 00       	mov    eax,0x100
c000ec18:	eb 05                	jmp    c000ec1f <VAS::VAS(bool)+0xd7>
c000ec1a:	b8 00 00 00 00       	mov    eax,0x0
c000ec1f:	09 d8                	or     eax,ebx
c000ec21:	89 c1                	mov    ecx,eax
c000ec23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec2e:	c1 e2 02             	shl    edx,0x2
c000ec31:	01 d0                	add    eax,edx
c000ec33:	89 ca                	mov    edx,ecx
c000ec35:	89 10                	mov    DWORD PTR [eax],edx
c000ec37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec3b:	2d 40 03 00 00       	sub    eax,0x340
c000ec40:	83 f8 7f             	cmp    eax,0x7f
c000ec43:	77 16                	ja     c000ec5b <VAS::VAS(bool)+0x113>
c000ec45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec50:	c1 e2 02             	shl    edx,0x2
c000ec53:	01 d0                	add    eax,edx
c000ec55:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ec5b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ec5f:	eb 85                	jmp    c000ebe6 <VAS::VAS(bool)+0x9e>
c000ec61:	e8 cc 52 00 00       	call   c0013f32 <thisCPU()>
c000ec66:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ec6c:	83 e0 10             	and    eax,0x10
c000ec6f:	84 c0                	test   al,al
c000ec71:	74 07                	je     c000ec7a <VAS::VAS(bool)+0x132>
c000ec73:	b8 03 41 00 00       	mov    eax,0x4103
c000ec78:	eb 05                	jmp    c000ec7f <VAS::VAS(bool)+0x137>
c000ec7a:	b8 03 40 00 00       	mov    eax,0x4003
c000ec7f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ec83:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ec86:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ec8c:	89 02                	mov    DWORD PTR [edx],eax
c000ec8e:	e8 9f 52 00 00       	call   c0013f32 <thisCPU()>
c000ec93:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ec99:	83 ec 08             	sub    esp,0x8
c000ec9c:	50                   	push   eax
c000ec9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eca1:	e8 84 f9 ff ff       	call   c000e62a <VAS::setCPUSpecific(unsigned long)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecad:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ecb0:	e8 7d 52 00 00       	call   c0013f32 <thisCPU()>
c000ecb5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ecbb:	83 e0 10             	and    eax,0x10
c000ecbe:	84 c0                	test   al,al
c000ecc0:	74 07                	je     c000ecc9 <VAS::VAS(bool)+0x181>
c000ecc2:	b8 00 01 00 00       	mov    eax,0x100
c000ecc7:	eb 05                	jmp    c000ecce <VAS::VAS(bool)+0x186>
c000ecc9:	b8 00 00 00 00       	mov    eax,0x0
c000ecce:	09 d8                	or     eax,ebx
c000ecd0:	89 c2                	mov    edx,eax
c000ecd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ecd9:	05 fc 0f 00 00       	add    eax,0xffc
c000ecde:	83 ca 03             	or     edx,0x3
c000ece1:	89 10                	mov    DWORD PTR [eax],edx
c000ece3:	e8 4a 52 00 00       	call   c0013f32 <thisCPU()>
c000ece8:	83 ec 0c             	sub    esp,0xc
c000eceb:	50                   	push   eax
c000ecec:	e8 9f 19 00 00       	call   c0010690 <Device::getName()>
c000ecf1:	83 c4 10             	add    esp,0x10
c000ecf4:	83 ec 08             	sub    esp,0x8
c000ecf7:	68 70 09 02 c0       	push   0xc0020970
c000ecfc:	50                   	push   eax
c000ecfd:	e8 f6 19 ff ff       	call   c00006f8 <strcmp>
c000ed02:	83 c4 10             	add    esp,0x10
c000ed05:	85 c0                	test   eax,eax
c000ed07:	0f 94 c0             	sete   al
c000ed0a:	84 c0                	test   al,al
c000ed0c:	74 64                	je     c000ed72 <VAS::VAS(bool)+0x22a>
c000ed0e:	e8 26 8e 00 00       	call   c0017b39 <disableIRQs()>
c000ed13:	e8 1a 52 00 00       	call   c0013f32 <thisCPU()>
c000ed18:	05 7c 09 00 00       	add    eax,0x97c
c000ed1d:	83 ec 0c             	sub    esp,0xc
c000ed20:	50                   	push   eax
c000ed21:	e8 6a c9 ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ed26:	83 c4 10             	add    esp,0x10
c000ed29:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ed2e:	89 c3                	mov    ebx,eax
c000ed30:	e8 fd 51 00 00       	call   c0013f32 <thisCPU()>
c000ed35:	05 7c 09 00 00       	add    eax,0x97c
c000ed3a:	83 ec 0c             	sub    esp,0xc
c000ed3d:	50                   	push   eax
c000ed3e:	e8 4d c9 ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ed43:	83 c4 10             	add    esp,0x10
c000ed46:	83 ec 08             	sub    esp,0x8
c000ed49:	50                   	push   eax
c000ed4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed4e:	e8 e7 f2 ff ff       	call   c000e03a <VAS::getPageTableEntry(unsigned long)>
c000ed53:	83 c4 10             	add    esp,0x10
c000ed56:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed58:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ed5d:	6a 11                	push   0x11
c000ed5f:	53                   	push   ebx
c000ed60:	50                   	push   eax
c000ed61:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed65:	e8 f0 f5 ff ff       	call   c000e35a <VAS::mapPage(unsigned long, unsigned long, int)>
c000ed6a:	83 c4 10             	add    esp,0x10
c000ed6d:	e8 d5 8d 00 00       	call   c0017b47 <enableIRQs()>
c000ed72:	90                   	nop
c000ed73:	83 c4 28             	add    esp,0x28
c000ed76:	5b                   	pop    ebx
c000ed77:	c3                   	ret    

c000ed78 <mapVASFirstTime>:
c000ed78:	55                   	push   ebp
c000ed79:	57                   	push   edi
c000ed7a:	56                   	push   esi
c000ed7b:	53                   	push   ebx
c000ed7c:	83 ec 0c             	sub    esp,0xc
c000ed7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed84:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ed87:	4a                   	dec    edx
c000ed88:	0f 84 99 00 00 00    	je     c000ee27 <mapVASFirstTime+0xaf>
c000ed8e:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ed91:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ed94:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ed99:	c1 e5 15             	shl    ebp,0x15
c000ed9c:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000eda1:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000eda7:	29 eb                	sub    ebx,ebp
c000eda9:	29 ee                	sub    esi,ebp
c000edab:	e8 18 d4 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000edb0:	83 ec 0c             	sub    esp,0xc
c000edb3:	68 03 04 00 00       	push   0x403
c000edb8:	6a 01                	push   0x1
c000edba:	53                   	push   ebx
c000edbb:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000edc1:	50                   	push   eax
c000edc2:	57                   	push   edi
c000edc3:	e8 7e f8 ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edc8:	83 c4 20             	add    esp,0x20
c000edcb:	39 f3                	cmp    ebx,esi
c000edcd:	75 dc                	jne    c000edab <mapVASFirstTime+0x33>
c000edcf:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000edd4:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000edd9:	29 ee                	sub    esi,ebp
c000eddb:	29 e8                	sub    eax,ebp
c000eddd:	89 c5                	mov    ebp,eax
c000eddf:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ede3:	19 db                	sbb    ebx,ebx
c000ede5:	e8 de d3 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000edea:	83 e3 04             	and    ebx,0x4
c000eded:	83 ec 0c             	sub    esp,0xc
c000edf0:	81 c3 03 04 00 00    	add    ebx,0x403
c000edf6:	53                   	push   ebx
c000edf7:	6a 01                	push   0x1
c000edf9:	56                   	push   esi
c000edfa:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ee00:	50                   	push   eax
c000ee01:	57                   	push   edi
c000ee02:	e8 3f f8 ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee07:	83 c4 20             	add    esp,0x20
c000ee0a:	39 f5                	cmp    ebp,esi
c000ee0c:	75 d1                	jne    c000eddf <mapVASFirstTime+0x67>
c000ee0e:	e8 b2 fb 00 00       	call   c001e9c5 <CPU::readCR3()>
c000ee13:	83 ec 0c             	sub    esp,0xc
c000ee16:	50                   	push   eax
c000ee17:	e8 bb fb 00 00       	call   c001e9d7 <CPU::writeCR3(unsigned long)>
c000ee1c:	83 c4 10             	add    esp,0x10
c000ee1f:	83 c4 0c             	add    esp,0xc
c000ee22:	5b                   	pop    ebx
c000ee23:	5e                   	pop    esi
c000ee24:	5f                   	pop    edi
c000ee25:	5d                   	pop    ebp
c000ee26:	c3                   	ret    
c000ee27:	83 ec 0c             	sub    esp,0xc
c000ee2a:	68 7e 09 02 c0       	push   0xc002097e
c000ee2f:	e8 6f 01 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000ee34:	83 c4 10             	add    esp,0x10
c000ee37:	83 c4 0c             	add    esp,0xc
c000ee3a:	5b                   	pop    ebx
c000ee3b:	5e                   	pop    esi
c000ee3c:	5f                   	pop    edi
c000ee3d:	5d                   	pop    ebp
c000ee3e:	c3                   	ret    

c000ee3f <__cxa_atexit>:
c000ee3f:	31 c0                	xor    eax,eax
c000ee41:	c3                   	ret    

c000ee42 <__cxa_finalize>:
c000ee42:	c3                   	ret    

c000ee43 <__stack_chk_fail>:
c000ee43:	55                   	push   ebp
c000ee44:	89 e5                	mov    ebp,esp
c000ee46:	83 ec 10             	sub    esp,0x10
c000ee49:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ee4c:	68 97 09 02 c0       	push   0xc0020997
c000ee51:	e8 4d 01 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000ee56:	58                   	pop    eax
c000ee57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ee5a:	5a                   	pop    edx
c000ee5b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ee5e:	68 97 09 02 c0       	push   0xc0020997
c000ee63:	e8 3b 01 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000ee68:	59                   	pop    ecx
c000ee69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ee6c:	5a                   	pop    edx
c000ee6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee6f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ee72:	68 97 09 02 c0       	push   0xc0020997
c000ee77:	e8 27 01 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000ee7c:	59                   	pop    ecx
c000ee7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ee80:	5a                   	pop    edx
c000ee81:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee83:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee85:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ee88:	68 97 09 02 c0       	push   0xc0020997
c000ee8d:	e8 11 01 00 00       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c000ee92:	c7 04 24 9f 09 02 c0 	mov    DWORD PTR [esp],0xc002099f
c000ee99:	e8 9a 5d 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000ee9e:	83 c4 10             	add    esp,0x10
c000eea1:	c9                   	leave  
c000eea2:	c3                   	ret    

c000eea3 <__cxa_pure_virtual>:
c000eea3:	83 ec 18             	sub    esp,0x18
c000eea6:	68 b7 09 02 c0       	push   0xc00209b7
c000eeab:	e8 88 5d 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c000eeb0:	83 c4 1c             	add    esp,0x1c
c000eeb3:	c3                   	ret    

c000eeb4 <operator new(unsigned long)>:
c000eeb4:	e9 65 cd ff ff       	jmp    c000bc1e <malloc>

c000eeb9 <operator new[](unsigned long)>:
c000eeb9:	e9 60 cd ff ff       	jmp    c000bc1e <malloc>

c000eebe <operator delete(void*)>:
c000eebe:	e9 7b cd ff ff       	jmp    c000bc3e <rfree>

c000eec3 <operator delete(void*, unsigned long)>:
c000eec3:	e9 76 cd ff ff       	jmp    c000bc3e <rfree>

c000eec8 <operator delete[](void*)>:
c000eec8:	e9 71 cd ff ff       	jmp    c000bc3e <rfree>

c000eecd <operator delete[](void*, unsigned long)>:
c000eecd:	e9 6c cd ff ff       	jmp    c000bc3e <rfree>

c000eed2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000eed2:	57                   	push   edi
c000eed3:	b9 3f 00 00 00       	mov    ecx,0x3f
c000eed8:	56                   	push   esi
c000eed9:	be cc 09 02 c0       	mov    esi,0xc00209cc
c000eede:	53                   	push   ebx
c000eedf:	83 ec 40             	sub    esp,0x40
c000eee2:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000eee6:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000eeea:	fc                   	cld    
c000eeeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eeed:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000eef1:	83 f9 3e             	cmp    ecx,0x3e
c000eef4:	7e 05                	jle    c000eefb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000eef6:	b9 3e 00 00 00       	mov    ecx,0x3e
c000eefb:	89 df                	mov    edi,ebx
c000eefd:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ef01:	eb 02                	jmp    c000ef05 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ef03:	89 c7                	mov    edi,eax
c000ef05:	31 d2                	xor    edx,edx
c000ef07:	46                   	inc    esi
c000ef08:	89 f8                	mov    eax,edi
c000ef0a:	f7 f1                	div    ecx
c000ef0c:	39 cf                	cmp    edi,ecx
c000ef0e:	73 f3                	jae    c000ef03 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ef10:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ef13:	eb 02                	jmp    c000ef17 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ef15:	89 c3                	mov    ebx,eax
c000ef17:	31 d2                	xor    edx,edx
c000ef19:	4e                   	dec    esi
c000ef1a:	89 d8                	mov    eax,ebx
c000ef1c:	f7 f1                	div    ecx
c000ef1e:	39 cb                	cmp    ebx,ecx
c000ef20:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ef24:	88 16                	mov    BYTE PTR [esi],dl
c000ef26:	73 ed                	jae    c000ef15 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ef28:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef2c:	83 c4 40             	add    esp,0x40
c000ef2f:	5b                   	pop    ebx
c000ef30:	5e                   	pop    esi
c000ef31:	5f                   	pop    edi
c000ef32:	c3                   	ret    

c000ef33 <Dbg::logc(char)>:
c000ef33:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef37:	ba fd 03 00 00       	mov    edx,0x3fd
c000ef3c:	ec                   	in     al,dx
c000ef3d:	a8 20                	test   al,0x20
c000ef3f:	74 fb                	je     c000ef3c <Dbg::logc(char)+0x9>
c000ef41:	ba f8 03 00 00       	mov    edx,0x3f8
c000ef46:	88 c8                	mov    al,cl
c000ef48:	ee                   	out    dx,al
c000ef49:	c3                   	ret    

c000ef4a <Dbg::logs(char*)>:
c000ef4a:	53                   	push   ebx
c000ef4b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ef4f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ef52:	84 c0                	test   al,al
c000ef54:	74 0f                	je     c000ef65 <Dbg::logs(char*)+0x1b>
c000ef56:	50                   	push   eax
c000ef57:	43                   	inc    ebx
c000ef58:	e8 d6 ff ff ff       	call   c000ef33 <Dbg::logc(char)>
c000ef5d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ef60:	5a                   	pop    edx
c000ef61:	84 c0                	test   al,al
c000ef63:	75 f1                	jne    c000ef56 <Dbg::logs(char*)+0xc>
c000ef65:	5b                   	pop    ebx
c000ef66:	c3                   	ret    

c000ef67 <Dbg::logWriteInt(unsigned int)>:
c000ef67:	83 ec 10             	sub    esp,0x10
c000ef6a:	6a 0a                	push   0xa
c000ef6c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ef70:	50                   	push   eax
c000ef71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef75:	e8 58 ff ff ff       	call   c000eed2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ef7a:	50                   	push   eax
c000ef7b:	e8 ca ff ff ff       	call   c000ef4a <Dbg::logs(char*)>
c000ef80:	83 c4 20             	add    esp,0x20
c000ef83:	c3                   	ret    

c000ef84 <Dbg::logWriteIntBase(unsigned int, int)>:
c000ef84:	83 ec 10             	sub    esp,0x10
c000ef87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef8b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ef8f:	50                   	push   eax
c000ef90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef94:	e8 39 ff ff ff       	call   c000eed2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ef99:	50                   	push   eax
c000ef9a:	e8 ab ff ff ff       	call   c000ef4a <Dbg::logs(char*)>
c000ef9f:	83 c4 20             	add    esp,0x20
c000efa2:	c3                   	ret    

c000efa3 <Dbg::kprintf(char const*, ...)>:
c000efa3:	55                   	push   ebp
c000efa4:	57                   	push   edi
c000efa5:	56                   	push   esi
c000efa6:	53                   	push   ebx
c000efa7:	83 ec 0c             	sub    esp,0xc
c000efaa:	8d 44 24 24          	lea    eax,[esp+0x24]
c000efae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000efb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000efb6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000efb9:	84 c0                	test   al,al
c000efbb:	74 4a                	je     c000f007 <Dbg::kprintf(char const*, ...)+0x64>
c000efbd:	31 db                	xor    ebx,ebx
c000efbf:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000efc2:	3c 25                	cmp    al,0x25
c000efc4:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000efc7:	0f 85 e4 00 00 00    	jne    c000f0b1 <Dbg::kprintf(char const*, ...)+0x10e>
c000efcd:	83 c3 02             	add    ebx,0x2
c000efd0:	8a 07                	mov    al,BYTE PTR [edi]
c000efd2:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000efd5:	83 e8 25             	sub    eax,0x25
c000efd8:	3c 53                	cmp    al,0x53
c000efda:	0f 87 ba 00 00 00    	ja     c000f09a <Dbg::kprintf(char const*, ...)+0xf7>
c000efe0:	0f b6 c0             	movzx  eax,al
c000efe3:	ff 24 85 0c 0a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf5f4]
c000efea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000efee:	89 c8                	mov    eax,ecx
c000eff0:	83 c1 04             	add    ecx,0x4
c000eff3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000eff7:	ff 30                	push   DWORD PTR [eax]
c000eff9:	e8 4c ff ff ff       	call   c000ef4a <Dbg::logs(char*)>
c000effe:	58                   	pop    eax
c000efff:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f003:	84 c0                	test   al,al
c000f005:	75 b8                	jne    c000efbf <Dbg::kprintf(char const*, ...)+0x1c>
c000f007:	83 c4 0c             	add    esp,0xc
c000f00a:	5b                   	pop    ebx
c000f00b:	5e                   	pop    esi
c000f00c:	5f                   	pop    edi
c000f00d:	5d                   	pop    ebp
c000f00e:	c3                   	ret    
c000f00f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f013:	89 d0                	mov    eax,edx
c000f015:	83 c2 04             	add    edx,0x4
c000f018:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f01c:	ff 30                	push   DWORD PTR [eax]
c000f01e:	e8 44 ff ff ff       	call   c000ef67 <Dbg::logWriteInt(unsigned int)>
c000f023:	58                   	pop    eax
c000f024:	eb d9                	jmp    c000efff <Dbg::kprintf(char const*, ...)+0x5c>
c000f026:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02a:	89 d0                	mov    eax,edx
c000f02c:	83 c2 04             	add    edx,0x4
c000f02f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f032:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f036:	50                   	push   eax
c000f037:	e8 f7 fe ff ff       	call   c000ef33 <Dbg::logc(char)>
c000f03c:	58                   	pop    eax
c000f03d:	eb c0                	jmp    c000efff <Dbg::kprintf(char const*, ...)+0x5c>
c000f03f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f043:	89 c8                	mov    eax,ecx
c000f045:	83 c1 04             	add    ecx,0x4
c000f048:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f04c:	ff 30                	push   DWORD PTR [eax]
c000f04e:	e8 14 ff ff ff       	call   c000ef67 <Dbg::logWriteInt(unsigned int)>
c000f053:	5f                   	pop    edi
c000f054:	eb a9                	jmp    c000efff <Dbg::kprintf(char const*, ...)+0x5c>
c000f056:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f05a:	89 c8                	mov    eax,ecx
c000f05c:	83 c1 04             	add    ecx,0x4
c000f05f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f063:	6a 10                	push   0x10
c000f065:	ff 30                	push   DWORD PTR [eax]
c000f067:	e8 18 ff ff ff       	call   c000ef84 <Dbg::logWriteIntBase(unsigned int, int)>
c000f06c:	59                   	pop    ecx
c000f06d:	5f                   	pop    edi
c000f06e:	eb 8f                	jmp    c000efff <Dbg::kprintf(char const*, ...)+0x5c>
c000f070:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f074:	89 d0                	mov    eax,edx
c000f076:	83 c2 08             	add    edx,0x8
c000f079:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f07d:	6a 10                	push   0x10
c000f07f:	ff 30                	push   DWORD PTR [eax]
c000f081:	e8 fe fe ff ff       	call   c000ef84 <Dbg::logWriteIntBase(unsigned int, int)>
c000f086:	58                   	pop    eax
c000f087:	5a                   	pop    edx
c000f088:	e9 72 ff ff ff       	jmp    c000efff <Dbg::kprintf(char const*, ...)+0x5c>
c000f08d:	6a 25                	push   0x25
c000f08f:	e8 9f fe ff ff       	call   c000ef33 <Dbg::logc(char)>
c000f094:	58                   	pop    eax
c000f095:	e9 65 ff ff ff       	jmp    c000efff <Dbg::kprintf(char const*, ...)+0x5c>
c000f09a:	6a 25                	push   0x25
c000f09c:	e8 92 fe ff ff       	call   c000ef33 <Dbg::logc(char)>
c000f0a1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f0a4:	50                   	push   eax
c000f0a5:	e8 89 fe ff ff       	call   c000ef33 <Dbg::logc(char)>
c000f0aa:	5a                   	pop    edx
c000f0ab:	59                   	pop    ecx
c000f0ac:	e9 4e ff ff ff       	jmp    c000efff <Dbg::kprintf(char const*, ...)+0x5c>
c000f0b1:	50                   	push   eax
c000f0b2:	89 eb                	mov    ebx,ebp
c000f0b4:	e8 7a fe ff ff       	call   c000ef33 <Dbg::logc(char)>
c000f0b9:	89 fd                	mov    ebp,edi
c000f0bb:	58                   	pop    eax
c000f0bc:	e9 3e ff ff ff       	jmp    c000efff <Dbg::kprintf(char const*, ...)+0x5c>
c000f0c1:	90                   	nop

c000f0c2 <File::read(unsigned long long, void*, int*)>:
c000f0c2:	53                   	push   ebx
c000f0c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f0cb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f0d2:	3c 19                	cmp    al,0x19
c000f0d4:	77 35                	ja     c000f10b <File::read(unsigned long long, void*, int*)+0x49>
c000f0d6:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c000f0dd:	85 c0                	test   eax,eax
c000f0df:	74 2a                	je     c000f10b <File::read(unsigned long long, void*, int*)+0x49>
c000f0e1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f0e7:	85 c0                	test   eax,eax
c000f0e9:	74 20                	je     c000f10b <File::read(unsigned long long, void*, int*)+0x49>
c000f0eb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f0ef:	74 21                	je     c000f112 <File::read(unsigned long long, void*, int*)+0x50>
c000f0f1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f0f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f0f7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f0fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f101:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f105:	5b                   	pop    ebx
c000f106:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f109:	ff e0                	jmp    eax
c000f10b:	b8 0b 00 00 00       	mov    eax,0xb
c000f110:	eb 05                	jmp    c000f117 <File::read(unsigned long long, void*, int*)+0x55>
c000f112:	b8 05 00 00 00       	mov    eax,0x5
c000f117:	5b                   	pop    ebx
c000f118:	c3                   	ret    
c000f119:	90                   	nop

c000f11a <File::write(unsigned long long, void*, int*)>:
c000f11a:	53                   	push   ebx
c000f11b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f11f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f123:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f12a:	3c 19                	cmp    al,0x19
c000f12c:	77 35                	ja     c000f163 <File::write(unsigned long long, void*, int*)+0x49>
c000f12e:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c000f135:	85 c0                	test   eax,eax
c000f137:	74 2a                	je     c000f163 <File::write(unsigned long long, void*, int*)+0x49>
c000f139:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f13f:	85 c0                	test   eax,eax
c000f141:	74 20                	je     c000f163 <File::write(unsigned long long, void*, int*)+0x49>
c000f143:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f147:	74 21                	je     c000f16a <File::write(unsigned long long, void*, int*)+0x50>
c000f149:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f14b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f14f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f155:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f159:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f15d:	5b                   	pop    ebx
c000f15e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f161:	ff e0                	jmp    eax
c000f163:	b8 0b 00 00 00       	mov    eax,0xb
c000f168:	eb 05                	jmp    c000f16f <File::write(unsigned long long, void*, int*)+0x55>
c000f16a:	b8 05 00 00 00       	mov    eax,0x5
c000f16f:	5b                   	pop    ebx
c000f170:	c3                   	ret    
c000f171:	90                   	nop

c000f172 <Directory::read(unsigned long long, void*, int*)>:
c000f172:	53                   	push   ebx
c000f173:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f177:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f17b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f182:	3c 19                	cmp    al,0x19
c000f184:	77 35                	ja     c000f1bb <Directory::read(unsigned long long, void*, int*)+0x49>
c000f186:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c000f18d:	85 c0                	test   eax,eax
c000f18f:	74 2a                	je     c000f1bb <Directory::read(unsigned long long, void*, int*)+0x49>
c000f191:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f197:	85 c0                	test   eax,eax
c000f199:	74 20                	je     c000f1bb <Directory::read(unsigned long long, void*, int*)+0x49>
c000f19b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f19f:	74 21                	je     c000f1c2 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f1a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1a3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f1a7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f1ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f1b5:	5b                   	pop    ebx
c000f1b6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f1b9:	ff e0                	jmp    eax
c000f1bb:	b8 0b 00 00 00       	mov    eax,0xb
c000f1c0:	eb 05                	jmp    c000f1c7 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f1c2:	b8 05 00 00 00       	mov    eax,0x5
c000f1c7:	5b                   	pop    ebx
c000f1c8:	c3                   	ret    
c000f1c9:	90                   	nop

c000f1ca <Directory::write(unsigned long long, void*, int*)>:
c000f1ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1ce:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f1d5:	b8 0b 00 00 00       	mov    eax,0xb
c000f1da:	80 fa 19             	cmp    dl,0x19
c000f1dd:	77 18                	ja     c000f1f7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f1df:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c000f1e6:	85 d2                	test   edx,edx
c000f1e8:	74 0d                	je     c000f1f7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f1ea:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f1f1:	19 c0                	sbb    eax,eax
c000f1f3:	83 e0 0a             	and    eax,0xa
c000f1f6:	40                   	inc    eax
c000f1f7:	c3                   	ret    

c000f1f8 <File::isAtty()>:
c000f1f8:	31 c0                	xor    eax,eax
c000f1fa:	c3                   	ret    
c000f1fb:	90                   	nop

c000f1fc <Directory::isAtty()>:
c000f1fc:	31 c0                	xor    eax,eax
c000f1fe:	c3                   	ret    
c000f1ff:	90                   	nop

c000f200 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f200:	b8 0a 00 00 00       	mov    eax,0xa
c000f205:	c3                   	ret    

c000f206 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f206:	b8 0a 00 00 00       	mov    eax,0xa
c000f20b:	c3                   	ret    

c000f20c <File::~File()>:
c000f20c:	83 ec 0c             	sub    esp,0xc
c000f20f:	ba c8 0b 02 c0       	mov    edx,0xc0020bc8
c000f214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f218:	89 10                	mov    DWORD PTR [eax],edx
c000f21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f21e:	83 ec 0c             	sub    esp,0xc
c000f221:	50                   	push   eax
c000f222:	e8 a1 e8 ff ff       	call   c000dac8 <UnixFile::~UnixFile()>
c000f227:	83 c4 10             	add    esp,0x10
c000f22a:	90                   	nop
c000f22b:	83 c4 0c             	add    esp,0xc
c000f22e:	c3                   	ret    
c000f22f:	90                   	nop

c000f230 <File::~File()>:
c000f230:	83 ec 0c             	sub    esp,0xc
c000f233:	83 ec 0c             	sub    esp,0xc
c000f236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f23a:	e8 cd ff ff ff       	call   c000f20c <File::~File()>
c000f23f:	83 c4 10             	add    esp,0x10
c000f242:	83 ec 08             	sub    esp,0x8
c000f245:	68 14 01 00 00       	push   0x114
c000f24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f24e:	e8 70 fc ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c000f253:	83 c4 10             	add    esp,0x10
c000f256:	83 c4 0c             	add    esp,0xc
c000f259:	c3                   	ret    

c000f25a <Directory::~Directory()>:
c000f25a:	83 ec 0c             	sub    esp,0xc
c000f25d:	ba e4 0b 02 c0       	mov    edx,0xc0020be4
c000f262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f266:	89 10                	mov    DWORD PTR [eax],edx
c000f268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f26c:	83 ec 0c             	sub    esp,0xc
c000f26f:	50                   	push   eax
c000f270:	e8 53 e8 ff ff       	call   c000dac8 <UnixFile::~UnixFile()>
c000f275:	83 c4 10             	add    esp,0x10
c000f278:	90                   	nop
c000f279:	83 c4 0c             	add    esp,0xc
c000f27c:	c3                   	ret    
c000f27d:	90                   	nop

c000f27e <Directory::~Directory()>:
c000f27e:	83 ec 0c             	sub    esp,0xc
c000f281:	83 ec 0c             	sub    esp,0xc
c000f284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f288:	e8 cd ff ff ff       	call   c000f25a <Directory::~Directory()>
c000f28d:	83 c4 10             	add    esp,0x10
c000f290:	83 ec 08             	sub    esp,0x8
c000f293:	68 14 01 00 00       	push   0x114
c000f298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f29c:	e8 22 fc ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c000f2a1:	83 c4 10             	add    esp,0x10
c000f2a4:	83 c4 0c             	add    esp,0xc
c000f2a7:	c3                   	ret    

c000f2a8 <Filesystem::Filesystem()>:
c000f2a8:	ba 64 0b 02 c0       	mov    edx,0xc0020b64
c000f2ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2b1:	89 10                	mov    DWORD PTR [eax],edx
c000f2b3:	8b 15 a8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a8
c000f2b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f2c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c4:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000f2c9:	90                   	nop
c000f2ca:	c3                   	ret    
c000f2cb:	90                   	nop

c000f2cc <Filesystem::~Filesystem()>:
c000f2cc:	ba 64 0b 02 c0       	mov    edx,0xc0020b64
c000f2d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2d5:	89 10                	mov    DWORD PTR [eax],edx
c000f2d7:	90                   	nop
c000f2d8:	c3                   	ret    
c000f2d9:	90                   	nop

c000f2da <Filesystem::~Filesystem()>:
c000f2da:	83 ec 0c             	sub    esp,0xc
c000f2dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f2e1:	e8 e6 ff ff ff       	call   c000f2cc <Filesystem::~Filesystem()>
c000f2e6:	83 c4 04             	add    esp,0x4
c000f2e9:	83 ec 08             	sub    esp,0x8
c000f2ec:	6a 08                	push   0x8
c000f2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2f2:	e8 cc fb ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c000f2f7:	83 c4 10             	add    esp,0x10
c000f2fa:	83 c4 0c             	add    esp,0xc
c000f2fd:	c3                   	ret    

c000f2fe <initVFS()>:
c000f2fe:	83 ec 18             	sub    esp,0x18
c000f301:	6a 08                	push   0x8
c000f303:	e8 ac fb ff ff       	call   c000eeb4 <operator new(unsigned long)>
c000f308:	89 04 24             	mov    DWORD PTR [esp],eax
c000f30b:	e8 1c a9 00 00       	call   c0019c2c <FAT::FAT()>
c000f310:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f317:	e8 98 fb ff ff       	call   c000eeb4 <operator new(unsigned long)>
c000f31c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f31f:	e8 7e bb 00 00       	call   c001aea2 <ISO9660::ISO9660()>
c000f324:	83 c4 1c             	add    esp,0x1c
c000f327:	c3                   	ret    

c000f328 <standardiseFiles(char*, char const*, char const*)>:
c000f328:	55                   	push   ebp
c000f329:	57                   	push   edi
c000f32a:	56                   	push   esi
c000f32b:	53                   	push   ebx
c000f32c:	81 ec 10 04 00 00    	sub    esp,0x410
c000f332:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f339:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f340:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f347:	68 00 04 00 00       	push   0x400
c000f34c:	6a 00                	push   0x0
c000f34e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f352:	56                   	push   esi
c000f353:	e8 b0 12 ff ff       	call   c0000608 <memset>
c000f358:	83 c4 10             	add    esp,0x10
c000f35b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f35f:	75 0b                	jne    c000f36c <standardiseFiles(char*, char const*, char const*)+0x44>
c000f361:	50                   	push   eax
c000f362:	50                   	push   eax
c000f363:	57                   	push   edi
c000f364:	56                   	push   esi
c000f365:	e8 3d 13 ff ff       	call   c00006a7 <strcpy>
c000f36a:	eb 41                	jmp    c000f3ad <standardiseFiles(char*, char const*, char const*)+0x85>
c000f36c:	8a 07                	mov    al,BYTE PTR [edi]
c000f36e:	3c 5c                	cmp    al,0x5c
c000f370:	74 04                	je     c000f376 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f372:	3c 2f                	cmp    al,0x2f
c000f374:	75 18                	jne    c000f38e <standardiseFiles(char*, char const*, char const*)+0x66>
c000f376:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f379:	3c 60                	cmp    al,0x60
c000f37b:	7e 03                	jle    c000f380 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f37d:	83 e8 20             	sub    eax,0x20
c000f380:	88 04 24             	mov    BYTE PTR [esp],al
c000f383:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f38a:	50                   	push   eax
c000f38b:	50                   	push   eax
c000f38c:	eb 18                	jmp    c000f3a6 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f38e:	50                   	push   eax
c000f38f:	50                   	push   eax
c000f390:	55                   	push   ebp
c000f391:	56                   	push   esi
c000f392:	e8 10 13 ff ff       	call   c00006a7 <strcpy>
c000f397:	5a                   	pop    edx
c000f398:	59                   	pop    ecx
c000f399:	68 d5 1c 02 c0       	push   0xc0021cd5
c000f39e:	56                   	push   esi
c000f39f:	e8 ba 13 ff ff       	call   c000075e <strcat>
c000f3a4:	5d                   	pop    ebp
c000f3a5:	58                   	pop    eax
c000f3a6:	57                   	push   edi
c000f3a7:	56                   	push   esi
c000f3a8:	e8 b1 13 ff ff       	call   c000075e <strcat>
c000f3ad:	83 c4 10             	add    esp,0x10
c000f3b0:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f3b3:	3c 60                	cmp    al,0x60
c000f3b5:	7e 03                	jle    c000f3ba <standardiseFiles(char*, char const*, char const*)+0x92>
c000f3b7:	83 e8 20             	sub    eax,0x20
c000f3ba:	88 04 24             	mov    BYTE PTR [esp],al
c000f3bd:	88 03                	mov    BYTE PTR [ebx],al
c000f3bf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f3c6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f3cc:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f3d0:	bf 03 00 00 00       	mov    edi,0x3
c000f3d5:	b8 03 00 00 00       	mov    eax,0x3
c000f3da:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f3dd:	84 d2                	test   dl,dl
c000f3df:	0f 84 91 00 00 00    	je     c000f476 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f3e5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f3e8:	80 fa 5c             	cmp    dl,0x5c
c000f3eb:	74 05                	je     c000f3f2 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f3ed:	80 fa 2f             	cmp    dl,0x2f
c000f3f0:	75 12                	jne    c000f404 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f3f2:	89 c5                	mov    ebp,eax
c000f3f4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f3f9:	74 09                	je     c000f404 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f3fb:	40                   	inc    eax
c000f3fc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f400:	89 cf                	mov    edi,ecx
c000f402:	eb d6                	jmp    c000f3da <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f404:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f409:	75 5b                	jne    c000f466 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f40b:	80 fa 2e             	cmp    dl,0x2e
c000f40e:	75 56                	jne    c000f466 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f410:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f414:	74 19                	je     c000f42f <standardiseFiles(char*, char const*, char const*)+0x107>
c000f416:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f41b:	74 53                	je     c000f470 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f41d:	89 f9                	mov    ecx,edi
c000f41f:	41                   	inc    ecx
c000f420:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f423:	80 fa 2f             	cmp    dl,0x2f
c000f426:	74 f7                	je     c000f41f <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f428:	80 fa 5c             	cmp    dl,0x5c
c000f42b:	74 f2                	je     c000f41f <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f42d:	eb d1                	jmp    c000f400 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f42f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f434:	74 3a                	je     c000f470 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f436:	83 f8 03             	cmp    eax,0x3
c000f439:	74 c5                	je     c000f400 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f43b:	41                   	inc    ecx
c000f43c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f43f:	80 fa 2f             	cmp    dl,0x2f
c000f442:	74 f7                	je     c000f43b <standardiseFiles(char*, char const*, char const*)+0x113>
c000f444:	80 fa 5c             	cmp    dl,0x5c
c000f447:	74 f2                	je     c000f43b <standardiseFiles(char*, char const*, char const*)+0x113>
c000f449:	48                   	dec    eax
c000f44a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f44e:	75 06                	jne    c000f456 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f450:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f454:	eb f3                	jmp    c000f449 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f456:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f45a:	74 07                	je     c000f463 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f45c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f460:	48                   	dec    eax
c000f461:	eb f3                	jmp    c000f456 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f463:	40                   	inc    eax
c000f464:	eb 9a                	jmp    c000f400 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f466:	80 fa 2f             	cmp    dl,0x2f
c000f469:	74 95                	je     c000f400 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f46b:	80 fa 5c             	cmp    dl,0x5c
c000f46e:	74 90                	je     c000f400 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f470:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f473:	40                   	inc    eax
c000f474:	eb 8a                	jmp    c000f400 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f476:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f47a:	83 ec 0c             	sub    esp,0xc
c000f47d:	53                   	push   ebx
c000f47e:	e8 a2 11 ff ff       	call   c0000625 <strlen>
c000f483:	83 c4 10             	add    esp,0x10
c000f486:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f48b:	75 26                	jne    c000f4b3 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f48d:	83 ec 0c             	sub    esp,0xc
c000f490:	53                   	push   ebx
c000f491:	e8 8f 11 ff ff       	call   c0000625 <strlen>
c000f496:	83 c4 10             	add    esp,0x10
c000f499:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f49e:	74 26                	je     c000f4c6 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f4a0:	83 ec 0c             	sub    esp,0xc
c000f4a3:	53                   	push   ebx
c000f4a4:	e8 7c 11 ff ff       	call   c0000625 <strlen>
c000f4a9:	83 c4 10             	add    esp,0x10
c000f4ac:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f4b1:	eb c7                	jmp    c000f47a <standardiseFiles(char*, char const*, char const*)+0x152>
c000f4b3:	83 ec 0c             	sub    esp,0xc
c000f4b6:	53                   	push   ebx
c000f4b7:	e8 69 11 ff ff       	call   c0000625 <strlen>
c000f4bc:	83 c4 10             	add    esp,0x10
c000f4bf:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f4c4:	74 c7                	je     c000f48d <standardiseFiles(char*, char const*, char const*)+0x165>
c000f4c6:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f4cc:	5b                   	pop    ebx
c000f4cd:	5e                   	pop    esi
c000f4ce:	5f                   	pop    edi
c000f4cf:	5d                   	pop    ebp
c000f4d0:	c3                   	ret    
c000f4d1:	90                   	nop

c000f4d2 <File::File(char const*, Process*)>:
c000f4d2:	83 ec 0c             	sub    esp,0xc
c000f4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4d9:	83 ec 08             	sub    esp,0x8
c000f4dc:	6a 00                	push   0x0
c000f4de:	50                   	push   eax
c000f4df:	e8 4c e4 ff ff       	call   c000d930 <UnixFile::UnixFile(int)>
c000f4e4:	83 c4 10             	add    esp,0x10
c000f4e7:	ba c8 0b 02 c0       	mov    edx,0xc0020bc8
c000f4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4f0:	89 10                	mov    DWORD PTR [eax],edx
c000f4f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f4f6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f500:	83 c0 0d             	add    eax,0xd
c000f503:	83 ec 04             	sub    esp,0x4
c000f506:	52                   	push   edx
c000f507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f50b:	50                   	push   eax
c000f50c:	e8 17 fe ff ff       	call   c000f328 <standardiseFiles(char*, char const*, char const*)>
c000f511:	83 c4 10             	add    esp,0x10
c000f514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f518:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f51b:	8d 50 bf             	lea    edx,[eax-0x41]
c000f51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f522:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f52c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f530:	90                   	nop
c000f531:	83 c4 0c             	add    esp,0xc
c000f534:	c3                   	ret    
c000f535:	90                   	nop

c000f536 <File::open(FileOpenMode)>:
c000f536:	53                   	push   ebx
c000f537:	b8 0b 00 00 00       	mov    eax,0xb
c000f53c:	83 ec 08             	sub    esp,0x8
c000f53f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f543:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f54a:	80 fa 19             	cmp    dl,0x19
c000f54d:	77 40                	ja     c000f58f <File::open(FileOpenMode)+0x59>
c000f54f:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c000f556:	85 d2                	test   edx,edx
c000f558:	74 35                	je     c000f58f <File::open(FileOpenMode)+0x59>
c000f55a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f560:	85 d2                	test   edx,edx
c000f562:	74 2b                	je     c000f58f <File::open(FileOpenMode)+0x59>
c000f564:	b8 06 00 00 00       	mov    eax,0x6
c000f569:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f56d:	75 20                	jne    c000f58f <File::open(FileOpenMode)+0x59>
c000f56f:	8b 02                	mov    eax,DWORD PTR [edx]
c000f571:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f57b:	51                   	push   ecx
c000f57c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f57f:	51                   	push   ecx
c000f580:	52                   	push   edx
c000f581:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f584:	83 c4 10             	add    esp,0x10
c000f587:	85 c0                	test   eax,eax
c000f589:	75 04                	jne    c000f58f <File::open(FileOpenMode)+0x59>
c000f58b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f58f:	83 c4 08             	add    esp,0x8
c000f592:	5b                   	pop    ebx
c000f593:	c3                   	ret    

c000f594 <File::close()>:
c000f594:	53                   	push   ebx
c000f595:	b8 0b 00 00 00       	mov    eax,0xb
c000f59a:	83 ec 08             	sub    esp,0x8
c000f59d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f5a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f5a8:	80 fa 19             	cmp    dl,0x19
c000f5ab:	77 41                	ja     c000f5ee <File::close()+0x5a>
c000f5ad:	8b 1c 95 40 3c 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc3c0]
c000f5b4:	85 db                	test   ebx,ebx
c000f5b6:	74 36                	je     c000f5ee <File::close()+0x5a>
c000f5b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f5bf:	74 2d                	je     c000f5ee <File::close()+0x5a>
c000f5c1:	b8 05 00 00 00       	mov    eax,0x5
c000f5c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f5ca:	74 22                	je     c000f5ee <File::close()+0x5a>
c000f5cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f5d0:	8b 04 95 40 3c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc3c0]
c000f5d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f5dd:	53                   	push   ebx
c000f5de:	53                   	push   ebx
c000f5df:	8b 10                	mov    edx,DWORD PTR [eax]
c000f5e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f5e7:	50                   	push   eax
c000f5e8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f5eb:	83 c4 10             	add    esp,0x10
c000f5ee:	83 c4 08             	add    esp,0x8
c000f5f1:	5b                   	pop    ebx
c000f5f2:	c3                   	ret    
c000f5f3:	90                   	nop

c000f5f4 <File::seek(unsigned long long)>:
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	b8 0b 00 00 00       	mov    eax,0xb
c000f5fb:	51                   	push   ecx
c000f5fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f600:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f604:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f60b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f60f:	80 fa 19             	cmp    dl,0x19
c000f612:	77 31                	ja     c000f645 <File::seek(unsigned long long)+0x51>
c000f614:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c000f61b:	85 d2                	test   edx,edx
c000f61d:	74 26                	je     c000f645 <File::seek(unsigned long long)+0x51>
c000f61f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f625:	85 d2                	test   edx,edx
c000f627:	74 1c                	je     c000f645 <File::seek(unsigned long long)+0x51>
c000f629:	b8 05 00 00 00       	mov    eax,0x5
c000f62e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f632:	74 11                	je     c000f645 <File::seek(unsigned long long)+0x51>
c000f634:	8b 02                	mov    eax,DWORD PTR [edx]
c000f636:	53                   	push   ebx
c000f637:	51                   	push   ecx
c000f638:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f63e:	52                   	push   edx
c000f63f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f642:	83 c4 10             	add    esp,0x10
c000f645:	5a                   	pop    edx
c000f646:	5b                   	pop    ebx
c000f647:	5e                   	pop    esi
c000f648:	c3                   	ret    
c000f649:	90                   	nop

c000f64a <File::tell(unsigned long long*)>:
c000f64a:	83 ec 0c             	sub    esp,0xc
c000f64d:	b8 0b 00 00 00       	mov    eax,0xb
c000f652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f656:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f65d:	80 fa 19             	cmp    dl,0x19
c000f660:	77 34                	ja     c000f696 <File::tell(unsigned long long*)+0x4c>
c000f662:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c000f669:	85 d2                	test   edx,edx
c000f66b:	74 29                	je     c000f696 <File::tell(unsigned long long*)+0x4c>
c000f66d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f673:	85 d2                	test   edx,edx
c000f675:	74 1f                	je     c000f696 <File::tell(unsigned long long*)+0x4c>
c000f677:	b8 05 00 00 00       	mov    eax,0x5
c000f67c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f680:	74 14                	je     c000f696 <File::tell(unsigned long long*)+0x4c>
c000f682:	50                   	push   eax
c000f683:	8b 02                	mov    eax,DWORD PTR [edx]
c000f685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f689:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f68f:	52                   	push   edx
c000f690:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f693:	83 c4 10             	add    esp,0x10
c000f696:	83 c4 0c             	add    esp,0xc
c000f699:	c3                   	ret    

c000f69a <File::rewind()>:
c000f69a:	83 ec 10             	sub    esp,0x10
c000f69d:	6a 00                	push   0x0
c000f69f:	6a 00                	push   0x0
c000f6a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6a5:	e8 4a ff ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c000f6aa:	83 c4 1c             	add    esp,0x1c
c000f6ad:	c3                   	ret    

c000f6ae <File::unlink()>:
c000f6ae:	83 ec 0c             	sub    esp,0xc
c000f6b1:	b8 0b 00 00 00       	mov    eax,0xb
c000f6b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f6ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f6c1:	80 f9 19             	cmp    cl,0x19
c000f6c4:	77 2f                	ja     c000f6f5 <File::unlink()+0x47>
c000f6c6:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c000f6cd:	85 c9                	test   ecx,ecx
c000f6cf:	74 24                	je     c000f6f5 <File::unlink()+0x47>
c000f6d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f6d7:	85 c9                	test   ecx,ecx
c000f6d9:	74 1a                	je     c000f6f5 <File::unlink()+0x47>
c000f6db:	b8 06 00 00 00       	mov    eax,0x6
c000f6e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f6e4:	75 0f                	jne    c000f6f5 <File::unlink()+0x47>
c000f6e6:	83 c2 0d             	add    edx,0xd
c000f6e9:	50                   	push   eax
c000f6ea:	50                   	push   eax
c000f6eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f6ed:	52                   	push   edx
c000f6ee:	51                   	push   ecx
c000f6ef:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f6f2:	83 c4 10             	add    esp,0x10
c000f6f5:	83 c4 0c             	add    esp,0xc
c000f6f8:	c3                   	ret    
c000f6f9:	90                   	nop

c000f6fa <File::rename(char const*)>:
c000f6fa:	83 ec 0c             	sub    esp,0xc
c000f6fd:	b8 0b 00 00 00       	mov    eax,0xb
c000f702:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f706:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f70d:	80 f9 19             	cmp    cl,0x19
c000f710:	77 32                	ja     c000f744 <File::rename(char const*)+0x4a>
c000f712:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c000f719:	85 c9                	test   ecx,ecx
c000f71b:	74 27                	je     c000f744 <File::rename(char const*)+0x4a>
c000f71d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f723:	85 c9                	test   ecx,ecx
c000f725:	74 1d                	je     c000f744 <File::rename(char const*)+0x4a>
c000f727:	b8 06 00 00 00       	mov    eax,0x6
c000f72c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f730:	75 12                	jne    c000f744 <File::rename(char const*)+0x4a>
c000f732:	83 c2 0d             	add    edx,0xd
c000f735:	50                   	push   eax
c000f736:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f738:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f73c:	52                   	push   edx
c000f73d:	51                   	push   ecx
c000f73e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	83 c4 0c             	add    esp,0xc
c000f747:	c3                   	ret    

c000f748 <File::chfatattr(unsigned char, unsigned char)>:
c000f748:	57                   	push   edi
c000f749:	b8 0b 00 00 00       	mov    eax,0xb
c000f74e:	56                   	push   esi
c000f74f:	53                   	push   ebx
c000f750:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f754:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f758:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f75f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f763:	80 f9 19             	cmp    cl,0x19
c000f766:	77 37                	ja     c000f79f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f768:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c000f76f:	85 c9                	test   ecx,ecx
c000f771:	74 2c                	je     c000f79f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f773:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f779:	85 c9                	test   ecx,ecx
c000f77b:	74 22                	je     c000f79f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f77d:	b8 06 00 00 00       	mov    eax,0x6
c000f782:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f786:	75 17                	jne    c000f79f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f788:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f78a:	89 f0                	mov    eax,esi
c000f78c:	83 c2 0d             	add    edx,0xd
c000f78f:	0f b6 f0             	movzx  esi,al
c000f792:	0f b6 db             	movzx  ebx,bl
c000f795:	56                   	push   esi
c000f796:	53                   	push   ebx
c000f797:	52                   	push   edx
c000f798:	51                   	push   ecx
c000f799:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f79c:	83 c4 10             	add    esp,0x10
c000f79f:	5b                   	pop    ebx
c000f7a0:	5e                   	pop    esi
c000f7a1:	5f                   	pop    edi
c000f7a2:	c3                   	ret    
c000f7a3:	90                   	nop

c000f7a4 <File::exists()>:
c000f7a4:	83 ec 0c             	sub    esp,0xc
c000f7a7:	31 c0                	xor    eax,eax
c000f7a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f7ad:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f7b4:	80 f9 19             	cmp    cl,0x19
c000f7b7:	77 24                	ja     c000f7dd <File::exists()+0x39>
c000f7b9:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c000f7c0:	85 c9                	test   ecx,ecx
c000f7c2:	74 19                	je     c000f7dd <File::exists()+0x39>
c000f7c4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f7ca:	85 c9                	test   ecx,ecx
c000f7cc:	74 0f                	je     c000f7dd <File::exists()+0x39>
c000f7ce:	83 c2 0d             	add    edx,0xd
c000f7d1:	50                   	push   eax
c000f7d2:	50                   	push   eax
c000f7d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f7d5:	52                   	push   edx
c000f7d6:	51                   	push   ecx
c000f7d7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f7da:	83 c4 10             	add    esp,0x10
c000f7dd:	83 c4 0c             	add    esp,0xc
c000f7e0:	c3                   	ret    
c000f7e1:	90                   	nop

c000f7e2 <File::stat(unsigned long long*, bool*)>:
c000f7e2:	56                   	push   esi
c000f7e3:	53                   	push   ebx
c000f7e4:	50                   	push   eax
c000f7e5:	b8 0b 00 00 00       	mov    eax,0xb
c000f7ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f7ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f7f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f7f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7fd:	80 f9 19             	cmp    cl,0x19
c000f800:	77 3d                	ja     c000f83f <File::stat(unsigned long long*, bool*)+0x5d>
c000f802:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c000f809:	85 c9                	test   ecx,ecx
c000f80b:	74 32                	je     c000f83f <File::stat(unsigned long long*, bool*)+0x5d>
c000f80d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f813:	85 c9                	test   ecx,ecx
c000f815:	74 28                	je     c000f83f <File::stat(unsigned long long*, bool*)+0x5d>
c000f817:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f81d:	74 13                	je     c000f832 <File::stat(unsigned long long*, bool*)+0x50>
c000f81f:	83 ec 04             	sub    esp,0x4
c000f822:	56                   	push   esi
c000f823:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f829:	51                   	push   ecx
c000f82a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f82d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f830:	eb 0a                	jmp    c000f83c <File::stat(unsigned long long*, bool*)+0x5a>
c000f832:	53                   	push   ebx
c000f833:	83 c2 0d             	add    edx,0xd
c000f836:	56                   	push   esi
c000f837:	52                   	push   edx
c000f838:	51                   	push   ecx
c000f839:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f83c:	83 c4 10             	add    esp,0x10
c000f83f:	5a                   	pop    edx
c000f840:	5b                   	pop    ebx
c000f841:	5e                   	pop    esi
c000f842:	c3                   	ret    

c000f843 <getcwd(Process*, char*, int)>:
c000f843:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f847:	31 c0                	xor    eax,eax
c000f849:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f84c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f850:	7d 15                	jge    c000f867 <getcwd(Process*, char*, int)+0x24>
c000f852:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f856:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f85d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f860:	84 c9                	test   cl,cl
c000f862:	74 06                	je     c000f86a <getcwd(Process*, char*, int)+0x27>
c000f864:	40                   	inc    eax
c000f865:	eb e2                	jmp    c000f849 <getcwd(Process*, char*, int)+0x6>
c000f867:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f86a:	31 c0                	xor    eax,eax
c000f86c:	c3                   	ret    

c000f86d <setcwd(Process*, char*)>:
c000f86d:	55                   	push   ebp
c000f86e:	57                   	push   edi
c000f86f:	56                   	push   esi
c000f870:	53                   	push   ebx
c000f871:	81 ec 20 02 00 00    	sub    esp,0x220
c000f877:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f87e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f884:	57                   	push   edi
c000f885:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f88c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f890:	56                   	push   esi
c000f891:	e8 92 fa ff ff       	call   c000f328 <standardiseFiles(char*, char const*, char const*)>
c000f896:	89 34 24             	mov    DWORD PTR [esp],esi
c000f899:	e8 87 0d ff ff       	call   c0000625 <strlen>
c000f89e:	83 c4 10             	add    esp,0x10
c000f8a1:	83 f8 02             	cmp    eax,0x2
c000f8a4:	77 17                	ja     c000f8bd <setcwd(Process*, char*)+0x50>
c000f8a6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f8ab:	83 e8 41             	sub    eax,0x41
c000f8ae:	83 f8 19             	cmp    eax,0x19
c000f8b1:	76 24                	jbe    c000f8d7 <setcwd(Process*, char*)+0x6a>
c000f8b3:	b8 03 00 00 00       	mov    eax,0x3
c000f8b8:	e9 cb 00 00 00       	jmp    c000f988 <setcwd(Process*, char*)+0x11b>
c000f8bd:	83 ec 0c             	sub    esp,0xc
c000f8c0:	56                   	push   esi
c000f8c1:	e8 5f 0d ff ff       	call   c0000625 <strlen>
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	83 f8 03             	cmp    eax,0x3
c000f8cc:	75 33                	jne    c000f901 <setcwd(Process*, char*)+0x94>
c000f8ce:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f8d3:	75 2c                	jne    c000f901 <setcwd(Process*, char*)+0x94>
c000f8d5:	eb cf                	jmp    c000f8a6 <setcwd(Process*, char*)+0x39>
c000f8d7:	8b 14 85 40 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc3c0]
c000f8de:	b8 05 00 00 00       	mov    eax,0x5
c000f8e3:	85 d2                	test   edx,edx
c000f8e5:	0f 84 9d 00 00 00    	je     c000f988 <setcwd(Process*, char*)+0x11b>
c000f8eb:	b8 06 00 00 00       	mov    eax,0x6
c000f8f0:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f8f7:	0f 84 8b 00 00 00    	je     c000f988 <setcwd(Process*, char*)+0x11b>
c000f8fd:	51                   	push   ecx
c000f8fe:	51                   	push   ecx
c000f8ff:	eb 7b                	jmp    c000f97c <setcwd(Process*, char*)+0x10f>
c000f901:	83 ec 0c             	sub    esp,0xc
c000f904:	68 14 01 00 00       	push   0x114
c000f909:	e8 a6 f5 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c000f90e:	83 c4 0c             	add    esp,0xc
c000f911:	89 c3                	mov    ebx,eax
c000f913:	55                   	push   ebp
c000f914:	56                   	push   esi
c000f915:	50                   	push   eax
c000f916:	e8 b7 fb ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c000f91b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f920:	83 c4 0c             	add    esp,0xc
c000f923:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f927:	50                   	push   eax
c000f928:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f92c:	50                   	push   eax
c000f92d:	53                   	push   ebx
c000f92e:	e8 af fe ff ff       	call   c000f7e2 <File::stat(unsigned long long*, bool*)>
c000f933:	83 c4 10             	add    esp,0x10
c000f936:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f938:	83 f8 02             	cmp    eax,0x2
c000f93b:	75 09                	jne    c000f946 <setcwd(Process*, char*)+0xd9>
c000f93d:	83 ec 0c             	sub    esp,0xc
c000f940:	53                   	push   ebx
c000f941:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f944:	eb 0d                	jmp    c000f953 <setcwd(Process*, char*)+0xe6>
c000f946:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f949:	85 c0                	test   eax,eax
c000f94b:	74 10                	je     c000f95d <setcwd(Process*, char*)+0xf0>
c000f94d:	83 ec 0c             	sub    esp,0xc
c000f950:	53                   	push   ebx
c000f951:	ff d2                	call   edx
c000f953:	83 c4 10             	add    esp,0x10
c000f956:	b8 01 00 00 00       	mov    eax,0x1
c000f95b:	eb 2b                	jmp    c000f988 <setcwd(Process*, char*)+0x11b>
c000f95d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f962:	75 10                	jne    c000f974 <setcwd(Process*, char*)+0x107>
c000f964:	83 ec 0c             	sub    esp,0xc
c000f967:	53                   	push   ebx
c000f968:	ff d2                	call   edx
c000f96a:	83 c4 10             	add    esp,0x10
c000f96d:	b8 02 00 00 00       	mov    eax,0x2
c000f972:	eb 14                	jmp    c000f988 <setcwd(Process*, char*)+0x11b>
c000f974:	83 ec 0c             	sub    esp,0xc
c000f977:	53                   	push   ebx
c000f978:	ff d2                	call   edx
c000f97a:	58                   	pop    eax
c000f97b:	5a                   	pop    edx
c000f97c:	56                   	push   esi
c000f97d:	57                   	push   edi
c000f97e:	e8 24 0d ff ff       	call   c00006a7 <strcpy>
c000f983:	83 c4 10             	add    esp,0x10
c000f986:	31 c0                	xor    eax,eax
c000f988:	81 c4 1c 02 00 00    	add    esp,0x21c
c000f98e:	5b                   	pop    ebx
c000f98f:	5e                   	pop    esi
c000f990:	5f                   	pop    edi
c000f991:	5d                   	pop    ebp
c000f992:	c3                   	ret    
c000f993:	90                   	nop

c000f994 <Directory::Directory(char const*, Process*)>:
c000f994:	83 ec 0c             	sub    esp,0xc
c000f997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f99b:	83 ec 08             	sub    esp,0x8
c000f99e:	6a 00                	push   0x0
c000f9a0:	50                   	push   eax
c000f9a1:	e8 8a df ff ff       	call   c000d930 <UnixFile::UnixFile(int)>
c000f9a6:	83 c4 10             	add    esp,0x10
c000f9a9:	ba e4 0b 02 c0       	mov    edx,0xc0020be4
c000f9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9b2:	89 10                	mov    DWORD PTR [eax],edx
c000f9b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f9b8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9c2:	83 c0 0d             	add    eax,0xd
c000f9c5:	83 ec 04             	sub    esp,0x4
c000f9c8:	52                   	push   edx
c000f9c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9cd:	50                   	push   eax
c000f9ce:	e8 55 f9 ff ff       	call   c000f328 <standardiseFiles(char*, char const*, char const*)>
c000f9d3:	83 c4 10             	add    esp,0x10
c000f9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9da:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f9dd:	8d 50 bf             	lea    edx,[eax-0x41]
c000f9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9e4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9ee:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f9f2:	90                   	nop
c000f9f3:	83 c4 0c             	add    esp,0xc
c000f9f6:	c3                   	ret    
c000f9f7:	90                   	nop

c000f9f8 <Directory::open()>:
c000f9f8:	53                   	push   ebx
c000f9f9:	b8 0b 00 00 00       	mov    eax,0xb
c000f9fe:	83 ec 08             	sub    esp,0x8
c000fa01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa05:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fa0c:	80 fa 19             	cmp    dl,0x19
c000fa0f:	77 3d                	ja     c000fa4e <Directory::open()+0x56>
c000fa11:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c000fa18:	85 d2                	test   edx,edx
c000fa1a:	74 32                	je     c000fa4e <Directory::open()+0x56>
c000fa1c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fa22:	85 d2                	test   edx,edx
c000fa24:	74 28                	je     c000fa4e <Directory::open()+0x56>
c000fa26:	b8 06 00 00 00       	mov    eax,0x6
c000fa2b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fa2f:	75 1d                	jne    c000fa4e <Directory::open()+0x56>
c000fa31:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fa37:	50                   	push   eax
c000fa38:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa3a:	51                   	push   ecx
c000fa3b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fa3e:	51                   	push   ecx
c000fa3f:	52                   	push   edx
c000fa40:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fa43:	83 c4 10             	add    esp,0x10
c000fa46:	85 c0                	test   eax,eax
c000fa48:	75 04                	jne    c000fa4e <Directory::open()+0x56>
c000fa4a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fa4e:	83 c4 08             	add    esp,0x8
c000fa51:	5b                   	pop    ebx
c000fa52:	c3                   	ret    
c000fa53:	90                   	nop

c000fa54 <Directory::close()>:
c000fa54:	53                   	push   ebx
c000fa55:	b8 0b 00 00 00       	mov    eax,0xb
c000fa5a:	83 ec 08             	sub    esp,0x8
c000fa5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fa61:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fa68:	80 fa 19             	cmp    dl,0x19
c000fa6b:	77 41                	ja     c000faae <Directory::close()+0x5a>
c000fa6d:	8b 1c 95 40 3c 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc3c0]
c000fa74:	85 db                	test   ebx,ebx
c000fa76:	74 36                	je     c000faae <Directory::close()+0x5a>
c000fa78:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fa7f:	74 2d                	je     c000faae <Directory::close()+0x5a>
c000fa81:	b8 05 00 00 00       	mov    eax,0x5
c000fa86:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fa8a:	74 22                	je     c000faae <Directory::close()+0x5a>
c000fa8c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fa90:	8b 04 95 40 3c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc3c0]
c000fa97:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fa9d:	53                   	push   ebx
c000fa9e:	53                   	push   ebx
c000fa9f:	8b 10                	mov    edx,DWORD PTR [eax]
c000faa1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000faa7:	50                   	push   eax
c000faa8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000faab:	83 c4 10             	add    esp,0x10
c000faae:	83 c4 08             	add    esp,0x8
c000fab1:	5b                   	pop    ebx
c000fab2:	c3                   	ret    
c000fab3:	90                   	nop

c000fab4 <Directory::unlink()>:
c000fab4:	83 ec 0c             	sub    esp,0xc
c000fab7:	b8 0b 00 00 00       	mov    eax,0xb
c000fabc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fac0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fac7:	80 f9 19             	cmp    cl,0x19
c000faca:	77 2f                	ja     c000fafb <Directory::unlink()+0x47>
c000facc:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c000fad3:	85 c9                	test   ecx,ecx
c000fad5:	74 24                	je     c000fafb <Directory::unlink()+0x47>
c000fad7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fadd:	85 c9                	test   ecx,ecx
c000fadf:	74 1a                	je     c000fafb <Directory::unlink()+0x47>
c000fae1:	b8 06 00 00 00       	mov    eax,0x6
c000fae6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000faea:	75 0f                	jne    c000fafb <Directory::unlink()+0x47>
c000faec:	83 c2 0d             	add    edx,0xd
c000faef:	50                   	push   eax
c000faf0:	50                   	push   eax
c000faf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000faf3:	52                   	push   edx
c000faf4:	51                   	push   ecx
c000faf5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000faf8:	83 c4 10             	add    esp,0x10
c000fafb:	83 c4 0c             	add    esp,0xc
c000fafe:	c3                   	ret    
c000faff:	90                   	nop

c000fb00 <Directory::rename(char const*)>:
c000fb00:	83 ec 0c             	sub    esp,0xc
c000fb03:	b8 0b 00 00 00       	mov    eax,0xb
c000fb08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb13:	80 f9 19             	cmp    cl,0x19
c000fb16:	77 32                	ja     c000fb4a <Directory::rename(char const*)+0x4a>
c000fb18:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c000fb1f:	85 c9                	test   ecx,ecx
c000fb21:	74 27                	je     c000fb4a <Directory::rename(char const*)+0x4a>
c000fb23:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb29:	85 c9                	test   ecx,ecx
c000fb2b:	74 1d                	je     c000fb4a <Directory::rename(char const*)+0x4a>
c000fb2d:	b8 06 00 00 00       	mov    eax,0x6
c000fb32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fb36:	75 12                	jne    c000fb4a <Directory::rename(char const*)+0x4a>
c000fb38:	83 c2 0d             	add    edx,0xd
c000fb3b:	50                   	push   eax
c000fb3c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb42:	52                   	push   edx
c000fb43:	51                   	push   ecx
c000fb44:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fb47:	83 c4 10             	add    esp,0x10
c000fb4a:	83 c4 0c             	add    esp,0xc
c000fb4d:	c3                   	ret    

c000fb4e <Directory::exists()>:
c000fb4e:	83 ec 0c             	sub    esp,0xc
c000fb51:	31 c0                	xor    eax,eax
c000fb53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb57:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb5e:	80 f9 19             	cmp    cl,0x19
c000fb61:	77 24                	ja     c000fb87 <Directory::exists()+0x39>
c000fb63:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c000fb6a:	85 c9                	test   ecx,ecx
c000fb6c:	74 19                	je     c000fb87 <Directory::exists()+0x39>
c000fb6e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb74:	85 c9                	test   ecx,ecx
c000fb76:	74 0f                	je     c000fb87 <Directory::exists()+0x39>
c000fb78:	83 c2 0d             	add    edx,0xd
c000fb7b:	50                   	push   eax
c000fb7c:	50                   	push   eax
c000fb7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb7f:	52                   	push   edx
c000fb80:	51                   	push   ecx
c000fb81:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fb84:	83 c4 10             	add    esp,0x10
c000fb87:	83 c4 0c             	add    esp,0xc
c000fb8a:	c3                   	ret    
c000fb8b:	90                   	nop

c000fb8c <Directory::read(dirent*)>:
c000fb8c:	83 ec 1c             	sub    esp,0x1c
c000fb8f:	b8 0b 00 00 00       	mov    eax,0xb
c000fb94:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fb98:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fb9f:	80 fa 19             	cmp    dl,0x19
c000fba2:	77 30                	ja     c000fbd4 <Directory::read(dirent*)+0x48>
c000fba4:	8b 14 95 40 3c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc3c0]
c000fbab:	85 d2                	test   edx,edx
c000fbad:	74 25                	je     c000fbd4 <Directory::read(dirent*)+0x48>
c000fbaf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fbb6:	74 1c                	je     c000fbd4 <Directory::read(dirent*)+0x48>
c000fbb8:	83 ec 0c             	sub    esp,0xc
c000fbbb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fbbd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fbc1:	52                   	push   edx
c000fbc2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fbc6:	6a 00                	push   0x0
c000fbc8:	68 10 01 00 00       	push   0x110
c000fbcd:	51                   	push   ecx
c000fbce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fbd1:	83 c4 20             	add    esp,0x20
c000fbd4:	83 c4 1c             	add    esp,0x1c
c000fbd7:	c3                   	ret    

c000fbd8 <Directory::create()>:
c000fbd8:	83 ec 0c             	sub    esp,0xc
c000fbdb:	b8 0b 00 00 00       	mov    eax,0xb
c000fbe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fbe4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fbeb:	80 f9 19             	cmp    cl,0x19
c000fbee:	77 2f                	ja     c000fc1f <Directory::create()+0x47>
c000fbf0:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c000fbf7:	85 c9                	test   ecx,ecx
c000fbf9:	74 24                	je     c000fc1f <Directory::create()+0x47>
c000fbfb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc01:	85 c9                	test   ecx,ecx
c000fc03:	74 1a                	je     c000fc1f <Directory::create()+0x47>
c000fc05:	b8 06 00 00 00       	mov    eax,0x6
c000fc0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc0e:	75 0f                	jne    c000fc1f <Directory::create()+0x47>
c000fc10:	83 c2 0d             	add    edx,0xd
c000fc13:	50                   	push   eax
c000fc14:	50                   	push   eax
c000fc15:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc17:	52                   	push   edx
c000fc18:	51                   	push   ecx
c000fc19:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fc1c:	83 c4 10             	add    esp,0x10
c000fc1f:	83 c4 0c             	add    esp,0xc
c000fc22:	c3                   	ret    
c000fc23:	90                   	nop

c000fc24 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fc24:	b8 0a 00 00 00       	mov    eax,0xa
c000fc29:	c3                   	ret    

c000fc2a <Bus::Bus(char const*)>:
c000fc2a:	83 ec 0c             	sub    esp,0xc
c000fc2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc31:	83 ec 08             	sub    esp,0x8
c000fc34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc38:	50                   	push   eax
c000fc39:	e8 60 09 00 00       	call   c001059e <Device::Device(char const*)>
c000fc3e:	83 c4 10             	add    esp,0x10
c000fc41:	ba 00 0c 02 c0       	mov    edx,0xc0020c00
c000fc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4a:	89 10                	mov    DWORD PTR [eax],edx
c000fc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc50:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fc5a:	90                   	nop
c000fc5b:	83 c4 0c             	add    esp,0xc
c000fc5e:	c3                   	ret    
c000fc5f:	90                   	nop

c000fc60 <Bus::~Bus()>:
c000fc60:	83 ec 0c             	sub    esp,0xc
c000fc63:	ba 00 0c 02 c0       	mov    edx,0xc0020c00
c000fc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc6c:	89 10                	mov    DWORD PTR [eax],edx
c000fc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc72:	83 ec 0c             	sub    esp,0xc
c000fc75:	50                   	push   eax
c000fc76:	e8 d5 05 00 00       	call   c0010250 <Device::~Device()>
c000fc7b:	83 c4 10             	add    esp,0x10
c000fc7e:	90                   	nop
c000fc7f:	83 c4 0c             	add    esp,0xc
c000fc82:	c3                   	ret    
c000fc83:	90                   	nop

c000fc84 <Bus::~Bus()>:
c000fc84:	83 ec 0c             	sub    esp,0xc
c000fc87:	83 ec 0c             	sub    esp,0xc
c000fc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc8e:	e8 cd ff ff ff       	call   c000fc60 <Bus::~Bus()>
c000fc93:	83 c4 10             	add    esp,0x10
c000fc96:	83 ec 08             	sub    esp,0x8
c000fc99:	68 58 01 00 00       	push   0x158
c000fc9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fca2:	e8 1c f2 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c000fca7:	83 c4 10             	add    esp,0x10
c000fcaa:	83 c4 0c             	add    esp,0xc
c000fcad:	c3                   	ret    

c000fcae <Buzzer::Buzzer(char const*)>:
c000fcae:	83 ec 0c             	sub    esp,0xc
c000fcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcb5:	83 ec 08             	sub    esp,0x8
c000fcb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcbc:	50                   	push   eax
c000fcbd:	e8 dc 08 00 00       	call   c001059e <Device::Device(char const*)>
c000fcc2:	83 c4 10             	add    esp,0x10
c000fcc5:	ba 2c 0c 02 c0       	mov    edx,0xc0020c2c
c000fcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcce:	89 10                	mov    DWORD PTR [eax],edx
c000fcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcd4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fce2:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fcec:	90                   	nop
c000fced:	83 c4 0c             	add    esp,0xc
c000fcf0:	c3                   	ret    
c000fcf1:	90                   	nop

c000fcf2 <Buzzer::~Buzzer()>:
c000fcf2:	83 ec 0c             	sub    esp,0xc
c000fcf5:	ba 2c 0c 02 c0       	mov    edx,0xc0020c2c
c000fcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcfe:	89 10                	mov    DWORD PTR [eax],edx
c000fd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd04:	83 ec 0c             	sub    esp,0xc
c000fd07:	50                   	push   eax
c000fd08:	e8 43 05 00 00       	call   c0010250 <Device::~Device()>
c000fd0d:	83 c4 10             	add    esp,0x10
c000fd10:	90                   	nop
c000fd11:	83 c4 0c             	add    esp,0xc
c000fd14:	c3                   	ret    
c000fd15:	90                   	nop

c000fd16 <Buzzer::~Buzzer()>:
c000fd16:	83 ec 0c             	sub    esp,0xc
c000fd19:	83 ec 0c             	sub    esp,0xc
c000fd1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd20:	e8 cd ff ff ff       	call   c000fcf2 <Buzzer::~Buzzer()>
c000fd25:	83 c4 10             	add    esp,0x10
c000fd28:	83 ec 08             	sub    esp,0x8
c000fd2b:	68 5c 01 00 00       	push   0x15c
c000fd30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd34:	e8 8a f1 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c000fd39:	83 c4 10             	add    esp,0x10
c000fd3c:	83 c4 0c             	add    esp,0xc
c000fd3f:	c3                   	ret    

c000fd40 <Buzzer::stop()>:
c000fd40:	83 ec 14             	sub    esp,0x14
c000fd43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fd47:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd49:	6a 00                	push   0x0
c000fd4b:	50                   	push   eax
c000fd4c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fd4f:	83 c4 1c             	add    esp,0x1c
c000fd52:	c3                   	ret    

c000fd53 <beepThread(void*)>:
c000fd53:	53                   	push   ebx
c000fd54:	83 ec 08             	sub    esp,0x8
c000fd57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd5b:	e8 f8 7d 00 00       	call   c0017b58 <unlockScheduler()>
c000fd60:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fd65:	52                   	push   edx
c000fd66:	52                   	push   edx
c000fd67:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fd6d:	52                   	push   edx
c000fd6e:	50                   	push   eax
c000fd6f:	e8 9b 84 00 00       	call   c001820f <nanoSleep(unsigned long long)>
c000fd74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd77:	e8 c4 ff ff ff       	call   c000fd40 <Buzzer::stop()>
c000fd7c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fd84:	83 c4 18             	add    esp,0x18
c000fd87:	5b                   	pop    ebx
c000fd88:	e9 c8 83 00 00       	jmp    c0018155 <blockTask(TaskState)>
c000fd8d:	90                   	nop

c000fd8e <Buzzer::beep(int, int, bool)>:
c000fd8e:	57                   	push   edi
c000fd8f:	56                   	push   esi
c000fd90:	53                   	push   ebx
c000fd91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd95:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fd99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fd9d:	52                   	push   edx
c000fd9e:	52                   	push   edx
c000fd9f:	8b 06                	mov    eax,DWORD PTR [esi]
c000fda1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda5:	56                   	push   esi
c000fda6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fda9:	83 c4 10             	add    esp,0x10
c000fdac:	89 f8                	mov    eax,edi
c000fdae:	84 c0                	test   al,al
c000fdb0:	74 1f                	je     c000fdd1 <Buzzer::beep(int, int, bool)+0x43>
c000fdb2:	50                   	push   eax
c000fdb3:	50                   	push   eax
c000fdb4:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fdba:	99                   	cdq    
c000fdbb:	52                   	push   edx
c000fdbc:	50                   	push   eax
c000fdbd:	e8 4d 84 00 00       	call   c001820f <nanoSleep(unsigned long long)>
c000fdc2:	83 c4 10             	add    esp,0x10
c000fdc5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fdc9:	5b                   	pop    ebx
c000fdca:	5e                   	pop    esi
c000fdcb:	5f                   	pop    edi
c000fdcc:	e9 6f ff ff ff       	jmp    c000fd40 <Buzzer::stop()>
c000fdd1:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fdd7:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c000fddc:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fde4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fde8:	c7 44 24 14 53 fd 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fd53
c000fdf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fdf4:	5b                   	pop    ebx
c000fdf5:	5e                   	pop    esi
c000fdf6:	5f                   	pop    edi
c000fdf7:	e9 84 7e 00 00       	jmp    c0017c80 <Process::createThread(void (*)(void*), void*, int)>

c000fdfc <loadClockSettings()>:
c000fdfc:	c7 05 b4 37 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00237b4,0xa
c000fe06:	c6 05 b1 37 02 c0 00 	mov    BYTE PTR ds:0xc00237b1,0x0
c000fe0d:	c6 05 b0 37 02 c0 01 	mov    BYTE PTR ds:0xc00237b0,0x1
c000fe14:	c3                   	ret    
c000fe15:	90                   	nop

c000fe16 <Clock::Clock(char const*)>:
c000fe16:	83 ec 0c             	sub    esp,0xc
c000fe19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1d:	83 ec 08             	sub    esp,0x8
c000fe20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe24:	50                   	push   eax
c000fe25:	e8 74 07 00 00       	call   c001059e <Device::Device(char const*)>
c000fe2a:	83 c4 10             	add    esp,0x10
c000fe2d:	ba 5c 0c 02 c0       	mov    edx,0xc0020c5c
c000fe32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe36:	89 10                	mov    DWORD PTR [eax],edx
c000fe38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe3c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fe46:	90                   	nop
c000fe47:	83 c4 0c             	add    esp,0xc
c000fe4a:	c3                   	ret    
c000fe4b:	90                   	nop

c000fe4c <Clock::~Clock()>:
c000fe4c:	83 ec 0c             	sub    esp,0xc
c000fe4f:	ba 5c 0c 02 c0       	mov    edx,0xc0020c5c
c000fe54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe58:	89 10                	mov    DWORD PTR [eax],edx
c000fe5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe5e:	83 ec 0c             	sub    esp,0xc
c000fe61:	50                   	push   eax
c000fe62:	e8 e9 03 00 00       	call   c0010250 <Device::~Device()>
c000fe67:	83 c4 10             	add    esp,0x10
c000fe6a:	90                   	nop
c000fe6b:	83 c4 0c             	add    esp,0xc
c000fe6e:	c3                   	ret    
c000fe6f:	90                   	nop

c000fe70 <Clock::~Clock()>:
c000fe70:	83 ec 0c             	sub    esp,0xc
c000fe73:	83 ec 0c             	sub    esp,0xc
c000fe76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe7a:	e8 cd ff ff ff       	call   c000fe4c <Clock::~Clock()>
c000fe7f:	83 c4 10             	add    esp,0x10
c000fe82:	83 ec 08             	sub    esp,0x8
c000fe85:	68 58 01 00 00       	push   0x158
c000fe8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe8e:	e8 30 f0 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	83 c4 0c             	add    esp,0xc
c000fe99:	c3                   	ret    

c000fe9a <Clock::timeInSecondsLocal()>:
c000fe9a:	53                   	push   ebx
c000fe9b:	83 ec 14             	sub    esp,0x14
c000fe9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fea2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fea4:	50                   	push   eax
c000fea5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fea8:	0f b6 0d b0 37 02 c0 	movzx  ecx,BYTE PTR ds:0xc00237b0
c000feaf:	03 0d b4 37 02 c0    	add    ecx,DWORD PTR ds:0xc00237b4
c000feb5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000febb:	89 cb                	mov    ebx,ecx
c000febd:	c1 fb 1f             	sar    ebx,0x1f
c000fec0:	01 c8                	add    eax,ecx
c000fec2:	11 da                	adc    edx,ebx
c000fec4:	83 c4 10             	add    esp,0x10
c000fec7:	31 c9                	xor    ecx,ecx
c000fec9:	80 3d b1 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237b1,0x0
c000fed0:	74 05                	je     c000fed7 <Clock::timeInSecondsLocal()+0x3d>
c000fed2:	b9 08 07 00 00       	mov    ecx,0x708
c000fed7:	31 db                	xor    ebx,ebx
c000fed9:	01 c8                	add    eax,ecx
c000fedb:	11 da                	adc    edx,ebx
c000fedd:	83 c4 08             	add    esp,0x8
c000fee0:	5b                   	pop    ebx
c000fee1:	c3                   	ret    

c000fee2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000fee2:	57                   	push   edi
c000fee3:	56                   	push   esi
c000fee4:	53                   	push   ebx
c000fee5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fee9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000feed:	8b 01                	mov    eax,DWORD PTR [ecx]
c000feef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fef3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000fef6:	0f b6 05 b0 37 02 c0 	movzx  eax,BYTE PTR ds:0xc00237b0
c000fefd:	03 05 b4 37 02 c0    	add    eax,DWORD PTR ds:0xc00237b4
c000ff03:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ff09:	99                   	cdq    
c000ff0a:	29 c6                	sub    esi,eax
c000ff0c:	19 d7                	sbb    edi,edx
c000ff0e:	89 f0                	mov    eax,esi
c000ff10:	89 fa                	mov    edx,edi
c000ff12:	31 f6                	xor    esi,esi
c000ff14:	80 3d b1 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237b1,0x0
c000ff1b:	74 05                	je     c000ff22 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ff1d:	be 08 07 00 00       	mov    esi,0x708
c000ff22:	31 ff                	xor    edi,edi
c000ff24:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ff28:	29 f0                	sub    eax,esi
c000ff2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ff2e:	19 fa                	sbb    edx,edi
c000ff30:	89 d8                	mov    eax,ebx
c000ff32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ff36:	5b                   	pop    ebx
c000ff37:	5e                   	pop    esi
c000ff38:	5f                   	pop    edi
c000ff39:	ff e0                	jmp    eax

c000ff3b <datetimeToSeconds(datetime_t)>:
c000ff3b:	55                   	push   ebp
c000ff3c:	57                   	push   edi
c000ff3d:	56                   	push   esi
c000ff3e:	53                   	push   ebx
c000ff3f:	83 ec 14             	sub    esp,0x14
c000ff42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ff46:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ff4a:	89 d3                	mov    ebx,edx
c000ff4c:	0f b6 c6             	movzx  eax,dh
c000ff4f:	c1 eb 10             	shr    ebx,0x10
c000ff52:	48                   	dec    eax
c000ff53:	66 81 eb 6c 07       	sub    bx,0x76c
c000ff58:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ff5c:	0f b6 f5             	movzx  esi,ch
c000ff5f:	89 cf                	mov    edi,ecx
c000ff61:	6b f6 3c             	imul   esi,esi,0x3c
c000ff64:	c1 ef 10             	shr    edi,0x10
c000ff67:	0f b6 c9             	movzx  ecx,cl
c000ff6a:	89 f8                	mov    eax,edi
c000ff6c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ff72:	0f b6 f8             	movzx  edi,al
c000ff75:	0f b6 d2             	movzx  edx,dl
c000ff78:	01 fe                	add    esi,edi
c000ff7a:	01 f1                	add    ecx,esi
c000ff7c:	0f b7 f3             	movzx  esi,bx
c000ff7f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ff83:	c1 f9 1f             	sar    ecx,0x1f
c000ff86:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000ff8b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ff8f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000ff94:	8b 0c 8d a0 0c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf360]
c000ff9b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ff9f:	76 29                	jbe    c000ffca <datetimeToSeconds(datetime_t)+0x8f>
c000ffa1:	f6 c3 03             	test   bl,0x3
c000ffa4:	75 24                	jne    c000ffca <datetimeToSeconds(datetime_t)+0x8f>
c000ffa6:	31 d2                	xor    edx,edx
c000ffa8:	bf 64 00 00 00       	mov    edi,0x64
c000ffad:	89 d8                	mov    eax,ebx
c000ffaf:	66 f7 f7             	div    di
c000ffb2:	66 85 d2             	test   dx,dx
c000ffb5:	75 12                	jne    c000ffc9 <datetimeToSeconds(datetime_t)+0x8e>
c000ffb7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ffbd:	bf 90 01 00 00       	mov    edi,0x190
c000ffc2:	99                   	cdq    
c000ffc3:	f7 ff                	idiv   edi
c000ffc5:	85 d2                	test   edx,edx
c000ffc7:	75 01                	jne    c000ffca <datetimeToSeconds(datetime_t)+0x8f>
c000ffc9:	41                   	inc    ecx
c000ffca:	66 83 fb 46          	cmp    bx,0x46
c000ffce:	76 45                	jbe    c0010015 <datetimeToSeconds(datetime_t)+0xda>
c000ffd0:	bb 46 00 00 00       	mov    ebx,0x46
c000ffd5:	bf 64 00 00 00       	mov    edi,0x64
c000ffda:	bd 90 01 00 00       	mov    ebp,0x190
c000ffdf:	b8 6d 01 00 00       	mov    eax,0x16d
c000ffe4:	f6 c3 03             	test   bl,0x3
c000ffe7:	75 23                	jne    c001000c <datetimeToSeconds(datetime_t)+0xd1>
c000ffe9:	89 d8                	mov    eax,ebx
c000ffeb:	99                   	cdq    
c000ffec:	f7 ff                	idiv   edi
c000ffee:	b8 6e 01 00 00       	mov    eax,0x16e
c000fff3:	85 d2                	test   edx,edx
c000fff5:	75 15                	jne    c001000c <datetimeToSeconds(datetime_t)+0xd1>
c000fff7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000fffd:	99                   	cdq    
c000fffe:	f7 fd                	idiv   ebp
c0010000:	83 fa 01             	cmp    edx,0x1
c0010003:	19 c0                	sbb    eax,eax
c0010005:	f7 d0                	not    eax
c0010007:	05 6e 01 00 00       	add    eax,0x16e
c001000c:	01 c1                	add    ecx,eax
c001000e:	43                   	inc    ebx
c001000f:	39 f3                	cmp    ebx,esi
c0010011:	7c cc                	jl     c000ffdf <datetimeToSeconds(datetime_t)+0xa4>
c0010013:	eb 35                	jmp    c001004a <datetimeToSeconds(datetime_t)+0x10f>
c0010015:	74 33                	je     c001004a <datetimeToSeconds(datetime_t)+0x10f>
c0010017:	b8 45 00 00 00       	mov    eax,0x45
c001001c:	89 c2                	mov    edx,eax
c001001e:	83 e2 03             	and    edx,0x3
c0010021:	39 f0                	cmp    eax,esi
c0010023:	7e 0f                	jle    c0010034 <datetimeToSeconds(datetime_t)+0xf9>
c0010025:	83 fa 01             	cmp    edx,0x1
c0010028:	19 d2                	sbb    edx,edx
c001002a:	48                   	dec    eax
c001002b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0010032:	eb e8                	jmp    c001001c <datetimeToSeconds(datetime_t)+0xe1>
c0010034:	b8 6d 01 00 00       	mov    eax,0x16d
c0010039:	85 d2                	test   edx,edx
c001003b:	75 0b                	jne    c0010048 <datetimeToSeconds(datetime_t)+0x10d>
c001003d:	66 83 fb 01          	cmp    bx,0x1
c0010041:	19 c0                	sbb    eax,eax
c0010043:	05 6e 01 00 00       	add    eax,0x16e
c0010048:	29 c1                	sub    ecx,eax
c001004a:	b8 80 51 01 00       	mov    eax,0x15180
c001004f:	f7 e9                	imul   ecx
c0010051:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010055:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010059:	83 c4 14             	add    esp,0x14
c001005c:	5b                   	pop    ebx
c001005d:	5e                   	pop    esi
c001005e:	5f                   	pop    edi
c001005f:	5d                   	pop    ebp
c0010060:	c3                   	ret    
c0010061:	90                   	nop

c0010062 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0010062:	57                   	push   edi
c0010063:	56                   	push   esi
c0010064:	53                   	push   ebx
c0010065:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010069:	8b 06                	mov    eax,DWORD PTR [esi]
c001006b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001006e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010072:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010076:	e8 c0 fe ff ff       	call   c000ff3b <datetimeToSeconds(datetime_t)>
c001007b:	59                   	pop    ecx
c001007c:	0f b6 0d b0 37 02 c0 	movzx  ecx,BYTE PTR ds:0xc00237b0
c0010083:	5b                   	pop    ebx
c0010084:	03 0d b4 37 02 c0    	add    ecx,DWORD PTR ds:0xc00237b4
c001008a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010090:	89 cb                	mov    ebx,ecx
c0010092:	c1 fb 1f             	sar    ebx,0x1f
c0010095:	29 c8                	sub    eax,ecx
c0010097:	19 da                	sbb    edx,ebx
c0010099:	31 c9                	xor    ecx,ecx
c001009b:	80 3d b1 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237b1,0x0
c00100a2:	74 05                	je     c00100a9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00100a4:	b9 08 07 00 00       	mov    ecx,0x708
c00100a9:	31 db                	xor    ebx,ebx
c00100ab:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00100af:	29 c8                	sub    eax,ecx
c00100b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100b5:	19 da                	sbb    edx,ebx
c00100b7:	89 f8                	mov    eax,edi
c00100b9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100bd:	5b                   	pop    ebx
c00100be:	5e                   	pop    esi
c00100bf:	5f                   	pop    edi
c00100c0:	ff e0                	jmp    eax

c00100c2 <secondsToDatetime(unsigned long long)>:
c00100c2:	55                   	push   ebp
c00100c3:	57                   	push   edi
c00100c4:	56                   	push   esi
c00100c5:	53                   	push   ebx
c00100c6:	83 ec 1c             	sub    esp,0x1c
c00100c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00100cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00100d1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00100d5:	6a 00                	push   0x0
c00100d7:	68 80 51 01 00       	push   0x15180
c00100dc:	55                   	push   ebp
c00100dd:	57                   	push   edi
c00100de:	e8 09 e6 00 00       	call   c001e6ec <__udivdi3>
c00100e3:	83 c4 10             	add    esp,0x10
c00100e6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00100ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100f0:	6a 00                	push   0x0
c00100f2:	68 80 51 01 00       	push   0x15180
c00100f7:	55                   	push   ebp
c00100f8:	57                   	push   edi
c00100f9:	bf 10 0e 00 00       	mov    edi,0xe10
c00100fe:	e8 e9 e6 00 00       	call   c001e7ec <__umoddi3>
c0010103:	83 c4 10             	add    esp,0x10
c0010106:	99                   	cdq    
c0010107:	f7 ff                	idiv   edi
c0010109:	bf 3c 00 00 00       	mov    edi,0x3c
c001010e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010111:	89 d0                	mov    eax,edx
c0010113:	99                   	cdq    
c0010114:	f7 ff                	idiv   edi
c0010116:	85 db                	test   ebx,ebx
c0010118:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001011b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001011e:	79 11                	jns    c0010131 <secondsToDatetime(unsigned long long)+0x6f>
c0010120:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010124:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001012a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001012f:	eb 07                	jmp    c0010138 <secondsToDatetime(unsigned long long)+0x76>
c0010131:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010136:	89 d8                	mov    eax,ebx
c0010138:	bf b4 05 00 00       	mov    edi,0x5b4
c001013d:	99                   	cdq    
c001013e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0010143:	f7 f9                	idiv   ecx
c0010145:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001014a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001014e:	31 d2                	xor    edx,edx
c0010150:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0010158:	01 c3                	add    ebx,eax
c001015a:	89 d8                	mov    eax,ebx
c001015c:	f7 f1                	div    ecx
c001015e:	31 d2                	xor    edx,edx
c0010160:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0010163:	89 d8                	mov    eax,ebx
c0010165:	f7 f7                	div    edi
c0010167:	31 d2                	xor    edx,edx
c0010169:	29 c1                	sub    ecx,eax
c001016b:	89 d8                	mov    eax,ebx
c001016d:	f7 f5                	div    ebp
c001016f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0010174:	29 c1                	sub    ecx,eax
c0010176:	31 d2                	xor    edx,edx
c0010178:	89 c8                	mov    eax,ecx
c001017a:	f7 f5                	div    ebp
c001017c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010181:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010185:	31 d2                	xor    edx,edx
c0010187:	89 c8                	mov    eax,ecx
c0010189:	f7 f5                	div    ebp
c001018b:	31 d2                	xor    edx,edx
c001018d:	01 c3                	add    ebx,eax
c001018f:	89 c8                	mov    eax,ecx
c0010191:	f7 f7                	div    edi
c0010193:	bf 99 00 00 00       	mov    edi,0x99
c0010198:	29 c3                	sub    ebx,eax
c001019a:	31 d2                	xor    edx,edx
c001019c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00101a4:	29 c3                	sub    ebx,eax
c00101a6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00101a9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00101ac:	bb 05 00 00 00       	mov    ebx,0x5
c00101b1:	83 c1 02             	add    ecx,0x2
c00101b4:	89 c8                	mov    eax,ecx
c00101b6:	f7 f7                	div    edi
c00101b8:	31 d2                	xor    edx,edx
c00101ba:	89 c7                	mov    edi,eax
c00101bc:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00101c2:	83 c0 02             	add    eax,0x2
c00101c5:	f7 f3                	div    ebx
c00101c7:	89 eb                	mov    ebx,ebp
c00101c9:	29 c3                	sub    ebx,eax
c00101cb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00101d1:	88 1e                	mov    BYTE PTR [esi],bl
c00101d3:	19 c0                	sbb    eax,eax
c00101d5:	31 d2                	xor    edx,edx
c00101d7:	83 e0 0c             	and    eax,0xc
c00101da:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00101de:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00101e6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00101ea:	83 f9 01             	cmp    ecx,0x1
c00101ed:	0f 96 c2             	setbe  dl
c00101f0:	41                   	inc    ecx
c00101f1:	01 d0                	add    eax,edx
c00101f3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00101f6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00101fa:	83 c4 1c             	add    esp,0x1c
c00101fd:	89 f0                	mov    eax,esi
c00101ff:	5b                   	pop    ebx
c0010200:	5e                   	pop    esi
c0010201:	5f                   	pop    edi
c0010202:	5d                   	pop    ebp
c0010203:	c2 04 00             	ret    0x4

c0010206 <Clock::timeInDatetimeLocal()>:
c0010206:	53                   	push   ebx
c0010207:	83 ec 14             	sub    esp,0x14
c001020a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001020e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010212:	e8 83 fc ff ff       	call   c000fe9a <Clock::timeInSecondsLocal()>
c0010217:	83 c4 0c             	add    esp,0xc
c001021a:	52                   	push   edx
c001021b:	50                   	push   eax
c001021c:	53                   	push   ebx
c001021d:	e8 a0 fe ff ff       	call   c00100c2 <secondsToDatetime(unsigned long long)>
c0010222:	89 d8                	mov    eax,ebx
c0010224:	83 c4 14             	add    esp,0x14
c0010227:	5b                   	pop    ebx
c0010228:	c2 04 00             	ret    0x4
c001022b:	90                   	nop

c001022c <Device::hibernate()>:
c001022c:	c3                   	ret    
c001022d:	90                   	nop

c001022e <Device::wake()>:
c001022e:	c3                   	ret    
c001022f:	90                   	nop

c0010230 <Device::detect()>:
c0010230:	c3                   	ret    
c0010231:	90                   	nop

c0010232 <Device::disableLegacy()>:
c0010232:	c3                   	ret    
c0010233:	90                   	nop

c0010234 <Device::powerSaving(PowerSavingLevel)>:
c0010234:	c3                   	ret    
c0010235:	90                   	nop

c0010236 <DriverlessDevice::close(int, int, void*)>:
c0010236:	31 c0                	xor    eax,eax
c0010238:	c3                   	ret    
c0010239:	90                   	nop

c001023a <DriverlessDevice::detect()>:
c001023a:	c3                   	ret    
c001023b:	90                   	nop

c001023c <DriverlessDevice::open(int, int, void*)>:
c001023c:	83 ec 18             	sub    esp,0x18
c001023f:	68 d0 0c 02 c0       	push   0xc0020cd0
c0010244:	e8 ef 49 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c0010249:	83 c8 ff             	or     eax,0xffffffff
c001024c:	83 c4 1c             	add    esp,0x1c
c001024f:	c3                   	ret    

c0010250 <Device::~Device()>:
c0010250:	ba f8 0c 02 c0       	mov    edx,0xc0020cf8
c0010255:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010259:	89 10                	mov    DWORD PTR [eax],edx
c001025b:	90                   	nop
c001025c:	c3                   	ret    
c001025d:	90                   	nop

c001025e <Device::~Device()>:
c001025e:	83 ec 0c             	sub    esp,0xc
c0010261:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010265:	e8 e6 ff ff ff       	call   c0010250 <Device::~Device()>
c001026a:	83 c4 04             	add    esp,0x4
c001026d:	83 ec 08             	sub    esp,0x8
c0010270:	68 58 01 00 00       	push   0x158
c0010275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010279:	e8 45 ec ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001027e:	83 c4 10             	add    esp,0x10
c0010281:	83 c4 0c             	add    esp,0xc
c0010284:	c3                   	ret    
c0010285:	90                   	nop

c0010286 <Device::findAndLoadDriver()>:
c0010286:	c3                   	ret    
c0010287:	90                   	nop

c0010288 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010288:	57                   	push   edi
c0010289:	b9 09 00 00 00       	mov    ecx,0x9
c001028e:	56                   	push   esi
c001028f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010293:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010297:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00102a1:	81 c7 18 01 00 00    	add    edi,0x118
c00102a7:	fc                   	cld    
c00102a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00102aa:	5e                   	pop    esi
c00102ab:	5f                   	pop    edi
c00102ac:	c3                   	ret    
c00102ad:	90                   	nop

c00102ae <Device::preOpenACPI(void*, char*, char*)>:
c00102ae:	56                   	push   esi
c00102af:	53                   	push   ebx
c00102b0:	83 ec 08             	sub    esp,0x8
c00102b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00102b7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00102bb:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00102c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00102c9:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00102cf:	6a 1e                	push   0x1e
c00102d1:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00102d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00102db:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00102e1:	50                   	push   eax
c00102e2:	e8 eb 02 ff ff       	call   c00005d2 <memcpy>
c00102e7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00102eb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102ef:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00102f7:	83 c4 14             	add    esp,0x14
c00102fa:	5b                   	pop    ebx
c00102fb:	5e                   	pop    esi
c00102fc:	e9 d1 02 ff ff       	jmp    c00005d2 <memcpy>
c0010301:	90                   	nop

c0010302 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010302:	55                   	push   ebp
c0010303:	57                   	push   edi
c0010304:	56                   	push   esi
c0010305:	53                   	push   ebx
c0010306:	83 ec 0c             	sub    esp,0xc
c0010309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001030d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010311:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010315:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010319:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c001031e:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010325:	75 0b                	jne    c0010332 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010327:	8b 00                	mov    eax,DWORD PTR [eax]
c0010329:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001032d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010330:	eb 24                	jmp    c0010356 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0010332:	e8 fb 3b 00 00       	call   c0013f32 <thisCPU()>
c0010337:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001033d:	8b 10                	mov    edx,DWORD PTR [eax]
c001033f:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0010343:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010347:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001034b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001034f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010353:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010356:	83 c4 0c             	add    esp,0xc
c0010359:	5b                   	pop    ebx
c001035a:	5e                   	pop    esi
c001035b:	5f                   	pop    edi
c001035c:	5d                   	pop    ebp
c001035d:	ff e0                	jmp    eax
c001035f:	90                   	nop

c0010360 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010360:	57                   	push   edi
c0010361:	56                   	push   esi
c0010362:	53                   	push   ebx
c0010363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010367:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001036b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001036f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010374:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001037b:	75 0b                	jne    c0010388 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001037d:	8b 00                	mov    eax,DWORD PTR [eax]
c001037f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010383:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010386:	eb 20                	jmp    c00103a8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010388:	e8 a5 3b 00 00       	call   c0013f32 <thisCPU()>
c001038d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010393:	8b 10                	mov    edx,DWORD PTR [eax]
c0010395:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010399:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001039d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00103a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00103a5:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c00103a8:	5b                   	pop    ebx
c00103a9:	5e                   	pop    esi
c00103aa:	5f                   	pop    edi
c00103ab:	ff e0                	jmp    eax
c00103ad:	90                   	nop

c00103ae <Device::addChild(Device*)>:
c00103ae:	53                   	push   ebx
c00103af:	83 ec 08             	sub    esp,0x8
c00103b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ba:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00103c0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00103c6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00103c8:	85 d2                	test   edx,edx
c00103ca:	74 04                	je     c00103d0 <Device::addChild(Device*)+0x22>
c00103cc:	89 d3                	mov    ebx,edx
c00103ce:	eb f6                	jmp    c00103c6 <Device::addChild(Device*)+0x18>
c00103d0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00103d3:	83 ec 0c             	sub    esp,0xc
c00103d6:	6a 08                	push   0x8
c00103d8:	e8 d7 ea ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00103dd:	89 03                	mov    DWORD PTR [ebx],eax
c00103df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103ec:	83 c4 18             	add    esp,0x18
c00103ef:	5b                   	pop    ebx
c00103f0:	c3                   	ret    
c00103f1:	90                   	nop

c00103f2 <Device::removeAllChildren()>:
c00103f2:	56                   	push   esi
c00103f3:	53                   	push   ebx
c00103f4:	52                   	push   edx
c00103f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103f9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00103ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010402:	74 17                	je     c001041b <Device::removeAllChildren()+0x29>
c0010404:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010407:	85 c0                	test   eax,eax
c0010409:	74 0c                	je     c0010417 <Device::removeAllChildren()+0x25>
c001040b:	83 ec 0c             	sub    esp,0xc
c001040e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010410:	50                   	push   eax
c0010411:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010414:	83 c4 10             	add    esp,0x10
c0010417:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010419:	eb e4                	jmp    c00103ff <Device::removeAllChildren()+0xd>
c001041b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010421:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010427:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001042d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010434:	58                   	pop    eax
c0010435:	5b                   	pop    ebx
c0010436:	5e                   	pop    esi
c0010437:	c3                   	ret    

c0010438 <Device::hibernateAll()>:
c0010438:	53                   	push   ebx
c0010439:	83 ec 14             	sub    esp,0x14
c001043c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010440:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010442:	53                   	push   ebx
c0010443:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010446:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001044c:	83 c4 10             	add    esp,0x10
c001044f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010452:	74 0f                	je     c0010463 <Device::hibernateAll()+0x2b>
c0010454:	83 ec 0c             	sub    esp,0xc
c0010457:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001045a:	e8 d9 ff ff ff       	call   c0010438 <Device::hibernateAll()>
c001045f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010461:	eb e9                	jmp    c001044c <Device::hibernateAll()+0x14>
c0010463:	83 c4 08             	add    esp,0x8
c0010466:	5b                   	pop    ebx
c0010467:	c3                   	ret    

c0010468 <Device::wakeAll()>:
c0010468:	53                   	push   ebx
c0010469:	83 ec 14             	sub    esp,0x14
c001046c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010470:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010472:	53                   	push   ebx
c0010473:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010476:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010482:	74 0f                	je     c0010493 <Device::wakeAll()+0x2b>
c0010484:	83 ec 0c             	sub    esp,0xc
c0010487:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001048a:	e8 d9 ff ff ff       	call   c0010468 <Device::wakeAll()>
c001048f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010491:	eb e9                	jmp    c001047c <Device::wakeAll()+0x14>
c0010493:	83 c4 08             	add    esp,0x8
c0010496:	5b                   	pop    ebx
c0010497:	c3                   	ret    

c0010498 <Device::detectAll()>:
c0010498:	53                   	push   ebx
c0010499:	83 ec 14             	sub    esp,0x14
c001049c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104a2:	53                   	push   ebx
c00104a3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00104a6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104ac:	83 c4 10             	add    esp,0x10
c00104af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104b2:	74 0f                	je     c00104c3 <Device::detectAll()+0x2b>
c00104b4:	83 ec 0c             	sub    esp,0xc
c00104b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104ba:	e8 d9 ff ff ff       	call   c0010498 <Device::detectAll()>
c00104bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104c1:	eb e9                	jmp    c00104ac <Device::detectAll()+0x14>
c00104c3:	83 c4 08             	add    esp,0x8
c00104c6:	5b                   	pop    ebx
c00104c7:	c3                   	ret    

c00104c8 <Device::disableLegacyAll()>:
c00104c8:	53                   	push   ebx
c00104c9:	83 ec 14             	sub    esp,0x14
c00104cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104d2:	53                   	push   ebx
c00104d3:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00104d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104dc:	83 c4 10             	add    esp,0x10
c00104df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104e2:	74 0f                	je     c00104f3 <Device::disableLegacyAll()+0x2b>
c00104e4:	83 ec 0c             	sub    esp,0xc
c00104e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104ea:	e8 d9 ff ff ff       	call   c00104c8 <Device::disableLegacyAll()>
c00104ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104f1:	eb e9                	jmp    c00104dc <Device::disableLegacyAll()+0x14>
c00104f3:	83 c4 08             	add    esp,0x8
c00104f6:	5b                   	pop    ebx
c00104f7:	c3                   	ret    

c00104f8 <Device::loadDriversForAll()>:
c00104f8:	53                   	push   ebx
c00104f9:	83 ec 08             	sub    esp,0x8
c00104fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010500:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010506:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010508:	85 db                	test   ebx,ebx
c001050a:	74 12                	je     c001051e <Device::loadDriversForAll()+0x26>
c001050c:	83 ec 0c             	sub    esp,0xc
c001050f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010512:	e8 e1 ff ff ff       	call   c00104f8 <Device::loadDriversForAll()>
c0010517:	83 c4 10             	add    esp,0x10
c001051a:	89 d8                	mov    eax,ebx
c001051c:	eb e8                	jmp    c0010506 <Device::loadDriversForAll()+0xe>
c001051e:	83 c4 08             	add    esp,0x8
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	90                   	nop

c0010524 <Device::closeAll()>:
c0010524:	53                   	push   ebx
c0010525:	83 ec 08             	sub    esp,0x8
c0010528:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001052c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001052e:	6a 00                	push   0x0
c0010530:	6a 00                	push   0x0
c0010532:	6a 00                	push   0x0
c0010534:	53                   	push   ebx
c0010535:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010538:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001053e:	83 c4 10             	add    esp,0x10
c0010541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010544:	74 0f                	je     c0010555 <Device::closeAll()+0x31>
c0010546:	83 ec 0c             	sub    esp,0xc
c0010549:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001054c:	e8 d3 ff ff ff       	call   c0010524 <Device::closeAll()>
c0010551:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010553:	eb e9                	jmp    c001053e <Device::closeAll()+0x1a>
c0010555:	83 c4 08             	add    esp,0x8
c0010558:	5b                   	pop    ebx
c0010559:	c3                   	ret    

c001055a <Device::powerSavingAll(PowerSavingLevel)>:
c001055a:	56                   	push   esi
c001055b:	53                   	push   ebx
c001055c:	83 ec 0c             	sub    esp,0xc
c001055f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010563:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010567:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010569:	56                   	push   esi
c001056a:	53                   	push   ebx
c001056b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001056e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010574:	83 c4 10             	add    esp,0x10
c0010577:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001057a:	74 0f                	je     c001058b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001057c:	52                   	push   edx
c001057d:	52                   	push   edx
c001057e:	56                   	push   esi
c001057f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010582:	e8 d3 ff ff ff       	call   c001055a <Device::powerSavingAll(PowerSavingLevel)>
c0010587:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010589:	eb e9                	jmp    c0010574 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001058b:	58                   	pop    eax
c001058c:	5b                   	pop    ebx
c001058d:	5e                   	pop    esi
c001058e:	c3                   	ret    
c001058f:	90                   	nop

c0010590 <Device::setName(char const*)>:
c0010590:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010598:	e9 0a 01 ff ff       	jmp    c00006a7 <strcpy>
c001059d:	90                   	nop

c001059e <Device::Device(char const*)>:
c001059e:	83 ec 0c             	sub    esp,0xc
c00105a1:	ba f8 0c 02 c0       	mov    edx,0xc0020cf8
c00105a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105aa:	89 10                	mov    DWORD PTR [eax],edx
c00105ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00105ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105be:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00105c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105cc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00105d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105da:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00105e4:	83 ec 08             	sub    esp,0x8
c00105e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105ef:	e8 9c ff ff ff       	call   c0010590 <Device::setName(char const*)>
c00105f4:	83 c4 10             	add    esp,0x10
c00105f7:	83 ec 0c             	sub    esp,0xc
c00105fa:	6a 08                	push   0x8
c00105fc:	e8 b3 e8 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0010601:	83 c4 10             	add    esp,0x10
c0010604:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001060a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010611:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010615:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001061b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010625:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001062b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001062f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010635:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001063c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010640:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0010652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010656:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010664:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001066e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010672:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001067c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010680:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001068a:	90                   	nop
c001068b:	83 c4 0c             	add    esp,0xc
c001068e:	c3                   	ret    
c001068f:	90                   	nop

c0010690 <Device::getName()>:
c0010690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010694:	05 d0 00 00 00       	add    eax,0xd0
c0010699:	c3                   	ret    

c001069a <DriverlessDevice::DriverlessDevice(char const*)>:
c001069a:	83 ec 0c             	sub    esp,0xc
c001069d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a1:	83 ec 08             	sub    esp,0x8
c00106a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a8:	50                   	push   eax
c00106a9:	e8 f0 fe ff ff       	call   c001059e <Device::Device(char const*)>
c00106ae:	83 c4 10             	add    esp,0x10
c00106b1:	ba 24 0d 02 c0       	mov    edx,0xc0020d24
c00106b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ba:	89 10                	mov    DWORD PTR [eax],edx
c00106bc:	90                   	nop
c00106bd:	83 c4 0c             	add    esp,0xc
c00106c0:	c3                   	ret    
c00106c1:	90                   	nop

c00106c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00106c2:	57                   	push   edi
c00106c3:	56                   	push   esi
c00106c4:	53                   	push   ebx
c00106c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106c9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00106cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106d1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00106d7:	75 0c                	jne    c00106e5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00106d9:	52                   	push   edx
c00106da:	52                   	push   edx
c00106db:	53                   	push   ebx
c00106dc:	56                   	push   esi
c00106dd:	e8 22 e5 00 00       	call   c001ec04 <LinkedList<Device>::addElement(Device*)>
c00106e2:	83 c4 10             	add    esp,0x10
c00106e5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106ee:	74 12                	je     c0010702 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00106f0:	50                   	push   eax
c00106f1:	57                   	push   edi
c00106f2:	56                   	push   esi
c00106f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106f6:	e8 c7 ff ff ff       	call   c00106c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00106fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106fd:	83 c4 10             	add    esp,0x10
c0010700:	eb e9                	jmp    c00106eb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010702:	5b                   	pop    ebx
c0010703:	5e                   	pop    esi
c0010704:	5f                   	pop    edi
c0010705:	c3                   	ret    

c0010706 <getDevicesOfType(DeviceType)>:
c0010706:	53                   	push   ebx
c0010707:	83 ec 14             	sub    esp,0x14
c001070a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001070e:	53                   	push   ebx
c001070f:	e8 cc e5 00 00       	call   c001ece0 <LinkedList<Device>::LinkedList()>
c0010714:	83 c4 0c             	add    esp,0xc
c0010717:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001071b:	53                   	push   ebx
c001071c:	ff 35 48 36 02 c0    	push   DWORD PTR ds:0xc0023648
c0010722:	e8 9b ff ff ff       	call   c00106c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010727:	89 d8                	mov    eax,ebx
c0010729:	83 c4 18             	add    esp,0x18
c001072c:	5b                   	pop    ebx
c001072d:	c2 04 00             	ret    0x4

c0010730 <HardDiskController::HardDiskController(char const*)>:
c0010730:	83 ec 0c             	sub    esp,0xc
c0010733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010737:	83 ec 08             	sub    esp,0x8
c001073a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001073e:	50                   	push   eax
c001073f:	e8 5a fe ff ff       	call   c001059e <Device::Device(char const*)>
c0010744:	83 c4 10             	add    esp,0x10
c0010747:	ba 50 0d 02 c0       	mov    edx,0xc0020d50
c001074c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010750:	89 10                	mov    DWORD PTR [eax],edx
c0010752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010756:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0010760:	90                   	nop
c0010761:	83 c4 0c             	add    esp,0xc
c0010764:	c3                   	ret    
c0010765:	90                   	nop

c0010766 <HardDiskController::~HardDiskController()>:
c0010766:	83 ec 0c             	sub    esp,0xc
c0010769:	ba 50 0d 02 c0       	mov    edx,0xc0020d50
c001076e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010772:	89 10                	mov    DWORD PTR [eax],edx
c0010774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010778:	83 ec 0c             	sub    esp,0xc
c001077b:	50                   	push   eax
c001077c:	e8 cf fa ff ff       	call   c0010250 <Device::~Device()>
c0010781:	83 c4 10             	add    esp,0x10
c0010784:	90                   	nop
c0010785:	83 c4 0c             	add    esp,0xc
c0010788:	c3                   	ret    
c0010789:	90                   	nop

c001078a <HardDiskController::~HardDiskController()>:
c001078a:	83 ec 0c             	sub    esp,0xc
c001078d:	83 ec 0c             	sub    esp,0xc
c0010790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010794:	e8 cd ff ff ff       	call   c0010766 <HardDiskController::~HardDiskController()>
c0010799:	83 c4 10             	add    esp,0x10
c001079c:	83 ec 08             	sub    esp,0x8
c001079f:	68 58 01 00 00       	push   0x158
c00107a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107a8:	e8 16 e7 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c00107ad:	83 c4 10             	add    esp,0x10
c00107b0:	83 c4 0c             	add    esp,0xc
c00107b3:	c3                   	ret    

c00107b4 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00107b4:	83 ec 0c             	sub    esp,0xc
c00107b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107bb:	83 ec 08             	sub    esp,0x8
c00107be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107c2:	50                   	push   eax
c00107c3:	e8 d6 fd ff ff       	call   c001059e <Device::Device(char const*)>
c00107c8:	83 c4 10             	add    esp,0x10
c00107cb:	ba 7c 0d 02 c0       	mov    edx,0xc0020d7c
c00107d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d4:	89 10                	mov    DWORD PTR [eax],edx
c00107d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107da:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00107e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00107ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00107fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010802:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010816:	90                   	nop
c0010817:	83 c4 0c             	add    esp,0xc
c001081a:	c3                   	ret    
c001081b:	90                   	nop

c001081c <PhysicalDisk::startCache()>:
c001081c:	56                   	push   esi
c001081d:	53                   	push   ebx
c001081e:	83 ec 10             	sub    esp,0x10
c0010821:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010825:	6a 30                	push   0x30
c0010827:	e8 88 e6 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001082c:	89 c6                	mov    esi,eax
c001082e:	58                   	pop    eax
c001082f:	5a                   	pop    edx
c0010830:	53                   	push   ebx
c0010831:	56                   	push   esi
c0010832:	e8 6d 1e 00 00       	call   c00126a4 <VCache::VCache(PhysicalDisk*)>
c0010837:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001083d:	83 c4 14             	add    esp,0x14
c0010840:	5b                   	pop    ebx
c0010841:	5e                   	pop    esi
c0010842:	c3                   	ret    
c0010843:	90                   	nop

c0010844 <PhysicalDisk::~PhysicalDisk()>:
c0010844:	83 ec 0c             	sub    esp,0xc
c0010847:	ba 7c 0d 02 c0       	mov    edx,0xc0020d7c
c001084c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010850:	89 10                	mov    DWORD PTR [eax],edx
c0010852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010856:	83 ec 0c             	sub    esp,0xc
c0010859:	50                   	push   eax
c001085a:	e8 f1 f9 ff ff       	call   c0010250 <Device::~Device()>
c001085f:	83 c4 10             	add    esp,0x10
c0010862:	90                   	nop
c0010863:	83 c4 0c             	add    esp,0xc
c0010866:	c3                   	ret    
c0010867:	90                   	nop

c0010868 <PhysicalDisk::~PhysicalDisk()>:
c0010868:	83 ec 0c             	sub    esp,0xc
c001086b:	83 ec 0c             	sub    esp,0xc
c001086e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010872:	e8 cd ff ff ff       	call   c0010844 <PhysicalDisk::~PhysicalDisk()>
c0010877:	83 c4 10             	add    esp,0x10
c001087a:	83 ec 08             	sub    esp,0x8
c001087d:	68 6c 01 00 00       	push   0x16c
c0010882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010886:	e8 38 e6 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001088b:	83 c4 10             	add    esp,0x10
c001088e:	83 c4 0c             	add    esp,0xc
c0010891:	c3                   	ret    

c0010892 <FPU::FPU(char const*)>:
c0010892:	83 ec 0c             	sub    esp,0xc
c0010895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010899:	83 ec 08             	sub    esp,0x8
c001089c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a0:	50                   	push   eax
c00108a1:	e8 f8 fc ff ff       	call   c001059e <Device::Device(char const*)>
c00108a6:	83 c4 10             	add    esp,0x10
c00108a9:	ba bc 0d 02 c0       	mov    edx,0xc0020dbc
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	89 10                	mov    DWORD PTR [eax],edx
c00108b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b8:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00108c2:	90                   	nop
c00108c3:	83 c4 0c             	add    esp,0xc
c00108c6:	c3                   	ret    
c00108c7:	90                   	nop

c00108c8 <FPU::~FPU()>:
c00108c8:	83 ec 0c             	sub    esp,0xc
c00108cb:	ba bc 0d 02 c0       	mov    edx,0xc0020dbc
c00108d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d4:	89 10                	mov    DWORD PTR [eax],edx
c00108d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108da:	83 ec 0c             	sub    esp,0xc
c00108dd:	50                   	push   eax
c00108de:	e8 6d f9 ff ff       	call   c0010250 <Device::~Device()>
c00108e3:	83 c4 10             	add    esp,0x10
c00108e6:	90                   	nop
c00108e7:	83 c4 0c             	add    esp,0xc
c00108ea:	c3                   	ret    
c00108eb:	90                   	nop

c00108ec <FPU::~FPU()>:
c00108ec:	83 ec 0c             	sub    esp,0xc
c00108ef:	83 ec 0c             	sub    esp,0xc
c00108f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f6:	e8 cd ff ff ff       	call   c00108c8 <FPU::~FPU()>
c00108fb:	83 c4 10             	add    esp,0x10
c00108fe:	83 ec 08             	sub    esp,0x8
c0010901:	68 58 01 00 00       	push   0x158
c0010906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001090a:	e8 b4 e5 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001090f:	83 c4 10             	add    esp,0x10
c0010912:	83 c4 0c             	add    esp,0xc
c0010915:	c3                   	ret    

c0010916 <setupFPU()>:
c0010916:	53                   	push   ebx
c0010917:	83 ec 08             	sub    esp,0x8
c001091a:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c001091f:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010926:	74 19                	je     c0010941 <setupFPU()+0x2b>
c0010928:	83 ec 0c             	sub    esp,0xc
c001092b:	68 58 01 00 00       	push   0x158
c0010930:	e8 7f e5 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0010935:	89 c3                	mov    ebx,eax
c0010937:	89 04 24             	mov    DWORD PTR [esp],eax
c001093a:	e8 7f ca 00 00       	call   c001d3be <AVX::AVX()>
c001093f:	eb 5b                	jmp    c001099c <setupFPU()+0x86>
c0010941:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010947:	84 c0                	test   al,al
c0010949:	79 19                	jns    c0010964 <setupFPU()+0x4e>
c001094b:	83 ec 0c             	sub    esp,0xc
c001094e:	68 58 01 00 00       	push   0x158
c0010953:	e8 5c e5 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0010958:	89 c3                	mov    ebx,eax
c001095a:	89 04 24             	mov    DWORD PTR [esp],eax
c001095d:	e8 82 cb 00 00       	call   c001d4e4 <SSE::SSE()>
c0010962:	eb 38                	jmp    c001099c <setupFPU()+0x86>
c0010964:	a8 20                	test   al,0x20
c0010966:	74 19                	je     c0010981 <setupFPU()+0x6b>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	68 58 01 00 00       	push   0x158
c0010970:	e8 3f e5 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0010975:	89 c3                	mov    ebx,eax
c0010977:	89 04 24             	mov    DWORD PTR [esp],eax
c001097a:	e8 cf ca 00 00       	call   c001d44e <MMX::MMX()>
c001097f:	eb 1b                	jmp    c001099c <setupFPU()+0x86>
c0010981:	a8 10                	test   al,0x10
c0010983:	74 1c                	je     c00109a1 <setupFPU()+0x8b>
c0010985:	83 ec 0c             	sub    esp,0xc
c0010988:	68 58 01 00 00       	push   0x158
c001098d:	e8 22 e5 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0010992:	89 c3                	mov    ebx,eax
c0010994:	89 04 24             	mov    DWORD PTR [esp],eax
c0010997:	e8 d6 cb 00 00       	call   c001d572 <x87::x87()>
c001099c:	83 c4 10             	add    esp,0x10
c001099f:	eb 2c                	jmp    c00109cd <setupFPU()+0xb7>
c00109a1:	83 ec 0c             	sub    esp,0xc
c00109a4:	31 db                	xor    ebx,ebx
c00109a6:	68 a8 0d 02 c0       	push   0xc0020da8
c00109ab:	e8 f3 e5 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00109b0:	e8 7d 35 00 00       	call   c0013f32 <thisCPU()>
c00109b5:	e8 78 35 00 00       	call   c0013f32 <thisCPU()>
c00109ba:	e8 79 e3 00 00       	call   c001ed38 <CPU::readCR0()>
c00109bf:	83 c8 04             	or     eax,0x4
c00109c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00109c5:	e8 80 e3 00 00       	call   c001ed4a <CPU::writeCR0(unsigned long)>
c00109ca:	83 c4 10             	add    esp,0x10
c00109cd:	89 d8                	mov    eax,ebx
c00109cf:	83 c4 08             	add    esp,0x8
c00109d2:	5b                   	pop    ebx
c00109d3:	c3                   	ret    

c00109d4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00109d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00109dc:	c1 e0 04             	shl    eax,0x4
c00109df:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00109e3:	8d 50 10             	lea    edx,[eax+0x10]
c00109e6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00109ec:	74 08                	je     c00109f6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00109ee:	83 c0 04             	add    eax,0x4
c00109f1:	39 d0                	cmp    eax,edx
c00109f3:	75 f1                	jne    c00109e6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00109f5:	c3                   	ret    
c00109f6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a00:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010a0a:	eb e2                	jmp    c00109ee <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010a0c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010a0c:	57                   	push   edi
c0010a0d:	31 c0                	xor    eax,eax
c0010a0f:	56                   	push   esi
c0010a10:	53                   	push   ebx
c0010a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010a15:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a19:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010a1d:	89 da                	mov    edx,ebx
c0010a1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010a23:	c1 e2 04             	shl    edx,0x4
c0010a26:	01 ca                	add    edx,ecx
c0010a28:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010a30:	74 16                	je     c0010a48 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010a32:	40                   	inc    eax
c0010a33:	83 f8 04             	cmp    eax,0x4
c0010a36:	75 f0                	jne    c0010a28 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010a38:	c7 44 24 10 ec 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020dec
c0010a40:	5b                   	pop    ebx
c0010a41:	5e                   	pop    esi
c0010a42:	5f                   	pop    edi
c0010a43:	e9 f0 41 00 00       	jmp    c0014c38 <Krnl::panic(char const*)>
c0010a48:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010a4b:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010a4e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010a54:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010a5a:	5b                   	pop    ebx
c0010a5b:	5e                   	pop    esi
c0010a5c:	5f                   	pop    edi
c0010a5d:	c3                   	ret    

c0010a5e <doubleFault(regs*, void*)>:
c0010a5e:	c7 44 24 04 1c 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f1c
c0010a66:	e9 cd 41 00 00       	jmp    c0014c38 <Krnl::panic(char const*)>
c0010a6b:	90                   	nop

c0010a6c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010a6c:	56                   	push   esi
c0010a6d:	53                   	push   ebx
c0010a6e:	50                   	push   eax
c0010a6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a73:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a77:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010a7c:	75 35                	jne    c0010ab3 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010a7e:	8d 43 20             	lea    eax,[ebx+0x20]
c0010a81:	31 d2                	xor    edx,edx
c0010a83:	89 c1                	mov    ecx,eax
c0010a85:	c1 e1 04             	shl    ecx,0x4
c0010a88:	01 f1                	add    ecx,esi
c0010a8a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010a92:	74 3e                	je     c0010ad2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010a94:	42                   	inc    edx
c0010a95:	83 fa 04             	cmp    edx,0x4
c0010a98:	75 f0                	jne    c0010a8a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010a9a:	83 ec 0c             	sub    esp,0xc
c0010a9d:	68 60 0e 02 c0       	push   0xc0020e60
c0010aa2:	e8 91 41 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c0010aa7:	83 c4 10             	add    esp,0x10
c0010aaa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aaf:	5a                   	pop    edx
c0010ab0:	5b                   	pop    ebx
c0010ab1:	5e                   	pop    esi
c0010ab2:	c3                   	ret    
c0010ab3:	83 ec 0c             	sub    esp,0xc
c0010ab6:	56                   	push   esi
c0010ab7:	e8 d4 fb ff ff       	call   c0010690 <Device::getName()>
c0010abc:	83 c4 10             	add    esp,0x10
c0010abf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010ac2:	75 ba                	jne    c0010a7e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010ac4:	83 fb 0f             	cmp    ebx,0xf
c0010ac7:	7f 29                	jg     c0010af2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010ac9:	0f b6 9b a0 2d 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd260]
c0010ad0:	eb ac                	jmp    c0010a7e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010ad2:	8d 04 82             	lea    eax,[edx+eax*4]
c0010ad5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ad9:	8d 04 86             	lea    eax,[esi+eax*4]
c0010adc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010ae2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010ae6:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010aec:	89 d8                	mov    eax,ebx
c0010aee:	5a                   	pop    edx
c0010aef:	5b                   	pop    ebx
c0010af0:	5e                   	pop    esi
c0010af1:	c3                   	ret    
c0010af2:	83 ec 0c             	sub    esp,0xc
c0010af5:	68 28 0e 02 c0       	push   0xc0020e28
c0010afa:	e8 39 41 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c0010aff:	83 c4 10             	add    esp,0x10
c0010b02:	e9 77 ff ff ff       	jmp    c0010a7e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b07:	90                   	nop

c0010b08 <InterruptController::clearAllHandlers(int, bool)>:
c0010b08:	56                   	push   esi
c0010b09:	53                   	push   ebx
c0010b0a:	52                   	push   edx
c0010b0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010b13:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010b18:	75 61                	jne    c0010b7b <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010b1a:	8d 46 20             	lea    eax,[esi+0x20]
c0010b1d:	c1 e6 04             	shl    esi,0x4
c0010b20:	c1 e0 04             	shl    eax,0x4
c0010b23:	01 de                	add    esi,ebx
c0010b25:	01 d8                	add    eax,ebx
c0010b27:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010b31:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010b3b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010b45:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010b4f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010b59:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010b63:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010b6d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010b77:	58                   	pop    eax
c0010b78:	5b                   	pop    ebx
c0010b79:	5e                   	pop    esi
c0010b7a:	c3                   	ret    
c0010b7b:	83 ec 0c             	sub    esp,0xc
c0010b7e:	53                   	push   ebx
c0010b7f:	e8 0c fb ff ff       	call   c0010690 <Device::getName()>
c0010b84:	83 c4 10             	add    esp,0x10
c0010b87:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b8a:	75 8e                	jne    c0010b1a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010b8c:	83 fe 0f             	cmp    esi,0xf
c0010b8f:	7f 09                	jg     c0010b9a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010b91:	0f b6 b6 a0 2d 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd260]
c0010b98:	eb 80                	jmp    c0010b1a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010b9a:	83 ec 0c             	sub    esp,0xc
c0010b9d:	68 9c 0e 02 c0       	push   0xc0020e9c
c0010ba2:	e8 91 40 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c0010ba7:	83 c4 10             	add    esp,0x10
c0010baa:	e9 6b ff ff ff       	jmp    c0010b1a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010baf:	90                   	nop

c0010bb0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010bb0:	56                   	push   esi
c0010bb1:	53                   	push   ebx
c0010bb2:	52                   	push   edx
c0010bb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bbb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010bc0:	75 3a                	jne    c0010bfc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010bc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bc6:	8d 50 20             	lea    edx,[eax+0x20]
c0010bc9:	c1 e2 04             	shl    edx,0x4
c0010bcc:	8d 04 16             	lea    eax,[esi+edx*1]
c0010bcf:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010bd3:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010bd9:	74 0b                	je     c0010be6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010bdb:	83 c0 04             	add    eax,0x4
c0010bde:	39 d0                	cmp    eax,edx
c0010be0:	75 f1                	jne    c0010bd3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010be2:	58                   	pop    eax
c0010be3:	5b                   	pop    ebx
c0010be4:	5e                   	pop    esi
c0010be5:	c3                   	ret    
c0010be6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010bf0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010bfa:	eb df                	jmp    c0010bdb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010bfc:	83 ec 0c             	sub    esp,0xc
c0010bff:	56                   	push   esi
c0010c00:	e8 8b fa ff ff       	call   c0010690 <Device::getName()>
c0010c05:	83 c4 10             	add    esp,0x10
c0010c08:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c0b:	75 b5                	jne    c0010bc2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010c0d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010c12:	7f 11                	jg     c0010c25 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010c14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c18:	0f b6 80 a0 2d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd260]
c0010c1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010c23:	eb 9d                	jmp    c0010bc2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010c25:	83 ec 0c             	sub    esp,0xc
c0010c28:	68 9c 0e 02 c0       	push   0xc0020e9c
c0010c2d:	e8 06 40 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c0010c32:	83 c4 10             	add    esp,0x10
c0010c35:	eb 8b                	jmp    c0010bc2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010c37 <nmiHandler(regs*, void*)>:
c0010c37:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c0010c3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010c40:	e9 1d a7 ff ff       	jmp    c000b362 <Computer::handleNMI()>

c0010c45 <int_handler>:
c0010c45:	55                   	push   ebp
c0010c46:	57                   	push   edi
c0010c47:	56                   	push   esi
c0010c48:	53                   	push   ebx
c0010c49:	83 ec 0c             	sub    esp,0xc
c0010c4c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010c50:	80 3d 90 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024090,0x0
c0010c57:	74 0b                	je     c0010c64 <int_handler+0x1f>
c0010c59:	fa                   	cli    
c0010c5a:	f4                   	hlt    
c0010c5b:	80 3d 90 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024090,0x0
c0010c62:	75 f5                	jne    c0010c59 <int_handler+0x14>
c0010c64:	e8 c9 32 00 00       	call   c0013f32 <thisCPU()>
c0010c69:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010c6c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010c72:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010c75:	83 f8 17             	cmp    eax,0x17
c0010c78:	77 13                	ja     c0010c8d <int_handler+0x48>
c0010c7a:	83 ec 08             	sub    esp,0x8
c0010c7d:	8b 17                	mov    edx,DWORD PTR [edi]
c0010c7f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010c82:	0f b6 c0             	movzx  eax,al
c0010c85:	50                   	push   eax
c0010c86:	57                   	push   edi
c0010c87:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010c8a:	83 c4 10             	add    esp,0x10
c0010c8d:	83 c3 15             	add    ebx,0x15
c0010c90:	c1 e3 04             	shl    ebx,0x4
c0010c93:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010c97:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010c9e:	31 db                	xor    ebx,ebx
c0010ca0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010ca4:	85 c0                	test   eax,eax
c0010ca6:	74 13                	je     c0010cbb <int_handler+0x76>
c0010ca8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010cab:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010caf:	74 1c                	je     c0010ccd <int_handler+0x88>
c0010cb1:	83 ec 08             	sub    esp,0x8
c0010cb4:	52                   	push   edx
c0010cb5:	56                   	push   esi
c0010cb6:	ff d0                	call   eax
c0010cb8:	83 c4 10             	add    esp,0x10
c0010cbb:	43                   	inc    ebx
c0010cbc:	83 fb 04             	cmp    ebx,0x4
c0010cbf:	75 df                	jne    c0010ca0 <int_handler+0x5b>
c0010cc1:	83 c4 0c             	add    esp,0xc
c0010cc4:	31 c0                	xor    eax,eax
c0010cc6:	5b                   	pop    ebx
c0010cc7:	31 d2                	xor    edx,edx
c0010cc9:	5e                   	pop    esi
c0010cca:	5f                   	pop    edi
c0010ccb:	5d                   	pop    ebp
c0010ccc:	c3                   	ret    
c0010ccd:	83 ec 08             	sub    esp,0x8
c0010cd0:	52                   	push   edx
c0010cd1:	56                   	push   esi
c0010cd2:	ff d0                	call   eax
c0010cd4:	83 c4 10             	add    esp,0x10
c0010cd7:	83 c4 0c             	add    esp,0xc
c0010cda:	5b                   	pop    ebx
c0010cdb:	5e                   	pop    esi
c0010cdc:	5f                   	pop    edi
c0010cdd:	5d                   	pop    ebp
c0010cde:	c3                   	ret    
c0010cdf:	90                   	nop

c0010ce0 <InterruptController::InterruptController(char const*)>:
c0010ce0:	83 ec 1c             	sub    esp,0x1c
c0010ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ce7:	83 ec 08             	sub    esp,0x8
c0010cea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cee:	50                   	push   eax
c0010cef:	e8 aa f8 ff ff       	call   c001059e <Device::Device(char const*)>
c0010cf4:	83 c4 10             	add    esp,0x10
c0010cf7:	ba b8 10 02 c0       	mov    edx,0xc00210b8
c0010cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d00:	89 10                	mov    DWORD PTR [eax],edx
c0010d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d06:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010d10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d18:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010d20:	7f 5e                	jg     c0010d80 <InterruptController::InterruptController(char const*)+0xa0>
c0010d22:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010d2a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010d2f:	7f 49                	jg     c0010d7a <InterruptController::InterruptController(char const*)+0x9a>
c0010d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010d39:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010d40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d44:	01 ca                	add    edx,ecx
c0010d46:	83 c2 54             	add    edx,0x54
c0010d49:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010d59:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010d60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d64:	01 ca                	add    edx,ecx
c0010d66:	81 c2 54 04 00 00    	add    edx,0x454
c0010d6c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010d74:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010d78:	eb b0                	jmp    c0010d2a <InterruptController::InterruptController(char const*)+0x4a>
c0010d7a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010d7e:	eb 98                	jmp    c0010d18 <InterruptController::InterruptController(char const*)+0x38>
c0010d80:	90                   	nop
c0010d81:	83 c4 1c             	add    esp,0x1c
c0010d84:	c3                   	ret    
c0010d85:	90                   	nop

c0010d86 <InterruptController::~InterruptController()>:
c0010d86:	83 ec 0c             	sub    esp,0xc
c0010d89:	ba b8 10 02 c0       	mov    edx,0xc00210b8
c0010d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d92:	89 10                	mov    DWORD PTR [eax],edx
c0010d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d98:	83 ec 0c             	sub    esp,0xc
c0010d9b:	50                   	push   eax
c0010d9c:	e8 af f4 ff ff       	call   c0010250 <Device::~Device()>
c0010da1:	83 c4 10             	add    esp,0x10
c0010da4:	90                   	nop
c0010da5:	83 c4 0c             	add    esp,0xc
c0010da8:	c3                   	ret    
c0010da9:	90                   	nop

c0010daa <InterruptController::~InterruptController()>:
c0010daa:	83 ec 0c             	sub    esp,0xc
c0010dad:	83 ec 0c             	sub    esp,0xc
c0010db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db4:	e8 cd ff ff ff       	call   c0010d86 <InterruptController::~InterruptController()>
c0010db9:	83 c4 10             	add    esp,0x10
c0010dbc:	83 ec 08             	sub    esp,0x8
c0010dbf:	68 58 21 00 00       	push   0x2158
c0010dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc8:	e8 f6 e0 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c0010dcd:	83 c4 10             	add    esp,0x10
c0010dd0:	83 c4 0c             	add    esp,0xc
c0010dd3:	c3                   	ret    

c0010dd4 <displayDebugInfo(regs*)>:
c0010dd4:	55                   	push   ebp
c0010dd5:	57                   	push   edi
c0010dd6:	56                   	push   esi
c0010dd7:	53                   	push   ebx
c0010dd8:	83 ec 24             	sub    esp,0x24
c0010ddb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010ddf:	0f 20 c2             	mov    edx,cr0
c0010de2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010de6:	0f 20 d7             	mov    edi,cr2
c0010de9:	0f 20 de             	mov    esi,cr3
c0010dec:	0f 20 e5             	mov    ebp,cr4
c0010def:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010df2:	68 29 0f 02 c0       	push   0xc0020f29
c0010df7:	e8 a7 e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010dfc:	58                   	pop    eax
c0010dfd:	5a                   	pop    edx
c0010dfe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010e01:	68 34 0f 02 c0       	push   0xc0020f34
c0010e06:	e8 98 e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e0b:	59                   	pop    ecx
c0010e0c:	58                   	pop    eax
c0010e0d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010e10:	68 3f 0f 02 c0       	push   0xc0020f3f
c0010e15:	e8 89 e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e1a:	58                   	pop    eax
c0010e1b:	5a                   	pop    edx
c0010e1c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010e1f:	68 4a 0f 02 c0       	push   0xc0020f4a
c0010e24:	e8 7a e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e29:	59                   	pop    ecx
c0010e2a:	58                   	pop    eax
c0010e2b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e2e:	68 55 0f 02 c0       	push   0xc0020f55
c0010e33:	e8 6b e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e38:	58                   	pop    eax
c0010e39:	5a                   	pop    edx
c0010e3a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010e3d:	68 60 0f 02 c0       	push   0xc0020f60
c0010e42:	e8 5c e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e47:	59                   	pop    ecx
c0010e48:	58                   	pop    eax
c0010e49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010e4c:	68 7a 0f 02 c0       	push   0xc0020f7a
c0010e51:	e8 4d e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e56:	58                   	pop    eax
c0010e57:	5a                   	pop    edx
c0010e58:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e5b:	68 6b 0f 02 c0       	push   0xc0020f6b
c0010e60:	e8 3e e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e65:	59                   	pop    ecx
c0010e66:	58                   	pop    eax
c0010e67:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010e6a:	68 76 0f 02 c0       	push   0xc0020f76
c0010e6f:	e8 2f e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e74:	58                   	pop    eax
c0010e75:	5a                   	pop    edx
c0010e76:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010e79:	68 85 0f 02 c0       	push   0xc0020f85
c0010e7e:	e8 20 e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e83:	59                   	pop    ecx
c0010e84:	58                   	pop    eax
c0010e85:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e88:	68 90 0f 02 c0       	push   0xc0020f90
c0010e8d:	e8 11 e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e92:	58                   	pop    eax
c0010e93:	5a                   	pop    edx
c0010e94:	57                   	push   edi
c0010e95:	68 9b 0f 02 c0       	push   0xc0020f9b
c0010e9a:	e8 04 e1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010e9f:	59                   	pop    ecx
c0010ea0:	58                   	pop    eax
c0010ea1:	56                   	push   esi
c0010ea2:	68 a6 0f 02 c0       	push   0xc0020fa6
c0010ea7:	e8 f7 e0 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0010eac:	58                   	pop    eax
c0010ead:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010eb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010eb8:	e8 10 c0 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0010ebd:	58                   	pop    eax
c0010ebe:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010ec1:	5a                   	pop    edx
c0010ec2:	c1 e0 05             	shl    eax,0x5
c0010ec5:	05 00 2b 02 c0       	add    eax,0xc0022b00
c0010eca:	50                   	push   eax
c0010ecb:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010ed0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ed6:	e8 11 c4 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010edb:	59                   	pop    ecx
c0010edc:	58                   	pop    eax
c0010edd:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010ee2:	68 b1 0f 02 c0       	push   0xc0020fb1
c0010ee7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010eed:	e8 fa c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010ef2:	58                   	pop    eax
c0010ef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef8:	5a                   	pop    edx
c0010ef9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010efc:	83 c0 0c             	add    eax,0xc
c0010eff:	50                   	push   eax
c0010f00:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010f05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f0b:	e8 dc c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f10:	59                   	pop    ecx
c0010f11:	58                   	pop    eax
c0010f12:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010f17:	68 ba 0f 02 c0       	push   0xc0020fba
c0010f1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f22:	e8 c5 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f27:	58                   	pop    eax
c0010f28:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010f2d:	5a                   	pop    edx
c0010f2e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010f31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f37:	e8 d6 c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f3c:	59                   	pop    ecx
c0010f3d:	58                   	pop    eax
c0010f3e:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010f43:	68 c2 0f 02 c0       	push   0xc0020fc2
c0010f48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f4e:	e8 99 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f53:	58                   	pop    eax
c0010f54:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010f59:	5a                   	pop    edx
c0010f5a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010f5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f63:	e8 aa c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f68:	59                   	pop    ecx
c0010f69:	58                   	pop    eax
c0010f6a:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010f6f:	68 ca 0f 02 c0       	push   0xc0020fca
c0010f74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f7a:	e8 6d c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010f7f:	58                   	pop    eax
c0010f80:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010f85:	5a                   	pop    edx
c0010f86:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010f89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f8f:	e8 7e c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010f94:	59                   	pop    ecx
c0010f95:	58                   	pop    eax
c0010f96:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010f9b:	68 d2 0f 02 c0       	push   0xc0020fd2
c0010fa0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fa6:	e8 41 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010fab:	58                   	pop    eax
c0010fac:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010fb1:	5a                   	pop    edx
c0010fb2:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0010fb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fbb:	e8 52 c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010fc0:	59                   	pop    ecx
c0010fc1:	58                   	pop    eax
c0010fc2:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010fc7:	68 da 0f 02 c0       	push   0xc0020fda
c0010fcc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fd2:	e8 15 c3 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0010fd7:	58                   	pop    eax
c0010fd8:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010fdd:	5a                   	pop    edx
c0010fde:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010fe1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fe7:	e8 26 c3 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0010fec:	59                   	pop    ecx
c0010fed:	58                   	pop    eax
c0010fee:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0010ff3:	68 e2 0f 02 c0       	push   0xc0020fe2
c0010ff8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ffe:	e8 e9 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011003:	58                   	pop    eax
c0011004:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0011009:	5a                   	pop    edx
c001100a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001100d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011013:	e8 fa c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011018:	59                   	pop    ecx
c0011019:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c001101e:	5b                   	pop    ebx
c001101f:	68 ea 0f 02 c0       	push   0xc0020fea
c0011024:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001102a:	e8 bd c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001102f:	58                   	pop    eax
c0011030:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0011035:	5a                   	pop    edx
c0011036:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001103a:	52                   	push   edx
c001103b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011041:	e8 cc c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011046:	59                   	pop    ecx
c0011047:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c001104c:	5b                   	pop    ebx
c001104d:	68 f3 0f 02 c0       	push   0xc0020ff3
c0011052:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011058:	e8 8f c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001105d:	58                   	pop    eax
c001105e:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0011063:	5a                   	pop    edx
c0011064:	57                   	push   edi
c0011065:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001106b:	e8 a2 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011070:	59                   	pop    ecx
c0011071:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0011076:	5b                   	pop    ebx
c0011077:	68 fb 0f 02 c0       	push   0xc0020ffb
c001107c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011082:	e8 65 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0011087:	5f                   	pop    edi
c0011088:	58                   	pop    eax
c0011089:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c001108e:	56                   	push   esi
c001108f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011095:	e8 78 c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c001109a:	58                   	pop    eax
c001109b:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c00110a0:	5a                   	pop    edx
c00110a1:	68 03 10 02 c0       	push   0xc0021003
c00110a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ac:	e8 3b c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00110b1:	59                   	pop    ecx
c00110b2:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c00110b7:	5b                   	pop    ebx
c00110b8:	55                   	push   ebp
c00110b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110bf:	e8 4e c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00110c4:	5e                   	pop    esi
c00110c5:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c00110ca:	5f                   	pop    edi
c00110cb:	68 0b 10 02 c0       	push   0xc002100b
c00110d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d6:	e8 11 c2 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00110db:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c00110e0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00110e6:	e8 68 dc 00 00       	call   c001ed53 <CPU::readDR0()>
c00110eb:	5d                   	pop    ebp
c00110ec:	5a                   	pop    edx
c00110ed:	50                   	push   eax
c00110ee:	53                   	push   ebx
c00110ef:	e8 1e c2 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00110f4:	59                   	pop    ecx
c00110f5:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c00110fa:	5b                   	pop    ebx
c00110fb:	68 14 10 02 c0       	push   0xc0021014
c0011100:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011106:	e8 e1 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001110b:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0011110:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011116:	e8 4a dc 00 00       	call   c001ed65 <CPU::readDR1()>
c001111b:	5e                   	pop    esi
c001111c:	5f                   	pop    edi
c001111d:	50                   	push   eax
c001111e:	53                   	push   ebx
c001111f:	e8 ee c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011124:	5d                   	pop    ebp
c0011125:	58                   	pop    eax
c0011126:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c001112b:	68 1c 10 02 c0       	push   0xc002101c
c0011130:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011136:	e8 b1 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001113b:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0011140:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011146:	e8 2c dc 00 00       	call   c001ed77 <CPU::readDR2()>
c001114b:	5a                   	pop    edx
c001114c:	59                   	pop    ecx
c001114d:	50                   	push   eax
c001114e:	53                   	push   ebx
c001114f:	e8 be c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011154:	5b                   	pop    ebx
c0011155:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c001115a:	5e                   	pop    esi
c001115b:	68 24 10 02 c0       	push   0xc0021024
c0011160:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011166:	e8 81 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001116b:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0011170:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011176:	e8 0e dc 00 00       	call   c001ed89 <CPU::readDR3()>
c001117b:	5f                   	pop    edi
c001117c:	5d                   	pop    ebp
c001117d:	50                   	push   eax
c001117e:	53                   	push   ebx
c001117f:	e8 8e c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0011184:	58                   	pop    eax
c0011185:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c001118a:	5a                   	pop    edx
c001118b:	68 2c 10 02 c0       	push   0xc002102c
c0011190:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011196:	e8 51 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c001119b:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c00111a0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111a6:	e8 f0 db 00 00       	call   c001ed9b <CPU::readDR6()>
c00111ab:	59                   	pop    ecx
c00111ac:	5e                   	pop    esi
c00111ad:	50                   	push   eax
c00111ae:	53                   	push   ebx
c00111af:	e8 5e c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00111b4:	5f                   	pop    edi
c00111b5:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c00111ba:	5d                   	pop    ebp
c00111bb:	68 34 10 02 c0       	push   0xc0021034
c00111c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111c6:	e8 21 c1 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c00111cb:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c00111d0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111d6:	e8 d2 db 00 00       	call   c001edad <CPU::readDR7()>
c00111db:	5a                   	pop    edx
c00111dc:	59                   	pop    ecx
c00111dd:	50                   	push   eax
c00111de:	53                   	push   ebx
c00111df:	e8 2e c1 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c00111e4:	fa                   	cli    
c00111e5:	f4                   	hlt    
c00111e6:	83 c4 10             	add    esp,0x10
c00111e9:	eb fe                	jmp    c00111e9 <displayDebugInfo(regs*)+0x415>

c00111eb <x87EmulHandler(regs*, void*)>:
c00111eb:	53                   	push   ebx
c00111ec:	83 ec 08             	sub    esp,0x8
c00111ef:	a1 d4 37 02 c0       	mov    eax,ds:0xc00237d4
c00111f4:	85 c0                	test   eax,eax
c00111f6:	74 15                	je     c001120d <x87EmulHandler(regs*, void*)+0x22>
c00111f8:	83 ec 0c             	sub    esp,0xc
c00111fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ff:	ff d0                	call   eax
c0011201:	83 c4 10             	add    esp,0x10
c0011204:	84 c0                	test   al,al
c0011206:	74 2f                	je     c0011237 <x87EmulHandler(regs*, void*)+0x4c>
c0011208:	83 c4 08             	add    esp,0x8
c001120b:	5b                   	pop    ebx
c001120c:	c3                   	ret    
c001120d:	83 ec 08             	sub    esp,0x8
c0011210:	8b 1d 48 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023648
c0011216:	6a 01                	push   0x1
c0011218:	68 3c 10 02 c0       	push   0xc002103c
c001121d:	e8 d6 63 00 00       	call   c00175f8 <Thr::loadDLL(char const*, bool)>
c0011222:	5a                   	pop    edx
c0011223:	59                   	pop    ecx
c0011224:	53                   	push   ebx
c0011225:	50                   	push   eax
c0011226:	e8 20 65 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c001122b:	a1 d4 37 02 c0       	mov    eax,ds:0xc00237d4
c0011230:	83 c4 10             	add    esp,0x10
c0011233:	85 c0                	test   eax,eax
c0011235:	75 c1                	jne    c00111f8 <x87EmulHandler(regs*, void*)+0xd>
c0011237:	83 ec 0c             	sub    esp,0xc
c001123a:	68 59 10 02 c0       	push   0xc0021059
c001123f:	e8 5f dd ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0011244:	58                   	pop    eax
c0011245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011249:	e8 86 fb ff ff       	call   c0010dd4 <displayDebugInfo(regs*)>

c001124e <gpFault(regs*, void*)>:
c001124e:	53                   	push   ebx
c001124f:	83 ec 14             	sub    esp,0x14
c0011252:	c7 05 d0 37 02 c0 bd 8b 01 c0 	mov    DWORD PTR ds:0xc00237d0,0xc0018bbd
c001125c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011260:	53                   	push   ebx
c0011261:	e8 57 79 00 00       	call   c0018bbd <Vm::faultHandler(regs*)>
c0011266:	83 c4 10             	add    esp,0x10
c0011269:	84 c0                	test   al,al
c001126b:	74 05                	je     c0011272 <gpFault(regs*, void*)+0x24>
c001126d:	83 c4 08             	add    esp,0x8
c0011270:	5b                   	pop    ebx
c0011271:	c3                   	ret    
c0011272:	83 ec 0c             	sub    esp,0xc
c0011275:	68 59 10 02 c0       	push   0xc0021059
c001127a:	e8 24 dd ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001127f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011282:	e8 4d fb ff ff       	call   c0010dd4 <displayDebugInfo(regs*)>

c0011287 <pgFault(regs*, void*)>:
c0011287:	83 ec 18             	sub    esp,0x18
c001128a:	68 74 10 02 c0       	push   0xc0021074
c001128f:	e8 0f dd ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0011294:	58                   	pop    eax
c0011295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011299:	e8 36 fb ff ff       	call   c0010dd4 <displayDebugInfo(regs*)>

c001129e <otherISRHandler(regs*, void*)>:
c001129e:	53                   	push   ebx
c001129f:	83 ec 0c             	sub    esp,0xc
c00112a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00112a6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00112a9:	50                   	push   eax
c00112aa:	50                   	push   eax
c00112ab:	68 81 10 02 c0       	push   0xc0021081
c00112b0:	e8 ee dc ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00112b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112b8:	e8 17 fb ff ff       	call   c0010dd4 <displayDebugInfo(regs*)>

c00112bd <opcodeFault(regs*, void*)>:
c00112bd:	53                   	push   ebx
c00112be:	83 ec 08             	sub    esp,0x8
c00112c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112c5:	e8 68 2c 00 00       	call   c0013f32 <thisCPU()>
c00112ca:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c00112d1:	74 16                	je     c00112e9 <opcodeFault(regs*, void*)+0x2c>
c00112d3:	83 ec 0c             	sub    esp,0xc
c00112d6:	68 d8 0e 02 c0       	push   0xc0020ed8
c00112db:	e8 c3 dc ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00112e0:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c00112e4:	83 c4 18             	add    esp,0x18
c00112e7:	5b                   	pop    ebx
c00112e8:	c3                   	ret    
c00112e9:	83 ec 0c             	sub    esp,0xc
c00112ec:	68 9e 10 02 c0       	push   0xc002109e
c00112f1:	e8 ad dc ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00112f6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00112f9:	c1 e0 04             	shl    eax,0x4
c00112fc:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00112ff:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0011303:	89 14 24             	mov    DWORD PTR [esp],edx
c0011306:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001130a:	52                   	push   edx
c001130b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001130f:	52                   	push   edx
c0011310:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0011313:	50                   	push   eax
c0011314:	68 fc 0e 02 c0       	push   0xc0020efc
c0011319:	e8 85 dc ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001131e:	83 c4 14             	add    esp,0x14
c0011321:	53                   	push   ebx
c0011322:	e8 ad fa ff ff       	call   c0010dd4 <displayDebugInfo(regs*)>

c0011327 <displayProgramFault(char const*)>:
c0011327:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001132c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001132f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011335:	85 c0                	test   eax,eax
c0011337:	74 15                	je     c001134e <displayProgramFault(char const*)+0x27>
c0011339:	83 ec 0c             	sub    esp,0xc
c001133c:	6a 04                	push   0x4
c001133e:	6a 0f                	push   0xf
c0011340:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011344:	50                   	push   eax
c0011345:	e8 64 bc ff ff       	call   c000cfae <VgaText::puts(char const*, VgaColour, VgaColour)>
c001134a:	83 c4 1c             	add    esp,0x1c
c001134d:	c3                   	ret    
c001134e:	c3                   	ret    
c001134f:	90                   	nop

c0011350 <InterruptController::convertLegacyIRQNumber(int)>:
c0011350:	53                   	push   ebx
c0011351:	83 ec 14             	sub    esp,0x14
c0011354:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001135c:	e8 2f f3 ff ff       	call   c0010690 <Device::getName()>
c0011361:	83 c4 10             	add    esp,0x10
c0011364:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0011367:	74 07                	je     c0011370 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c0011369:	89 d8                	mov    eax,ebx
c001136b:	83 c4 08             	add    esp,0x8
c001136e:	5b                   	pop    ebx
c001136f:	c3                   	ret    
c0011370:	83 fb 0f             	cmp    ebx,0xf
c0011373:	7f 0e                	jg     c0011383 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c0011375:	0f b6 9b a0 2d 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd260]
c001137c:	83 c4 08             	add    esp,0x8
c001137f:	89 d8                	mov    eax,ebx
c0011381:	5b                   	pop    ebx
c0011382:	c3                   	ret    
c0011383:	83 ec 0c             	sub    esp,0xc
c0011386:	68 28 0e 02 c0       	push   0xc0020e28
c001138b:	e8 a8 38 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c0011390:	89 d8                	mov    eax,ebx
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	83 c4 08             	add    esp,0x8
c0011398:	5b                   	pop    ebx
c0011399:	c3                   	ret    

c001139a <setupInterruptController()>:
c001139a:	56                   	push   esi
c001139b:	53                   	push   ebx
c001139c:	51                   	push   ecx
c001139d:	e8 8d 2b 00 00       	call   c0013f2f <getCPUNumber()>
c00113a2:	85 c0                	test   eax,eax
c00113a4:	0f 85 10 02 00 00    	jne    c00115ba <setupInterruptController()+0x220>
c00113aa:	83 ec 0c             	sub    esp,0xc
c00113ad:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c00113b2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00113b8:	68 58 21 00 00       	push   0x2158
c00113bd:	83 e0 01             	and    eax,0x1
c00113c0:	89 c6                	mov    esi,eax
c00113c2:	e8 ed da ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00113c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00113ca:	89 c3                	mov    ebx,eax
c00113cc:	e8 0d c8 00 00       	call   c001dbde <PIC::PIC()>
c00113d1:	6a 00                	push   0x0
c00113d3:	6a 00                	push   0x0
c00113d5:	6a 00                	push   0x0
c00113d7:	53                   	push   ebx
c00113d8:	e8 45 cb 00 00       	call   c001df22 <PIC::open(int, int, void*)>
c00113dd:	83 c4 20             	add    esp,0x20
c00113e0:	89 f0                	mov    eax,esi
c00113e2:	84 c0                	test   al,al
c00113e4:	0f 85 92 01 00 00    	jne    c001157c <setupInterruptController()+0x1e2>
c00113ea:	83 ec 08             	sub    esp,0x8
c00113ed:	53                   	push   ebx
c00113ee:	ff 35 48 36 02 c0    	push   DWORD PTR ds:0xc0023648
c00113f4:	e8 b5 ef ff ff       	call   c00103ae <Device::addChild(Device*)>
c00113f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113fb:	6a 00                	push   0x0
c00113fd:	68 9e 12 01 c0       	push   0xc001129e
c0011402:	6a 00                	push   0x0
c0011404:	53                   	push   ebx
c0011405:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011408:	83 c4 20             	add    esp,0x20
c001140b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001140d:	6a 00                	push   0x0
c001140f:	68 9e 12 01 c0       	push   0xc001129e
c0011414:	6a 01                	push   0x1
c0011416:	53                   	push   ebx
c0011417:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001141a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001141c:	6a 00                	push   0x0
c001141e:	68 37 0c 01 c0       	push   0xc0010c37
c0011423:	6a 02                	push   0x2
c0011425:	53                   	push   ebx
c0011426:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011429:	83 c4 20             	add    esp,0x20
c001142c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001142e:	6a 00                	push   0x0
c0011430:	68 9e 12 01 c0       	push   0xc001129e
c0011435:	6a 03                	push   0x3
c0011437:	53                   	push   ebx
c0011438:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001143b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001143d:	6a 00                	push   0x0
c001143f:	68 9e 12 01 c0       	push   0xc001129e
c0011444:	6a 04                	push   0x4
c0011446:	53                   	push   ebx
c0011447:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001144a:	83 c4 20             	add    esp,0x20
c001144d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001144f:	6a 00                	push   0x0
c0011451:	68 9e 12 01 c0       	push   0xc001129e
c0011456:	6a 05                	push   0x5
c0011458:	53                   	push   ebx
c0011459:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001145c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001145e:	6a 00                	push   0x0
c0011460:	68 bd 12 01 c0       	push   0xc00112bd
c0011465:	6a 06                	push   0x6
c0011467:	53                   	push   ebx
c0011468:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001146b:	83 c4 20             	add    esp,0x20
c001146e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011470:	6a 00                	push   0x0
c0011472:	68 eb 11 01 c0       	push   0xc00111eb
c0011477:	6a 07                	push   0x7
c0011479:	53                   	push   ebx
c001147a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001147d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001147f:	6a 00                	push   0x0
c0011481:	68 5e 0a 01 c0       	push   0xc0010a5e
c0011486:	6a 08                	push   0x8
c0011488:	53                   	push   ebx
c0011489:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001148c:	83 c4 20             	add    esp,0x20
c001148f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011491:	6a 00                	push   0x0
c0011493:	68 9e 12 01 c0       	push   0xc001129e
c0011498:	6a 09                	push   0x9
c001149a:	53                   	push   ebx
c001149b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001149e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114a0:	6a 00                	push   0x0
c00114a2:	68 9e 12 01 c0       	push   0xc001129e
c00114a7:	6a 0a                	push   0xa
c00114a9:	53                   	push   ebx
c00114aa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114ad:	83 c4 20             	add    esp,0x20
c00114b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114b2:	6a 00                	push   0x0
c00114b4:	68 9e 12 01 c0       	push   0xc001129e
c00114b9:	6a 0b                	push   0xb
c00114bb:	53                   	push   ebx
c00114bc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114c1:	6a 00                	push   0x0
c00114c3:	68 9e 12 01 c0       	push   0xc001129e
c00114c8:	6a 0c                	push   0xc
c00114ca:	53                   	push   ebx
c00114cb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114ce:	83 c4 20             	add    esp,0x20
c00114d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114d3:	6a 00                	push   0x0
c00114d5:	68 4e 12 01 c0       	push   0xc001124e
c00114da:	6a 0d                	push   0xd
c00114dc:	53                   	push   ebx
c00114dd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114e2:	6a 00                	push   0x0
c00114e4:	68 87 12 01 c0       	push   0xc0011287
c00114e9:	6a 0e                	push   0xe
c00114eb:	53                   	push   ebx
c00114ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114ef:	83 c4 20             	add    esp,0x20
c00114f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114f4:	6a 00                	push   0x0
c00114f6:	68 9e 12 01 c0       	push   0xc001129e
c00114fb:	6a 0f                	push   0xf
c00114fd:	53                   	push   ebx
c00114fe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011501:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011503:	6a 00                	push   0x0
c0011505:	68 9e 12 01 c0       	push   0xc001129e
c001150a:	6a 10                	push   0x10
c001150c:	53                   	push   ebx
c001150d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011510:	83 c4 20             	add    esp,0x20
c0011513:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011515:	6a 00                	push   0x0
c0011517:	68 9e 12 01 c0       	push   0xc001129e
c001151c:	6a 11                	push   0x11
c001151e:	53                   	push   ebx
c001151f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011522:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011524:	6a 00                	push   0x0
c0011526:	68 9e 12 01 c0       	push   0xc001129e
c001152b:	6a 12                	push   0x12
c001152d:	53                   	push   ebx
c001152e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011531:	83 c4 20             	add    esp,0x20
c0011534:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011536:	6a 00                	push   0x0
c0011538:	68 9e 12 01 c0       	push   0xc001129e
c001153d:	6a 13                	push   0x13
c001153f:	53                   	push   ebx
c0011540:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011543:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011545:	6a 00                	push   0x0
c0011547:	68 9e 12 01 c0       	push   0xc001129e
c001154c:	6a 14                	push   0x14
c001154e:	53                   	push   ebx
c001154f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011552:	83 c4 20             	add    esp,0x20
c0011555:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011557:	6a 00                	push   0x0
c0011559:	68 9e 12 01 c0       	push   0xc001129e
c001155e:	6a 1e                	push   0x1e
c0011560:	53                   	push   ebx
c0011561:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011564:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011566:	6a 00                	push   0x0
c0011568:	68 fc 65 01 c0       	push   0xc00165fc
c001156d:	6a 60                	push   0x60
c001156f:	53                   	push   ebx
c0011570:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011573:	83 c4 20             	add    esp,0x20
c0011576:	89 d8                	mov    eax,ebx
c0011578:	5a                   	pop    edx
c0011579:	5b                   	pop    ebx
c001157a:	5e                   	pop    esi
c001157b:	c3                   	ret    
c001157c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001157e:	6a 00                	push   0x0
c0011580:	6a 00                	push   0x0
c0011582:	6a 00                	push   0x0
c0011584:	53                   	push   ebx
c0011585:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011588:	8b 03                	mov    eax,DWORD PTR [ebx]
c001158a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001158d:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0011590:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c0011597:	e8 18 d9 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001159c:	89 04 24             	mov    DWORD PTR [esp],eax
c001159f:	89 c3                	mov    ebx,eax
c00115a1:	e8 76 c1 00 00       	call   c001d71c <APIC::APIC()>
c00115a6:	6a 00                	push   0x0
c00115a8:	6a 00                	push   0x0
c00115aa:	6a 00                	push   0x0
c00115ac:	53                   	push   ebx
c00115ad:	e8 88 c0 00 00       	call   c001d63a <APIC::open(int, int, void*)>
c00115b2:	83 c4 20             	add    esp,0x20
c00115b5:	e9 30 fe ff ff       	jmp    c00113ea <setupInterruptController()+0x50>
c00115ba:	83 ec 0c             	sub    esp,0xc
c00115bd:	68 58 21 00 00       	push   0x2158
c00115c2:	e8 ed d8 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00115c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00115ca:	89 c3                	mov    ebx,eax
c00115cc:	e8 4b c1 00 00       	call   c001d71c <APIC::APIC()>
c00115d1:	6a 00                	push   0x0
c00115d3:	6a 00                	push   0x0
c00115d5:	6a 00                	push   0x0
c00115d7:	53                   	push   ebx
c00115d8:	e8 5d c0 00 00       	call   c001d63a <APIC::open(int, int, void*)>
c00115dd:	83 c4 18             	add    esp,0x18
c00115e0:	53                   	push   ebx
c00115e1:	ff 35 48 36 02 c0    	push   DWORD PTR ds:0xc0023648
c00115e7:	e8 c2 ed ff ff       	call   c00103ae <Device::addChild(Device*)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	89 d8                	mov    eax,ebx
c00115f1:	5a                   	pop    edx
c00115f2:	5b                   	pop    ebx
c00115f3:	5e                   	pop    esi
c00115f4:	c3                   	ret    
c00115f5:	90                   	nop

c00115f6 <startGUI(void*)>:
c00115f6:	55                   	push   ebp
c00115f7:	89 e5                	mov    ebp,esp
c00115f9:	53                   	push   ebx
c00115fa:	83 ec 04             	sub    esp,0x4
c00115fd:	e8 56 65 00 00       	call   c0017b58 <unlockScheduler()>
c0011602:	e8 3a 65 00 00       	call   c0017b41 <getIRQNestingLevel()>
c0011607:	83 ec 08             	sub    esp,0x8
c001160a:	50                   	push   eax
c001160b:	68 f8 10 02 c0       	push   0xc00210f8
c0011610:	e8 8e d9 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0011615:	83 c4 10             	add    esp,0x10
c0011618:	8b 1d 48 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023648
c001161e:	83 ec 08             	sub    esp,0x8
c0011621:	6a 01                	push   0x1
c0011623:	68 12 11 02 c0       	push   0xc0021112
c0011628:	e8 cb 5f 00 00       	call   c00175f8 <Thr::loadDLL(char const*, bool)>
c001162d:	83 c4 10             	add    esp,0x10
c0011630:	83 ec 08             	sub    esp,0x8
c0011633:	53                   	push   ebx
c0011634:	50                   	push   eax
c0011635:	e8 11 61 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c001163a:	83 c4 10             	add    esp,0x10
c001163d:	8b 1d 48 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023648
c0011643:	83 ec 08             	sub    esp,0x8
c0011646:	6a 01                	push   0x1
c0011648:	68 2c 11 02 c0       	push   0xc002112c
c001164d:	e8 a6 5f 00 00       	call   c00175f8 <Thr::loadDLL(char const*, bool)>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	83 ec 08             	sub    esp,0x8
c0011658:	53                   	push   ebx
c0011659:	50                   	push   eax
c001165a:	e8 ec 60 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	90                   	nop
c0011663:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011666:	c9                   	leave  
c0011667:	c3                   	ret    

c0011668 <sendKeyToTerminal(unsigned char)>:
c0011668:	55                   	push   ebp
c0011669:	89 e5                	mov    ebp,esp
c001166b:	83 ec 28             	sub    esp,0x28
c001166e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011671:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011674:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c0011679:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001167d:	83 ec 08             	sub    esp,0x8
c0011680:	52                   	push   edx
c0011681:	50                   	push   eax
c0011682:	e8 63 be ff ff       	call   c000d4ea <VgaText::receiveKey(unsigned char)>
c0011687:	83 c4 10             	add    esp,0x10
c001168a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001168e:	75 41                	jne    c00116d1 <sendKeyToTerminal(unsigned char)+0x69>
c0011690:	e8 e8 64 00 00       	call   c0017b7d <lockStuff()>
c0011695:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c001169a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001169d:	c7 05 e0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237e0,0x0
c00116a7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00116ab:	74 1f                	je     c00116cc <sendKeyToTerminal(unsigned char)+0x64>
c00116ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116b0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00116b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00116b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00116c2:	e8 9f 6c 00 00       	call   c0018366 <unblockTask(ThreadControlBlock*)>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	eb db                	jmp    c00116a7 <sendKeyToTerminal(unsigned char)+0x3f>
c00116cc:	e8 3e 68 00 00       	call   c0017f0f <unlockStuff()>
c00116d1:	90                   	nop
c00116d2:	c9                   	leave  
c00116d3:	c3                   	ret    

c00116d4 <sendKeyboardToken(KeyboardToken)>:
c00116d4:	55                   	push   ebp
c00116d5:	89 e5                	mov    ebp,esp
c00116d7:	83 ec 18             	sub    esp,0x18
c00116da:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00116dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e0:	0f b7 c0             	movzx  eax,ax
c00116e3:	83 f2 01             	xor    edx,0x1
c00116e6:	88 90 00 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc800],dl
c00116ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ef:	66 3d 03 02          	cmp    ax,0x203
c00116f3:	75 07                	jne    c00116fc <sendKeyboardToken(KeyboardToken)+0x28>
c00116f5:	a0 00 39 02 c0       	mov    al,ds:0xc0023900
c00116fa:	84 c0                	test   al,al
c00116fc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011700:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011703:	a0 08 3c 02 c0       	mov    al,ds:0xc0023c08
c0011708:	38 c2                	cmp    dl,al
c001170a:	74 1c                	je     c0011728 <sendKeyboardToken(KeyboardToken)+0x54>
c001170c:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001170f:	a2 08 3c 02 c0       	mov    ds:0xc0023c08,al
c0011714:	a0 08 3c 02 c0       	mov    al,ds:0xc0023c08
c0011719:	0f b6 c0             	movzx  eax,al
c001171c:	83 ec 0c             	sub    esp,0xc
c001171f:	50                   	push   eax
c0011720:	e8 33 b0 ff ff       	call   c000c758 <setTerminalScrollLock(bool)>
c0011725:	83 c4 10             	add    esp,0x10
c0011728:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001172b:	84 c0                	test   al,al
c001172d:	0f 84 ae 00 00 00    	je     c00117e1 <sendKeyboardToken(KeyboardToken)+0x10d>
c0011733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011736:	66 3d 10 03          	cmp    ax,0x310
c001173a:	75 06                	jne    c0011742 <sendKeyboardToken(KeyboardToken)+0x6e>
c001173c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011745:	66 3d 11 03          	cmp    ax,0x311
c0011749:	75 06                	jne    c0011751 <sendKeyboardToken(KeyboardToken)+0x7d>
c001174b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011754:	66 3d 12 03          	cmp    ax,0x312
c0011758:	75 06                	jne    c0011760 <sendKeyboardToken(KeyboardToken)+0x8c>
c001175a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011763:	66 3d 13 03          	cmp    ax,0x313
c0011767:	75 06                	jne    c001176f <sendKeyboardToken(KeyboardToken)+0x9b>
c0011769:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001176f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011772:	66 3d 14 03          	cmp    ax,0x314
c0011776:	75 06                	jne    c001177e <sendKeyboardToken(KeyboardToken)+0xaa>
c0011778:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001177e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011781:	66 3d 15 03          	cmp    ax,0x315
c0011785:	75 06                	jne    c001178d <sendKeyboardToken(KeyboardToken)+0xb9>
c0011787:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001178d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011790:	66 3d 16 03          	cmp    ax,0x316
c0011794:	75 06                	jne    c001179c <sendKeyboardToken(KeyboardToken)+0xc8>
c0011796:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001179c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001179f:	66 3d 17 03          	cmp    ax,0x317
c00117a3:	75 06                	jne    c00117ab <sendKeyboardToken(KeyboardToken)+0xd7>
c00117a5:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00117ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ae:	66 3d 18 03          	cmp    ax,0x318
c00117b2:	75 06                	jne    c00117ba <sendKeyboardToken(KeyboardToken)+0xe6>
c00117b4:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00117ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117bd:	66 3d 19 03          	cmp    ax,0x319
c00117c1:	75 06                	jne    c00117c9 <sendKeyboardToken(KeyboardToken)+0xf5>
c00117c3:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00117c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cc:	66 3d 1a 03          	cmp    ax,0x31a
c00117d0:	0f 85 c9 00 00 00    	jne    c001189f <sendKeyboardToken(KeyboardToken)+0x1cb>
c00117d6:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00117dc:	e9 be 00 00 00       	jmp    c001189f <sendKeyboardToken(KeyboardToken)+0x1cb>
c00117e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e4:	66 3d 10 03          	cmp    ax,0x310
c00117e8:	75 0a                	jne    c00117f4 <sendKeyboardToken(KeyboardToken)+0x120>
c00117ea:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00117f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00117f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f7:	66 3d 11 03          	cmp    ax,0x311
c00117fb:	75 0a                	jne    c0011807 <sendKeyboardToken(KeyboardToken)+0x133>
c00117fd:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0011803:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001180a:	66 3d 12 03          	cmp    ax,0x312
c001180e:	75 0a                	jne    c001181a <sendKeyboardToken(KeyboardToken)+0x146>
c0011810:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0011816:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001181a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001181d:	66 3d 13 03          	cmp    ax,0x313
c0011821:	75 0a                	jne    c001182d <sendKeyboardToken(KeyboardToken)+0x159>
c0011823:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0011829:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001182d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011830:	66 3d 14 03          	cmp    ax,0x314
c0011834:	75 0a                	jne    c0011840 <sendKeyboardToken(KeyboardToken)+0x16c>
c0011836:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001183c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011843:	66 3d 15 03          	cmp    ax,0x315
c0011847:	75 0a                	jne    c0011853 <sendKeyboardToken(KeyboardToken)+0x17f>
c0011849:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001184f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011856:	66 3d 16 03          	cmp    ax,0x316
c001185a:	75 0a                	jne    c0011866 <sendKeyboardToken(KeyboardToken)+0x192>
c001185c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0011862:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011869:	66 3d 17 03          	cmp    ax,0x317
c001186d:	75 0a                	jne    c0011879 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001186f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0011875:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001187c:	66 3d 18 03          	cmp    ax,0x318
c0011880:	75 0a                	jne    c001188c <sendKeyboardToken(KeyboardToken)+0x1b8>
c0011882:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0011888:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001188c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001188f:	66 3d 19 03          	cmp    ax,0x319
c0011893:	75 0a                	jne    c001189f <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011895:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001189b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001189f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a2:	66 3d 00 02          	cmp    ax,0x200
c00118a6:	75 2a                	jne    c00118d2 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00118a8:	a0 00 3c 02 c0       	mov    al,ds:0xc0023c00
c00118ad:	83 f0 01             	xor    eax,0x1
c00118b0:	84 c0                	test   al,al
c00118b2:	74 1e                	je     c00118d2 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00118b4:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c00118b9:	6a 01                	push   0x1
c00118bb:	6a 00                	push   0x0
c00118bd:	68 f6 15 01 c0       	push   0xc00115f6
c00118c2:	50                   	push   eax
c00118c3:	e8 b8 63 00 00       	call   c0017c80 <Process::createThread(void (*)(void*), void*, int)>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	c6 05 00 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023c00,0x1
c00118d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d5:	66 3d 1d 03          	cmp    ax,0x31d
c00118d9:	75 06                	jne    c00118e1 <sendKeyboardToken(KeyboardToken)+0x20d>
c00118db:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00118e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e4:	66 3d 1c 03          	cmp    ax,0x31c
c00118e8:	75 06                	jne    c00118f0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00118ea:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00118f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f3:	66 3d 1b 03          	cmp    ax,0x31b
c00118f7:	75 06                	jne    c00118ff <sendKeyboardToken(KeyboardToken)+0x22b>
c00118f9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00118ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011902:	66 3d 1e 03          	cmp    ax,0x31e
c0011906:	75 06                	jne    c001190e <sendKeyboardToken(KeyboardToken)+0x23a>
c0011908:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001190e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011911:	66 3d 1f 03          	cmp    ax,0x31f
c0011915:	75 06                	jne    c001191d <sendKeyboardToken(KeyboardToken)+0x249>
c0011917:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001191d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011920:	66 3d 1a 03          	cmp    ax,0x31a
c0011924:	75 06                	jne    c001192c <sendKeyboardToken(KeyboardToken)+0x258>
c0011926:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001192c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0011930:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011933:	83 f0 01             	xor    eax,0x1
c0011936:	84 c0                	test   al,al
c0011938:	74 77                	je     c00119b1 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001193a:	a0 01 39 02 c0       	mov    al,ds:0xc0023901
c001193f:	84 c0                	test   al,al
c0011941:	74 41                	je     c0011984 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0011943:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011947:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001194b:	74 2b                	je     c0011978 <sendKeyboardToken(KeyboardToken)+0x2a4>
c001194d:	8b 15 04 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c04
c0011953:	89 d0                	mov    eax,edx
c0011955:	c1 e0 02             	shl    eax,0x2
c0011958:	01 d0                	add    eax,edx
c001195a:	01 c0                	add    eax,eax
c001195c:	a3 04 3c 02 c0       	mov    ds:0xc0023c04,eax
c0011961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011964:	0f b7 c0             	movzx  eax,ax
c0011967:	8d 50 d0             	lea    edx,[eax-0x30]
c001196a:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c001196f:	01 d0                	add    eax,edx
c0011971:	a3 04 3c 02 c0       	mov    ds:0xc0023c04,eax
c0011976:	eb 6d                	jmp    c00119e5 <sendKeyboardToken(KeyboardToken)+0x311>
c0011978:	c7 05 04 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c04,0x0
c0011982:	eb 61                	jmp    c00119e5 <sendKeyboardToken(KeyboardToken)+0x311>
c0011984:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c0011989:	85 c0                	test   eax,eax
c001198b:	74 18                	je     c00119a5 <sendKeyboardToken(KeyboardToken)+0x2d1>
c001198d:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c0011992:	0f b6 c0             	movzx  eax,al
c0011995:	83 ec 0c             	sub    esp,0xc
c0011998:	50                   	push   eax
c0011999:	e8 ca fc ff ff       	call   c0011668 <sendKeyToTerminal(unsigned char)>
c001199e:	83 c4 10             	add    esp,0x10
c00119a1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00119a5:	c7 05 04 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c04,0x0
c00119af:	eb 34                	jmp    c00119e5 <sendKeyboardToken(KeyboardToken)+0x311>
c00119b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b4:	66 3d 01 01          	cmp    ax,0x101
c00119b8:	75 2b                	jne    c00119e5 <sendKeyboardToken(KeyboardToken)+0x311>
c00119ba:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c00119bf:	85 c0                	test   eax,eax
c00119c1:	74 18                	je     c00119db <sendKeyboardToken(KeyboardToken)+0x307>
c00119c3:	a1 04 3c 02 c0       	mov    eax,ds:0xc0023c04
c00119c8:	0f b6 c0             	movzx  eax,al
c00119cb:	83 ec 0c             	sub    esp,0xc
c00119ce:	50                   	push   eax
c00119cf:	e8 94 fc ff ff       	call   c0011668 <sendKeyToTerminal(unsigned char)>
c00119d4:	83 c4 10             	add    esp,0x10
c00119d7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00119db:	c7 05 04 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023c04,0x0
c00119e5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00119e8:	83 f0 01             	xor    eax,0x1
c00119eb:	84 c0                	test   al,al
c00119ed:	74 4c                	je     c0011a3b <sendKeyboardToken(KeyboardToken)+0x367>
c00119ef:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00119f2:	83 f0 01             	xor    eax,0x1
c00119f5:	84 c0                	test   al,al
c00119f7:	74 42                	je     c0011a3b <sendKeyboardToken(KeyboardToken)+0x367>
c00119f9:	a0 00 39 02 c0       	mov    al,ds:0xc0023900
c00119fe:	83 f0 01             	xor    eax,0x1
c0011a01:	84 c0                	test   al,al
c0011a03:	74 36                	je     c0011a3b <sendKeyboardToken(KeyboardToken)+0x367>
c0011a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a08:	66 83 f8 1f          	cmp    ax,0x1f
c0011a0c:	76 09                	jbe    c0011a17 <sendKeyboardToken(KeyboardToken)+0x343>
c0011a0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a11:	66 83 f8 7e          	cmp    ax,0x7e
c0011a15:	76 12                	jbe    c0011a29 <sendKeyboardToken(KeyboardToken)+0x355>
c0011a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1a:	66 83 f8 0a          	cmp    ax,0xa
c0011a1e:	74 09                	je     c0011a29 <sendKeyboardToken(KeyboardToken)+0x355>
c0011a20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a23:	66 83 f8 08          	cmp    ax,0x8
c0011a27:	75 12                	jne    c0011a3b <sendKeyboardToken(KeyboardToken)+0x367>
c0011a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a2c:	0f b6 c0             	movzx  eax,al
c0011a2f:	83 ec 0c             	sub    esp,0xc
c0011a32:	50                   	push   eax
c0011a33:	e8 30 fc ff ff       	call   c0011668 <sendKeyToTerminal(unsigned char)>
c0011a38:	83 c4 10             	add    esp,0x10
c0011a3b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011a3e:	83 f0 01             	xor    eax,0x1
c0011a41:	84 c0                	test   al,al
c0011a43:	74 4f                	je     c0011a94 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a45:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011a48:	83 f0 01             	xor    eax,0x1
c0011a4b:	84 c0                	test   al,al
c0011a4d:	74 45                	je     c0011a94 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a4f:	a0 00 39 02 c0       	mov    al,ds:0xc0023900
c0011a54:	84 c0                	test   al,al
c0011a56:	74 3c                	je     c0011a94 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a5b:	66 83 f8 3f          	cmp    ax,0x3f
c0011a5f:	76 33                	jbe    c0011a94 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a64:	66 83 f8 7f          	cmp    ax,0x7f
c0011a68:	77 2a                	ja     c0011a94 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a6d:	88 c2                	mov    dl,al
c0011a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a72:	66 83 f8 5f          	cmp    ax,0x5f
c0011a76:	76 04                	jbe    c0011a7c <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011a78:	b0 20                	mov    al,0x20
c0011a7a:	eb 02                	jmp    c0011a7e <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011a7c:	b0 00                	mov    al,0x0
c0011a7e:	29 c2                	sub    edx,eax
c0011a80:	88 d0                	mov    al,dl
c0011a82:	83 e8 40             	sub    eax,0x40
c0011a85:	0f b6 c0             	movzx  eax,al
c0011a88:	83 ec 0c             	sub    esp,0xc
c0011a8b:	50                   	push   eax
c0011a8c:	e8 d7 fb ff ff       	call   c0011668 <sendKeyToTerminal(unsigned char)>
c0011a91:	83 c4 10             	add    esp,0x10
c0011a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a97:	66 3d 00 03          	cmp    ax,0x300
c0011a9b:	75 0f                	jne    c0011aac <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011a9d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011aa0:	83 f0 01             	xor    eax,0x1
c0011aa3:	84 c0                	test   al,al
c0011aa5:	74 05                	je     c0011aac <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011aa7:	e8 d3 b4 ff ff       	call   c000cf7f <doTerminalCycle()>
c0011aac:	90                   	nop
c0011aad:	c9                   	leave  
c0011aae:	c3                   	ret    

c0011aaf <clearInternalKeybuffer(VgaText*)>:
c0011aaf:	55                   	push   ebp
c0011ab0:	89 e5                	mov    ebp,esp
c0011ab2:	83 ec 08             	sub    esp,0x8
c0011ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab8:	05 34 11 00 00       	add    eax,0x1134
c0011abd:	83 ec 0c             	sub    esp,0xc
c0011ac0:	50                   	push   eax
c0011ac1:	e8 5f eb fe ff       	call   c0000625 <strlen>
c0011ac6:	83 c4 10             	add    esp,0x10
c0011ac9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011acc:	81 c2 34 11 00 00    	add    edx,0x1134
c0011ad2:	83 ec 04             	sub    esp,0x4
c0011ad5:	50                   	push   eax
c0011ad6:	6a 00                	push   0x0
c0011ad8:	52                   	push   edx
c0011ad9:	e8 2a eb fe ff       	call   c0000608 <memset>
c0011ade:	83 c4 10             	add    esp,0x10
c0011ae1:	90                   	nop
c0011ae2:	c9                   	leave  
c0011ae3:	c3                   	ret    

c0011ae4 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011ae4:	55                   	push   ebp
c0011ae5:	89 e5                	mov    ebp,esp
c0011ae7:	83 ec 18             	sub    esp,0x18
c0011aea:	fb                   	sti    
c0011aeb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011af2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011af6:	74 77                	je     c0011b6f <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011af8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011afb:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011b01:	84 c0                	test   al,al
c0011b03:	75 02                	jne    c0011b07 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011b05:	eb f1                	jmp    c0011af8 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011b07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011b0a:	8d 50 01             	lea    edx,[eax+0x1]
c0011b0d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011b10:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b13:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011b19:	88 10                	mov    BYTE PTR [eax],dl
c0011b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b1e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011b24:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b2a:	05 34 11 00 00       	add    eax,0x1134
c0011b2f:	83 ec 0c             	sub    esp,0xc
c0011b32:	50                   	push   eax
c0011b33:	e8 ed ea fe ff       	call   c0000625 <strlen>
c0011b38:	83 c4 10             	add    esp,0x10
c0011b3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b3e:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b44:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011b47:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b4a:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b50:	83 ec 04             	sub    esp,0x4
c0011b53:	50                   	push   eax
c0011b54:	51                   	push   ecx
c0011b55:	52                   	push   edx
c0011b56:	e8 3f ea fe ff       	call   c000059a <memmove>
c0011b5b:	83 c4 10             	add    esp,0x10
c0011b5e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011b61:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011b64:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011b68:	75 88                	jne    c0011af2 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011b6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b6d:	eb 03                	jmp    c0011b72 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011b6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b72:	c9                   	leave  
c0011b73:	c3                   	ret    

c0011b74 <Keyboard::Keyboard(char const*)>:
c0011b74:	83 ec 0c             	sub    esp,0xc
c0011b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b7b:	83 ec 08             	sub    esp,0x8
c0011b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b82:	50                   	push   eax
c0011b83:	e8 16 ea ff ff       	call   c001059e <Device::Device(char const*)>
c0011b88:	83 c4 10             	add    esp,0x10
c0011b8b:	ba 50 11 02 c0       	mov    edx,0xc0021150
c0011b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b94:	89 10                	mov    DWORD PTR [eax],edx
c0011b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b9a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011ba4:	c6 05 e4 37 02 c0 01 	mov    BYTE PTR ds:0xc00237e4,0x1
c0011bab:	90                   	nop
c0011bac:	83 c4 0c             	add    esp,0xc
c0011baf:	c3                   	ret    

c0011bb0 <Keyboard::~Keyboard()>:
c0011bb0:	83 ec 0c             	sub    esp,0xc
c0011bb3:	ba 50 11 02 c0       	mov    edx,0xc0021150
c0011bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bbc:	89 10                	mov    DWORD PTR [eax],edx
c0011bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bc2:	83 ec 0c             	sub    esp,0xc
c0011bc5:	50                   	push   eax
c0011bc6:	e8 85 e6 ff ff       	call   c0010250 <Device::~Device()>
c0011bcb:	83 c4 10             	add    esp,0x10
c0011bce:	90                   	nop
c0011bcf:	83 c4 0c             	add    esp,0xc
c0011bd2:	c3                   	ret    
c0011bd3:	90                   	nop

c0011bd4 <Keyboard::~Keyboard()>:
c0011bd4:	83 ec 0c             	sub    esp,0xc
c0011bd7:	83 ec 0c             	sub    esp,0xc
c0011bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bde:	e8 cd ff ff ff       	call   c0011bb0 <Keyboard::~Keyboard()>
c0011be3:	83 c4 10             	add    esp,0x10
c0011be6:	83 ec 08             	sub    esp,0x8
c0011be9:	68 5c 01 00 00       	push   0x15c
c0011bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bf2:	e8 cc d2 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c0011bf7:	83 c4 10             	add    esp,0x10
c0011bfa:	83 c4 0c             	add    esp,0xc
c0011bfd:	c3                   	ret    

c0011bfe <LogicalDisk::close(int, int, void*)>:
c0011bfe:	83 c8 ff             	or     eax,0xffffffff
c0011c01:	c3                   	ret    

c0011c02 <LogicalDisk::~LogicalDisk()>:
c0011c02:	83 ec 0c             	sub    esp,0xc
c0011c05:	ba 00 12 02 c0       	mov    edx,0xc0021200
c0011c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c0e:	89 10                	mov    DWORD PTR [eax],edx
c0011c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c14:	83 ec 0c             	sub    esp,0xc
c0011c17:	50                   	push   eax
c0011c18:	e8 33 e6 ff ff       	call   c0010250 <Device::~Device()>
c0011c1d:	83 c4 10             	add    esp,0x10
c0011c20:	90                   	nop
c0011c21:	83 c4 0c             	add    esp,0xc
c0011c24:	c3                   	ret    
c0011c25:	90                   	nop

c0011c26 <LogicalDisk::~LogicalDisk()>:
c0011c26:	83 ec 0c             	sub    esp,0xc
c0011c29:	83 ec 0c             	sub    esp,0xc
c0011c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c30:	e8 cd ff ff ff       	call   c0011c02 <LogicalDisk::~LogicalDisk()>
c0011c35:	83 c4 10             	add    esp,0x10
c0011c38:	83 ec 08             	sub    esp,0x8
c0011c3b:	68 74 01 00 00       	push   0x174
c0011c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c44:	e8 7a d2 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c0011c49:	83 c4 10             	add    esp,0x10
c0011c4c:	83 c4 0c             	add    esp,0xc
c0011c4f:	c3                   	ret    

c0011c50 <LogicalDisk::open(int, int, void*)>:
c0011c50:	83 ec 18             	sub    esp,0x18
c0011c53:	68 7c 11 02 c0       	push   0xc002117c
c0011c58:	e8 db 2f 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c0011c5d:	83 c8 ff             	or     eax,0xffffffff
c0011c60:	83 c4 1c             	add    esp,0x1c
c0011c63:	c3                   	ret    

c0011c64 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011c64:	53                   	push   ebx
c0011c65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c71:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011c77:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011c7d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011c83:	77 10                	ja     c0011c95 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011c85:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011c8b:	89 d3                	mov    ebx,edx
c0011c8d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011c93:	72 05                	jb     c0011c9a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011c95:	83 c8 ff             	or     eax,0xffffffff
c0011c98:	89 c2                	mov    edx,eax
c0011c9a:	5b                   	pop    ebx
c0011c9b:	c3                   	ret    

c0011c9c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011c9c:	56                   	push   esi
c0011c9d:	83 c8 ff             	or     eax,0xffffffff
c0011ca0:	53                   	push   ebx
c0011ca1:	89 c2                	mov    edx,eax
c0011ca3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011ca7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011cab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011caf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011cb5:	77 27                	ja     c0011cde <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011cb7:	89 d8                	mov    eax,ebx
c0011cb9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011cbf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011cc5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cca:	89 c2                	mov    edx,eax
c0011ccc:	73 10                	jae    c0011cde <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011cce:	89 c8                	mov    eax,ecx
c0011cd0:	89 da                	mov    edx,ebx
c0011cd2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011cd8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011cde:	5b                   	pop    ebx
c0011cdf:	5e                   	pop    esi
c0011ce0:	c3                   	ret    
c0011ce1:	90                   	nop

c0011ce2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011ce2:	83 ec 1c             	sub    esp,0x1c
c0011ce5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ce9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cf5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011cf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0011cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011d00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d08:	83 ec 08             	sub    esp,0x8
c0011d0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d0f:	50                   	push   eax
c0011d10:	e8 89 e8 ff ff       	call   c001059e <Device::Device(char const*)>
c0011d15:	83 c4 10             	add    esp,0x10
c0011d18:	ba 00 12 02 c0       	mov    edx,0xc0021200
c0011d1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d21:	89 10                	mov    DWORD PTR [eax],edx
c0011d23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d27:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d32:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011d39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d3d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011d47:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d53:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011d59:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011d5f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011d63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011d66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011d6a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011d70:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d7e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011d84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d88:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011d92:	90                   	nop
c0011d93:	83 c4 1c             	add    esp,0x1c
c0011d96:	c3                   	ret    
c0011d97:	90                   	nop

c0011d98 <LogicalDisk::assignDriveLetter()>:
c0011d98:	55                   	push   ebp
c0011d99:	57                   	push   edi
c0011d9a:	56                   	push   esi
c0011d9b:	53                   	push   ebx
c0011d9c:	83 ec 14             	sub    esp,0x14
c0011d9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011da3:	8b 3d 20 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c20
c0011da9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011daf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011db3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011db9:	8b 3d 24 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c24
c0011dbf:	3c 01                	cmp    al,0x1
c0011dc1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011dc5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011dc9:	19 c0                	sbb    eax,eax
c0011dcb:	83 e0 02             	and    eax,0x2
c0011dce:	83 c0 41             	add    eax,0x41
c0011dd1:	0f be e8             	movsx  ebp,al
c0011dd4:	3c 43                	cmp    al,0x43
c0011dd6:	75 10                	jne    c0011de8 <LogicalDisk::assignDriveLetter()+0x50>
c0011dd8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011ddf:	75 5d                	jne    c0011e3e <LogicalDisk::assignDriveLetter()+0xa6>
c0011de1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011de6:	75 56                	jne    c0011e3e <LogicalDisk::assignDriveLetter()+0xa6>
c0011de8:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011deb:	ba 01 00 00 00       	mov    edx,0x1
c0011df0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011df4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011df8:	d3 e2                	shl    edx,cl
c0011dfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011dfe:	89 d7                	mov    edi,edx
c0011e00:	89 d6                	mov    esi,edx
c0011e02:	c1 ff 1f             	sar    edi,0x1f
c0011e05:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011e09:	21 f9                	and    ecx,edi
c0011e0b:	09 d1                	or     ecx,edx
c0011e0d:	75 2f                	jne    c0011e3e <LogicalDisk::assignDriveLetter()+0xa6>
c0011e0f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011e13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e17:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011e1d:	09 f2                	or     edx,esi
c0011e1f:	89 15 20 3c 02 c0    	mov    DWORD PTR ds:0xc0023c20,edx
c0011e25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e29:	09 fa                	or     edx,edi
c0011e2b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011e2f:	89 15 24 3c 02 c0    	mov    DWORD PTR ds:0xc0023c24,edx
c0011e35:	89 1c bd 40 3c 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc3c0],ebx
c0011e3c:	eb 08                	jmp    c0011e46 <LogicalDisk::assignDriveLetter()+0xae>
c0011e3e:	45                   	inc    ebp
c0011e3f:	40                   	inc    eax
c0011e40:	3c 5b                	cmp    al,0x5b
c0011e42:	75 90                	jne    c0011dd4 <LogicalDisk::assignDriveLetter()+0x3c>
c0011e44:	31 c0                	xor    eax,eax
c0011e46:	83 c4 14             	add    esp,0x14
c0011e49:	5b                   	pop    ebx
c0011e4a:	5e                   	pop    esi
c0011e4b:	5f                   	pop    edi
c0011e4c:	5d                   	pop    ebp
c0011e4d:	c3                   	ret    

c0011e4e <LogicalDisk::mount()>:
c0011e4e:	56                   	push   esi
c0011e4f:	53                   	push   ebx
c0011e50:	51                   	push   ecx
c0011e51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011e55:	8b 1d a8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a8
c0011e5b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011e65:	85 db                	test   ebx,ebx
c0011e67:	74 50                	je     c0011eb9 <LogicalDisk::mount()+0x6b>
c0011e69:	e8 d3 5c 00 00       	call   c0017b41 <getIRQNestingLevel()>
c0011e6e:	52                   	push   edx
c0011e6f:	52                   	push   edx
c0011e70:	50                   	push   eax
c0011e71:	68 a0 11 02 c0       	push   0xc00211a0
c0011e76:	e8 28 d1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0011e7b:	83 c4 0c             	add    esp,0xc
c0011e7e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011e85:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011e87:	83 e8 41             	sub    eax,0x41
c0011e8a:	50                   	push   eax
c0011e8b:	56                   	push   esi
c0011e8c:	53                   	push   ebx
c0011e8d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	84 c0                	test   al,al
c0011e95:	74 08                	je     c0011e9f <LogicalDisk::mount()+0x51>
c0011e97:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011e9d:	eb 1c                	jmp    c0011ebb <LogicalDisk::mount()+0x6d>
c0011e9f:	e8 9d 5c 00 00       	call   c0017b41 <getIRQNestingLevel()>
c0011ea4:	51                   	push   ecx
c0011ea5:	51                   	push   ecx
c0011ea6:	50                   	push   eax
c0011ea7:	68 bb 11 02 c0       	push   0xc00211bb
c0011eac:	e8 f2 d0 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0011eb1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011eb4:	83 c4 10             	add    esp,0x10
c0011eb7:	eb ac                	jmp    c0011e65 <LogicalDisk::mount()+0x17>
c0011eb9:	31 c0                	xor    eax,eax
c0011ebb:	5a                   	pop    edx
c0011ebc:	5b                   	pop    ebx
c0011ebd:	5e                   	pop    esi
c0011ebe:	c3                   	ret    
c0011ebf:	90                   	nop

c0011ec0 <LogicalDisk::unmount()>:
c0011ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ec4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011ece:	c3                   	ret    
c0011ecf:	90                   	nop

c0011ed0 <LogicalDisk::unassignDriveLetter()>:
c0011ed0:	57                   	push   edi
c0011ed1:	56                   	push   esi
c0011ed2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ed6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011edd:	84 c9                	test   cl,cl
c0011edf:	75 0f                	jne    c0011ef0 <LogicalDisk::unassignDriveLetter()+0x20>
c0011ee1:	c7 44 24 0c d6 11 02 c0 	mov    DWORD PTR [esp+0xc],0xc00211d6
c0011ee9:	5e                   	pop    esi
c0011eea:	5f                   	pop    edi
c0011eeb:	e9 48 2d 00 00       	jmp    c0014c38 <Krnl::panic(char const*)>
c0011ef0:	83 e9 41             	sub    ecx,0x41
c0011ef3:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011efa:	b8 01 00 00 00       	mov    eax,0x1
c0011eff:	c7 04 8d 40 3c 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc3c0],0x0
c0011f0a:	d3 e0                	shl    eax,cl
c0011f0c:	89 c7                	mov    edi,eax
c0011f0e:	f7 d0                	not    eax
c0011f10:	c1 ff 1f             	sar    edi,0x1f
c0011f13:	21 05 20 3c 02 c0    	and    DWORD PTR ds:0xc0023c20,eax
c0011f19:	89 fe                	mov    esi,edi
c0011f1b:	f7 d6                	not    esi
c0011f1d:	21 35 24 3c 02 c0    	and    DWORD PTR ds:0xc0023c24,esi
c0011f23:	5e                   	pop    esi
c0011f24:	5f                   	pop    edi
c0011f25:	c3                   	ret    

c0011f26 <LogicalDisk::read(unsigned long long, int, void*)>:
c0011f26:	57                   	push   edi
c0011f27:	56                   	push   esi
c0011f28:	53                   	push   ebx
c0011f29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011f2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011f31:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f39:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011f3f:	77 41                	ja     c0011f82 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011f41:	99                   	cdq    
c0011f42:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011f48:	01 c8                	add    eax,ecx
c0011f4a:	11 da                	adc    edx,ebx
c0011f4c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011f52:	19 d7                	sbb    edi,edx
c0011f54:	72 33                	jb     c0011f89 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011f56:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011f5c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011f62:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011f66:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011f6a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011f70:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011f76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011f7a:	5b                   	pop    ebx
c0011f7b:	5e                   	pop    esi
c0011f7c:	5f                   	pop    edi
c0011f7d:	e9 9a 09 00 00       	jmp    c001291c <VCache::read(unsigned long long, int, void*)>
c0011f82:	b8 05 00 00 00       	mov    eax,0x5
c0011f87:	eb 05                	jmp    c0011f8e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0011f89:	b8 07 00 00 00       	mov    eax,0x7
c0011f8e:	5b                   	pop    ebx
c0011f8f:	5e                   	pop    esi
c0011f90:	5f                   	pop    edi
c0011f91:	c3                   	ret    

c0011f92 <LogicalDisk::write(unsigned long long, int, void*)>:
c0011f92:	57                   	push   edi
c0011f93:	56                   	push   esi
c0011f94:	53                   	push   ebx
c0011f95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011f99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011f9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fa5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011fab:	77 41                	ja     c0011fee <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0011fad:	99                   	cdq    
c0011fae:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011fb4:	01 c8                	add    eax,ecx
c0011fb6:	11 da                	adc    edx,ebx
c0011fb8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011fbe:	19 d7                	sbb    edi,edx
c0011fc0:	72 33                	jb     c0011ff5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0011fc2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011fc8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011fce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011fd2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011fd6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011fdc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011fe6:	5b                   	pop    ebx
c0011fe7:	5e                   	pop    esi
c0011fe8:	5f                   	pop    edi
c0011fe9:	e9 4a 08 00 00       	jmp    c0012838 <VCache::write(unsigned long long, int, void*)>
c0011fee:	b8 05 00 00 00       	mov    eax,0x5
c0011ff3:	eb 05                	jmp    c0011ffa <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0011ff5:	b8 07 00 00 00       	mov    eax,0x7
c0011ffa:	5b                   	pop    ebx
c0011ffb:	5e                   	pop    esi
c0011ffc:	5f                   	pop    edi
c0011ffd:	c3                   	ret    

c0011ffe <Mouse::Mouse(char const*)>:
c0011ffe:	83 ec 0c             	sub    esp,0xc
c0012001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012005:	83 ec 08             	sub    esp,0x8
c0012008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001200c:	50                   	push   eax
c001200d:	e8 8c e5 ff ff       	call   c001059e <Device::Device(char const*)>
c0012012:	83 c4 10             	add    esp,0x10
c0012015:	ba 2c 12 02 c0       	mov    edx,0xc002122c
c001201a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001201e:	89 10                	mov    DWORD PTR [eax],edx
c0012020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012024:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001202e:	90                   	nop
c001202f:	83 c4 0c             	add    esp,0xc
c0012032:	c3                   	ret    
c0012033:	90                   	nop

c0012034 <Mouse::~Mouse()>:
c0012034:	83 ec 0c             	sub    esp,0xc
c0012037:	ba 2c 12 02 c0       	mov    edx,0xc002122c
c001203c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012040:	89 10                	mov    DWORD PTR [eax],edx
c0012042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012046:	83 ec 0c             	sub    esp,0xc
c0012049:	50                   	push   eax
c001204a:	e8 01 e2 ff ff       	call   c0010250 <Device::~Device()>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	90                   	nop
c0012053:	83 c4 0c             	add    esp,0xc
c0012056:	c3                   	ret    
c0012057:	90                   	nop

c0012058 <Mouse::~Mouse()>:
c0012058:	83 ec 0c             	sub    esp,0xc
c001205b:	83 ec 0c             	sub    esp,0xc
c001205e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012062:	e8 cd ff ff ff       	call   c0012034 <Mouse::~Mouse()>
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	83 ec 08             	sub    esp,0x8
c001206d:	68 58 01 00 00       	push   0x158
c0012072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012076:	e8 48 ce ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001207b:	83 c4 10             	add    esp,0x10
c001207e:	83 c4 0c             	add    esp,0xc
c0012081:	c3                   	ret    

c0012082 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012082:	55                   	push   ebp
c0012083:	57                   	push   edi
c0012084:	56                   	push   esi
c0012085:	53                   	push   ebx
c0012086:	81 ec 28 01 00 00    	sub    esp,0x128
c001208c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012093:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001209a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00120a1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00120a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120ac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00120b0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00120b7:	e8 d4 e5 ff ff       	call   c0010690 <Device::getName()>
c00120bc:	5a                   	pop    edx
c00120bd:	59                   	pop    ecx
c00120be:	50                   	push   eax
c00120bf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00120c3:	55                   	push   ebp
c00120c4:	e8 de e5 fe ff       	call   c00006a7 <strcpy>
c00120c9:	5b                   	pop    ebx
c00120ca:	58                   	pop    eax
c00120cb:	68 50 12 02 c0       	push   0xc0021250
c00120d0:	55                   	push   ebp
c00120d1:	e8 88 e6 fe ff       	call   c000075e <strcat>
c00120d6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00120dd:	e8 d2 cd ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00120e2:	83 c4 0c             	add    esp,0xc
c00120e5:	89 c3                	mov    ebx,eax
c00120e7:	57                   	push   edi
c00120e8:	56                   	push   esi
c00120e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120f1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00120f8:	55                   	push   ebp
c00120f9:	50                   	push   eax
c00120fa:	e8 e3 fb ff ff       	call   c0011ce2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00120ff:	83 c4 14             	add    esp,0x14
c0012102:	53                   	push   ebx
c0012103:	e8 90 fc ff ff       	call   c0011d98 <LogicalDisk::assignDriveLetter()>
c0012108:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001210b:	e8 3e fd ff ff       	call   c0011e4e <LogicalDisk::mount()>
c0012110:	58                   	pop    eax
c0012111:	5a                   	pop    edx
c0012112:	53                   	push   ebx
c0012113:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001211a:	e8 8f e2 ff ff       	call   c00103ae <Device::addChild(Device*)>
c001211f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012125:	5b                   	pop    ebx
c0012126:	5e                   	pop    esi
c0012127:	5f                   	pop    edi
c0012128:	5d                   	pop    ebp
c0012129:	c3                   	ret    

c001212a <createPartitionsForDisk(PhysicalDisk*)>:
c001212a:	55                   	push   ebp
c001212b:	57                   	push   edi
c001212c:	56                   	push   esi
c001212d:	53                   	push   ebx
c001212e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012134:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001213b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012141:	3d 00 02 00 00       	cmp    eax,0x200
c0012146:	74 27                	je     c001216f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012148:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001214e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012154:	83 ec 10             	sub    esp,0x10
c0012157:	0f a4 f7 0a          	shld   edi,esi,0xa
c001215b:	99                   	cdq    
c001215c:	c1 e6 0a             	shl    esi,0xa
c001215f:	52                   	push   edx
c0012160:	89 fd                	mov    ebp,edi
c0012162:	50                   	push   eax
c0012163:	55                   	push   ebp
c0012164:	56                   	push   esi
c0012165:	e8 82 c5 00 00       	call   c001e6ec <__udivdi3>
c001216a:	e9 b1 00 00 00       	jmp    c0012220 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001216f:	83 ec 0c             	sub    esp,0xc
c0012172:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012174:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012178:	56                   	push   esi
c0012179:	6a 01                	push   0x1
c001217b:	6a 00                	push   0x0
c001217d:	6a 00                	push   0x0
c001217f:	53                   	push   ebx
c0012180:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012183:	83 c4 20             	add    esp,0x20
c0012186:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001218e:	75 0a                	jne    c001219a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012190:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012198:	74 2c                	je     c00121c6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001219a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00121a0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00121a6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00121ac:	83 ec 10             	sub    esp,0x10
c00121af:	0f a4 c2 0a          	shld   edx,eax,0xa
c00121b3:	89 f7                	mov    edi,esi
c00121b5:	c1 e0 0a             	shl    eax,0xa
c00121b8:	c1 ff 1f             	sar    edi,0x1f
c00121bb:	57                   	push   edi
c00121bc:	56                   	push   esi
c00121bd:	52                   	push   edx
c00121be:	50                   	push   eax
c00121bf:	e8 28 c5 00 00       	call   c001e6ec <__udivdi3>
c00121c4:	eb 5a                	jmp    c0012220 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00121c6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00121cd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00121d4:	83 e1 7f             	and    ecx,0x7f
c00121d7:	83 e0 7f             	and    eax,0x7f
c00121da:	01 c1                	add    ecx,eax
c00121dc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00121e3:	83 e0 7f             	and    eax,0x7f
c00121e6:	01 c1                	add    ecx,eax
c00121e8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00121ef:	83 e0 7f             	and    eax,0x7f
c00121f2:	00 c1                	add    cl,al
c00121f4:	74 41                	je     c0012237 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00121f6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00121fc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012202:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012208:	83 ec 10             	sub    esp,0x10
c001220b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001220f:	89 f7                	mov    edi,esi
c0012211:	c1 e0 0a             	shl    eax,0xa
c0012214:	c1 ff 1f             	sar    edi,0x1f
c0012217:	57                   	push   edi
c0012218:	56                   	push   esi
c0012219:	52                   	push   edx
c001221a:	50                   	push   eax
c001221b:	e8 cc c4 00 00       	call   c001e6ec <__udivdi3>
c0012220:	83 c4 14             	add    esp,0x14
c0012223:	52                   	push   edx
c0012224:	50                   	push   eax
c0012225:	6a 00                	push   0x0
c0012227:	6a 00                	push   0x0
c0012229:	53                   	push   ebx
c001222a:	e8 53 fe ff ff       	call   c0012082 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001222f:	83 c4 20             	add    esp,0x20
c0012232:	e9 79 01 00 00       	jmp    c00123b0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012237:	89 f0                	mov    eax,esi
c0012239:	31 f6                	xor    esi,esi
c001223b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012242:	75 02                	jne    c0012246 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012244:	89 f1                	mov    ecx,esi
c0012246:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001224d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012254:	c1 e2 08             	shl    edx,0x8
c0012257:	c1 e7 10             	shl    edi,0x10
c001225a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012262:	09 fa                	or     edx,edi
c0012264:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001226c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0012273:	83 c0 10             	add    eax,0x10
c0012276:	09 fa                	or     edx,edi
c0012278:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001227f:	c1 e7 18             	shl    edi,0x18
c0012282:	09 fa                	or     edx,edi
c0012284:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001228b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001228f:	c1 e7 10             	shl    edi,0x10
c0012292:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012299:	c1 e2 08             	shl    edx,0x8
c001229c:	09 fa                	or     edx,edi
c001229e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00122a5:	09 fa                	or     edx,edi
c00122a7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00122ae:	c1 e7 18             	shl    edi,0x18
c00122b1:	09 fa                	or     edx,edi
c00122b3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00122b7:	46                   	inc    esi
c00122b8:	83 fe 04             	cmp    esi,0x4
c00122bb:	0f 85 7a ff ff ff    	jne    c001223b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00122c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c5:	83 f0 01             	xor    eax,0x1
c00122c8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00122cc:	75 57                	jne    c0012325 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00122ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122d2:	83 f0 01             	xor    eax,0x1
c00122d5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122d9:	75 4a                	jne    c0012325 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00122db:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00122df:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00122e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00122ef:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00122f5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00122fb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012301:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012305:	89 f7                	mov    edi,esi
c0012307:	c1 e0 0a             	shl    eax,0xa
c001230a:	c1 ff 1f             	sar    edi,0x1f
c001230d:	57                   	push   edi
c001230e:	56                   	push   esi
c001230f:	52                   	push   edx
c0012310:	50                   	push   eax
c0012311:	e8 d6 c3 00 00       	call   c001e6ec <__udivdi3>
c0012316:	83 c4 10             	add    esp,0x10
c0012319:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001231d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012321:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012325:	84 c9                	test   cl,cl
c0012327:	74 53                	je     c001237c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012329:	0f b6 c9             	movzx  ecx,cl
c001232c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012330:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012334:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012338:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001233c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012340:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012344:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012348:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001234c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012350:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012354:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012358:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001235c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012360:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012364:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012368:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001236c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012370:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012374:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012378:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001237c:	31 ed                	xor    ebp,ebp
c001237e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012382:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012386:	89 f8                	mov    eax,edi
c0012388:	09 f0                	or     eax,esi
c001238a:	74 1e                	je     c00123aa <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001238c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012390:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012394:	89 d1                	mov    ecx,edx
c0012396:	09 c1                	or     ecx,eax
c0012398:	74 10                	je     c00123aa <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001239a:	83 ec 0c             	sub    esp,0xc
c001239d:	57                   	push   edi
c001239e:	56                   	push   esi
c001239f:	52                   	push   edx
c00123a0:	50                   	push   eax
c00123a1:	53                   	push   ebx
c00123a2:	e8 db fc ff ff       	call   c0012082 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00123a7:	83 c4 20             	add    esp,0x20
c00123aa:	45                   	inc    ebp
c00123ab:	83 fd 04             	cmp    ebp,0x4
c00123ae:	75 ce                	jne    c001237e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00123b0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00123b6:	5b                   	pop    ebx
c00123b7:	5e                   	pop    esi
c00123b8:	5f                   	pop    edi
c00123b9:	5d                   	pop    ebp
c00123ba:	c3                   	ret    
c00123bb:	90                   	nop

c00123bc <Timer::Timer(char const*)>:
c00123bc:	83 ec 0c             	sub    esp,0xc
c00123bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c3:	83 ec 08             	sub    esp,0x8
c00123c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123ca:	50                   	push   eax
c00123cb:	e8 ce e1 ff ff       	call   c001059e <Device::Device(char const*)>
c00123d0:	83 c4 10             	add    esp,0x10
c00123d3:	ba 64 12 02 c0       	mov    edx,0xc0021264
c00123d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123dc:	89 10                	mov    DWORD PTR [eax],edx
c00123de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123e2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00123ec:	90                   	nop
c00123ed:	83 c4 0c             	add    esp,0xc
c00123f0:	c3                   	ret    
c00123f1:	90                   	nop

c00123f2 <Timer::~Timer()>:
c00123f2:	83 ec 0c             	sub    esp,0xc
c00123f5:	ba 64 12 02 c0       	mov    edx,0xc0021264
c00123fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123fe:	89 10                	mov    DWORD PTR [eax],edx
c0012400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012404:	83 ec 0c             	sub    esp,0xc
c0012407:	50                   	push   eax
c0012408:	e8 43 de ff ff       	call   c0010250 <Device::~Device()>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	90                   	nop
c0012411:	83 c4 0c             	add    esp,0xc
c0012414:	c3                   	ret    
c0012415:	90                   	nop

c0012416 <Timer::~Timer()>:
c0012416:	83 ec 0c             	sub    esp,0xc
c0012419:	83 ec 0c             	sub    esp,0xc
c001241c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012420:	e8 cd ff ff ff       	call   c00123f2 <Timer::~Timer()>
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	83 ec 08             	sub    esp,0x8
c001242b:	68 5c 01 00 00       	push   0x15c
c0012430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012434:	e8 8a ca ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c0012439:	83 c4 10             	add    esp,0x10
c001243c:	83 c4 0c             	add    esp,0xc
c001243f:	c3                   	ret    

c0012440 <Timer::read()>:
c0012440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012444:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001244a:	c3                   	ret    

c001244b <timerHandler(unsigned long long)>:
c001244b:	55                   	push   ebp
c001244c:	57                   	push   edi
c001244d:	56                   	push   esi
c001244e:	53                   	push   ebx
c001244f:	83 ec 0c             	sub    esp,0xc
c0012452:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012456:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001245a:	01 35 b0 3c 02 c0    	add    DWORD PTR ds:0xc0023cb0,esi
c0012460:	11 3d b4 3c 02 c0    	adc    DWORD PTR ds:0xc0023cb4,edi
c0012466:	80 3d 4d 36 02 c0 00 	cmp    BYTE PTR ds:0xc002364d,0x0
c001246d:	0f 84 07 01 00 00    	je     c001257a <timerHandler(unsigned long long)+0x12f>
c0012473:	e8 05 57 00 00       	call   c0017b7d <lockStuff()>
c0012478:	83 ec 0c             	sub    esp,0xc
c001247b:	68 7c 4a 02 c0       	push   0xc0024a7c
c0012480:	e8 3b c9 00 00       	call   c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012485:	c7 04 24 7c 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a7c
c001248c:	89 c3                	mov    ebx,eax
c001248e:	e8 35 c9 00 00       	call   c001edc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012493:	83 c4 10             	add    esp,0x10
c0012496:	84 c0                	test   al,al
c0012498:	74 60                	je     c00124fa <timerHandler(unsigned long long)+0xaf>
c001249a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00124a0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00124a3:	85 c0                	test   eax,eax
c00124a5:	0f 85 91 00 00 00    	jne    c001253c <timerHandler(unsigned long long)+0xf1>
c00124ab:	e9 be 00 00 00       	jmp    c001256e <timerHandler(unsigned long long)+0x123>
c00124b0:	83 ec 0c             	sub    esp,0xc
c00124b3:	55                   	push   ebp
c00124b4:	e8 ad 5e 00 00       	call   c0018366 <unblockTask(ThreadControlBlock*)>
c00124b9:	83 c4 10             	add    esp,0x10
c00124bc:	39 eb                	cmp    ebx,ebp
c00124be:	75 12                	jne    c00124d2 <timerHandler(unsigned long long)+0x87>
c00124c0:	83 ec 0c             	sub    esp,0xc
c00124c3:	68 7c 4a 02 c0       	push   0xc0024a7c
c00124c8:	e8 f3 c8 00 00       	call   c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00124cd:	89 c3                	mov    ebx,eax
c00124cf:	83 c4 10             	add    esp,0x10
c00124d2:	83 ec 0c             	sub    esp,0xc
c00124d5:	68 7c 4a 02 c0       	push   0xc0024a7c
c00124da:	e8 e9 c8 00 00       	call   c001edc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00124df:	83 c4 10             	add    esp,0x10
c00124e2:	84 c0                	test   al,al
c00124e4:	75 b4                	jne    c001249a <timerHandler(unsigned long long)+0x4f>
c00124e6:	83 ec 0c             	sub    esp,0xc
c00124e9:	68 7c 4a 02 c0       	push   0xc0024a7c
c00124ee:	e8 cd c8 00 00       	call   c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00124f3:	83 c4 10             	add    esp,0x10
c00124f6:	39 d8                	cmp    eax,ebx
c00124f8:	74 a0                	je     c001249a <timerHandler(unsigned long long)+0x4f>
c00124fa:	83 ec 0c             	sub    esp,0xc
c00124fd:	68 7c 4a 02 c0       	push   0xc0024a7c
c0012502:	e8 b9 c8 00 00       	call   c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012507:	c7 04 24 7c 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a7c
c001250e:	89 c5                	mov    ebp,eax
c0012510:	e8 cf c8 00 00       	call   c001ede4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012515:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012518:	83 c4 10             	add    esp,0x10
c001251b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001251e:	39 15 b0 3c 02 c0    	cmp    DWORD PTR ds:0xc0023cb0,edx
c0012524:	a1 b4 3c 02 c0       	mov    eax,ds:0xc0023cb4
c0012529:	19 c8                	sbb    eax,ecx
c001252b:	73 83                	jae    c00124b0 <timerHandler(unsigned long long)+0x65>
c001252d:	50                   	push   eax
c001252e:	50                   	push   eax
c001252f:	55                   	push   ebp
c0012530:	68 7c 4a 02 c0       	push   0xc0024a7c
c0012535:	e8 58 c9 00 00       	call   c001ee92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001253a:	eb 93                	jmp    c00124cf <timerHandler(unsigned long long)+0x84>
c001253c:	80 3d 4c 36 02 c0 00 	cmp    BYTE PTR ds:0xc002364c,0x0
c0012543:	74 29                	je     c001256e <timerHandler(unsigned long long)+0x123>
c0012545:	39 c6                	cmp    esi,eax
c0012547:	bb 00 00 00 00       	mov    ebx,0x0
c001254c:	19 df                	sbb    edi,ebx
c001254e:	72 19                	jb     c0012569 <timerHandler(unsigned long long)+0x11e>
c0012550:	e8 01 56 00 00       	call   c0017b56 <lockScheduler()>
c0012555:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001255a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001255d:	e8 28 59 00 00       	call   c0017e8a <schedule()>
c0012562:	e8 f1 55 00 00       	call   c0017b58 <unlockScheduler()>
c0012567:	eb 05                	jmp    c001256e <timerHandler(unsigned long long)+0x123>
c0012569:	29 f0                	sub    eax,esi
c001256b:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001256e:	83 c4 0c             	add    esp,0xc
c0012571:	5b                   	pop    ebx
c0012572:	5e                   	pop    esi
c0012573:	5f                   	pop    edi
c0012574:	5d                   	pop    ebp
c0012575:	e9 95 59 00 00       	jmp    c0017f0f <unlockStuff()>
c001257a:	83 c4 0c             	add    esp,0xc
c001257d:	5b                   	pop    ebx
c001257e:	5e                   	pop    esi
c001257f:	5f                   	pop    edi
c0012580:	5d                   	pop    ebp
c0012581:	c3                   	ret    

c0012582 <setupTimer(int)>:
c0012582:	57                   	push   edi
c0012583:	56                   	push   esi
c0012584:	53                   	push   ebx
c0012585:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012589:	e8 a1 19 00 00       	call   c0013f2f <getCPUNumber()>
c001258e:	85 c0                	test   eax,eax
c0012590:	74 32                	je     c00125c4 <setupTimer(int)+0x42>
c0012592:	83 ec 0c             	sub    esp,0xc
c0012595:	68 60 01 00 00       	push   0x160
c001259a:	e8 15 c9 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001259f:	89 04 24             	mov    DWORD PTR [esp],eax
c00125a2:	89 c3                	mov    ebx,eax
c00125a4:	e8 e3 bb 00 00       	call   c001e18c <APICTimer::APICTimer()>
c00125a9:	6a 00                	push   0x0
c00125ab:	6a 00                	push   0x0
c00125ad:	56                   	push   esi
c00125ae:	53                   	push   ebx
c00125af:	e8 e0 ba 00 00       	call   c001e094 <APICTimer::open(int, int, void*)>
c00125b4:	83 c4 20             	add    esp,0x20
c00125b7:	e8 76 19 00 00       	call   c0013f32 <thisCPU()>
c00125bc:	56                   	push   esi
c00125bd:	56                   	push   esi
c00125be:	53                   	push   ebx
c00125bf:	e9 96 00 00 00       	jmp    c001265a <setupTimer(int)+0xd8>
c00125c4:	e8 69 19 00 00       	call   c0013f32 <thisCPU()>
c00125c9:	83 ec 0c             	sub    esp,0xc
c00125cc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00125d2:	e8 b9 e0 ff ff       	call   c0010690 <Device::getName()>
c00125d7:	83 c4 10             	add    esp,0x10
c00125da:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00125dd:	0f 85 87 00 00 00    	jne    c001266a <setupTimer(int)+0xe8>
c00125e3:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c00125e8:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00125ef:	74 79                	je     c001266a <setupTimer(int)+0xe8>
c00125f1:	83 ec 0c             	sub    esp,0xc
c00125f4:	68 5c 01 00 00       	push   0x15c
c00125f9:	e8 b6 c8 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00125fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0012601:	89 c3                	mov    ebx,eax
c0012603:	e8 d4 bc 00 00       	call   c001e2dc <PIT::PIT()>
c0012608:	59                   	pop    ecx
c0012609:	5f                   	pop    edi
c001260a:	53                   	push   ebx
c001260b:	ff 35 48 36 02 c0    	push   DWORD PTR ds:0xc0023648
c0012611:	e8 98 dd ff ff       	call   c00103ae <Device::addChild(Device*)>
c0012616:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012618:	6a 00                	push   0x0
c001261a:	6a 00                	push   0x0
c001261c:	56                   	push   esi
c001261d:	53                   	push   ebx
c001261e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012621:	83 c4 14             	add    esp,0x14
c0012624:	68 60 01 00 00       	push   0x160
c0012629:	e8 86 c8 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001262e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012631:	89 c7                	mov    edi,eax
c0012633:	e8 54 bb 00 00       	call   c001e18c <APICTimer::APICTimer()>
c0012638:	6a 00                	push   0x0
c001263a:	6a 00                	push   0x0
c001263c:	56                   	push   esi
c001263d:	57                   	push   edi
c001263e:	e8 51 ba 00 00       	call   c001e094 <APICTimer::open(int, int, void*)>
c0012643:	83 c4 20             	add    esp,0x20
c0012646:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012648:	6a 00                	push   0x0
c001264a:	6a 00                	push   0x0
c001264c:	6a 00                	push   0x0
c001264e:	53                   	push   ebx
c001264f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012652:	e8 db 18 00 00       	call   c0013f32 <thisCPU()>
c0012657:	5a                   	pop    edx
c0012658:	59                   	pop    ecx
c0012659:	57                   	push   edi
c001265a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012660:	e8 49 dd ff ff       	call   c00103ae <Device::addChild(Device*)>
c0012665:	83 c4 10             	add    esp,0x10
c0012668:	eb 33                	jmp    c001269d <setupTimer(int)+0x11b>
c001266a:	83 ec 0c             	sub    esp,0xc
c001266d:	68 5c 01 00 00       	push   0x15c
c0012672:	e8 3d c8 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0012677:	89 04 24             	mov    DWORD PTR [esp],eax
c001267a:	89 c3                	mov    ebx,eax
c001267c:	e8 5b bc 00 00       	call   c001e2dc <PIT::PIT()>
c0012681:	58                   	pop    eax
c0012682:	5a                   	pop    edx
c0012683:	53                   	push   ebx
c0012684:	ff 35 48 36 02 c0    	push   DWORD PTR ds:0xc0023648
c001268a:	e8 1f dd ff ff       	call   c00103ae <Device::addChild(Device*)>
c001268f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012691:	6a 00                	push   0x0
c0012693:	6a 00                	push   0x0
c0012695:	56                   	push   esi
c0012696:	53                   	push   ebx
c0012697:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001269a:	83 c4 20             	add    esp,0x20
c001269d:	89 d8                	mov    eax,ebx
c001269f:	5b                   	pop    ebx
c00126a0:	5e                   	pop    esi
c00126a1:	5f                   	pop    edi
c00126a2:	c3                   	ret    
c00126a3:	90                   	nop

c00126a4 <VCache::VCache(PhysicalDisk*)>:
c00126a4:	53                   	push   ebx
c00126a5:	83 ec 08             	sub    esp,0x8
c00126a8:	ba 94 12 02 c0       	mov    edx,0xc0021294
c00126ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126b1:	89 10                	mov    DWORD PTR [eax],edx
c00126b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126b7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00126be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126c2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00126c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126cd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00126d4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00126db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126df:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00126e6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00126ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126f1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00126f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126fc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012700:	83 ec 0c             	sub    esp,0xc
c0012703:	6a 10                	push   0x10
c0012705:	e8 aa c7 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001270a:	83 c4 10             	add    esp,0x10
c001270d:	89 c3                	mov    ebx,eax
c001270f:	83 ec 0c             	sub    esp,0xc
c0012712:	53                   	push   ebx
c0012713:	e8 56 55 00 00       	call   c0017c6e <Mutex::Mutex()>
c0012718:	83 c4 10             	add    esp,0x10
c001271b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001271f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012726:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001272a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001272d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012731:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012738:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001273c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012746:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012749:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001274d:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012753:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012759:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001275d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012760:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012767:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001276b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001276f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012775:	c1 e0 06             	shl    eax,0x6
c0012778:	83 ec 0c             	sub    esp,0xc
c001277b:	50                   	push   eax
c001277c:	e8 9d 94 ff ff       	call   c000bc1e <malloc>
c0012781:	83 c4 10             	add    esp,0x10
c0012784:	89 c2                	mov    edx,eax
c0012786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001278a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001278d:	90                   	nop
c001278e:	83 c4 08             	add    esp,0x8
c0012791:	5b                   	pop    ebx
c0012792:	c3                   	ret    
c0012793:	90                   	nop

c0012794 <VCache::writeWriteBuffer()>:
c0012794:	53                   	push   ebx
c0012795:	83 ec 14             	sub    esp,0x14
c0012798:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001279c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001279f:	8b 10                	mov    edx,DWORD PTR [eax]
c00127a1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00127a4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00127a7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00127aa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00127ad:	50                   	push   eax
c00127ae:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00127b1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00127b8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00127bf:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00127c3:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00127ca:	83 c4 28             	add    esp,0x28
c00127cd:	5b                   	pop    ebx
c00127ce:	c3                   	ret    
c00127cf:	90                   	nop

c00127d0 <VCache::~VCache()>:
c00127d0:	83 ec 0c             	sub    esp,0xc
c00127d3:	ba 94 12 02 c0       	mov    edx,0xc0021294
c00127d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127dc:	89 10                	mov    DWORD PTR [eax],edx
c00127de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00127e5:	84 c0                	test   al,al
c00127e7:	74 0f                	je     c00127f8 <VCache::~VCache()+0x28>
c00127e9:	83 ec 0c             	sub    esp,0xc
c00127ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127f0:	e8 9f ff ff ff       	call   c0012794 <VCache::writeWriteBuffer()>
c00127f5:	83 c4 10             	add    esp,0x10
c00127f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127fc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00127ff:	83 ec 0c             	sub    esp,0xc
c0012802:	50                   	push   eax
c0012803:	e8 26 94 ff ff       	call   c000bc2e <free>
c0012808:	83 c4 10             	add    esp,0x10
c001280b:	90                   	nop
c001280c:	83 c4 0c             	add    esp,0xc
c001280f:	c3                   	ret    

c0012810 <VCache::~VCache()>:
c0012810:	83 ec 0c             	sub    esp,0xc
c0012813:	83 ec 0c             	sub    esp,0xc
c0012816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001281a:	e8 b1 ff ff ff       	call   c00127d0 <VCache::~VCache()>
c001281f:	83 c4 10             	add    esp,0x10
c0012822:	83 ec 08             	sub    esp,0x8
c0012825:	6a 30                	push   0x30
c0012827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001282b:	e8 93 c6 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c0012830:	83 c4 10             	add    esp,0x10
c0012833:	83 c4 0c             	add    esp,0xc
c0012836:	c3                   	ret    
c0012837:	90                   	nop

c0012838 <VCache::write(unsigned long long, int, void*)>:
c0012838:	55                   	push   ebp
c0012839:	57                   	push   edi
c001283a:	56                   	push   esi
c001283b:	53                   	push   ebx
c001283c:	83 ec 28             	sub    esp,0x28
c001283f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012843:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012847:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001284b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001284f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012852:	e8 eb 59 00 00       	call   c0018242 <Semaphore::acquire()>
c0012857:	83 c4 10             	add    esp,0x10
c001285a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001285e:	74 66                	je     c00128c6 <VCache::write(unsigned long long, int, void*)+0x8e>
c0012860:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012863:	99                   	cdq    
c0012864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012868:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001286b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001286e:	89 c1                	mov    ecx,eax
c0012870:	89 d0                	mov    eax,edx
c0012872:	31 f1                	xor    ecx,esi
c0012874:	31 f8                	xor    eax,edi
c0012876:	89 ca                	mov    edx,ecx
c0012878:	09 c2                	or     edx,eax
c001287a:	75 3e                	jne    c00128ba <VCache::write(unsigned long long, int, void*)+0x82>
c001287c:	83 fd 01             	cmp    ebp,0x1
c001287f:	75 39                	jne    c00128ba <VCache::write(unsigned long long, int, void*)+0x82>
c0012881:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012884:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001288a:	51                   	push   ecx
c001288b:	50                   	push   eax
c001288c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012890:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012894:	0f af c8             	imul   ecx,eax
c0012897:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001289a:	51                   	push   ecx
c001289b:	e8 32 dd fe ff       	call   c00005d2 <memcpy>
c00128a0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128a3:	83 c4 10             	add    esp,0x10
c00128a6:	40                   	inc    eax
c00128a7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00128aa:	83 f8 40             	cmp    eax,0x40
c00128ad:	75 57                	jne    c0012906 <VCache::write(unsigned long long, int, void*)+0xce>
c00128af:	83 ec 0c             	sub    esp,0xc
c00128b2:	53                   	push   ebx
c00128b3:	e8 dc fe ff ff       	call   c0012794 <VCache::writeWriteBuffer()>
c00128b8:	eb 34                	jmp    c00128ee <VCache::write(unsigned long long, int, void*)+0xb6>
c00128ba:	83 ec 0c             	sub    esp,0xc
c00128bd:	53                   	push   ebx
c00128be:	e8 d1 fe ff ff       	call   c0012794 <VCache::writeWriteBuffer()>
c00128c3:	83 c4 10             	add    esp,0x10
c00128c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00128c9:	83 fd 3f             	cmp    ebp,0x3f
c00128cc:	7f 25                	jg     c00128f3 <VCache::write(unsigned long long, int, void*)+0xbb>
c00128ce:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00128d1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00128d4:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00128d7:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00128db:	52                   	push   edx
c00128dc:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00128e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00128e6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00128e9:	e8 e4 dc fe ff       	call   c00005d2 <memcpy>
c00128ee:	83 c4 10             	add    esp,0x10
c00128f1:	eb 13                	jmp    c0012906 <VCache::write(unsigned long long, int, void*)+0xce>
c00128f3:	83 ec 0c             	sub    esp,0xc
c00128f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00128f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128fc:	55                   	push   ebp
c00128fd:	57                   	push   edi
c00128fe:	56                   	push   esi
c00128ff:	50                   	push   eax
c0012900:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012903:	83 c4 20             	add    esp,0x20
c0012906:	83 ec 0c             	sub    esp,0xc
c0012909:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001290c:	e8 3b 5f 00 00       	call   c001884c <Semaphore::release()>
c0012911:	83 c4 2c             	add    esp,0x2c
c0012914:	31 c0                	xor    eax,eax
c0012916:	5b                   	pop    ebx
c0012917:	5e                   	pop    esi
c0012918:	5f                   	pop    edi
c0012919:	5d                   	pop    ebp
c001291a:	c3                   	ret    
c001291b:	90                   	nop

c001291c <VCache::read(unsigned long long, int, void*)>:
c001291c:	57                   	push   edi
c001291d:	56                   	push   esi
c001291e:	53                   	push   ebx
c001291f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012923:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001292b:	83 ec 0c             	sub    esp,0xc
c001292e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012931:	e8 0c 59 00 00       	call   c0018242 <Semaphore::acquire()>
c0012936:	83 c4 10             	add    esp,0x10
c0012939:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001293d:	74 0c                	je     c001294b <VCache::read(unsigned long long, int, void*)+0x2f>
c001293f:	83 ec 0c             	sub    esp,0xc
c0012942:	53                   	push   ebx
c0012943:	e8 4c fe ff ff       	call   c0012794 <VCache::writeWriteBuffer()>
c0012948:	83 c4 10             	add    esp,0x10
c001294b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001294e:	83 ec 0c             	sub    esp,0xc
c0012951:	8b 10                	mov    edx,DWORD PTR [eax]
c0012953:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012957:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001295b:	57                   	push   edi
c001295c:	56                   	push   esi
c001295d:	50                   	push   eax
c001295e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012961:	83 c4 14             	add    esp,0x14
c0012964:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012967:	e8 e0 5e 00 00       	call   c001884c <Semaphore::release()>
c001296c:	83 c4 10             	add    esp,0x10
c001296f:	31 c0                	xor    eax,eax
c0012971:	5b                   	pop    ebx
c0012972:	5e                   	pop    esi
c0012973:	5f                   	pop    edi
c0012974:	c3                   	ret    
c0012975:	90                   	nop

c0012976 <Video::putrect(int, int, int, int, unsigned int)>:
c0012976:	55                   	push   ebp
c0012977:	57                   	push   edi
c0012978:	56                   	push   esi
c0012979:	53                   	push   ebx
c001297a:	83 ec 1c             	sub    esp,0x1c
c001297d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012981:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012985:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012989:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001298d:	01 e8                	add    eax,ebp
c001298f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012993:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012997:	01 df                	add    edi,ebx
c0012999:	39 fb                	cmp    ebx,edi
c001299b:	7d 1b                	jge    c00129b8 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c001299d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00129a1:	7d 12                	jge    c00129b5 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00129a3:	8b 16                	mov    edx,DWORD PTR [esi]
c00129a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00129a9:	53                   	push   ebx
c00129aa:	55                   	push   ebp
c00129ab:	45                   	inc    ebp
c00129ac:	56                   	push   esi
c00129ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00129b0:	83 c4 10             	add    esp,0x10
c00129b3:	eb e8                	jmp    c001299d <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00129b5:	43                   	inc    ebx
c00129b6:	eb e1                	jmp    c0012999 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00129b8:	83 c4 1c             	add    esp,0x1c
c00129bb:	5b                   	pop    ebx
c00129bc:	5e                   	pop    esi
c00129bd:	5f                   	pop    edi
c00129be:	5d                   	pop    ebp
c00129bf:	c3                   	ret    

c00129c0 <Video::blit(unsigned int*, int, int, int, int)>:
c00129c0:	55                   	push   ebp
c00129c1:	57                   	push   edi
c00129c2:	56                   	push   esi
c00129c3:	53                   	push   ebx
c00129c4:	83 ec 1c             	sub    esp,0x1c
c00129c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00129cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00129cf:	85 c0                	test   eax,eax
c00129d1:	79 02                	jns    c00129d5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00129d3:	31 c0                	xor    eax,eax
c00129d5:	c1 e0 02             	shl    eax,0x2
c00129d8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00129dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129e0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00129e4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00129e8:	39 d8                	cmp    eax,ebx
c00129ea:	7e 49                	jle    c0012a35 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00129ec:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00129f2:	7c 41                	jl     c0012a35 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00129f4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00129f8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129fc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012a00:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012a04:	39 f9                	cmp    ecx,edi
c0012a06:	7e 22                	jle    c0012a2a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012a08:	83 c5 04             	add    ebp,0x4
c0012a0b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012a11:	7c 14                	jl     c0012a27 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012a13:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012a15:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012a18:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012a1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012a20:	56                   	push   esi
c0012a21:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012a24:	83 c4 10             	add    esp,0x10
c0012a27:	47                   	inc    edi
c0012a28:	eb d2                	jmp    c00129fc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012a2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a2e:	43                   	inc    ebx
c0012a2f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012a33:	eb ab                	jmp    c00129e0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012a35:	83 c4 1c             	add    esp,0x1c
c0012a38:	5b                   	pop    ebx
c0012a39:	5e                   	pop    esi
c0012a3a:	5f                   	pop    edi
c0012a3b:	5d                   	pop    ebp
c0012a3c:	c3                   	ret    
c0012a3d:	90                   	nop

c0012a3e <Video::clearScreen(unsigned int)>:
c0012a3e:	57                   	push   edi
c0012a3f:	56                   	push   esi
c0012a40:	53                   	push   ebx
c0012a41:	31 db                	xor    ebx,ebx
c0012a43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012a47:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012a4d:	7e 1f                	jle    c0012a6e <Video::clearScreen(unsigned int)+0x30>
c0012a4f:	31 ff                	xor    edi,edi
c0012a51:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012a57:	7e 12                	jle    c0012a6b <Video::clearScreen(unsigned int)+0x2d>
c0012a59:	8b 06                	mov    eax,DWORD PTR [esi]
c0012a5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a5f:	53                   	push   ebx
c0012a60:	57                   	push   edi
c0012a61:	47                   	inc    edi
c0012a62:	56                   	push   esi
c0012a63:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012a66:	83 c4 10             	add    esp,0x10
c0012a69:	eb e6                	jmp    c0012a51 <Video::clearScreen(unsigned int)+0x13>
c0012a6b:	43                   	inc    ebx
c0012a6c:	eb d9                	jmp    c0012a47 <Video::clearScreen(unsigned int)+0x9>
c0012a6e:	5b                   	pop    ebx
c0012a6f:	5e                   	pop    esi
c0012a70:	5f                   	pop    edi
c0012a71:	c3                   	ret    

c0012a72 <Video::putpixel(int, int, unsigned int)>:
c0012a72:	c7 44 24 04 9c 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc002129c
c0012a7a:	e9 24 c5 ff ff       	jmp    c000efa3 <Dbg::kprintf(char const*, ...)>
c0012a7f:	90                   	nop

c0012a80 <Video::Video(char const*)>:
c0012a80:	83 ec 0c             	sub    esp,0xc
c0012a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a87:	83 ec 08             	sub    esp,0x8
c0012a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a8e:	50                   	push   eax
c0012a8f:	e8 0a db ff ff       	call   c001059e <Device::Device(char const*)>
c0012a94:	83 c4 10             	add    esp,0x10
c0012a97:	ba b4 12 02 c0       	mov    edx,0xc00212b4
c0012a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa0:	89 10                	mov    DWORD PTR [eax],edx
c0012aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012ab0:	90                   	nop
c0012ab1:	83 c4 0c             	add    esp,0xc
c0012ab4:	c3                   	ret    
c0012ab5:	90                   	nop

c0012ab6 <Video::~Video()>:
c0012ab6:	83 ec 0c             	sub    esp,0xc
c0012ab9:	ba b4 12 02 c0       	mov    edx,0xc00212b4
c0012abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac2:	89 10                	mov    DWORD PTR [eax],edx
c0012ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac8:	83 ec 0c             	sub    esp,0xc
c0012acb:	50                   	push   eax
c0012acc:	e8 7f d7 ff ff       	call   c0010250 <Device::~Device()>
c0012ad1:	83 c4 10             	add    esp,0x10
c0012ad4:	90                   	nop
c0012ad5:	83 c4 0c             	add    esp,0xc
c0012ad8:	c3                   	ret    
c0012ad9:	90                   	nop

c0012ada <Video::~Video()>:
c0012ada:	83 ec 0c             	sub    esp,0xc
c0012add:	83 ec 0c             	sub    esp,0xc
c0012ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae4:	e8 cd ff ff ff       	call   c0012ab6 <Video::~Video()>
c0012ae9:	83 c4 10             	add    esp,0x10
c0012aec:	83 ec 08             	sub    esp,0x8
c0012aef:	68 64 01 00 00       	push   0x164
c0012af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012af8:	e8 c6 c3 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c0012afd:	83 c4 10             	add    esp,0x10
c0012b00:	83 c4 0c             	add    esp,0xc
c0012b03:	c3                   	ret    

c0012b04 <Video::isMonochrome()>:
c0012b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b08:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012b0e:	c3                   	ret    
c0012b0f:	90                   	nop

c0012b10 <Video::getWidth()>:
c0012b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b14:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012b1a:	c3                   	ret    
c0012b1b:	90                   	nop

c0012b1c <Video::getHeight()>:
c0012b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b20:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012b26:	c3                   	ret    
c0012b27:	90                   	nop

c0012b28 <Video::drawCursor(int, int, unsigned char*, int)>:
c0012b28:	55                   	push   ebp
c0012b29:	57                   	push   edi
c0012b2a:	56                   	push   esi
c0012b2b:	53                   	push   ebx
c0012b2c:	83 ec 2c             	sub    esp,0x2c
c0012b2f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b33:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012b37:	83 f8 01             	cmp    eax,0x1
c0012b3a:	19 c9                	sbb    ecx,ecx
c0012b3c:	31 db                	xor    ebx,ebx
c0012b3e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012b42:	89 cd                	mov    ebp,ecx
c0012b44:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012b4c:	f7 d5                	not    ebp
c0012b4e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012b54:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012b58:	01 d8                	add    eax,ebx
c0012b5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b5e:	56                   	push   esi
c0012b5f:	e8 b8 ff ff ff       	call   c0012b1c <Video::getHeight()>
c0012b64:	59                   	pop    ecx
c0012b65:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b69:	7e 70                	jle    c0012bdb <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012b6b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012b6f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012b73:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012b76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012b7a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012b7e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012b85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012b89:	89 f8                	mov    eax,edi
c0012b8b:	83 c0 20             	add    eax,0x20
c0012b8e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b92:	56                   	push   esi
c0012b93:	e8 78 ff ff ff       	call   c0012b10 <Video::getWidth()>
c0012b98:	5a                   	pop    edx
c0012b99:	39 c7                	cmp    edi,eax
c0012b9b:	7d 34                	jge    c0012bd1 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012b9d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012ba2:	74 05                	je     c0012ba9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012ba4:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ba6:	55                   	push   ebp
c0012ba7:	eb 0d                	jmp    c0012bb6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012ba9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012bae:	74 12                	je     c0012bc2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012bb0:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012bb6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012bba:	57                   	push   edi
c0012bbb:	56                   	push   esi
c0012bbc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012bbf:	83 c4 10             	add    esp,0x10
c0012bc2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012bc6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012bca:	47                   	inc    edi
c0012bcb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012bcf:	75 c1                	jne    c0012b92 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012bd1:	43                   	inc    ebx
c0012bd2:	83 fb 20             	cmp    ebx,0x20
c0012bd5:	0f 85 79 ff ff ff    	jne    c0012b54 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012bdb:	83 c4 2c             	add    esp,0x2c
c0012bde:	5b                   	pop    ebx
c0012bdf:	5e                   	pop    esi
c0012be0:	5f                   	pop    edi
c0012be1:	5d                   	pop    ebp
c0012be2:	c3                   	ret    
c0012be3:	90                   	nop

c0012be4 <ACPI::close(int, int, void*)>:
c0012be4:	83 ec 1c             	sub    esp,0x1c
c0012be7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012bef:	74 0a                	je     c0012bfb <ACPI::close(int, int, void*)+0x17>
c0012bf1:	b8 00 00 00 00       	mov    eax,0x0
c0012bf6:	e9 9a 00 00 00       	jmp    c0012c95 <ACPI::close(int, int, void*)+0xb1>
c0012bfb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012c00:	75 37                	jne    c0012c39 <ACPI::close(int, int, void*)+0x55>
c0012c02:	83 ec 0c             	sub    esp,0xc
c0012c05:	68 ec 12 02 c0       	push   0xc00212ec
c0012c0a:	e8 94 c3 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0012c0f:	83 c4 10             	add    esp,0x10
c0012c12:	a1 c8 3c 02 c0       	mov    eax,ds:0xc0023cc8
c0012c17:	85 c0                	test   eax,eax
c0012c19:	74 07                	je     c0012c22 <ACPI::close(int, int, void*)+0x3e>
c0012c1b:	a1 c8 3c 02 c0       	mov    eax,ds:0xc0023cc8
c0012c20:	ff d0                	call   eax
c0012c22:	83 ec 0c             	sub    esp,0xc
c0012c25:	68 c0 13 02 c0       	push   0xc00213c0
c0012c2a:	e8 09 20 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c0012c2f:	83 c4 10             	add    esp,0x10
c0012c32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012c37:	eb 5c                	jmp    c0012c95 <ACPI::close(int, int, void*)+0xb1>
c0012c39:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012c3e:	75 50                	jne    c0012c90 <ACPI::close(int, int, void*)+0xac>
c0012c40:	a1 c4 3c 02 c0       	mov    eax,ds:0xc0023cc4
c0012c45:	85 c0                	test   eax,eax
c0012c47:	74 07                	je     c0012c50 <ACPI::close(int, int, void*)+0x6c>
c0012c49:	a1 c4 3c 02 c0       	mov    eax,ds:0xc0023cc4
c0012c4e:	ff d0                	call   eax
c0012c50:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012c55:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012c5a:	83 e0 02             	and    eax,0x2
c0012c5d:	74 1c                	je     c0012c7b <ACPI::close(int, int, void*)+0x97>
c0012c5f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012c66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c6a:	89 c2                	mov    edx,eax
c0012c6c:	ec                   	in     al,dx
c0012c6d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012c71:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012c75:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012c79:	eb da                	jmp    c0012c55 <ACPI::close(int, int, void*)+0x71>
c0012c7b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012c82:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012c87:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012c8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c8f:	ee                   	out    dx,al
c0012c90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012c95:	83 c4 1c             	add    esp,0x1c
c0012c98:	c3                   	ret    

c0012c99 <findRSDP()>:
c0012c99:	83 ec 1c             	sub    esp,0x1c
c0012c9c:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c0012ca1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012ca7:	83 e0 04             	and    eax,0x4
c0012caa:	84 c0                	test   al,al
c0012cac:	75 07                	jne    c0012cb5 <findRSDP()+0x1c>
c0012cae:	b8 00 00 00 00       	mov    eax,0x0
c0012cb3:	eb 6a                	jmp    c0012d1f <findRSDP()+0x86>
c0012cb5:	a1 90 36 02 c0       	mov    eax,ds:0xc0023690
c0012cba:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012cbf:	7f 1b                	jg     c0012cdc <findRSDP()+0x43>
c0012cc1:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c0012cc6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012ccc:	83 e2 fb             	and    edx,0xfffffffb
c0012ccf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012cd5:	b8 00 00 00 00       	mov    eax,0x0
c0012cda:	eb 43                	jmp    c0012d1f <findRSDP()+0x86>
c0012cdc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012ce4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012cec:	77 2c                	ja     c0012d1a <findRSDP()+0x81>
c0012cee:	83 ec 04             	sub    esp,0x4
c0012cf1:	6a 08                	push   0x8
c0012cf3:	68 f9 12 02 c0       	push   0xc00212f9
c0012cf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cfc:	e8 6e d8 fe ff       	call   c000056f <memcmp>
c0012d01:	83 c4 10             	add    esp,0x10
c0012d04:	85 c0                	test   eax,eax
c0012d06:	0f 94 c0             	sete   al
c0012d09:	84 c0                	test   al,al
c0012d0b:	74 06                	je     c0012d13 <findRSDP()+0x7a>
c0012d0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d11:	eb 0c                	jmp    c0012d1f <findRSDP()+0x86>
c0012d13:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012d18:	eb ca                	jmp    c0012ce4 <findRSDP()+0x4b>
c0012d1a:	b8 00 00 00 00       	mov    eax,0x0
c0012d1f:	83 c4 1c             	add    esp,0x1c
c0012d22:	c3                   	ret    

c0012d23 <loadACPITables(unsigned char*)>:
c0012d23:	56                   	push   esi
c0012d24:	53                   	push   ebx
c0012d25:	83 ec 44             	sub    esp,0x44
c0012d28:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c0012d2d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d33:	83 e0 04             	and    eax,0x4
c0012d36:	84 c0                	test   al,al
c0012d38:	0f 84 05 02 00 00    	je     c0012f43 <loadACPITables(unsigned char*)+0x220>
c0012d3e:	a0 e0 3e 02 c0       	mov    al,ds:0xc0023ee0
c0012d43:	84 c0                	test   al,al
c0012d45:	74 75                	je     c0012dbc <loadACPITables(unsigned char*)+0x99>
c0012d47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012d4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d56:	83 e8 24             	sub    eax,0x24
c0012d59:	c1 e8 03             	shr    eax,0x3
c0012d5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012d60:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d6c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012d70:	0f 8d b2 00 00 00    	jge    c0012e28 <loadACPITables(unsigned char*)+0x105>
c0012d76:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012d7a:	83 c0 24             	add    eax,0x24
c0012d7d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012d81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d85:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012d89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d8d:	c1 e0 03             	shl    eax,0x3
c0012d90:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012d94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d98:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012d9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d9d:	89 c1                	mov    ecx,eax
c0012d9f:	a1 cc 3c 02 c0       	mov    eax,ds:0xc0023ccc
c0012da4:	8d 50 01             	lea    edx,[eax+0x1]
c0012da7:	89 15 cc 3c 02 c0    	mov    DWORD PTR ds:0xc0023ccc,edx
c0012dad:	89 ca                	mov    edx,ecx
c0012daf:	89 14 c5 e4 3c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc31c],edx
c0012db6:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012dba:	eb ac                	jmp    c0012d68 <loadACPITables(unsigned char*)+0x45>
c0012dbc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012dc0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012dc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dcb:	83 e8 24             	sub    eax,0x24
c0012dce:	c1 e8 02             	shr    eax,0x2
c0012dd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012dd5:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012ddd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012de1:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012de5:	7d 41                	jge    c0012e28 <loadACPITables(unsigned char*)+0x105>
c0012de7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012deb:	83 c0 24             	add    eax,0x24
c0012dee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012df2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012df6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012dfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012dfe:	c1 e0 02             	shl    eax,0x2
c0012e01:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012e05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e09:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012e0b:	a1 cc 3c 02 c0       	mov    eax,ds:0xc0023ccc
c0012e10:	8d 50 01             	lea    edx,[eax+0x1]
c0012e13:	89 15 cc 3c 02 c0    	mov    DWORD PTR ds:0xc0023ccc,edx
c0012e19:	89 ca                	mov    edx,ecx
c0012e1b:	89 14 c5 e4 3c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc31c],edx
c0012e22:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012e26:	eb b5                	jmp    c0012ddd <loadACPITables(unsigned char*)+0xba>
c0012e28:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012e30:	a1 cc 3c 02 c0       	mov    eax,ds:0xc0023ccc
c0012e35:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012e39:	0f 8d 05 01 00 00    	jge    c0012f44 <loadACPITables(unsigned char*)+0x221>
c0012e3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012e43:	8b 04 c5 e4 3c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc31c]
c0012e4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e5a:	25 ff 0f 00 00       	and    eax,0xfff
c0012e5f:	89 c6                	mov    esi,eax
c0012e61:	e8 4d b0 ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c0012e66:	89 c3                	mov    ebx,eax
c0012e68:	83 ec 0c             	sub    esp,0xc
c0012e6b:	6a 01                	push   0x1
c0012e6d:	e8 b1 ae ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c0012e72:	83 c4 10             	add    esp,0x10
c0012e75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012e79:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012e7f:	83 ec 0c             	sub    esp,0xc
c0012e82:	6a 01                	push   0x1
c0012e84:	6a 01                	push   0x1
c0012e86:	50                   	push   eax
c0012e87:	52                   	push   edx
c0012e88:	53                   	push   ebx
c0012e89:	e8 b8 b7 ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e8e:	83 c4 20             	add    esp,0x20
c0012e91:	09 f0                	or     eax,esi
c0012e93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012e9b:	c1 e0 03             	shl    eax,0x3
c0012e9e:	05 e0 3c 02 c0       	add    eax,0xc0023ce0
c0012ea3:	83 ec 04             	sub    esp,0x4
c0012ea6:	6a 04                	push   0x4
c0012ea8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eac:	50                   	push   eax
c0012ead:	e8 20 d7 fe ff       	call   c00005d2 <memcpy>
c0012eb2:	83 c4 10             	add    esp,0x10
c0012eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ebc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012ec4:	05 00 10 00 00       	add    eax,0x1000
c0012ec9:	c1 e8 0c             	shr    eax,0xc
c0012ecc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed4:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012edb:	25 ff 0f 00 00       	and    eax,0xfff
c0012ee0:	89 c6                	mov    esi,eax
c0012ee2:	e8 cc af ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c0012ee7:	89 c3                	mov    ebx,eax
c0012ee9:	83 ec 0c             	sub    esp,0xc
c0012eec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ef0:	e8 2e ae ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c0012ef5:	83 c4 10             	add    esp,0x10
c0012ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012efc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f02:	83 ec 0c             	sub    esp,0xc
c0012f05:	6a 01                	push   0x1
c0012f07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f0b:	50                   	push   eax
c0012f0c:	52                   	push   edx
c0012f0d:	53                   	push   ebx
c0012f0e:	e8 33 b7 ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012f13:	83 c4 20             	add    esp,0x20
c0012f16:	09 f0                	or     eax,esi
c0012f18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012f1f:	83 ec 0c             	sub    esp,0xc
c0012f22:	50                   	push   eax
c0012f23:	e8 31 b1 ff ff       	call   c000e059 <Virt::freeKernelVirtualPages(unsigned long)>
c0012f28:	83 c4 10             	add    esp,0x10
c0012f2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f33:	89 14 c5 e4 3c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc31c],edx
c0012f3a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012f3e:	e9 ed fe ff ff       	jmp    c0012e30 <loadACPITables(unsigned char*)+0x10d>
c0012f43:	90                   	nop
c0012f44:	83 c4 44             	add    esp,0x44
c0012f47:	5b                   	pop    ebx
c0012f48:	5e                   	pop    esi
c0012f49:	c3                   	ret    

c0012f4a <findRSDT(unsigned char*)>:
c0012f4a:	56                   	push   esi
c0012f4b:	53                   	push   ebx
c0012f4c:	83 ec 44             	sub    esp,0x44
c0012f4f:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c0012f54:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012f5a:	83 e0 04             	and    eax,0x4
c0012f5d:	84 c0                	test   al,al
c0012f5f:	75 0a                	jne    c0012f6b <findRSDT(unsigned char*)+0x21>
c0012f61:	b8 00 00 00 00       	mov    eax,0x0
c0012f66:	e9 f7 00 00 00       	jmp    c0013062 <findRSDT(unsigned char*)+0x118>
c0012f6b:	83 ec 04             	sub    esp,0x4
c0012f6e:	6a 24                	push   0x24
c0012f70:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012f74:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012f78:	50                   	push   eax
c0012f79:	e8 54 d6 fe ff       	call   c00005d2 <memcpy>
c0012f7e:	83 c4 10             	add    esp,0x10
c0012f81:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0012f85:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012f89:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012f91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012f95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f99:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fa1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012fa5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012fa9:	25 ff 0f 00 00       	and    eax,0xfff
c0012fae:	89 c6                	mov    esi,eax
c0012fb0:	e8 fe ae ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c0012fb5:	89 c3                	mov    ebx,eax
c0012fb7:	83 ec 0c             	sub    esp,0xc
c0012fba:	6a 02                	push   0x2
c0012fbc:	e8 62 ad ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c0012fc1:	83 c4 10             	add    esp,0x10
c0012fc4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012fc8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012fce:	83 ec 0c             	sub    esp,0xc
c0012fd1:	6a 01                	push   0x1
c0012fd3:	6a 02                	push   0x2
c0012fd5:	50                   	push   eax
c0012fd6:	52                   	push   edx
c0012fd7:	53                   	push   ebx
c0012fd8:	e8 69 b6 ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012fdd:	83 c4 20             	add    esp,0x20
c0012fe0:	09 f0                	or     eax,esi
c0012fe2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012fe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fea:	25 ff 0f 00 00       	and    eax,0xfff
c0012fef:	89 c6                	mov    esi,eax
c0012ff1:	e8 bd ae ff ff       	call   c000deb3 <Virt::getAKernelVAS()>
c0012ff6:	89 c3                	mov    ebx,eax
c0012ff8:	83 ec 0c             	sub    esp,0xc
c0012ffb:	6a 02                	push   0x2
c0012ffd:	e8 21 ad ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c0013002:	83 c4 10             	add    esp,0x10
c0013005:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013009:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001300f:	83 ec 0c             	sub    esp,0xc
c0013012:	6a 01                	push   0x1
c0013014:	6a 02                	push   0x2
c0013016:	50                   	push   eax
c0013017:	52                   	push   edx
c0013018:	53                   	push   ebx
c0013019:	e8 28 b6 ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001301e:	83 c4 20             	add    esp,0x20
c0013021:	09 f0                	or     eax,esi
c0013023:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013027:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001302c:	75 11                	jne    c001303f <findRSDT(unsigned char*)+0xf5>
c001302e:	c6 05 e0 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ee0,0x0
c0013035:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013039:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001303d:	eb 1f                	jmp    c001305e <findRSDT(unsigned char*)+0x114>
c001303f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0013044:	75 11                	jne    c0013057 <findRSDT(unsigned char*)+0x10d>
c0013046:	c6 05 e0 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ee0,0x1
c001304d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013051:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013055:	eb 07                	jmp    c001305e <findRSDT(unsigned char*)+0x114>
c0013057:	b8 00 00 00 00       	mov    eax,0x0
c001305c:	eb 04                	jmp    c0013062 <findRSDT(unsigned char*)+0x118>
c001305e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013062:	83 c4 44             	add    esp,0x44
c0013065:	5b                   	pop    ebx
c0013066:	5e                   	pop    esi
c0013067:	c3                   	ret    

c0013068 <findDataTable(unsigned char*, char*)>:
c0013068:	83 ec 1c             	sub    esp,0x1c
c001306b:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c0013070:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013076:	83 e0 04             	and    eax,0x4
c0013079:	84 c0                	test   al,al
c001307b:	75 07                	jne    c0013084 <findDataTable(unsigned char*, char*)+0x1c>
c001307d:	b8 00 00 00 00       	mov    eax,0x0
c0013082:	eb 7c                	jmp    c0013100 <findDataTable(unsigned char*, char*)+0x98>
c0013084:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001308c:	a1 cc 3c 02 c0       	mov    eax,ds:0xc0023ccc
c0013091:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0013095:	7d 3a                	jge    c00130d1 <findDataTable(unsigned char*, char*)+0x69>
c0013097:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001309b:	c1 e0 03             	shl    eax,0x3
c001309e:	05 e0 3c 02 c0       	add    eax,0xc0023ce0
c00130a3:	83 ec 04             	sub    esp,0x4
c00130a6:	6a 04                	push   0x4
c00130a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00130ac:	50                   	push   eax
c00130ad:	e8 bd d4 fe ff       	call   c000056f <memcmp>
c00130b2:	83 c4 10             	add    esp,0x10
c00130b5:	85 c0                	test   eax,eax
c00130b7:	0f 94 c0             	sete   al
c00130ba:	84 c0                	test   al,al
c00130bc:	74 0d                	je     c00130cb <findDataTable(unsigned char*, char*)+0x63>
c00130be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130c2:	8b 04 c5 e4 3c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc31c]
c00130c9:	eb 35                	jmp    c0013100 <findDataTable(unsigned char*, char*)+0x98>
c00130cb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00130cf:	eb bb                	jmp    c001308c <findDataTable(unsigned char*, char*)+0x24>
c00130d1:	a0 e0 3e 02 c0       	mov    al,ds:0xc0023ee0
c00130d6:	84 c0                	test   al,al
c00130d8:	74 07                	je     c00130e1 <findDataTable(unsigned char*, char*)+0x79>
c00130da:	b8 58 00 00 00       	mov    eax,0x58
c00130df:	eb 05                	jmp    c00130e6 <findDataTable(unsigned char*, char*)+0x7e>
c00130e1:	b8 52 00 00 00       	mov    eax,0x52
c00130e6:	83 ec 04             	sub    esp,0x4
c00130e9:	50                   	push   eax
c00130ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00130ee:	68 e4 13 02 c0       	push   0xc00213e4
c00130f3:	e8 ab be ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00130f8:	83 c4 10             	add    esp,0x10
c00130fb:	b8 00 00 00 00       	mov    eax,0x0
c0013100:	83 c4 1c             	add    esp,0x1c
c0013103:	c3                   	ret    

c0013104 <scanMADT()>:
c0013104:	83 ec 2c             	sub    esp,0x2c
c0013107:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c001310c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013112:	83 e0 04             	and    eax,0x4
c0013115:	84 c0                	test   al,al
c0013117:	0f 84 73 03 00 00    	je     c0013490 <scanMADT()+0x38c>
c001311d:	e8 77 fb ff ff       	call   c0012c99 <findRSDP()>
c0013122:	a3 ec 3e 02 c0       	mov    ds:0xc0023eec,eax
c0013127:	a1 ec 3e 02 c0       	mov    eax,ds:0xc0023eec
c001312c:	85 c0                	test   eax,eax
c001312e:	75 19                	jne    c0013149 <scanMADT()+0x45>
c0013130:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c0013135:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001313b:	83 e2 fb             	and    edx,0xfffffffb
c001313e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013144:	e9 4b 03 00 00       	jmp    c0013494 <scanMADT()+0x390>
c0013149:	a1 ec 3e 02 c0       	mov    eax,ds:0xc0023eec
c001314e:	83 ec 0c             	sub    esp,0xc
c0013151:	50                   	push   eax
c0013152:	e8 f3 fd ff ff       	call   c0012f4a <findRSDT(unsigned char*)>
c0013157:	83 c4 10             	add    esp,0x10
c001315a:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c001315f:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013164:	85 c0                	test   eax,eax
c0013166:	75 19                	jne    c0013181 <scanMADT()+0x7d>
c0013168:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c001316d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013173:	83 e2 fb             	and    edx,0xfffffffb
c0013176:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001317c:	e9 13 03 00 00       	jmp    c0013494 <scanMADT()+0x390>
c0013181:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013186:	83 ec 0c             	sub    esp,0xc
c0013189:	50                   	push   eax
c001318a:	e8 94 fb ff ff       	call   c0012d23 <loadACPITables(unsigned char*)>
c001318f:	83 c4 10             	add    esp,0x10
c0013192:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0013197:	83 ec 08             	sub    esp,0x8
c001319a:	68 02 13 02 c0       	push   0xc0021302
c001319f:	50                   	push   eax
c00131a0:	e8 c3 fe ff ff       	call   c0013068 <findDataTable(unsigned char*, char*)>
c00131a5:	83 c4 10             	add    esp,0x10
c00131a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131ac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00131b1:	75 19                	jne    c00131cc <scanMADT()+0xc8>
c00131b3:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c00131b8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00131be:	83 e2 fe             	and    edx,0xfffffffe
c00131c1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00131c7:	e9 c8 02 00 00       	jmp    c0013494 <scanMADT()+0x390>
c00131cc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00131d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131db:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00131df:	0f 87 af 02 00 00    	ja     c0013494 <scanMADT()+0x390>
c00131e5:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c00131ed:	0f 87 a1 02 00 00    	ja     c0013494 <scanMADT()+0x390>
c00131f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131ff:	8d 50 01             	lea    edx,[eax+0x1]
c0013202:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013206:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001320a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001320e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013212:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013216:	8d 50 01             	lea    edx,[eax+0x1]
c0013219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001321d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013221:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013225:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013229:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c001322e:	0f 86 5f 02 00 00    	jbe    c0013493 <scanMADT()+0x38f>
c0013234:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013239:	75 57                	jne    c0013292 <scanMADT()+0x18e>
c001323b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001323f:	8d 50 01             	lea    edx,[eax+0x1]
c0013242:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013246:	8a 15 20 40 02 c0    	mov    dl,BYTE PTR ds:0xc0024020
c001324c:	0f b6 d2             	movzx  edx,dl
c001324f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013253:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013257:	88 82 60 40 02 c0    	mov    BYTE PTR [edx-0x3ffdbfa0],al
c001325d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013261:	8d 50 01             	lea    edx,[eax+0x1]
c0013264:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013268:	8a 15 20 40 02 c0    	mov    dl,BYTE PTR ds:0xc0024020
c001326e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013271:	88 0d 20 40 02 c0    	mov    BYTE PTR ds:0xc0024020,cl
c0013277:	0f b6 d2             	movzx  edx,dl
c001327a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001327e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013282:	88 82 40 40 02 c0    	mov    BYTE PTR [edx-0x3ffdbfc0],al
c0013288:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001328d:	e9 ea 01 00 00       	jmp    c001347c <scanMADT()+0x378>
c0013292:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013297:	0f 85 14 01 00 00    	jne    c00133b1 <scanMADT()+0x2ad>
c001329d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a1:	8d 50 01             	lea    edx,[eax+0x1]
c00132a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132a8:	8a 15 f0 3e 02 c0    	mov    dl,BYTE PTR ds:0xc0023ef0
c00132ae:	0f b6 d2             	movzx  edx,dl
c00132b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132b5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00132b9:	88 82 00 3f 02 c0    	mov    BYTE PTR [edx-0x3ffdc100],al
c00132bf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00132c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132cb:	01 d0                	add    eax,edx
c00132cd:	83 c0 2c             	add    eax,0x2c
c00132d0:	8a 00                	mov    al,BYTE PTR [eax]
c00132d2:	0f b6 d0             	movzx  edx,al
c00132d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132d9:	8d 48 01             	lea    ecx,[eax+0x1]
c00132dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132e0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00132e4:	0f b6 c0             	movzx  eax,al
c00132e7:	c1 e0 08             	shl    eax,0x8
c00132ea:	89 d1                	mov    ecx,edx
c00132ec:	09 c1                	or     ecx,eax
c00132ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f2:	8d 50 02             	lea    edx,[eax+0x2]
c00132f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132f9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00132fd:	0f b6 c0             	movzx  eax,al
c0013300:	c1 e0 10             	shl    eax,0x10
c0013303:	09 c1                	or     ecx,eax
c0013305:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013309:	8d 50 03             	lea    edx,[eax+0x3]
c001330c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013310:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013314:	0f b6 c0             	movzx  eax,al
c0013317:	c1 e0 18             	shl    eax,0x18
c001331a:	09 c1                	or     ecx,eax
c001331c:	89 ca                	mov    edx,ecx
c001331e:	a0 f0 3e 02 c0       	mov    al,ds:0xc0023ef0
c0013323:	0f b6 c0             	movzx  eax,al
c0013326:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c001332d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013332:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001333a:	01 d0                	add    eax,edx
c001333c:	83 c0 2c             	add    eax,0x2c
c001333f:	8a 00                	mov    al,BYTE PTR [eax]
c0013341:	0f b6 d0             	movzx  edx,al
c0013344:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013348:	8d 48 01             	lea    ecx,[eax+0x1]
c001334b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001334f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013353:	0f b6 c0             	movzx  eax,al
c0013356:	c1 e0 08             	shl    eax,0x8
c0013359:	89 d1                	mov    ecx,edx
c001335b:	09 c1                	or     ecx,eax
c001335d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013361:	8d 50 02             	lea    edx,[eax+0x2]
c0013364:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013368:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001336c:	0f b6 c0             	movzx  eax,al
c001336f:	c1 e0 10             	shl    eax,0x10
c0013372:	09 c1                	or     ecx,eax
c0013374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013378:	8d 50 03             	lea    edx,[eax+0x3]
c001337b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001337f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013383:	0f b6 c0             	movzx  eax,al
c0013386:	c1 e0 18             	shl    eax,0x18
c0013389:	09 c1                	or     ecx,eax
c001338b:	89 ca                	mov    edx,ecx
c001338d:	a0 f0 3e 02 c0       	mov    al,ds:0xc0023ef0
c0013392:	0f b6 c0             	movzx  eax,al
c0013395:	89 14 85 a0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc060],edx
c001339c:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00133a1:	a0 f0 3e 02 c0       	mov    al,ds:0xc0023ef0
c00133a6:	40                   	inc    eax
c00133a7:	a2 f0 3e 02 c0       	mov    ds:0xc0023ef0,al
c00133ac:	e9 cb 00 00 00       	jmp    c001347c <scanMADT()+0x378>
c00133b1:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00133b6:	0f 85 a6 00 00 00    	jne    c0013462 <scanMADT()+0x35e>
c00133bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133c0:	8d 50 01             	lea    edx,[eax+0x1]
c00133c3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00133c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00133cb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00133cf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00133d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133d7:	8d 50 01             	lea    edx,[eax+0x1]
c00133da:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00133de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00133e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00133e6:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00133ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00133ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133f2:	01 d0                	add    eax,edx
c00133f4:	83 c0 2c             	add    eax,0x2c
c00133f7:	8a 00                	mov    al,BYTE PTR [eax]
c00133f9:	0f b6 d0             	movzx  edx,al
c00133fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013400:	8d 48 01             	lea    ecx,[eax+0x1]
c0013403:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013407:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001340b:	0f b6 c0             	movzx  eax,al
c001340e:	c1 e0 08             	shl    eax,0x8
c0013411:	89 d1                	mov    ecx,edx
c0013413:	09 c1                	or     ecx,eax
c0013415:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013419:	8d 50 02             	lea    edx,[eax+0x2]
c001341c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013420:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013424:	0f b6 c0             	movzx  eax,al
c0013427:	c1 e0 10             	shl    eax,0x10
c001342a:	09 c1                	or     ecx,eax
c001342c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013430:	8d 50 03             	lea    edx,[eax+0x3]
c0013433:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013437:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001343b:	0f b6 c0             	movzx  eax,al
c001343e:	c1 e0 18             	shl    eax,0x18
c0013441:	09 c8                	or     eax,ecx
c0013443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013447:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001344c:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013451:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013456:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001345a:	88 90 a0 2d 02 c0    	mov    BYTE PTR [eax-0x3ffdd260],dl
c0013460:	eb 1a                	jmp    c001347c <scanMADT()+0x378>
c0013462:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013467:	75 07                	jne    c0013470 <scanMADT()+0x36c>
c0013469:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001346e:	eb 0c                	jmp    c001347c <scanMADT()+0x378>
c0013470:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013475:	75 05                	jne    c001347c <scanMADT()+0x378>
c0013477:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c001347c:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013481:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013485:	01 d0                	add    eax,edx
c0013487:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001348b:	e9 44 fd ff ff       	jmp    c00131d4 <scanMADT()+0xd0>
c0013490:	90                   	nop
c0013491:	eb 01                	jmp    c0013494 <scanMADT()+0x390>
c0013493:	90                   	nop
c0013494:	83 c4 2c             	add    esp,0x2c
c0013497:	c3                   	ret    

c0013498 <ACPI::ACPI()>:
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001349f:	83 ec 08             	sub    esp,0x8
c00134a2:	68 07 13 02 c0       	push   0xc0021307
c00134a7:	50                   	push   eax
c00134a8:	e8 f1 d0 ff ff       	call   c001059e <Device::Device(char const*)>
c00134ad:	83 c4 10             	add    esp,0x10
c00134b0:	ba b0 14 02 c0       	mov    edx,0xc00214b0
c00134b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b9:	89 10                	mov    DWORD PTR [eax],edx
c00134bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134bf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00134c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ca:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00134d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d8:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00134e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e6:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00134ed:	e8 12 fc ff ff       	call   c0013104 <scanMADT()>
c00134f2:	90                   	nop
c00134f3:	83 c4 0c             	add    esp,0xc
c00134f6:	c3                   	ret    
c00134f7:	90                   	nop

c00134f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00134f8:	83 ec 2c             	sub    esp,0x2c
c00134fb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00134ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013503:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013507:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001350b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013510:	88 d0                	mov    al,dl
c0013512:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013516:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001351b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013523:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013527:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001352d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013531:	0f 8d 97 00 00 00    	jge    c00135ce <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013537:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001353b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001353f:	83 c2 2a             	add    edx,0x2a
c0013542:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013546:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001354b:	75 78                	jne    c00135c5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001354d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013551:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013555:	83 c2 2a             	add    edx,0x2a
c0013558:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001355c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013560:	75 63                	jne    c00135c5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013562:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013567:	74 3a                	je     c00135a3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013569:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001356d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013571:	83 c2 2a             	add    edx,0x2a
c0013574:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013578:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001357c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001357f:	39 c2                	cmp    edx,eax
c0013581:	74 10                	je     c0013593 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013583:	83 ec 0c             	sub    esp,0xc
c0013586:	68 14 14 02 c0       	push   0xc0021414
c001358b:	e8 a8 16 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c0013590:	83 c4 10             	add    esp,0x10
c0013593:	83 ec 0c             	sub    esp,0xc
c0013596:	68 0c 13 02 c0       	push   0xc002130c
c001359b:	e8 98 16 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00135a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135af:	83 c2 2a             	add    edx,0x2a
c00135b2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00135b6:	8b 02                	mov    eax,DWORD PTR [edx]
c00135b8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00135bb:	89 01                	mov    DWORD PTR [ecx],eax
c00135bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00135c0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00135c5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00135c9:	e9 55 ff ff ff       	jmp    c0013523 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00135ce:	90                   	nop
c00135cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135d3:	83 c4 2c             	add    esp,0x2c
c00135d6:	c2 04 00             	ret    0x4
c00135d9:	90                   	nop

c00135da <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00135da:	56                   	push   esi
c00135db:	53                   	push   ebx
c00135dc:	83 ec 14             	sub    esp,0x14
c00135df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00135e3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00135e7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00135eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00135f0:	88 c8                	mov    al,cl
c00135f2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00135f6:	88 d0                	mov    al,dl
c00135f8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00135fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013600:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001360a:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013610:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013615:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001361a:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001361f:	83 ec 04             	sub    esp,0x4
c0013622:	56                   	push   esi
c0013623:	53                   	push   ebx
c0013624:	51                   	push   ecx
c0013625:	52                   	push   edx
c0013626:	50                   	push   eax
c0013627:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001362b:	68 44 14 02 c0       	push   0xc0021444
c0013630:	e8 6e b9 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0013635:	83 c4 20             	add    esp,0x20
c0013638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001363c:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013646:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013649:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001364d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013655:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001365b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001365f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013662:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013666:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001366b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001366f:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013675:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013679:	8d 48 01             	lea    ecx,[eax+0x1]
c001367c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013680:	83 c2 2a             	add    edx,0x2a
c0013683:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001368b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013695:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013698:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001369c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00136a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136a4:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00136aa:	8d 50 01             	lea    edx,[eax+0x1]
c00136ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136b1:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00136b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136bb:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00136c1:	3d 00 08 00 00       	cmp    eax,0x800
c00136c6:	75 10                	jne    c00136d8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00136c8:	83 ec 0c             	sub    esp,0xc
c00136cb:	68 1b 13 02 c0       	push   0xc002131b
c00136d0:	e8 63 15 00 00       	call   c0014c38 <Krnl::panic(char const*)>
c00136d5:	83 c4 10             	add    esp,0x10
c00136d8:	90                   	nop
c00136d9:	83 c4 14             	add    esp,0x14
c00136dc:	5b                   	pop    ebx
c00136dd:	5e                   	pop    esi
c00136de:	c3                   	ret    
c00136df:	90                   	nop

c00136e0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00136e0:	b8 00 00 00 00       	mov    eax,0x0
c00136e5:	c3                   	ret    

c00136e6 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00136e6:	83 ec 1c             	sub    esp,0x1c
c00136e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136ed:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00136f0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00136f4:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c00136f9:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00136fe:	83 ec 08             	sub    esp,0x8
c0013701:	52                   	push   edx
c0013702:	50                   	push   eax
c0013703:	e8 2e 7b ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c0013708:	83 c4 10             	add    esp,0x10
c001370b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001370f:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c0013714:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013719:	83 ec 04             	sub    esp,0x4
c001371c:	6a 01                	push   0x1
c001371e:	52                   	push   edx
c001371f:	50                   	push   eax
c0013720:	e8 1f 7c ff ff       	call   c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>
c0013725:	83 c4 10             	add    esp,0x10
c0013728:	90                   	nop
c0013729:	83 c4 1c             	add    esp,0x1c
c001372c:	c3                   	ret    
c001372d:	90                   	nop

c001372e <ACPI::open(int, int, void*)>:
c001372e:	53                   	push   ebx
c001372f:	83 ec 18             	sub    esp,0x18
c0013732:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013736:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001373d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013741:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013747:	84 c0                	test   al,al
c0013749:	74 60                	je     c00137ab <ACPI::open(int, int, void*)+0x7d>
c001374b:	83 ec 0c             	sub    esp,0xc
c001374e:	68 58 01 00 00       	push   0x158
c0013753:	e8 5c b7 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	89 c3                	mov    ebx,eax
c001375d:	83 ec 0c             	sub    esp,0xc
c0013760:	53                   	push   ebx
c0013761:	e8 d4 7c 00 00       	call   c001b43a <PCI::PCI()>
c0013766:	83 c4 10             	add    esp,0x10
c0013769:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001376d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013771:	83 ec 08             	sub    esp,0x8
c0013774:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013778:	50                   	push   eax
c0013779:	e8 30 cc ff ff       	call   c00103ae <Device::addChild(Device*)>
c001377e:	83 c4 10             	add    esp,0x10
c0013781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013785:	8b 00                	mov    eax,DWORD PTR [eax]
c0013787:	83 c0 08             	add    eax,0x8
c001378a:	8b 00                	mov    eax,DWORD PTR [eax]
c001378c:	6a 00                	push   0x0
c001378e:	6a 00                	push   0x0
c0013790:	6a 00                	push   0x0
c0013792:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013796:	ff d0                	call   eax
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	83 ec 0c             	sub    esp,0xc
c001379e:	68 38 13 02 c0       	push   0xc0021338
c00137a3:	e8 fb b7 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00137a8:	83 c4 10             	add    esp,0x10
c00137ab:	83 ec 0c             	sub    esp,0xc
c00137ae:	68 43 13 02 c0       	push   0xc0021343
c00137b3:	e8 7b 33 00 00       	call   c0016b33 <Thr::loadKernelSymbolTable(char const*)>
c00137b8:	83 c4 10             	add    esp,0x10
c00137bb:	8b 1d 48 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023648
c00137c1:	83 ec 08             	sub    esp,0x8
c00137c4:	6a 01                	push   0x1
c00137c6:	68 61 13 02 c0       	push   0xc0021361
c00137cb:	e8 28 3e 00 00       	call   c00175f8 <Thr::loadDLL(char const*, bool)>
c00137d0:	83 c4 10             	add    esp,0x10
c00137d3:	83 ec 08             	sub    esp,0x8
c00137d6:	53                   	push   ebx
c00137d7:	50                   	push   eax
c00137d8:	e8 6e 3f 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c00137dd:	83 c4 10             	add    esp,0x10
c00137e0:	8b 1d 48 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023648
c00137e6:	83 ec 08             	sub    esp,0x8
c00137e9:	6a 01                	push   0x1
c00137eb:	68 7e 13 02 c0       	push   0xc002137e
c00137f0:	e8 03 3e 00 00       	call   c00175f8 <Thr::loadDLL(char const*, bool)>
c00137f5:	83 c4 10             	add    esp,0x10
c00137f8:	83 ec 08             	sub    esp,0x8
c00137fb:	53                   	push   ebx
c00137fc:	50                   	push   eax
c00137fd:	e8 49 3f 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c0013802:	83 c4 10             	add    esp,0x10
c0013805:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c001380a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013810:	83 e0 04             	and    eax,0x4
c0013813:	84 c0                	test   al,al
c0013815:	0f 84 cf 00 00 00    	je     c00138ea <ACPI::open(int, int, void*)+0x1bc>
c001381b:	83 ec 0c             	sub    esp,0xc
c001381e:	68 14 01 00 00       	push   0x114
c0013823:	e8 8c b6 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0013828:	83 c4 10             	add    esp,0x10
c001382b:	89 c3                	mov    ebx,eax
c001382d:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0013832:	83 ec 04             	sub    esp,0x4
c0013835:	50                   	push   eax
c0013836:	68 9b 13 02 c0       	push   0xc002139b
c001383b:	53                   	push   ebx
c001383c:	e8 91 bc ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c0013841:	83 c4 10             	add    esp,0x10
c0013844:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0013848:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001384d:	74 17                	je     c0013866 <ACPI::open(int, int, void*)+0x138>
c001384f:	83 ec 0c             	sub    esp,0xc
c0013852:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013856:	e8 49 bf ff ff       	call   c000f7a4 <File::exists()>
c001385b:	83 c4 10             	add    esp,0x10
c001385e:	84 c0                	test   al,al
c0013860:	74 04                	je     c0013866 <ACPI::open(int, int, void*)+0x138>
c0013862:	b0 01                	mov    al,0x1
c0013864:	eb 02                	jmp    c0013868 <ACPI::open(int, int, void*)+0x13a>
c0013866:	b0 00                	mov    al,0x0
c0013868:	84 c0                	test   al,al
c001386a:	74 25                	je     c0013891 <ACPI::open(int, int, void*)+0x163>
c001386c:	8b 1d 48 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023648
c0013872:	83 ec 08             	sub    esp,0x8
c0013875:	6a 01                	push   0x1
c0013877:	68 9b 13 02 c0       	push   0xc002139b
c001387c:	e8 77 3d 00 00       	call   c00175f8 <Thr::loadDLL(char const*, bool)>
c0013881:	83 c4 10             	add    esp,0x10
c0013884:	83 ec 08             	sub    esp,0x8
c0013887:	53                   	push   ebx
c0013888:	50                   	push   eax
c0013889:	e8 bd 3e 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c001388e:	83 c4 10             	add    esp,0x10
c0013891:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013896:	74 1e                	je     c00138b6 <ACPI::open(int, int, void*)+0x188>
c0013898:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001389d:	74 17                	je     c00138b6 <ACPI::open(int, int, void*)+0x188>
c001389f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00138a5:	83 c0 08             	add    eax,0x8
c00138a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00138aa:	83 ec 0c             	sub    esp,0xc
c00138ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138b1:	ff d0                	call   eax
c00138b3:	83 c4 10             	add    esp,0x10
c00138b6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c00138bb:	83 ec 08             	sub    esp,0x8
c00138be:	68 b8 13 02 c0       	push   0xc00213b8
c00138c3:	50                   	push   eax
c00138c4:	e8 9f f7 ff ff       	call   c0013068 <findDataTable(unsigned char*, char*)>
c00138c9:	83 c4 10             	add    esp,0x10
c00138cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138d0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00138d5:	74 13                	je     c00138ea <ACPI::open(int, int, void*)+0x1bc>
c00138d7:	83 ec 08             	sub    esp,0x8
c00138da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00138de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138e2:	e8 ff fd ff ff       	call   c00136e6 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00138e7:	83 c4 10             	add    esp,0x10
c00138ea:	b8 00 00 00 00       	mov    eax,0x0
c00138ef:	83 c4 18             	add    esp,0x18
c00138f2:	5b                   	pop    ebx
c00138f3:	c3                   	ret    

c00138f4 <ACPI::sleep()>:
c00138f4:	83 ec 0c             	sub    esp,0xc
c00138f7:	a1 c0 3c 02 c0       	mov    eax,ds:0xc0023cc0
c00138fc:	85 c0                	test   eax,eax
c00138fe:	74 07                	je     c0013907 <ACPI::sleep()+0x13>
c0013900:	a1 c0 3c 02 c0       	mov    eax,ds:0xc0023cc0
c0013905:	ff d0                	call   eax
c0013907:	90                   	nop
c0013908:	83 c4 0c             	add    esp,0xc
c001390b:	c3                   	ret    

c001390c <CPU::close(int, int, void*)>:
c001390c:	31 c0                	xor    eax,eax
c001390e:	c3                   	ret    

c001390f <lookupAMDCPUName(unsigned char, unsigned char)>:
c001390f:	55                   	push   ebp
c0013910:	57                   	push   edi
c0013911:	56                   	push   esi
c0013912:	53                   	push   ebx
c0013913:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013917:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001391b:	89 ce                	mov    esi,ecx
c001391d:	89 d5                	mov    ebp,edx
c001391f:	80 f9 04             	cmp    cl,0x4
c0013922:	75 28                	jne    c001394c <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0013924:	8d 42 f9             	lea    eax,[edx-0x7]
c0013927:	3c 03                	cmp    al,0x3
c0013929:	0f 86 63 01 00 00    	jbe    c0013a92 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001392f:	80 fa 03             	cmp    dl,0x3
c0013932:	0f 84 5a 01 00 00    	je     c0013a92 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013938:	8d 7a f2             	lea    edi,[edx-0xe]
c001393b:	b8 70 2f 02 c0       	mov    eax,0xc0022f70
c0013940:	89 fb                	mov    ebx,edi
c0013942:	80 fb 01             	cmp    bl,0x1
c0013945:	77 4e                	ja     c0013995 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0013947:	e9 52 01 00 00       	jmp    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001394c:	80 f9 05             	cmp    cl,0x5
c001394f:	75 4d                	jne    c001399e <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0013951:	b8 80 2f 02 c0       	mov    eax,0xc0022f80
c0013956:	80 fa 03             	cmp    dl,0x3
c0013959:	0f 86 3f 01 00 00    	jbe    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001395f:	8d 7a fa             	lea    edi,[edx-0x6]
c0013962:	b8 90 2f 02 c0       	mov    eax,0xc0022f90
c0013967:	89 fb                	mov    ebx,edi
c0013969:	80 fb 01             	cmp    bl,0x1
c001396c:	0f 86 2c 01 00 00    	jbe    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013972:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c0013977:	80 fa 08             	cmp    dl,0x8
c001397a:	0f 84 1e 01 00 00    	je     c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013980:	89 d7                	mov    edi,edx
c0013982:	b8 b0 2f 02 c0       	mov    eax,0xc0022fb0
c0013987:	83 e7 fb             	and    edi,0xfffffffb
c001398a:	89 fb                	mov    ebx,edi
c001398c:	80 fb 09             	cmp    bl,0x9
c001398f:	0f 84 09 01 00 00    	je     c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013995:	31 c0                	xor    eax,eax
c0013997:	89 eb                	mov    ebx,ebp
c0013999:	0f b6 fb             	movzx  edi,bl
c001399c:	eb 30                	jmp    c00139ce <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c001399e:	31 c0                	xor    eax,eax
c00139a0:	80 f9 06             	cmp    cl,0x6
c00139a3:	75 f2                	jne    c0013997 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139a5:	80 fa 0a             	cmp    dl,0xa
c00139a8:	77 ed                	ja     c0013997 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139aa:	bf de 05 00 00       	mov    edi,0x5de
c00139af:	0f a3 d7             	bt     edi,edx
c00139b2:	73 e3                	jae    c0013997 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139b4:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c00139b9:	e9 e0 00 00 00       	jmp    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139be:	39 c7                	cmp    edi,eax
c00139c0:	0f 84 d3 00 00 00    	je     c0013a99 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00139c6:	40                   	inc    eax
c00139c7:	3d d0 00 00 00       	cmp    eax,0xd0
c00139cc:	74 09                	je     c00139d7 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c00139ce:	89 f3                	mov    ebx,esi
c00139d0:	80 fb 0f             	cmp    bl,0xf
c00139d3:	75 f1                	jne    c00139c6 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c00139d5:	eb e7                	jmp    c00139be <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c00139d7:	80 f9 10             	cmp    cl,0x10
c00139da:	75 14                	jne    c00139f0 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c00139dc:	8d 42 fc             	lea    eax,[edx-0x4]
c00139df:	83 e0 fb             	and    eax,0xfffffffb
c00139e2:	3c 02                	cmp    al,0x2
c00139e4:	76 34                	jbe    c0013a1a <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c00139e6:	b8 29 16 02 c0       	mov    eax,0xc0021629
c00139eb:	80 fa 02             	cmp    dl,0x2
c00139ee:	eb 24                	jmp    c0013a14 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c00139f0:	80 f9 11             	cmp    cl,0x11
c00139f3:	75 13                	jne    c0013a08 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c00139f5:	b8 29 16 02 c0       	mov    eax,0xc0021629
c00139fa:	80 fa 03             	cmp    dl,0x3
c00139fd:	0f 85 9b 00 00 00    	jne    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a03:	e9 91 00 00 00       	jmp    c0013a99 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a08:	80 f9 12             	cmp    cl,0x12
c0013a0b:	75 14                	jne    c0013a21 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0013a0d:	b8 29 16 02 c0       	mov    eax,0xc0021629
c0013a12:	fe ca                	dec    dl
c0013a14:	0f 85 84 00 00 00    	jne    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a1a:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013a1f:	eb 7d                	jmp    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a21:	80 f9 14             	cmp    cl,0x14
c0013a24:	75 12                	jne    c0013a38 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013a26:	4a                   	dec    edx
c0013a27:	b8 29 16 02 c0       	mov    eax,0xc0021629
c0013a2c:	80 fa 01             	cmp    dl,0x1
c0013a2f:	77 6d                	ja     c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a31:	b8 f0 2f 02 c0       	mov    eax,0xc0022ff0
c0013a36:	eb 66                	jmp    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a38:	80 f9 15             	cmp    cl,0x15
c0013a3b:	75 31                	jne    c0013a6e <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0013a3d:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013a42:	80 fa 01             	cmp    dl,0x1
c0013a45:	74 57                	je     c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a47:	b8 29 16 02 c0       	mov    eax,0xc0021629
c0013a4c:	80 fa 13             	cmp    dl,0x13
c0013a4f:	76 0c                	jbe    c0013a5d <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013a51:	80 fa 30             	cmp    dl,0x30
c0013a54:	75 48                	jne    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a56:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0013a5b:	eb 41                	jmp    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a5d:	b9 04 00 09 00       	mov    ecx,0x90004
c0013a62:	0f a3 d1             	bt     ecx,edx
c0013a65:	73 37                	jae    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a67:	b8 10 30 02 c0       	mov    eax,0xc0023010
c0013a6c:	eb 30                	jmp    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a6e:	b8 29 16 02 c0       	mov    eax,0xc0021629
c0013a73:	80 f9 16             	cmp    cl,0x16
c0013a76:	75 26                	jne    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a78:	b8 30 30 02 c0       	mov    eax,0xc0023030
c0013a7d:	84 d2                	test   dl,dl
c0013a7f:	74 1d                	je     c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a81:	b8 29 16 02 c0       	mov    eax,0xc0021629
c0013a86:	80 fa 30             	cmp    dl,0x30
c0013a89:	75 13                	jne    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a8b:	b8 40 30 02 c0       	mov    eax,0xc0023040
c0013a90:	eb 0c                	jmp    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a92:	b8 60 2f 02 c0       	mov    eax,0xc0022f60
c0013a97:	eb 05                	jmp    c0013a9e <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a99:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c0013a9e:	5b                   	pop    ebx
c0013a9f:	5e                   	pop    esi
c0013aa0:	5f                   	pop    edi
c0013aa1:	5d                   	pop    ebp
c0013aa2:	c3                   	ret    

c0013aa3 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013aa3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013aa7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013aab:	80 f9 04             	cmp    cl,0x4
c0013aae:	75 6b                	jne    c0013b1b <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013ab0:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c0013ab5:	80 fa 01             	cmp    dl,0x1
c0013ab8:	0f 86 92 02 00 00    	jbe    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013abe:	b8 d0 2d 02 c0       	mov    eax,0xc0022dd0
c0013ac3:	80 fa 02             	cmp    dl,0x2
c0013ac6:	0f 84 84 02 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013acc:	b8 e0 2d 02 c0       	mov    eax,0xc0022de0
c0013ad1:	80 fa 03             	cmp    dl,0x3
c0013ad4:	0f 84 76 02 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ada:	b8 f0 2d 02 c0       	mov    eax,0xc0022df0
c0013adf:	80 fa 04             	cmp    dl,0x4
c0013ae2:	0f 84 68 02 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ae8:	b8 00 2e 02 c0       	mov    eax,0xc0022e00
c0013aed:	80 fa 05             	cmp    dl,0x5
c0013af0:	0f 84 5a 02 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013af6:	b8 e0 2d 02 c0       	mov    eax,0xc0022de0
c0013afb:	80 fa 07             	cmp    dl,0x7
c0013afe:	0f 84 4c 02 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b04:	83 ea 08             	sub    edx,0x8
c0013b07:	b8 29 16 02 c0       	mov    eax,0xc0021629
c0013b0c:	80 fa 01             	cmp    dl,0x1
c0013b0f:	0f 87 3b 02 00 00    	ja     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b15:	b8 10 2e 02 c0       	mov    eax,0xc0022e10
c0013b1a:	c3                   	ret    
c0013b1b:	80 f9 05             	cmp    cl,0x5
c0013b1e:	75 45                	jne    c0013b65 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013b20:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013b23:	b8 20 2e 02 c0       	mov    eax,0xc0022e20
c0013b28:	80 f9 02             	cmp    cl,0x2
c0013b2b:	0f 86 1f 02 00 00    	jbe    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b31:	80 fa 04             	cmp    dl,0x4
c0013b34:	0f 84 f3 01 00 00    	je     c0013d2d <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0013b3a:	80 fa 07             	cmp    dl,0x7
c0013b3d:	0f 84 0d 02 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b43:	b8 30 2e 02 c0       	mov    eax,0xc0022e30
c0013b48:	80 fa 08             	cmp    dl,0x8
c0013b4b:	0f 84 ff 01 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b51:	b8 29 16 02 c0       	mov    eax,0xc0021629
c0013b56:	80 fa 09             	cmp    dl,0x9
c0013b59:	0f 85 f1 01 00 00    	jne    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b5f:	b8 40 2e 02 c0       	mov    eax,0xc0022e40
c0013b64:	c3                   	ret    
c0013b65:	80 f9 06             	cmp    cl,0x6
c0013b68:	0f 85 85 01 00 00    	jne    c0013cf3 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013b6e:	b8 50 2e 02 c0       	mov    eax,0xc0022e50
c0013b73:	80 fa 01             	cmp    dl,0x1
c0013b76:	0f 84 d4 01 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b7c:	8d 42 fb             	lea    eax,[edx-0x5]
c0013b7f:	3c 01                	cmp    al,0x1
c0013b81:	0f 86 ac 01 00 00    	jbe    c0013d33 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013b87:	80 fa 03             	cmp    dl,0x3
c0013b8a:	0f 84 a3 01 00 00    	je     c0013d33 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013b90:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013b93:	b8 70 2e 02 c0       	mov    eax,0xc0022e70
c0013b98:	80 f9 01             	cmp    cl,0x1
c0013b9b:	0f 86 af 01 00 00    	jbe    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ba1:	80 fa 09             	cmp    dl,0x9
c0013ba4:	0f 84 8f 01 00 00    	je     c0013d39 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013baa:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013bad:	80 f9 01             	cmp    cl,0x1
c0013bb0:	0f 86 9a 01 00 00    	jbe    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bb6:	b8 80 2e 02 c0       	mov    eax,0xc0022e80
c0013bbb:	80 fa 0d             	cmp    dl,0xd
c0013bbe:	0f 84 8c 01 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bc4:	b8 90 2e 02 c0       	mov    eax,0xc0022e90
c0013bc9:	80 fa 0e             	cmp    dl,0xe
c0013bcc:	0f 84 7e 01 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bd2:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c0013bd7:	80 fa 0f             	cmp    dl,0xf
c0013bda:	0f 84 70 01 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013be0:	b8 80 2e 02 c0       	mov    eax,0xc0022e80
c0013be5:	80 fa 15             	cmp    dl,0x15
c0013be8:	0f 84 62 01 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bee:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013bf1:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c0013bf6:	80 f9 01             	cmp    cl,0x1
c0013bf9:	0f 86 51 01 00 00    	jbe    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bff:	80 fa 1a             	cmp    dl,0x1a
c0013c02:	0f 84 37 01 00 00    	je     c0013d3f <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013c08:	80 fa 1c             	cmp    dl,0x1c
c0013c0b:	0f 84 34 01 00 00    	je     c0013d45 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013c11:	80 fa 1d             	cmp    dl,0x1d
c0013c14:	0f 84 36 01 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c1a:	b8 d0 2e 02 c0       	mov    eax,0xc0022ed0
c0013c1f:	80 fa 25             	cmp    dl,0x25
c0013c22:	0f 84 28 01 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c28:	8d 4a da             	lea    ecx,[edx-0x26]
c0013c2b:	b8 c0 2e 02 c0       	mov    eax,0xc0022ec0
c0013c30:	80 f9 01             	cmp    cl,0x1
c0013c33:	0f 86 17 01 00 00    	jbe    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c39:	b8 e0 2e 02 c0       	mov    eax,0xc0022ee0
c0013c3e:	80 fa 2a             	cmp    dl,0x2a
c0013c41:	0f 84 09 01 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c47:	b8 d0 2e 02 c0       	mov    eax,0xc0022ed0
c0013c4c:	80 fa 2c             	cmp    dl,0x2c
c0013c4f:	0f 84 fb 00 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c55:	b8 e0 2e 02 c0       	mov    eax,0xc0022ee0
c0013c5a:	80 fa 2d             	cmp    dl,0x2d
c0013c5d:	0f 84 ed 00 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c63:	b8 b0 2e 02 c0       	mov    eax,0xc0022eb0
c0013c68:	80 fa 2e             	cmp    dl,0x2e
c0013c6b:	0f 84 df 00 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c71:	b8 d0 2e 02 c0       	mov    eax,0xc0022ed0
c0013c76:	80 fa 2f             	cmp    dl,0x2f
c0013c79:	0f 84 d1 00 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c7f:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013c82:	b8 c0 2e 02 c0       	mov    eax,0xc0022ec0
c0013c87:	80 f9 01             	cmp    cl,0x1
c0013c8a:	0f 86 c0 00 00 00    	jbe    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c90:	b8 f0 2e 02 c0       	mov    eax,0xc0022ef0
c0013c95:	80 fa 37             	cmp    dl,0x37
c0013c98:	0f 84 b2 00 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c9e:	b8 00 2f 02 c0       	mov    eax,0xc0022f00
c0013ca3:	80 fa 3a             	cmp    dl,0x3a
c0013ca6:	0f 84 a4 00 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cac:	b8 10 2f 02 c0       	mov    eax,0xc0022f10
c0013cb1:	80 fa 3c             	cmp    dl,0x3c
c0013cb4:	0f 84 96 00 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cba:	b8 20 2f 02 c0       	mov    eax,0xc0022f20
c0013cbf:	80 fa 3d             	cmp    dl,0x3d
c0013cc2:	0f 84 88 00 00 00    	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cc8:	b8 00 2f 02 c0       	mov    eax,0xc0022f00
c0013ccd:	80 fa 3e             	cmp    dl,0x3e
c0013cd0:	74 7e                	je     c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cd2:	8d 42 bb             	lea    eax,[edx-0x45]
c0013cd5:	3c 01                	cmp    al,0x1
c0013cd7:	76 72                	jbe    c0013d4b <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013cd9:	80 fa 3f             	cmp    dl,0x3f
c0013cdc:	74 6d                	je     c0013d4b <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013cde:	80 fa 4a             	cmp    dl,0x4a
c0013ce1:	74 0a                	je     c0013ced <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013ce3:	b8 29 16 02 c0       	mov    eax,0xc0021629
c0013ce8:	80 fa 4d             	cmp    dl,0x4d
c0013ceb:	75 63                	jne    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ced:	b8 f0 2e 02 c0       	mov    eax,0xc0022ef0
c0013cf2:	c3                   	ret    
c0013cf3:	b8 29 16 02 c0       	mov    eax,0xc0021629
c0013cf8:	80 f9 0b             	cmp    cl,0xb
c0013cfb:	75 0a                	jne    c0013d07 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013cfd:	fe ca                	dec    dl
c0013cff:	75 4f                	jne    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d01:	b8 30 2f 02 c0       	mov    eax,0xc0022f30
c0013d06:	c3                   	ret    
c0013d07:	80 f9 0f             	cmp    cl,0xf
c0013d0a:	75 44                	jne    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d0c:	b8 40 2f 02 c0       	mov    eax,0xc0022f40
c0013d11:	80 fa 02             	cmp    dl,0x2
c0013d14:	76 3a                	jbe    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d16:	8d 42 fd             	lea    eax,[edx-0x3]
c0013d19:	3c 01                	cmp    al,0x1
c0013d1b:	76 0a                	jbe    c0013d27 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013d1d:	b8 29 16 02 c0       	mov    eax,0xc0021629
c0013d22:	80 fa 06             	cmp    dl,0x6
c0013d25:	75 29                	jne    c0013d50 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d27:	b8 50 2f 02 c0       	mov    eax,0xc0022f50
c0013d2c:	c3                   	ret    
c0013d2d:	b8 30 2e 02 c0       	mov    eax,0xc0022e30
c0013d32:	c3                   	ret    
c0013d33:	b8 60 2e 02 c0       	mov    eax,0xc0022e60
c0013d38:	c3                   	ret    
c0013d39:	b8 80 2e 02 c0       	mov    eax,0xc0022e80
c0013d3e:	c3                   	ret    
c0013d3f:	b8 b0 2e 02 c0       	mov    eax,0xc0022eb0
c0013d44:	c3                   	ret    
c0013d45:	b8 c0 2e 02 c0       	mov    eax,0xc0022ec0
c0013d4a:	c3                   	ret    
c0013d4b:	b8 10 2f 02 c0       	mov    eax,0xc0022f10
c0013d50:	c3                   	ret    

c0013d51 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013d51:	60                   	pusha  
c0013d52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013d56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d5e:	9c                   	pushf  
c0013d5f:	fa                   	cli    
c0013d60:	0f 09                	wbinvd 
c0013d62:	0f 30                	wrmsr  
c0013d64:	9d                   	popf   
c0013d65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d69:	89 02                	mov    DWORD PTR [edx],eax
c0013d6b:	61                   	popa   
c0013d6c:	c3                   	ret    

c0013d6d <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013d6d:	60                   	pusha  
c0013d6e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013d72:	9c                   	pushf  
c0013d73:	fa                   	cli    
c0013d74:	0f 09                	wbinvd 
c0013d76:	31 c0                	xor    eax,eax
c0013d78:	31 d2                	xor    edx,edx
c0013d7a:	0f 32                	rdmsr  
c0013d7c:	9d                   	popf   
c0013d7d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013d81:	89 02                	mov    DWORD PTR [edx],eax
c0013d83:	61                   	popa   
c0013d84:	c3                   	ret    

c0013d85 <AMD_K6_writeback(int, int, int)>:
c0013d85:	56                   	push   esi
c0013d86:	53                   	push   ebx
c0013d87:	83 ec 10             	sub    esp,0x10
c0013d8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d8e:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013d93:	75 5d                	jne    c0013df2 <AMD_K6_writeback(int, int, int)+0x6d>
c0013d95:	83 f8 08             	cmp    eax,0x8
c0013d98:	75 09                	jne    c0013da3 <AMD_K6_writeback(int, int, int)+0x1e>
c0013d9a:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013d9f:	7e 13                	jle    c0013db4 <AMD_K6_writeback(int, int, int)+0x2f>
c0013da1:	eb 30                	jmp    c0013dd3 <AMD_K6_writeback(int, int, int)+0x4e>
c0013da3:	83 f8 06             	cmp    eax,0x6
c0013da6:	7c 4a                	jl     c0013df2 <AMD_K6_writeback(int, int, int)+0x6d>
c0013da8:	83 f8 07             	cmp    eax,0x7
c0013dab:	7e 07                	jle    c0013db4 <AMD_K6_writeback(int, int, int)+0x2f>
c0013dad:	83 f8 09             	cmp    eax,0x9
c0013db0:	74 21                	je     c0013dd3 <AMD_K6_writeback(int, int, int)+0x4e>
c0013db2:	eb 3e                	jmp    c0013df2 <AMD_K6_writeback(int, int, int)+0x6d>
c0013db4:	89 e6                	mov    esi,esp
c0013db6:	8b 1d 84 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023684
c0013dbc:	56                   	push   esi
c0013dbd:	c1 eb 15             	shr    ebx,0x15
c0013dc0:	68 82 00 00 c0       	push   0xc0000082
c0013dc5:	83 e3 7e             	and    ebx,0x7e
c0013dc8:	e8 a0 ff ff ff       	call   c0013d6d <AMD_K6_read_msr(unsigned int, REGS*)>
c0013dcd:	56                   	push   esi
c0013dce:	6a 00                	push   0x0
c0013dd0:	53                   	push   ebx
c0013dd1:	eb 12                	jmp    c0013de5 <AMD_K6_writeback(int, int, int)+0x60>
c0013dd3:	89 e3                	mov    ebx,esp
c0013dd5:	53                   	push   ebx
c0013dd6:	68 82 00 00 c0       	push   0xc0000082
c0013ddb:	e8 8d ff ff ff       	call   c0013d6d <AMD_K6_read_msr(unsigned int, REGS*)>
c0013de0:	53                   	push   ebx
c0013de1:	6a 00                	push   0x0
c0013de3:	6a 00                	push   0x0
c0013de5:	68 82 00 00 c0       	push   0xc0000082
c0013dea:	e8 62 ff ff ff       	call   c0013d51 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013def:	83 c4 18             	add    esp,0x18
c0013df2:	83 c4 10             	add    esp,0x10
c0013df5:	5b                   	pop    ebx
c0013df6:	5e                   	pop    esi
c0013df7:	c3                   	ret    

c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013df8:	55                   	push   ebp
c0013df9:	57                   	push   edi
c0013dfa:	56                   	push   esi
c0013dfb:	53                   	push   ebx
c0013dfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e00:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013e04:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e08:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013e0c:	39 05 60 30 02 c0    	cmp    DWORD PTR ds:0xc0023060,eax
c0013e12:	75 23                	jne    c0013e37 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013e14:	a1 8c 40 02 c0       	mov    eax,ds:0xc002408c
c0013e19:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e1d:	89 06                	mov    DWORD PTR [esi],eax
c0013e1f:	a1 88 40 02 c0       	mov    eax,ds:0xc0024088
c0013e24:	89 07                	mov    DWORD PTR [edi],eax
c0013e26:	a1 84 40 02 c0       	mov    eax,ds:0xc0024084
c0013e2b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e2e:	a1 80 40 02 c0       	mov    eax,ds:0xc0024080
c0013e33:	89 02                	mov    DWORD PTR [edx],eax
c0013e35:	eb 3f                	jmp    c0013e76 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013e37:	31 c9                	xor    ecx,ecx
c0013e39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e3d:	0f a2                	cpuid  
c0013e3f:	89 06                	mov    DWORD PTR [esi],eax
c0013e41:	89 1f                	mov    DWORD PTR [edi],ebx
c0013e43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e47:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013e4a:	89 10                	mov    DWORD PTR [eax],edx
c0013e4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e50:	a3 60 30 02 c0       	mov    ds:0xc0023060,eax
c0013e55:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e57:	a3 8c 40 02 c0       	mov    ds:0xc002408c,eax
c0013e5c:	8b 07                	mov    eax,DWORD PTR [edi]
c0013e5e:	a3 88 40 02 c0       	mov    ds:0xc0024088,eax
c0013e63:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e66:	a3 84 40 02 c0       	mov    ds:0xc0024084,eax
c0013e6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e71:	a3 80 40 02 c0       	mov    ds:0xc0024080,eax
c0013e76:	5b                   	pop    ebx
c0013e77:	5e                   	pop    esi
c0013e78:	5f                   	pop    edi
c0013e79:	5d                   	pop    ebp
c0013e7a:	c3                   	ret    

c0013e7b <cpuidCheckEDX(unsigned int)>:
c0013e7b:	83 ec 10             	sub    esp,0x10
c0013e7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e82:	50                   	push   eax
c0013e83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e87:	50                   	push   eax
c0013e88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e8c:	50                   	push   eax
c0013e8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013e91:	50                   	push   eax
c0013e92:	6a 01                	push   0x1
c0013e94:	e8 5f ff ff ff       	call   c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013e99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e9d:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013ea1:	0f 95 c0             	setne  al
c0013ea4:	83 c4 24             	add    esp,0x24
c0013ea7:	c3                   	ret    

c0013ea8 <cpuidCheckECX(unsigned int)>:
c0013ea8:	83 ec 10             	sub    esp,0x10
c0013eab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013eaf:	50                   	push   eax
c0013eb0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013eb4:	50                   	push   eax
c0013eb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013eb9:	50                   	push   eax
c0013eba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ebe:	50                   	push   eax
c0013ebf:	6a 01                	push   0x1
c0013ec1:	e8 32 ff ff ff       	call   c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ec6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013eca:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013ece:	0f 95 c0             	setne  al
c0013ed1:	83 c4 24             	add    esp,0x24
c0013ed4:	c3                   	ret    

c0013ed5 <cpuidCheckExtendedEBX(unsigned int)>:
c0013ed5:	83 ec 10             	sub    esp,0x10
c0013ed8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013edc:	50                   	push   eax
c0013edd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ee1:	50                   	push   eax
c0013ee2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ee6:	50                   	push   eax
c0013ee7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013eeb:	50                   	push   eax
c0013eec:	6a 07                	push   0x7
c0013eee:	e8 05 ff ff ff       	call   c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ef3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ef7:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013efb:	0f 95 c0             	setne  al
c0013efe:	83 c4 24             	add    esp,0x24
c0013f01:	c3                   	ret    

c0013f02 <cpuidCheckExtendedECX(unsigned int)>:
c0013f02:	83 ec 10             	sub    esp,0x10
c0013f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f09:	50                   	push   eax
c0013f0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f0e:	50                   	push   eax
c0013f0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f13:	50                   	push   eax
c0013f14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f18:	50                   	push   eax
c0013f19:	6a 07                	push   0x7
c0013f1b:	e8 d8 fe ff ff       	call   c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f24:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f28:	0f 95 c0             	setne  al
c0013f2b:	83 c4 24             	add    esp,0x24
c0013f2e:	c3                   	ret    

c0013f2f <getCPUNumber()>:
c0013f2f:	31 c0                	xor    eax,eax
c0013f31:	c3                   	ret    

c0013f32 <thisCPU()>:
c0013f32:	e8 f8 ff ff ff       	call   c0013f2f <getCPUNumber()>
c0013f37:	8b 15 48 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023648
c0013f3d:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013f44:	c3                   	ret    
c0013f45:	90                   	nop

c0013f46 <CPU::CPU()>:
c0013f46:	83 ec 0c             	sub    esp,0xc
c0013f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f4d:	83 ec 08             	sub    esp,0x8
c0013f50:	68 29 16 02 c0       	push   0xc0021629
c0013f55:	50                   	push   eax
c0013f56:	e8 43 c6 ff ff       	call   c001059e <Device::Device(char const*)>
c0013f5b:	83 c4 10             	add    esp,0x10
c0013f5e:	ba 00 17 02 c0       	mov    edx,0xc0021700
c0013f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f67:	89 10                	mov    DWORD PTR [eax],edx
c0013f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f7b:	05 78 01 00 00       	add    eax,0x178
c0013f80:	83 ec 0c             	sub    esp,0xc
c0013f83:	50                   	push   eax
c0013f84:	e8 a5 74 ff ff       	call   c000b42e <GDT::GDT()>
c0013f89:	83 c4 10             	add    esp,0x10
c0013f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f90:	05 7c 09 00 00       	add    eax,0x97c
c0013f95:	83 ec 0c             	sub    esp,0xc
c0013f98:	50                   	push   eax
c0013f99:	e8 f0 76 ff ff       	call   c000b68e <IDT::IDT()>
c0013f9e:	83 c4 10             	add    esp,0x10
c0013fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa5:	05 7c 11 00 00       	add    eax,0x117c
c0013faa:	83 ec 0c             	sub    esp,0xc
c0013fad:	50                   	push   eax
c0013fae:	e8 99 96 ff ff       	call   c000d64c <TSS::TSS()>
c0013fb3:	83 c4 10             	add    esp,0x10
c0013fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fba:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013fcf:	90                   	nop
c0013fd0:	83 c4 0c             	add    esp,0xc
c0013fd3:	c3                   	ret    

c0013fd4 <CPU::displayFeatures()>:
c0013fd4:	c3                   	ret    
c0013fd5:	90                   	nop

c0013fd6 <CPU::detectFeatures()>:
c0013fd6:	55                   	push   ebp
c0013fd7:	57                   	push   edi
c0013fd8:	56                   	push   esi
c0013fd9:	53                   	push   ebx
c0013fda:	83 ec 50             	sub    esp,0x50
c0013fdd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013fe1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013feb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013ff2:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0013ff8:	6a 0d                	push   0xd
c0013ffa:	6a 00                	push   0x0
c0013ffc:	57                   	push   edi
c0013ffd:	e8 06 c6 fe ff       	call   c0000608 <memset>
c0014002:	83 c4 10             	add    esp,0x10
c0014005:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c001400a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014011:	0f 84 20 09 00 00    	je     c0014937 <CPU::detectFeatures()+0x961>
c0014017:	83 ec 0c             	sub    esp,0xc
c001401a:	6a 10                	push   0x10
c001401c:	e8 5a fe ff ff       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c0014021:	83 e0 01             	and    eax,0x1
c0014024:	8d 14 00             	lea    edx,[eax+eax*1]
c0014027:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001402d:	83 e0 fd             	and    eax,0xfffffffd
c0014030:	09 d0                	or     eax,edx
c0014032:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014038:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001403f:	e8 37 fe ff ff       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c0014044:	83 e0 01             	and    eax,0x1
c0014047:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001404e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014054:	83 e0 fb             	and    eax,0xfffffffb
c0014057:	09 d0                	or     eax,edx
c0014059:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001405f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014066:	e8 10 fe ff ff       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c001406b:	83 e0 01             	and    eax,0x1
c001406e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014075:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001407b:	83 e0 f7             	and    eax,0xfffffff7
c001407e:	09 d0                	or     eax,edx
c0014080:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014086:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001408d:	e8 e9 fd ff ff       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c0014092:	83 e0 01             	and    eax,0x1
c0014095:	c1 e0 04             	shl    eax,0x4
c0014098:	88 c2                	mov    dl,al
c001409a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140a0:	83 e0 ef             	and    eax,0xffffffef
c00140a3:	09 d0                	or     eax,edx
c00140a5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140ab:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00140b2:	e8 c4 fd ff ff       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c00140b7:	83 e0 01             	and    eax,0x1
c00140ba:	c1 e0 05             	shl    eax,0x5
c00140bd:	88 c2                	mov    dl,al
c00140bf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140c5:	83 e0 df             	and    eax,0xffffffdf
c00140c8:	09 d0                	or     eax,edx
c00140ca:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140d0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00140d7:	e8 9f fd ff ff       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c00140dc:	83 e0 01             	and    eax,0x1
c00140df:	8d 14 00             	lea    edx,[eax+eax*1]
c00140e2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00140e8:	83 e0 fd             	and    eax,0xfffffffd
c00140eb:	09 d0                	or     eax,edx
c00140ed:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00140f3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00140fa:	e8 7c fd ff ff       	call   c0013e7b <cpuidCheckEDX(unsigned int)>
c00140ff:	83 e0 01             	and    eax,0x1
c0014102:	c1 e0 06             	shl    eax,0x6
c0014105:	88 c2                	mov    dl,al
c0014107:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001410d:	83 e0 bf             	and    eax,0xffffffbf
c0014110:	09 d0                	or     eax,edx
c0014112:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014118:	58                   	pop    eax
c0014119:	8d 74 24 28          	lea    esi,[esp+0x28]
c001411d:	56                   	push   esi
c001411e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014122:	55                   	push   ebp
c0014123:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014127:	50                   	push   eax
c0014128:	8d 54 24 28          	lea    edx,[esp+0x28]
c001412c:	52                   	push   edx
c001412d:	6a 00                	push   0x0
c001412f:	e8 c4 fc ff ff       	call   c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014134:	83 c4 1c             	add    esp,0x1c
c0014137:	6a 04                	push   0x4
c0014139:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001413d:	50                   	push   eax
c001413e:	57                   	push   edi
c001413f:	e8 8e c4 fe ff       	call   c00005d2 <memcpy>
c0014144:	83 c4 0c             	add    esp,0xc
c0014147:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001414d:	6a 04                	push   0x4
c001414f:	56                   	push   esi
c0014150:	50                   	push   eax
c0014151:	e8 7c c4 fe ff       	call   c00005d2 <memcpy>
c0014156:	83 c4 0c             	add    esp,0xc
c0014159:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001415f:	6a 04                	push   0x4
c0014161:	55                   	push   ebp
c0014162:	50                   	push   eax
c0014163:	e8 6a c4 fe ff       	call   c00005d2 <memcpy>
c0014168:	58                   	pop    eax
c0014169:	5a                   	pop    edx
c001416a:	68 d4 14 02 c0       	push   0xc00214d4
c001416f:	57                   	push   edi
c0014170:	e8 83 c5 fe ff       	call   c00006f8 <strcmp>
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	85 c0                	test   eax,eax
c001417a:	75 0f                	jne    c001418b <CPU::detectFeatures()+0x1b5>
c001417c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014186:	e9 22 02 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c001418b:	50                   	push   eax
c001418c:	50                   	push   eax
c001418d:	68 e1 14 02 c0       	push   0xc00214e1
c0014192:	57                   	push   edi
c0014193:	e8 60 c5 fe ff       	call   c00006f8 <strcmp>
c0014198:	83 c4 10             	add    esp,0x10
c001419b:	85 c0                	test   eax,eax
c001419d:	74 dd                	je     c001417c <CPU::detectFeatures()+0x1a6>
c001419f:	51                   	push   ecx
c00141a0:	51                   	push   ecx
c00141a1:	68 ee 14 02 c0       	push   0xc00214ee
c00141a6:	57                   	push   edi
c00141a7:	e8 4c c5 fe ff       	call   c00006f8 <strcmp>
c00141ac:	83 c4 10             	add    esp,0x10
c00141af:	85 c0                	test   eax,eax
c00141b1:	74 2a                	je     c00141dd <CPU::detectFeatures()+0x207>
c00141b3:	52                   	push   edx
c00141b4:	52                   	push   edx
c00141b5:	68 fb 14 02 c0       	push   0xc00214fb
c00141ba:	57                   	push   edi
c00141bb:	e8 38 c5 fe ff       	call   c00006f8 <strcmp>
c00141c0:	83 c4 10             	add    esp,0x10
c00141c3:	85 c0                	test   eax,eax
c00141c5:	74 16                	je     c00141dd <CPU::detectFeatures()+0x207>
c00141c7:	50                   	push   eax
c00141c8:	50                   	push   eax
c00141c9:	68 08 15 02 c0       	push   0xc0021508
c00141ce:	57                   	push   edi
c00141cf:	e8 24 c5 fe ff       	call   c00006f8 <strcmp>
c00141d4:	83 c4 10             	add    esp,0x10
c00141d7:	85 c0                	test   eax,eax
c00141d9:	74 48                	je     c0014223 <CPU::detectFeatures()+0x24d>
c00141db:	eb 0f                	jmp    c00141ec <CPU::detectFeatures()+0x216>
c00141dd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00141e7:	e9 c1 01 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c00141ec:	50                   	push   eax
c00141ed:	50                   	push   eax
c00141ee:	68 15 15 02 c0       	push   0xc0021515
c00141f3:	57                   	push   edi
c00141f4:	e8 ff c4 fe ff       	call   c00006f8 <strcmp>
c00141f9:	83 c4 10             	add    esp,0x10
c00141fc:	85 c0                	test   eax,eax
c00141fe:	74 23                	je     c0014223 <CPU::detectFeatures()+0x24d>
c0014200:	50                   	push   eax
c0014201:	50                   	push   eax
c0014202:	68 22 15 02 c0       	push   0xc0021522
c0014207:	57                   	push   edi
c0014208:	e8 eb c4 fe ff       	call   c00006f8 <strcmp>
c001420d:	83 c4 10             	add    esp,0x10
c0014210:	85 c0                	test   eax,eax
c0014212:	75 1e                	jne    c0014232 <CPU::detectFeatures()+0x25c>
c0014214:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001421e:	e9 8a 01 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c0014223:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001422d:	e9 7b 01 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c0014232:	50                   	push   eax
c0014233:	50                   	push   eax
c0014234:	68 2f 15 02 c0       	push   0xc002152f
c0014239:	57                   	push   edi
c001423a:	e8 b9 c4 fe ff       	call   c00006f8 <strcmp>
c001423f:	83 c4 10             	add    esp,0x10
c0014242:	85 c0                	test   eax,eax
c0014244:	75 0f                	jne    c0014255 <CPU::detectFeatures()+0x27f>
c0014246:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014250:	e9 58 01 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c0014255:	50                   	push   eax
c0014256:	50                   	push   eax
c0014257:	68 ee 14 02 c0       	push   0xc00214ee
c001425c:	57                   	push   edi
c001425d:	e8 96 c4 fe ff       	call   c00006f8 <strcmp>
c0014262:	83 c4 10             	add    esp,0x10
c0014265:	85 c0                	test   eax,eax
c0014267:	75 0f                	jne    c0014278 <CPU::detectFeatures()+0x2a2>
c0014269:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014273:	e9 35 01 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c0014278:	50                   	push   eax
c0014279:	50                   	push   eax
c001427a:	68 3c 15 02 c0       	push   0xc002153c
c001427f:	57                   	push   edi
c0014280:	e8 73 c4 fe ff       	call   c00006f8 <strcmp>
c0014285:	83 c4 10             	add    esp,0x10
c0014288:	85 c0                	test   eax,eax
c001428a:	75 0f                	jne    c001429b <CPU::detectFeatures()+0x2c5>
c001428c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014296:	e9 12 01 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c001429b:	51                   	push   ecx
c001429c:	51                   	push   ecx
c001429d:	68 49 15 02 c0       	push   0xc0021549
c00142a2:	57                   	push   edi
c00142a3:	e8 50 c4 fe ff       	call   c00006f8 <strcmp>
c00142a8:	83 c4 10             	add    esp,0x10
c00142ab:	85 c0                	test   eax,eax
c00142ad:	75 0f                	jne    c00142be <CPU::detectFeatures()+0x2e8>
c00142af:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00142b9:	e9 ef 00 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c00142be:	52                   	push   edx
c00142bf:	52                   	push   edx
c00142c0:	68 56 15 02 c0       	push   0xc0021556
c00142c5:	57                   	push   edi
c00142c6:	e8 2d c4 fe ff       	call   c00006f8 <strcmp>
c00142cb:	83 c4 10             	add    esp,0x10
c00142ce:	85 c0                	test   eax,eax
c00142d0:	75 0f                	jne    c00142e1 <CPU::detectFeatures()+0x30b>
c00142d2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00142dc:	e9 cc 00 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c00142e1:	50                   	push   eax
c00142e2:	50                   	push   eax
c00142e3:	68 63 15 02 c0       	push   0xc0021563
c00142e8:	57                   	push   edi
c00142e9:	e8 0a c4 fe ff       	call   c00006f8 <strcmp>
c00142ee:	83 c4 10             	add    esp,0x10
c00142f1:	85 c0                	test   eax,eax
c00142f3:	75 0f                	jne    c0014304 <CPU::detectFeatures()+0x32e>
c00142f5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00142ff:	e9 a9 00 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c0014304:	50                   	push   eax
c0014305:	50                   	push   eax
c0014306:	68 70 15 02 c0       	push   0xc0021570
c001430b:	57                   	push   edi
c001430c:	e8 e7 c3 fe ff       	call   c00006f8 <strcmp>
c0014311:	83 c4 10             	add    esp,0x10
c0014314:	85 c0                	test   eax,eax
c0014316:	75 0f                	jne    c0014327 <CPU::detectFeatures()+0x351>
c0014318:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014322:	e9 86 00 00 00       	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c0014327:	50                   	push   eax
c0014328:	50                   	push   eax
c0014329:	68 7d 15 02 c0       	push   0xc002157d
c001432e:	57                   	push   edi
c001432f:	e8 c4 c3 fe ff       	call   c00006f8 <strcmp>
c0014334:	83 c4 10             	add    esp,0x10
c0014337:	85 c0                	test   eax,eax
c0014339:	75 0c                	jne    c0014347 <CPU::detectFeatures()+0x371>
c001433b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014345:	eb 66                	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c0014347:	50                   	push   eax
c0014348:	50                   	push   eax
c0014349:	68 8a 15 02 c0       	push   0xc002158a
c001434e:	57                   	push   edi
c001434f:	e8 a4 c3 fe ff       	call   c00006f8 <strcmp>
c0014354:	83 c4 10             	add    esp,0x10
c0014357:	85 c0                	test   eax,eax
c0014359:	75 0c                	jne    c0014367 <CPU::detectFeatures()+0x391>
c001435b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014365:	eb 46                	jmp    c00143ad <CPU::detectFeatures()+0x3d7>
c0014367:	50                   	push   eax
c0014368:	50                   	push   eax
c0014369:	68 97 15 02 c0       	push   0xc0021597
c001436e:	57                   	push   edi
c001436f:	e8 84 c3 fe ff       	call   c00006f8 <strcmp>
c0014374:	83 c4 10             	add    esp,0x10
c0014377:	85 c0                	test   eax,eax
c0014379:	74 e0                	je     c001435b <CPU::detectFeatures()+0x385>
c001437b:	50                   	push   eax
c001437c:	50                   	push   eax
c001437d:	68 a4 15 02 c0       	push   0xc00215a4
c0014382:	57                   	push   edi
c0014383:	e8 70 c3 fe ff       	call   c00006f8 <strcmp>
c0014388:	83 c4 10             	add    esp,0x10
c001438b:	85 c0                	test   eax,eax
c001438d:	74 cc                	je     c001435b <CPU::detectFeatures()+0x385>
c001438f:	51                   	push   ecx
c0014390:	51                   	push   ecx
c0014391:	68 b1 15 02 c0       	push   0xc00215b1
c0014396:	57                   	push   edi
c0014397:	e8 5c c3 fe ff       	call   c00006f8 <strcmp>
c001439c:	83 c4 10             	add    esp,0x10
c001439f:	85 c0                	test   eax,eax
c00143a1:	74 b8                	je     c001435b <CPU::detectFeatures()+0x385>
c00143a3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00143ad:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00143b2:	0f 86 be 00 00 00    	jbe    c0014476 <CPU::detectFeatures()+0x4a0>
c00143b8:	83 ec 0c             	sub    esp,0xc
c00143bb:	68 80 00 00 00       	push   0x80
c00143c0:	e8 10 fb ff ff       	call   c0013ed5 <cpuidCheckExtendedEBX(unsigned int)>
c00143c5:	83 e0 01             	and    eax,0x1
c00143c8:	c1 e0 06             	shl    eax,0x6
c00143cb:	88 c2                	mov    dl,al
c00143cd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00143d3:	83 e0 bf             	and    eax,0xffffffbf
c00143d6:	09 d0                	or     eax,edx
c00143d8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00143de:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00143e5:	e8 eb fa ff ff       	call   c0013ed5 <cpuidCheckExtendedEBX(unsigned int)>
c00143ea:	83 e0 01             	and    eax,0x1
c00143ed:	c1 e0 04             	shl    eax,0x4
c00143f0:	88 c2                	mov    dl,al
c00143f2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00143f8:	83 e0 ef             	and    eax,0xffffffef
c00143fb:	09 d0                	or     eax,edx
c00143fd:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014403:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001440a:	e8 c6 fa ff ff       	call   c0013ed5 <cpuidCheckExtendedEBX(unsigned int)>
c001440f:	c1 e0 07             	shl    eax,0x7
c0014412:	88 c2                	mov    dl,al
c0014414:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001441a:	83 e0 7f             	and    eax,0x7f
c001441d:	09 d0                	or     eax,edx
c001441f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014425:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001442c:	e8 d1 fa ff ff       	call   c0013f02 <cpuidCheckExtendedECX(unsigned int)>
c0014431:	83 e0 01             	and    eax,0x1
c0014434:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001443b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014441:	83 e0 f7             	and    eax,0xfffffff7
c0014444:	09 d0                	or     eax,edx
c0014446:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001444c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014453:	e8 aa fa ff ff       	call   c0013f02 <cpuidCheckExtendedECX(unsigned int)>
c0014458:	83 c4 10             	add    esp,0x10
c001445b:	83 e0 01             	and    eax,0x1
c001445e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014465:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001446b:	83 e0 fb             	and    eax,0xfffffffb
c001446e:	09 d0                	or     eax,edx
c0014470:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014476:	83 ec 0c             	sub    esp,0xc
c0014479:	56                   	push   esi
c001447a:	55                   	push   ebp
c001447b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001447f:	57                   	push   edi
c0014480:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014484:	50                   	push   eax
c0014485:	6a 01                	push   0x1
c0014487:	e8 6c f9 ff ff       	call   c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001448c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014490:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014496:	88 ca                	mov    dl,cl
c0014498:	83 e0 f0             	and    eax,0xfffffff0
c001449b:	83 e2 0f             	and    edx,0xf
c001449e:	09 d0                	or     eax,edx
c00144a0:	88 ca                	mov    dl,cl
c00144a2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00144a8:	c0 ea 04             	shr    dl,0x4
c00144ab:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00144af:	0f b6 c2             	movzx  eax,dl
c00144b2:	83 c4 20             	add    esp,0x20
c00144b5:	c1 e0 06             	shl    eax,0x6
c00144b8:	89 c5                	mov    ebp,eax
c00144ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00144c0:	66 25 3f c0          	and    ax,0xc03f
c00144c4:	09 e8                	or     eax,ebp
c00144c6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00144cd:	89 c8                	mov    eax,ecx
c00144cf:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00144d5:	c1 e8 08             	shr    eax,0x8
c00144d8:	83 e2 3f             	and    edx,0x3f
c00144db:	83 e0 0f             	and    eax,0xf
c00144de:	89 c5                	mov    ebp,eax
c00144e0:	c1 e5 06             	shl    ebp,0x6
c00144e3:	09 d5                	or     ebp,edx
c00144e5:	89 ea                	mov    edx,ebp
c00144e7:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00144ed:	88 c2                	mov    dl,al
c00144ef:	c0 ea 02             	shr    dl,0x2
c00144f2:	89 d5                	mov    ebp,edx
c00144f4:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00144fa:	83 e2 c0             	and    edx,0xffffffc0
c00144fd:	09 d5                	or     ebp,edx
c00144ff:	89 ea                	mov    edx,ebp
c0014501:	89 cd                	mov    ebp,ecx
c0014503:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014509:	c1 ed 0c             	shr    ebp,0xc
c001450c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014512:	83 e5 03             	and    ebp,0x3
c0014515:	83 e2 cf             	and    edx,0xffffffcf
c0014518:	c1 e5 04             	shl    ebp,0x4
c001451b:	09 d5                	or     ebp,edx
c001451d:	3c 06                	cmp    al,0x6
c001451f:	89 ea                	mov    edx,ebp
c0014521:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014527:	74 04                	je     c001452d <CPU::detectFeatures()+0x557>
c0014529:	3c 0f                	cmp    al,0xf
c001452b:	75 5c                	jne    c0014589 <CPU::detectFeatures()+0x5b3>
c001452d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014531:	89 cd                	mov    ebp,ecx
c0014533:	c1 ed 10             	shr    ebp,0x10
c0014536:	c1 e5 04             	shl    ebp,0x4
c0014539:	09 ea                	or     edx,ebp
c001453b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014541:	0f b6 d2             	movzx  edx,dl
c0014544:	66 81 e5 3f c0       	and    bp,0xc03f
c0014549:	c1 e2 06             	shl    edx,0x6
c001454c:	09 ea                	or     edx,ebp
c001454e:	3c 0f                	cmp    al,0xf
c0014550:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014557:	75 30                	jne    c0014589 <CPU::detectFeatures()+0x5b3>
c0014559:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001455f:	c1 e9 14             	shr    ecx,0x14
c0014562:	83 e0 3f             	and    eax,0x3f
c0014565:	83 c1 0f             	add    ecx,0xf
c0014568:	88 ca                	mov    dl,cl
c001456a:	c0 e9 02             	shr    cl,0x2
c001456d:	c1 e2 06             	shl    edx,0x6
c0014570:	09 d0                	or     eax,edx
c0014572:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014578:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001457e:	83 e0 c0             	and    eax,0xffffffc0
c0014581:	09 c1                	or     ecx,eax
c0014583:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014589:	83 ec 0c             	sub    esp,0xc
c001458c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014593:	56                   	push   esi
c0014594:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014598:	50                   	push   eax
c0014599:	57                   	push   edi
c001459a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001459e:	55                   	push   ebp
c001459f:	68 00 00 00 80       	push   0x80000000
c00145a4:	e8 4f f8 ff ff       	call   c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00145a9:	83 c4 20             	add    esp,0x20
c00145ac:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00145b4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00145b8:	76 1e                	jbe    c00145d8 <CPU::detectFeatures()+0x602>
c00145ba:	83 ec 0c             	sub    esp,0xc
c00145bd:	56                   	push   esi
c00145be:	50                   	push   eax
c00145bf:	57                   	push   edi
c00145c0:	55                   	push   ebp
c00145c1:	68 01 00 00 80       	push   0x80000001
c00145c6:	e8 2d f8 ff ff       	call   c0013df8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00145cb:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00145d5:	83 c4 20             	add    esp,0x20
c00145d8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00145de:	83 f8 01             	cmp    eax,0x1
c00145e1:	75 6f                	jne    c0014652 <CPU::detectFeatures()+0x67c>
c00145e3:	51                   	push   ecx
c00145e4:	51                   	push   ecx
c00145e5:	68 bd 15 02 c0       	push   0xc00215bd
c00145ea:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00145ee:	56                   	push   esi
c00145ef:	e8 b3 c0 fe ff       	call   c00006a7 <strcpy>
c00145f4:	5f                   	pop    edi
c00145f5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00145fb:	5d                   	pop    ebp
c00145fc:	66 c1 e8 06          	shr    ax,0x6
c0014600:	0f b6 c0             	movzx  eax,al
c0014603:	50                   	push   eax
c0014604:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001460a:	c1 e8 0e             	shr    eax,0xe
c001460d:	0f b6 c0             	movzx  eax,al
c0014610:	50                   	push   eax
c0014611:	e8 8d f4 ff ff       	call   c0013aa3 <lookupIntelCPUName(unsigned char, unsigned char)>
c0014616:	5a                   	pop    edx
c0014617:	59                   	pop    ecx
c0014618:	50                   	push   eax
c0014619:	56                   	push   esi
c001461a:	e8 3f c1 fe ff       	call   c000075e <strcat>
c001461f:	5f                   	pop    edi
c0014620:	5d                   	pop    ebp
c0014621:	56                   	push   esi
c0014622:	53                   	push   ebx
c0014623:	e8 68 bf ff ff       	call   c0010590 <Device::setName(char const*)>
c0014628:	58                   	pop    eax
c0014629:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001462f:	5a                   	pop    edx
c0014630:	68 c4 15 02 c0       	push   0xc00215c4
c0014635:	50                   	push   eax
c0014636:	e8 bd c0 fe ff       	call   c00006f8 <strcmp>
c001463b:	83 c4 10             	add    esp,0x10
c001463e:	85 c0                	test   eax,eax
c0014640:	0f 85 73 03 00 00    	jne    c00149b9 <CPU::detectFeatures()+0x9e3>
c0014646:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001464d:	e9 67 03 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x9e3>
c0014652:	83 f8 02             	cmp    eax,0x2
c0014655:	0f 85 b5 00 00 00    	jne    c0014710 <CPU::detectFeatures()+0x73a>
c001465b:	57                   	push   edi
c001465c:	57                   	push   edi
c001465d:	68 d6 15 02 c0       	push   0xc00215d6
c0014662:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014666:	56                   	push   esi
c0014667:	e8 3b c0 fe ff       	call   c00006a7 <strcpy>
c001466c:	5d                   	pop    ebp
c001466d:	58                   	pop    eax
c001466e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014674:	66 c1 e8 06          	shr    ax,0x6
c0014678:	0f b6 c0             	movzx  eax,al
c001467b:	50                   	push   eax
c001467c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014682:	c1 e8 0e             	shr    eax,0xe
c0014685:	0f b6 c0             	movzx  eax,al
c0014688:	50                   	push   eax
c0014689:	e8 81 f2 ff ff       	call   c001390f <lookupAMDCPUName(unsigned char, unsigned char)>
c001468e:	5a                   	pop    edx
c001468f:	59                   	pop    ecx
c0014690:	50                   	push   eax
c0014691:	56                   	push   esi
c0014692:	e8 c7 c0 fe ff       	call   c000075e <strcat>
c0014697:	5f                   	pop    edi
c0014698:	5d                   	pop    ebp
c0014699:	56                   	push   esi
c001469a:	53                   	push   ebx
c001469b:	e8 f0 be ff ff       	call   c0010590 <Device::setName(char const*)>
c00146a0:	58                   	pop    eax
c00146a1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00146a7:	5a                   	pop    edx
c00146a8:	68 db 15 02 c0       	push   0xc00215db
c00146ad:	50                   	push   eax
c00146ae:	e8 45 c0 fe ff       	call   c00006f8 <strcmp>
c00146b3:	83 c4 10             	add    esp,0x10
c00146b6:	85 c0                	test   eax,eax
c00146b8:	75 20                	jne    c00146da <CPU::detectFeatures()+0x704>
c00146ba:	8b 15 48 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023648
c00146c0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00146c6:	a8 01                	test   al,0x1
c00146c8:	74 10                	je     c00146da <CPU::detectFeatures()+0x704>
c00146ca:	83 e0 fe             	and    eax,0xfffffffe
c00146cd:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00146d3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00146da:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146e0:	c1 e8 0e             	shr    eax,0xe
c00146e3:	3c 05                	cmp    al,0x5
c00146e5:	0f 85 ce 02 00 00    	jne    c00149b9 <CPU::detectFeatures()+0x9e3>
c00146eb:	56                   	push   esi
c00146ec:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00146f2:	83 e0 0f             	and    eax,0xf
c00146f5:	50                   	push   eax
c00146f6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146fc:	66 c1 e8 06          	shr    ax,0x6
c0014700:	0f b6 c0             	movzx  eax,al
c0014703:	50                   	push   eax
c0014704:	6a 05                	push   0x5
c0014706:	e8 7a f6 ff ff       	call   c0013d85 <AMD_K6_writeback(int, int, int)>
c001470b:	e9 1f 02 00 00       	jmp    c001492f <CPU::detectFeatures()+0x959>
c0014710:	8d 50 fd             	lea    edx,[eax-0x3]
c0014713:	83 fa 01             	cmp    edx,0x1
c0014716:	76 09                	jbe    c0014721 <CPU::detectFeatures()+0x74b>
c0014718:	83 f8 06             	cmp    eax,0x6
c001471b:	0f 85 91 01 00 00    	jne    c00148b2 <CPU::detectFeatures()+0x8dc>
c0014721:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014727:	c1 ea 0e             	shr    edx,0xe
c001472a:	80 fa 05             	cmp    dl,0x5
c001472d:	75 7b                	jne    c00147aa <CPU::detectFeatures()+0x7d4>
c001472f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014735:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001473a:	66 81 fa 00 01       	cmp    dx,0x100
c001473f:	75 0c                	jne    c001474d <CPU::detectFeatures()+0x777>
c0014741:	51                   	push   ecx
c0014742:	51                   	push   ecx
c0014743:	68 e2 15 02 c0       	push   0xc00215e2
c0014748:	e9 dc 01 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c001474d:	66 81 fa 00 02       	cmp    dx,0x200
c0014752:	75 0c                	jne    c0014760 <CPU::detectFeatures()+0x78a>
c0014754:	52                   	push   edx
c0014755:	52                   	push   edx
c0014756:	68 f5 15 02 c0       	push   0xc00215f5
c001475b:	e9 c9 01 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c0014760:	66 81 fa 40 02       	cmp    dx,0x240
c0014765:	75 0c                	jne    c0014773 <CPU::detectFeatures()+0x79d>
c0014767:	50                   	push   eax
c0014768:	50                   	push   eax
c0014769:	68 07 16 02 c0       	push   0xc0021607
c001476e:	e9 b6 01 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c0014773:	83 f8 06             	cmp    eax,0x6
c0014776:	75 0c                	jne    c0014784 <CPU::detectFeatures()+0x7ae>
c0014778:	50                   	push   eax
c0014779:	50                   	push   eax
c001477a:	68 19 16 02 c0       	push   0xc0021619
c001477f:	e9 a5 01 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c0014784:	83 f8 04             	cmp    eax,0x4
c0014787:	75 0c                	jne    c0014795 <CPU::detectFeatures()+0x7bf>
c0014789:	50                   	push   eax
c001478a:	50                   	push   eax
c001478b:	68 25 16 02 c0       	push   0xc0021625
c0014790:	e9 94 01 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c0014795:	83 f8 03             	cmp    eax,0x3
c0014798:	0f 85 1b 02 00 00    	jne    c00149b9 <CPU::detectFeatures()+0x9e3>
c001479e:	50                   	push   eax
c001479f:	50                   	push   eax
c00147a0:	68 2d 16 02 c0       	push   0xc002162d
c00147a5:	e9 7f 01 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c00147aa:	80 fa 06             	cmp    dl,0x6
c00147ad:	0f 85 db 00 00 00    	jne    c001488e <CPU::detectFeatures()+0x8b8>
c00147b3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00147b9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00147be:	66 81 fa 80 01       	cmp    dx,0x180
c00147c3:	75 0c                	jne    c00147d1 <CPU::detectFeatures()+0x7fb>
c00147c5:	50                   	push   eax
c00147c6:	50                   	push   eax
c00147c7:	68 38 16 02 c0       	push   0xc0021638
c00147cc:	e9 58 01 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c00147d1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00147d7:	66 f7 c1 80 ff       	test   cx,0xff80
c00147dc:	75 0c                	jne    c00147ea <CPU::detectFeatures()+0x814>
c00147de:	50                   	push   eax
c00147df:	50                   	push   eax
c00147e0:	68 48 16 02 c0       	push   0xc0021648
c00147e5:	e9 3f 01 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c00147ea:	66 81 fa 40 02       	cmp    dx,0x240
c00147ef:	75 0c                	jne    c00147fd <CPU::detectFeatures()+0x827>
c00147f1:	55                   	push   ebp
c00147f2:	55                   	push   ebp
c00147f3:	68 4f 16 02 c0       	push   0xc002164f
c00147f8:	e9 2c 01 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c00147fd:	66 81 fa 80 02       	cmp    dx,0x280
c0014802:	75 0c                	jne    c0014810 <CPU::detectFeatures()+0x83a>
c0014804:	57                   	push   edi
c0014805:	57                   	push   edi
c0014806:	68 58 16 02 c0       	push   0xc0021658
c001480b:	e9 19 01 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c0014810:	66 81 fa 40 03       	cmp    dx,0x340
c0014815:	74 ed                	je     c0014804 <CPU::detectFeatures()+0x82e>
c0014817:	66 81 fa c0 03       	cmp    dx,0x3c0
c001481c:	75 0c                	jne    c001482a <CPU::detectFeatures()+0x854>
c001481e:	56                   	push   esi
c001481f:	56                   	push   esi
c0014820:	68 5f 16 02 c0       	push   0xc002165f
c0014825:	e9 ff 00 00 00       	jmp    c0014929 <CPU::detectFeatures()+0x953>
c001482a:	83 f8 06             	cmp    eax,0x6
c001482d:	0f 84 45 ff ff ff    	je     c0014778 <CPU::detectFeatures()+0x7a2>
c0014833:	83 f8 04             	cmp    eax,0x4
c0014836:	0f 84 4d ff ff ff    	je     c0014789 <CPU::detectFeatures()+0x7b3>
c001483c:	83 f8 03             	cmp    eax,0x3
c001483f:	0f 85 74 01 00 00    	jne    c00149b9 <CPU::detectFeatures()+0x9e3>
c0014845:	51                   	push   ecx
c0014846:	51                   	push   ecx
c0014847:	68 68 16 02 c0       	push   0xc0021668
c001484c:	53                   	push   ebx
c001484d:	e8 3e bd ff ff       	call   c0010590 <Device::setName(char const*)>
c0014852:	b1 c1                	mov    cl,0xc1
c0014854:	88 c8                	mov    al,cl
c0014856:	e6 22                	out    0x22,al
c0014858:	e4 23                	in     al,0x23
c001485a:	88 c2                	mov    dl,al
c001485c:	88 c8                	mov    al,cl
c001485e:	e6 22                	out    0x22,al
c0014860:	88 d0                	mov    al,dl
c0014862:	83 c8 10             	or     eax,0x10
c0014865:	e6 23                	out    0x23,al
c0014867:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001486e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014871:	89 d0                	mov    eax,edx
c0014873:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014879:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001487d:	40                   	inc    eax
c001487e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014884:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014889:	e9 a1 00 00 00       	jmp    c001492f <CPU::detectFeatures()+0x959>
c001488e:	83 f8 06             	cmp    eax,0x6
c0014891:	0f 84 e1 fe ff ff    	je     c0014778 <CPU::detectFeatures()+0x7a2>
c0014897:	83 f8 04             	cmp    eax,0x4
c001489a:	0f 84 e9 fe ff ff    	je     c0014789 <CPU::detectFeatures()+0x7b3>
c00148a0:	83 f8 03             	cmp    eax,0x3
c00148a3:	0f 85 10 01 00 00    	jne    c00149b9 <CPU::detectFeatures()+0x9e3>
c00148a9:	52                   	push   edx
c00148aa:	52                   	push   edx
c00148ab:	68 73 16 02 c0       	push   0xc0021673
c00148b0:	eb 77                	jmp    c0014929 <CPU::detectFeatures()+0x953>
c00148b2:	83 f8 07             	cmp    eax,0x7
c00148b5:	75 09                	jne    c00148c0 <CPU::detectFeatures()+0x8ea>
c00148b7:	50                   	push   eax
c00148b8:	50                   	push   eax
c00148b9:	68 7d 16 02 c0       	push   0xc002167d
c00148be:	eb 69                	jmp    c0014929 <CPU::detectFeatures()+0x953>
c00148c0:	83 f8 0a             	cmp    eax,0xa
c00148c3:	75 09                	jne    c00148ce <CPU::detectFeatures()+0x8f8>
c00148c5:	50                   	push   eax
c00148c6:	50                   	push   eax
c00148c7:	68 88 16 02 c0       	push   0xc0021688
c00148cc:	eb 5b                	jmp    c0014929 <CPU::detectFeatures()+0x953>
c00148ce:	83 f8 0b             	cmp    eax,0xb
c00148d1:	75 09                	jne    c00148dc <CPU::detectFeatures()+0x906>
c00148d3:	50                   	push   eax
c00148d4:	50                   	push   eax
c00148d5:	68 90 16 02 c0       	push   0xc0021690
c00148da:	eb 4d                	jmp    c0014929 <CPU::detectFeatures()+0x953>
c00148dc:	83 f8 08             	cmp    eax,0x8
c00148df:	75 09                	jne    c00148ea <CPU::detectFeatures()+0x914>
c00148e1:	50                   	push   eax
c00148e2:	50                   	push   eax
c00148e3:	68 99 16 02 c0       	push   0xc0021699
c00148e8:	eb 3f                	jmp    c0014929 <CPU::detectFeatures()+0x953>
c00148ea:	83 f8 09             	cmp    eax,0x9
c00148ed:	75 09                	jne    c00148f8 <CPU::detectFeatures()+0x922>
c00148ef:	50                   	push   eax
c00148f0:	50                   	push   eax
c00148f1:	68 a1 16 02 c0       	push   0xc00216a1
c00148f6:	eb 31                	jmp    c0014929 <CPU::detectFeatures()+0x953>
c00148f8:	83 f8 05             	cmp    eax,0x5
c00148fb:	75 09                	jne    c0014906 <CPU::detectFeatures()+0x930>
c00148fd:	50                   	push   eax
c00148fe:	50                   	push   eax
c00148ff:	68 a9 16 02 c0       	push   0xc00216a9
c0014904:	eb 23                	jmp    c0014929 <CPU::detectFeatures()+0x953>
c0014906:	83 f8 0c             	cmp    eax,0xc
c0014909:	75 09                	jne    c0014914 <CPU::detectFeatures()+0x93e>
c001490b:	55                   	push   ebp
c001490c:	55                   	push   ebp
c001490d:	68 b7 16 02 c0       	push   0xc00216b7
c0014912:	eb 15                	jmp    c0014929 <CPU::detectFeatures()+0x953>
c0014914:	83 f8 0d             	cmp    eax,0xd
c0014917:	75 09                	jne    c0014922 <CPU::detectFeatures()+0x94c>
c0014919:	57                   	push   edi
c001491a:	57                   	push   edi
c001491b:	68 c2 16 02 c0       	push   0xc00216c2
c0014920:	eb 07                	jmp    c0014929 <CPU::detectFeatures()+0x953>
c0014922:	56                   	push   esi
c0014923:	56                   	push   esi
c0014924:	68 d6 16 02 c0       	push   0xc00216d6
c0014929:	53                   	push   ebx
c001492a:	e8 61 bc ff ff       	call   c0010590 <Device::setName(char const*)>
c001492f:	83 c4 10             	add    esp,0x10
c0014932:	e9 82 00 00 00       	jmp    c00149b9 <CPU::detectFeatures()+0x9e3>
c0014937:	51                   	push   ecx
c0014938:	51                   	push   ecx
c0014939:	68 22 15 02 c0       	push   0xc0021522
c001493e:	57                   	push   edi
c001493f:	e8 63 bd fe ff       	call   c00006a7 <strcpy>
c0014944:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001494e:	e8 2c b8 fe ff       	call   c000017f <is486>
c0014953:	83 c4 10             	add    esp,0x10
c0014956:	85 c0                	test   eax,eax
c0014958:	74 2d                	je     c0014987 <CPU::detectFeatures()+0x9b1>
c001495a:	52                   	push   edx
c001495b:	52                   	push   edx
c001495c:	68 e2 16 02 c0       	push   0xc00216e2
c0014961:	53                   	push   ebx
c0014962:	e8 29 bc ff ff       	call   c0010590 <Device::setName(char const*)>
c0014967:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001496e:	e8 c5 a3 00 00       	call   c001ed38 <CPU::readCR0()>
c0014973:	83 c4 10             	add    esp,0x10
c0014976:	83 e0 14             	and    eax,0x14
c0014979:	83 f8 04             	cmp    eax,0x4
c001497c:	75 1f                	jne    c001499d <CPU::detectFeatures()+0x9c7>
c001497e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014985:	eb 32                	jmp    c00149b9 <CPU::detectFeatures()+0x9e3>
c0014987:	50                   	push   eax
c0014988:	50                   	push   eax
c0014989:	68 ed 16 02 c0       	push   0xc00216ed
c001498e:	53                   	push   ebx
c001498f:	e8 fc bb ff ff       	call   c0010590 <Device::setName(char const*)>
c0014994:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001499b:	eb d1                	jmp    c001496e <CPU::detectFeatures()+0x998>
c001499d:	e8 b8 b7 fe ff       	call   c000015a <hasLegacyFPU>
c00149a2:	83 e0 01             	and    eax,0x1
c00149a5:	8d 14 00             	lea    edx,[eax+eax*1]
c00149a8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00149ae:	83 e0 fd             	and    eax,0xfffffffd
c00149b1:	09 d0                	or     eax,edx
c00149b3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00149b9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00149c0:	83 c4 4c             	add    esp,0x4c
c00149c3:	5b                   	pop    ebx
c00149c4:	5e                   	pop    esi
c00149c5:	5f                   	pop    edi
c00149c6:	5d                   	pop    ebp
c00149c7:	c3                   	ret    

c00149c8 <CPU::setupSMEP()>:
c00149c8:	83 ec 0c             	sub    esp,0xc
c00149cb:	e8 32 a6 00 00       	call   c001f002 <CPU::readCR4()>
c00149d0:	0d 00 00 10 00       	or     eax,0x100000
c00149d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00149d9:	83 c4 0c             	add    esp,0xc
c00149dc:	e9 3c a6 00 00       	jmp    c001f01d <CPU::writeCR4(unsigned long)>
c00149e1:	90                   	nop

c00149e2 <CPU::setupUMIP()>:
c00149e2:	83 ec 0c             	sub    esp,0xc
c00149e5:	e8 18 a6 00 00       	call   c001f002 <CPU::readCR4()>
c00149ea:	80 cc 08             	or     ah,0x8
c00149ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00149f1:	83 c4 0c             	add    esp,0xc
c00149f4:	e9 24 a6 00 00       	jmp    c001f01d <CPU::writeCR4(unsigned long)>
c00149f9:	90                   	nop

c00149fa <CPU::setupTSC()>:
c00149fa:	83 ec 0c             	sub    esp,0xc
c00149fd:	e8 00 a6 00 00       	call   c001f002 <CPU::readCR4()>
c0014a02:	83 c8 04             	or     eax,0x4
c0014a05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a09:	83 c4 0c             	add    esp,0xc
c0014a0c:	e9 0c a6 00 00       	jmp    c001f01d <CPU::writeCR4(unsigned long)>
c0014a11:	90                   	nop

c0014a12 <CPU::setupLargePages()>:
c0014a12:	83 ec 0c             	sub    esp,0xc
c0014a15:	e8 e8 a5 00 00       	call   c001f002 <CPU::readCR4()>
c0014a1a:	83 c8 10             	or     eax,0x10
c0014a1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a21:	83 c4 0c             	add    esp,0xc
c0014a24:	e9 f4 a5 00 00       	jmp    c001f01d <CPU::writeCR4(unsigned long)>
c0014a29:	90                   	nop

c0014a2a <CPU::setupPAT()>:
c0014a2a:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c0014a2f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014a36:	74 2c                	je     c0014a64 <CPU::setupPAT()+0x3a>
c0014a38:	53                   	push   ebx
c0014a39:	83 ec 10             	sub    esp,0x10
c0014a3c:	68 77 02 00 00       	push   0x277
c0014a41:	50                   	push   eax
c0014a42:	e8 7f 67 ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c0014a47:	83 e2 f8             	and    edx,0xfffffff8
c0014a4a:	83 ca 01             	or     edx,0x1
c0014a4d:	52                   	push   edx
c0014a4e:	50                   	push   eax
c0014a4f:	68 77 02 00 00       	push   0x277
c0014a54:	ff 35 48 36 02 c0    	push   DWORD PTR ds:0xc0023648
c0014a5a:	e8 93 67 ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014a5f:	83 c4 28             	add    esp,0x28
c0014a62:	5b                   	pop    ebx
c0014a63:	c3                   	ret    
c0014a64:	c3                   	ret    
c0014a65:	90                   	nop

c0014a66 <CPU::setupMTRR()>:
c0014a66:	c3                   	ret    
c0014a67:	90                   	nop

c0014a68 <CPU::setupGlobalPages()>:
c0014a68:	83 ec 0c             	sub    esp,0xc
c0014a6b:	e8 92 a5 00 00       	call   c001f002 <CPU::readCR4()>
c0014a70:	0c 80                	or     al,0x80
c0014a72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a76:	83 c4 0c             	add    esp,0xc
c0014a79:	e9 9f a5 00 00       	jmp    c001f01d <CPU::writeCR4(unsigned long)>

c0014a7e <CPU::allowUsermodeDataAccess()>:
c0014a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a82:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014a89:	74 03                	je     c0014a8e <CPU::allowUsermodeDataAccess()+0x10>
c0014a8b:	0f 01 cb             	stac   
c0014a8e:	c3                   	ret    
c0014a8f:	90                   	nop

c0014a90 <CPU::prohibitUsermodeDataAccess()>:
c0014a90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a94:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014a9b:	74 03                	je     c0014aa0 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014a9d:	0f 01 ca             	clac   
c0014aa0:	c3                   	ret    
c0014aa1:	90                   	nop

c0014aa2 <CPU::setupSMAP()>:
c0014aa2:	53                   	push   ebx
c0014aa3:	83 ec 08             	sub    esp,0x8
c0014aa6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014aaa:	e8 53 a5 00 00       	call   c001f002 <CPU::readCR4()>
c0014aaf:	83 ec 0c             	sub    esp,0xc
c0014ab2:	0d 00 00 20 00       	or     eax,0x200000
c0014ab7:	50                   	push   eax
c0014ab8:	e8 60 a5 00 00       	call   c001f01d <CPU::writeCR4(unsigned long)>
c0014abd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014ac1:	83 c4 18             	add    esp,0x18
c0014ac4:	5b                   	pop    ebx
c0014ac5:	eb c9                	jmp    c0014a90 <CPU::prohibitUsermodeDataAccess()>
c0014ac7:	90                   	nop

c0014ac8 <CPU::setupFeatures()>:
c0014ac8:	53                   	push   ebx
c0014ac9:	83 ec 08             	sub    esp,0x8
c0014acc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ad0:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014ad7:	74 0c                	je     c0014ae5 <CPU::setupFeatures()+0x1d>
c0014ad9:	83 ec 0c             	sub    esp,0xc
c0014adc:	53                   	push   ebx
c0014add:	e8 e6 fe ff ff       	call   c00149c8 <CPU::setupSMEP()>
c0014ae2:	83 c4 10             	add    esp,0x10
c0014ae5:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014aec:	74 0c                	je     c0014afa <CPU::setupFeatures()+0x32>
c0014aee:	83 ec 0c             	sub    esp,0xc
c0014af1:	53                   	push   ebx
c0014af2:	e8 ab ff ff ff       	call   c0014aa2 <CPU::setupSMAP()>
c0014af7:	83 c4 10             	add    esp,0x10
c0014afa:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b01:	74 0c                	je     c0014b0f <CPU::setupFeatures()+0x47>
c0014b03:	83 ec 0c             	sub    esp,0xc
c0014b06:	53                   	push   ebx
c0014b07:	e8 d6 fe ff ff       	call   c00149e2 <CPU::setupUMIP()>
c0014b0c:	83 c4 10             	add    esp,0x10
c0014b0f:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014b16:	74 0c                	je     c0014b24 <CPU::setupFeatures()+0x5c>
c0014b18:	83 ec 0c             	sub    esp,0xc
c0014b1b:	53                   	push   ebx
c0014b1c:	e8 d9 fe ff ff       	call   c00149fa <CPU::setupTSC()>
c0014b21:	83 c4 10             	add    esp,0x10
c0014b24:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014b2b:	74 0c                	je     c0014b39 <CPU::setupFeatures()+0x71>
c0014b2d:	83 ec 0c             	sub    esp,0xc
c0014b30:	53                   	push   ebx
c0014b31:	e8 dc fe ff ff       	call   c0014a12 <CPU::setupLargePages()>
c0014b36:	83 c4 10             	add    esp,0x10
c0014b39:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014b40:	74 0c                	je     c0014b4e <CPU::setupFeatures()+0x86>
c0014b42:	83 ec 0c             	sub    esp,0xc
c0014b45:	53                   	push   ebx
c0014b46:	e8 1d ff ff ff       	call   c0014a68 <CPU::setupGlobalPages()>
c0014b4b:	83 c4 10             	add    esp,0x10
c0014b4e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014b55:	74 0d                	je     c0014b64 <CPU::setupFeatures()+0x9c>
c0014b57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014b5b:	83 c4 08             	add    esp,0x8
c0014b5e:	5b                   	pop    ebx
c0014b5f:	e9 c6 fe ff ff       	jmp    c0014a2a <CPU::setupPAT()>
c0014b64:	83 c4 08             	add    esp,0x8
c0014b67:	5b                   	pop    ebx
c0014b68:	c3                   	ret    
c0014b69:	90                   	nop

c0014b6a <CPU::open(int, int, void*)>:
c0014b6a:	57                   	push   edi
c0014b6b:	56                   	push   esi
c0014b6c:	53                   	push   ebx
c0014b6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b75:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014b7b:	83 ec 0c             	sub    esp,0xc
c0014b7e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014b84:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014b8a:	50                   	push   eax
c0014b8b:	e8 1a 69 ff ff       	call   c000b4aa <GDT::setup()>
c0014b90:	83 c4 0c             	add    esp,0xc
c0014b93:	6a 00                	push   0x0
c0014b95:	68 ef be ad de       	push   0xdeadbeef
c0014b9a:	57                   	push   edi
c0014b9b:	e8 ec 8a ff ff       	call   c000d68c <TSS::setup(unsigned long, unsigned long)>
c0014ba0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014ba3:	e8 c4 8a ff ff       	call   c000d66c <TSS::flush()>
c0014ba8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014bae:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bb1:	e8 4e 6b ff ff       	call   c000b704 <IDT::setup()>
c0014bb6:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014bbd:	e8 52 a4 00 00       	call   c001f014 <CPU::writeDR7(unsigned long)>
c0014bc2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014bcc:	e8 f7 75 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0014bd1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014bd7:	89 30                	mov    DWORD PTR [eax],esi
c0014bd9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014bdf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014be2:	58                   	pop    eax
c0014be3:	5a                   	pop    edx
c0014be4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014bea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014bee:	e8 37 9a ff ff       	call   c000e62a <VAS::setCPUSpecific(unsigned long)>
c0014bf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bf6:	e8 db f3 ff ff       	call   c0013fd6 <CPU::detectFeatures()>
c0014bfb:	e8 9a c7 ff ff       	call   c001139a <setupInterruptController()>
c0014c00:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014c06:	a1 60 36 02 c0       	mov    eax,ds:0xc0023660
c0014c0b:	83 e0 10             	and    eax,0x10
c0014c0e:	83 f8 01             	cmp    eax,0x1
c0014c11:	19 c0                	sbb    eax,eax
c0014c13:	83 e0 46             	and    eax,0x46
c0014c16:	83 c0 1e             	add    eax,0x1e
c0014c19:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c1c:	e8 61 d9 ff ff       	call   c0012582 <setupTimer(int)>
c0014c21:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014c27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c2a:	e8 99 fe ff ff       	call   c0014ac8 <CPU::setupFeatures()>
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	31 c0                	xor    eax,eax
c0014c34:	5b                   	pop    ebx
c0014c35:	5e                   	pop    esi
c0014c36:	5f                   	pop    edi
c0014c37:	c3                   	ret    

c0014c38 <Krnl::panic(char const*)>:
c0014c38:	55                   	push   ebp
c0014c39:	89 e5                	mov    ebp,esp
c0014c3b:	53                   	push   ebx
c0014c3c:	83 ec 0c             	sub    esp,0xc
c0014c3f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014c42:	fa                   	cli    
c0014c43:	c6 05 90 40 02 c0 01 	mov    BYTE PTR ds:0xc0024090,0x1
c0014c4a:	53                   	push   ebx
c0014c4b:	c6 05 80 2a 02 c0 00 	mov    BYTE PTR ds:0xc0022a80,0x0
c0014c52:	68 24 17 02 c0       	push   0xc0021724
c0014c57:	e8 47 a3 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0014c5c:	58                   	pop    eax
c0014c5d:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014c62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c68:	e8 60 82 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0014c6d:	83 c4 0c             	add    esp,0xc
c0014c70:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014c75:	6a 01                	push   0x1
c0014c77:	6a 0f                	push   0xf
c0014c79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c7f:	e8 88 7c ff ff       	call   c000c90c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014c84:	5a                   	pop    edx
c0014c85:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014c8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c90:	e8 d9 84 ff ff       	call   c000d16e <VgaText::clearScreen()>
c0014c95:	59                   	pop    ecx
c0014c96:	58                   	pop    eax
c0014c97:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014c9c:	68 3d 17 02 c0       	push   0xc002173d
c0014ca1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ca7:	e8 40 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014cac:	58                   	pop    eax
c0014cad:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014cb2:	5a                   	pop    edx
c0014cb3:	68 dc 17 02 c0       	push   0xc00217dc
c0014cb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cbe:	e8 29 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014cc3:	59                   	pop    ecx
c0014cc4:	58                   	pop    eax
c0014cc5:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014cca:	68 59 17 02 c0       	push   0xc0021759
c0014ccf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd5:	e8 12 86 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014cda:	58                   	pop    eax
c0014cdb:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014ce0:	5a                   	pop    edx
c0014ce1:	53                   	push   ebx
c0014ce2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce8:	e8 ff 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ced:	59                   	pop    ecx
c0014cee:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014cf3:	5b                   	pop    ebx
c0014cf4:	68 79 17 02 c0       	push   0xc0021779
c0014cf9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cff:	e8 e8 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d04:	58                   	pop    eax
c0014d05:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014d0a:	5a                   	pop    edx
c0014d0b:	68 18 18 02 c0       	push   0xc0021818
c0014d10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d16:	e8 d1 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d1b:	59                   	pop    ecx
c0014d1c:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014d21:	5b                   	pop    ebx
c0014d22:	68 59 17 02 c0       	push   0xc0021759
c0014d27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d2d:	e8 ba 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d32:	58                   	pop    eax
c0014d33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d38:	5a                   	pop    edx
c0014d39:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d3c:	83 c0 0c             	add    eax,0xc
c0014d3f:	50                   	push   eax
c0014d40:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014d45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d4b:	e8 9c 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d50:	59                   	pop    ecx
c0014d51:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014d56:	5b                   	pop    ebx
c0014d57:	68 78 17 02 c0       	push   0xc0021778
c0014d5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d62:	e8 85 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d67:	58                   	pop    eax
c0014d68:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014d6d:	5a                   	pop    edx
c0014d6e:	68 44 18 02 c0       	push   0xc0021844
c0014d73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d79:	e8 6e 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d7e:	59                   	pop    ecx
c0014d7f:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014d84:	5b                   	pop    ebx
c0014d85:	68 84 18 02 c0       	push   0xc0021884
c0014d8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d90:	e8 57 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014d95:	58                   	pop    eax
c0014d96:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014d9b:	5a                   	pop    edx
c0014d9c:	68 64 17 02 c0       	push   0xc0021764
c0014da1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da7:	e8 40 85 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014dac:	59                   	pop    ecx
c0014dad:	5b                   	pop    ebx
c0014dae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014db1:	68 7c 17 02 c0       	push   0xc002177c
c0014db6:	e8 e8 a1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0014dbb:	58                   	pop    eax
c0014dbc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014dbf:	5a                   	pop    edx
c0014dc0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014dc3:	68 85 17 02 c0       	push   0xc0021785
c0014dc8:	e8 d6 a1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0014dcd:	59                   	pop    ecx
c0014dce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014dd1:	5b                   	pop    ebx
c0014dd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014dd7:	68 9d 0f 02 c0       	push   0xc0020f9d
c0014ddc:	e8 c2 a1 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0014de1:	58                   	pop    eax
c0014de2:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014de7:	5a                   	pop    edx
c0014de8:	68 c8 18 02 c0       	push   0xc00218c8
c0014ded:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df3:	e8 f4 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014df8:	59                   	pop    ecx
c0014df9:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014dfe:	5b                   	pop    ebx
c0014dff:	68 8e 17 02 c0       	push   0xc002178e
c0014e04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e0a:	e8 dd 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e0f:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014e14:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014e1a:	e8 19 9f 00 00       	call   c001ed38 <CPU::readCR0()>
c0014e1f:	5a                   	pop    edx
c0014e20:	59                   	pop    ecx
c0014e21:	50                   	push   eax
c0014e22:	53                   	push   ebx
c0014e23:	e8 ea 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014e28:	5b                   	pop    ebx
c0014e29:	58                   	pop    eax
c0014e2a:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014e2f:	68 98 17 02 c0       	push   0xc0021798
c0014e34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e3a:	e8 ad 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e3f:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014e44:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014e4a:	e8 d7 a1 00 00       	call   c001f026 <CPU::readCR2()>
c0014e4f:	5a                   	pop    edx
c0014e50:	59                   	pop    ecx
c0014e51:	50                   	push   eax
c0014e52:	53                   	push   ebx
c0014e53:	e8 ba 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014e58:	5b                   	pop    ebx
c0014e59:	58                   	pop    eax
c0014e5a:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014e5f:	68 a2 17 02 c0       	push   0xc00217a2
c0014e64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6a:	e8 7d 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e6f:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014e74:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014e7a:	e8 46 9b 00 00       	call   c001e9c5 <CPU::readCR3()>
c0014e7f:	5a                   	pop    edx
c0014e80:	59                   	pop    ecx
c0014e81:	50                   	push   eax
c0014e82:	53                   	push   ebx
c0014e83:	e8 8a 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014e88:	5b                   	pop    ebx
c0014e89:	58                   	pop    eax
c0014e8a:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014e8f:	68 b5 17 02 c0       	push   0xc00217b5
c0014e94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e9a:	e8 4d 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014e9f:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014ea4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014eaa:	e8 53 a1 00 00       	call   c001f002 <CPU::readCR4()>
c0014eaf:	5a                   	pop    edx
c0014eb0:	59                   	pop    ecx
c0014eb1:	50                   	push   eax
c0014eb2:	53                   	push   ebx
c0014eb3:	e8 5a 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014eb8:	5b                   	pop    ebx
c0014eb9:	58                   	pop    eax
c0014eba:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014ebf:	68 bf 17 02 c0       	push   0xc00217bf
c0014ec4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eca:	e8 1d 84 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014ecf:	5a                   	pop    edx
c0014ed0:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014ed5:	59                   	pop    ecx
c0014ed6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014edc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014edf:	50                   	push   eax
c0014ee0:	e8 2d 84 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014ee5:	5b                   	pop    ebx
c0014ee6:	58                   	pop    eax
c0014ee7:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014eec:	68 d6 17 02 c0       	push   0xc00217d6
c0014ef1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef7:	e8 f0 83 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014efc:	5a                   	pop    edx
c0014efd:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014f02:	59                   	pop    ecx
c0014f03:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f09:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f0c:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014f0f:	50                   	push   eax
c0014f10:	e8 fd 83 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014f15:	5b                   	pop    ebx
c0014f16:	58                   	pop    eax
c0014f17:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014f1c:	68 d6 17 02 c0       	push   0xc00217d6
c0014f21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f27:	e8 c0 83 ff ff       	call   c000d2ec <VgaText::puts(char const*)>
c0014f2c:	59                   	pop    ecx
c0014f2d:	a1 94 4a 02 c0       	mov    eax,ds:0xc0024a94
c0014f32:	5b                   	pop    ebx
c0014f33:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f39:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f3c:	8b 12                	mov    edx,DWORD PTR [edx]
c0014f3e:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014f41:	50                   	push   eax
c0014f42:	e8 cb 83 ff ff       	call   c000d312 <VgaText::putx(unsigned int)>
c0014f47:	83 c4 10             	add    esp,0x10
c0014f4a:	b2 fe                	mov    dl,0xfe
c0014f4c:	e4 60                	in     al,0x60
c0014f4e:	3c 1c                	cmp    al,0x1c
c0014f50:	74 04                	je     c0014f56 <Krnl::panic(char const*)+0x31e>
c0014f52:	3c 5a                	cmp    al,0x5a
c0014f54:	75 f6                	jne    c0014f4c <Krnl::panic(char const*)+0x314>
c0014f56:	e4 64                	in     al,0x64
c0014f58:	a8 02                	test   al,0x2
c0014f5a:	75 fa                	jne    c0014f56 <Krnl::panic(char const*)+0x31e>
c0014f5c:	88 d0                	mov    al,dl
c0014f5e:	e6 64                	out    0x64,al
c0014f60:	fa                   	cli    
c0014f61:	f4                   	hlt    
c0014f62:	eb e8                	jmp    c0014f4c <Krnl::panic(char const*)+0x314>

c0014f64 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014f64:	55                   	push   ebp
c0014f65:	57                   	push   edi
c0014f66:	56                   	push   esi
c0014f67:	53                   	push   ebx
c0014f68:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014f6e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014f75:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014f77:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014f7a:	80 fb 40             	cmp    bl,0x40
c0014f7d:	75 1b                	jne    c0014f9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014f7f:	8a 16                	mov    dl,BYTE PTR [esi]
c0014f81:	84 d2                	test   dl,dl
c0014f83:	0f 84 f1 00 00 00    	je     c001507a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014f89:	8d 46 01             	lea    eax,[esi+0x1]
c0014f8c:	80 fa 3a             	cmp    dl,0x3a
c0014f8f:	74 04                	je     c0014f95 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014f91:	89 c6                	mov    esi,eax
c0014f93:	eb ea                	jmp    c0014f7f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014f95:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014f98:	89 c6                	mov    esi,eax
c0014f9a:	50                   	push   eax
c0014f9b:	6a 40                	push   0x40
c0014f9d:	6a 00                	push   0x0
c0014f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014fa3:	50                   	push   eax
c0014fa4:	e8 5f b6 fe ff       	call   c0000608 <memset>
c0014fa9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014fb0:	31 c0                	xor    eax,eax
c0014fb2:	83 c4 10             	add    esp,0x10
c0014fb5:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014fb7:	84 c9                	test   cl,cl
c0014fb9:	0f 84 bb 00 00 00    	je     c001507a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014fbf:	3d c7 00 00 00       	cmp    eax,0xc7
c0014fc4:	0f 8f b0 00 00 00    	jg     c001507a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014fca:	80 f9 0a             	cmp    cl,0xa
c0014fcd:	0f 85 98 00 00 00    	jne    c001506b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014fd3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014fd8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014fdc:	a8 df                	test   al,0xdf
c0014fde:	0f 94 c1             	sete   cl
c0014fe1:	3c 23                	cmp    al,0x23
c0014fe3:	0f 94 c2             	sete   dl
c0014fe6:	08 d1                	or     cl,dl
c0014fe8:	75 4a                	jne    c0015034 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014fea:	8d 50 f7             	lea    edx,[eax-0x9]
c0014fed:	80 fa 01             	cmp    dl,0x1
c0014ff0:	76 42                	jbe    c0015034 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014ff2:	3c 5b                	cmp    al,0x5b
c0014ff4:	75 42                	jne    c0015038 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014ff6:	80 fb 40             	cmp    bl,0x40
c0014ff9:	75 39                	jne    c0015034 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014ffb:	83 ec 0c             	sub    esp,0xc
c0014ffe:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015002:	52                   	push   edx
c0015003:	e8 1d b6 fe ff       	call   c0000625 <strlen>
c0015008:	83 c4 10             	add    esp,0x10
c001500b:	83 f8 3f             	cmp    eax,0x3f
c001500e:	77 6a                	ja     c001507a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015010:	50                   	push   eax
c0015011:	50                   	push   eax
c0015012:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015016:	52                   	push   edx
c0015017:	8d 54 24 24          	lea    edx,[esp+0x24]
c001501b:	52                   	push   edx
c001501c:	e8 86 b6 fe ff       	call   c00006a7 <strcpy>
c0015021:	58                   	pop    eax
c0015022:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015026:	52                   	push   edx
c0015027:	e8 f9 b5 fe ff       	call   c0000625 <strlen>
c001502c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015031:	83 c4 10             	add    esp,0x10
c0015034:	31 d2                	xor    edx,edx
c0015036:	eb 3a                	jmp    c0015072 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015038:	80 fb 40             	cmp    bl,0x40
c001503b:	74 06                	je     c0015043 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001503d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015041:	eb 20                	jmp    c0015063 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015043:	50                   	push   eax
c0015044:	50                   	push   eax
c0015045:	55                   	push   ebp
c0015046:	8d 44 24 24          	lea    eax,[esp+0x24]
c001504a:	50                   	push   eax
c001504b:	e8 a8 b6 fe ff       	call   c00006f8 <strcmp>
c0015050:	83 c4 10             	add    esp,0x10
c0015053:	85 c0                	test   eax,eax
c0015055:	75 dd                	jne    c0015034 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015057:	eb e4                	jmp    c001503d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015059:	8d 50 01             	lea    edx,[eax+0x1]
c001505c:	80 f9 3d             	cmp    cl,0x3d
c001505f:	74 1d                	je     c001507e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015061:	89 d0                	mov    eax,edx
c0015063:	8a 08                	mov    cl,BYTE PTR [eax]
c0015065:	84 c9                	test   cl,cl
c0015067:	75 f0                	jne    c0015059 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015069:	eb 0f                	jmp    c001507a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001506b:	8d 50 01             	lea    edx,[eax+0x1]
c001506e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015072:	47                   	inc    edi
c0015073:	89 d0                	mov    eax,edx
c0015075:	e9 3b ff ff ff       	jmp    c0014fb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001507a:	31 c0                	xor    eax,eax
c001507c:	eb 33                	jmp    c00150b1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001507e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015082:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015085:	50                   	push   eax
c0015086:	50                   	push   eax
c0015087:	8d 44 24 60          	lea    eax,[esp+0x60]
c001508b:	50                   	push   eax
c001508c:	56                   	push   esi
c001508d:	e8 66 b6 fe ff       	call   c00006f8 <strcmp>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	85 c0                	test   eax,eax
c0015097:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001509b:	75 97                	jne    c0015034 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001509d:	51                   	push   ecx
c001509e:	51                   	push   ecx
c001509f:	52                   	push   edx
c00150a0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00150a7:	e8 fb b5 fe ff       	call   c00006a7 <strcpy>
c00150ac:	83 c4 10             	add    esp,0x10
c00150af:	b0 01                	mov    al,0x1
c00150b1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00150b7:	5b                   	pop    ebx
c00150b8:	5e                   	pop    esi
c00150b9:	5f                   	pop    edi
c00150ba:	5d                   	pop    ebp
c00150bb:	c3                   	ret    

c00150bc <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00150bc:	57                   	push   edi
c00150bd:	56                   	push   esi
c00150be:	53                   	push   ebx
c00150bf:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00150c5:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c00150cc:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00150d3:	53                   	push   ebx
c00150d4:	e8 4c b5 fe ff       	call   c0000625 <strlen>
c00150d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00150dc:	89 c7                	mov    edi,eax
c00150de:	e8 42 b5 fe ff       	call   c0000625 <strlen>
c00150e3:	83 c4 10             	add    esp,0x10
c00150e6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00150ea:	31 ff                	xor    edi,edi
c00150ec:	3d ff 00 00 00       	cmp    eax,0xff
c00150f1:	0f 87 18 01 00 00    	ja     c001520f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00150f7:	51                   	push   ecx
c00150f8:	51                   	push   ecx
c00150f9:	56                   	push   esi
c00150fa:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00150fe:	56                   	push   esi
c00150ff:	e8 a3 b5 fe ff       	call   c00006a7 <strcpy>
c0015104:	58                   	pop    eax
c0015105:	5a                   	pop    edx
c0015106:	68 d5 1c 02 c0       	push   0xc0021cd5
c001510b:	56                   	push   esi
c001510c:	e8 4d b6 fe ff       	call   c000075e <strcat>
c0015111:	59                   	pop    ecx
c0015112:	58                   	pop    eax
c0015113:	53                   	push   ebx
c0015114:	56                   	push   esi
c0015115:	e8 44 b6 fe ff       	call   c000075e <strcat>
c001511a:	58                   	pop    eax
c001511b:	5a                   	pop    edx
c001511c:	68 ee 18 02 c0       	push   0xc00218ee
c0015121:	56                   	push   esi
c0015122:	e8 37 b6 fe ff       	call   c000075e <strcat>
c0015127:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001512e:	e8 81 9d ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0015133:	83 c4 0c             	add    esp,0xc
c0015136:	89 c3                	mov    ebx,eax
c0015138:	ff 35 94 4a 02 c0    	push   DWORD PTR ds:0xc0024a94
c001513e:	56                   	push   esi
c001513f:	50                   	push   eax
c0015140:	e8 8d a3 ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c0015145:	59                   	pop    ecx
c0015146:	5e                   	pop    esi
c0015147:	6a 01                	push   0x1
c0015149:	53                   	push   ebx
c001514a:	e8 e7 a3 ff ff       	call   c000f536 <File::open(FileOpenMode)>
c001514f:	83 c4 10             	add    esp,0x10
c0015152:	85 c0                	test   eax,eax
c0015154:	74 08                	je     c001515e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015156:	83 ec 0c             	sub    esp,0xc
c0015159:	8b 03                	mov    eax,DWORD PTR [ebx]
c001515b:	53                   	push   ebx
c001515c:	eb 2e                	jmp    c001518c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c001515e:	52                   	push   edx
c001515f:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015163:	50                   	push   eax
c0015164:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015168:	50                   	push   eax
c0015169:	53                   	push   ebx
c001516a:	e8 73 a6 ff ff       	call   c000f7e2 <File::stat(unsigned long long*, bool*)>
c001516f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	89 c1                	mov    ecx,eax
c0015178:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001517c:	75 13                	jne    c0015191 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c001517e:	83 ec 0c             	sub    esp,0xc
c0015181:	53                   	push   ebx
c0015182:	e8 0d a4 ff ff       	call   c000f594 <File::close()>
c0015187:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015189:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001518c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001518f:	eb 7b                	jmp    c001520c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015191:	83 ec 0c             	sub    esp,0xc
c0015194:	50                   	push   eax
c0015195:	e8 84 6a ff ff       	call   c000bc1e <malloc>
c001519a:	89 c6                	mov    esi,eax
c001519c:	58                   	pop    eax
c001519d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001519f:	8d 54 24 10          	lea    edx,[esp+0x10]
c00151a3:	52                   	push   edx
c00151a4:	56                   	push   esi
c00151a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00151a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00151ad:	53                   	push   ebx
c00151ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00151b1:	83 c4 20             	add    esp,0x20
c00151b4:	85 c0                	test   eax,eax
c00151b6:	75 0a                	jne    c00151c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00151b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151bc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00151c0:	74 18                	je     c00151da <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c00151c2:	83 ec 0c             	sub    esp,0xc
c00151c5:	31 ff                	xor    edi,edi
c00151c7:	53                   	push   ebx
c00151c8:	e8 c7 a3 ff ff       	call   c000f594 <File::close()>
c00151cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151d5:	83 c4 10             	add    esp,0x10
c00151d8:	eb 35                	jmp    c001520f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00151da:	83 ec 0c             	sub    esp,0xc
c00151dd:	53                   	push   ebx
c00151de:	e8 b1 a3 ff ff       	call   c000f594 <File::close()>
c00151e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151eb:	83 c4 0c             	add    esp,0xc
c00151ee:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00151f5:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00151fc:	56                   	push   esi
c00151fd:	e8 62 fd ff ff       	call   c0014f64 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015202:	89 34 24             	mov    DWORD PTR [esp],esi
c0015205:	89 c7                	mov    edi,eax
c0015207:	e8 22 6a ff ff       	call   c000bc2e <free>
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	81 c4 10 01 00 00    	add    esp,0x110
c0015215:	89 f8                	mov    eax,edi
c0015217:	5b                   	pop    ebx
c0015218:	5e                   	pop    esi
c0015219:	5f                   	pop    edi
c001521a:	c3                   	ret    

c001521b <Reg::getLine(char*, char*, char*)>:
c001521b:	57                   	push   edi
c001521c:	56                   	push   esi
c001521d:	53                   	push   ebx
c001521e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015222:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015226:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001522a:	57                   	push   edi
c001522b:	56                   	push   esi
c001522c:	53                   	push   ebx
c001522d:	68 f3 18 02 c0       	push   0xc00218f3
c0015232:	e8 85 fe ff ff       	call   c00150bc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015237:	83 c4 10             	add    esp,0x10
c001523a:	84 c0                	test   al,al
c001523c:	75 10                	jne    c001524e <Reg::getLine(char*, char*, char*)+0x33>
c001523e:	57                   	push   edi
c001523f:	56                   	push   esi
c0015240:	53                   	push   ebx
c0015241:	68 18 19 02 c0       	push   0xc0021918
c0015246:	e8 71 fe ff ff       	call   c00150bc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001524b:	83 c4 10             	add    esp,0x10
c001524e:	5b                   	pop    ebx
c001524f:	5e                   	pop    esi
c0015250:	5f                   	pop    edi
c0015251:	c3                   	ret    

c0015252 <Reg::readInt(char*, char*, int*)>:
c0015252:	55                   	push   ebp
c0015253:	57                   	push   edi
c0015254:	56                   	push   esi
c0015255:	53                   	push   ebx
c0015256:	81 ec f0 00 00 00    	sub    esp,0xf0
c001525c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015260:	57                   	push   edi
c0015261:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015268:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001526f:	e8 a7 ff ff ff       	call   c001521b <Reg::getLine(char*, char*, char*)>
c0015274:	83 c4 10             	add    esp,0x10
c0015277:	84 c0                	test   al,al
c0015279:	0f 84 b3 00 00 00    	je     c0015332 <Reg::readInt(char*, char*, int*)+0xe0>
c001527f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015283:	80 fa 2b             	cmp    dl,0x2b
c0015286:	74 0c                	je     c0015294 <Reg::readInt(char*, char*, int*)+0x42>
c0015288:	80 fa 2d             	cmp    dl,0x2d
c001528b:	75 0e                	jne    c001529b <Reg::readInt(char*, char*, int*)+0x49>
c001528d:	ba 01 00 00 00       	mov    edx,0x1
c0015292:	eb 0b                	jmp    c001529f <Reg::readInt(char*, char*, int*)+0x4d>
c0015294:	ba 01 00 00 00       	mov    edx,0x1
c0015299:	eb 02                	jmp    c001529d <Reg::readInt(char*, char*, int*)+0x4b>
c001529b:	31 d2                	xor    edx,edx
c001529d:	31 c0                	xor    eax,eax
c001529f:	be 0a 00 00 00       	mov    esi,0xa
c00152a4:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00152a9:	75 20                	jne    c00152cb <Reg::readInt(char*, char*, int*)+0x79>
c00152ab:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00152af:	80 f9 78             	cmp    cl,0x78
c00152b2:	75 0a                	jne    c00152be <Reg::readInt(char*, char*, int*)+0x6c>
c00152b4:	83 c2 02             	add    edx,0x2
c00152b7:	be 10 00 00 00       	mov    esi,0x10
c00152bc:	eb 0d                	jmp    c00152cb <Reg::readInt(char*, char*, int*)+0x79>
c00152be:	80 f9 62             	cmp    cl,0x62
c00152c1:	75 08                	jne    c00152cb <Reg::readInt(char*, char*, int*)+0x79>
c00152c3:	83 c2 02             	add    edx,0x2
c00152c6:	be 02 00 00 00       	mov    esi,0x2
c00152cb:	01 d7                	add    edi,edx
c00152cd:	31 d2                	xor    edx,edx
c00152cf:	8a 1f                	mov    bl,BYTE PTR [edi]
c00152d1:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00152d5:	80 fb 0d             	cmp    bl,0xd
c00152d8:	0f 94 c3             	sete   bl
c00152db:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00152e0:	0f 94 c1             	sete   cl
c00152e3:	08 cb                	or     bl,cl
c00152e5:	75 3a                	jne    c0015321 <Reg::readInt(char*, char*, int*)+0xcf>
c00152e7:	0f af d6             	imul   edx,esi
c00152ea:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00152ef:	83 fe 10             	cmp    esi,0x10
c00152f2:	75 26                	jne    c001531a <Reg::readInt(char*, char*, int*)+0xc8>
c00152f4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00152f8:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00152fb:	89 e9                	mov    ecx,ebp
c00152fd:	80 f9 05             	cmp    cl,0x5
c0015300:	77 06                	ja     c0015308 <Reg::readInt(char*, char*, int*)+0xb6>
c0015302:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015306:	eb 16                	jmp    c001531e <Reg::readInt(char*, char*, int*)+0xcc>
c0015308:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001530c:	83 e9 61             	sub    ecx,0x61
c001530f:	80 f9 05             	cmp    cl,0x5
c0015312:	77 06                	ja     c001531a <Reg::readInt(char*, char*, int*)+0xc8>
c0015314:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015318:	eb 04                	jmp    c001531e <Reg::readInt(char*, char*, int*)+0xcc>
c001531a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001531e:	47                   	inc    edi
c001531f:	eb ae                	jmp    c00152cf <Reg::readInt(char*, char*, int*)+0x7d>
c0015321:	84 c0                	test   al,al
c0015323:	74 02                	je     c0015327 <Reg::readInt(char*, char*, int*)+0xd5>
c0015325:	f7 da                	neg    edx
c0015327:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001532e:	89 10                	mov    DWORD PTR [eax],edx
c0015330:	88 d8                	mov    al,bl
c0015332:	81 c4 ec 00 00 00    	add    esp,0xec
c0015338:	5b                   	pop    ebx
c0015339:	5e                   	pop    esi
c001533a:	5f                   	pop    edi
c001533b:	5d                   	pop    ebp
c001533c:	c3                   	ret    

c001533d <Reg::readString(char*, char*, char*, int)>:
c001533d:	57                   	push   edi
c001533e:	56                   	push   esi
c001533f:	53                   	push   ebx
c0015340:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015346:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001534d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015351:	57                   	push   edi
c0015352:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015359:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015360:	e8 b6 fe ff ff       	call   c001521b <Reg::getLine(char*, char*, char*)>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	89 c6                	mov    esi,eax
c001536a:	84 c0                	test   al,al
c001536c:	74 44                	je     c00153b2 <Reg::readString(char*, char*, char*, int)+0x75>
c001536e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015375:	31 c0                	xor    eax,eax
c0015377:	4a                   	dec    edx
c0015378:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001537b:	84 c9                	test   cl,cl
c001537d:	74 0f                	je     c001538e <Reg::readString(char*, char*, char*, int)+0x51>
c001537f:	39 c2                	cmp    edx,eax
c0015381:	7e 0b                	jle    c001538e <Reg::readString(char*, char*, char*, int)+0x51>
c0015383:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015386:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001538b:	40                   	inc    eax
c001538c:	eb ea                	jmp    c0015378 <Reg::readString(char*, char*, char*, int)+0x3b>
c001538e:	83 ec 0c             	sub    esp,0xc
c0015391:	53                   	push   ebx
c0015392:	e8 8e b2 fe ff       	call   c0000625 <strlen>
c0015397:	83 c4 10             	add    esp,0x10
c001539a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001539f:	75 11                	jne    c00153b2 <Reg::readString(char*, char*, char*, int)+0x75>
c00153a1:	83 ec 0c             	sub    esp,0xc
c00153a4:	53                   	push   ebx
c00153a5:	e8 7b b2 fe ff       	call   c0000625 <strlen>
c00153aa:	83 c4 10             	add    esp,0x10
c00153ad:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00153b2:	81 c4 d0 00 00 00    	add    esp,0xd0
c00153b8:	89 f0                	mov    eax,esi
c00153ba:	5b                   	pop    ebx
c00153bb:	5e                   	pop    esi
c00153bc:	5f                   	pop    edi
c00153bd:	c3                   	ret    

c00153be <Reg::readBool(char*, char*, bool*)>:
c00153be:	83 ec 20             	sub    esp,0x20
c00153c1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00153c5:	50                   	push   eax
c00153c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153ce:	e8 7f fe ff ff       	call   c0015252 <Reg::readInt(char*, char*, int*)>
c00153d3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00153d8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00153dc:	0f 95 02             	setne  BYTE PTR [edx]
c00153df:	83 c4 2c             	add    esp,0x2c
c00153e2:	c3                   	ret    

c00153e3 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00153e3:	53                   	push   ebx
c00153e4:	83 ec 1c             	sub    esp,0x1c
c00153e7:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00153eb:	8d 44 24 13          	lea    eax,[esp+0x13]
c00153ef:	50                   	push   eax
c00153f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153f8:	e8 c1 ff ff ff       	call   c00153be <Reg::readBool(char*, char*, bool*)>
c00153fd:	83 c4 10             	add    esp,0x10
c0015400:	84 c0                	test   al,al
c0015402:	74 04                	je     c0015408 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015404:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015408:	88 d8                	mov    al,bl
c001540a:	83 c4 18             	add    esp,0x18
c001540d:	5b                   	pop    ebx
c001540e:	c3                   	ret    

c001540f <Reg::readIntWithDefault(char*, char*, int)>:
c001540f:	53                   	push   ebx
c0015410:	83 ec 1c             	sub    esp,0x1c
c0015413:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015417:	8d 44 24 10          	lea    eax,[esp+0x10]
c001541b:	50                   	push   eax
c001541c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015420:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015424:	e8 29 fe ff ff       	call   c0015252 <Reg::readInt(char*, char*, int*)>
c0015429:	83 c4 10             	add    esp,0x10
c001542c:	84 c0                	test   al,al
c001542e:	74 04                	je     c0015434 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015430:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015434:	89 d8                	mov    eax,ebx
c0015436:	83 c4 18             	add    esp,0x18
c0015439:	5b                   	pop    ebx
c001543a:	c3                   	ret    

c001543b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001543b:	56                   	push   esi
c001543c:	53                   	push   ebx
c001543d:	51                   	push   ecx
c001543e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015442:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001544a:	56                   	push   esi
c001544b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001544f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015453:	e8 e5 fe ff ff       	call   c001533d <Reg::readString(char*, char*, char*, int)>
c0015458:	83 c4 10             	add    esp,0x10
c001545b:	84 c0                	test   al,al
c001545d:	74 02                	je     c0015461 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001545f:	89 f3                	mov    ebx,esi
c0015461:	89 d8                	mov    eax,ebx
c0015463:	5a                   	pop    edx
c0015464:	5b                   	pop    ebx
c0015465:	5e                   	pop    esi
c0015466:	c3                   	ret    

c0015467 <Sys::exit(regs*)>:
c0015467:	83 ec 18             	sub    esp,0x18
c001546a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001546e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015471:	e8 f6 32 00 00       	call   c001876c <terminateTask(int)>
c0015476:	83 c8 ff             	or     eax,0xffffffff
c0015479:	83 c4 1c             	add    esp,0x1c
c001547c:	89 c2                	mov    edx,eax
c001547e:	c3                   	ret    

c001547f <Sys::loadDLL(regs*)>:
c001547f:	56                   	push   esi
c0015480:	53                   	push   ebx
c0015481:	31 d2                	xor    edx,edx
c0015483:	51                   	push   ecx
c0015484:	b8 01 00 00 00       	mov    eax,0x1
c0015489:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001548d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015491:	74 7d                	je     c0015510 <Sys::loadDLL(regs*)+0x91>
c0015493:	83 ec 0c             	sub    esp,0xc
c0015496:	68 14 01 00 00       	push   0x114
c001549b:	e8 14 9a ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00154a0:	83 c4 0c             	add    esp,0xc
c00154a3:	89 c3                	mov    ebx,eax
c00154a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154aa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00154ad:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00154b0:	53                   	push   ebx
c00154b1:	e8 1c a0 ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c00154b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154b9:	e8 e6 a2 ff ff       	call   c000f7a4 <File::exists()>
c00154be:	83 c4 10             	add    esp,0x10
c00154c1:	84 c0                	test   al,al
c00154c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154c5:	75 11                	jne    c00154d8 <Sys::loadDLL(regs*)+0x59>
c00154c7:	83 ec 0c             	sub    esp,0xc
c00154ca:	53                   	push   ebx
c00154cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154ce:	83 c4 10             	add    esp,0x10
c00154d1:	b8 03 00 00 00       	mov    eax,0x3
c00154d6:	eb 36                	jmp    c001550e <Sys::loadDLL(regs*)+0x8f>
c00154d8:	83 ec 0c             	sub    esp,0xc
c00154db:	53                   	push   ebx
c00154dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154df:	58                   	pop    eax
c00154e0:	5a                   	pop    edx
c00154e1:	6a 00                	push   0x0
c00154e3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00154e6:	e8 0d 21 00 00       	call   c00175f8 <Thr::loadDLL(char const*, bool)>
c00154eb:	83 c4 10             	add    esp,0x10
c00154ee:	89 c1                	mov    ecx,eax
c00154f0:	31 d2                	xor    edx,edx
c00154f2:	b8 04 00 00 00       	mov    eax,0x4
c00154f7:	85 c9                	test   ecx,ecx
c00154f9:	74 15                	je     c0015510 <Sys::loadDLL(regs*)+0x91>
c00154fb:	53                   	push   ebx
c00154fc:	53                   	push   ebx
c00154fd:	ff 35 48 36 02 c0    	push   DWORD PTR ds:0xc0023648
c0015503:	51                   	push   ecx
c0015504:	e8 42 22 00 00       	call   c001774b <Thr::executeDLL(unsigned long, void*)>
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	31 c0                	xor    eax,eax
c001550e:	31 d2                	xor    edx,edx
c0015510:	59                   	pop    ecx
c0015511:	5b                   	pop    ebx
c0015512:	5e                   	pop    esi
c0015513:	c3                   	ret    

c0015514 <Sys::read(regs*)>:
c0015514:	57                   	push   edi
c0015515:	56                   	push   esi
c0015516:	53                   	push   ebx
c0015517:	83 ec 10             	sub    esp,0x10
c001551a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001551e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015521:	83 f8 02             	cmp    eax,0x2
c0015524:	77 10                	ja     c0015536 <Sys::read(regs*)+0x22>
c0015526:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001552b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001552e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015534:	eb 0e                	jmp    c0015544 <Sys::read(regs*)+0x30>
c0015536:	83 ec 0c             	sub    esp,0xc
c0015539:	50                   	push   eax
c001553a:	e8 94 86 ff ff       	call   c000dbd3 <getFromFileDescriptor(int)>
c001553f:	83 c4 10             	add    esp,0x10
c0015542:	89 c1                	mov    ecx,eax
c0015544:	83 c8 ff             	or     eax,0xffffffff
c0015547:	85 c9                	test   ecx,ecx
c0015549:	89 c2                	mov    edx,eax
c001554b:	74 28                	je     c0015575 <Sys::read(regs*)+0x61>
c001554d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015555:	31 ff                	xor    edi,edi
c0015557:	83 ec 0c             	sub    esp,0xc
c001555a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001555c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015560:	52                   	push   edx
c0015561:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015564:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015567:	57                   	push   edi
c0015568:	56                   	push   esi
c0015569:	51                   	push   ecx
c001556a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001556d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015571:	83 c4 20             	add    esp,0x20
c0015574:	99                   	cdq    
c0015575:	83 c4 10             	add    esp,0x10
c0015578:	5b                   	pop    ebx
c0015579:	5e                   	pop    esi
c001557a:	5f                   	pop    edi
c001557b:	c3                   	ret    

c001557c <Sys::sbrk(regs*)>:
c001557c:	56                   	push   esi
c001557d:	53                   	push   ebx
c001557e:	50                   	push   eax
c001557f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015584:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015588:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001558b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001558e:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0015594:	85 db                	test   ebx,ebx
c0015596:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015599:	74 02                	je     c001559d <Sys::sbrk(regs*)+0x21>
c001559b:	79 06                	jns    c00155a3 <Sys::sbrk(regs*)+0x27>
c001559d:	89 f0                	mov    eax,esi
c001559f:	31 d2                	xor    edx,edx
c00155a1:	eb 2a                	jmp    c00155cd <Sys::sbrk(regs*)+0x51>
c00155a3:	83 c8 ff             	or     eax,0xffffffff
c00155a6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00155ac:	89 c2                	mov    edx,eax
c00155ae:	77 1d                	ja     c00155cd <Sys::sbrk(regs*)+0x51>
c00155b0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00155b6:	50                   	push   eax
c00155b7:	c1 ea 0c             	shr    edx,0xc
c00155ba:	68 07 04 00 00       	push   0x407
c00155bf:	52                   	push   edx
c00155c0:	51                   	push   ecx
c00155c1:	e8 94 8e ff ff       	call   c000e45a <VAS::allocatePages(int, int)>
c00155c6:	89 f0                	mov    eax,esi
c00155c8:	31 d2                	xor    edx,edx
c00155ca:	83 c4 10             	add    esp,0x10
c00155cd:	59                   	pop    ecx
c00155ce:	5b                   	pop    ebx
c00155cf:	5e                   	pop    esi
c00155d0:	c3                   	ret    

c00155d1 <Sys::write(regs*)>:
c00155d1:	57                   	push   edi
c00155d2:	56                   	push   esi
c00155d3:	53                   	push   ebx
c00155d4:	83 ec 1c             	sub    esp,0x1c
c00155d7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00155db:	68 33 19 02 c0       	push   0xc0021933
c00155e0:	e8 be 99 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00155e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00155e8:	83 c4 10             	add    esp,0x10
c00155eb:	83 f8 02             	cmp    eax,0x2
c00155ee:	77 10                	ja     c0015600 <Sys::write(regs*)+0x2f>
c00155f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155f8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00155fe:	eb 0e                	jmp    c001560e <Sys::write(regs*)+0x3d>
c0015600:	83 ec 0c             	sub    esp,0xc
c0015603:	50                   	push   eax
c0015604:	e8 ca 85 ff ff       	call   c000dbd3 <getFromFileDescriptor(int)>
c0015609:	83 c4 10             	add    esp,0x10
c001560c:	89 c1                	mov    ecx,eax
c001560e:	83 c8 ff             	or     eax,0xffffffff
c0015611:	85 c9                	test   ecx,ecx
c0015613:	89 c2                	mov    edx,eax
c0015615:	74 28                	je     c001563f <Sys::write(regs*)+0x6e>
c0015617:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001561f:	31 ff                	xor    edi,edi
c0015621:	83 ec 0c             	sub    esp,0xc
c0015624:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015626:	8d 54 24 18          	lea    edx,[esp+0x18]
c001562a:	52                   	push   edx
c001562b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001562e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015631:	57                   	push   edi
c0015632:	56                   	push   esi
c0015633:	51                   	push   ecx
c0015634:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001563b:	83 c4 20             	add    esp,0x20
c001563e:	99                   	cdq    
c001563f:	83 c4 10             	add    esp,0x10
c0015642:	5b                   	pop    ebx
c0015643:	5e                   	pop    esi
c0015644:	5f                   	pop    edi
c0015645:	c3                   	ret    

c0015646 <Sys::yield(regs*)>:
c0015646:	83 ec 0c             	sub    esp,0xc
c0015649:	e8 08 25 00 00       	call   c0017b56 <lockScheduler()>
c001564e:	e8 37 28 00 00       	call   c0017e8a <schedule()>
c0015653:	e8 00 25 00 00       	call   c0017b58 <unlockScheduler()>
c0015658:	31 c0                	xor    eax,eax
c001565a:	31 d2                	xor    edx,edx
c001565c:	83 c4 0c             	add    esp,0xc
c001565f:	c3                   	ret    

c0015660 <sysCallGetPID(regs*)>:
c0015660:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015665:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015668:	8b 00                	mov    eax,DWORD PTR [eax]
c001566a:	99                   	cdq    
c001566b:	c3                   	ret    

c001566c <sysCallSeekDir(regs*)>:
c001566c:	31 c0                	xor    eax,eax
c001566e:	31 d2                	xor    edx,edx
c0015670:	c3                   	ret    

c0015671 <sysCallTellDir(regs*)>:
c0015671:	31 c0                	xor    eax,eax
c0015673:	31 d2                	xor    edx,edx
c0015675:	c3                   	ret    

c0015676 <sysCallVerify(regs*)>:
c0015676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001567a:	31 d2                	xor    edx,edx
c001567c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001567f:	c3                   	ret    

c0015680 <sysCallGetArgc(regs*)>:
c0015680:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015685:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015688:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001568e:	99                   	cdq    
c001568f:	c3                   	ret    

c0015690 <sysFormatDisk(regs*)>:
c0015690:	56                   	push   esi
c0015691:	53                   	push   ebx
c0015692:	53                   	push   ebx
c0015693:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015697:	8b 1d a8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a8
c001569d:	eb 25                	jmp    c00156c4 <sysFormatDisk(regs*)+0x34>
c001569f:	83 ec 0c             	sub    esp,0xc
c00156a2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00156a5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00156a7:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00156aa:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00156ad:	50                   	push   eax
c00156ae:	ff 34 85 40 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc3c0]
c00156b5:	53                   	push   ebx
c00156b6:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00156b9:	83 c4 20             	add    esp,0x20
c00156bc:	83 f8 08             	cmp    eax,0x8
c00156bf:	75 12                	jne    c00156d3 <sysFormatDisk(regs*)+0x43>
c00156c1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00156c4:	85 db                	test   ebx,ebx
c00156c6:	75 d7                	jne    c001569f <sysFormatDisk(regs*)+0xf>
c00156c8:	59                   	pop    ecx
c00156c9:	b8 03 00 00 00       	mov    eax,0x3
c00156ce:	31 d2                	xor    edx,edx
c00156d0:	5b                   	pop    ebx
c00156d1:	5e                   	pop    esi
c00156d2:	c3                   	ret    
c00156d3:	85 c0                	test   eax,eax
c00156d5:	74 1b                	je     c00156f2 <sysFormatDisk(regs*)+0x62>
c00156d7:	83 f8 09             	cmp    eax,0x9
c00156da:	74 0b                	je     c00156e7 <sysFormatDisk(regs*)+0x57>
c00156dc:	59                   	pop    ecx
c00156dd:	b8 02 00 00 00       	mov    eax,0x2
c00156e2:	31 d2                	xor    edx,edx
c00156e4:	5b                   	pop    ebx
c00156e5:	5e                   	pop    esi
c00156e6:	c3                   	ret    
c00156e7:	59                   	pop    ecx
c00156e8:	b8 01 00 00 00       	mov    eax,0x1
c00156ed:	31 d2                	xor    edx,edx
c00156ef:	5b                   	pop    ebx
c00156f0:	5e                   	pop    esi
c00156f1:	c3                   	ret    
c00156f2:	59                   	pop    ecx
c00156f3:	31 c0                	xor    eax,eax
c00156f5:	31 d2                	xor    edx,edx
c00156f7:	5b                   	pop    ebx
c00156f8:	5e                   	pop    esi
c00156f9:	c3                   	ret    

c00156fa <sysSetDiskVolumeLabel(regs*)>:
c00156fa:	56                   	push   esi
c00156fb:	53                   	push   ebx
c00156fc:	53                   	push   ebx
c00156fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015701:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015704:	83 f8 19             	cmp    eax,0x19
c0015707:	77 29                	ja     c0015732 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015709:	8b 0c 85 40 3c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc3c0]
c0015710:	85 c9                	test   ecx,ecx
c0015712:	74 1e                	je     c0015732 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015714:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0015717:	85 d2                	test   edx,edx
c0015719:	74 17                	je     c0015732 <sysSetDiskVolumeLabel(regs*)+0x38>
c001571b:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015721:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015723:	52                   	push   edx
c0015724:	50                   	push   eax
c0015725:	51                   	push   ecx
c0015726:	53                   	push   ebx
c0015727:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001572a:	83 c4 10             	add    esp,0x10
c001572d:	99                   	cdq    
c001572e:	59                   	pop    ecx
c001572f:	5b                   	pop    ebx
c0015730:	5e                   	pop    esi
c0015731:	c3                   	ret    
c0015732:	59                   	pop    ecx
c0015733:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015738:	ba ff ff ff ff       	mov    edx,0xffffffff
c001573d:	5b                   	pop    ebx
c001573e:	5e                   	pop    esi
c001573f:	c3                   	ret    

c0015740 <sysGetDiskVolumeLabel(regs*)>:
c0015740:	57                   	push   edi
c0015741:	56                   	push   esi
c0015742:	53                   	push   ebx
c0015743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015747:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001574a:	83 fa 19             	cmp    edx,0x19
c001574d:	77 34                	ja     c0015783 <sysGetDiskVolumeLabel(regs*)+0x43>
c001574f:	8b 0c 95 40 3c 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc3c0]
c0015756:	85 c9                	test   ecx,ecx
c0015758:	74 29                	je     c0015783 <sysGetDiskVolumeLabel(regs*)+0x43>
c001575a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001575d:	85 db                	test   ebx,ebx
c001575f:	74 22                	je     c0015783 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015761:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015764:	85 c0                	test   eax,eax
c0015766:	74 1b                	je     c0015783 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015768:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001576e:	83 ec 0c             	sub    esp,0xc
c0015771:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015773:	50                   	push   eax
c0015774:	53                   	push   ebx
c0015775:	52                   	push   edx
c0015776:	51                   	push   ecx
c0015777:	56                   	push   esi
c0015778:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001577b:	83 c4 20             	add    esp,0x20
c001577e:	99                   	cdq    
c001577f:	5b                   	pop    ebx
c0015780:	5e                   	pop    esi
c0015781:	5f                   	pop    edi
c0015782:	c3                   	ret    
c0015783:	5b                   	pop    ebx
c0015784:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015789:	ba ff ff ff ff       	mov    edx,0xffffffff
c001578e:	5e                   	pop    esi
c001578f:	5f                   	pop    edi
c0015790:	c3                   	ret    

c0015791 <sysShutdown(regs*)>:
c0015791:	83 ec 0c             	sub    esp,0xc
c0015794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015798:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001579b:	85 c0                	test   eax,eax
c001579d:	74 18                	je     c00157b7 <sysShutdown(regs*)+0x26>
c001579f:	83 f8 01             	cmp    eax,0x1
c00157a2:	74 38                	je     c00157dc <sysShutdown(regs*)+0x4b>
c00157a4:	83 f8 02             	cmp    eax,0x2
c00157a7:	74 24                	je     c00157cd <sysShutdown(regs*)+0x3c>
c00157a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00157ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157b3:	83 c4 0c             	add    esp,0xc
c00157b6:	c3                   	ret    
c00157b7:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c00157bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00157be:	6a 00                	push   0x0
c00157c0:	6a 00                	push   0x0
c00157c2:	6a 00                	push   0x0
c00157c4:	50                   	push   eax
c00157c5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157c8:	83 c4 10             	add    esp,0x10
c00157cb:	eb dc                	jmp    c00157a9 <sysShutdown(regs*)+0x18>
c00157cd:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c00157d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00157d4:	6a 00                	push   0x0
c00157d6:	6a 00                	push   0x0
c00157d8:	6a 01                	push   0x1
c00157da:	eb e8                	jmp    c00157c4 <sysShutdown(regs*)+0x33>
c00157dc:	a1 c0 3c 02 c0       	mov    eax,ds:0xc0023cc0
c00157e1:	85 c0                	test   eax,eax
c00157e3:	74 02                	je     c00157e7 <sysShutdown(regs*)+0x56>
c00157e5:	ff d0                	call   eax
c00157e7:	31 c0                	xor    eax,eax
c00157e9:	31 d2                	xor    edx,edx
c00157eb:	83 c4 0c             	add    esp,0xc
c00157ee:	c3                   	ret    

c00157ef <sysCallGetCwd(regs*)>:
c00157ef:	83 ec 10             	sub    esp,0x10
c00157f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157f6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00157f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00157fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015801:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015804:	e8 3a a0 ff ff       	call   c000f843 <getcwd(Process*, char*, int)>
c0015809:	83 c4 1c             	add    esp,0x1c
c001580c:	99                   	cdq    
c001580d:	c3                   	ret    

c001580e <sysCallSetCwd(regs*)>:
c001580e:	83 ec 14             	sub    esp,0x14
c0015811:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015815:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015818:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001581d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015820:	e8 48 a0 ff ff       	call   c000f86d <setcwd(Process*, char*)>
c0015825:	83 c4 1c             	add    esp,0x1c
c0015828:	99                   	cdq    
c0015829:	c3                   	ret    

c001582a <sysCallRealpath(regs*)>:
c001582a:	83 ec 0c             	sub    esp,0xc
c001582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015831:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015834:	85 d2                	test   edx,edx
c0015836:	74 07                	je     c001583f <sysCallRealpath(regs*)+0x15>
c0015838:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001583b:	85 c0                	test   eax,eax
c001583d:	75 0b                	jne    c001584a <sysCallRealpath(regs*)+0x20>
c001583f:	b8 01 00 00 00       	mov    eax,0x1
c0015844:	31 d2                	xor    edx,edx
c0015846:	83 c4 0c             	add    esp,0xc
c0015849:	c3                   	ret    
c001584a:	51                   	push   ecx
c001584b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015851:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015854:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001585a:	51                   	push   ecx
c001585b:	52                   	push   edx
c001585c:	50                   	push   eax
c001585d:	e8 c6 9a ff ff       	call   c000f328 <standardiseFiles(char*, char const*, char const*)>
c0015862:	83 c4 10             	add    esp,0x10
c0015865:	31 c0                	xor    eax,eax
c0015867:	31 d2                	xor    edx,edx
c0015869:	83 c4 0c             	add    esp,0xc
c001586c:	c3                   	ret    

c001586d <sysCallReadDir(regs*)>:
c001586d:	53                   	push   ebx
c001586e:	83 ec 18             	sub    esp,0x18
c0015871:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015875:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015878:	83 f8 02             	cmp    eax,0x2
c001587b:	76 53                	jbe    c00158d0 <sysCallReadDir(regs*)+0x63>
c001587d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015880:	81 fa 00 ff ff 7f    	cmp    edx,0x7fffff00
c0015886:	77 4f                	ja     c00158d7 <sysCallReadDir(regs*)+0x6a>
c0015888:	83 ec 0c             	sub    esp,0xc
c001588b:	50                   	push   eax
c001588c:	e8 42 83 ff ff       	call   c000dbd3 <getFromFileDescriptor(int)>
c0015891:	83 c4 10             	add    esp,0x10
c0015894:	85 c0                	test   eax,eax
c0015896:	74 50                	je     c00158e8 <sysCallReadDir(regs*)+0x7b>
c0015898:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00158a0:	83 ec 0c             	sub    esp,0xc
c00158a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00158a5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00158a9:	51                   	push   ecx
c00158aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00158ad:	6a 00                	push   0x0
c00158af:	68 10 01 00 00       	push   0x110
c00158b4:	50                   	push   eax
c00158b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00158b8:	83 c4 20             	add    esp,0x20
c00158bb:	85 c0                	test   eax,eax
c00158bd:	74 38                	je     c00158f7 <sysCallReadDir(regs*)+0x8a>
c00158bf:	83 f8 07             	cmp    eax,0x7
c00158c2:	74 0c                	je     c00158d0 <sysCallReadDir(regs*)+0x63>
c00158c4:	b8 02 00 00 00       	mov    eax,0x2
c00158c9:	31 d2                	xor    edx,edx
c00158cb:	83 c4 18             	add    esp,0x18
c00158ce:	5b                   	pop    ebx
c00158cf:	c3                   	ret    
c00158d0:	b8 01 00 00 00       	mov    eax,0x1
c00158d5:	eb f2                	jmp    c00158c9 <sysCallReadDir(regs*)+0x5c>
c00158d7:	83 ec 08             	sub    esp,0x8
c00158da:	52                   	push   edx
c00158db:	68 44 19 02 c0       	push   0xc0021944
c00158e0:	e8 be 96 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00158e5:	83 c4 10             	add    esp,0x10
c00158e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158f2:	83 c4 18             	add    esp,0x18
c00158f5:	5b                   	pop    ebx
c00158f6:	c3                   	ret    
c00158f7:	31 c0                	xor    eax,eax
c00158f9:	eb ce                	jmp    c00158c9 <sysCallReadDir(regs*)+0x5c>

c00158fb <sysCallIsATTY(regs*)>:
c00158fb:	83 ec 0c             	sub    esp,0xc
c00158fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015902:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015905:	83 f8 02             	cmp    eax,0x2
c0015908:	76 07                	jbe    c0015911 <sysCallIsATTY(regs*)+0x16>
c001590a:	3d 01 ff ff 7f       	cmp    eax,0x7fffff01
c001590f:	75 26                	jne    c0015937 <sysCallIsATTY(regs*)+0x3c>
c0015911:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015916:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015919:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001591f:	85 c0                	test   eax,eax
c0015921:	74 24                	je     c0015947 <sysCallIsATTY(regs*)+0x4c>
c0015923:	83 ec 0c             	sub    esp,0xc
c0015926:	8b 10                	mov    edx,DWORD PTR [eax]
c0015928:	50                   	push   eax
c0015929:	ff 12                	call   DWORD PTR [edx]
c001592b:	31 d2                	xor    edx,edx
c001592d:	0f b6 c0             	movzx  eax,al
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	83 c4 0c             	add    esp,0xc
c0015936:	c3                   	ret    
c0015937:	83 ec 0c             	sub    esp,0xc
c001593a:	50                   	push   eax
c001593b:	e8 93 82 ff ff       	call   c000dbd3 <getFromFileDescriptor(int)>
c0015940:	83 c4 10             	add    esp,0x10
c0015943:	85 c0                	test   eax,eax
c0015945:	75 dc                	jne    c0015923 <sysCallIsATTY(regs*)+0x28>
c0015947:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001594c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015951:	83 c4 0c             	add    esp,0xc
c0015954:	c3                   	ret    

c0015955 <sysCallSeek(regs*)>:
c0015955:	53                   	push   ebx
c0015956:	83 ec 08             	sub    esp,0x8
c0015959:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001595d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015960:	83 f8 02             	cmp    eax,0x2
c0015963:	76 4a                	jbe    c00159af <sysCallSeek(regs*)+0x5a>
c0015965:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c001596a:	77 32                	ja     c001599e <sysCallSeek(regs*)+0x49>
c001596c:	83 ec 0c             	sub    esp,0xc
c001596f:	50                   	push   eax
c0015970:	e8 5e 82 ff ff       	call   c000dbd3 <getFromFileDescriptor(int)>
c0015975:	83 c4 0c             	add    esp,0xc
c0015978:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001597b:	31 db                	xor    ebx,ebx
c001597d:	53                   	push   ebx
c001597e:	51                   	push   ecx
c001597f:	50                   	push   eax
c0015980:	e8 6f 9c ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0015985:	83 c4 10             	add    esp,0x10
c0015988:	85 c0                	test   eax,eax
c001598a:	0f 95 c0             	setne  al
c001598d:	31 d2                	xor    edx,edx
c001598f:	0f b6 c0             	movzx  eax,al
c0015992:	f7 d8                	neg    eax
c0015994:	83 d2 00             	adc    edx,0x0
c0015997:	83 c4 08             	add    esp,0x8
c001599a:	f7 da                	neg    edx
c001599c:	5b                   	pop    ebx
c001599d:	c3                   	ret    
c001599e:	83 ec 08             	sub    esp,0x8
c00159a1:	50                   	push   eax
c00159a2:	68 00 1a 02 c0       	push   0xc0021a00
c00159a7:	e8 f7 95 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00159ac:	83 c4 10             	add    esp,0x10
c00159af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159b9:	83 c4 08             	add    esp,0x8
c00159bc:	5b                   	pop    ebx
c00159bd:	c3                   	ret    

c00159be <sysCallTell(regs*)>:
c00159be:	53                   	push   ebx
c00159bf:	83 ec 08             	sub    esp,0x8
c00159c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159c6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159c9:	83 f8 02             	cmp    eax,0x2
c00159cc:	76 5e                	jbe    c0015a2c <sysCallTell(regs*)+0x6e>
c00159ce:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c00159d3:	77 2d                	ja     c0015a02 <sysCallTell(regs*)+0x44>
c00159d5:	83 ec 0c             	sub    esp,0xc
c00159d8:	50                   	push   eax
c00159d9:	e8 f5 81 ff ff       	call   c000dbd3 <getFromFileDescriptor(int)>
c00159de:	5a                   	pop    edx
c00159df:	59                   	pop    ecx
c00159e0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00159e3:	50                   	push   eax
c00159e4:	e8 61 9c ff ff       	call   c000f64a <File::tell(unsigned long long*)>
c00159e9:	83 c4 10             	add    esp,0x10
c00159ec:	85 c0                	test   eax,eax
c00159ee:	0f 95 c0             	setne  al
c00159f1:	31 d2                	xor    edx,edx
c00159f3:	0f b6 c0             	movzx  eax,al
c00159f6:	f7 d8                	neg    eax
c00159f8:	83 d2 00             	adc    edx,0x0
c00159fb:	83 c4 08             	add    esp,0x8
c00159fe:	f7 da                	neg    edx
c0015a00:	5b                   	pop    ebx
c0015a01:	c3                   	ret    
c0015a02:	83 ec 08             	sub    esp,0x8
c0015a05:	50                   	push   eax
c0015a06:	68 1a 1a 02 c0       	push   0xc0021a1a
c0015a0b:	e8 93 95 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0015a10:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015a13:	83 c4 10             	add    esp,0x10
c0015a16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a23:	31 d2                	xor    edx,edx
c0015a25:	31 c0                	xor    eax,eax
c0015a27:	83 c4 08             	add    esp,0x8
c0015a2a:	5b                   	pop    ebx
c0015a2b:	c3                   	ret    
c0015a2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a31:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a36:	83 c4 08             	add    esp,0x8
c0015a39:	5b                   	pop    ebx
c0015a3a:	c3                   	ret    

c0015a3b <sysCallSizeFromFilename(regs*)>:
c0015a3b:	57                   	push   edi
c0015a3c:	56                   	push   esi
c0015a3d:	53                   	push   ebx
c0015a3e:	83 ec 10             	sub    esp,0x10
c0015a41:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015a45:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015a48:	83 fb 02             	cmp    ebx,0x2
c0015a4b:	0f 86 8a 00 00 00    	jbe    c0015adb <sysCallSizeFromFilename(regs*)+0xa0>
c0015a51:	81 fb 00 ff ff 7f    	cmp    ebx,0x7fffff00
c0015a57:	77 56                	ja     c0015aaf <sysCallSizeFromFilename(regs*)+0x74>
c0015a59:	83 ec 0c             	sub    esp,0xc
c0015a5c:	68 14 01 00 00       	push   0x114
c0015a61:	e8 4e 94 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0015a66:	83 c4 0c             	add    esp,0xc
c0015a69:	89 c7                	mov    edi,eax
c0015a6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a70:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a73:	53                   	push   ebx
c0015a74:	57                   	push   edi
c0015a75:	e8 58 9a ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c0015a7a:	83 c4 0c             	add    esp,0xc
c0015a7d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015a81:	50                   	push   eax
c0015a82:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a85:	57                   	push   edi
c0015a86:	e8 57 9d ff ff       	call   c000f7e2 <File::stat(unsigned long long*, bool*)>
c0015a8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015a8e:	89 c3                	mov    ebx,eax
c0015a90:	8b 07                	mov    eax,DWORD PTR [edi]
c0015a92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	31 c0                	xor    eax,eax
c0015a9a:	85 db                	test   ebx,ebx
c0015a9c:	0f 95 c0             	setne  al
c0015a9f:	31 d2                	xor    edx,edx
c0015aa1:	f7 d8                	neg    eax
c0015aa3:	83 d2 00             	adc    edx,0x0
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	f7 da                	neg    edx
c0015aab:	5b                   	pop    ebx
c0015aac:	5e                   	pop    esi
c0015aad:	5f                   	pop    edi
c0015aae:	c3                   	ret    
c0015aaf:	83 ec 08             	sub    esp,0x8
c0015ab2:	53                   	push   ebx
c0015ab3:	68 34 1a 02 c0       	push   0xc0021a34
c0015ab8:	e8 e6 94 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0015abd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015ac0:	83 c4 10             	add    esp,0x10
c0015ac3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ac9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015ad0:	31 d2                	xor    edx,edx
c0015ad2:	83 c4 10             	add    esp,0x10
c0015ad5:	31 c0                	xor    eax,eax
c0015ad7:	5b                   	pop    ebx
c0015ad8:	5e                   	pop    esi
c0015ad9:	5f                   	pop    edi
c0015ada:	c3                   	ret    
c0015adb:	83 c4 10             	add    esp,0x10
c0015ade:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ae3:	5b                   	pop    ebx
c0015ae4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ae9:	5e                   	pop    esi
c0015aea:	5f                   	pop    edi
c0015aeb:	c3                   	ret    

c0015aec <sysCallSize(regs*)>:
c0015aec:	53                   	push   ebx
c0015aed:	83 ec 18             	sub    esp,0x18
c0015af0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015af4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015af7:	83 f8 02             	cmp    eax,0x2
c0015afa:	76 64                	jbe    c0015b60 <sysCallSize(regs*)+0x74>
c0015afc:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c0015b01:	77 33                	ja     c0015b36 <sysCallSize(regs*)+0x4a>
c0015b03:	83 ec 0c             	sub    esp,0xc
c0015b06:	50                   	push   eax
c0015b07:	e8 c7 80 ff ff       	call   c000dbd3 <getFromFileDescriptor(int)>
c0015b0c:	83 c4 0c             	add    esp,0xc
c0015b0f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015b13:	52                   	push   edx
c0015b14:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015b17:	50                   	push   eax
c0015b18:	e8 c5 9c ff ff       	call   c000f7e2 <File::stat(unsigned long long*, bool*)>
c0015b1d:	83 c4 10             	add    esp,0x10
c0015b20:	85 c0                	test   eax,eax
c0015b22:	0f 95 c0             	setne  al
c0015b25:	31 d2                	xor    edx,edx
c0015b27:	0f b6 c0             	movzx  eax,al
c0015b2a:	f7 d8                	neg    eax
c0015b2c:	83 d2 00             	adc    edx,0x0
c0015b2f:	83 c4 18             	add    esp,0x18
c0015b32:	f7 da                	neg    edx
c0015b34:	5b                   	pop    ebx
c0015b35:	c3                   	ret    
c0015b36:	83 ec 08             	sub    esp,0x8
c0015b39:	50                   	push   eax
c0015b3a:	68 34 1a 02 c0       	push   0xc0021a34
c0015b3f:	e8 5f 94 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0015b44:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015b47:	83 c4 10             	add    esp,0x10
c0015b4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015b50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015b57:	31 d2                	xor    edx,edx
c0015b59:	31 c0                	xor    eax,eax
c0015b5b:	83 c4 18             	add    esp,0x18
c0015b5e:	5b                   	pop    ebx
c0015b5f:	c3                   	ret    
c0015b60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b65:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b6a:	83 c4 18             	add    esp,0x18
c0015b6d:	5b                   	pop    ebx
c0015b6e:	c3                   	ret    

c0015b6f <sysCallClose(regs*)>:
c0015b6f:	53                   	push   ebx
c0015b70:	83 ec 08             	sub    esp,0x8
c0015b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b77:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b7a:	83 f8 02             	cmp    eax,0x2
c0015b7d:	76 50                	jbe    c0015bcf <sysCallClose(regs*)+0x60>
c0015b7f:	3d 01 ff ff 7f       	cmp    eax,0x7fffff01
c0015b84:	74 58                	je     c0015bde <sysCallClose(regs*)+0x6f>
c0015b86:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c0015b8b:	74 60                	je     c0015bed <sysCallClose(regs*)+0x7e>
c0015b8d:	77 2f                	ja     c0015bbe <sysCallClose(regs*)+0x4f>
c0015b8f:	83 ec 0c             	sub    esp,0xc
c0015b92:	50                   	push   eax
c0015b93:	e8 3b 80 ff ff       	call   c000dbd3 <getFromFileDescriptor(int)>
c0015b98:	89 c3                	mov    ebx,eax
c0015b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b9d:	e8 f2 99 ff ff       	call   c000f594 <File::close()>
c0015ba2:	83 c4 10             	add    esp,0x10
c0015ba5:	85 db                	test   ebx,ebx
c0015ba7:	74 0c                	je     c0015bb5 <sysCallClose(regs*)+0x46>
c0015ba9:	83 ec 0c             	sub    esp,0xc
c0015bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bae:	53                   	push   ebx
c0015baf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bb2:	83 c4 10             	add    esp,0x10
c0015bb5:	31 c0                	xor    eax,eax
c0015bb7:	31 d2                	xor    edx,edx
c0015bb9:	83 c4 08             	add    esp,0x8
c0015bbc:	5b                   	pop    ebx
c0015bbd:	c3                   	ret    
c0015bbe:	83 ec 08             	sub    esp,0x8
c0015bc1:	50                   	push   eax
c0015bc2:	68 68 19 02 c0       	push   0xc0021968
c0015bc7:	e8 d7 93 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0015bcc:	83 c4 10             	add    esp,0x10
c0015bcf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bd4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bd9:	83 c4 08             	add    esp,0x8
c0015bdc:	5b                   	pop    ebx
c0015bdd:	c3                   	ret    
c0015bde:	83 ec 0c             	sub    esp,0xc
c0015be1:	68 4f 1a 02 c0       	push   0xc0021a4f
c0015be6:	e8 b8 93 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0015beb:	eb c5                	jmp    c0015bb2 <sysCallClose(regs*)+0x43>
c0015bed:	83 ec 0c             	sub    esp,0xc
c0015bf0:	68 5d 1a 02 c0       	push   0xc0021a5d
c0015bf5:	eb ef                	jmp    c0015be6 <sysCallClose(regs*)+0x77>

c0015bf7 <sysCallOpenDir(regs*)>:
c0015bf7:	56                   	push   esi
c0015bf8:	53                   	push   ebx
c0015bf9:	53                   	push   ebx
c0015bfa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015bfe:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015c01:	85 f6                	test   esi,esi
c0015c03:	74 51                	je     c0015c56 <sysCallOpenDir(regs*)+0x5f>
c0015c05:	83 ec 0c             	sub    esp,0xc
c0015c08:	68 14 01 00 00       	push   0x114
c0015c0d:	e8 a2 92 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0015c12:	83 c4 0c             	add    esp,0xc
c0015c15:	89 c6                	mov    esi,eax
c0015c17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c1c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c1f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c22:	56                   	push   esi
c0015c23:	e8 6c 9d ff ff       	call   c000f994 <Directory::Directory(char const*, Process*)>
c0015c28:	89 34 24             	mov    DWORD PTR [esp],esi
c0015c2b:	e8 c8 9d ff ff       	call   c000f9f8 <Directory::open()>
c0015c30:	83 c4 10             	add    esp,0x10
c0015c33:	85 c0                	test   eax,eax
c0015c35:	75 1f                	jne    c0015c56 <sysCallOpenDir(regs*)+0x5f>
c0015c37:	83 ec 0c             	sub    esp,0xc
c0015c3a:	56                   	push   esi
c0015c3b:	e8 e8 7c ff ff       	call   c000d928 <UnixFile::getFileDescriptor()>
c0015c40:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015c43:	83 c4 10             	add    esp,0x10
c0015c46:	89 02                	mov    DWORD PTR [edx],eax
c0015c48:	c1 f8 1f             	sar    eax,0x1f
c0015c4b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015c4e:	31 c0                	xor    eax,eax
c0015c50:	59                   	pop    ecx
c0015c51:	31 d2                	xor    edx,edx
c0015c53:	5b                   	pop    ebx
c0015c54:	5e                   	pop    esi
c0015c55:	c3                   	ret    
c0015c56:	59                   	pop    ecx
c0015c57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c5c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c61:	5b                   	pop    ebx
c0015c62:	5e                   	pop    esi
c0015c63:	c3                   	ret    

c0015c64 <sysCallMakeDir(regs*)>:
c0015c64:	56                   	push   esi
c0015c65:	53                   	push   ebx
c0015c66:	83 ec 10             	sub    esp,0x10
c0015c69:	68 14 01 00 00       	push   0x114
c0015c6e:	e8 41 92 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0015c73:	83 c4 0c             	add    esp,0xc
c0015c76:	89 c3                	mov    ebx,eax
c0015c78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c7d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c84:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c87:	53                   	push   ebx
c0015c88:	e8 07 9d ff ff       	call   c000f994 <Directory::Directory(char const*, Process*)>
c0015c8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c90:	e8 43 9f ff ff       	call   c000fbd8 <Directory::create()>
c0015c95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c98:	89 c6                	mov    esi,eax
c0015c9a:	e8 b5 9d ff ff       	call   c000fa54 <Directory::close()>
c0015c9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ca4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ca7:	31 c0                	xor    eax,eax
c0015ca9:	85 f6                	test   esi,esi
c0015cab:	0f 95 c0             	setne  al
c0015cae:	31 d2                	xor    edx,edx
c0015cb0:	f7 d8                	neg    eax
c0015cb2:	83 d2 00             	adc    edx,0x0
c0015cb5:	83 c4 14             	add    esp,0x14
c0015cb8:	f7 da                	neg    edx
c0015cba:	5b                   	pop    ebx
c0015cbb:	5e                   	pop    esi
c0015cbc:	c3                   	ret    

c0015cbd <sysCallCloseDir(regs*)>:
c0015cbd:	53                   	push   ebx
c0015cbe:	83 ec 08             	sub    esp,0x8
c0015cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cc5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015cc8:	83 f8 02             	cmp    eax,0x2
c0015ccb:	76 47                	jbe    c0015d14 <sysCallCloseDir(regs*)+0x57>
c0015ccd:	3d 00 ff ff 7f       	cmp    eax,0x7fffff00
c0015cd2:	77 2f                	ja     c0015d03 <sysCallCloseDir(regs*)+0x46>
c0015cd4:	83 ec 0c             	sub    esp,0xc
c0015cd7:	50                   	push   eax
c0015cd8:	e8 f6 7e ff ff       	call   c000dbd3 <getFromFileDescriptor(int)>
c0015cdd:	89 c3                	mov    ebx,eax
c0015cdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ce2:	e8 6d 9d ff ff       	call   c000fa54 <Directory::close()>
c0015ce7:	83 c4 10             	add    esp,0x10
c0015cea:	85 db                	test   ebx,ebx
c0015cec:	74 0c                	je     c0015cfa <sysCallCloseDir(regs*)+0x3d>
c0015cee:	83 ec 0c             	sub    esp,0xc
c0015cf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015cf3:	53                   	push   ebx
c0015cf4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015cf7:	83 c4 10             	add    esp,0x10
c0015cfa:	31 c0                	xor    eax,eax
c0015cfc:	31 d2                	xor    edx,edx
c0015cfe:	83 c4 08             	add    esp,0x8
c0015d01:	5b                   	pop    ebx
c0015d02:	c3                   	ret    
c0015d03:	83 ec 08             	sub    esp,0x8
c0015d06:	50                   	push   eax
c0015d07:	68 90 19 02 c0       	push   0xc0021990
c0015d0c:	e8 92 92 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0015d11:	83 c4 10             	add    esp,0x10
c0015d14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d1e:	83 c4 08             	add    esp,0x8
c0015d21:	5b                   	pop    ebx
c0015d22:	c3                   	ret    

c0015d23 <sysCallWait(regs*)>:
c0015d23:	83 ec 10             	sub    esp,0x10
c0015d26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d2a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015d2d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015d30:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015d33:	e8 3e 24 00 00       	call   c0018176 <waitTask(int, int*, int)>
c0015d38:	83 c4 1c             	add    esp,0x1c
c0015d3b:	99                   	cdq    
c0015d3c:	c3                   	ret    

c0015d3d <sysCallFork(regs*)>:
c0015d3d:	83 ec 18             	sub    esp,0x18
c0015d40:	68 6b 1a 02 c0       	push   0xc0021a6b
c0015d45:	e8 59 92 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0015d4a:	58                   	pop    eax
c0015d4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d4f:	e8 f0 21 00 00       	call   c0017f44 <forkProcess(regs*)>
c0015d54:	83 c4 1c             	add    esp,0x1c
c0015d57:	99                   	cdq    
c0015d58:	c3                   	ret    

c0015d59 <sysCallExecve(regs*)>:
c0015d59:	53                   	push   ebx
c0015d5a:	81 ec 24 01 00 00    	sub    esp,0x124
c0015d60:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c0015d67:	68 79 1a 02 c0       	push   0xc0021a79
c0015d6c:	e8 32 92 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0015d71:	83 c4 0c             	add    esp,0xc
c0015d74:	68 00 01 00 00       	push   0x100
c0015d79:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015d7d:	50                   	push   eax
c0015d7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d83:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015d86:	e8 b8 9a ff ff       	call   c000f843 <getcwd(Process*, char*, int)>
c0015d8b:	83 c4 0c             	add    esp,0xc
c0015d8e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d91:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015d94:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015d97:	e8 0e 25 00 00       	call   c00182aa <execveProcess(char const*, char* const*, char* const*)>
c0015d9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015da1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015da6:	81 c4 28 01 00 00    	add    esp,0x128
c0015dac:	5b                   	pop    ebx
c0015dad:	c3                   	ret    

c0015dae <sysCallRmdir(regs*)>:
c0015dae:	56                   	push   esi
c0015daf:	53                   	push   ebx
c0015db0:	83 ec 10             	sub    esp,0x10
c0015db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015db7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015dba:	68 14 01 00 00       	push   0x114
c0015dbf:	e8 f0 90 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0015dc4:	83 c4 0c             	add    esp,0xc
c0015dc7:	89 c3                	mov    ebx,eax
c0015dc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015dd1:	56                   	push   esi
c0015dd2:	53                   	push   ebx
c0015dd3:	e8 fa 96 ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c0015dd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ddb:	e8 ce 98 ff ff       	call   c000f6ae <File::unlink()>
c0015de0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015de3:	89 c6                	mov    esi,eax
c0015de5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015de7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015dea:	31 c0                	xor    eax,eax
c0015dec:	85 f6                	test   esi,esi
c0015dee:	0f 95 c0             	setne  al
c0015df1:	31 d2                	xor    edx,edx
c0015df3:	f7 d8                	neg    eax
c0015df5:	83 d2 00             	adc    edx,0x0
c0015df8:	83 c4 14             	add    esp,0x14
c0015dfb:	f7 da                	neg    edx
c0015dfd:	5b                   	pop    ebx
c0015dfe:	5e                   	pop    esi
c0015dff:	c3                   	ret    

c0015e00 <sysCallUnlink(regs*)>:
c0015e00:	56                   	push   esi
c0015e01:	53                   	push   ebx
c0015e02:	83 ec 10             	sub    esp,0x10
c0015e05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e09:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e0c:	68 14 01 00 00       	push   0x114
c0015e11:	e8 9e 90 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0015e16:	83 c4 0c             	add    esp,0xc
c0015e19:	89 c3                	mov    ebx,eax
c0015e1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e20:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e23:	56                   	push   esi
c0015e24:	53                   	push   ebx
c0015e25:	e8 a8 96 ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c0015e2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e2d:	e8 7c 98 ff ff       	call   c000f6ae <File::unlink()>
c0015e32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e35:	89 c6                	mov    esi,eax
c0015e37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e3c:	31 c0                	xor    eax,eax
c0015e3e:	85 f6                	test   esi,esi
c0015e40:	0f 95 c0             	setne  al
c0015e43:	31 d2                	xor    edx,edx
c0015e45:	f7 d8                	neg    eax
c0015e47:	83 d2 00             	adc    edx,0x0
c0015e4a:	83 c4 14             	add    esp,0x14
c0015e4d:	f7 da                	neg    edx
c0015e4f:	5b                   	pop    ebx
c0015e50:	5e                   	pop    esi
c0015e51:	c3                   	ret    

c0015e52 <sysCallGetArgv(regs*)>:
c0015e52:	83 ec 0c             	sub    esp,0xc
c0015e55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e59:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015e5c:	85 c0                	test   eax,eax
c0015e5e:	78 2b                	js     c0015e8b <sysCallGetArgv(regs*)+0x39>
c0015e60:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e66:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015e69:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015e6f:	7d 1a                	jge    c0015e8b <sysCallGetArgv(regs*)+0x39>
c0015e71:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015e78:	85 c0                	test   eax,eax
c0015e7a:	74 17                	je     c0015e93 <sysCallGetArgv(regs*)+0x41>
c0015e7c:	83 ec 08             	sub    esp,0x8
c0015e7f:	50                   	push   eax
c0015e80:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015e83:	e8 1f a8 fe ff       	call   c00006a7 <strcpy>
c0015e88:	83 c4 10             	add    esp,0x10
c0015e8b:	31 c0                	xor    eax,eax
c0015e8d:	31 d2                	xor    edx,edx
c0015e8f:	83 c4 0c             	add    esp,0xc
c0015e92:	c3                   	ret    
c0015e93:	b8 01 00 00 00       	mov    eax,0x1
c0015e98:	31 d2                	xor    edx,edx
c0015e9a:	83 c4 0c             	add    esp,0xc
c0015e9d:	c3                   	ret    

c0015e9e <sysCallTTYName(regs*)>:
c0015e9e:	56                   	push   esi
c0015e9f:	53                   	push   ebx
c0015ea0:	53                   	push   ebx
c0015ea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ea5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015ea8:	85 c0                	test   eax,eax
c0015eaa:	74 5f                	je     c0015f0b <sysCallTTYName(regs*)+0x6d>
c0015eac:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015eaf:	83 f8 02             	cmp    eax,0x2
c0015eb2:	77 3e                	ja     c0015ef2 <sysCallTTYName(regs*)+0x54>
c0015eb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ebc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ec2:	85 db                	test   ebx,ebx
c0015ec4:	74 45                	je     c0015f0b <sysCallTTYName(regs*)+0x6d>
c0015ec6:	83 ec 0c             	sub    esp,0xc
c0015ec9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ecb:	53                   	push   ebx
c0015ecc:	ff 10                	call   DWORD PTR [eax]
c0015ece:	83 c4 10             	add    esp,0x10
c0015ed1:	84 c0                	test   al,al
c0015ed3:	74 41                	je     c0015f16 <sysCallTTYName(regs*)+0x78>
c0015ed5:	83 ec 08             	sub    esp,0x8
c0015ed8:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015ede:	53                   	push   ebx
c0015edf:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015ee2:	e8 c0 a7 fe ff       	call   c00006a7 <strcpy>
c0015ee7:	83 c4 10             	add    esp,0x10
c0015eea:	31 c0                	xor    eax,eax
c0015eec:	59                   	pop    ecx
c0015eed:	31 d2                	xor    edx,edx
c0015eef:	5b                   	pop    ebx
c0015ef0:	5e                   	pop    esi
c0015ef1:	c3                   	ret    
c0015ef2:	3d 01 ff ff 7f       	cmp    eax,0x7fffff01
c0015ef7:	74 bb                	je     c0015eb4 <sysCallTTYName(regs*)+0x16>
c0015ef9:	83 ec 0c             	sub    esp,0xc
c0015efc:	50                   	push   eax
c0015efd:	e8 d1 7c ff ff       	call   c000dbd3 <getFromFileDescriptor(int)>
c0015f02:	83 c4 10             	add    esp,0x10
c0015f05:	89 c3                	mov    ebx,eax
c0015f07:	85 db                	test   ebx,ebx
c0015f09:	75 bb                	jne    c0015ec6 <sysCallTTYName(regs*)+0x28>
c0015f0b:	59                   	pop    ecx
c0015f0c:	b8 01 00 00 00       	mov    eax,0x1
c0015f11:	31 d2                	xor    edx,edx
c0015f13:	5b                   	pop    ebx
c0015f14:	5e                   	pop    esi
c0015f15:	c3                   	ret    
c0015f16:	59                   	pop    ecx
c0015f17:	b8 02 00 00 00       	mov    eax,0x2
c0015f1c:	31 d2                	xor    edx,edx
c0015f1e:	5b                   	pop    ebx
c0015f1f:	5e                   	pop    esi
c0015f20:	c3                   	ret    

c0015f21 <sysCallGetEnv(regs*)>:
c0015f21:	83 ec 0c             	sub    esp,0xc
c0015f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f28:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015f2b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015f2e:	85 c9                	test   ecx,ecx
c0015f30:	75 0c                	jne    c0015f3e <sysCallGetEnv(regs*)+0x1d>
c0015f32:	85 d2                	test   edx,edx
c0015f34:	74 14                	je     c0015f4a <sysCallGetEnv(regs*)+0x29>
c0015f36:	31 c0                	xor    eax,eax
c0015f38:	31 d2                	xor    edx,edx
c0015f3a:	83 c4 0c             	add    esp,0xc
c0015f3d:	c3                   	ret    
c0015f3e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015f41:	85 d2                	test   edx,edx
c0015f43:	74 1b                	je     c0015f60 <sysCallGetEnv(regs*)+0x3f>
c0015f45:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015f48:	eb ec                	jmp    c0015f36 <sysCallGetEnv(regs*)+0x15>
c0015f4a:	83 ec 0c             	sub    esp,0xc
c0015f4d:	68 b4 19 02 c0       	push   0xc00219b4
c0015f52:	e8 ce a6 fe ff       	call   c0000625 <strlen>
c0015f57:	83 c4 10             	add    esp,0x10
c0015f5a:	31 d2                	xor    edx,edx
c0015f5c:	83 c4 0c             	add    esp,0xc
c0015f5f:	c3                   	ret    
c0015f60:	83 ec 08             	sub    esp,0x8
c0015f63:	68 b4 19 02 c0       	push   0xc00219b4
c0015f68:	50                   	push   eax
c0015f69:	e8 39 a7 fe ff       	call   c00006a7 <strcpy>
c0015f6e:	83 c4 10             	add    esp,0x10
c0015f71:	eb c3                	jmp    c0015f36 <sysCallGetEnv(regs*)+0x15>

c0015f73 <sysCallUSleep(regs*)>:
c0015f73:	83 ec 14             	sub    esp,0x14
c0015f76:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015f7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f7f:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015f86:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015f89:	01 ca                	add    edx,ecx
c0015f8b:	52                   	push   edx
c0015f8c:	50                   	push   eax
c0015f8d:	e8 7d 22 00 00       	call   c001820f <nanoSleep(unsigned long long)>
c0015f92:	31 c0                	xor    eax,eax
c0015f94:	31 d2                	xor    edx,edx
c0015f96:	83 c4 1c             	add    esp,0x1c
c0015f99:	c3                   	ret    

c0015f9a <sysCallSpawn(regs*)>:
c0015f9a:	56                   	push   esi
c0015f9b:	53                   	push   ebx
c0015f9c:	53                   	push   ebx
c0015f9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fa1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015fa4:	85 f6                	test   esi,esi
c0015fa6:	75 08                	jne    c0015fb0 <sysCallSpawn(regs*)+0x16>
c0015fa8:	59                   	pop    ecx
c0015fa9:	31 c0                	xor    eax,eax
c0015fab:	31 d2                	xor    edx,edx
c0015fad:	5b                   	pop    ebx
c0015fae:	5e                   	pop    esi
c0015faf:	c3                   	ret    
c0015fb0:	83 ec 0c             	sub    esp,0xc
c0015fb3:	68 89 1a 02 c0       	push   0xc0021a89
c0015fb8:	e8 e6 8f ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0015fbd:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c0015fc4:	e8 eb 8e ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0015fc9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015fcc:	89 c6                	mov    esi,eax
c0015fce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fd3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015fd6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015fd9:	56                   	push   esi
c0015fda:	e8 1f 18 00 00       	call   c00177fe <Process::Process(char const*, Process*, char**)>
c0015fdf:	83 c4 20             	add    esp,0x20
c0015fe2:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0015fe9:	75 bd                	jne    c0015fa8 <sysCallSpawn(regs*)+0xe>
c0015feb:	83 ec 0c             	sub    esp,0xc
c0015fee:	68 94 1a 02 c0       	push   0xc0021a94
c0015ff3:	e8 ab 8f ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0015ff8:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ffb:	e8 64 1d 00 00       	call   c0017d64 <Process::createUserThread()>
c0016000:	8b 06                	mov    eax,DWORD PTR [esi]
c0016002:	83 c4 10             	add    esp,0x10
c0016005:	99                   	cdq    
c0016006:	59                   	pop    ecx
c0016007:	5b                   	pop    ebx
c0016008:	5e                   	pop    esi
c0016009:	c3                   	ret    

c001600a <sysAppSettings(regs*)>:
c001600a:	53                   	push   ebx
c001600b:	83 ec 08             	sub    esp,0x8
c001600e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016012:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016015:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001601b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016020:	66 3d c0 09          	cmp    ax,0x9c0
c0016024:	75 2f                	jne    c0016055 <sysAppSettings(regs*)+0x4b>
c0016026:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001602c:	83 e0 1f             	and    eax,0x1f
c001602f:	3c 01                	cmp    al,0x1
c0016031:	74 2e                	je     c0016061 <sysAppSettings(regs*)+0x57>
c0016033:	3c 07                	cmp    al,0x7
c0016035:	0f 84 bd 00 00 00    	je     c00160f8 <sysAppSettings(regs*)+0xee>
c001603b:	84 c0                	test   al,al
c001603d:	0f 84 dc 00 00 00    	je     c001611f <sysAppSettings(regs*)+0x115>
c0016043:	3c 08                	cmp    al,0x8
c0016045:	74 6d                	je     c00160b4 <sysAppSettings(regs*)+0xaa>
c0016047:	0f b6 c0             	movzx  eax,al
c001604a:	83 c4 08             	add    esp,0x8
c001604d:	05 e8 03 00 00       	add    eax,0x3e8
c0016052:	5b                   	pop    ebx
c0016053:	99                   	cdq    
c0016054:	c3                   	ret    
c0016055:	b8 01 00 00 00       	mov    eax,0x1
c001605a:	31 d2                	xor    edx,edx
c001605c:	83 c4 08             	add    esp,0x8
c001605f:	5b                   	pop    ebx
c0016060:	c3                   	ret    
c0016061:	51                   	push   ecx
c0016062:	68 00 01 00 00       	push   0x100
c0016067:	6a 00                	push   0x0
c0016069:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001606e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016071:	83 c0 0c             	add    eax,0xc
c0016074:	50                   	push   eax
c0016075:	e8 8e a5 fe ff       	call   c0000608 <memset>
c001607a:	83 c4 0c             	add    esp,0xc
c001607d:	68 ff 00 00 00       	push   0xff
c0016082:	53                   	push   ebx
c0016083:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016088:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001608b:	83 c0 0c             	add    eax,0xc
c001608e:	50                   	push   eax
c001608f:	e8 3e a5 fe ff       	call   c00005d2 <memcpy>
c0016094:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016099:	5b                   	pop    ebx
c001609a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001609d:	5a                   	pop    edx
c001609e:	8d 50 0c             	lea    edx,[eax+0xc]
c00160a1:	52                   	push   edx
c00160a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00160a8:	e8 93 6c ff ff       	call   c000cd40 <VgaText::setTitle(char*)>
c00160ad:	83 c4 10             	add    esp,0x10
c00160b0:	31 c0                	xor    eax,eax
c00160b2:	eb a6                	jmp    c001605a <sysAppSettings(regs*)+0x50>
c00160b4:	83 ec 08             	sub    esp,0x8
c00160b7:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c00160bd:	83 e0 0f             	and    eax,0xf
c00160c0:	50                   	push   eax
c00160c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00160cf:	e8 5c 6c ff ff       	call   c000cd30 <VgaText::setTitleColour(VgaColour)>
c00160d4:	58                   	pop    eax
c00160d5:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c00160db:	5a                   	pop    edx
c00160dc:	c1 e8 04             	shr    eax,0x4
c00160df:	83 e0 0f             	and    eax,0xf
c00160e2:	50                   	push   eax
c00160e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00160f1:	e8 2a 6c ff ff       	call   c000cd20 <VgaText::setTitleTextColour(VgaColour)>
c00160f6:	eb b5                	jmp    c00160ad <sysAppSettings(regs*)+0xa3>
c00160f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016100:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016106:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001610c:	c0 e8 06             	shr    al,0x6
c001610f:	83 e0 01             	and    eax,0x1
c0016112:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016118:	31 c0                	xor    eax,eax
c001611a:	e9 3b ff ff ff       	jmp    c001605a <sysAppSettings(regs*)+0x50>
c001611f:	b8 02 00 00 00       	mov    eax,0x2
c0016124:	e9 31 ff ff ff       	jmp    c001605a <sysAppSettings(regs*)+0x50>

c0016129 <sysSetFatAttrib(regs*)>:
c0016129:	57                   	push   edi
c001612a:	56                   	push   esi
c001612b:	53                   	push   ebx
c001612c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016130:	83 ec 0c             	sub    esp,0xc
c0016133:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016136:	68 14 01 00 00       	push   0x114
c001613b:	e8 74 8d ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0016140:	83 c4 0c             	add    esp,0xc
c0016143:	89 c3                	mov    ebx,eax
c0016145:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001614a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001614d:	57                   	push   edi
c001614e:	53                   	push   ebx
c001614f:	e8 7e 93 ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c0016154:	83 c4 0c             	add    esp,0xc
c0016157:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001615a:	0f b6 d4             	movzx  edx,ah
c001615d:	0f b6 c0             	movzx  eax,al
c0016160:	52                   	push   edx
c0016161:	50                   	push   eax
c0016162:	53                   	push   ebx
c0016163:	e8 e0 95 ff ff       	call   c000f748 <File::chfatattr(unsigned char, unsigned char)>
c0016168:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001616b:	89 c6                	mov    esi,eax
c001616d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001616f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016172:	83 c4 10             	add    esp,0x10
c0016175:	31 c0                	xor    eax,eax
c0016177:	5b                   	pop    ebx
c0016178:	85 f6                	test   esi,esi
c001617a:	5e                   	pop    esi
c001617b:	0f 95 c0             	setne  al
c001617e:	5f                   	pop    edi
c001617f:	31 d2                	xor    edx,edx
c0016181:	f7 d8                	neg    eax
c0016183:	83 d2 00             	adc    edx,0x0
c0016186:	f7 da                	neg    edx
c0016188:	c3                   	ret    

c0016189 <sysPanic(regs*)>:
c0016189:	83 ec 18             	sub    esp,0x18
c001618c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016190:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016193:	e8 a0 ea ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0016198:	c7 04 24 a1 1a 02 c0 	mov    DWORD PTR [esp],0xc0021aa1
c001619f:	e8 94 ea ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c00161a4:	b8 01 00 00 00       	mov    eax,0x1
c00161a9:	31 d2                	xor    edx,edx
c00161ab:	83 c4 1c             	add    esp,0x1c
c00161ae:	c3                   	ret    

c00161af <sysPipe(regs*)>:
c00161af:	57                   	push   edi
c00161b0:	56                   	push   esi
c00161b1:	53                   	push   ebx
c00161b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161b6:	83 ec 0c             	sub    esp,0xc
c00161b9:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00161bc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00161bf:	6a 20                	push   0x20
c00161c1:	e8 ee 8c ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00161c6:	89 c3                	mov    ebx,eax
c00161c8:	58                   	pop    eax
c00161c9:	5a                   	pop    edx
c00161ca:	68 00 50 00 00       	push   0x5000
c00161cf:	53                   	push   ebx
c00161d0:	e8 a9 64 ff ff       	call   c000c67e <Pipe::Pipe(int)>
c00161d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161d8:	e8 4b 77 ff ff       	call   c000d928 <UnixFile::getFileDescriptor()>
c00161dd:	89 07                	mov    DWORD PTR [edi],eax
c00161df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161e2:	e8 41 77 ff ff       	call   c000d928 <UnixFile::getFileDescriptor()>
c00161e7:	83 c4 10             	add    esp,0x10
c00161ea:	89 06                	mov    DWORD PTR [esi],eax
c00161ec:	31 d2                	xor    edx,edx
c00161ee:	5b                   	pop    ebx
c00161ef:	31 c0                	xor    eax,eax
c00161f1:	5e                   	pop    esi
c00161f2:	5f                   	pop    edi
c00161f3:	c3                   	ret    

c00161f4 <sysGetUnixTime(regs*)>:
c00161f4:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c00161f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00161ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016203:	e9 92 9c ff ff       	jmp    c000fe9a <Clock::timeInSecondsLocal()>

c0016208 <string_ends_with(char const*, char const*)>:
c0016208:	57                   	push   edi
c0016209:	56                   	push   esi
c001620a:	53                   	push   ebx
c001620b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001620f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016213:	83 ec 0c             	sub    esp,0xc
c0016216:	53                   	push   ebx
c0016217:	e8 09 a4 fe ff       	call   c0000625 <strlen>
c001621c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001621f:	89 c6                	mov    esi,eax
c0016221:	e8 ff a3 fe ff       	call   c0000625 <strlen>
c0016226:	83 c4 10             	add    esp,0x10
c0016229:	39 c6                	cmp    esi,eax
c001622b:	7d 06                	jge    c0016233 <string_ends_with(char const*, char const*)+0x2b>
c001622d:	5b                   	pop    ebx
c001622e:	31 c0                	xor    eax,eax
c0016230:	5e                   	pop    esi
c0016231:	5f                   	pop    edi
c0016232:	c3                   	ret    
c0016233:	83 ec 08             	sub    esp,0x8
c0016236:	29 c6                	sub    esi,eax
c0016238:	57                   	push   edi
c0016239:	01 f3                	add    ebx,esi
c001623b:	53                   	push   ebx
c001623c:	e8 b7 a4 fe ff       	call   c00006f8 <strcmp>
c0016241:	83 c4 10             	add    esp,0x10
c0016244:	85 c0                	test   eax,eax
c0016246:	5b                   	pop    ebx
c0016247:	0f 94 c0             	sete   al
c001624a:	5e                   	pop    esi
c001624b:	0f b6 c0             	movzx  eax,al
c001624e:	5f                   	pop    edi
c001624f:	c3                   	ret    

c0016250 <sysCallOpen(regs*)>:
c0016250:	56                   	push   esi
c0016251:	53                   	push   ebx
c0016252:	81 ec 04 01 00 00    	sub    esp,0x104
c0016258:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001625f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016262:	85 d2                	test   edx,edx
c0016264:	0f 84 b0 00 00 00    	je     c001631a <sysCallOpen(regs*)+0xca>
c001626a:	50                   	push   eax
c001626b:	68 b0 1a 02 c0       	push   0xc0021ab0
c0016270:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016273:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016277:	56                   	push   esi
c0016278:	e8 ab 90 ff ff       	call   c000f328 <standardiseFiles(char*, char const*, char const*)>
c001627d:	89 34 24             	mov    DWORD PTR [esp],esi
c0016280:	e8 a0 a3 fe ff       	call   c0000625 <strlen>
c0016285:	83 c4 10             	add    esp,0x10
c0016288:	48                   	dec    eax
c0016289:	74 1d                	je     c00162a8 <sysCallOpen(regs*)+0x58>
c001628b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001628e:	eb 0f                	jmp    c001629f <sysCallOpen(regs*)+0x4f>
c0016290:	80 fa 3a             	cmp    dl,0x3a
c0016293:	74 0f                	je     c00162a4 <sysCallOpen(regs*)+0x54>
c0016295:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016299:	48                   	dec    eax
c001629a:	74 0c                	je     c00162a8 <sysCallOpen(regs*)+0x58>
c001629c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001629f:	80 fa 2e             	cmp    dl,0x2e
c00162a2:	75 ec                	jne    c0016290 <sysCallOpen(regs*)+0x40>
c00162a4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00162a8:	83 ec 08             	sub    esp,0x8
c00162ab:	68 b4 1a 02 c0       	push   0xc0021ab4
c00162b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162b3:	e8 50 ff ff ff       	call   c0016208 <string_ends_with(char const*, char const*)>
c00162b8:	83 c4 10             	add    esp,0x10
c00162bb:	85 c0                	test   eax,eax
c00162bd:	75 2e                	jne    c00162ed <sysCallOpen(regs*)+0x9d>
c00162bf:	83 ec 08             	sub    esp,0x8
c00162c2:	68 c6 1a 02 c0       	push   0xc0021ac6
c00162c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162ca:	e8 39 ff ff ff       	call   c0016208 <string_ends_with(char const*, char const*)>
c00162cf:	83 c4 10             	add    esp,0x10
c00162d2:	85 c0                	test   eax,eax
c00162d4:	75 17                	jne    c00162ed <sysCallOpen(regs*)+0x9d>
c00162d6:	83 ec 08             	sub    esp,0x8
c00162d9:	68 b5 1a 02 c0       	push   0xc0021ab5
c00162de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162e1:	e8 12 a4 fe ff       	call   c00006f8 <strcmp>
c00162e6:	83 c4 10             	add    esp,0x10
c00162e9:	85 c0                	test   eax,eax
c00162eb:	75 40                	jne    c001632d <sysCallOpen(regs*)+0xdd>
c00162ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00162f0:	83 ec 0c             	sub    esp,0xc
c00162f3:	c7 00 01 ff ff 7f    	mov    DWORD PTR [eax],0x7fffff01
c00162f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016300:	68 b9 1a 02 c0       	push   0xc0021ab9
c0016305:	e8 99 8c ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001630a:	83 c4 10             	add    esp,0x10
c001630d:	81 c4 04 01 00 00    	add    esp,0x104
c0016313:	31 c0                	xor    eax,eax
c0016315:	31 d2                	xor    edx,edx
c0016317:	5b                   	pop    ebx
c0016318:	5e                   	pop    esi
c0016319:	c3                   	ret    
c001631a:	81 c4 04 01 00 00    	add    esp,0x104
c0016320:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016325:	ba ff ff ff ff       	mov    edx,0xffffffff
c001632a:	5b                   	pop    ebx
c001632b:	5e                   	pop    esi
c001632c:	c3                   	ret    
c001632d:	83 ec 08             	sub    esp,0x8
c0016330:	68 b4 1a 02 c0       	push   0xc0021ab4
c0016335:	56                   	push   esi
c0016336:	e8 cd fe ff ff       	call   c0016208 <string_ends_with(char const*, char const*)>
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	85 c0                	test   eax,eax
c0016340:	75 ab                	jne    c00162ed <sysCallOpen(regs*)+0x9d>
c0016342:	83 ec 08             	sub    esp,0x8
c0016345:	68 cb 1a 02 c0       	push   0xc0021acb
c001634a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001634d:	e8 b6 fe ff ff       	call   c0016208 <string_ends_with(char const*, char const*)>
c0016352:	83 c4 10             	add    esp,0x10
c0016355:	85 c0                	test   eax,eax
c0016357:	0f 85 d1 00 00 00    	jne    c001642e <sysCallOpen(regs*)+0x1de>
c001635d:	83 ec 08             	sub    esp,0x8
c0016360:	68 d0 1a 02 c0       	push   0xc0021ad0
c0016365:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016368:	e8 9b fe ff ff       	call   c0016208 <string_ends_with(char const*, char const*)>
c001636d:	83 c4 10             	add    esp,0x10
c0016370:	85 c0                	test   eax,eax
c0016372:	0f 85 b6 00 00 00    	jne    c001642e <sysCallOpen(regs*)+0x1de>
c0016378:	83 ec 08             	sub    esp,0x8
c001637b:	68 cc 1a 02 c0       	push   0xc0021acc
c0016380:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016383:	e8 70 a3 fe ff       	call   c00006f8 <strcmp>
c0016388:	83 c4 10             	add    esp,0x10
c001638b:	85 c0                	test   eax,eax
c001638d:	0f 84 9b 00 00 00    	je     c001642e <sysCallOpen(regs*)+0x1de>
c0016393:	83 ec 08             	sub    esp,0x8
c0016396:	68 cb 1a 02 c0       	push   0xc0021acb
c001639b:	56                   	push   esi
c001639c:	e8 67 fe ff ff       	call   c0016208 <string_ends_with(char const*, char const*)>
c00163a1:	83 c4 10             	add    esp,0x10
c00163a4:	85 c0                	test   eax,eax
c00163a6:	0f 85 82 00 00 00    	jne    c001642e <sysCallOpen(regs*)+0x1de>
c00163ac:	83 ec 0c             	sub    esp,0xc
c00163af:	68 14 01 00 00       	push   0x114
c00163b4:	e8 fb 8a ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00163b9:	83 c4 0c             	add    esp,0xc
c00163bc:	89 c6                	mov    esi,eax
c00163be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163c3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00163c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163c9:	56                   	push   esi
c00163ca:	e8 03 91 ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c00163cf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00163d2:	83 c4 10             	add    esp,0x10
c00163d5:	0f b6 c2             	movzx  eax,dl
c00163d8:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00163db:	89 d0                	mov    eax,edx
c00163dd:	83 e0 01             	and    eax,0x1
c00163e0:	f6 c2 02             	test   dl,0x2
c00163e3:	74 03                	je     c00163e8 <sysCallOpen(regs*)+0x198>
c00163e5:	83 c8 02             	or     eax,0x2
c00163e8:	f6 c2 04             	test   dl,0x4
c00163eb:	74 03                	je     c00163f0 <sysCallOpen(regs*)+0x1a0>
c00163ed:	83 c8 04             	or     eax,0x4
c00163f0:	f6 c2 08             	test   dl,0x8
c00163f3:	74 03                	je     c00163f8 <sysCallOpen(regs*)+0x1a8>
c00163f5:	83 c8 0a             	or     eax,0xa
c00163f8:	83 e2 10             	and    edx,0x10
c00163fb:	74 03                	je     c0016400 <sysCallOpen(regs*)+0x1b0>
c00163fd:	83 c8 12             	or     eax,0x12
c0016400:	83 ec 08             	sub    esp,0x8
c0016403:	50                   	push   eax
c0016404:	56                   	push   esi
c0016405:	e8 2c 91 ff ff       	call   c000f536 <File::open(FileOpenMode)>
c001640a:	83 c4 10             	add    esp,0x10
c001640d:	85 c0                	test   eax,eax
c001640f:	0f 85 05 ff ff ff    	jne    c001631a <sysCallOpen(regs*)+0xca>
c0016415:	83 ec 0c             	sub    esp,0xc
c0016418:	56                   	push   esi
c0016419:	e8 0a 75 ff ff       	call   c000d928 <UnixFile::getFileDescriptor()>
c001641e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016421:	89 02                	mov    DWORD PTR [edx],eax
c0016423:	c1 f8 1f             	sar    eax,0x1f
c0016426:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016429:	e9 dc fe ff ff       	jmp    c001630a <sysCallOpen(regs*)+0xba>
c001642e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016431:	c7 00 00 ff ff 7f    	mov    DWORD PTR [eax],0x7fffff00
c0016437:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001643e:	e9 ca fe ff ff       	jmp    c001630d <sysCallOpen(regs*)+0xbd>

c0016443 <setupSystemCalls()>:
c0016443:	c7 05 a0 40 02 c0 46 56 01 c0 	mov    DWORD PTR ds:0xc00240a0,0xc0015646
c001644d:	c7 05 a4 40 02 c0 67 54 01 c0 	mov    DWORD PTR ds:0xc00240a4,0xc0015467
c0016457:	c7 05 a8 40 02 c0 7c 55 01 c0 	mov    DWORD PTR ds:0xc00240a8,0xc001557c
c0016461:	c7 05 ac 40 02 c0 d1 55 01 c0 	mov    DWORD PTR ds:0xc00240ac,0xc00155d1
c001646b:	c7 05 b0 40 02 c0 14 55 01 c0 	mov    DWORD PTR ds:0xc00240b0,0xc0015514
c0016475:	c7 05 b4 40 02 c0 60 56 01 c0 	mov    DWORD PTR ds:0xc00240b4,0xc0015660
c001647f:	c7 05 b8 40 02 c0 ef 57 01 c0 	mov    DWORD PTR ds:0xc00240b8,0xc00157ef
c0016489:	c7 05 bc 40 02 c0 0e 58 01 c0 	mov    DWORD PTR ds:0xc00240bc,0xc001580e
c0016493:	c7 05 c4 40 02 c0 6f 5b 01 c0 	mov    DWORD PTR ds:0xc00240c4,0xc0015b6f
c001649d:	c7 05 c0 40 02 c0 50 62 01 c0 	mov    DWORD PTR ds:0xc00240c0,0xc0016250
c00164a7:	c7 05 c8 40 02 c0 f7 5b 01 c0 	mov    DWORD PTR ds:0xc00240c8,0xc0015bf7
c00164b1:	c7 05 cc 40 02 c0 6d 58 01 c0 	mov    DWORD PTR ds:0xc00240cc,0xc001586d
c00164bb:	c7 05 d0 40 02 c0 6c 56 01 c0 	mov    DWORD PTR ds:0xc00240d0,0xc001566c
c00164c5:	c7 05 d4 40 02 c0 71 56 01 c0 	mov    DWORD PTR ds:0xc00240d4,0xc0015671
c00164cf:	c7 05 d8 40 02 c0 64 5c 01 c0 	mov    DWORD PTR ds:0xc00240d8,0xc0015c64
c00164d9:	c7 05 dc 40 02 c0 bd 5c 01 c0 	mov    DWORD PTR ds:0xc00240dc,0xc0015cbd
c00164e3:	c7 05 e0 40 02 c0 55 59 01 c0 	mov    DWORD PTR ds:0xc00240e0,0xc0015955
c00164ed:	c7 05 e4 40 02 c0 be 59 01 c0 	mov    DWORD PTR ds:0xc00240e4,0xc00159be
c00164f7:	c7 05 e8 40 02 c0 ec 5a 01 c0 	mov    DWORD PTR ds:0xc00240e8,0xc0015aec
c0016501:	c7 05 ec 40 02 c0 76 56 01 c0 	mov    DWORD PTR ds:0xc00240ec,0xc0015676
c001650b:	c7 05 f0 40 02 c0 23 5d 01 c0 	mov    DWORD PTR ds:0xc00240f0,0xc0015d23
c0016515:	c7 05 f4 40 02 c0 3d 5d 01 c0 	mov    DWORD PTR ds:0xc00240f4,0xc0015d3d
c001651f:	c7 05 f8 40 02 c0 59 5d 01 c0 	mov    DWORD PTR ds:0xc00240f8,0xc0015d59
c0016529:	c7 05 fc 40 02 c0 ae 5d 01 c0 	mov    DWORD PTR ds:0xc00240fc,0xc0015dae
c0016533:	c7 05 00 41 02 c0 00 5e 01 c0 	mov    DWORD PTR ds:0xc0024100,0xc0015e00
c001653d:	c7 05 04 41 02 c0 80 56 01 c0 	mov    DWORD PTR ds:0xc0024104,0xc0015680
c0016547:	c7 05 08 41 02 c0 52 5e 01 c0 	mov    DWORD PTR ds:0xc0024108,0xc0015e52
c0016551:	c7 05 0c 41 02 c0 2a 58 01 c0 	mov    DWORD PTR ds:0xc002410c,0xc001582a
c001655b:	c7 05 10 41 02 c0 9e 5e 01 c0 	mov    DWORD PTR ds:0xc0024110,0xc0015e9e
c0016565:	c7 05 14 41 02 c0 fb 58 01 c0 	mov    DWORD PTR ds:0xc0024114,0xc00158fb
c001656f:	c7 05 18 41 02 c0 73 5f 01 c0 	mov    DWORD PTR ds:0xc0024118,0xc0015f73
c0016579:	c7 05 1c 41 02 c0 3b 5a 01 c0 	mov    DWORD PTR ds:0xc002411c,0xc0015a3b
c0016583:	c7 05 20 41 02 c0 9a 5f 01 c0 	mov    DWORD PTR ds:0xc0024120,0xc0015f9a
c001658d:	c7 05 24 41 02 c0 21 5f 01 c0 	mov    DWORD PTR ds:0xc0024124,0xc0015f21
c0016597:	c7 05 28 41 02 c0 0a 60 01 c0 	mov    DWORD PTR ds:0xc0024128,0xc001600a
c00165a1:	c7 05 2c 41 02 c0 90 56 01 c0 	mov    DWORD PTR ds:0xc002412c,0xc0015690
c00165ab:	c7 05 30 41 02 c0 fa 56 01 c0 	mov    DWORD PTR ds:0xc0024130,0xc00156fa
c00165b5:	c7 05 34 41 02 c0 40 57 01 c0 	mov    DWORD PTR ds:0xc0024134,0xc0015740
c00165bf:	c7 05 38 41 02 c0 29 61 01 c0 	mov    DWORD PTR ds:0xc0024138,0xc0016129
c00165c9:	c7 05 3c 41 02 c0 89 61 01 c0 	mov    DWORD PTR ds:0xc002413c,0xc0016189
c00165d3:	c7 05 40 41 02 c0 91 57 01 c0 	mov    DWORD PTR ds:0xc0024140,0xc0015791
c00165dd:	c7 05 44 41 02 c0 af 61 01 c0 	mov    DWORD PTR ds:0xc0024144,0xc00161af
c00165e7:	c7 05 48 41 02 c0 f4 61 01 c0 	mov    DWORD PTR ds:0xc0024148,0xc00161f4
c00165f1:	c7 05 4c 41 02 c0 7f 54 01 c0 	mov    DWORD PTR ds:0xc002414c,0xc001547f
c00165fb:	c3                   	ret    

c00165fc <systemCall(regs*, void*)>:
c00165fc:	53                   	push   ebx
c00165fd:	83 ec 08             	sub    esp,0x8
c0016600:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016604:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016607:	83 f8 7f             	cmp    eax,0x7f
c001660a:	77 16                	ja     c0016622 <systemCall(regs*, void*)+0x26>
c001660c:	8b 14 85 a0 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf60]
c0016613:	85 d2                	test   edx,edx
c0016615:	74 0b                	je     c0016622 <systemCall(regs*, void*)+0x26>
c0016617:	83 ec 0c             	sub    esp,0xc
c001661a:	53                   	push   ebx
c001661b:	ff d2                	call   edx
c001661d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016620:	eb 0d                	jmp    c001662f <systemCall(regs*, void*)+0x33>
c0016622:	52                   	push   edx
c0016623:	52                   	push   edx
c0016624:	50                   	push   eax
c0016625:	68 d5 1a 02 c0       	push   0xc0021ad5
c001662a:	e8 74 89 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001662f:	83 c4 10             	add    esp,0x10
c0016632:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016637:	31 d2                	xor    edx,edx
c0016639:	83 c4 08             	add    esp,0x8
c001663c:	5b                   	pop    ebx
c001663d:	c3                   	ret    

c001663e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001663e:	55                   	push   ebp
c001663f:	89 e5                	mov    ebp,esp
c0016641:	57                   	push   edi
c0016642:	56                   	push   esi
c0016643:	53                   	push   ebx
c0016644:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001664a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001664d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0016650:	85 c0                	test   eax,eax
c0016652:	0f 95 c1             	setne  cl
c0016655:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016659:	0f 94 c2             	sete   dl
c001665c:	84 d1                	test   cl,dl
c001665e:	74 26                	je     c0016686 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016660:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016667:	74 1d                	je     c0016686 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016669:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001666c:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c0016672:	89 d6                	mov    esi,edx
c0016674:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001667a:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c0016680:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016683:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c0016686:	83 ec 0c             	sub    esp,0xc
c0016689:	05 ff 0f 00 00       	add    eax,0xfff
c001668e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016691:	6a 01                	push   0x1
c0016693:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0016699:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001669f:	e8 7f 76 ff ff       	call   c000dd23 <Virt::allocateKernelVirtualPages(int)>
c00166a4:	83 c4 10             	add    esp,0x10
c00166a7:	89 c6                	mov    esi,eax
c00166a9:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00166af:	0f 86 21 01 00 00    	jbe    c00167d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00166b5:	c1 eb 0c             	shr    ebx,0xc
c00166b8:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c00166c2:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c00166c8:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00166cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00166ce:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c00166d4:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c00166d7:	29 d8                	sub    eax,ebx
c00166d9:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c00166df:	0f 83 f4 00 00 00    	jae    c00167d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c00166e5:	83 ec 0c             	sub    esp,0xc
c00166e8:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c00166ee:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00166f1:	3d 00 10 00 00       	cmp    eax,0x1000
c00166f6:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00166f8:	52                   	push   edx
c00166f9:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c00166ff:	52                   	push   edx
c0016700:	76 05                	jbe    c0016707 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c0016702:	b8 00 10 00 00       	mov    eax,0x1000
c0016707:	31 d2                	xor    edx,edx
c0016709:	52                   	push   edx
c001670a:	50                   	push   eax
c001670b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001670e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016711:	83 c4 20             	add    esp,0x20
c0016714:	85 c0                	test   eax,eax
c0016716:	74 1f                	je     c0016737 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c0016718:	51                   	push   ecx
c0016719:	51                   	push   ecx
c001671a:	50                   	push   eax
c001671b:	68 e9 1a 02 c0       	push   0xc0021ae9
c0016720:	e8 7e 88 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0016725:	89 34 24             	mov    DWORD PTR [esp],esi
c0016728:	e8 2c 79 ff ff       	call   c000e059 <Virt::freeKernelVirtualPages(unsigned long)>
c001672d:	83 c4 10             	add    esp,0x10
c0016730:	31 c0                	xor    eax,eax
c0016732:	e9 7c 01 00 00       	jmp    c00168b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0016737:	e8 1a 14 00 00       	call   c0017b56 <lockScheduler()>
c001673c:	e8 87 5a ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0016741:	6a 07                	push   0x7
c0016743:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0016749:	56                   	push   esi
c001674a:	50                   	push   eax
c001674b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016751:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016754:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001675a:	e8 fb 7b ff ff       	call   c000e35a <VAS::mapPage(unsigned long, unsigned long, int)>
c001675f:	83 c4 0c             	add    esp,0xc
c0016762:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016768:	6a 00                	push   0x0
c001676a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016770:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016773:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016779:	e8 3a 7a ff ff       	call   c000e1b8 <VAS::mapOtherVASIn(bool, VAS*)>
c001677e:	58                   	pop    eax
c001677f:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c0016785:	5a                   	pop    edx
c0016786:	68 07 04 00 00       	push   0x407
c001678b:	53                   	push   ebx
c001678c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016792:	50                   	push   eax
c0016793:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016799:	6a 00                	push   0x0
c001679b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167a3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00167a9:	e8 ac 82 ff ff       	call   c000ea5a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167ae:	83 c4 1c             	add    esp,0x1c
c00167b1:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00167b7:	68 00 10 00 00       	push   0x1000
c00167bc:	50                   	push   eax
c00167bd:	56                   	push   esi
c00167be:	e8 0f 9e fe ff       	call   c00005d2 <memcpy>
c00167c3:	e8 90 13 00 00       	call   c0017b58 <unlockScheduler()>
c00167c8:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c00167ce:	83 c4 10             	add    esp,0x10
c00167d1:	e9 f5 fe ff ff       	jmp    c00166cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c00167d6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00167d9:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c00167e3:	0f 86 bc 00 00 00    	jbe    c00168a5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c00167e9:	e8 68 13 00 00       	call   c0017b56 <lockScheduler()>
c00167ee:	51                   	push   ecx
c00167ef:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00167f5:	6a 00                	push   0x0
c00167f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167ff:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016805:	e8 ae 79 ff ff       	call   c000e1b8 <VAS::mapOtherVASIn(bool, VAS*)>
c001680a:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0016810:	83 c4 10             	add    esp,0x10
c0016813:	c1 e8 0c             	shr    eax,0xc
c0016816:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0016820:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0016826:	e8 9d 59 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c001682b:	6a 07                	push   0x7
c001682d:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0016833:	56                   	push   esi
c0016834:	50                   	push   eax
c0016835:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001683b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001683e:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0016844:	e8 11 7b ff ff       	call   c000e35a <VAS::mapPage(unsigned long, unsigned long, int)>
c0016849:	58                   	pop    eax
c001684a:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0016850:	5a                   	pop    edx
c0016851:	68 07 04 00 00       	push   0x407
c0016856:	53                   	push   ebx
c0016857:	81 c3 00 10 00 00    	add    ebx,0x1000
c001685d:	50                   	push   eax
c001685e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016864:	6a 00                	push   0x0
c0016866:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001686b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001686e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016874:	e8 e1 81 ff ff       	call   c000ea5a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016879:	83 c4 1c             	add    esp,0x1c
c001687c:	68 00 10 00 00       	push   0x1000
c0016881:	6a 00                	push   0x0
c0016883:	56                   	push   esi
c0016884:	e8 7f 9d fe ff       	call   c0000608 <memset>
c0016889:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001688f:	83 c4 10             	add    esp,0x10
c0016892:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0016898:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001689e:	77 86                	ja     c0016826 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c00168a0:	e8 b3 12 00 00       	call   c0017b58 <unlockScheduler()>
c00168a5:	83 ec 0c             	sub    esp,0xc
c00168a8:	56                   	push   esi
c00168a9:	e8 ab 77 ff ff       	call   c000e059 <Virt::freeKernelVirtualPages(unsigned long)>
c00168ae:	83 c4 10             	add    esp,0x10
c00168b1:	b0 01                	mov    al,0x1
c00168b3:	8d 65 f4             	lea    esp,[ebp-0xc]
c00168b6:	5b                   	pop    ebx
c00168b7:	5e                   	pop    esi
c00168b8:	5f                   	pop    edi
c00168b9:	5d                   	pop    ebp
c00168ba:	c3                   	ret    

c00168bb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00168bb:	55                   	push   ebp
c00168bc:	57                   	push   edi
c00168bd:	56                   	push   esi
c00168be:	53                   	push   ebx
c00168bf:	83 ec 48             	sub    esp,0x48
c00168c2:	68 14 01 00 00       	push   0x114
c00168c7:	e8 e8 85 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00168cc:	83 c4 0c             	add    esp,0xc
c00168cf:	89 c6                	mov    esi,eax
c00168d1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00168d5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00168d9:	50                   	push   eax
c00168da:	e8 f3 8b ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c00168df:	58                   	pop    eax
c00168e0:	5a                   	pop    edx
c00168e1:	6a 01                	push   0x1
c00168e3:	56                   	push   esi
c00168e4:	e8 4d 8c ff ff       	call   c000f536 <File::open(FileOpenMode)>
c00168e9:	83 c4 10             	add    esp,0x10
c00168ec:	85 c0                	test   eax,eax
c00168ee:	0f 85 47 01 00 00    	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168f4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00168fc:	83 ec 0c             	sub    esp,0xc
c00168ff:	6a 34                	push   0x34
c0016901:	e8 18 53 ff ff       	call   c000bc1e <malloc>
c0016906:	89 c3                	mov    ebx,eax
c0016908:	58                   	pop    eax
c0016909:	8b 06                	mov    eax,DWORD PTR [esi]
c001690b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001690f:	57                   	push   edi
c0016910:	53                   	push   ebx
c0016911:	6a 00                	push   0x0
c0016913:	6a 34                	push   0x34
c0016915:	56                   	push   esi
c0016916:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016919:	83 c4 20             	add    esp,0x20
c001691c:	85 c0                	test   eax,eax
c001691e:	0f 85 17 01 00 00    	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016924:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001692a:	0f 85 0b 01 00 00    	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016930:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016933:	85 c0                	test   eax,eax
c0016935:	0f 84 00 01 00 00    	je     c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001693b:	31 d2                	xor    edx,edx
c001693d:	55                   	push   ebp
c001693e:	52                   	push   edx
c001693f:	50                   	push   eax
c0016940:	56                   	push   esi
c0016941:	e8 ae 8c ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0016946:	83 c4 10             	add    esp,0x10
c0016949:	85 c0                	test   eax,eax
c001694b:	0f 85 ea 00 00 00    	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016951:	83 ec 0c             	sub    esp,0xc
c0016954:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016957:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001695b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001695f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016963:	0f af c2             	imul   eax,edx
c0016966:	50                   	push   eax
c0016967:	e8 b2 52 ff ff       	call   c000bc1e <malloc>
c001696c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001696f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016973:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016975:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016979:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001697d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016981:	0f af c2             	imul   eax,edx
c0016984:	99                   	cdq    
c0016985:	52                   	push   edx
c0016986:	50                   	push   eax
c0016987:	56                   	push   esi
c0016988:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001698b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001698e:	83 c4 20             	add    esp,0x20
c0016991:	85 c0                	test   eax,eax
c0016993:	0f 84 a2 00 00 00    	je     c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016999:	31 d2                	xor    edx,edx
c001699b:	51                   	push   ecx
c001699c:	52                   	push   edx
c001699d:	50                   	push   eax
c001699e:	56                   	push   esi
c001699f:	e8 50 8c ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	85 c0                	test   eax,eax
c00169a9:	0f 85 8c 00 00 00    	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169af:	83 ec 0c             	sub    esp,0xc
c00169b2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00169b6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00169ba:	31 ed                	xor    ebp,ebp
c00169bc:	0f af c2             	imul   eax,edx
c00169bf:	50                   	push   eax
c00169c0:	e8 59 52 ff ff       	call   c000bc1e <malloc>
c00169c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00169c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00169cc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169d2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00169d6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00169da:	0f af c2             	imul   eax,edx
c00169dd:	99                   	cdq    
c00169de:	52                   	push   edx
c00169df:	50                   	push   eax
c00169e0:	56                   	push   esi
c00169e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169e4:	83 c4 20             	add    esp,0x20
c00169e7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00169ef:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00169f3:	0f 86 80 00 00 00    	jbe    c0016a79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00169f9:	0f b7 fd             	movzx  edi,bp
c00169fc:	c1 e7 05             	shl    edi,0x5
c00169ff:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016a03:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016a06:	75 6b                	jne    c0016a73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016a08:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016a0b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a0f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016a12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a16:	52                   	push   edx
c0016a17:	31 d2                	xor    edx,edx
c0016a19:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016a1c:	52                   	push   edx
c0016a1d:	50                   	push   eax
c0016a1e:	56                   	push   esi
c0016a1f:	e8 d0 8b ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0016a24:	83 c4 10             	add    esp,0x10
c0016a27:	85 c0                	test   eax,eax
c0016a29:	74 17                	je     c0016a42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016a2b:	83 ec 0c             	sub    esp,0xc
c0016a2e:	68 14 1b 02 c0       	push   0xc0021b14
c0016a33:	e8 6b 85 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0016a38:	83 c4 10             	add    esp,0x10
c0016a3b:	31 c0                	xor    eax,eax
c0016a3d:	e9 87 00 00 00       	jmp    c0016ac9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016a42:	83 ec 0c             	sub    esp,0xc
c0016a45:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016a48:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016a4b:	50                   	push   eax
c0016a4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a54:	56                   	push   esi
c0016a55:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016a59:	e8 e0 fb ff ff       	call   c001663e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016a5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a62:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016a66:	83 c4 20             	add    esp,0x20
c0016a69:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016a6d:	73 04                	jae    c0016a73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016a6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a73:	45                   	inc    ebp
c0016a74:	e9 76 ff ff ff       	jmp    c00169ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016a79:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016a7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a85:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016a8b:	83 ec 0c             	sub    esp,0xc
c0016a8e:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016a94:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a99:	05 00 10 00 00       	add    eax,0x1000
c0016a9e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aa5:	e8 84 51 ff ff       	call   c000bc2e <free>
c0016aaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016aad:	e8 7c 51 ff ff       	call   c000bc2e <free>
c0016ab2:	58                   	pop    eax
c0016ab3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ab7:	e8 72 51 ff ff       	call   c000bc2e <free>
c0016abc:	89 34 24             	mov    DWORD PTR [esp],esi
c0016abf:	e8 d0 8a ff ff       	call   c000f594 <File::close()>
c0016ac4:	83 c4 10             	add    esp,0x10
c0016ac7:	b0 01                	mov    al,0x1
c0016ac9:	83 c4 3c             	add    esp,0x3c
c0016acc:	5b                   	pop    ebx
c0016acd:	5e                   	pop    esi
c0016ace:	5f                   	pop    edi
c0016acf:	5d                   	pop    ebp
c0016ad0:	c3                   	ret    

c0016ad1 <Thr::runtimeReferenceHelper()>:
c0016ad1:	83 ec 18             	sub    esp,0x18
c0016ad4:	68 1c 1b 02 c0       	push   0xc0021b1c
c0016ad9:	e8 c5 84 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0016ade:	fa                   	cli    
c0016adf:	83 c4 10             	add    esp,0x10
c0016ae2:	eb fe                	jmp    c0016ae2 <Thr::runtimeReferenceHelper()+0x11>

c0016ae4 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016ae4:	57                   	push   edi
c0016ae5:	56                   	push   esi
c0016ae6:	53                   	push   ebx
c0016ae7:	31 db                	xor    ebx,ebx
c0016ae9:	39 1d 40 4a 02 c0    	cmp    DWORD PTR ds:0xc0024a40,ebx
c0016aef:	7e 3c                	jle    c0016b2d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016af1:	8b 34 9d c0 49 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdb640]
c0016af8:	31 ff                	xor    edi,edi
c0016afa:	39 3c 9d c0 48 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb740],edi
c0016b01:	7e 27                	jle    c0016b2a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016b03:	50                   	push   eax
c0016b04:	50                   	push   eax
c0016b05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b09:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b0b:	03 04 9d 40 49 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdb6c0]
c0016b12:	50                   	push   eax
c0016b13:	e8 e0 9b fe ff       	call   c00006f8 <strcmp>
c0016b18:	83 c4 10             	add    esp,0x10
c0016b1b:	85 c0                	test   eax,eax
c0016b1d:	75 05                	jne    c0016b24 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016b1f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016b22:	eb 0b                	jmp    c0016b2f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016b24:	83 c6 10             	add    esi,0x10
c0016b27:	47                   	inc    edi
c0016b28:	eb d0                	jmp    c0016afa <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016b2a:	43                   	inc    ebx
c0016b2b:	eb bc                	jmp    c0016ae9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016b2d:	31 c0                	xor    eax,eax
c0016b2f:	5b                   	pop    ebx
c0016b30:	5e                   	pop    esi
c0016b31:	5f                   	pop    edi
c0016b32:	c3                   	ret    

c0016b33 <Thr::loadKernelSymbolTable(char const*)>:
c0016b33:	55                   	push   ebp
c0016b34:	57                   	push   edi
c0016b35:	56                   	push   esi
c0016b36:	53                   	push   ebx
c0016b37:	83 ec 68             	sub    esp,0x68
c0016b3a:	8b 35 94 4a 02 c0    	mov    esi,DWORD PTR ds:0xc0024a94
c0016b40:	68 14 01 00 00       	push   0x114
c0016b45:	e8 6a 83 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0016b4a:	83 c4 0c             	add    esp,0xc
c0016b4d:	89 c3                	mov    ebx,eax
c0016b4f:	56                   	push   esi
c0016b50:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016b54:	50                   	push   eax
c0016b55:	e8 78 89 ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c0016b5a:	5e                   	pop    esi
c0016b5b:	5f                   	pop    edi
c0016b5c:	6a 01                	push   0x1
c0016b5e:	53                   	push   ebx
c0016b5f:	e8 d2 89 ff ff       	call   c000f536 <File::open(FileOpenMode)>
c0016b64:	83 c4 10             	add    esp,0x10
c0016b67:	31 d2                	xor    edx,edx
c0016b69:	85 c0                	test   eax,eax
c0016b6b:	0f 85 79 02 00 00    	jne    c0016dea <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016b71:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016b79:	83 ec 0c             	sub    esp,0xc
c0016b7c:	6a 34                	push   0x34
c0016b7e:	e8 9b 50 ff ff       	call   c000bc1e <malloc>
c0016b83:	59                   	pop    ecx
c0016b84:	89 c7                	mov    edi,eax
c0016b86:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016b8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b8c:	56                   	push   esi
c0016b8d:	57                   	push   edi
c0016b8e:	6a 00                	push   0x0
c0016b90:	6a 34                	push   0x34
c0016b92:	53                   	push   ebx
c0016b93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b96:	83 c4 20             	add    esp,0x20
c0016b99:	85 c0                	test   eax,eax
c0016b9b:	74 17                	je     c0016bb4 <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016b9d:	83 ec 0c             	sub    esp,0xc
c0016ba0:	68 3e 1b 02 c0       	push   0xc0021b3e
c0016ba5:	e8 8e e0 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0016baa:	83 c4 10             	add    esp,0x10
c0016bad:	31 d2                	xor    edx,edx
c0016baf:	e9 36 02 00 00       	jmp    c0016dea <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016bb4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016bba:	75 e1                	jne    c0016b9d <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016bbc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016bbf:	85 c0                	test   eax,eax
c0016bc1:	74 da                	je     c0016b9d <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016bc3:	52                   	push   edx
c0016bc4:	31 d2                	xor    edx,edx
c0016bc6:	52                   	push   edx
c0016bc7:	50                   	push   eax
c0016bc8:	53                   	push   ebx
c0016bc9:	e8 26 8a ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0016bce:	83 c4 10             	add    esp,0x10
c0016bd1:	85 c0                	test   eax,eax
c0016bd3:	75 c8                	jne    c0016b9d <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016bd5:	83 ec 0c             	sub    esp,0xc
c0016bd8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016bdc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016be0:	31 ed                	xor    ebp,ebp
c0016be2:	0f af c2             	imul   eax,edx
c0016be5:	50                   	push   eax
c0016be6:	e8 33 50 ff ff       	call   c000bc1e <malloc>
c0016beb:	89 34 24             	mov    DWORD PTR [esp],esi
c0016bee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016bf2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016bf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bf8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016bfc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c00:	0f af c2             	imul   eax,edx
c0016c03:	99                   	cdq    
c0016c04:	52                   	push   edx
c0016c05:	50                   	push   eax
c0016c06:	53                   	push   ebx
c0016c07:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c0a:	83 c4 20             	add    esp,0x20
c0016c0d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016c15:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c25:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016c2d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016c31:	0f 86 aa 00 00 00    	jbe    c0016ce1 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016c37:	0f b7 f5             	movzx  esi,bp
c0016c3a:	6b f6 28             	imul   esi,esi,0x28
c0016c3d:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0016c41:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016c44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c48:	50                   	push   eax
c0016c49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016c4d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016c51:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c53:	6b c0 28             	imul   eax,eax,0x28
c0016c56:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016c5a:	89 d0                	mov    eax,edx
c0016c5c:	31 d2                	xor    edx,edx
c0016c5e:	52                   	push   edx
c0016c5f:	50                   	push   eax
c0016c60:	53                   	push   ebx
c0016c61:	e8 8e 89 ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0016c66:	83 c4 0c             	add    esp,0xc
c0016c69:	6a 20                	push   0x20
c0016c6b:	6a 00                	push   0x0
c0016c6d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c71:	52                   	push   edx
c0016c72:	e8 91 99 fe ff       	call   c0000608 <memset>
c0016c77:	58                   	pop    eax
c0016c78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c7a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016c7e:	51                   	push   ecx
c0016c7f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016c83:	52                   	push   edx
c0016c84:	6a 00                	push   0x0
c0016c86:	6a 1f                	push   0x1f
c0016c88:	53                   	push   ebx
c0016c89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c8c:	83 c4 18             	add    esp,0x18
c0016c8f:	68 55 1b 02 c0       	push   0xc0021b55
c0016c94:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c98:	52                   	push   edx
c0016c99:	e8 5a 9a fe ff       	call   c00006f8 <strcmp>
c0016c9e:	83 c4 10             	add    esp,0x10
c0016ca1:	85 c0                	test   eax,eax
c0016ca3:	75 0f                	jne    c0016cb4 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0016ca5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016ca8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cb4:	50                   	push   eax
c0016cb5:	50                   	push   eax
c0016cb6:	68 5d 1b 02 c0       	push   0xc0021b5d
c0016cbb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016cbf:	50                   	push   eax
c0016cc0:	e8 33 9a fe ff       	call   c00006f8 <strcmp>
c0016cc5:	83 c4 10             	add    esp,0x10
c0016cc8:	85 c0                	test   eax,eax
c0016cca:	75 0f                	jne    c0016cdb <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016ccc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016ccf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016cd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cdb:	45                   	inc    ebp
c0016cdc:	e9 4c ff ff ff       	jmp    c0016c2d <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0016ce1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016ce6:	75 10                	jne    c0016cf8 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	68 65 1b 02 c0       	push   0xc0021b65
c0016cf0:	e8 43 df ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016cfd:	75 10                	jne    c0016d0f <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016cff:	83 ec 0c             	sub    esp,0xc
c0016d02:	68 65 1b 02 c0       	push   0xc0021b65
c0016d07:	e8 2c df ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0016d0c:	83 c4 10             	add    esp,0x10
c0016d0f:	31 d2                	xor    edx,edx
c0016d11:	50                   	push   eax
c0016d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d16:	52                   	push   edx
c0016d17:	50                   	push   eax
c0016d18:	53                   	push   ebx
c0016d19:	e8 d6 88 ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0016d1e:	5a                   	pop    edx
c0016d1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d23:	e8 f6 4e ff ff       	call   c000bc1e <malloc>
c0016d28:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016d30:	89 c1                	mov    ecx,eax
c0016d32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d3a:	5e                   	pop    esi
c0016d3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d3d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016d41:	55                   	push   ebp
c0016d42:	51                   	push   ecx
c0016d43:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016d47:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d4b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d4f:	53                   	push   ebx
c0016d50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d53:	83 c4 14             	add    esp,0x14
c0016d56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016d5a:	e8 bf 4e ff ff       	call   c000bc1e <malloc>
c0016d5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d62:	89 c6                	mov    esi,eax
c0016d64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d66:	56                   	push   esi
c0016d67:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d6b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d6f:	53                   	push   ebx
c0016d70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d77:	8b 15 40 4a 02 c0    	mov    edx,DWORD PTR ds:0xc0024a40
c0016d7d:	83 c4 1c             	add    esp,0x1c
c0016d80:	c1 e8 04             	shr    eax,0x4
c0016d83:	89 04 95 c0 48 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb740],eax
c0016d8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d8e:	31 d2                	xor    edx,edx
c0016d90:	52                   	push   edx
c0016d91:	50                   	push   eax
c0016d92:	53                   	push   ebx
c0016d93:	e8 5c 88 ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0016d98:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d9b:	31 d2                	xor    edx,edx
c0016d9d:	56                   	push   esi
c0016d9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016da2:	52                   	push   edx
c0016da3:	50                   	push   eax
c0016da4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016da6:	53                   	push   ebx
c0016da7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016daa:	83 c4 14             	add    esp,0x14
c0016dad:	53                   	push   ebx
c0016dae:	e8 e1 87 ff ff       	call   c000f594 <File::close()>
c0016db3:	5d                   	pop    ebp
c0016db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016db8:	e8 71 4e ff ff       	call   c000bc2e <free>
c0016dbd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016dc0:	e8 69 4e ff ff       	call   c000bc2e <free>
c0016dc5:	a1 40 4a 02 c0       	mov    eax,ds:0xc0024a40
c0016dca:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016dce:	8d 50 01             	lea    edx,[eax+0x1]
c0016dd1:	89 0c 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],ecx
c0016dd8:	89 15 40 4a 02 c0    	mov    DWORD PTR ds:0xc0024a40,edx
c0016dde:	89 34 85 40 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb6c0],esi
c0016de5:	83 c4 10             	add    esp,0x10
c0016de8:	b2 01                	mov    dl,0x1
c0016dea:	83 c4 5c             	add    esp,0x5c
c0016ded:	88 d0                	mov    al,dl
c0016def:	5b                   	pop    ebx
c0016df0:	5e                   	pop    esi
c0016df1:	5f                   	pop    edi
c0016df2:	5d                   	pop    ebp
c0016df3:	c3                   	ret    

c0016df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016df4:	55                   	push   ebp
c0016df5:	57                   	push   edi
c0016df6:	56                   	push   esi
c0016df7:	53                   	push   ebx
c0016df8:	81 ec 68 03 00 00    	sub    esp,0x368
c0016dfe:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016e05:	8b 1d 94 4a 02 c0    	mov    ebx,DWORD PTR ds:0xc0024a94
c0016e0b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0016e0f:	68 14 01 00 00       	push   0x114
c0016e14:	e8 9b 80 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0016e19:	83 c4 0c             	add    esp,0xc
c0016e1c:	89 c5                	mov    ebp,eax
c0016e1e:	53                   	push   ebx
c0016e1f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016e26:	50                   	push   eax
c0016e27:	e8 a6 86 ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c0016e2c:	58                   	pop    eax
c0016e2d:	5a                   	pop    edx
c0016e2e:	6a 01                	push   0x1
c0016e30:	55                   	push   ebp
c0016e31:	e8 00 87 ff ff       	call   c000f536 <File::open(FileOpenMode)>
c0016e36:	83 c4 10             	add    esp,0x10
c0016e39:	85 c0                	test   eax,eax
c0016e3b:	0f 85 f2 06 00 00    	jne    c0017533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016e41:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016e49:	83 ec 0c             	sub    esp,0xc
c0016e4c:	6a 34                	push   0x34
c0016e4e:	e8 cb 4d ff ff       	call   c000bc1e <malloc>
c0016e53:	89 c7                	mov    edi,eax
c0016e55:	58                   	pop    eax
c0016e56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e59:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016e5d:	53                   	push   ebx
c0016e5e:	57                   	push   edi
c0016e5f:	6a 00                	push   0x0
c0016e61:	6a 34                	push   0x34
c0016e63:	55                   	push   ebp
c0016e64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e67:	83 c4 20             	add    esp,0x20
c0016e6a:	85 c0                	test   eax,eax
c0016e6c:	0f 85 c1 06 00 00    	jne    c0017533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016e72:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016e78:	0f 85 b5 06 00 00    	jne    c0017533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016e7e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016e81:	85 c0                	test   eax,eax
c0016e83:	0f 84 aa 06 00 00    	je     c0017533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016e89:	31 d2                	xor    edx,edx
c0016e8b:	56                   	push   esi
c0016e8c:	52                   	push   edx
c0016e8d:	50                   	push   eax
c0016e8e:	55                   	push   ebp
c0016e8f:	e8 60 87 ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0016e94:	83 c4 10             	add    esp,0x10
c0016e97:	85 c0                	test   eax,eax
c0016e99:	0f 85 94 06 00 00    	jne    c0017533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016e9f:	83 ec 0c             	sub    esp,0xc
c0016ea2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016ea5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ea9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016ead:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016eb1:	0f af c2             	imul   eax,edx
c0016eb4:	50                   	push   eax
c0016eb5:	e8 64 4d ff ff       	call   c000bc1e <malloc>
c0016eba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ebd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ec1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ec8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ecc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ed0:	0f af c2             	imul   eax,edx
c0016ed3:	99                   	cdq    
c0016ed4:	52                   	push   edx
c0016ed5:	50                   	push   eax
c0016ed6:	55                   	push   ebp
c0016ed7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016eda:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016edd:	83 c4 20             	add    esp,0x20
c0016ee0:	85 c0                	test   eax,eax
c0016ee2:	0f 84 4b 06 00 00    	je     c0017533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ee8:	31 d2                	xor    edx,edx
c0016eea:	51                   	push   ecx
c0016eeb:	52                   	push   edx
c0016eec:	50                   	push   eax
c0016eed:	55                   	push   ebp
c0016eee:	e8 01 87 ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0016ef3:	83 c4 10             	add    esp,0x10
c0016ef6:	85 c0                	test   eax,eax
c0016ef8:	0f 85 35 06 00 00    	jne    c0017533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016efe:	83 ec 0c             	sub    esp,0xc
c0016f01:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016f05:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016f09:	31 f6                	xor    esi,esi
c0016f0b:	0f af c2             	imul   eax,edx
c0016f0e:	50                   	push   eax
c0016f0f:	e8 0a 4d ff ff       	call   c000bc1e <malloc>
c0016f14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f17:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016f1b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f22:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016f26:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016f2a:	0f af c2             	imul   eax,edx
c0016f2d:	99                   	cdq    
c0016f2e:	52                   	push   edx
c0016f2f:	50                   	push   eax
c0016f30:	55                   	push   ebp
c0016f31:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f34:	83 c4 20             	add    esp,0x20
c0016f37:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016f3b:	0f 86 8a 00 00 00    	jbe    c0016fcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016f41:	0f b7 de             	movzx  ebx,si
c0016f44:	c1 e3 05             	shl    ebx,0x5
c0016f47:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016f4b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016f4e:	75 75                	jne    c0016fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016f50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f57:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f5e:	52                   	push   edx
c0016f5f:	31 d2                	xor    edx,edx
c0016f61:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016f64:	52                   	push   edx
c0016f65:	50                   	push   eax
c0016f66:	55                   	push   ebp
c0016f67:	e8 88 86 ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0016f6c:	83 c4 10             	add    esp,0x10
c0016f6f:	85 c0                	test   eax,eax
c0016f71:	0f 85 bc 05 00 00    	jne    c0017533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f77:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016f7e:	31 d2                	xor    edx,edx
c0016f80:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0016f84:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f87:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016f8b:	83 ec 0c             	sub    esp,0xc
c0016f8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f92:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f99:	50                   	push   eax
c0016f9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fa2:	52                   	push   edx
c0016fa3:	50                   	push   eax
c0016fa4:	55                   	push   ebp
c0016fa5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fa8:	83 c4 1c             	add    esp,0x1c
c0016fab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016fae:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016fb1:	50                   	push   eax
c0016fb2:	6a 00                	push   0x0
c0016fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fb8:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0016fbc:	50                   	push   eax
c0016fbd:	e8 46 96 fe ff       	call   c0000608 <memset>
c0016fc2:	83 c4 10             	add    esp,0x10
c0016fc5:	46                   	inc    esi
c0016fc6:	e9 6c ff ff ff       	jmp    c0016f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016fcb:	31 db                	xor    ebx,ebx
c0016fcd:	50                   	push   eax
c0016fce:	68 00 01 00 00       	push   0x100
c0016fd3:	6a 00                	push   0x0
c0016fd5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016fd9:	50                   	push   eax
c0016fda:	e8 29 96 fe ff       	call   c0000608 <memset>
c0016fdf:	83 c4 0c             	add    esp,0xc
c0016fe2:	68 00 01 00 00       	push   0x100
c0016fe7:	6a 00                	push   0x0
c0016fe9:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016ff0:	50                   	push   eax
c0016ff1:	e8 12 96 fe ff       	call   c0000608 <memset>
c0016ff6:	83 c4 10             	add    esp,0x10
c0016ff9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017001:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017009:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017011:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017019:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017021:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017025:	0f 86 30 01 00 00    	jbe    c001715b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001702b:	0f b7 f3             	movzx  esi,bx
c001702e:	6b f6 28             	imul   esi,esi,0x28
c0017031:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017035:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017038:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001703c:	50                   	push   eax
c001703d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017041:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017045:	8b 06                	mov    eax,DWORD PTR [esi]
c0017047:	6b d2 28             	imul   edx,edx,0x28
c001704a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001704e:	31 d2                	xor    edx,edx
c0017050:	52                   	push   edx
c0017051:	50                   	push   eax
c0017052:	55                   	push   ebp
c0017053:	e8 9c 85 ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0017058:	83 c4 0c             	add    esp,0xc
c001705b:	6a 20                	push   0x20
c001705d:	6a 00                	push   0x0
c001705f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017066:	51                   	push   ecx
c0017067:	e8 9c 95 fe ff       	call   c0000608 <memset>
c001706c:	58                   	pop    eax
c001706d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017070:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017074:	52                   	push   edx
c0017075:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001707c:	51                   	push   ecx
c001707d:	6a 00                	push   0x0
c001707f:	6a 1f                	push   0x1f
c0017081:	55                   	push   ebp
c0017082:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017085:	83 c4 1c             	add    esp,0x1c
c0017088:	6a 09                	push   0x9
c001708a:	68 7f 1b 02 c0       	push   0xc0021b7f
c001708f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017096:	51                   	push   ecx
c0017097:	e8 d3 94 fe ff       	call   c000056f <memcmp>
c001709c:	83 c4 10             	add    esp,0x10
c001709f:	85 c0                	test   eax,eax
c00170a1:	75 21                	jne    c00170c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00170a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00170ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170af:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00170b3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170b6:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00170bd:	89 c8                	mov    eax,ecx
c00170bf:	40                   	inc    eax
c00170c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170c4:	50                   	push   eax
c00170c5:	6a 09                	push   0x9
c00170c7:	68 89 1b 02 c0       	push   0xc0021b89
c00170cc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170d3:	50                   	push   eax
c00170d4:	e8 96 94 fe ff       	call   c000056f <memcmp>
c00170d9:	83 c4 10             	add    esp,0x10
c00170dc:	85 c0                	test   eax,eax
c00170de:	75 21                	jne    c0017101 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00170e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00170e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170ec:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00170f0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170f3:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00170fa:	89 c8                	mov    eax,ecx
c00170fc:	40                   	inc    eax
c00170fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017101:	50                   	push   eax
c0017102:	50                   	push   eax
c0017103:	68 55 1b 02 c0       	push   0xc0021b55
c0017108:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001710f:	50                   	push   eax
c0017110:	e8 e3 95 fe ff       	call   c00006f8 <strcmp>
c0017115:	83 c4 10             	add    esp,0x10
c0017118:	85 c0                	test   eax,eax
c001711a:	75 0f                	jne    c001712b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001711c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001711f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017123:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001712b:	50                   	push   eax
c001712c:	50                   	push   eax
c001712d:	68 5d 1b 02 c0       	push   0xc0021b5d
c0017132:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017139:	50                   	push   eax
c001713a:	e8 b9 95 fe ff       	call   c00006f8 <strcmp>
c001713f:	83 c4 10             	add    esp,0x10
c0017142:	85 c0                	test   eax,eax
c0017144:	75 0f                	jne    c0017155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017146:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017149:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001714d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017151:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017155:	43                   	inc    ebx
c0017156:	e9 c6 fe ff ff       	jmp    c0017021 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001715b:	31 d2                	xor    edx,edx
c001715d:	50                   	push   eax
c001715e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017162:	52                   	push   edx
c0017163:	50                   	push   eax
c0017164:	55                   	push   ebp
c0017165:	e8 8a 84 ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c001716a:	5a                   	pop    edx
c001716b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001716f:	e8 aa 4a ff ff       	call   c000bc1e <malloc>
c0017174:	31 d2                	xor    edx,edx
c0017176:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001717a:	59                   	pop    ecx
c001717b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001717e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017182:	53                   	push   ebx
c0017183:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017187:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001718b:	52                   	push   edx
c001718c:	50                   	push   eax
c001718d:	55                   	push   ebp
c001718e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017191:	83 c4 14             	add    esp,0x14
c0017194:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017198:	e8 81 4a ff ff       	call   c000bc1e <malloc>
c001719d:	31 d2                	xor    edx,edx
c001719f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00171a3:	83 c4 0c             	add    esp,0xc
c00171a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171aa:	52                   	push   edx
c00171ab:	50                   	push   eax
c00171ac:	55                   	push   ebp
c00171ad:	e8 42 84 ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c00171b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00171b5:	31 d2                	xor    edx,edx
c00171b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171bb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00171be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171c2:	52                   	push   edx
c00171c3:	50                   	push   eax
c00171c4:	55                   	push   ebp
c00171c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171c8:	83 c4 20             	add    esp,0x20
c00171cb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00171d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00171d7:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c00171db:	0f 84 56 03 00 00    	je     c0017537 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c00171e1:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c00171e8:	31 d2                	xor    edx,edx
c00171ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171ee:	c1 e8 03             	shr    eax,0x3
c00171f1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171f5:	50                   	push   eax
c00171f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171fa:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00171fe:	52                   	push   edx
c00171ff:	50                   	push   eax
c0017200:	55                   	push   ebp
c0017201:	e8 ee 83 ff ff       	call   c000f5f4 <File::seek(unsigned long long)>
c0017206:	58                   	pop    eax
c0017207:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001720b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017212:	e8 07 4a ff ff       	call   c000bc1e <malloc>
c0017217:	31 d2                	xor    edx,edx
c0017219:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001721d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017220:	58                   	pop    eax
c0017221:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017225:	50                   	push   eax
c0017226:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001722a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001722e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017235:	52                   	push   edx
c0017236:	50                   	push   eax
c0017237:	55                   	push   ebp
c0017238:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001723b:	83 c4 20             	add    esp,0x20
c001723e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017246:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001724a:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001724e:	0f 8d c7 02 00 00    	jge    c001751b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c0017254:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017258:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001725c:	31 db                	xor    ebx,ebx
c001725e:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017261:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017265:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017269:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001726d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017271:	c1 e8 08             	shr    eax,0x8
c0017274:	89 c6                	mov    esi,eax
c0017276:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001727a:	c1 e6 04             	shl    esi,0x4
c001727d:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017281:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017284:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017288:	85 c0                	test   eax,eax
c001728a:	0f 85 17 01 00 00    	jne    c00173a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0017290:	83 ec 0c             	sub    esp,0xc
c0017293:	b3 01                	mov    bl,0x1
c0017295:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017299:	03 06                	add    eax,DWORD PTR [esi]
c001729b:	50                   	push   eax
c001729c:	e8 43 f8 ff ff       	call   c0016ae4 <Thr::getAddressOfKernelSymbol(char const*)>
c00172a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172a5:	83 c4 10             	add    esp,0x10
c00172a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00172ad:	0f 85 f4 00 00 00    	jne    c00173a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00172b3:	50                   	push   eax
c00172b4:	50                   	push   eax
c00172b5:	68 93 1b 02 c0       	push   0xc0021b93
c00172ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172be:	03 06                	add    eax,DWORD PTR [esi]
c00172c0:	50                   	push   eax
c00172c1:	e8 32 94 fe ff       	call   c00006f8 <strcmp>
c00172c6:	83 c4 10             	add    esp,0x10
c00172c9:	85 c0                	test   eax,eax
c00172cb:	75 0a                	jne    c00172d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c00172cd:	b8 ec e6 01 c0       	mov    eax,0xc001e6ec
c00172d2:	e9 ca 00 00 00       	jmp    c00173a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00172d7:	50                   	push   eax
c00172d8:	50                   	push   eax
c00172d9:	68 9d 1b 02 c0       	push   0xc0021b9d
c00172de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172e2:	03 06                	add    eax,DWORD PTR [esi]
c00172e4:	50                   	push   eax
c00172e5:	e8 0e 94 fe ff       	call   c00006f8 <strcmp>
c00172ea:	83 c4 10             	add    esp,0x10
c00172ed:	85 c0                	test   eax,eax
c00172ef:	75 0a                	jne    c00172fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c00172f1:	b8 20 e4 01 c0       	mov    eax,0xc001e420
c00172f6:	e9 a6 00 00 00       	jmp    c00173a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00172fb:	53                   	push   ebx
c00172fc:	53                   	push   ebx
c00172fd:	68 a6 1b 02 c0       	push   0xc0021ba6
c0017302:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017306:	03 06                	add    eax,DWORD PTR [esi]
c0017308:	50                   	push   eax
c0017309:	e8 ea 93 fe ff       	call   c00006f8 <strcmp>
c001730e:	83 c4 10             	add    esp,0x10
c0017311:	85 c0                	test   eax,eax
c0017313:	75 0a                	jne    c001731f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c0017315:	b8 ec e7 01 c0       	mov    eax,0xc001e7ec
c001731a:	e9 82 00 00 00       	jmp    c00173a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001731f:	51                   	push   ecx
c0017320:	51                   	push   ecx
c0017321:	68 b0 1b 02 c0       	push   0xc0021bb0
c0017326:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001732a:	03 06                	add    eax,DWORD PTR [esi]
c001732c:	50                   	push   eax
c001732d:	e8 c6 93 fe ff       	call   c00006f8 <strcmp>
c0017332:	83 c4 10             	add    esp,0x10
c0017335:	85 c0                	test   eax,eax
c0017337:	74 63                	je     c001739c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c0017339:	50                   	push   eax
c001733a:	50                   	push   eax
c001733b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001733f:	03 06                	add    eax,DWORD PTR [esi]
c0017341:	50                   	push   eax
c0017342:	68 b9 1b 02 c0       	push   0xc0021bb9
c0017347:	e8 57 7c ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001734c:	58                   	pop    eax
c001734d:	5a                   	pop    edx
c001734e:	68 d3 1b 02 c0       	push   0xc0021bd3
c0017353:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001735a:	53                   	push   ebx
c001735b:	e8 47 93 fe ff       	call   c00006a7 <strcpy>
c0017360:	59                   	pop    ecx
c0017361:	58                   	pop    eax
c0017362:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017366:	03 06                	add    eax,DWORD PTR [esi]
c0017368:	50                   	push   eax
c0017369:	53                   	push   ebx
c001736a:	e8 ef 93 fe ff       	call   c000075e <strcat>
c001736f:	58                   	pop    eax
c0017370:	5a                   	pop    edx
c0017371:	68 69 1c 02 c0       	push   0xc0021c69
c0017376:	53                   	push   ebx
c0017377:	e8 e2 93 fe ff       	call   c000075e <strcat>
c001737c:	83 c4 10             	add    esp,0x10
c001737f:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017384:	0f 84 4b 01 00 00    	je     c00174d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001738a:	83 ec 0c             	sub    esp,0xc
c001738d:	53                   	push   ebx
c001738e:	e8 a5 d8 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0017393:	83 c4 10             	add    esp,0x10
c0017396:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001739a:	eb 0b                	jmp    c00173a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001739c:	b8 6c e5 01 c0       	mov    eax,0xc001e56c
c00173a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173a5:	b3 01                	mov    bl,0x1
c00173a7:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00173ac:	0f 85 80 00 00 00    	jne    c0017432 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c00173b2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00173b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173bd:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00173c1:	01 ce                	add    esi,ecx
c00173c3:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00173cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00173cd:	0f 94 c2             	sete   dl
c00173d0:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00173d8:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c00173dd:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c00173e1:	84 db                	test   bl,bl
c00173e3:	74 31                	je     c0017416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c00173e5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00173e9:	01 c3                	add    ebx,eax
c00173eb:	84 d2                	test   dl,dl
c00173ed:	75 0a                	jne    c00173f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c00173ef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00173f3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00173f7:	76 32                	jbe    c001742b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00173f9:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00173fe:	0f 84 d1 00 00 00    	je     c00174d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017404:	83 ec 0c             	sub    esp,0xc
c0017407:	68 ea 1b 02 c0       	push   0xc0021bea
c001740c:	e8 27 d8 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0017411:	83 c4 10             	add    esp,0x10
c0017414:	eb 15                	jmp    c001742b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017416:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c0017419:	84 d2                	test   dl,dl
c001741b:	75 0e                	jne    c001742b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001741d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017421:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017425:	77 04                	ja     c001742b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017427:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001742b:	89 1e                	mov    DWORD PTR [esi],ebx
c001742d:	e9 e0 00 00 00       	jmp    c0017512 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017432:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0017437:	75 6e                	jne    c00174a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c0017439:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017440:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0017444:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0017448:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017450:	74 17                	je     c0017469 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0017452:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001745a:	74 0d                	je     c0017469 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001745c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017460:	83 e8 04             	sub    eax,0x4
c0017463:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017467:	76 17                	jbe    c0017480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c0017469:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001746e:	74 65                	je     c00174d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017470:	83 ec 0c             	sub    esp,0xc
c0017473:	68 06 1c 02 c0       	push   0xc0021c06
c0017478:	e8 bb d7 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001747d:	83 c4 10             	add    esp,0x10
c0017480:	8b 16                	mov    edx,DWORD PTR [esi]
c0017482:	84 db                	test   bl,bl
c0017484:	74 13                	je     c0017499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0017486:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001748a:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0017491:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017495:	01 d0                	add    eax,edx
c0017497:	eb 06                	jmp    c001749f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0017499:	89 d0                	mov    eax,edx
c001749b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001749f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00174a3:	89 06                	mov    DWORD PTR [esi],eax
c00174a5:	eb 6b                	jmp    c0017512 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c00174a7:	50                   	push   eax
c00174a8:	50                   	push   eax
c00174a9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00174ae:	50                   	push   eax
c00174af:	68 22 1c 02 c0       	push   0xc0021c22
c00174b4:	e8 ea 7a ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00174b9:	83 c4 10             	add    esp,0x10
c00174bc:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00174c1:	74 12                	je     c00174d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00174c3:	83 ec 0c             	sub    esp,0xc
c00174c6:	68 2d 1c 02 c0       	push   0xc0021c2d
c00174cb:	e8 68 d7 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c00174d0:	83 c4 10             	add    esp,0x10
c00174d3:	eb 3d                	jmp    c0017512 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c00174d5:	83 ec 0c             	sub    esp,0xc
c00174d8:	55                   	push   ebp
c00174d9:	e8 b6 80 ff ff       	call   c000f594 <File::close()>
c00174de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00174e7:	59                   	pop    ecx
c00174e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00174ec:	e8 3d 47 ff ff       	call   c000bc2e <free>
c00174f1:	5b                   	pop    ebx
c00174f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174f6:	e8 33 47 ff ff       	call   c000bc2e <free>
c00174fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00174fe:	e8 2b 47 ff ff       	call   c000bc2e <free>
c0017503:	5e                   	pop    esi
c0017504:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017508:	e8 21 47 ff ff       	call   c000bc2e <free>
c001750d:	83 c4 10             	add    esp,0x10
c0017510:	eb 21                	jmp    c0017533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0017512:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0017516:	e9 2b fd ff ff       	jmp    c0017246 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001751b:	83 ec 0c             	sub    esp,0xc
c001751e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017522:	e8 07 47 ff ff       	call   c000bc2e <free>
c0017527:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001752b:	83 c4 10             	add    esp,0x10
c001752e:	e9 a0 fc ff ff       	jmp    c00171d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017533:	31 c0                	xor    eax,eax
c0017535:	eb 33                	jmp    c001756a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c0017537:	83 ec 0c             	sub    esp,0xc
c001753a:	55                   	push   ebp
c001753b:	e8 54 80 ff ff       	call   c000f594 <File::close()>
c0017540:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017543:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017546:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017549:	58                   	pop    eax
c001754a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001754e:	e8 db 46 ff ff       	call   c000bc2e <free>
c0017553:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017556:	e8 d3 46 ff ff       	call   c000bc2e <free>
c001755b:	5a                   	pop    edx
c001755c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017560:	e8 c9 46 ff ff       	call   c000bc2e <free>
c0017565:	83 c4 10             	add    esp,0x10
c0017568:	b0 01                	mov    al,0x1
c001756a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017570:	5b                   	pop    ebx
c0017571:	5e                   	pop    esi
c0017572:	5f                   	pop    edi
c0017573:	5d                   	pop    ebp
c0017574:	c3                   	ret    

c0017575 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017575:	56                   	push   esi
c0017576:	31 d2                	xor    edx,edx
c0017578:	53                   	push   ebx
c0017579:	8b 1d a0 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242a0
c001757f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017583:	39 d3                	cmp    ebx,edx
c0017585:	7e 1b                	jle    c00175a2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017587:	8b 04 95 c0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb40]
c001758e:	39 c8                	cmp    eax,ecx
c0017590:	77 0d                	ja     c001759f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017592:	8b 34 95 c0 42 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdbd40]
c0017599:	01 c6                	add    esi,eax
c001759b:	39 ce                	cmp    esi,ecx
c001759d:	77 05                	ja     c00175a4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001759f:	42                   	inc    edx
c00175a0:	eb e1                	jmp    c0017583 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00175a2:	31 c0                	xor    eax,eax
c00175a4:	5b                   	pop    ebx
c00175a5:	5e                   	pop    esi
c00175a6:	c3                   	ret    

c00175a7 <Thr::getDriverNameFromAddress(unsigned long)>:
c00175a7:	53                   	push   ebx
c00175a8:	31 c0                	xor    eax,eax
c00175aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00175ae:	8b 1d a0 42 02 c0    	mov    ebx,DWORD PTR ds:0xc00242a0
c00175b4:	39 c3                	cmp    ebx,eax
c00175b6:	7e 22                	jle    c00175da <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00175b8:	8b 14 85 c0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb40]
c00175bf:	39 ca                	cmp    edx,ecx
c00175c1:	77 14                	ja     c00175d7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00175c3:	03 14 85 c0 42 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdbd40]
c00175ca:	39 ca                	cmp    edx,ecx
c00175cc:	76 09                	jbe    c00175d7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00175ce:	8b 04 85 c0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb940]
c00175d5:	eb 05                	jmp    c00175dc <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00175d7:	40                   	inc    eax
c00175d8:	eb da                	jmp    c00175b4 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00175da:	31 c0                	xor    eax,eax
c00175dc:	5b                   	pop    ebx
c00175dd:	c3                   	ret    

c00175de <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00175de:	53                   	push   ebx
c00175df:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00175e3:	53                   	push   ebx
c00175e4:	e8 8c ff ff ff       	call   c0017575 <Thr::getDriverBaseFromAddress(unsigned long)>
c00175e9:	5a                   	pop    edx
c00175ea:	31 d2                	xor    edx,edx
c00175ec:	85 c0                	test   eax,eax
c00175ee:	74 04                	je     c00175f4 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00175f0:	89 da                	mov    edx,ebx
c00175f2:	29 c2                	sub    edx,eax
c00175f4:	89 d0                	mov    eax,edx
c00175f6:	5b                   	pop    ebx
c00175f7:	c3                   	ret    

c00175f8 <Thr::loadDLL(char const*, bool)>:
c00175f8:	55                   	push   ebp
c00175f9:	57                   	push   edi
c00175fa:	56                   	push   esi
c00175fb:	53                   	push   ebx
c00175fc:	81 ec 24 01 00 00    	sub    esp,0x124
c0017602:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0017609:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017610:	56                   	push   esi
c0017611:	68 45 1c 02 c0       	push   0xc0021c45
c0017616:	e8 88 79 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001761b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017622:	e8 8d 78 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0017627:	83 c4 0c             	add    esp,0xc
c001762a:	89 c3                	mov    ebx,eax
c001762c:	ff 35 94 4a 02 c0    	push   DWORD PTR ds:0xc0024a94
c0017632:	56                   	push   esi
c0017633:	50                   	push   eax
c0017634:	e8 99 7e ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c0017639:	83 c4 0c             	add    esp,0xc
c001763c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0017640:	50                   	push   eax
c0017641:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017645:	50                   	push   eax
c0017646:	53                   	push   ebx
c0017647:	e8 96 81 ff ff       	call   c000f7e2 <File::stat(unsigned long long*, bool*)>
c001764c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001764e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017651:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017654:	83 c4 10             	add    esp,0x10
c0017657:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001765c:	75 0a                	jne    c0017668 <Thr::loadDLL(char const*, bool)+0x70>
c001765e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017662:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0017666:	75 3e                	jne    c00176a6 <Thr::loadDLL(char const*, bool)+0xae>
c0017668:	89 f8                	mov    eax,edi
c001766a:	31 db                	xor    ebx,ebx
c001766c:	84 c0                	test   al,al
c001766e:	0f 84 ca 00 00 00    	je     c001773e <Thr::loadDLL(char const*, bool)+0x146>
c0017674:	50                   	push   eax
c0017675:	50                   	push   eax
c0017676:	68 56 1c 02 c0       	push   0xc0021c56
c001767b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001767f:	53                   	push   ebx
c0017680:	e8 22 90 fe ff       	call   c00006a7 <strcpy>
c0017685:	58                   	pop    eax
c0017686:	5a                   	pop    edx
c0017687:	56                   	push   esi
c0017688:	53                   	push   ebx
c0017689:	e8 d0 90 fe ff       	call   c000075e <strcat>
c001768e:	59                   	pop    ecx
c001768f:	5d                   	pop    ebp
c0017690:	68 69 1c 02 c0       	push   0xc0021c69
c0017695:	53                   	push   ebx
c0017696:	e8 c3 90 fe ff       	call   c000075e <strcat>
c001769b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001769e:	e8 95 d5 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c00176a3:	83 c4 10             	add    esp,0x10
c00176a6:	83 ec 0c             	sub    esp,0xc
c00176a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176ad:	e8 6c 45 ff ff       	call   c000bc1e <malloc>
c00176b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00176b5:	89 c3                	mov    ebx,eax
c00176b7:	e8 69 8f fe ff       	call   c0000625 <strlen>
c00176bc:	8b 2d a0 42 02 c0    	mov    ebp,DWORD PTR ds:0xc00242a0
c00176c2:	40                   	inc    eax
c00176c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00176c6:	e8 53 45 ff ff       	call   c000bc1e <malloc>
c00176cb:	89 04 ad c0 46 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb940],eax
c00176d2:	58                   	pop    eax
c00176d3:	a1 a0 42 02 c0       	mov    eax,ds:0xc00242a0
c00176d8:	5a                   	pop    edx
c00176d9:	56                   	push   esi
c00176da:	ff 34 85 c0 46 02 c0 	push   DWORD PTR [eax*4-0x3ffdb940]
c00176e1:	e8 c1 8f fe ff       	call   c00006a7 <strcpy>
c00176e6:	a1 a0 42 02 c0       	mov    eax,ds:0xc00242a0
c00176eb:	8d 50 01             	lea    edx,[eax+0x1]
c00176ee:	89 1c 85 c0 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbb40],ebx
c00176f5:	89 15 a0 42 02 c0    	mov    DWORD PTR ds:0xc00242a0,edx
c00176fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176ff:	59                   	pop    ecx
c0017700:	89 14 85 c0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd40],edx
c0017707:	5d                   	pop    ebp
c0017708:	53                   	push   ebx
c0017709:	68 6b 1c 02 c0       	push   0xc0021c6b
c001770e:	e8 90 78 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0017713:	83 c4 0c             	add    esp,0xc
c0017716:	6a 01                	push   0x1
c0017718:	53                   	push   ebx
c0017719:	56                   	push   esi
c001771a:	e8 d5 f6 ff ff       	call   c0016df4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	84 c0                	test   al,al
c0017724:	75 18                	jne    c001773e <Thr::loadDLL(char const*, bool)+0x146>
c0017726:	31 db                	xor    ebx,ebx
c0017728:	89 f8                	mov    eax,edi
c001772a:	84 c0                	test   al,al
c001772c:	74 10                	je     c001773e <Thr::loadDLL(char const*, bool)+0x146>
c001772e:	83 ec 0c             	sub    esp,0xc
c0017731:	68 8a 1c 02 c0       	push   0xc0021c8a
c0017736:	e8 fd d4 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001773b:	83 c4 10             	add    esp,0x10
c001773e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017744:	89 d8                	mov    eax,ebx
c0017746:	5b                   	pop    ebx
c0017747:	5e                   	pop    esi
c0017748:	5f                   	pop    edi
c0017749:	5d                   	pop    ebp
c001774a:	c3                   	ret    

c001774b <Thr::executeDLL(unsigned long, void*)>:
c001774b:	56                   	push   esi
c001774c:	53                   	push   ebx
c001774d:	51                   	push   ecx
c001774e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017752:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017756:	85 db                	test   ebx,ebx
c0017758:	75 10                	jne    c001776a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001775a:	83 ec 0c             	sub    esp,0xc
c001775d:	68 a9 1c 02 c0       	push   0xc0021ca9
c0017762:	e8 d1 d4 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0017767:	83 c4 10             	add    esp,0x10
c001776a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001776e:	89 d8                	mov    eax,ebx
c0017770:	5a                   	pop    edx
c0017771:	5b                   	pop    ebx
c0017772:	5e                   	pop    esi
c0017773:	ff e0                	jmp    eax
c0017775:	90                   	nop

c0017776 <changeTSS>:
c0017776:	83 ec 0c             	sub    esp,0xc
c0017779:	e8 b4 c7 ff ff       	call   c0013f32 <thisCPU()>
c001777e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017784:	83 ec 08             	sub    esp,0x8
c0017787:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001778a:	05 7c 11 00 00       	add    eax,0x117c
c001778f:	c1 e1 15             	shl    ecx,0x15
c0017792:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0017797:	29 ca                	sub    edx,ecx
c0017799:	52                   	push   edx
c001779a:	50                   	push   eax
c001779b:	e8 ba 5e ff ff       	call   c000d65a <TSS::setESP(unsigned long)>
c00177a0:	83 c4 1c             	add    esp,0x1c
c00177a3:	c3                   	ret    

c00177a4 <Process::addArgs(char**)>:
c00177a4:	57                   	push   edi
c00177a5:	56                   	push   esi
c00177a6:	53                   	push   ebx
c00177a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00177ab:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00177af:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00177b9:	85 ff                	test   edi,edi
c00177bb:	74 3d                	je     c00177fa <Process::addArgs(char**)+0x56>
c00177bd:	8b 07                	mov    eax,DWORD PTR [edi]
c00177bf:	85 c0                	test   eax,eax
c00177c1:	74 37                	je     c00177fa <Process::addArgs(char**)+0x56>
c00177c3:	31 db                	xor    ebx,ebx
c00177c5:	83 ec 0c             	sub    esp,0xc
c00177c8:	50                   	push   eax
c00177c9:	e8 57 8e fe ff       	call   c0000625 <strlen>
c00177ce:	40                   	inc    eax
c00177cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00177d2:	e8 47 44 ff ff       	call   c000bc1e <malloc>
c00177d7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00177de:	5a                   	pop    edx
c00177df:	59                   	pop    ecx
c00177e0:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00177e3:	43                   	inc    ebx
c00177e4:	50                   	push   eax
c00177e5:	e8 bd 8e fe ff       	call   c00006a7 <strcpy>
c00177ea:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c00177f0:	83 c4 10             	add    esp,0x10
c00177f3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00177f6:	85 c0                	test   eax,eax
c00177f8:	75 cb                	jne    c00177c5 <Process::addArgs(char**)+0x21>
c00177fa:	5b                   	pop    ebx
c00177fb:	5e                   	pop    esi
c00177fc:	5f                   	pop    edi
c00177fd:	c3                   	ret    

c00177fe <Process::Process(char const*, Process*, char**)>:
c00177fe:	56                   	push   esi
c00177ff:	53                   	push   ebx
c0017800:	83 ec 14             	sub    esp,0x14
c0017803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017807:	05 0c 02 00 00       	add    eax,0x20c
c001780c:	bb 07 00 00 00       	mov    ebx,0x7
c0017811:	89 c6                	mov    esi,eax
c0017813:	85 db                	test   ebx,ebx
c0017815:	78 12                	js     c0017829 <Process::Process(char const*, Process*, char**)+0x2b>
c0017817:	83 ec 0c             	sub    esp,0xc
c001781a:	56                   	push   esi
c001781b:	e8 1a 78 00 00       	call   c001f03a <ThreadControlBlock::ThreadControlBlock()>
c0017820:	83 c4 10             	add    esp,0x10
c0017823:	83 c6 63             	add    esi,0x63
c0017826:	4b                   	dec    ebx
c0017827:	eb ea                	jmp    c0017813 <Process::Process(char const*, Process*, char**)+0x15>
c0017829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001782d:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017838:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017841:	a1 64 30 02 c0       	mov    eax,ds:0xc0023064
c0017846:	8d 50 01             	lea    edx,[eax+0x1]
c0017849:	89 15 64 30 02 c0    	mov    DWORD PTR ds:0xc0023064,edx
c001784f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017853:	89 02                	mov    DWORD PTR [edx],eax
c0017855:	83 ec 0c             	sub    esp,0xc
c0017858:	6a 10                	push   0x10
c001785a:	e8 55 76 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001785f:	83 c4 10             	add    esp,0x10
c0017862:	89 c3                	mov    ebx,eax
c0017864:	83 ec 08             	sub    esp,0x8
c0017867:	6a 00                	push   0x0
c0017869:	53                   	push   ebx
c001786a:	e8 d9 72 ff ff       	call   c000eb48 <VAS::VAS(bool)>
c001786f:	83 c4 10             	add    esp,0x10
c0017872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017876:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001787c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017880:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001788a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001788e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017892:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001789c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00178a2:	85 c0                	test   eax,eax
c00178a4:	74 42                	je     c00178e8 <Process::Process(char const*, Process*, char**)+0xea>
c00178a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178aa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00178b0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00178b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ba:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00178c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178c4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00178ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00178d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d4:	05 0c 01 00 00       	add    eax,0x10c
c00178d9:	83 ec 08             	sub    esp,0x8
c00178dc:	52                   	push   edx
c00178dd:	50                   	push   eax
c00178de:	e8 c4 8d fe ff       	call   c00006a7 <strcpy>
c00178e3:	83 c4 10             	add    esp,0x10
c00178e6:	eb 5c                	jmp    c0017944 <Process::Process(char const*, Process*, char**)+0x146>
c00178e8:	83 ec 0c             	sub    esp,0xc
c00178eb:	68 60 12 00 00       	push   0x1260
c00178f0:	e8 bf 75 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00178f5:	83 c4 10             	add    esp,0x10
c00178f8:	89 c3                	mov    ebx,eax
c00178fa:	83 ec 08             	sub    esp,0x8
c00178fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017901:	53                   	push   ebx
c0017902:	e8 51 5a ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c0017907:	83 c4 10             	add    esp,0x10
c001790a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001790e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017918:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001791e:	83 ec 0c             	sub    esp,0xc
c0017921:	50                   	push   eax
c0017922:	e8 32 4e ff ff       	call   c000c759 <addToTerminalCycle(VgaText*)>
c0017927:	83 c4 10             	add    esp,0x10
c001792a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792e:	05 0c 01 00 00       	add    eax,0x10c
c0017933:	83 ec 08             	sub    esp,0x8
c0017936:	68 d3 1c 02 c0       	push   0xc0021cd3
c001793b:	50                   	push   eax
c001793c:	e8 66 8d fe ff       	call   c00006a7 <strcpy>
c0017941:	83 c4 10             	add    esp,0x10
c0017944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017948:	83 c0 0c             	add    eax,0xc
c001794b:	83 ec 08             	sub    esp,0x8
c001794e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017952:	50                   	push   eax
c0017953:	e8 4f 8d fe ff       	call   c00006a7 <strcpy>
c0017958:	83 c4 10             	add    esp,0x10
c001795b:	83 ec 08             	sub    esp,0x8
c001795e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017962:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017966:	e8 39 fe ff ff       	call   c00177a4 <Process::addArgs(char**)>
c001796b:	83 c4 10             	add    esp,0x10
c001796e:	83 ec 08             	sub    esp,0x8
c0017971:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017975:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017979:	e8 3d ef ff ff       	call   c00168bb <Thr::loadProgramIntoMemory(Process*, char const*)>
c001797e:	83 c4 10             	add    esp,0x10
c0017981:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017985:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017989:	83 f0 01             	xor    eax,0x1
c001798c:	88 c2                	mov    dl,al
c001798e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017992:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0017998:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001799d:	83 ec 08             	sub    esp,0x8
c00179a0:	50                   	push   eax
c00179a1:	68 e8 1d 02 c0       	push   0xc0021de8
c00179a6:	e8 f8 75 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00179ab:	83 c4 10             	add    esp,0x10
c00179ae:	90                   	nop
c00179af:	83 c4 14             	add    esp,0x14
c00179b2:	5b                   	pop    ebx
c00179b3:	5e                   	pop    esi
c00179b4:	c3                   	ret    
c00179b5:	90                   	nop

c00179b6 <Process::Process(bool, char const*, Process*, char**)>:
c00179b6:	56                   	push   esi
c00179b7:	53                   	push   ebx
c00179b8:	83 ec 14             	sub    esp,0x14
c00179bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00179c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c7:	05 0c 02 00 00       	add    eax,0x20c
c00179cc:	bb 07 00 00 00       	mov    ebx,0x7
c00179d1:	89 c6                	mov    esi,eax
c00179d3:	85 db                	test   ebx,ebx
c00179d5:	78 12                	js     c00179e9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00179d7:	83 ec 0c             	sub    esp,0xc
c00179da:	56                   	push   esi
c00179db:	e8 5a 76 00 00       	call   c001f03a <ThreadControlBlock::ThreadControlBlock()>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	83 c6 63             	add    esi,0x63
c00179e6:	4b                   	dec    ebx
c00179e7:	eb ea                	jmp    c00179d3 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00179e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ed:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00179f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f8:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017a01:	a1 64 30 02 c0       	mov    eax,ds:0xc0023064
c0017a06:	8d 50 01             	lea    edx,[eax+0x1]
c0017a09:	89 15 64 30 02 c0    	mov    DWORD PTR ds:0xc0023064,edx
c0017a0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a13:	89 02                	mov    DWORD PTR [edx],eax
c0017a15:	83 ec 0c             	sub    esp,0xc
c0017a18:	6a 10                	push   0x10
c0017a1a:	e8 95 74 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0017a1f:	83 c4 10             	add    esp,0x10
c0017a22:	89 c3                	mov    ebx,eax
c0017a24:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017a29:	83 ec 08             	sub    esp,0x8
c0017a2c:	50                   	push   eax
c0017a2d:	53                   	push   ebx
c0017a2e:	e8 15 71 ff ff       	call   c000eb48 <VAS::VAS(bool)>
c0017a33:	83 c4 10             	add    esp,0x10
c0017a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017a40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a44:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017a4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a52:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017a56:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a60:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017a66:	85 c0                	test   eax,eax
c0017a68:	74 42                	je     c0017aac <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0017a6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017a74:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017a7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a7e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a88:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017a8e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a98:	05 0c 01 00 00       	add    eax,0x10c
c0017a9d:	83 ec 08             	sub    esp,0x8
c0017aa0:	52                   	push   edx
c0017aa1:	50                   	push   eax
c0017aa2:	e8 00 8c fe ff       	call   c00006a7 <strcpy>
c0017aa7:	83 c4 10             	add    esp,0x10
c0017aaa:	eb 5c                	jmp    c0017b08 <Process::Process(bool, char const*, Process*, char**)+0x152>
c0017aac:	83 ec 0c             	sub    esp,0xc
c0017aaf:	68 60 12 00 00       	push   0x1260
c0017ab4:	e8 fb 73 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0017ab9:	83 c4 10             	add    esp,0x10
c0017abc:	89 c3                	mov    ebx,eax
c0017abe:	83 ec 08             	sub    esp,0x8
c0017ac1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017ac5:	53                   	push   ebx
c0017ac6:	e8 8d 58 ff ff       	call   c000d358 <VgaText::VgaText(char const*)>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ad2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017adc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017ae2:	83 ec 0c             	sub    esp,0xc
c0017ae5:	50                   	push   eax
c0017ae6:	e8 6e 4c ff ff       	call   c000c759 <addToTerminalCycle(VgaText*)>
c0017aeb:	83 c4 10             	add    esp,0x10
c0017aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af2:	05 0c 01 00 00       	add    eax,0x10c
c0017af7:	83 ec 08             	sub    esp,0x8
c0017afa:	68 d3 1c 02 c0       	push   0xc0021cd3
c0017aff:	50                   	push   eax
c0017b00:	e8 a2 8b fe ff       	call   c00006a7 <strcpy>
c0017b05:	83 c4 10             	add    esp,0x10
c0017b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b0c:	83 c0 0c             	add    eax,0xc
c0017b0f:	83 ec 08             	sub    esp,0x8
c0017b12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017b16:	50                   	push   eax
c0017b17:	e8 8b 8b fe ff       	call   c00006a7 <strcpy>
c0017b1c:	83 c4 10             	add    esp,0x10
c0017b1f:	83 ec 08             	sub    esp,0x8
c0017b22:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017b26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b2a:	e8 75 fc ff ff       	call   c00177a4 <Process::addArgs(char**)>
c0017b2f:	83 c4 10             	add    esp,0x10
c0017b32:	90                   	nop
c0017b33:	83 c4 14             	add    esp,0x14
c0017b36:	5b                   	pop    ebx
c0017b37:	5e                   	pop    esi
c0017b38:	c3                   	ret    

c0017b39 <disableIRQs()>:
c0017b39:	fa                   	cli    
c0017b3a:	ff 05 6c 4a 02 c0    	inc    DWORD PTR ds:0xc0024a6c
c0017b40:	c3                   	ret    

c0017b41 <getIRQNestingLevel()>:
c0017b41:	a1 6c 4a 02 c0       	mov    eax,ds:0xc0024a6c
c0017b46:	c3                   	ret    

c0017b47 <enableIRQs()>:
c0017b47:	a1 6c 4a 02 c0       	mov    eax,ds:0xc0024a6c
c0017b4c:	48                   	dec    eax
c0017b4d:	a3 6c 4a 02 c0       	mov    ds:0xc0024a6c,eax
c0017b52:	75 01                	jne    c0017b55 <enableIRQs()+0xe>
c0017b54:	fb                   	sti    
c0017b55:	c3                   	ret    

c0017b56 <lockScheduler()>:
c0017b56:	eb e1                	jmp    c0017b39 <disableIRQs()>

c0017b58 <unlockScheduler()>:
c0017b58:	eb ed                	jmp    c0017b47 <enableIRQs()>

c0017b5a <userModeEntryPoint(void*)>:
c0017b5a:	83 ec 0c             	sub    esp,0xc
c0017b5d:	e8 f6 ff ff ff       	call   c0017b58 <unlockScheduler()>
c0017b62:	fb                   	sti    
c0017b63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b68:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017b6b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017b71:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b75:	83 c4 0c             	add    esp,0xc
c0017b78:	e9 69 86 fe ff       	jmp    c00001e6 <goToUsermode>

c0017b7d <lockStuff()>:
c0017b7d:	e8 b7 ff ff ff       	call   c0017b39 <disableIRQs()>
c0017b82:	ff 05 68 4a 02 c0    	inc    DWORD PTR ds:0xc0024a68
c0017b88:	c3                   	ret    

c0017b89 <taskStartupFunction>:
c0017b89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b8e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017b91:	c3                   	ret    

c0017b92 <updateTimeUsed()>:
c0017b92:	57                   	push   edi
c0017b93:	56                   	push   esi
c0017b94:	53                   	push   ebx
c0017b95:	e8 98 c3 ff ff       	call   c0013f32 <thisCPU()>
c0017b9a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017ba1:	74 49                	je     c0017bec <updateTimeUsed()+0x5a>
c0017ba3:	0f 31                	rdtsc  
c0017ba5:	89 c1                	mov    ecx,eax
c0017ba7:	a3 a8 4a 02 c0       	mov    ds:0xc0024aa8,eax
c0017bac:	2b 0d 98 4a 02 c0    	sub    ecx,DWORD PTR ds:0xc0024a98
c0017bb2:	89 d3                	mov    ebx,edx
c0017bb4:	89 0d a0 4a 02 c0    	mov    DWORD PTR ds:0xc0024aa0,ecx
c0017bba:	1b 1d 9c 4a 02 c0    	sbb    ebx,DWORD PTR ds:0xc0024a9c
c0017bc0:	a3 98 4a 02 c0       	mov    ds:0xc0024a98,eax
c0017bc5:	89 1d a4 4a 02 c0    	mov    DWORD PTR ds:0xc0024aa4,ebx
c0017bcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bd0:	89 15 ac 4a 02 c0    	mov    DWORD PTR ds:0xc0024aac,edx
c0017bd6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0017bd9:	89 15 9c 4a 02 c0    	mov    DWORD PTR ds:0xc0024a9c,edx
c0017bdf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017be2:	01 f1                	add    ecx,esi
c0017be4:	11 fb                	adc    ebx,edi
c0017be6:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0017be9:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0017bec:	5b                   	pop    ebx
c0017bed:	5e                   	pop    esi
c0017bee:	5f                   	pop    edi
c0017bef:	c3                   	ret    

c0017bf0 <switchToThread(ThreadControlBlock*)>:
c0017bf0:	53                   	push   ebx
c0017bf1:	83 ec 08             	sub    esp,0x8
c0017bf4:	a1 68 4a 02 c0       	mov    eax,ds:0xc0024a68
c0017bf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017bfd:	85 c0                	test   eax,eax
c0017bff:	75 30                	jne    c0017c31 <switchToThread(ThreadControlBlock*)+0x41>
c0017c01:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c0017c04:	3c ff                	cmp    al,0xff
c0017c06:	74 25                	je     c0017c2d <switchToThread(ThreadControlBlock*)+0x3d>
c0017c08:	0f b6 d0             	movzx  edx,al
c0017c0b:	b8 84 03 00 00       	mov    eax,0x384
c0017c10:	29 d0                	sub    eax,edx
c0017c12:	c1 e0 10             	shl    eax,0x10
c0017c15:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017c18:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017c1b:	e8 72 ff ff ff       	call   c0017b92 <updateTimeUsed()>
c0017c20:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017c24:	83 c4 08             	add    esp,0x8
c0017c27:	5b                   	pop    ebx
c0017c28:	e9 f2 85 fe ff       	jmp    c000021f <switchToThreadASM>
c0017c2d:	31 c0                	xor    eax,eax
c0017c2f:	eb e7                	jmp    c0017c18 <switchToThread(ThreadControlBlock*)+0x28>
c0017c31:	c7 05 64 4a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024a64,0x1
c0017c3b:	83 c4 08             	add    esp,0x8
c0017c3e:	5b                   	pop    ebx
c0017c3f:	c3                   	ret    

c0017c40 <Semaphore::Semaphore(int)>:
c0017c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c48:	89 10                	mov    DWORD PTR [eax],edx
c0017c4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c4e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017c6b:	90                   	nop
c0017c6c:	c3                   	ret    
c0017c6d:	90                   	nop

c0017c6e <Mutex::Mutex()>:
c0017c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c72:	6a 01                	push   0x1
c0017c74:	50                   	push   eax
c0017c75:	e8 c6 ff ff ff       	call   c0017c40 <Semaphore::Semaphore(int)>
c0017c7a:	83 c4 08             	add    esp,0x8
c0017c7d:	90                   	nop
c0017c7e:	c3                   	ret    
c0017c7f:	90                   	nop

c0017c80 <Process::createThread(void (*)(void*), void*, int)>:
c0017c80:	55                   	push   ebp
c0017c81:	31 c9                	xor    ecx,ecx
c0017c83:	57                   	push   edi
c0017c84:	56                   	push   esi
c0017c85:	53                   	push   ebx
c0017c86:	83 ec 1c             	sub    esp,0x1c
c0017c89:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017c8d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017c94:	89 f2                	mov    edx,esi
c0017c96:	0f b7 c2             	movzx  eax,dx
c0017c99:	83 e2 01             	and    edx,0x1
c0017c9c:	74 14                	je     c0017cb2 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017c9e:	d1 f8                	sar    eax,1
c0017ca0:	41                   	inc    ecx
c0017ca1:	89 c2                	mov    edx,eax
c0017ca3:	83 f9 10             	cmp    ecx,0x10
c0017ca6:	75 ee                	jne    c0017c96 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0017ca8:	83 c4 1c             	add    esp,0x1c
c0017cab:	31 c0                	xor    eax,eax
c0017cad:	5b                   	pop    ebx
c0017cae:	5e                   	pop    esi
c0017caf:	5f                   	pop    edi
c0017cb0:	5d                   	pop    ebp
c0017cb1:	c3                   	ret    
c0017cb2:	83 ec 08             	sub    esp,0x8
c0017cb5:	b8 01 00 00 00       	mov    eax,0x1
c0017cba:	d3 e0                	shl    eax,cl
c0017cbc:	09 c6                	or     esi,eax
c0017cbe:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017cc4:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017ccb:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017cce:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017cd1:	01 ce                	add    esi,ecx
c0017cd3:	89 f0                	mov    eax,esi
c0017cd5:	c1 e0 05             	shl    eax,0x5
c0017cd8:	01 c6                	add    esi,eax
c0017cda:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017cdd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017ce3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017ce9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017ced:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017cf3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017cf9:	89 ca                	mov    edx,ecx
c0017cfb:	f7 da                	neg    edx
c0017cfd:	c1 e2 15             	shl    edx,0x15
c0017d00:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d06:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d0c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d10:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017d1a:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017d20:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017d24:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017d2a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017d34:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017d3e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0017d45:	50                   	push   eax
c0017d46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d4a:	68 88 4a 02 c0       	push   0xc0024a88
c0017d4f:	e8 3e 71 00 00       	call   c001ee92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017d54:	83 c4 10             	add    esp,0x10
c0017d57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d5b:	83 c4 1c             	add    esp,0x1c
c0017d5e:	5b                   	pop    ebx
c0017d5f:	5e                   	pop    esi
c0017d60:	5f                   	pop    edi
c0017d61:	5d                   	pop    ebp
c0017d62:	c3                   	ret    
c0017d63:	90                   	nop

c0017d64 <Process::createUserThread()>:
c0017d64:	83 ec 0c             	sub    esp,0xc
c0017d67:	68 80 00 00 00       	push   0x80
c0017d6c:	6a 00                	push   0x0
c0017d6e:	68 5a 7b 01 c0       	push   0xc0017b5a
c0017d73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d77:	e8 04 ff ff ff       	call   c0017c80 <Process::createThread(void (*)(void*), void*, int)>
c0017d7c:	83 c4 1c             	add    esp,0x1c
c0017d7f:	c3                   	ret    

c0017d80 <setupMultitasking(void (*)())>:
c0017d80:	56                   	push   esi
c0017d81:	53                   	push   ebx
c0017d82:	53                   	push   ebx
c0017d83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d87:	eb 10                	jmp    c0017d99 <setupMultitasking(void (*)())+0x19>
c0017d89:	83 ec 0c             	sub    esp,0xc
c0017d8c:	68 88 4a 02 c0       	push   0xc0024a88
c0017d91:	e8 4e 70 00 00       	call   c001ede4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017d96:	83 c4 10             	add    esp,0x10
c0017d99:	83 ec 0c             	sub    esp,0xc
c0017d9c:	68 88 4a 02 c0       	push   0xc0024a88
c0017da1:	e8 22 70 00 00       	call   c001edc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017da6:	83 c4 10             	add    esp,0x10
c0017da9:	84 c0                	test   al,al
c0017dab:	74 dc                	je     c0017d89 <setupMultitasking(void (*)())+0x9>
c0017dad:	83 ec 0c             	sub    esp,0xc
c0017db0:	68 3b 07 00 00       	push   0x73b
c0017db5:	e8 fa 70 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0017dba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017dc1:	89 c3                	mov    ebx,eax
c0017dc3:	6a 00                	push   0x0
c0017dc5:	68 d7 1c 02 c0       	push   0xc0021cd7
c0017dca:	6a 01                	push   0x1
c0017dcc:	50                   	push   eax
c0017dcd:	e8 e4 fb ff ff       	call   c00179b6 <Process::Process(bool, char const*, Process*, char**)>
c0017dd2:	83 c4 18             	add    esp,0x18
c0017dd5:	89 1d 94 4a 02 c0    	mov    DWORD PTR ds:0xc0024a94,ebx
c0017ddb:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017de1:	68 10 1e 02 c0       	push   0xc0021e10
c0017de6:	e8 b8 71 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0017deb:	58                   	pop    eax
c0017dec:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017df2:	e8 d6 50 ff ff       	call   c000cecd <setActiveTerminal(VgaText*)>
c0017df7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017dff:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017e05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e08:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017e12:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e18:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017e1e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017e28:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017e32:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017e3c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017e42:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017e48:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017e52:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017e58:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017e62:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017e68:	5a                   	pop    edx
c0017e69:	59                   	pop    ecx
c0017e6a:	68 d3 1c 02 c0       	push   0xc0021cd3
c0017e6f:	50                   	push   eax
c0017e70:	e8 32 88 fe ff       	call   c00006a7 <strcpy>
c0017e75:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017e7c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017e80:	83 c4 14             	add    esp,0x14
c0017e83:	5b                   	pop    ebx
c0017e84:	5e                   	pop    esi
c0017e85:	e9 87 83 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017e8a <schedule()>:
c0017e8a:	a1 68 4a 02 c0       	mov    eax,ds:0xc0024a68
c0017e8f:	85 c0                	test   eax,eax
c0017e91:	74 0b                	je     c0017e9e <schedule()+0x14>
c0017e93:	c7 05 64 4a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024a64,0x1
c0017e9d:	c3                   	ret    
c0017e9e:	53                   	push   ebx
c0017e9f:	83 ec 14             	sub    esp,0x14
c0017ea2:	68 88 4a 02 c0       	push   0xc0024a88
c0017ea7:	e8 1c 6f 00 00       	call   c001edc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017eac:	83 c4 10             	add    esp,0x10
c0017eaf:	84 c0                	test   al,al
c0017eb1:	75 38                	jne    c0017eeb <schedule()+0x61>
c0017eb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017eb8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017ebb:	4a                   	dec    edx
c0017ebc:	74 32                	je     c0017ef0 <schedule()+0x66>
c0017ebe:	83 ec 0c             	sub    esp,0xc
c0017ec1:	68 88 4a 02 c0       	push   0xc0024a88
c0017ec6:	e8 f5 6e 00 00       	call   c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017ecb:	c7 04 24 88 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a88
c0017ed2:	89 c3                	mov    ebx,eax
c0017ed4:	e8 0b 6f 00 00       	call   c001ede4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017ed9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017ee0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ee3:	e8 08 fd ff ff       	call   c0017bf0 <switchToThread(ThreadControlBlock*)>
c0017ee8:	83 c4 10             	add    esp,0x10
c0017eeb:	83 c4 08             	add    esp,0x8
c0017eee:	5b                   	pop    ebx
c0017eef:	c3                   	ret    
c0017ef0:	83 ec 08             	sub    esp,0x8
c0017ef3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017efa:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f00:	68 88 4a 02 c0       	push   0xc0024a88
c0017f05:	e8 88 6f 00 00       	call   c001ee92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	eb af                	jmp    c0017ebe <schedule()+0x34>

c0017f0f <unlockStuff()>:
c0017f0f:	a1 68 4a 02 c0       	mov    eax,ds:0xc0024a68
c0017f14:	48                   	dec    eax
c0017f15:	a3 68 4a 02 c0       	mov    ds:0xc0024a68,eax
c0017f1a:	75 09                	jne    c0017f25 <unlockStuff()+0x16>
c0017f1c:	a1 64 4a 02 c0       	mov    eax,ds:0xc0024a64
c0017f21:	85 c0                	test   eax,eax
c0017f23:	75 05                	jne    c0017f2a <unlockStuff()+0x1b>
c0017f25:	e9 1d fc ff ff       	jmp    c0017b47 <enableIRQs()>
c0017f2a:	83 ec 0c             	sub    esp,0xc
c0017f2d:	c7 05 64 4a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024a64,0x0
c0017f37:	e8 4e ff ff ff       	call   c0017e8a <schedule()>
c0017f3c:	83 c4 0c             	add    esp,0xc
c0017f3f:	e9 03 fc ff ff       	jmp    c0017b47 <enableIRQs()>

c0017f44 <forkProcess(regs*)>:
c0017f44:	56                   	push   esi
c0017f45:	53                   	push   ebx
c0017f46:	50                   	push   eax
c0017f47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017f4f:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c0017f57:	0f 85 3e 01 00 00    	jne    c001809b <forkProcess(regs*)+0x157>
c0017f5d:	e8 1b fc ff ff       	call   c0017b7d <lockStuff()>
c0017f62:	83 ec 0c             	sub    esp,0xc
c0017f65:	68 3b 07 00 00       	push   0x73b
c0017f6a:	e8 45 6f ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0017f6f:	89 c3                	mov    ebx,eax
c0017f71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017f79:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017f80:	50                   	push   eax
c0017f81:	83 c0 0c             	add    eax,0xc
c0017f84:	50                   	push   eax
c0017f85:	6a 00                	push   0x0
c0017f87:	53                   	push   ebx
c0017f88:	e8 29 fa ff ff       	call   c00179b6 <Process::Process(bool, char const*, Process*, char**)>
c0017f8d:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c0017f93:	83 c4 20             	add    esp,0x20
c0017f96:	85 f6                	test   esi,esi
c0017f98:	74 16                	je     c0017fb0 <forkProcess(regs*)+0x6c>
c0017f9a:	83 ec 0c             	sub    esp,0xc
c0017f9d:	56                   	push   esi
c0017f9e:	e8 4b 62 ff ff       	call   c000e1ee <VAS::~VAS()>
c0017fa3:	59                   	pop    ecx
c0017fa4:	58                   	pop    eax
c0017fa5:	6a 10                	push   0x10
c0017fa7:	56                   	push   esi
c0017fa8:	e8 16 6f ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c0017fad:	83 c4 10             	add    esp,0x10
c0017fb0:	83 ec 0c             	sub    esp,0xc
c0017fb3:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c0017fbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fc1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fc4:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017fca:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c0017fd0:	6a 10                	push   0x10
c0017fd2:	e8 dd 6e ff ff       	call   c000eeb4 <operator new(unsigned long)>
c0017fd7:	59                   	pop    ecx
c0017fd8:	89 c6                	mov    esi,eax
c0017fda:	58                   	pop    eax
c0017fdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fe0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fe3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017fe9:	56                   	push   esi
c0017fea:	e8 21 67 ff ff       	call   c000e710 <VAS::VAS(VAS*)>
c0017fef:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c0017ff5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0017ff8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017ffa:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018000:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018005:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018008:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c001800e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018013:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018016:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c001801c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018021:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c0018024:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001802e:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c0018034:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001803a:	81 c3 0c 02 00 00    	add    ebx,0x20c
c0018040:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018045:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018048:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c001804f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0018052:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c0018059:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0018060:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0018067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001806c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001806f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0018072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018077:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001807a:	58                   	pop    eax
c001807b:	5a                   	pop    edx
c001807c:	53                   	push   ebx
c001807d:	68 88 4a 02 c0       	push   0xc0024a88
c0018082:	e8 0b 6e 00 00       	call   c001ee92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018087:	e8 83 fe ff ff       	call   c0017f0f <unlockStuff()>
c001808c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018097:	5a                   	pop    edx
c0018098:	5b                   	pop    ebx
c0018099:	5e                   	pop    esi
c001809a:	c3                   	ret    
c001809b:	83 ec 0c             	sub    esp,0xc
c001809e:	68 44 1e 02 c0       	push   0xc0021e44
c00180a3:	e8 fb 6e ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00180a8:	83 c4 10             	add    esp,0x10
c00180ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00180b0:	eb e5                	jmp    c0018097 <forkProcess(regs*)+0x153>

c00180b2 <Semaphore::tryAcquire()>:
c00180b2:	83 ec 0c             	sub    esp,0xc
c00180b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b9:	e8 bf fa ff ff       	call   c0017b7d <lockStuff()>
c00180be:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00180c1:	3b 10                	cmp    edx,DWORD PTR [eax]
c00180c3:	7c 0b                	jl     c00180d0 <Semaphore::tryAcquire()+0x1e>
c00180c5:	e8 45 fe ff ff       	call   c0017f0f <unlockStuff()>
c00180ca:	31 c0                	xor    eax,eax
c00180cc:	83 c4 0c             	add    esp,0xc
c00180cf:	c3                   	ret    
c00180d0:	42                   	inc    edx
c00180d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00180d4:	e8 36 fe ff ff       	call   c0017f0f <unlockStuff()>
c00180d9:	b0 01                	mov    al,0x1
c00180db:	83 c4 0c             	add    esp,0xc
c00180de:	c3                   	ret    
c00180df:	90                   	nop

c00180e0 <Semaphore::assertLocked(char const*)>:
c00180e0:	83 ec 0c             	sub    esp,0xc
c00180e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180eb:	e8 8d fa ff ff       	call   c0017b7d <lockStuff()>
c00180f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00180f2:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c00180f5:	7c 08                	jl     c00180ff <Semaphore::assertLocked(char const*)+0x1f>
c00180f7:	83 c4 0c             	add    esp,0xc
c00180fa:	e9 10 fe ff ff       	jmp    c0017f0f <unlockStuff()>
c00180ff:	83 ec 0c             	sub    esp,0xc
c0018102:	52                   	push   edx
c0018103:	e8 30 cb ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0018108:	83 c4 10             	add    esp,0x10
c001810b:	83 c4 0c             	add    esp,0xc
c001810e:	e9 fc fd ff ff       	jmp    c0017f0f <unlockStuff()>

c0018113 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018113:	83 ec 0c             	sub    esp,0xc
c0018116:	e8 26 fa ff ff       	call   c0017b41 <getIRQNestingLevel()>
c001811b:	83 ec 08             	sub    esp,0x8
c001811e:	50                   	push   eax
c001811f:	68 70 1e 02 c0       	push   0xc0021e70
c0018124:	e8 7a 6e ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0018129:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001812d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018132:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018135:	e8 50 fd ff ff       	call   c0017e8a <schedule()>
c001813a:	e8 19 fa ff ff       	call   c0017b58 <unlockScheduler()>
c001813f:	e8 fd f9 ff ff       	call   c0017b41 <getIRQNestingLevel()>
c0018144:	5a                   	pop    edx
c0018145:	59                   	pop    ecx
c0018146:	50                   	push   eax
c0018147:	68 a4 1e 02 c0       	push   0xc0021ea4
c001814c:	e8 52 6e ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0018151:	83 c4 1c             	add    esp,0x1c
c0018154:	c3                   	ret    

c0018155 <blockTask(TaskState)>:
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001815c:	e8 f5 f9 ff ff       	call   c0017b56 <lockScheduler()>
c0018161:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018166:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018169:	e8 1c fd ff ff       	call   c0017e8a <schedule()>
c001816e:	83 c4 0c             	add    esp,0xc
c0018171:	e9 e2 f9 ff ff       	jmp    c0017b58 <unlockScheduler()>

c0018176 <waitTask(int, int*, int)>:
c0018176:	83 ec 18             	sub    esp,0x18
c0018179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001817e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018182:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018185:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018189:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001818e:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018191:	6a 07                	push   0x7
c0018193:	e8 bd ff ff ff       	call   c0018155 <blockTask(TaskState)>
c0018198:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001819d:	83 c4 10             	add    esp,0x10
c00181a0:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c00181a3:	85 d2                	test   edx,edx
c00181a5:	74 0a                	je     c00181b1 <waitTask(int, int*, int)+0x3b>
c00181a7:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c00181aa:	89 02                	mov    DWORD PTR [edx],eax
c00181ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181b1:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c00181b4:	83 c4 0c             	add    esp,0xc
c00181b7:	c3                   	ret    

c00181b8 <nanoSleepUntil(unsigned long long)>:
c00181b8:	83 ec 0c             	sub    esp,0xc
c00181bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181c3:	3b 05 b0 3c 02 c0    	cmp    eax,DWORD PTR ds:0xc0023cb0
c00181c9:	89 d1                	mov    ecx,edx
c00181cb:	1b 0d b4 3c 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023cb4
c00181d1:	73 04                	jae    c00181d7 <nanoSleepUntil(unsigned long long)+0x1f>
c00181d3:	83 c4 0c             	add    esp,0xc
c00181d6:	c3                   	ret    
c00181d7:	e8 a1 f9 ff ff       	call   c0017b7d <lockStuff()>
c00181dc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00181e2:	83 ec 08             	sub    esp,0x8
c00181e5:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00181e8:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00181eb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00181f1:	68 7c 4a 02 c0       	push   0xc0024a7c
c00181f6:	e8 97 6c 00 00       	call   c001ee92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00181fb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018202:	e8 4e ff ff ff       	call   c0018155 <blockTask(TaskState)>
c0018207:	83 c4 1c             	add    esp,0x1c
c001820a:	e9 00 fd ff ff       	jmp    c0017f0f <unlockStuff()>

c001820f <nanoSleep(unsigned long long)>:
c001820f:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c0018214:	8b 15 b4 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023cb4
c001821a:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001821e:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018222:	eb 94                	jmp    c00181b8 <nanoSleepUntil(unsigned long long)>

c0018224 <sleep(unsigned long long)>:
c0018224:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001822c:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018231:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018235:	01 ca                	add    edx,ecx
c0018237:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001823b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001823f:	eb ce                	jmp    c001820f <nanoSleep(unsigned long long)>
c0018241:	90                   	nop

c0018242 <Semaphore::acquire()>:
c0018242:	83 ec 0c             	sub    esp,0xc
c0018245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018249:	e8 2f f9 ff ff       	call   c0017b7d <lockStuff()>
c001824e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018251:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018253:	7d 0c                	jge    c0018261 <Semaphore::acquire()+0x1f>
c0018255:	42                   	inc    edx
c0018256:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018259:	83 c4 0c             	add    esp,0xc
c001825c:	e9 ae fc ff ff       	jmp    c0017f0f <unlockStuff()>
c0018261:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018267:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001826e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018271:	85 d2                	test   edx,edx
c0018273:	74 2a                	je     c001829f <Semaphore::acquire()+0x5d>
c0018275:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0018278:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001827e:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0018281:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018287:	83 ec 0c             	sub    esp,0xc
c001828a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001828d:	6a 05                	push   0x5
c001828f:	e8 c1 fe ff ff       	call   c0018155 <blockTask(TaskState)>
c0018294:	83 c4 10             	add    esp,0x10
c0018297:	83 c4 0c             	add    esp,0xc
c001829a:	e9 70 fc ff ff       	jmp    c0017f0f <unlockStuff()>
c001829f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00182a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00182a8:	eb d7                	jmp    c0018281 <Semaphore::acquire()+0x3f>

c00182aa <execveProcess(char const*, char* const*, char* const*)>:
c00182aa:	56                   	push   esi
c00182ab:	53                   	push   ebx
c00182ac:	50                   	push   eax
c00182ad:	e8 cb f8 ff ff       	call   c0017b7d <lockStuff()>
c00182b2:	83 ec 0c             	sub    esp,0xc
c00182b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00182bd:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c00182c3:	68 3b 07 00 00       	push   0x73b
c00182c8:	e8 e7 6b ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00182cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00182d1:	89 c3                	mov    ebx,eax
c00182d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00182db:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c00182e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00182e5:	53                   	push   ebx
c00182e6:	e8 13 f5 ff ff       	call   c00177fe <Process::Process(char const*, Process*, char**)>
c00182eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182f0:	83 c4 20             	add    esp,0x20
c00182f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00182f6:	85 f6                	test   esi,esi
c00182f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00182fa:	89 03                	mov    DWORD PTR [ebx],eax
c00182fc:	74 06                	je     c0018304 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c00182fe:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c0018304:	83 ec 0c             	sub    esp,0xc
c0018307:	53                   	push   ebx
c0018308:	e8 57 fa ff ff       	call   c0017d64 <Process::createUserThread()>
c001830d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018314:	e8 3c fe ff ff       	call   c0018155 <blockTask(TaskState)>
c0018319:	e8 f1 fb ff ff       	call   c0017f0f <unlockStuff()>
c001831e:	e8 33 f8 ff ff       	call   c0017b56 <lockScheduler()>
c0018323:	e8 62 fb ff ff       	call   c0017e8a <schedule()>
c0018328:	e8 2b f8 ff ff       	call   c0017b58 <unlockScheduler()>
c001832d:	83 c4 14             	add    esp,0x14
c0018330:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018335:	5b                   	pop    ebx
c0018336:	5e                   	pop    esi
c0018337:	c3                   	ret    

c0018338 <taskReturned>:
c0018338:	83 ec 18             	sub    esp,0x18
c001833b:	68 d8 1e 02 c0       	push   0xc0021ed8
c0018340:	e8 f3 c8 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0018345:	83 c4 10             	add    esp,0x10
c0018348:	83 ec 0c             	sub    esp,0xc
c001834b:	6a 02                	push   0x2
c001834d:	e8 03 fe ff ff       	call   c0018155 <blockTask(TaskState)>
c0018352:	e8 ff f7 ff ff       	call   c0017b56 <lockScheduler()>
c0018357:	e8 2e fb ff ff       	call   c0017e8a <schedule()>
c001835c:	e8 f7 f7 ff ff       	call   c0017b58 <unlockScheduler()>
c0018361:	83 c4 10             	add    esp,0x10
c0018364:	eb e2                	jmp    c0018348 <taskReturned+0x10>

c0018366 <unblockTask(ThreadControlBlock*)>:
c0018366:	53                   	push   ebx
c0018367:	83 ec 08             	sub    esp,0x8
c001836a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001836e:	e8 e3 f7 ff ff       	call   c0017b56 <lockScheduler()>
c0018373:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018376:	85 c0                	test   eax,eax
c0018378:	74 5c                	je     c00183d6 <unblockTask(ThreadControlBlock*)+0x70>
c001837a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001837d:	48                   	dec    eax
c001837e:	74 31                	je     c00183b1 <unblockTask(ThreadControlBlock*)+0x4b>
c0018380:	83 ec 0c             	sub    esp,0xc
c0018383:	68 88 4a 02 c0       	push   0xc0024a88
c0018388:	e8 33 6a 00 00       	call   c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001838d:	83 c4 10             	add    esp,0x10
c0018390:	85 c0                	test   eax,eax
c0018392:	75 17                	jne    c00183ab <unblockTask(ThreadControlBlock*)+0x45>
c0018394:	eb 65                	jmp    c00183fb <unblockTask(ThreadControlBlock*)+0x95>
c0018396:	83 ec 08             	sub    esp,0x8
c0018399:	50                   	push   eax
c001839a:	68 88 4a 02 c0       	push   0xc0024a88
c001839f:	e8 2c 6d 00 00       	call   c001f0d0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00183a4:	83 c4 10             	add    esp,0x10
c00183a7:	85 c0                	test   eax,eax
c00183a9:	74 50                	je     c00183fb <unblockTask(ThreadControlBlock*)+0x95>
c00183ab:	39 c3                	cmp    ebx,eax
c00183ad:	75 e7                	jne    c0018396 <unblockTask(ThreadControlBlock*)+0x30>
c00183af:	eb 1c                	jmp    c00183cd <unblockTask(ThreadControlBlock*)+0x67>
c00183b1:	83 ec 0c             	sub    esp,0xc
c00183b4:	68 c8 1f 02 c0       	push   0xc0021fc8
c00183b9:	e8 e5 6b ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00183be:	c7 04 24 54 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f54
c00183c5:	e8 d9 6b ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00183ca:	83 c4 10             	add    esp,0x10
c00183cd:	83 c4 08             	add    esp,0x8
c00183d0:	5b                   	pop    ebx
c00183d1:	e9 82 f7 ff ff       	jmp    c0017b58 <unlockScheduler()>
c00183d6:	83 ec 0c             	sub    esp,0xc
c00183d9:	68 0c 1f 02 c0       	push   0xc0021f0c
c00183de:	e8 c0 6b ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00183e3:	c7 04 24 54 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f54
c00183ea:	e8 b4 6b ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00183ef:	83 c4 10             	add    esp,0x10
c00183f2:	83 c4 08             	add    esp,0x8
c00183f5:	5b                   	pop    ebx
c00183f6:	e9 5d f7 ff ff       	jmp    c0017b58 <unlockScheduler()>
c00183fb:	83 ec 08             	sub    esp,0x8
c00183fe:	53                   	push   ebx
c00183ff:	68 88 4a 02 c0       	push   0xc0024a88
c0018404:	e8 89 6a 00 00       	call   c001ee92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018409:	83 c4 10             	add    esp,0x10
c001840c:	83 c4 08             	add    esp,0x8
c001840f:	5b                   	pop    ebx
c0018410:	e9 43 f7 ff ff       	jmp    c0017b58 <unlockScheduler()>

c0018415 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018415:	55                   	push   ebp
c0018416:	57                   	push   edi
c0018417:	56                   	push   esi
c0018418:	53                   	push   ebx
c0018419:	83 ec 1c             	sub    esp,0x1c
c001841c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018420:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018423:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0018429:	85 c9                	test   ecx,ecx
c001842b:	7e 20                	jle    c001844d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001842d:	31 f6                	xor    esi,esi
c001842f:	83 ec 0c             	sub    esp,0xc
c0018432:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0018439:	46                   	inc    esi
c001843a:	e8 ef 37 ff ff       	call   c000bc2e <free>
c001843f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018442:	83 c4 10             	add    esp,0x10
c0018445:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001844b:	7f e2                	jg     c001842f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001844d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018457:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001845c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001845f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018462:	d3 c0                	rol    eax,cl
c0018464:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001846b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001846e:	89 f7                	mov    edi,esi
c0018470:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018478:	0f 85 4f 01 00 00    	jne    c00185cd <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001847e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018484:	85 c0                	test   eax,eax
c0018486:	0f 84 aa 00 00 00    	je     c0018536 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001848c:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001848f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018493:	31 c9                	xor    ecx,ecx
c0018495:	eb 10                	jmp    c00184a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0018497:	41                   	inc    ecx
c0018498:	83 f9 10             	cmp    ecx,0x10
c001849b:	0f 84 95 00 00 00    	je     c0018536 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c00184a1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00184a7:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c00184ae:	d3 fa                	sar    edx,cl
c00184b0:	83 e2 01             	and    edx,0x1
c00184b3:	74 e2                	je     c0018497 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00184b5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c00184b8:	01 ca                	add    edx,ecx
c00184ba:	89 d5                	mov    ebp,edx
c00184bc:	c1 e5 05             	shl    ebp,0x5
c00184bf:	01 ea                	add    edx,ebp
c00184c1:	01 d0                	add    eax,edx
c00184c3:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00184c9:	83 fd 07             	cmp    ebp,0x7
c00184cc:	75 c9                	jne    c0018497 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00184ce:	05 40 02 00 00       	add    eax,0x240
c00184d3:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00184d6:	83 fd ff             	cmp    ebp,0xffffffff
c00184d9:	0f 8c 08 01 00 00    	jl     c00185e7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c00184df:	0f 84 b9 01 00 00    	je     c001869e <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c00184e5:	85 ed                	test   ebp,ebp
c00184e7:	0f 84 a0 01 00 00    	je     c001868d <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c00184ed:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00184ef:	75 a6                	jne    c0018497 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00184f1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00184f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00184fb:	01 d0                	add    eax,edx
c00184fd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018501:	83 ec 0c             	sub    esp,0xc
c0018504:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001850a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001850d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018513:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001851a:	50                   	push   eax
c001851b:	e8 46 fe ff ff       	call   c0018366 <unblockTask(ThreadControlBlock*)>
c0018520:	83 c4 10             	add    esp,0x10
c0018523:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018526:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001852a:	89 f7                	mov    edi,esi
c001852c:	41                   	inc    ecx
c001852d:	83 f9 10             	cmp    ecx,0x10
c0018530:	0f 85 6b ff ff ff    	jne    c00184a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018536:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001853c:	85 c0                	test   eax,eax
c001853e:	74 5d                	je     c001859d <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018540:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0018546:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001854c:	74 4f                	je     c001859d <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001854e:	83 ec 0c             	sub    esp,0xc
c0018551:	68 88 4a 02 c0       	push   0xc0024a88
c0018556:	e8 65 68 00 00       	call   c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001855b:	c7 04 24 88 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a88
c0018562:	89 c7                	mov    edi,eax
c0018564:	e8 5f 68 00 00       	call   c001edc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018569:	83 c4 10             	add    esp,0x10
c001856c:	84 c0                	test   al,al
c001856e:	0f 84 e4 00 00 00    	je     c0018658 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c0018574:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018577:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001857d:	85 d2                	test   edx,edx
c001857f:	74 0f                	je     c0018590 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c0018581:	83 ec 0c             	sub    esp,0xc
c0018584:	8b 02                	mov    eax,DWORD PTR [edx]
c0018586:	52                   	push   edx
c0018587:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001858a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001858d:	83 c4 10             	add    esp,0x10
c0018590:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001859a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001859d:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00185a3:	85 db                	test   ebx,ebx
c00185a5:	74 16                	je     c00185bd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c00185a7:	83 ec 0c             	sub    esp,0xc
c00185aa:	53                   	push   ebx
c00185ab:	e8 3e 5c ff ff       	call   c000e1ee <VAS::~VAS()>
c00185b0:	58                   	pop    eax
c00185b1:	5a                   	pop    edx
c00185b2:	6a 10                	push   0x10
c00185b4:	53                   	push   ebx
c00185b5:	e8 09 69 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c00185ba:	83 c4 10             	add    esp,0x10
c00185bd:	83 ec 0c             	sub    esp,0xc
c00185c0:	68 de 1c 02 c0       	push   0xc0021cde
c00185c5:	e8 d9 69 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00185ca:	83 c4 10             	add    esp,0x10
c00185cd:	83 ec 08             	sub    esp,0x8
c00185d0:	68 3b 07 00 00       	push   0x73b
c00185d5:	68 ec 1c 02 c0       	push   0xc0021cec
c00185da:	e8 c4 69 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00185df:	83 c4 2c             	add    esp,0x2c
c00185e2:	5b                   	pop    ebx
c00185e3:	5e                   	pop    esi
c00185e4:	5f                   	pop    edi
c00185e5:	5d                   	pop    ebp
c00185e6:	c3                   	ret    
c00185e7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00185eb:	83 ec 0c             	sub    esp,0xc
c00185ee:	68 0c 20 02 c0       	push   0xc002200c
c00185f3:	e8 40 c6 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c00185f8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	89 f7                	mov    edi,esi
c0018600:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018604:	e9 8e fe ff ff       	jmp    c0018497 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018609:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001860f:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0018615:	75 1c                	jne    c0018633 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018617:	83 ec 0c             	sub    esp,0xc
c001861a:	68 74 20 02 c0       	push   0xc0022074
c001861f:	e8 7f 69 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0018624:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001862b:	e8 25 fb ff ff       	call   c0018155 <blockTask(TaskState)>
c0018630:	83 c4 10             	add    esp,0x10
c0018633:	83 ec 08             	sub    esp,0x8
c0018636:	56                   	push   esi
c0018637:	68 88 4a 02 c0       	push   0xc0024a88
c001863c:	e8 51 68 00 00       	call   c001ee92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018641:	c7 04 24 88 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a88
c0018648:	e8 73 67 00 00       	call   c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001864d:	83 c4 10             	add    esp,0x10
c0018650:	39 f8                	cmp    eax,edi
c0018652:	0f 84 1c ff ff ff    	je     c0018574 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c0018658:	83 ec 0c             	sub    esp,0xc
c001865b:	68 88 4a 02 c0       	push   0xc0024a88
c0018660:	e8 5b 67 00 00       	call   c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018665:	c7 04 24 88 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a88
c001866c:	89 c6                	mov    esi,eax
c001866e:	e8 71 67 00 00       	call   c001ede4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018673:	83 c4 10             	add    esp,0x10
c0018676:	39 f3                	cmp    ebx,esi
c0018678:	74 b9                	je     c0018633 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001867a:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001867d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018680:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018686:	75 ab                	jne    c0018633 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018688:	e9 7c ff ff ff       	jmp    c0018609 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001868d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018691:	83 ec 0c             	sub    esp,0xc
c0018694:	68 40 20 02 c0       	push   0xc0022040
c0018699:	e9 55 ff ff ff       	jmp    c00185f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001869e:	8b 36                	mov    esi,DWORD PTR [esi]
c00186a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186a4:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00186a7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00186aa:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00186b0:	01 d7                	add    edi,edx
c00186b2:	89 f8                	mov    eax,edi
c00186b4:	e9 44 fe ff ff       	jmp    c00184fd <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c00186b9 <cleanerTaskFunction(void*)>:
c00186b9:	53                   	push   ebx
c00186ba:	83 ec 08             	sub    esp,0x8
c00186bd:	e8 96 f4 ff ff       	call   c0017b58 <unlockScheduler()>
c00186c2:	e8 8f f4 ff ff       	call   c0017b56 <lockScheduler()>
c00186c7:	80 3d 4c 4a 02 c0 00 	cmp    BYTE PTR ds:0xc0024a4c,0x0
c00186ce:	0f 85 8e 00 00 00    	jne    c0018762 <cleanerTaskFunction(void*)+0xa9>
c00186d4:	83 ec 0c             	sub    esp,0xc
c00186d7:	6a 02                	push   0x2
c00186d9:	e8 35 fa ff ff       	call   c0018113 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00186de:	83 c4 10             	add    esp,0x10
c00186e1:	c6 05 4c 4a 02 c0 00 	mov    BYTE PTR ds:0xc0024a4c,0x0
c00186e8:	e8 90 f4 ff ff       	call   c0017b7d <lockStuff()>
c00186ed:	e8 64 f4 ff ff       	call   c0017b56 <lockScheduler()>
c00186f2:	83 ec 0c             	sub    esp,0xc
c00186f5:	68 70 4a 02 c0       	push   0xc0024a70
c00186fa:	e8 c9 66 00 00       	call   c001edc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00186ff:	83 c4 10             	add    esp,0x10
c0018702:	84 c0                	test   al,al
c0018704:	75 40                	jne    c0018746 <cleanerTaskFunction(void*)+0x8d>
c0018706:	83 ec 0c             	sub    esp,0xc
c0018709:	68 70 4a 02 c0       	push   0xc0024a70
c001870e:	e8 ad 66 00 00       	call   c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018713:	c7 04 24 70 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a70
c001871a:	89 c3                	mov    ebx,eax
c001871c:	e8 c3 66 00 00       	call   c001ede4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018721:	c7 04 24 02 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d02
c0018728:	e8 76 68 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001872d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018730:	e8 e0 fc ff ff       	call   c0018415 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018735:	c7 04 24 1b 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d1b
c001873c:	e8 62 68 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0018741:	83 c4 10             	add    esp,0x10
c0018744:	eb ac                	jmp    c00186f2 <cleanerTaskFunction(void*)+0x39>
c0018746:	e8 0d f4 ff ff       	call   c0017b58 <unlockScheduler()>
c001874b:	e8 bf f7 ff ff       	call   c0017f0f <unlockStuff()>
c0018750:	e8 01 f4 ff ff       	call   c0017b56 <lockScheduler()>
c0018755:	80 3d 4c 4a 02 c0 00 	cmp    BYTE PTR ds:0xc0024a4c,0x0
c001875c:	0f 84 72 ff ff ff    	je     c00186d4 <cleanerTaskFunction(void*)+0x1b>
c0018762:	e8 f1 f3 ff ff       	call   c0017b58 <unlockScheduler()>
c0018767:	e9 75 ff ff ff       	jmp    c00186e1 <cleanerTaskFunction(void*)+0x28>

c001876c <terminateTask(int)>:
c001876c:	83 ec 18             	sub    esp,0x18
c001876f:	68 2e 1d 02 c0       	push   0xc0021d2e
c0018774:	e8 2a 68 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0018779:	e8 ff f3 ff ff       	call   c0017b7d <lockStuff()>
c001877e:	e8 d3 f3 ff ff       	call   c0017b56 <lockScheduler()>
c0018783:	c7 04 24 48 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d48
c001878a:	e8 14 68 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001878f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018793:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018798:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001879b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187a0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00187a3:	5a                   	pop    edx
c00187a4:	59                   	pop    ecx
c00187a5:	50                   	push   eax
c00187a6:	68 70 4a 02 c0       	push   0xc0024a70
c00187ab:	e8 e2 66 00 00       	call   c001ee92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00187b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187b5:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00187bc:	c7 04 24 62 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d62
c00187c3:	e8 db 67 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00187c8:	83 c4 10             	add    esp,0x10
c00187cb:	a1 48 4a 02 c0       	mov    eax,ds:0xc0024a48
c00187d0:	85 c0                	test   eax,eax
c00187d2:	74 5a                	je     c001882e <terminateTask(int)+0xc2>
c00187d4:	83 ec 0c             	sub    esp,0xc
c00187d7:	68 7c 1d 02 c0       	push   0xc0021d7c
c00187dc:	e8 c2 67 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00187e1:	58                   	pop    eax
c00187e2:	c6 05 4c 4a 02 c0 01 	mov    BYTE PTR ds:0xc0024a4c,0x1
c00187e9:	ff 35 48 4a 02 c0    	push   DWORD PTR ds:0xc0024a48
c00187ef:	e8 72 fb ff ff       	call   c0018366 <unblockTask(ThreadControlBlock*)>
c00187f4:	c7 04 24 96 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d96
c00187fb:	e8 a3 67 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c0018800:	83 c4 10             	add    esp,0x10
c0018803:	e8 50 f3 ff ff       	call   c0017b58 <unlockScheduler()>
c0018808:	e8 02 f7 ff ff       	call   c0017f0f <unlockStuff()>
c001880d:	83 ec 0c             	sub    esp,0xc
c0018810:	68 ce 1d 02 c0       	push   0xc0021dce
c0018815:	e8 89 67 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001881a:	83 c4 10             	add    esp,0x10
c001881d:	e8 34 f3 ff ff       	call   c0017b56 <lockScheduler()>
c0018822:	e8 63 f6 ff ff       	call   c0017e8a <schedule()>
c0018827:	e8 2c f3 ff ff       	call   c0017b58 <unlockScheduler()>
c001882c:	eb ef                	jmp    c001881d <terminateTask(int)+0xb1>
c001882e:	83 ec 0c             	sub    esp,0xc
c0018831:	68 b0 1d 02 c0       	push   0xc0021db0
c0018836:	e8 68 67 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001883b:	83 c4 10             	add    esp,0x10
c001883e:	eb c3                	jmp    c0018803 <terminateTask(int)+0x97>

c0018840 <Thr::terminateFromIRQ(int)>:
c0018840:	83 ec 18             	sub    esp,0x18
c0018843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018847:	e8 20 ff ff ff       	call   c001876c <terminateTask(int)>

c001884c <Semaphore::release()>:
c001884c:	83 ec 0c             	sub    esp,0xc
c001884f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018853:	e8 25 f3 ff ff       	call   c0017b7d <lockStuff()>
c0018858:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001885b:	85 d2                	test   edx,edx
c001885d:	74 1a                	je     c0018879 <Semaphore::release()+0x2d>
c001885f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0018862:	83 ec 0c             	sub    esp,0xc
c0018865:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0018868:	52                   	push   edx
c0018869:	e8 f8 fa ff ff       	call   c0018366 <unblockTask(ThreadControlBlock*)>
c001886e:	83 c4 10             	add    esp,0x10
c0018871:	83 c4 0c             	add    esp,0xc
c0018874:	e9 96 f6 ff ff       	jmp    c0017f0f <unlockStuff()>
c0018879:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001887c:	83 c4 0c             	add    esp,0xc
c001887f:	e9 8b f6 ff ff       	jmp    c0017f0f <unlockStuff()>

c0018884 <__static_initialization_and_destruction_0(int, int)>:
c0018884:	83 ec 0c             	sub    esp,0xc
c0018887:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001888c:	0f 85 88 00 00 00    	jne    c001891a <__static_initialization_and_destruction_0(int, int)+0x96>
c0018892:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001889a:	75 7e                	jne    c001891a <__static_initialization_and_destruction_0(int, int)+0x96>
c001889c:	83 ec 0c             	sub    esp,0xc
c001889f:	68 88 4a 02 c0       	push   0xc0024a88
c00188a4:	e8 cf 67 00 00       	call   c001f078 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00188a9:	83 c4 10             	add    esp,0x10
c00188ac:	83 ec 04             	sub    esp,0x4
c00188af:	68 60 2a 02 c0       	push   0xc0022a60
c00188b4:	68 88 4a 02 c0       	push   0xc0024a88
c00188b9:	68 38 f0 01 c0       	push   0xc001f038
c00188be:	e8 7c 65 ff ff       	call   c000ee3f <__cxa_atexit>
c00188c3:	83 c4 10             	add    esp,0x10
c00188c6:	83 ec 0c             	sub    esp,0xc
c00188c9:	68 7c 4a 02 c0       	push   0xc0024a7c
c00188ce:	e8 a5 67 00 00       	call   c001f078 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00188d3:	83 c4 10             	add    esp,0x10
c00188d6:	83 ec 04             	sub    esp,0x4
c00188d9:	68 60 2a 02 c0       	push   0xc0022a60
c00188de:	68 7c 4a 02 c0       	push   0xc0024a7c
c00188e3:	68 38 f0 01 c0       	push   0xc001f038
c00188e8:	e8 52 65 ff ff       	call   c000ee3f <__cxa_atexit>
c00188ed:	83 c4 10             	add    esp,0x10
c00188f0:	83 ec 0c             	sub    esp,0xc
c00188f3:	68 70 4a 02 c0       	push   0xc0024a70
c00188f8:	e8 7b 67 00 00       	call   c001f078 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00188fd:	83 c4 10             	add    esp,0x10
c0018900:	83 ec 04             	sub    esp,0x4
c0018903:	68 60 2a 02 c0       	push   0xc0022a60
c0018908:	68 70 4a 02 c0       	push   0xc0024a70
c001890d:	68 38 f0 01 c0       	push   0xc001f038
c0018912:	e8 28 65 ff ff       	call   c000ee3f <__cxa_atexit>
c0018917:	83 c4 10             	add    esp,0x10
c001891a:	90                   	nop
c001891b:	83 c4 0c             	add    esp,0xc
c001891e:	c3                   	ret    

c001891f <_GLOBAL__sub_I_kernelProcess>:
c001891f:	83 ec 0c             	sub    esp,0xc
c0018922:	83 ec 08             	sub    esp,0x8
c0018925:	68 ff ff 00 00       	push   0xffff
c001892a:	6a 01                	push   0x1
c001892c:	e8 53 ff ff ff       	call   c0018884 <__static_initialization_and_destruction_0(int, int)>
c0018931:	83 c4 10             	add    esp,0x10
c0018934:	83 c4 0c             	add    esp,0xc
c0018937:	c3                   	ret    

c0018938 <Vm::vm8086EntryPoint(void*)>:
c0018938:	83 ec 0c             	sub    esp,0xc
c001893b:	e8 18 f2 ff ff       	call   c0017b58 <unlockScheduler()>
c0018940:	fb                   	sti    
c0018941:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018946:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001894a:	52                   	push   edx
c001894b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001894f:	52                   	push   edx
c0018950:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018954:	52                   	push   edx
c0018955:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018959:	50                   	push   eax
c001895a:	e8 56 78 fe ff       	call   c00001b5 <goToVM86>
c001895f:	83 c4 1c             	add    esp,0x1c
c0018962:	c3                   	ret    

c0018963 <Vm::inbv(unsigned short)>:
c0018963:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018967:	ec                   	in     al,dx
c0018968:	c3                   	ret    

c0018969 <Vm::outbv(unsigned short, unsigned char)>:
c0018969:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001896d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018971:	ee                   	out    dx,al
c0018972:	c3                   	ret    

c0018973 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018973:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018978:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001897d:	c1 e0 04             	shl    eax,0x4
c0018980:	01 d0                	add    eax,edx
c0018982:	c3                   	ret    

c0018983 <Vm::getSegment(unsigned int)>:
c0018983:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018987:	c1 e8 10             	shr    eax,0x10
c001898a:	c3                   	ret    

c001898b <Vm::getOffset(unsigned int)>:
c001898b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001898f:	c3                   	ret    

c0018990 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018990:	55                   	push   ebp
c0018991:	57                   	push   edi
c0018992:	56                   	push   esi
c0018993:	53                   	push   ebx
c0018994:	83 ec 2c             	sub    esp,0x2c
c0018997:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001899b:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001899f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00189a3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00189a7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00189ab:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00189af:	e8 a2 f1 ff ff       	call   c0017b56 <lockScheduler()>
c00189b4:	68 80 00 00 00       	push   0x80
c00189b9:	6a 00                	push   0x0
c00189bb:	68 38 89 01 c0       	push   0xc0018938
c00189c0:	55                   	push   ebp
c00189c1:	e8 ba f2 ff ff       	call   c0017c80 <Process::createThread(void (*)(void*), void*, int)>
c00189c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189ca:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00189ce:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00189d2:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00189d6:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00189da:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00189de:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00189e5:	e8 ca 64 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c00189ea:	83 c4 0c             	add    esp,0xc
c00189ed:	89 c3                	mov    ebx,eax
c00189ef:	55                   	push   ebp
c00189f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189f4:	50                   	push   eax
c00189f5:	e8 d8 6a ff ff       	call   c000f4d2 <File::File(char const*, Process*)>
c00189fa:	83 c4 0c             	add    esp,0xc
c00189fd:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018a01:	50                   	push   eax
c0018a02:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018a06:	50                   	push   eax
c0018a07:	53                   	push   ebx
c0018a08:	e8 d5 6d ff ff       	call   c000f7e2 <File::stat(unsigned long long*, bool*)>
c0018a0d:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018a11:	83 c4 10             	add    esp,0x10
c0018a14:	84 d2                	test   dl,dl
c0018a16:	74 1c                	je     c0018a34 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018a18:	83 ec 0c             	sub    esp,0xc
c0018a1b:	68 9c 20 02 c0       	push   0xc002209c
c0018a20:	e8 13 c2 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0018a25:	e8 2e f1 ff ff       	call   c0017b58 <unlockScheduler()>
c0018a2a:	83 c4 10             	add    esp,0x10
c0018a2d:	31 d2                	xor    edx,edx
c0018a2f:	e9 81 00 00 00       	jmp    c0018ab5 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018a34:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018a38:	51                   	push   ecx
c0018a39:	51                   	push   ecx
c0018a3a:	6a 01                	push   0x1
c0018a3c:	53                   	push   ebx
c0018a3d:	e8 f4 6a ff ff       	call   c000f536 <File::open(FileOpenMode)>
c0018a42:	83 c4 10             	add    esp,0x10
c0018a45:	85 c0                	test   eax,eax
c0018a47:	74 1b                	je     c0018a64 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018a49:	83 ec 0c             	sub    esp,0xc
c0018a4c:	68 b5 20 02 c0       	push   0xc00220b5
c0018a51:	e8 e2 c1 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c0018a56:	e8 fd f0 ff ff       	call   c0017b58 <unlockScheduler()>
c0018a5b:	83 c4 10             	add    esp,0x10
c0018a5e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018a62:	eb 51                	jmp    c0018ab5 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018a64:	83 ec 0c             	sub    esp,0xc
c0018a67:	0f b7 ff             	movzx  edi,di
c0018a6a:	6a 07                	push   0x7
c0018a6c:	0f b7 f6             	movzx  esi,si
c0018a6f:	68 00 01 00 00       	push   0x100
c0018a74:	6a 00                	push   0x0
c0018a76:	6a 00                	push   0x0
c0018a78:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018a7e:	e8 c3 5b ff ff       	call   c000e646 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018a83:	83 c4 18             	add    esp,0x18
c0018a86:	57                   	push   edi
c0018a87:	56                   	push   esi
c0018a88:	e8 e6 fe ff ff       	call   c0018973 <Vm::realToLinear(unsigned short, unsigned short)>
c0018a8d:	5a                   	pop    edx
c0018a8e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a90:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018a94:	51                   	push   ecx
c0018a95:	50                   	push   eax
c0018a96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a9e:	53                   	push   ebx
c0018a9f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018aa2:	83 c4 14             	add    esp,0x14
c0018aa5:	53                   	push   ebx
c0018aa6:	e8 e9 6a ff ff       	call   c000f594 <File::close()>
c0018aab:	e8 a8 f0 ff ff       	call   c0017b58 <unlockScheduler()>
c0018ab0:	83 c4 10             	add    esp,0x10
c0018ab3:	b2 01                	mov    dl,0x1
c0018ab5:	83 c4 2c             	add    esp,0x2c
c0018ab8:	88 d0                	mov    al,dl
c0018aba:	5b                   	pop    ebx
c0018abb:	5e                   	pop    esi
c0018abc:	5f                   	pop    edi
c0018abd:	5d                   	pop    ebp
c0018abe:	c3                   	ret    

c0018abf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018abf:	57                   	push   edi
c0018ac0:	56                   	push   esi
c0018ac1:	53                   	push   ebx
c0018ac2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018ac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018ace:	83 e8 06             	sub    eax,0x6
c0018ad1:	0f b7 c0             	movzx  eax,ax
c0018ad4:	50                   	push   eax
c0018ad5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018ada:	50                   	push   eax
c0018adb:	e8 93 fe ff ff       	call   c0018973 <Vm::realToLinear(unsigned short, unsigned short)>
c0018ae0:	5a                   	pop    edx
c0018ae1:	5e                   	pop    esi
c0018ae2:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018ae5:	8d 56 fa             	lea    edx,[esi-0x6]
c0018ae8:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018aee:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018af1:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018af4:	83 c2 02             	add    edx,0x2
c0018af7:	66 89 10             	mov    WORD PTR [eax],dx
c0018afa:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018afd:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018b01:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018b04:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018b08:	89 d6                	mov    esi,edx
c0018b0a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018b10:	66 81 e6 ff fd       	and    si,0xfdff
c0018b15:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018b19:	74 07                	je     c0018b22 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018b1b:	89 d6                	mov    esi,edx
c0018b1d:	66 81 ce 00 02       	or     si,0x200
c0018b22:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018b26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b2b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018b2f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018b37:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018b3a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018b42:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018b45:	5b                   	pop    ebx
c0018b46:	5e                   	pop    esi
c0018b47:	5f                   	pop    edi
c0018b48:	c3                   	ret    

c0018b49 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018b49:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018b4e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018b53:	c1 e0 04             	shl    eax,0x4
c0018b56:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018b59:	c3                   	ret    

c0018b5a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018b5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018b5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018b64:	c1 e0 04             	shl    eax,0x4
c0018b67:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018b6b:	c3                   	ret    

c0018b6c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018b6c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018b71:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018b76:	c1 e0 04             	shl    eax,0x4
c0018b79:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018b7c:	c3                   	ret    

c0018b7d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018b7d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018b82:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018b87:	c1 e0 04             	shl    eax,0x4
c0018b8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b8e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018b91:	c3                   	ret    

c0018b92 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018b92:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018b97:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018b9c:	c1 e0 04             	shl    eax,0x4
c0018b9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ba3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018ba7:	c3                   	ret    

c0018ba8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018ba8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018bb2:	c1 e0 04             	shl    eax,0x4
c0018bb5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018bb9:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018bbc:	c3                   	ret    

c0018bbd <Vm::faultHandler(regs*)>:
c0018bbd:	55                   	push   ebp
c0018bbe:	57                   	push   edi
c0018bbf:	56                   	push   esi
c0018bc0:	53                   	push   ebx
c0018bc1:	83 ec 1c             	sub    esp,0x1c
c0018bc4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018bc8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018bcb:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018bcf:	0f b7 f0             	movzx  esi,ax
c0018bd2:	52                   	push   edx
c0018bd3:	0f b7 c0             	movzx  eax,ax
c0018bd6:	50                   	push   eax
c0018bd7:	e8 97 fd ff ff       	call   c0018973 <Vm::realToLinear(unsigned short, unsigned short)>
c0018bdc:	5a                   	pop    edx
c0018bdd:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018be0:	59                   	pop    ecx
c0018be1:	89 c7                	mov    edi,eax
c0018be3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018be6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018bea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018bf3:	0f b7 c5             	movzx  eax,bp
c0018bf6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bfa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018bfe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018c02:	e8 6c fd ff ff       	call   c0018973 <Vm::realToLinear(unsigned short, unsigned short)>
c0018c07:	5a                   	pop    edx
c0018c08:	59                   	pop    ecx
c0018c09:	b1 06                	mov    cl,0x6
c0018c0b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018c10:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018c15:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018c18:	80 fa 9d             	cmp    dl,0x9d
c0018c1b:	0f 84 1d 02 00 00    	je     c0018e3e <Vm::faultHandler(regs*)+0x281>
c0018c21:	0f 87 8e 00 00 00    	ja     c0018cb5 <Vm::faultHandler(regs*)+0xf8>
c0018c27:	80 fa 66             	cmp    dl,0x66
c0018c2a:	0f 84 89 01 00 00    	je     c0018db9 <Vm::faultHandler(regs*)+0x1fc>
c0018c30:	77 44                	ja     c0018c76 <Vm::faultHandler(regs*)+0xb9>
c0018c32:	80 fa 36             	cmp    dl,0x36
c0018c35:	0f 84 74 01 00 00    	je     c0018daf <Vm::faultHandler(regs*)+0x1f2>
c0018c3b:	77 1a                	ja     c0018c57 <Vm::faultHandler(regs*)+0x9a>
c0018c3d:	80 fa 26             	cmp    dl,0x26
c0018c40:	0f 84 4b 01 00 00    	je     c0018d91 <Vm::faultHandler(regs*)+0x1d4>
c0018c46:	80 fa 2e             	cmp    dl,0x2e
c0018c49:	0f 85 4a 05 00 00    	jne    c0019199 <Vm::faultHandler(regs*)+0x5dc>
c0018c4f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c52:	31 c9                	xor    ecx,ecx
c0018c54:	47                   	inc    edi
c0018c55:	eb be                	jmp    c0018c15 <Vm::faultHandler(regs*)+0x58>
c0018c57:	80 fa 64             	cmp    dl,0x64
c0018c5a:	0f 84 3b 01 00 00    	je     c0018d9b <Vm::faultHandler(regs*)+0x1de>
c0018c60:	0f 87 3f 01 00 00    	ja     c0018da5 <Vm::faultHandler(regs*)+0x1e8>
c0018c66:	80 fa 3e             	cmp    dl,0x3e
c0018c69:	0f 85 2a 05 00 00    	jne    c0019199 <Vm::faultHandler(regs*)+0x5dc>
c0018c6f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018c72:	b1 01                	mov    cl,0x1
c0018c74:	eb de                	jmp    c0018c54 <Vm::faultHandler(regs*)+0x97>
c0018c76:	80 fa 6d             	cmp    dl,0x6d
c0018c79:	0f 84 bf 02 00 00    	je     c0018f3e <Vm::faultHandler(regs*)+0x381>
c0018c7f:	77 17                	ja     c0018c98 <Vm::faultHandler(regs*)+0xdb>
c0018c81:	80 fa 67             	cmp    dl,0x67
c0018c84:	0f 84 3c 01 00 00    	je     c0018dc6 <Vm::faultHandler(regs*)+0x209>
c0018c8a:	80 fa 6c             	cmp    dl,0x6c
c0018c8d:	0f 84 5d 02 00 00    	je     c0018ef0 <Vm::faultHandler(regs*)+0x333>
c0018c93:	e9 01 05 00 00       	jmp    c0019199 <Vm::faultHandler(regs*)+0x5dc>
c0018c98:	80 fa 6f             	cmp    dl,0x6f
c0018c9b:	0f 84 8b 03 00 00    	je     c001902c <Vm::faultHandler(regs*)+0x46f>
c0018ca1:	0f 82 0f 03 00 00    	jb     c0018fb6 <Vm::faultHandler(regs*)+0x3f9>
c0018ca7:	80 fa 9c             	cmp    dl,0x9c
c0018caa:	0f 84 23 01 00 00    	je     c0018dd3 <Vm::faultHandler(regs*)+0x216>
c0018cb0:	e9 e4 04 00 00       	jmp    c0019199 <Vm::faultHandler(regs*)+0x5dc>
c0018cb5:	80 fa ec             	cmp    dl,0xec
c0018cb8:	0f 84 7f 04 00 00    	je     c001913d <Vm::faultHandler(regs*)+0x580>
c0018cbe:	77 7b                	ja     c0018d3b <Vm::faultHandler(regs*)+0x17e>
c0018cc0:	80 fa e4             	cmp    dl,0xe4
c0018cc3:	0f 84 fe 03 00 00    	je     c00190c7 <Vm::faultHandler(regs*)+0x50a>
c0018cc9:	77 53                	ja     c0018d1e <Vm::faultHandler(regs*)+0x161>
c0018ccb:	80 fa cd             	cmp    dl,0xcd
c0018cce:	0f 84 cd 01 00 00    	je     c0018ea1 <Vm::faultHandler(regs*)+0x2e4>
c0018cd4:	80 fa cf             	cmp    dl,0xcf
c0018cd7:	0f 85 bc 04 00 00    	jne    c0019199 <Vm::faultHandler(regs*)+0x5dc>
c0018cdd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018ce0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018ce3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018ce7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018cea:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018cee:	81 ca 00 02 02 00    	or     edx,0x20200
c0018cf4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018cf7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018cfb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018d01:	66 c1 e8 09          	shr    ax,0x9
c0018d05:	83 e0 01             	and    eax,0x1
c0018d08:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018d0b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018d0e:	83 c0 06             	add    eax,0x6
c0018d11:	25 ff ff 00 00       	and    eax,0xffff
c0018d16:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018d19:	e9 77 04 00 00       	jmp    c0019195 <Vm::faultHandler(regs*)+0x5d8>
c0018d1e:	80 fa e6             	cmp    dl,0xe6
c0018d21:	0f 84 ea 03 00 00    	je     c0019111 <Vm::faultHandler(regs*)+0x554>
c0018d27:	0f 82 b6 03 00 00    	jb     c00190e3 <Vm::faultHandler(regs*)+0x526>
c0018d2d:	80 fa e7             	cmp    dl,0xe7
c0018d30:	0f 84 f2 03 00 00    	je     c0019128 <Vm::faultHandler(regs*)+0x56b>
c0018d36:	e9 5e 04 00 00       	jmp    c0019199 <Vm::faultHandler(regs*)+0x5dc>
c0018d3b:	80 fa ef             	cmp    dl,0xef
c0018d3e:	0f 84 3c 04 00 00    	je     c0019180 <Vm::faultHandler(regs*)+0x5c3>
c0018d44:	77 28                	ja     c0018d6e <Vm::faultHandler(regs*)+0x1b1>
c0018d46:	80 fa ed             	cmp    dl,0xed
c0018d49:	0f 84 0a 04 00 00    	je     c0019159 <Vm::faultHandler(regs*)+0x59c>
c0018d4f:	80 fa ee             	cmp    dl,0xee
c0018d52:	0f 85 41 04 00 00    	jne    c0019199 <Vm::faultHandler(regs*)+0x5dc>
c0018d58:	50                   	push   eax
c0018d59:	50                   	push   eax
c0018d5a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018d5e:	50                   	push   eax
c0018d5f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018d63:	50                   	push   eax
c0018d64:	e8 00 fc ff ff       	call   c0018969 <Vm::outbv(unsigned short, unsigned char)>
c0018d69:	e9 0a 04 00 00       	jmp    c0019178 <Vm::faultHandler(regs*)+0x5bb>
c0018d6e:	80 fa fa             	cmp    dl,0xfa
c0018d71:	0f 84 5d 01 00 00    	je     c0018ed4 <Vm::faultHandler(regs*)+0x317>
c0018d77:	80 fa fb             	cmp    dl,0xfb
c0018d7a:	0f 84 62 01 00 00    	je     c0018ee2 <Vm::faultHandler(regs*)+0x325>
c0018d80:	80 fa f3             	cmp    dl,0xf3
c0018d83:	0f 85 10 04 00 00    	jne    c0019199 <Vm::faultHandler(regs*)+0x5dc>
c0018d89:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d8c:	e9 c3 fe ff ff       	jmp    c0018c54 <Vm::faultHandler(regs*)+0x97>
c0018d91:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d94:	b1 02                	mov    cl,0x2
c0018d96:	e9 b9 fe ff ff       	jmp    c0018c54 <Vm::faultHandler(regs*)+0x97>
c0018d9b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d9e:	b1 03                	mov    cl,0x3
c0018da0:	e9 af fe ff ff       	jmp    c0018c54 <Vm::faultHandler(regs*)+0x97>
c0018da5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018da8:	b1 04                	mov    cl,0x4
c0018daa:	e9 a5 fe ff ff       	jmp    c0018c54 <Vm::faultHandler(regs*)+0x97>
c0018daf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018db2:	b1 05                	mov    cl,0x5
c0018db4:	e9 9b fe ff ff       	jmp    c0018c54 <Vm::faultHandler(regs*)+0x97>
c0018db9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018dbc:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018dc1:	e9 8e fe ff ff       	jmp    c0018c54 <Vm::faultHandler(regs*)+0x97>
c0018dc6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018dc9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018dce:	e9 81 fe ff ff       	jmp    c0018c54 <Vm::faultHandler(regs*)+0x97>
c0018dd3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018dd6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018dda:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ddf:	74 30                	je     c0018e11 <Vm::faultHandler(regs*)+0x254>
c0018de1:	83 e9 04             	sub    ecx,0x4
c0018de4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018dea:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018df0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018df3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018df6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018dfc:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018e00:	0f 84 8c 03 00 00    	je     c0019192 <Vm::faultHandler(regs*)+0x5d5>
c0018e06:	80 ce 02             	or     dh,0x2
c0018e09:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018e0c:	e9 81 03 00 00       	jmp    c0019192 <Vm::faultHandler(regs*)+0x5d5>
c0018e11:	83 e9 02             	sub    ecx,0x2
c0018e14:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018e1a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018e1d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018e21:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018e27:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018e2b:	74 05                	je     c0018e32 <Vm::faultHandler(regs*)+0x275>
c0018e2d:	80 ce 02             	or     dh,0x2
c0018e30:	eb 03                	jmp    c0018e35 <Vm::faultHandler(regs*)+0x278>
c0018e32:	80 e6 fd             	and    dh,0xfd
c0018e35:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018e39:	e9 54 03 00 00       	jmp    c0019192 <Vm::faultHandler(regs*)+0x5d5>
c0018e3e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e43:	74 2a                	je     c0018e6f <Vm::faultHandler(regs*)+0x2b2>
c0018e45:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e47:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018e4d:	81 ca 00 02 02 00    	or     edx,0x20200
c0018e53:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018e56:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e58:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018e5e:	c1 e8 09             	shr    eax,0x9
c0018e61:	83 e0 01             	and    eax,0x1
c0018e64:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018e67:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018e6a:	83 c0 04             	add    eax,0x4
c0018e6d:	eb 25                	jmp    c0018e94 <Vm::faultHandler(regs*)+0x2d7>
c0018e6f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018e72:	81 ca 00 02 02 00    	or     edx,0x20200
c0018e78:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018e7e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018e84:	66 c1 e8 09          	shr    ax,0x9
c0018e88:	83 e0 01             	and    eax,0x1
c0018e8b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018e8e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018e91:	83 c0 02             	add    eax,0x2
c0018e94:	25 ff ff 00 00       	and    eax,0xffff
c0018e99:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018e9c:	e9 f1 02 00 00       	jmp    c0019192 <Vm::faultHandler(regs*)+0x5d5>
c0018ea1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018ea5:	3c ff                	cmp    al,0xff
c0018ea7:	75 10                	jne    c0018eb9 <Vm::faultHandler(regs*)+0x2fc>
c0018ea9:	83 ec 0c             	sub    esp,0xc
c0018eac:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018eaf:	e8 8c f9 ff ff       	call   c0018840 <Thr::terminateFromIRQ(int)>
c0018eb4:	e9 c2 02 00 00       	jmp    c001917b <Vm::faultHandler(regs*)+0x5be>
c0018eb9:	83 ec 0c             	sub    esp,0xc
c0018ebc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ec4:	57                   	push   edi
c0018ec5:	50                   	push   eax
c0018ec6:	53                   	push   ebx
c0018ec7:	e8 f3 fb ff ff       	call   c0018abf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018ecc:	83 c4 20             	add    esp,0x20
c0018ecf:	e9 c1 02 00 00       	jmp    c0019195 <Vm::faultHandler(regs*)+0x5d8>
c0018ed4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ed9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018edd:	e9 b0 02 00 00       	jmp    c0019192 <Vm::faultHandler(regs*)+0x5d5>
c0018ee2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ee7:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018eeb:	e9 a2 02 00 00       	jmp    c0019192 <Vm::faultHandler(regs*)+0x5d5>
c0018ef0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018ef5:	74 0d                	je     c0018f04 <Vm::faultHandler(regs*)+0x347>
c0018ef7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018efe:	0f 87 e9 02 00 00    	ja     c00191ed <Vm::faultHandler(regs*)+0x630>
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018f0a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018f0e:	50                   	push   eax
c0018f0f:	e8 4f fa ff ff       	call   c0018963 <Vm::inbv(unsigned short)>
c0018f14:	83 c4 0c             	add    esp,0xc
c0018f17:	0f b6 c0             	movzx  eax,al
c0018f1a:	0f b7 c9             	movzx  ecx,cx
c0018f1d:	50                   	push   eax
c0018f1e:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018f22:	50                   	push   eax
c0018f23:	51                   	push   ecx
c0018f24:	e8 54 fc ff ff       	call   c0018b7d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018f29:	83 c4 10             	add    esp,0x10
c0018f2c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018f2f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018f33:	74 03                	je     c0018f38 <Vm::faultHandler(regs*)+0x37b>
c0018f35:	48                   	dec    eax
c0018f36:	eb 01                	jmp    c0018f39 <Vm::faultHandler(regs*)+0x37c>
c0018f38:	40                   	inc    eax
c0018f39:	0f b7 c0             	movzx  eax,ax
c0018f3c:	eb 70                	jmp    c0018fae <Vm::faultHandler(regs*)+0x3f1>
c0018f3e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018f41:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018f44:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018f49:	74 0c                	je     c0018f57 <Vm::faultHandler(regs*)+0x39a>
c0018f4b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018f51:	0f 87 96 02 00 00    	ja     c00191ed <Vm::faultHandler(regs*)+0x630>
c0018f57:	0f b7 c9             	movzx  ecx,cx
c0018f5a:	0f b7 f6             	movzx  esi,si
c0018f5d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018f60:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018f65:	74 20                	je     c0018f87 <Vm::faultHandler(regs*)+0x3ca>
c0018f67:	ed                   	in     eax,dx
c0018f68:	55                   	push   ebp
c0018f69:	50                   	push   eax
c0018f6a:	51                   	push   ecx
c0018f6b:	56                   	push   esi
c0018f6c:	e8 37 fc ff ff       	call   c0018ba8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018f71:	83 c4 10             	add    esp,0x10
c0018f74:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018f77:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018f7b:	74 05                	je     c0018f82 <Vm::faultHandler(regs*)+0x3c5>
c0018f7d:	83 e8 04             	sub    eax,0x4
c0018f80:	eb 27                	jmp    c0018fa9 <Vm::faultHandler(regs*)+0x3ec>
c0018f82:	83 c0 04             	add    eax,0x4
c0018f85:	eb 22                	jmp    c0018fa9 <Vm::faultHandler(regs*)+0x3ec>
c0018f87:	66 ed                	in     ax,dx
c0018f89:	0f b7 c0             	movzx  eax,ax
c0018f8c:	57                   	push   edi
c0018f8d:	50                   	push   eax
c0018f8e:	51                   	push   ecx
c0018f8f:	56                   	push   esi
c0018f90:	e8 fd fb ff ff       	call   c0018b92 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018f95:	83 c4 10             	add    esp,0x10
c0018f98:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018f9b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018f9f:	74 05                	je     c0018fa6 <Vm::faultHandler(regs*)+0x3e9>
c0018fa1:	83 e8 02             	sub    eax,0x2
c0018fa4:	eb 03                	jmp    c0018fa9 <Vm::faultHandler(regs*)+0x3ec>
c0018fa6:	83 c0 02             	add    eax,0x2
c0018fa9:	25 ff ff 00 00       	and    eax,0xffff
c0018fae:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018fb1:	e9 dc 01 00 00       	jmp    c0019192 <Vm::faultHandler(regs*)+0x5d5>
c0018fb6:	49                   	dec    ecx
c0018fb7:	80 f9 05             	cmp    cl,0x5
c0018fba:	77 24                	ja     c0018fe0 <Vm::faultHandler(regs*)+0x423>
c0018fbc:	0f b6 c9             	movzx  ecx,cl
c0018fbf:	ff 24 8d fc 20 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffddf04]
c0018fc6:	0f b7 f5             	movzx  esi,bp
c0018fc9:	eb 15                	jmp    c0018fe0 <Vm::faultHandler(regs*)+0x423>
c0018fcb:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018fcf:	eb 0f                	jmp    c0018fe0 <Vm::faultHandler(regs*)+0x423>
c0018fd1:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018fd5:	eb 09                	jmp    c0018fe0 <Vm::faultHandler(regs*)+0x423>
c0018fd7:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018fdb:	eb 03                	jmp    c0018fe0 <Vm::faultHandler(regs*)+0x423>
c0018fdd:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018fe0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018fe3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018fe8:	74 0b                	je     c0018ff5 <Vm::faultHandler(regs*)+0x438>
c0018fea:	3d ff ff 00 00       	cmp    eax,0xffff
c0018fef:	0f 87 f8 01 00 00    	ja     c00191ed <Vm::faultHandler(regs*)+0x630>
c0018ff5:	0f b7 c0             	movzx  eax,ax
c0018ff8:	52                   	push   edx
c0018ff9:	52                   	push   edx
c0018ffa:	50                   	push   eax
c0018ffb:	56                   	push   esi
c0018ffc:	e8 48 fb ff ff       	call   c0018b49 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019001:	59                   	pop    ecx
c0019002:	0f b6 c0             	movzx  eax,al
c0019005:	5e                   	pop    esi
c0019006:	50                   	push   eax
c0019007:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001900b:	50                   	push   eax
c001900c:	e8 58 f9 ff ff       	call   c0018969 <Vm::outbv(unsigned short, unsigned char)>
c0019011:	83 c4 10             	add    esp,0x10
c0019014:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019017:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001901b:	74 03                	je     c0019020 <Vm::faultHandler(regs*)+0x463>
c001901d:	48                   	dec    eax
c001901e:	eb 01                	jmp    c0019021 <Vm::faultHandler(regs*)+0x464>
c0019020:	40                   	inc    eax
c0019021:	0f b7 c0             	movzx  eax,ax
c0019024:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019027:	e9 66 01 00 00       	jmp    c0019192 <Vm::faultHandler(regs*)+0x5d5>
c001902c:	49                   	dec    ecx
c001902d:	80 f9 05             	cmp    cl,0x5
c0019030:	77 1f                	ja     c0019051 <Vm::faultHandler(regs*)+0x494>
c0019032:	0f b6 c9             	movzx  ecx,cl
c0019035:	ff 24 8d 14 21 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffddeec]
c001903c:	89 ee                	mov    esi,ebp
c001903e:	eb 11                	jmp    c0019051 <Vm::faultHandler(regs*)+0x494>
c0019040:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019043:	eb 0c                	jmp    c0019051 <Vm::faultHandler(regs*)+0x494>
c0019045:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019048:	eb 07                	jmp    c0019051 <Vm::faultHandler(regs*)+0x494>
c001904a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001904d:	eb 02                	jmp    c0019051 <Vm::faultHandler(regs*)+0x494>
c001904f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019051:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019054:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019059:	74 0c                	je     c0019067 <Vm::faultHandler(regs*)+0x4aa>
c001905b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019061:	0f 87 86 01 00 00    	ja     c00191ed <Vm::faultHandler(regs*)+0x630>
c0019067:	0f b7 d6             	movzx  edx,si
c001906a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001906d:	0f b7 c1             	movzx  eax,cx
c0019070:	81 e7 00 04 00 00    	and    edi,0x400
c0019076:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019079:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001907e:	74 1d                	je     c001909d <Vm::faultHandler(regs*)+0x4e0>
c0019080:	55                   	push   ebp
c0019081:	55                   	push   ebp
c0019082:	50                   	push   eax
c0019083:	52                   	push   edx
c0019084:	e8 e3 fa ff ff       	call   c0018b6c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019089:	83 c4 10             	add    esp,0x10
c001908c:	89 f2                	mov    edx,esi
c001908e:	ef                   	out    dx,eax
c001908f:	85 ff                	test   edi,edi
c0019091:	74 05                	je     c0019098 <Vm::faultHandler(regs*)+0x4db>
c0019093:	83 e9 04             	sub    ecx,0x4
c0019096:	eb 21                	jmp    c00190b9 <Vm::faultHandler(regs*)+0x4fc>
c0019098:	83 c1 04             	add    ecx,0x4
c001909b:	eb 1c                	jmp    c00190b9 <Vm::faultHandler(regs*)+0x4fc>
c001909d:	55                   	push   ebp
c001909e:	55                   	push   ebp
c001909f:	50                   	push   eax
c00190a0:	52                   	push   edx
c00190a1:	e8 b4 fa ff ff       	call   c0018b5a <Vm::readWordFromReal(unsigned short, unsigned short)>
c00190a6:	83 c4 10             	add    esp,0x10
c00190a9:	89 f2                	mov    edx,esi
c00190ab:	66 ef                	out    dx,ax
c00190ad:	85 ff                	test   edi,edi
c00190af:	74 05                	je     c00190b6 <Vm::faultHandler(regs*)+0x4f9>
c00190b1:	83 e9 02             	sub    ecx,0x2
c00190b4:	eb 03                	jmp    c00190b9 <Vm::faultHandler(regs*)+0x4fc>
c00190b6:	83 c1 02             	add    ecx,0x2
c00190b9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00190bf:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00190c2:	e9 cb 00 00 00       	jmp    c0019192 <Vm::faultHandler(regs*)+0x5d5>
c00190c7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00190ce:	83 ec 0c             	sub    esp,0xc
c00190d1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00190d5:	50                   	push   eax
c00190d6:	e8 88 f8 ff ff       	call   c0018963 <Vm::inbv(unsigned short)>
c00190db:	0f b6 c0             	movzx  eax,al
c00190de:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00190e1:	eb 3f                	jmp    c0019122 <Vm::faultHandler(regs*)+0x565>
c00190e3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190e8:	74 07                	je     c00190f1 <Vm::faultHandler(regs*)+0x534>
c00190ea:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00190ee:	ed                   	in     eax,dx
c00190ef:	eb 14                	jmp    c0019105 <Vm::faultHandler(regs*)+0x548>
c00190f1:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c00190f4:	66 31 c9             	xor    cx,cx
c00190f7:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00190fa:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00190fe:	66 ed                	in     ax,dx
c0019100:	0f b7 c0             	movzx  eax,ax
c0019103:	09 c8                	or     eax,ecx
c0019105:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019108:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001910c:	e9 84 00 00 00       	jmp    c0019195 <Vm::faultHandler(regs*)+0x5d8>
c0019111:	52                   	push   edx
c0019112:	52                   	push   edx
c0019113:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019117:	50                   	push   eax
c0019118:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001911c:	50                   	push   eax
c001911d:	e8 47 f8 ff ff       	call   c0018969 <Vm::outbv(unsigned short, unsigned char)>
c0019122:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019126:	eb 53                	jmp    c001917b <Vm::faultHandler(regs*)+0x5be>
c0019128:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001912b:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001912f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019134:	74 03                	je     c0019139 <Vm::faultHandler(regs*)+0x57c>
c0019136:	ef                   	out    dx,eax
c0019137:	eb cf                	jmp    c0019108 <Vm::faultHandler(regs*)+0x54b>
c0019139:	66 ef                	out    dx,ax
c001913b:	eb cb                	jmp    c0019108 <Vm::faultHandler(regs*)+0x54b>
c001913d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019144:	83 ec 0c             	sub    esp,0xc
c0019147:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001914b:	50                   	push   eax
c001914c:	e8 12 f8 ff ff       	call   c0018963 <Vm::inbv(unsigned short)>
c0019151:	0f b6 c0             	movzx  eax,al
c0019154:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019157:	eb 1f                	jmp    c0019178 <Vm::faultHandler(regs*)+0x5bb>
c0019159:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001915c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019161:	74 03                	je     c0019166 <Vm::faultHandler(regs*)+0x5a9>
c0019163:	ed                   	in     eax,dx
c0019164:	eb 0d                	jmp    c0019173 <Vm::faultHandler(regs*)+0x5b6>
c0019166:	66 ed                	in     ax,dx
c0019168:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001916b:	0f b7 c0             	movzx  eax,ax
c001916e:	66 31 d2             	xor    dx,dx
c0019171:	09 d0                	or     eax,edx
c0019173:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019176:	eb 1a                	jmp    c0019192 <Vm::faultHandler(regs*)+0x5d5>
c0019178:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001917b:	83 c4 10             	add    esp,0x10
c001917e:	eb 15                	jmp    c0019195 <Vm::faultHandler(regs*)+0x5d8>
c0019180:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019183:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019186:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001918b:	74 03                	je     c0019190 <Vm::faultHandler(regs*)+0x5d3>
c001918d:	ef                   	out    dx,eax
c001918e:	eb 02                	jmp    c0019192 <Vm::faultHandler(regs*)+0x5d5>
c0019190:	66 ef                	out    dx,ax
c0019192:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019195:	b0 01                	mov    al,0x1
c0019197:	eb 56                	jmp    c00191ef <Vm::faultHandler(regs*)+0x632>
c0019199:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001919d:	50                   	push   eax
c001919e:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c00191a2:	50                   	push   eax
c00191a3:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c00191a7:	50                   	push   eax
c00191a8:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c00191ac:	50                   	push   eax
c00191ad:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00191b1:	50                   	push   eax
c00191b2:	52                   	push   edx
c00191b3:	52                   	push   edx
c00191b4:	68 ce 20 02 c0       	push   0xc00220ce
c00191b9:	e8 e5 5d ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00191be:	83 c4 20             	add    esp,0x20
c00191c1:	83 ec 0c             	sub    esp,0xc
c00191c4:	6a 60                	push   0x60
c00191c6:	e8 98 f7 ff ff       	call   c0018963 <Vm::inbv(unsigned short)>
c00191cb:	83 c4 10             	add    esp,0x10
c00191ce:	3c 1c                	cmp    al,0x1c
c00191d0:	74 04                	je     c00191d6 <Vm::faultHandler(regs*)+0x619>
c00191d2:	3c 5a                	cmp    al,0x5a
c00191d4:	75 eb                	jne    c00191c1 <Vm::faultHandler(regs*)+0x604>
c00191d6:	3c 5a                	cmp    al,0x5a
c00191d8:	74 04                	je     c00191de <Vm::faultHandler(regs*)+0x621>
c00191da:	3c 1c                	cmp    al,0x1c
c00191dc:	75 0f                	jne    c00191ed <Vm::faultHandler(regs*)+0x630>
c00191de:	83 ec 0c             	sub    esp,0xc
c00191e1:	6a 60                	push   0x60
c00191e3:	e8 7b f7 ff ff       	call   c0018963 <Vm::inbv(unsigned short)>
c00191e8:	83 c4 10             	add    esp,0x10
c00191eb:	eb e9                	jmp    c00191d6 <Vm::faultHandler(regs*)+0x619>
c00191ed:	31 c0                	xor    eax,eax
c00191ef:	83 c4 1c             	add    esp,0x1c
c00191f2:	5b                   	pop    ebx
c00191f3:	5e                   	pop    esi
c00191f4:	5f                   	pop    edi
c00191f5:	5d                   	pop    ebp
c00191f6:	c3                   	ret    
c00191f7:	90                   	nop

c00191f8 <FAT::getName()>:
c00191f8:	b8 2c 21 02 c0       	mov    eax,0xc002212c
c00191fd:	c3                   	ret    

c00191fe <FAT::tell(void*, unsigned long long*)>:
c00191fe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019203:	75 06                	jne    c001920b <FAT::tell(void*, unsigned long long*)+0xd>
c0019205:	b8 04 00 00 00       	mov    eax,0x4
c001920a:	c3                   	ret    
c001920b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019210:	75 06                	jne    c0019218 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019212:	b8 04 00 00 00       	mov    eax,0x4
c0019217:	c3                   	ret    
c0019218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001921c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001921f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019226:	89 01                	mov    DWORD PTR [ecx],eax
c0019228:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001922b:	b8 00 00 00 00       	mov    eax,0x0
c0019230:	c3                   	ret    
c0019231:	90                   	nop

c0019232 <FAT::stat(void*, unsigned long long*)>:
c0019232:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019237:	75 06                	jne    c001923f <FAT::stat(void*, unsigned long long*)+0xd>
c0019239:	b8 04 00 00 00       	mov    eax,0x4
c001923e:	c3                   	ret    
c001923f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019244:	75 06                	jne    c001924c <FAT::stat(void*, unsigned long long*)+0x1a>
c0019246:	b8 04 00 00 00       	mov    eax,0x4
c001924b:	c3                   	ret    
c001924c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019250:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019253:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019256:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001925a:	89 01                	mov    DWORD PTR [ecx],eax
c001925c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001925f:	b8 00 00 00 00       	mov    eax,0x0
c0019264:	c3                   	ret    
c0019265:	90                   	nop

c0019266 <FAT::~FAT()>:
c0019266:	83 ec 0c             	sub    esp,0xc
c0019269:	ba b0 21 02 c0       	mov    edx,0xc00221b0
c001926e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019272:	89 10                	mov    DWORD PTR [eax],edx
c0019274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019278:	83 ec 0c             	sub    esp,0xc
c001927b:	50                   	push   eax
c001927c:	e8 4b 60 ff ff       	call   c000f2cc <Filesystem::~Filesystem()>
c0019281:	83 c4 10             	add    esp,0x10
c0019284:	90                   	nop
c0019285:	83 c4 0c             	add    esp,0xc
c0019288:	c3                   	ret    
c0019289:	90                   	nop

c001928a <FAT::~FAT()>:
c001928a:	83 ec 0c             	sub    esp,0xc
c001928d:	83 ec 0c             	sub    esp,0xc
c0019290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019294:	e8 cd ff ff ff       	call   c0019266 <FAT::~FAT()>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	83 ec 08             	sub    esp,0x8
c001929f:	6a 08                	push   0x8
c00192a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192a5:	e8 19 5c ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c00192aa:	83 c4 10             	add    esp,0x10
c00192ad:	83 c4 0c             	add    esp,0xc
c00192b0:	c3                   	ret    
c00192b1:	90                   	nop

c00192b2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00192b2:	83 ec 1c             	sub    esp,0x1c
c00192b5:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00192bc:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00192c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00192c5:	8b 04 85 e0 4a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb520]
c00192cc:	83 f8 ff             	cmp    eax,0xffffffff
c00192cf:	75 34                	jne    c0019305 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00192d1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00192d5:	88 c2                	mov    dl,al
c00192d7:	a1 c0 4a 02 c0       	mov    eax,ds:0xc0024ac0
c00192dc:	01 d0                	add    eax,edx
c00192de:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00192e2:	8b 15 c0 4a 02 c0    	mov    edx,DWORD PTR ds:0xc0024ac0
c00192e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00192ec:	89 14 85 e0 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb520],edx
c00192f3:	a1 c0 4a 02 c0       	mov    eax,ds:0xc0024ac0
c00192f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00192fc:	89 14 85 60 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb4a0],edx
c0019303:	eb 17                	jmp    c001931c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019305:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019309:	88 c2                	mov    dl,al
c001930b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001930f:	8b 04 85 e0 4a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb520]
c0019316:	01 d0                	add    eax,edx
c0019318:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001931c:	83 ec 04             	sub    esp,0x4
c001931f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019327:	8d 44 24 15          	lea    eax,[esp+0x15]
c001932b:	50                   	push   eax
c001932c:	e8 34 d7 fe ff       	call   c0006a65 <f_getlabel>
c0019331:	83 c4 10             	add    esp,0x10
c0019334:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019338:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001933d:	75 07                	jne    c0019346 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001933f:	b8 00 00 00 00       	mov    eax,0x0
c0019344:	eb 05                	jmp    c001934b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019346:	b8 01 00 00 00       	mov    eax,0x1
c001934b:	83 c4 1c             	add    esp,0x1c
c001934e:	c3                   	ret    
c001934f:	90                   	nop

c0019350 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019350:	57                   	push   edi
c0019351:	83 ec 58             	sub    esp,0x58
c0019354:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001935c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019360:	b9 0f 00 00 00       	mov    ecx,0xf
c0019365:	b8 00 00 00 00       	mov    eax,0x0
c001936a:	fc                   	cld    
c001936b:	89 d7                	mov    edi,edx
c001936d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001936f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019373:	8b 04 85 e0 4a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb520]
c001937a:	83 f8 ff             	cmp    eax,0xffffffff
c001937d:	75 34                	jne    c00193b3 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001937f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019383:	88 c2                	mov    dl,al
c0019385:	a1 c0 4a 02 c0       	mov    eax,ds:0xc0024ac0
c001938a:	01 d0                	add    eax,edx
c001938c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019390:	8b 15 c0 4a 02 c0    	mov    edx,DWORD PTR ds:0xc0024ac0
c0019396:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001939a:	89 14 85 e0 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb520],edx
c00193a1:	a1 c0 4a 02 c0       	mov    eax,ds:0xc0024ac0
c00193a6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00193aa:	89 14 85 60 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb4a0],edx
c00193b1:	eb 17                	jmp    c00193ca <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00193b3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00193b7:	88 c2                	mov    dl,al
c00193b9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00193bd:	8b 04 85 e0 4a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb520]
c00193c4:	01 d0                	add    eax,edx
c00193c6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00193ca:	83 ec 08             	sub    esp,0x8
c00193cd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00193d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00193d5:	50                   	push   eax
c00193d6:	e8 83 73 fe ff       	call   c000075e <strcat>
c00193db:	83 c4 10             	add    esp,0x10
c00193de:	83 ec 0c             	sub    esp,0xc
c00193e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00193e5:	50                   	push   eax
c00193e6:	e8 68 d8 fe ff       	call   c0006c53 <f_setlabel>
c00193eb:	83 c4 10             	add    esp,0x10
c00193ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00193f2:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00193f7:	75 07                	jne    c0019400 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00193f9:	b8 00 00 00 00       	mov    eax,0x0
c00193fe:	eb 05                	jmp    c0019405 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019400:	b8 01 00 00 00       	mov    eax,0x1
c0019405:	83 c4 58             	add    esp,0x58
c0019408:	5f                   	pop    edi
c0019409:	c3                   	ret    

c001940a <FAT::format(LogicalDisk*, int, char const*, int)>:
c001940a:	83 ec 2c             	sub    esp,0x2c
c001940d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019415:	83 ec 08             	sub    esp,0x8
c0019418:	68 50 21 02 c0       	push   0xc0022150
c001941d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019421:	e8 d2 72 fe ff       	call   c00006f8 <strcmp>
c0019426:	83 c4 10             	add    esp,0x10
c0019429:	85 c0                	test   eax,eax
c001942b:	0f 94 c0             	sete   al
c001942e:	84 c0                	test   al,al
c0019430:	74 0d                	je     c001943f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019432:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001943a:	e9 a6 00 00 00       	jmp    c00194e5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001943f:	83 ec 08             	sub    esp,0x8
c0019442:	68 42 21 02 c0       	push   0xc0022142
c0019447:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001944b:	e8 a8 72 fe ff       	call   c00006f8 <strcmp>
c0019450:	83 c4 10             	add    esp,0x10
c0019453:	85 c0                	test   eax,eax
c0019455:	0f 94 c0             	sete   al
c0019458:	84 c0                	test   al,al
c001945a:	74 0a                	je     c0019466 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001945c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019464:	eb 7f                	jmp    c00194e5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019466:	83 ec 08             	sub    esp,0x8
c0019469:	68 48 21 02 c0       	push   0xc0022148
c001946e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019472:	e8 81 72 fe ff       	call   c00006f8 <strcmp>
c0019477:	83 c4 10             	add    esp,0x10
c001947a:	85 c0                	test   eax,eax
c001947c:	0f 94 c0             	sete   al
c001947f:	84 c0                	test   al,al
c0019481:	74 0a                	je     c001948d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019483:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001948b:	eb 58                	jmp    c00194e5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001948d:	83 ec 08             	sub    esp,0x8
c0019490:	68 4c f7 01 c0       	push   0xc001f74c
c0019495:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019499:	e8 5a 72 fe ff       	call   c00006f8 <strcmp>
c001949e:	83 c4 10             	add    esp,0x10
c00194a1:	85 c0                	test   eax,eax
c00194a3:	0f 94 c0             	sete   al
c00194a6:	84 c0                	test   al,al
c00194a8:	74 0a                	je     c00194b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00194aa:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00194b2:	eb 31                	jmp    c00194e5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194b4:	83 ec 08             	sub    esp,0x8
c00194b7:	68 4e 21 02 c0       	push   0xc002214e
c00194bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194c0:	e8 33 72 fe ff       	call   c00006f8 <strcmp>
c00194c5:	83 c4 10             	add    esp,0x10
c00194c8:	85 c0                	test   eax,eax
c00194ca:	0f 94 c0             	sete   al
c00194cd:	84 c0                	test   al,al
c00194cf:	74 0a                	je     c00194db <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00194d1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00194d9:	eb 0a                	jmp    c00194e5 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194db:	b8 08 00 00 00       	mov    eax,0x8
c00194e0:	e9 04 01 00 00       	jmp    c00195e9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00194e5:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00194ec:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00194f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194f5:	8b 04 85 e0 4a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb520]
c00194fc:	83 f8 ff             	cmp    eax,0xffffffff
c00194ff:	75 34                	jne    c0019535 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019501:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019505:	88 c2                	mov    dl,al
c0019507:	a1 c0 4a 02 c0       	mov    eax,ds:0xc0024ac0
c001950c:	01 d0                	add    eax,edx
c001950e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019512:	8b 15 c0 4a 02 c0    	mov    edx,DWORD PTR ds:0xc0024ac0
c0019518:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001951c:	89 14 85 e0 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb520],edx
c0019523:	a1 c0 4a 02 c0       	mov    eax,ds:0xc0024ac0
c0019528:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001952c:	89 14 85 60 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb4a0],edx
c0019533:	eb 17                	jmp    c001954c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019535:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019539:	88 c2                	mov    dl,al
c001953b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001953f:	8b 04 85 e0 4a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb520]
c0019546:	01 d0                	add    eax,edx
c0019548:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001954c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019550:	88 04 24             	mov    BYTE PTR [esp],al
c0019553:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019557:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001955b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019563:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019568:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019570:	83 ec 0c             	sub    esp,0xc
c0019573:	68 00 20 00 00       	push   0x2000
c0019578:	e8 a1 26 ff ff       	call   c000bc1e <malloc>
c001957d:	83 c4 10             	add    esp,0x10
c0019580:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019584:	68 00 20 00 00       	push   0x2000
c0019589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001958d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019591:	50                   	push   eax
c0019592:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019596:	50                   	push   eax
c0019597:	e8 02 db fe ff       	call   c000709e <f_mkfs>
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195a8:	75 07                	jne    c00195b1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00195aa:	b8 00 00 00 00       	mov    eax,0x0
c00195af:	eb 38                	jmp    c00195e9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00195b1:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00195b6:	75 17                	jne    c00195cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00195b8:	83 ec 0c             	sub    esp,0xc
c00195bb:	68 80 21 02 c0       	push   0xc0022180
c00195c0:	e8 de 59 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00195c5:	83 c4 10             	add    esp,0x10
c00195c8:	b8 09 00 00 00       	mov    eax,0x9
c00195cd:	eb 1a                	jmp    c00195e9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00195cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195d3:	83 ec 08             	sub    esp,0x8
c00195d6:	50                   	push   eax
c00195d7:	68 54 21 02 c0       	push   0xc0022154
c00195dc:	e8 c2 59 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c00195e1:	83 c4 10             	add    esp,0x10
c00195e4:	b8 01 00 00 00       	mov    eax,0x1
c00195e9:	83 c4 2c             	add    esp,0x2c
c00195ec:	c3                   	ret    
c00195ed:	90                   	nop

c00195ee <FAT::tryMount(LogicalDisk*, int)>:
c00195ee:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00195f4:	a1 c0 4a 02 c0       	mov    eax,ds:0xc0024ac0
c00195f9:	83 f8 14             	cmp    eax,0x14
c00195fc:	75 17                	jne    c0019615 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00195fe:	83 ec 0c             	sub    esp,0xc
c0019601:	68 66 21 02 c0       	push   0xc0022166
c0019606:	e8 2d b6 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001960b:	83 c4 10             	add    esp,0x10
c001960e:	b0 00                	mov    al,0x0
c0019610:	e9 d7 01 00 00       	jmp    c00197ec <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019615:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001961c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019622:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019628:	3d 00 02 00 00       	cmp    eax,0x200
c001962d:	74 07                	je     c0019636 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001962f:	b0 00                	mov    al,0x0
c0019631:	e9 b6 01 00 00       	jmp    c00197ec <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019636:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001963e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019645:	8b 04 85 e0 4a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb520]
c001964c:	83 f8 ff             	cmp    eax,0xffffffff
c001964f:	74 07                	je     c0019658 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019651:	b0 01                	mov    al,0x1
c0019653:	e9 94 01 00 00       	jmp    c00197ec <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019658:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019662:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001966a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019671:	88 c2                	mov    dl,al
c0019673:	a1 c0 4a 02 c0       	mov    eax,ds:0xc0024ac0
c0019678:	01 d0                	add    eax,edx
c001967a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019681:	8b 15 c0 4a 02 c0    	mov    edx,DWORD PTR ds:0xc0024ac0
c0019687:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001968e:	89 14 85 e0 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb520],edx
c0019695:	a1 c0 4a 02 c0       	mov    eax,ds:0xc0024ac0
c001969a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00196a1:	89 14 85 60 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb4a0],edx
c00196a8:	83 ec 0c             	sub    esp,0xc
c00196ab:	68 54 02 00 00       	push   0x254
c00196b0:	e8 69 25 ff ff       	call   c000bc1e <malloc>
c00196b5:	83 c4 10             	add    esp,0x10
c00196b8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00196bf:	83 ec 04             	sub    esp,0x4
c00196c2:	6a 00                	push   0x0
c00196c4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00196cb:	50                   	push   eax
c00196cc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00196d3:	e8 84 b5 fe ff       	call   c0004c5c <f_mount>
c00196d8:	83 c4 10             	add    esp,0x10
c00196db:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00196e2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00196ea:	74 19                	je     c0019705 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00196f6:	e8 43 25 ff ff       	call   c000bc3e <rfree>
c00196fb:	83 c4 10             	add    esp,0x10
c00196fe:	b0 00                	mov    al,0x0
c0019700:	e9 e7 00 00 00       	jmp    c00197ec <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019705:	83 ec 04             	sub    esp,0x4
c0019708:	68 00 01 00 00       	push   0x100
c001970d:	6a 00                	push   0x0
c001970f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019716:	50                   	push   eax
c0019717:	e8 ec 6e fe ff       	call   c0000608 <memset>
c001971c:	83 c4 10             	add    esp,0x10
c001971f:	83 ec 08             	sub    esp,0x8
c0019722:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019729:	50                   	push   eax
c001972a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019731:	50                   	push   eax
c0019732:	e8 27 70 fe ff       	call   c000075e <strcat>
c0019737:	83 c4 10             	add    esp,0x10
c001973a:	83 ec 08             	sub    esp,0x8
c001973d:	68 74 21 02 c0       	push   0xc0022174
c0019742:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019749:	50                   	push   eax
c001974a:	e8 0f 70 fe ff       	call   c000075e <strcat>
c001974f:	83 c4 10             	add    esp,0x10
c0019752:	83 ec 04             	sub    esp,0x4
c0019755:	6a 01                	push   0x1
c0019757:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001975e:	50                   	push   eax
c001975f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019763:	50                   	push   eax
c0019764:	e8 55 b5 fe ff       	call   c0004cbe <f_open>
c0019769:	83 c4 10             	add    esp,0x10
c001976c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019773:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001977a:	85 c0                	test   eax,eax
c001977c:	74 0a                	je     c0019788 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001977e:	78 2d                	js     c00197ad <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019780:	83 e8 04             	sub    eax,0x4
c0019783:	83 f8 01             	cmp    eax,0x1
c0019786:	77 25                	ja     c00197ad <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019788:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019790:	83 ec 0c             	sub    esp,0xc
c0019793:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019797:	50                   	push   eax
c0019798:	e8 73 c0 fe ff       	call   c0005810 <f_close>
c001979d:	83 c4 10             	add    esp,0x10
c00197a0:	90                   	nop
c00197a1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00197a9:	74 3a                	je     c00197e5 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00197ab:	eb 2d                	jmp    c00197da <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00197ad:	83 ec 0c             	sub    esp,0xc
c00197b0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00197b7:	e8 82 24 ff ff       	call   c000bc3e <rfree>
c00197bc:	83 c4 10             	add    esp,0x10
c00197bf:	83 ec 04             	sub    esp,0x4
c00197c2:	6a 00                	push   0x0
c00197c4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00197cb:	50                   	push   eax
c00197cc:	6a 00                	push   0x0
c00197ce:	e8 89 b4 fe ff       	call   c0004c5c <f_mount>
c00197d3:	83 c4 10             	add    esp,0x10
c00197d6:	b0 00                	mov    al,0x0
c00197d8:	eb 12                	jmp    c00197ec <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00197da:	a1 c0 4a 02 c0       	mov    eax,ds:0xc0024ac0
c00197df:	40                   	inc    eax
c00197e0:	a3 c0 4a 02 c0       	mov    ds:0xc0024ac0,eax
c00197e5:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00197ec:	81 c4 6c 03 00 00    	add    esp,0x36c
c00197f2:	c3                   	ret    
c00197f3:	90                   	nop

c00197f4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00197f4:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00197fa:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019802:	74 0a                	je     c001980e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0019804:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001980c:	75 0a                	jne    c0019818 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001980e:	b8 04 00 00 00       	mov    eax,0x4
c0019813:	e9 db 00 00 00       	jmp    c00198f3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019818:	83 ec 08             	sub    esp,0x8
c001981b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019822:	50                   	push   eax
c0019823:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001982a:	e8 eb c5 fe ff       	call   c0005e1a <f_readdir>
c001982f:	83 c4 10             	add    esp,0x10
c0019832:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019839:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001983f:	83 ec 0c             	sub    esp,0xc
c0019842:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019849:	83 c0 1a             	add    eax,0x1a
c001984c:	50                   	push   eax
c001984d:	e8 d3 6d fe ff       	call   c0000625 <strlen>
c0019852:	83 c4 10             	add    esp,0x10
c0019855:	ba 00 00 00 00       	mov    edx,0x0
c001985a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001985e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019862:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019869:	0f b6 c0             	movzx  eax,al
c001986c:	83 e0 10             	and    eax,0x10
c001986f:	74 07                	je     c0019878 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0019871:	b8 02 00 00 00       	mov    eax,0x2
c0019876:	eb 05                	jmp    c001987d <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0019878:	b8 01 00 00 00       	mov    eax,0x1
c001987d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019881:	83 ec 08             	sub    esp,0x8
c0019884:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001988b:	83 c0 1a             	add    eax,0x1a
c001988e:	50                   	push   eax
c001988f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019893:	83 c0 10             	add    eax,0x10
c0019896:	50                   	push   eax
c0019897:	e8 0b 6e fe ff       	call   c00006a7 <strcpy>
c001989c:	83 c4 10             	add    esp,0x10
c001989f:	83 ec 04             	sub    esp,0x4
c00198a2:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00198a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198ad:	50                   	push   eax
c00198ae:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00198b5:	e8 18 6d fe ff       	call   c00005d2 <memcpy>
c00198ba:	83 c4 10             	add    esp,0x10
c00198bd:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00198c4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00198ca:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00198d1:	84 c0                	test   al,al
c00198d3:	75 07                	jne    c00198dc <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00198d5:	b8 07 00 00 00       	mov    eax,0x7
c00198da:	eb 17                	jmp    c00198f3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00198dc:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00198e3:	85 c0                	test   eax,eax
c00198e5:	75 07                	jne    c00198ee <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00198e7:	b8 00 00 00 00       	mov    eax,0x0
c00198ec:	eb 05                	jmp    c00198f3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00198ee:	b8 01 00 00 00       	mov    eax,0x1
c00198f3:	81 c4 3c 02 00 00    	add    esp,0x23c
c00198f9:	c3                   	ret    

c00198fa <FAT::read(void*, unsigned long, void*, int*)>:
c00198fa:	83 ec 1c             	sub    esp,0x1c
c00198fd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019902:	74 07                	je     c001990b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0019904:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019909:	75 07                	jne    c0019912 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001990b:	b8 04 00 00 00       	mov    eax,0x4
c0019910:	eb 3d                	jmp    c001994f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019912:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019916:	50                   	push   eax
c0019917:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001991b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001991f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019923:	e8 d2 b7 fe ff       	call   c00050fa <f_read>
c0019928:	83 c4 10             	add    esp,0x10
c001992b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001992f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019933:	89 c2                	mov    edx,eax
c0019935:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019939:	89 10                	mov    DWORD PTR [eax],edx
c001993b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001993f:	85 c0                	test   eax,eax
c0019941:	75 07                	jne    c001994a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019943:	b8 00 00 00 00       	mov    eax,0x0
c0019948:	eb 05                	jmp    c001994f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001994a:	b8 01 00 00 00       	mov    eax,0x1
c001994f:	83 c4 1c             	add    esp,0x1c
c0019952:	c3                   	ret    
c0019953:	90                   	nop

c0019954 <FAT::write(void*, unsigned long, void*, int*)>:
c0019954:	83 ec 1c             	sub    esp,0x1c
c0019957:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001995c:	74 07                	je     c0019965 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001995e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019963:	75 07                	jne    c001996c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019965:	b8 04 00 00 00       	mov    eax,0x4
c001996a:	eb 3d                	jmp    c00199a9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001996c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019970:	50                   	push   eax
c0019971:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019975:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019979:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001997d:	e8 f8 b9 fe ff       	call   c000537a <f_write>
c0019982:	83 c4 10             	add    esp,0x10
c0019985:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019989:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001998d:	89 c2                	mov    edx,eax
c001998f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019993:	89 10                	mov    DWORD PTR [eax],edx
c0019995:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019999:	85 c0                	test   eax,eax
c001999b:	75 07                	jne    c00199a4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001999d:	b8 00 00 00 00       	mov    eax,0x0
c00199a2:	eb 05                	jmp    c00199a9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00199a4:	b8 01 00 00 00       	mov    eax,0x1
c00199a9:	83 c4 1c             	add    esp,0x1c
c00199ac:	c3                   	ret    
c00199ad:	90                   	nop

c00199ae <FAT::close(void*)>:
c00199ae:	83 ec 1c             	sub    esp,0x1c
c00199b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199b6:	75 07                	jne    c00199bf <FAT::close(void*)+0x11>
c00199b8:	b8 04 00 00 00       	mov    eax,0x4
c00199bd:	eb 36                	jmp    c00199f5 <FAT::close(void*)+0x47>
c00199bf:	83 ec 0c             	sub    esp,0xc
c00199c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199c6:	e8 45 be fe ff       	call   c0005810 <f_close>
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199d2:	83 ec 0c             	sub    esp,0xc
c00199d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199d9:	e8 50 22 ff ff       	call   c000bc2e <free>
c00199de:	83 c4 10             	add    esp,0x10
c00199e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199e5:	85 c0                	test   eax,eax
c00199e7:	75 07                	jne    c00199f0 <FAT::close(void*)+0x42>
c00199e9:	b8 00 00 00 00       	mov    eax,0x0
c00199ee:	eb 05                	jmp    c00199f5 <FAT::close(void*)+0x47>
c00199f0:	b8 01 00 00 00       	mov    eax,0x1
c00199f5:	83 c4 1c             	add    esp,0x1c
c00199f8:	c3                   	ret    
c00199f9:	90                   	nop

c00199fa <FAT::closeDir(void*)>:
c00199fa:	83 ec 1c             	sub    esp,0x1c
c00199fd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a02:	75 07                	jne    c0019a0b <FAT::closeDir(void*)+0x11>
c0019a04:	b8 04 00 00 00       	mov    eax,0x4
c0019a09:	eb 36                	jmp    c0019a41 <FAT::closeDir(void*)+0x47>
c0019a0b:	83 ec 0c             	sub    esp,0xc
c0019a0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a12:	e8 e1 c3 fe ff       	call   c0005df8 <f_closedir>
c0019a17:	83 c4 10             	add    esp,0x10
c0019a1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a1e:	83 ec 0c             	sub    esp,0xc
c0019a21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a25:	e8 04 22 ff ff       	call   c000bc2e <free>
c0019a2a:	83 c4 10             	add    esp,0x10
c0019a2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a31:	85 c0                	test   eax,eax
c0019a33:	75 07                	jne    c0019a3c <FAT::closeDir(void*)+0x42>
c0019a35:	b8 00 00 00 00       	mov    eax,0x0
c0019a3a:	eb 05                	jmp    c0019a41 <FAT::closeDir(void*)+0x47>
c0019a3c:	b8 01 00 00 00       	mov    eax,0x1
c0019a41:	83 c4 1c             	add    esp,0x1c
c0019a44:	c3                   	ret    
c0019a45:	90                   	nop

c0019a46 <FAT::seek(void*, unsigned long long)>:
c0019a46:	83 ec 2c             	sub    esp,0x2c
c0019a49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a59:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a5e:	75 07                	jne    c0019a67 <FAT::seek(void*, unsigned long long)+0x21>
c0019a60:	b8 04 00 00 00       	mov    eax,0x4
c0019a65:	eb 2f                	jmp    c0019a96 <FAT::seek(void*, unsigned long long)+0x50>
c0019a67:	83 ec 04             	sub    esp,0x4
c0019a6a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019a6e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019a72:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a76:	e8 c4 bd fe ff       	call   c000583f <f_lseek>
c0019a7b:	83 c4 10             	add    esp,0x10
c0019a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a86:	85 c0                	test   eax,eax
c0019a88:	75 07                	jne    c0019a91 <FAT::seek(void*, unsigned long long)+0x4b>
c0019a8a:	b8 00 00 00 00       	mov    eax,0x0
c0019a8f:	eb 05                	jmp    c0019a96 <FAT::seek(void*, unsigned long long)+0x50>
c0019a91:	b8 01 00 00 00       	mov    eax,0x1
c0019a96:	83 c4 2c             	add    esp,0x2c
c0019a99:	c3                   	ret    

c0019a9a <fatWrapperReadDisk>:
c0019a9a:	83 ec 1c             	sub    esp,0x1c
c0019a9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aa1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019aa5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019aa9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019aac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019ab0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ab4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ab9:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c0019ac0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019ac4:	83 ec 0c             	sub    esp,0xc
c0019ac7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019acb:	52                   	push   edx
c0019acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ad0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ad4:	50                   	push   eax
c0019ad5:	e8 4c 84 ff ff       	call   c0011f26 <LogicalDisk::read(unsigned long long, int, void*)>
c0019ada:	83 c4 20             	add    esp,0x20
c0019add:	83 c4 1c             	add    esp,0x1c
c0019ae0:	c3                   	ret    

c0019ae1 <fatWrapperWriteDisk>:
c0019ae1:	83 ec 1c             	sub    esp,0x1c
c0019ae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ae8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019aec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019af0:	89 04 24             	mov    DWORD PTR [esp],eax
c0019af3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019af7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019afb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b00:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c0019b07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b0b:	83 ec 0c             	sub    esp,0xc
c0019b0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b12:	52                   	push   edx
c0019b13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b1b:	50                   	push   eax
c0019b1c:	e8 71 84 ff ff       	call   c0011f92 <LogicalDisk::write(unsigned long long, int, void*)>
c0019b21:	83 c4 20             	add    esp,0x20
c0019b24:	83 c4 1c             	add    esp,0x1c
c0019b27:	c3                   	ret    

c0019b28 <fatWrapperIoctl>:
c0019b28:	53                   	push   ebx
c0019b29:	83 ec 28             	sub    esp,0x28
c0019b2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019b34:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b38:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b3c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019b41:	75 31                	jne    c0019b74 <fatWrapperIoctl+0x4c>
c0019b43:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b4b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b50:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c0019b57:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b5d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b67:	66 89 02             	mov    WORD PTR [edx],ax
c0019b6a:	b8 00 00 00 00       	mov    eax,0x0
c0019b6f:	e9 b2 00 00 00       	jmp    c0019c26 <fatWrapperIoctl+0xfe>
c0019b74:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019b79:	75 6a                	jne    c0019be5 <fatWrapperIoctl+0xbd>
c0019b7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b83:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b88:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c0019b8f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b95:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019b9b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019ba1:	89 c8                	mov    eax,ecx
c0019ba3:	89 da                	mov    edx,ebx
c0019ba5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019ba9:	c1 e0 0a             	shl    eax,0xa
c0019bac:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019bb1:	8b 0c 8d 40 3c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc3c0]
c0019bb8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019bbe:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019bc4:	89 cb                	mov    ebx,ecx
c0019bc6:	c1 fb 1f             	sar    ebx,0x1f
c0019bc9:	53                   	push   ebx
c0019bca:	51                   	push   ecx
c0019bcb:	52                   	push   edx
c0019bcc:	50                   	push   eax
c0019bcd:	e8 1a 4b 00 00       	call   c001e6ec <__udivdi3>
c0019bd2:	83 c4 10             	add    esp,0x10
c0019bd5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019bd9:	89 01                	mov    DWORD PTR [ecx],eax
c0019bdb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019bde:	b8 00 00 00 00       	mov    eax,0x0
c0019be3:	eb 41                	jmp    c0019c26 <fatWrapperIoctl+0xfe>
c0019be5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019bea:	75 07                	jne    c0019bf3 <fatWrapperIoctl+0xcb>
c0019bec:	b8 00 00 00 00       	mov    eax,0x0
c0019bf1:	eb 33                	jmp    c0019c26 <fatWrapperIoctl+0xfe>
c0019bf3:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019bf8:	75 19                	jne    c0019c13 <fatWrapperIoctl+0xeb>
c0019bfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c06:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c0c:	b8 00 00 00 00       	mov    eax,0x0
c0019c11:	eb 13                	jmp    c0019c26 <fatWrapperIoctl+0xfe>
c0019c13:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019c18:	75 07                	jne    c0019c21 <fatWrapperIoctl+0xf9>
c0019c1a:	b8 00 00 00 00       	mov    eax,0x0
c0019c1f:	eb 05                	jmp    c0019c26 <fatWrapperIoctl+0xfe>
c0019c21:	b8 04 00 00 00       	mov    eax,0x4
c0019c26:	83 c4 28             	add    esp,0x28
c0019c29:	5b                   	pop    ebx
c0019c2a:	c3                   	ret    
c0019c2b:	90                   	nop

c0019c2c <FAT::FAT()>:
c0019c2c:	83 ec 1c             	sub    esp,0x1c
c0019c2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c33:	83 ec 0c             	sub    esp,0xc
c0019c36:	50                   	push   eax
c0019c37:	e8 6c 56 ff ff       	call   c000f2a8 <Filesystem::Filesystem()>
c0019c3c:	83 c4 10             	add    esp,0x10
c0019c3f:	ba b0 21 02 c0       	mov    edx,0xc00221b0
c0019c44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c48:	89 10                	mov    DWORD PTR [eax],edx
c0019c4a:	c7 05 c0 4a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ac0,0x0
c0019c54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c5c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019c61:	7f 15                	jg     c0019c78 <FAT::FAT()+0x4c>
c0019c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c67:	c7 04 85 e0 4a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdb520],0xffffffff
c0019c72:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019c76:	eb e4                	jmp    c0019c5c <FAT::FAT()+0x30>
c0019c78:	90                   	nop
c0019c79:	83 c4 1c             	add    esp,0x1c
c0019c7c:	c3                   	ret    
c0019c7d:	90                   	nop

c0019c7e <FAT::fixFilepath(char*)>:
c0019c7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c82:	8a 00                	mov    al,BYTE PTR [eax]
c0019c84:	3c 40                	cmp    al,0x40
c0019c86:	7e 2c                	jle    c0019cb4 <FAT::fixFilepath(char*)+0x36>
c0019c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c8c:	8a 00                	mov    al,BYTE PTR [eax]
c0019c8e:	83 e8 41             	sub    eax,0x41
c0019c91:	88 c2                	mov    dl,al
c0019c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c97:	88 10                	mov    BYTE PTR [eax],dl
c0019c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c9d:	8a 00                	mov    al,BYTE PTR [eax]
c0019c9f:	0f be c0             	movsx  eax,al
c0019ca2:	8b 04 85 e0 4a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb520]
c0019ca9:	83 c0 30             	add    eax,0x30
c0019cac:	88 c2                	mov    dl,al
c0019cae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cb2:	88 10                	mov    BYTE PTR [eax],dl
c0019cb4:	90                   	nop
c0019cb5:	c3                   	ret    

c0019cb6 <FAT::open(char const*, void**, FileOpenMode)>:
c0019cb6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cbc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cc4:	74 0a                	je     c0019cd0 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019cc6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019cce:	75 0a                	jne    c0019cda <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019cd0:	b8 04 00 00 00       	mov    eax,0x4
c0019cd5:	e9 fd 00 00 00       	jmp    c0019dd7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019cda:	83 ec 08             	sub    esp,0x8
c0019cdd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ce4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ce8:	50                   	push   eax
c0019ce9:	e8 b9 69 fe ff       	call   c00006a7 <strcpy>
c0019cee:	83 c4 10             	add    esp,0x10
c0019cf1:	83 ec 08             	sub    esp,0x8
c0019cf4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019cf8:	50                   	push   eax
c0019cf9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d00:	e8 79 ff ff ff       	call   c0019c7e <FAT::fixFilepath(char*)>
c0019d05:	83 c4 10             	add    esp,0x10
c0019d08:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d17:	83 e0 01             	and    eax,0x1
c0019d1a:	74 08                	je     c0019d24 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019d1c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019d24:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d2b:	83 e0 04             	and    eax,0x4
c0019d2e:	74 10                	je     c0019d40 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019d30:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019d38:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019d40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d47:	83 e0 02             	and    eax,0x2
c0019d4a:	74 08                	je     c0019d54 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019d4c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019d54:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d5b:	83 e0 08             	and    eax,0x8
c0019d5e:	74 08                	je     c0019d68 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019d60:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019d68:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d6f:	83 e0 10             	and    eax,0x10
c0019d72:	74 08                	je     c0019d7c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019d74:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019d7c:	83 ec 0c             	sub    esp,0xc
c0019d7f:	68 50 02 00 00       	push   0x250
c0019d84:	e8 95 1e ff ff       	call   c000bc1e <malloc>
c0019d89:	83 c4 10             	add    esp,0x10
c0019d8c:	89 c2                	mov    edx,eax
c0019d8e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d95:	89 10                	mov    DWORD PTR [eax],edx
c0019d97:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019d9f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019da6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019da8:	83 ec 04             	sub    esp,0x4
c0019dab:	52                   	push   edx
c0019dac:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019db0:	52                   	push   edx
c0019db1:	50                   	push   eax
c0019db2:	e8 07 af fe ff       	call   c0004cbe <f_open>
c0019db7:	83 c4 10             	add    esp,0x10
c0019dba:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019dc1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019dc9:	74 07                	je     c0019dd2 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019dcb:	b8 01 00 00 00       	mov    eax,0x1
c0019dd0:	eb 05                	jmp    c0019dd7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019dd2:	b8 00 00 00 00       	mov    eax,0x0
c0019dd7:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ddd:	c3                   	ret    

c0019dde <FAT::openDir(char const*, void**)>:
c0019dde:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019de4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019dec:	74 0a                	je     c0019df8 <FAT::openDir(char const*, void**)+0x1a>
c0019dee:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019df6:	75 07                	jne    c0019dff <FAT::openDir(char const*, void**)+0x21>
c0019df8:	b8 04 00 00 00       	mov    eax,0x4
c0019dfd:	eb 7d                	jmp    c0019e7c <FAT::openDir(char const*, void**)+0x9e>
c0019dff:	83 ec 08             	sub    esp,0x8
c0019e02:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e09:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e0d:	50                   	push   eax
c0019e0e:	e8 94 68 fe ff       	call   c00006a7 <strcpy>
c0019e13:	83 c4 10             	add    esp,0x10
c0019e16:	83 ec 08             	sub    esp,0x8
c0019e19:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e1d:	50                   	push   eax
c0019e1e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e25:	e8 54 fe ff ff       	call   c0019c7e <FAT::fixFilepath(char*)>
c0019e2a:	83 c4 10             	add    esp,0x10
c0019e2d:	83 ec 0c             	sub    esp,0xc
c0019e30:	6a 4c                	push   0x4c
c0019e32:	e8 e7 1d ff ff       	call   c000bc1e <malloc>
c0019e37:	83 c4 10             	add    esp,0x10
c0019e3a:	89 c2                	mov    edx,eax
c0019e3c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e43:	89 10                	mov    DWORD PTR [eax],edx
c0019e45:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e4e:	83 ec 08             	sub    esp,0x8
c0019e51:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019e55:	52                   	push   edx
c0019e56:	50                   	push   eax
c0019e57:	e8 9a be fe ff       	call   c0005cf6 <f_opendir>
c0019e5c:	83 c4 10             	add    esp,0x10
c0019e5f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e66:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019e6e:	74 07                	je     c0019e77 <FAT::openDir(char const*, void**)+0x99>
c0019e70:	b8 01 00 00 00       	mov    eax,0x1
c0019e75:	eb 05                	jmp    c0019e7c <FAT::openDir(char const*, void**)+0x9e>
c0019e77:	b8 00 00 00 00       	mov    eax,0x0
c0019e7c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e82:	c3                   	ret    
c0019e83:	90                   	nop

c0019e84 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019e84:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e8a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019e92:	75 0a                	jne    c0019e9e <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019e94:	b8 04 00 00 00       	mov    eax,0x4
c0019e99:	e9 c9 00 00 00       	jmp    c0019f67 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019e9e:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019ea6:	75 0a                	jne    c0019eb2 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019ea8:	b8 04 00 00 00       	mov    eax,0x4
c0019ead:	e9 b5 00 00 00       	jmp    c0019f67 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019eb2:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019eba:	75 0a                	jne    c0019ec6 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019ebc:	b8 04 00 00 00       	mov    eax,0x4
c0019ec1:	e9 a1 00 00 00       	jmp    c0019f67 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019ec6:	83 ec 08             	sub    esp,0x8
c0019ec9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ed0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ed7:	50                   	push   eax
c0019ed8:	e8 ca 67 fe ff       	call   c00006a7 <strcpy>
c0019edd:	83 c4 10             	add    esp,0x10
c0019ee0:	83 ec 08             	sub    esp,0x8
c0019ee3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019eea:	50                   	push   eax
c0019eeb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ef2:	e8 87 fd ff ff       	call   c0019c7e <FAT::fixFilepath(char*)>
c0019ef7:	83 c4 10             	add    esp,0x10
c0019efa:	83 ec 08             	sub    esp,0x8
c0019efd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f01:	50                   	push   eax
c0019f02:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f09:	50                   	push   eax
c0019f0a:	e8 a6 bf fe ff       	call   c0005eb5 <f_stat>
c0019f0f:	83 c4 10             	add    esp,0x10
c0019f12:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f19:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f20:	85 c0                	test   eax,eax
c0019f22:	74 07                	je     c0019f2b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019f24:	83 f8 04             	cmp    eax,0x4
c0019f27:	74 32                	je     c0019f5b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019f29:	eb 37                	jmp    c0019f62 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019f2b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f2f:	0f b6 c0             	movzx  eax,al
c0019f32:	83 e0 10             	and    eax,0x10
c0019f35:	0f 95 c2             	setne  dl
c0019f38:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f3f:	88 10                	mov    BYTE PTR [eax],dl
c0019f41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019f44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019f48:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019f4f:	89 01                	mov    DWORD PTR [ecx],eax
c0019f51:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f54:	b8 00 00 00 00       	mov    eax,0x0
c0019f59:	eb 0c                	jmp    c0019f67 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f5b:	b8 02 00 00 00       	mov    eax,0x2
c0019f60:	eb 05                	jmp    c0019f67 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f62:	b8 01 00 00 00       	mov    eax,0x1
c0019f67:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f6d:	c3                   	ret    

c0019f6e <FAT::unlink(char const*)>:
c0019f6e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f74:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f7c:	75 07                	jne    c0019f85 <FAT::unlink(char const*)+0x17>
c0019f7e:	b8 04 00 00 00       	mov    eax,0x4
c0019f83:	eb 5c                	jmp    c0019fe1 <FAT::unlink(char const*)+0x73>
c0019f85:	83 ec 08             	sub    esp,0x8
c0019f88:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f93:	50                   	push   eax
c0019f94:	e8 0e 67 fe ff       	call   c00006a7 <strcpy>
c0019f99:	83 c4 10             	add    esp,0x10
c0019f9c:	83 ec 08             	sub    esp,0x8
c0019f9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fa3:	50                   	push   eax
c0019fa4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fab:	e8 ce fc ff ff       	call   c0019c7e <FAT::fixFilepath(char*)>
c0019fb0:	83 c4 10             	add    esp,0x10
c0019fb3:	83 ec 0c             	sub    esp,0xc
c0019fb6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fba:	50                   	push   eax
c0019fbb:	e8 47 c2 fe ff       	call   c0006207 <f_unlink>
c0019fc0:	83 c4 10             	add    esp,0x10
c0019fc3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019fca:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019fd1:	85 c0                	test   eax,eax
c0019fd3:	75 07                	jne    c0019fdc <FAT::unlink(char const*)+0x6e>
c0019fd5:	b8 00 00 00 00       	mov    eax,0x0
c0019fda:	eb 05                	jmp    c0019fe1 <FAT::unlink(char const*)+0x73>
c0019fdc:	b8 01 00 00 00       	mov    eax,0x1
c0019fe1:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fe7:	c3                   	ret    

c0019fe8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019fe8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019fee:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019ff5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019ffc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a000:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a004:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a00c:	75 0a                	jne    c001a018 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a00e:	b8 04 00 00 00       	mov    eax,0x4
c001a013:	e9 1c 01 00 00       	jmp    c001a134 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a018:	83 ec 08             	sub    esp,0x8
c001a01b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a022:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a026:	50                   	push   eax
c001a027:	e8 7b 66 fe ff       	call   c00006a7 <strcpy>
c001a02c:	83 c4 10             	add    esp,0x10
c001a02f:	83 ec 08             	sub    esp,0x8
c001a032:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a036:	50                   	push   eax
c001a037:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a03e:	e8 3b fc ff ff       	call   c0019c7e <FAT::fixFilepath(char*)>
c001a043:	83 c4 10             	add    esp,0x10
c001a046:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a04e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a056:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a05b:	83 e0 01             	and    eax,0x1
c001a05e:	74 08                	je     c001a068 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001a060:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a068:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a06d:	83 e0 02             	and    eax,0x2
c001a070:	74 08                	je     c001a07a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001a072:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a07a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a07f:	83 e0 04             	and    eax,0x4
c001a082:	74 08                	je     c001a08c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001a084:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a08c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a091:	83 e0 08             	and    eax,0x8
c001a094:	74 08                	je     c001a09e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001a096:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a09e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0a3:	83 e0 01             	and    eax,0x1
c001a0a6:	74 08                	je     c001a0b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a0a8:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a0b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0b5:	83 e0 02             	and    eax,0x2
c001a0b8:	74 08                	je     c001a0c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001a0ba:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a0c2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0c7:	83 e0 04             	and    eax,0x4
c001a0ca:	74 08                	je     c001a0d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001a0cc:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a0d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0d9:	83 e0 08             	and    eax,0x8
c001a0dc:	74 08                	je     c001a0e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001a0de:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a0e6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0ed:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a0f4:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a0fc:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a104:	83 ec 04             	sub    esp,0x4
c001a107:	52                   	push   edx
c001a108:	50                   	push   eax
c001a109:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a10d:	50                   	push   eax
c001a10e:	e8 96 c7 fe ff       	call   c00068a9 <f_chmod>
c001a113:	83 c4 10             	add    esp,0x10
c001a116:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a11d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a124:	85 c0                	test   eax,eax
c001a126:	75 07                	jne    c001a12f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001a128:	b8 00 00 00 00       	mov    eax,0x0
c001a12d:	eb 05                	jmp    c001a134 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a12f:	b8 01 00 00 00       	mov    eax,0x1
c001a134:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a13a:	c3                   	ret    
c001a13b:	90                   	nop

c001a13c <FAT::rename(char const*, char const*)>:
c001a13c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a142:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a14a:	74 0a                	je     c001a156 <FAT::rename(char const*, char const*)+0x1a>
c001a14c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a154:	75 0a                	jne    c001a160 <FAT::rename(char const*, char const*)+0x24>
c001a156:	b8 04 00 00 00       	mov    eax,0x4
c001a15b:	e9 98 00 00 00       	jmp    c001a1f8 <FAT::rename(char const*, char const*)+0xbc>
c001a160:	83 ec 08             	sub    esp,0x8
c001a163:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a16a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a171:	50                   	push   eax
c001a172:	e8 30 65 fe ff       	call   c00006a7 <strcpy>
c001a177:	83 c4 10             	add    esp,0x10
c001a17a:	83 ec 08             	sub    esp,0x8
c001a17d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a184:	50                   	push   eax
c001a185:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a18c:	e8 ed fa ff ff       	call   c0019c7e <FAT::fixFilepath(char*)>
c001a191:	83 c4 10             	add    esp,0x10
c001a194:	83 ec 08             	sub    esp,0x8
c001a197:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a19e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a1a2:	50                   	push   eax
c001a1a3:	e8 ff 64 fe ff       	call   c00006a7 <strcpy>
c001a1a8:	83 c4 10             	add    esp,0x10
c001a1ab:	83 ec 08             	sub    esp,0x8
c001a1ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1b2:	50                   	push   eax
c001a1b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1ba:	e8 bf fa ff ff       	call   c0019c7e <FAT::fixFilepath(char*)>
c001a1bf:	83 c4 10             	add    esp,0x10
c001a1c2:	83 ec 08             	sub    esp,0x8
c001a1c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1c9:	50                   	push   eax
c001a1ca:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a1d1:	50                   	push   eax
c001a1d2:	e8 df c3 fe ff       	call   c00065b6 <f_rename>
c001a1d7:	83 c4 10             	add    esp,0x10
c001a1da:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a1e1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a1e8:	85 c0                	test   eax,eax
c001a1ea:	75 07                	jne    c001a1f3 <FAT::rename(char const*, char const*)+0xb7>
c001a1ec:	b8 00 00 00 00       	mov    eax,0x0
c001a1f1:	eb 05                	jmp    c001a1f8 <FAT::rename(char const*, char const*)+0xbc>
c001a1f3:	b8 01 00 00 00       	mov    eax,0x1
c001a1f8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a1fe:	c3                   	ret    
c001a1ff:	90                   	nop

c001a200 <FAT::mkdir(char const*)>:
c001a200:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a206:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a20e:	75 07                	jne    c001a217 <FAT::mkdir(char const*)+0x17>
c001a210:	b8 04 00 00 00       	mov    eax,0x4
c001a215:	eb 5c                	jmp    c001a273 <FAT::mkdir(char const*)+0x73>
c001a217:	83 ec 08             	sub    esp,0x8
c001a21a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a221:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a225:	50                   	push   eax
c001a226:	e8 7c 64 fe ff       	call   c00006a7 <strcpy>
c001a22b:	83 c4 10             	add    esp,0x10
c001a22e:	83 ec 08             	sub    esp,0x8
c001a231:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a235:	50                   	push   eax
c001a236:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a23d:	e8 3c fa ff ff       	call   c0019c7e <FAT::fixFilepath(char*)>
c001a242:	83 c4 10             	add    esp,0x10
c001a245:	83 ec 0c             	sub    esp,0xc
c001a248:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a24c:	50                   	push   eax
c001a24d:	e8 38 c1 fe ff       	call   c000638a <f_mkdir>
c001a252:	83 c4 10             	add    esp,0x10
c001a255:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a25c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a263:	85 c0                	test   eax,eax
c001a265:	75 07                	jne    c001a26e <FAT::mkdir(char const*)+0x6e>
c001a267:	b8 00 00 00 00       	mov    eax,0x0
c001a26c:	eb 05                	jmp    c001a273 <FAT::mkdir(char const*)+0x73>
c001a26e:	b8 01 00 00 00       	mov    eax,0x1
c001a273:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a279:	c3                   	ret    

c001a27a <FAT::exists(char const*)>:
c001a27a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a280:	83 ec 08             	sub    esp,0x8
c001a283:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a28a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a28e:	50                   	push   eax
c001a28f:	e8 13 64 fe ff       	call   c00006a7 <strcpy>
c001a294:	83 c4 10             	add    esp,0x10
c001a297:	83 ec 08             	sub    esp,0x8
c001a29a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a29e:	50                   	push   eax
c001a29f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2a6:	e8 d3 f9 ff ff       	call   c0019c7e <FAT::fixFilepath(char*)>
c001a2ab:	83 c4 10             	add    esp,0x10
c001a2ae:	83 ec 08             	sub    esp,0x8
c001a2b1:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a2b8:	50                   	push   eax
c001a2b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a2bd:	50                   	push   eax
c001a2be:	e8 f2 bb fe ff       	call   c0005eb5 <f_stat>
c001a2c3:	83 c4 10             	add    esp,0x10
c001a2c6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a2cd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a2d4:	85 c0                	test   eax,eax
c001a2d6:	75 04                	jne    c001a2dc <FAT::exists(char const*)+0x62>
c001a2d8:	b0 01                	mov    al,0x1
c001a2da:	eb 02                	jmp    c001a2de <FAT::exists(char const*)+0x64>
c001a2dc:	b0 00                	mov    al,0x0
c001a2de:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a2e4:	c3                   	ret    
c001a2e5:	90                   	nop

c001a2e6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a2e6:	b8 08 00 00 00       	mov    eax,0x8
c001a2eb:	c3                   	ret    

c001a2ec <ISO9660::seek(void*, unsigned long long)>:
c001a2ec:	53                   	push   ebx
c001a2ed:	b8 04 00 00 00       	mov    eax,0x4
c001a2f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a2f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a2fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2fe:	85 d2                	test   edx,edx
c001a300:	74 17                	je     c001a319 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a302:	89 c8                	mov    eax,ecx
c001a304:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001a307:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001a30a:	b8 01 00 00 00       	mov    eax,0x1
c001a30f:	73 08                	jae    c001a319 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a311:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001a314:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001a317:	31 c0                	xor    eax,eax
c001a319:	5b                   	pop    ebx
c001a31a:	c3                   	ret    
c001a31b:	90                   	nop

c001a31c <ISO9660::tell(void*, unsigned long long*)>:
c001a31c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a324:	85 d2                	test   edx,edx
c001a326:	74 12                	je     c001a33a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a328:	85 c0                	test   eax,eax
c001a32a:	74 0e                	je     c001a33a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a32c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a32f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a332:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a335:	89 10                	mov    DWORD PTR [eax],edx
c001a337:	31 c0                	xor    eax,eax
c001a339:	c3                   	ret    
c001a33a:	b8 04 00 00 00       	mov    eax,0x4
c001a33f:	c3                   	ret    

c001a340 <ISO9660::getName()>:
c001a340:	b8 0c 22 02 c0       	mov    eax,0xc002220c
c001a345:	c3                   	ret    

c001a346 <ISO9660::stat(void*, unsigned long long*)>:
c001a346:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a34a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a34e:	85 d2                	test   edx,edx
c001a350:	74 12                	je     c001a364 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a352:	85 c0                	test   eax,eax
c001a354:	74 0e                	je     c001a364 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a356:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a359:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a35c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a35f:	89 10                	mov    DWORD PTR [eax],edx
c001a361:	31 c0                	xor    eax,eax
c001a363:	c3                   	ret    
c001a364:	b8 04 00 00 00       	mov    eax,0x4
c001a369:	c3                   	ret    

c001a36a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a36a:	b8 01 00 00 00       	mov    eax,0x1
c001a36f:	c3                   	ret    

c001a370 <ISO9660::unlink(char const*)>:
c001a370:	b8 01 00 00 00       	mov    eax,0x1
c001a375:	c3                   	ret    

c001a376 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a376:	b8 01 00 00 00       	mov    eax,0x1
c001a37b:	c3                   	ret    

c001a37c <ISO9660::rename(char const*, char const*)>:
c001a37c:	b8 01 00 00 00       	mov    eax,0x1
c001a381:	c3                   	ret    

c001a382 <ISO9660::mkdir(char const*)>:
c001a382:	b8 01 00 00 00       	mov    eax,0x1
c001a387:	c3                   	ret    

c001a388 <ISO9660::close(void*)>:
c001a388:	83 ec 0c             	sub    esp,0xc
c001a38b:	b8 04 00 00 00       	mov    eax,0x4
c001a390:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a394:	85 d2                	test   edx,edx
c001a396:	74 0e                	je     c001a3a6 <ISO9660::close(void*)+0x1e>
c001a398:	83 ec 0c             	sub    esp,0xc
c001a39b:	52                   	push   edx
c001a39c:	e8 8d 18 ff ff       	call   c000bc2e <free>
c001a3a1:	83 c4 10             	add    esp,0x10
c001a3a4:	31 c0                	xor    eax,eax
c001a3a6:	83 c4 0c             	add    esp,0xc
c001a3a9:	c3                   	ret    

c001a3aa <ISO9660::closeDir(void*)>:
c001a3aa:	83 ec 0c             	sub    esp,0xc
c001a3ad:	b8 04 00 00 00       	mov    eax,0x4
c001a3b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a3b6:	85 d2                	test   edx,edx
c001a3b8:	74 0e                	je     c001a3c8 <ISO9660::closeDir(void*)+0x1e>
c001a3ba:	83 ec 0c             	sub    esp,0xc
c001a3bd:	52                   	push   edx
c001a3be:	e8 6b 18 ff ff       	call   c000bc2e <free>
c001a3c3:	83 c4 10             	add    esp,0x10
c001a3c6:	31 c0                	xor    eax,eax
c001a3c8:	83 c4 0c             	add    esp,0xc
c001a3cb:	c3                   	ret    

c001a3cc <ISO9660::~ISO9660()>:
c001a3cc:	83 ec 0c             	sub    esp,0xc
c001a3cf:	ba 60 22 02 c0       	mov    edx,0xc0022260
c001a3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3d8:	89 10                	mov    DWORD PTR [eax],edx
c001a3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3de:	83 ec 0c             	sub    esp,0xc
c001a3e1:	50                   	push   eax
c001a3e2:	e8 e5 4e ff ff       	call   c000f2cc <Filesystem::~Filesystem()>
c001a3e7:	83 c4 10             	add    esp,0x10
c001a3ea:	90                   	nop
c001a3eb:	83 c4 0c             	add    esp,0xc
c001a3ee:	c3                   	ret    
c001a3ef:	90                   	nop

c001a3f0 <ISO9660::~ISO9660()>:
c001a3f0:	83 ec 0c             	sub    esp,0xc
c001a3f3:	83 ec 0c             	sub    esp,0xc
c001a3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3fa:	e8 cd ff ff ff       	call   c001a3cc <ISO9660::~ISO9660()>
c001a3ff:	83 c4 10             	add    esp,0x10
c001a402:	83 ec 08             	sub    esp,0x8
c001a405:	6a 08                	push   0x8
c001a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a40b:	e8 b3 4a ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001a410:	83 c4 10             	add    esp,0x10
c001a413:	83 c4 0c             	add    esp,0xc
c001a416:	c3                   	ret    

c001a417 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a417:	55                   	push   ebp
c001a418:	31 c9                	xor    ecx,ecx
c001a41a:	57                   	push   edi
c001a41b:	56                   	push   esi
c001a41c:	53                   	push   ebx
c001a41d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a421:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a425:	89 eb                	mov    ebx,ebp
c001a427:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a42b:	39 ce                	cmp    esi,ecx
c001a42d:	7e 17                	jle    c001a446 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a42f:	31 d2                	xor    edx,edx
c001a431:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a435:	7d 13                	jge    c001a44a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a437:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a43b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a43e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a441:	75 0d                	jne    c001a450 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a443:	42                   	inc    edx
c001a444:	eb eb                	jmp    c001a431 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a446:	31 c0                	xor    eax,eax
c001a448:	eb 0a                	jmp    c001a454 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a44a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a44e:	eb 04                	jmp    c001a454 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a450:	41                   	inc    ecx
c001a451:	43                   	inc    ebx
c001a452:	eb d7                	jmp    c001a42b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a454:	5b                   	pop    ebx
c001a455:	5e                   	pop    esi
c001a456:	5f                   	pop    edi
c001a457:	5d                   	pop    ebp
c001a458:	c3                   	ret    

c001a459 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a459:	56                   	push   esi
c001a45a:	53                   	push   ebx
c001a45b:	52                   	push   edx
c001a45c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a460:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a468:	39 0d c0 4b 02 c0    	cmp    DWORD PTR ds:0xc0024bc0,ecx
c001a46e:	75 08                	jne    c001a478 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a470:	38 05 68 30 02 c0    	cmp    BYTE PTR ds:0xc0023068,al
c001a476:	74 2b                	je     c001a4a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a478:	83 ec 0c             	sub    esp,0xc
c001a47b:	a2 68 30 02 c0       	mov    ds:0xc0023068,al
c001a480:	68 e0 4b 02 c0       	push   0xc0024be0
c001a485:	0f be c0             	movsx  eax,al
c001a488:	6a 01                	push   0x1
c001a48a:	89 0d c0 4b 02 c0    	mov    DWORD PTR ds:0xc0024bc0,ecx
c001a490:	31 db                	xor    ebx,ebx
c001a492:	53                   	push   ebx
c001a493:	51                   	push   ecx
c001a494:	ff 34 85 3c 3b 02 c0 	push   DWORD PTR [eax*4-0x3ffdc4c4]
c001a49b:	e8 86 7a ff ff       	call   c0011f26 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4a0:	83 c4 20             	add    esp,0x20
c001a4a3:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a4ab:	c7 44 24 14 e0 4b 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024be0
c001a4b3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a4b7:	58                   	pop    eax
c001a4b8:	5b                   	pop    ebx
c001a4b9:	5e                   	pop    esi
c001a4ba:	e9 13 61 fe ff       	jmp    c00005d2 <memcpy>
c001a4bf:	90                   	nop

c001a4c0 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a4c0:	81 ec 10 08 00 00    	sub    esp,0x810
c001a4c6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a4cd:	83 c0 41             	add    eax,0x41
c001a4d0:	0f be c0             	movsx  eax,al
c001a4d3:	50                   	push   eax
c001a4d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4d8:	50                   	push   eax
c001a4d9:	6a 10                	push   0x10
c001a4db:	e8 79 ff ff ff       	call   c001a459 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4e0:	83 c4 10             	add    esp,0x10
c001a4e3:	31 c0                	xor    eax,eax
c001a4e5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a4ea:	75 1d                	jne    c001a509 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a4ec:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a4f1:	75 16                	jne    c001a509 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a4f3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a4f8:	75 0f                	jne    c001a509 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a4fa:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a4ff:	75 08                	jne    c001a509 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a501:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a506:	0f 94 c0             	sete   al
c001a509:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a50f:	c3                   	ret    

c001a510 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a510:	55                   	push   ebp
c001a511:	57                   	push   edi
c001a512:	56                   	push   esi
c001a513:	53                   	push   ebx
c001a514:	81 ec 34 08 00 00    	sub    esp,0x834
c001a51a:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a521:	55                   	push   ebp
c001a522:	68 27 22 02 c0       	push   0xc0022227
c001a527:	e8 77 4a ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001a52c:	83 c4 10             	add    esp,0x10
c001a52f:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a537:	0f 84 06 02 00 00    	je     c001a743 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a53d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a545:	0f 84 f8 01 00 00    	je     c001a743 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a54b:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a552:	b8 01 00 00 00       	mov    eax,0x1
c001a557:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a55b:	0f 85 e7 01 00 00    	jne    c001a748 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a561:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a564:	31 d2                	xor    edx,edx
c001a566:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a569:	89 e9                	mov    ecx,ebp
c001a56b:	89 d3                	mov    ebx,edx
c001a56d:	01 f1                	add    ecx,esi
c001a56f:	11 fb                	adc    ebx,edi
c001a571:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a575:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a579:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a580:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a583:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a586:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a58a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a58e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a592:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a596:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a59a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a59e:	72 19                	jb     c001a5b9 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a5a0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a5a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a5ac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a5af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a5b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a5b7:	eb 13                	jmp    c001a5cc <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a5b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a5c1:	29 f0                	sub    eax,esi
c001a5c3:	19 fa                	sbb    edx,edi
c001a5c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a5cc:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a5d3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5d8:	53                   	push   ebx
c001a5d9:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a5dd:	c1 e0 0b             	shl    eax,0xb
c001a5e0:	01 c6                	add    esi,eax
c001a5e2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a5e9:	11 d7                	adc    edi,edx
c001a5eb:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a5ef:	89 fa                	mov    edx,edi
c001a5f1:	50                   	push   eax
c001a5f2:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a5f6:	50                   	push   eax
c001a5f7:	89 f0                	mov    eax,esi
c001a5f9:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a5fd:	50                   	push   eax
c001a5fe:	e8 56 fe ff ff       	call   c001a459 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a603:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a60a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a60e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a611:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a615:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	b8 00 08 00 00       	mov    eax,0x800
c001a623:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a627:	29 d0                	sub    eax,edx
c001a629:	39 c1                	cmp    ecx,eax
c001a62b:	83 db 00             	sbb    ebx,0x0
c001a62e:	7d 19                	jge    c001a649 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a630:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a635:	75 16                	jne    c001a64d <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a637:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a63e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a644:	e9 f6 00 00 00       	jmp    c001a73f <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a649:	89 c5                	mov    ebp,eax
c001a64b:	eb 03                	jmp    c001a650 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a64d:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a650:	51                   	push   ecx
c001a651:	55                   	push   ebp
c001a652:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a656:	50                   	push   eax
c001a657:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a65e:	e8 6f 5f fe ff       	call   c00005d2 <memcpy>
c001a663:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a667:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a66b:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a672:	01 e8                	add    eax,ebp
c001a674:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a678:	89 e8                	mov    eax,ebp
c001a67a:	99                   	cdq    
c001a67b:	01 ee                	add    esi,ebp
c001a67d:	11 d7                	adc    edi,edx
c001a67f:	29 e9                	sub    ecx,ebp
c001a681:	19 d3                	sbb    ebx,edx
c001a683:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a687:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a68b:	83 c4 10             	add    esp,0x10
c001a68e:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a693:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a696:	b8 00 00 00 00       	mov    eax,0x0
c001a69b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a69f:	7d 3f                	jge    c001a6e0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a6a1:	52                   	push   edx
c001a6a2:	89 fa                	mov    edx,edi
c001a6a4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a6ab:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a6af:	50                   	push   eax
c001a6b0:	89 f0                	mov    eax,esi
c001a6b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6b6:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a6ba:	50                   	push   eax
c001a6bb:	e8 99 fd ff ff       	call   c001a459 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a6c0:	81 c6 00 08 00 00    	add    esi,0x800
c001a6c6:	83 d7 00             	adc    edi,0x0
c001a6c9:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a6d1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a6d9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a6de:	eb ab                	jmp    c001a68b <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a6e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6e4:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a6e7:	74 34                	je     c001a71d <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a6e9:	89 fa                	mov    edx,edi
c001a6eb:	50                   	push   eax
c001a6ec:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a6f3:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a6f7:	50                   	push   eax
c001a6f8:	89 f0                	mov    eax,esi
c001a6fa:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a6fe:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a702:	55                   	push   ebp
c001a703:	50                   	push   eax
c001a704:	e8 50 fd ff ff       	call   c001a459 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a709:	83 c4 0c             	add    esp,0xc
c001a70c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a710:	55                   	push   ebp
c001a711:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a715:	e8 b8 5e fe ff       	call   c00005d2 <memcpy>
c001a71a:	83 c4 10             	add    esp,0x10
c001a71d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a724:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a728:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a72c:	89 38                	mov    DWORD PTR [eax],edi
c001a72e:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a735:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a739:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a73c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a73f:	31 c0                	xor    eax,eax
c001a741:	eb 05                	jmp    c001a748 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a743:	b8 04 00 00 00       	mov    eax,0x4
c001a748:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a74e:	5b                   	pop    ebx
c001a74f:	5e                   	pop    esi
c001a750:	5f                   	pop    edi
c001a751:	5d                   	pop    ebp
c001a752:	c3                   	ret    
c001a753:	90                   	nop

c001a754 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a754:	55                   	push   ebp
c001a755:	57                   	push   edi
c001a756:	56                   	push   esi
c001a757:	53                   	push   ebx
c001a758:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a75e:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a765:	85 f6                	test   esi,esi
c001a767:	0f 84 64 02 00 00    	je     c001a9d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a76d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a775:	0f 84 56 02 00 00    	je     c001a9d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a77b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a77e:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a781:	75 0a                	jne    c001a78d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a783:	b8 07 00 00 00       	mov    eax,0x7
c001a788:	e9 49 02 00 00       	jmp    c001a9d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a78d:	50                   	push   eax
c001a78e:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a792:	50                   	push   eax
c001a793:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a79a:	53                   	push   ebx
c001a79b:	8b 06                	mov    eax,DWORD PTR [esi]
c001a79d:	c1 e0 0b             	shl    eax,0xb
c001a7a0:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a7a3:	c1 e8 0b             	shr    eax,0xb
c001a7a6:	50                   	push   eax
c001a7a7:	e8 ad fc ff ff       	call   c001a459 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a7ac:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a7af:	83 c4 10             	add    esp,0x10
c001a7b2:	89 c1                	mov    ecx,eax
c001a7b4:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a7b7:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a7bd:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a7c0:	84 db                	test   bl,bl
c001a7c2:	0f 85 90 00 00 00    	jne    c001a858 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a7c8:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a7ce:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a7d4:	29 c7                	sub    edi,eax
c001a7d6:	89 fb                	mov    ebx,edi
c001a7d8:	c1 fb 1f             	sar    ebx,0x1f
c001a7db:	01 f8                	add    eax,edi
c001a7dd:	11 da                	adc    edx,ebx
c001a7df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a7e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a7e7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a7ea:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a7ed:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a7f0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a7f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a7fa:	89 d8                	mov    eax,ebx
c001a7fc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a7ff:	ba 00 00 00 00       	mov    edx,0x0
c001a804:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a808:	b8 00 00 00 00       	mov    eax,0x0
c001a80d:	73 0b                	jae    c001a81a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a80f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a812:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a816:	29 f8                	sub    eax,edi
c001a818:	19 da                	sbb    edx,ebx
c001a81a:	89 d3                	mov    ebx,edx
c001a81c:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a81f:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a822:	09 c3                	or     ebx,eax
c001a824:	0f 84 59 ff ff ff    	je     c001a783 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a82a:	55                   	push   ebp
c001a82b:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a82f:	50                   	push   eax
c001a830:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a837:	53                   	push   ebx
c001a838:	8b 06                	mov    eax,DWORD PTR [esi]
c001a83a:	c1 e0 0b             	shl    eax,0xb
c001a83d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a841:	c1 e8 0b             	shr    eax,0xb
c001a844:	50                   	push   eax
c001a845:	e8 0f fc ff ff       	call   c001a459 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a84a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a84d:	83 c4 10             	add    esp,0x10
c001a850:	25 ff 07 00 00       	and    eax,0x7ff
c001a855:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a858:	57                   	push   edi
c001a859:	6a 28                	push   0x28
c001a85b:	6a 00                	push   0x0
c001a85d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a861:	50                   	push   eax
c001a862:	e8 a1 5d fe ff       	call   c0000608 <memset>
c001a867:	31 d2                	xor    edx,edx
c001a869:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a86c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a872:	89 f8                	mov    eax,edi
c001a874:	83 c0 21             	add    eax,0x21
c001a877:	83 d2 00             	adc    edx,0x0
c001a87a:	89 c7                	mov    edi,eax
c001a87c:	89 d5                	mov    ebp,edx
c001a87e:	83 c4 10             	add    esp,0x10
c001a881:	31 c9                	xor    ecx,ecx
c001a883:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a88a:	83 f9 28             	cmp    ecx,0x28
c001a88d:	88 04 24             	mov    BYTE PTR [esp],al
c001a890:	0f 94 c2             	sete   dl
c001a893:	88 d0                	mov    al,dl
c001a895:	ba ff 07 00 00       	mov    edx,0x7ff
c001a89a:	39 fa                	cmp    edx,edi
c001a89c:	ba 00 00 00 00       	mov    edx,0x0
c001a8a1:	19 ea                	sbb    edx,ebp
c001a8a3:	0f 92 c2             	setb   dl
c001a8a6:	09 c2                	or     edx,eax
c001a8a8:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a8ac:	0f 94 c0             	sete   al
c001a8af:	08 d0                	or     al,dl
c001a8b1:	75 16                	jne    c001a8c9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a8b3:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a8b7:	74 10                	je     c001a8c9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a8b9:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a8bc:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a8c0:	41                   	inc    ecx
c001a8c1:	83 c7 01             	add    edi,0x1
c001a8c4:	83 d5 00             	adc    ebp,0x0
c001a8c7:	eb ba                	jmp    c001a883 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a8c9:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a8d0:	83 ec 0c             	sub    esp,0xc
c001a8d3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a8d7:	57                   	push   edi
c001a8d8:	e8 48 5d fe ff       	call   c0000625 <strlen>
c001a8dd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a8e5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a8e9:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a8f0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a8f3:	5a                   	pop    edx
c001a8f4:	25 ff 07 00 00       	and    eax,0x7ff
c001a8f9:	01 c8                	add    eax,ecx
c001a8fb:	59                   	pop    ecx
c001a8fc:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a902:	83 e0 02             	and    eax,0x2
c001a905:	3c 01                	cmp    al,0x1
c001a907:	19 c0                	sbb    eax,eax
c001a909:	83 c0 02             	add    eax,0x2
c001a90c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a910:	57                   	push   edi
c001a911:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a915:	50                   	push   eax
c001a916:	e8 8c 5d fe ff       	call   c00006a7 <strcpy>
c001a91b:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a91f:	83 c4 10             	add    esp,0x10
c001a922:	84 c0                	test   al,al
c001a924:	75 21                	jne    c001a947 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a926:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a92e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a936:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a93e:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a945:	eb 28                	jmp    c001a96f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a947:	fe c8                	dec    al
c001a949:	75 24                	jne    c001a96f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a94b:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a953:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a95b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a963:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a96a:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a96f:	0f b6 fb             	movzx  edi,bl
c001a972:	31 db                	xor    ebx,ebx
c001a974:	50                   	push   eax
c001a975:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a97c:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a980:	50                   	push   eax
c001a981:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a988:	e8 45 5c fe ff       	call   c00005d2 <memcpy>
c001a98d:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a994:	89 f9                	mov    ecx,edi
c001a996:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a99c:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a99f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a9a2:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a9a5:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a9a8:	83 c4 10             	add    esp,0x10
c001a9ab:	39 c7                	cmp    edi,eax
c001a9ad:	89 df                	mov    edi,ebx
c001a9af:	19 d7                	sbb    edi,edx
c001a9b1:	72 10                	jb     c001a9c3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001a9b3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a9ba:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a9c1:	eb 0a                	jmp    c001a9cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001a9c3:	29 c8                	sub    eax,ecx
c001a9c5:	19 da                	sbb    edx,ebx
c001a9c7:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a9ca:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a9cd:	31 c0                	xor    eax,eax
c001a9cf:	eb 05                	jmp    c001a9d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a9d1:	b8 04 00 00 00       	mov    eax,0x4
c001a9d6:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a9dc:	5b                   	pop    ebx
c001a9dd:	5e                   	pop    esi
c001a9de:	5f                   	pop    edi
c001a9df:	5d                   	pop    ebp
c001a9e0:	c3                   	ret    

c001a9e1 <readRoot(unsigned int*, unsigned int*, char)>:
c001a9e1:	81 ec 40 08 00 00    	sub    esp,0x840
c001a9e7:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a9ef:	50                   	push   eax
c001a9f0:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a9f4:	50                   	push   eax
c001a9f5:	6a 10                	push   0x10
c001a9f7:	e8 5d fa ff ff       	call   c001a459 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a9fc:	83 c4 0c             	add    esp,0xc
c001a9ff:	6a 22                	push   0x22
c001aa01:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001aa08:	50                   	push   eax
c001aa09:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001aa0d:	50                   	push   eax
c001aa0e:	e8 bf 5b fe ff       	call   c00005d2 <memcpy>
c001aa13:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001aa1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aa1e:	89 10                	mov    DWORD PTR [eax],edx
c001aa20:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001aa27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aa2b:	89 10                	mov    DWORD PTR [eax],edx
c001aa2d:	b0 01                	mov    al,0x1
c001aa2f:	81 c4 4c 08 00 00    	add    esp,0x84c
c001aa35:	c3                   	ret    

c001aa36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001aa36:	55                   	push   ebp
c001aa37:	57                   	push   edi
c001aa38:	56                   	push   esi
c001aa39:	53                   	push   ebx
c001aa3a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa40:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aa47:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001aa4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa52:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001aa56:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001aa5a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aa5e:	75 03                	jne    c001aa63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001aa60:	83 c3 02             	add    ebx,0x2
c001aa63:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001aa66:	75 03                	jne    c001aa6b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001aa68:	43                   	inc    ebx
c001aa69:	eb f8                	jmp    c001aa63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001aa6b:	51                   	push   ecx
c001aa6c:	68 00 01 00 00       	push   0x100
c001aa71:	6a 00                	push   0x0
c001aa73:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa77:	50                   	push   eax
c001aa78:	e8 8b 5b fe ff       	call   c0000608 <memset>
c001aa7d:	83 c4 10             	add    esp,0x10
c001aa80:	31 d2                	xor    edx,edx
c001aa82:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001aa85:	84 c0                	test   al,al
c001aa87:	74 21                	je     c001aaaa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001aa89:	3c 2f                	cmp    al,0x2f
c001aa8b:	75 0b                	jne    c001aa98 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001aa8d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001aa91:	bd 01 00 00 00       	mov    ebp,0x1
c001aa96:	eb 14                	jmp    c001aaac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001aa98:	8d 48 9f             	lea    ecx,[eax-0x61]
c001aa9b:	80 f9 19             	cmp    cl,0x19
c001aa9e:	77 03                	ja     c001aaa3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001aaa0:	83 e8 20             	sub    eax,0x20
c001aaa3:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001aaa7:	42                   	inc    edx
c001aaa8:	eb d8                	jmp    c001aa82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001aaaa:	31 ed                	xor    ebp,ebp
c001aaac:	83 ec 0c             	sub    esp,0xc
c001aaaf:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001aab6:	e8 63 11 ff ff       	call   c000bc1e <malloc>
c001aabb:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aac2:	89 c6                	mov    esi,eax
c001aac4:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001aaca:	c1 ef 0b             	shr    edi,0xb
c001aacd:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001aad4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001aad8:	83 c4 10             	add    esp,0x10
c001aadb:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001aae0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001aae4:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001aaeb:	74 28                	je     c001ab15 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001aaed:	52                   	push   edx
c001aaee:	57                   	push   edi
c001aaef:	50                   	push   eax
c001aaf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aaf4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aafb:	e8 59 f9 ff ff       	call   c001a459 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab04:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001ab0b:	05 00 08 00 00       	add    eax,0x800
c001ab10:	83 c4 10             	add    esp,0x10
c001ab13:	eb cb                	jmp    c001aae0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001ab15:	83 ec 0c             	sub    esp,0xc
c001ab18:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ab1c:	57                   	push   edi
c001ab1d:	e8 03 5b fe ff       	call   c0000625 <strlen>
c001ab22:	50                   	push   eax
c001ab23:	57                   	push   edi
c001ab24:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ab2b:	56                   	push   esi
c001ab2c:	e8 e6 f8 ff ff       	call   c001a417 <__memmem(unsigned char*, int, unsigned char*, int)>
c001ab31:	83 c4 20             	add    esp,0x20
c001ab34:	85 c0                	test   eax,eax
c001ab36:	75 13                	jne    c001ab4b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001ab38:	83 ec 0c             	sub    esp,0xc
c001ab3b:	56                   	push   esi
c001ab3c:	e8 ed 10 ff ff       	call   c000bc2e <free>
c001ab41:	83 c4 10             	add    esp,0x10
c001ab44:	31 c0                	xor    eax,eax
c001ab46:	e9 b3 00 00 00       	jmp    c001abfe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001ab4b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001ab4f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001ab53:	c1 e7 08             	shl    edi,0x8
c001ab56:	c1 e2 10             	shl    edx,0x10
c001ab59:	09 d7                	or     edi,edx
c001ab5b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001ab5f:	09 d7                	or     edi,edx
c001ab61:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001ab65:	c1 e2 18             	shl    edx,0x18
c001ab68:	09 d7                	or     edi,edx
c001ab6a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001ab6e:	89 d1                	mov    ecx,edx
c001ab70:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001ab74:	c1 e1 08             	shl    ecx,0x8
c001ab77:	c1 e2 10             	shl    edx,0x10
c001ab7a:	09 ca                	or     edx,ecx
c001ab7c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001ab80:	09 ca                	or     edx,ecx
c001ab82:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001ab86:	c1 e1 18             	shl    ecx,0x18
c001ab89:	09 ca                	or     edx,ecx
c001ab8b:	89 e9                	mov    ecx,ebp
c001ab8d:	84 c9                	test   cl,cl
c001ab8f:	74 3c                	je     c001abcd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001ab91:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ab95:	83 ec 0c             	sub    esp,0xc
c001ab98:	56                   	push   esi
c001ab99:	e8 90 10 ff ff       	call   c000bc2e <free>
c001ab9e:	83 c4 0c             	add    esp,0xc
c001aba1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001aba8:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001abad:	50                   	push   eax
c001abae:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001abb5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001abbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001abc0:	52                   	push   edx
c001abc1:	57                   	push   edi
c001abc2:	53                   	push   ebx
c001abc3:	e8 6e fe ff ff       	call   c001aa36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001abc8:	83 c4 20             	add    esp,0x20
c001abcb:	eb 31                	jmp    c001abfe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001abcd:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001abd0:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001abd7:	d0 e8                	shr    al,1
c001abd9:	89 3b                	mov    DWORD PTR [ebx],edi
c001abdb:	83 e0 01             	and    eax,0x1
c001abde:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001abe5:	83 ec 0c             	sub    esp,0xc
c001abe8:	89 13                	mov    DWORD PTR [ebx],edx
c001abea:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001abf1:	89 03                	mov    DWORD PTR [ebx],eax
c001abf3:	56                   	push   esi
c001abf4:	e8 35 10 ff ff       	call   c000bc2e <free>
c001abf9:	83 c4 10             	add    esp,0x10
c001abfc:	b0 01                	mov    al,0x1
c001abfe:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ac04:	5b                   	pop    ebx
c001ac05:	5e                   	pop    esi
c001ac06:	5f                   	pop    edi
c001ac07:	5d                   	pop    ebp
c001ac08:	c3                   	ret    

c001ac09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001ac09:	55                   	push   ebp
c001ac0a:	57                   	push   edi
c001ac0b:	56                   	push   esi
c001ac0c:	53                   	push   ebx
c001ac0d:	83 ec 20             	sub    esp,0x20
c001ac10:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac14:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ac18:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac24:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ac2c:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001ac31:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001ac37:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001ac3d:	57                   	push   edi
c001ac3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac42:	50                   	push   eax
c001ac43:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac47:	50                   	push   eax
c001ac48:	e8 94 fd ff ff       	call   c001a9e1 <readRoot(unsigned int*, unsigned int*, char)>
c001ac4d:	5a                   	pop    edx
c001ac4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac52:	e8 ce 59 fe ff       	call   c0000625 <strlen>
c001ac57:	83 c4 10             	add    esp,0x10
c001ac5a:	83 f8 03             	cmp    eax,0x3
c001ac5d:	77 17                	ja     c001ac76 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ac5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac63:	89 03                	mov    DWORD PTR [ebx],eax
c001ac65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac69:	89 06                	mov    DWORD PTR [esi],eax
c001ac6b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001ac72:	b0 01                	mov    al,0x1
c001ac74:	eb 19                	jmp    c001ac8f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001ac76:	50                   	push   eax
c001ac77:	55                   	push   ebp
c001ac78:	57                   	push   edi
c001ac79:	56                   	push   esi
c001ac7a:	53                   	push   ebx
c001ac7b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ac7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ac83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ac87:	e8 aa fd ff ff       	call   c001aa36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ac8c:	83 c4 20             	add    esp,0x20
c001ac8f:	83 c4 1c             	add    esp,0x1c
c001ac92:	5b                   	pop    ebx
c001ac93:	5e                   	pop    esi
c001ac94:	5f                   	pop    edi
c001ac95:	5d                   	pop    ebp
c001ac96:	c3                   	ret    
c001ac97:	90                   	nop

c001ac98 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ac98:	57                   	push   edi
c001ac99:	56                   	push   esi
c001ac9a:	53                   	push   ebx
c001ac9b:	83 ec 10             	sub    esp,0x10
c001ac9e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aca2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aca6:	85 ff                	test   edi,edi
c001aca8:	74 7b                	je     c001ad25 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001acaa:	85 f6                	test   esi,esi
c001acac:	74 77                	je     c001ad25 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001acae:	83 ec 0c             	sub    esp,0xc
c001acb1:	6a 1c                	push   0x1c
c001acb3:	e8 66 0f ff ff       	call   c000bc1e <malloc>
c001acb8:	89 07                	mov    DWORD PTR [edi],eax
c001acba:	89 c3                	mov    ebx,eax
c001acbc:	58                   	pop    eax
c001acbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acc1:	50                   	push   eax
c001acc2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001acc5:	50                   	push   eax
c001acc6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001acca:	50                   	push   eax
c001accb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001accf:	50                   	push   eax
c001acd0:	56                   	push   esi
c001acd1:	e8 33 ff ff ff       	call   c001ac09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001acd6:	83 c4 20             	add    esp,0x20
c001acd9:	84 c0                	test   al,al
c001acdb:	74 07                	je     c001ace4 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001acdd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ace2:	74 0b                	je     c001acef <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ace4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ace8:	b8 01 00 00 00       	mov    eax,0x1
c001aced:	eb 3b                	jmp    c001ad2a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001acef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acf3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001acf7:	89 03                	mov    DWORD PTR [ebx],eax
c001acf9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ad00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad04:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ad0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ad12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ad15:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ad1c:	8a 06                	mov    al,BYTE PTR [esi]
c001ad1e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ad21:	31 c0                	xor    eax,eax
c001ad23:	eb 05                	jmp    c001ad2a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ad25:	b8 04 00 00 00       	mov    eax,0x4
c001ad2a:	83 c4 10             	add    esp,0x10
c001ad2d:	5b                   	pop    ebx
c001ad2e:	5e                   	pop    esi
c001ad2f:	5f                   	pop    edi
c001ad30:	c3                   	ret    
c001ad31:	90                   	nop

c001ad32 <ISO9660::exists(char const*)>:
c001ad32:	83 ec 28             	sub    esp,0x28
c001ad35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad39:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ad3d:	52                   	push   edx
c001ad3e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001ad41:	52                   	push   edx
c001ad42:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ad46:	52                   	push   edx
c001ad47:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ad4b:	52                   	push   edx
c001ad4c:	50                   	push   eax
c001ad4d:	e8 b7 fe ff ff       	call   c001ac09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ad52:	83 c4 3c             	add    esp,0x3c
c001ad55:	c3                   	ret    

c001ad56 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ad56:	56                   	push   esi
c001ad57:	53                   	push   ebx
c001ad58:	83 ec 14             	sub    esp,0x14
c001ad5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ad5f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ad63:	85 db                	test   ebx,ebx
c001ad65:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ad69:	0f 94 c2             	sete   dl
c001ad6c:	85 f6                	test   esi,esi
c001ad6e:	0f 94 c0             	sete   al
c001ad71:	08 c2                	or     dl,al
c001ad73:	75 68                	jne    c001addd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ad75:	85 c9                	test   ecx,ecx
c001ad77:	74 64                	je     c001addd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ad79:	83 ec 0c             	sub    esp,0xc
c001ad7c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad83:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ad89:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ad90:	50                   	push   eax
c001ad91:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001ad94:	50                   	push   eax
c001ad95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad99:	50                   	push   eax
c001ad9a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad9e:	50                   	push   eax
c001ad9f:	51                   	push   ecx
c001ada0:	e8 64 fe ff ff       	call   c001ac09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ada5:	83 c4 20             	add    esp,0x20
c001ada8:	ba 01 00 00 00       	mov    edx,0x1
c001adad:	84 c0                	test   al,al
c001adaf:	74 31                	je     c001ade2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001adb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adb5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001adbc:	89 03                	mov    DWORD PTR [ebx],eax
c001adbe:	ba 00 00 00 00       	mov    edx,0x0
c001adc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adc7:	85 c0                	test   eax,eax
c001adc9:	0f 95 06             	setne  BYTE PTR [esi]
c001adcc:	74 14                	je     c001ade2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001adce:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001add4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001addb:	eb 05                	jmp    c001ade2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001addd:	ba 04 00 00 00       	mov    edx,0x4
c001ade2:	83 c4 14             	add    esp,0x14
c001ade5:	89 d0                	mov    eax,edx
c001ade7:	5b                   	pop    ebx
c001ade8:	5e                   	pop    esi
c001ade9:	c3                   	ret    

c001adea <ISO9660::openDir(char const*, void**)>:
c001adea:	57                   	push   edi
c001adeb:	56                   	push   esi
c001adec:	53                   	push   ebx
c001aded:	83 ec 10             	sub    esp,0x10
c001adf0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001adf4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001adf8:	85 ff                	test   edi,edi
c001adfa:	0f 84 95 00 00 00    	je     c001ae95 <ISO9660::openDir(char const*, void**)+0xab>
c001ae00:	85 f6                	test   esi,esi
c001ae02:	0f 84 8d 00 00 00    	je     c001ae95 <ISO9660::openDir(char const*, void**)+0xab>
c001ae08:	83 ec 0c             	sub    esp,0xc
c001ae0b:	6a 1c                	push   0x1c
c001ae0d:	e8 0c 0e ff ff       	call   c000bc1e <malloc>
c001ae12:	89 07                	mov    DWORD PTR [edi],eax
c001ae14:	89 c3                	mov    ebx,eax
c001ae16:	59                   	pop    ecx
c001ae17:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae1b:	50                   	push   eax
c001ae1c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ae1f:	50                   	push   eax
c001ae20:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae24:	50                   	push   eax
c001ae25:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae29:	50                   	push   eax
c001ae2a:	56                   	push   esi
c001ae2b:	e8 d9 fd ff ff       	call   c001ac09 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ae30:	83 c4 20             	add    esp,0x20
c001ae33:	84 c0                	test   al,al
c001ae35:	74 07                	je     c001ae3e <ISO9660::openDir(char const*, void**)+0x54>
c001ae37:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae3c:	75 21                	jne    c001ae5f <ISO9660::openDir(char const*, void**)+0x75>
c001ae3e:	0f b6 c0             	movzx  eax,al
c001ae41:	52                   	push   edx
c001ae42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ae46:	50                   	push   eax
c001ae47:	68 3a 22 02 c0       	push   0xc002223a
c001ae4c:	e8 52 41 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001ae51:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ae55:	83 c4 10             	add    esp,0x10
c001ae58:	b8 01 00 00 00       	mov    eax,0x1
c001ae5d:	eb 3b                	jmp    c001ae9a <ISO9660::openDir(char const*, void**)+0xb0>
c001ae5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae63:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ae67:	89 03                	mov    DWORD PTR [ebx],eax
c001ae69:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ae70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae74:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ae7b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae82:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ae85:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ae8c:	8a 06                	mov    al,BYTE PTR [esi]
c001ae8e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ae91:	31 c0                	xor    eax,eax
c001ae93:	eb 05                	jmp    c001ae9a <ISO9660::openDir(char const*, void**)+0xb0>
c001ae95:	b8 04 00 00 00       	mov    eax,0x4
c001ae9a:	83 c4 10             	add    esp,0x10
c001ae9d:	5b                   	pop    ebx
c001ae9e:	5e                   	pop    esi
c001ae9f:	5f                   	pop    edi
c001aea0:	c3                   	ret    
c001aea1:	90                   	nop

c001aea2 <ISO9660::ISO9660()>:
c001aea2:	83 ec 0c             	sub    esp,0xc
c001aea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea9:	83 ec 0c             	sub    esp,0xc
c001aeac:	50                   	push   eax
c001aead:	e8 f6 43 ff ff       	call   c000f2a8 <Filesystem::Filesystem()>
c001aeb2:	83 c4 10             	add    esp,0x10
c001aeb5:	ba 60 22 02 c0       	mov    edx,0xc0022260
c001aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aebe:	89 10                	mov    DWORD PTR [eax],edx
c001aec0:	90                   	nop
c001aec1:	83 c4 0c             	add    esp,0xc
c001aec4:	c3                   	ret    
c001aec5:	90                   	nop

c001aec6 <SoundChannel::~SoundChannel()>:
c001aec6:	83 ec 0c             	sub    esp,0xc
c001aec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aecd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aed0:	83 ec 0c             	sub    esp,0xc
c001aed3:	50                   	push   eax
c001aed4:	e8 55 0d ff ff       	call   c000bc2e <free>
c001aed9:	83 c4 10             	add    esp,0x10
c001aedc:	90                   	nop
c001aedd:	83 c4 0c             	add    esp,0xc
c001aee0:	c3                   	ret    
c001aee1:	90                   	nop

c001aee2 <SoundChannel::setSpeed(float)>:
c001aee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aee6:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001aeea:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001aeed:	c3                   	ret    

c001aeee <SoundChannel::getSpeed()>:
c001aeee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aef2:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001aef5:	c3                   	ret    

c001aef6 <SoundChannel::setVolume(int)>:
c001aef6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aefa:	83 f8 64             	cmp    eax,0x64
c001aefd:	7e 05                	jle    c001af04 <SoundChannel::setVolume(int)+0xe>
c001aeff:	b8 64 00 00 00       	mov    eax,0x64
c001af04:	85 c0                	test   eax,eax
c001af06:	79 02                	jns    c001af0a <SoundChannel::setVolume(int)+0x14>
c001af08:	31 c0                	xor    eax,eax
c001af0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001af0e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001af11:	c3                   	ret    

c001af12 <SoundChannel::getVolume()>:
c001af12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af16:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001af19:	c3                   	ret    

c001af1a <SoundChannel::pause()>:
c001af1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af1e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001af22:	c3                   	ret    
c001af23:	90                   	nop

c001af24 <SoundChannel::SoundChannel(int, int, int, int)>:
c001af24:	83 ec 1c             	sub    esp,0x1c
c001af27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af2b:	e8 ea ff ff ff       	call   c001af1a <SoundChannel::pause()>
c001af30:	83 c4 04             	add    esp,0x4
c001af33:	6a 50                	push   0x50
c001af35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001af39:	e8 b8 ff ff ff       	call   c001aef6 <SoundChannel::setVolume(int)>
c001af3e:	83 c4 08             	add    esp,0x8
c001af41:	d9 e8                	fld1   
c001af43:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001af47:	d9 1c 24             	fstp   DWORD PTR [esp]
c001af4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001af4e:	e8 8f ff ff ff       	call   c001aee2 <SoundChannel::setSpeed(float)>
c001af53:	83 c4 08             	add    esp,0x8
c001af56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af5e:	89 10                	mov    DWORD PTR [eax],edx
c001af60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af68:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001af6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af6f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001af73:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001af76:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001af7b:	75 23                	jne    c001afa0 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001af7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af81:	8b 10                	mov    edx,DWORD PTR [eax]
c001af83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001af8a:	0f af c2             	imul   eax,edx
c001af8d:	85 c0                	test   eax,eax
c001af8f:	79 03                	jns    c001af94 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001af91:	83 c0 03             	add    eax,0x3
c001af94:	c1 f8 02             	sar    eax,0x2
c001af97:	05 a0 0f 00 00       	add    eax,0xfa0
c001af9c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afa4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001afa8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001afab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afaf:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001afb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afba:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001afc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afc5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001afc8:	c1 e0 02             	shl    eax,0x2
c001afcb:	83 ec 0c             	sub    esp,0xc
c001afce:	50                   	push   eax
c001afcf:	e8 4a 0c ff ff       	call   c000bc1e <malloc>
c001afd4:	83 c4 10             	add    esp,0x10
c001afd7:	89 c2                	mov    edx,eax
c001afd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afdd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001afe0:	83 ec 04             	sub    esp,0x4
c001afe3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001afe7:	50                   	push   eax
c001afe8:	6a 01                	push   0x1
c001afea:	6a 04                	push   0x4
c001afec:	e8 5a d8 fe ff       	call   c000884b <src_new>
c001aff1:	83 c4 10             	add    esp,0x10
c001aff4:	89 c2                	mov    edx,eax
c001aff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001affa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001affd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b001:	85 c0                	test   eax,eax
c001b003:	74 10                	je     c001b015 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001b005:	83 ec 0c             	sub    esp,0xc
c001b008:	68 bc 22 02 c0       	push   0xc00222bc
c001b00d:	e8 26 9c ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001b012:	83 c4 10             	add    esp,0x10
c001b015:	90                   	nop
c001b016:	83 c4 1c             	add    esp,0x1c
c001b019:	c3                   	ret    

c001b01a <SoundChannel::play()>:
c001b01a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b01e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001b022:	c3                   	ret    
c001b023:	90                   	nop

c001b024 <SoundChannel::paused()>:
c001b024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b028:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001b02b:	c3                   	ret    

c001b02c <SoundChannel::getSampleRate()>:
c001b02c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b030:	8b 00                	mov    eax,DWORD PTR [eax]
c001b032:	c3                   	ret    
c001b033:	90                   	nop

c001b034 <SoundChannel::getBits()>:
c001b034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b03b:	c3                   	ret    

c001b03c <SoundChannel::getBufferUsed()>:
c001b03c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b040:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b043:	c3                   	ret    

c001b044 <SoundChannel::getBufferSize()>:
c001b044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b048:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b04b:	c3                   	ret    

c001b04c <SoundChannel::unbuffer(float*, int, int)>:
c001b04c:	53                   	push   ebx
c001b04d:	83 ec 40             	sub    esp,0x40
c001b050:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001b054:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b05c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b05f:	db 03                	fild   DWORD PTR [ebx]
c001b061:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b065:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001b069:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b06c:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001b06f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b073:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001b077:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b07b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b07f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b083:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b087:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b08b:	50                   	push   eax
c001b08c:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001b08f:	e8 71 d4 fe ff       	call   c0008505 <src_process>
c001b094:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b098:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001b09b:	83 c4 0c             	add    esp,0xc
c001b09e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b0a1:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001b0a4:	29 d0                	sub    eax,edx
c001b0a6:	c1 e0 02             	shl    eax,0x2
c001b0a9:	50                   	push   eax
c001b0aa:	8d 04 91             	lea    eax,[ecx+edx*4]
c001b0ad:	50                   	push   eax
c001b0ae:	51                   	push   ecx
c001b0af:	e8 e6 54 fe ff       	call   c000059a <memmove>
c001b0b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b0b8:	83 c4 48             	add    esp,0x48
c001b0bb:	5b                   	pop    ebx
c001b0bc:	c3                   	ret    
c001b0bd:	90                   	nop

c001b0be <SoundChannel::buffer8(unsigned char*, int)>:
c001b0be:	53                   	push   ebx
c001b0bf:	31 c0                	xor    eax,eax
c001b0c1:	83 ec 08             	sub    esp,0x8
c001b0c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b0c8:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001b0cb:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001b0ce:	74 35                	je     c001b105 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b0d0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001b0d4:	7d 2f                	jge    c001b105 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b0d6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b0da:	d9 05 d8 22 02 c0    	fld    DWORD PTR ds:0xc00222d8
c001b0e0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001b0e4:	40                   	inc    eax
c001b0e5:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001b0ea:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001b0ed:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001b0f1:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b0f4:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001b0f7:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001b0fa:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001b0fd:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b100:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001b103:	eb c9                	jmp    c001b0ce <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001b105:	83 c4 08             	add    esp,0x8
c001b108:	5b                   	pop    ebx
c001b109:	c3                   	ret    

c001b10a <SoundDevice::SoundDevice(char const*)>:
c001b10a:	83 ec 1c             	sub    esp,0x1c
c001b10d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b111:	83 ec 08             	sub    esp,0x8
c001b114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b118:	50                   	push   eax
c001b119:	e8 80 54 ff ff       	call   c001059e <Device::Device(char const*)>
c001b11e:	83 c4 10             	add    esp,0x10
c001b121:	ba e4 22 02 c0       	mov    edx,0xc00222e4
c001b126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b12a:	89 10                	mov    DWORD PTR [eax],edx
c001b12c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b130:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b13a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b13e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b148:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b150:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b155:	7f 19                	jg     c001b170 <SoundDevice::SoundDevice(char const*)+0x66>
c001b157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b15b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b15f:	83 c2 54             	add    edx,0x54
c001b162:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b16a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b16e:	eb e0                	jmp    c001b150 <SoundDevice::SoundDevice(char const*)+0x46>
c001b170:	90                   	nop
c001b171:	83 c4 1c             	add    esp,0x1c
c001b174:	c3                   	ret    
c001b175:	90                   	nop

c001b176 <SoundDevice::~SoundDevice()>:
c001b176:	53                   	push   ebx
c001b177:	83 ec 18             	sub    esp,0x18
c001b17a:	ba e4 22 02 c0       	mov    edx,0xc00222e4
c001b17f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b183:	89 10                	mov    DWORD PTR [eax],edx
c001b185:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b18d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b192:	7f 46                	jg     c001b1da <SoundDevice::~SoundDevice()+0x64>
c001b194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b19c:	83 c2 54             	add    edx,0x54
c001b19f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001b1a3:	85 c0                	test   eax,eax
c001b1a5:	74 2d                	je     c001b1d4 <SoundDevice::~SoundDevice()+0x5e>
c001b1a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1af:	83 c2 54             	add    edx,0x54
c001b1b2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001b1b6:	85 db                	test   ebx,ebx
c001b1b8:	74 1a                	je     c001b1d4 <SoundDevice::~SoundDevice()+0x5e>
c001b1ba:	83 ec 0c             	sub    esp,0xc
c001b1bd:	53                   	push   ebx
c001b1be:	e8 03 fd ff ff       	call   c001aec6 <SoundChannel::~SoundChannel()>
c001b1c3:	83 c4 10             	add    esp,0x10
c001b1c6:	83 ec 08             	sub    esp,0x8
c001b1c9:	6a 2c                	push   0x2c
c001b1cb:	53                   	push   ebx
c001b1cc:	e8 f2 3c ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001b1d1:	83 c4 10             	add    esp,0x10
c001b1d4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b1d8:	eb b3                	jmp    c001b18d <SoundDevice::~SoundDevice()+0x17>
c001b1da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1de:	83 ec 0c             	sub    esp,0xc
c001b1e1:	50                   	push   eax
c001b1e2:	e8 69 50 ff ff       	call   c0010250 <Device::~Device()>
c001b1e7:	83 c4 10             	add    esp,0x10
c001b1ea:	90                   	nop
c001b1eb:	83 c4 18             	add    esp,0x18
c001b1ee:	5b                   	pop    ebx
c001b1ef:	c3                   	ret    

c001b1f0 <SoundDevice::~SoundDevice()>:
c001b1f0:	83 ec 0c             	sub    esp,0xc
c001b1f3:	83 ec 0c             	sub    esp,0xc
c001b1f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1fa:	e8 77 ff ff ff       	call   c001b176 <SoundDevice::~SoundDevice()>
c001b1ff:	83 c4 10             	add    esp,0x10
c001b202:	83 ec 08             	sub    esp,0x8
c001b205:	68 e4 01 00 00       	push   0x1e4
c001b20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b20e:	e8 b0 3c ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001b213:	83 c4 10             	add    esp,0x10
c001b216:	83 c4 0c             	add    esp,0xc
c001b219:	c3                   	ret    

c001b21a <SoundDevice::getFreeChannelNum()>:
c001b21a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b21e:	31 c0                	xor    eax,eax
c001b220:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001b228:	74 09                	je     c001b233 <SoundDevice::getFreeChannelNum()+0x19>
c001b22a:	40                   	inc    eax
c001b22b:	83 f8 20             	cmp    eax,0x20
c001b22e:	75 f0                	jne    c001b220 <SoundDevice::getFreeChannelNum()+0x6>
c001b230:	83 c8 ff             	or     eax,0xffffffff
c001b233:	c3                   	ret    

c001b234 <SoundDevice::addChannel(SoundChannel*)>:
c001b234:	56                   	push   esi
c001b235:	53                   	push   ebx
c001b236:	51                   	push   ecx
c001b237:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b23b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b23f:	53                   	push   ebx
c001b240:	e8 d5 ff ff ff       	call   c001b21a <SoundDevice::getFreeChannelNum()>
c001b245:	5a                   	pop    edx
c001b246:	83 f8 ff             	cmp    eax,0xffffffff
c001b249:	74 51                	je     c001b29c <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b24b:	85 f6                	test   esi,esi
c001b24d:	74 4d                	je     c001b29c <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b24f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001b256:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001b25d:	75 30                	jne    c001b28f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001b25f:	83 ec 0c             	sub    esp,0xc
c001b262:	56                   	push   esi
c001b263:	e8 c4 fd ff ff       	call   c001b02c <SoundChannel::getSampleRate()>
c001b268:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001b26e:	89 34 24             	mov    DWORD PTR [esp],esi
c001b271:	e8 be fd ff ff       	call   c001b034 <SoundChannel::getBits()>
c001b276:	83 c4 0c             	add    esp,0xc
c001b279:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001b27f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b281:	50                   	push   eax
c001b282:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001b288:	53                   	push   ebx
c001b289:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001b295:	b8 01 00 00 00       	mov    eax,0x1
c001b29a:	eb 03                	jmp    c001b29f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001b29c:	83 c8 ff             	or     eax,0xffffffff
c001b29f:	5a                   	pop    edx
c001b2a0:	5b                   	pop    ebx
c001b2a1:	5e                   	pop    esi
c001b2a2:	c3                   	ret    
c001b2a3:	90                   	nop

c001b2a4 <SoundDevice::removeChannel(int)>:
c001b2a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2ac:	83 fa 1f             	cmp    edx,0x1f
c001b2af:	77 23                	ja     c001b2d4 <SoundDevice::removeChannel(int)+0x30>
c001b2b1:	8d 14 90             	lea    edx,[eax+edx*4]
c001b2b4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001b2bb:	74 17                	je     c001b2d4 <SoundDevice::removeChannel(int)+0x30>
c001b2bd:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001b2c7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001b2cd:	75 05                	jne    c001b2d4 <SoundDevice::removeChannel(int)+0x30>
c001b2cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2d1:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001b2d4:	c3                   	ret    
c001b2d5:	90                   	nop

c001b2d6 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001b2d6:	56                   	push   esi
c001b2d7:	53                   	push   ebx
c001b2d8:	31 db                	xor    ebx,ebx
c001b2da:	83 ec 14             	sub    esp,0x14
c001b2dd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b2e1:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001b2e5:	7d 55                	jge    c001b33c <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001b2e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b2eb:	d9 e8                	fld1   
c001b2ed:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001b2f0:	d8 0d 14 23 02 c0    	fmul   DWORD PTR ds:0xc0022314
c001b2f6:	d8 0d 18 23 02 c0    	fmul   DWORD PTR ds:0xc0022318
c001b2fc:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001b300:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b304:	d8 15 1c 23 02 c0    	fcom   DWORD PTR ds:0xc002231c
c001b30a:	df e0                	fnstsw ax
c001b30c:	9e                   	sahf   
c001b30d:	72 08                	jb     c001b317 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001b30f:	dd d8                	fstp   st(0)
c001b311:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001b315:	eb 22                	jmp    c001b339 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b317:	d9 ee                	fldz   
c001b319:	d8 d9                	fcomp  st(1)
c001b31b:	df e0                	fnstsw ax
c001b31d:	9e                   	sahf   
c001b31e:	72 08                	jb     c001b328 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001b320:	dd d8                	fstp   st(0)
c001b322:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001b326:	eb 11                	jmp    c001b339 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b328:	83 ec 10             	sub    esp,0x10
c001b32b:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b32e:	e8 09 36 00 00       	call   c001e93c <lrintf>
c001b333:	83 c4 10             	add    esp,0x10
c001b336:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001b339:	43                   	inc    ebx
c001b33a:	eb a5                	jmp    c001b2e1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001b33c:	83 c4 14             	add    esp,0x14
c001b33f:	5b                   	pop    ebx
c001b340:	5e                   	pop    esi
c001b341:	c3                   	ret    

c001b342 <SoundDevice::getAudio(int, float*, float*)>:
c001b342:	55                   	push   ebp
c001b343:	57                   	push   edi
c001b344:	56                   	push   esi
c001b345:	53                   	push   ebx
c001b346:	31 db                	xor    ebx,ebx
c001b348:	83 ec 20             	sub    esp,0x20
c001b34b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b34f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b353:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b357:	c1 e0 02             	shl    eax,0x2
c001b35a:	50                   	push   eax
c001b35b:	6a 00                	push   0x0
c001b35d:	55                   	push   ebp
c001b35e:	e8 a5 52 fe ff       	call   c0000608 <memset>
c001b363:	83 c4 10             	add    esp,0x10
c001b366:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b36a:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001b371:	85 c0                	test   eax,eax
c001b373:	0f 84 94 00 00 00    	je     c001b40d <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b379:	83 ec 0c             	sub    esp,0xc
c001b37c:	50                   	push   eax
c001b37d:	e8 a2 fc ff ff       	call   c001b024 <SoundChannel::paused()>
c001b382:	83 c4 10             	add    esp,0x10
c001b385:	84 c0                	test   al,al
c001b387:	0f 85 80 00 00 00    	jne    c001b40d <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b38d:	83 ec 0c             	sub    esp,0xc
c001b390:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b397:	e8 76 fb ff ff       	call   c001af12 <SoundChannel::getVolume()>
c001b39c:	83 c4 10             	add    esp,0x10
c001b39f:	85 c0                	test   eax,eax
c001b3a1:	74 6a                	je     c001b40d <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b3a3:	83 ec 0c             	sub    esp,0xc
c001b3a6:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b3ad:	e8 60 fb ff ff       	call   c001af12 <SoundChannel::getVolume()>
c001b3b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b3b6:	d9 05 20 23 02 c0    	fld    DWORD PTR ds:0xc0022320
c001b3bc:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b3c0:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b3c4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b3c8:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b3ce:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b3d2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b3d9:	e8 6e fc ff ff       	call   c001b04c <SoundChannel::unbuffer(float*, int, int)>
c001b3de:	83 c4 20             	add    esp,0x20
c001b3e1:	31 d2                	xor    edx,edx
c001b3e3:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b3e7:	39 c2                	cmp    edx,eax
c001b3e9:	7d 1a                	jge    c001b405 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b3eb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b3ef:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001b3f2:	d8 c9                	fmul   st,st(1)
c001b3f4:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001b3fa:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001b3fe:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001b402:	42                   	inc    edx
c001b403:	eb e2                	jmp    c001b3e7 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001b405:	dd d8                	fstp   st(0)
c001b407:	39 c7                	cmp    edi,eax
c001b409:	7e 02                	jle    c001b40d <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b40b:	89 c7                	mov    edi,eax
c001b40d:	43                   	inc    ebx
c001b40e:	83 fb 20             	cmp    ebx,0x20
c001b411:	0f 85 53 ff ff ff    	jne    c001b36a <SoundDevice::getAudio(int, float*, float*)+0x28>
c001b417:	83 c4 1c             	add    esp,0x1c
c001b41a:	89 f8                	mov    eax,edi
c001b41c:	5b                   	pop    ebx
c001b41d:	5e                   	pop    esi
c001b41e:	5f                   	pop    edi
c001b41f:	5d                   	pop    ebp
c001b420:	c3                   	ret    
c001b421:	90                   	nop

c001b422 <PCI::open(int, int, void*)>:
c001b422:	83 ec 18             	sub    esp,0x18
c001b425:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b429:	8b 10                	mov    edx,DWORD PTR [eax]
c001b42b:	50                   	push   eax
c001b42c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b42f:	31 c0                	xor    eax,eax
c001b431:	83 c4 1c             	add    esp,0x1c
c001b434:	c3                   	ret    
c001b435:	90                   	nop

c001b436 <PCI::close(int, int, void*)>:
c001b436:	31 c0                	xor    eax,eax
c001b438:	c3                   	ret    
c001b439:	90                   	nop

c001b43a <PCI::PCI()>:
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b441:	83 ec 08             	sub    esp,0x8
c001b444:	68 24 23 02 c0       	push   0xc0022324
c001b449:	50                   	push   eax
c001b44a:	e8 db 47 ff ff       	call   c000fc2a <Bus::Bus(char const*)>
c001b44f:	83 c4 10             	add    esp,0x10
c001b452:	ba d0 23 02 c0       	mov    edx,0xc00223d0
c001b457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b45b:	89 10                	mov    DWORD PTR [eax],edx
c001b45d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b461:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b467:	0f b6 d0             	movzx  edx,al
c001b46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b46e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b479:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b47f:	0f b6 d0             	movzx  edx,al
c001b482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b486:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b48f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b495:	8d 50 01             	lea    edx,[eax+0x1]
c001b498:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b49c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b4a2:	0f b6 d0             	movzx  edx,al
c001b4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4a9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b4ad:	83 c9 c0             	or     ecx,0xffffffc0
c001b4b0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b4b4:	90                   	nop
c001b4b5:	83 c4 0c             	add    esp,0xc
c001b4b8:	c3                   	ret    
c001b4b9:	90                   	nop

c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b4ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b4be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b4c3:	89 ca                	mov    edx,ecx
c001b4c5:	c1 e0 10             	shl    eax,0x10
c001b4c8:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b4ce:	09 d0                	or     eax,edx
c001b4d0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b4d5:	c1 e2 08             	shl    edx,0x8
c001b4d8:	09 d0                	or     eax,edx
c001b4da:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b4df:	c1 e2 0b             	shl    edx,0xb
c001b4e2:	09 d0                	or     eax,edx
c001b4e4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b4e9:	0d 00 00 00 80       	or     eax,0x80000000
c001b4ee:	ef                   	out    dx,eax
c001b4ef:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b4f4:	ed                   	in     eax,dx
c001b4f5:	83 e1 02             	and    ecx,0x2
c001b4f8:	0f b6 c9             	movzx  ecx,cl
c001b4fb:	c1 e1 03             	shl    ecx,0x3
c001b4fe:	d3 e8                	shr    eax,cl
c001b500:	c3                   	ret    
c001b501:	90                   	nop

c001b502 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b502:	6a 00                	push   0x0
c001b504:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b509:	50                   	push   eax
c001b50a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b50f:	50                   	push   eax
c001b510:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b515:	50                   	push   eax
c001b516:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b51a:	e8 9b ff ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b51f:	83 c4 14             	add    esp,0x14
c001b522:	c3                   	ret    
c001b523:	90                   	nop

c001b524 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b524:	6a 0e                	push   0xe
c001b526:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b52b:	50                   	push   eax
c001b52c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b531:	50                   	push   eax
c001b532:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b537:	50                   	push   eax
c001b538:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b53c:	e8 79 ff ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b541:	83 c4 14             	add    esp,0x14
c001b544:	0f b6 c0             	movzx  eax,al
c001b547:	c3                   	ret    

c001b548 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b548:	55                   	push   ebp
c001b549:	57                   	push   edi
c001b54a:	56                   	push   esi
c001b54b:	53                   	push   ebx
c001b54c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b551:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b556:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b55b:	6a 0a                	push   0xa
c001b55d:	56                   	push   esi
c001b55e:	55                   	push   ebp
c001b55f:	57                   	push   edi
c001b560:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b564:	e8 51 ff ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b569:	6a 0a                	push   0xa
c001b56b:	89 c3                	mov    ebx,eax
c001b56d:	56                   	push   esi
c001b56e:	0f b6 db             	movzx  ebx,bl
c001b571:	55                   	push   ebp
c001b572:	57                   	push   edi
c001b573:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b577:	e8 3e ff ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b57c:	83 c4 28             	add    esp,0x28
c001b57f:	25 00 ff 00 00       	and    eax,0xff00
c001b584:	09 d8                	or     eax,ebx
c001b586:	5b                   	pop    ebx
c001b587:	5e                   	pop    esi
c001b588:	5f                   	pop    edi
c001b589:	5d                   	pop    ebp
c001b58a:	c3                   	ret    
c001b58b:	90                   	nop

c001b58c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b58c:	6a 08                	push   0x8
c001b58e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b593:	50                   	push   eax
c001b594:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b599:	50                   	push   eax
c001b59a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b59f:	50                   	push   eax
c001b5a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5a4:	e8 11 ff ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5a9:	83 c4 14             	add    esp,0x14
c001b5ac:	0f b6 c4             	movzx  eax,ah
c001b5af:	c3                   	ret    

c001b5b0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b5b0:	6a 08                	push   0x8
c001b5b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5b7:	50                   	push   eax
c001b5b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5bd:	50                   	push   eax
c001b5be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5c3:	50                   	push   eax
c001b5c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5c8:	e8 ed fe ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5cd:	83 c4 14             	add    esp,0x14
c001b5d0:	c3                   	ret    
c001b5d1:	90                   	nop

c001b5d2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b5d2:	6a 3c                	push   0x3c
c001b5d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5d9:	50                   	push   eax
c001b5da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5df:	50                   	push   eax
c001b5e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5e5:	50                   	push   eax
c001b5e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5ea:	e8 cb fe ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5ef:	83 c4 14             	add    esp,0x14
c001b5f2:	c3                   	ret    
c001b5f3:	90                   	nop

c001b5f4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b5f4:	6a 18                	push   0x18
c001b5f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5fb:	50                   	push   eax
c001b5fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b601:	50                   	push   eax
c001b602:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b607:	50                   	push   eax
c001b608:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b60c:	e8 a9 fe ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b611:	83 c4 14             	add    esp,0x14
c001b614:	0f b6 c4             	movzx  eax,ah
c001b617:	c3                   	ret    

c001b618 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b618:	55                   	push   ebp
c001b619:	57                   	push   edi
c001b61a:	56                   	push   esi
c001b61b:	53                   	push   ebx
c001b61c:	50                   	push   eax
c001b61d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b621:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b626:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b62b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b630:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b637:	8d 43 12             	lea    eax,[ebx+0x12]
c001b63a:	83 c3 10             	add    ebx,0x10
c001b63d:	0f b6 c0             	movzx  eax,al
c001b640:	0f b6 db             	movzx  ebx,bl
c001b643:	50                   	push   eax
c001b644:	51                   	push   ecx
c001b645:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b649:	57                   	push   edi
c001b64a:	55                   	push   ebp
c001b64b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b64f:	e8 66 fe ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b654:	53                   	push   ebx
c001b655:	89 c6                	mov    esi,eax
c001b657:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b65b:	c1 e6 10             	shl    esi,0x10
c001b65e:	51                   	push   ecx
c001b65f:	57                   	push   edi
c001b660:	55                   	push   ebp
c001b661:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b665:	e8 50 fe ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b66a:	83 c4 2c             	add    esp,0x2c
c001b66d:	0f b7 c0             	movzx  eax,ax
c001b670:	5b                   	pop    ebx
c001b671:	09 f0                	or     eax,esi
c001b673:	5e                   	pop    esi
c001b674:	5f                   	pop    edi
c001b675:	5d                   	pop    ebp
c001b676:	c3                   	ret    
c001b677:	90                   	nop

c001b678 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b678:	53                   	push   ebx
c001b679:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b67e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b683:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b687:	c1 e1 10             	shl    ecx,0x10
c001b68a:	25 fc 00 00 00       	and    eax,0xfc
c001b68f:	09 c1                	or     ecx,eax
c001b691:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b696:	c1 e0 08             	shl    eax,0x8
c001b699:	09 c1                	or     ecx,eax
c001b69b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b6a0:	c1 e0 0b             	shl    eax,0xb
c001b6a3:	09 c1                	or     ecx,eax
c001b6a5:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b6ab:	89 c8                	mov    eax,ecx
c001b6ad:	ef                   	out    dx,eax
c001b6ae:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6b3:	ed                   	in     eax,dx
c001b6b4:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b6b9:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b6be:	74 0a                	je     c001b6ca <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b6c0:	0f b7 d8             	movzx  ebx,ax
c001b6c3:	89 d0                	mov    eax,edx
c001b6c5:	c1 e0 10             	shl    eax,0x10
c001b6c8:	eb 05                	jmp    c001b6cf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b6ca:	66 31 c0             	xor    ax,ax
c001b6cd:	89 d3                	mov    ebx,edx
c001b6cf:	09 c3                	or     ebx,eax
c001b6d1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6d6:	89 c8                	mov    eax,ecx
c001b6d8:	ef                   	out    dx,eax
c001b6d9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6de:	89 d8                	mov    eax,ebx
c001b6e0:	ef                   	out    dx,eax
c001b6e1:	5b                   	pop    ebx
c001b6e2:	c3                   	ret    
c001b6e3:	90                   	nop

c001b6e4 <PCI::checkBus(unsigned char)>:
c001b6e4:	56                   	push   esi
c001b6e5:	53                   	push   ebx
c001b6e6:	31 db                	xor    ebx,ebx
c001b6e8:	51                   	push   ecx
c001b6e9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b6ee:	52                   	push   edx
c001b6ef:	53                   	push   ebx
c001b6f0:	43                   	inc    ebx
c001b6f1:	56                   	push   esi
c001b6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6f6:	e8 4d 03 00 00       	call   c001ba48 <PCI::checkDevice(unsigned char, unsigned char)>
c001b6fb:	83 c4 10             	add    esp,0x10
c001b6fe:	83 fb 20             	cmp    ebx,0x20
c001b701:	75 eb                	jne    c001b6ee <PCI::checkBus(unsigned char)+0xa>
c001b703:	58                   	pop    eax
c001b704:	5b                   	pop    ebx
c001b705:	5e                   	pop    esi
c001b706:	c3                   	ret    
c001b707:	90                   	nop

c001b708 <PCI::foundDevice(PCIDeviceInfo)>:
c001b708:	55                   	push   ebp
c001b709:	57                   	push   edi
c001b70a:	56                   	push   esi
c001b70b:	53                   	push   ebx
c001b70c:	83 ec 1c             	sub    esp,0x1c
c001b70f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b713:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b719:	0f 84 51 01 00 00    	je     c001b870 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b71f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b723:	66 81 f9 06 04       	cmp    cx,0x406
c001b728:	75 2c                	jne    c001b756 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b72a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b72f:	50                   	push   eax
c001b730:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b735:	50                   	push   eax
c001b736:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b73b:	50                   	push   eax
c001b73c:	56                   	push   esi
c001b73d:	e8 b2 fe ff ff       	call   c001b5f4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b742:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b746:	0f b6 c0             	movzx  eax,al
c001b749:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b74d:	83 c4 2c             	add    esp,0x2c
c001b750:	5b                   	pop    ebx
c001b751:	5e                   	pop    esi
c001b752:	5f                   	pop    edi
c001b753:	5d                   	pop    ebp
c001b754:	eb 8e                	jmp    c001b6e4 <PCI::checkBus(unsigned char)>
c001b756:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b75a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b760:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b764:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b768:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b76c:	88 d3                	mov    bl,dl
c001b76e:	85 c0                	test   eax,eax
c001b770:	74 33                	je     c001b7a5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b772:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b775:	85 d2                	test   edx,edx
c001b777:	74 28                	je     c001b7a1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b779:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b77f:	31 ef                	xor    edi,ebp
c001b781:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b787:	75 18                	jne    c001b7a1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b789:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b78d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b793:	75 0c                	jne    c001b7a1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b795:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b79b:	0f 84 cf 00 00 00    	je     c001b870 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b7a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7a3:	eb c9                	jmp    c001b76e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b7a5:	66 81 f9 01 06       	cmp    cx,0x601
c001b7aa:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b7ae:	75 18                	jne    c001b7c8 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b7b0:	83 ec 0c             	sub    esp,0xc
c001b7b3:	68 58 01 00 00       	push   0x158
c001b7b8:	e8 f7 36 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001b7bd:	59                   	pop    ecx
c001b7be:	89 c5                	mov    ebp,eax
c001b7c0:	5f                   	pop    edi
c001b7c1:	68 2c 23 02 c0       	push   0xc002232c
c001b7c6:	eb 7d                	jmp    c001b845 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b7c8:	66 81 f9 01 01       	cmp    cx,0x101
c001b7cd:	75 60                	jne    c001b82f <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b7cf:	83 ec 0c             	sub    esp,0xc
c001b7d2:	68 70 02 00 00       	push   0x270
c001b7d7:	e8 d8 36 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001b7dc:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7df:	89 c5                	mov    ebp,eax
c001b7e1:	e8 26 03 00 00       	call   c001bb0c <IDE::IDE()>
c001b7e6:	58                   	pop    eax
c001b7e7:	5a                   	pop    edx
c001b7e8:	55                   	push   ebp
c001b7e9:	56                   	push   esi
c001b7ea:	e8 bf 4b ff ff       	call   c00103ae <Device::addChild(Device*)>
c001b7ef:	83 ec 1c             	sub    esp,0x1c
c001b7f2:	b9 09 00 00 00       	mov    ecx,0x9
c001b7f7:	fc                   	cld    
c001b7f8:	89 e7                	mov    edi,esp
c001b7fa:	89 de                	mov    esi,ebx
c001b7fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b7fe:	55                   	push   ebp
c001b7ff:	e8 84 4a ff ff       	call   c0010288 <Device::preOpenPCI(PCIDeviceInfo)>
c001b804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b807:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b80b:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b813:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b81b:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b823:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b826:	83 c4 4c             	add    esp,0x4c
c001b829:	5b                   	pop    ebx
c001b82a:	5e                   	pop    esi
c001b82b:	5f                   	pop    edi
c001b82c:	5d                   	pop    ebp
c001b82d:	ff e0                	jmp    eax
c001b82f:	83 ec 0c             	sub    esp,0xc
c001b832:	68 58 01 00 00       	push   0x158
c001b837:	e8 78 36 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001b83c:	59                   	pop    ecx
c001b83d:	89 c5                	mov    ebp,eax
c001b83f:	5f                   	pop    edi
c001b840:	68 4b 23 02 c0       	push   0xc002234b
c001b845:	55                   	push   ebp
c001b846:	e8 4f 4e ff ff       	call   c001069a <DriverlessDevice::DriverlessDevice(char const*)>
c001b84b:	58                   	pop    eax
c001b84c:	5a                   	pop    edx
c001b84d:	55                   	push   ebp
c001b84e:	56                   	push   esi
c001b84f:	e8 5a 4b ff ff       	call   c00103ae <Device::addChild(Device*)>
c001b854:	b9 09 00 00 00       	mov    ecx,0x9
c001b859:	fc                   	cld    
c001b85a:	89 df                	mov    edi,ebx
c001b85c:	89 de                	mov    esi,ebx
c001b85e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b860:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b864:	83 c4 2c             	add    esp,0x2c
c001b867:	5b                   	pop    ebx
c001b868:	5e                   	pop    esi
c001b869:	5f                   	pop    edi
c001b86a:	5d                   	pop    ebp
c001b86b:	e9 18 4a ff ff       	jmp    c0010288 <Device::preOpenPCI(PCIDeviceInfo)>
c001b870:	83 c4 1c             	add    esp,0x1c
c001b873:	5b                   	pop    ebx
c001b874:	5e                   	pop    esi
c001b875:	5f                   	pop    edi
c001b876:	5d                   	pop    ebp
c001b877:	c3                   	ret    

c001b878 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b878:	55                   	push   ebp
c001b879:	57                   	push   edi
c001b87a:	56                   	push   esi
c001b87b:	53                   	push   ebx
c001b87c:	83 ec 5c             	sub    esp,0x5c
c001b87f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b883:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b887:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b88b:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b890:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b894:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b898:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b89d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b8a1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b8a6:	6a 0c                	push   0xc
c001b8a8:	55                   	push   ebp
c001b8a9:	53                   	push   ebx
c001b8aa:	57                   	push   edi
c001b8ab:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b8b2:	e8 03 fc ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b8b7:	83 c4 0c             	add    esp,0xc
c001b8ba:	6a 00                	push   0x0
c001b8bc:	68 65 23 02 c0       	push   0xc0022365
c001b8c1:	e8 dd 36 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001b8c6:	55                   	push   ebp
c001b8c7:	53                   	push   ebx
c001b8c8:	57                   	push   edi
c001b8c9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b8d0:	e8 73 fc ff ff       	call   c001b548 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b8d5:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b8da:	83 c4 20             	add    esp,0x20
c001b8dd:	55                   	push   ebp
c001b8de:	53                   	push   ebx
c001b8df:	57                   	push   edi
c001b8e0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b8e4:	e8 e9 fc ff ff       	call   c001b5d2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b8e9:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b8f0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b8f4:	55                   	push   ebp
c001b8f5:	53                   	push   ebx
c001b8f6:	57                   	push   edi
c001b8f7:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b8fe:	e8 b7 fb ff ff       	call   c001b4ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b903:	0f b6 c4             	movzx  eax,ah
c001b906:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b90a:	83 c4 18             	add    esp,0x18
c001b90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b911:	68 79 23 02 c0       	push   0xc0022379
c001b916:	e8 88 36 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001b91b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b91f:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b923:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b931:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b938:	74 6c                	je     c001b9a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b93a:	31 f6                	xor    esi,esi
c001b93c:	8b 15 48 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023648
c001b942:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b948:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b94e:	7e 56                	jle    c001b9a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b950:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b953:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b95a:	39 cb                	cmp    ebx,ecx
c001b95c:	75 45                	jne    c001b9a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b95e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b965:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b969:	75 38                	jne    c001b9a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b96b:	83 ec 0c             	sub    esp,0xc
c001b96e:	68 88 23 02 c0       	push   0xc0022388
c001b973:	e8 2b 36 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001b978:	8b 15 48 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023648
c001b97e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b984:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b98c:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b990:	52                   	push   edx
c001b991:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b995:	53                   	push   ebx
c001b996:	68 ad 23 02 c0       	push   0xc00223ad
c001b99b:	e8 03 36 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001b9a0:	83 c4 20             	add    esp,0x20
c001b9a3:	46                   	inc    esi
c001b9a4:	eb 96                	jmp    c001b93c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b9a6:	31 d2                	xor    edx,edx
c001b9a8:	83 ec 0c             	sub    esp,0xc
c001b9ab:	55                   	push   ebp
c001b9ac:	53                   	push   ebx
c001b9ad:	57                   	push   edi
c001b9ae:	52                   	push   edx
c001b9af:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b9b3:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b9ba:	e8 59 fc ff ff       	call   c001b618 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b9bf:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b9c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b9c7:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b9cb:	42                   	inc    edx
c001b9cc:	83 c4 20             	add    esp,0x20
c001b9cf:	83 fa 06             	cmp    edx,0x6
c001b9d2:	75 d4                	jne    c001b9a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b9d4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b9d8:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b9dc:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b9e0:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b9e4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b9e8:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b9ec:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b9f1:	86 e0                	xchg   al,ah
c001b9f3:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b9f8:	55                   	push   ebp
c001b9f9:	53                   	push   ebx
c001b9fa:	57                   	push   edi
c001b9fb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b9ff:	e8 88 fb ff ff       	call   c001b58c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ba04:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ba08:	55                   	push   ebp
c001ba09:	53                   	push   ebx
c001ba0a:	57                   	push   edi
c001ba0b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001ba12:	e8 eb fa ff ff       	call   c001b502 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ba17:	83 ec 0c             	sub    esp,0xc
c001ba1a:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001ba1f:	b9 09 00 00 00       	mov    ecx,0x9
c001ba24:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001ba28:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001ba2c:	fc                   	cld    
c001ba2d:	89 e7                	mov    edi,esp
c001ba2f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba31:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001ba38:	e8 cb fc ff ff       	call   c001b708 <PCI::foundDevice(PCIDeviceInfo)>
c001ba3d:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ba43:	5b                   	pop    ebx
c001ba44:	5e                   	pop    esi
c001ba45:	5f                   	pop    edi
c001ba46:	5d                   	pop    ebp
c001ba47:	c3                   	ret    

c001ba48 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ba48:	55                   	push   ebp
c001ba49:	57                   	push   edi
c001ba4a:	56                   	push   esi
c001ba4b:	53                   	push   ebx
c001ba4c:	83 ec 0c             	sub    esp,0xc
c001ba4f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ba53:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ba58:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ba5d:	6a 00                	push   0x0
c001ba5f:	56                   	push   esi
c001ba60:	57                   	push   edi
c001ba61:	55                   	push   ebp
c001ba62:	e8 9b fa ff ff       	call   c001b502 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ba67:	6a 00                	push   0x0
c001ba69:	56                   	push   esi
c001ba6a:	57                   	push   edi
c001ba6b:	55                   	push   ebp
c001ba6c:	e8 07 fe ff ff       	call   c001b878 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ba71:	83 c4 20             	add    esp,0x20
c001ba74:	6a 00                	push   0x0
c001ba76:	56                   	push   esi
c001ba77:	57                   	push   edi
c001ba78:	55                   	push   ebp
c001ba79:	e8 a6 fa ff ff       	call   c001b524 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ba7e:	83 c4 10             	add    esp,0x10
c001ba81:	84 c0                	test   al,al
c001ba83:	79 27                	jns    c001baac <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ba85:	bb 01 00 00 00       	mov    ebx,0x1
c001ba8a:	53                   	push   ebx
c001ba8b:	56                   	push   esi
c001ba8c:	57                   	push   edi
c001ba8d:	55                   	push   ebp
c001ba8e:	e8 6f fa ff ff       	call   c001b502 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ba93:	83 c4 10             	add    esp,0x10
c001ba96:	66 40                	inc    ax
c001ba98:	74 0c                	je     c001baa6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001ba9a:	53                   	push   ebx
c001ba9b:	56                   	push   esi
c001ba9c:	57                   	push   edi
c001ba9d:	55                   	push   ebp
c001ba9e:	e8 d5 fd ff ff       	call   c001b878 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001baa3:	83 c4 10             	add    esp,0x10
c001baa6:	43                   	inc    ebx
c001baa7:	83 fb 08             	cmp    ebx,0x8
c001baaa:	75 de                	jne    c001ba8a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001baac:	83 c4 0c             	add    esp,0xc
c001baaf:	5b                   	pop    ebx
c001bab0:	5e                   	pop    esi
c001bab1:	5f                   	pop    edi
c001bab2:	5d                   	pop    ebp
c001bab3:	c3                   	ret    

c001bab4 <PCI::detect()>:
c001bab4:	56                   	push   esi
c001bab5:	53                   	push   ebx
c001bab6:	53                   	push   ebx
c001bab7:	31 db                	xor    ebx,ebx
c001bab9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001babd:	6a 00                	push   0x0
c001babf:	6a 00                	push   0x0
c001bac1:	6a 00                	push   0x0
c001bac3:	56                   	push   esi
c001bac4:	e8 5b fa ff ff       	call   c001b524 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bac9:	83 c4 10             	add    esp,0x10
c001bacc:	a8 80                	test   al,0x80
c001bace:	75 21                	jne    c001baf1 <PCI::detect()+0x3d>
c001bad0:	51                   	push   ecx
c001bad1:	51                   	push   ecx
c001bad2:	6a 00                	push   0x0
c001bad4:	56                   	push   esi
c001bad5:	e8 0a fc ff ff       	call   c001b6e4 <PCI::checkBus(unsigned char)>
c001bada:	83 c4 10             	add    esp,0x10
c001badd:	eb 24                	jmp    c001bb03 <PCI::detect()+0x4f>
c001badf:	52                   	push   edx
c001bae0:	52                   	push   edx
c001bae1:	53                   	push   ebx
c001bae2:	43                   	inc    ebx
c001bae3:	56                   	push   esi
c001bae4:	e8 fb fb ff ff       	call   c001b6e4 <PCI::checkBus(unsigned char)>
c001bae9:	83 c4 10             	add    esp,0x10
c001baec:	83 fb 08             	cmp    ebx,0x8
c001baef:	74 12                	je     c001bb03 <PCI::detect()+0x4f>
c001baf1:	53                   	push   ebx
c001baf2:	6a 00                	push   0x0
c001baf4:	6a 00                	push   0x0
c001baf6:	56                   	push   esi
c001baf7:	e8 06 fa ff ff       	call   c001b502 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bafc:	83 c4 10             	add    esp,0x10
c001baff:	66 40                	inc    ax
c001bb01:	74 dc                	je     c001badf <PCI::detect()+0x2b>
c001bb03:	58                   	pop    eax
c001bb04:	5b                   	pop    ebx
c001bb05:	5e                   	pop    esi
c001bb06:	c3                   	ret    
c001bb07:	90                   	nop

c001bb08 <IDE::close(int, int, void*)>:
c001bb08:	83 c8 ff             	or     eax,0xffffffff
c001bb0b:	c3                   	ret    

c001bb0c <IDE::IDE()>:
c001bb0c:	83 ec 0c             	sub    esp,0xc
c001bb0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb13:	83 ec 08             	sub    esp,0x8
c001bb16:	68 f4 23 02 c0       	push   0xc00223f4
c001bb1b:	50                   	push   eax
c001bb1c:	e8 0f 4c ff ff       	call   c0010730 <HardDiskController::HardDiskController(char const*)>
c001bb21:	83 c4 10             	add    esp,0x10
c001bb24:	ba 34 26 02 c0       	mov    edx,0xc0022634
c001bb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2d:	89 10                	mov    DWORD PTR [eax],edx
c001bb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb33:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bb3a:	90                   	nop
c001bb3b:	83 c4 0c             	add    esp,0xc
c001bb3e:	c3                   	ret    
c001bb3f:	90                   	nop

c001bb40 <IDE::prepareInterrupt(unsigned char)>:
c001bb40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb49:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bb51:	c3                   	ret    

c001bb52 <selectDrive(unsigned char, unsigned char)>:
c001bb52:	c3                   	ret    
c001bb53:	90                   	nop

c001bb54 <IDE::getBase(unsigned char)>:
c001bb54:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bb59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb5d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bb65:	c3                   	ret    

c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bb66:	55                   	push   ebp
c001bb67:	57                   	push   edi
c001bb68:	56                   	push   esi
c001bb69:	53                   	push   ebx
c001bb6a:	83 ec 1c             	sub    esp,0x1c
c001bb6d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bb71:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb75:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bb78:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bb7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bb80:	80 f9 03             	cmp    cl,0x3
c001bb83:	77 51                	ja     c001bbd6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bb85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb89:	0f b6 f2             	movzx  esi,dl
c001bb8c:	0f b6 db             	movzx  ebx,bl
c001bb8f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bb92:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bb96:	83 ca 80             	or     edx,0xffffff80
c001bb99:	0f b6 d2             	movzx  edx,dl
c001bb9c:	52                   	push   edx
c001bb9d:	6a 0c                	push   0xc
c001bb9f:	56                   	push   esi
c001bba0:	57                   	push   edi
c001bba1:	e8 c0 ff ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bba6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bbab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bbaf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bbb3:	ee                   	out    dx,al
c001bbb4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bbb9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bbbd:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bbc1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bbc5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bbcd:	83 c4 2c             	add    esp,0x2c
c001bbd0:	5b                   	pop    ebx
c001bbd1:	5e                   	pop    esi
c001bbd2:	5f                   	pop    edi
c001bbd3:	5d                   	pop    ebp
c001bbd4:	eb 90                	jmp    c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbd6:	80 fb 07             	cmp    bl,0x7
c001bbd9:	77 12                	ja     c001bbed <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bbdb:	0f b6 d2             	movzx  edx,dl
c001bbde:	0f b6 db             	movzx  ebx,bl
c001bbe1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bbe9:	89 da                	mov    edx,ebx
c001bbeb:	eb 2f                	jmp    c001bc1c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bbed:	80 fb 0d             	cmp    bl,0xd
c001bbf0:	77 13                	ja     c001bc05 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bbf2:	0f b6 d2             	movzx  edx,dl
c001bbf5:	0f b6 db             	movzx  ebx,bl
c001bbf8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bbff:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bc03:	eb 17                	jmp    c001bc1c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc05:	80 fb 15             	cmp    bl,0x15
c001bc08:	77 13                	ja     c001bc1d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bc0a:	0f b6 d2             	movzx  edx,dl
c001bc0d:	0f b6 db             	movzx  ebx,bl
c001bc10:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bc18:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bc1c:	ee                   	out    dx,al
c001bc1d:	83 c4 1c             	add    esp,0x1c
c001bc20:	5b                   	pop    ebx
c001bc21:	5e                   	pop    esi
c001bc22:	5f                   	pop    edi
c001bc23:	5d                   	pop    ebp
c001bc24:	c3                   	ret    
c001bc25:	90                   	nop

c001bc26 <IDE::read(unsigned char, unsigned char)>:
c001bc26:	55                   	push   ebp
c001bc27:	57                   	push   edi
c001bc28:	56                   	push   esi
c001bc29:	53                   	push   ebx
c001bc2a:	83 ec 1c             	sub    esp,0x1c
c001bc2d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc31:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc35:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bc38:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc3c:	3c 03                	cmp    al,0x3
c001bc3e:	77 43                	ja     c001bc83 <IDE::read(unsigned char, unsigned char)+0x5d>
c001bc40:	0f b6 f2             	movzx  esi,dl
c001bc43:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bc46:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bc4a:	83 c8 80             	or     eax,0xffffff80
c001bc4d:	0f b6 c0             	movzx  eax,al
c001bc50:	50                   	push   eax
c001bc51:	6a 0c                	push   0xc
c001bc53:	56                   	push   esi
c001bc54:	57                   	push   edi
c001bc55:	e8 0c ff ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc5a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bc5f:	0f b6 c3             	movzx  eax,bl
c001bc62:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bc66:	ec                   	in     al,dx
c001bc67:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bc6b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bc70:	52                   	push   edx
c001bc71:	6a 0c                	push   0xc
c001bc73:	56                   	push   esi
c001bc74:	57                   	push   edi
c001bc75:	e8 ec fe ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc7a:	83 c4 20             	add    esp,0x20
c001bc7d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bc81:	eb 49                	jmp    c001bccc <IDE::read(unsigned char, unsigned char)+0xa6>
c001bc83:	80 fb 07             	cmp    bl,0x7
c001bc86:	77 12                	ja     c001bc9a <IDE::read(unsigned char, unsigned char)+0x74>
c001bc88:	0f b6 d2             	movzx  edx,dl
c001bc8b:	0f b6 c3             	movzx  eax,bl
c001bc8e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bc96:	89 c2                	mov    edx,eax
c001bc98:	eb 31                	jmp    c001bccb <IDE::read(unsigned char, unsigned char)+0xa5>
c001bc9a:	80 fb 0d             	cmp    bl,0xd
c001bc9d:	77 13                	ja     c001bcb2 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bc9f:	0f b6 d2             	movzx  edx,dl
c001bca2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bca9:	0f b6 d3             	movzx  edx,bl
c001bcac:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bcb0:	eb 19                	jmp    c001bccb <IDE::read(unsigned char, unsigned char)+0xa5>
c001bcb2:	31 c0                	xor    eax,eax
c001bcb4:	80 fb 15             	cmp    bl,0x15
c001bcb7:	77 13                	ja     c001bccc <IDE::read(unsigned char, unsigned char)+0xa6>
c001bcb9:	0f b6 d2             	movzx  edx,dl
c001bcbc:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bcc4:	0f b6 d3             	movzx  edx,bl
c001bcc7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bccb:	ec                   	in     al,dx
c001bccc:	83 c4 1c             	add    esp,0x1c
c001bccf:	5b                   	pop    ebx
c001bcd0:	5e                   	pop    esi
c001bcd1:	5f                   	pop    edi
c001bcd2:	5d                   	pop    ebp
c001bcd3:	c3                   	ret    

c001bcd4 <IDE::waitInterrupt(unsigned char)>:
c001bcd4:	55                   	push   ebp
c001bcd5:	57                   	push   edi
c001bcd6:	56                   	push   esi
c001bcd7:	53                   	push   ebx
c001bcd8:	31 db                	xor    ebx,ebx
c001bcda:	83 ec 0c             	sub    esp,0xc
c001bcdd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bce1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bce6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bcee:	89 e8                	mov    eax,ebp
c001bcf0:	84 c0                	test   al,al
c001bcf2:	75 34                	jne    c001bd28 <IDE::waitInterrupt(unsigned char)+0x54>
c001bcf4:	52                   	push   edx
c001bcf5:	6a 0c                	push   0xc
c001bcf7:	56                   	push   esi
c001bcf8:	57                   	push   edi
c001bcf9:	e8 28 ff ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001bcfe:	83 c4 10             	add    esp,0x10
c001bd01:	a8 01                	test   al,0x1
c001bd03:	75 2b                	jne    c001bd30 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd05:	f6 c3 04             	test   bl,0x4
c001bd08:	75 16                	jne    c001bd20 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd0a:	83 fb 32             	cmp    ebx,0x32
c001bd0d:	7e 11                	jle    c001bd20 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd0f:	50                   	push   eax
c001bd10:	50                   	push   eax
c001bd11:	6a 00                	push   0x0
c001bd13:	68 80 96 98 00       	push   0x989680
c001bd18:	e8 f2 c4 ff ff       	call   c001820f <nanoSleep(unsigned long long)>
c001bd1d:	83 c4 10             	add    esp,0x10
c001bd20:	83 fb 3c             	cmp    ebx,0x3c
c001bd23:	74 0b                	je     c001bd30 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd25:	43                   	inc    ebx
c001bd26:	eb be                	jmp    c001bce6 <IDE::waitInterrupt(unsigned char)+0x12>
c001bd28:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bd30:	83 c4 0c             	add    esp,0xc
c001bd33:	89 e8                	mov    eax,ebp
c001bd35:	5b                   	pop    ebx
c001bd36:	5e                   	pop    esi
c001bd37:	5f                   	pop    edi
c001bd38:	5d                   	pop    ebp
c001bd39:	c3                   	ret    

c001bd3a <ideChannel0IRQHandler(regs*, void*)>:
c001bd3a:	83 ec 10             	sub    esp,0x10
c001bd3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd41:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bd48:	6a 07                	push   0x7
c001bd4a:	6a 00                	push   0x0
c001bd4c:	50                   	push   eax
c001bd4d:	e8 d4 fe ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001bd52:	83 c4 1c             	add    esp,0x1c
c001bd55:	c3                   	ret    

c001bd56 <ideChannel1IRQHandler(regs*, void*)>:
c001bd56:	83 ec 10             	sub    esp,0x10
c001bd59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd5d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bd64:	6a 07                	push   0x7
c001bd66:	6a 01                	push   0x1
c001bd68:	50                   	push   eax
c001bd69:	e8 b8 fe ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001bd6e:	83 c4 1c             	add    esp,0x1c
c001bd71:	c3                   	ret    

c001bd72 <IDE::enableIRQs(unsigned char, bool)>:
c001bd72:	57                   	push   edi
c001bd73:	56                   	push   esi
c001bd74:	be 04 00 00 00       	mov    esi,0x4
c001bd79:	53                   	push   ebx
c001bd7a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bd7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd83:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bd88:	0f 94 c0             	sete   al
c001bd8b:	d1 e0                	shl    eax,1
c001bd8d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bd94:	0f b6 c0             	movzx  eax,al
c001bd97:	50                   	push   eax
c001bd98:	6a 0c                	push   0xc
c001bd9a:	57                   	push   edi
c001bd9b:	53                   	push   ebx
c001bd9c:	e8 c5 fd ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	50                   	push   eax
c001bda5:	6a 0c                	push   0xc
c001bda7:	57                   	push   edi
c001bda8:	53                   	push   ebx
c001bda9:	e8 78 fe ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001bdae:	83 c4 10             	add    esp,0x10
c001bdb1:	4e                   	dec    esi
c001bdb2:	75 f0                	jne    c001bda4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001bdb4:	5b                   	pop    ebx
c001bdb5:	5e                   	pop    esi
c001bdb6:	5f                   	pop    edi
c001bdb7:	c3                   	ret    

c001bdb8 <IDE::open(int, int, void*)>:
c001bdb8:	55                   	push   ebp
c001bdb9:	57                   	push   edi
c001bdba:	56                   	push   esi
c001bdbb:	53                   	push   ebx
c001bdbc:	83 ec 1c             	sub    esp,0x1c
c001bdbf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bdc3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bdcc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bdd5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bddc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bde3:	0f 85 b0 02 00 00    	jne    c001c099 <IDE::open(int, int, void*)+0x2e1>
c001bde9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bdef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001bdf3:	83 e0 7f             	and    eax,0x7f
c001bdf6:	3c 05                	cmp    al,0x5
c001bdf8:	74 04                	je     c001bdfe <IDE::open(int, int, void*)+0x46>
c001bdfa:	3c 0f                	cmp    al,0xf
c001bdfc:	75 32                	jne    c001be30 <IDE::open(int, int, void*)+0x78>
c001bdfe:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001be04:	83 e0 fc             	and    eax,0xfffffffc
c001be07:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be0e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001be14:	83 e0 fc             	and    eax,0xfffffffc
c001be17:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be1e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001be24:	83 e0 fc             	and    eax,0xfffffffc
c001be27:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be2e:	eb 14                	jmp    c001be44 <IDE::open(int, int, void*)+0x8c>
c001be30:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001be3a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001be44:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001be4b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001be52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be56:	89 c6                	mov    esi,eax
c001be58:	bf f8 0c 00 00       	mov    edi,0xcf8
c001be5d:	c1 e6 10             	shl    esi,0x10
c001be60:	89 e8                	mov    eax,ebp
c001be62:	89 fa                	mov    edx,edi
c001be64:	c1 e0 0b             	shl    eax,0xb
c001be67:	09 f0                	or     eax,esi
c001be69:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001be70:	c1 e6 08             	shl    esi,0x8
c001be73:	09 c6                	or     esi,eax
c001be75:	89 f0                	mov    eax,esi
c001be77:	0d 08 00 00 80       	or     eax,0x80000008
c001be7c:	ef                   	out    dx,eax
c001be7d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001be82:	89 ca                	mov    edx,ecx
c001be84:	ed                   	in     eax,dx
c001be85:	c1 e8 10             	shr    eax,0x10
c001be88:	3d ff ff 00 00       	cmp    eax,0xffff
c001be8d:	0f 84 f5 00 00 00    	je     c001bf88 <IDE::open(int, int, void*)+0x1d0>
c001be93:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001be99:	89 fa                	mov    edx,edi
c001be9b:	89 f0                	mov    eax,esi
c001be9d:	ef                   	out    dx,eax
c001be9e:	b0 fe                	mov    al,0xfe
c001bea0:	89 ca                	mov    edx,ecx
c001bea2:	ee                   	out    dx,al
c001bea3:	89 f0                	mov    eax,esi
c001bea5:	89 fa                	mov    edx,edi
c001bea7:	ef                   	out    dx,eax
c001bea8:	89 ca                	mov    edx,ecx
c001beaa:	ed                   	in     eax,dx
c001beab:	3c fe                	cmp    al,0xfe
c001bead:	0f 85 a9 00 00 00    	jne    c001bf5c <IDE::open(int, int, void*)+0x1a4>
c001beb3:	8b 15 48 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023648
c001beb9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bec0:	74 33                	je     c001bef5 <IDE::open(int, int, void*)+0x13d>
c001bec2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bec8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001becc:	40                   	inc    eax
c001becd:	83 ec 0c             	sub    esp,0xc
c001bed0:	0f b6 c0             	movzx  eax,al
c001bed3:	50                   	push   eax
c001bed4:	55                   	push   ebp
c001bed5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bed9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bedf:	51                   	push   ecx
c001bee0:	e8 13 76 ff ff       	call   c00134f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bee5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001beea:	83 c4 1c             	add    esp,0x1c
c001beed:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bef3:	eb 0a                	jmp    c001beff <IDE::open(int, int, void*)+0x147>
c001bef5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001beff:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bf06:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bf0d:	c1 e1 10             	shl    ecx,0x10
c001bf10:	c1 e0 08             	shl    eax,0x8
c001bf13:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bf18:	09 c1                	or     ecx,eax
c001bf1a:	89 fa                	mov    edx,edi
c001bf1c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bf23:	c1 e0 0b             	shl    eax,0xb
c001bf26:	09 c1                	or     ecx,eax
c001bf28:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bf2e:	89 c8                	mov    eax,ecx
c001bf30:	ef                   	out    dx,eax
c001bf31:	be fc 0c 00 00       	mov    esi,0xcfc
c001bf36:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bf3c:	89 f2                	mov    edx,esi
c001bf3e:	ee                   	out    dx,al
c001bf3f:	89 c8                	mov    eax,ecx
c001bf41:	89 fa                	mov    edx,edi
c001bf43:	ef                   	out    dx,eax
c001bf44:	89 f2                	mov    edx,esi
c001bf46:	ed                   	in     eax,dx
c001bf47:	0f b6 c0             	movzx  eax,al
c001bf4a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bf50:	74 46                	je     c001bf98 <IDE::open(int, int, void*)+0x1e0>
c001bf52:	83 ec 0c             	sub    esp,0xc
c001bf55:	68 0c 24 02 c0       	push   0xc002240c
c001bf5a:	eb 34                	jmp    c001bf90 <IDE::open(int, int, void*)+0x1d8>
c001bf5c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bf65:	75 17                	jne    c001bf7e <IDE::open(int, int, void*)+0x1c6>
c001bf67:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bf6c:	74 07                	je     c001bf75 <IDE::open(int, int, void*)+0x1bd>
c001bf6e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bf73:	75 09                	jne    c001bf7e <IDE::open(int, int, void*)+0x1c6>
c001bf75:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bf7c:	eb 1a                	jmp    c001bf98 <IDE::open(int, int, void*)+0x1e0>
c001bf7e:	83 ec 0c             	sub    esp,0xc
c001bf81:	68 14 24 02 c0       	push   0xc0022414
c001bf86:	eb 08                	jmp    c001bf90 <IDE::open(int, int, void*)+0x1d8>
c001bf88:	83 ec 0c             	sub    esp,0xc
c001bf8b:	68 45 24 02 c0       	push   0xc0022445
c001bf90:	e8 a3 8c ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001bf95:	83 c4 10             	add    esp,0x10
c001bf98:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bf9f:	79 1a                	jns    c001bfbb <IDE::open(int, int, void*)+0x203>
c001bfa1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bfa7:	83 e0 fc             	and    eax,0xfffffffc
c001bfaa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bfb1:	83 c0 08             	add    eax,0x8
c001bfb4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bfbb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bfc1:	89 c2                	mov    edx,eax
c001bfc3:	83 e2 0f             	and    edx,0xf
c001bfc6:	66 83 fa 08          	cmp    dx,0x8
c001bfca:	75 0a                	jne    c001bfd6 <IDE::open(int, int, void*)+0x21e>
c001bfcc:	83 e8 02             	sub    eax,0x2
c001bfcf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bfd6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bfdc:	89 c2                	mov    edx,eax
c001bfde:	83 e2 0f             	and    edx,0xf
c001bfe1:	66 83 fa 08          	cmp    dx,0x8
c001bfe5:	75 0a                	jne    c001bff1 <IDE::open(int, int, void*)+0x239>
c001bfe7:	83 e8 02             	sub    eax,0x2
c001bfea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bff1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bff8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bfff:	89 d0                	mov    eax,edx
c001c001:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c004:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c008:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c00c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c00f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c014:	0f b6 c9             	movzx  ecx,cl
c001c017:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c01e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c021:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c025:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c029:	8d 50 02             	lea    edx,[eax+0x2]
c001c02c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c031:	0f b6 d2             	movzx  edx,dl
c001c034:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c03a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c03d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c041:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c045:	8d 48 03             	lea    ecx,[eax+0x3]
c001c048:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c04d:	0f b6 c9             	movzx  ecx,cl
c001c050:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c056:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c059:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c05d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c061:	8d 50 04             	lea    edx,[eax+0x4]
c001c064:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c06a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c06f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c076:	66 85 f6             	test   si,si
c001c079:	74 3e                	je     c001c0b9 <IDE::open(int, int, void*)+0x301>
c001c07b:	0f b6 d2             	movzx  edx,dl
c001c07e:	83 c0 05             	add    eax,0x5
c001c081:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c084:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c088:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c08c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c092:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c097:	eb 20                	jmp    c001c0b9 <IDE::open(int, int, void*)+0x301>
c001c099:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0a3:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c0ad:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c0b4:	e9 02 ff ff ff       	jmp    c001bfbb <IDE::open(int, int, void*)+0x203>
c001c0b9:	52                   	push   edx
c001c0ba:	52                   	push   edx
c001c0bb:	6a 00                	push   0x0
c001c0bd:	53                   	push   ebx
c001c0be:	e8 7d fa ff ff       	call   c001bb40 <IDE::prepareInterrupt(unsigned char)>
c001c0c3:	59                   	pop    ecx
c001c0c4:	5e                   	pop    esi
c001c0c5:	6a 01                	push   0x1
c001c0c7:	53                   	push   ebx
c001c0c8:	e8 73 fa ff ff       	call   c001bb40 <IDE::prepareInterrupt(unsigned char)>
c001c0cd:	83 c4 0c             	add    esp,0xc
c001c0d0:	6a 00                	push   0x0
c001c0d2:	6a 00                	push   0x0
c001c0d4:	53                   	push   ebx
c001c0d5:	e8 98 fc ff ff       	call   c001bd72 <IDE::enableIRQs(unsigned char, bool)>
c001c0da:	83 c4 0c             	add    esp,0xc
c001c0dd:	6a 00                	push   0x0
c001c0df:	6a 01                	push   0x1
c001c0e1:	53                   	push   ebx
c001c0e2:	e8 8b fc ff ff       	call   c001bd72 <IDE::enableIRQs(unsigned char, bool)>
c001c0e7:	83 c4 10             	add    esp,0x10
c001c0ea:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c0f1:	74 40                	je     c001c133 <IDE::open(int, int, void*)+0x37b>
c001c0f3:	83 ec 0c             	sub    esp,0xc
c001c0f6:	68 6f 24 02 c0       	push   0xc002246f
c001c0fb:	e8 a3 2e ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c103:	6a 01                	push   0x1
c001c105:	68 3a bd 01 c0       	push   0xc001bd3a
c001c10a:	6a 0e                	push   0xe
c001c10c:	53                   	push   ebx
c001c10d:	e8 f0 41 ff ff       	call   c0010302 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c112:	83 c4 14             	add    esp,0x14
c001c115:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c11b:	53                   	push   ebx
c001c11c:	6a 01                	push   0x1
c001c11e:	68 56 bd 01 c0       	push   0xc001bd56
c001c123:	6a 0f                	push   0xf
c001c125:	53                   	push   ebx
c001c126:	e8 d7 41 ff ff       	call   c0010302 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c12b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c131:	eb 4a                	jmp    c001c17d <IDE::open(int, int, void*)+0x3c5>
c001c133:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c13d:	50                   	push   eax
c001c13e:	6a 0f                	push   0xf
c001c140:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c146:	68 8b 24 02 c0       	push   0xc002248b
c001c14b:	e8 53 2e ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c150:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c153:	6a 00                	push   0x0
c001c155:	68 3a bd 01 c0       	push   0xc001bd3a
c001c15a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c160:	53                   	push   ebx
c001c161:	e8 9c 41 ff ff       	call   c0010302 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c166:	83 c4 14             	add    esp,0x14
c001c169:	53                   	push   ebx
c001c16a:	6a 00                	push   0x0
c001c16c:	68 56 bd 01 c0       	push   0xc001bd56
c001c171:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c177:	53                   	push   ebx
c001c178:	e8 85 41 ff ff       	call   c0010302 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c17d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c17f:	83 c4 20             	add    esp,0x20
c001c182:	83 ec 0c             	sub    esp,0xc
c001c185:	53                   	push   ebx
c001c186:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c189:	83 c4 0c             	add    esp,0xc
c001c18c:	6a 07                	push   0x7
c001c18e:	6a 00                	push   0x0
c001c190:	53                   	push   ebx
c001c191:	e8 90 fa ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c196:	83 c4 0c             	add    esp,0xc
c001c199:	6a 07                	push   0x7
c001c19b:	6a 01                	push   0x1
c001c19d:	53                   	push   ebx
c001c19e:	e8 83 fa ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c1a3:	83 c4 0c             	add    esp,0xc
c001c1a6:	6a 01                	push   0x1
c001c1a8:	6a 00                	push   0x0
c001c1aa:	53                   	push   ebx
c001c1ab:	e8 c2 fb ff ff       	call   c001bd72 <IDE::enableIRQs(unsigned char, bool)>
c001c1b0:	83 c4 0c             	add    esp,0xc
c001c1b3:	6a 01                	push   0x1
c001c1b5:	6a 01                	push   0x1
c001c1b7:	53                   	push   ebx
c001c1b8:	e8 b5 fb ff ff       	call   c001bd72 <IDE::enableIRQs(unsigned char, bool)>
c001c1bd:	83 c4 2c             	add    esp,0x2c
c001c1c0:	31 c0                	xor    eax,eax
c001c1c2:	5b                   	pop    ebx
c001c1c3:	5e                   	pop    esi
c001c1c4:	5f                   	pop    edi
c001c1c5:	5d                   	pop    ebp
c001c1c6:	c3                   	ret    
c001c1c7:	90                   	nop

c001c1c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c1c8:	55                   	push   ebp
c001c1c9:	57                   	push   edi
c001c1ca:	56                   	push   esi
c001c1cb:	53                   	push   ebx
c001c1cc:	83 ec 1c             	sub    esp,0x1c
c001c1cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c1d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c1d7:	8d 50 f8             	lea    edx,[eax-0x8]
c001c1da:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c1de:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c1e2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c1e6:	80 fa 03             	cmp    dl,0x3
c001c1e9:	77 5d                	ja     c001c248 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c1eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1f3:	0f b6 db             	movzx  ebx,bl
c001c1f6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c1f9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c1fd:	83 ca 80             	or     edx,0xffffff80
c001c200:	0f b6 d2             	movzx  edx,dl
c001c203:	52                   	push   edx
c001c204:	6a 0c                	push   0xc
c001c206:	53                   	push   ebx
c001c207:	56                   	push   esi
c001c208:	e8 59 f9 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c20d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c212:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c216:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c21a:	0f b6 c0             	movzx  eax,al
c001c21d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c221:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c223:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c228:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c22c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c230:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c234:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c23c:	83 c4 2c             	add    esp,0x2c
c001c23f:	5b                   	pop    ebx
c001c240:	5e                   	pop    esi
c001c241:	5f                   	pop    edi
c001c242:	5d                   	pop    ebp
c001c243:	e9 1e f9 ff ff       	jmp    c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c248:	3c 07                	cmp    al,0x7
c001c24a:	77 10                	ja     c001c25c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c24c:	0f b6 db             	movzx  ebx,bl
c001c24f:	0f b6 d0             	movzx  edx,al
c001c252:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c25a:	eb 2d                	jmp    c001c289 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c25c:	3c 0d                	cmp    al,0xd
c001c25e:	77 13                	ja     c001c273 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c260:	0f b6 db             	movzx  ebx,bl
c001c263:	0f b6 c0             	movzx  eax,al
c001c266:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c26d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c271:	eb 16                	jmp    c001c289 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c273:	3c 15                	cmp    al,0x15
c001c275:	77 14                	ja     c001c28b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c277:	0f b6 db             	movzx  ebx,bl
c001c27a:	0f b6 c0             	movzx  eax,al
c001c27d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c285:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c289:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c28b:	83 c4 1c             	add    esp,0x1c
c001c28e:	5b                   	pop    ebx
c001c28f:	5e                   	pop    esi
c001c290:	5f                   	pop    edi
c001c291:	5d                   	pop    ebp
c001c292:	c3                   	ret    
c001c293:	90                   	nop

c001c294 <IDE::detect()>:
c001c294:	55                   	push   ebp
c001c295:	57                   	push   edi
c001c296:	56                   	push   esi
c001c297:	53                   	push   ebx
c001c298:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c29e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c2a5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c2ac:	0f 85 be 02 00 00    	jne    c001c570 <IDE::detect()+0x2dc>
c001c2b2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c2b9:	31 f6                	xor    esi,esi
c001c2bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c2c3:	31 ed                	xor    ebp,ebp
c001c2c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2c9:	c1 e0 06             	shl    eax,0x6
c001c2cc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c2d4:	89 e8                	mov    eax,ebp
c001c2d6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c2da:	c1 e0 04             	shl    eax,0x4
c001c2dd:	83 c8 a0             	or     eax,0xffffffa0
c001c2e0:	0f b6 c0             	movzx  eax,al
c001c2e3:	50                   	push   eax
c001c2e4:	6a 06                	push   0x6
c001c2e6:	56                   	push   esi
c001c2e7:	53                   	push   ebx
c001c2e8:	e8 79 f8 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2ed:	83 c4 0c             	add    esp,0xc
c001c2f0:	6a 0c                	push   0xc
c001c2f2:	56                   	push   esi
c001c2f3:	53                   	push   ebx
c001c2f4:	e8 2d f9 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c2f9:	83 c4 0c             	add    esp,0xc
c001c2fc:	6a 0c                	push   0xc
c001c2fe:	56                   	push   esi
c001c2ff:	53                   	push   ebx
c001c300:	e8 21 f9 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c305:	83 c4 0c             	add    esp,0xc
c001c308:	6a 0c                	push   0xc
c001c30a:	56                   	push   esi
c001c30b:	53                   	push   ebx
c001c30c:	e8 15 f9 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c311:	83 c4 0c             	add    esp,0xc
c001c314:	6a 0c                	push   0xc
c001c316:	56                   	push   esi
c001c317:	53                   	push   ebx
c001c318:	e8 09 f9 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c31d:	68 ec 00 00 00       	push   0xec
c001c322:	6a 07                	push   0x7
c001c324:	56                   	push   esi
c001c325:	53                   	push   ebx
c001c326:	e8 3b f8 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c32b:	83 c4 1c             	add    esp,0x1c
c001c32e:	6a 0c                	push   0xc
c001c330:	56                   	push   esi
c001c331:	53                   	push   ebx
c001c332:	e8 ef f8 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c337:	83 c4 0c             	add    esp,0xc
c001c33a:	6a 0c                	push   0xc
c001c33c:	56                   	push   esi
c001c33d:	53                   	push   ebx
c001c33e:	e8 e3 f8 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c343:	83 c4 0c             	add    esp,0xc
c001c346:	6a 0c                	push   0xc
c001c348:	56                   	push   esi
c001c349:	53                   	push   ebx
c001c34a:	e8 d7 f8 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c34f:	83 c4 0c             	add    esp,0xc
c001c352:	6a 0c                	push   0xc
c001c354:	56                   	push   esi
c001c355:	53                   	push   ebx
c001c356:	e8 cb f8 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c35b:	83 c4 0c             	add    esp,0xc
c001c35e:	6a 0c                	push   0xc
c001c360:	56                   	push   esi
c001c361:	53                   	push   ebx
c001c362:	e8 bf f8 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c367:	83 c4 10             	add    esp,0x10
c001c36a:	84 c0                	test   al,al
c001c36c:	0f 84 8b 01 00 00    	je     c001c4fd <IDE::detect()+0x269>
c001c372:	31 ff                	xor    edi,edi
c001c374:	50                   	push   eax
c001c375:	6a 0c                	push   0xc
c001c377:	56                   	push   esi
c001c378:	53                   	push   ebx
c001c379:	e8 a8 f8 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c37e:	83 c4 10             	add    esp,0x10
c001c381:	a8 01                	test   al,0x1
c001c383:	0f 85 8e 01 00 00    	jne    c001c517 <IDE::detect()+0x283>
c001c389:	84 c0                	test   al,al
c001c38b:	78 04                	js     c001c391 <IDE::detect()+0xfd>
c001c38d:	a8 08                	test   al,0x8
c001c38f:	75 27                	jne    c001c3b8 <IDE::detect()+0x124>
c001c391:	47                   	inc    edi
c001c392:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c398:	7e da                	jle    c001c374 <IDE::detect()+0xe0>
c001c39a:	50                   	push   eax
c001c39b:	50                   	push   eax
c001c39c:	6a 00                	push   0x0
c001c39e:	68 40 4b 4c 00       	push   0x4c4b40
c001c3a3:	e8 67 be ff ff       	call   c001820f <nanoSleep(unsigned long long)>
c001c3a8:	83 c4 10             	add    esp,0x10
c001c3ab:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c3b1:	75 c1                	jne    c001c374 <IDE::detect()+0xe0>
c001c3b3:	e9 5f 01 00 00       	jmp    c001c517 <IDE::detect()+0x283>
c001c3b8:	31 c9                	xor    ecx,ecx
c001c3ba:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c3be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c3c2:	83 ec 0c             	sub    esp,0xc
c001c3c5:	68 80 00 00 00       	push   0x80
c001c3ca:	57                   	push   edi
c001c3cb:	6a 00                	push   0x0
c001c3cd:	56                   	push   esi
c001c3ce:	53                   	push   ebx
c001c3cf:	e8 f4 fd ff ff       	call   c001c1c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c3d4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c3d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c3dd:	89 d1                	mov    ecx,edx
c001c3df:	c1 e0 06             	shl    eax,0x6
c001c3e2:	01 d8                	add    eax,ebx
c001c3e4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c3eb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c3f2:	89 f2                	mov    edx,esi
c001c3f4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c3fa:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c3fe:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c404:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c408:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c40f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c417:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c41e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c426:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c42c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c433:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c439:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c43d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c441:	83 c4 20             	add    esp,0x20
c001c444:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c447:	83 c0 02             	add    eax,0x2
c001c44a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c450:	83 c7 02             	add    edi,0x2
c001c453:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c456:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c45c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c460:	75 e2                	jne    c001c444 <IDE::detect()+0x1b0>
c001c462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c466:	c1 e0 06             	shl    eax,0x6
c001c469:	01 d8                	add    eax,ebx
c001c46b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c471:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c478:	66 c1 ea 09          	shr    dx,0x9
c001c47c:	83 e2 01             	and    edx,0x1
c001c47f:	84 c9                	test   cl,cl
c001c481:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c487:	75 2f                	jne    c001c4b8 <IDE::detect()+0x224>
c001c489:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c48f:	85 c0                	test   eax,eax
c001c491:	74 66                	je     c001c4f9 <IDE::detect()+0x265>
c001c493:	50                   	push   eax
c001c494:	55                   	push   ebp
c001c495:	56                   	push   esi
c001c496:	68 a7 24 02 c0       	push   0xc00224a7
c001c49b:	e8 03 2b ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c4a0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c4a7:	e8 08 2a ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001c4ac:	89 c7                	mov    edi,eax
c001c4ae:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4b1:	e8 e8 02 00 00       	call   c001c79e <ATA::ATA()>
c001c4b6:	eb 28                	jmp    c001c4e0 <IDE::detect()+0x24c>
c001c4b8:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c4be:	55                   	push   ebp
c001c4bf:	56                   	push   esi
c001c4c0:	68 d6 24 02 c0       	push   0xc00224d6
c001c4c5:	e8 d9 2a ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c4ca:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c4d1:	e8 de 29 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001c4d6:	89 c7                	mov    edi,eax
c001c4d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4db:	e8 ee 08 00 00       	call   c001cdce <ATAPI::ATAPI()>
c001c4e0:	5a                   	pop    edx
c001c4e1:	59                   	pop    ecx
c001c4e2:	57                   	push   edi
c001c4e3:	53                   	push   ebx
c001c4e4:	e8 c5 3e ff ff       	call   c00103ae <Device::addChild(Device*)>
c001c4e9:	8b 07                	mov    eax,DWORD PTR [edi]
c001c4eb:	53                   	push   ebx
c001c4ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4f0:	6a 00                	push   0x0
c001c4f2:	57                   	push   edi
c001c4f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c4f6:	83 c4 20             	add    esp,0x20
c001c4f9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c4fd:	4d                   	dec    ebp
c001c4fe:	74 0a                	je     c001c50a <IDE::detect()+0x276>
c001c500:	bd 01 00 00 00       	mov    ebp,0x1
c001c505:	e9 bb fd ff ff       	jmp    c001c2c5 <IDE::detect()+0x31>
c001c50a:	4e                   	dec    esi
c001c50b:	74 63                	je     c001c570 <IDE::detect()+0x2dc>
c001c50d:	be 01 00 00 00       	mov    esi,0x1
c001c512:	e9 ac fd ff ff       	jmp    c001c2c3 <IDE::detect()+0x2f>
c001c517:	50                   	push   eax
c001c518:	6a 04                	push   0x4
c001c51a:	56                   	push   esi
c001c51b:	53                   	push   ebx
c001c51c:	e8 05 f7 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c521:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c525:	83 c4 0c             	add    esp,0xc
c001c528:	6a 05                	push   0x5
c001c52a:	56                   	push   esi
c001c52b:	53                   	push   ebx
c001c52c:	e8 f5 f6 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c531:	83 c4 10             	add    esp,0x10
c001c534:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c538:	80 fa 14             	cmp    dl,0x14
c001c53b:	75 04                	jne    c001c541 <IDE::detect()+0x2ad>
c001c53d:	3c eb                	cmp    al,0xeb
c001c53f:	eb 07                	jmp    c001c548 <IDE::detect()+0x2b4>
c001c541:	3c 96                	cmp    al,0x96
c001c543:	75 b8                	jne    c001c4fd <IDE::detect()+0x269>
c001c545:	80 fa 69             	cmp    dl,0x69
c001c548:	75 b3                	jne    c001c4fd <IDE::detect()+0x269>
c001c54a:	68 a1 00 00 00       	push   0xa1
c001c54f:	6a 07                	push   0x7
c001c551:	56                   	push   esi
c001c552:	53                   	push   ebx
c001c553:	e8 0e f6 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c558:	5f                   	pop    edi
c001c559:	58                   	pop    eax
c001c55a:	6a 00                	push   0x0
c001c55c:	68 40 42 0f 00       	push   0xf4240
c001c561:	e8 a9 bc ff ff       	call   c001820f <nanoSleep(unsigned long long)>
c001c566:	83 c4 10             	add    esp,0x10
c001c569:	b1 01                	mov    cl,0x1
c001c56b:	e9 4a fe ff ff       	jmp    c001c3ba <IDE::detect()+0x126>
c001c570:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c576:	5b                   	pop    ebx
c001c577:	5e                   	pop    esi
c001c578:	5f                   	pop    edi
c001c579:	5d                   	pop    ebp
c001c57a:	c3                   	ret    
c001c57b:	90                   	nop

c001c57c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c57c:	55                   	push   ebp
c001c57d:	57                   	push   edi
c001c57e:	56                   	push   esi
c001c57f:	53                   	push   ebx
c001c580:	83 ec 1c             	sub    esp,0x1c
c001c583:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c587:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c58b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c58f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c593:	88 c3                	mov    bl,al
c001c595:	84 c0                	test   al,al
c001c597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c59b:	0f 84 67 01 00 00    	je     c001c708 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c5a1:	83 ec 0c             	sub    esp,0xc
c001c5a4:	68 07 25 02 c0       	push   0xc0022507
c001c5a9:	e8 f5 29 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c5ae:	83 c4 10             	add    esp,0x10
c001c5b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5b5:	3c 01                	cmp    al,0x1
c001c5b7:	75 17                	jne    c001c5d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c5b9:	83 ec 0c             	sub    esp,0xc
c001c5bc:	b3 13                	mov    bl,0x13
c001c5be:	68 13 25 02 c0       	push   0xc0022513
c001c5c3:	e8 db 29 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c5c8:	83 c4 10             	add    esp,0x10
c001c5cb:	e9 25 01 00 00       	jmp    c001c6f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c5d0:	3c 02                	cmp    al,0x2
c001c5d2:	0f 85 ef 00 00 00    	jne    c001c6c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c5d8:	d1 e6                	shl    esi,1
c001c5da:	09 ee                	or     esi,ebp
c001c5dc:	52                   	push   edx
c001c5dd:	89 f0                	mov    eax,esi
c001c5df:	6a 01                	push   0x1
c001c5e1:	0f b6 f0             	movzx  esi,al
c001c5e4:	c1 e6 06             	shl    esi,0x6
c001c5e7:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c5ef:	50                   	push   eax
c001c5f0:	57                   	push   edi
c001c5f1:	e8 30 f6 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c5f6:	83 c4 10             	add    esp,0x10
c001c5f9:	89 c6                	mov    esi,eax
c001c5fb:	a8 01                	test   al,0x1
c001c5fd:	74 12                	je     c001c611 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c5ff:	83 ec 0c             	sub    esp,0xc
c001c602:	b3 07                	mov    bl,0x7
c001c604:	68 28 25 02 c0       	push   0xc0022528
c001c609:	e8 95 29 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c60e:	83 c4 10             	add    esp,0x10
c001c611:	f7 c6 02 00 00 00    	test   esi,0x2
c001c617:	74 12                	je     c001c62b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c619:	83 ec 0c             	sub    esp,0xc
c001c61c:	b3 03                	mov    bl,0x3
c001c61e:	68 46 25 02 c0       	push   0xc0022546
c001c623:	e8 7b 29 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c628:	83 c4 10             	add    esp,0x10
c001c62b:	f7 c6 04 00 00 00    	test   esi,0x4
c001c631:	74 12                	je     c001c645 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c633:	83 ec 0c             	sub    esp,0xc
c001c636:	b3 14                	mov    bl,0x14
c001c638:	68 66 25 02 c0       	push   0xc0022566
c001c63d:	e8 61 29 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c642:	83 c4 10             	add    esp,0x10
c001c645:	f7 c6 08 00 00 00    	test   esi,0x8
c001c64b:	74 12                	je     c001c65f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c64d:	83 ec 0c             	sub    esp,0xc
c001c650:	b3 03                	mov    bl,0x3
c001c652:	68 46 25 02 c0       	push   0xc0022546
c001c657:	e8 47 29 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c65c:	83 c4 10             	add    esp,0x10
c001c65f:	f7 c6 10 00 00 00    	test   esi,0x10
c001c665:	74 12                	je     c001c679 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c667:	83 ec 0c             	sub    esp,0xc
c001c66a:	b3 15                	mov    bl,0x15
c001c66c:	68 7e 25 02 c0       	push   0xc002257e
c001c671:	e8 2d 29 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c676:	83 c4 10             	add    esp,0x10
c001c679:	f7 c6 20 00 00 00    	test   esi,0x20
c001c67f:	74 12                	je     c001c693 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c681:	83 ec 0c             	sub    esp,0xc
c001c684:	b3 03                	mov    bl,0x3
c001c686:	68 46 25 02 c0       	push   0xc0022546
c001c68b:	e8 13 29 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c690:	83 c4 10             	add    esp,0x10
c001c693:	f7 c6 40 00 00 00    	test   esi,0x40
c001c699:	74 12                	je     c001c6ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c69b:	83 ec 0c             	sub    esp,0xc
c001c69e:	b3 16                	mov    bl,0x16
c001c6a0:	68 98 25 02 c0       	push   0xc0022598
c001c6a5:	e8 f9 28 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c6aa:	83 c4 10             	add    esp,0x10
c001c6ad:	89 f0                	mov    eax,esi
c001c6af:	84 c0                	test   al,al
c001c6b1:	79 42                	jns    c001c6f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6b3:	83 ec 0c             	sub    esp,0xc
c001c6b6:	b3 0d                	mov    bl,0xd
c001c6b8:	68 b9 25 02 c0       	push   0xc00225b9
c001c6bd:	e8 e1 28 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c6c2:	83 c4 10             	add    esp,0x10
c001c6c5:	eb 2e                	jmp    c001c6f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6c7:	3c 03                	cmp    al,0x3
c001c6c9:	75 14                	jne    c001c6df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c6cb:	83 ec 0c             	sub    esp,0xc
c001c6ce:	b3 17                	mov    bl,0x17
c001c6d0:	68 cd 25 02 c0       	push   0xc00225cd
c001c6d5:	e8 c9 28 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c6da:	83 c4 10             	add    esp,0x10
c001c6dd:	eb 16                	jmp    c001c6f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6df:	3c 04                	cmp    al,0x4
c001c6e1:	75 12                	jne    c001c6f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6e3:	83 ec 0c             	sub    esp,0xc
c001c6e6:	b3 08                	mov    bl,0x8
c001c6e8:	68 e3 25 02 c0       	push   0xc00225e3
c001c6ed:	e8 b1 28 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c6f2:	83 c4 10             	add    esp,0x10
c001c6f5:	50                   	push   eax
c001c6f6:	50                   	push   eax
c001c6f7:	0f b6 c3             	movzx  eax,bl
c001c6fa:	50                   	push   eax
c001c6fb:	68 fb 25 02 c0       	push   0xc00225fb
c001c700:	e8 9e 28 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c705:	83 c4 10             	add    esp,0x10
c001c708:	83 c4 1c             	add    esp,0x1c
c001c70b:	88 d8                	mov    al,bl
c001c70d:	5b                   	pop    ebx
c001c70e:	5e                   	pop    esi
c001c70f:	5f                   	pop    edi
c001c710:	5d                   	pop    ebp
c001c711:	c3                   	ret    

c001c712 <IDE::polling(unsigned char, unsigned int)>:
c001c712:	57                   	push   edi
c001c713:	56                   	push   esi
c001c714:	53                   	push   ebx
c001c715:	bb 04 00 00 00       	mov    ebx,0x4
c001c71a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c71e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c723:	52                   	push   edx
c001c724:	6a 0c                	push   0xc
c001c726:	56                   	push   esi
c001c727:	57                   	push   edi
c001c728:	e8 f9 f4 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c72d:	83 c4 10             	add    esp,0x10
c001c730:	4b                   	dec    ebx
c001c731:	75 f0                	jne    c001c723 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c733:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c738:	50                   	push   eax
c001c739:	6a 0c                	push   0xc
c001c73b:	56                   	push   esi
c001c73c:	57                   	push   edi
c001c73d:	e8 e4 f4 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c742:	83 c4 10             	add    esp,0x10
c001c745:	a8 01                	test   al,0x1
c001c747:	74 12                	je     c001c75b <IDE::polling(unsigned char, unsigned int)+0x49>
c001c749:	83 ec 0c             	sub    esp,0xc
c001c74c:	68 15 26 02 c0       	push   0xc0022615
c001c751:	e8 4d 28 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001c756:	83 c4 10             	add    esp,0x10
c001c759:	eb 17                	jmp    c001c772 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c75b:	a8 20                	test   al,0x20
c001c75d:	75 0f                	jne    c001c76e <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c75f:	4b                   	dec    ebx
c001c760:	74 10                	je     c001c772 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c762:	84 c0                	test   al,al
c001c764:	78 d2                	js     c001c738 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c766:	a8 08                	test   al,0x8
c001c768:	74 ce                	je     c001c738 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c76a:	31 c0                	xor    eax,eax
c001c76c:	eb 06                	jmp    c001c774 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c76e:	b0 01                	mov    al,0x1
c001c770:	eb 02                	jmp    c001c774 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c772:	b0 02                	mov    al,0x2
c001c774:	5b                   	pop    ebx
c001c775:	5e                   	pop    esi
c001c776:	5f                   	pop    edi
c001c777:	c3                   	ret    

c001c778 <ATA::close(int, int, void*)>:
c001c778:	83 ec 0c             	sub    esp,0xc
c001c77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c785:	85 c0                	test   eax,eax
c001c787:	74 0c                	je     c001c795 <ATA::close(int, int, void*)+0x1d>
c001c789:	83 ec 0c             	sub    esp,0xc
c001c78c:	8b 10                	mov    edx,DWORD PTR [eax]
c001c78e:	50                   	push   eax
c001c78f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c792:	83 c4 10             	add    esp,0x10
c001c795:	31 c0                	xor    eax,eax
c001c797:	83 c4 0c             	add    esp,0xc
c001c79a:	c3                   	ret    
c001c79b:	90                   	nop

c001c79c <ATA::powerSaving(PowerSavingLevel)>:
c001c79c:	c3                   	ret    
c001c79d:	90                   	nop

c001c79e <ATA::ATA()>:
c001c79e:	83 ec 0c             	sub    esp,0xc
c001c7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a5:	83 ec 04             	sub    esp,0x4
c001c7a8:	68 00 02 00 00       	push   0x200
c001c7ad:	68 58 26 02 c0       	push   0xc0022658
c001c7b2:	50                   	push   eax
c001c7b3:	e8 fc 3f ff ff       	call   c00107b4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7b8:	83 c4 10             	add    esp,0x10
c001c7bb:	ba 84 26 02 c0       	mov    edx,0xc0022684
c001c7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c4:	89 10                	mov    DWORD PTR [eax],edx
c001c7c6:	90                   	nop
c001c7c7:	83 c4 0c             	add    esp,0xc
c001c7ca:	c3                   	ret    
c001c7cb:	90                   	nop

c001c7cc <ATA::flush(bool)>:
c001c7cc:	53                   	push   ebx
c001c7cd:	83 ec 08             	sub    esp,0x8
c001c7d0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c7d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7d9:	19 c0                	sbb    eax,eax
c001c7db:	83 e0 fd             	and    eax,0xfffffffd
c001c7de:	05 ea 00 00 00       	add    eax,0xea
c001c7e3:	50                   	push   eax
c001c7e4:	6a 07                	push   0x7
c001c7e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7ed:	50                   	push   eax
c001c7ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7f4:	e8 6d f3 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7f9:	83 c4 0c             	add    esp,0xc
c001c7fc:	6a 00                	push   0x0
c001c7fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c805:	50                   	push   eax
c001c806:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c80c:	e8 01 ff ff ff       	call   c001c712 <IDE::polling(unsigned char, unsigned int)>
c001c811:	83 c4 18             	add    esp,0x18
c001c814:	5b                   	pop    ebx
c001c815:	c3                   	ret    

c001c816 <ATA::readyForCommand()>:
c001c816:	56                   	push   esi
c001c817:	53                   	push   ebx
c001c818:	31 db                	xor    ebx,ebx
c001c81a:	50                   	push   eax
c001c81b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c81f:	50                   	push   eax
c001c820:	6a 0c                	push   0xc
c001c822:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c829:	50                   	push   eax
c001c82a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c830:	e8 f1 f3 ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001c835:	83 c4 10             	add    esp,0x10
c001c838:	a8 88                	test   al,0x88
c001c83a:	74 23                	je     c001c85f <ATA::readyForCommand()+0x49>
c001c83c:	43                   	inc    ebx
c001c83d:	83 fb 63             	cmp    ebx,0x63
c001c840:	7e dd                	jle    c001c81f <ATA::readyForCommand()+0x9>
c001c842:	51                   	push   ecx
c001c843:	51                   	push   ecx
c001c844:	6a 00                	push   0x0
c001c846:	68 40 42 0f 00       	push   0xf4240
c001c84b:	e8 bf b9 ff ff       	call   c001820f <nanoSleep(unsigned long long)>
c001c850:	83 c4 10             	add    esp,0x10
c001c853:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c859:	75 c4                	jne    c001c81f <ATA::readyForCommand()+0x9>
c001c85b:	31 c0                	xor    eax,eax
c001c85d:	eb 02                	jmp    c001c861 <ATA::readyForCommand()+0x4b>
c001c85f:	b0 01                	mov    al,0x1
c001c861:	5a                   	pop    edx
c001c862:	5b                   	pop    ebx
c001c863:	5e                   	pop    esi
c001c864:	c3                   	ret    
c001c865:	90                   	nop

c001c866 <ATA::access(unsigned long long, int, void*, bool)>:
c001c866:	55                   	push   ebp
c001c867:	57                   	push   edi
c001c868:	56                   	push   esi
c001c869:	53                   	push   ebx
c001c86a:	83 ec 2c             	sub    esp,0x2c
c001c86d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c871:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c875:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c879:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c87d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c881:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c885:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c889:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c88f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c893:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c899:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c89d:	c1 e0 06             	shl    eax,0x6
c001c8a0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c8a8:	74 5d                	je     c001c907 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c8aa:	89 fa                	mov    edx,edi
c001c8ac:	89 f0                	mov    eax,esi
c001c8ae:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c8b2:	c1 ea 1c             	shr    edx,0x1c
c001c8b5:	89 d1                	mov    ecx,edx
c001c8b7:	09 c1                	or     ecx,eax
c001c8b9:	74 25                	je     c001c8e0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c8bb:	31 ed                	xor    ebp,ebp
c001c8bd:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c8c4:	89 fa                	mov    edx,edi
c001c8c6:	89 f0                	mov    eax,esi
c001c8c8:	0f ad d0             	shrd   eax,edx,cl
c001c8cb:	d3 ea                	shr    edx,cl
c001c8cd:	f6 c1 20             	test   cl,0x20
c001c8d0:	74 02                	je     c001c8d4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c8d2:	89 d0                	mov    eax,edx
c001c8d4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c8d8:	45                   	inc    ebp
c001c8d9:	83 fd 06             	cmp    ebp,0x6
c001c8dc:	75 df                	jne    c001c8bd <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c8de:	eb 76                	jmp    c001c956 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c8e0:	89 f0                	mov    eax,esi
c001c8e2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c8e7:	89 fa                	mov    edx,edi
c001c8e9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8f0:	0f ac d0 10          	shrd   eax,edx,0x10
c001c8f4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8f9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c8fd:	c1 ee 18             	shr    esi,0x18
c001c900:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c905:	eb 56                	jmp    c001c95d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c907:	6a 00                	push   0x0
c001c909:	6a 3f                	push   0x3f
c001c90b:	57                   	push   edi
c001c90c:	56                   	push   esi
c001c90d:	e8 da 1e 00 00       	call   c001e7ec <__umoddi3>
c001c912:	83 c4 10             	add    esp,0x10
c001c915:	40                   	inc    eax
c001c916:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c91a:	6a 00                	push   0x0
c001c91c:	68 f0 03 00 00       	push   0x3f0
c001c921:	57                   	push   edi
c001c922:	56                   	push   esi
c001c923:	e8 c4 1d 00 00       	call   c001e6ec <__udivdi3>
c001c928:	83 c4 10             	add    esp,0x10
c001c92b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c930:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c937:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c93c:	6a 00                	push   0x0
c001c93e:	6a 3f                	push   0x3f
c001c940:	57                   	push   edi
c001c941:	56                   	push   esi
c001c942:	e8 a5 1d 00 00       	call   c001e6ec <__udivdi3>
c001c947:	83 c4 10             	add    esp,0x10
c001c94a:	89 c6                	mov    esi,eax
c001c94c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c951:	83 e6 0f             	and    esi,0xf
c001c954:	eb 07                	jmp    c001c95d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c956:	31 f6                	xor    esi,esi
c001c958:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c95d:	bf 01 00 00 00       	mov    edi,0x1
c001c962:	50                   	push   eax
c001c963:	6a 00                	push   0x0
c001c965:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c96c:	50                   	push   eax
c001c96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c971:	e8 fc f3 ff ff       	call   c001bd72 <IDE::enableIRQs(unsigned char, bool)>
c001c976:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c979:	e8 98 fe ff ff       	call   c001c816 <ATA::readyForCommand()>
c001c97e:	83 c4 10             	add    esp,0x10
c001c981:	84 c0                	test   al,al
c001c983:	0f 84 50 02 00 00    	je     c001cbd9 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c989:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c98f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c995:	c1 e0 04             	shl    eax,0x4
c001c998:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c99f:	09 c6                	or     esi,eax
c001c9a1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c9a6:	75 05                	jne    c001c9ad <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c9a8:	83 ce a0             	or     esi,0xffffffa0
c001c9ab:	eb 03                	jmp    c001c9b0 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c9ad:	83 ce e0             	or     esi,0xffffffe0
c001c9b0:	89 f0                	mov    eax,esi
c001c9b2:	0f b6 f0             	movzx  esi,al
c001c9b5:	56                   	push   esi
c001c9b6:	6a 06                	push   0x6
c001c9b8:	51                   	push   ecx
c001c9b9:	52                   	push   edx
c001c9ba:	e8 a7 f1 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9bf:	83 c4 10             	add    esp,0x10
c001c9c2:	6a 00                	push   0x0
c001c9c4:	6a 01                	push   0x1
c001c9c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9cd:	50                   	push   eax
c001c9ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9d4:	e8 8d f1 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d9:	83 c4 10             	add    esp,0x10
c001c9dc:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c9e1:	75 6e                	jne    c001ca51 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c9e3:	6a 00                	push   0x0
c001c9e5:	6a 08                	push   0x8
c001c9e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ee:	50                   	push   eax
c001c9ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f5:	e8 6c f1 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9fa:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c9ff:	50                   	push   eax
c001ca00:	6a 09                	push   0x9
c001ca02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca09:	50                   	push   eax
c001ca0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca10:	e8 51 f1 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca15:	83 c4 20             	add    esp,0x20
c001ca18:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca1d:	50                   	push   eax
c001ca1e:	6a 0a                	push   0xa
c001ca20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca27:	50                   	push   eax
c001ca28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca2e:	e8 33 f1 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca33:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ca38:	50                   	push   eax
c001ca39:	6a 0b                	push   0xb
c001ca3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca42:	50                   	push   eax
c001ca43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca49:	e8 18 f1 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca4e:	83 c4 20             	add    esp,0x20
c001ca51:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca56:	50                   	push   eax
c001ca57:	6a 02                	push   0x2
c001ca59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca60:	50                   	push   eax
c001ca61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca67:	e8 fa f0 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca6c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca71:	50                   	push   eax
c001ca72:	6a 03                	push   0x3
c001ca74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca7b:	50                   	push   eax
c001ca7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca82:	e8 df f0 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca87:	83 c4 20             	add    esp,0x20
c001ca8a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ca8f:	50                   	push   eax
c001ca90:	6a 04                	push   0x4
c001ca92:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca99:	50                   	push   eax
c001ca9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caa0:	e8 c1 f0 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001caaa:	50                   	push   eax
c001caab:	6a 05                	push   0x5
c001caad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab4:	50                   	push   eax
c001cab5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cabb:	e8 a6 f0 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac0:	83 c4 20             	add    esp,0x20
c001cac3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001cac8:	0f 94 c0             	sete   al
c001cacb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cad0:	74 09                	je     c001cadb <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cad2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001cad9:	eb 07                	jmp    c001cae2 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001cadb:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cae2:	0f b6 c0             	movzx  eax,al
c001cae5:	50                   	push   eax
c001cae6:	6a 07                	push   0x7
c001cae8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caef:	50                   	push   eax
c001caf0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caf6:	e8 6b f0 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cafb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001caff:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb03:	83 c4 10             	add    esp,0x10
c001cb06:	85 f6                	test   esi,esi
c001cb08:	0f 84 ac 00 00 00    	je     c001cbba <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cb0e:	50                   	push   eax
c001cb0f:	6a 01                	push   0x1
c001cb11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb18:	50                   	push   eax
c001cb19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb1f:	e8 ee fb ff ff       	call   c001c712 <IDE::polling(unsigned char, unsigned int)>
c001cb24:	83 c4 10             	add    esp,0x10
c001cb27:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb2d:	84 c0                	test   al,al
c001cb2f:	74 20                	je     c001cb51 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cb31:	0f b6 f8             	movzx  edi,al
c001cb34:	0f b6 d2             	movzx  edx,dl
c001cb37:	57                   	push   edi
c001cb38:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb3f:	50                   	push   eax
c001cb40:	52                   	push   edx
c001cb41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb47:	e8 30 fa ff ff       	call   c001c57c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb4c:	e9 85 00 00 00       	jmp    c001cbd6 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cb51:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cb56:	74 41                	je     c001cb99 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cb58:	31 c9                	xor    ecx,ecx
c001cb5a:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cb5e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cb62:	50                   	push   eax
c001cb63:	50                   	push   eax
c001cb64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb6b:	50                   	push   eax
c001cb6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb72:	e8 dd ef ff ff       	call   c001bb54 <IDE::getBase(unsigned char)>
c001cb77:	89 c2                	mov    edx,eax
c001cb79:	89 e8                	mov    eax,ebp
c001cb7b:	66 ef                	out    dx,ax
c001cb7d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cb81:	83 c4 10             	add    esp,0x10
c001cb84:	41                   	inc    ecx
c001cb85:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cb8b:	75 cd                	jne    c001cb5a <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cb8d:	4e                   	dec    esi
c001cb8e:	81 c7 00 02 00 00    	add    edi,0x200
c001cb94:	e9 6d ff ff ff       	jmp    c001cb06 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cb99:	0f b6 d2             	movzx  edx,dl
c001cb9c:	51                   	push   ecx
c001cb9d:	51                   	push   ecx
c001cb9e:	52                   	push   edx
c001cb9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cba5:	e8 aa ef ff ff       	call   c001bb54 <IDE::getBase(unsigned char)>
c001cbaa:	b9 00 01 00 00       	mov    ecx,0x100
c001cbaf:	89 c2                	mov    edx,eax
c001cbb1:	fc                   	cld    
c001cbb2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cbb5:	83 c4 10             	add    esp,0x10
c001cbb8:	eb d3                	jmp    c001cb8d <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cbba:	31 ff                	xor    edi,edi
c001cbbc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cbc1:	74 16                	je     c001cbd9 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cbc3:	50                   	push   eax
c001cbc4:	50                   	push   eax
c001cbc5:	31 c0                	xor    eax,eax
c001cbc7:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cbcc:	0f 94 c0             	sete   al
c001cbcf:	50                   	push   eax
c001cbd0:	53                   	push   ebx
c001cbd1:	e8 f6 fb ff ff       	call   c001c7cc <ATA::flush(bool)>
c001cbd6:	83 c4 10             	add    esp,0x10
c001cbd9:	83 c4 2c             	add    esp,0x2c
c001cbdc:	89 f8                	mov    eax,edi
c001cbde:	5b                   	pop    ebx
c001cbdf:	5e                   	pop    esi
c001cbe0:	5f                   	pop    edi
c001cbe1:	5d                   	pop    ebp
c001cbe2:	c3                   	ret    
c001cbe3:	90                   	nop

c001cbe4 <ATA::read(unsigned long long, int, void*)>:
c001cbe4:	57                   	push   edi
c001cbe5:	b8 04 00 00 00       	mov    eax,0x4
c001cbea:	56                   	push   esi
c001cbeb:	53                   	push   ebx
c001cbec:	83 ec 10             	sub    esp,0x10
c001cbef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cbf3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cbf7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cbfa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cbfe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc02:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc08:	77 3b                	ja     c001cc45 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc0a:	b8 06 00 00 00       	mov    eax,0x6
c001cc0f:	85 d2                	test   edx,edx
c001cc11:	74 32                	je     c001cc45 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc13:	50                   	push   eax
c001cc14:	50                   	push   eax
c001cc15:	6a 00                	push   0x0
c001cc17:	52                   	push   edx
c001cc18:	53                   	push   ebx
c001cc19:	57                   	push   edi
c001cc1a:	56                   	push   esi
c001cc1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc1f:	e8 42 fc ff ff       	call   c001c866 <ATA::access(unsigned long long, int, void*, bool)>
c001cc24:	83 c4 20             	add    esp,0x20
c001cc27:	85 c0                	test   eax,eax
c001cc29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc2d:	75 11                	jne    c001cc40 <ATA::read(unsigned long long, int, void*)+0x5c>
c001cc2f:	01 1d e4 53 02 c0    	add    DWORD PTR ds:0xc00253e4,ebx
c001cc35:	e8 3a ff fe ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c001cc3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc3e:	eb 05                	jmp    c001cc45 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc40:	b8 01 00 00 00       	mov    eax,0x1
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	5b                   	pop    ebx
c001cc49:	5e                   	pop    esi
c001cc4a:	5f                   	pop    edi
c001cc4b:	c3                   	ret    

c001cc4c <ATA::write(unsigned long long, int, void*)>:
c001cc4c:	57                   	push   edi
c001cc4d:	b8 04 00 00 00       	mov    eax,0x4
c001cc52:	56                   	push   esi
c001cc53:	53                   	push   ebx
c001cc54:	83 ec 10             	sub    esp,0x10
c001cc57:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc5b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc5f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc62:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc6a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc70:	77 3b                	ja     c001ccad <ATA::write(unsigned long long, int, void*)+0x61>
c001cc72:	b8 06 00 00 00       	mov    eax,0x6
c001cc77:	85 d2                	test   edx,edx
c001cc79:	74 32                	je     c001ccad <ATA::write(unsigned long long, int, void*)+0x61>
c001cc7b:	50                   	push   eax
c001cc7c:	50                   	push   eax
c001cc7d:	6a 01                	push   0x1
c001cc7f:	52                   	push   edx
c001cc80:	53                   	push   ebx
c001cc81:	57                   	push   edi
c001cc82:	56                   	push   esi
c001cc83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc87:	e8 da fb ff ff       	call   c001c866 <ATA::access(unsigned long long, int, void*, bool)>
c001cc8c:	83 c4 20             	add    esp,0x20
c001cc8f:	85 c0                	test   eax,eax
c001cc91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc95:	75 11                	jne    c001cca8 <ATA::write(unsigned long long, int, void*)+0x5c>
c001cc97:	01 1d e0 53 02 c0    	add    DWORD PTR ds:0xc00253e0,ebx
c001cc9d:	e8 d2 fe fe ff       	call   c000cb74 <VgaText::updateDiskUsage()>
c001cca2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cca6:	eb 05                	jmp    c001ccad <ATA::write(unsigned long long, int, void*)+0x61>
c001cca8:	b8 01 00 00 00       	mov    eax,0x1
c001ccad:	83 c4 10             	add    esp,0x10
c001ccb0:	5b                   	pop    ebx
c001ccb1:	5e                   	pop    esi
c001ccb2:	5f                   	pop    edi
c001ccb3:	c3                   	ret    

c001ccb4 <ATA::detectCHS()>:
c001ccb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccb8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ccbe:	c1 e0 06             	shl    eax,0x6
c001ccc1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ccc7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ccd1:	c7 44 24 04 67 26 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022667
c001ccd9:	e9 5a 7f ff ff       	jmp    c0014c38 <Krnl::panic(char const*)>

c001ccde <ATA::open(int, int, void*)>:
c001ccde:	53                   	push   ebx
c001ccdf:	83 ec 08             	sub    esp,0x8
c001cce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cce6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccee:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ccf4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ccfa:	c1 e0 06             	shl    eax,0x6
c001ccfd:	01 d0                	add    eax,edx
c001ccff:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cd06:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cd0c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cd13:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cd1d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cd23:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cd2a:	75 0c                	jne    c001cd38 <ATA::open(int, int, void*)+0x5a>
c001cd2c:	83 ec 0c             	sub    esp,0xc
c001cd2f:	53                   	push   ebx
c001cd30:	e8 7f ff ff ff       	call   c001ccb4 <ATA::detectCHS()>
c001cd35:	83 c4 10             	add    esp,0x10
c001cd38:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd3e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd44:	c1 e0 06             	shl    eax,0x6
c001cd47:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cd4e:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd58:	d1 e8                	shr    eax,1
c001cd5a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cd60:	6a 04                	push   0x4
c001cd62:	6a 0c                	push   0xc
c001cd64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd6b:	50                   	push   eax
c001cd6c:	52                   	push   edx
c001cd6d:	e8 f4 ed ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd72:	90                   	nop
c001cd73:	90                   	nop
c001cd74:	6a 00                	push   0x0
c001cd76:	6a 0c                	push   0xc
c001cd78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd7f:	50                   	push   eax
c001cd80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd86:	e8 db ed ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd8b:	83 c4 14             	add    esp,0x14
c001cd8e:	53                   	push   ebx
c001cd8f:	e8 88 3a ff ff       	call   c001081c <PhysicalDisk::startCache()>
c001cd94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd97:	e8 8e 53 ff ff       	call   c001212a <createPartitionsForDisk(PhysicalDisk*)>
c001cd9c:	31 c0                	xor    eax,eax
c001cd9e:	83 c4 18             	add    esp,0x18
c001cda1:	5b                   	pop    ebx
c001cda2:	c3                   	ret    
c001cda3:	90                   	nop

c001cda4 <ATAPI::write(unsigned long long, int, void*)>:
c001cda4:	b8 03 00 00 00       	mov    eax,0x3
c001cda9:	c3                   	ret    

c001cdaa <ATAPI::close(int, int, void*)>:
c001cdaa:	83 ec 0c             	sub    esp,0xc
c001cdad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdb1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cdb7:	85 c0                	test   eax,eax
c001cdb9:	74 0c                	je     c001cdc7 <ATAPI::close(int, int, void*)+0x1d>
c001cdbb:	83 ec 0c             	sub    esp,0xc
c001cdbe:	8b 10                	mov    edx,DWORD PTR [eax]
c001cdc0:	50                   	push   eax
c001cdc1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cdc4:	83 c4 10             	add    esp,0x10
c001cdc7:	31 c0                	xor    eax,eax
c001cdc9:	83 c4 0c             	add    esp,0xc
c001cdcc:	c3                   	ret    
c001cdcd:	90                   	nop

c001cdce <ATAPI::ATAPI()>:
c001cdce:	83 ec 0c             	sub    esp,0xc
c001cdd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd5:	83 ec 04             	sub    esp,0x4
c001cdd8:	68 00 08 00 00       	push   0x800
c001cddd:	68 b0 26 02 c0       	push   0xc00226b0
c001cde2:	50                   	push   eax
c001cde3:	e8 cc 39 ff ff       	call   c00107b4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cde8:	83 c4 10             	add    esp,0x10
c001cdeb:	ba f0 26 02 c0       	mov    edx,0xc00226f0
c001cdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf4:	89 10                	mov    DWORD PTR [eax],edx
c001cdf6:	90                   	nop
c001cdf7:	83 c4 0c             	add    esp,0xc
c001cdfa:	c3                   	ret    
c001cdfb:	90                   	nop

c001cdfc <ATAPI::readyForCommand()>:
c001cdfc:	56                   	push   esi
c001cdfd:	53                   	push   ebx
c001cdfe:	31 db                	xor    ebx,ebx
c001ce00:	50                   	push   eax
c001ce01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce05:	50                   	push   eax
c001ce06:	6a 0c                	push   0xc
c001ce08:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ce0f:	50                   	push   eax
c001ce10:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ce16:	e8 0b ee ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001ce1b:	83 c4 10             	add    esp,0x10
c001ce1e:	a8 88                	test   al,0x88
c001ce20:	74 23                	je     c001ce45 <ATAPI::readyForCommand()+0x49>
c001ce22:	43                   	inc    ebx
c001ce23:	83 fb 63             	cmp    ebx,0x63
c001ce26:	7e dd                	jle    c001ce05 <ATAPI::readyForCommand()+0x9>
c001ce28:	51                   	push   ecx
c001ce29:	51                   	push   ecx
c001ce2a:	6a 00                	push   0x0
c001ce2c:	68 40 42 0f 00       	push   0xf4240
c001ce31:	e8 d9 b3 ff ff       	call   c001820f <nanoSleep(unsigned long long)>
c001ce36:	83 c4 10             	add    esp,0x10
c001ce39:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ce3f:	75 c4                	jne    c001ce05 <ATAPI::readyForCommand()+0x9>
c001ce41:	31 c0                	xor    eax,eax
c001ce43:	eb 02                	jmp    c001ce47 <ATAPI::readyForCommand()+0x4b>
c001ce45:	b0 01                	mov    al,0x1
c001ce47:	5a                   	pop    edx
c001ce48:	5b                   	pop    ebx
c001ce49:	5e                   	pop    esi
c001ce4a:	c3                   	ret    
c001ce4b:	90                   	nop

c001ce4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ce4c:	55                   	push   ebp
c001ce4d:	57                   	push   edi
c001ce4e:	56                   	push   esi
c001ce4f:	53                   	push   ebx
c001ce50:	83 ec 20             	sub    esp,0x20
c001ce53:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ce57:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ce5b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ce5f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce63:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ce67:	6a 01                	push   0x1
c001ce69:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce70:	50                   	push   eax
c001ce71:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce77:	e8 f6 ee ff ff       	call   c001bd72 <IDE::enableIRQs(unsigned char, bool)>
c001ce7c:	5e                   	pop    esi
c001ce7d:	58                   	pop    eax
c001ce7e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce85:	50                   	push   eax
c001ce86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce8c:	e8 af ec ff ff       	call   c001bb40 <IDE::prepareInterrupt(unsigned char)>
c001ce91:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce94:	e8 63 ff ff ff       	call   c001cdfc <ATAPI::readyForCommand()>
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	84 c0                	test   al,al
c001ce9e:	75 0a                	jne    c001ceaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cea0:	bb 01 00 00 00       	mov    ebx,0x1
c001cea5:	e9 57 02 00 00       	jmp    c001d101 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ceaa:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ceb0:	c1 e0 04             	shl    eax,0x4
c001ceb3:	0f b6 c0             	movzx  eax,al
c001ceb6:	50                   	push   eax
c001ceb7:	6a 06                	push   0x6
c001ceb9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cec0:	50                   	push   eax
c001cec1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cec7:	e8 9a ec ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cecc:	6a 00                	push   0x0
c001cece:	6a 01                	push   0x1
c001ced0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ced7:	50                   	push   eax
c001ced8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cede:	e8 83 ec ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee3:	83 c4 20             	add    esp,0x20
c001cee6:	0f b6 c3             	movzx  eax,bl
c001cee9:	0f b6 df             	movzx  ebx,bh
c001ceec:	50                   	push   eax
c001ceed:	6a 04                	push   0x4
c001ceef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cef6:	50                   	push   eax
c001cef7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cefd:	e8 64 ec ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf02:	53                   	push   ebx
c001cf03:	6a 05                	push   0x5
c001cf05:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf0c:	50                   	push   eax
c001cf0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf13:	e8 4e ec ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf18:	83 c4 20             	add    esp,0x20
c001cf1b:	68 a0 00 00 00       	push   0xa0
c001cf20:	6a 07                	push   0x7
c001cf22:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf29:	50                   	push   eax
c001cf2a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf30:	e8 31 ec ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf35:	83 c4 0c             	add    esp,0xc
c001cf38:	6a 01                	push   0x1
c001cf3a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf41:	50                   	push   eax
c001cf42:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf48:	e8 c5 f7 ff ff       	call   c001c712 <IDE::polling(unsigned char, unsigned int)>
c001cf4d:	83 c4 10             	add    esp,0x10
c001cf50:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cf56:	84 c0                	test   al,al
c001cf58:	74 23                	je     c001cf7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cf5a:	0f b6 d8             	movzx  ebx,al
c001cf5d:	0f b6 d2             	movzx  edx,dl
c001cf60:	53                   	push   ebx
c001cf61:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cf68:	50                   	push   eax
c001cf69:	52                   	push   edx
c001cf6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf70:	e8 07 f6 ff ff       	call   c001c57c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf75:	83 c4 10             	add    esp,0x10
c001cf78:	e9 84 01 00 00       	jmp    c001d101 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cf7d:	0f b6 d2             	movzx  edx,dl
c001cf80:	53                   	push   ebx
c001cf81:	53                   	push   ebx
c001cf82:	52                   	push   edx
c001cf83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf89:	e8 c6 eb ff ff       	call   c001bb54 <IDE::getBase(unsigned char)>
c001cf8e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cf92:	b9 06 00 00 00       	mov    ecx,0x6
c001cf97:	89 c2                	mov    edx,eax
c001cf99:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cf9c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cfa0:	83 c4 10             	add    esp,0x10
c001cfa3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cfa9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cfb0:	85 db                	test   ebx,ebx
c001cfb2:	0f 84 ec 00 00 00    	je     c001d0a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cfb8:	51                   	push   ecx
c001cfb9:	51                   	push   ecx
c001cfba:	52                   	push   edx
c001cfbb:	50                   	push   eax
c001cfbc:	e8 13 ed ff ff       	call   c001bcd4 <IDE::waitInterrupt(unsigned char)>
c001cfc1:	83 c4 10             	add    esp,0x10
c001cfc4:	84 c0                	test   al,al
c001cfc6:	0f 84 d4 fe ff ff    	je     c001cea0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cfcc:	56                   	push   esi
c001cfcd:	56                   	push   esi
c001cfce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfd5:	50                   	push   eax
c001cfd6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfdc:	e8 5f eb ff ff       	call   c001bb40 <IDE::prepareInterrupt(unsigned char)>
c001cfe1:	83 c4 0c             	add    esp,0xc
c001cfe4:	6a 04                	push   0x4
c001cfe6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfed:	50                   	push   eax
c001cfee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cff4:	e8 2d ec ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001cff9:	83 c4 0c             	add    esp,0xc
c001cffc:	89 c6                	mov    esi,eax
c001cffe:	6a 05                	push   0x5
c001d000:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d007:	50                   	push   eax
c001d008:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d00e:	e8 13 ec ff ff       	call   c001bc26 <IDE::read(unsigned char, unsigned char)>
c001d013:	89 f1                	mov    ecx,esi
c001d015:	0f b6 c0             	movzx  eax,al
c001d018:	0f b6 f1             	movzx  esi,cl
c001d01b:	c1 e0 08             	shl    eax,0x8
c001d01e:	09 c6                	or     esi,eax
c001d020:	d1 fe                	sar    esi,1
c001d022:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d026:	83 c4 10             	add    esp,0x10
c001d029:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d02e:	74 41                	je     c001d071 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d030:	31 c9                	xor    ecx,ecx
c001d032:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d038:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d03f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d043:	75 0a                	jne    c001d04f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d045:	01 c9                	add    ecx,ecx
c001d047:	01 cd                	add    ebp,ecx
c001d049:	4b                   	dec    ebx
c001d04a:	e9 54 ff ff ff       	jmp    c001cfa3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d04f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d054:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d058:	51                   	push   ecx
c001d059:	51                   	push   ecx
c001d05a:	52                   	push   edx
c001d05b:	50                   	push   eax
c001d05c:	e8 f3 ea ff ff       	call   c001bb54 <IDE::getBase(unsigned char)>
c001d061:	89 c2                	mov    edx,eax
c001d063:	89 f0                	mov    eax,esi
c001d065:	66 ef                	out    dx,ax
c001d067:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d06b:	83 c4 10             	add    esp,0x10
c001d06e:	41                   	inc    ecx
c001d06f:	eb c1                	jmp    c001d032 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d071:	31 f6                	xor    esi,esi
c001d073:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d079:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d080:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d084:	75 06                	jne    c001d08c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d086:	01 f6                	add    esi,esi
c001d088:	01 f5                	add    ebp,esi
c001d08a:	eb bd                	jmp    c001d049 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d08c:	51                   	push   ecx
c001d08d:	51                   	push   ecx
c001d08e:	52                   	push   edx
c001d08f:	50                   	push   eax
c001d090:	e8 bf ea ff ff       	call   c001bb54 <IDE::getBase(unsigned char)>
c001d095:	89 c2                	mov    edx,eax
c001d097:	66 ed                	in     ax,dx
c001d099:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d09e:	83 c4 10             	add    esp,0x10
c001d0a1:	46                   	inc    esi
c001d0a2:	eb cf                	jmp    c001d073 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d0a4:	51                   	push   ecx
c001d0a5:	51                   	push   ecx
c001d0a6:	52                   	push   edx
c001d0a7:	50                   	push   eax
c001d0a8:	e8 27 ec ff ff       	call   c001bcd4 <IDE::waitInterrupt(unsigned char)>
c001d0ad:	83 c4 10             	add    esp,0x10
c001d0b0:	84 c0                	test   al,al
c001d0b2:	0f 84 e8 fd ff ff    	je     c001cea0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d0b8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d0bd:	52                   	push   edx
c001d0be:	52                   	push   edx
c001d0bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0c6:	50                   	push   eax
c001d0c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0cd:	e8 6e ea ff ff       	call   c001bb40 <IDE::prepareInterrupt(unsigned char)>
c001d0d2:	83 c4 10             	add    esp,0x10
c001d0d5:	50                   	push   eax
c001d0d6:	50                   	push   eax
c001d0d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0de:	50                   	push   eax
c001d0df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0e5:	e8 6a ea ff ff       	call   c001bb54 <IDE::getBase(unsigned char)>
c001d0ea:	8d 50 07             	lea    edx,[eax+0x7]
c001d0ed:	ec                   	in     al,dx
c001d0ee:	83 c4 10             	add    esp,0x10
c001d0f1:	a8 88                	test   al,0x88
c001d0f3:	74 0a                	je     c001d0ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d0f5:	4b                   	dec    ebx
c001d0f6:	75 dd                	jne    c001d0d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d0f8:	bb 02 00 00 00       	mov    ebx,0x2
c001d0fd:	eb 02                	jmp    c001d101 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d0ff:	31 db                	xor    ebx,ebx
c001d101:	83 c4 1c             	add    esp,0x1c
c001d104:	89 d8                	mov    eax,ebx
c001d106:	5b                   	pop    ebx
c001d107:	5e                   	pop    esi
c001d108:	5f                   	pop    edi
c001d109:	5d                   	pop    ebp
c001d10a:	c3                   	ret    
c001d10b:	90                   	nop

c001d10c <ATAPI::diskRemoved()>:
c001d10c:	83 ec 18             	sub    esp,0x18
c001d10f:	68 bb 26 02 c0       	push   0xc00226bb
c001d114:	e8 8a 1e ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001d119:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d11d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d124:	83 c4 1c             	add    esp,0x1c
c001d127:	c3                   	ret    

c001d128 <ATAPI::eject()>:
c001d128:	57                   	push   edi
c001d129:	b9 03 00 00 00       	mov    ecx,0x3
c001d12e:	53                   	push   ebx
c001d12f:	83 ec 14             	sub    esp,0x14
c001d132:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d136:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d13a:	fc                   	cld    
c001d13b:	31 c0                	xor    eax,eax
c001d13d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d13f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d144:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d149:	50                   	push   eax
c001d14a:	50                   	push   eax
c001d14b:	6a 00                	push   0x0
c001d14d:	6a 00                	push   0x0
c001d14f:	6a 00                	push   0x0
c001d151:	6a 02                	push   0x2
c001d153:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d157:	50                   	push   eax
c001d158:	53                   	push   ebx
c001d159:	e8 ee fc ff ff       	call   c001ce4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d15e:	83 c4 14             	add    esp,0x14
c001d161:	53                   	push   ebx
c001d162:	e8 a5 ff ff ff       	call   c001d10c <ATAPI::diskRemoved()>
c001d167:	83 c4 24             	add    esp,0x24
c001d16a:	5b                   	pop    ebx
c001d16b:	5f                   	pop    edi
c001d16c:	c3                   	ret    
c001d16d:	90                   	nop

c001d16e <ATAPI::diskInserted()>:
c001d16e:	53                   	push   ebx
c001d16f:	83 ec 14             	sub    esp,0x14
c001d172:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d176:	68 d1 26 02 c0       	push   0xc00226d1
c001d17b:	e8 23 1e ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001d180:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d187:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d18a:	e8 8d 36 ff ff       	call   c001081c <PhysicalDisk::startCache()>
c001d18f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d193:	83 c4 18             	add    esp,0x18
c001d196:	5b                   	pop    ebx
c001d197:	e9 8e 4f ff ff       	jmp    c001212a <createPartitionsForDisk(PhysicalDisk*)>

c001d19c <ATAPI::detectMedia()>:
c001d19c:	56                   	push   esi
c001d19d:	53                   	push   ebx
c001d19e:	83 ec 28             	sub    esp,0x28
c001d1a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d1a5:	6a 0c                	push   0xc
c001d1a7:	6a 00                	push   0x0
c001d1a9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d1ad:	56                   	push   esi
c001d1ae:	e8 55 34 fe ff       	call   c0000608 <memset>
c001d1b3:	58                   	pop    eax
c001d1b4:	5a                   	pop    edx
c001d1b5:	6a 00                	push   0x0
c001d1b7:	6a 00                	push   0x0
c001d1b9:	6a 00                	push   0x0
c001d1bb:	6a 00                	push   0x0
c001d1bd:	56                   	push   esi
c001d1be:	53                   	push   ebx
c001d1bf:	e8 88 fc ff ff       	call   c001ce4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d1c4:	83 c4 1c             	add    esp,0x1c
c001d1c7:	6a 0c                	push   0xc
c001d1c9:	6a 00                	push   0x0
c001d1cb:	56                   	push   esi
c001d1cc:	e8 37 34 fe ff       	call   c0000608 <memset>
c001d1d1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d1d6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d1db:	59                   	pop    ecx
c001d1dc:	58                   	pop    eax
c001d1dd:	6a 01                	push   0x1
c001d1df:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d1e3:	50                   	push   eax
c001d1e4:	6a 00                	push   0x0
c001d1e6:	6a 12                	push   0x12
c001d1e8:	56                   	push   esi
c001d1e9:	53                   	push   ebx
c001d1ea:	e8 5d fc ff ff       	call   c001ce4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d1ef:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d1f3:	83 c4 20             	add    esp,0x20
c001d1f6:	83 e0 7f             	and    eax,0x7f
c001d1f9:	3c 70                	cmp    al,0x70
c001d1fb:	74 15                	je     c001d212 <ATAPI::detectMedia()+0x76>
c001d1fd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d204:	75 0c                	jne    c001d212 <ATAPI::detectMedia()+0x76>
c001d206:	83 ec 0c             	sub    esp,0xc
c001d209:	53                   	push   ebx
c001d20a:	e8 5f ff ff ff       	call   c001d16e <ATAPI::diskInserted()>
c001d20f:	83 c4 10             	add    esp,0x10
c001d212:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d216:	83 e0 0f             	and    eax,0xf
c001d219:	3c 02                	cmp    al,0x2
c001d21b:	75 1b                	jne    c001d238 <ATAPI::detectMedia()+0x9c>
c001d21d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d222:	75 2d                	jne    c001d251 <ATAPI::detectMedia()+0xb5>
c001d224:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d22b:	74 24                	je     c001d251 <ATAPI::detectMedia()+0xb5>
c001d22d:	83 ec 0c             	sub    esp,0xc
c001d230:	53                   	push   ebx
c001d231:	e8 d6 fe ff ff       	call   c001d10c <ATAPI::diskRemoved()>
c001d236:	eb 16                	jmp    c001d24e <ATAPI::detectMedia()+0xb2>
c001d238:	84 c0                	test   al,al
c001d23a:	75 15                	jne    c001d251 <ATAPI::detectMedia()+0xb5>
c001d23c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d243:	75 0c                	jne    c001d251 <ATAPI::detectMedia()+0xb5>
c001d245:	83 ec 0c             	sub    esp,0xc
c001d248:	53                   	push   ebx
c001d249:	e8 20 ff ff ff       	call   c001d16e <ATAPI::diskInserted()>
c001d24e:	83 c4 10             	add    esp,0x10
c001d251:	83 c4 24             	add    esp,0x24
c001d254:	5b                   	pop    ebx
c001d255:	5e                   	pop    esi
c001d256:	c3                   	ret    
c001d257:	90                   	nop

c001d258 <ATAPI::open(int, int, void*)>:
c001d258:	53                   	push   ebx
c001d259:	83 ec 08             	sub    esp,0x8
c001d25c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d260:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d264:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d268:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d26e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d274:	c1 e0 06             	shl    eax,0x6
c001d277:	01 d0                	add    eax,edx
c001d279:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d280:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d286:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d28d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d297:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d29d:	6a 04                	push   0x4
c001d29f:	6a 0c                	push   0xc
c001d2a1:	51                   	push   ecx
c001d2a2:	52                   	push   edx
c001d2a3:	e8 be e8 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2a8:	90                   	nop
c001d2a9:	90                   	nop
c001d2aa:	6a 00                	push   0x0
c001d2ac:	6a 0c                	push   0xc
c001d2ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2b5:	50                   	push   eax
c001d2b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2bc:	e8 a5 e8 ff ff       	call   c001bb66 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2c1:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d2c8:	83 c4 14             	add    esp,0x14
c001d2cb:	53                   	push   ebx
c001d2cc:	e8 cb fe ff ff       	call   c001d19c <ATAPI::detectMedia()>
c001d2d1:	31 c0                	xor    eax,eax
c001d2d3:	83 c4 18             	add    esp,0x18
c001d2d6:	5b                   	pop    ebx
c001d2d7:	c3                   	ret    

c001d2d8 <ATAPI::read(unsigned long long, int, void*)>:
c001d2d8:	55                   	push   ebp
c001d2d9:	57                   	push   edi
c001d2da:	56                   	push   esi
c001d2db:	53                   	push   ebx
c001d2dc:	83 ec 1c             	sub    esp,0x1c
c001d2df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d2e7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d2eb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d2f2:	74 41                	je     c001d335 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d2f4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d2f8:	b9 03 00 00 00       	mov    ecx,0x3
c001d2fd:	fc                   	cld    
c001d2fe:	31 c0                	xor    eax,eax
c001d300:	86 fb                	xchg   bl,bh
c001d302:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d304:	c1 c3 10             	rol    ebx,0x10
c001d307:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d30c:	89 e8                	mov    eax,ebp
c001d30e:	86 fb                	xchg   bl,bh
c001d310:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d314:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d318:	50                   	push   eax
c001d319:	50                   	push   eax
c001d31a:	55                   	push   ebp
c001d31b:	c1 e5 0b             	shl    ebp,0xb
c001d31e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d322:	6a 00                	push   0x0
c001d324:	55                   	push   ebp
c001d325:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d329:	50                   	push   eax
c001d32a:	56                   	push   esi
c001d32b:	e8 1c fb ff ff       	call   c001ce4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d330:	83 c4 20             	add    esp,0x20
c001d333:	eb 1a                	jmp    c001d34f <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d335:	83 ec 0c             	sub    esp,0xc
c001d338:	56                   	push   esi
c001d339:	e8 5e fe ff ff       	call   c001d19c <ATAPI::detectMedia()>
c001d33e:	83 c4 10             	add    esp,0x10
c001d341:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d348:	75 aa                	jne    c001d2f4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d34a:	b8 02 00 00 00       	mov    eax,0x2
c001d34f:	83 c4 1c             	add    esp,0x1c
c001d352:	5b                   	pop    ebx
c001d353:	5e                   	pop    esi
c001d354:	5f                   	pop    edi
c001d355:	5d                   	pop    ebp
c001d356:	c3                   	ret    
c001d357:	90                   	nop

c001d358 <AVX::open(int, int, void*)>:
c001d358:	83 ec 0c             	sub    esp,0xc
c001d35b:	e8 08 10 00 00       	call   c001e368 <avxInit>
c001d360:	b8 00 00 00 00       	mov    eax,0x0
c001d365:	83 c4 0c             	add    esp,0xc
c001d368:	c3                   	ret    
c001d369:	90                   	nop

c001d36a <AVX::close(int, int, void*)>:
c001d36a:	83 ec 0c             	sub    esp,0xc
c001d36d:	e8 f7 0f 00 00       	call   c001e369 <avxClose>
c001d372:	b8 00 00 00 00       	mov    eax,0x0
c001d377:	83 c4 0c             	add    esp,0xc
c001d37a:	c3                   	ret    
c001d37b:	90                   	nop

c001d37c <AVX::available()>:
c001d37c:	83 ec 0c             	sub    esp,0xc
c001d37f:	e8 dc 0f 00 00       	call   c001e360 <avxDetect>
c001d384:	85 c0                	test   eax,eax
c001d386:	0f 95 c0             	setne  al
c001d389:	83 c4 0c             	add    esp,0xc
c001d38c:	c3                   	ret    
c001d38d:	90                   	nop

c001d38e <AVX::save(void*)>:
c001d38e:	83 ec 0c             	sub    esp,0xc
c001d391:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d395:	83 ec 0c             	sub    esp,0xc
c001d398:	50                   	push   eax
c001d399:	e8 c8 0f 00 00       	call   c001e366 <avxSave>
c001d39e:	83 c4 10             	add    esp,0x10
c001d3a1:	90                   	nop
c001d3a2:	83 c4 0c             	add    esp,0xc
c001d3a5:	c3                   	ret    

c001d3a6 <AVX::load(void*)>:
c001d3a6:	83 ec 0c             	sub    esp,0xc
c001d3a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3ad:	83 ec 0c             	sub    esp,0xc
c001d3b0:	50                   	push   eax
c001d3b1:	e8 b1 0f 00 00       	call   c001e367 <avxLoad>
c001d3b6:	83 c4 10             	add    esp,0x10
c001d3b9:	90                   	nop
c001d3ba:	83 c4 0c             	add    esp,0xc
c001d3bd:	c3                   	ret    

c001d3be <AVX::AVX()>:
c001d3be:	83 ec 0c             	sub    esp,0xc
c001d3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c5:	83 ec 08             	sub    esp,0x8
c001d3c8:	68 1c 27 02 c0       	push   0xc002271c
c001d3cd:	50                   	push   eax
c001d3ce:	e8 bf 34 ff ff       	call   c0010892 <FPU::FPU(char const*)>
c001d3d3:	83 c4 10             	add    esp,0x10
c001d3d6:	ba 2c 27 02 c0       	mov    edx,0xc002272c
c001d3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3df:	89 10                	mov    DWORD PTR [eax],edx
c001d3e1:	90                   	nop
c001d3e2:	83 c4 0c             	add    esp,0xc
c001d3e5:	c3                   	ret    

c001d3e6 <MMX::available()>:
c001d3e6:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c001d3eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d3f1:	83 e0 20             	and    eax,0x20
c001d3f4:	84 c0                	test   al,al
c001d3f6:	0f 95 c0             	setne  al
c001d3f9:	c3                   	ret    

c001d3fa <MMX::open(int, int, void*)>:
c001d3fa:	83 ec 0c             	sub    esp,0xc
c001d3fd:	e8 da 0f 00 00       	call   c001e3dc <x87Init>
c001d402:	b8 00 00 00 00       	mov    eax,0x0
c001d407:	83 c4 0c             	add    esp,0xc
c001d40a:	c3                   	ret    
c001d40b:	90                   	nop

c001d40c <MMX::close(int, int, void*)>:
c001d40c:	83 ec 0c             	sub    esp,0xc
c001d40f:	e8 e2 0f 00 00       	call   c001e3f6 <x87Close>
c001d414:	b8 00 00 00 00       	mov    eax,0x0
c001d419:	83 c4 0c             	add    esp,0xc
c001d41c:	c3                   	ret    
c001d41d:	90                   	nop

c001d41e <MMX::save(void*)>:
c001d41e:	83 ec 0c             	sub    esp,0xc
c001d421:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d425:	83 ec 0c             	sub    esp,0xc
c001d428:	50                   	push   eax
c001d429:	e8 a3 0f 00 00       	call   c001e3d1 <x87Save>
c001d42e:	83 c4 10             	add    esp,0x10
c001d431:	90                   	nop
c001d432:	83 c4 0c             	add    esp,0xc
c001d435:	c3                   	ret    

c001d436 <MMX::load(void*)>:
c001d436:	83 ec 0c             	sub    esp,0xc
c001d439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d43d:	83 ec 0c             	sub    esp,0xc
c001d440:	50                   	push   eax
c001d441:	e8 91 0f 00 00       	call   c001e3d7 <x87Load>
c001d446:	83 c4 10             	add    esp,0x10
c001d449:	90                   	nop
c001d44a:	83 c4 0c             	add    esp,0xc
c001d44d:	c3                   	ret    

c001d44e <MMX::MMX()>:
c001d44e:	83 ec 0c             	sub    esp,0xc
c001d451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d455:	83 ec 08             	sub    esp,0x8
c001d458:	68 5c 27 02 c0       	push   0xc002275c
c001d45d:	50                   	push   eax
c001d45e:	e8 2f 34 ff ff       	call   c0010892 <FPU::FPU(char const*)>
c001d463:	83 c4 10             	add    esp,0x10
c001d466:	ba 6c 27 02 c0       	mov    edx,0xc002276c
c001d46b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d46f:	89 10                	mov    DWORD PTR [eax],edx
c001d471:	90                   	nop
c001d472:	83 c4 0c             	add    esp,0xc
c001d475:	c3                   	ret    

c001d476 <SSE::open(int, int, void*)>:
c001d476:	83 ec 0c             	sub    esp,0xc
c001d479:	e8 19 0f 00 00       	call   c001e397 <sseInit>
c001d47e:	b8 00 00 00 00       	mov    eax,0x0
c001d483:	83 c4 0c             	add    esp,0xc
c001d486:	c3                   	ret    
c001d487:	90                   	nop

c001d488 <SSE::close(int, int, void*)>:
c001d488:	83 ec 0c             	sub    esp,0xc
c001d48b:	e8 17 0f 00 00       	call   c001e3a7 <sseClose>
c001d490:	b8 00 00 00 00       	mov    eax,0x0
c001d495:	83 c4 0c             	add    esp,0xc
c001d498:	c3                   	ret    
c001d499:	90                   	nop

c001d49a <SSE::available()>:
c001d49a:	83 ec 1c             	sub    esp,0x1c
c001d49d:	e8 ce 0e 00 00       	call   c001e370 <sseDetect>
c001d4a2:	85 c0                	test   eax,eax
c001d4a4:	0f 95 c0             	setne  al
c001d4a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d4ab:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d4af:	83 c4 1c             	add    esp,0x1c
c001d4b2:	c3                   	ret    
c001d4b3:	90                   	nop

c001d4b4 <SSE::save(void*)>:
c001d4b4:	83 ec 0c             	sub    esp,0xc
c001d4b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4bb:	83 ec 0c             	sub    esp,0xc
c001d4be:	50                   	push   eax
c001d4bf:	e8 c7 0e 00 00       	call   c001e38b <sseSave>
c001d4c4:	83 c4 10             	add    esp,0x10
c001d4c7:	90                   	nop
c001d4c8:	83 c4 0c             	add    esp,0xc
c001d4cb:	c3                   	ret    

c001d4cc <SSE::load(void*)>:
c001d4cc:	83 ec 0c             	sub    esp,0xc
c001d4cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4d3:	83 ec 0c             	sub    esp,0xc
c001d4d6:	50                   	push   eax
c001d4d7:	e8 b5 0e 00 00       	call   c001e391 <sseLoad>
c001d4dc:	83 c4 10             	add    esp,0x10
c001d4df:	90                   	nop
c001d4e0:	83 c4 0c             	add    esp,0xc
c001d4e3:	c3                   	ret    

c001d4e4 <SSE::SSE()>:
c001d4e4:	83 ec 0c             	sub    esp,0xc
c001d4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4eb:	83 ec 08             	sub    esp,0x8
c001d4ee:	68 9c 27 02 c0       	push   0xc002279c
c001d4f3:	50                   	push   eax
c001d4f4:	e8 99 33 ff ff       	call   c0010892 <FPU::FPU(char const*)>
c001d4f9:	83 c4 10             	add    esp,0x10
c001d4fc:	ba ac 27 02 c0       	mov    edx,0xc00227ac
c001d501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d505:	89 10                	mov    DWORD PTR [eax],edx
c001d507:	90                   	nop
c001d508:	83 c4 0c             	add    esp,0xc
c001d50b:	c3                   	ret    

c001d50c <x87::open(int, int, void*)>:
c001d50c:	83 ec 0c             	sub    esp,0xc
c001d50f:	e8 c8 0e 00 00       	call   c001e3dc <x87Init>
c001d514:	b8 00 00 00 00       	mov    eax,0x0
c001d519:	83 c4 0c             	add    esp,0xc
c001d51c:	c3                   	ret    
c001d51d:	90                   	nop

c001d51e <x87::close(int, int, void*)>:
c001d51e:	83 ec 0c             	sub    esp,0xc
c001d521:	e8 d0 0e 00 00       	call   c001e3f6 <x87Close>
c001d526:	b8 00 00 00 00       	mov    eax,0x0
c001d52b:	83 c4 0c             	add    esp,0xc
c001d52e:	c3                   	ret    
c001d52f:	90                   	nop

c001d530 <x87::available()>:
c001d530:	83 ec 0c             	sub    esp,0xc
c001d533:	e8 7e 0e 00 00       	call   c001e3b6 <x87Detect>
c001d538:	85 c0                	test   eax,eax
c001d53a:	0f 95 c0             	setne  al
c001d53d:	83 c4 0c             	add    esp,0xc
c001d540:	c3                   	ret    
c001d541:	90                   	nop

c001d542 <x87::save(void*)>:
c001d542:	83 ec 0c             	sub    esp,0xc
c001d545:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d549:	83 ec 0c             	sub    esp,0xc
c001d54c:	50                   	push   eax
c001d54d:	e8 7f 0e 00 00       	call   c001e3d1 <x87Save>
c001d552:	83 c4 10             	add    esp,0x10
c001d555:	90                   	nop
c001d556:	83 c4 0c             	add    esp,0xc
c001d559:	c3                   	ret    

c001d55a <x87::load(void*)>:
c001d55a:	83 ec 0c             	sub    esp,0xc
c001d55d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d561:	83 ec 0c             	sub    esp,0xc
c001d564:	50                   	push   eax
c001d565:	e8 6d 0e 00 00       	call   c001e3d7 <x87Load>
c001d56a:	83 c4 10             	add    esp,0x10
c001d56d:	90                   	nop
c001d56e:	83 c4 0c             	add    esp,0xc
c001d571:	c3                   	ret    

c001d572 <x87::x87()>:
c001d572:	83 ec 0c             	sub    esp,0xc
c001d575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d579:	83 ec 08             	sub    esp,0x8
c001d57c:	68 dc 27 02 c0       	push   0xc00227dc
c001d581:	50                   	push   eax
c001d582:	e8 0b 33 ff ff       	call   c0010892 <FPU::FPU(char const*)>
c001d587:	83 c4 10             	add    esp,0x10
c001d58a:	ba ec 27 02 c0       	mov    edx,0xc00227ec
c001d58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d593:	89 10                	mov    DWORD PTR [eax],edx
c001d595:	90                   	nop
c001d596:	83 c4 0c             	add    esp,0xc
c001d599:	c3                   	ret    

c001d59a <APIC::disable()>:
c001d59a:	90                   	nop
c001d59b:	c3                   	ret    

c001d59c <APIC::close(int, int, void*)>:
c001d59c:	55                   	push   ebp
c001d59d:	89 e5                	mov    ebp,esp
c001d59f:	83 ec 08             	sub    esp,0x8
c001d5a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5a7:	83 c0 3c             	add    eax,0x3c
c001d5aa:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5ac:	83 ec 0c             	sub    esp,0xc
c001d5af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5b2:	ff d0                	call   eax
c001d5b4:	83 c4 10             	add    esp,0x10
c001d5b7:	b8 00 00 00 00       	mov    eax,0x0
c001d5bc:	c9                   	leave  
c001d5bd:	c3                   	ret    

c001d5be <IOAPIC::close(int, int, void*)>:
c001d5be:	b8 00 00 00 00       	mov    eax,0x0
c001d5c3:	c3                   	ret    

c001d5c4 <APIC::io_wait()>:
c001d5c4:	eb 00                	jmp    c001d5c6 <APIC::io_wait()+0x2>
c001d5c6:	eb 00                	jmp    c001d5c8 <APIC::io_wait()+0x4>
c001d5c8:	90                   	nop
c001d5c9:	c3                   	ret    

c001d5ca <APIC::getBase()>:
c001d5ca:	55                   	push   ebp
c001d5cb:	89 e5                	mov    ebp,esp
c001d5cd:	83 ec 18             	sub    esp,0x18
c001d5d0:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c001d5d5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d5db:	83 e0 08             	and    eax,0x8
c001d5de:	84 c0                	test   al,al
c001d5e0:	75 07                	jne    c001d5e9 <APIC::getBase()+0x1f>
c001d5e2:	b8 00 00 00 00       	mov    eax,0x0
c001d5e7:	eb 21                	jmp    c001d60a <APIC::getBase()+0x40>
c001d5e9:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c001d5ee:	83 ec 08             	sub    esp,0x8
c001d5f1:	6a 1b                	push   0x1b
c001d5f3:	50                   	push   eax
c001d5f4:	e8 cd db fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001d5f9:	83 c4 10             	add    esp,0x10
c001d5fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d5ff:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d602:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d605:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d60a:	c9                   	leave  
c001d60b:	c3                   	ret    

c001d60c <APIC::eoi(unsigned char)>:
c001d60c:	55                   	push   ebp
c001d60d:	89 e5                	mov    ebp,esp
c001d60f:	83 ec 28             	sub    esp,0x28
c001d612:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d615:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d61e:	e8 a7 ff ff ff       	call   c001d5ca <APIC::getBase()>
c001d623:	83 c4 10             	add    esp,0x10
c001d626:	05 b0 00 00 00       	add    eax,0xb0
c001d62b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d62e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d631:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d637:	90                   	nop
c001d638:	c9                   	leave  
c001d639:	c3                   	ret    

c001d63a <APIC::open(int, int, void*)>:
c001d63a:	55                   	push   ebp
c001d63b:	89 e5                	mov    ebp,esp
c001d63d:	57                   	push   edi
c001d63e:	56                   	push   esi
c001d63f:	53                   	push   ebx
c001d640:	83 ec 1c             	sub    esp,0x1c
c001d643:	83 ec 0c             	sub    esp,0xc
c001d646:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d649:	e8 7c ff ff ff       	call   c001d5ca <APIC::getBase()>
c001d64e:	83 c4 10             	add    esp,0x10
c001d651:	05 f0 00 00 00       	add    eax,0xf0
c001d656:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d659:	83 ec 0c             	sub    esp,0xc
c001d65c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d65f:	e8 66 ff ff ff       	call   c001d5ca <APIC::getBase()>
c001d664:	83 c4 10             	add    esp,0x10
c001d667:	89 c2                	mov    edx,eax
c001d669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d66c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d672:	0f b6 f8             	movzx  edi,al
c001d675:	89 d0                	mov    eax,edx
c001d677:	ba 00 00 00 00       	mov    edx,0x0
c001d67c:	89 c1                	mov    ecx,eax
c001d67e:	80 e5 ff             	and    ch,0xff
c001d681:	89 cb                	mov    ebx,ecx
c001d683:	0f b6 f2             	movzx  esi,dl
c001d686:	89 d8                	mov    eax,ebx
c001d688:	89 f2                	mov    edx,esi
c001d68a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d68d:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d690:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d694:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d698:	83 e0 00             	and    eax,0x0
c001d69b:	09 d0                	or     eax,edx
c001d69d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6a4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d6aa:	8d 50 01             	lea    edx,[eax+0x1]
c001d6ad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d6b0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d6b6:	0f b6 d0             	movzx  edx,al
c001d6b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6bc:	83 c2 08             	add    edx,0x8
c001d6bf:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d6c3:	0f b6 c9             	movzx  ecx,cl
c001d6c6:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d6cc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d6d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d6d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6d5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d6d8:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d6df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d6e2:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d6e5:	89 10                	mov    DWORD PTR [eax],edx
c001d6e7:	b8 00 00 00 00       	mov    eax,0x0
c001d6ec:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d6ef:	5b                   	pop    ebx
c001d6f0:	5e                   	pop    esi
c001d6f1:	5f                   	pop    edi
c001d6f2:	5d                   	pop    ebp
c001d6f3:	c3                   	ret    

c001d6f4 <IOAPIC::IOAPIC()>:
c001d6f4:	83 ec 0c             	sub    esp,0xc
c001d6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6fb:	83 ec 08             	sub    esp,0x8
c001d6fe:	68 1c 28 02 c0       	push   0xc002281c
c001d703:	50                   	push   eax
c001d704:	e8 95 2e ff ff       	call   c001059e <Device::Device(char const*)>
c001d709:	83 c4 10             	add    esp,0x10
c001d70c:	ba 44 29 02 c0       	mov    edx,0xc0022944
c001d711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d715:	89 10                	mov    DWORD PTR [eax],edx
c001d717:	90                   	nop
c001d718:	83 c4 0c             	add    esp,0xc
c001d71b:	c3                   	ret    

c001d71c <APIC::APIC()>:
c001d71c:	53                   	push   ebx
c001d71d:	83 ec 18             	sub    esp,0x18
c001d720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d724:	83 ec 08             	sub    esp,0x8
c001d727:	68 24 28 02 c0       	push   0xc0022824
c001d72c:	50                   	push   eax
c001d72d:	e8 ae 35 ff ff       	call   c0010ce0 <InterruptController::InterruptController(char const*)>
c001d732:	83 c4 10             	add    esp,0x10
c001d735:	ba fc 28 02 c0       	mov    edx,0xc00228fc
c001d73a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d73e:	89 10                	mov    DWORD PTR [eax],edx
c001d740:	a0 40 54 02 c0       	mov    al,ds:0xc0025440
c001d745:	83 f0 01             	xor    eax,0x1
c001d748:	84 c0                	test   al,al
c001d74a:	0f 84 96 00 00 00    	je     c001d7e6 <APIC::APIC()+0xca>
c001d750:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d755:	a0 f0 3e 02 c0       	mov    al,ds:0xc0023ef0
c001d75a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d75e:	73 7f                	jae    c001d7df <APIC::APIC()+0xc3>
c001d760:	83 ec 0c             	sub    esp,0xc
c001d763:	68 68 01 00 00       	push   0x168
c001d768:	e8 47 17 ff ff       	call   c000eeb4 <operator new(unsigned long)>
c001d76d:	83 c4 10             	add    esp,0x10
c001d770:	89 c3                	mov    ebx,eax
c001d772:	83 ec 0c             	sub    esp,0xc
c001d775:	53                   	push   ebx
c001d776:	e8 79 ff ff ff       	call   c001d6f4 <IOAPIC::IOAPIC()>
c001d77b:	83 c4 10             	add    esp,0x10
c001d77e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d782:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d787:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d78b:	89 14 85 20 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdabe0],edx
c001d792:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c001d797:	40                   	inc    eax
c001d798:	a3 00 54 02 c0       	mov    ds:0xc0025400,eax
c001d79d:	a1 48 36 02 c0       	mov    eax,ds:0xc0023648
c001d7a2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d7a8:	83 ec 08             	sub    esp,0x8
c001d7ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d7af:	50                   	push   eax
c001d7b0:	e8 f9 2b ff ff       	call   c00103ae <Device::addChild(Device*)>
c001d7b5:	83 c4 10             	add    esp,0x10
c001d7b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7be:	83 c0 08             	add    eax,0x8
c001d7c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7c3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d7c8:	6a 00                	push   0x0
c001d7ca:	6a 00                	push   0x0
c001d7cc:	52                   	push   edx
c001d7cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d7d1:	ff d0                	call   eax
c001d7d3:	83 c4 10             	add    esp,0x10
c001d7d6:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d7da:	e9 76 ff ff ff       	jmp    c001d755 <APIC::APIC()+0x39>
c001d7df:	c6 05 40 54 02 c0 01 	mov    BYTE PTR ds:0xc0025440,0x1
c001d7e6:	90                   	nop
c001d7e7:	83 c4 18             	add    esp,0x18
c001d7ea:	5b                   	pop    ebx
c001d7eb:	c3                   	ret    

c001d7ec <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d7ec:	55                   	push   ebp
c001d7ed:	89 e5                	mov    ebp,esp
c001d7ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d7f8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d7fb:	72 1d                	jb     c001d81a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d7fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d800:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d809:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d80f:	01 d0                	add    eax,edx
c001d811:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d814:	73 04                	jae    c001d81a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d816:	b0 01                	mov    al,0x1
c001d818:	eb 02                	jmp    c001d81c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d81a:	b0 00                	mov    al,0x0
c001d81c:	5d                   	pop    ebp
c001d81d:	c3                   	ret    

c001d81e <IOAPIC::read(int)>:
c001d81e:	55                   	push   ebp
c001d81f:	89 e5                	mov    ebp,esp
c001d821:	83 ec 10             	sub    esp,0x10
c001d824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d827:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d82d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d830:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d833:	0f b6 d0             	movzx  edx,al
c001d836:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d839:	89 10                	mov    DWORD PTR [eax],edx
c001d83b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d83e:	83 c0 10             	add    eax,0x10
c001d841:	8b 00                	mov    eax,DWORD PTR [eax]
c001d843:	c9                   	leave  
c001d844:	c3                   	ret    
c001d845:	90                   	nop

c001d846 <IOAPIC::open(int, int, void*)>:
c001d846:	55                   	push   ebp
c001d847:	89 e5                	mov    ebp,esp
c001d849:	57                   	push   edi
c001d84a:	56                   	push   esi
c001d84b:	53                   	push   ebx
c001d84c:	83 ec 0c             	sub    esp,0xc
c001d84f:	83 ec 0c             	sub    esp,0xc
c001d852:	68 4f 28 02 c0       	push   0xc002284f
c001d857:	e8 47 17 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001d85c:	83 c4 10             	add    esp,0x10
c001d85f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d862:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d865:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d86b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d86e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d874:	8b 14 85 20 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc0e0]
c001d87b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d87e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d887:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d88d:	8b 14 85 a0 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc060]
c001d894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d897:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d89d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d8a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8a9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d8af:	0f b6 f8             	movzx  edi,al
c001d8b2:	89 d0                	mov    eax,edx
c001d8b4:	ba 00 00 00 00       	mov    edx,0x0
c001d8b9:	89 c1                	mov    ecx,eax
c001d8bb:	80 e5 ff             	and    ch,0xff
c001d8be:	89 cb                	mov    ebx,ecx
c001d8c0:	0f b6 f2             	movzx  esi,dl
c001d8c3:	89 d8                	mov    eax,ebx
c001d8c5:	89 f2                	mov    edx,esi
c001d8c7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d8ca:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d8cd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d8d1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d8d5:	83 e0 00             	and    eax,0x0
c001d8d8:	09 d0                	or     eax,edx
c001d8da:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d8de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8e1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d8e7:	8d 50 01             	lea    edx,[eax+0x1]
c001d8ea:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d8ed:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d8f3:	0f b6 d0             	movzx  edx,al
c001d8f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8f9:	83 c2 08             	add    edx,0x8
c001d8fc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d900:	0f b6 c9             	movzx  ecx,cl
c001d903:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d909:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d90d:	83 ec 08             	sub    esp,0x8
c001d910:	6a 01                	push   0x1
c001d912:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d915:	e8 04 ff ff ff       	call   c001d81e <IOAPIC::read(int)>
c001d91a:	83 c4 10             	add    esp,0x10
c001d91d:	c1 f8 10             	sar    eax,0x10
c001d920:	0f b6 c0             	movzx  eax,al
c001d923:	8d 50 01             	lea    edx,[eax+0x1]
c001d926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d929:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d92f:	b8 00 00 00 00       	mov    eax,0x0
c001d934:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d937:	5b                   	pop    ebx
c001d938:	5e                   	pop    esi
c001d939:	5f                   	pop    edi
c001d93a:	5d                   	pop    ebp
c001d93b:	c3                   	ret    

c001d93c <IOAPIC::write(int, int)>:
c001d93c:	55                   	push   ebp
c001d93d:	89 e5                	mov    ebp,esp
c001d93f:	83 ec 10             	sub    esp,0x10
c001d942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d945:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d94b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d94e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d951:	0f b6 d0             	movzx  edx,al
c001d954:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d957:	89 10                	mov    DWORD PTR [eax],edx
c001d959:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d95c:	8d 50 10             	lea    edx,[eax+0x10]
c001d95f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d962:	89 02                	mov    DWORD PTR [edx],eax
c001d964:	90                   	nop
c001d965:	c9                   	leave  
c001d966:	c3                   	ret    
c001d967:	90                   	nop

c001d968 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d968:	55                   	push   ebp
c001d969:	89 e5                	mov    ebp,esp
c001d96b:	83 ec 20             	sub    esp,0x20
c001d96e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d971:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d974:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d977:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d97a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d97d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d980:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d983:	88 d0                	mov    al,dl
c001d985:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d988:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d98c:	83 c0 08             	add    eax,0x8
c001d98f:	01 c0                	add    eax,eax
c001d991:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d994:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d998:	83 c0 08             	add    eax,0x8
c001d99b:	01 c0                	add    eax,eax
c001d99d:	40                   	inc    eax
c001d99e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d9a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d9a4:	50                   	push   eax
c001d9a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9a8:	e8 71 fe ff ff       	call   c001d81e <IOAPIC::read(int)>
c001d9ad:	83 c4 08             	add    esp,0x8
c001d9b0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d9b3:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d9ba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d9bd:	c1 e0 18             	shl    eax,0x18
c001d9c0:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d9c3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d9c6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d9c9:	52                   	push   edx
c001d9ca:	50                   	push   eax
c001d9cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9ce:	e8 69 ff ff ff       	call   c001d93c <IOAPIC::write(int, int)>
c001d9d3:	83 c4 0c             	add    esp,0xc
c001d9d6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9d9:	50                   	push   eax
c001d9da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9dd:	e8 3c fe ff ff       	call   c001d81e <IOAPIC::read(int)>
c001d9e2:	83 c4 08             	add    esp,0x8
c001d9e5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d9e8:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d9ef:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d9f6:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d9fd:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001da04:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001da08:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001da0b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001da0e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da11:	52                   	push   edx
c001da12:	50                   	push   eax
c001da13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da16:	e8 21 ff ff ff       	call   c001d93c <IOAPIC::write(int, int)>
c001da1b:	83 c4 0c             	add    esp,0xc
c001da1e:	90                   	nop
c001da1f:	c9                   	leave  
c001da20:	c3                   	ret    
c001da21:	90                   	nop

c001da22 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001da22:	55                   	push   ebp
c001da23:	89 e5                	mov    ebp,esp
c001da25:	56                   	push   esi
c001da26:	53                   	push   ebx
c001da27:	83 ec 20             	sub    esp,0x20
c001da2a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001da2d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001da30:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001da34:	74 28                	je     c001da5e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da36:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001da3a:	7f 12                	jg     c001da4e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001da3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da3f:	05 a0 2d 02 c0       	add    eax,0xc0022da0
c001da44:	8a 00                	mov    al,BYTE PTR [eax]
c001da46:	0f b6 c0             	movzx  eax,al
c001da49:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001da4c:	eb 10                	jmp    c001da5e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da4e:	83 ec 0c             	sub    esp,0xc
c001da51:	68 60 28 02 c0       	push   0xc0022860
c001da56:	e8 dd 71 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001da5b:	83 c4 10             	add    esp,0x10
c001da5e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001da62:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c001da67:	83 ec 08             	sub    esp,0x8
c001da6a:	50                   	push   eax
c001da6b:	68 98 28 02 c0       	push   0xc0022898
c001da70:	e8 2e 15 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001da75:	83 c4 10             	add    esp,0x10
c001da78:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001da7f:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c001da84:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001da87:	7d 58                	jge    c001dae1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001da89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da8c:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c001da93:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da96:	83 ec 08             	sub    esp,0x8
c001da99:	52                   	push   edx
c001da9a:	50                   	push   eax
c001da9b:	e8 4c fd ff ff       	call   c001d7ec <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001daa0:	83 c4 10             	add    esp,0x10
c001daa3:	84 c0                	test   al,al
c001daa5:	74 35                	je     c001dadc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001daa7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001daaa:	8b 1c 85 20 54 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdabe0]
c001dab1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dab4:	83 c0 20             	add    eax,0x20
c001dab7:	0f b6 f0             	movzx  esi,al
c001daba:	e8 70 64 ff ff       	call   c0013f2f <getCPUNumber()>
c001dabf:	99                   	cdq    
c001dac0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001dac3:	0f b6 c9             	movzx  ecx,cl
c001dac6:	83 ec 0c             	sub    esp,0xc
c001dac9:	56                   	push   esi
c001daca:	52                   	push   edx
c001dacb:	50                   	push   eax
c001dacc:	51                   	push   ecx
c001dacd:	53                   	push   ebx
c001dace:	e8 95 fe ff ff       	call   c001d968 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001dad3:	83 c4 20             	add    esp,0x20
c001dad6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001dada:	eb 05                	jmp    c001dae1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001dadc:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001dadf:	eb 9e                	jmp    c001da7f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001dae1:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001dae4:	83 f0 01             	xor    eax,0x1
c001dae7:	84 c0                	test   al,al
c001dae9:	74 10                	je     c001dafb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001daeb:	83 ec 0c             	sub    esp,0xc
c001daee:	68 af 28 02 c0       	push   0xc00228af
c001daf3:	e8 40 71 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001daf8:	83 c4 10             	add    esp,0x10
c001dafb:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001daff:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001db06:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001db0a:	7f 65                	jg     c001db71 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001db0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db0f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db12:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db1c:	01 ca                	add    edx,ecx
c001db1e:	83 c2 54             	add    edx,0x54
c001db21:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001db25:	85 c0                	test   eax,eax
c001db27:	75 43                	jne    c001db6c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001db29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db2f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db36:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db39:	01 ca                	add    edx,ecx
c001db3b:	8d 4a 54             	lea    ecx,[edx+0x54]
c001db3e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001db41:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db48:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db4b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db52:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db55:	01 ca                	add    edx,ecx
c001db57:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001db5d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001db60:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db67:	83 e8 20             	sub    eax,0x20
c001db6a:	eb 1a                	jmp    c001db86 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001db6c:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001db6f:	eb 95                	jmp    c001db06 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001db71:	83 ec 0c             	sub    esp,0xc
c001db74:	68 bc 28 02 c0       	push   0xc00228bc
c001db79:	e8 ba 70 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001db7e:	83 c4 10             	add    esp,0x10
c001db81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db86:	8d 65 f8             	lea    esp,[ebp-0x8]
c001db89:	5b                   	pop    ebx
c001db8a:	5e                   	pop    esi
c001db8b:	5d                   	pop    ebp
c001db8c:	c3                   	ret    
c001db8d:	90                   	nop

c001db8e <PIC::disable()>:
c001db8e:	55                   	push   ebp
c001db8f:	89 e5                	mov    ebp,esp
c001db91:	83 ec 10             	sub    esp,0x10
c001db94:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001db9a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001db9e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dba1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dba5:	ee                   	out    dx,al
c001dba6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001dbac:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dbb0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dbb3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001dbb7:	ee                   	out    dx,al
c001dbb8:	90                   	nop
c001dbb9:	c9                   	leave  
c001dbba:	c3                   	ret    
c001dbbb:	90                   	nop

c001dbbc <PIC::close(int, int, void*)>:
c001dbbc:	55                   	push   ebp
c001dbbd:	89 e5                	mov    ebp,esp
c001dbbf:	83 ec 08             	sub    esp,0x8
c001dbc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbc7:	83 c0 3c             	add    eax,0x3c
c001dbca:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbcc:	83 ec 0c             	sub    esp,0xc
c001dbcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbd2:	ff d0                	call   eax
c001dbd4:	83 c4 10             	add    esp,0x10
c001dbd7:	b8 00 00 00 00       	mov    eax,0x0
c001dbdc:	c9                   	leave  
c001dbdd:	c3                   	ret    

c001dbde <PIC::PIC()>:
c001dbde:	83 ec 0c             	sub    esp,0xc
c001dbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe5:	83 ec 08             	sub    esp,0x8
c001dbe8:	68 68 29 02 c0       	push   0xc0022968
c001dbed:	50                   	push   eax
c001dbee:	e8 ed 30 ff ff       	call   c0010ce0 <InterruptController::InterruptController(char const*)>
c001dbf3:	83 c4 10             	add    esp,0x10
c001dbf6:	ba 94 29 02 c0       	mov    edx,0xc0022994
c001dbfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbff:	89 10                	mov    DWORD PTR [eax],edx
c001dc01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc05:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc0b:	0f b6 d0             	movzx  edx,al
c001dc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc12:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dc19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc1d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc23:	0f b6 d0             	movzx  edx,al
c001dc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc39:	8d 50 01             	lea    edx,[eax+0x1]
c001dc3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc40:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc46:	0f b6 d0             	movzx  edx,al
c001dc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc51:	83 e1 3f             	and    ecx,0x3f
c001dc54:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc62:	0f b6 d0             	movzx  edx,al
c001dc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc69:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc74:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc7a:	0f b6 d0             	movzx  edx,al
c001dc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc81:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc8a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc90:	8d 50 01             	lea    edx,[eax+0x1]
c001dc93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc97:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc9d:	0f b6 d0             	movzx  edx,al
c001dca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dca8:	83 e1 3f             	and    ecx,0x3f
c001dcab:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dcaf:	90                   	nop
c001dcb0:	83 c4 0c             	add    esp,0xc
c001dcb3:	c3                   	ret    

c001dcb4 <PIC::ioWait()>:
c001dcb4:	eb 00                	jmp    c001dcb6 <PIC::ioWait()+0x2>
c001dcb6:	eb 00                	jmp    c001dcb8 <PIC::ioWait()+0x4>
c001dcb8:	90                   	nop
c001dcb9:	c3                   	ret    

c001dcba <PIC::getIRQReg(int)>:
c001dcba:	55                   	push   ebp
c001dcbb:	89 e5                	mov    ebp,esp
c001dcbd:	83 ec 10             	sub    esp,0x10
c001dcc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dcc3:	0f b6 c0             	movzx  eax,al
c001dcc6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dccc:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dccf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dcd2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dcd6:	ee                   	out    dx,al
c001dcd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dcda:	0f b6 c0             	movzx  eax,al
c001dcdd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dce3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dce6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dce9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dced:	ee                   	out    dx,al
c001dcee:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dcf4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dcf8:	89 c2                	mov    edx,eax
c001dcfa:	ec                   	in     al,dx
c001dcfb:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dcfe:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd01:	0f b6 c0             	movzx  eax,al
c001dd04:	c1 e0 08             	shl    eax,0x8
c001dd07:	89 c1                	mov    ecx,eax
c001dd09:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dd0f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dd13:	89 c2                	mov    edx,eax
c001dd15:	ec                   	in     al,dx
c001dd16:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dd19:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dd1c:	0f b6 c0             	movzx  eax,al
c001dd1f:	09 c8                	or     eax,ecx
c001dd21:	c9                   	leave  
c001dd22:	c3                   	ret    
c001dd23:	90                   	nop

c001dd24 <PIC::eoi(unsigned char)>:
c001dd24:	55                   	push   ebp
c001dd25:	89 e5                	mov    ebp,esp
c001dd27:	83 ec 14             	sub    esp,0x14
c001dd2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd2d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dd30:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd34:	75 1e                	jne    c001dd54 <PIC::eoi(unsigned char)+0x30>
c001dd36:	6a 0b                	push   0xb
c001dd38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd3b:	e8 7a ff ff ff       	call   c001dcba <PIC::getIRQReg(int)>
c001dd40:	83 c4 08             	add    esp,0x8
c001dd43:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dd47:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dd4b:	25 80 00 00 00       	and    eax,0x80
c001dd50:	85 c0                	test   eax,eax
c001dd52:	74 5f                	je     c001ddb3 <PIC::eoi(unsigned char)+0x8f>
c001dd54:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001dd58:	75 2d                	jne    c001dd87 <PIC::eoi(unsigned char)+0x63>
c001dd5a:	6a 0b                	push   0xb
c001dd5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd5f:	e8 56 ff ff ff       	call   c001dcba <PIC::getIRQReg(int)>
c001dd64:	83 c4 08             	add    esp,0x8
c001dd67:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001dd6b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dd6e:	66 85 c0             	test   ax,ax
c001dd71:	78 14                	js     c001dd87 <PIC::eoi(unsigned char)+0x63>
c001dd73:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001dd79:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001dd7d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd80:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dd84:	ee                   	out    dx,al
c001dd85:	eb 2d                	jmp    c001ddb4 <PIC::eoi(unsigned char)+0x90>
c001dd87:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd8b:	76 12                	jbe    c001dd9f <PIC::eoi(unsigned char)+0x7b>
c001dd8d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd93:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001dd97:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd9a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd9e:	ee                   	out    dx,al
c001dd9f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dda5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001dda9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ddac:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ddb0:	ee                   	out    dx,al
c001ddb1:	eb 01                	jmp    c001ddb4 <PIC::eoi(unsigned char)+0x90>
c001ddb3:	90                   	nop
c001ddb4:	c9                   	leave  
c001ddb5:	c3                   	ret    

c001ddb6 <PIC::remap()>:
c001ddb6:	55                   	push   ebp
c001ddb7:	89 e5                	mov    ebp,esp
c001ddb9:	83 ec 48             	sub    esp,0x48
c001ddbc:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ddc3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ddca:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ddd0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ddd3:	89 c2                	mov    edx,eax
c001ddd5:	ec                   	in     al,dx
c001ddd6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ddd9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001dddc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001dddf:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001dde5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001dde8:	89 c2                	mov    edx,eax
c001ddea:	ec                   	in     al,dx
c001ddeb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ddee:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ddf1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ddf4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ddfa:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ddfe:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001de01:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001de04:	ee                   	out    dx,al
c001de05:	83 ec 0c             	sub    esp,0xc
c001de08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de0b:	e8 a4 fe ff ff       	call   c001dcb4 <PIC::ioWait()>
c001de10:	83 c4 10             	add    esp,0x10
c001de13:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001de19:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001de1d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001de20:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001de23:	ee                   	out    dx,al
c001de24:	83 ec 0c             	sub    esp,0xc
c001de27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de2a:	e8 85 fe ff ff       	call   c001dcb4 <PIC::ioWait()>
c001de2f:	83 c4 10             	add    esp,0x10
c001de32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001de35:	0f b6 c0             	movzx  eax,al
c001de38:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001de3e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001de41:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001de44:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001de47:	ee                   	out    dx,al
c001de48:	83 ec 0c             	sub    esp,0xc
c001de4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de4e:	e8 61 fe ff ff       	call   c001dcb4 <PIC::ioWait()>
c001de53:	83 c4 10             	add    esp,0x10
c001de56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001de59:	0f b6 c0             	movzx  eax,al
c001de5c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001de62:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001de65:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001de68:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001de6b:	ee                   	out    dx,al
c001de6c:	83 ec 0c             	sub    esp,0xc
c001de6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de72:	e8 3d fe ff ff       	call   c001dcb4 <PIC::ioWait()>
c001de77:	83 c4 10             	add    esp,0x10
c001de7a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001de80:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001de84:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001de87:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001de8a:	ee                   	out    dx,al
c001de8b:	83 ec 0c             	sub    esp,0xc
c001de8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de91:	e8 1e fe ff ff       	call   c001dcb4 <PIC::ioWait()>
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001de9f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001dea3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001dea6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001dea9:	ee                   	out    dx,al
c001deaa:	83 ec 0c             	sub    esp,0xc
c001dead:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001deb0:	e8 ff fd ff ff       	call   c001dcb4 <PIC::ioWait()>
c001deb5:	83 c4 10             	add    esp,0x10
c001deb8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001debe:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001dec2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001dec5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001dec8:	ee                   	out    dx,al
c001dec9:	83 ec 0c             	sub    esp,0xc
c001decc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001decf:	e8 e0 fd ff ff       	call   c001dcb4 <PIC::ioWait()>
c001ded4:	83 c4 10             	add    esp,0x10
c001ded7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001dedd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001dee1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001dee4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dee7:	ee                   	out    dx,al
c001dee8:	83 ec 0c             	sub    esp,0xc
c001deeb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001deee:	e8 c1 fd ff ff       	call   c001dcb4 <PIC::ioWait()>
c001def3:	83 c4 10             	add    esp,0x10
c001def6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001defa:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001df00:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001df03:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001df06:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df09:	ee                   	out    dx,al
c001df0a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001df0e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001df14:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001df17:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001df1a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001df1d:	ee                   	out    dx,al
c001df1e:	90                   	nop
c001df1f:	c9                   	leave  
c001df20:	c3                   	ret    
c001df21:	90                   	nop

c001df22 <PIC::open(int, int, void*)>:
c001df22:	55                   	push   ebp
c001df23:	89 e5                	mov    ebp,esp
c001df25:	83 ec 18             	sub    esp,0x18
c001df28:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001df2e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001df32:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001df35:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001df39:	ee                   	out    dx,al
c001df3a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001df40:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001df44:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001df47:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001df4b:	ee                   	out    dx,al
c001df4c:	83 ec 0c             	sub    esp,0xc
c001df4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df52:	e8 5f fe ff ff       	call   c001ddb6 <PIC::remap()>
c001df57:	83 c4 10             	add    esp,0x10
c001df5a:	b8 00 00 00 00       	mov    eax,0x0
c001df5f:	c9                   	leave  
c001df60:	c3                   	ret    
c001df61:	90                   	nop

c001df62 <APICTimer::close(int, int, void*)>:
c001df62:	b8 00 00 00 00       	mov    eax,0x0
c001df67:	c3                   	ret    

c001df68 <apicTimerHandler(regs*, void*)>:
c001df68:	83 ec 0c             	sub    esp,0xc
c001df6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001df71:	99                   	cdq    
c001df72:	52                   	push   edx
c001df73:	50                   	push   eax
c001df74:	6a 00                	push   0x0
c001df76:	68 00 ca 9a 3b       	push   0x3b9aca00
c001df7b:	e8 6c 07 00 00       	call   c001e6ec <__udivdi3>
c001df80:	83 c4 10             	add    esp,0x10
c001df83:	83 ec 08             	sub    esp,0x8
c001df86:	52                   	push   edx
c001df87:	50                   	push   eax
c001df88:	e8 be 44 ff ff       	call   c001244b <timerHandler(unsigned long long)>
c001df8d:	83 c4 10             	add    esp,0x10
c001df90:	90                   	nop
c001df91:	83 c4 0c             	add    esp,0xc
c001df94:	c3                   	ret    
c001df95:	90                   	nop

c001df96 <APICTimer::write(int)>:
c001df96:	53                   	push   ebx
c001df97:	83 ec 28             	sub    esp,0x28
c001df9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dfa2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dfa8:	e8 85 5f ff ff       	call   c0013f32 <thisCPU()>
c001dfad:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dfb3:	83 ec 0c             	sub    esp,0xc
c001dfb6:	50                   	push   eax
c001dfb7:	e8 0e f6 ff ff       	call   c001d5ca <APIC::getBase()>
c001dfbc:	83 c4 10             	add    esp,0x10
c001dfbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dfc3:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001dfc8:	8b 15 b4 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023cb4
c001dfce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dfd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001dfd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfda:	05 e0 03 00 00       	add    eax,0x3e0
c001dfdf:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dfe5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfe9:	05 80 03 00 00       	add    eax,0x380
c001dfee:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001dff4:	fb                   	sti    
c001dff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dffd:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e002:	83 d2 00             	adc    edx,0x0
c001e005:	89 c1                	mov    ecx,eax
c001e007:	89 d3                	mov    ebx,edx
c001e009:	a1 b0 3c 02 c0       	mov    eax,ds:0xc0023cb0
c001e00e:	8b 15 b4 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023cb4
c001e014:	39 c8                	cmp    eax,ecx
c001e016:	89 d0                	mov    eax,edx
c001e018:	19 d8                	sbb    eax,ebx
c001e01a:	73 02                	jae    c001e01e <APICTimer::write(int)+0x88>
c001e01c:	eb d7                	jmp    c001dff5 <APICTimer::write(int)+0x5f>
c001e01e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e022:	05 20 03 00 00       	add    eax,0x320
c001e027:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e02d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e031:	05 90 03 00 00       	add    eax,0x390
c001e036:	8b 00                	mov    eax,DWORD PTR [eax]
c001e038:	f7 d0                	not    eax
c001e03a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e03e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e042:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e046:	ba 00 00 00 00       	mov    edx,0x0
c001e04b:	f7 f3                	div    ebx
c001e04d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e051:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e055:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e05b:	0d 00 00 02 00       	or     eax,0x20000
c001e060:	89 c2                	mov    edx,eax
c001e062:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e066:	05 20 03 00 00       	add    eax,0x320
c001e06b:	89 10                	mov    DWORD PTR [eax],edx
c001e06d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e071:	05 e0 03 00 00       	add    eax,0x3e0
c001e076:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e07c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e080:	05 80 03 00 00       	add    eax,0x380
c001e085:	89 c2                	mov    edx,eax
c001e087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e08b:	89 02                	mov    DWORD PTR [edx],eax
c001e08d:	90                   	nop
c001e08e:	83 c4 28             	add    esp,0x28
c001e091:	5b                   	pop    ebx
c001e092:	c3                   	ret    
c001e093:	90                   	nop

c001e094 <APICTimer::open(int, int, void*)>:
c001e094:	57                   	push   edi
c001e095:	56                   	push   esi
c001e096:	53                   	push   ebx
c001e097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e09b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e09d:	83 c0 24             	add    eax,0x24
c001e0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0a2:	83 ec 08             	sub    esp,0x8
c001e0a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0ad:	ff d0                	call   eax
c001e0af:	83 c4 10             	add    esp,0x10
c001e0b2:	e8 7b 5e ff ff       	call   c0013f32 <thisCPU()>
c001e0b7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e0bd:	83 ec 0c             	sub    esp,0xc
c001e0c0:	50                   	push   eax
c001e0c1:	e8 04 f5 ff ff       	call   c001d5ca <APIC::getBase()>
c001e0c6:	83 c4 10             	add    esp,0x10
c001e0c9:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0d3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e0d9:	0f b6 f8             	movzx  edi,al
c001e0dc:	89 d0                	mov    eax,edx
c001e0de:	ba 00 00 00 00       	mov    edx,0x0
c001e0e3:	89 c1                	mov    ecx,eax
c001e0e5:	80 e5 ff             	and    ch,0xff
c001e0e8:	89 cb                	mov    ebx,ecx
c001e0ea:	0f b6 f2             	movzx  esi,dl
c001e0ed:	89 d8                	mov    eax,ebx
c001e0ef:	89 f2                	mov    edx,esi
c001e0f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0f5:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e0f8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e0fc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e100:	83 e0 00             	and    eax,0x0
c001e103:	09 d0                	or     eax,edx
c001e105:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e10d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e113:	8d 50 01             	lea    edx,[eax+0x1]
c001e116:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e11a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e120:	0f b6 d0             	movzx  edx,al
c001e123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e127:	83 c2 08             	add    edx,0x8
c001e12a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e12e:	0f b6 c9             	movzx  ecx,cl
c001e131:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e137:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e13f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e143:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e14d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e151:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e157:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e15b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e161:	83 ec 0c             	sub    esp,0xc
c001e164:	51                   	push   ecx
c001e165:	6a 01                	push   0x1
c001e167:	68 68 df 01 c0       	push   0xc001df68
c001e16c:	52                   	push   edx
c001e16d:	50                   	push   eax
c001e16e:	e8 8f 21 ff ff       	call   c0010302 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e173:	83 c4 20             	add    esp,0x20
c001e176:	89 c2                	mov    edx,eax
c001e178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e182:	b8 00 00 00 00       	mov    eax,0x0
c001e187:	5b                   	pop    ebx
c001e188:	5e                   	pop    esi
c001e189:	5f                   	pop    edi
c001e18a:	c3                   	ret    
c001e18b:	90                   	nop

c001e18c <APICTimer::APICTimer()>:
c001e18c:	83 ec 0c             	sub    esp,0xc
c001e18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e193:	83 ec 08             	sub    esp,0x8
c001e196:	68 d4 29 02 c0       	push   0xc00229d4
c001e19b:	50                   	push   eax
c001e19c:	e8 1b 42 ff ff       	call   c00123bc <Timer::Timer(char const*)>
c001e1a1:	83 c4 10             	add    esp,0x10
c001e1a4:	ba e8 29 02 c0       	mov    edx,0xc00229e8
c001e1a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ad:	89 10                	mov    DWORD PTR [eax],edx
c001e1af:	90                   	nop
c001e1b0:	83 c4 0c             	add    esp,0xc
c001e1b3:	c3                   	ret    

c001e1b4 <PIT::write(int)>:
c001e1b4:	83 ec 10             	sub    esp,0x10
c001e1b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e1bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e1c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1c9:	a3 44 54 02 c0       	mov    ds:0xc0025444,eax
c001e1ce:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e1d3:	99                   	cdq    
c001e1d4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e1d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1dc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e1e3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e1e8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e1ec:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e1f1:	ee                   	out    dx,al
c001e1f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1f6:	0f b6 c0             	movzx  eax,al
c001e1f9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e200:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e204:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e208:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e20d:	ee                   	out    dx,al
c001e20e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e212:	c1 f8 08             	sar    eax,0x8
c001e215:	0f b6 c0             	movzx  eax,al
c001e218:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e21f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e223:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e227:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e22c:	ee                   	out    dx,al
c001e22d:	90                   	nop
c001e22e:	83 c4 10             	add    esp,0x10
c001e231:	c3                   	ret    

c001e232 <pitHandler(regs*, void*)>:
c001e232:	83 ec 0c             	sub    esp,0xc
c001e235:	a1 44 54 02 c0       	mov    eax,ds:0xc0025444
c001e23a:	99                   	cdq    
c001e23b:	52                   	push   edx
c001e23c:	50                   	push   eax
c001e23d:	6a 00                	push   0x0
c001e23f:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e244:	e8 a3 04 00 00       	call   c001e6ec <__udivdi3>
c001e249:	83 c4 10             	add    esp,0x10
c001e24c:	83 ec 08             	sub    esp,0x8
c001e24f:	52                   	push   edx
c001e250:	50                   	push   eax
c001e251:	e8 f5 41 ff ff       	call   c001244b <timerHandler(unsigned long long)>
c001e256:	83 c4 10             	add    esp,0x10
c001e259:	90                   	nop
c001e25a:	83 c4 0c             	add    esp,0xc
c001e25d:	c3                   	ret    

c001e25e <PIT::open(int, int, void*)>:
c001e25e:	83 ec 0c             	sub    esp,0xc
c001e261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e265:	8b 00                	mov    eax,DWORD PTR [eax]
c001e267:	83 c0 24             	add    eax,0x24
c001e26a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e26c:	83 ec 08             	sub    esp,0x8
c001e26f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e273:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e277:	ff d0                	call   eax
c001e279:	83 c4 10             	add    esp,0x10
c001e27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e280:	83 ec 0c             	sub    esp,0xc
c001e283:	6a 00                	push   0x0
c001e285:	6a 01                	push   0x1
c001e287:	68 32 e2 01 c0       	push   0xc001e232
c001e28c:	6a 00                	push   0x0
c001e28e:	50                   	push   eax
c001e28f:	e8 6e 20 ff ff       	call   c0010302 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e294:	83 c4 20             	add    esp,0x20
c001e297:	89 c2                	mov    edx,eax
c001e299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e29d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e2a3:	b8 00 00 00 00       	mov    eax,0x0
c001e2a8:	83 c4 0c             	add    esp,0xc
c001e2ab:	c3                   	ret    

c001e2ac <PIT::close(int, int, void*)>:
c001e2ac:	83 ec 0c             	sub    esp,0xc
c001e2af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e2bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2c1:	6a 01                	push   0x1
c001e2c3:	68 32 e2 01 c0       	push   0xc001e232
c001e2c8:	6a 00                	push   0x0
c001e2ca:	50                   	push   eax
c001e2cb:	e8 90 20 ff ff       	call   c0010360 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e2d0:	83 c4 10             	add    esp,0x10
c001e2d3:	b8 00 00 00 00       	mov    eax,0x0
c001e2d8:	83 c4 0c             	add    esp,0xc
c001e2db:	c3                   	ret    

c001e2dc <PIT::PIT()>:
c001e2dc:	83 ec 0c             	sub    esp,0xc
c001e2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e3:	83 ec 08             	sub    esp,0x8
c001e2e6:	68 10 2a 02 c0       	push   0xc0022a10
c001e2eb:	50                   	push   eax
c001e2ec:	e8 cb 40 ff ff       	call   c00123bc <Timer::Timer(char const*)>
c001e2f1:	83 c4 10             	add    esp,0x10
c001e2f4:	ba 38 2a 02 c0       	mov    edx,0xc0022a38
c001e2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fd:	89 10                	mov    DWORD PTR [eax],edx
c001e2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e303:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e309:	0f b6 d0             	movzx  edx,al
c001e30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e310:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e321:	0f b6 d0             	movzx  edx,al
c001e324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e328:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e32d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e331:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e337:	8d 50 01             	lea    edx,[eax+0x1]
c001e33a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e33e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e344:	0f b6 d0             	movzx  edx,al
c001e347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e34f:	83 e1 3f             	and    ecx,0x3f
c001e352:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e356:	90                   	nop
c001e357:	83 c4 0c             	add    esp,0xc
c001e35a:	c3                   	ret    
c001e35b:	66 90                	xchg   ax,ax
c001e35d:	66 90                	xchg   ax,ax
c001e35f:	90                   	nop

c001e360 <avxDetect>:
c001e360:	b8 00 00 00 00       	mov    eax,0x0
c001e365:	c3                   	ret    

c001e366 <avxSave>:
c001e366:	c3                   	ret    

c001e367 <avxLoad>:
c001e367:	c3                   	ret    

c001e368 <avxInit>:
c001e368:	c3                   	ret    

c001e369 <avxClose>:
c001e369:	c3                   	ret    
c001e36a:	66 90                	xchg   ax,ax
c001e36c:	66 90                	xchg   ax,ax
c001e36e:	66 90                	xchg   ax,ax

c001e370 <sseDetect>:
c001e370:	b8 01 00 00 00       	mov    eax,0x1
c001e375:	0f a2                	cpuid  
c001e377:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e37d:	74 06                	je     c001e385 <sseDetect.noSSE>
c001e37f:	b8 01 00 00 00       	mov    eax,0x1
c001e384:	c3                   	ret    

c001e385 <sseDetect.noSSE>:
c001e385:	b8 00 00 00 00       	mov    eax,0x0
c001e38a:	c3                   	ret    

c001e38b <sseSave>:
c001e38b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e390:	c3                   	ret    

c001e391 <sseLoad>:
c001e391:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e396:	c3                   	ret    

c001e397 <sseInit>:
c001e397:	e8 40 00 00 00       	call   c001e3dc <x87Init>
c001e39c:	0f 20 e0             	mov    eax,cr4
c001e39f:	66 0d 00 06          	or     ax,0x600
c001e3a3:	0f 22 e0             	mov    cr4,eax
c001e3a6:	c3                   	ret    

c001e3a7 <sseClose>:
c001e3a7:	c3                   	ret    
c001e3a8:	66 90                	xchg   ax,ax
c001e3aa:	66 90                	xchg   ax,ax
c001e3ac:	66 90                	xchg   ax,ax
c001e3ae:	66 90                	xchg   ax,ax

c001e3b0 <value_37F>:
c001e3b0:	7f 03                	jg     c001e3b5 <value_37A+0x1>

c001e3b2 <value_37E>:
c001e3b2:	7e 03                	jle    c001e3b7 <x87Detect+0x1>

c001e3b4 <value_37A>:
c001e3b4:	7a 03                	jp     c001e3b9 <x87Detect+0x3>

c001e3b6 <x87Detect>:
c001e3b6:	b8 01 00 00 00       	mov    eax,0x1
c001e3bb:	0f a2                	cpuid  
c001e3bd:	f7 c2 01 00 00 00    	test   edx,0x1
c001e3c3:	74 06                	je     c001e3cb <x87Detect.nox87>
c001e3c5:	b8 01 00 00 00       	mov    eax,0x1
c001e3ca:	c3                   	ret    

c001e3cb <x87Detect.nox87>:
c001e3cb:	b8 00 00 00 00       	mov    eax,0x0
c001e3d0:	c3                   	ret    

c001e3d1 <x87Save>:
c001e3d1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e3d6:	c3                   	ret    

c001e3d7 <x87Load>:
c001e3d7:	dd 64 24 08          	frstor [esp+0x8]
c001e3db:	c3                   	ret    

c001e3dc <x87Init>:
c001e3dc:	9b db e3             	finit  
c001e3df:	0f 20 c0             	mov    eax,cr0
c001e3e2:	66 25 fb ff          	and    ax,0xfffb
c001e3e6:	66 0d 22 00          	or     ax,0x22
c001e3ea:	0f 22 c0             	mov    cr0,eax
c001e3ed:	0f 06                	clts   
c001e3ef:	d9 2d b4 e3 01 c0    	fldcw  WORD PTR ds:0xc001e3b4
c001e3f5:	c3                   	ret    

c001e3f6 <x87Close>:
c001e3f6:	c3                   	ret    
c001e3f7:	90                   	nop

c001e3f8 <__do_global_ctors_aux>:
c001e3f8:	a1 d8 f4 01 c0       	mov    eax,ds:0xc001f4d8
c001e3fd:	83 f8 ff             	cmp    eax,0xffffffff
c001e400:	74 1a                	je     c001e41c <__do_global_ctors_aux+0x24>
c001e402:	55                   	push   ebp
c001e403:	89 e5                	mov    ebp,esp
c001e405:	53                   	push   ebx
c001e406:	52                   	push   edx
c001e407:	bb d8 f4 01 c0       	mov    ebx,0xc001f4d8
c001e40c:	ff d0                	call   eax
c001e40e:	83 eb 04             	sub    ebx,0x4
c001e411:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e413:	83 f8 ff             	cmp    eax,0xffffffff
c001e416:	75 f4                	jne    c001e40c <__do_global_ctors_aux+0x14>
c001e418:	58                   	pop    eax
c001e419:	5b                   	pop    ebx
c001e41a:	5d                   	pop    ebp
c001e41b:	c3                   	ret    
c001e41c:	c3                   	ret    
c001e41d:	66 90                	xchg   ax,ax
c001e41f:	90                   	nop

c001e420 <__divdi3>:
c001e420:	55                   	push   ebp
c001e421:	57                   	push   edi
c001e422:	56                   	push   esi
c001e423:	53                   	push   ebx
c001e424:	83 ec 1c             	sub    esp,0x1c
c001e427:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e42b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e42f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e432:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e436:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e43a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e43e:	85 db                	test   ebx,ebx
c001e440:	0f 88 8e 00 00 00    	js     c001e4d4 <__divdi3+0xb4>
c001e446:	89 dd                	mov    ebp,ebx
c001e448:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e450:	89 d3                	mov    ebx,edx
c001e452:	85 d2                	test   edx,edx
c001e454:	79 0d                	jns    c001e463 <__divdi3+0x43>
c001e456:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e45a:	f7 d8                	neg    eax
c001e45c:	83 d2 00             	adc    edx,0x0
c001e45f:	f7 da                	neg    edx
c001e461:	89 d3                	mov    ebx,edx
c001e463:	89 c7                	mov    edi,eax
c001e465:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e468:	85 db                	test   ebx,ebx
c001e46a:	75 48                	jne    c001e4b4 <__divdi3+0x94>
c001e46c:	39 ef                	cmp    edi,ebp
c001e46e:	76 24                	jbe    c001e494 <__divdi3+0x74>
c001e470:	89 ea                	mov    edx,ebp
c001e472:	f7 f7                	div    edi
c001e474:	89 c1                	mov    ecx,eax
c001e476:	31 f6                	xor    esi,esi
c001e478:	89 c8                	mov    eax,ecx
c001e47a:	89 f2                	mov    edx,esi
c001e47c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e480:	85 c9                	test   ecx,ecx
c001e482:	74 07                	je     c001e48b <__divdi3+0x6b>
c001e484:	f7 d8                	neg    eax
c001e486:	83 d2 00             	adc    edx,0x0
c001e489:	f7 da                	neg    edx
c001e48b:	83 c4 1c             	add    esp,0x1c
c001e48e:	5b                   	pop    ebx
c001e48f:	5e                   	pop    esi
c001e490:	5f                   	pop    edi
c001e491:	5d                   	pop    ebp
c001e492:	c3                   	ret    
c001e493:	90                   	nop
c001e494:	85 ff                	test   edi,edi
c001e496:	75 0b                	jne    c001e4a3 <__divdi3+0x83>
c001e498:	b8 01 00 00 00       	mov    eax,0x1
c001e49d:	31 d2                	xor    edx,edx
c001e49f:	f7 f3                	div    ebx
c001e4a1:	89 c7                	mov    edi,eax
c001e4a3:	31 d2                	xor    edx,edx
c001e4a5:	89 e8                	mov    eax,ebp
c001e4a7:	f7 f7                	div    edi
c001e4a9:	89 c6                	mov    esi,eax
c001e4ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e4ae:	f7 f7                	div    edi
c001e4b0:	89 c1                	mov    ecx,eax
c001e4b2:	eb c4                	jmp    c001e478 <__divdi3+0x58>
c001e4b4:	39 eb                	cmp    ebx,ebp
c001e4b6:	77 3c                	ja     c001e4f4 <__divdi3+0xd4>
c001e4b8:	0f bd f3             	bsr    esi,ebx
c001e4bb:	83 f6 1f             	xor    esi,0x1f
c001e4be:	75 40                	jne    c001e500 <__divdi3+0xe0>
c001e4c0:	39 eb                	cmp    ebx,ebp
c001e4c2:	72 09                	jb     c001e4cd <__divdi3+0xad>
c001e4c4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e4c7:	0f 87 97 00 00 00    	ja     c001e564 <__divdi3+0x144>
c001e4cd:	b9 01 00 00 00       	mov    ecx,0x1
c001e4d2:	eb a4                	jmp    c001e478 <__divdi3+0x58>
c001e4d4:	f7 d9                	neg    ecx
c001e4d6:	83 d3 00             	adc    ebx,0x0
c001e4d9:	f7 db                	neg    ebx
c001e4db:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e4de:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e4e2:	89 dd                	mov    ebp,ebx
c001e4e4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e4ec:	e9 5f ff ff ff       	jmp    c001e450 <__divdi3+0x30>
c001e4f1:	8d 76 00             	lea    esi,[esi+0x0]
c001e4f4:	31 f6                	xor    esi,esi
c001e4f6:	31 c9                	xor    ecx,ecx
c001e4f8:	e9 7b ff ff ff       	jmp    c001e478 <__divdi3+0x58>
c001e4fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e500:	b8 20 00 00 00       	mov    eax,0x20
c001e505:	29 f0                	sub    eax,esi
c001e507:	89 f1                	mov    ecx,esi
c001e509:	d3 e3                	shl    ebx,cl
c001e50b:	89 fa                	mov    edx,edi
c001e50d:	88 c1                	mov    cl,al
c001e50f:	d3 ea                	shr    edx,cl
c001e511:	09 da                	or     edx,ebx
c001e513:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e517:	89 f1                	mov    ecx,esi
c001e519:	d3 e7                	shl    edi,cl
c001e51b:	89 eb                	mov    ebx,ebp
c001e51d:	88 c1                	mov    cl,al
c001e51f:	d3 eb                	shr    ebx,cl
c001e521:	89 f1                	mov    ecx,esi
c001e523:	d3 e5                	shl    ebp,cl
c001e525:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e528:	88 c1                	mov    cl,al
c001e52a:	d3 ea                	shr    edx,cl
c001e52c:	09 d5                	or     ebp,edx
c001e52e:	89 e8                	mov    eax,ebp
c001e530:	89 da                	mov    edx,ebx
c001e532:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e536:	89 d3                	mov    ebx,edx
c001e538:	89 c5                	mov    ebp,eax
c001e53a:	f7 e7                	mul    edi
c001e53c:	39 d3                	cmp    ebx,edx
c001e53e:	72 18                	jb     c001e558 <__divdi3+0x138>
c001e540:	74 0a                	je     c001e54c <__divdi3+0x12c>
c001e542:	89 e9                	mov    ecx,ebp
c001e544:	31 f6                	xor    esi,esi
c001e546:	e9 2d ff ff ff       	jmp    c001e478 <__divdi3+0x58>
c001e54b:	90                   	nop
c001e54c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e54f:	89 f1                	mov    ecx,esi
c001e551:	d3 e7                	shl    edi,cl
c001e553:	39 c7                	cmp    edi,eax
c001e555:	73 eb                	jae    c001e542 <__divdi3+0x122>
c001e557:	90                   	nop
c001e558:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e55b:	31 f6                	xor    esi,esi
c001e55d:	e9 16 ff ff ff       	jmp    c001e478 <__divdi3+0x58>
c001e562:	66 90                	xchg   ax,ax
c001e564:	31 c9                	xor    ecx,ecx
c001e566:	e9 0d ff ff ff       	jmp    c001e478 <__divdi3+0x58>
c001e56b:	90                   	nop

c001e56c <__moddi3>:
c001e56c:	55                   	push   ebp
c001e56d:	57                   	push   edi
c001e56e:	56                   	push   esi
c001e56f:	53                   	push   ebx
c001e570:	83 ec 2c             	sub    esp,0x2c
c001e573:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e577:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e57b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e57f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e583:	85 db                	test   ebx,ebx
c001e585:	0f 88 85 00 00 00    	js     c001e610 <__moddi3+0xa4>
c001e58b:	89 de                	mov    esi,ebx
c001e58d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e595:	89 d7                	mov    edi,edx
c001e597:	85 d2                	test   edx,edx
c001e599:	79 09                	jns    c001e5a4 <__moddi3+0x38>
c001e59b:	f7 d8                	neg    eax
c001e59d:	83 d2 00             	adc    edx,0x0
c001e5a0:	f7 da                	neg    edx
c001e5a2:	89 d7                	mov    edi,edx
c001e5a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5a8:	89 cd                	mov    ebp,ecx
c001e5aa:	85 ff                	test   edi,edi
c001e5ac:	75 52                	jne    c001e600 <__moddi3+0x94>
c001e5ae:	89 c3                	mov    ebx,eax
c001e5b0:	39 f0                	cmp    eax,esi
c001e5b2:	76 24                	jbe    c001e5d8 <__moddi3+0x6c>
c001e5b4:	89 c8                	mov    eax,ecx
c001e5b6:	89 f2                	mov    edx,esi
c001e5b8:	f7 f3                	div    ebx
c001e5ba:	89 d6                	mov    esi,edx
c001e5bc:	89 f0                	mov    eax,esi
c001e5be:	31 d2                	xor    edx,edx
c001e5c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5c4:	85 c9                	test   ecx,ecx
c001e5c6:	74 07                	je     c001e5cf <__moddi3+0x63>
c001e5c8:	f7 d8                	neg    eax
c001e5ca:	83 d2 00             	adc    edx,0x0
c001e5cd:	f7 da                	neg    edx
c001e5cf:	83 c4 2c             	add    esp,0x2c
c001e5d2:	5b                   	pop    ebx
c001e5d3:	5e                   	pop    esi
c001e5d4:	5f                   	pop    edi
c001e5d5:	5d                   	pop    ebp
c001e5d6:	c3                   	ret    
c001e5d7:	90                   	nop
c001e5d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e5dc:	85 db                	test   ebx,ebx
c001e5de:	75 0d                	jne    c001e5ed <__moddi3+0x81>
c001e5e0:	b8 01 00 00 00       	mov    eax,0x1
c001e5e5:	31 d2                	xor    edx,edx
c001e5e7:	f7 f7                	div    edi
c001e5e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5ed:	89 f0                	mov    eax,esi
c001e5ef:	31 d2                	xor    edx,edx
c001e5f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5f5:	f7 f7                	div    edi
c001e5f7:	89 e8                	mov    eax,ebp
c001e5f9:	f7 f7                	div    edi
c001e5fb:	89 d6                	mov    esi,edx
c001e5fd:	eb bd                	jmp    c001e5bc <__moddi3+0x50>
c001e5ff:	90                   	nop
c001e600:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e604:	39 f7                	cmp    edi,esi
c001e606:	76 20                	jbe    c001e628 <__moddi3+0xbc>
c001e608:	89 c8                	mov    eax,ecx
c001e60a:	89 f2                	mov    edx,esi
c001e60c:	eb b2                	jmp    c001e5c0 <__moddi3+0x54>
c001e60e:	66 90                	xchg   ax,ax
c001e610:	f7 d9                	neg    ecx
c001e612:	83 d3 00             	adc    ebx,0x0
c001e615:	f7 db                	neg    ebx
c001e617:	89 de                	mov    esi,ebx
c001e619:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e621:	e9 6f ff ff ff       	jmp    c001e595 <__moddi3+0x29>
c001e626:	66 90                	xchg   ax,ax
c001e628:	0f bd c7             	bsr    eax,edi
c001e62b:	83 f0 1f             	xor    eax,0x1f
c001e62e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e632:	75 24                	jne    c001e658 <__moddi3+0xec>
c001e634:	39 f7                	cmp    edi,esi
c001e636:	72 06                	jb     c001e63e <__moddi3+0xd2>
c001e638:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e63c:	77 0c                	ja     c001e64a <__moddi3+0xde>
c001e63e:	89 e9                	mov    ecx,ebp
c001e640:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e644:	19 fe                	sbb    esi,edi
c001e646:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e64a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e64e:	89 f2                	mov    edx,esi
c001e650:	e9 6b ff ff ff       	jmp    c001e5c0 <__moddi3+0x54>
c001e655:	8d 76 00             	lea    esi,[esi+0x0]
c001e658:	b8 20 00 00 00       	mov    eax,0x20
c001e65d:	89 c2                	mov    edx,eax
c001e65f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e663:	29 da                	sub    edx,ebx
c001e665:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e669:	88 d9                	mov    cl,bl
c001e66b:	d3 e7                	shl    edi,cl
c001e66d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e671:	88 d1                	mov    cl,dl
c001e673:	d3 e8                	shr    eax,cl
c001e675:	09 c7                	or     edi,eax
c001e677:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e67b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e67f:	89 d8                	mov    eax,ebx
c001e681:	88 d9                	mov    cl,bl
c001e683:	d3 e7                	shl    edi,cl
c001e685:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e689:	89 f3                	mov    ebx,esi
c001e68b:	88 d1                	mov    cl,dl
c001e68d:	d3 eb                	shr    ebx,cl
c001e68f:	89 c7                	mov    edi,eax
c001e691:	88 c1                	mov    cl,al
c001e693:	d3 e6                	shl    esi,cl
c001e695:	89 e8                	mov    eax,ebp
c001e697:	88 d1                	mov    cl,dl
c001e699:	d3 e8                	shr    eax,cl
c001e69b:	09 f0                	or     eax,esi
c001e69d:	89 f9                	mov    ecx,edi
c001e69f:	d3 e5                	shl    ebp,cl
c001e6a1:	89 da                	mov    edx,ebx
c001e6a3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e6a7:	89 d3                	mov    ebx,edx
c001e6a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e6ad:	89 c6                	mov    esi,eax
c001e6af:	89 d1                	mov    ecx,edx
c001e6b1:	39 d3                	cmp    ebx,edx
c001e6b3:	72 27                	jb     c001e6dc <__moddi3+0x170>
c001e6b5:	74 21                	je     c001e6d8 <__moddi3+0x16c>
c001e6b7:	29 f5                	sub    ebp,esi
c001e6b9:	19 cb                	sbb    ebx,ecx
c001e6bb:	89 de                	mov    esi,ebx
c001e6bd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e6c1:	d3 e6                	shl    esi,cl
c001e6c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e6c7:	89 f9                	mov    ecx,edi
c001e6c9:	d3 ed                	shr    ebp,cl
c001e6cb:	09 ee                	or     esi,ebp
c001e6cd:	89 f0                	mov    eax,esi
c001e6cf:	d3 eb                	shr    ebx,cl
c001e6d1:	89 da                	mov    edx,ebx
c001e6d3:	e9 e8 fe ff ff       	jmp    c001e5c0 <__moddi3+0x54>
c001e6d8:	39 c5                	cmp    ebp,eax
c001e6da:	73 db                	jae    c001e6b7 <__moddi3+0x14b>
c001e6dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e6e0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e6e4:	89 d1                	mov    ecx,edx
c001e6e6:	89 c6                	mov    esi,eax
c001e6e8:	eb cd                	jmp    c001e6b7 <__moddi3+0x14b>
c001e6ea:	66 90                	xchg   ax,ax

c001e6ec <__udivdi3>:
c001e6ec:	55                   	push   ebp
c001e6ed:	57                   	push   edi
c001e6ee:	56                   	push   esi
c001e6ef:	53                   	push   ebx
c001e6f0:	83 ec 1c             	sub    esp,0x1c
c001e6f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e6f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e6fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e6ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e703:	85 d2                	test   edx,edx
c001e705:	75 41                	jne    c001e748 <__udivdi3+0x5c>
c001e707:	39 f7                	cmp    edi,esi
c001e709:	76 15                	jbe    c001e720 <__udivdi3+0x34>
c001e70b:	89 e8                	mov    eax,ebp
c001e70d:	89 f2                	mov    edx,esi
c001e70f:	f7 f7                	div    edi
c001e711:	31 db                	xor    ebx,ebx
c001e713:	89 da                	mov    edx,ebx
c001e715:	83 c4 1c             	add    esp,0x1c
c001e718:	5b                   	pop    ebx
c001e719:	5e                   	pop    esi
c001e71a:	5f                   	pop    edi
c001e71b:	5d                   	pop    ebp
c001e71c:	c3                   	ret    
c001e71d:	8d 76 00             	lea    esi,[esi+0x0]
c001e720:	89 f9                	mov    ecx,edi
c001e722:	85 ff                	test   edi,edi
c001e724:	75 0b                	jne    c001e731 <__udivdi3+0x45>
c001e726:	b8 01 00 00 00       	mov    eax,0x1
c001e72b:	31 d2                	xor    edx,edx
c001e72d:	f7 f7                	div    edi
c001e72f:	89 c1                	mov    ecx,eax
c001e731:	31 d2                	xor    edx,edx
c001e733:	89 f0                	mov    eax,esi
c001e735:	f7 f1                	div    ecx
c001e737:	89 c3                	mov    ebx,eax
c001e739:	89 e8                	mov    eax,ebp
c001e73b:	f7 f1                	div    ecx
c001e73d:	89 da                	mov    edx,ebx
c001e73f:	83 c4 1c             	add    esp,0x1c
c001e742:	5b                   	pop    ebx
c001e743:	5e                   	pop    esi
c001e744:	5f                   	pop    edi
c001e745:	5d                   	pop    ebp
c001e746:	c3                   	ret    
c001e747:	90                   	nop
c001e748:	39 f2                	cmp    edx,esi
c001e74a:	77 1c                	ja     c001e768 <__udivdi3+0x7c>
c001e74c:	0f bd da             	bsr    ebx,edx
c001e74f:	83 f3 1f             	xor    ebx,0x1f
c001e752:	75 24                	jne    c001e778 <__udivdi3+0x8c>
c001e754:	39 f2                	cmp    edx,esi
c001e756:	72 08                	jb     c001e760 <__udivdi3+0x74>
c001e758:	39 ef                	cmp    edi,ebp
c001e75a:	0f 87 84 00 00 00    	ja     c001e7e4 <__udivdi3+0xf8>
c001e760:	b8 01 00 00 00       	mov    eax,0x1
c001e765:	eb ac                	jmp    c001e713 <__udivdi3+0x27>
c001e767:	90                   	nop
c001e768:	31 db                	xor    ebx,ebx
c001e76a:	31 c0                	xor    eax,eax
c001e76c:	89 da                	mov    edx,ebx
c001e76e:	83 c4 1c             	add    esp,0x1c
c001e771:	5b                   	pop    ebx
c001e772:	5e                   	pop    esi
c001e773:	5f                   	pop    edi
c001e774:	5d                   	pop    ebp
c001e775:	c3                   	ret    
c001e776:	66 90                	xchg   ax,ax
c001e778:	b8 20 00 00 00       	mov    eax,0x20
c001e77d:	29 d8                	sub    eax,ebx
c001e77f:	88 d9                	mov    cl,bl
c001e781:	d3 e2                	shl    edx,cl
c001e783:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e787:	89 fa                	mov    edx,edi
c001e789:	88 c1                	mov    cl,al
c001e78b:	d3 ea                	shr    edx,cl
c001e78d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e791:	09 d1                	or     ecx,edx
c001e793:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e797:	88 d9                	mov    cl,bl
c001e799:	d3 e7                	shl    edi,cl
c001e79b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e79f:	89 f7                	mov    edi,esi
c001e7a1:	88 c1                	mov    cl,al
c001e7a3:	d3 ef                	shr    edi,cl
c001e7a5:	88 d9                	mov    cl,bl
c001e7a7:	d3 e6                	shl    esi,cl
c001e7a9:	89 ea                	mov    edx,ebp
c001e7ab:	88 c1                	mov    cl,al
c001e7ad:	d3 ea                	shr    edx,cl
c001e7af:	09 d6                	or     esi,edx
c001e7b1:	89 f0                	mov    eax,esi
c001e7b3:	89 fa                	mov    edx,edi
c001e7b5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e7b9:	89 d7                	mov    edi,edx
c001e7bb:	89 c6                	mov    esi,eax
c001e7bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e7c1:	39 d7                	cmp    edi,edx
c001e7c3:	72 13                	jb     c001e7d8 <__udivdi3+0xec>
c001e7c5:	74 09                	je     c001e7d0 <__udivdi3+0xe4>
c001e7c7:	89 f0                	mov    eax,esi
c001e7c9:	31 db                	xor    ebx,ebx
c001e7cb:	e9 43 ff ff ff       	jmp    c001e713 <__udivdi3+0x27>
c001e7d0:	88 d9                	mov    cl,bl
c001e7d2:	d3 e5                	shl    ebp,cl
c001e7d4:	39 c5                	cmp    ebp,eax
c001e7d6:	73 ef                	jae    c001e7c7 <__udivdi3+0xdb>
c001e7d8:	8d 46 ff             	lea    eax,[esi-0x1]
c001e7db:	31 db                	xor    ebx,ebx
c001e7dd:	e9 31 ff ff ff       	jmp    c001e713 <__udivdi3+0x27>
c001e7e2:	66 90                	xchg   ax,ax
c001e7e4:	31 c0                	xor    eax,eax
c001e7e6:	e9 28 ff ff ff       	jmp    c001e713 <__udivdi3+0x27>
c001e7eb:	90                   	nop

c001e7ec <__umoddi3>:
c001e7ec:	55                   	push   ebp
c001e7ed:	57                   	push   edi
c001e7ee:	56                   	push   esi
c001e7ef:	53                   	push   ebx
c001e7f0:	83 ec 1c             	sub    esp,0x1c
c001e7f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e7f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e7fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e7ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e803:	89 da                	mov    edx,ebx
c001e805:	85 c0                	test   eax,eax
c001e807:	75 37                	jne    c001e840 <__umoddi3+0x54>
c001e809:	39 df                	cmp    edi,ebx
c001e80b:	76 13                	jbe    c001e820 <__umoddi3+0x34>
c001e80d:	89 f0                	mov    eax,esi
c001e80f:	f7 f7                	div    edi
c001e811:	89 d0                	mov    eax,edx
c001e813:	31 d2                	xor    edx,edx
c001e815:	83 c4 1c             	add    esp,0x1c
c001e818:	5b                   	pop    ebx
c001e819:	5e                   	pop    esi
c001e81a:	5f                   	pop    edi
c001e81b:	5d                   	pop    ebp
c001e81c:	c3                   	ret    
c001e81d:	8d 76 00             	lea    esi,[esi+0x0]
c001e820:	89 fd                	mov    ebp,edi
c001e822:	85 ff                	test   edi,edi
c001e824:	75 0b                	jne    c001e831 <__umoddi3+0x45>
c001e826:	b8 01 00 00 00       	mov    eax,0x1
c001e82b:	31 d2                	xor    edx,edx
c001e82d:	f7 f7                	div    edi
c001e82f:	89 c5                	mov    ebp,eax
c001e831:	89 d8                	mov    eax,ebx
c001e833:	31 d2                	xor    edx,edx
c001e835:	f7 f5                	div    ebp
c001e837:	89 f0                	mov    eax,esi
c001e839:	f7 f5                	div    ebp
c001e83b:	89 d0                	mov    eax,edx
c001e83d:	eb d4                	jmp    c001e813 <__umoddi3+0x27>
c001e83f:	90                   	nop
c001e840:	89 f1                	mov    ecx,esi
c001e842:	39 d8                	cmp    eax,ebx
c001e844:	76 0a                	jbe    c001e850 <__umoddi3+0x64>
c001e846:	89 f0                	mov    eax,esi
c001e848:	83 c4 1c             	add    esp,0x1c
c001e84b:	5b                   	pop    ebx
c001e84c:	5e                   	pop    esi
c001e84d:	5f                   	pop    edi
c001e84e:	5d                   	pop    ebp
c001e84f:	c3                   	ret    
c001e850:	0f bd e8             	bsr    ebp,eax
c001e853:	83 f5 1f             	xor    ebp,0x1f
c001e856:	75 1c                	jne    c001e874 <__umoddi3+0x88>
c001e858:	39 d8                	cmp    eax,ebx
c001e85a:	72 04                	jb     c001e860 <__umoddi3+0x74>
c001e85c:	39 f7                	cmp    edi,esi
c001e85e:	77 08                	ja     c001e868 <__umoddi3+0x7c>
c001e860:	89 da                	mov    edx,ebx
c001e862:	29 fe                	sub    esi,edi
c001e864:	19 c2                	sbb    edx,eax
c001e866:	89 f1                	mov    ecx,esi
c001e868:	89 c8                	mov    eax,ecx
c001e86a:	83 c4 1c             	add    esp,0x1c
c001e86d:	5b                   	pop    ebx
c001e86e:	5e                   	pop    esi
c001e86f:	5f                   	pop    edi
c001e870:	5d                   	pop    ebp
c001e871:	c3                   	ret    
c001e872:	66 90                	xchg   ax,ax
c001e874:	ba 20 00 00 00       	mov    edx,0x20
c001e879:	29 ea                	sub    edx,ebp
c001e87b:	89 e9                	mov    ecx,ebp
c001e87d:	d3 e0                	shl    eax,cl
c001e87f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e883:	89 f8                	mov    eax,edi
c001e885:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e889:	88 d1                	mov    cl,dl
c001e88b:	d3 e8                	shr    eax,cl
c001e88d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e891:	09 c1                	or     ecx,eax
c001e893:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e897:	89 e9                	mov    ecx,ebp
c001e899:	d3 e7                	shl    edi,cl
c001e89b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e89f:	89 d8                	mov    eax,ebx
c001e8a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e8a5:	88 d1                	mov    cl,dl
c001e8a7:	d3 e8                	shr    eax,cl
c001e8a9:	89 c7                	mov    edi,eax
c001e8ab:	89 e9                	mov    ecx,ebp
c001e8ad:	d3 e3                	shl    ebx,cl
c001e8af:	89 f0                	mov    eax,esi
c001e8b1:	88 d1                	mov    cl,dl
c001e8b3:	d3 e8                	shr    eax,cl
c001e8b5:	09 d8                	or     eax,ebx
c001e8b7:	89 e9                	mov    ecx,ebp
c001e8b9:	d3 e6                	shl    esi,cl
c001e8bb:	89 f3                	mov    ebx,esi
c001e8bd:	89 fa                	mov    edx,edi
c001e8bf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e8c3:	89 d1                	mov    ecx,edx
c001e8c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e8c9:	89 c6                	mov    esi,eax
c001e8cb:	89 d7                	mov    edi,edx
c001e8cd:	39 d1                	cmp    ecx,edx
c001e8cf:	72 27                	jb     c001e8f8 <__umoddi3+0x10c>
c001e8d1:	74 21                	je     c001e8f4 <__umoddi3+0x108>
c001e8d3:	89 ca                	mov    edx,ecx
c001e8d5:	29 f3                	sub    ebx,esi
c001e8d7:	19 fa                	sbb    edx,edi
c001e8d9:	89 d0                	mov    eax,edx
c001e8db:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e8df:	d3 e0                	shl    eax,cl
c001e8e1:	89 e9                	mov    ecx,ebp
c001e8e3:	d3 eb                	shr    ebx,cl
c001e8e5:	09 d8                	or     eax,ebx
c001e8e7:	d3 ea                	shr    edx,cl
c001e8e9:	83 c4 1c             	add    esp,0x1c
c001e8ec:	5b                   	pop    ebx
c001e8ed:	5e                   	pop    esi
c001e8ee:	5f                   	pop    edi
c001e8ef:	5d                   	pop    ebp
c001e8f0:	c3                   	ret    
c001e8f1:	8d 76 00             	lea    esi,[esi+0x0]
c001e8f4:	39 c3                	cmp    ebx,eax
c001e8f6:	73 db                	jae    c001e8d3 <__umoddi3+0xe7>
c001e8f8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e8fc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e900:	89 d7                	mov    edi,edx
c001e902:	89 c6                	mov    esi,eax
c001e904:	eb cd                	jmp    c001e8d3 <__umoddi3+0xe7>
c001e906:	66 90                	xchg   ax,ax
c001e908:	66 90                	xchg   ax,ax
c001e90a:	66 90                	xchg   ax,ax
c001e90c:	66 90                	xchg   ax,ax
c001e90e:	66 90                	xchg   ax,ax

c001e910 <fabs>:
c001e910:	83 ec 0c             	sub    esp,0xc
c001e913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e917:	89 04 24             	mov    DWORD PTR [esp],eax
c001e91a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e91e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e923:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e927:	dd 04 24             	fld    QWORD PTR [esp]
c001e92a:	83 c4 0c             	add    esp,0xc
c001e92d:	c3                   	ret    
c001e92e:	66 90                	xchg   ax,ax

c001e930 <lrint>:
c001e930:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e934:	83 ec 04             	sub    esp,0x4
c001e937:	db 1c 24             	fistp  DWORD PTR [esp]
c001e93a:	58                   	pop    eax
c001e93b:	c3                   	ret    

c001e93c <lrintf>:
c001e93c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e940:	83 ec 04             	sub    esp,0x4
c001e943:	db 1c 24             	fistp  DWORD PTR [esp]
c001e946:	58                   	pop    eax
c001e947:	c3                   	ret    

Disassembly of section .init:

c001e948 <_init>:
c001e948:	55                   	push   ebp
c001e949:	89 e5                	mov    ebp,esp
c001e94b:	e8 c8 17 fe ff       	call   c0000118 <frame_dummy>
c001e950:	e8 a3 fa ff ff       	call   c001e3f8 <__do_global_ctors_aux>
c001e955:	5d                   	pop    ebp
c001e956:	c3                   	ret    

Disassembly of section .fini:

c001e957 <_fini>:
c001e957:	55                   	push   ebp
c001e958:	89 e5                	mov    ebp,esp
c001e95a:	e8 49 17 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e95f:	5d                   	pop    ebp
c001e960:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e962 <Computer::~Computer()>:
c001e962:	83 ec 0c             	sub    esp,0xc
c001e965:	ba 38 03 02 c0       	mov    edx,0xc0020338
c001e96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96e:	89 10                	mov    DWORD PTR [eax],edx
c001e970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e974:	83 ec 0c             	sub    esp,0xc
c001e977:	50                   	push   eax
c001e978:	e8 d3 18 ff ff       	call   c0010250 <Device::~Device()>
c001e97d:	83 c4 10             	add    esp,0x10
c001e980:	90                   	nop
c001e981:	83 c4 0c             	add    esp,0xc
c001e984:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e986 <Computer::~Computer()>:
c001e986:	83 ec 0c             	sub    esp,0xc
c001e989:	83 ec 0c             	sub    esp,0xc
c001e98c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e990:	e8 cd ff ff ff       	call   c001e962 <Computer::~Computer()>
c001e995:	83 c4 10             	add    esp,0x10
c001e998:	83 ec 08             	sub    esp,0x8
c001e99b:	68 ec 01 00 00       	push   0x1ec
c001e9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9a4:	e8 1a 05 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001e9a9:	83 c4 10             	add    esp,0x10
c001e9ac:	83 c4 0c             	add    esp,0xc
c001e9af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e9b0 <idleCommon()>:
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	e8 9e 91 ff ff       	call   c0017b56 <lockScheduler()>
c001e9b8:	e8 cd 94 ff ff       	call   c0017e8a <schedule()>
c001e9bd:	83 c4 0c             	add    esp,0xc
c001e9c0:	e9 93 91 ff ff       	jmp    c0017b58 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e9c5 <CPU::readCR3()>:
c001e9c5:	83 ec 10             	sub    esp,0x10
c001e9c8:	0f 20 d8             	mov    eax,cr3
c001e9cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9d3:	83 c4 10             	add    esp,0x10
c001e9d6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e9d7 <CPU::writeCR3(unsigned long)>:
c001e9d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9db:	0f 22 d8             	mov    cr3,eax
c001e9de:	90                   	nop
c001e9df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e9e0 <LinkedList<UnixFile>::~LinkedList()>:
c001e9e0:	90                   	nop
c001e9e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e9e2 <LinkedList<UnixFile>::LinkedList()>:
c001e9e2:	83 ec 0c             	sub    esp,0xc
c001e9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea09:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea25:	83 ec 0c             	sub    esp,0xc
c001ea28:	68 68 05 02 c0       	push   0xc0020568
c001ea2d:	e8 71 05 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001ea32:	83 c4 10             	add    esp,0x10
c001ea35:	90                   	nop
c001ea36:	83 c4 0c             	add    esp,0xc
c001ea39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ea3a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ea3a:	83 ec 0c             	sub    esp,0xc
c001ea3d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea42:	75 10                	jne    c001ea54 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001ea44:	83 ec 0c             	sub    esp,0xc
c001ea47:	68 84 05 02 c0       	push   0xc0020584
c001ea4c:	e8 e7 61 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001ea51:	83 c4 10             	add    esp,0x10
c001ea54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea58:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea5a:	85 c0                	test   eax,eax
c001ea5c:	74 34                	je     c001ea92 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea65:	85 c0                	test   eax,eax
c001ea67:	74 29                	je     c001ea92 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ea69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea74:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea89:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea90:	eb 65                	jmp    c001eaf7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ea92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea96:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea98:	85 c0                	test   eax,eax
c001ea9a:	75 4b                	jne    c001eae7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ea9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaa3:	85 c0                	test   eax,eax
c001eaa5:	75 40                	jne    c001eae7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eaa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaaf:	89 10                	mov    DWORD PTR [eax],edx
c001eab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eab9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eac3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ead1:	85 c0                	test   eax,eax
c001ead3:	74 22                	je     c001eaf7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ead5:	83 ec 0c             	sub    esp,0xc
c001ead8:	68 a6 05 02 c0       	push   0xc00205a6
c001eadd:	e8 56 61 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001eae2:	83 c4 10             	add    esp,0x10
c001eae5:	eb 10                	jmp    c001eaf7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eae7:	83 ec 0c             	sub    esp,0xc
c001eaea:	68 b0 05 02 c0       	push   0xc00205b0
c001eaef:	e8 44 61 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001eaf4:	83 c4 10             	add    esp,0x10
c001eaf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eafe:	8d 50 01             	lea    edx,[eax+0x1]
c001eb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb05:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb08:	90                   	nop
c001eb09:	83 c4 0c             	add    esp,0xc
c001eb0c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001eb0e <LinkedList<UnixFile>::getFirstElement()>:
c001eb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb12:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001eb16 <LinkedList<UnixFile>::removeFirst()>:
c001eb16:	83 ec 0c             	sub    esp,0xc
c001eb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1d:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb1f:	85 c0                	test   eax,eax
c001eb21:	75 12                	jne    c001eb35 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001eb23:	83 ec 0c             	sub    esp,0xc
c001eb26:	68 bc 05 02 c0       	push   0xc00205bc
c001eb2b:	e8 08 61 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001eb30:	83 c4 10             	add    esp,0x10
c001eb33:	eb 7e                	jmp    c001ebb3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001eb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb3f:	85 c0                	test   eax,eax
c001eb41:	74 10                	je     c001eb53 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001eb43:	83 ec 0c             	sub    esp,0xc
c001eb46:	68 07 06 02 c0       	push   0xc0020607
c001eb4b:	e8 e8 60 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001eb50:	83 c4 10             	add    esp,0x10
c001eb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb57:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb5c:	85 c0                	test   eax,eax
c001eb5e:	75 33                	jne    c001eb93 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb7c:	83 f8 01             	cmp    eax,0x1
c001eb7f:	74 21                	je     c001eba2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001eb81:	83 ec 0c             	sub    esp,0xc
c001eb84:	68 e0 05 02 c0       	push   0xc00205e0
c001eb89:	e8 aa 60 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001eb8e:	83 c4 10             	add    esp,0x10
c001eb91:	eb 0f                	jmp    c001eba2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001eb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb97:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb99:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001eb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba0:	89 10                	mov    DWORD PTR [eax],edx
c001eba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eba9:	8d 50 ff             	lea    edx,[eax-0x1]
c001ebac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebb3:	83 c4 0c             	add    esp,0xc
c001ebb6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ebb8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ebb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebbf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ebc0 <DriverlessDevice::~DriverlessDevice()>:
c001ebc0:	ba 24 0d 02 c0       	mov    edx,0xc0020d24
c001ebc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc9:	89 10                	mov    DWORD PTR [eax],edx
c001ebcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebcf:	50                   	push   eax
c001ebd0:	e8 7b 16 ff ff       	call   c0010250 <Device::~Device()>
c001ebd5:	83 c4 04             	add    esp,0x4
c001ebd8:	90                   	nop
c001ebd9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ebda <DriverlessDevice::~DriverlessDevice()>:
c001ebda:	83 ec 0c             	sub    esp,0xc
c001ebdd:	83 ec 0c             	sub    esp,0xc
c001ebe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebe4:	e8 d7 ff ff ff       	call   c001ebc0 <DriverlessDevice::~DriverlessDevice()>
c001ebe9:	83 c4 10             	add    esp,0x10
c001ebec:	83 ec 08             	sub    esp,0x8
c001ebef:	68 58 01 00 00       	push   0x158
c001ebf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebf8:	e8 c6 02 ff ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001ebfd:	83 c4 10             	add    esp,0x10
c001ec00:	83 c4 0c             	add    esp,0xc
c001ec03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ec04 <LinkedList<Device>::addElement(Device*)>:
c001ec04:	83 ec 0c             	sub    esp,0xc
c001ec07:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec0c:	75 10                	jne    c001ec1e <LinkedList<Device>::addElement(Device*)+0x1a>
c001ec0e:	83 ec 0c             	sub    esp,0xc
c001ec11:	68 84 05 02 c0       	push   0xc0020584
c001ec16:	e8 1d 60 ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001ec1b:	83 c4 10             	add    esp,0x10
c001ec1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec22:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec24:	85 c0                	test   eax,eax
c001ec26:	74 3a                	je     c001ec62 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ec28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec2f:	85 c0                	test   eax,eax
c001ec31:	74 2f                	je     c001ec62 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ec33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec3e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ec44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec4c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ec4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec56:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ec60:	eb 68                	jmp    c001ecca <LinkedList<Device>::addElement(Device*)+0xc6>
c001ec62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec66:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec68:	85 c0                	test   eax,eax
c001ec6a:	75 4e                	jne    c001ecba <LinkedList<Device>::addElement(Device*)+0xb6>
c001ec6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec73:	85 c0                	test   eax,eax
c001ec75:	75 43                	jne    c001ecba <LinkedList<Device>::addElement(Device*)+0xb6>
c001ec77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec7f:	89 10                	mov    DWORD PTR [eax],edx
c001ec81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec89:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ec8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec93:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ec9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eca4:	85 c0                	test   eax,eax
c001eca6:	74 22                	je     c001ecca <LinkedList<Device>::addElement(Device*)+0xc6>
c001eca8:	83 ec 0c             	sub    esp,0xc
c001ecab:	68 a6 05 02 c0       	push   0xc00205a6
c001ecb0:	e8 83 5f ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001ecb5:	83 c4 10             	add    esp,0x10
c001ecb8:	eb 10                	jmp    c001ecca <LinkedList<Device>::addElement(Device*)+0xc6>
c001ecba:	83 ec 0c             	sub    esp,0xc
c001ecbd:	68 b0 05 02 c0       	push   0xc00205b0
c001ecc2:	e8 71 5f ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001ecc7:	83 c4 10             	add    esp,0x10
c001ecca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecd1:	8d 50 01             	lea    edx,[eax+0x1]
c001ecd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ecdb:	90                   	nop
c001ecdc:	83 c4 0c             	add    esp,0xc
c001ecdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ece0 <LinkedList<Device>::LinkedList()>:
c001ece0:	83 ec 0c             	sub    esp,0xc
c001ece3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed23:	83 ec 0c             	sub    esp,0xc
c001ed26:	68 68 05 02 c0       	push   0xc0020568
c001ed2b:	e8 73 02 ff ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001ed30:	83 c4 10             	add    esp,0x10
c001ed33:	90                   	nop
c001ed34:	83 c4 0c             	add    esp,0xc
c001ed37:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001ed38 <CPU::readCR0()>:
c001ed38:	83 ec 10             	sub    esp,0x10
c001ed3b:	0f 20 c0             	mov    eax,cr0
c001ed3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed46:	83 c4 10             	add    esp,0x10
c001ed49:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001ed4a <CPU::writeCR0(unsigned long)>:
c001ed4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed4e:	0f 22 c0             	mov    cr0,eax
c001ed51:	90                   	nop
c001ed52:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001ed53 <CPU::readDR0()>:
c001ed53:	83 ec 10             	sub    esp,0x10
c001ed56:	0f 21 c0             	mov    eax,db0
c001ed59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed61:	83 c4 10             	add    esp,0x10
c001ed64:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001ed65 <CPU::readDR1()>:
c001ed65:	83 ec 10             	sub    esp,0x10
c001ed68:	0f 21 c8             	mov    eax,db1
c001ed6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed73:	83 c4 10             	add    esp,0x10
c001ed76:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ed77 <CPU::readDR2()>:
c001ed77:	83 ec 10             	sub    esp,0x10
c001ed7a:	0f 21 d0             	mov    eax,db2
c001ed7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed85:	83 c4 10             	add    esp,0x10
c001ed88:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ed89 <CPU::readDR3()>:
c001ed89:	83 ec 10             	sub    esp,0x10
c001ed8c:	0f 21 d8             	mov    eax,db3
c001ed8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed97:	83 c4 10             	add    esp,0x10
c001ed9a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ed9b <CPU::readDR6()>:
c001ed9b:	83 ec 10             	sub    esp,0x10
c001ed9e:	0f 21 f0             	mov    eax,db6
c001eda1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eda5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eda9:	83 c4 10             	add    esp,0x10
c001edac:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001edad <CPU::readDR7()>:
c001edad:	83 ec 10             	sub    esp,0x10
c001edb0:	0f 21 f8             	mov    eax,db7
c001edb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edbb:	83 c4 10             	add    esp,0x10
c001edbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001edc0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001edc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001edc6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001edc8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001edc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edcc:	8b 00                	mov    eax,DWORD PTR [eax]
c001edce:	85 c0                	test   eax,eax
c001edd0:	75 0e                	jne    c001ede0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001edd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edd9:	85 c0                	test   eax,eax
c001eddb:	75 03                	jne    c001ede0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eddd:	b0 01                	mov    al,0x1
c001eddf:	c3                   	ret    
c001ede0:	b0 00                	mov    al,0x0
c001ede2:	90                   	nop
c001ede3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ede4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ede4:	83 ec 0c             	sub    esp,0xc
c001ede7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eded:	85 c0                	test   eax,eax
c001edef:	75 15                	jne    c001ee06 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001edf1:	83 ec 0c             	sub    esp,0xc
c001edf4:	68 bc 05 02 c0       	push   0xc00205bc
c001edf9:	e8 3a 5e ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001edfe:	83 c4 10             	add    esp,0x10
c001ee01:	e9 88 00 00 00       	jmp    c001ee8e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001ee06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee0d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ee10:	85 c0                	test   eax,eax
c001ee12:	0f 95 c0             	setne  al
c001ee15:	84 c0                	test   al,al
c001ee17:	74 10                	je     c001ee29 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001ee19:	83 ec 0c             	sub    esp,0xc
c001ee1c:	68 07 06 02 c0       	push   0xc0020607
c001ee21:	e8 12 5e ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001ee26:	83 c4 10             	add    esp,0x10
c001ee29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee2d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ee32:	85 c0                	test   eax,eax
c001ee34:	0f 94 c0             	sete   al
c001ee37:	84 c0                	test   al,al
c001ee39:	74 33                	je     c001ee6e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001ee3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee57:	83 f8 01             	cmp    eax,0x1
c001ee5a:	74 21                	je     c001ee7d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ee5c:	83 ec 0c             	sub    esp,0xc
c001ee5f:	68 e0 05 02 c0       	push   0xc00205e0
c001ee64:	e8 cf 5d ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001ee69:	83 c4 10             	add    esp,0x10
c001ee6c:	eb 0f                	jmp    c001ee7d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ee6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee72:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee74:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ee77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7b:	89 10                	mov    DWORD PTR [eax],edx
c001ee7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee84:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee8e:	83 c4 0c             	add    esp,0xc
c001ee91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ee92 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ee92:	83 ec 0c             	sub    esp,0xc
c001ee95:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ee9a:	75 10                	jne    c001eeac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	68 84 05 02 c0       	push   0xc0020584
c001eea4:	e8 8f 5d ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001eea9:	83 c4 10             	add    esp,0x10
c001eeac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeb2:	85 c0                	test   eax,eax
c001eeb4:	74 34                	je     c001eeea <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eeb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eebd:	85 c0                	test   eax,eax
c001eebf:	74 29                	je     c001eeea <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eec8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eecc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eed7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eede:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eee1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eee8:	eb 65                	jmp    c001ef4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeee:	8b 00                	mov    eax,DWORD PTR [eax]
c001eef0:	85 c0                	test   eax,eax
c001eef2:	75 4b                	jne    c001ef3f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eefb:	85 c0                	test   eax,eax
c001eefd:	75 40                	jne    c001ef3f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef07:	89 10                	mov    DWORD PTR [eax],edx
c001ef09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef1b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef26:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef29:	85 c0                	test   eax,eax
c001ef2b:	74 22                	je     c001ef4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ef2d:	83 ec 0c             	sub    esp,0xc
c001ef30:	68 a6 05 02 c0       	push   0xc00205a6
c001ef35:	e8 fe 5c ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001ef3a:	83 c4 10             	add    esp,0x10
c001ef3d:	eb 10                	jmp    c001ef4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ef3f:	83 ec 0c             	sub    esp,0xc
c001ef42:	68 b0 05 02 c0       	push   0xc00205b0
c001ef47:	e8 ec 5c ff ff       	call   c0014c38 <Krnl::panic(char const*)>
c001ef4c:	83 c4 10             	add    esp,0x10
c001ef4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef53:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef56:	8d 50 01             	lea    edx,[eax+0x1]
c001ef59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef60:	90                   	nop
c001ef61:	83 c4 0c             	add    esp,0xc
c001ef64:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ef66 <ACPI::~ACPI()>:
c001ef66:	83 ec 0c             	sub    esp,0xc
c001ef69:	ba b0 14 02 c0       	mov    edx,0xc00214b0
c001ef6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef72:	89 10                	mov    DWORD PTR [eax],edx
c001ef74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef78:	83 ec 0c             	sub    esp,0xc
c001ef7b:	50                   	push   eax
c001ef7c:	e8 cf 12 ff ff       	call   c0010250 <Device::~Device()>
c001ef81:	83 c4 10             	add    esp,0x10
c001ef84:	90                   	nop
c001ef85:	83 c4 0c             	add    esp,0xc
c001ef88:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ef8a <ACPI::~ACPI()>:
c001ef8a:	83 ec 0c             	sub    esp,0xc
c001ef8d:	83 ec 0c             	sub    esp,0xc
c001ef90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef94:	e8 cd ff ff ff       	call   c001ef66 <ACPI::~ACPI()>
c001ef99:	83 c4 10             	add    esp,0x10
c001ef9c:	83 ec 08             	sub    esp,0x8
c001ef9f:	68 68 22 00 00       	push   0x2268
c001efa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efa8:	e8 16 ff fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001efad:	83 c4 10             	add    esp,0x10
c001efb0:	83 c4 0c             	add    esp,0xc
c001efb3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001efb4 <CPU::~CPU()>:
c001efb4:	83 ec 0c             	sub    esp,0xc
c001efb7:	ba 00 17 02 c0       	mov    edx,0xc0021700
c001efbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc0:	89 10                	mov    DWORD PTR [eax],edx
c001efc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc6:	83 ec 0c             	sub    esp,0xc
c001efc9:	50                   	push   eax
c001efca:	e8 81 12 ff ff       	call   c0010250 <Device::~Device()>
c001efcf:	83 c4 10             	add    esp,0x10
c001efd2:	90                   	nop
c001efd3:	83 c4 0c             	add    esp,0xc
c001efd6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001efd8 <CPU::~CPU()>:
c001efd8:	83 ec 0c             	sub    esp,0xc
c001efdb:	83 ec 0c             	sub    esp,0xc
c001efde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efe2:	e8 cd ff ff ff       	call   c001efb4 <CPU::~CPU()>
c001efe7:	83 c4 10             	add    esp,0x10
c001efea:	83 ec 08             	sub    esp,0x8
c001efed:	68 98 11 00 00       	push   0x1198
c001eff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff6:	e8 c8 fe fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001effb:	83 c4 10             	add    esp,0x10
c001effe:	83 c4 0c             	add    esp,0xc
c001f001:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001f002 <CPU::readCR4()>:
c001f002:	83 ec 10             	sub    esp,0x10
c001f005:	0f 20 e0             	mov    eax,cr4
c001f008:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f00c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f010:	83 c4 10             	add    esp,0x10
c001f013:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f014 <CPU::writeDR7(unsigned long)>:
c001f014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f018:	0f 23 f8             	mov    db7,eax
c001f01b:	90                   	nop
c001f01c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f01d <CPU::writeCR4(unsigned long)>:
c001f01d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f021:	0f 22 e0             	mov    cr4,eax
c001f024:	90                   	nop
c001f025:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001f026 <CPU::readCR2()>:
c001f026:	83 ec 10             	sub    esp,0x10
c001f029:	0f 20 d0             	mov    eax,cr2
c001f02c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f034:	83 c4 10             	add    esp,0x10
c001f037:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f038 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f038:	90                   	nop
c001f039:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f03a <ThreadControlBlock::ThreadControlBlock()>:
c001f03a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f03e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f045:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f049:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f054:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f05b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f05f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001f066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f06a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f072:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001f076:	90                   	nop
c001f077:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f078 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f089:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f094:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f0bb:	83 ec 0c             	sub    esp,0xc
c001f0be:	68 68 05 02 c0       	push   0xc0020568
c001f0c3:	e8 db fe fe ff       	call   c000efa3 <Dbg::kprintf(char const*, ...)>
c001f0c8:	83 c4 10             	add    esp,0x10
c001f0cb:	90                   	nop
c001f0cc:	83 c4 0c             	add    esp,0xc
c001f0cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f0d0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f0d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f0d7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f0d8 <PCI::~PCI()>:
c001f0d8:	83 ec 0c             	sub    esp,0xc
c001f0db:	ba d0 23 02 c0       	mov    edx,0xc00223d0
c001f0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e4:	89 10                	mov    DWORD PTR [eax],edx
c001f0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ea:	83 ec 0c             	sub    esp,0xc
c001f0ed:	50                   	push   eax
c001f0ee:	e8 6d 0b ff ff       	call   c000fc60 <Bus::~Bus()>
c001f0f3:	83 c4 10             	add    esp,0x10
c001f0f6:	90                   	nop
c001f0f7:	83 c4 0c             	add    esp,0xc
c001f0fa:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f0fc <PCI::~PCI()>:
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	83 ec 0c             	sub    esp,0xc
c001f102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f106:	e8 cd ff ff ff       	call   c001f0d8 <PCI::~PCI()>
c001f10b:	83 c4 10             	add    esp,0x10
c001f10e:	83 ec 08             	sub    esp,0x8
c001f111:	68 58 01 00 00       	push   0x158
c001f116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f11a:	e8 a4 fd fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f11f:	83 c4 10             	add    esp,0x10
c001f122:	83 c4 0c             	add    esp,0xc
c001f125:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f126 <IDE::~IDE()>:
c001f126:	83 ec 0c             	sub    esp,0xc
c001f129:	ba 34 26 02 c0       	mov    edx,0xc0022634
c001f12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f132:	89 10                	mov    DWORD PTR [eax],edx
c001f134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f138:	83 ec 0c             	sub    esp,0xc
c001f13b:	50                   	push   eax
c001f13c:	e8 25 16 ff ff       	call   c0010766 <HardDiskController::~HardDiskController()>
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	90                   	nop
c001f145:	83 c4 0c             	add    esp,0xc
c001f148:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f14a <IDE::~IDE()>:
c001f14a:	83 ec 0c             	sub    esp,0xc
c001f14d:	83 ec 0c             	sub    esp,0xc
c001f150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f154:	e8 cd ff ff ff       	call   c001f126 <IDE::~IDE()>
c001f159:	83 c4 10             	add    esp,0x10
c001f15c:	83 ec 08             	sub    esp,0x8
c001f15f:	68 70 02 00 00       	push   0x270
c001f164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f168:	e8 56 fd fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f16d:	83 c4 10             	add    esp,0x10
c001f170:	83 c4 0c             	add    esp,0xc
c001f173:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f174 <ATA::~ATA()>:
c001f174:	83 ec 0c             	sub    esp,0xc
c001f177:	ba 84 26 02 c0       	mov    edx,0xc0022684
c001f17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f180:	89 10                	mov    DWORD PTR [eax],edx
c001f182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f186:	83 ec 0c             	sub    esp,0xc
c001f189:	50                   	push   eax
c001f18a:	e8 b5 16 ff ff       	call   c0010844 <PhysicalDisk::~PhysicalDisk()>
c001f18f:	83 c4 10             	add    esp,0x10
c001f192:	90                   	nop
c001f193:	83 c4 0c             	add    esp,0xc
c001f196:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f198 <ATA::~ATA()>:
c001f198:	83 ec 0c             	sub    esp,0xc
c001f19b:	83 ec 0c             	sub    esp,0xc
c001f19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1a2:	e8 cd ff ff ff       	call   c001f174 <ATA::~ATA()>
c001f1a7:	83 c4 10             	add    esp,0x10
c001f1aa:	83 ec 08             	sub    esp,0x8
c001f1ad:	68 7c 01 00 00       	push   0x17c
c001f1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1b6:	e8 08 fd fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f1bb:	83 c4 10             	add    esp,0x10
c001f1be:	83 c4 0c             	add    esp,0xc
c001f1c1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f1c2 <ATAPI::~ATAPI()>:
c001f1c2:	83 ec 0c             	sub    esp,0xc
c001f1c5:	ba f0 26 02 c0       	mov    edx,0xc00226f0
c001f1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ce:	89 10                	mov    DWORD PTR [eax],edx
c001f1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d4:	83 ec 0c             	sub    esp,0xc
c001f1d7:	50                   	push   eax
c001f1d8:	e8 67 16 ff ff       	call   c0010844 <PhysicalDisk::~PhysicalDisk()>
c001f1dd:	83 c4 10             	add    esp,0x10
c001f1e0:	90                   	nop
c001f1e1:	83 c4 0c             	add    esp,0xc
c001f1e4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f1e6 <ATAPI::~ATAPI()>:
c001f1e6:	83 ec 0c             	sub    esp,0xc
c001f1e9:	83 ec 0c             	sub    esp,0xc
c001f1ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f0:	e8 cd ff ff ff       	call   c001f1c2 <ATAPI::~ATAPI()>
c001f1f5:	83 c4 10             	add    esp,0x10
c001f1f8:	83 ec 08             	sub    esp,0x8
c001f1fb:	68 80 01 00 00       	push   0x180
c001f200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f204:	e8 ba fc fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f209:	83 c4 10             	add    esp,0x10
c001f20c:	83 c4 0c             	add    esp,0xc
c001f20f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f210 <AVX::~AVX()>:
c001f210:	83 ec 0c             	sub    esp,0xc
c001f213:	ba 2c 27 02 c0       	mov    edx,0xc002272c
c001f218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f21c:	89 10                	mov    DWORD PTR [eax],edx
c001f21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f222:	83 ec 0c             	sub    esp,0xc
c001f225:	50                   	push   eax
c001f226:	e8 9d 16 ff ff       	call   c00108c8 <FPU::~FPU()>
c001f22b:	83 c4 10             	add    esp,0x10
c001f22e:	90                   	nop
c001f22f:	83 c4 0c             	add    esp,0xc
c001f232:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f234 <AVX::~AVX()>:
c001f234:	83 ec 0c             	sub    esp,0xc
c001f237:	83 ec 0c             	sub    esp,0xc
c001f23a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f23e:	e8 cd ff ff ff       	call   c001f210 <AVX::~AVX()>
c001f243:	83 c4 10             	add    esp,0x10
c001f246:	83 ec 08             	sub    esp,0x8
c001f249:	68 58 01 00 00       	push   0x158
c001f24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f252:	e8 6c fc fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f257:	83 c4 10             	add    esp,0x10
c001f25a:	83 c4 0c             	add    esp,0xc
c001f25d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f25e <MMX::~MMX()>:
c001f25e:	83 ec 0c             	sub    esp,0xc
c001f261:	ba 6c 27 02 c0       	mov    edx,0xc002276c
c001f266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f26a:	89 10                	mov    DWORD PTR [eax],edx
c001f26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f270:	83 ec 0c             	sub    esp,0xc
c001f273:	50                   	push   eax
c001f274:	e8 4f 16 ff ff       	call   c00108c8 <FPU::~FPU()>
c001f279:	83 c4 10             	add    esp,0x10
c001f27c:	90                   	nop
c001f27d:	83 c4 0c             	add    esp,0xc
c001f280:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f282 <MMX::~MMX()>:
c001f282:	83 ec 0c             	sub    esp,0xc
c001f285:	83 ec 0c             	sub    esp,0xc
c001f288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f28c:	e8 cd ff ff ff       	call   c001f25e <MMX::~MMX()>
c001f291:	83 c4 10             	add    esp,0x10
c001f294:	83 ec 08             	sub    esp,0x8
c001f297:	68 58 01 00 00       	push   0x158
c001f29c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2a0:	e8 1e fc fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f2a5:	83 c4 10             	add    esp,0x10
c001f2a8:	83 c4 0c             	add    esp,0xc
c001f2ab:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f2ac <SSE::~SSE()>:
c001f2ac:	83 ec 0c             	sub    esp,0xc
c001f2af:	ba ac 27 02 c0       	mov    edx,0xc00227ac
c001f2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b8:	89 10                	mov    DWORD PTR [eax],edx
c001f2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2be:	83 ec 0c             	sub    esp,0xc
c001f2c1:	50                   	push   eax
c001f2c2:	e8 01 16 ff ff       	call   c00108c8 <FPU::~FPU()>
c001f2c7:	83 c4 10             	add    esp,0x10
c001f2ca:	90                   	nop
c001f2cb:	83 c4 0c             	add    esp,0xc
c001f2ce:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f2d0 <SSE::~SSE()>:
c001f2d0:	83 ec 0c             	sub    esp,0xc
c001f2d3:	83 ec 0c             	sub    esp,0xc
c001f2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2da:	e8 cd ff ff ff       	call   c001f2ac <SSE::~SSE()>
c001f2df:	83 c4 10             	add    esp,0x10
c001f2e2:	83 ec 08             	sub    esp,0x8
c001f2e5:	68 58 01 00 00       	push   0x158
c001f2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ee:	e8 d0 fb fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f2f3:	83 c4 10             	add    esp,0x10
c001f2f6:	83 c4 0c             	add    esp,0xc
c001f2f9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f2fa <x87::~x87()>:
c001f2fa:	83 ec 0c             	sub    esp,0xc
c001f2fd:	ba ec 27 02 c0       	mov    edx,0xc00227ec
c001f302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f306:	89 10                	mov    DWORD PTR [eax],edx
c001f308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f30c:	83 ec 0c             	sub    esp,0xc
c001f30f:	50                   	push   eax
c001f310:	e8 b3 15 ff ff       	call   c00108c8 <FPU::~FPU()>
c001f315:	83 c4 10             	add    esp,0x10
c001f318:	90                   	nop
c001f319:	83 c4 0c             	add    esp,0xc
c001f31c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f31e <x87::~x87()>:
c001f31e:	83 ec 0c             	sub    esp,0xc
c001f321:	83 ec 0c             	sub    esp,0xc
c001f324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f328:	e8 cd ff ff ff       	call   c001f2fa <x87::~x87()>
c001f32d:	83 c4 10             	add    esp,0x10
c001f330:	83 ec 08             	sub    esp,0x8
c001f333:	68 58 01 00 00       	push   0x158
c001f338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f33c:	e8 82 fb fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f341:	83 c4 10             	add    esp,0x10
c001f344:	83 c4 0c             	add    esp,0xc
c001f347:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f348 <IOAPIC::~IOAPIC()>:
c001f348:	83 ec 0c             	sub    esp,0xc
c001f34b:	ba 44 29 02 c0       	mov    edx,0xc0022944
c001f350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f354:	89 10                	mov    DWORD PTR [eax],edx
c001f356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35a:	83 ec 0c             	sub    esp,0xc
c001f35d:	50                   	push   eax
c001f35e:	e8 ed 0e ff ff       	call   c0010250 <Device::~Device()>
c001f363:	83 c4 10             	add    esp,0x10
c001f366:	90                   	nop
c001f367:	83 c4 0c             	add    esp,0xc
c001f36a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f36c <IOAPIC::~IOAPIC()>:
c001f36c:	83 ec 0c             	sub    esp,0xc
c001f36f:	83 ec 0c             	sub    esp,0xc
c001f372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f376:	e8 cd ff ff ff       	call   c001f348 <IOAPIC::~IOAPIC()>
c001f37b:	83 c4 10             	add    esp,0x10
c001f37e:	83 ec 08             	sub    esp,0x8
c001f381:	68 68 01 00 00       	push   0x168
c001f386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f38a:	e8 34 fb fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f38f:	83 c4 10             	add    esp,0x10
c001f392:	83 c4 0c             	add    esp,0xc
c001f395:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f396 <APIC::~APIC()>:
c001f396:	83 ec 0c             	sub    esp,0xc
c001f399:	ba fc 28 02 c0       	mov    edx,0xc00228fc
c001f39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a2:	89 10                	mov    DWORD PTR [eax],edx
c001f3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a8:	83 ec 0c             	sub    esp,0xc
c001f3ab:	50                   	push   eax
c001f3ac:	e8 d5 19 ff ff       	call   c0010d86 <InterruptController::~InterruptController()>
c001f3b1:	83 c4 10             	add    esp,0x10
c001f3b4:	90                   	nop
c001f3b5:	83 c4 0c             	add    esp,0xc
c001f3b8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f3ba <APIC::~APIC()>:
c001f3ba:	83 ec 0c             	sub    esp,0xc
c001f3bd:	83 ec 0c             	sub    esp,0xc
c001f3c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3c4:	e8 cd ff ff ff       	call   c001f396 <APIC::~APIC()>
c001f3c9:	83 c4 10             	add    esp,0x10
c001f3cc:	83 ec 08             	sub    esp,0x8
c001f3cf:	68 58 21 00 00       	push   0x2158
c001f3d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3d8:	e8 e6 fa fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f3dd:	83 c4 10             	add    esp,0x10
c001f3e0:	83 c4 0c             	add    esp,0xc
c001f3e3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f3e4 <PIC::~PIC()>:
c001f3e4:	83 ec 0c             	sub    esp,0xc
c001f3e7:	ba 94 29 02 c0       	mov    edx,0xc0022994
c001f3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f0:	89 10                	mov    DWORD PTR [eax],edx
c001f3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f6:	83 ec 0c             	sub    esp,0xc
c001f3f9:	50                   	push   eax
c001f3fa:	e8 87 19 ff ff       	call   c0010d86 <InterruptController::~InterruptController()>
c001f3ff:	83 c4 10             	add    esp,0x10
c001f402:	90                   	nop
c001f403:	83 c4 0c             	add    esp,0xc
c001f406:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f408 <PIC::~PIC()>:
c001f408:	83 ec 0c             	sub    esp,0xc
c001f40b:	83 ec 0c             	sub    esp,0xc
c001f40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f412:	e8 cd ff ff ff       	call   c001f3e4 <PIC::~PIC()>
c001f417:	83 c4 10             	add    esp,0x10
c001f41a:	83 ec 08             	sub    esp,0x8
c001f41d:	68 58 21 00 00       	push   0x2158
c001f422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f426:	e8 98 fa fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f42b:	83 c4 10             	add    esp,0x10
c001f42e:	83 c4 0c             	add    esp,0xc
c001f431:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f432 <APICTimer::~APICTimer()>:
c001f432:	83 ec 0c             	sub    esp,0xc
c001f435:	ba e8 29 02 c0       	mov    edx,0xc00229e8
c001f43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f43e:	89 10                	mov    DWORD PTR [eax],edx
c001f440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f444:	83 ec 0c             	sub    esp,0xc
c001f447:	50                   	push   eax
c001f448:	e8 a5 2f ff ff       	call   c00123f2 <Timer::~Timer()>
c001f44d:	83 c4 10             	add    esp,0x10
c001f450:	90                   	nop
c001f451:	83 c4 0c             	add    esp,0xc
c001f454:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f456 <APICTimer::~APICTimer()>:
c001f456:	83 ec 0c             	sub    esp,0xc
c001f459:	83 ec 0c             	sub    esp,0xc
c001f45c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f460:	e8 cd ff ff ff       	call   c001f432 <APICTimer::~APICTimer()>
c001f465:	83 c4 10             	add    esp,0x10
c001f468:	83 ec 08             	sub    esp,0x8
c001f46b:	68 60 01 00 00       	push   0x160
c001f470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f474:	e8 4a fa fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f479:	83 c4 10             	add    esp,0x10
c001f47c:	83 c4 0c             	add    esp,0xc
c001f47f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f480 <PIT::~PIT()>:
c001f480:	83 ec 0c             	sub    esp,0xc
c001f483:	ba 38 2a 02 c0       	mov    edx,0xc0022a38
c001f488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f48c:	89 10                	mov    DWORD PTR [eax],edx
c001f48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f492:	83 ec 0c             	sub    esp,0xc
c001f495:	50                   	push   eax
c001f496:	e8 57 2f ff ff       	call   c00123f2 <Timer::~Timer()>
c001f49b:	83 c4 10             	add    esp,0x10
c001f49e:	90                   	nop
c001f49f:	83 c4 0c             	add    esp,0xc
c001f4a2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f4a4 <PIT::~PIT()>:
c001f4a4:	83 ec 0c             	sub    esp,0xc
c001f4a7:	83 ec 0c             	sub    esp,0xc
c001f4aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4ae:	e8 cd ff ff ff       	call   c001f480 <PIT::~PIT()>
c001f4b3:	83 c4 10             	add    esp,0x10
c001f4b6:	83 ec 08             	sub    esp,0x8
c001f4b9:	68 5c 01 00 00       	push   0x15c
c001f4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4c2:	e8 fc f9 fe ff       	call   c000eec3 <operator delete(void*, unsigned long)>
c001f4c7:	83 c4 10             	add    esp,0x10
c001f4ca:	83 c4 0c             	add    esp,0xc
c001f4cd:	c3                   	ret    
