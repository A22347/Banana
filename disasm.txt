
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 2f f4 00 00       	call   c000f44f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 4f 02 00       	call   c0024f78 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 18 5b 02 c0       	mov    ebx,0xc0025b18
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 24 5b 02 c0    	cmp    ebx,0xc0025b24
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 99 02 c0       	mov    eax,0xc00299b8
c0000049:	3d b8 99 02 c0       	cmp    eax,0xc00299b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 99 02 c0       	push   0xc00299b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 99 02 c0       	mov    eax,0xc00299b8
c0000075:	2d b8 99 02 c0       	sub    eax,0xc00299b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 99 02 c0       	push   0xc00299b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 2c 5b 02 c0       	mov    ebx,0xc0025b2c
c00000bb:	81 eb 28 5b 02 c0    	sub    ebx,0xc0025b28
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 28 5b 02 c0       	mov    esi,0xc0025b28
c00000ca:	a1 ac a0 02 c0       	mov    eax,ds:0xc002a0ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac a0 02 c0       	mov    ds:0xc002a0ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac a0 02 c0       	mov    eax,ds:0xc002a0ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 99 02 c0       	push   0xc00299b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 a0 02 c0       	push   0xc002a0b0
c000012c:	68 b8 99 02 c0       	push   0xc00299b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 03                	jne    c000018f <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]

c000018f <voodooXADD.usermode>:
c000018f:	89 35 2a 02 00 c0    	mov    DWORD PTR ds:0xc000022a,esi
c0000195:	89 25 26 02 00 c0    	mov    DWORD PTR ds:0xc0000226,esp
c000019b:	60                   	pusha  
c000019c:	b0 90                	mov    al,0x90
c000019e:	b9 20 00 00 00       	mov    ecx,0x20
c00001a3:	bf fd 01 00 c0       	mov    edi,0xc00001fd
c00001a8:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001aa:	61                   	popa   
c00001ab:	60                   	pusha  
c00001ac:	89 d6                	mov    esi,edx
c00001ae:	bf fd 01 00 c0       	mov    edi,0xc00001fd
c00001b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001b5:	61                   	popa   
c00001b6:	60                   	pusha  
c00001b7:	89 d6                	mov    esi,edx
c00001b9:	bf 0d 02 00 c0       	mov    edi,0xc000020d
c00001be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c0:	61                   	popa   
c00001c1:	b1 90                	mov    cl,0x90
c00001c3:	85 db                	test   ebx,ebx
c00001c5:	74 06                	je     c00001cd <voodooXADD.skipChange>
c00001c7:	8a 8b fc 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe04]

c00001cd <voodooXADD.skipChange>:
c00001cd:	88 8b fd 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe03],cl
c00001d3:	80 ab fe 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe02],0x3a
c00001da:	88 8b 0d 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdf3],cl
c00001e0:	80 ab 0e 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdf2],0xbe
c00001e7:	89 c4                	mov    esp,eax
c00001e9:	81 c4 10 00 00 00    	add    esp,0x10
c00001ef:	5f                   	pop    edi
c00001f0:	5e                   	pop    esi
c00001f1:	5d                   	pop    ebp
c00001f2:	5b                   	pop    ebx
c00001f3:	5b                   	pop    ebx
c00001f4:	5a                   	pop    edx
c00001f5:	59                   	pop    ecx
c00001f6:	58                   	pop    eax
c00001f7:	8b 25 2a 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022a

c00001fd <voodooXADD.helper>:
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	8b 25 26 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000226
c0000223:	61                   	popa   
c0000224:	c9                   	leave  
c0000225:	c3                   	ret    

c0000226 <voodooXADD.oldStack>:
c0000226:	00 00                	add    BYTE PTR [eax],al
	...

c000022a <voodooXADD.newStack>:
c000022a:	00 00                	add    BYTE PTR [eax],al
	...

c000022e <doTPAUSE>:
c000022e:	fb                   	sti    
c000022f:	31 c0                	xor    eax,eax
c0000231:	31 d2                	xor    edx,edx
c0000233:	66 0f ae f0          	tpause eax
c0000237:	c3                   	ret    

c0000238 <hasLegacyFPU>:
c0000238:	0f 20 c2             	mov    edx,cr0
c000023b:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000241:	0f 22 c2             	mov    cr0,edx
c0000244:	db e3                	fninit 
c0000246:	dd 3d 5b 02 00 c0    	fnstsw WORD PTR ds:0xc000025b
c000024c:	31 c0                	xor    eax,eax
c000024e:	66 81 3d 5b 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000025b,0x0
c0000257:	75 01                	jne    c000025a <hasLegacyFPU.nofpu>

c0000259 <hasLegacyFPU.hasfpu>:
c0000259:	40                   	inc    eax

c000025a <hasLegacyFPU.nofpu>:
c000025a:	c3                   	ret    

c000025b <testword>:
c000025b:	aa                   	stos   BYTE PTR es:[edi],al
c000025c:	55                   	push   ebp

c000025d <is486>:
c000025d:	0f 09                	wbinvd 
c000025f:	31 c0                	xor    eax,eax
c0000261:	40                   	inc    eax
c0000262:	c3                   	ret    
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	31 c0                	xor    eax,eax
c0000292:	c3                   	ret    

c0000293 <goToVM86>:
c0000293:	fa                   	cli    
c0000294:	55                   	push   ebp
c0000295:	89 e5                	mov    ebp,esp
c0000297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000029a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c000029d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002a0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002a3:	25 ff ff 00 00       	and    eax,0xffff
c00002a8:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002ae:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002b4:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002ba:	52                   	push   edx
c00002bb:	51                   	push   ecx
c00002bc:	68 02 02 02 00       	push   0x20202
c00002c1:	53                   	push   ebx
c00002c2:	50                   	push   eax
c00002c3:	cf                   	iret   

c00002c4 <goToUsermode>:
c00002c4:	fa                   	cli    
c00002c5:	55                   	push   ebp
c00002c6:	89 e5                	mov    ebp,esp
c00002c8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002cb:	66 b8 23 00          	mov    ax,0x23
c00002cf:	66 8e d8             	mov    ds,ax
c00002d2:	66 8e c0             	mov    es,ax
c00002d5:	66 8e e0             	mov    fs,ax
c00002d8:	66 8e e8             	mov    gs,ax
c00002db:	89 e0                	mov    eax,esp
c00002dd:	68 23 00 00 00       	push   0x23
c00002e2:	50                   	push   eax
c00002e3:	68 02 02 00 00       	push   0x202
c00002e8:	68 1b 00 00 00       	push   0x1b
c00002ed:	53                   	push   ebx
c00002ee:	cf                   	iret   

c00002ef <switchToThreadASMFirstTime>:
c00002ef:	9c                   	pushf  
c00002f0:	fa                   	cli    
c00002f1:	50                   	push   eax
c00002f2:	53                   	push   ebx
c00002f3:	51                   	push   ecx
c00002f4:	52                   	push   edx
c00002f5:	56                   	push   esi
c00002f6:	57                   	push   edi
c00002f7:	55                   	push   ebp
c00002f8:	e9 11 00 00 00       	jmp    c000030e <commonThreadSwitch>

c00002fd <switchToThreadASM>:
c00002fd:	9c                   	pushf  
c00002fe:	50                   	push   eax
c00002ff:	53                   	push   ebx
c0000300:	51                   	push   ecx
c0000301:	52                   	push   edx
c0000302:	56                   	push   esi
c0000303:	57                   	push   edi
c0000304:	55                   	push   ebp
c0000305:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000030b:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000030e <commonThreadSwitch>:
c000030e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000312:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000318:	8b 06                	mov    eax,DWORD PTR [esi]
c000031a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000031d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000320:	0f 20 d9             	mov    ecx,cr3
c0000323:	39 c8                	cmp    eax,ecx
c0000325:	74 03                	je     c000032a <commonThreadSwitch.doneVAS>
c0000327:	0f 22 d8             	mov    cr3,eax

c000032a <commonThreadSwitch.doneVAS>:
c000032a:	85 d2                	test   edx,edx
c000032c:	74 4e                	je     c000037c <commonThreadSwitch.notFirstTime>
c000032e:	fa                   	cli    
c000032f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000332:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000337:	60                   	pusha  
c0000338:	e8 e9 1c 01 00       	call   c0012026 <mapVASFirstTime>
c000033d:	61                   	popa   
c000033e:	89 c4                	mov    esp,eax
c0000340:	56                   	push   esi
c0000341:	52                   	push   edx
c0000342:	e8 ff be 01 00       	call   c001c246 <changeTSS>
c0000347:	5a                   	pop    edx
c0000348:	5e                   	pop    esi
c0000349:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000350:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000356:	74 39                	je     c0000391 <commonThreadSwitch.cameOffAFork>
c0000358:	5d                   	pop    ebp
c0000359:	5f                   	pop    edi
c000035a:	5e                   	pop    esi
c000035b:	59                   	pop    ecx
c000035c:	59                   	pop    ecx
c000035d:	5b                   	pop    ebx
c000035e:	58                   	pop    eax
c000035f:	81 c4 04 00 00 00    	add    esp,0x4
c0000365:	6a 02                	push   0x2
c0000367:	9d                   	popf   
c0000368:	52                   	push   edx
c0000369:	e8 eb c2 01 00       	call   c001c659 <taskStartupFunction>
c000036e:	5a                   	pop    edx
c000036f:	50                   	push   eax
c0000370:	ff d2                	call   edx
c0000372:	e8 91 c8 01 00       	call   c001cc08 <taskReturned>
c0000377:	e9 fb ff ff ff       	jmp    c0000377 <commonThreadSwitch.doneVAS+0x4d>

c000037c <commonThreadSwitch.notFirstTime>:
c000037c:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000037f:	56                   	push   esi
c0000380:	52                   	push   edx
c0000381:	e8 c0 be 01 00       	call   c001c246 <changeTSS>
c0000386:	5a                   	pop    edx
c0000387:	5e                   	pop    esi
c0000388:	5d                   	pop    ebp
c0000389:	5f                   	pop    edi
c000038a:	5e                   	pop    esi
c000038b:	5a                   	pop    edx
c000038c:	59                   	pop    ecx
c000038d:	5b                   	pop    ebx
c000038e:	58                   	pop    eax
c000038f:	9d                   	popf   
c0000390:	c3                   	ret    

c0000391 <commonThreadSwitch.cameOffAFork>:
c0000391:	31 c0                	xor    eax,eax
c0000393:	31 d2                	xor    edx,edx
c0000395:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c0000398:	e9 a2 02 00 00       	jmp    c000063f <offAForkJumpThingy>

c000039d <detectCPUID>:
c000039d:	9c                   	pushf  
c000039e:	9c                   	pushf  
c000039f:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00003a6:	9d                   	popf   
c00003a7:	9c                   	pushf  
c00003a8:	58                   	pop    eax
c00003a9:	33 04 24             	xor    eax,DWORD PTR [esp]
c00003ac:	9d                   	popf   
c00003ad:	25 00 00 20 00       	and    eax,0x200000
c00003b2:	c3                   	ret    

c00003b3 <asmQuickAcquireLock>:
c00003b3:	55                   	push   ebp
c00003b4:	89 e5                	mov    ebp,esp
c00003b6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b9 <asmQuickAcquireLock.retry>:
c00003b9:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003be:	72 02                	jb     c00003c2 <asmQuickAcquireLock.spin_with_pause>
c00003c0:	fa                   	cli    
c00003c1:	c3                   	ret    

c00003c2 <asmQuickAcquireLock.spin_with_pause>:
c00003c2:	f3 90                	pause  
c00003c4:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003ca:	75 f6                	jne    c00003c2 <asmQuickAcquireLock.spin_with_pause>
c00003cc:	e9 e8 ff ff ff       	jmp    c00003b9 <asmQuickAcquireLock.retry>

c00003d1 <asmQuickReleaseLock>:
c00003d1:	55                   	push   ebp
c00003d2:	89 e5                	mov    ebp,esp
c00003d4:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003db:	5d                   	pop    ebp
c00003dc:	c3                   	ret    

c00003dd <asmAcquireLock>:
c00003dd:	55                   	push   ebp
c00003de:	89 e5                	mov    ebp,esp
c00003e0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003e3 <asmAcquireLock.retry>:
c00003e3:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003e8:	72 05                	jb     c00003ef <asmAcquireLock.spin_with_pause>
c00003ea:	9c                   	pushf  
c00003eb:	58                   	pop    eax
c00003ec:	fa                   	cli    
c00003ed:	5d                   	pop    ebp
c00003ee:	c3                   	ret    

c00003ef <asmAcquireLock.spin_with_pause>:
c00003ef:	f3 90                	pause  
c00003f1:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003f7:	75 f6                	jne    c00003ef <asmAcquireLock.spin_with_pause>
c00003f9:	e9 e5 ff ff ff       	jmp    c00003e3 <asmAcquireLock.retry>

c00003fe <asmReleaseLock>:
c00003fe:	55                   	push   ebp
c00003ff:	89 e5                	mov    ebp,esp
c0000401:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000404:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000407:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000040d:	52                   	push   edx
c000040e:	9d                   	popf   
c000040f:	5d                   	pop    ebp
c0000410:	c3                   	ret    

c0000411 <loadGDT>:
c0000411:	0f 01 15 f0 a4 02 c0 	lgdtd  ds:0xc002a4f0
c0000418:	66 b8 10 00          	mov    ax,0x10
c000041c:	66 8e d8             	mov    ds,ax
c000041f:	66 8e c0             	mov    es,ax
c0000422:	66 8e e0             	mov    fs,ax
c0000425:	66 8e e8             	mov    gs,ax
c0000428:	66 8e d0             	mov    ss,ax
c000042b:	e9 00 00 00 00       	jmp    c0000430 <flush2>

c0000430 <flush2>:
c0000430:	c3                   	ret    

c0000431 <isr0>:
c0000431:	fa                   	cli    
c0000432:	68 00 00 00 00       	push   0x0
c0000437:	68 00 00 00 00       	push   0x0
c000043c:	e9 a2 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000441 <isr1>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 01                	push   0x1
c0000446:	e9 98 01 00 00       	jmp    c00005e3 <int_common_stub>

c000044b <isr2>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 02                	push   0x2
c0000450:	e9 8e 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000455 <isr3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 03                	push   0x3
c000045a:	e9 84 01 00 00       	jmp    c00005e3 <int_common_stub>

c000045f <isr4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 04                	push   0x4
c0000464:	e9 7a 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000469 <isr5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 05                	push   0x5
c000046e:	e9 70 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000473 <isr6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 06                	push   0x6
c0000478:	e9 66 01 00 00       	jmp    c00005e3 <int_common_stub>

c000047d <isr7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 07                	push   0x7
c0000482:	e9 5c 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000487 <isr8>:
c0000487:	fa                   	cli    
c0000488:	6a 08                	push   0x8
c000048a:	e9 54 01 00 00       	jmp    c00005e3 <int_common_stub>

c000048f <isr9>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 09                	push   0x9
c0000494:	e9 4a 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000499 <isr10>:
c0000499:	fa                   	cli    
c000049a:	6a 0a                	push   0xa
c000049c:	e9 42 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004a1 <isr11>:
c00004a1:	fa                   	cli    
c00004a2:	6a 0b                	push   0xb
c00004a4:	e9 3a 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004a9 <isr12>:
c00004a9:	fa                   	cli    
c00004aa:	6a 0c                	push   0xc
c00004ac:	e9 32 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004b1 <isr13>:
c00004b1:	fa                   	cli    
c00004b2:	6a 0d                	push   0xd
c00004b4:	e9 2a 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004b9 <isr14>:
c00004b9:	fa                   	cli    
c00004ba:	6a 0e                	push   0xe
c00004bc:	e9 22 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004c1 <isr15>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 0f                	push   0xf
c00004c6:	e9 18 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004cb <isr16>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 10                	push   0x10
c00004d0:	e9 0e 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004d5 <isr17>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 11                	push   0x11
c00004da:	e9 04 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004df <isr18>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 12                	push   0x12
c00004e4:	e9 fa 00 00 00       	jmp    c00005e3 <int_common_stub>

c00004e9 <isr96>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 60                	push   0x60
c00004ee:	e9 20 01 00 00       	jmp    c0000613 <syscall_common_stub>

c00004f3 <irq0>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 20                	push   0x20
c00004f8:	e9 e6 00 00 00       	jmp    c00005e3 <int_common_stub>

c00004fd <irq1>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 21                	push   0x21
c0000502:	e9 dc 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000507 <irq2>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 22                	push   0x22
c000050c:	e9 d2 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000511 <irq3>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 23                	push   0x23
c0000516:	e9 c8 00 00 00       	jmp    c00005e3 <int_common_stub>

c000051b <irq4>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 24                	push   0x24
c0000520:	e9 be 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000525 <irq5>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 25                	push   0x25
c000052a:	e9 b4 00 00 00       	jmp    c00005e3 <int_common_stub>

c000052f <irq6>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 26                	push   0x26
c0000534:	e9 aa 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000539 <irq7>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 27                	push   0x27
c000053e:	e9 a0 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000543 <irq8>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 28                	push   0x28
c0000548:	e9 96 00 00 00       	jmp    c00005e3 <int_common_stub>

c000054d <irq9>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 29                	push   0x29
c0000552:	e9 8c 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000557 <irq10>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 2a                	push   0x2a
c000055c:	e9 82 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000561 <irq11>:
c0000561:	fa                   	cli    
c0000562:	6a 00                	push   0x0
c0000564:	6a 2b                	push   0x2b
c0000566:	e9 78 00 00 00       	jmp    c00005e3 <int_common_stub>

c000056b <irq12>:
c000056b:	fa                   	cli    
c000056c:	6a 00                	push   0x0
c000056e:	6a 2c                	push   0x2c
c0000570:	e9 6e 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000575 <irq13>:
c0000575:	fa                   	cli    
c0000576:	6a 00                	push   0x0
c0000578:	6a 2d                	push   0x2d
c000057a:	e9 64 00 00 00       	jmp    c00005e3 <int_common_stub>

c000057f <irq14>:
c000057f:	fa                   	cli    
c0000580:	6a 00                	push   0x0
c0000582:	6a 2e                	push   0x2e
c0000584:	e9 5a 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000589 <irq15>:
c0000589:	fa                   	cli    
c000058a:	6a 00                	push   0x0
c000058c:	6a 2f                	push   0x2f
c000058e:	e9 50 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000593 <irq16>:
c0000593:	fa                   	cli    
c0000594:	6a 00                	push   0x0
c0000596:	6a 30                	push   0x30
c0000598:	e9 46 00 00 00       	jmp    c00005e3 <int_common_stub>

c000059d <irq17>:
c000059d:	fa                   	cli    
c000059e:	6a 00                	push   0x0
c00005a0:	6a 31                	push   0x31
c00005a2:	e9 3c 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005a7 <irq18>:
c00005a7:	fa                   	cli    
c00005a8:	6a 00                	push   0x0
c00005aa:	6a 32                	push   0x32
c00005ac:	e9 32 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005b1 <irq19>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 33                	push   0x33
c00005b6:	e9 28 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005bb <irq20>:
c00005bb:	fa                   	cli    
c00005bc:	6a 00                	push   0x0
c00005be:	6a 34                	push   0x34
c00005c0:	e9 1e 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005c5 <irq21>:
c00005c5:	fa                   	cli    
c00005c6:	6a 00                	push   0x0
c00005c8:	6a 35                	push   0x35
c00005ca:	e9 14 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005cf <irq22>:
c00005cf:	fa                   	cli    
c00005d0:	6a 00                	push   0x0
c00005d2:	6a 36                	push   0x36
c00005d4:	e9 0a 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005d9 <irq23>:
c00005d9:	fa                   	cli    
c00005da:	6a 00                	push   0x0
c00005dc:	6a 37                	push   0x37
c00005de:	e9 00 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005e3 <int_common_stub>:
c00005e3:	60                   	pusha  
c00005e4:	1e                   	push   ds
c00005e5:	06                   	push   es
c00005e6:	0f a0                	push   fs
c00005e8:	0f a8                	push   gs
c00005ea:	66 b8 10 00          	mov    ax,0x10
c00005ee:	66 8e d8             	mov    ds,ax
c00005f1:	66 8e c0             	mov    es,ax
c00005f4:	66 8e e0             	mov    fs,ax
c00005f7:	66 8e e8             	mov    gs,ax
c00005fa:	89 e1                	mov    ecx,esp
c00005fc:	51                   	push   ecx
c00005fd:	b9 7b 3e 01 c0       	mov    ecx,0xc0013e7b
c0000602:	ff d1                	call   ecx
c0000604:	59                   	pop    ecx
c0000605:	0f a9                	pop    gs
c0000607:	0f a1                	pop    fs
c0000609:	07                   	pop    es
c000060a:	1f                   	pop    ds
c000060b:	61                   	popa   
c000060c:	81 c4 08 00 00 00    	add    esp,0x8
c0000612:	cf                   	iret   

c0000613 <syscall_common_stub>:
c0000613:	60                   	pusha  
c0000614:	1e                   	push   ds
c0000615:	06                   	push   es
c0000616:	0f a0                	push   fs
c0000618:	0f a8                	push   gs
c000061a:	66 b8 10 00          	mov    ax,0x10
c000061e:	66 8e d8             	mov    ds,ax
c0000621:	66 8e c0             	mov    es,ax
c0000624:	66 8e e0             	mov    fs,ax
c0000627:	66 8e e8             	mov    gs,ax
c000062a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000630:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000633:	89 e1                	mov    ecx,esp
c0000635:	51                   	push   ecx
c0000636:	fb                   	sti    
c0000637:	b9 7b 3e 01 c0       	mov    ecx,0xc0013e7b
c000063c:	ff d1                	call   ecx
c000063e:	59                   	pop    ecx

c000063f <offAForkJumpThingy>:
c000063f:	0f a9                	pop    gs
c0000641:	0f a1                	pop    fs
c0000643:	07                   	pop    es
c0000644:	1f                   	pop    ds
c0000645:	61                   	popa   
c0000646:	81 c4 08 00 00 00    	add    esp,0x8
c000064c:	cf                   	iret   

c000064d <memcmp>:
c000064d:	56                   	push   esi
c000064e:	53                   	push   ebx
c000064f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000653:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000657:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000065b:	01 d6                	add    esi,edx
c000065d:	39 f2                	cmp    edx,esi
c000065f:	74 0e                	je     c000066f <memcmp+0x22>
c0000661:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000664:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000667:	38 c8                	cmp    al,cl
c0000669:	75 08                	jne    c0000673 <memcmp+0x26>
c000066b:	42                   	inc    edx
c000066c:	43                   	inc    ebx
c000066d:	eb ee                	jmp    c000065d <memcmp+0x10>
c000066f:	31 c0                	xor    eax,eax
c0000671:	eb 02                	jmp    c0000675 <memcmp+0x28>
c0000673:	29 c8                	sub    eax,ecx
c0000675:	5b                   	pop    ebx
c0000676:	5e                   	pop    esi
c0000677:	c3                   	ret    

c0000678 <memmove>:
c0000678:	56                   	push   esi
c0000679:	53                   	push   ebx
c000067a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000067e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000682:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000686:	39 c8                	cmp    eax,ecx
c0000688:	73 12                	jae    c000069c <memmove+0x24>
c000068a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000068d:	89 c3                	mov    ebx,eax
c000068f:	39 f1                	cmp    ecx,esi
c0000691:	74 1a                	je     c00006ad <memmove+0x35>
c0000693:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000695:	43                   	inc    ebx
c0000696:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000699:	41                   	inc    ecx
c000069a:	eb f3                	jmp    c000068f <memmove+0x17>
c000069c:	76 0f                	jbe    c00006ad <memmove+0x35>
c000069e:	85 d2                	test   edx,edx
c00006a0:	74 0b                	je     c00006ad <memmove+0x35>
c00006a2:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00006a6:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00006aa:	4a                   	dec    edx
c00006ab:	eb f1                	jmp    c000069e <memmove+0x26>
c00006ad:	5b                   	pop    ebx
c00006ae:	5e                   	pop    esi
c00006af:	c3                   	ret    

c00006b0 <memcpy>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006bb:	89 da                	mov    edx,ebx
c00006bd:	89 d9                	mov    ecx,ebx
c00006bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006c3:	83 e2 fc             	and    edx,0xfffffffc
c00006c6:	c1 e9 02             	shr    ecx,0x2
c00006c9:	89 c7                	mov    edi,eax
c00006cb:	fc                   	cld    
c00006cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006ce:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006d1:	01 c2                	add    edx,eax
c00006d3:	01 de                	add    esi,ebx
c00006d5:	39 f1                	cmp    ecx,esi
c00006d7:	74 09                	je     c00006e2 <memcpy+0x32>
c00006d9:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006db:	42                   	inc    edx
c00006dc:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006df:	41                   	inc    ecx
c00006e0:	eb f3                	jmp    c00006d5 <memcpy+0x25>
c00006e2:	5b                   	pop    ebx
c00006e3:	5e                   	pop    esi
c00006e4:	5f                   	pop    edi
c00006e5:	c3                   	ret    

c00006e6 <memset>:
c00006e6:	53                   	push   ebx
c00006e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006ef:	89 c2                	mov    edx,eax
c00006f1:	01 c1                	add    ecx,eax
c00006f3:	39 ca                	cmp    edx,ecx
c00006f5:	74 0a                	je     c0000701 <memset+0x1b>
c00006f7:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006fb:	42                   	inc    edx
c00006fc:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006ff:	eb f2                	jmp    c00006f3 <memset+0xd>
c0000701:	5b                   	pop    ebx
c0000702:	c3                   	ret    

c0000703 <strlen>:
c0000703:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000707:	31 c0                	xor    eax,eax
c0000709:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000070d:	74 03                	je     c0000712 <strlen+0xf>
c000070f:	40                   	inc    eax
c0000710:	eb f7                	jmp    c0000709 <strlen+0x6>
c0000712:	c3                   	ret    

c0000713 <strpbrk>:
c0000713:	53                   	push   ebx
c0000714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000718:	8a 08                	mov    cl,BYTE PTR [eax]
c000071a:	84 c9                	test   cl,cl
c000071c:	74 14                	je     c0000732 <strpbrk+0x1f>
c000071e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000722:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000724:	84 db                	test   bl,bl
c0000726:	74 07                	je     c000072f <strpbrk+0x1c>
c0000728:	38 cb                	cmp    bl,cl
c000072a:	74 08                	je     c0000734 <strpbrk+0x21>
c000072c:	42                   	inc    edx
c000072d:	eb f3                	jmp    c0000722 <strpbrk+0xf>
c000072f:	40                   	inc    eax
c0000730:	eb e6                	jmp    c0000718 <strpbrk+0x5>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	c3                   	ret    

c0000736 <strtok>:
c0000736:	56                   	push   esi
c0000737:	53                   	push   ebx
c0000738:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000073c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000740:	85 db                	test   ebx,ebx
c0000742:	75 0e                	jne    c0000752 <strtok+0x1c>
c0000744:	8b 1d c8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0c8
c000074a:	85 db                	test   ebx,ebx
c000074c:	75 04                	jne    c0000752 <strtok+0x1c>
c000074e:	31 db                	xor    ebx,ebx
c0000750:	eb 2e                	jmp    c0000780 <strtok+0x4a>
c0000752:	56                   	push   esi
c0000753:	53                   	push   ebx
c0000754:	e8 ba ff ff ff       	call   c0000713 <strpbrk>
c0000759:	5a                   	pop    edx
c000075a:	a3 c8 a0 02 c0       	mov    ds:0xc002a0c8,eax
c000075f:	59                   	pop    ecx
c0000760:	a1 c8 a0 02 c0       	mov    eax,ds:0xc002a0c8
c0000765:	39 d8                	cmp    eax,ebx
c0000767:	75 07                	jne    c0000770 <strtok+0x3a>
c0000769:	43                   	inc    ebx
c000076a:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000076e:	eb e2                	jmp    c0000752 <strtok+0x1c>
c0000770:	85 c0                	test   eax,eax
c0000772:	74 da                	je     c000074e <strtok+0x18>
c0000774:	8d 50 01             	lea    edx,[eax+0x1]
c0000777:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000077a:	89 15 c8 a0 02 c0    	mov    DWORD PTR ds:0xc002a0c8,edx
c0000780:	89 d8                	mov    eax,ebx
c0000782:	5b                   	pop    ebx
c0000783:	5e                   	pop    esi
c0000784:	c3                   	ret    

c0000785 <strcpy>:
c0000785:	53                   	push   ebx
c0000786:	31 d2                	xor    edx,edx
c0000788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000078c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000790:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000793:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000796:	84 c9                	test   cl,cl
c0000798:	74 06                	je     c00007a0 <strcpy+0x1b>
c000079a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000079d:	42                   	inc    edx
c000079e:	eb ec                	jmp    c000078c <strcpy+0x7>
c00007a0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00007a3:	5b                   	pop    ebx
c00007a4:	c3                   	ret    

c00007a5 <strncpy>:
c00007a5:	56                   	push   esi
c00007a6:	53                   	push   ebx
c00007a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007af:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00007b3:	89 c3                	mov    ebx,eax
c00007b5:	85 c9                	test   ecx,ecx
c00007b7:	74 1a                	je     c00007d3 <strncpy+0x2e>
c00007b9:	46                   	inc    esi
c00007ba:	43                   	inc    ebx
c00007bb:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007be:	49                   	dec    ecx
c00007bf:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007c2:	84 d2                	test   dl,dl
c00007c4:	75 ef                	jne    c00007b5 <strncpy+0x10>
c00007c6:	31 d2                	xor    edx,edx
c00007c8:	39 d1                	cmp    ecx,edx
c00007ca:	74 07                	je     c00007d3 <strncpy+0x2e>
c00007cc:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007d0:	42                   	inc    edx
c00007d1:	eb f5                	jmp    c00007c8 <strncpy+0x23>
c00007d3:	5b                   	pop    ebx
c00007d4:	5e                   	pop    esi
c00007d5:	c3                   	ret    

c00007d6 <strcmp>:
c00007d6:	31 c9                	xor    ecx,ecx
c00007d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007e0:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007e4:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007e8:	38 d0                	cmp    al,dl
c00007ea:	75 08                	jne    c00007f4 <strcmp+0x1e>
c00007ec:	41                   	inc    ecx
c00007ed:	84 c0                	test   al,al
c00007ef:	75 e7                	jne    c00007d8 <strcmp+0x2>
c00007f1:	31 c0                	xor    eax,eax
c00007f3:	c3                   	ret    
c00007f4:	29 d0                	sub    eax,edx
c00007f6:	c3                   	ret    

c00007f7 <strchr>:
c00007f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007fb:	8a 10                	mov    dl,BYTE PTR [eax]
c00007fd:	84 d2                	test   dl,dl
c00007ff:	74 09                	je     c000080a <strchr+0x13>
c0000801:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000805:	74 05                	je     c000080c <strchr+0x15>
c0000807:	40                   	inc    eax
c0000808:	eb f1                	jmp    c00007fb <strchr+0x4>
c000080a:	31 c0                	xor    eax,eax
c000080c:	c3                   	ret    

c000080d <strncmp>:
c000080d:	56                   	push   esi
c000080e:	53                   	push   ebx
c000080f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000813:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000081b:	01 d6                	add    esi,edx
c000081d:	39 f2                	cmp    edx,esi
c000081f:	74 12                	je     c0000833 <strncmp+0x26>
c0000821:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000824:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000827:	38 c8                	cmp    al,cl
c0000829:	75 0c                	jne    c0000837 <strncmp+0x2a>
c000082b:	42                   	inc    edx
c000082c:	84 c0                	test   al,al
c000082e:	74 03                	je     c0000833 <strncmp+0x26>
c0000830:	43                   	inc    ebx
c0000831:	eb ea                	jmp    c000081d <strncmp+0x10>
c0000833:	31 c0                	xor    eax,eax
c0000835:	eb 02                	jmp    c0000839 <strncmp+0x2c>
c0000837:	29 c8                	sub    eax,ecx
c0000839:	5b                   	pop    ebx
c000083a:	5e                   	pop    esi
c000083b:	c3                   	ret    

c000083c <strcat>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	89 c1                	mov    ecx,eax
c0000843:	8d 51 01             	lea    edx,[ecx+0x1]
c0000846:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000084a:	74 04                	je     c0000850 <strcat+0x14>
c000084c:	89 d1                	mov    ecx,edx
c000084e:	eb f3                	jmp    c0000843 <strcat+0x7>
c0000850:	31 d2                	xor    edx,edx
c0000852:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000856:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000859:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000085c:	42                   	inc    edx
c000085d:	84 db                	test   bl,bl
c000085f:	75 f1                	jne    c0000852 <strcat+0x16>
c0000861:	5b                   	pop    ebx
c0000862:	c3                   	ret    

c0000863 <strncat>:
c0000863:	56                   	push   esi
c0000864:	53                   	push   ebx
c0000865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000869:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000086d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000871:	89 c2                	mov    edx,eax
c0000873:	85 db                	test   ebx,ebx
c0000875:	74 23                	je     c000089a <strncat+0x37>
c0000877:	8d 72 01             	lea    esi,[edx+0x1]
c000087a:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000087e:	74 04                	je     c0000884 <strncat+0x21>
c0000880:	89 f2                	mov    edx,esi
c0000882:	eb f3                	jmp    c0000877 <strncat+0x14>
c0000884:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000887:	41                   	inc    ecx
c0000888:	42                   	inc    edx
c0000889:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000088c:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000088f:	84 db                	test   bl,bl
c0000891:	74 07                	je     c000089a <strncat+0x37>
c0000893:	39 f1                	cmp    ecx,esi
c0000895:	75 f0                	jne    c0000887 <strncat+0x24>
c0000897:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000089a:	5b                   	pop    ebx
c000089b:	5e                   	pop    esi
c000089c:	c3                   	ret    

c000089d <strstr>:
c000089d:	57                   	push   edi
c000089e:	56                   	push   esi
c000089f:	53                   	push   ebx
c00008a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008a8:	57                   	push   edi
c00008a9:	e8 55 fe ff ff       	call   c0000703 <strlen>
c00008ae:	59                   	pop    ecx
c00008af:	89 c6                	mov    esi,eax
c00008b1:	85 c0                	test   eax,eax
c00008b3:	74 1f                	je     c00008d4 <strstr+0x37>
c00008b5:	53                   	push   ebx
c00008b6:	e8 48 fe ff ff       	call   c0000703 <strlen>
c00008bb:	5a                   	pop    edx
c00008bc:	39 f0                	cmp    eax,esi
c00008be:	72 12                	jb     c00008d2 <strstr+0x35>
c00008c0:	56                   	push   esi
c00008c1:	57                   	push   edi
c00008c2:	53                   	push   ebx
c00008c3:	e8 85 fd ff ff       	call   c000064d <memcmp>
c00008c8:	83 c4 0c             	add    esp,0xc
c00008cb:	85 c0                	test   eax,eax
c00008cd:	74 05                	je     c00008d4 <strstr+0x37>
c00008cf:	43                   	inc    ebx
c00008d0:	eb e3                	jmp    c00008b5 <strstr+0x18>
c00008d2:	31 db                	xor    ebx,ebx
c00008d4:	89 d8                	mov    eax,ebx
c00008d6:	5b                   	pop    ebx
c00008d7:	5e                   	pop    esi
c00008d8:	5f                   	pop    edi
c00008d9:	c3                   	ret    

c00008da <toupper>:
c00008da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008de:	0f b6 d0             	movzx  edx,al
c00008e1:	f6 82 40 5b 02 c0 02 	test   BYTE PTR [edx-0x3ffda4c0],0x2
c00008e8:	74 03                	je     c00008ed <toupper+0x13>
c00008ea:	83 e8 20             	sub    eax,0x20
c00008ed:	c3                   	ret    

c00008ee <tolower>:
c00008ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f2:	0f b6 d0             	movzx  edx,al
c00008f5:	f6 82 40 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda4c0],0x1
c00008fc:	74 03                	je     c0000901 <tolower+0x13>
c00008fe:	83 c0 20             	add    eax,0x20
c0000901:	c3                   	ret    

c0000902 <simple_strtoul>:
c0000902:	55                   	push   ebp
c0000903:	57                   	push   edi
c0000904:	56                   	push   esi
c0000905:	53                   	push   ebx
c0000906:	83 ec 08             	sub    esp,0x8
c0000909:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000090d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000911:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000914:	f6 82 40 5b 02 c0 08 	test   BYTE PTR [edx-0x3ffda4c0],0x8
c000091b:	74 03                	je     c0000920 <simple_strtoul+0x1e>
c000091d:	41                   	inc    ecx
c000091e:	eb f1                	jmp    c0000911 <simple_strtoul+0xf>
c0000920:	80 fa 09             	cmp    dl,0x9
c0000923:	74 f8                	je     c000091d <simple_strtoul+0x1b>
c0000925:	80 fa 2d             	cmp    dl,0x2d
c0000928:	75 0b                	jne    c0000935 <simple_strtoul+0x33>
c000092a:	41                   	inc    ecx
c000092b:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000933:	eb 0e                	jmp    c0000943 <simple_strtoul+0x41>
c0000935:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000093d:	80 fa 2b             	cmp    dl,0x2b
c0000940:	75 01                	jne    c0000943 <simple_strtoul+0x41>
c0000942:	41                   	inc    ecx
c0000943:	85 f6                	test   esi,esi
c0000945:	75 22                	jne    c0000969 <simple_strtoul+0x67>
c0000947:	be 0a 00 00 00       	mov    esi,0xa
c000094c:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000094f:	75 5a                	jne    c00009ab <simple_strtoul+0xa9>
c0000951:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000955:	50                   	push   eax
c0000956:	e8 93 ff ff ff       	call   c00008ee <tolower>
c000095b:	5a                   	pop    edx
c000095c:	83 f8 78             	cmp    eax,0x78
c000095f:	74 03                	je     c0000964 <simple_strtoul+0x62>
c0000961:	41                   	inc    ecx
c0000962:	eb 16                	jmp    c000097a <simple_strtoul+0x78>
c0000964:	83 c1 02             	add    ecx,0x2
c0000967:	eb 22                	jmp    c000098b <simple_strtoul+0x89>
c0000969:	8d 46 fe             	lea    eax,[esi-0x2]
c000096c:	83 f8 22             	cmp    eax,0x22
c000096f:	0f 87 b7 00 00 00    	ja     c0000a2c <simple_strtoul+0x12a>
c0000975:	83 fe 08             	cmp    esi,0x8
c0000978:	75 0c                	jne    c0000986 <simple_strtoul+0x84>
c000097a:	be 08 00 00 00       	mov    esi,0x8
c000097f:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000982:	75 27                	jne    c00009ab <simple_strtoul+0xa9>
c0000984:	eb 1f                	jmp    c00009a5 <simple_strtoul+0xa3>
c0000986:	83 fe 10             	cmp    esi,0x10
c0000989:	75 20                	jne    c00009ab <simple_strtoul+0xa9>
c000098b:	be 10 00 00 00       	mov    esi,0x10
c0000990:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000993:	75 16                	jne    c00009ab <simple_strtoul+0xa9>
c0000995:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000999:	50                   	push   eax
c000099a:	e8 4f ff ff ff       	call   c00008ee <tolower>
c000099f:	5d                   	pop    ebp
c00009a0:	83 f8 78             	cmp    eax,0x78
c00009a3:	74 03                	je     c00009a8 <simple_strtoul+0xa6>
c00009a5:	41                   	inc    ecx
c00009a6:	eb 03                	jmp    c00009ab <simple_strtoul+0xa9>
c00009a8:	83 c1 02             	add    ecx,0x2
c00009ab:	31 ed                	xor    ebp,ebp
c00009ad:	31 db                	xor    ebx,ebx
c00009af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009b6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009b8:	84 d2                	test   dl,dl
c00009ba:	74 27                	je     c00009e3 <simple_strtoul+0xe1>
c00009bc:	0f b6 fa             	movzx  edi,dl
c00009bf:	f6 87 40 5b 02 c0 04 	test   BYTE PTR [edi-0x3ffda4c0],0x4
c00009c6:	74 05                	je     c00009cd <simple_strtoul+0xcb>
c00009c8:	83 ef 30             	sub    edi,0x30
c00009cb:	eb 22                	jmp    c00009ef <simple_strtoul+0xed>
c00009cd:	0f be d2             	movsx  edx,dl
c00009d0:	52                   	push   edx
c00009d1:	e8 04 ff ff ff       	call   c00008da <toupper>
c00009d6:	5f                   	pop    edi
c00009d7:	0f b6 d0             	movzx  edx,al
c00009da:	f6 82 40 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda4c0],0x1
c00009e1:	75 09                	jne    c00009ec <simple_strtoul+0xea>
c00009e3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009e8:	75 2d                	jne    c0000a17 <simple_strtoul+0x115>
c00009ea:	eb 57                	jmp    c0000a43 <simple_strtoul+0x141>
c00009ec:	8d 78 c9             	lea    edi,[eax-0x37]
c00009ef:	39 f7                	cmp    edi,esi
c00009f1:	73 f0                	jae    c00009e3 <simple_strtoul+0xe1>
c00009f3:	31 d2                	xor    edx,edx
c00009f5:	89 f8                	mov    eax,edi
c00009f7:	f7 d0                	not    eax
c00009f9:	f7 f6                	div    esi
c00009fb:	39 d8                	cmp    eax,ebx
c00009fd:	72 0e                	jb     c0000a0d <simple_strtoul+0x10b>
c00009ff:	0f af de             	imul   ebx,esi
c0000a02:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a09:	01 fb                	add    ebx,edi
c0000a0b:	eb 07                	jmp    c0000a14 <simple_strtoul+0x112>
c0000a0d:	bd 01 00 00 00       	mov    ebp,0x1
c0000a12:	31 db                	xor    ebx,ebx
c0000a14:	41                   	inc    ecx
c0000a15:	eb 9f                	jmp    c00009b6 <simple_strtoul+0xb4>
c0000a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1a:	09 d8                	or     eax,ebx
c0000a1c:	75 1f                	jne    c0000a3d <simple_strtoul+0x13b>
c0000a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a22:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a26:	31 db                	xor    ebx,ebx
c0000a28:	89 38                	mov    DWORD PTR [eax],edi
c0000a2a:	eb 17                	jmp    c0000a43 <simple_strtoul+0x141>
c0000a2c:	31 db                	xor    ebx,ebx
c0000a2e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a33:	74 14                	je     c0000a49 <simple_strtoul+0x147>
c0000a35:	31 ed                	xor    ebp,ebp
c0000a37:	85 c9                	test   ecx,ecx
c0000a39:	75 e3                	jne    c0000a1e <simple_strtoul+0x11c>
c0000a3b:	31 db                	xor    ebx,ebx
c0000a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a41:	89 08                	mov    DWORD PTR [eax],ecx
c0000a43:	4d                   	dec    ebp
c0000a44:	75 03                	jne    c0000a49 <simple_strtoul+0x147>
c0000a46:	83 cb ff             	or     ebx,0xffffffff
c0000a49:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a4e:	75 02                	jne    c0000a52 <simple_strtoul+0x150>
c0000a50:	f7 db                	neg    ebx
c0000a52:	83 c4 08             	add    esp,0x8
c0000a55:	89 d8                	mov    eax,ebx
c0000a57:	5b                   	pop    ebx
c0000a58:	5e                   	pop    esi
c0000a59:	5f                   	pop    edi
c0000a5a:	5d                   	pop    ebp
c0000a5b:	c3                   	ret    

c0000a5c <largebin_index>:
c0000a5c:	89 c2                	mov    edx,eax
c0000a5e:	c1 ea 08             	shr    edx,0x8
c0000a61:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a67:	77 10                	ja     c0000a79 <largebin_index+0x1d>
c0000a69:	0f bd d2             	bsr    edx,edx
c0000a6c:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a6f:	d3 e8                	shr    eax,cl
c0000a71:	83 e0 03             	and    eax,0x3
c0000a74:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a78:	c3                   	ret    
c0000a79:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a7e:	c3                   	ret    

c0000a7f <malloc_init_state>:
c0000a7f:	53                   	push   ebx
c0000a80:	8d 50 34             	lea    edx,[eax+0x34]
c0000a83:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a89:	89 d1                	mov    ecx,edx
c0000a8b:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a8e:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a91:	83 c2 08             	add    edx,0x8
c0000a94:	39 da                	cmp    edx,ebx
c0000a96:	75 f3                	jne    c0000a8b <malloc_init_state+0xc>
c0000a98:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a9a:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000aa4:	83 e2 03             	and    edx,0x3
c0000aa7:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ab1:	83 ca 48             	or     edx,0x48
c0000ab4:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000abe:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ac8:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000acf:	89 10                	mov    DWORD PTR [eax],edx
c0000ad1:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ad4:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ade:	5b                   	pop    ebx
c0000adf:	c3                   	ret    

c0000ae0 <malloc_consolidate>:
c0000ae0:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ae2:	85 d2                	test   edx,edx
c0000ae4:	0f 84 d8 00 00 00    	je     c0000bc2 <malloc_consolidate+0xe2>
c0000aea:	55                   	push   ebp
c0000aeb:	83 e2 fd             	and    edx,0xfffffffd
c0000aee:	57                   	push   edi
c0000aef:	89 c5                	mov    ebp,eax
c0000af1:	56                   	push   esi
c0000af2:	8d 78 34             	lea    edi,[eax+0x34]
c0000af5:	53                   	push   ebx
c0000af6:	83 ec 10             	sub    esp,0x10
c0000af9:	89 10                	mov    DWORD PTR [eax],edx
c0000afb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aff:	c1 ea 03             	shr    edx,0x3
c0000b02:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000b06:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000b0a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000b0d:	85 d2                	test   edx,edx
c0000b0f:	0f 84 98 00 00 00    	je     c0000bad <malloc_consolidate+0xcd>
c0000b15:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b1c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b1f:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b22:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b26:	89 f9                	mov    ecx,edi
c0000b28:	83 e1 fe             	and    ecx,0xfffffffe
c0000b2b:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b2e:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b31:	83 e3 fc             	and    ebx,0xfffffffc
c0000b34:	83 e7 01             	and    edi,0x1
c0000b37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b3a:	75 14                	jne    c0000b50 <malloc_consolidate+0x70>
c0000b3c:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b3e:	29 fa                	sub    edx,edi
c0000b40:	01 f9                	add    ecx,edi
c0000b42:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b45:	89 fb                	mov    ebx,edi
c0000b47:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b4a:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b4d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b50:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b53:	74 40                	je     c0000b95 <malloc_consolidate+0xb5>
c0000b55:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b58:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b5b:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b5f:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b62:	83 e7 01             	and    edi,0x1
c0000b65:	75 0e                	jne    c0000b75 <malloc_consolidate+0x95>
c0000b67:	01 d9                	add    ecx,ebx
c0000b69:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b6c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b6f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b72:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b75:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b78:	89 ce                	mov    esi,ecx
c0000b7a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b7d:	83 ce 01             	or     esi,0x1
c0000b80:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b83:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b86:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b89:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b8d:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b90:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b93:	eb 0c                	jmp    c0000ba1 <malloc_consolidate+0xc1>
c0000b95:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b98:	83 c9 01             	or     ecx,0x1
c0000b9b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b9e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ba1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ba5:	85 d2                	test   edx,edx
c0000ba7:	0f 85 6f ff ff ff    	jne    c0000b1c <malloc_consolidate+0x3c>
c0000bad:	83 c5 04             	add    ebp,0x4
c0000bb0:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000bb4:	0f 85 50 ff ff ff    	jne    c0000b0a <malloc_consolidate+0x2a>
c0000bba:	83 c4 10             	add    esp,0x10
c0000bbd:	5b                   	pop    ebx
c0000bbe:	5e                   	pop    esi
c0000bbf:	5f                   	pop    edi
c0000bc0:	5d                   	pop    ebp
c0000bc1:	c3                   	ret    
c0000bc2:	e9 b8 fe ff ff       	jmp    c0000a7f <malloc_init_state>

c0000bc7 <dlfree>:
c0000bc7:	57                   	push   edi
c0000bc8:	56                   	push   esi
c0000bc9:	53                   	push   ebx
c0000bca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bce:	85 db                	test   ebx,ebx
c0000bd0:	0f 84 e2 00 00 00    	je     c0000cb8 <dlfree+0xf1>
c0000bd6:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bd9:	8b 0d e0 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a0e0
c0000bdf:	89 f0                	mov    eax,esi
c0000be1:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000be4:	83 e0 fc             	and    eax,0xfffffffc
c0000be7:	39 c1                	cmp    ecx,eax
c0000be9:	72 24                	jb     c0000c0f <dlfree+0x48>
c0000beb:	83 c9 03             	or     ecx,0x3
c0000bee:	c1 e8 03             	shr    eax,0x3
c0000bf1:	89 0d e0 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e0,ecx
c0000bf7:	83 e8 02             	sub    eax,0x2
c0000bfa:	8b 0c 85 e4 a0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5f1c]
c0000c01:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000c03:	89 14 85 e4 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f1c],edx
c0000c0a:	e9 a9 00 00 00       	jmp    c0000cb8 <dlfree+0xf1>
c0000c0f:	83 e6 02             	and    esi,0x2
c0000c12:	0f 85 a0 00 00 00    	jne    c0000cb8 <dlfree+0xf1>
c0000c18:	83 c9 01             	or     ecx,0x1
c0000c1b:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c1e:	89 0d e0 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e0,ecx
c0000c24:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c27:	83 e1 fc             	and    ecx,0xfffffffc
c0000c2a:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c2e:	75 13                	jne    c0000c43 <dlfree+0x7c>
c0000c30:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c33:	29 da                	sub    edx,ebx
c0000c35:	01 d8                	add    eax,ebx
c0000c37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c3d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c40:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c43:	39 35 0c a1 02 c0    	cmp    DWORD PTR ds:0xc002a10c,esi
c0000c49:	74 40                	je     c0000c8b <dlfree+0xc4>
c0000c4b:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c4f:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c52:	80 e3 01             	and    bl,0x1
c0000c55:	75 0e                	jne    c0000c65 <dlfree+0x9e>
c0000c57:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c5a:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c5d:	01 c8                	add    eax,ecx
c0000c5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c65:	8b 0d 1c a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a11c
c0000c6b:	c7 42 0c 14 a1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a114
c0000c72:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c75:	89 15 1c a1 02 c0    	mov    DWORD PTR ds:0xc002a11c,edx
c0000c7b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c7e:	89 c1                	mov    ecx,eax
c0000c80:	83 c9 01             	or     ecx,0x1
c0000c83:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c86:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c89:	eb 10                	jmp    c0000c9b <dlfree+0xd4>
c0000c8b:	01 c8                	add    eax,ecx
c0000c8d:	89 c1                	mov    ecx,eax
c0000c8f:	83 c9 01             	or     ecx,0x1
c0000c92:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c95:	89 15 0c a1 02 c0    	mov    DWORD PTR ds:0xc002a10c,edx
c0000c9b:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ca0:	76 16                	jbe    c0000cb8 <dlfree+0xf1>
c0000ca2:	f6 05 e0 a0 02 c0 02 	test   BYTE PTR ds:0xc002a0e0,0x2
c0000ca9:	74 0d                	je     c0000cb8 <dlfree+0xf1>
c0000cab:	5b                   	pop    ebx
c0000cac:	b8 e0 a0 02 c0       	mov    eax,0xc002a0e0
c0000cb1:	5e                   	pop    esi
c0000cb2:	5f                   	pop    edi
c0000cb3:	e9 28 fe ff ff       	jmp    c0000ae0 <malloc_consolidate>
c0000cb8:	5b                   	pop    ebx
c0000cb9:	5e                   	pop    esi
c0000cba:	5f                   	pop    edi
c0000cbb:	c3                   	ret    

c0000cbc <sYSMALLOc>:
c0000cbc:	55                   	push   ebp
c0000cbd:	57                   	push   edi
c0000cbe:	56                   	push   esi
c0000cbf:	53                   	push   ebx
c0000cc0:	89 d3                	mov    ebx,edx
c0000cc2:	83 ec 2c             	sub    esp,0x2c
c0000cc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000cc9:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ccf:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cd2:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cd9:	74 1f                	je     c0000cfa <sYSMALLOc+0x3e>
c0000cdb:	89 d8                	mov    eax,ebx
c0000cdd:	e8 fe fd ff ff       	call   c0000ae0 <malloc_consolidate>
c0000ce2:	83 ec 0c             	sub    esp,0xc
c0000ce5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ce9:	83 e8 07             	sub    eax,0x7
c0000cec:	50                   	push   eax
c0000ced:	e8 30 02 00 00       	call   c0000f22 <dlmalloc>
c0000cf2:	83 c4 10             	add    esp,0x10
c0000cf5:	e9 20 02 00 00       	jmp    c0000f1a <sYSMALLOc+0x25e>
c0000cfa:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cfd:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000d03:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000d06:	83 e0 fc             	and    eax,0xfffffffc
c0000d09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000d0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000d11:	83 c0 10             	add    eax,0x10
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000d1a:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d21:	74 04                	je     c0000d27 <sYSMALLOc+0x6b>
c0000d23:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d27:	f7 da                	neg    edx
c0000d29:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d2d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d31:	21 d1                	and    ecx,edx
c0000d33:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d37:	7f 07                	jg     c0000d40 <sYSMALLOc+0x84>
c0000d39:	31 c0                	xor    eax,eax
c0000d3b:	e9 da 01 00 00       	jmp    c0000f1a <sYSMALLOc+0x25e>
c0000d40:	83 ec 0c             	sub    esp,0xc
c0000d43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d47:	e8 61 e2 00 00       	call   c000efad <sbrk>
c0000d4c:	83 c4 10             	add    esp,0x10
c0000d4f:	89 c6                	mov    esi,eax
c0000d51:	83 f8 ff             	cmp    eax,0xffffffff
c0000d54:	74 e3                	je     c0000d39 <sYSMALLOc+0x7d>
c0000d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d5a:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d5e:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d61:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d67:	39 f1                	cmp    ecx,esi
c0000d69:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d6f:	75 13                	jne    c0000d84 <sYSMALLOc+0xc8>
c0000d71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d75:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d79:	83 c8 01             	or     eax,0x1
c0000d7c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d7f:	e9 3e 01 00 00       	jmp    c0000ec2 <sYSMALLOc+0x206>
c0000d84:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d8a:	88 d0                	mov    al,dl
c0000d8c:	83 e0 01             	and    eax,0x1
c0000d8f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d94:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d98:	0f 95 c0             	setne  al
c0000d9b:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d9f:	39 f1                	cmp    ecx,esi
c0000da1:	76 12                	jbe    c0000db5 <sYSMALLOc+0xf9>
c0000da3:	84 c0                	test   al,al
c0000da5:	74 0e                	je     c0000db5 <sYSMALLOc+0xf9>
c0000da7:	83 e2 fe             	and    edx,0xfffffffe
c0000daa:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000db0:	e9 83 00 00 00       	jmp    c0000e38 <sYSMALLOc+0x17c>
c0000db5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000dba:	74 7c                	je     c0000e38 <sYSMALLOc+0x17c>
c0000dbc:	84 c0                	test   al,al
c0000dbe:	74 0c                	je     c0000dcc <sYSMALLOc+0x110>
c0000dc0:	89 f0                	mov    eax,esi
c0000dc2:	29 c8                	sub    eax,ecx
c0000dc4:	01 e8                	add    eax,ebp
c0000dc6:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000dcc:	89 f2                	mov    edx,esi
c0000dce:	83 e2 07             	and    edx,0x7
c0000dd1:	74 0c                	je     c0000ddf <sYSMALLOc+0x123>
c0000dd3:	b8 08 00 00 00       	mov    eax,0x8
c0000dd8:	29 d0                	sub    eax,edx
c0000dda:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ddd:	eb 04                	jmp    c0000de3 <sYSMALLOc+0x127>
c0000ddf:	89 f5                	mov    ebp,esi
c0000de1:	31 c0                	xor    eax,eax
c0000de3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000de7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000deb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000def:	01 c1                	add    ecx,eax
c0000df1:	83 ec 0c             	sub    esp,0xc
c0000df4:	01 f1                	add    ecx,esi
c0000df6:	01 ca                	add    edx,ecx
c0000df8:	29 c8                	sub    eax,ecx
c0000dfa:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000dfe:	01 c2                	add    edx,eax
c0000e00:	52                   	push   edx
c0000e01:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000e05:	e8 a3 e1 00 00       	call   c000efad <sbrk>
c0000e0a:	83 c4 10             	add    esp,0x10
c0000e0d:	83 f8 ff             	cmp    eax,0xffffffff
c0000e10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000e14:	75 0f                	jne    c0000e25 <sYSMALLOc+0x169>
c0000e16:	83 ec 0c             	sub    esp,0xc
c0000e19:	6a 00                	push   0x0
c0000e1b:	e8 8d e1 00 00       	call   c000efad <sbrk>
c0000e20:	83 c4 10             	add    esp,0x10
c0000e23:	eb 30                	jmp    c0000e55 <sYSMALLOc+0x199>
c0000e25:	39 c6                	cmp    esi,eax
c0000e27:	76 33                	jbe    c0000e5c <sYSMALLOc+0x1a0>
c0000e29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e2d:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e34:	01 f0                	add    eax,esi
c0000e36:	eb 1d                	jmp    c0000e55 <sYSMALLOc+0x199>
c0000e38:	83 ec 0c             	sub    esp,0xc
c0000e3b:	89 f5                	mov    ebp,esi
c0000e3d:	6a 00                	push   0x0
c0000e3f:	e8 69 e1 00 00       	call   c000efad <sbrk>
c0000e44:	89 c2                	mov    edx,eax
c0000e46:	29 f2                	sub    edx,esi
c0000e48:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e4c:	83 c4 10             	add    esp,0x10
c0000e4f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e55:	31 d2                	xor    edx,edx
c0000e57:	83 f8 ff             	cmp    eax,0xffffffff
c0000e5a:	74 66                	je     c0000ec2 <sYSMALLOc+0x206>
c0000e5c:	29 e8                	sub    eax,ebp
c0000e5e:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e61:	01 d0                	add    eax,edx
c0000e63:	83 c8 01             	or     eax,0x1
c0000e66:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e69:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e6f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e74:	74 4c                	je     c0000ec2 <sYSMALLOc+0x206>
c0000e76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 e8 0c             	sub    eax,0xc
c0000e7d:	83 e0 f8             	and    eax,0xfffffff8
c0000e80:	89 c2                	mov    edx,eax
c0000e82:	83 ca 01             	or     edx,0x1
c0000e85:	83 f8 0f             	cmp    eax,0xf
c0000e88:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e8b:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e93:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e9b:	76 25                	jbe    c0000ec2 <sYSMALLOc+0x206>
c0000e9d:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000ea3:	83 ec 0c             	sub    esp,0xc
c0000ea6:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000eb0:	83 c7 08             	add    edi,0x8
c0000eb3:	57                   	push   edi
c0000eb4:	e8 0e fd ff ff       	call   c0000bc7 <dlfree>
c0000eb9:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ec8:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ece:	73 06                	jae    c0000ed6 <sYSMALLOc+0x21a>
c0000ed0:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000ed6:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000edc:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ee2:	73 06                	jae    c0000eea <sYSMALLOc+0x22e>
c0000ee4:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000eea:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000eed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ef0:	83 e2 fc             	and    edx,0xfffffffc
c0000ef3:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ef7:	0f 82 3c fe ff ff    	jb     c0000d39 <sYSMALLOc+0x7d>
c0000efd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000f01:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000f04:	29 fa                	sub    edx,edi
c0000f06:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000f09:	83 ca 01             	or     edx,0x1
c0000f0c:	89 fb                	mov    ebx,edi
c0000f0e:	83 c0 08             	add    eax,0x8
c0000f11:	83 cb 01             	or     ebx,0x1
c0000f14:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f17:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f1a:	83 c4 2c             	add    esp,0x2c
c0000f1d:	5b                   	pop    ebx
c0000f1e:	5e                   	pop    esi
c0000f1f:	5f                   	pop    edi
c0000f20:	5d                   	pop    ebp
c0000f21:	c3                   	ret    

c0000f22 <dlmalloc>:
c0000f22:	55                   	push   ebp
c0000f23:	57                   	push   edi
c0000f24:	56                   	push   esi
c0000f25:	53                   	push   ebx
c0000f26:	83 ec 1c             	sub    esp,0x1c
c0000f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f2d:	83 f8 df             	cmp    eax,0xffffffdf
c0000f30:	0f 87 70 03 00 00    	ja     c00012a6 <dlmalloc+0x384>
c0000f36:	83 c0 0b             	add    eax,0xb
c0000f39:	be 10 00 00 00       	mov    esi,0x10
c0000f3e:	83 f8 0f             	cmp    eax,0xf
c0000f41:	76 05                	jbe    c0000f48 <dlmalloc+0x26>
c0000f43:	83 e0 f8             	and    eax,0xfffffff8
c0000f46:	89 c6                	mov    esi,eax
c0000f48:	8b 3d e0 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a0e0
c0000f4e:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f54:	75 17                	jne    c0000f6d <dlmalloc+0x4b>
c0000f56:	85 ff                	test   edi,edi
c0000f58:	0f 85 05 03 00 00    	jne    c0001263 <dlmalloc+0x341>
c0000f5e:	b8 e0 a0 02 c0       	mov    eax,0xc002a0e0
c0000f63:	e8 78 fb ff ff       	call   c0000ae0 <malloc_consolidate>
c0000f68:	e9 f6 02 00 00       	jmp    c0001263 <dlmalloc+0x341>
c0000f6d:	39 f7                	cmp    edi,esi
c0000f6f:	72 1f                	jb     c0000f90 <dlmalloc+0x6e>
c0000f71:	89 f2                	mov    edx,esi
c0000f73:	c1 ea 03             	shr    edx,0x3
c0000f76:	83 ea 02             	sub    edx,0x2
c0000f79:	8b 04 95 e4 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5f1c]
c0000f80:	85 c0                	test   eax,eax
c0000f82:	74 0c                	je     c0000f90 <dlmalloc+0x6e>
c0000f84:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f87:	89 0c 95 e4 a0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5f1c],ecx
c0000f8e:	eb 30                	jmp    c0000fc0 <dlmalloc+0x9e>
c0000f90:	89 f0                	mov    eax,esi
c0000f92:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f98:	77 2e                	ja     c0000fc8 <dlmalloc+0xa6>
c0000f9a:	c1 e8 03             	shr    eax,0x3
c0000f9d:	8d 14 c5 14 a1 02 c0 	lea    edx,[eax*8-0x3ffd5eec]
c0000fa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fa8:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000fab:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000fae:	39 c3                	cmp    ebx,eax
c0000fb0:	74 2e                	je     c0000fe0 <dlmalloc+0xbe>
c0000fb2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000fb5:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fba:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fbd:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fc0:	83 c0 08             	add    eax,0x8
c0000fc3:	e9 e0 02 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0000fc8:	e8 8f fa ff ff       	call   c0000a5c <largebin_index>
c0000fcd:	83 e7 02             	and    edi,0x2
c0000fd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fd4:	74 0a                	je     c0000fe0 <dlmalloc+0xbe>
c0000fd6:	b8 e0 a0 02 c0       	mov    eax,0xc002a0e0
c0000fdb:	e8 00 fb ff ff       	call   c0000ae0 <malloc_consolidate>
c0000fe0:	8d 46 10             	lea    eax,[esi+0x10]
c0000fe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fe7:	8b 1d 20 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a120
c0000fed:	81 fb 14 a1 02 c0    	cmp    ebx,0xc002a114
c0000ff3:	0f 84 13 01 00 00    	je     c000110c <dlmalloc+0x1ea>
c0000ff9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000ffc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fff:	83 e7 fc             	and    edi,0xfffffffc
c0001002:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001008:	77 4c                	ja     c0001056 <dlmalloc+0x134>
c000100a:	3d 14 a1 02 c0       	cmp    eax,0xc002a114
c000100f:	75 45                	jne    c0001056 <dlmalloc+0x134>
c0001011:	39 1d 10 a1 02 c0    	cmp    DWORD PTR ds:0xc002a110,ebx
c0001017:	75 3d                	jne    c0001056 <dlmalloc+0x134>
c0001019:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000101d:	73 37                	jae    c0001056 <dlmalloc+0x134>
c000101f:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001022:	89 fa                	mov    edx,edi
c0001024:	a3 1c a1 02 c0       	mov    ds:0xc002a11c,eax
c0001029:	a3 20 a1 02 c0       	mov    ds:0xc002a120,eax
c000102e:	a3 10 a1 02 c0       	mov    ds:0xc002a110,eax
c0001033:	29 f2                	sub    edx,esi
c0001035:	c7 40 08 14 a1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a114
c000103c:	c7 40 0c 14 a1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a114
c0001043:	83 ce 01             	or     esi,0x1
c0001046:	89 d1                	mov    ecx,edx
c0001048:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000104b:	83 c9 01             	or     ecx,0x1
c000104e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001051:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001054:	eb 15                	jmp    c000106b <dlmalloc+0x149>
c0001056:	a3 20 a1 02 c0       	mov    ds:0xc002a120,eax
c000105b:	39 fe                	cmp    esi,edi
c000105d:	c7 40 08 14 a1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a114
c0001064:	75 0d                	jne    c0001073 <dlmalloc+0x151>
c0001066:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000106b:	8d 43 08             	lea    eax,[ebx+0x8]
c000106e:	e9 35 02 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001073:	89 f8                	mov    eax,edi
c0001075:	81 ff ff 00 00 00    	cmp    edi,0xff
c000107b:	77 19                	ja     c0001096 <dlmalloc+0x174>
c000107d:	c1 e8 03             	shr    eax,0x3
c0001080:	8d 14 00             	lea    edx,[eax+eax*1]
c0001083:	83 c2 0d             	add    edx,0xd
c0001086:	8d 2c 95 d8 a0 02 c0 	lea    ebp,[edx*4-0x3ffd5f28]
c000108d:	8b 14 95 e0 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5f20]
c0001094:	eb 46                	jmp    c00010dc <dlmalloc+0x1ba>
c0001096:	e8 c1 f9 ff ff       	call   c0000a5c <largebin_index>
c000109b:	8d 14 00             	lea    edx,[eax+eax*1]
c000109e:	83 c2 0d             	add    edx,0xd
c00010a1:	8d 0c 95 e0 a0 02 c0 	lea    ecx,[edx*4-0x3ffd5f20]
c00010a8:	8b 14 95 e0 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5f20]
c00010af:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00010b2:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00010b6:	89 d5                	mov    ebp,edx
c00010b8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010bc:	74 1e                	je     c00010dc <dlmalloc+0x1ba>
c00010be:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010c1:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010c4:	77 12                	ja     c00010d8 <dlmalloc+0x1b6>
c00010c6:	83 cf 01             	or     edi,0x1
c00010c9:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010cc:	76 05                	jbe    c00010d3 <dlmalloc+0x1b1>
c00010ce:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010d1:	eb f6                	jmp    c00010c9 <dlmalloc+0x1a7>
c00010d3:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010d6:	eb 04                	jmp    c00010dc <dlmalloc+0x1ba>
c00010d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010dc:	89 c7                	mov    edi,eax
c00010de:	88 c1                	mov    cl,al
c00010e0:	c1 ff 05             	sar    edi,0x5
c00010e3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010e7:	bf 01 00 00 00       	mov    edi,0x1
c00010ec:	d3 e7                	shl    edi,cl
c00010ee:	89 f8                	mov    eax,edi
c00010f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010f4:	09 04 bd 14 a4 02 c0 	or     DWORD PTR [edi*4-0x3ffd5bec],eax
c00010fb:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010fe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001101:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001104:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001107:	e9 db fe ff ff       	jmp    c0000fe7 <dlmalloc+0xc5>
c000110c:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001112:	76 78                	jbe    c000118c <dlmalloc+0x26a>
c0001114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001118:	8d 04 c5 14 a1 02 c0 	lea    eax,[eax*8-0x3ffd5eec]
c000111f:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001122:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001125:	39 ca                	cmp    edx,ecx
c0001127:	74 63                	je     c000118c <dlmalloc+0x26a>
c0001129:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000112c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000112f:	83 e3 fc             	and    ebx,0xfffffffc
c0001132:	39 de                	cmp    esi,ebx
c0001134:	77 52                	ja     c0001188 <dlmalloc+0x266>
c0001136:	89 df                	mov    edi,ebx
c0001138:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000113b:	29 f7                	sub    edi,esi
c000113d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001140:	01 d3                	add    ebx,edx
c0001142:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001145:	83 ff 0f             	cmp    edi,0xf
c0001148:	8d 42 08             	lea    eax,[edx+0x8]
c000114b:	77 09                	ja     c0001156 <dlmalloc+0x234>
c000114d:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001151:	e9 52 01 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001156:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001159:	83 ce 01             	or     esi,0x1
c000115c:	89 0d 1c a1 02 c0    	mov    DWORD PTR ds:0xc002a11c,ecx
c0001162:	89 0d 20 a1 02 c0    	mov    DWORD PTR ds:0xc002a120,ecx
c0001168:	c7 41 08 14 a1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a114
c000116f:	c7 41 0c 14 a1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a114
c0001176:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001179:	89 fa                	mov    edx,edi
c000117b:	83 ca 01             	or     edx,0x1
c000117e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001181:	89 3b                	mov    DWORD PTR [ebx],edi
c0001183:	e9 20 01 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001188:	89 c2                	mov    edx,eax
c000118a:	eb 99                	jmp    c0001125 <dlmalloc+0x203>
c000118c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001190:	b8 01 00 00 00       	mov    eax,0x1
c0001195:	41                   	inc    ecx
c0001196:	89 cb                	mov    ebx,ecx
c0001198:	8d 14 cd 0c a1 02 c0 	lea    edx,[ecx*8-0x3ffd5ef4]
c000119f:	c1 eb 05             	shr    ebx,0x5
c00011a2:	d3 e0                	shl    eax,cl
c00011a4:	8b 3c 9d 14 a4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5bec]
c00011ab:	39 f8                	cmp    eax,edi
c00011ad:	77 04                	ja     c00011b3 <dlmalloc+0x291>
c00011af:	85 c0                	test   eax,eax
c00011b1:	75 26                	jne    c00011d9 <dlmalloc+0x2b7>
c00011b3:	43                   	inc    ebx
c00011b4:	83 fb 02             	cmp    ebx,0x2
c00011b7:	0f 87 a6 00 00 00    	ja     c0001263 <dlmalloc+0x341>
c00011bd:	8b 3c 9d 14 a4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5bec]
c00011c4:	85 ff                	test   edi,edi
c00011c6:	74 eb                	je     c00011b3 <dlmalloc+0x291>
c00011c8:	89 d8                	mov    eax,ebx
c00011ca:	c1 e0 06             	shl    eax,0x6
c00011cd:	8d 14 85 0c a1 02 c0 	lea    edx,[eax*4-0x3ffd5ef4]
c00011d4:	b8 01 00 00 00       	mov    eax,0x1
c00011d9:	85 f8                	test   eax,edi
c00011db:	75 07                	jne    c00011e4 <dlmalloc+0x2c2>
c00011dd:	83 c2 08             	add    edx,0x8
c00011e0:	01 c0                	add    eax,eax
c00011e2:	eb f5                	jmp    c00011d9 <dlmalloc+0x2b7>
c00011e4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011e7:	39 ca                	cmp    edx,ecx
c00011e9:	75 14                	jne    c00011ff <dlmalloc+0x2dd>
c00011eb:	89 c1                	mov    ecx,eax
c00011ed:	83 c2 08             	add    edx,0x8
c00011f0:	f7 d1                	not    ecx
c00011f2:	01 c0                	add    eax,eax
c00011f4:	21 cf                	and    edi,ecx
c00011f6:	89 3c 9d 14 a4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5bec],edi
c00011fd:	eb ac                	jmp    c00011ab <dlmalloc+0x289>
c00011ff:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001202:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001205:	83 e0 fc             	and    eax,0xfffffffc
c0001208:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000120b:	89 c3                	mov    ebx,eax
c000120d:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001210:	29 f3                	sub    ebx,esi
c0001212:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001215:	83 fb 0f             	cmp    ebx,0xf
c0001218:	8d 41 08             	lea    eax,[ecx+0x8]
c000121b:	77 09                	ja     c0001226 <dlmalloc+0x304>
c000121d:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001221:	e9 82 00 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001226:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001229:	81 fe ff 00 00 00    	cmp    esi,0xff
c000122f:	89 3d 1c a1 02 c0    	mov    DWORD PTR ds:0xc002a11c,edi
c0001235:	89 3d 20 a1 02 c0    	mov    DWORD PTR ds:0xc002a120,edi
c000123b:	c7 47 08 14 a1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a114
c0001242:	c7 47 0c 14 a1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a114
c0001249:	77 06                	ja     c0001251 <dlmalloc+0x32f>
c000124b:	89 3d 10 a1 02 c0    	mov    DWORD PTR ds:0xc002a110,edi
c0001251:	83 ce 01             	or     esi,0x1
c0001254:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001257:	89 d9                	mov    ecx,ebx
c0001259:	83 c9 01             	or     ecx,0x1
c000125c:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000125f:	89 1a                	mov    DWORD PTR [edx],ebx
c0001261:	eb 45                	jmp    c00012a8 <dlmalloc+0x386>
c0001263:	a1 0c a1 02 c0       	mov    eax,ds:0xc002a10c
c0001268:	8d 4e 10             	lea    ecx,[esi+0x10]
c000126b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000126e:	83 e2 fc             	and    edx,0xfffffffc
c0001271:	39 d1                	cmp    ecx,edx
c0001273:	77 1e                	ja     c0001293 <dlmalloc+0x371>
c0001275:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001278:	89 f3                	mov    ebx,esi
c000127a:	89 0d 0c a1 02 c0    	mov    DWORD PTR ds:0xc002a10c,ecx
c0001280:	83 cb 01             	or     ebx,0x1
c0001283:	29 f2                	sub    edx,esi
c0001285:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001288:	83 ca 01             	or     edx,0x1
c000128b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000128e:	e9 2d fd ff ff       	jmp    c0000fc0 <dlmalloc+0x9e>
c0001293:	83 c4 1c             	add    esp,0x1c
c0001296:	89 f0                	mov    eax,esi
c0001298:	5b                   	pop    ebx
c0001299:	ba e0 a0 02 c0       	mov    edx,0xc002a0e0
c000129e:	5e                   	pop    esi
c000129f:	5f                   	pop    edi
c00012a0:	5d                   	pop    ebp
c00012a1:	e9 16 fa ff ff       	jmp    c0000cbc <sYSMALLOc>
c00012a6:	31 c0                	xor    eax,eax
c00012a8:	83 c4 1c             	add    esp,0x1c
c00012ab:	5b                   	pop    ebx
c00012ac:	5e                   	pop    esi
c00012ad:	5f                   	pop    edi
c00012ae:	5d                   	pop    ebp
c00012af:	c3                   	ret    

c00012b0 <iALLOc>:
c00012b0:	55                   	push   ebp
c00012b1:	89 c5                	mov    ebp,eax
c00012b3:	57                   	push   edi
c00012b4:	56                   	push   esi
c00012b5:	53                   	push   ebx
c00012b6:	83 ec 2c             	sub    esp,0x2c
c00012b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012bd:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012c5:	83 3d e0 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a0e0,0x0
c00012cc:	75 12                	jne    c00012e0 <iALLOc+0x30>
c00012ce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012d2:	b8 e0 a0 02 c0       	mov    eax,0xc002a0e0
c00012d7:	e8 04 f8 ff ff       	call   c0000ae0 <malloc_consolidate>
c00012dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012e5:	74 12                	je     c00012f9 <iALLOc+0x49>
c00012e7:	85 ed                	test   ebp,ebp
c00012e9:	0f 84 64 01 00 00    	je     c0001453 <iALLOc+0x1a3>
c00012ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012f7:	eb 33                	jmp    c000132c <iALLOc+0x7c>
c00012f9:	85 ed                	test   ebp,ebp
c00012fb:	75 14                	jne    c0001311 <iALLOc+0x61>
c00012fd:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001305:	83 c4 2c             	add    esp,0x2c
c0001308:	5b                   	pop    ebx
c0001309:	5e                   	pop    esi
c000130a:	5f                   	pop    edi
c000130b:	5d                   	pop    ebp
c000130c:	e9 11 fc ff ff       	jmp    c0000f22 <dlmalloc>
c0001311:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001318:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001320:	83 f8 0f             	cmp    eax,0xf
c0001323:	76 07                	jbe    c000132c <iALLOc+0x7c>
c0001325:	83 e0 f8             	and    eax,0xfffffff8
c0001328:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000132c:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001331:	75 09                	jne    c000133c <iALLOc+0x8c>
c0001333:	89 d0                	mov    eax,edx
c0001335:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001338:	31 f6                	xor    esi,esi
c000133a:	eb 3b                	jmp    c0001377 <iALLOc+0xc7>
c000133c:	8b 02                	mov    eax,DWORD PTR [edx]
c000133e:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001346:	83 c0 0b             	add    eax,0xb
c0001349:	83 f8 0f             	cmp    eax,0xf
c000134c:	76 07                	jbe    c0001355 <iALLOc+0xa5>
c000134e:	83 e0 f8             	and    eax,0xfffffff8
c0001351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001355:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001359:	0f af f5             	imul   esi,ebp
c000135c:	eb 25                	jmp    c0001383 <iALLOc+0xd3>
c000135e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001360:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001363:	bb 10 00 00 00       	mov    ebx,0x10
c0001368:	83 f9 0f             	cmp    ecx,0xf
c000136b:	76 05                	jbe    c0001372 <iALLOc+0xc2>
c000136d:	83 e1 f8             	and    ecx,0xfffffff8
c0001370:	89 cb                	mov    ebx,ecx
c0001372:	01 de                	add    esi,ebx
c0001374:	83 c0 04             	add    eax,0x4
c0001377:	39 c7                	cmp    edi,eax
c0001379:	75 e3                	jne    c000135e <iALLOc+0xae>
c000137b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001383:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001387:	8b 1d 34 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a434
c000138d:	83 ec 0c             	sub    esp,0xc
c0001390:	c7 05 34 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a434,0x0
c000139a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000139e:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00013a2:	50                   	push   eax
c00013a3:	e8 7a fb ff ff       	call   c0000f22 <dlmalloc>
c00013a8:	83 c4 10             	add    esp,0x10
c00013ab:	89 1d 34 a4 02 c0    	mov    DWORD PTR ds:0xc002a434,ebx
c00013b1:	85 c0                	test   eax,eax
c00013b3:	0f 84 92 00 00 00    	je     c000144b <iALLOc+0x19b>
c00013b9:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013bc:	8d 78 f8             	lea    edi,[eax-0x8]
c00013bf:	83 e3 fc             	and    ebx,0xfffffffc
c00013c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013c6:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013cb:	74 1e                	je     c00013eb <iALLOc+0x13b>
c00013cd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013d1:	89 d9                	mov    ecx,ebx
c00013d3:	52                   	push   edx
c00013d4:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013d8:	83 e9 04             	sub    ecx,0x4
c00013db:	51                   	push   ecx
c00013dc:	6a 00                	push   0x0
c00013de:	50                   	push   eax
c00013df:	e8 02 f3 ff ff       	call   c00006e6 <memset>
c00013e4:	83 c4 10             	add    esp,0x10
c00013e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f0:	75 14                	jne    c0001406 <iALLOc+0x156>
c00013f2:	8d 04 37             	lea    eax,[edi+esi*1]
c00013f5:	29 f3                	sub    ebx,esi
c00013f7:	8d 48 08             	lea    ecx,[eax+0x8]
c00013fa:	83 cb 01             	or     ebx,0x1
c00013fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001401:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001404:	89 f3                	mov    ebx,esi
c0001406:	31 c0                	xor    eax,eax
c0001408:	4d                   	dec    ebp
c0001409:	8d 4f 08             	lea    ecx,[edi+0x8]
c000140c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001410:	39 c5                	cmp    ebp,eax
c0001412:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001415:	74 2c                	je     c0001443 <iALLOc+0x193>
c0001417:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000141b:	85 c9                	test   ecx,ecx
c000141d:	75 15                	jne    c0001434 <iALLOc+0x184>
c000141f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001422:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001425:	b9 10 00 00 00       	mov    ecx,0x10
c000142a:	83 fe 0f             	cmp    esi,0xf
c000142d:	76 05                	jbe    c0001434 <iALLOc+0x184>
c000142f:	83 e6 f8             	and    esi,0xfffffff8
c0001432:	89 f1                	mov    ecx,esi
c0001434:	89 ce                	mov    esi,ecx
c0001436:	29 cb                	sub    ebx,ecx
c0001438:	83 ce 01             	or     esi,0x1
c000143b:	40                   	inc    eax
c000143c:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000143f:	01 cf                	add    edi,ecx
c0001441:	eb c6                	jmp    c0001409 <iALLOc+0x159>
c0001443:	83 cb 01             	or     ebx,0x1
c0001446:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001449:	eb 08                	jmp    c0001453 <iALLOc+0x1a3>
c000144b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001457:	83 c4 2c             	add    esp,0x2c
c000145a:	5b                   	pop    ebx
c000145b:	5e                   	pop    esi
c000145c:	5f                   	pop    edi
c000145d:	5d                   	pop    ebp
c000145e:	c3                   	ret    

c000145f <dlrealloc>:
c000145f:	55                   	push   ebp
c0001460:	57                   	push   edi
c0001461:	56                   	push   esi
c0001462:	53                   	push   ebx
c0001463:	83 ec 1c             	sub    esp,0x1c
c0001466:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000146a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000146e:	85 db                	test   ebx,ebx
c0001470:	75 10                	jne    c0001482 <dlrealloc+0x23>
c0001472:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001476:	83 c4 1c             	add    esp,0x1c
c0001479:	5b                   	pop    ebx
c000147a:	5e                   	pop    esi
c000147b:	5f                   	pop    edi
c000147c:	5d                   	pop    ebp
c000147d:	e9 a0 fa ff ff       	jmp    c0000f22 <dlmalloc>
c0001482:	83 f8 df             	cmp    eax,0xffffffdf
c0001485:	76 07                	jbe    c000148e <dlrealloc+0x2f>
c0001487:	31 db                	xor    ebx,ebx
c0001489:	e9 7c 01 00 00       	jmp    c000160a <dlrealloc+0x1ab>
c000148e:	83 c0 0b             	add    eax,0xb
c0001491:	bf 10 00 00 00       	mov    edi,0x10
c0001496:	83 f8 0f             	cmp    eax,0xf
c0001499:	76 05                	jbe    c00014a0 <dlrealloc+0x41>
c000149b:	83 e0 f8             	and    eax,0xfffffff8
c000149e:	89 c7                	mov    edi,eax
c00014a0:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00014a3:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00014a6:	89 c6                	mov    esi,eax
c00014a8:	83 e6 fc             	and    esi,0xfffffffc
c00014ab:	a8 02                	test   al,0x2
c00014ad:	75 d8                	jne    c0001487 <dlrealloc+0x28>
c00014af:	39 f7                	cmp    edi,esi
c00014b1:	0f 86 15 01 00 00    	jbe    c00015cc <dlrealloc+0x16d>
c00014b7:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014be:	39 15 0c a1 02 c0    	cmp    DWORD PTR ds:0xc002a10c,edx
c00014c4:	75 33                	jne    c00014f9 <dlrealloc+0x9a>
c00014c6:	83 e1 fc             	and    ecx,0xfffffffc
c00014c9:	01 f1                	add    ecx,esi
c00014cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014cf:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014d6:	77 49                	ja     c0001521 <dlrealloc+0xc2>
c00014d8:	01 fd                	add    ebp,edi
c00014da:	83 e0 01             	and    eax,0x1
c00014dd:	09 f8                	or     eax,edi
c00014df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014e2:	89 2d 0c a1 02 c0    	mov    DWORD PTR ds:0xc002a10c,ebp
c00014e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014ec:	29 f8                	sub    eax,edi
c00014ee:	83 c8 01             	or     eax,0x1
c00014f1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014f4:	e9 11 01 00 00       	jmp    c000160a <dlrealloc+0x1ab>
c00014f9:	89 c8                	mov    eax,ecx
c00014fb:	83 e0 fe             	and    eax,0xfffffffe
c00014fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001503:	75 1c                	jne    c0001521 <dlrealloc+0xc2>
c0001505:	83 e1 fc             	and    ecx,0xfffffffc
c0001508:	01 f1                	add    ecx,esi
c000150a:	39 cf                	cmp    edi,ecx
c000150c:	77 13                	ja     c0001521 <dlrealloc+0xc2>
c000150e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001511:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001514:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001517:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000151a:	89 ce                	mov    esi,ecx
c000151c:	e9 ab 00 00 00       	jmp    c00015cc <dlrealloc+0x16d>
c0001521:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001525:	8d 47 f9             	lea    eax,[edi-0x7]
c0001528:	83 ec 0c             	sub    esp,0xc
c000152b:	50                   	push   eax
c000152c:	e8 f1 f9 ff ff       	call   c0000f22 <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 c1                	mov    ecx,eax
c0001536:	85 c0                	test   eax,eax
c0001538:	0f 84 49 ff ff ff    	je     c0001487 <dlrealloc+0x28>
c000153e:	8d 40 f8             	lea    eax,[eax-0x8]
c0001541:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001545:	39 c2                	cmp    edx,eax
c0001547:	75 0a                	jne    c0001553 <dlrealloc+0xf4>
c0001549:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000154c:	83 e0 fc             	and    eax,0xfffffffc
c000154f:	01 c6                	add    esi,eax
c0001551:	eb 79                	jmp    c00015cc <dlrealloc+0x16d>
c0001553:	83 ee 04             	sub    esi,0x4
c0001556:	83 fe 27             	cmp    esi,0x27
c0001559:	76 16                	jbe    c0001571 <dlrealloc+0x112>
c000155b:	50                   	push   eax
c000155c:	56                   	push   esi
c000155d:	53                   	push   ebx
c000155e:	51                   	push   ecx
c000155f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001563:	e8 48 f1 ff ff       	call   c00006b0 <memcpy>
c0001568:	83 c4 10             	add    esp,0x10
c000156b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156f:	eb 43                	jmp    c00015b4 <dlrealloc+0x155>
c0001571:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001573:	83 fe 13             	cmp    esi,0x13
c0001576:	89 01                	mov    DWORD PTR [ecx],eax
c0001578:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000157b:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000157e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001581:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001584:	76 2e                	jbe    c00015b4 <dlrealloc+0x155>
c0001586:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001589:	83 fe 1b             	cmp    esi,0x1b
c000158c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000158f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001592:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001595:	76 1d                	jbe    c00015b4 <dlrealloc+0x155>
c0001597:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000159a:	83 fe 23             	cmp    esi,0x23
c000159d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00015a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00015a3:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00015a6:	76 0c                	jbe    c00015b4 <dlrealloc+0x155>
c00015a8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00015ab:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00015ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00015b1:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00015b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015b8:	83 ec 0c             	sub    esp,0xc
c00015bb:	53                   	push   ebx
c00015bc:	e8 06 f6 ff ff       	call   c0000bc7 <dlfree>
c00015c1:	83 c4 10             	add    esp,0x10
c00015c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015c8:	89 cb                	mov    ebx,ecx
c00015ca:	eb 3e                	jmp    c000160a <dlrealloc+0x1ab>
c00015cc:	89 f2                	mov    edx,esi
c00015ce:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015d1:	29 fa                	sub    edx,edi
c00015d3:	83 e1 01             	and    ecx,0x1
c00015d6:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015da:	83 fa 0f             	cmp    edx,0xf
c00015dd:	77 0b                	ja     c00015ea <dlrealloc+0x18b>
c00015df:	09 ce                	or     esi,ecx
c00015e1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015e8:	eb 20                	jmp    c000160a <dlrealloc+0x1ab>
c00015ea:	01 fd                	add    ebp,edi
c00015ec:	83 ec 0c             	sub    esp,0xc
c00015ef:	09 cf                	or     edi,ecx
c00015f1:	83 ca 01             	or     edx,0x1
c00015f4:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015f7:	83 c5 08             	add    ebp,0x8
c00015fa:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015fd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001601:	55                   	push   ebp
c0001602:	e8 c0 f5 ff ff       	call   c0000bc7 <dlfree>
c0001607:	83 c4 10             	add    esp,0x10
c000160a:	83 c4 1c             	add    esp,0x1c
c000160d:	89 d8                	mov    eax,ebx
c000160f:	5b                   	pop    ebx
c0001610:	5e                   	pop    esi
c0001611:	5f                   	pop    edi
c0001612:	5d                   	pop    ebp
c0001613:	c3                   	ret    

c0001614 <dlmemalign>:
c0001614:	55                   	push   ebp
c0001615:	57                   	push   edi
c0001616:	56                   	push   esi
c0001617:	53                   	push   ebx
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000161f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001623:	83 fa 08             	cmp    edx,0x8
c0001626:	77 10                	ja     c0001638 <dlmemalign+0x24>
c0001628:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000162c:	83 c4 0c             	add    esp,0xc
c000162f:	5b                   	pop    ebx
c0001630:	5e                   	pop    esi
c0001631:	5f                   	pop    edi
c0001632:	5d                   	pop    ebp
c0001633:	e9 ea f8 ff ff       	jmp    c0000f22 <dlmalloc>
c0001638:	bf 10 00 00 00       	mov    edi,0x10
c000163d:	83 fa 0f             	cmp    edx,0xf
c0001640:	76 13                	jbe    c0001655 <dlmemalign+0x41>
c0001642:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001645:	85 d1                	test   ecx,edx
c0001647:	75 04                	jne    c000164d <dlmemalign+0x39>
c0001649:	89 d7                	mov    edi,edx
c000164b:	eb 08                	jmp    c0001655 <dlmemalign+0x41>
c000164d:	39 d7                	cmp    edi,edx
c000164f:	73 04                	jae    c0001655 <dlmemalign+0x41>
c0001651:	01 ff                	add    edi,edi
c0001653:	eb f8                	jmp    c000164d <dlmemalign+0x39>
c0001655:	83 f8 df             	cmp    eax,0xffffffdf
c0001658:	76 07                	jbe    c0001661 <dlmemalign+0x4d>
c000165a:	31 c0                	xor    eax,eax
c000165c:	e9 ce 00 00 00       	jmp    c000172f <dlmemalign+0x11b>
c0001661:	83 c0 0b             	add    eax,0xb
c0001664:	bd 10 00 00 00       	mov    ebp,0x10
c0001669:	83 f8 0f             	cmp    eax,0xf
c000166c:	76 05                	jbe    c0001673 <dlmemalign+0x5f>
c000166e:	83 e0 f8             	and    eax,0xfffffff8
c0001671:	89 c5                	mov    ebp,eax
c0001673:	83 ec 0c             	sub    esp,0xc
c0001676:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000167a:	50                   	push   eax
c000167b:	e8 a2 f8 ff ff       	call   c0000f22 <dlmalloc>
c0001680:	83 c4 10             	add    esp,0x10
c0001683:	89 c1                	mov    ecx,eax
c0001685:	85 c0                	test   eax,eax
c0001687:	74 d1                	je     c000165a <dlmemalign+0x46>
c0001689:	31 d2                	xor    edx,edx
c000168b:	8d 70 f8             	lea    esi,[eax-0x8]
c000168e:	f7 f7                	div    edi
c0001690:	85 d2                	test   edx,edx
c0001692:	74 62                	je     c00016f6 <dlmemalign+0xe2>
c0001694:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001698:	89 f8                	mov    eax,edi
c000169a:	f7 d8                	neg    eax
c000169c:	21 c3                	and    ebx,eax
c000169e:	83 eb 08             	sub    ebx,0x8
c00016a1:	89 d8                	mov    eax,ebx
c00016a3:	29 f0                	sub    eax,esi
c00016a5:	83 f8 0f             	cmp    eax,0xf
c00016a8:	77 02                	ja     c00016ac <dlmemalign+0x98>
c00016aa:	01 fb                	add    ebx,edi
c00016ac:	89 d8                	mov    eax,ebx
c00016ae:	29 f0                	sub    eax,esi
c00016b0:	89 c6                	mov    esi,eax
c00016b2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016b5:	89 c2                	mov    edx,eax
c00016b7:	83 e2 fc             	and    edx,0xfffffffc
c00016ba:	29 f2                	sub    edx,esi
c00016bc:	a8 02                	test   al,0x2
c00016be:	74 10                	je     c00016d0 <dlmemalign+0xbc>
c00016c0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016c3:	83 ca 02             	or     edx,0x2
c00016c6:	8d 43 08             	lea    eax,[ebx+0x8]
c00016c9:	89 33                	mov    DWORD PTR [ebx],esi
c00016cb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ce:	eb 5f                	jmp    c000172f <dlmemalign+0x11b>
c00016d0:	83 ec 0c             	sub    esp,0xc
c00016d3:	89 d0                	mov    eax,edx
c00016d5:	83 c8 01             	or     eax,0x1
c00016d8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016db:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016e0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016e3:	83 e0 01             	and    eax,0x1
c00016e6:	09 f0                	or     eax,esi
c00016e8:	89 de                	mov    esi,ebx
c00016ea:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016ed:	51                   	push   ecx
c00016ee:	e8 d4 f4 ff ff       	call   c0000bc7 <dlfree>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f9:	a8 02                	test   al,0x2
c00016fb:	75 2f                	jne    c000172c <dlmemalign+0x118>
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	8d 55 10             	lea    edx,[ebp+0x10]
c0001703:	39 c2                	cmp    edx,eax
c0001705:	73 25                	jae    c000172c <dlmemalign+0x118>
c0001707:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000170a:	83 ec 0c             	sub    esp,0xc
c000170d:	29 e8                	sub    eax,ebp
c000170f:	83 c2 08             	add    edx,0x8
c0001712:	83 c8 01             	or     eax,0x1
c0001715:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001718:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000171b:	83 e0 01             	and    eax,0x1
c000171e:	09 c5                	or     ebp,eax
c0001720:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001723:	52                   	push   edx
c0001724:	e8 9e f4 ff ff       	call   c0000bc7 <dlfree>
c0001729:	83 c4 10             	add    esp,0x10
c000172c:	8d 46 08             	lea    eax,[esi+0x8]
c000172f:	83 c4 0c             	add    esp,0xc
c0001732:	5b                   	pop    ebx
c0001733:	5e                   	pop    esi
c0001734:	5f                   	pop    edi
c0001735:	5d                   	pop    ebp
c0001736:	c3                   	ret    

c0001737 <dlcalloc>:
c0001737:	53                   	push   ebx
c0001738:	83 ec 14             	sub    esp,0x14
c000173b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000173f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001744:	50                   	push   eax
c0001745:	e8 d8 f7 ff ff       	call   c0000f22 <dlmalloc>
c000174a:	83 c4 10             	add    esp,0x10
c000174d:	89 c3                	mov    ebx,eax
c000174f:	85 c0                	test   eax,eax
c0001751:	74 77                	je     c00017ca <dlcalloc+0x93>
c0001753:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001756:	89 d0                	mov    eax,edx
c0001758:	83 e0 fc             	and    eax,0xfffffffc
c000175b:	80 e2 02             	and    dl,0x2
c000175e:	75 5a                	jne    c00017ba <dlcalloc+0x83>
c0001760:	83 e8 04             	sub    eax,0x4
c0001763:	83 f8 27             	cmp    eax,0x27
c0001766:	76 03                	jbe    c000176b <dlcalloc+0x34>
c0001768:	51                   	push   ecx
c0001769:	eb 53                	jmp    c00017be <dlcalloc+0x87>
c000176b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001771:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001778:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000177f:	83 f8 13             	cmp    eax,0x13
c0001782:	76 46                	jbe    c00017ca <dlcalloc+0x93>
c0001784:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000178b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001792:	83 f8 1b             	cmp    eax,0x1b
c0001795:	76 33                	jbe    c00017ca <dlcalloc+0x93>
c0001797:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000179e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00017a5:	83 f8 23             	cmp    eax,0x23
c00017a8:	76 20                	jbe    c00017ca <dlcalloc+0x93>
c00017aa:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00017b1:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017b8:	eb 10                	jmp    c00017ca <dlcalloc+0x93>
c00017ba:	83 e8 08             	sub    eax,0x8
c00017bd:	52                   	push   edx
c00017be:	50                   	push   eax
c00017bf:	6a 00                	push   0x0
c00017c1:	53                   	push   ebx
c00017c2:	e8 1f ef ff ff       	call   c00006e6 <memset>
c00017c7:	83 c4 10             	add    esp,0x10
c00017ca:	89 d8                	mov    eax,ebx
c00017cc:	83 c4 08             	add    esp,0x8
c00017cf:	5b                   	pop    ebx
c00017d0:	c3                   	ret    

c00017d1 <dlcfree>:
c00017d1:	e9 f1 f3 ff ff       	jmp    c0000bc7 <dlfree>

c00017d6 <dlindependent_calloc>:
c00017d6:	83 ec 28             	sub    esp,0x28
c00017d9:	b9 03 00 00 00       	mov    ecx,0x3
c00017de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017f2:	e8 b9 fa ff ff       	call   c00012b0 <iALLOc>
c00017f7:	83 c4 2c             	add    esp,0x2c
c00017fa:	c3                   	ret    

c00017fb <dlindependent_comalloc>:
c00017fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001803:	31 c9                	xor    ecx,ecx
c0001805:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001809:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000180d:	e9 9e fa ff ff       	jmp    c00012b0 <iALLOc>

c0001812 <dlvalloc>:
c0001812:	83 ec 0c             	sub    esp,0xc
c0001815:	83 3d e0 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a0e0,0x0
c000181c:	75 0a                	jne    c0001828 <dlvalloc+0x16>
c000181e:	b8 e0 a0 02 c0       	mov    eax,0xc002a0e0
c0001823:	e8 b8 f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c0001828:	50                   	push   eax
c0001829:	50                   	push   eax
c000182a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000182e:	ff 35 3c a4 02 c0    	push   DWORD PTR ds:0xc002a43c
c0001834:	e8 db fd ff ff       	call   c0001614 <dlmemalign>
c0001839:	83 c4 1c             	add    esp,0x1c
c000183c:	c3                   	ret    

c000183d <dlpvalloc>:
c000183d:	83 ec 0c             	sub    esp,0xc
c0001840:	83 3d e0 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a0e0,0x0
c0001847:	75 0a                	jne    c0001853 <dlpvalloc+0x16>
c0001849:	b8 e0 a0 02 c0       	mov    eax,0xc002a0e0
c000184e:	e8 8d f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c0001853:	a1 3c a4 02 c0       	mov    eax,ds:0xc002a43c
c0001858:	89 c1                	mov    ecx,eax
c000185a:	52                   	push   edx
c000185b:	f7 d9                	neg    ecx
c000185d:	52                   	push   edx
c000185e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001862:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001866:	21 ca                	and    edx,ecx
c0001868:	52                   	push   edx
c0001869:	50                   	push   eax
c000186a:	e8 a5 fd ff ff       	call   c0001614 <dlmemalign>
c000186f:	83 c4 1c             	add    esp,0x1c
c0001872:	c3                   	ret    

c0001873 <dlmalloc_trim>:
c0001873:	b8 e0 a0 02 c0       	mov    eax,0xc002a0e0
c0001878:	e8 63 f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c000187d:	31 c0                	xor    eax,eax
c000187f:	c3                   	ret    

c0001880 <dlmalloc_usable_size>:
c0001880:	53                   	push   ebx
c0001881:	31 c0                	xor    eax,eax
c0001883:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001887:	85 c9                	test   ecx,ecx
c0001889:	74 24                	je     c00018af <dlmalloc_usable_size+0x2f>
c000188b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000188e:	f6 c2 02             	test   dl,0x2
c0001891:	74 08                	je     c000189b <dlmalloc_usable_size+0x1b>
c0001893:	83 e2 fc             	and    edx,0xfffffffc
c0001896:	8d 42 f8             	lea    eax,[edx-0x8]
c0001899:	eb 14                	jmp    c00018af <dlmalloc_usable_size+0x2f>
c000189b:	89 d3                	mov    ebx,edx
c000189d:	31 c0                	xor    eax,eax
c000189f:	83 e3 fe             	and    ebx,0xfffffffe
c00018a2:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00018a7:	74 06                	je     c00018af <dlmalloc_usable_size+0x2f>
c00018a9:	83 e2 fc             	and    edx,0xfffffffc
c00018ac:	8d 42 fc             	lea    eax,[edx-0x4]
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlmallinfo>:
c00018b1:	55                   	push   ebp
c00018b2:	57                   	push   edi
c00018b3:	56                   	push   esi
c00018b4:	53                   	push   ebx
c00018b5:	83 ec 08             	sub    esp,0x8
c00018b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018bc:	83 3d 0c a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a10c,0x0
c00018c3:	75 0a                	jne    c00018cf <dlmallinfo+0x1e>
c00018c5:	b8 e0 a0 02 c0       	mov    eax,0xc002a0e0
c00018ca:	e8 11 f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c00018cf:	a1 0c a1 02 c0       	mov    eax,ds:0xc002a10c
c00018d4:	31 ed                	xor    ebp,ebp
c00018d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018d9:	31 c9                	xor    ecx,ecx
c00018db:	83 e0 fc             	and    eax,0xfffffffc
c00018de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018e2:	31 c0                	xor    eax,eax
c00018e4:	8b 14 85 e4 a0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5f1c]
c00018eb:	85 d2                	test   edx,edx
c00018ed:	74 0e                	je     c00018fd <dlmallinfo+0x4c>
c00018ef:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018f2:	45                   	inc    ebp
c00018f3:	83 e6 fc             	and    esi,0xfffffffc
c00018f6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018f9:	01 f1                	add    ecx,esi
c00018fb:	eb ee                	jmp    c00018eb <dlmallinfo+0x3a>
c00018fd:	40                   	inc    eax
c00018fe:	83 f8 0a             	cmp    eax,0xa
c0001901:	75 e1                	jne    c00018e4 <dlmallinfo+0x33>
c0001903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001907:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000190e:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001911:	b8 14 a1 02 c0       	mov    eax,0xc002a114
c0001916:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001919:	39 f0                	cmp    eax,esi
c000191b:	74 10                	je     c000192d <dlmallinfo+0x7c>
c000191d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001920:	ff 04 24             	inc    DWORD PTR [esp]
c0001923:	83 e7 fc             	and    edi,0xfffffffc
c0001926:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001929:	01 fa                	add    edx,edi
c000192b:	eb ec                	jmp    c0001919 <dlmallinfo+0x68>
c000192d:	83 c0 08             	add    eax,0x8
c0001930:	3d 0c a4 02 c0       	cmp    eax,0xc002a40c
c0001935:	75 df                	jne    c0001916 <dlmallinfo+0x65>
c0001937:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000193a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000193d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001940:	a1 48 a4 02 c0       	mov    eax,ds:0xc002a448
c0001945:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001948:	89 03                	mov    DWORD PTR [ebx],eax
c000194a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000194d:	8b 35 30 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a430
c0001953:	29 d0                	sub    eax,edx
c0001955:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001958:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000195b:	8b 35 44 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a444
c0001961:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001965:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001968:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000196b:	8b 35 54 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a454
c0001971:	89 d8                	mov    eax,ebx
c0001973:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001976:	83 c4 08             	add    esp,0x8
c0001979:	5b                   	pop    ebx
c000197a:	5e                   	pop    esi
c000197b:	5f                   	pop    edi
c000197c:	5d                   	pop    ebp
c000197d:	c2 04 00             	ret    0x4

c0001980 <dlmalloc_stats>:
c0001980:	83 ec 30             	sub    esp,0x30
c0001983:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001987:	50                   	push   eax
c0001988:	e8 24 ff ff ff       	call   c00018b1 <dlmallinfo>
c000198d:	83 c4 30             	add    esp,0x30
c0001990:	c3                   	ret    

c0001991 <dlmallopt>:
c0001991:	56                   	push   esi
c0001992:	b8 e0 a0 02 c0       	mov    eax,0xc002a0e0
c0001997:	53                   	push   ebx
c0001998:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000199c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00019a0:	e8 3b f1 ff ff       	call   c0000ae0 <malloc_consolidate>
c00019a5:	8d 46 04             	lea    eax,[esi+0x4]
c00019a8:	83 f8 05             	cmp    eax,0x5
c00019ab:	77 67                	ja     c0001a14 <dlmallopt+0x83>
c00019ad:	ff 24 85 44 5c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda3bc]
c00019b4:	83 fb 50             	cmp    ebx,0x50
c00019b7:	77 5b                	ja     c0001a14 <dlmallopt+0x83>
c00019b9:	ba 08 00 00 00       	mov    edx,0x8
c00019be:	85 db                	test   ebx,ebx
c00019c0:	74 12                	je     c00019d4 <dlmallopt+0x43>
c00019c2:	83 c3 0b             	add    ebx,0xb
c00019c5:	ba 10 00 00 00       	mov    edx,0x10
c00019ca:	83 fb 0f             	cmp    ebx,0xf
c00019cd:	76 05                	jbe    c00019d4 <dlmallopt+0x43>
c00019cf:	89 da                	mov    edx,ebx
c00019d1:	83 e2 f8             	and    edx,0xfffffff8
c00019d4:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c00019d9:	83 e0 03             	and    eax,0x3
c00019dc:	09 d0                	or     eax,edx
c00019de:	a3 e0 a0 02 c0       	mov    ds:0xc002a0e0,eax
c00019e3:	eb 31                	jmp    c0001a16 <dlmallopt+0x85>
c00019e5:	89 1d 24 a4 02 c0    	mov    DWORD PTR ds:0xc002a424,ebx
c00019eb:	eb 06                	jmp    c00019f3 <dlmallopt+0x62>
c00019ed:	89 1d 28 a4 02 c0    	mov    DWORD PTR ds:0xc002a428,ebx
c00019f3:	be 01 00 00 00       	mov    esi,0x1
c00019f8:	eb 1c                	jmp    c0001a16 <dlmallopt+0x85>
c00019fa:	89 1d 2c a4 02 c0    	mov    DWORD PTR ds:0xc002a42c,ebx
c0001a00:	eb f1                	jmp    c00019f3 <dlmallopt+0x62>
c0001a02:	31 f6                	xor    esi,esi
c0001a04:	85 db                	test   ebx,ebx
c0001a06:	75 0e                	jne    c0001a16 <dlmallopt+0x85>
c0001a08:	c7 05 34 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a434,0x0
c0001a12:	eb df                	jmp    c00019f3 <dlmallopt+0x62>
c0001a14:	31 f6                	xor    esi,esi
c0001a16:	89 f0                	mov    eax,esi
c0001a18:	5b                   	pop    ebx
c0001a19:	5e                   	pop    esi
c0001a1a:	c3                   	ret    

c0001a1b <disk_status>:
c0001a1b:	31 c0                	xor    eax,eax
c0001a1d:	c3                   	ret    

c0001a1e <disk_initialize>:
c0001a1e:	31 c0                	xor    eax,eax
c0001a20:	c3                   	ret    

c0001a21 <disk_read>:
c0001a21:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a26:	0f b6 04 85 60 ba 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd45a0]
c0001a2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a32:	e9 3f c9 01 00       	jmp    c001e376 <fatWrapperReadDisk>

c0001a37 <disk_write>:
c0001a37:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a3c:	0f b6 04 85 60 ba 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd45a0]
c0001a44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a48:	e9 70 c9 01 00       	jmp    c001e3bd <fatWrapperWriteDisk>

c0001a4d <disk_ioctl>:
c0001a4d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a56:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a5b:	0f b6 04 85 60 ba 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd45a0]
c0001a63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a67:	e9 98 c9 01 00       	jmp    c001e404 <fatWrapperIoctl>

c0001a6c <ld_word>:
c0001a6c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a70:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a73:	c1 e2 08             	shl    edx,0x8
c0001a76:	09 d0                	or     eax,edx
c0001a78:	c3                   	ret    

c0001a79 <ld_dword>:
c0001a79:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a7d:	89 d1                	mov    ecx,edx
c0001a7f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a83:	c1 e1 08             	shl    ecx,0x8
c0001a86:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a89:	09 ca                	or     edx,ecx
c0001a8b:	c1 e2 08             	shl    edx,0x8
c0001a8e:	09 d0                	or     eax,edx
c0001a90:	c3                   	ret    

c0001a91 <ld_qword>:
c0001a91:	57                   	push   edi
c0001a92:	56                   	push   esi
c0001a93:	53                   	push   ebx
c0001a94:	31 db                	xor    ebx,ebx
c0001a96:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a99:	89 df                	mov    edi,ebx
c0001a9b:	89 ce                	mov    esi,ecx
c0001a9d:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001aa1:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa5:	c1 e6 08             	shl    esi,0x8
c0001aa8:	09 f2                	or     edx,esi
c0001aaa:	89 d6                	mov    esi,edx
c0001aac:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ab0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ab4:	c1 e6 08             	shl    esi,0x8
c0001ab7:	09 f2                	or     edx,esi
c0001ab9:	89 d6                	mov    esi,edx
c0001abb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001abf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ac3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ac6:	c1 e6 08             	shl    esi,0x8
c0001ac9:	89 fb                	mov    ebx,edi
c0001acb:	09 f2                	or     edx,esi
c0001acd:	89 d1                	mov    ecx,edx
c0001acf:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ad3:	c1 e1 08             	shl    ecx,0x8
c0001ad6:	89 da                	mov    edx,ebx
c0001ad8:	09 c8                	or     eax,ecx
c0001ada:	5b                   	pop    ebx
c0001adb:	5e                   	pop    esi
c0001adc:	5f                   	pop    edi
c0001add:	c3                   	ret    

c0001ade <st_word>:
c0001ade:	66 89 10             	mov    WORD PTR [eax],dx
c0001ae1:	c3                   	ret    

c0001ae2 <st_dword>:
c0001ae2:	89 10                	mov    DWORD PTR [eax],edx
c0001ae4:	c3                   	ret    

c0001ae5 <st_qword>:
c0001ae5:	89 10                	mov    DWORD PTR [eax],edx
c0001ae7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001aea:	c3                   	ret    

c0001aeb <mem_cpy>:
c0001aeb:	85 c9                	test   ecx,ecx
c0001aed:	74 10                	je     c0001aff <mem_cpy+0x14>
c0001aef:	57                   	push   edi
c0001af0:	01 c1                	add    ecx,eax
c0001af2:	56                   	push   esi
c0001af3:	89 c7                	mov    edi,eax
c0001af5:	89 d6                	mov    esi,edx
c0001af7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001af8:	39 f9                	cmp    ecx,edi
c0001afa:	75 fb                	jne    c0001af7 <mem_cpy+0xc>
c0001afc:	5e                   	pop    esi
c0001afd:	5f                   	pop    edi
c0001afe:	c3                   	ret    
c0001aff:	c3                   	ret    

c0001b00 <mem_set>:
c0001b00:	01 c1                	add    ecx,eax
c0001b02:	40                   	inc    eax
c0001b03:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b06:	39 c8                	cmp    eax,ecx
c0001b08:	75 f8                	jne    c0001b02 <mem_set+0x2>
c0001b0a:	c3                   	ret    

c0001b0b <mem_cmp>:
c0001b0b:	57                   	push   edi
c0001b0c:	56                   	push   esi
c0001b0d:	89 c6                	mov    esi,eax
c0001b0f:	53                   	push   ebx
c0001b10:	46                   	inc    esi
c0001b11:	42                   	inc    edx
c0001b12:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001b16:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b1a:	29 fb                	sub    ebx,edi
c0001b1c:	89 cf                	mov    edi,ecx
c0001b1e:	29 f7                	sub    edi,esi
c0001b20:	01 c7                	add    edi,eax
c0001b22:	74 04                	je     c0001b28 <mem_cmp+0x1d>
c0001b24:	85 db                	test   ebx,ebx
c0001b26:	74 e8                	je     c0001b10 <mem_cmp+0x5>
c0001b28:	89 d8                	mov    eax,ebx
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <chk_chr>:
c0001b2e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b31:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b34:	74 07                	je     c0001b3d <chk_chr+0xf>
c0001b36:	39 d1                	cmp    ecx,edx
c0001b38:	74 03                	je     c0001b3d <chk_chr+0xf>
c0001b3a:	40                   	inc    eax
c0001b3b:	eb f1                	jmp    c0001b2e <chk_chr>
c0001b3d:	89 c8                	mov    eax,ecx
c0001b3f:	c3                   	ret    

c0001b40 <dbc_1st>:
c0001b40:	31 c0                	xor    eax,eax
c0001b42:	c3                   	ret    

c0001b43 <dbc_2nd>:
c0001b43:	31 c0                	xor    eax,eax
c0001b45:	c3                   	ret    

c0001b46 <tchar2uni>:
c0001b46:	57                   	push   edi
c0001b47:	89 c7                	mov    edi,eax
c0001b49:	56                   	push   esi
c0001b4a:	53                   	push   ebx
c0001b4b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b4d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b4f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b52:	84 c9                	test   cl,cl
c0001b54:	78 0a                	js     c0001b60 <tchar2uni+0x1a>
c0001b56:	0f b6 d1             	movzx  edx,cl
c0001b59:	89 f3                	mov    ebx,esi
c0001b5b:	e9 9f 00 00 00       	jmp    c0001bff <tchar2uni+0xb9>
c0001b60:	88 ca                	mov    dl,cl
c0001b62:	83 e2 e0             	and    edx,0xffffffe0
c0001b65:	80 fa c0             	cmp    dl,0xc0
c0001b68:	75 0c                	jne    c0001b76 <tchar2uni+0x30>
c0001b6a:	89 ca                	mov    edx,ecx
c0001b6c:	b9 01 00 00 00       	mov    ecx,0x1
c0001b71:	83 e2 1f             	and    edx,0x1f
c0001b74:	eb 2e                	jmp    c0001ba4 <tchar2uni+0x5e>
c0001b76:	88 ca                	mov    dl,cl
c0001b78:	83 e2 f0             	and    edx,0xfffffff0
c0001b7b:	80 fa e0             	cmp    dl,0xe0
c0001b7e:	75 0c                	jne    c0001b8c <tchar2uni+0x46>
c0001b80:	89 ca                	mov    edx,ecx
c0001b82:	b9 02 00 00 00       	mov    ecx,0x2
c0001b87:	83 e2 0f             	and    edx,0xf
c0001b8a:	eb 18                	jmp    c0001ba4 <tchar2uni+0x5e>
c0001b8c:	88 ca                	mov    dl,cl
c0001b8e:	83 e2 f8             	and    edx,0xfffffff8
c0001b91:	88 d0                	mov    al,dl
c0001b93:	83 ca ff             	or     edx,0xffffffff
c0001b96:	3c f0                	cmp    al,0xf0
c0001b98:	75 6c                	jne    c0001c06 <tchar2uni+0xc0>
c0001b9a:	89 ca                	mov    edx,ecx
c0001b9c:	b9 03 00 00 00       	mov    ecx,0x3
c0001ba1:	83 e2 07             	and    edx,0x7
c0001ba4:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ba8:	46                   	inc    esi
c0001ba9:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001bac:	88 c8                	mov    al,cl
c0001bae:	83 e0 c0             	and    eax,0xffffffc0
c0001bb1:	3c 80                	cmp    al,0x80
c0001bb3:	75 4e                	jne    c0001c03 <tchar2uni+0xbd>
c0001bb5:	c1 e2 06             	shl    edx,0x6
c0001bb8:	83 e1 3f             	and    ecx,0x3f
c0001bbb:	09 ca                	or     edx,ecx
c0001bbd:	39 de                	cmp    esi,ebx
c0001bbf:	75 e7                	jne    c0001ba8 <tchar2uni+0x62>
c0001bc1:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bc4:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bca:	77 37                	ja     c0001c03 <tchar2uni+0xbd>
c0001bcc:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bd2:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bd8:	76 29                	jbe    c0001c03 <tchar2uni+0xbd>
c0001bda:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001be0:	76 1d                	jbe    c0001bff <tchar2uni+0xb9>
c0001be2:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001be8:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bee:	c1 e1 06             	shl    ecx,0x6
c0001bf1:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bf7:	09 ca                	or     edx,ecx
c0001bf9:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bff:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c01:	eb 03                	jmp    c0001c06 <tchar2uni+0xc0>
c0001c03:	83 ca ff             	or     edx,0xffffffff
c0001c06:	5b                   	pop    ebx
c0001c07:	89 d0                	mov    eax,edx
c0001c09:	5e                   	pop    esi
c0001c0a:	5f                   	pop    edi
c0001c0b:	c3                   	ret    

c0001c0c <put_utf>:
c0001c0c:	53                   	push   ebx
c0001c0d:	83 f8 7f             	cmp    eax,0x7f
c0001c10:	89 c3                	mov    ebx,eax
c0001c12:	b0 00                	mov    al,0x0
c0001c14:	77 11                	ja     c0001c27 <put_utf+0x1b>
c0001c16:	85 c9                	test   ecx,ecx
c0001c18:	0f 84 e5 00 00 00    	je     c0001d03 <put_utf+0xf7>
c0001c1e:	88 1a                	mov    BYTE PTR [edx],bl
c0001c20:	b0 01                	mov    al,0x1
c0001c22:	e9 dc 00 00 00       	jmp    c0001d03 <put_utf+0xf7>
c0001c27:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c2d:	77 23                	ja     c0001c52 <put_utf+0x46>
c0001c2f:	83 f9 01             	cmp    ecx,0x1
c0001c32:	0f 86 cb 00 00 00    	jbe    c0001d03 <put_utf+0xf7>
c0001c38:	89 d8                	mov    eax,ebx
c0001c3a:	83 e3 3f             	and    ebx,0x3f
c0001c3d:	c1 e8 06             	shr    eax,0x6
c0001c40:	83 cb 80             	or     ebx,0xffffff80
c0001c43:	83 c8 c0             	or     eax,0xffffffc0
c0001c46:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c49:	88 02                	mov    BYTE PTR [edx],al
c0001c4b:	b0 02                	mov    al,0x2
c0001c4d:	e9 b1 00 00 00       	jmp    c0001d03 <put_utf+0xf7>
c0001c52:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c58:	77 40                	ja     c0001c9a <put_utf+0x8e>
c0001c5a:	83 f9 02             	cmp    ecx,0x2
c0001c5d:	0f 86 a0 00 00 00    	jbe    c0001d03 <put_utf+0xf7>
c0001c63:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c69:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c6f:	0f 86 8e 00 00 00    	jbe    c0001d03 <put_utf+0xf7>
c0001c75:	89 d8                	mov    eax,ebx
c0001c77:	c1 e8 0c             	shr    eax,0xc
c0001c7a:	83 c8 e0             	or     eax,0xffffffe0
c0001c7d:	88 02                	mov    BYTE PTR [edx],al
c0001c7f:	89 d8                	mov    eax,ebx
c0001c81:	83 e3 3f             	and    ebx,0x3f
c0001c84:	c1 e8 06             	shr    eax,0x6
c0001c87:	83 cb 80             	or     ebx,0xffffff80
c0001c8a:	83 e0 3f             	and    eax,0x3f
c0001c8d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c90:	83 c8 80             	or     eax,0xffffff80
c0001c93:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c96:	b0 03                	mov    al,0x3
c0001c98:	eb 69                	jmp    c0001d03 <put_utf+0xf7>
c0001c9a:	83 f9 03             	cmp    ecx,0x3
c0001c9d:	76 64                	jbe    c0001d03 <put_utf+0xf7>
c0001c9f:	89 d9                	mov    ecx,ebx
c0001ca1:	0f b7 c3             	movzx  eax,bx
c0001ca4:	66 31 c9             	xor    cx,cx
c0001ca7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001cad:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001cb3:	c1 e9 06             	shr    ecx,0x6
c0001cb6:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001cbc:	77 43                	ja     c0001d01 <put_utf+0xf5>
c0001cbe:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001cc4:	77 3b                	ja     c0001d01 <put_utf+0xf5>
c0001cc6:	09 cb                	or     ebx,ecx
c0001cc8:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cce:	89 d8                	mov    eax,ebx
c0001cd0:	c1 e8 12             	shr    eax,0x12
c0001cd3:	83 c8 f0             	or     eax,0xfffffff0
c0001cd6:	88 02                	mov    BYTE PTR [edx],al
c0001cd8:	89 d8                	mov    eax,ebx
c0001cda:	c1 e8 0c             	shr    eax,0xc
c0001cdd:	83 e0 3f             	and    eax,0x3f
c0001ce0:	83 c8 80             	or     eax,0xffffff80
c0001ce3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ce6:	89 d8                	mov    eax,ebx
c0001ce8:	83 e3 3f             	and    ebx,0x3f
c0001ceb:	c1 e8 06             	shr    eax,0x6
c0001cee:	83 cb 80             	or     ebx,0xffffff80
c0001cf1:	83 e0 3f             	and    eax,0x3f
c0001cf4:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cf7:	83 c8 80             	or     eax,0xffffff80
c0001cfa:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cfd:	b0 04                	mov    al,0x4
c0001cff:	eb 02                	jmp    c0001d03 <put_utf+0xf7>
c0001d01:	31 c0                	xor    eax,eax
c0001d03:	5b                   	pop    ebx
c0001d04:	c3                   	ret    

c0001d05 <clst2sect>:
c0001d05:	89 c1                	mov    ecx,eax
c0001d07:	83 ea 02             	sub    edx,0x2
c0001d0a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001d0d:	83 e8 02             	sub    eax,0x2
c0001d10:	39 d0                	cmp    eax,edx
c0001d12:	76 0d                	jbe    c0001d21 <clst2sect+0x1c>
c0001d14:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d18:	f7 e2                	mul    edx
c0001d1a:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d1d:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d20:	c3                   	ret    
c0001d21:	31 c0                	xor    eax,eax
c0001d23:	31 d2                	xor    edx,edx
c0001d25:	c3                   	ret    

c0001d26 <clmt_clust>:
c0001d26:	57                   	push   edi
c0001d27:	89 cf                	mov    edi,ecx
c0001d29:	56                   	push   esi
c0001d2a:	89 d6                	mov    esi,edx
c0001d2c:	53                   	push   ebx
c0001d2d:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d31:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d34:	89 f2                	mov    edx,esi
c0001d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d38:	c1 ef 09             	shr    edi,0x9
c0001d3b:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d3f:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d42:	89 f9                	mov    ecx,edi
c0001d44:	31 ff                	xor    edi,edi
c0001d46:	57                   	push   edi
c0001d47:	56                   	push   esi
c0001d48:	51                   	push   ecx
c0001d49:	52                   	push   edx
c0001d4a:	e8 81 15 02 00       	call   c00232d0 <__udivdi3>
c0001d4f:	83 c4 10             	add    esp,0x10
c0001d52:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d54:	85 d2                	test   edx,edx
c0001d56:	74 10                	je     c0001d68 <clmt_clust+0x42>
c0001d58:	39 d0                	cmp    eax,edx
c0001d5a:	72 07                	jb     c0001d63 <clmt_clust+0x3d>
c0001d5c:	29 d0                	sub    eax,edx
c0001d5e:	83 c3 08             	add    ebx,0x8
c0001d61:	eb ef                	jmp    c0001d52 <clmt_clust+0x2c>
c0001d63:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d66:	89 c2                	mov    edx,eax
c0001d68:	5b                   	pop    ebx
c0001d69:	89 d0                	mov    eax,edx
c0001d6b:	5e                   	pop    esi
c0001d6c:	5f                   	pop    edi
c0001d6d:	c3                   	ret    

c0001d6e <pick_lfn>:
c0001d6e:	55                   	push   ebp
c0001d6f:	57                   	push   edi
c0001d70:	56                   	push   esi
c0001d71:	89 d6                	mov    esi,edx
c0001d73:	53                   	push   ebx
c0001d74:	89 c3                	mov    ebx,eax
c0001d76:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d79:	e8 ee fc ff ff       	call   c0001a6c <ld_word>
c0001d7e:	66 85 c0             	test   ax,ax
c0001d81:	74 04                	je     c0001d87 <pick_lfn+0x19>
c0001d83:	31 c0                	xor    eax,eax
c0001d85:	eb 5c                	jmp    c0001de3 <pick_lfn+0x75>
c0001d87:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d8a:	bd 01 00 00 00       	mov    ebp,0x1
c0001d8f:	83 e1 bf             	and    ecx,0xffffffbf
c0001d92:	31 ff                	xor    edi,edi
c0001d94:	49                   	dec    ecx
c0001d95:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d98:	0f b6 87 60 5d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffda2a0]
c0001d9f:	01 f0                	add    eax,esi
c0001da1:	e8 c6 fc ff ff       	call   c0001a6c <ld_word>
c0001da6:	66 85 ed             	test   bp,bp
c0001da9:	74 11                	je     c0001dbc <pick_lfn+0x4e>
c0001dab:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db1:	77 d0                	ja     c0001d83 <pick_lfn+0x15>
c0001db3:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001db7:	89 c5                	mov    ebp,eax
c0001db9:	41                   	inc    ecx
c0001dba:	eb 04                	jmp    c0001dc0 <pick_lfn+0x52>
c0001dbc:	66 40                	inc    ax
c0001dbe:	75 c3                	jne    c0001d83 <pick_lfn+0x15>
c0001dc0:	47                   	inc    edi
c0001dc1:	83 ff 0d             	cmp    edi,0xd
c0001dc4:	75 d2                	jne    c0001d98 <pick_lfn+0x2a>
c0001dc6:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001dc9:	74 13                	je     c0001dde <pick_lfn+0x70>
c0001dcb:	66 85 ed             	test   bp,bp
c0001dce:	74 0e                	je     c0001dde <pick_lfn+0x70>
c0001dd0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dd6:	77 ab                	ja     c0001d83 <pick_lfn+0x15>
c0001dd8:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dde:	b8 01 00 00 00       	mov    eax,0x1
c0001de3:	5b                   	pop    ebx
c0001de4:	5e                   	pop    esi
c0001de5:	5f                   	pop    edi
c0001de6:	5d                   	pop    ebp
c0001de7:	c3                   	ret    

c0001de8 <put_lfn>:
c0001de8:	55                   	push   ebp
c0001de9:	31 ed                	xor    ebp,ebp
c0001deb:	57                   	push   edi
c0001dec:	89 d7                	mov    edi,edx
c0001dee:	56                   	push   esi
c0001def:	31 f6                	xor    esi,esi
c0001df1:	53                   	push   ebx
c0001df2:	83 ec 08             	sub    esp,0x8
c0001df5:	89 04 24             	mov    DWORD PTR [esp],eax
c0001df8:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e00:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e06:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e09:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e0c:	31 d2                	xor    edx,edx
c0001e0e:	e8 cb fc ff ff       	call   c0001ade <st_word>
c0001e13:	0f b6 d9             	movzx  ebx,cl
c0001e16:	4b                   	dec    ebx
c0001e17:	6b db 0d             	imul   ebx,ebx,0xd
c0001e1a:	66 83 fe ff          	cmp    si,0xffff
c0001e1e:	74 08                	je     c0001e28 <put_lfn+0x40>
c0001e20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e23:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e27:	43                   	inc    ebx
c0001e28:	0f b6 85 60 5d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffda2a0]
c0001e2f:	0f b7 d6             	movzx  edx,si
c0001e32:	01 f8                	add    eax,edi
c0001e34:	e8 a5 fc ff ff       	call   c0001ade <st_word>
c0001e39:	66 85 f6             	test   si,si
c0001e3c:	75 03                	jne    c0001e41 <put_lfn+0x59>
c0001e3e:	83 ce ff             	or     esi,0xffffffff
c0001e41:	45                   	inc    ebp
c0001e42:	83 fd 0d             	cmp    ebp,0xd
c0001e45:	75 d3                	jne    c0001e1a <put_lfn+0x32>
c0001e47:	66 46                	inc    si
c0001e49:	74 0a                	je     c0001e55 <put_lfn+0x6d>
c0001e4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e4e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e53:	75 09                	jne    c0001e5e <put_lfn+0x76>
c0001e55:	88 c8                	mov    al,cl
c0001e57:	83 c8 40             	or     eax,0x40
c0001e5a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e5e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e62:	88 07                	mov    BYTE PTR [edi],al
c0001e64:	83 c4 08             	add    esp,0x8
c0001e67:	5b                   	pop    ebx
c0001e68:	5e                   	pop    esi
c0001e69:	5f                   	pop    edi
c0001e6a:	5d                   	pop    ebp
c0001e6b:	c3                   	ret    

c0001e6c <gen_numname>:
c0001e6c:	57                   	push   edi
c0001e6d:	89 cf                	mov    edi,ecx
c0001e6f:	56                   	push   esi
c0001e70:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e75:	53                   	push   ebx
c0001e76:	89 c6                	mov    esi,eax
c0001e78:	83 ec 10             	sub    esp,0x10
c0001e7b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e7f:	e8 67 fc ff ff       	call   c0001aeb <mem_cpy>
c0001e84:	83 fb 05             	cmp    ebx,0x5
c0001e87:	76 2d                	jbe    c0001eb6 <gen_numname+0x4a>
c0001e89:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e8c:	66 85 c0             	test   ax,ax
c0001e8f:	74 25                	je     c0001eb6 <gen_numname+0x4a>
c0001e91:	83 c7 02             	add    edi,0x2
c0001e94:	ba 10 00 00 00       	mov    edx,0x10
c0001e99:	01 db                	add    ebx,ebx
c0001e9b:	89 c1                	mov    ecx,eax
c0001e9d:	66 d1 e8             	shr    ax,1
c0001ea0:	83 e1 01             	and    ecx,0x1
c0001ea3:	01 cb                	add    ebx,ecx
c0001ea5:	0f ba e3 10          	bt     ebx,0x10
c0001ea9:	73 06                	jae    c0001eb1 <gen_numname+0x45>
c0001eab:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001eb1:	4a                   	dec    edx
c0001eb2:	75 e5                	jne    c0001e99 <gen_numname+0x2d>
c0001eb4:	eb d3                	jmp    c0001e89 <gen_numname+0x1d>
c0001eb6:	b8 07 00 00 00       	mov    eax,0x7
c0001ebb:	88 d9                	mov    cl,bl
c0001ebd:	83 e1 0f             	and    ecx,0xf
c0001ec0:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ec3:	80 fa 39             	cmp    dl,0x39
c0001ec6:	76 03                	jbe    c0001ecb <gen_numname+0x5f>
c0001ec8:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ecb:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ece:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ed2:	89 da                	mov    edx,ebx
c0001ed4:	c1 ea 04             	shr    edx,0x4
c0001ed7:	83 fb 0f             	cmp    ebx,0xf
c0001eda:	76 06                	jbe    c0001ee2 <gen_numname+0x76>
c0001edc:	89 c8                	mov    eax,ecx
c0001ede:	89 d3                	mov    ebx,edx
c0001ee0:	eb d9                	jmp    c0001ebb <gen_numname+0x4f>
c0001ee2:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ee7:	31 d2                	xor    edx,edx
c0001ee9:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001eec:	8d 04 16             	lea    eax,[esi+edx*1]
c0001eef:	39 ca                	cmp    edx,ecx
c0001ef1:	73 18                	jae    c0001f0b <gen_numname+0x9f>
c0001ef3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ef6:	3c 20                	cmp    al,0x20
c0001ef8:	74 11                	je     c0001f0b <gen_numname+0x9f>
c0001efa:	e8 41 fc ff ff       	call   c0001b40 <dbc_1st>
c0001eff:	85 c0                	test   eax,eax
c0001f01:	74 05                	je     c0001f08 <gen_numname+0x9c>
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	74 04                	je     c0001f0b <gen_numname+0x9f>
c0001f07:	42                   	inc    edx
c0001f08:	42                   	inc    edx
c0001f09:	eb e1                	jmp    c0001eec <gen_numname+0x80>
c0001f0b:	b0 20                	mov    al,0x20
c0001f0d:	83 f9 07             	cmp    ecx,0x7
c0001f10:	77 05                	ja     c0001f17 <gen_numname+0xab>
c0001f12:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f16:	41                   	inc    ecx
c0001f17:	42                   	inc    edx
c0001f18:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f1c:	83 fa 07             	cmp    edx,0x7
c0001f1f:	76 ea                	jbe    c0001f0b <gen_numname+0x9f>
c0001f21:	83 c4 10             	add    esp,0x10
c0001f24:	5b                   	pop    ebx
c0001f25:	5e                   	pop    esi
c0001f26:	5f                   	pop    edi
c0001f27:	c3                   	ret    

c0001f28 <sum_sfn>:
c0001f28:	31 c9                	xor    ecx,ecx
c0001f2a:	31 d2                	xor    edx,edx
c0001f2c:	d0 ca                	ror    dl,1
c0001f2e:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f31:	41                   	inc    ecx
c0001f32:	83 f9 0b             	cmp    ecx,0xb
c0001f35:	75 f5                	jne    c0001f2c <sum_sfn+0x4>
c0001f37:	88 d0                	mov    al,dl
c0001f39:	c3                   	ret    

c0001f3a <xdir_sum>:
c0001f3a:	56                   	push   esi
c0001f3b:	31 c9                	xor    ecx,ecx
c0001f3d:	53                   	push   ebx
c0001f3e:	31 d2                	xor    edx,edx
c0001f40:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f44:	43                   	inc    ebx
c0001f45:	c1 e3 05             	shl    ebx,0x5
c0001f48:	83 fa 02             	cmp    edx,0x2
c0001f4b:	74 0b                	je     c0001f58 <xdir_sum+0x1e>
c0001f4d:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f51:	66 d1 c9             	ror    cx,1
c0001f54:	01 f1                	add    ecx,esi
c0001f56:	eb 05                	jmp    c0001f5d <xdir_sum+0x23>
c0001f58:	ba 03 00 00 00       	mov    edx,0x3
c0001f5d:	42                   	inc    edx
c0001f5e:	39 d3                	cmp    ebx,edx
c0001f60:	77 e6                	ja     c0001f48 <xdir_sum+0xe>
c0001f62:	89 c8                	mov    eax,ecx
c0001f64:	5b                   	pop    ebx
c0001f65:	5e                   	pop    esi
c0001f66:	c3                   	ret    

c0001f67 <xsum32>:
c0001f67:	d1 ca                	ror    edx,1
c0001f69:	0f b6 c0             	movzx  eax,al
c0001f6c:	01 d0                	add    eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <get_xfileinfo>:
c0001f6f:	55                   	push   ebp
c0001f70:	31 c9                	xor    ecx,ecx
c0001f72:	57                   	push   edi
c0001f73:	bd 40 00 00 00       	mov    ebp,0x40
c0001f78:	56                   	push   esi
c0001f79:	31 ff                	xor    edi,edi
c0001f7b:	53                   	push   ebx
c0001f7c:	89 c6                	mov    esi,eax
c0001f7e:	83 ec 0c             	sub    esp,0xc
c0001f81:	89 d3                	mov    ebx,edx
c0001f83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f8a:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f91:	76 6d                	jbe    c0002000 <get_xfileinfo+0x91>
c0001f93:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f99:	76 0b                	jbe    c0001fa6 <get_xfileinfo+0x37>
c0001f9b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f9f:	bf 01 00 00 00       	mov    edi,0x1
c0001fa4:	eb 63                	jmp    c0002009 <get_xfileinfo+0x9a>
c0001fa6:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001fac:	75 03                	jne    c0001fb1 <get_xfileinfo+0x42>
c0001fae:	83 c5 02             	add    ebp,0x2
c0001fb1:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001fb4:	83 c5 02             	add    ebp,0x2
c0001fb7:	e8 b0 fa ff ff       	call   c0001a6c <ld_word>
c0001fbc:	ff 04 24             	inc    DWORD PTR [esp]
c0001fbf:	66 85 c9             	test   cx,cx
c0001fc2:	75 0d                	jne    c0001fd1 <get_xfileinfo+0x62>
c0001fc4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fca:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fcf:	76 2b                	jbe    c0001ffc <get_xfileinfo+0x8d>
c0001fd1:	c1 e1 10             	shl    ecx,0x10
c0001fd4:	ba ff 00 00 00       	mov    edx,0xff
c0001fd9:	0f b7 c0             	movzx  eax,ax
c0001fdc:	29 fa                	sub    edx,edi
c0001fde:	09 c8                	or     eax,ecx
c0001fe0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fe4:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fe8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fec:	e8 1b fc ff ff       	call   c0001c0c <put_utf>
c0001ff1:	84 c0                	test   al,al
c0001ff3:	74 a6                	je     c0001f9b <get_xfileinfo+0x2c>
c0001ff5:	0f b6 c0             	movzx  eax,al
c0001ff8:	01 c7                	add    edi,eax
c0001ffa:	31 c0                	xor    eax,eax
c0001ffc:	89 c1                	mov    ecx,eax
c0001ffe:	eb 8a                	jmp    c0001f8a <get_xfileinfo+0x1b>
c0002000:	85 ff                	test   edi,edi
c0002002:	74 97                	je     c0001f9b <get_xfileinfo+0x2c>
c0002004:	66 85 c9             	test   cx,cx
c0002007:	75 92                	jne    c0001f9b <get_xfileinfo+0x2c>
c0002009:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000200e:	31 c0                	xor    eax,eax
c0002010:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002014:	31 d2                	xor    edx,edx
c0002016:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002019:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000201c:	80 e1 10             	and    cl,0x10
c000201f:	75 08                	jne    c0002029 <get_xfileinfo+0xba>
c0002021:	8d 46 38             	lea    eax,[esi+0x38]
c0002024:	e8 68 fa ff ff       	call   c0001a91 <ld_qword>
c0002029:	89 03                	mov    DWORD PTR [ebx],eax
c000202b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000202e:	8d 46 0c             	lea    eax,[esi+0xc]
c0002031:	e8 36 fa ff ff       	call   c0001a6c <ld_word>
c0002036:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000203a:	8d 46 0e             	lea    eax,[esi+0xe]
c000203d:	e8 2a fa ff ff       	call   c0001a6c <ld_word>
c0002042:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002046:	83 c4 0c             	add    esp,0xc
c0002049:	5b                   	pop    ebx
c000204a:	5e                   	pop    esi
c000204b:	5f                   	pop    edi
c000204c:	5d                   	pop    ebp
c000204d:	c3                   	ret    

c000204e <get_ldnumber>:
c000204e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002050:	85 d2                	test   edx,edx
c0002052:	74 14                	je     c0002068 <get_ldnumber+0x1a>
c0002054:	56                   	push   esi
c0002055:	53                   	push   ebx
c0002056:	89 d3                	mov    ebx,edx
c0002058:	43                   	inc    ebx
c0002059:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000205c:	80 f9 1f             	cmp    cl,0x1f
c000205f:	76 0d                	jbe    c000206e <get_ldnumber+0x20>
c0002061:	80 f9 3a             	cmp    cl,0x3a
c0002064:	75 f2                	jne    c0002058 <get_ldnumber+0xa>
c0002066:	eb 0a                	jmp    c0002072 <get_ldnumber+0x24>
c0002068:	83 c9 ff             	or     ecx,0xffffffff
c000206b:	89 c8                	mov    eax,ecx
c000206d:	c3                   	ret    
c000206e:	31 c9                	xor    ecx,ecx
c0002070:	eb 24                	jmp    c0002096 <get_ldnumber+0x48>
c0002072:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002075:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002078:	80 f9 09             	cmp    cl,0x9
c000207b:	77 16                	ja     c0002093 <get_ldnumber+0x45>
c000207d:	83 c2 02             	add    edx,0x2
c0002080:	83 c9 ff             	or     ecx,0xffffffff
c0002083:	39 d3                	cmp    ebx,edx
c0002085:	75 0f                	jne    c0002096 <get_ldnumber+0x48>
c0002087:	89 f2                	mov    edx,esi
c0002089:	89 18                	mov    DWORD PTR [eax],ebx
c000208b:	0f be ca             	movsx  ecx,dl
c000208e:	83 e9 30             	sub    ecx,0x30
c0002091:	eb 03                	jmp    c0002096 <get_ldnumber+0x48>
c0002093:	83 c9 ff             	or     ecx,0xffffffff
c0002096:	89 c8                	mov    eax,ecx
c0002098:	5b                   	pop    ebx
c0002099:	5e                   	pop    esi
c000209a:	c3                   	ret    

c000209b <crc32>:
c000209b:	56                   	push   esi
c000209c:	89 d6                	mov    esi,edx
c000209e:	53                   	push   ebx
c000209f:	b2 01                	mov    dl,0x1
c00020a1:	bb 08 00 00 00       	mov    ebx,0x8
c00020a6:	89 f1                	mov    ecx,esi
c00020a8:	84 d1                	test   cl,dl
c00020aa:	0f 95 c1             	setne  cl
c00020ad:	0f b6 c9             	movzx  ecx,cl
c00020b0:	31 c1                	xor    ecx,eax
c00020b2:	89 c8                	mov    eax,ecx
c00020b4:	d1 e8                	shr    eax,1
c00020b6:	80 e1 01             	and    cl,0x1
c00020b9:	74 05                	je     c00020c0 <crc32+0x25>
c00020bb:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020c0:	d1 e2                	shl    edx,1
c00020c2:	4b                   	dec    ebx
c00020c3:	75 e1                	jne    c00020a6 <crc32+0xb>
c00020c5:	5b                   	pop    ebx
c00020c6:	5e                   	pop    esi
c00020c7:	c3                   	ret    

c00020c8 <test_gpt_header>:
c00020c8:	55                   	push   ebp
c00020c9:	b9 10 00 00 00       	mov    ecx,0x10
c00020ce:	57                   	push   edi
c00020cf:	ba 60 5c 02 c0       	mov    edx,0xc0025c60
c00020d4:	56                   	push   esi
c00020d5:	31 ff                	xor    edi,edi
c00020d7:	53                   	push   ebx
c00020d8:	89 c3                	mov    ebx,eax
c00020da:	e8 2c fa ff ff       	call   c0001b0b <mem_cmp>
c00020df:	85 c0                	test   eax,eax
c00020e1:	75 55                	jne    c0002138 <test_gpt_header+0x70>
c00020e3:	89 c7                	mov    edi,eax
c00020e5:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020ea:	83 ce ff             	or     esi,0xffffffff
c00020ed:	31 d2                	xor    edx,edx
c00020ef:	83 fd 03             	cmp    ebp,0x3
c00020f2:	76 05                	jbe    c00020f9 <test_gpt_header+0x31>
c00020f4:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020f9:	89 f0                	mov    eax,esi
c00020fb:	45                   	inc    ebp
c00020fc:	e8 9a ff ff ff       	call   c000209b <crc32>
c0002101:	83 fd 4c             	cmp    ebp,0x4c
c0002104:	89 c6                	mov    esi,eax
c0002106:	75 e5                	jne    c00020ed <test_gpt_header+0x25>
c0002108:	8d 43 10             	lea    eax,[ebx+0x10]
c000210b:	f7 d6                	not    esi
c000210d:	e8 67 f9 ff ff       	call   c0001a79 <ld_dword>
c0002112:	39 c6                	cmp    esi,eax
c0002114:	75 22                	jne    c0002138 <test_gpt_header+0x70>
c0002116:	8d 43 54             	lea    eax,[ebx+0x54]
c0002119:	e8 5b f9 ff ff       	call   c0001a79 <ld_dword>
c000211e:	83 c0 80             	add    eax,0xffffff80
c0002121:	75 15                	jne    c0002138 <test_gpt_header+0x70>
c0002123:	8d 43 50             	lea    eax,[ebx+0x50]
c0002126:	e8 4e f9 ff ff       	call   c0001a79 <ld_dword>
c000212b:	3d 80 00 00 00       	cmp    eax,0x80
c0002130:	0f 96 c0             	setbe  al
c0002133:	0f b6 c0             	movzx  eax,al
c0002136:	89 c7                	mov    edi,eax
c0002138:	5b                   	pop    ebx
c0002139:	89 f8                	mov    eax,edi
c000213b:	5e                   	pop    esi
c000213c:	5f                   	pop    edi
c000213d:	5d                   	pop    ebp
c000213e:	c3                   	ret    

c000213f <make_rand>:
c000213f:	56                   	push   esi
c0002140:	85 c0                	test   eax,eax
c0002142:	53                   	push   ebx
c0002143:	75 05                	jne    c000214a <make_rand+0xb>
c0002145:	b8 01 00 00 00       	mov    eax,0x1
c000214a:	01 d1                	add    ecx,edx
c000214c:	bb 08 00 00 00       	mov    ebx,0x8
c0002151:	89 c6                	mov    esi,eax
c0002153:	d1 e8                	shr    eax,1
c0002155:	83 e6 01             	and    esi,0x1
c0002158:	85 f6                	test   esi,esi
c000215a:	74 05                	je     c0002161 <make_rand+0x22>
c000215c:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002161:	4b                   	dec    ebx
c0002162:	75 ed                	jne    c0002151 <make_rand+0x12>
c0002164:	42                   	inc    edx
c0002165:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002168:	39 ca                	cmp    edx,ecx
c000216a:	75 e0                	jne    c000214c <make_rand+0xd>
c000216c:	5b                   	pop    ebx
c000216d:	5e                   	pop    esi
c000216e:	c3                   	ret    

c000216f <validate>:
c000216f:	56                   	push   esi
c0002170:	53                   	push   ebx
c0002171:	89 d6                	mov    esi,edx
c0002173:	51                   	push   ecx
c0002174:	85 c0                	test   eax,eax
c0002176:	75 09                	jne    c0002181 <validate+0x12>
c0002178:	b8 09 00 00 00       	mov    eax,0x9
c000217d:	31 c9                	xor    ecx,ecx
c000217f:	eb 2f                	jmp    c00021b0 <validate+0x41>
c0002181:	89 c3                	mov    ebx,eax
c0002183:	8b 00                	mov    eax,DWORD PTR [eax]
c0002185:	85 c0                	test   eax,eax
c0002187:	74 ef                	je     c0002178 <validate+0x9>
c0002189:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000218c:	74 ea                	je     c0002178 <validate+0x9>
c000218e:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002192:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002196:	75 e0                	jne    c0002178 <validate+0x9>
c0002198:	83 ec 0c             	sub    esp,0xc
c000219b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000219f:	50                   	push   eax
c00021a0:	e8 76 f8 ff ff       	call   c0001a1b <disk_status>
c00021a5:	83 c4 10             	add    esp,0x10
c00021a8:	a8 01                	test   al,0x1
c00021aa:	75 cc                	jne    c0002178 <validate+0x9>
c00021ac:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021ae:	31 c0                	xor    eax,eax
c00021b0:	89 0e                	mov    DWORD PTR [esi],ecx
c00021b2:	5a                   	pop    edx
c00021b3:	5b                   	pop    ebx
c00021b4:	5e                   	pop    esi
c00021b5:	c3                   	ret    

c00021b6 <sync_window>:
c00021b6:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021ba:	0f 84 85 00 00 00    	je     c0002245 <sync_window+0x8f>
c00021c0:	55                   	push   ebp
c00021c1:	8d 68 54             	lea    ebp,[eax+0x54]
c00021c4:	57                   	push   edi
c00021c5:	56                   	push   esi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	83 ec 28             	sub    esp,0x28
c00021cc:	6a 01                	push   0x1
c00021ce:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021d1:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021d4:	55                   	push   ebp
c00021d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021d9:	50                   	push   eax
c00021da:	e8 58 f8 ff ff       	call   c0001a37 <disk_write>
c00021df:	83 c4 20             	add    esp,0x20
c00021e2:	ba 01 00 00 00       	mov    edx,0x1
c00021e7:	85 c0                	test   eax,eax
c00021e9:	75 50                	jne    c000223b <sync_window+0x85>
c00021eb:	31 ff                	xor    edi,edi
c00021ed:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021f0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021f4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021f8:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021fb:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021fe:	89 c6                	mov    esi,eax
c0002200:	89 d7                	mov    edi,edx
c0002202:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002205:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002209:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000220c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002210:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002214:	73 23                	jae    c0002239 <sync_window+0x83>
c0002216:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000221a:	75 1d                	jne    c0002239 <sync_window+0x83>
c000221c:	83 ec 0c             	sub    esp,0xc
c000221f:	6a 01                	push   0x1
c0002221:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002225:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002229:	52                   	push   edx
c000222a:	50                   	push   eax
c000222b:	55                   	push   ebp
c000222c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002230:	50                   	push   eax
c0002231:	e8 01 f8 ff ff       	call   c0001a37 <disk_write>
c0002236:	83 c4 20             	add    esp,0x20
c0002239:	31 d2                	xor    edx,edx
c000223b:	83 c4 1c             	add    esp,0x1c
c000223e:	89 d0                	mov    eax,edx
c0002240:	5b                   	pop    ebx
c0002241:	5e                   	pop    esi
c0002242:	5f                   	pop    edi
c0002243:	5d                   	pop    ebp
c0002244:	c3                   	ret    
c0002245:	31 d2                	xor    edx,edx
c0002247:	89 d0                	mov    eax,edx
c0002249:	c3                   	ret    

c000224a <move_window>:
c000224a:	56                   	push   esi
c000224b:	53                   	push   ebx
c000224c:	89 c3                	mov    ebx,eax
c000224e:	83 ec 14             	sub    esp,0x14
c0002251:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002254:	75 07                	jne    c000225d <move_window+0x13>
c0002256:	31 f6                	xor    esi,esi
c0002258:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000225b:	74 59                	je     c00022b6 <move_window+0x6c>
c000225d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002261:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002265:	89 d8                	mov    eax,ebx
c0002267:	e8 4a ff ff ff       	call   c00021b6 <sync_window>
c000226c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002270:	89 c6                	mov    esi,eax
c0002272:	85 c0                	test   eax,eax
c0002274:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002278:	75 3c                	jne    c00022b6 <move_window+0x6c>
c000227a:	83 ec 0c             	sub    esp,0xc
c000227d:	8d 43 54             	lea    eax,[ebx+0x54]
c0002280:	6a 01                	push   0x1
c0002282:	51                   	push   ecx
c0002283:	52                   	push   edx
c0002284:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002288:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000228c:	50                   	push   eax
c000228d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002291:	50                   	push   eax
c0002292:	e8 8a f7 ff ff       	call   c0001a21 <disk_read>
c0002297:	83 c4 20             	add    esp,0x20
c000229a:	85 c0                	test   eax,eax
c000229c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00022a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00022a4:	74 0a                	je     c00022b0 <move_window+0x66>
c00022a6:	83 ca ff             	or     edx,0xffffffff
c00022a9:	be 01 00 00 00       	mov    esi,0x1
c00022ae:	89 d1                	mov    ecx,edx
c00022b0:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00022b3:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00022b6:	89 f0                	mov    eax,esi
c00022b8:	83 c4 14             	add    esp,0x14
c00022bb:	5b                   	pop    ebx
c00022bc:	5e                   	pop    esi
c00022bd:	c3                   	ret    

c00022be <check_fs>:
c00022be:	53                   	push   ebx
c00022bf:	89 c3                	mov    ebx,eax
c00022c1:	83 ec 08             	sub    esp,0x8
c00022c4:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022c8:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022cf:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022d6:	e8 6f ff ff ff       	call   c000224a <move_window>
c00022db:	ba 04 00 00 00       	mov    edx,0x4
c00022e0:	85 c0                	test   eax,eax
c00022e2:	0f 85 89 00 00 00    	jne    c0002371 <check_fs+0xb3>
c00022e8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022ee:	e8 79 f7 ff ff       	call   c0001a6c <ld_word>
c00022f3:	ba 03 00 00 00       	mov    edx,0x3
c00022f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00022fc:	75 73                	jne    c0002371 <check_fs+0xb3>
c00022fe:	ba 80 5d 02 c0       	mov    edx,0xc0025d80
c0002303:	8d 43 54             	lea    eax,[ebx+0x54]
c0002306:	b9 0b 00 00 00       	mov    ecx,0xb
c000230b:	e8 fb f7 ff ff       	call   c0001b0b <mem_cmp>
c0002310:	ba 01 00 00 00       	mov    edx,0x1
c0002315:	85 c0                	test   eax,eax
c0002317:	74 58                	je     c0002371 <check_fs+0xb3>
c0002319:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000231c:	8d 50 18             	lea    edx,[eax+0x18]
c000231f:	80 fa 01             	cmp    dl,0x1
c0002322:	76 09                	jbe    c000232d <check_fs+0x6f>
c0002324:	ba 02 00 00 00       	mov    edx,0x2
c0002329:	3c eb                	cmp    al,0xeb
c000232b:	75 44                	jne    c0002371 <check_fs+0xb3>
c000232d:	ba c0 8a 02 c0       	mov    edx,0xc0028ac0
c0002332:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002338:	b9 03 00 00 00       	mov    ecx,0x3
c000233d:	e8 c9 f7 ff ff       	call   c0001b0b <mem_cmp>
c0002342:	31 d2                	xor    edx,edx
c0002344:	85 c0                	test   eax,eax
c0002346:	74 29                	je     c0002371 <check_fs+0xb3>
c0002348:	ba 8c 5d 02 c0       	mov    edx,0xc0025d8c
c000234d:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002353:	b9 05 00 00 00       	mov    ecx,0x5
c0002358:	e8 ae f7 ff ff       	call   c0001b0b <mem_cmp>
c000235d:	31 d2                	xor    edx,edx
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0e                	je     c0002371 <check_fs+0xb3>
c0002363:	31 d2                	xor    edx,edx
c0002365:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000236c:	0f 95 c2             	setne  dl
c000236f:	01 d2                	add    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	83 c4 08             	add    esp,0x8
c0002376:	5b                   	pop    ebx
c0002377:	c3                   	ret    

c0002378 <find_volume>:
c0002378:	55                   	push   ebp
c0002379:	31 c9                	xor    ecx,ecx
c000237b:	57                   	push   edi
c000237c:	56                   	push   esi
c000237d:	89 d6                	mov    esi,edx
c000237f:	53                   	push   ebx
c0002380:	31 d2                	xor    edx,edx
c0002382:	83 ec 3c             	sub    esp,0x3c
c0002385:	89 c3                	mov    ebx,eax
c0002387:	e8 32 ff ff ff       	call   c00022be <check_fs>
c000238c:	83 f8 02             	cmp    eax,0x2
c000238f:	74 0e                	je     c000239f <find_volume+0x27>
c0002391:	0f 87 5d 01 00 00    	ja     c00024f4 <find_volume+0x17c>
c0002397:	85 f6                	test   esi,esi
c0002399:	0f 84 55 01 00 00    	je     c00024f4 <find_volume+0x17c>
c000239f:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00023a6:	0f 85 dd 00 00 00    	jne    c0002489 <find_volume+0x111>
c00023ac:	31 c9                	xor    ecx,ecx
c00023ae:	ba 01 00 00 00       	mov    edx,0x1
c00023b3:	89 d8                	mov    eax,ebx
c00023b5:	e8 90 fe ff ff       	call   c000224a <move_window>
c00023ba:	85 c0                	test   eax,eax
c00023bc:	74 0a                	je     c00023c8 <find_volume+0x50>
c00023be:	b8 04 00 00 00       	mov    eax,0x4
c00023c3:	e9 2c 01 00 00       	jmp    c00024f4 <find_volume+0x17c>
c00023c8:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023cb:	89 e8                	mov    eax,ebp
c00023cd:	e8 f6 fc ff ff       	call   c00020c8 <test_gpt_header>
c00023d2:	85 c0                	test   eax,eax
c00023d4:	75 0a                	jne    c00023e0 <find_volume+0x68>
c00023d6:	b8 03 00 00 00       	mov    eax,0x3
c00023db:	e9 14 01 00 00       	jmp    c00024f4 <find_volume+0x17c>
c00023e0:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023e6:	e8 8e f6 ff ff       	call   c0001a79 <ld_dword>
c00023eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023ef:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023f5:	e8 97 f6 ff ff       	call   c0001a91 <ld_qword>
c00023fa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002402:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002406:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000240a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002412:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002416:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000241a:	74 ba                	je     c00023d6 <find_volume+0x5e>
c000241c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002420:	31 c9                	xor    ecx,ecx
c0002422:	c1 e7 07             	shl    edi,0x7
c0002425:	89 d8                	mov    eax,ebx
c0002427:	89 fa                	mov    edx,edi
c0002429:	c1 ea 09             	shr    edx,0x9
c000242c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002430:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002434:	e8 11 fe ff ff       	call   c000224a <move_window>
c0002439:	85 c0                	test   eax,eax
c000243b:	75 81                	jne    c00023be <find_volume+0x46>
c000243d:	81 e7 80 01 00 00    	and    edi,0x180
c0002443:	b9 10 00 00 00       	mov    ecx,0x10
c0002448:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000244c:	ba 70 5d 02 c0       	mov    edx,0xc0025d70
c0002451:	e8 b5 f6 ff ff       	call   c0001b0b <mem_cmp>
c0002456:	85 c0                	test   eax,eax
c0002458:	75 29                	jne    c0002483 <find_volume+0x10b>
c000245a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000245e:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002462:	e8 2a f6 ff ff       	call   c0001a91 <ld_qword>
c0002467:	89 d1                	mov    ecx,edx
c0002469:	89 c2                	mov    edx,eax
c000246b:	89 d8                	mov    eax,ebx
c000246d:	e8 4c fe ff ff       	call   c00022be <check_fs>
c0002472:	85 f6                	test   esi,esi
c0002474:	75 07                	jne    c000247d <find_volume+0x105>
c0002476:	83 f8 01             	cmp    eax,0x1
c0002479:	77 08                	ja     c0002483 <find_volume+0x10b>
c000247b:	eb 77                	jmp    c00024f4 <find_volume+0x17c>
c000247d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002481:	74 71                	je     c00024f4 <find_volume+0x17c>
c0002483:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002487:	eb 89                	jmp    c0002412 <find_volume+0x9a>
c0002489:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000248d:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002493:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002499:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000249d:	89 cd                	mov    ebp,ecx
c000249f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00024a3:	89 f8                	mov    eax,edi
c00024a5:	83 c7 10             	add    edi,0x10
c00024a8:	e8 cc f5 ff ff       	call   c0001a79 <ld_dword>
c00024ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00024b1:	89 01                	mov    DWORD PTR [ecx],eax
c00024b3:	83 c1 04             	add    ecx,0x4
c00024b6:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024ba:	75 e3                	jne    c000249f <find_volume+0x127>
c00024bc:	31 ff                	xor    edi,edi
c00024be:	85 f6                	test   esi,esi
c00024c0:	74 03                	je     c00024c5 <find_volume+0x14d>
c00024c2:	8d 7e ff             	lea    edi,[esi-0x1]
c00024c5:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024c9:	85 d2                	test   edx,edx
c00024cb:	74 14                	je     c00024e1 <find_volume+0x169>
c00024cd:	31 c9                	xor    ecx,ecx
c00024cf:	89 d8                	mov    eax,ebx
c00024d1:	e8 e8 fd ff ff       	call   c00022be <check_fs>
c00024d6:	83 f8 01             	cmp    eax,0x1
c00024d9:	76 19                	jbe    c00024f4 <find_volume+0x17c>
c00024db:	85 f6                	test   esi,esi
c00024dd:	74 0f                	je     c00024ee <find_volume+0x176>
c00024df:	eb 13                	jmp    c00024f4 <find_volume+0x17c>
c00024e1:	85 f6                	test   esi,esi
c00024e3:	0f 85 ed fe ff ff    	jne    c00023d6 <find_volume+0x5e>
c00024e9:	b8 03 00 00 00       	mov    eax,0x3
c00024ee:	47                   	inc    edi
c00024ef:	83 ff 03             	cmp    edi,0x3
c00024f2:	76 d1                	jbe    c00024c5 <find_volume+0x14d>
c00024f4:	83 c4 3c             	add    esp,0x3c
c00024f7:	5b                   	pop    ebx
c00024f8:	5e                   	pop    esi
c00024f9:	5f                   	pop    edi
c00024fa:	5d                   	pop    ebp
c00024fb:	c3                   	ret    

c00024fc <mount_volume>:
c00024fc:	55                   	push   ebp
c00024fd:	57                   	push   edi
c00024fe:	89 cf                	mov    edi,ecx
c0002500:	56                   	push   esi
c0002501:	53                   	push   ebx
c0002502:	bb 0b 00 00 00       	mov    ebx,0xb
c0002507:	83 ec 3c             	sub    esp,0x3c
c000250a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002510:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002514:	e8 35 fb ff ff       	call   c000204e <get_ldnumber>
c0002519:	85 c0                	test   eax,eax
c000251b:	0f 88 3a 05 00 00    	js     c0002a5b <mount_volume+0x55f>
c0002521:	8b 2c 85 80 a4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5b80]
c0002528:	89 c6                	mov    esi,eax
c000252a:	bb 0c 00 00 00       	mov    ebx,0xc
c000252f:	85 ed                	test   ebp,ebp
c0002531:	0f 84 24 05 00 00    	je     c0002a5b <mount_volume+0x55f>
c0002537:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000253b:	83 e7 fe             	and    edi,0xfffffffe
c000253e:	89 2a                	mov    DWORD PTR [edx],ebp
c0002540:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002544:	74 32                	je     c0002578 <mount_volume+0x7c>
c0002546:	83 ec 0c             	sub    esp,0xc
c0002549:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000254d:	50                   	push   eax
c000254e:	e8 c8 f4 ff ff       	call   c0001a1b <disk_status>
c0002553:	83 c4 10             	add    esp,0x10
c0002556:	a8 01                	test   al,0x1
c0002558:	75 1e                	jne    c0002578 <mount_volume+0x7c>
c000255a:	31 db                	xor    ebx,ebx
c000255c:	89 f9                	mov    ecx,edi
c000255e:	84 c9                	test   cl,cl
c0002560:	0f 84 f5 04 00 00    	je     c0002a5b <mount_volume+0x55f>
c0002566:	a8 04                	test   al,0x4
c0002568:	0f 84 ed 04 00 00    	je     c0002a5b <mount_volume+0x55f>
c000256e:	bb 0a 00 00 00       	mov    ebx,0xa
c0002573:	e9 e3 04 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c0002578:	83 ec 0c             	sub    esp,0xc
c000257b:	89 f0                	mov    eax,esi
c000257d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002581:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002584:	0f b6 f0             	movzx  esi,al
c0002587:	bb 03 00 00 00       	mov    ebx,0x3
c000258c:	56                   	push   esi
c000258d:	e8 8c f4 ff ff       	call   c0001a1e <disk_initialize>
c0002592:	83 c4 10             	add    esp,0x10
c0002595:	a8 01                	test   al,0x1
c0002597:	0f 85 be 04 00 00    	jne    c0002a5b <mount_volume+0x55f>
c000259d:	89 f9                	mov    ecx,edi
c000259f:	84 c9                	test   cl,cl
c00025a1:	74 04                	je     c00025a7 <mount_volume+0xab>
c00025a3:	a8 04                	test   al,0x4
c00025a5:	75 c7                	jne    c000256e <mount_volume+0x72>
c00025a7:	31 d2                	xor    edx,edx
c00025a9:	89 e8                	mov    eax,ebp
c00025ab:	e8 c8 fd ff ff       	call   c0002378 <find_volume>
c00025b0:	83 f8 04             	cmp    eax,0x4
c00025b3:	75 0a                	jne    c00025bf <mount_volume+0xc3>
c00025b5:	bb 01 00 00 00       	mov    ebx,0x1
c00025ba:	e9 9c 04 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c00025bf:	83 f8 01             	cmp    eax,0x1
c00025c2:	76 0a                	jbe    c00025ce <mount_volume+0xd2>
c00025c4:	bb 0d 00 00 00       	mov    ebx,0xd
c00025c9:	e9 8d 04 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c00025ce:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025d1:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025dc:	75 17                	jne    c00025f5 <mount_volume+0xf9>
c00025de:	b8 0b 00 00 00       	mov    eax,0xb
c00025e3:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025e8:	75 da                	jne    c00025c4 <mount_volume+0xc8>
c00025ea:	40                   	inc    eax
c00025eb:	83 f8 40             	cmp    eax,0x40
c00025ee:	75 f3                	jne    c00025e3 <mount_volume+0xe7>
c00025f0:	e9 5a 02 00 00       	jmp    c000284f <mount_volume+0x353>
c00025f5:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025f8:	e8 6f f4 ff ff       	call   c0001a6c <ld_word>
c00025fd:	66 3d 00 02          	cmp    ax,0x200
c0002601:	75 c1                	jne    c00025c4 <mount_volume+0xc8>
c0002603:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002606:	e8 61 f4 ff ff       	call   c0001a6c <ld_word>
c000260b:	0f b7 c0             	movzx  eax,ax
c000260e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002612:	85 c0                	test   eax,eax
c0002614:	75 0c                	jne    c0002622 <mount_volume+0x126>
c0002616:	8d 45 78             	lea    eax,[ebp+0x78]
c0002619:	e8 5b f4 ff ff       	call   c0001a79 <ld_dword>
c000261e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002626:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002629:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000262c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002630:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002633:	48                   	dec    eax
c0002634:	3c 01                	cmp    al,0x1
c0002636:	77 8c                	ja     c00025c4 <mount_volume+0xc8>
c0002638:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000263c:	89 c3                	mov    ebx,eax
c000263e:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002642:	66 85 c0             	test   ax,ax
c0002645:	0f 84 79 ff ff ff    	je     c00025c4 <mount_volume+0xc8>
c000264b:	8d 40 ff             	lea    eax,[eax-0x1]
c000264e:	85 d8                	test   eax,ebx
c0002650:	0f 85 6e ff ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002656:	8d 45 65             	lea    eax,[ebp+0x65]
c0002659:	e8 0e f4 ff ff       	call   c0001a6c <ld_word>
c000265e:	89 c7                	mov    edi,eax
c0002660:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002664:	a8 0f                	test   al,0xf
c0002666:	0f 85 58 ff ff ff    	jne    c00025c4 <mount_volume+0xc8>
c000266c:	8d 45 67             	lea    eax,[ebp+0x67]
c000266f:	e8 f8 f3 ff ff       	call   c0001a6c <ld_word>
c0002674:	0f b7 f0             	movzx  esi,ax
c0002677:	85 f6                	test   esi,esi
c0002679:	75 0a                	jne    c0002685 <mount_volume+0x189>
c000267b:	8d 45 74             	lea    eax,[ebp+0x74]
c000267e:	e8 f6 f3 ff ff       	call   c0001a79 <ld_dword>
c0002683:	89 c6                	mov    esi,eax
c0002685:	8d 45 62             	lea    eax,[ebp+0x62]
c0002688:	e8 df f3 ff ff       	call   c0001a6c <ld_word>
c000268d:	66 85 c0             	test   ax,ax
c0002690:	0f 84 2e ff ff ff    	je     c00025c4 <mount_volume+0xc8>
c0002696:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000269b:	0f b7 c8             	movzx  ecx,ax
c000269e:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00026a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00026a7:	89 fa                	mov    edx,edi
c00026a9:	66 c1 ea 04          	shr    dx,0x4
c00026ad:	0f b7 d2             	movzx  edx,dx
c00026b0:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00026b4:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00026b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00026bb:	39 c6                	cmp    esi,eax
c00026bd:	0f 82 01 ff ff ff    	jb     c00025c4 <mount_volume+0xc8>
c00026c3:	29 c6                	sub    esi,eax
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	89 f0                	mov    eax,esi
c00026c9:	f7 f3                	div    ebx
c00026cb:	39 de                	cmp    esi,ebx
c00026cd:	0f 82 f1 fe ff ff    	jb     c00025c4 <mount_volume+0xc8>
c00026d3:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026d8:	0f 87 e6 fe ff ff    	ja     c00025c4 <mount_volume+0xc8>
c00026de:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026e3:	0f 86 63 03 00 00    	jbe    c0002a4c <mount_volume+0x550>
c00026e9:	bb 03 00 00 00       	mov    ebx,0x3
c00026ee:	8d 70 02             	lea    esi,[eax+0x2]
c00026f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026f9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026fc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026ff:	31 d2                	xor    edx,edx
c0002701:	89 c8                	mov    eax,ecx
c0002703:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002706:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000270a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000270e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002712:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002716:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002719:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000271c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002720:	31 d2                	xor    edx,edx
c0002722:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002726:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000272a:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000272d:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002730:	83 fb 03             	cmp    ebx,0x3
c0002733:	75 2b                	jne    c0002760 <mount_volume+0x264>
c0002735:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002738:	e8 2f f3 ff ff       	call   c0001a6c <ld_word>
c000273d:	66 09 c7             	or     di,ax
c0002740:	0f 85 7e fe ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002746:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000274c:	c1 e6 02             	shl    esi,0x2
c000274f:	e8 25 f3 ff ff       	call   c0001a79 <ld_dword>
c0002754:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000275b:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000275e:	eb 30                	jmp    c0002790 <mount_volume+0x294>
c0002760:	66 85 ff             	test   di,di
c0002763:	0f 84 5b fe ff ff    	je     c00025c4 <mount_volume+0xc8>
c0002769:	31 d2                	xor    edx,edx
c000276b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000276f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002773:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002777:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000277a:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000277d:	83 fb 02             	cmp    ebx,0x2
c0002780:	75 04                	jne    c0002786 <mount_volume+0x28a>
c0002782:	01 f6                	add    esi,esi
c0002784:	eb 0a                	jmp    c0002790 <mount_volume+0x294>
c0002786:	8d 04 76             	lea    eax,[esi+esi*2]
c0002789:	83 e6 01             	and    esi,0x1
c000278c:	d1 e8                	shr    eax,1
c000278e:	01 c6                	add    esi,eax
c0002790:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002796:	c1 ee 09             	shr    esi,0x9
c0002799:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000279d:	0f 87 21 fe ff ff    	ja     c00025c4 <mount_volume+0xc8>
c00027a3:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00027aa:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00027b1:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00027b5:	83 fb 03             	cmp    ebx,0x3
c00027b8:	75 7a                	jne    c0002834 <mount_volume+0x338>
c00027ba:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027c0:	e8 a7 f2 ff ff       	call   c0001a6c <ld_word>
c00027c5:	66 48                	dec    ax
c00027c7:	75 6b                	jne    c0002834 <mount_volume+0x338>
c00027c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027d1:	83 c2 01             	add    edx,0x1
c00027d4:	89 e8                	mov    eax,ebp
c00027d6:	83 d1 00             	adc    ecx,0x0
c00027d9:	e8 6c fa ff ff       	call   c000224a <move_window>
c00027de:	85 c0                	test   eax,eax
c00027e0:	75 52                	jne    c0002834 <mount_volume+0x338>
c00027e2:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027e6:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027ec:	e8 7b f2 ff ff       	call   c0001a6c <ld_word>
c00027f1:	66 3d 55 aa          	cmp    ax,0xaa55
c00027f5:	75 3d                	jne    c0002834 <mount_volume+0x338>
c00027f7:	8d 45 54             	lea    eax,[ebp+0x54]
c00027fa:	e8 7a f2 ff ff       	call   c0001a79 <ld_dword>
c00027ff:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002804:	75 2e                	jne    c0002834 <mount_volume+0x338>
c0002806:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000280c:	e8 68 f2 ff ff       	call   c0001a79 <ld_dword>
c0002811:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002816:	75 1c                	jne    c0002834 <mount_volume+0x338>
c0002818:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000281e:	e8 56 f2 ff ff       	call   c0001a79 <ld_dword>
c0002823:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002826:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000282c:	e8 48 f2 ff ff       	call   c0001a79 <ld_dword>
c0002831:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002834:	66 a1 60 a4 02 c0    	mov    ax,ds:0xc002a460
c000283a:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000283d:	40                   	inc    eax
c000283e:	31 db                	xor    ebx,ebx
c0002840:	66 a3 60 a4 02 c0    	mov    ds:0xc002a460,ax
c0002846:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000284a:	e9 0c 02 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c000284f:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002855:	e8 12 f2 ff ff       	call   c0001a6c <ld_word>
c000285a:	66 3d 00 01          	cmp    ax,0x100
c000285e:	0f 85 60 fd ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002864:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000286b:	0f 85 53 fd ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002871:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002877:	e8 15 f2 ff ff       	call   c0001a91 <ld_qword>
c000287c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002880:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002884:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000288a:	e8 ea f1 ff ff       	call   c0001a79 <ld_dword>
c000288f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002892:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002898:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000289b:	fe c8                	dec    al
c000289d:	0f 85 21 fd ff ff    	jne    c00025c4 <mount_volume+0xc8>
c00028a3:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00028aa:	bb 01 00 00 00       	mov    ebx,0x1
c00028af:	d3 e3                	shl    ebx,cl
c00028b1:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00028b5:	66 85 db             	test   bx,bx
c00028b8:	0f 84 06 fd ff ff    	je     c00025c4 <mount_volume+0xc8>
c00028be:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028c4:	e8 b0 f1 ff ff       	call   c0001a79 <ld_dword>
c00028c9:	89 c6                	mov    esi,eax
c00028cb:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028d0:	0f 87 ee fc ff ff    	ja     c00025c4 <mount_volume+0xc8>
c00028d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028da:	8d 40 02             	lea    eax,[eax+0x2]
c00028dd:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028e0:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028e7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ea:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028f0:	e8 84 f1 ff ff       	call   c0001a79 <ld_dword>
c00028f5:	31 d2                	xor    edx,edx
c00028f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002903:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002907:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000290a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000290d:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002913:	e8 61 f1 ff ff       	call   c0001a79 <ld_dword>
c0002918:	31 d2                	xor    edx,edx
c000291a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000291e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002922:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002926:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002929:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000292c:	0f b7 c3             	movzx  eax,bx
c000292f:	31 d2                	xor    edx,edx
c0002931:	0f af f0             	imul   esi,eax
c0002934:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002938:	89 f0                	mov    eax,esi
c000293a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000293e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002942:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002946:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000294a:	39 c1                	cmp    ecx,eax
c000294c:	89 df                	mov    edi,ebx
c000294e:	19 d7                	sbb    edi,edx
c0002950:	0f 82 6e fc ff ff    	jb     c00025c4 <mount_volume+0xc8>
c0002956:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000295c:	31 db                	xor    ebx,ebx
c000295e:	e8 16 f1 ff ff       	call   c0001a79 <ld_dword>
c0002963:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000296a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002975:	85 db                	test   ebx,ebx
c0002977:	75 39                	jne    c00029b2 <mount_volume+0x4b6>
c0002979:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000297d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002981:	0f 86 3d fc ff ff    	jbe    c00025c4 <mount_volume+0xc8>
c0002987:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000298a:	31 ff                	xor    edi,edi
c000298c:	89 e8                	mov    eax,ebp
c000298e:	e8 72 f3 ff ff       	call   c0001d05 <clst2sect>
c0002993:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002997:	01 c6                	add    esi,eax
c0002999:	89 e8                	mov    eax,ebp
c000299b:	11 d7                	adc    edi,edx
c000299d:	89 f2                	mov    edx,esi
c000299f:	89 f9                	mov    ecx,edi
c00029a1:	e8 a4 f8 ff ff       	call   c000224a <move_window>
c00029a6:	85 c0                	test   eax,eax
c00029a8:	0f 85 07 fc ff ff    	jne    c00025b5 <mount_volume+0xb9>
c00029ae:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00029b2:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00029b7:	74 0b                	je     c00029c4 <mount_volume+0x4c8>
c00029b9:	83 c3 20             	add    ebx,0x20
c00029bc:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029c2:	eb b1                	jmp    c0002975 <mount_volume+0x479>
c00029c4:	8d 75 54             	lea    esi,[ebp+0x54]
c00029c7:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029cb:	e8 a9 f0 ff ff       	call   c0001a79 <ld_dword>
c00029d0:	89 c3                	mov    ebx,eax
c00029d2:	83 f8 01             	cmp    eax,0x1
c00029d5:	0f 86 e9 fb ff ff    	jbe    c00025c4 <mount_volume+0xc8>
c00029db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029de:	0f 86 e0 fb ff ff    	jbe    c00025c4 <mount_volume+0xc8>
c00029e4:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029e7:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029eb:	0f af c2             	imul   eax,edx
c00029ee:	31 d2                	xor    edx,edx
c00029f0:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029f3:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029f6:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029f9:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029fc:	31 c9                	xor    ecx,ecx
c00029fe:	89 da                	mov    edx,ebx
c0002a00:	89 e8                	mov    eax,ebp
c0002a02:	c1 ea 07             	shr    edx,0x7
c0002a05:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002a08:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002a0b:	e8 3a f8 ff ff       	call   c000224a <move_window>
c0002a10:	85 c0                	test   eax,eax
c0002a12:	0f 85 9d fb ff ff    	jne    c00025b5 <mount_volume+0xb9>
c0002a18:	89 d8                	mov    eax,ebx
c0002a1a:	83 e0 7f             	and    eax,0x7f
c0002a1d:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a20:	e8 54 f0 ff ff       	call   c0001a79 <ld_dword>
c0002a25:	83 f8 ff             	cmp    eax,0xffffffff
c0002a28:	74 0a                	je     c0002a34 <mount_volume+0x538>
c0002a2a:	43                   	inc    ebx
c0002a2b:	39 d8                	cmp    eax,ebx
c0002a2d:	74 cd                	je     c00029fc <mount_volume+0x500>
c0002a2f:	e9 90 fb ff ff       	jmp    c00025c4 <mount_volume+0xc8>
c0002a34:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a3b:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a42:	bb 04 00 00 00       	mov    ebx,0x4
c0002a47:	e9 e8 fd ff ff       	jmp    c0002834 <mount_volume+0x338>
c0002a4c:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a51:	19 db                	sbb    ebx,ebx
c0002a53:	83 c3 02             	add    ebx,0x2
c0002a56:	e9 93 fc ff ff       	jmp    c00026ee <mount_volume+0x1f2>
c0002a5b:	83 c4 3c             	add    esp,0x3c
c0002a5e:	89 d8                	mov    eax,ebx
c0002a60:	5b                   	pop    ebx
c0002a61:	5e                   	pop    esi
c0002a62:	5f                   	pop    edi
c0002a63:	5d                   	pop    ebp
c0002a64:	c3                   	ret    

c0002a65 <find_bitmap>:
c0002a65:	55                   	push   ebp
c0002a66:	57                   	push   edi
c0002a67:	89 c7                	mov    edi,eax
c0002a69:	56                   	push   esi
c0002a6a:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a6d:	53                   	push   ebx
c0002a6e:	83 ec 1c             	sub    esp,0x1c
c0002a71:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a78:	83 e8 02             	sub    eax,0x2
c0002a7b:	39 f0                	cmp    eax,esi
c0002a7d:	77 02                	ja     c0002a81 <find_bitmap+0x1c>
c0002a7f:	31 f6                	xor    esi,esi
c0002a81:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a85:	89 f3                	mov    ebx,esi
c0002a87:	31 ed                	xor    ebp,ebp
c0002a89:	31 c9                	xor    ecx,ecx
c0002a8b:	89 da                	mov    edx,ebx
c0002a8d:	89 f8                	mov    eax,edi
c0002a8f:	c1 ea 0c             	shr    edx,0xc
c0002a92:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a95:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a98:	e8 ad f7 ff ff       	call   c000224a <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	75 68                	jne    c0002b09 <find_bitmap+0xa4>
c0002aa1:	89 da                	mov    edx,ebx
c0002aa3:	89 d9                	mov    ecx,ebx
c0002aa5:	c1 ea 03             	shr    edx,0x3
c0002aa8:	83 e1 07             	and    ecx,0x7
c0002aab:	b8 01 00 00 00       	mov    eax,0x1
c0002ab0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ab6:	d3 e0                	shl    eax,cl
c0002ab8:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002abb:	83 e9 02             	sub    ecx,0x2
c0002abe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ac2:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002ac6:	43                   	inc    ebx
c0002ac7:	21 c1                	and    ecx,eax
c0002ac9:	d1 e0                	shl    eax,1
c0002acb:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002acf:	77 09                	ja     c0002ada <find_bitmap+0x75>
c0002ad1:	31 db                	xor    ebx,ebx
c0002ad3:	ba 00 02 00 00       	mov    edx,0x200
c0002ad8:	31 c0                	xor    eax,eax
c0002ada:	84 c9                	test   cl,cl
c0002adc:	75 10                	jne    c0002aee <find_bitmap+0x89>
c0002ade:	45                   	inc    ebp
c0002adf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ae3:	75 0f                	jne    c0002af4 <find_bitmap+0x8f>
c0002ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ae9:	83 c0 02             	add    eax,0x2
c0002aec:	eb 22                	jmp    c0002b10 <find_bitmap+0xab>
c0002aee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002af2:	31 ed                	xor    ebp,ebp
c0002af4:	39 de                	cmp    esi,ebx
c0002af6:	74 16                	je     c0002b0e <find_bitmap+0xa9>
c0002af8:	84 c0                	test   al,al
c0002afa:	75 c6                	jne    c0002ac2 <find_bitmap+0x5d>
c0002afc:	42                   	inc    edx
c0002afd:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002b03:	77 84                	ja     c0002a89 <find_bitmap+0x24>
c0002b05:	b0 01                	mov    al,0x1
c0002b07:	eb b9                	jmp    c0002ac2 <find_bitmap+0x5d>
c0002b09:	83 c8 ff             	or     eax,0xffffffff
c0002b0c:	eb 02                	jmp    c0002b10 <find_bitmap+0xab>
c0002b0e:	31 c0                	xor    eax,eax
c0002b10:	83 c4 1c             	add    esp,0x1c
c0002b13:	5b                   	pop    ebx
c0002b14:	5e                   	pop    esi
c0002b15:	5f                   	pop    edi
c0002b16:	5d                   	pop    ebp
c0002b17:	c3                   	ret    

c0002b18 <change_bitmap>:
c0002b18:	55                   	push   ebp
c0002b19:	89 cd                	mov    ebp,ecx
c0002b1b:	57                   	push   edi
c0002b1c:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b1f:	56                   	push   esi
c0002b20:	89 c7                	mov    edi,eax
c0002b22:	53                   	push   ebx
c0002b23:	89 c8                	mov    eax,ecx
c0002b25:	83 ec 1c             	sub    esp,0x1c
c0002b28:	31 d2                	xor    edx,edx
c0002b2a:	89 ce                	mov    esi,ecx
c0002b2c:	c1 e8 0c             	shr    eax,0xc
c0002b2f:	bb 01 00 00 00       	mov    ebx,0x1
c0002b34:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b37:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b3a:	c1 ee 03             	shr    esi,0x3
c0002b3d:	83 e1 07             	and    ecx,0x7
c0002b40:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b46:	d3 e3                	shl    ebx,cl
c0002b48:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b4c:	89 c1                	mov    ecx,eax
c0002b4e:	89 d3                	mov    ebx,edx
c0002b50:	83 c1 01             	add    ecx,0x1
c0002b53:	83 d3 00             	adc    ebx,0x0
c0002b56:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b5a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b5e:	89 d1                	mov    ecx,edx
c0002b60:	89 c2                	mov    edx,eax
c0002b62:	89 f8                	mov    eax,edi
c0002b64:	e8 e1 f6 ff ff       	call   c000224a <move_window>
c0002b69:	89 c1                	mov    ecx,eax
c0002b6b:	85 c0                	test   eax,eax
c0002b6d:	75 48                	jne    c0002bb7 <change_bitmap+0x9f>
c0002b6f:	31 d2                	xor    edx,edx
c0002b71:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b75:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b79:	0f 95 c2             	setne  dl
c0002b7c:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b80:	74 3c                	je     c0002bbe <change_bitmap+0xa6>
c0002b82:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b86:	4d                   	dec    ebp
c0002b87:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b8b:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b8f:	74 32                	je     c0002bc3 <change_bitmap+0xab>
c0002b91:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b95:	75 d8                	jne    c0002b6f <change_bitmap+0x57>
c0002b97:	8d 46 01             	lea    eax,[esi+0x1]
c0002b9a:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b9f:	89 c3                	mov    ebx,eax
c0002ba1:	31 f6                	xor    esi,esi
c0002ba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bab:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002bb1:	74 99                	je     c0002b4c <change_bitmap+0x34>
c0002bb3:	89 de                	mov    esi,ebx
c0002bb5:	eb b8                	jmp    c0002b6f <change_bitmap+0x57>
c0002bb7:	b9 01 00 00 00       	mov    ecx,0x1
c0002bbc:	eb 05                	jmp    c0002bc3 <change_bitmap+0xab>
c0002bbe:	b9 02 00 00 00       	mov    ecx,0x2
c0002bc3:	83 c4 1c             	add    esp,0x1c
c0002bc6:	89 c8                	mov    eax,ecx
c0002bc8:	5b                   	pop    ebx
c0002bc9:	5e                   	pop    esi
c0002bca:	5f                   	pop    edi
c0002bcb:	5d                   	pop    ebp
c0002bcc:	c3                   	ret    

c0002bcd <put_fat>:
c0002bcd:	83 fa 01             	cmp    edx,0x1
c0002bd0:	0f 86 7b 01 00 00    	jbe    c0002d51 <put_fat+0x184>
c0002bd6:	55                   	push   ebp
c0002bd7:	57                   	push   edi
c0002bd8:	89 cf                	mov    edi,ecx
c0002bda:	56                   	push   esi
c0002bdb:	b9 02 00 00 00       	mov    ecx,0x2
c0002be0:	53                   	push   ebx
c0002be1:	89 c6                	mov    esi,eax
c0002be3:	83 ec 1c             	sub    esp,0x1c
c0002be6:	89 d3                	mov    ebx,edx
c0002be8:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002beb:	0f 86 68 01 00 00    	jbe    c0002d59 <put_fat+0x18c>
c0002bf1:	8a 00                	mov    al,BYTE PTR [eax]
c0002bf3:	3c 02                	cmp    al,0x2
c0002bf5:	0f 84 c7 00 00 00    	je     c0002cc2 <put_fat+0xf5>
c0002bfb:	77 09                	ja     c0002c06 <put_fat+0x39>
c0002bfd:	fe c8                	dec    al
c0002bff:	74 17                	je     c0002c18 <put_fat+0x4b>
c0002c01:	e9 53 01 00 00       	jmp    c0002d59 <put_fat+0x18c>
c0002c06:	b9 02 00 00 00       	mov    ecx,0x2
c0002c0b:	3c 04                	cmp    al,0x4
c0002c0d:	0f 86 e1 00 00 00    	jbe    c0002cf4 <put_fat+0x127>
c0002c13:	e9 41 01 00 00       	jmp    c0002d59 <put_fat+0x18c>
c0002c18:	89 d5                	mov    ebp,edx
c0002c1a:	31 c9                	xor    ecx,ecx
c0002c1c:	d1 ed                	shr    ebp,1
c0002c1e:	89 f0                	mov    eax,esi
c0002c20:	01 d5                	add    ebp,edx
c0002c22:	89 ea                	mov    edx,ebp
c0002c24:	c1 ea 09             	shr    edx,0x9
c0002c27:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c2a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c2d:	e8 18 f6 ff ff       	call   c000224a <move_window>
c0002c32:	89 c1                	mov    ecx,eax
c0002c34:	85 c0                	test   eax,eax
c0002c36:	0f 85 1d 01 00 00    	jne    c0002d59 <put_fat+0x18c>
c0002c3c:	8d 46 54             	lea    eax,[esi+0x54]
c0002c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c43:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c46:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c50:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c54:	89 f8                	mov    eax,edi
c0002c56:	83 e3 01             	and    ebx,0x1
c0002c59:	74 0d                	je     c0002c68 <put_fat+0x9b>
c0002c5b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c5e:	89 fa                	mov    edx,edi
c0002c60:	83 e0 0f             	and    eax,0xf
c0002c63:	c1 e2 04             	shl    edx,0x4
c0002c66:	09 d0                	or     eax,edx
c0002c68:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c6f:	31 c9                	xor    ecx,ecx
c0002c71:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c75:	c1 ea 09             	shr    edx,0x9
c0002c78:	89 f0                	mov    eax,esi
c0002c7a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c7d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c80:	e8 c5 f5 ff ff       	call   c000224a <move_window>
c0002c85:	89 c1                	mov    ecx,eax
c0002c87:	85 c0                	test   eax,eax
c0002c89:	0f 85 ca 00 00 00    	jne    c0002d59 <put_fat+0x18c>
c0002c8f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c93:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c99:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c9d:	85 db                	test   ebx,ebx
c0002c9f:	74 07                	je     c0002ca8 <put_fat+0xdb>
c0002ca1:	c1 ef 04             	shr    edi,0x4
c0002ca4:	89 fa                	mov    edx,edi
c0002ca6:	eb 0e                	jmp    c0002cb6 <put_fat+0xe9>
c0002ca8:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002cab:	c1 ef 08             	shr    edi,0x8
c0002cae:	83 e2 f0             	and    edx,0xfffffff0
c0002cb1:	83 e7 0f             	and    edi,0xf
c0002cb4:	09 fa                	or     edx,edi
c0002cb6:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002cb9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cbd:	e9 97 00 00 00       	jmp    c0002d59 <put_fat+0x18c>
c0002cc2:	31 c9                	xor    ecx,ecx
c0002cc4:	c1 ea 08             	shr    edx,0x8
c0002cc7:	89 f0                	mov    eax,esi
c0002cc9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ccc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ccf:	e8 76 f5 ff ff       	call   c000224a <move_window>
c0002cd4:	89 c1                	mov    ecx,eax
c0002cd6:	85 c0                	test   eax,eax
c0002cd8:	75 7f                	jne    c0002d59 <put_fat+0x18c>
c0002cda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cde:	01 db                	add    ebx,ebx
c0002ce0:	0f b7 d7             	movzx  edx,di
c0002ce3:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ce9:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ced:	e8 ec ed ff ff       	call   c0001ade <st_word>
c0002cf2:	eb 53                	jmp    c0002d47 <put_fat+0x17a>
c0002cf4:	31 c9                	xor    ecx,ecx
c0002cf6:	c1 ea 07             	shr    edx,0x7
c0002cf9:	89 f0                	mov    eax,esi
c0002cfb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cfe:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d01:	e8 44 f5 ff ff       	call   c000224a <move_window>
c0002d06:	89 c1                	mov    ecx,eax
c0002d08:	85 c0                	test   eax,eax
c0002d0a:	75 4d                	jne    c0002d59 <put_fat+0x18c>
c0002d0c:	c1 e3 02             	shl    ebx,0x2
c0002d0f:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002d15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002d18:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d1c:	74 1c                	je     c0002d3a <put_fat+0x16d>
c0002d1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d22:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d28:	89 d8                	mov    eax,ebx
c0002d2a:	e8 4a ed ff ff       	call   c0001a79 <ld_dword>
c0002d2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d33:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d38:	09 c7                	or     edi,eax
c0002d3a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d3e:	89 fa                	mov    edx,edi
c0002d40:	89 d8                	mov    eax,ebx
c0002d42:	e8 9b ed ff ff       	call   c0001ae2 <st_dword>
c0002d47:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d4b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d4f:	eb 08                	jmp    c0002d59 <put_fat+0x18c>
c0002d51:	b9 02 00 00 00       	mov    ecx,0x2
c0002d56:	89 c8                	mov    eax,ecx
c0002d58:	c3                   	ret    
c0002d59:	83 c4 1c             	add    esp,0x1c
c0002d5c:	89 c8                	mov    eax,ecx
c0002d5e:	5b                   	pop    ebx
c0002d5f:	5e                   	pop    esi
c0002d60:	5f                   	pop    edi
c0002d61:	5d                   	pop    ebp
c0002d62:	c3                   	ret    

c0002d63 <fill_last_frag>:
c0002d63:	57                   	push   edi
c0002d64:	89 cf                	mov    edi,ecx
c0002d66:	56                   	push   esi
c0002d67:	89 d6                	mov    esi,edx
c0002d69:	53                   	push   ebx
c0002d6a:	89 c3                	mov    ebx,eax
c0002d6c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d6f:	85 c0                	test   eax,eax
c0002d71:	74 21                	je     c0002d94 <fill_last_frag+0x31>
c0002d73:	89 f9                	mov    ecx,edi
c0002d75:	83 f8 01             	cmp    eax,0x1
c0002d78:	76 05                	jbe    c0002d7f <fill_last_frag+0x1c>
c0002d7a:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d7d:	29 c1                	sub    ecx,eax
c0002d7f:	8d 56 01             	lea    edx,[esi+0x1]
c0002d82:	29 c2                	sub    edx,eax
c0002d84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d86:	e8 42 fe ff ff       	call   c0002bcd <put_fat>
c0002d8b:	85 c0                	test   eax,eax
c0002d8d:	75 05                	jne    c0002d94 <fill_last_frag+0x31>
c0002d8f:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d92:	eb d8                	jmp    c0002d6c <fill_last_frag+0x9>
c0002d94:	5b                   	pop    ebx
c0002d95:	5e                   	pop    esi
c0002d96:	5f                   	pop    edi
c0002d97:	c3                   	ret    

c0002d98 <fill_first_frag>:
c0002d98:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d9c:	75 2d                	jne    c0002dcb <fill_first_frag+0x33>
c0002d9e:	57                   	push   edi
c0002d9f:	56                   	push   esi
c0002da0:	53                   	push   ebx
c0002da1:	89 c3                	mov    ebx,eax
c0002da3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002da6:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002da9:	01 d7                	add    edi,edx
c0002dab:	39 fa                	cmp    edx,edi
c0002dad:	74 14                	je     c0002dc3 <fill_first_frag+0x2b>
c0002daf:	8d 72 01             	lea    esi,[edx+0x1]
c0002db2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002db4:	89 f1                	mov    ecx,esi
c0002db6:	e8 12 fe ff ff       	call   c0002bcd <put_fat>
c0002dbb:	89 f2                	mov    edx,esi
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	74 ea                	je     c0002dab <fill_first_frag+0x13>
c0002dc1:	eb 0b                	jmp    c0002dce <fill_first_frag+0x36>
c0002dc3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002dc7:	31 c0                	xor    eax,eax
c0002dc9:	eb 03                	jmp    c0002dce <fill_first_frag+0x36>
c0002dcb:	31 c0                	xor    eax,eax
c0002dcd:	c3                   	ret    
c0002dce:	5b                   	pop    ebx
c0002dcf:	5e                   	pop    esi
c0002dd0:	5f                   	pop    edi
c0002dd1:	c3                   	ret    

c0002dd2 <get_fat>:
c0002dd2:	83 fa 01             	cmp    edx,0x1
c0002dd5:	0f 86 db 01 00 00    	jbe    c0002fb6 <get_fat+0x1e4>
c0002ddb:	55                   	push   ebp
c0002ddc:	b9 01 00 00 00       	mov    ecx,0x1
c0002de1:	57                   	push   edi
c0002de2:	56                   	push   esi
c0002de3:	53                   	push   ebx
c0002de4:	83 ec 1c             	sub    esp,0x1c
c0002de7:	8b 38                	mov    edi,DWORD PTR [eax]
c0002de9:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dec:	0f 86 cc 01 00 00    	jbe    c0002fbe <get_fat+0x1ec>
c0002df2:	89 c3                	mov    ebx,eax
c0002df4:	89 d6                	mov    esi,edx
c0002df6:	8a 07                	mov    al,BYTE PTR [edi]
c0002df8:	3c 02                	cmp    al,0x2
c0002dfa:	0f 84 99 00 00 00    	je     c0002e99 <get_fat+0xc7>
c0002e00:	77 09                	ja     c0002e0b <get_fat+0x39>
c0002e02:	fe c8                	dec    al
c0002e04:	74 1a                	je     c0002e20 <get_fat+0x4e>
c0002e06:	e9 b3 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e0b:	3c 03                	cmp    al,0x3
c0002e0d:	0f 84 b5 00 00 00    	je     c0002ec8 <get_fat+0xf6>
c0002e13:	3c 04                	cmp    al,0x4
c0002e15:	0f 84 e3 00 00 00    	je     c0002efe <get_fat+0x12c>
c0002e1b:	e9 9e 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e20:	89 d3                	mov    ebx,edx
c0002e22:	31 c9                	xor    ecx,ecx
c0002e24:	d1 eb                	shr    ebx,1
c0002e26:	89 f8                	mov    eax,edi
c0002e28:	01 d3                	add    ebx,edx
c0002e2a:	89 da                	mov    edx,ebx
c0002e2c:	c1 ea 09             	shr    edx,0x9
c0002e2f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e32:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e35:	e8 10 f4 ff ff       	call   c000224a <move_window>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <get_fat+0x74>
c0002e3e:	83 c9 ff             	or     ecx,0xffffffff
c0002e41:	e9 78 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e46:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e49:	31 c9                	xor    ecx,ecx
c0002e4b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e51:	89 ea                	mov    edx,ebp
c0002e53:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e57:	c1 ea 09             	shr    edx,0x9
c0002e5a:	89 f8                	mov    eax,edi
c0002e5c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e5f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e62:	e8 e3 f3 ff ff       	call   c000224a <move_window>
c0002e67:	85 c0                	test   eax,eax
c0002e69:	75 d3                	jne    c0002e3e <get_fat+0x6c>
c0002e6b:	0f b6 c3             	movzx  eax,bl
c0002e6e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e74:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e79:	c1 e3 08             	shl    ebx,0x8
c0002e7c:	09 c3                	or     ebx,eax
c0002e7e:	89 d9                	mov    ecx,ebx
c0002e80:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e86:	83 e6 01             	and    esi,0x1
c0002e89:	0f 84 2f 01 00 00    	je     c0002fbe <get_fat+0x1ec>
c0002e8f:	89 d9                	mov    ecx,ebx
c0002e91:	c1 e9 04             	shr    ecx,0x4
c0002e94:	e9 25 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e99:	31 c9                	xor    ecx,ecx
c0002e9b:	c1 ea 08             	shr    edx,0x8
c0002e9e:	89 f8                	mov    eax,edi
c0002ea0:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea3:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea6:	e8 9f f3 ff ff       	call   c000224a <move_window>
c0002eab:	85 c0                	test   eax,eax
c0002ead:	75 8f                	jne    c0002e3e <get_fat+0x6c>
c0002eaf:	01 f6                	add    esi,esi
c0002eb1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 ac eb ff ff       	call   c0001a6c <ld_word>
c0002ec0:	0f b7 c8             	movzx  ecx,ax
c0002ec3:	e9 f6 00 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002ec8:	31 c9                	xor    ecx,ecx
c0002eca:	c1 ea 07             	shr    edx,0x7
c0002ecd:	89 f8                	mov    eax,edi
c0002ecf:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ed2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ed5:	e8 70 f3 ff ff       	call   c000224a <move_window>
c0002eda:	85 c0                	test   eax,eax
c0002edc:	0f 85 5c ff ff ff    	jne    c0002e3e <get_fat+0x6c>
c0002ee2:	c1 e6 02             	shl    esi,0x2
c0002ee5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eeb:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eef:	e8 85 eb ff ff       	call   c0001a79 <ld_dword>
c0002ef4:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ef9:	e9 b4 00 00 00       	jmp    c0002fb2 <get_fat+0x1e0>
c0002efe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002f01:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002f04:	89 d1                	mov    ecx,edx
c0002f06:	09 c1                	or     ecx,eax
c0002f08:	74 06                	je     c0002f10 <get_fat+0x13e>
c0002f0a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002f0e:	75 0f                	jne    c0002f1f <get_fat+0x14d>
c0002f10:	b9 01 00 00 00       	mov    ecx,0x1
c0002f15:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002f19:	0f 85 9f 00 00 00    	jne    c0002fbe <get_fat+0x1ec>
c0002f1f:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f23:	89 f5                	mov    ebp,esi
c0002f25:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f2a:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f2d:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f30:	80 f9 02             	cmp    cl,0x2
c0002f33:	75 35                	jne    c0002f6a <get_fat+0x198>
c0002f35:	83 c0 ff             	add    eax,0xffffffff
c0002f38:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f3d:	83 d2 ff             	adc    edx,0xffffffff
c0002f40:	31 db                	xor    ebx,ebx
c0002f42:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f46:	53                   	push   ebx
c0002f47:	c1 ea 09             	shr    edx,0x9
c0002f4a:	51                   	push   ecx
c0002f4b:	52                   	push   edx
c0002f4c:	50                   	push   eax
c0002f4d:	e8 7e 03 02 00       	call   c00232d0 <__udivdi3>
c0002f52:	83 c4 10             	add    esp,0x10
c0002f55:	b9 01 00 00 00       	mov    ecx,0x1
c0002f5a:	39 c5                	cmp    ebp,eax
c0002f5c:	77 60                	ja     c0002fbe <get_fat+0x1ec>
c0002f5e:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f63:	74 59                	je     c0002fbe <get_fat+0x1ec>
c0002f65:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f68:	eb 54                	jmp    c0002fbe <get_fat+0x1ec>
c0002f6a:	80 f9 03             	cmp    cl,0x3
c0002f6d:	75 05                	jne    c0002f74 <get_fat+0x1a2>
c0002f6f:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f72:	77 f1                	ja     c0002f65 <get_fat+0x193>
c0002f74:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f79:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f7d:	75 3f                	jne    c0002fbe <get_fat+0x1ec>
c0002f7f:	31 c9                	xor    ecx,ecx
c0002f81:	89 f2                	mov    edx,esi
c0002f83:	89 f8                	mov    eax,edi
c0002f85:	c1 ea 07             	shr    edx,0x7
c0002f88:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8e:	e8 b7 f2 ff ff       	call   c000224a <move_window>
c0002f93:	85 c0                	test   eax,eax
c0002f95:	0f 85 a3 fe ff ff    	jne    c0002e3e <get_fat+0x6c>
c0002f9b:	c1 e6 02             	shl    esi,0x2
c0002f9e:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fa4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa8:	e8 cc ea ff ff       	call   c0001a79 <ld_dword>
c0002fad:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002fb2:	89 c1                	mov    ecx,eax
c0002fb4:	eb 08                	jmp    c0002fbe <get_fat+0x1ec>
c0002fb6:	b9 01 00 00 00       	mov    ecx,0x1
c0002fbb:	89 c8                	mov    eax,ecx
c0002fbd:	c3                   	ret    
c0002fbe:	83 c4 1c             	add    esp,0x1c
c0002fc1:	89 c8                	mov    eax,ecx
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	5d                   	pop    ebp
c0002fc7:	c3                   	ret    

c0002fc8 <dir_sdi>:
c0002fc8:	55                   	push   ebp
c0002fc9:	57                   	push   edi
c0002fca:	56                   	push   esi
c0002fcb:	53                   	push   ebx
c0002fcc:	89 c3                	mov    ebx,eax
c0002fce:	83 ec 1c             	sub    esp,0x1c
c0002fd1:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fd3:	31 c0                	xor    eax,eax
c0002fd5:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fd8:	0f 94 c0             	sete   al
c0002fdb:	48                   	dec    eax
c0002fdc:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fe1:	05 00 00 00 10       	add    eax,0x10000000
c0002fe6:	39 d0                	cmp    eax,edx
c0002fe8:	77 0a                	ja     c0002ff4 <dir_sdi+0x2c>
c0002fea:	b8 02 00 00 00       	mov    eax,0x2
c0002fef:	e9 c4 00 00 00       	jmp    c00030b8 <dir_sdi+0xf0>
c0002ff4:	89 d6                	mov    esi,edx
c0002ff6:	f6 c2 1f             	test   dl,0x1f
c0002ff9:	75 ef                	jne    c0002fea <dir_sdi+0x22>
c0002ffb:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002ffe:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003001:	85 c9                	test   ecx,ecx
c0003003:	75 2d                	jne    c0003032 <dir_sdi+0x6a>
c0003005:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003008:	77 1b                	ja     c0003025 <dir_sdi+0x5d>
c000300a:	89 f2                	mov    edx,esi
c000300c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003010:	c1 ea 05             	shr    edx,0x5
c0003013:	39 c2                	cmp    edx,eax
c0003015:	73 d3                	jae    c0002fea <dir_sdi+0x22>
c0003017:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000301a:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000301d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003020:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003023:	eb 4b                	jmp    c0003070 <dir_sdi+0xa8>
c0003025:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003028:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000302c:	85 c0                	test   eax,eax
c000302e:	74 da                	je     c000300a <dir_sdi+0x42>
c0003030:	89 c1                	mov    ecx,eax
c0003032:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003036:	c1 e5 09             	shl    ebp,0x9
c0003039:	89 ca                	mov    edx,ecx
c000303b:	39 ee                	cmp    esi,ebp
c000303d:	72 1c                	jb     c000305b <dir_sdi+0x93>
c000303f:	89 d8                	mov    eax,ebx
c0003041:	e8 8c fd ff ff       	call   c0002dd2 <get_fat>
c0003046:	89 c1                	mov    ecx,eax
c0003048:	83 f8 ff             	cmp    eax,0xffffffff
c000304b:	74 66                	je     c00030b3 <dir_sdi+0xeb>
c000304d:	83 f8 01             	cmp    eax,0x1
c0003050:	76 98                	jbe    c0002fea <dir_sdi+0x22>
c0003052:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003055:	76 93                	jbe    c0002fea <dir_sdi+0x22>
c0003057:	29 ee                	sub    esi,ebp
c0003059:	eb de                	jmp    c0003039 <dir_sdi+0x71>
c000305b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000305f:	89 f8                	mov    eax,edi
c0003061:	e8 9f ec ff ff       	call   c0001d05 <clst2sect>
c0003066:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000306a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000306d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003070:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003073:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003076:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003079:	89 d1                	mov    ecx,edx
c000307b:	09 c1                	or     ecx,eax
c000307d:	0f 84 67 ff ff ff    	je     c0002fea <dir_sdi+0x22>
c0003083:	89 f1                	mov    ecx,esi
c0003085:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000308d:	c1 e9 09             	shr    ecx,0x9
c0003090:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003094:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003098:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000309c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000309f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00030a5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00030a8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ac:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00030af:	31 c0                	xor    eax,eax
c00030b1:	eb 05                	jmp    c00030b8 <dir_sdi+0xf0>
c00030b3:	b8 01 00 00 00       	mov    eax,0x1
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <create_chain>:
c00030c0:	55                   	push   ebp
c00030c1:	89 c5                	mov    ebp,eax
c00030c3:	57                   	push   edi
c00030c4:	56                   	push   esi
c00030c5:	53                   	push   ebx
c00030c6:	83 ec 1c             	sub    esp,0x1c
c00030c9:	85 d2                	test   edx,edx
c00030cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030cf:	8b 30                	mov    esi,DWORD PTR [eax]
c00030d1:	75 0e                	jne    c00030e1 <create_chain+0x21>
c00030d3:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030d6:	85 ff                	test   edi,edi
c00030d8:	74 39                	je     c0003113 <create_chain+0x53>
c00030da:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030dd:	77 39                	ja     c0003118 <create_chain+0x58>
c00030df:	eb 32                	jmp    c0003113 <create_chain+0x53>
c00030e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030e5:	e8 e8 fc ff ff       	call   c0002dd2 <get_fat>
c00030ea:	89 c3                	mov    ebx,eax
c00030ec:	83 f8 01             	cmp    eax,0x1
c00030ef:	77 0a                	ja     c00030fb <create_chain+0x3b>
c00030f1:	bb 01 00 00 00       	mov    ebx,0x1
c00030f6:	e9 ba 01 00 00       	jmp    c00032b5 <create_chain+0x1f5>
c00030fb:	83 f8 ff             	cmp    eax,0xffffffff
c00030fe:	0f 84 62 01 00 00    	je     c0003266 <create_chain+0x1a6>
c0003104:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003107:	0f 87 a8 01 00 00    	ja     c00032b5 <create_chain+0x1f5>
c000310d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003111:	eb 05                	jmp    c0003118 <create_chain+0x58>
c0003113:	bf 01 00 00 00       	mov    edi,0x1
c0003118:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000311c:	75 07                	jne    c0003125 <create_chain+0x65>
c000311e:	31 db                	xor    ebx,ebx
c0003120:	e9 90 01 00 00       	jmp    c00032b5 <create_chain+0x1f5>
c0003125:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003128:	75 74                	jne    c000319e <create_chain+0xde>
c000312a:	b9 01 00 00 00       	mov    ecx,0x1
c000312f:	89 fa                	mov    edx,edi
c0003131:	89 f0                	mov    eax,esi
c0003133:	e8 2d f9 ff ff       	call   c0002a65 <find_bitmap>
c0003138:	89 c3                	mov    ebx,eax
c000313a:	8d 40 ff             	lea    eax,[eax-0x1]
c000313d:	83 f8 fd             	cmp    eax,0xfffffffd
c0003140:	0f 87 6f 01 00 00    	ja     c00032b5 <create_chain+0x1f5>
c0003146:	83 ec 0c             	sub    esp,0xc
c0003149:	b9 01 00 00 00       	mov    ecx,0x1
c000314e:	6a 01                	push   0x1
c0003150:	89 da                	mov    edx,ebx
c0003152:	89 f0                	mov    eax,esi
c0003154:	e8 bf f9 ff ff       	call   c0002b18 <change_bitmap>
c0003159:	83 c4 10             	add    esp,0x10
c000315c:	83 f8 02             	cmp    eax,0x2
c000315f:	74 90                	je     c00030f1 <create_chain+0x31>
c0003161:	83 f8 01             	cmp    eax,0x1
c0003164:	0f 84 fc 00 00 00    	je     c0003266 <create_chain+0x1a6>
c000316a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000316f:	75 09                	jne    c000317a <create_chain+0xba>
c0003171:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003175:	e9 0c 01 00 00       	jmp    c0003286 <create_chain+0x1c6>
c000317a:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000317e:	0f 85 e7 00 00 00    	jne    c000326b <create_chain+0x1ab>
c0003184:	8d 57 01             	lea    edx,[edi+0x1]
c0003187:	39 da                	cmp    edx,ebx
c0003189:	0f 84 f7 00 00 00    	je     c0003286 <create_chain+0x1c6>
c000318f:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003192:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003196:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003199:	e9 cd 00 00 00       	jmp    c000326b <create_chain+0x1ab>
c000319e:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00031a2:	75 41                	jne    c00031e5 <create_chain+0x125>
c00031a4:	8d 5f 01             	lea    ebx,[edi+0x1]
c00031a7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031aa:	77 05                	ja     c00031b1 <create_chain+0xf1>
c00031ac:	bb 02 00 00 00       	mov    ebx,0x2
c00031b1:	89 da                	mov    edx,ebx
c00031b3:	89 e8                	mov    eax,ebp
c00031b5:	e8 18 fc ff ff       	call   c0002dd2 <get_fat>
c00031ba:	83 f8 01             	cmp    eax,0x1
c00031bd:	0f 84 2e ff ff ff    	je     c00030f1 <create_chain+0x31>
c00031c3:	83 f8 ff             	cmp    eax,0xffffffff
c00031c6:	0f 84 9a 00 00 00    	je     c0003266 <create_chain+0x1a6>
c00031cc:	85 c0                	test   eax,eax
c00031ce:	74 11                	je     c00031e1 <create_chain+0x121>
c00031d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	76 0d                	jbe    c00031e5 <create_chain+0x125>
c00031d8:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031db:	76 08                	jbe    c00031e5 <create_chain+0x125>
c00031dd:	89 c7                	mov    edi,eax
c00031df:	eb 04                	jmp    c00031e5 <create_chain+0x125>
c00031e1:	85 db                	test   ebx,ebx
c00031e3:	75 38                	jne    c000321d <create_chain+0x15d>
c00031e5:	89 fb                	mov    ebx,edi
c00031e7:	43                   	inc    ebx
c00031e8:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031eb:	77 0e                	ja     c00031fb <create_chain+0x13b>
c00031ed:	83 ff 01             	cmp    edi,0x1
c00031f0:	0f 86 28 ff ff ff    	jbe    c000311e <create_chain+0x5e>
c00031f6:	bb 02 00 00 00       	mov    ebx,0x2
c00031fb:	89 da                	mov    edx,ebx
c00031fd:	89 e8                	mov    eax,ebp
c00031ff:	e8 ce fb ff ff       	call   c0002dd2 <get_fat>
c0003204:	85 c0                	test   eax,eax
c0003206:	74 15                	je     c000321d <create_chain+0x15d>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	0f 84 e0 fe ff ff    	je     c00030f1 <create_chain+0x31>
c0003211:	40                   	inc    eax
c0003212:	74 52                	je     c0003266 <create_chain+0x1a6>
c0003214:	39 fb                	cmp    ebx,edi
c0003216:	75 cf                	jne    c00031e7 <create_chain+0x127>
c0003218:	e9 01 ff ff ff       	jmp    c000311e <create_chain+0x5e>
c000321d:	83 c9 ff             	or     ecx,0xffffffff
c0003220:	89 da                	mov    edx,ebx
c0003222:	89 f0                	mov    eax,esi
c0003224:	e8 a4 f9 ff ff       	call   c0002bcd <put_fat>
c0003229:	85 c0                	test   eax,eax
c000322b:	75 32                	jne    c000325f <create_chain+0x19f>
c000322d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003232:	74 11                	je     c0003245 <create_chain+0x185>
c0003234:	89 d9                	mov    ecx,ebx
c0003236:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000323a:	89 f0                	mov    eax,esi
c000323c:	e8 8c f9 ff ff       	call   c0002bcd <put_fat>
c0003241:	85 c0                	test   eax,eax
c0003243:	75 1a                	jne    c000325f <create_chain+0x19f>
c0003245:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003248:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000324b:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000324e:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003251:	39 d0                	cmp    eax,edx
c0003253:	77 04                	ja     c0003259 <create_chain+0x199>
c0003255:	48                   	dec    eax
c0003256:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003259:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000325d:	eb 56                	jmp    c00032b5 <create_chain+0x1f5>
c000325f:	48                   	dec    eax
c0003260:	0f 85 8b fe ff ff    	jne    c00030f1 <create_chain+0x31>
c0003266:	83 cb ff             	or     ebx,0xffffffff
c0003269:	eb 4a                	jmp    c00032b5 <create_chain+0x1f5>
c000326b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000326f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003272:	41                   	inc    ecx
c0003273:	39 d9                	cmp    ecx,ebx
c0003275:	75 19                	jne    c0003290 <create_chain+0x1d0>
c0003277:	b9 02 00 00 00       	mov    ecx,0x2
c000327c:	85 d2                	test   edx,edx
c000327e:	74 03                	je     c0003283 <create_chain+0x1c3>
c0003280:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003283:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003286:	85 c0                	test   eax,eax
c0003288:	0f 85 63 fe ff ff    	jne    c00030f1 <create_chain+0x31>
c000328e:	eb b5                	jmp    c0003245 <create_chain+0x185>
c0003290:	85 d2                	test   edx,edx
c0003292:	75 07                	jne    c000329b <create_chain+0x1db>
c0003294:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000329b:	89 d9                	mov    ecx,ebx
c000329d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a1:	89 e8                	mov    eax,ebp
c00032a3:	e8 bb fa ff ff       	call   c0002d63 <fill_last_frag>
c00032a8:	85 c0                	test   eax,eax
c00032aa:	75 b3                	jne    c000325f <create_chain+0x19f>
c00032ac:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00032b3:	eb 90                	jmp    c0003245 <create_chain+0x185>
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	89 d8                	mov    eax,ebx
c00032ba:	5b                   	pop    ebx
c00032bb:	5e                   	pop    esi
c00032bc:	5f                   	pop    edi
c00032bd:	5d                   	pop    ebp
c00032be:	c3                   	ret    

c00032bf <remove_chain>:
c00032bf:	55                   	push   ebp
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	83 fa 01             	cmp    edx,0x1
c00032c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032cd:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032cf:	77 0a                	ja     c00032db <remove_chain+0x1c>
c00032d1:	b8 02 00 00 00       	mov    eax,0x2
c00032d6:	e9 24 01 00 00       	jmp    c00033ff <remove_chain+0x140>
c00032db:	89 d6                	mov    esi,edx
c00032dd:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032e0:	76 ef                	jbe    c00032d1 <remove_chain+0x12>
c00032e2:	89 c7                	mov    edi,eax
c00032e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032e9:	75 06                	jne    c00032f1 <remove_chain+0x32>
c00032eb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032ef:	eb 54                	jmp    c0003345 <remove_chain+0x86>
c00032f1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f4:	75 06                	jne    c00032fc <remove_chain+0x3d>
c00032f6:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032fa:	74 ef                	je     c00032eb <remove_chain+0x2c>
c00032fc:	83 c9 ff             	or     ecx,0xffffffff
c00032ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003303:	89 d8                	mov    eax,ebx
c0003305:	e8 c3 f8 ff ff       	call   c0002bcd <put_fat>
c000330a:	85 c0                	test   eax,eax
c000330c:	74 dd                	je     c00032eb <remove_chain+0x2c>
c000330e:	e9 ec 00 00 00       	jmp    c00033ff <remove_chain+0x140>
c0003313:	83 f8 01             	cmp    eax,0x1
c0003316:	74 b9                	je     c00032d1 <remove_chain+0x12>
c0003318:	83 f8 ff             	cmp    eax,0xffffffff
c000331b:	74 6d                	je     c000338a <remove_chain+0xcb>
c000331d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003320:	75 6f                	jne    c0003391 <remove_chain+0xd2>
c0003322:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003325:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003328:	8d 51 fe             	lea    edx,[ecx-0x2]
c000332b:	39 d0                	cmp    eax,edx
c000332d:	73 08                	jae    c0003337 <remove_chain+0x78>
c000332f:	40                   	inc    eax
c0003330:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003334:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003337:	8d 4e 01             	lea    ecx,[esi+0x1]
c000333a:	39 e9                	cmp    ecx,ebp
c000333c:	75 64                	jne    c00033a2 <remove_chain+0xe3>
c000333e:	89 ee                	mov    esi,ebp
c0003340:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003343:	76 0f                	jbe    c0003354 <remove_chain+0x95>
c0003345:	89 f2                	mov    edx,esi
c0003347:	89 f8                	mov    eax,edi
c0003349:	e8 84 fa ff ff       	call   c0002dd2 <get_fat>
c000334e:	89 c5                	mov    ebp,eax
c0003350:	85 c0                	test   eax,eax
c0003352:	75 bf                	jne    c0003313 <remove_chain+0x54>
c0003354:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003357:	0f 85 a0 00 00 00    	jne    c00033fd <remove_chain+0x13e>
c000335d:	eb 6c                	jmp    c00033cb <remove_chain+0x10c>
c000335f:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003362:	84 c0                	test   al,al
c0003364:	75 7d                	jne    c00033e3 <remove_chain+0x124>
c0003366:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003369:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000336d:	0f 84 86 00 00 00    	je     c00033f9 <remove_chain+0x13a>
c0003373:	89 da                	mov    edx,ebx
c0003375:	89 f8                	mov    eax,edi
c0003377:	e8 56 fa ff ff       	call   c0002dd2 <get_fat>
c000337c:	83 f8 01             	cmp    eax,0x1
c000337f:	0f 86 4c ff ff ff    	jbe    c00032d1 <remove_chain+0x12>
c0003385:	83 f8 ff             	cmp    eax,0xffffffff
c0003388:	75 4e                	jne    c00033d8 <remove_chain+0x119>
c000338a:	b8 01 00 00 00       	mov    eax,0x1
c000338f:	eb 6e                	jmp    c00033ff <remove_chain+0x140>
c0003391:	31 c9                	xor    ecx,ecx
c0003393:	89 f2                	mov    edx,esi
c0003395:	89 d8                	mov    eax,ebx
c0003397:	e8 31 f8 ff ff       	call   c0002bcd <put_fat>
c000339c:	85 c0                	test   eax,eax
c000339e:	74 82                	je     c0003322 <remove_chain+0x63>
c00033a0:	eb 5d                	jmp    c00033ff <remove_chain+0x140>
c00033a2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033a5:	75 1b                	jne    c00033c2 <remove_chain+0x103>
c00033a7:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00033ab:	89 d8                	mov    eax,ebx
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	6a 00                	push   0x0
c00033b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00033b6:	e8 5d f7 ff ff       	call   c0002b18 <change_bitmap>
c00033bb:	83 c4 10             	add    esp,0x10
c00033be:	85 c0                	test   eax,eax
c00033c0:	75 3d                	jne    c00033ff <remove_chain+0x140>
c00033c2:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033c6:	e9 73 ff ff ff       	jmp    c000333e <remove_chain+0x7f>
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 8d                	jne    c000335f <remove_chain+0xa0>
c00033d2:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033d6:	eb 25                	jmp    c00033fd <remove_chain+0x13e>
c00033d8:	8d 53 01             	lea    edx,[ebx+0x1]
c00033db:	89 c3                	mov    ebx,eax
c00033dd:	39 c2                	cmp    edx,eax
c00033df:	74 88                	je     c0003369 <remove_chain+0xaa>
c00033e1:	eb 1a                	jmp    c00033fd <remove_chain+0x13e>
c00033e3:	3c 03                	cmp    al,0x3
c00033e5:	75 16                	jne    c00033fd <remove_chain+0x13e>
c00033e7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033ea:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033ee:	77 0d                	ja     c00033fd <remove_chain+0x13e>
c00033f0:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033f3:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033f7:	72 04                	jb     c00033fd <remove_chain+0x13e>
c00033f9:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033fd:	31 c0                	xor    eax,eax
c00033ff:	83 c4 1c             	add    esp,0x1c
c0003402:	5b                   	pop    ebx
c0003403:	5e                   	pop    esi
c0003404:	5f                   	pop    edi
c0003405:	5d                   	pop    ebp
c0003406:	c3                   	ret    

c0003407 <dir_clear>:
c0003407:	55                   	push   ebp
c0003408:	57                   	push   edi
c0003409:	56                   	push   esi
c000340a:	89 c6                	mov    esi,eax
c000340c:	53                   	push   ebx
c000340d:	83 ec 1c             	sub    esp,0x1c
c0003410:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003414:	e8 9d ed ff ff       	call   c00021b6 <sync_window>
c0003419:	85 c0                	test   eax,eax
c000341b:	0f 85 de 00 00 00    	jne    c00034ff <dir_clear+0xf8>
c0003421:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003425:	89 f0                	mov    eax,esi
c0003427:	8d 6e 54             	lea    ebp,[esi+0x54]
c000342a:	e8 d6 e8 ff ff       	call   c0001d05 <clst2sect>
c000342f:	b9 00 02 00 00       	mov    ecx,0x200
c0003434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000343c:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000343f:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003442:	89 e8                	mov    eax,ebp
c0003444:	31 d2                	xor    edx,edx
c0003446:	e8 b5 e6 ff ff       	call   c0001b00 <mem_set>
c000344b:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000344f:	c1 e3 09             	shl    ebx,0x9
c0003452:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003458:	76 1f                	jbe    c0003479 <dir_clear+0x72>
c000345a:	bb 00 80 00 00       	mov    ebx,0x8000
c000345f:	eb 18                	jmp    c0003479 <dir_clear+0x72>
c0003461:	83 ec 0c             	sub    esp,0xc
c0003464:	53                   	push   ebx
c0003465:	e8 35 4e 00 00       	call   c000829f <ff_memalloc>
c000346a:	83 c4 10             	add    esp,0x10
c000346d:	89 c7                	mov    edi,eax
c000346f:	85 c0                	test   eax,eax
c0003471:	0f 85 8f 00 00 00    	jne    c0003506 <dir_clear+0xff>
c0003477:	d1 eb                	shr    ebx,1
c0003479:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000347f:	77 e0                	ja     c0003461 <dir_clear+0x5a>
c0003481:	31 db                	xor    ebx,ebx
c0003483:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003487:	39 d8                	cmp    eax,ebx
c0003489:	76 66                	jbe    c00034f1 <dir_clear+0xea>
c000348b:	83 ec 0c             	sub    esp,0xc
c000348e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003492:	6a 01                	push   0x1
c0003494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000349c:	55                   	push   ebp
c000349d:	50                   	push   eax
c000349e:	e8 94 e5 ff ff       	call   c0001a37 <disk_write>
c00034a3:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00034a8:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00034ad:	83 c4 20             	add    esp,0x20
c00034b0:	85 c0                	test   eax,eax
c00034b2:	75 3d                	jne    c00034f1 <dir_clear+0xea>
c00034b4:	43                   	inc    ebx
c00034b5:	eb cc                	jmp    c0003483 <dir_clear+0x7c>
c00034b7:	83 ec 0c             	sub    esp,0xc
c00034ba:	31 d2                	xor    edx,edx
c00034bc:	55                   	push   ebp
c00034bd:	89 d8                	mov    eax,ebx
c00034bf:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034c3:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034c7:	52                   	push   edx
c00034c8:	50                   	push   eax
c00034c9:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034cd:	57                   	push   edi
c00034ce:	50                   	push   eax
c00034cf:	e8 63 e5 ff ff       	call   c0001a37 <disk_write>
c00034d4:	83 c4 20             	add    esp,0x20
c00034d7:	85 c0                	test   eax,eax
c00034d9:	75 0a                	jne    c00034e5 <dir_clear+0xde>
c00034db:	01 eb                	add    ebx,ebp
c00034dd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034e1:	39 d8                	cmp    eax,ebx
c00034e3:	77 d2                	ja     c00034b7 <dir_clear+0xb0>
c00034e5:	83 ec 0c             	sub    esp,0xc
c00034e8:	57                   	push   edi
c00034e9:	e8 c7 4d 00 00       	call   c00082b5 <ff_memfree>
c00034ee:	83 c4 10             	add    esp,0x10
c00034f1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034f5:	39 d8                	cmp    eax,ebx
c00034f7:	0f 95 c0             	setne  al
c00034fa:	0f b6 c0             	movzx  eax,al
c00034fd:	eb 19                	jmp    c0003518 <dir_clear+0x111>
c00034ff:	b8 01 00 00 00       	mov    eax,0x1
c0003504:	eb 12                	jmp    c0003518 <dir_clear+0x111>
c0003506:	89 d9                	mov    ecx,ebx
c0003508:	31 d2                	xor    edx,edx
c000350a:	c1 eb 09             	shr    ebx,0x9
c000350d:	e8 ee e5 ff ff       	call   c0001b00 <mem_set>
c0003512:	89 dd                	mov    ebp,ebx
c0003514:	31 db                	xor    ebx,ebx
c0003516:	eb c5                	jmp    c00034dd <dir_clear+0xd6>
c0003518:	83 c4 1c             	add    esp,0x1c
c000351b:	5b                   	pop    ebx
c000351c:	5e                   	pop    esi
c000351d:	5f                   	pop    edi
c000351e:	5d                   	pop    ebp
c000351f:	c3                   	ret    

c0003520 <dir_next>:
c0003520:	55                   	push   ebp
c0003521:	57                   	push   edi
c0003522:	56                   	push   esi
c0003523:	53                   	push   ebx
c0003524:	89 c3                	mov    ebx,eax
c0003526:	83 ec 1c             	sub    esp,0x1c
c0003529:	8b 28                	mov    ebp,DWORD PTR [eax]
c000352b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003532:	8d 78 20             	lea    edi,[eax+0x20]
c0003535:	31 c0                	xor    eax,eax
c0003537:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000353b:	0f 94 c0             	sete   al
c000353e:	48                   	dec    eax
c000353f:	25 00 00 20 f0       	and    eax,0xf0200000
c0003544:	05 00 00 00 10       	add    eax,0x10000000
c0003549:	39 f8                	cmp    eax,edi
c000354b:	77 0e                	ja     c000355b <dir_next+0x3b>
c000354d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003554:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000355b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000355e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003561:	b8 04 00 00 00       	mov    eax,0x4
c0003566:	89 ce                	mov    esi,ecx
c0003568:	09 d6                	or     esi,edx
c000356a:	0f 84 da 00 00 00    	je     c000364a <dir_next+0x12a>
c0003570:	89 f8                	mov    eax,edi
c0003572:	25 ff 01 00 00       	and    eax,0x1ff
c0003577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000357b:	0f 85 b9 00 00 00    	jne    c000363a <dir_next+0x11a>
c0003581:	83 c2 01             	add    edx,0x1
c0003584:	83 d1 00             	adc    ecx,0x0
c0003587:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000358a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000358d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003590:	85 d2                	test   edx,edx
c0003592:	75 29                	jne    c00035bd <dir_next+0x9d>
c0003594:	89 fa                	mov    edx,edi
c0003596:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000359a:	c1 ea 05             	shr    edx,0x5
c000359d:	39 c2                	cmp    edx,eax
c000359f:	0f 82 95 00 00 00    	jb     c000363a <dir_next+0x11a>
c00035a5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00035ac:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00035b3:	b8 04 00 00 00       	mov    eax,0x4
c00035b8:	e9 8d 00 00 00       	jmp    c000364a <dir_next+0x12a>
c00035bd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035c1:	89 f9                	mov    ecx,edi
c00035c3:	48                   	dec    eax
c00035c4:	c1 e9 09             	shr    ecx,0x9
c00035c7:	85 c8                	test   eax,ecx
c00035c9:	75 6f                	jne    c000363a <dir_next+0x11a>
c00035cb:	89 d8                	mov    eax,ebx
c00035cd:	e8 00 f8 ff ff       	call   c0002dd2 <get_fat>
c00035d2:	89 c6                	mov    esi,eax
c00035d4:	83 f8 01             	cmp    eax,0x1
c00035d7:	77 07                	ja     c00035e0 <dir_next+0xc0>
c00035d9:	b8 02 00 00 00       	mov    eax,0x2
c00035de:	eb 6a                	jmp    c000364a <dir_next+0x12a>
c00035e0:	83 f8 ff             	cmp    eax,0xffffffff
c00035e3:	75 07                	jne    c00035ec <dir_next+0xcc>
c00035e5:	b8 01 00 00 00       	mov    eax,0x1
c00035ea:	eb 5e                	jmp    c000364a <dir_next+0x12a>
c00035ec:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035ef:	77 37                	ja     c0003628 <dir_next+0x108>
c00035f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035f6:	74 ad                	je     c00035a5 <dir_next+0x85>
c00035f8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035fb:	89 d8                	mov    eax,ebx
c00035fd:	e8 be fa ff ff       	call   c00030c0 <create_chain>
c0003602:	89 c6                	mov    esi,eax
c0003604:	b8 07 00 00 00       	mov    eax,0x7
c0003609:	85 f6                	test   esi,esi
c000360b:	74 3d                	je     c000364a <dir_next+0x12a>
c000360d:	83 fe 01             	cmp    esi,0x1
c0003610:	74 c7                	je     c00035d9 <dir_next+0xb9>
c0003612:	83 fe ff             	cmp    esi,0xffffffff
c0003615:	74 ce                	je     c00035e5 <dir_next+0xc5>
c0003617:	89 f2                	mov    edx,esi
c0003619:	89 e8                	mov    eax,ebp
c000361b:	e8 e7 fd ff ff       	call   c0003407 <dir_clear>
c0003620:	85 c0                	test   eax,eax
c0003622:	75 c1                	jne    c00035e5 <dir_next+0xc5>
c0003624:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003628:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000362b:	89 f2                	mov    edx,esi
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 d1 e6 ff ff       	call   c0001d05 <clst2sect>
c0003634:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003637:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000363a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000363e:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003641:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003645:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003648:	31 c0                	xor    eax,eax
c000364a:	83 c4 1c             	add    esp,0x1c
c000364d:	5b                   	pop    ebx
c000364e:	5e                   	pop    esi
c000364f:	5f                   	pop    edi
c0003650:	5d                   	pop    ebp
c0003651:	c3                   	ret    

c0003652 <load_xdir>:
c0003652:	55                   	push   ebp
c0003653:	57                   	push   edi
c0003654:	56                   	push   esi
c0003655:	89 c6                	mov    esi,eax
c0003657:	53                   	push   ebx
c0003658:	83 ec 1c             	sub    esp,0x1c
c000365b:	8b 00                	mov    eax,DWORD PTR [eax]
c000365d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003660:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003663:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003666:	e8 df eb ff ff       	call   c000224a <move_window>
c000366b:	89 c3                	mov    ebx,eax
c000366d:	85 c0                	test   eax,eax
c000366f:	0f 85 0c 01 00 00    	jne    c0003781 <load_xdir+0x12f>
c0003675:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003678:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000367b:	0f 85 fb 00 00 00    	jne    c000377c <load_xdir+0x12a>
c0003681:	89 f8                	mov    eax,edi
c0003683:	b9 20 00 00 00       	mov    ecx,0x20
c0003688:	e8 5e e4 ff ff       	call   c0001aeb <mem_cpy>
c000368d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003691:	40                   	inc    eax
c0003692:	c1 e0 05             	shl    eax,0x5
c0003695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003699:	83 e8 60             	sub    eax,0x60
c000369c:	3d 00 02 00 00       	cmp    eax,0x200
c00036a1:	0f 87 d5 00 00 00    	ja     c000377c <load_xdir+0x12a>
c00036a7:	31 d2                	xor    edx,edx
c00036a9:	89 f0                	mov    eax,esi
c00036ab:	e8 70 fe ff ff       	call   c0003520 <dir_next>
c00036b0:	89 c3                	mov    ebx,eax
c00036b2:	83 f8 04             	cmp    eax,0x4
c00036b5:	0f 84 c1 00 00 00    	je     c000377c <load_xdir+0x12a>
c00036bb:	85 c0                	test   eax,eax
c00036bd:	0f 85 be 00 00 00    	jne    c0003781 <load_xdir+0x12f>
c00036c3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036c6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00036cb:	e8 7a eb ff ff       	call   c000224a <move_window>
c00036d0:	89 c3                	mov    ebx,eax
c00036d2:	85 c0                	test   eax,eax
c00036d4:	0f 85 a7 00 00 00    	jne    c0003781 <load_xdir+0x12f>
c00036da:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036dd:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036e0:	0f 85 96 00 00 00    	jne    c000377c <load_xdir+0x12a>
c00036e6:	8d 47 20             	lea    eax,[edi+0x20]
c00036e9:	b9 20 00 00 00       	mov    ecx,0x20
c00036ee:	e8 f8 e3 ff ff       	call   c0001aeb <mem_cpy>
c00036f3:	31 d2                	xor    edx,edx
c00036f5:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036f9:	b9 0f 00 00 00       	mov    ecx,0xf
c00036fe:	83 c0 2c             	add    eax,0x2c
c0003701:	f7 f1                	div    ecx
c0003703:	c1 e0 05             	shl    eax,0x5
c0003706:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000370a:	77 70                	ja     c000377c <load_xdir+0x12a>
c000370c:	bd 40 00 00 00       	mov    ebp,0x40
c0003711:	31 d2                	xor    edx,edx
c0003713:	89 f0                	mov    eax,esi
c0003715:	e8 06 fe ff ff       	call   c0003520 <dir_next>
c000371a:	89 c3                	mov    ebx,eax
c000371c:	83 f8 04             	cmp    eax,0x4
c000371f:	74 5b                	je     c000377c <load_xdir+0x12a>
c0003721:	85 c0                	test   eax,eax
c0003723:	75 5c                	jne    c0003781 <load_xdir+0x12f>
c0003725:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003728:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000372b:	8b 06                	mov    eax,DWORD PTR [esi]
c000372d:	e8 18 eb ff ff       	call   c000224a <move_window>
c0003732:	89 c3                	mov    ebx,eax
c0003734:	85 c0                	test   eax,eax
c0003736:	75 49                	jne    c0003781 <load_xdir+0x12f>
c0003738:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000373b:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000373e:	75 3c                	jne    c000377c <load_xdir+0x12a>
c0003740:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003746:	77 0d                	ja     c0003755 <load_xdir+0x103>
c0003748:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000374b:	b9 20 00 00 00       	mov    ecx,0x20
c0003750:	e8 96 e3 ff ff       	call   c0001aeb <mem_cpy>
c0003755:	83 c5 20             	add    ebp,0x20
c0003758:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000375c:	77 b3                	ja     c0003711 <load_xdir+0xbf>
c000375e:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003764:	77 1b                	ja     c0003781 <load_xdir+0x12f>
c0003766:	89 f8                	mov    eax,edi
c0003768:	e8 cd e7 ff ff       	call   c0001f3a <xdir_sum>
c000376d:	89 c1                	mov    ecx,eax
c000376f:	8d 47 02             	lea    eax,[edi+0x2]
c0003772:	e8 f5 e2 ff ff       	call   c0001a6c <ld_word>
c0003777:	66 39 c1             	cmp    cx,ax
c000377a:	74 05                	je     c0003781 <load_xdir+0x12f>
c000377c:	bb 02 00 00 00       	mov    ebx,0x2
c0003781:	83 c4 1c             	add    esp,0x1c
c0003784:	89 d8                	mov    eax,ebx
c0003786:	5b                   	pop    ebx
c0003787:	5e                   	pop    esi
c0003788:	5f                   	pop    edi
c0003789:	5d                   	pop    ebp
c000378a:	c3                   	ret    

c000378b <load_obj_xdir>:
c000378b:	53                   	push   ebx
c000378c:	89 c3                	mov    ebx,eax
c000378e:	83 ec 08             	sub    esp,0x8
c0003791:	8b 02                	mov    eax,DWORD PTR [edx]
c0003793:	89 03                	mov    DWORD PTR [ebx],eax
c0003795:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003798:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000379b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000379e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00037a1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00037a4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00037ab:	30 c0                	xor    al,al
c00037ad:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037b4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00037b7:	89 d8                	mov    eax,ebx
c00037b9:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037bc:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037bf:	e8 04 f8 ff ff       	call   c0002fc8 <dir_sdi>
c00037c4:	85 c0                	test   eax,eax
c00037c6:	75 0b                	jne    c00037d3 <load_obj_xdir+0x48>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	83 c4 08             	add    esp,0x8
c00037cd:	5b                   	pop    ebx
c00037ce:	e9 7f fe ff ff       	jmp    c0003652 <load_xdir>
c00037d3:	83 c4 08             	add    esp,0x8
c00037d6:	5b                   	pop    ebx
c00037d7:	c3                   	ret    

c00037d8 <dir_read>:
c00037d8:	55                   	push   ebp
c00037d9:	bd 04 00 00 00       	mov    ebp,0x4
c00037de:	57                   	push   edi
c00037df:	56                   	push   esi
c00037e0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037e5:	53                   	push   ebx
c00037e6:	89 c3                	mov    ebx,eax
c00037e8:	83 ec 1c             	sub    esp,0x1c
c00037eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037ef:	8b 38                	mov    edi,DWORD PTR [eax]
c00037f1:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037f6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037f9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037fc:	89 c8                	mov    eax,ecx
c00037fe:	09 d0                	or     eax,edx
c0003800:	0f 84 25 01 00 00    	je     c000392b <dir_read+0x153>
c0003806:	89 f8                	mov    eax,edi
c0003808:	e8 3d ea ff ff       	call   c000224a <move_window>
c000380d:	89 c5                	mov    ebp,eax
c000380f:	85 c0                	test   eax,eax
c0003811:	0f 85 23 01 00 00    	jne    c000393a <dir_read+0x162>
c0003817:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000381a:	8a 0a                	mov    cl,BYTE PTR [edx]
c000381c:	84 c9                	test   cl,cl
c000381e:	0f 84 11 01 00 00    	je     c0003935 <dir_read+0x15d>
c0003824:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003827:	75 48                	jne    c0003871 <dir_read+0x99>
c0003829:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000382e:	74 10                	je     c0003840 <dir_read+0x68>
c0003830:	80 f9 83             	cmp    cl,0x83
c0003833:	0f 85 dd 00 00 00    	jne    c0003916 <dir_read+0x13e>
c0003839:	31 ed                	xor    ebp,ebp
c000383b:	e9 08 01 00 00       	jmp    c0003948 <dir_read+0x170>
c0003840:	80 f9 85             	cmp    cl,0x85
c0003843:	0f 85 cd 00 00 00    	jne    c0003916 <dir_read+0x13e>
c0003849:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000384c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000384f:	89 d8                	mov    eax,ebx
c0003851:	e8 fc fd ff ff       	call   c0003652 <load_xdir>
c0003856:	89 c5                	mov    ebp,eax
c0003858:	85 c0                	test   eax,eax
c000385a:	0f 85 da 00 00 00    	jne    c000393a <dir_read+0x162>
c0003860:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003863:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003866:	83 e0 3f             	and    eax,0x3f
c0003869:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000386c:	e9 d7 00 00 00       	jmp    c0003948 <dir_read+0x170>
c0003871:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003874:	83 e0 3f             	and    eax,0x3f
c0003877:	80 f9 2e             	cmp    cl,0x2e
c000387a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000387e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003881:	0f 84 8a 00 00 00    	je     c0003911 <dir_read+0x139>
c0003887:	80 f9 e5             	cmp    cl,0xe5
c000388a:	0f 84 81 00 00 00    	je     c0003911 <dir_read+0x139>
c0003890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003894:	83 e0 1f             	and    eax,0x1f
c0003897:	83 f8 08             	cmp    eax,0x8
c000389a:	0f 94 c0             	sete   al
c000389d:	0f b6 c0             	movzx  eax,al
c00038a0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038a4:	75 6b                	jne    c0003911 <dir_read+0x139>
c00038a6:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00038ab:	75 44                	jne    c00038f1 <dir_read+0x119>
c00038ad:	f6 c1 40             	test   cl,0x40
c00038b0:	74 12                	je     c00038c4 <dir_read+0xec>
c00038b2:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038b5:	83 e1 bf             	and    ecx,0xffffffbf
c00038b8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038bc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038bf:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038c2:	eb 06                	jmp    c00038ca <dir_read+0xf2>
c00038c4:	89 f0                	mov    eax,esi
c00038c6:	38 c8                	cmp    al,cl
c00038c8:	75 47                	jne    c0003911 <dir_read+0x139>
c00038ca:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ce:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d3:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038d6:	75 3e                	jne    c0003916 <dir_read+0x13e>
c00038d8:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038dc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038df:	e8 8a e4 ff ff       	call   c0001d6e <pick_lfn>
c00038e4:	85 c0                	test   eax,eax
c00038e6:	74 2e                	je     c0003916 <dir_read+0x13e>
c00038e8:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ec:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038ef:	eb 25                	jmp    c0003916 <dir_read+0x13e>
c00038f1:	89 f0                	mov    eax,esi
c00038f3:	84 c0                	test   al,al
c00038f5:	75 11                	jne    c0003908 <dir_read+0x130>
c00038f7:	89 d0                	mov    eax,edx
c00038f9:	e8 2a e6 ff ff       	call   c0001f28 <sum_sfn>
c00038fe:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003902:	0f 84 31 ff ff ff    	je     c0003839 <dir_read+0x61>
c0003908:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000390f:	eb 37                	jmp    c0003948 <dir_read+0x170>
c0003911:	be ff ff ff ff       	mov    esi,0xffffffff
c0003916:	31 d2                	xor    edx,edx
c0003918:	89 d8                	mov    eax,ebx
c000391a:	e8 01 fc ff ff       	call   c0003520 <dir_next>
c000391f:	89 c5                	mov    ebp,eax
c0003921:	85 c0                	test   eax,eax
c0003923:	0f 84 cd fe ff ff    	je     c00037f6 <dir_read+0x1e>
c0003929:	eb 0f                	jmp    c000393a <dir_read+0x162>
c000392b:	85 ed                	test   ebp,ebp
c000392d:	0f 84 06 ff ff ff    	je     c0003839 <dir_read+0x61>
c0003933:	eb 05                	jmp    c000393a <dir_read+0x162>
c0003935:	bd 04 00 00 00       	mov    ebp,0x4
c000393a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003941:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003948:	83 c4 1c             	add    esp,0x1c
c000394b:	89 e8                	mov    eax,ebp
c000394d:	5b                   	pop    ebx
c000394e:	5e                   	pop    esi
c000394f:	5f                   	pop    edi
c0003950:	5d                   	pop    ebp
c0003951:	c3                   	ret    

c0003952 <dir_alloc>:
c0003952:	55                   	push   ebp
c0003953:	89 d5                	mov    ebp,edx
c0003955:	57                   	push   edi
c0003956:	31 d2                	xor    edx,edx
c0003958:	56                   	push   esi
c0003959:	53                   	push   ebx
c000395a:	89 c3                	mov    ebx,eax
c000395c:	83 ec 0c             	sub    esp,0xc
c000395f:	8b 38                	mov    edi,DWORD PTR [eax]
c0003961:	e8 62 f6 ff ff       	call   c0002fc8 <dir_sdi>
c0003966:	85 c0                	test   eax,eax
c0003968:	75 4e                	jne    c00039b8 <dir_alloc+0x66>
c000396a:	31 f6                	xor    esi,esi
c000396c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000396f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003972:	89 f8                	mov    eax,edi
c0003974:	e8 d1 e8 ff ff       	call   c000224a <move_window>
c0003979:	85 c0                	test   eax,eax
c000397b:	75 3b                	jne    c00039b8 <dir_alloc+0x66>
c000397d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003980:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003983:	8a 12                	mov    dl,BYTE PTR [edx]
c0003985:	75 07                	jne    c000398e <dir_alloc+0x3c>
c0003987:	f7 d2                	not    edx
c0003989:	c0 ea 07             	shr    dl,0x7
c000398c:	eb 0d                	jmp    c000399b <dir_alloc+0x49>
c000398e:	84 d2                	test   dl,dl
c0003990:	0f 94 c1             	sete   cl
c0003993:	80 fa e5             	cmp    dl,0xe5
c0003996:	0f 94 c2             	sete   dl
c0003999:	09 ca                	or     edx,ecx
c000399b:	84 d2                	test   dl,dl
c000399d:	74 07                	je     c00039a6 <dir_alloc+0x54>
c000399f:	46                   	inc    esi
c00039a0:	39 ee                	cmp    esi,ebp
c00039a2:	75 04                	jne    c00039a8 <dir_alloc+0x56>
c00039a4:	eb 1c                	jmp    c00039c2 <dir_alloc+0x70>
c00039a6:	31 f6                	xor    esi,esi
c00039a8:	ba 01 00 00 00       	mov    edx,0x1
c00039ad:	89 d8                	mov    eax,ebx
c00039af:	e8 6c fb ff ff       	call   c0003520 <dir_next>
c00039b4:	85 c0                	test   eax,eax
c00039b6:	74 b4                	je     c000396c <dir_alloc+0x1a>
c00039b8:	83 f8 04             	cmp    eax,0x4
c00039bb:	75 05                	jne    c00039c2 <dir_alloc+0x70>
c00039bd:	b8 07 00 00 00       	mov    eax,0x7
c00039c2:	83 c4 0c             	add    esp,0xc
c00039c5:	5b                   	pop    ebx
c00039c6:	5e                   	pop    esi
c00039c7:	5f                   	pop    edi
c00039c8:	5d                   	pop    ebp
c00039c9:	c3                   	ret    

c00039ca <store_xdir>:
c00039ca:	55                   	push   ebp
c00039cb:	57                   	push   edi
c00039cc:	89 c7                	mov    edi,eax
c00039ce:	56                   	push   esi
c00039cf:	53                   	push   ebx
c00039d0:	83 ec 0c             	sub    esp,0xc
c00039d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00039d5:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039d8:	89 e8                	mov    eax,ebp
c00039da:	e8 5b e5 ff ff       	call   c0001f3a <xdir_sum>
c00039df:	0f b7 d0             	movzx  edx,ax
c00039e2:	8d 45 02             	lea    eax,[ebp+0x2]
c00039e5:	e8 f4 e0 ff ff       	call   c0001ade <st_word>
c00039ea:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039ee:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039f1:	89 f8                	mov    eax,edi
c00039f3:	e8 d0 f5 ff ff       	call   c0002fc8 <dir_sdi>
c00039f8:	89 c6                	mov    esi,eax
c00039fa:	85 f6                	test   esi,esi
c00039fc:	75 3d                	jne    c0003a3b <store_xdir+0x71>
c00039fe:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003a01:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003a04:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a06:	e8 3f e8 ff ff       	call   c000224a <move_window>
c0003a0b:	89 c6                	mov    esi,eax
c0003a0d:	85 c0                	test   eax,eax
c0003a0f:	75 2a                	jne    c0003a3b <store_xdir+0x71>
c0003a11:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003a14:	b9 20 00 00 00       	mov    ecx,0x20
c0003a19:	89 ea                	mov    edx,ebp
c0003a1b:	e8 cb e0 ff ff       	call   c0001aeb <mem_cpy>
c0003a20:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a22:	85 db                	test   ebx,ebx
c0003a24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a28:	74 11                	je     c0003a3b <store_xdir+0x71>
c0003a2a:	31 d2                	xor    edx,edx
c0003a2c:	89 f8                	mov    eax,edi
c0003a2e:	83 c5 20             	add    ebp,0x20
c0003a31:	e8 ea fa ff ff       	call   c0003520 <dir_next>
c0003a36:	4b                   	dec    ebx
c0003a37:	89 c6                	mov    esi,eax
c0003a39:	eb bf                	jmp    c00039fa <store_xdir+0x30>
c0003a3b:	89 f0                	mov    eax,esi
c0003a3d:	83 fe 02             	cmp    esi,0x2
c0003a40:	76 05                	jbe    c0003a47 <store_xdir+0x7d>
c0003a42:	b8 02 00 00 00       	mov    eax,0x2
c0003a47:	83 c4 0c             	add    esp,0xc
c0003a4a:	5b                   	pop    ebx
c0003a4b:	5e                   	pop    esi
c0003a4c:	5f                   	pop    edi
c0003a4d:	5d                   	pop    ebp
c0003a4e:	c3                   	ret    

c0003a4f <dir_remove>:
c0003a4f:	57                   	push   edi
c0003a50:	56                   	push   esi
c0003a51:	53                   	push   ebx
c0003a52:	89 c3                	mov    ebx,eax
c0003a54:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a57:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a59:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a5c:	83 fa ff             	cmp    edx,0xffffffff
c0003a5f:	74 09                	je     c0003a6a <dir_remove+0x1b>
c0003a61:	e8 62 f5 ff ff       	call   c0002fc8 <dir_sdi>
c0003a66:	85 c0                	test   eax,eax
c0003a68:	75 41                	jne    c0003aab <dir_remove+0x5c>
c0003a6a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a6d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a70:	89 f0                	mov    eax,esi
c0003a72:	e8 d3 e7 ff ff       	call   c000224a <move_window>
c0003a77:	85 c0                	test   eax,eax
c0003a79:	75 26                	jne    c0003aa1 <dir_remove+0x52>
c0003a7b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a7e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a81:	75 05                	jne    c0003a88 <dir_remove+0x39>
c0003a83:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a86:	eb 03                	jmp    c0003a8b <dir_remove+0x3c>
c0003a88:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a8b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8f:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a92:	73 17                	jae    c0003aab <dir_remove+0x5c>
c0003a94:	31 d2                	xor    edx,edx
c0003a96:	89 d8                	mov    eax,ebx
c0003a98:	e8 83 fa ff ff       	call   c0003520 <dir_next>
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	74 c9                	je     c0003a6a <dir_remove+0x1b>
c0003aa1:	83 f8 04             	cmp    eax,0x4
c0003aa4:	75 05                	jne    c0003aab <dir_remove+0x5c>
c0003aa6:	b8 02 00 00 00       	mov    eax,0x2
c0003aab:	5b                   	pop    ebx
c0003aac:	5e                   	pop    esi
c0003aad:	5f                   	pop    edi
c0003aae:	c3                   	ret    

c0003aaf <create_name>:
c0003aaf:	55                   	push   ebp
c0003ab0:	89 d5                	mov    ebp,edx
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	31 f6                	xor    esi,esi
c0003ab8:	53                   	push   ebx
c0003ab9:	83 ec 3c             	sub    esp,0x3c
c0003abc:	8b 02                	mov    eax,DWORD PTR [edx]
c0003abe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ac2:	8b 07                	mov    eax,DWORD PTR [edi]
c0003ac4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ac7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003acb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003acf:	e8 72 e0 ff ff       	call   c0001b46 <tchar2uni>
c0003ad4:	89 c3                	mov    ebx,eax
c0003ad6:	83 f8 ff             	cmp    eax,0xffffffff
c0003ad9:	75 0a                	jne    c0003ae5 <create_name+0x36>
c0003adb:	b8 06 00 00 00       	mov    eax,0x6
c0003ae0:	e9 9e 02 00 00       	jmp    c0003d83 <create_name+0x2d4>
c0003ae5:	3d ff ff 00 00       	cmp    eax,0xffff
c0003aea:	76 0c                	jbe    c0003af8 <create_name+0x49>
c0003aec:	c1 e8 10             	shr    eax,0x10
c0003aef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003af3:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003af7:	46                   	inc    esi
c0003af8:	66 83 fb 1f          	cmp    bx,0x1f
c0003afc:	76 4f                	jbe    c0003b4d <create_name+0x9e>
c0003afe:	66 83 fb 5c          	cmp    bx,0x5c
c0003b02:	74 35                	je     c0003b39 <create_name+0x8a>
c0003b04:	66 83 fb 2f          	cmp    bx,0x2f
c0003b08:	74 2f                	je     c0003b39 <create_name+0x8a>
c0003b0a:	66 83 fb 7f          	cmp    bx,0x7f
c0003b0e:	77 11                	ja     c0003b21 <create_name+0x72>
c0003b10:	0f b7 d3             	movzx  edx,bx
c0003b13:	b8 92 5d 02 c0       	mov    eax,0xc0025d92
c0003b18:	e8 11 e0 ff ff       	call   c0001b2e <chk_chr>
c0003b1d:	85 c0                	test   eax,eax
c0003b1f:	75 ba                	jne    c0003adb <create_name+0x2c>
c0003b21:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b27:	77 b2                	ja     c0003adb <create_name+0x2c>
c0003b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b31:	46                   	inc    esi
c0003b32:	eb 97                	jmp    c0003acb <create_name+0x1c>
c0003b34:	40                   	inc    eax
c0003b35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b3d:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b3f:	80 fa 2f             	cmp    dl,0x2f
c0003b42:	74 f0                	je     c0003b34 <create_name+0x85>
c0003b44:	80 fa 5c             	cmp    dl,0x5c
c0003b47:	74 eb                	je     c0003b34 <create_name+0x85>
c0003b49:	31 db                	xor    ebx,ebx
c0003b4b:	eb 02                	jmp    c0003b4f <create_name+0xa0>
c0003b4d:	b3 04                	mov    bl,0x4
c0003b4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b53:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b56:	85 f6                	test   esi,esi
c0003b58:	74 18                	je     c0003b72 <create_name+0xc3>
c0003b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b5e:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b63:	66 83 f8 20          	cmp    ax,0x20
c0003b67:	74 06                	je     c0003b6f <create_name+0xc0>
c0003b69:	66 83 f8 2e          	cmp    ax,0x2e
c0003b6d:	75 03                	jne    c0003b72 <create_name+0xc3>
c0003b6f:	4e                   	dec    esi
c0003b70:	eb e4                	jmp    c0003b56 <create_name+0xa7>
c0003b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b76:	31 ed                	xor    ebp,ebp
c0003b78:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b7e:	85 f6                	test   esi,esi
c0003b80:	0f 84 55 ff ff ff    	je     c0003adb <create_name+0x2c>
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b8d:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b91:	66 83 f8 20          	cmp    ax,0x20
c0003b95:	75 04                	jne    c0003b9b <create_name+0xec>
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	eb eb                	jmp    c0003b86 <create_name+0xd7>
c0003b9b:	85 ed                	test   ebp,ebp
c0003b9d:	75 06                	jne    c0003ba5 <create_name+0xf6>
c0003b9f:	66 83 f8 2e          	cmp    ax,0x2e
c0003ba3:	75 08                	jne    c0003bad <create_name+0xfe>
c0003ba5:	83 cb 03             	or     ebx,0x3
c0003ba8:	eb 03                	jmp    c0003bad <create_name+0xfe>
c0003baa:	4e                   	dec    esi
c0003bab:	74 0c                	je     c0003bb9 <create_name+0x10a>
c0003bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bb1:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003bb7:	75 f1                	jne    c0003baa <create_name+0xfb>
c0003bb9:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbe:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003bc1:	ba 20 00 00 00       	mov    edx,0x20
c0003bc6:	e8 35 df ff ff       	call   c0001b00 <mem_set>
c0003bcb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bd3:	31 c9                	xor    ecx,ecx
c0003bd5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bda:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bdd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003be5:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003be9:	66 85 ed             	test   bp,bp
c0003bec:	0f 84 30 01 00 00    	je     c0003d22 <create_name+0x273>
c0003bf2:	66 83 fd 20          	cmp    bp,0x20
c0003bf6:	74 10                	je     c0003c08 <create_name+0x159>
c0003bf8:	66 83 fd 2e          	cmp    bp,0x2e
c0003bfc:	75 13                	jne    c0003c11 <create_name+0x162>
c0003bfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c02:	0f 84 6b 01 00 00    	je     c0003d73 <create_name+0x2c4>
c0003c08:	83 cb 03             	or     ebx,0x3
c0003c0b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003c0f:	eb c9                	jmp    c0003bda <create_name+0x12b>
c0003c11:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003c15:	73 0b                	jae    c0003c22 <create_name+0x173>
c0003c17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1b:	75 47                	jne    c0003c64 <create_name+0x1b5>
c0003c1d:	e9 51 01 00 00       	jmp    c0003d73 <create_name+0x2c4>
c0003c22:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c27:	75 10                	jne    c0003c39 <create_name+0x18a>
c0003c29:	83 cb 03             	or     ebx,0x3
c0003c2c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c34:	e9 e9 00 00 00       	jmp    c0003d22 <create_name+0x273>
c0003c39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c3d:	74 0d                	je     c0003c4c <create_name+0x19d>
c0003c3f:	83 cb 03             	or     ebx,0x3
c0003c42:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c46:	0f 87 d6 00 00 00    	ja     c0003d22 <create_name+0x273>
c0003c4c:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c51:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c55:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c5d:	b9 08 00 00 00       	mov    ecx,0x8
c0003c62:	eb a7                	jmp    c0003c0b <create_name+0x15c>
c0003c64:	66 83 fd 7f          	cmp    bp,0x7f
c0003c68:	76 68                	jbe    c0003cd2 <create_name+0x223>
c0003c6a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c6e:	88 da                	mov    dl,bl
c0003c70:	83 ca 02             	or     edx,0x2
c0003c73:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c77:	50                   	push   eax
c0003c78:	50                   	push   eax
c0003c79:	68 b5 01 00 00       	push   0x1b5
c0003c7e:	55                   	push   ebp
c0003c7f:	e8 48 46 00 00       	call   c00082cc <ff_uni2oem>
c0003c84:	83 c4 10             	add    esp,0x10
c0003c87:	89 c5                	mov    ebp,eax
c0003c89:	a8 80                	test   al,0x80
c0003c8b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c8f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c93:	74 0c                	je     c0003ca1 <create_name+0x1f2>
c0003c95:	83 e5 7f             	and    ebp,0x7f
c0003c98:	0f b6 ad e0 5c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda320]
c0003c9f:	eb 2a                	jmp    c0003ccb <create_name+0x21c>
c0003ca1:	66 3d ff 00          	cmp    ax,0xff
c0003ca5:	76 24                	jbe    c0003ccb <create_name+0x21c>
c0003ca7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003cab:	48                   	dec    eax
c0003cac:	39 c8                	cmp    eax,ecx
c0003cae:	77 0c                	ja     c0003cbc <create_name+0x20d>
c0003cb0:	83 cb 03             	or     ebx,0x3
c0003cb3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003cb7:	e9 4f ff ff ff       	jmp    c0003c0b <create_name+0x15c>
c0003cbc:	89 e8                	mov    eax,ebp
c0003cbe:	88 d3                	mov    bl,dl
c0003cc0:	66 c1 e8 08          	shr    ax,0x8
c0003cc4:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc8:	41                   	inc    ecx
c0003cc9:	eb 4b                	jmp    c0003d16 <create_name+0x267>
c0003ccb:	88 d3                	mov    bl,dl
c0003ccd:	66 85 ed             	test   bp,bp
c0003cd0:	74 19                	je     c0003ceb <create_name+0x23c>
c0003cd2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cd6:	0f b7 d5             	movzx  edx,bp
c0003cd9:	b8 9b 5d 02 c0       	mov    eax,0xc0025d9b
c0003cde:	e8 4b de ff ff       	call   c0001b2e <chk_chr>
c0003ce3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ce7:	85 c0                	test   eax,eax
c0003ce9:	74 0a                	je     c0003cf5 <create_name+0x246>
c0003ceb:	83 cb 03             	or     ebx,0x3
c0003cee:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cf3:	eb 21                	jmp    c0003d16 <create_name+0x267>
c0003cf5:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cf8:	66 83 f8 19          	cmp    ax,0x19
c0003cfc:	77 07                	ja     c0003d05 <create_name+0x256>
c0003cfe:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003d03:	eb 11                	jmp    c0003d16 <create_name+0x267>
c0003d05:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003d08:	66 83 f8 19          	cmp    ax,0x19
c0003d0c:	77 08                	ja     c0003d16 <create_name+0x267>
c0003d0e:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003d13:	83 ed 20             	sub    ebp,0x20
c0003d16:	89 e8                	mov    eax,ebp
c0003d18:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003d1c:	41                   	inc    ecx
c0003d1d:	e9 e9 fe ff ff       	jmp    c0003c0b <create_name+0x15c>
c0003d22:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d26:	75 04                	jne    c0003d2c <create_name+0x27d>
c0003d28:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d2c:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d31:	75 05                	jne    c0003d38 <create_name+0x289>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d3c:	83 e0 0c             	and    eax,0xc
c0003d3f:	3c 0c                	cmp    al,0xc
c0003d41:	74 0b                	je     c0003d4e <create_name+0x29f>
c0003d43:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d47:	83 e0 03             	and    eax,0x3
c0003d4a:	3c 03                	cmp    al,0x3
c0003d4c:	75 05                	jne    c0003d53 <create_name+0x2a4>
c0003d4e:	83 cb 02             	or     ebx,0x2
c0003d51:	eb 19                	jmp    c0003d6c <create_name+0x2bd>
c0003d53:	f6 c3 02             	test   bl,0x2
c0003d56:	75 14                	jne    c0003d6c <create_name+0x2bd>
c0003d58:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d5d:	74 03                	je     c0003d62 <create_name+0x2b3>
c0003d5f:	83 cb 10             	or     ebx,0x10
c0003d62:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d67:	74 03                	je     c0003d6c <create_name+0x2bd>
c0003d69:	83 cb 08             	or     ebx,0x8
c0003d6c:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d6f:	31 c0                	xor    eax,eax
c0003d71:	eb 10                	jmp    c0003d83 <create_name+0x2d4>
c0003d73:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d78:	0f 85 ce fe ff ff    	jne    c0003c4c <create_name+0x19d>
c0003d7e:	e9 a6 fe ff ff       	jmp    c0003c29 <create_name+0x17a>
c0003d83:	83 c4 3c             	add    esp,0x3c
c0003d86:	5b                   	pop    ebx
c0003d87:	5e                   	pop    esi
c0003d88:	5f                   	pop    edi
c0003d89:	5d                   	pop    ebp
c0003d8a:	c3                   	ret    

c0003d8b <xname_sum>:
c0003d8b:	56                   	push   esi
c0003d8c:	53                   	push   ebx
c0003d8d:	89 c6                	mov    esi,eax
c0003d8f:	51                   	push   ecx
c0003d90:	31 db                	xor    ebx,ebx
c0003d92:	83 c6 02             	add    esi,0x2
c0003d95:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d99:	66 85 c0             	test   ax,ax
c0003d9c:	74 1f                	je     c0003dbd <xname_sum+0x32>
c0003d9e:	83 ec 0c             	sub    esp,0xc
c0003da1:	66 d1 cb             	ror    bx,1
c0003da4:	50                   	push   eax
c0003da5:	e8 1e 46 00 00       	call   c00083c8 <ff_wtoupper>
c0003daa:	83 c4 10             	add    esp,0x10
c0003dad:	0f b6 d0             	movzx  edx,al
c0003db0:	66 c1 e8 08          	shr    ax,0x8
c0003db4:	01 d3                	add    ebx,edx
c0003db6:	66 d1 cb             	ror    bx,1
c0003db9:	01 c3                	add    ebx,eax
c0003dbb:	eb d5                	jmp    c0003d92 <xname_sum+0x7>
c0003dbd:	89 d8                	mov    eax,ebx
c0003dbf:	5a                   	pop    edx
c0003dc0:	5b                   	pop    ebx
c0003dc1:	5e                   	pop    esi
c0003dc2:	c3                   	ret    

c0003dc3 <create_xdir>:
c0003dc3:	55                   	push   ebp
c0003dc4:	b9 40 00 00 00       	mov    ecx,0x40
c0003dc9:	57                   	push   edi
c0003dca:	bd 01 00 00 00       	mov    ebp,0x1
c0003dcf:	56                   	push   esi
c0003dd0:	31 ff                	xor    edi,edi
c0003dd2:	53                   	push   ebx
c0003dd3:	be 40 00 00 00       	mov    esi,0x40
c0003dd8:	89 c3                	mov    ebx,eax
c0003dda:	83 ec 1c             	sub    esp,0x1c
c0003ddd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003de1:	31 d2                	xor    edx,edx
c0003de3:	e8 18 dd ff ff       	call   c0001b00 <mem_set>
c0003de8:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003deb:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003def:	31 c9                	xor    ecx,ecx
c0003df1:	8d 46 01             	lea    eax,[esi+0x1]
c0003df4:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003df8:	83 c6 02             	add    esi,0x2
c0003dfb:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dff:	66 85 ed             	test   bp,bp
c0003e02:	74 12                	je     c0003e16 <create_xdir+0x53>
c0003e04:	0f b6 c1             	movzx  eax,cl
c0003e07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e0b:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003e0f:	66 83 fd 01          	cmp    bp,0x1
c0003e13:	80 d9 ff             	sbb    cl,0xff
c0003e16:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003e19:	0f b7 d5             	movzx  edx,bp
c0003e1c:	83 c6 02             	add    esi,0x2
c0003e1f:	e8 ba dc ff ff       	call   c0001ade <st_word>
c0003e24:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e2a:	75 d3                	jne    c0003dff <create_xdir+0x3c>
c0003e2c:	8d 47 01             	lea    eax,[edi+0x1]
c0003e2f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e37:	0f b6 c1             	movzx  eax,cl
c0003e3a:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e3f:	74 07                	je     c0003e48 <create_xdir+0x85>
c0003e41:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e46:	eb a9                	jmp    c0003df1 <create_xdir+0x2e>
c0003e48:	8d 47 02             	lea    eax,[edi+0x2]
c0003e4b:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e4e:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e51:	89 d0                	mov    eax,edx
c0003e53:	e8 33 ff ff ff       	call   c0003d8b <xname_sum>
c0003e58:	83 c4 1c             	add    esp,0x1c
c0003e5b:	0f b7 d0             	movzx  edx,ax
c0003e5e:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e61:	5b                   	pop    ebx
c0003e62:	5e                   	pop    esi
c0003e63:	5f                   	pop    edi
c0003e64:	5d                   	pop    ebp
c0003e65:	e9 74 dc ff ff       	jmp    c0001ade <st_word>

c0003e6a <cmp_lfn>:
c0003e6a:	55                   	push   ebp
c0003e6b:	57                   	push   edi
c0003e6c:	89 d7                	mov    edi,edx
c0003e6e:	56                   	push   esi
c0003e6f:	53                   	push   ebx
c0003e70:	83 ec 1c             	sub    esp,0x1c
c0003e73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e77:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e7a:	e8 ed db ff ff       	call   c0001a6c <ld_word>
c0003e7f:	66 85 c0             	test   ax,ax
c0003e82:	74 07                	je     c0003e8b <cmp_lfn+0x21>
c0003e84:	31 c0                	xor    eax,eax
c0003e86:	e9 9a 00 00 00       	jmp    c0003f25 <cmp_lfn+0xbb>
c0003e8b:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e8d:	bd 01 00 00 00       	mov    ebp,0x1
c0003e92:	83 e3 3f             	and    ebx,0x3f
c0003e95:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e9d:	4b                   	dec    ebx
c0003e9e:	6b db 0d             	imul   ebx,ebx,0xd
c0003ea1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003ea5:	0f b6 80 60 5d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda2a0]
c0003eac:	01 f8                	add    eax,edi
c0003eae:	e8 b9 db ff ff       	call   c0001a6c <ld_word>
c0003eb3:	66 85 ed             	test   bp,bp
c0003eb6:	89 c6                	mov    esi,eax
c0003eb8:	74 3c                	je     c0003ef6 <cmp_lfn+0x8c>
c0003eba:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003ec0:	77 c2                	ja     c0003e84 <cmp_lfn+0x1a>
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	0f b7 c0             	movzx  eax,ax
c0003ec8:	50                   	push   eax
c0003ec9:	e8 fa 44 00 00       	call   c00083c8 <ff_wtoupper>
c0003ece:	89 c5                	mov    ebp,eax
c0003ed0:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ed3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ed7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003edb:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003edf:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee2:	e8 e1 44 00 00       	call   c00083c8 <ff_wtoupper>
c0003ee7:	83 c4 10             	add    esp,0x10
c0003eea:	39 c5                	cmp    ebp,eax
c0003eec:	75 96                	jne    c0003e84 <cmp_lfn+0x1a>
c0003eee:	89 f5                	mov    ebp,esi
c0003ef0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ef4:	eb 04                	jmp    c0003efa <cmp_lfn+0x90>
c0003ef6:	66 46                	inc    si
c0003ef8:	75 8a                	jne    c0003e84 <cmp_lfn+0x1a>
c0003efa:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003efe:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003f03:	75 9c                	jne    c0003ea1 <cmp_lfn+0x37>
c0003f05:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003f08:	74 16                	je     c0003f20 <cmp_lfn+0xb6>
c0003f0a:	66 85 ed             	test   bp,bp
c0003f0d:	74 11                	je     c0003f20 <cmp_lfn+0xb6>
c0003f0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003f13:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003f18:	0f 94 c0             	sete   al
c0003f1b:	0f b6 c0             	movzx  eax,al
c0003f1e:	eb 05                	jmp    c0003f25 <cmp_lfn+0xbb>
c0003f20:	b8 01 00 00 00       	mov    eax,0x1
c0003f25:	83 c4 1c             	add    esp,0x1c
c0003f28:	5b                   	pop    ebx
c0003f29:	5e                   	pop    esi
c0003f2a:	5f                   	pop    edi
c0003f2b:	5d                   	pop    ebp
c0003f2c:	c3                   	ret    

c0003f2d <dir_find>:
c0003f2d:	55                   	push   ebp
c0003f2e:	31 d2                	xor    edx,edx
c0003f30:	57                   	push   edi
c0003f31:	56                   	push   esi
c0003f32:	53                   	push   ebx
c0003f33:	89 c3                	mov    ebx,eax
c0003f35:	83 ec 1c             	sub    esp,0x1c
c0003f38:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f3a:	e8 89 f0 ff ff       	call   c0002fc8 <dir_sdi>
c0003f3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f42:	85 c0                	test   eax,eax
c0003f44:	0f 85 9e 01 00 00    	jne    c00040e8 <dir_find+0x1bb>
c0003f4a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f4d:	0f 85 8d 00 00 00    	jne    c0003fe0 <dir_find+0xb3>
c0003f53:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f56:	e8 30 fe ff ff       	call   c0003d8b <xname_sum>
c0003f5b:	89 c7                	mov    edi,eax
c0003f5d:	31 d2                	xor    edx,edx
c0003f5f:	89 d8                	mov    eax,ebx
c0003f61:	e8 72 f8 ff ff       	call   c00037d8 <dir_read>
c0003f66:	85 c0                	test   eax,eax
c0003f68:	0f 85 5e 01 00 00    	jne    c00040cc <dir_find+0x19f>
c0003f6e:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f71:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f74:	e8 f3 da ff ff       	call   c0001a6c <ld_word>
c0003f79:	66 39 f8             	cmp    ax,di
c0003f7c:	75 df                	jne    c0003f5d <dir_find+0x30>
c0003f7e:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f81:	31 ed                	xor    ebp,ebp
c0003f83:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f87:	ba 40 00 00 00       	mov    edx,0x40
c0003f8c:	89 e9                	mov    ecx,ebp
c0003f8e:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f92:	0f 84 42 01 00 00    	je     c00040da <dir_find+0x1ad>
c0003f98:	f6 c2 1f             	test   dl,0x1f
c0003f9b:	75 03                	jne    c0003fa0 <dir_find+0x73>
c0003f9d:	83 c2 02             	add    edx,0x2
c0003fa0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003fa4:	89 d0                	mov    eax,edx
c0003fa6:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003fa9:	e8 be da ff ff       	call   c0001a6c <ld_word>
c0003fae:	83 ec 0c             	sub    esp,0xc
c0003fb1:	0f b7 c0             	movzx  eax,ax
c0003fb4:	50                   	push   eax
c0003fb5:	e8 0e 44 00 00       	call   c00083c8 <ff_wtoupper>
c0003fba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003fbe:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fc1:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc8:	e8 fb 43 00 00       	call   c00083c8 <ff_wtoupper>
c0003fcd:	83 c4 10             	add    esp,0x10
c0003fd0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fd4:	75 87                	jne    c0003f5d <dir_find+0x30>
c0003fd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fda:	45                   	inc    ebp
c0003fdb:	83 c2 02             	add    edx,0x2
c0003fde:	eb ac                	jmp    c0003f8c <dir_find+0x5f>
c0003fe0:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fe7:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fec:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ff1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003ff4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003ff7:	89 f0                	mov    eax,esi
c0003ff9:	e8 4c e2 ff ff       	call   c000224a <move_window>
c0003ffe:	85 c0                	test   eax,eax
c0004000:	0f 85 c6 00 00 00    	jne    c00040cc <dir_find+0x19f>
c0004006:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004009:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000400c:	84 c9                	test   cl,cl
c000400e:	0f 84 bd 00 00 00    	je     c00040d1 <dir_find+0x1a4>
c0004014:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004017:	88 d0                	mov    al,dl
c0004019:	83 e0 3f             	and    eax,0x3f
c000401c:	80 f9 e5             	cmp    cl,0xe5
c000401f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004022:	0f 84 87 00 00 00    	je     c00040af <dir_find+0x182>
c0004028:	80 e2 08             	and    dl,0x8
c000402b:	74 06                	je     c0004033 <dir_find+0x106>
c000402d:	3c 0f                	cmp    al,0xf
c000402f:	75 7e                	jne    c00040af <dir_find+0x182>
c0004031:	eb 04                	jmp    c0004037 <dir_find+0x10a>
c0004033:	3c 0f                	cmp    al,0xf
c0004035:	75 4c                	jne    c0004083 <dir_find+0x156>
c0004037:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000403b:	75 7e                	jne    c00040bb <dir_find+0x18e>
c000403d:	f6 c1 40             	test   cl,0x40
c0004040:	74 12                	je     c0004054 <dir_find+0x127>
c0004042:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004045:	83 e1 bf             	and    ecx,0xffffffbf
c0004048:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000404c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000404f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004052:	eb 06                	jmp    c000405a <dir_find+0x12d>
c0004054:	89 f8                	mov    eax,edi
c0004056:	38 c8                	cmp    al,cl
c0004058:	75 5c                	jne    c00040b6 <dir_find+0x189>
c000405a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000405e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004063:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004066:	75 53                	jne    c00040bb <dir_find+0x18e>
c0004068:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000406c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000406f:	89 ea                	mov    edx,ebp
c0004071:	e8 f4 fd ff ff       	call   c0003e6a <cmp_lfn>
c0004076:	85 c0                	test   eax,eax
c0004078:	74 41                	je     c00040bb <dir_find+0x18e>
c000407a:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000407e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004081:	eb 38                	jmp    c00040bb <dir_find+0x18e>
c0004083:	89 f8                	mov    eax,edi
c0004085:	84 c0                	test   al,al
c0004087:	75 0d                	jne    c0004096 <dir_find+0x169>
c0004089:	89 e8                	mov    eax,ebp
c000408b:	e8 98 de ff ff       	call   c0001f28 <sum_sfn>
c0004090:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004094:	74 52                	je     c00040e8 <dir_find+0x1bb>
c0004096:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000409a:	75 13                	jne    c00040af <dir_find+0x182>
c000409c:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000409f:	b9 0b 00 00 00       	mov    ecx,0xb
c00040a4:	89 e8                	mov    eax,ebp
c00040a6:	e8 60 da ff ff       	call   c0001b0b <mem_cmp>
c00040ab:	85 c0                	test   eax,eax
c00040ad:	74 39                	je     c00040e8 <dir_find+0x1bb>
c00040af:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040bb:	31 d2                	xor    edx,edx
c00040bd:	89 d8                	mov    eax,ebx
c00040bf:	e8 5c f4 ff ff       	call   c0003520 <dir_next>
c00040c4:	85 c0                	test   eax,eax
c00040c6:	0f 84 25 ff ff ff    	je     c0003ff1 <dir_find+0xc4>
c00040cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040cf:	eb 17                	jmp    c00040e8 <dir_find+0x1bb>
c00040d1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040d8:	eb 0e                	jmp    c00040e8 <dir_find+0x1bb>
c00040da:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040dd:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040e2:	0f 85 75 fe ff ff    	jne    c0003f5d <dir_find+0x30>
c00040e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040eb:	83 c4 1c             	add    esp,0x1c
c00040ee:	5b                   	pop    ebx
c00040ef:	5e                   	pop    esi
c00040f0:	5f                   	pop    edi
c00040f1:	5d                   	pop    ebp
c00040f2:	c3                   	ret    

c00040f3 <dir_register>:
c00040f3:	55                   	push   ebp
c00040f4:	57                   	push   edi
c00040f5:	56                   	push   esi
c00040f6:	be 06 00 00 00       	mov    esi,0x6
c00040fb:	53                   	push   ebx
c00040fc:	83 ec 6c             	sub    esp,0x6c
c00040ff:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004103:	0f 85 62 02 00 00    	jne    c000436b <dir_register+0x278>
c0004109:	8b 28                	mov    ebp,DWORD PTR [eax]
c000410b:	31 ff                	xor    edi,edi
c000410d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004110:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004115:	74 03                	je     c000411a <dir_register+0x27>
c0004117:	47                   	inc    edi
c0004118:	eb f6                	jmp    c0004110 <dir_register+0x1d>
c000411a:	89 c3                	mov    ebx,eax
c000411c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004120:	0f 85 e1 00 00 00    	jne    c0004207 <dir_register+0x114>
c0004126:	83 c7 0e             	add    edi,0xe
c0004129:	b9 0f 00 00 00       	mov    ecx,0xf
c000412e:	89 f8                	mov    eax,edi
c0004130:	31 d2                	xor    edx,edx
c0004132:	f7 f1                	div    ecx
c0004134:	8d 50 02             	lea    edx,[eax+0x2]
c0004137:	89 c7                	mov    edi,eax
c0004139:	89 d8                	mov    eax,ebx
c000413b:	e8 12 f8 ff ff       	call   c0003952 <dir_alloc>
c0004140:	89 c6                	mov    esi,eax
c0004142:	85 c0                	test   eax,eax
c0004144:	0f 85 21 02 00 00    	jne    c000436b <dir_register+0x278>
c000414a:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004150:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004153:	c1 e7 05             	shl    edi,0x5
c0004156:	29 f8                	sub    eax,edi
c0004158:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000415b:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000415e:	a8 04                	test   al,0x4
c0004160:	0f 84 91 00 00 00    	je     c00041f7 <dir_register+0x104>
c0004166:	83 e0 fb             	and    eax,0xfffffffb
c0004169:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000416c:	89 d8                	mov    eax,ebx
c000416e:	e8 25 ec ff ff       	call   c0002d98 <fill_first_frag>
c0004173:	85 c0                	test   eax,eax
c0004175:	0f 85 ee 01 00 00    	jne    c0004369 <dir_register+0x276>
c000417b:	83 c9 ff             	or     ecx,0xffffffff
c000417e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004181:	89 d8                	mov    eax,ebx
c0004183:	e8 db eb ff ff       	call   c0002d63 <fill_last_frag>
c0004188:	85 c0                	test   eax,eax
c000418a:	0f 85 d9 01 00 00    	jne    c0004369 <dir_register+0x276>
c0004190:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004194:	74 61                	je     c00041f7 <dir_register+0x104>
c0004196:	89 da                	mov    edx,ebx
c0004198:	8d 44 24 14          	lea    eax,[esp+0x14]
c000419c:	e8 ea f5 ff ff       	call   c000378b <load_obj_xdir>
c00041a1:	85 c0                	test   eax,eax
c00041a3:	0f 85 c0 01 00 00    	jne    c0004369 <dir_register+0x276>
c00041a9:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00041ad:	31 c9                	xor    ecx,ecx
c00041af:	c1 e2 09             	shl    edx,0x9
c00041b2:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00041b5:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00041b8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00041bb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00041be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041c1:	83 c0 38             	add    eax,0x38
c00041c4:	e8 1c d9 ff ff       	call   c0001ae5 <st_qword>
c00041c9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041cc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041cf:	83 c0 28             	add    eax,0x28
c00041d2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041d5:	e8 0b d9 ff ff       	call   c0001ae5 <st_qword>
c00041da:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041dd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041e0:	83 c8 01             	or     eax,0x1
c00041e3:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041ea:	e8 db f7 ff ff       	call   c00039ca <store_xdir>
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 72 01 00 00    	jne    c0004369 <dir_register+0x276>
c00041f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041fd:	e8 c1 fb ff ff       	call   c0003dc3 <create_xdir>
c0004202:	e9 64 01 00 00       	jmp    c000436b <dir_register+0x278>
c0004207:	8d 40 3c             	lea    eax,[eax+0x3c]
c000420a:	b9 0c 00 00 00       	mov    ecx,0xc
c000420f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004213:	89 c2                	mov    edx,eax
c0004215:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004219:	e8 cd d8 ff ff       	call   c0001aeb <mem_cpy>
c000421e:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004223:	74 58                	je     c000427d <dir_register+0x18a>
c0004225:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004229:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004231:	83 ec 0c             	sub    esp,0xc
c0004234:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000423b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000423f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004243:	e8 24 dc ff ff       	call   c0001e6c <gen_numname>
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 de fc ff ff       	call   c0003f2d <dir_find>
c000424f:	83 c4 10             	add    esp,0x10
c0004252:	89 c6                	mov    esi,eax
c0004254:	85 c0                	test   eax,eax
c0004256:	75 15                	jne    c000426d <dir_register+0x17a>
c0004258:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000425c:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004261:	75 ce                	jne    c0004231 <dir_register+0x13e>
c0004263:	be 07 00 00 00       	mov    esi,0x7
c0004268:	e9 fe 00 00 00       	jmp    c000436b <dir_register+0x278>
c000426d:	83 f8 04             	cmp    eax,0x4
c0004270:	0f 85 f5 00 00 00    	jne    c000436b <dir_register+0x278>
c0004276:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000427a:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000427d:	b9 01 00 00 00       	mov    ecx,0x1
c0004282:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004287:	74 0f                	je     c0004298 <dir_register+0x1a5>
c0004289:	b9 0d 00 00 00       	mov    ecx,0xd
c000428e:	8d 47 0c             	lea    eax,[edi+0xc]
c0004291:	31 d2                	xor    edx,edx
c0004293:	f7 f1                	div    ecx
c0004295:	8d 48 01             	lea    ecx,[eax+0x1]
c0004298:	89 ca                	mov    edx,ecx
c000429a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000429e:	89 d8                	mov    eax,ebx
c00042a0:	e8 ad f6 ff ff       	call   c0003952 <dir_alloc>
c00042a5:	89 c6                	mov    esi,eax
c00042a7:	85 c0                	test   eax,eax
c00042a9:	0f 85 bc 00 00 00    	jne    c000436b <dir_register+0x278>
c00042af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042b3:	49                   	dec    ecx
c00042b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042b8:	74 6a                	je     c0004324 <dir_register+0x231>
c00042ba:	89 c8                	mov    eax,ecx
c00042bc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042bf:	c1 e0 05             	shl    eax,0x5
c00042c2:	29 c2                	sub    edx,eax
c00042c4:	89 d8                	mov    eax,ebx
c00042c6:	e8 fd ec ff ff       	call   c0002fc8 <dir_sdi>
c00042cb:	89 c6                	mov    esi,eax
c00042cd:	85 c0                	test   eax,eax
c00042cf:	0f 85 96 00 00 00    	jne    c000436b <dir_register+0x278>
c00042d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042d9:	e8 4a dc ff ff       	call   c0001f28 <sum_sfn>
c00042de:	0f b6 f8             	movzx  edi,al
c00042e1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042e4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042e7:	89 e8                	mov    eax,ebp
c00042e9:	e8 5c df ff ff       	call   c000224a <move_window>
c00042ee:	89 c6                	mov    esi,eax
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 77                	jne    c000436b <dir_register+0x278>
c00042f4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042f9:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042fc:	83 ec 0c             	sub    esp,0xc
c00042ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004302:	57                   	push   edi
c0004303:	e8 e0 da ff ff       	call   c0001de8 <put_lfn>
c0004308:	31 d2                	xor    edx,edx
c000430a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430e:	89 d8                	mov    eax,ebx
c0004310:	e8 0b f2 ff ff       	call   c0003520 <dir_next>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	89 c6                	mov    esi,eax
c000431a:	85 c0                	test   eax,eax
c000431c:	75 4d                	jne    c000436b <dir_register+0x278>
c000431e:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004322:	75 bd                	jne    c00042e1 <dir_register+0x1ee>
c0004324:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004327:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000432a:	89 e8                	mov    eax,ebp
c000432c:	e8 19 df ff ff       	call   c000224a <move_window>
c0004331:	89 c6                	mov    esi,eax
c0004333:	85 c0                	test   eax,eax
c0004335:	75 34                	jne    c000436b <dir_register+0x278>
c0004337:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000433a:	b9 20 00 00 00       	mov    ecx,0x20
c000433f:	31 d2                	xor    edx,edx
c0004341:	e8 ba d7 ff ff       	call   c0001b00 <mem_set>
c0004346:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004349:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000434d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004352:	e8 94 d7 ff ff       	call   c0001aeb <mem_cpy>
c0004357:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000435a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000435d:	83 e0 18             	and    eax,0x18
c0004360:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004363:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004367:	eb 02                	jmp    c000436b <dir_register+0x278>
c0004369:	89 c6                	mov    esi,eax
c000436b:	83 c4 6c             	add    esp,0x6c
c000436e:	89 f0                	mov    eax,esi
c0004370:	5b                   	pop    ebx
c0004371:	5e                   	pop    esi
c0004372:	5f                   	pop    edi
c0004373:	5d                   	pop    ebp
c0004374:	c3                   	ret    

c0004375 <sync_fs>:
c0004375:	56                   	push   esi
c0004376:	53                   	push   ebx
c0004377:	53                   	push   ebx
c0004378:	89 c3                	mov    ebx,eax
c000437a:	e8 37 de ff ff       	call   c00021b6 <sync_window>
c000437f:	85 c0                	test   eax,eax
c0004381:	0f 85 b1 00 00 00    	jne    c0004438 <sync_fs+0xc3>
c0004387:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000438a:	0f 85 8e 00 00 00    	jne    c000441e <sync_fs+0xa9>
c0004390:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004394:	0f 85 84 00 00 00    	jne    c000441e <sync_fs+0xa9>
c000439a:	b9 00 02 00 00       	mov    ecx,0x200
c000439f:	8d 73 54             	lea    esi,[ebx+0x54]
c00043a2:	31 d2                	xor    edx,edx
c00043a4:	89 f0                	mov    eax,esi
c00043a6:	e8 55 d7 ff ff       	call   c0001b00 <mem_set>
c00043ab:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00043b1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00043b6:	e8 23 d7 ff ff       	call   c0001ade <st_word>
c00043bb:	ba 52 52 61 41       	mov    edx,0x41615252
c00043c0:	89 f0                	mov    eax,esi
c00043c2:	e8 1b d7 ff ff       	call   c0001ae2 <st_dword>
c00043c7:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043cd:	ba 72 72 41 61       	mov    edx,0x61417272
c00043d2:	e8 0b d7 ff ff       	call   c0001ae2 <st_dword>
c00043d7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043da:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043e0:	e8 fd d6 ff ff       	call   c0001ae2 <st_dword>
c00043e5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043e8:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043ee:	e8 ef d6 ff ff       	call   c0001ae2 <st_dword>
c00043f3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043f6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043f9:	83 c0 01             	add    eax,0x1
c00043fc:	83 d2 00             	adc    edx,0x0
c00043ff:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004402:	83 ec 0c             	sub    esp,0xc
c0004405:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004408:	6a 01                	push   0x1
c000440a:	52                   	push   edx
c000440b:	50                   	push   eax
c000440c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004410:	56                   	push   esi
c0004411:	50                   	push   eax
c0004412:	e8 20 d6 ff ff       	call   c0001a37 <disk_write>
c0004417:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000441b:	83 c4 20             	add    esp,0x20
c000441e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004422:	51                   	push   ecx
c0004423:	6a 00                	push   0x0
c0004425:	6a 00                	push   0x0
c0004427:	50                   	push   eax
c0004428:	e8 20 d6 ff ff       	call   c0001a4d <disk_ioctl>
c000442d:	83 c4 10             	add    esp,0x10
c0004430:	85 c0                	test   eax,eax
c0004432:	0f 95 c0             	setne  al
c0004435:	0f b6 c0             	movzx  eax,al
c0004438:	5a                   	pop    edx
c0004439:	5b                   	pop    ebx
c000443a:	5e                   	pop    esi
c000443b:	c3                   	ret    

c000443c <create_partition>:
c000443c:	55                   	push   ebp
c000443d:	0f b6 c0             	movzx  eax,al
c0004440:	57                   	push   edi
c0004441:	56                   	push   esi
c0004442:	53                   	push   ebx
c0004443:	83 ec 60             	sub    esp,0x60
c0004446:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000444a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000444e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004452:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004456:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000445a:	50                   	push   eax
c000445b:	6a 01                	push   0x1
c000445d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004461:	e8 e7 d5 ff ff       	call   c0001a4d <disk_ioctl>
c0004466:	83 c4 10             	add    esp,0x10
c0004469:	85 c0                	test   eax,eax
c000446b:	74 0a                	je     c0004477 <create_partition+0x3b>
c000446d:	b8 01 00 00 00       	mov    eax,0x1
c0004472:	e9 67 05 00 00       	jmp    c00049de <create_partition+0x5a2>
c0004477:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000447b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000447f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004483:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004487:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000448c:	0f 86 ed 03 00 00    	jbe    c000487f <create_partition+0x443>
c0004492:	83 c0 df             	add    eax,0xffffffdf
c0004495:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000449d:	83 d2 ff             	adc    edx,0xffffffff
c00044a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00044a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00044a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00044ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044b0:	83 c0 bd             	add    eax,0xffffffbd
c00044b3:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00044ba:	83 d2 ff             	adc    edx,0xffffffff
c00044bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044cd:	be 22 00 00 00       	mov    esi,0x22
c00044d2:	31 ff                	xor    edi,edi
c00044d4:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044dc:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044e4:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044ec:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044f6:	75 0e                	jne    c0004506 <create_partition+0xca>
c00044f8:	b9 00 02 00 00       	mov    ecx,0x200
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 fa d5 ff ff       	call   c0001b00 <mem_set>
c0004506:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000450a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000450e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004512:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004515:	0f 84 23 01 00 00    	je     c000463e <create_partition+0x202>
c000451b:	89 f0                	mov    eax,esi
c000451d:	89 fa                	mov    edx,edi
c000451f:	05 ff 07 00 00       	add    eax,0x7ff
c0004524:	83 d2 00             	adc    edx,0x0
c0004527:	89 c1                	mov    ecx,eax
c0004529:	89 d7                	mov    edi,edx
c000452b:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004531:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004535:	89 ce                	mov    esi,ecx
c0004537:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000453b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000453f:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004543:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004546:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000454a:	89 04 24             	mov    DWORD PTR [esp],eax
c000454d:	b8 64 00 00 00       	mov    eax,0x64
c0004552:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004555:	b8 00 00 00 00       	mov    eax,0x0
c000455a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000455e:	72 41                	jb     c00045a1 <create_partition+0x165>
c0004560:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004568:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000456c:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004571:	01 c1                	add    ecx,eax
c0004573:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004577:	f7 24 24             	mul    DWORD PTR [esp]
c000457a:	6a 00                	push   0x0
c000457c:	01 ca                	add    edx,ecx
c000457e:	6a 64                	push   0x64
c0004580:	52                   	push   edx
c0004581:	50                   	push   eax
c0004582:	e8 49 ed 01 00       	call   c00232d0 <__udivdi3>
c0004587:	83 c4 10             	add    esp,0x10
c000458a:	05 ff 07 00 00       	add    eax,0x7ff
c000458f:	83 d2 00             	adc    edx,0x0
c0004592:	89 c1                	mov    ecx,eax
c0004594:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004598:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000459e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00045a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00045a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00045a8:	01 f0                	add    eax,esi
c00045aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00045ae:	11 fa                	adc    edx,edi
c00045b0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00045b4:	19 d1                	sbb    ecx,edx
c00045b6:	73 2e                	jae    c00045e6 <create_partition+0x1aa>
c00045b8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00045bc:	89 f8                	mov    eax,edi
c00045be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045c5:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045c9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045d1:	73 6b                	jae    c000463e <create_partition+0x202>
c00045d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045db:	29 f0                	sub    eax,esi
c00045dd:	19 fa                	sbb    edx,edi
c00045df:	89 04 24             	mov    DWORD PTR [esp],eax
c00045e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045ea:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045ed:	74 4f                	je     c000463e <create_partition+0x202>
c00045ef:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045f2:	b9 10 00 00 00       	mov    ecx,0x10
c00045f7:	ba 70 5d 02 c0       	mov    edx,0xc0025d70
c00045fc:	e8 ea d4 ff ff       	call   c0001aeb <mem_cpy>
c0004601:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004605:	b9 10 00 00 00       	mov    ecx,0x10
c000460a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000460e:	e8 2c db ff ff       	call   c000213f <make_rand>
c0004613:	89 f2                	mov    edx,esi
c0004615:	89 f9                	mov    ecx,edi
c0004617:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000461b:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000461f:	e8 c1 d4 ff ff       	call   c0001ae5 <st_qword>
c0004624:	03 34 24             	add    esi,DWORD PTR [esp]
c0004627:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000462b:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000462f:	89 f2                	mov    edx,esi
c0004631:	89 f9                	mov    ecx,edi
c0004633:	83 c2 ff             	add    edx,0xffffffff
c0004636:	83 d1 ff             	adc    ecx,0xffffffff
c0004639:	e8 a7 d4 ff ff       	call   c0001ae5 <st_qword>
c000463e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004642:	83 e8 80             	sub    eax,0xffffff80
c0004645:	89 c5                	mov    ebp,eax
c0004647:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000464b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004651:	75 6b                	jne    c00046be <create_partition+0x282>
c0004653:	45                   	inc    ebp
c0004654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004658:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000465d:	e8 39 da ff ff       	call   c000209b <crc32>
c0004662:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004668:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000466c:	75 e5                	jne    c0004653 <create_partition+0x217>
c000466e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004672:	31 d2                	xor    edx,edx
c0004674:	83 ec 0c             	sub    esp,0xc
c0004677:	c1 ed 09             	shr    ebp,0x9
c000467a:	6a 01                	push   0x1
c000467c:	8d 45 02             	lea    eax,[ebp+0x2]
c000467f:	52                   	push   edx
c0004680:	50                   	push   eax
c0004681:	53                   	push   ebx
c0004682:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004686:	e8 ac d3 ff ff       	call   c0001a37 <disk_write>
c000468b:	83 c4 20             	add    esp,0x20
c000468e:	85 c0                	test   eax,eax
c0004690:	0f 85 d7 fd ff ff    	jne    c000446d <create_partition+0x31>
c0004696:	83 ec 0c             	sub    esp,0xc
c0004699:	31 d2                	xor    edx,edx
c000469b:	6a 01                	push   0x1
c000469d:	89 e8                	mov    eax,ebp
c000469f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00046a3:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00046a7:	52                   	push   edx
c00046a8:	50                   	push   eax
c00046a9:	53                   	push   ebx
c00046aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046ae:	e8 84 d3 ff ff       	call   c0001a37 <disk_write>
c00046b3:	83 c4 20             	add    esp,0x20
c00046b6:	85 c0                	test   eax,eax
c00046b8:	0f 85 af fd ff ff    	jne    c000446d <create_partition+0x31>
c00046be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046c6:	3d 00 40 00 00       	cmp    eax,0x4000
c00046cb:	74 0d                	je     c00046da <create_partition+0x29e>
c00046cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046d5:	e9 12 fe ff ff       	jmp    c00044ec <create_partition+0xb0>
c00046da:	31 d2                	xor    edx,edx
c00046dc:	b9 00 02 00 00       	mov    ecx,0x200
c00046e1:	89 d8                	mov    eax,ebx
c00046e3:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046e6:	e8 15 d4 ff ff       	call   c0001b00 <mem_set>
c00046eb:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046ee:	b9 10 00 00 00       	mov    ecx,0x10
c00046f3:	ba 60 5c 02 c0       	mov    edx,0xc0025c60
c00046f8:	89 d8                	mov    eax,ebx
c00046fa:	e8 ec d3 ff ff       	call   c0001aeb <mem_cpy>
c00046ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004703:	8d 43 58             	lea    eax,[ebx+0x58]
c0004706:	f7 d2                	not    edx
c0004708:	e8 d5 d3 ff ff       	call   c0001ae2 <st_dword>
c000470d:	8d 43 18             	lea    eax,[ebx+0x18]
c0004710:	31 c9                	xor    ecx,ecx
c0004712:	89 04 24             	mov    DWORD PTR [esp],eax
c0004715:	ba 01 00 00 00       	mov    edx,0x1
c000471a:	e8 c6 d3 ff ff       	call   c0001ae5 <st_qword>
c000471f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004723:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004727:	83 c2 ff             	add    edx,0xffffffff
c000472a:	89 e8                	mov    eax,ebp
c000472c:	83 d1 ff             	adc    ecx,0xffffffff
c000472f:	e8 b1 d3 ff ff       	call   c0001ae5 <st_qword>
c0004734:	31 c9                	xor    ecx,ecx
c0004736:	8d 43 28             	lea    eax,[ebx+0x28]
c0004739:	ba 22 00 00 00       	mov    edx,0x22
c000473e:	e8 a2 d3 ff ff       	call   c0001ae5 <st_qword>
c0004743:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004747:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000474b:	83 c2 de             	add    edx,0xffffffde
c000474e:	8d 43 30             	lea    eax,[ebx+0x30]
c0004751:	83 d1 ff             	adc    ecx,0xffffffff
c0004754:	31 f6                	xor    esi,esi
c0004756:	e8 8a d3 ff ff       	call   c0001ae5 <st_qword>
c000475b:	8d 43 54             	lea    eax,[ebx+0x54]
c000475e:	ba 80 00 00 00       	mov    edx,0x80
c0004763:	e8 7a d3 ff ff       	call   c0001ae2 <st_dword>
c0004768:	8d 43 50             	lea    eax,[ebx+0x50]
c000476b:	ba 80 00 00 00       	mov    edx,0x80
c0004770:	e8 6d d3 ff ff       	call   c0001ae2 <st_dword>
c0004775:	ba 02 00 00 00       	mov    edx,0x2
c000477a:	89 f8                	mov    eax,edi
c000477c:	e8 61 d3 ff ff       	call   c0001ae2 <st_dword>
c0004781:	8d 53 38             	lea    edx,[ebx+0x38]
c0004784:	b9 10 00 00 00       	mov    ecx,0x10
c0004789:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000478d:	e8 ad d9 ff ff       	call   c000213f <make_rand>
c0004792:	83 c8 ff             	or     eax,0xffffffff
c0004795:	46                   	inc    esi
c0004796:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000479b:	e8 fb d8 ff ff       	call   c000209b <crc32>
c00047a0:	83 fe 5c             	cmp    esi,0x5c
c00047a3:	75 f0                	jne    c0004795 <create_partition+0x359>
c00047a5:	f7 d0                	not    eax
c00047a7:	8d 73 10             	lea    esi,[ebx+0x10]
c00047aa:	89 c2                	mov    edx,eax
c00047ac:	89 f0                	mov    eax,esi
c00047ae:	e8 2f d3 ff ff       	call   c0001ae2 <st_dword>
c00047b3:	83 ec 0c             	sub    esp,0xc
c00047b6:	6a 01                	push   0x1
c00047b8:	6a 00                	push   0x0
c00047ba:	6a 01                	push   0x1
c00047bc:	53                   	push   ebx
c00047bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047c1:	e8 71 d2 ff ff       	call   c0001a37 <disk_write>
c00047c6:	83 c4 20             	add    esp,0x20
c00047c9:	85 c0                	test   eax,eax
c00047cb:	0f 85 9c fc ff ff    	jne    c000446d <create_partition+0x31>
c00047d1:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047d5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047d9:	83 c2 ff             	add    edx,0xffffffff
c00047dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047df:	83 d1 ff             	adc    ecx,0xffffffff
c00047e2:	e8 fe d2 ff ff       	call   c0001ae5 <st_qword>
c00047e7:	ba 01 00 00 00       	mov    edx,0x1
c00047ec:	31 c9                	xor    ecx,ecx
c00047ee:	89 e8                	mov    eax,ebp
c00047f0:	e8 f0 d2 ff ff       	call   c0001ae5 <st_qword>
c00047f5:	89 f8                	mov    eax,edi
c00047f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ff:	31 ff                	xor    edi,edi
c0004801:	e8 df d2 ff ff       	call   c0001ae5 <st_qword>
c0004806:	89 f0                	mov    eax,esi
c0004808:	31 d2                	xor    edx,edx
c000480a:	e8 d3 d2 ff ff       	call   c0001ae2 <st_dword>
c000480f:	83 c8 ff             	or     eax,0xffffffff
c0004812:	47                   	inc    edi
c0004813:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004818:	e8 7e d8 ff ff       	call   c000209b <crc32>
c000481d:	83 ff 5c             	cmp    edi,0x5c
c0004820:	75 f0                	jne    c0004812 <create_partition+0x3d6>
c0004822:	f7 d0                	not    eax
c0004824:	89 c2                	mov    edx,eax
c0004826:	89 f0                	mov    eax,esi
c0004828:	e8 b5 d2 ff ff       	call   c0001ae2 <st_dword>
c000482d:	83 ec 0c             	sub    esp,0xc
c0004830:	6a 01                	push   0x1
c0004832:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004836:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000483a:	83 c0 ff             	add    eax,0xffffffff
c000483d:	83 d2 ff             	adc    edx,0xffffffff
c0004840:	52                   	push   edx
c0004841:	50                   	push   eax
c0004842:	53                   	push   ebx
c0004843:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004847:	e8 eb d1 ff ff       	call   c0001a37 <disk_write>
c000484c:	83 c4 20             	add    esp,0x20
c000484f:	85 c0                	test   eax,eax
c0004851:	0f 85 16 fc ff ff    	jne    c000446d <create_partition+0x31>
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	b9 00 02 00 00       	mov    ecx,0x200
c0004860:	e8 9b d2 ff ff       	call   c0001b00 <mem_set>
c0004865:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	ba 70 5c 02 c0       	mov    edx,0xc0025c70
c0004875:	e8 71 d2 ff ff       	call   c0001aeb <mem_cpy>
c000487a:	e9 21 01 00 00       	jmp    c00049a0 <create_partition+0x564>
c000487f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004883:	b9 05 00 00 00       	mov    ecx,0x5
c0004888:	89 04 24             	mov    DWORD PTR [esp],eax
c000488b:	bf 08 00 00 00       	mov    edi,0x8
c0004890:	89 f8                	mov    eax,edi
c0004892:	31 d2                	xor    edx,edx
c0004894:	0f b6 f0             	movzx  esi,al
c0004897:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000489a:	f7 f6                	div    esi
c000489c:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00048a1:	76 0a                	jbe    c00048ad <create_partition+0x471>
c00048a3:	d1 e7                	shl    edi,1
c00048a5:	49                   	dec    ecx
c00048a6:	75 e8                	jne    c0004890 <create_partition+0x454>
c00048a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00048ad:	b9 00 02 00 00       	mov    ecx,0x200
c00048b2:	31 d2                	xor    edx,edx
c00048b4:	89 d8                	mov    eax,ebx
c00048b6:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00048bc:	e8 3f d2 ff ff       	call   c0001b00 <mem_set>
c00048c1:	b9 64 00 00 00       	mov    ecx,0x64
c00048c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c9:	31 d2                	xor    edx,edx
c00048cb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048d3:	f7 f1                	div    ecx
c00048d5:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048da:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048de:	89 f8                	mov    eax,edi
c00048e0:	0f b6 c0             	movzx  eax,al
c00048e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048e7:	e9 80 00 00 00       	jmp    c000496c <create_partition+0x530>
c00048ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ef:	29 cf                	sub    edi,ecx
c00048f1:	89 ca                	mov    edx,ecx
c00048f3:	89 f0                	mov    eax,esi
c00048f5:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048fa:	e8 e3 d1 ff ff       	call   c0001ae2 <st_dword>
c00048ff:	8d 46 04             	lea    eax,[esi+0x4]
c0004902:	89 fa                	mov    edx,edi
c0004904:	83 c6 10             	add    esi,0x10
c0004907:	e8 d6 d1 ff ff       	call   c0001ae2 <st_dword>
c000490c:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004910:	31 d2                	xor    edx,edx
c0004912:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004915:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004919:	89 c8                	mov    eax,ecx
c000491b:	01 f9                	add    ecx,edi
c000491d:	f7 f5                	div    ebp
c000491f:	89 d5                	mov    ebp,edx
c0004921:	31 d2                	xor    edx,edx
c0004923:	45                   	inc    ebp
c0004924:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004928:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000492b:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000492e:	89 c2                	mov    edx,eax
c0004930:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004933:	c1 ea 02             	shr    edx,0x2
c0004936:	83 e2 c0             	and    edx,0xffffffc0
c0004939:	09 ea                	or     edx,ebp
c000493b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004940:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004943:	31 d2                	xor    edx,edx
c0004945:	f7 f5                	div    ebp
c0004947:	89 d7                	mov    edi,edx
c0004949:	31 d2                	xor    edx,edx
c000494b:	47                   	inc    edi
c000494c:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004950:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004953:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004956:	89 c5                	mov    ebp,eax
c0004958:	c1 ed 02             	shr    ebp,0x2
c000495b:	83 e5 c0             	and    ebp,0xffffffc0
c000495e:	09 ef                	or     edi,ebp
c0004960:	89 fa                	mov    edx,edi
c0004962:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004965:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000496a:	74 34                	je     c00049a0 <create_partition+0x564>
c000496c:	85 c9                	test   ecx,ecx
c000496e:	74 30                	je     c00049a0 <create_partition+0x564>
c0004970:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004973:	76 2b                	jbe    c00049a0 <create_partition+0x564>
c0004975:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004979:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000497d:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004980:	83 ff 64             	cmp    edi,0x64
c0004983:	76 4b                	jbe    c00049d0 <create_partition+0x594>
c0004985:	89 f8                	mov    eax,edi
c0004987:	01 c8                	add    eax,ecx
c0004989:	0f 82 5d ff ff ff    	jb     c00048ec <create_partition+0x4b0>
c000498f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004992:	0f 87 54 ff ff ff    	ja     c00048ec <create_partition+0x4b0>
c0004998:	85 ff                	test   edi,edi
c000499a:	0f 85 51 ff ff ff    	jne    c00048f1 <create_partition+0x4b5>
c00049a0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00049a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00049ab:	e8 2e d1 ff ff       	call   c0001ade <st_word>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 00                	push   0x0
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 74 d0 ff ff       	call   c0001a37 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 95 c0             	setne  al
c00049cb:	0f b6 c0             	movzx  eax,al
c00049ce:	eb 0e                	jmp    c00049de <create_partition+0x5a2>
c00049d0:	74 07                	je     c00049d9 <create_partition+0x59d>
c00049d2:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049d7:	eb ac                	jmp    c0004985 <create_partition+0x549>
c00049d9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049dc:	eb a7                	jmp    c0004985 <create_partition+0x549>
c00049de:	83 c4 5c             	add    esp,0x5c
c00049e1:	5b                   	pop    ebx
c00049e2:	5e                   	pop    esi
c00049e3:	5f                   	pop    edi
c00049e4:	5d                   	pop    ebp
c00049e5:	c3                   	ret    

c00049e6 <get_fileinfo>:
c00049e6:	55                   	push   ebp
c00049e7:	57                   	push   edi
c00049e8:	56                   	push   esi
c00049e9:	53                   	push   ebx
c00049ea:	83 ec 1c             	sub    esp,0x1c
c00049ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00049ef:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049f3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049f7:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049fa:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049fd:	0f 84 dc 01 00 00    	je     c0004bdf <get_fileinfo+0x1f9>
c0004a03:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004a06:	75 0f                	jne    c0004a17 <get_fileinfo+0x31>
c0004a08:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004a0b:	83 c4 1c             	add    esp,0x1c
c0004a0e:	5b                   	pop    ebx
c0004a0f:	5e                   	pop    esi
c0004a10:	5f                   	pop    edi
c0004a11:	5d                   	pop    ebp
c0004a12:	e9 58 d5 ff ff       	jmp    c0001f6f <get_xfileinfo>
c0004a17:	89 d3                	mov    ebx,edx
c0004a19:	89 c6                	mov    esi,eax
c0004a1b:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004a1f:	74 6a                	je     c0004a8b <get_fileinfo+0xa5>
c0004a21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a29:	31 ed                	xor    ebp,ebp
c0004a2b:	31 ff                	xor    edi,edi
c0004a2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a3c:	66 85 d2             	test   dx,dx
c0004a3f:	74 3e                	je     c0004a7f <get_fileinfo+0x99>
c0004a41:	66 85 ed             	test   bp,bp
c0004a44:	75 0c                	jne    c0004a52 <get_fileinfo+0x6c>
c0004a46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a4c:	66 3d ff 07          	cmp    ax,0x7ff
c0004a50:	76 22                	jbe    c0004a74 <get_fileinfo+0x8e>
c0004a52:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a57:	89 e8                	mov    eax,ebp
c0004a59:	29 f9                	sub    ecx,edi
c0004a5b:	c1 e0 10             	shl    eax,0x10
c0004a5e:	09 d0                	or     eax,edx
c0004a60:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a64:	e8 a3 d1 ff ff       	call   c0001c0c <put_utf>
c0004a69:	84 c0                	test   al,al
c0004a6b:	74 10                	je     c0004a7d <get_fileinfo+0x97>
c0004a6d:	0f b6 c0             	movzx  eax,al
c0004a70:	31 d2                	xor    edx,edx
c0004a72:	01 c7                	add    edi,eax
c0004a74:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a79:	89 d5                	mov    ebp,edx
c0004a7b:	eb b0                	jmp    c0004a2d <get_fileinfo+0x47>
c0004a7d:	31 ff                	xor    edi,edi
c0004a7f:	66 85 ed             	test   bp,bp
c0004a82:	74 02                	je     c0004a86 <get_fileinfo+0xa0>
c0004a84:	31 ff                	xor    edi,edi
c0004a86:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a8b:	31 ff                	xor    edi,edi
c0004a8d:	31 c9                	xor    ecx,ecx
c0004a8f:	83 f9 0a             	cmp    ecx,0xa
c0004a92:	0f 87 ad 00 00 00    	ja     c0004b45 <get_fileinfo+0x15f>
c0004a98:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004aa2:	66 83 fa 20          	cmp    dx,0x20
c0004aa6:	0f 84 92 00 00 00    	je     c0004b3e <get_fileinfo+0x158>
c0004aac:	66 83 fa 05          	cmp    dx,0x5
c0004ab0:	75 05                	jne    c0004ab7 <get_fileinfo+0xd1>
c0004ab2:	ba e5 00 00 00       	mov    edx,0xe5
c0004ab7:	83 ff 0b             	cmp    edi,0xb
c0004aba:	77 0b                	ja     c0004ac7 <get_fileinfo+0xe1>
c0004abc:	83 fd 09             	cmp    ebp,0x9
c0004abf:	75 06                	jne    c0004ac7 <get_fileinfo+0xe1>
c0004ac1:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004ac6:	47                   	inc    edi
c0004ac7:	0f b7 c2             	movzx  eax,dx
c0004aca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ace:	e8 6d d0 ff ff       	call   c0001b40 <dbc_1st>
c0004ad3:	85 c0                	test   eax,eax
c0004ad5:	74 2f                	je     c0004b06 <get_fileinfo+0x120>
c0004ad7:	83 fd 08             	cmp    ebp,0x8
c0004ada:	74 2a                	je     c0004b06 <get_fileinfo+0x120>
c0004adc:	83 fd 0b             	cmp    ebp,0xb
c0004adf:	74 25                	je     c0004b06 <get_fileinfo+0x120>
c0004ae1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ae8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aec:	e8 52 d0 ff ff       	call   c0001b43 <dbc_2nd>
c0004af1:	85 c0                	test   eax,eax
c0004af3:	74 11                	je     c0004b06 <get_fileinfo+0x120>
c0004af5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004af9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004afe:	c1 e2 08             	shl    edx,0x8
c0004b01:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004b04:	09 c2                	or     edx,eax
c0004b06:	0f b7 d2             	movzx  edx,dx
c0004b09:	50                   	push   eax
c0004b0a:	50                   	push   eax
c0004b0b:	68 b5 01 00 00       	push   0x1b5
c0004b10:	52                   	push   edx
c0004b11:	e8 46 38 00 00       	call   c000835c <ff_oem2uni>
c0004b16:	83 c4 10             	add    esp,0x10
c0004b19:	66 85 c0             	test   ax,ax
c0004b1c:	75 04                	jne    c0004b22 <get_fileinfo+0x13c>
c0004b1e:	31 ff                	xor    edi,edi
c0004b20:	eb 23                	jmp    c0004b45 <get_fileinfo+0x15f>
c0004b22:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b27:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b2b:	29 f9                	sub    ecx,edi
c0004b2d:	0f b7 c0             	movzx  eax,ax
c0004b30:	e8 d7 d0 ff ff       	call   c0001c0c <put_utf>
c0004b35:	84 c0                	test   al,al
c0004b37:	74 e5                	je     c0004b1e <get_fileinfo+0x138>
c0004b39:	0f b6 c0             	movzx  eax,al
c0004b3c:	01 c7                	add    edi,eax
c0004b3e:	89 e9                	mov    ecx,ebp
c0004b40:	e9 4a ff ff ff       	jmp    c0004a8f <get_fileinfo+0xa9>
c0004b45:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b4a:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b4e:	75 54                	jne    c0004ba4 <get_fileinfo+0x1be>
c0004b50:	85 ff                	test   edi,edi
c0004b52:	75 0b                	jne    c0004b5f <get_fileinfo+0x179>
c0004b54:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b58:	ba 01 00 00 00       	mov    edx,0x1
c0004b5d:	eb 33                	jmp    c0004b92 <get_fileinfo+0x1ac>
c0004b5f:	b1 08                	mov    cl,0x8
c0004b61:	31 d2                	xor    edx,edx
c0004b63:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b69:	84 c0                	test   al,al
c0004b6b:	74 25                	je     c0004b92 <get_fileinfo+0x1ac>
c0004b6d:	66 83 f8 2e          	cmp    ax,0x2e
c0004b71:	74 16                	je     c0004b89 <get_fileinfo+0x1a3>
c0004b73:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b76:	66 83 ff 19          	cmp    di,0x19
c0004b7a:	77 0f                	ja     c0004b8b <get_fileinfo+0x1a5>
c0004b7c:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b7f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b82:	74 07                	je     c0004b8b <get_fileinfo+0x1a5>
c0004b84:	83 c0 20             	add    eax,0x20
c0004b87:	eb 02                	jmp    c0004b8b <get_fileinfo+0x1a5>
c0004b89:	b1 10                	mov    cl,0x10
c0004b8b:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b8f:	42                   	inc    edx
c0004b90:	eb d1                	jmp    c0004b63 <get_fileinfo+0x17d>
c0004b92:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b9e:	75 04                	jne    c0004ba4 <get_fileinfo+0x1be>
c0004ba0:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ba4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004baa:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004bad:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb0:	83 c0 1c             	add    eax,0x1c
c0004bb3:	e8 c1 ce ff ff       	call   c0001a79 <ld_dword>
c0004bb8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004bbf:	89 03                	mov    DWORD PTR [ebx],eax
c0004bc1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bc4:	83 c0 16             	add    eax,0x16
c0004bc7:	e8 a0 ce ff ff       	call   c0001a6c <ld_word>
c0004bcc:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	83 c0 18             	add    eax,0x18
c0004bd6:	e8 91 ce ff ff       	call   c0001a6c <ld_word>
c0004bdb:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bdf:	83 c4 1c             	add    esp,0x1c
c0004be2:	5b                   	pop    ebx
c0004be3:	5e                   	pop    esi
c0004be4:	5f                   	pop    edi
c0004be5:	5d                   	pop    ebp
c0004be6:	c3                   	ret    

c0004be7 <ld_clust.isra.0>:
c0004be7:	56                   	push   esi
c0004be8:	89 c6                	mov    esi,eax
c0004bea:	53                   	push   ebx
c0004beb:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bee:	89 d3                	mov    ebx,edx
c0004bf0:	e8 77 ce ff ff       	call   c0001a6c <ld_word>
c0004bf5:	0f b7 c8             	movzx  ecx,ax
c0004bf8:	89 f0                	mov    eax,esi
c0004bfa:	3c 03                	cmp    al,0x3
c0004bfc:	75 0d                	jne    c0004c0b <ld_clust.isra.0+0x24>
c0004bfe:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c01:	e8 66 ce ff ff       	call   c0001a6c <ld_word>
c0004c06:	c1 e0 10             	shl    eax,0x10
c0004c09:	09 c1                	or     ecx,eax
c0004c0b:	89 c8                	mov    eax,ecx
c0004c0d:	5b                   	pop    ebx
c0004c0e:	5e                   	pop    esi
c0004c0f:	c3                   	ret    

c0004c10 <st_clust.isra.1>:
c0004c10:	56                   	push   esi
c0004c11:	89 c6                	mov    esi,eax
c0004c13:	53                   	push   ebx
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	0f b7 d1             	movzx  edx,cx
c0004c19:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004c1c:	e8 bd ce ff ff       	call   c0001ade <st_word>
c0004c21:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c24:	75 0f                	jne    c0004c35 <st_clust.isra.1+0x25>
c0004c26:	c1 e9 10             	shr    ecx,0x10
c0004c29:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c2c:	89 ca                	mov    edx,ecx
c0004c2e:	5b                   	pop    ebx
c0004c2f:	5e                   	pop    esi
c0004c30:	e9 a9 ce ff ff       	jmp    c0001ade <st_word>
c0004c35:	5b                   	pop    ebx
c0004c36:	5e                   	pop    esi
c0004c37:	c3                   	ret    

c0004c38 <init_alloc_info.isra.2>:
c0004c38:	56                   	push   esi
c0004c39:	53                   	push   ebx
c0004c3a:	89 c6                	mov    esi,eax
c0004c3c:	89 d3                	mov    ebx,edx
c0004c3e:	51                   	push   ecx
c0004c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c41:	83 c0 34             	add    eax,0x34
c0004c44:	e8 30 ce ff ff       	call   c0001a79 <ld_dword>
c0004c49:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4c:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c4e:	83 c0 38             	add    eax,0x38
c0004c51:	e8 3b ce ff ff       	call   c0001a91 <ld_qword>
c0004c56:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c59:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c5e:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c61:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c68:	83 e0 02             	and    eax,0x2
c0004c6b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c6e:	5b                   	pop    ebx
c0004c6f:	5b                   	pop    ebx
c0004c70:	5e                   	pop    esi
c0004c71:	c3                   	ret    

c0004c72 <follow_path>:
c0004c72:	56                   	push   esi
c0004c73:	53                   	push   ebx
c0004c74:	89 c3                	mov    ebx,eax
c0004c76:	83 ec 14             	sub    esp,0x14
c0004c79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c7d:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c83:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c85:	80 fa 5c             	cmp    dl,0x5c
c0004c88:	75 07                	jne    c0004c91 <follow_path+0x1f>
c0004c8a:	40                   	inc    eax
c0004c8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c8f:	eb ee                	jmp    c0004c7f <follow_path+0xd>
c0004c91:	80 fa 2f             	cmp    dl,0x2f
c0004c94:	74 f4                	je     c0004c8a <follow_path+0x18>
c0004c96:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c9d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ca4:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ca7:	77 52                	ja     c0004cfb <follow_path+0x89>
c0004ca9:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004cad:	31 d2                	xor    edx,edx
c0004caf:	89 d8                	mov    eax,ebx
c0004cb1:	e8 12 e3 ff ff       	call   c0002fc8 <dir_sdi>
c0004cb6:	eb 7c                	jmp    c0004d34 <follow_path+0xc2>
c0004cb8:	89 d8                	mov    eax,ebx
c0004cba:	e8 6e f2 ff ff       	call   c0003f2d <dir_find>
c0004cbf:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004cc2:	85 c0                	test   eax,eax
c0004cc4:	75 46                	jne    c0004d0c <follow_path+0x9a>
c0004cc6:	80 e2 04             	and    dl,0x4
c0004cc9:	75 69                	jne    c0004d34 <follow_path+0xc2>
c0004ccb:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ccf:	74 5e                	je     c0004d2f <follow_path+0xbd>
c0004cd1:	8a 06                	mov    al,BYTE PTR [esi]
c0004cd3:	3c 04                	cmp    al,0x4
c0004cd5:	75 41                	jne    c0004d18 <follow_path+0xa6>
c0004cd7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cda:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cde:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ce1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ce4:	30 c0                	xor    al,al
c0004ce6:	09 d0                	or     eax,edx
c0004ce8:	89 da                	mov    edx,ebx
c0004cea:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ced:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cf0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cf3:	8d 46 10             	lea    eax,[esi+0x10]
c0004cf6:	e8 3d ff ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0004cfb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cff:	89 d8                	mov    eax,ebx
c0004d01:	e8 a9 ed ff ff       	call   c0003aaf <create_name>
c0004d06:	85 c0                	test   eax,eax
c0004d08:	74 ae                	je     c0004cb8 <follow_path+0x46>
c0004d0a:	eb 28                	jmp    c0004d34 <follow_path+0xc2>
c0004d0c:	83 f8 04             	cmp    eax,0x4
c0004d0f:	75 23                	jne    c0004d34 <follow_path+0xc2>
c0004d11:	80 e2 04             	and    dl,0x4
c0004d14:	74 19                	je     c0004d2f <follow_path+0xbd>
c0004d16:	eb 1c                	jmp    c0004d34 <follow_path+0xc2>
c0004d18:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004d1b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d21:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d25:	e8 bd fe ff ff       	call   c0004be7 <ld_clust.isra.0>
c0004d2a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d2d:	eb cc                	jmp    c0004cfb <follow_path+0x89>
c0004d2f:	b8 05 00 00 00       	mov    eax,0x5
c0004d34:	83 c4 14             	add    esp,0x14
c0004d37:	5b                   	pop    ebx
c0004d38:	5e                   	pop    esi
c0004d39:	c3                   	ret    

c0004d3a <f_mount>:
c0004d3a:	53                   	push   ebx
c0004d3b:	83 ec 18             	sub    esp,0x18
c0004d3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d42:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d4e:	e8 fb d2 ff ff       	call   c000204e <get_ldnumber>
c0004d53:	89 c2                	mov    edx,eax
c0004d55:	b8 0b 00 00 00       	mov    eax,0xb
c0004d5a:	85 d2                	test   edx,edx
c0004d5c:	78 39                	js     c0004d97 <f_mount+0x5d>
c0004d5e:	8b 04 95 80 a4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5b80]
c0004d65:	85 c0                	test   eax,eax
c0004d67:	74 03                	je     c0004d6c <f_mount+0x32>
c0004d69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d70:	85 c0                	test   eax,eax
c0004d72:	74 03                	je     c0004d77 <f_mount+0x3d>
c0004d74:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7b:	89 04 95 80 a4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5b80],eax
c0004d82:	31 c0                	xor    eax,eax
c0004d84:	84 db                	test   bl,bl
c0004d86:	74 0f                	je     c0004d97 <f_mount+0x5d>
c0004d88:	31 c9                	xor    ecx,ecx
c0004d8a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d92:	e8 65 d7 ff ff       	call   c00024fc <mount_volume>
c0004d97:	83 c4 18             	add    esp,0x18
c0004d9a:	5b                   	pop    ebx
c0004d9b:	c3                   	ret    

c0004d9c <f_open>:
c0004d9c:	55                   	push   ebp
c0004d9d:	bd 09 00 00 00       	mov    ebp,0x9
c0004da2:	57                   	push   edi
c0004da3:	56                   	push   esi
c0004da4:	53                   	push   ebx
c0004da5:	83 ec 7c             	sub    esp,0x7c
c0004da8:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004daf:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004db6:	85 db                	test   ebx,ebx
c0004db8:	0f 84 10 04 00 00    	je     c00051ce <f_open+0x432>
c0004dbe:	89 fe                	mov    esi,edi
c0004dc0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004dc4:	83 e6 3f             	and    esi,0x3f
c0004dc7:	89 f0                	mov    eax,esi
c0004dc9:	0f b6 c8             	movzx  ecx,al
c0004dcc:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004dd3:	e8 24 d7 ff ff       	call   c00024fc <mount_volume>
c0004dd8:	89 c5                	mov    ebp,eax
c0004dda:	85 c0                	test   eax,eax
c0004ddc:	0f 85 e6 03 00 00    	jne    c00051c8 <f_open+0x42c>
c0004de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de6:	bd 11 00 00 00       	mov    ebp,0x11
c0004deb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004def:	83 ec 0c             	sub    esp,0xc
c0004df2:	68 60 04 00 00       	push   0x460
c0004df7:	e8 a3 34 00 00       	call   c000829f <ff_memalloc>
c0004dfc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004e00:	83 c4 10             	add    esp,0x10
c0004e03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004e08:	0f 84 c0 03 00 00    	je     c00051ce <f_open+0x432>
c0004e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004e16:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004e1c:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004e1f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e22:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e29:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e2d:	e8 40 fe ff ff       	call   c0004c72 <follow_path>
c0004e32:	89 c5                	mov    ebp,eax
c0004e34:	85 c0                	test   eax,eax
c0004e36:	75 0c                	jne    c0004e44 <f_open+0xa8>
c0004e38:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e3d:	79 05                	jns    c0004e44 <f_open+0xa8>
c0004e3f:	bd 06 00 00 00       	mov    ebp,0x6
c0004e44:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e4a:	0f 84 84 01 00 00    	je     c0004fd4 <f_open+0x238>
c0004e50:	85 ed                	test   ebp,ebp
c0004e52:	74 20                	je     c0004e74 <f_open+0xd8>
c0004e54:	83 fd 04             	cmp    ebp,0x4
c0004e57:	0f 85 58 03 00 00    	jne    c00051b5 <f_open+0x419>
c0004e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e61:	83 ce 08             	or     esi,0x8
c0004e64:	e8 8a f2 ff ff       	call   c00040f3 <dir_register>
c0004e69:	89 c5                	mov    ebp,eax
c0004e6b:	85 c0                	test   eax,eax
c0004e6d:	74 2f                	je     c0004e9e <f_open+0x102>
c0004e6f:	e9 41 03 00 00       	jmp    c00051b5 <f_open+0x419>
c0004e74:	bd 07 00 00 00       	mov    ebp,0x7
c0004e79:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e7e:	0f 85 31 03 00 00    	jne    c00051b5 <f_open+0x419>
c0004e84:	bd 08 00 00 00       	mov    ebp,0x8
c0004e89:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e8f:	0f 85 20 03 00 00    	jne    c00051b5 <f_open+0x419>
c0004e95:	83 e7 08             	and    edi,0x8
c0004e98:	0f 84 65 01 00 00    	je     c0005003 <f_open+0x267>
c0004e9e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ea2:	8a 02                	mov    al,BYTE PTR [edx]
c0004ea4:	3c 04                	cmp    al,0x4
c0004ea6:	0f 85 97 00 00 00    	jne    c0004f43 <f_open+0x1a7>
c0004eac:	8d 42 10             	lea    eax,[edx+0x10]
c0004eaf:	89 13                	mov    DWORD PTR [ebx],edx
c0004eb1:	89 da                	mov    edx,ebx
c0004eb3:	e8 80 fd ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0004eb8:	31 d2                	xor    edx,edx
c0004eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ebe:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ec3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec6:	83 c0 02             	add    eax,0x2
c0004ec9:	e8 32 cc ff ff       	call   c0001b00 <mem_set>
c0004ece:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ed3:	31 d2                	xor    edx,edx
c0004ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004edc:	83 c0 26             	add    eax,0x26
c0004edf:	e8 1c cc ff ff       	call   c0001b00 <mem_set>
c0004ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eeb:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eef:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ef7:	83 c0 08             	add    eax,0x8
c0004efa:	e8 e3 cb ff ff       	call   c0001ae2 <st_dword>
c0004eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004f06:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004f0a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f0e:	e8 b7 ea ff ff       	call   c00039ca <store_xdir>
c0004f13:	89 c5                	mov    ebp,eax
c0004f15:	85 c0                	test   eax,eax
c0004f17:	0f 85 98 02 00 00    	jne    c00051b5 <f_open+0x419>
c0004f1d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004f20:	85 d2                	test   edx,edx
c0004f22:	0f 84 db 00 00 00    	je     c0005003 <f_open+0x267>
c0004f28:	31 c9                	xor    ecx,ecx
c0004f2a:	89 d8                	mov    eax,ebx
c0004f2c:	e8 8e e3 ff ff       	call   c00032bf <remove_chain>
c0004f31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f35:	89 c5                	mov    ebp,eax
c0004f37:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f3a:	48                   	dec    eax
c0004f3b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f3e:	e9 b8 00 00 00       	jmp    c0004ffb <f_open+0x25f>
c0004f43:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f47:	89 ea                	mov    edx,ebp
c0004f49:	e8 99 fc ff ff       	call   c0004be7 <ld_clust.isra.0>
c0004f4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f53:	89 c7                	mov    edi,eax
c0004f55:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f58:	e8 85 cb ff ff       	call   c0001ae2 <st_dword>
c0004f5d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f61:	31 c9                	xor    ecx,ecx
c0004f63:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f6f:	e8 9c fc ff ff       	call   c0004c10 <st_clust.isra.1>
c0004f74:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f78:	31 d2                	xor    edx,edx
c0004f7a:	83 c0 1c             	add    eax,0x1c
c0004f7d:	e8 60 cb ff ff       	call   c0001ae2 <st_dword>
c0004f82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f86:	85 ff                	test   edi,edi
c0004f88:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f8c:	74 75                	je     c0005003 <f_open+0x267>
c0004f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f92:	31 c9                	xor    ecx,ecx
c0004f94:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f97:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fa2:	89 fa                	mov    edx,edi
c0004fa4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fa8:	e8 12 e3 ff ff       	call   c00032bf <remove_chain>
c0004fad:	89 c5                	mov    ebp,eax
c0004faf:	85 c0                	test   eax,eax
c0004fb1:	0f 85 fe 01 00 00    	jne    c00051b5 <f_open+0x419>
c0004fb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004fbb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc3:	4f                   	dec    edi
c0004fc4:	e8 81 d2 ff ff       	call   c000224a <move_window>
c0004fc9:	89 c5                	mov    ebp,eax
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fd2:	eb 27                	jmp    c0004ffb <f_open+0x25f>
c0004fd4:	85 ed                	test   ebp,ebp
c0004fd6:	0f 85 d9 01 00 00    	jne    c00051b5 <f_open+0x419>
c0004fdc:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fe0:	bd 04 00 00 00       	mov    ebp,0x4
c0004fe5:	a8 10                	test   al,0x10
c0004fe7:	0f 85 c8 01 00 00    	jne    c00051b5 <f_open+0x419>
c0004fed:	83 e7 02             	and    edi,0x2
c0004ff0:	74 11                	je     c0005003 <f_open+0x267>
c0004ff2:	bd 07 00 00 00       	mov    ebp,0x7
c0004ff7:	a8 01                	test   al,0x1
c0004ff9:	eb 02                	jmp    c0004ffd <f_open+0x261>
c0004ffb:	85 ed                	test   ebp,ebp
c0004ffd:	0f 85 b2 01 00 00    	jne    c00051b5 <f_open+0x419>
c0005003:	f7 c6 08 00 00 00    	test   esi,0x8
c0005009:	74 03                	je     c000500e <f_open+0x272>
c000500b:	83 ce 40             	or     esi,0x40
c000500e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005012:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005015:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005018:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000501b:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000501e:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005022:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005025:	8a 02                	mov    al,BYTE PTR [edx]
c0005027:	3c 04                	cmp    al,0x4
c0005029:	75 2a                	jne    c0005055 <f_open+0x2b9>
c000502b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000502f:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005034:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000503b:	30 c0                	xor    al,al
c000503d:	09 c8                	or     eax,ecx
c000503f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005042:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005046:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005049:	8d 42 10             	lea    eax,[edx+0x10]
c000504c:	89 da                	mov    edx,ebx
c000504e:	e8 e5 fb ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0005053:	eb 1c                	jmp    c0005071 <f_open+0x2d5>
c0005055:	89 fa                	mov    edx,edi
c0005057:	e8 8b fb ff ff       	call   c0004be7 <ld_clust.isra.0>
c000505c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000505f:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005062:	e8 12 ca ff ff       	call   c0001a79 <ld_dword>
c0005067:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000506e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000507c:	89 03                	mov    DWORD PTR [ebx],eax
c000507e:	31 d2                	xor    edx,edx
c0005080:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005084:	b9 00 02 00 00       	mov    ecx,0x200
c0005089:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000508d:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005091:	89 f0                	mov    eax,esi
c0005093:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000509a:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000509d:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00050a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00050a7:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00050ae:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00050b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00050b9:	e8 42 ca ff ff       	call   c0001b00 <mem_set>
c00050be:	83 e6 20             	and    esi,0x20
c00050c1:	75 07                	jne    c00050ca <f_open+0x32e>
c00050c3:	31 ed                	xor    ebp,ebp
c00050c5:	e9 eb 00 00 00       	jmp    c00051b5 <f_open+0x419>
c00050ca:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050cd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050dc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050e0:	74 e1                	je     c00050c3 <f_open+0x327>
c00050e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050ea:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050ed:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050f7:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050fb:	31 ff                	xor    edi,edi
c00050fd:	c1 e5 09             	shl    ebp,0x9
c0005100:	89 ee                	mov    esi,ebp
c0005102:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005106:	89 f8                	mov    eax,edi
c0005108:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000510c:	73 22                	jae    c0005130 <f_open+0x394>
c000510e:	89 d8                	mov    eax,ebx
c0005110:	e8 bd dc ff ff       	call   c0002dd2 <get_fat>
c0005115:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005119:	89 c2                	mov    edx,eax
c000511b:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000511f:	83 f8 01             	cmp    eax,0x1
c0005122:	76 10                	jbe    c0005134 <f_open+0x398>
c0005124:	83 f8 ff             	cmp    eax,0xffffffff
c0005127:	75 d9                	jne    c0005102 <f_open+0x366>
c0005129:	bd 01 00 00 00       	mov    ebp,0x1
c000512e:	eb 09                	jmp    c0005139 <f_open+0x39d>
c0005130:	31 ed                	xor    ebp,ebp
c0005132:	eb 05                	jmp    c0005139 <f_open+0x39d>
c0005134:	bd 02 00 00 00       	mov    ebp,0x2
c0005139:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000513c:	85 ed                	test   ebp,ebp
c000513e:	75 75                	jne    c00051b5 <f_open+0x419>
c0005140:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005144:	25 ff 01 00 00       	and    eax,0x1ff
c0005149:	0f 84 74 ff ff ff    	je     c00050c3 <f_open+0x327>
c000514f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005153:	bd 02 00 00 00       	mov    ebp,0x2
c0005158:	89 c8                	mov    eax,ecx
c000515a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000515e:	e8 a2 cb ff ff       	call   c0001d05 <clst2sect>
c0005163:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005167:	89 d7                	mov    edi,edx
c0005169:	09 c7                	or     edi,eax
c000516b:	74 48                	je     c00051b5 <f_open+0x419>
c000516d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005171:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005175:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000517d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005181:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005185:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005189:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000518c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005190:	83 ec 0c             	sub    esp,0xc
c0005193:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005196:	6a 01                	push   0x1
c0005198:	52                   	push   edx
c0005199:	50                   	push   eax
c000519a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000519e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051a2:	50                   	push   eax
c00051a3:	e8 79 c8 ff ff       	call   c0001a21 <disk_read>
c00051a8:	83 c4 20             	add    esp,0x20
c00051ab:	85 c0                	test   eax,eax
c00051ad:	0f 95 c0             	setne  al
c00051b0:	0f b6 c0             	movzx  eax,al
c00051b3:	89 c5                	mov    ebp,eax
c00051b5:	83 ec 0c             	sub    esp,0xc
c00051b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00051bc:	e8 f4 30 00 00       	call   c00082b5 <ff_memfree>
c00051c1:	83 c4 10             	add    esp,0x10
c00051c4:	85 ed                	test   ebp,ebp
c00051c6:	74 06                	je     c00051ce <f_open+0x432>
c00051c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ce:	83 c4 7c             	add    esp,0x7c
c00051d1:	89 e8                	mov    eax,ebp
c00051d3:	5b                   	pop    ebx
c00051d4:	5e                   	pop    esi
c00051d5:	5f                   	pop    edi
c00051d6:	5d                   	pop    ebp
c00051d7:	c3                   	ret    

c00051d8 <f_read>:
c00051d8:	55                   	push   ebp
c00051d9:	57                   	push   edi
c00051da:	56                   	push   esi
c00051db:	53                   	push   ebx
c00051dc:	83 ec 2c             	sub    esp,0x2c
c00051df:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051e3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051f1:	89 d8                	mov    eax,ebx
c00051f3:	e8 77 cf ff ff       	call   c000216f <validate>
c00051f8:	89 c5                	mov    ebp,eax
c00051fa:	85 c0                	test   eax,eax
c00051fc:	0f 85 4c 02 00 00    	jne    c000544e <f_read+0x276>
c0005202:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005206:	85 ed                	test   ebp,ebp
c0005208:	0f 85 40 02 00 00    	jne    c000544e <f_read+0x276>
c000520e:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005212:	0f 84 31 02 00 00    	je     c0005449 <f_read+0x271>
c0005218:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000521b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000521e:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005221:	bf 00 00 00 00       	mov    edi,0x0
c0005226:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005229:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000522d:	89 d1                	mov    ecx,edx
c000522f:	19 f9                	sbb    ecx,edi
c0005231:	0f 83 cf 00 00 00    	jae    c0005306 <f_read+0x12e>
c0005237:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000523b:	e9 c6 00 00 00       	jmp    c0005306 <f_read+0x12e>
c0005240:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005243:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005246:	89 d0                	mov    eax,edx
c0005248:	25 ff 01 00 00       	and    eax,0x1ff
c000524d:	0f 85 c9 01 00 00    	jne    c000541c <f_read+0x244>
c0005253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005257:	89 d6                	mov    esi,edx
c0005259:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000525d:	89 cf                	mov    edi,ecx
c000525f:	48                   	dec    eax
c0005260:	0f ac fe 09          	shrd   esi,edi,0x9
c0005264:	21 f0                	and    eax,esi
c0005266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000526a:	0f 84 a6 00 00 00    	je     c0005316 <f_read+0x13e>
c0005270:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005274:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005277:	89 c8                	mov    eax,ecx
c0005279:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000527c:	e8 84 ca ff ff       	call   c0001d05 <clst2sect>
c0005281:	89 d7                	mov    edi,edx
c0005283:	09 c7                	or     edi,eax
c0005285:	0f 84 b4 00 00 00    	je     c000533f <f_read+0x167>
c000528b:	31 ff                	xor    edi,edi
c000528d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005291:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005294:	01 c6                	add    esi,eax
c0005296:	11 d7                	adc    edi,edx
c0005298:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00052a0:	0f 86 fd 00 00 00    	jbe    c00053a3 <f_read+0x1cb>
c00052a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052ae:	c1 e8 09             	shr    eax,0x9
c00052b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00052b4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00052b8:	03 14 24             	add    edx,DWORD PTR [esp]
c00052bb:	39 c2                	cmp    edx,eax
c00052bd:	76 07                	jbe    c00052c6 <f_read+0xee>
c00052bf:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00052c6:	83 ec 0c             	sub    esp,0xc
c00052c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052cd:	57                   	push   edi
c00052ce:	56                   	push   esi
c00052cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052d3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052d7:	50                   	push   eax
c00052d8:	e8 44 c7 ff ff       	call   c0001a21 <disk_read>
c00052dd:	83 c4 20             	add    esp,0x20
c00052e0:	85 c0                	test   eax,eax
c00052e2:	75 6e                	jne    c0005352 <f_read+0x17a>
c00052e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e8:	78 7e                	js     c0005368 <f_read+0x190>
c00052ea:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052ed:	c1 e6 09             	shl    esi,0x9
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052fa:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052fe:	01 30                	add    DWORD PTR [eax],esi
c0005300:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005303:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005306:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000530b:	0f 85 2f ff ff ff    	jne    c0005240 <f_read+0x68>
c0005311:	e9 38 01 00 00       	jmp    c000544e <f_read+0x276>
c0005316:	89 c8                	mov    eax,ecx
c0005318:	09 d0                	or     eax,edx
c000531a:	75 05                	jne    c0005321 <f_read+0x149>
c000531c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000531f:	eb 19                	jmp    c000533a <f_read+0x162>
c0005321:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005325:	74 09                	je     c0005330 <f_read+0x158>
c0005327:	89 d8                	mov    eax,ebx
c0005329:	e8 f8 c9 ff ff       	call   c0001d26 <clmt_clust>
c000532e:	eb 0a                	jmp    c000533a <f_read+0x162>
c0005330:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005333:	89 d8                	mov    eax,ebx
c0005335:	e8 98 da ff ff       	call   c0002dd2 <get_fat>
c000533a:	83 f8 01             	cmp    eax,0x1
c000533d:	77 0e                	ja     c000534d <f_read+0x175>
c000533f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005343:	bd 02 00 00 00       	mov    ebp,0x2
c0005348:	e9 01 01 00 00       	jmp    c000544e <f_read+0x276>
c000534d:	83 f8 ff             	cmp    eax,0xffffffff
c0005350:	75 0e                	jne    c0005360 <f_read+0x188>
c0005352:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005356:	bd 01 00 00 00       	mov    ebp,0x1
c000535b:	e9 ee 00 00 00       	jmp    c000544e <f_read+0x276>
c0005360:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005363:	e9 08 ff ff ff       	jmp    c0005270 <f_read+0x98>
c0005368:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000536b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000536e:	29 f0                	sub    eax,esi
c0005370:	19 fa                	sbb    edx,edi
c0005372:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005375:	89 d7                	mov    edi,edx
c0005377:	ba 00 00 00 00       	mov    edx,0x0
c000537c:	89 f9                	mov    ecx,edi
c000537e:	19 d1                	sbb    ecx,edx
c0005380:	0f 83 64 ff ff ff    	jae    c00052ea <f_read+0x112>
c0005386:	89 c7                	mov    edi,eax
c0005388:	8d 53 50             	lea    edx,[ebx+0x50]
c000538b:	c1 e7 09             	shl    edi,0x9
c000538e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005392:	b9 00 02 00 00       	mov    ecx,0x200
c0005397:	01 f8                	add    eax,edi
c0005399:	e8 4d c7 ff ff       	call   c0001aeb <mem_cpy>
c000539e:	e9 47 ff ff ff       	jmp    c00052ea <f_read+0x112>
c00053a3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00053a6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00053a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00053b0:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00053b4:	75 05                	jne    c00053bb <f_read+0x1e3>
c00053b6:	39 34 24             	cmp    DWORD PTR [esp],esi
c00053b9:	74 5b                	je     c0005416 <f_read+0x23e>
c00053bb:	8d 43 50             	lea    eax,[ebx+0x50]
c00053be:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053c6:	79 2a                	jns    c00053f2 <f_read+0x21a>
c00053c8:	83 ec 0c             	sub    esp,0xc
c00053cb:	6a 01                	push   0x1
c00053cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053dd:	50                   	push   eax
c00053de:	e8 54 c6 ff ff       	call   c0001a37 <disk_write>
c00053e3:	83 c4 20             	add    esp,0x20
c00053e6:	85 c0                	test   eax,eax
c00053e8:	0f 85 64 ff ff ff    	jne    c0005352 <f_read+0x17a>
c00053ee:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053f2:	83 ec 0c             	sub    esp,0xc
c00053f5:	6a 01                	push   0x1
c00053f7:	57                   	push   edi
c00053f8:	56                   	push   esi
c00053f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005401:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005405:	50                   	push   eax
c0005406:	e8 16 c6 ff ff       	call   c0001a21 <disk_read>
c000540b:	83 c4 20             	add    esp,0x20
c000540e:	85 c0                	test   eax,eax
c0005410:	0f 85 3c ff ff ff    	jne    c0005352 <f_read+0x17a>
c0005416:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005419:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000541c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000541f:	ba 00 02 00 00       	mov    edx,0x200
c0005424:	25 ff 01 00 00       	and    eax,0x1ff
c0005429:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000542d:	29 c2                	sub    edx,eax
c000542f:	39 d6                	cmp    esi,edx
c0005431:	76 02                	jbe    c0005435 <f_read+0x25d>
c0005433:	89 d6                	mov    esi,edx
c0005435:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005439:	89 f1                	mov    ecx,esi
c000543b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000543f:	e8 a7 c6 ff ff       	call   c0001aeb <mem_cpy>
c0005444:	e9 a7 fe ff ff       	jmp    c00052f0 <f_read+0x118>
c0005449:	bd 07 00 00 00       	mov    ebp,0x7
c000544e:	83 c4 2c             	add    esp,0x2c
c0005451:	89 e8                	mov    eax,ebp
c0005453:	5b                   	pop    ebx
c0005454:	5e                   	pop    esi
c0005455:	5f                   	pop    edi
c0005456:	5d                   	pop    ebp
c0005457:	c3                   	ret    

c0005458 <f_write>:
c0005458:	55                   	push   ebp
c0005459:	57                   	push   edi
c000545a:	56                   	push   esi
c000545b:	53                   	push   ebx
c000545c:	83 ec 2c             	sub    esp,0x2c
c000545f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005463:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005467:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000546d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005471:	89 d8                	mov    eax,ebx
c0005473:	e8 f7 cc ff ff       	call   c000216f <validate>
c0005478:	89 c5                	mov    ebp,eax
c000547a:	85 c0                	test   eax,eax
c000547c:	0f 85 86 02 00 00    	jne    c0005708 <f_write+0x2b0>
c0005482:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005486:	85 ed                	test   ebp,ebp
c0005488:	0f 85 7a 02 00 00    	jne    c0005708 <f_write+0x2b0>
c000548e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005492:	0f 84 6b 02 00 00    	je     c0005703 <f_write+0x2ab>
c0005498:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000549c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000549f:	0f 84 43 01 00 00    	je     c00055e8 <f_write+0x190>
c00054a5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00054a8:	89 c1                	mov    ecx,eax
c00054aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00054ae:	0f 83 34 01 00 00    	jae    c00055e8 <f_write+0x190>
c00054b4:	f7 d0                	not    eax
c00054b6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00054ba:	e9 29 01 00 00       	jmp    c00055e8 <f_write+0x190>
c00054bf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054c2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054c5:	89 d0                	mov    eax,edx
c00054c7:	25 ff 01 00 00       	and    eax,0x1ff
c00054cc:	0f 85 00 02 00 00    	jne    c00056d2 <f_write+0x27a>
c00054d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054d6:	89 d6                	mov    esi,edx
c00054d8:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054dc:	89 cf                	mov    edi,ecx
c00054de:	48                   	dec    eax
c00054df:	0f ac fe 09          	shrd   esi,edi,0x9
c00054e3:	21 f0                	and    eax,esi
c00054e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054e9:	0f 84 06 01 00 00    	je     c00055f5 <f_write+0x19d>
c00054ef:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054f3:	0f 88 6e 01 00 00    	js     c0005667 <f_write+0x20f>
c00054f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054fd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005500:	89 c8                	mov    eax,ecx
c0005502:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005506:	e8 fa c7 ff ff       	call   c0001d05 <clst2sect>
c000550b:	89 d1                	mov    ecx,edx
c000550d:	09 c1                	or     ecx,eax
c000550f:	0f 84 1c 01 00 00    	je     c0005631 <f_write+0x1d9>
c0005515:	31 ff                	xor    edi,edi
c0005517:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000551b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000551f:	01 c6                	add    esi,eax
c0005521:	11 d7                	adc    edi,edx
c0005523:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000552b:	0f 86 63 01 00 00    	jbe    c0005694 <f_write+0x23c>
c0005531:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005535:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005539:	c1 e8 09             	shr    eax,0x9
c000553c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005540:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005544:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005548:	39 c2                	cmp    edx,eax
c000554a:	76 08                	jbe    c0005554 <f_write+0xfc>
c000554c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005550:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005554:	83 ec 0c             	sub    esp,0xc
c0005557:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000555b:	57                   	push   edi
c000555c:	56                   	push   esi
c000555d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005561:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005565:	50                   	push   eax
c0005566:	e8 cc c4 ff ff       	call   c0001a37 <disk_write>
c000556b:	83 c4 20             	add    esp,0x20
c000556e:	85 c0                	test   eax,eax
c0005570:	0f 85 ce 00 00 00    	jne    c0005644 <f_write+0x1ec>
c0005576:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005579:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000557c:	29 f0                	sub    eax,esi
c000557e:	19 fa                	sbb    edx,edi
c0005580:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005584:	89 d7                	mov    edi,edx
c0005586:	ba 00 00 00 00       	mov    edx,0x0
c000558b:	89 f9                	mov    ecx,edi
c000558d:	19 d1                	sbb    ecx,edx
c000558f:	73 1c                	jae    c00055ad <f_write+0x155>
c0005591:	89 c7                	mov    edi,eax
c0005593:	b9 00 02 00 00       	mov    ecx,0x200
c0005598:	c1 e7 09             	shl    edi,0x9
c000559b:	8d 43 50             	lea    eax,[ebx+0x50]
c000559e:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00055a2:	89 fa                	mov    edx,edi
c00055a4:	e8 42 c5 ff ff       	call   c0001aeb <mem_cpy>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00055b1:	c1 e6 09             	shl    esi,0x9
c00055b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00055b8:	31 ff                	xor    edi,edi
c00055ba:	01 30                	add    DWORD PTR [eax],esi
c00055bc:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00055c0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c7:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055cd:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055d0:	89 c1                	mov    ecx,eax
c00055d2:	39 f2                	cmp    edx,esi
c00055d4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055d7:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055da:	19 f9                	sbb    ecx,edi
c00055dc:	73 04                	jae    c00055e2 <f_write+0x18a>
c00055de:	89 f2                	mov    edx,esi
c00055e0:	89 f8                	mov    eax,edi
c00055e2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055e5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055e8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055ed:	0f 85 cc fe ff ff    	jne    c00054bf <f_write+0x67>
c00055f3:	eb 2e                	jmp    c0005623 <f_write+0x1cb>
c00055f5:	89 c8                	mov    eax,ecx
c00055f7:	09 d0                	or     eax,edx
c00055f9:	75 0b                	jne    c0005606 <f_write+0x1ae>
c00055fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055fe:	31 d2                	xor    edx,edx
c0005600:	85 c0                	test   eax,eax
c0005602:	75 28                	jne    c000562c <f_write+0x1d4>
c0005604:	eb 12                	jmp    c0005618 <f_write+0x1c0>
c0005606:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000560a:	74 09                	je     c0005615 <f_write+0x1bd>
c000560c:	89 d8                	mov    eax,ebx
c000560e:	e8 13 c7 ff ff       	call   c0001d26 <clmt_clust>
c0005613:	eb 0a                	jmp    c000561f <f_write+0x1c7>
c0005615:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005618:	89 d8                	mov    eax,ebx
c000561a:	e8 a1 da ff ff       	call   c00030c0 <create_chain>
c000561f:	85 c0                	test   eax,eax
c0005621:	75 09                	jne    c000562c <f_write+0x1d4>
c0005623:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005627:	e9 dc 00 00 00       	jmp    c0005708 <f_write+0x2b0>
c000562c:	83 f8 01             	cmp    eax,0x1
c000562f:	75 0e                	jne    c000563f <f_write+0x1e7>
c0005631:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005635:	bd 02 00 00 00       	mov    ebp,0x2
c000563a:	e9 c9 00 00 00       	jmp    c0005708 <f_write+0x2b0>
c000563f:	83 f8 ff             	cmp    eax,0xffffffff
c0005642:	75 0e                	jne    c0005652 <f_write+0x1fa>
c0005644:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005648:	bd 01 00 00 00       	mov    ebp,0x1
c000564d:	e9 b6 00 00 00       	jmp    c0005708 <f_write+0x2b0>
c0005652:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005655:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005659:	0f 85 90 fe ff ff    	jne    c00054ef <f_write+0x97>
c000565f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005662:	e9 88 fe ff ff       	jmp    c00054ef <f_write+0x97>
c0005667:	83 ec 0c             	sub    esp,0xc
c000566a:	8d 43 50             	lea    eax,[ebx+0x50]
c000566d:	6a 01                	push   0x1
c000566f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005672:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005675:	50                   	push   eax
c0005676:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000567a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000567e:	50                   	push   eax
c000567f:	e8 b3 c3 ff ff       	call   c0001a37 <disk_write>
c0005684:	83 c4 20             	add    esp,0x20
c0005687:	85 c0                	test   eax,eax
c0005689:	75 b9                	jne    c0005644 <f_write+0x1ec>
c000568b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000568f:	e9 65 fe ff ff       	jmp    c00054f9 <f_write+0xa1>
c0005694:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005697:	75 05                	jne    c000569e <f_write+0x246>
c0005699:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000569c:	74 2e                	je     c00056cc <f_write+0x274>
c000569e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00056a1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056a4:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00056a7:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00056aa:	73 20                	jae    c00056cc <f_write+0x274>
c00056ac:	83 ec 0c             	sub    esp,0xc
c00056af:	8d 43 50             	lea    eax,[ebx+0x50]
c00056b2:	6a 01                	push   0x1
c00056b4:	57                   	push   edi
c00056b5:	56                   	push   esi
c00056b6:	50                   	push   eax
c00056b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00056bb:	50                   	push   eax
c00056bc:	e8 60 c3 ff ff       	call   c0001a21 <disk_read>
c00056c1:	83 c4 20             	add    esp,0x20
c00056c4:	85 c0                	test   eax,eax
c00056c6:	0f 85 78 ff ff ff    	jne    c0005644 <f_write+0x1ec>
c00056cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056cf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056d2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056d5:	ba 00 02 00 00       	mov    edx,0x200
c00056da:	25 ff 01 00 00       	and    eax,0x1ff
c00056df:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056e3:	29 c2                	sub    edx,eax
c00056e5:	39 d6                	cmp    esi,edx
c00056e7:	76 02                	jbe    c00056eb <f_write+0x293>
c00056e9:	89 d6                	mov    esi,edx
c00056eb:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056ef:	89 f1                	mov    ecx,esi
c00056f1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056f5:	e8 f1 c3 ff ff       	call   c0001aeb <mem_cpy>
c00056fa:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056fe:	e9 b1 fe ff ff       	jmp    c00055b4 <f_write+0x15c>
c0005703:	bd 07 00 00 00       	mov    ebp,0x7
c0005708:	83 c4 2c             	add    esp,0x2c
c000570b:	89 e8                	mov    eax,ebp
c000570d:	5b                   	pop    ebx
c000570e:	5e                   	pop    esi
c000570f:	5f                   	pop    edi
c0005710:	5d                   	pop    ebp
c0005711:	c3                   	ret    

c0005712 <f_sync>:
c0005712:	56                   	push   esi
c0005713:	53                   	push   ebx
c0005714:	83 ec 64             	sub    esp,0x64
c0005717:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000571b:	8d 54 24 10          	lea    edx,[esp+0x10]
c000571f:	89 d8                	mov    eax,ebx
c0005721:	e8 49 ca ff ff       	call   c000216f <validate>
c0005726:	85 c0                	test   eax,eax
c0005728:	0f 85 ba 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c000572e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005731:	f6 c2 40             	test   dl,0x40
c0005734:	0f 84 ae 01 00 00    	je     c00058e8 <f_sync+0x1d6>
c000573a:	84 d2                	test   dl,dl
c000573c:	79 33                	jns    c0005771 <f_sync+0x5f>
c000573e:	83 ec 0c             	sub    esp,0xc
c0005741:	8d 43 50             	lea    eax,[ebx+0x50]
c0005744:	6a 01                	push   0x1
c0005746:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005749:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000574c:	50                   	push   eax
c000574d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005751:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005755:	50                   	push   eax
c0005756:	e8 dc c2 ff ff       	call   c0001a37 <disk_write>
c000575b:	83 c4 20             	add    esp,0x20
c000575e:	89 c2                	mov    edx,eax
c0005760:	b8 01 00 00 00       	mov    eax,0x1
c0005765:	85 d2                	test   edx,edx
c0005767:	0f 85 7b 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c000576d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005775:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005778:	0f 85 11 01 00 00    	jne    c000588f <f_sync+0x17d>
c000577e:	89 d8                	mov    eax,ebx
c0005780:	e8 13 d6 ff ff       	call   c0002d98 <fill_first_frag>
c0005785:	85 c0                	test   eax,eax
c0005787:	0f 85 5b 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c000578d:	83 c9 ff             	or     ecx,0xffffffff
c0005790:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005793:	89 d8                	mov    eax,ebx
c0005795:	e8 c9 d5 ff ff       	call   c0002d63 <fill_last_frag>
c000579a:	85 c0                	test   eax,eax
c000579c:	0f 85 46 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c00057a2:	83 ec 0c             	sub    esp,0xc
c00057a5:	68 60 04 00 00       	push   0x460
c00057aa:	e8 f0 2a 00 00       	call   c000829f <ff_memalloc>
c00057af:	83 c4 10             	add    esp,0x10
c00057b2:	89 c6                	mov    esi,eax
c00057b4:	b8 11 00 00 00       	mov    eax,0x11
c00057b9:	85 f6                	test   esi,esi
c00057bb:	0f 84 27 01 00 00    	je     c00058e8 <f_sync+0x1d6>
c00057c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057cb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ce:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057d1:	89 da                	mov    edx,ebx
c00057d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057d7:	e8 af df ff ff       	call   c000378b <load_obj_xdir>
c00057dc:	85 c0                	test   eax,eax
c00057de:	0f 85 95 00 00 00    	jne    c0005879 <f_sync+0x167>
c00057e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057eb:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057ef:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057f2:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057f5:	83 ca 01             	or     edx,0x1
c00057f8:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057fb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005801:	83 c0 34             	add    eax,0x34
c0005804:	e8 d9 c2 ff ff       	call   c0001ae2 <st_dword>
c0005809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005813:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005816:	83 c0 38             	add    eax,0x38
c0005819:	e8 c7 c2 ff ff       	call   c0001ae5 <st_qword>
c000581e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005825:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005828:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000582b:	83 c0 28             	add    eax,0x28
c000582e:	e8 b2 c2 ff ff       	call   c0001ae5 <st_qword>
c0005833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005837:	ba 00 00 21 50       	mov    edx,0x50210000
c000583c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000583f:	83 c0 0c             	add    eax,0xc
c0005842:	e8 9b c2 ff ff       	call   c0001ae2 <st_dword>
c0005847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000584e:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005852:	31 d2                	xor    edx,edx
c0005854:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005857:	83 c0 10             	add    eax,0x10
c000585a:	e8 83 c2 ff ff       	call   c0001ae2 <st_dword>
c000585f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005863:	e8 62 e1 ff ff       	call   c00039ca <store_xdir>
c0005868:	85 c0                	test   eax,eax
c000586a:	75 0d                	jne    c0005879 <f_sync+0x167>
c000586c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005870:	e8 00 eb ff ff       	call   c0004375 <sync_fs>
c0005875:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000587d:	83 ec 0c             	sub    esp,0xc
c0005880:	56                   	push   esi
c0005881:	e8 2f 2a 00 00       	call   c00082b5 <ff_memfree>
c0005886:	83 c4 10             	add    esp,0x10
c0005889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000588d:	eb 59                	jmp    c00058e8 <f_sync+0x1d6>
c000588f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005892:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005895:	e8 b0 c9 ff ff       	call   c000224a <move_window>
c000589a:	85 c0                	test   eax,eax
c000589c:	75 4a                	jne    c00058e8 <f_sync+0x1d6>
c000589e:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00058a1:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00058a5:	89 f2                	mov    edx,esi
c00058a7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00058aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00058ac:	e8 5f f3 ff ff       	call   c0004c10 <st_clust.isra.1>
c00058b1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058b4:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058b7:	e8 26 c2 ff ff       	call   c0001ae2 <st_dword>
c00058bc:	8d 46 16             	lea    eax,[esi+0x16]
c00058bf:	ba 00 00 21 50       	mov    edx,0x50210000
c00058c4:	e8 19 c2 ff ff       	call   c0001ae2 <st_dword>
c00058c9:	8d 46 12             	lea    eax,[esi+0x12]
c00058cc:	31 d2                	xor    edx,edx
c00058ce:	e8 0b c2 ff ff       	call   c0001ade <st_word>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058df:	e8 91 ea ff ff       	call   c0004375 <sync_fs>
c00058e4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058e8:	83 c4 64             	add    esp,0x64
c00058eb:	5b                   	pop    ebx
c00058ec:	5e                   	pop    esi
c00058ed:	c3                   	ret    

c00058ee <f_close>:
c00058ee:	53                   	push   ebx
c00058ef:	83 ec 24             	sub    esp,0x24
c00058f2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058f6:	53                   	push   ebx
c00058f7:	e8 16 fe ff ff       	call   c0005712 <f_sync>
c00058fc:	83 c4 10             	add    esp,0x10
c00058ff:	85 c0                	test   eax,eax
c0005901:	75 15                	jne    c0005918 <f_close+0x2a>
c0005903:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005907:	89 d8                	mov    eax,ebx
c0005909:	e8 61 c8 ff ff       	call   c000216f <validate>
c000590e:	85 c0                	test   eax,eax
c0005910:	75 06                	jne    c0005918 <f_close+0x2a>
c0005912:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005918:	83 c4 18             	add    esp,0x18
c000591b:	5b                   	pop    ebx
c000591c:	c3                   	ret    

c000591d <f_lseek>:
c000591d:	55                   	push   ebp
c000591e:	57                   	push   edi
c000591f:	56                   	push   esi
c0005920:	53                   	push   ebx
c0005921:	83 ec 3c             	sub    esp,0x3c
c0005924:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005928:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000592c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005930:	89 04 24             	mov    DWORD PTR [esp],eax
c0005933:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005937:	89 d8                	mov    eax,ebx
c0005939:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000593d:	e8 2d c8 ff ff       	call   c000216f <validate>
c0005942:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005946:	85 c0                	test   eax,eax
c0005948:	0f 85 7a 04 00 00    	jne    c0005dc8 <f_lseek+0x4ab>
c000594e:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005952:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005956:	85 c0                	test   eax,eax
c0005958:	0f 85 6a 04 00 00    	jne    c0005dc8 <f_lseek+0x4ab>
c000595e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005962:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005965:	74 0c                	je     c0005973 <f_lseek+0x56>
c0005967:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000596a:	85 c0                	test   eax,eax
c000596c:	75 1f                	jne    c000598d <f_lseek+0x70>
c000596e:	e9 b5 01 00 00       	jmp    c0005b28 <f_lseek+0x20b>
c0005973:	83 c9 ff             	or     ecx,0xffffffff
c0005976:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005979:	89 d8                	mov    eax,ebx
c000597b:	e8 e3 d3 ff ff       	call   c0002d63 <fill_last_frag>
c0005980:	85 c0                	test   eax,eax
c0005982:	74 e3                	je     c0005967 <f_lseek+0x4a>
c0005984:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005988:	e9 3b 04 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c000598d:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005992:	0f 85 ac 00 00 00    	jne    c0005a44 <f_lseek+0x127>
c0005998:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000599c:	0f 85 a2 00 00 00    	jne    c0005a44 <f_lseek+0x127>
c00059a2:	8d 78 04             	lea    edi,[eax+0x4]
c00059a5:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00059a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00059aa:	be 02 00 00 00       	mov    esi,0x2
c00059af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059b3:	85 ed                	test   ebp,ebp
c00059b5:	74 73                	je     c0005a2a <f_lseek+0x10d>
c00059b7:	89 e9                	mov    ecx,ebp
c00059b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00059c0:	ff 04 24             	inc    DWORD PTR [esp]
c00059c3:	89 ca                	mov    edx,ecx
c00059c5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059c9:	89 d8                	mov    eax,ebx
c00059cb:	e8 02 d4 ff ff       	call   c0002dd2 <get_fat>
c00059d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059d4:	83 f8 01             	cmp    eax,0x1
c00059d7:	77 11                	ja     c00059ea <f_lseek+0xcd>
c00059d9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059dd:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059e5:	e9 de 03 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c00059ea:	83 f8 ff             	cmp    eax,0xffffffff
c00059ed:	75 11                	jne    c0005a00 <f_lseek+0xe3>
c00059ef:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059f3:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059fb:	e9 c8 03 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c0005a00:	8d 51 01             	lea    edx,[ecx+0x1]
c0005a03:	89 c1                	mov    ecx,eax
c0005a05:	39 c2                	cmp    edx,eax
c0005a07:	74 b7                	je     c00059c0 <f_lseek+0xa3>
c0005a09:	83 c6 02             	add    esi,0x2
c0005a0c:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005a10:	72 0b                	jb     c0005a1d <f_lseek+0x100>
c0005a12:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005a15:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005a18:	89 0f                	mov    DWORD PTR [edi],ecx
c0005a1a:	83 c7 08             	add    edi,0x8
c0005a1d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a21:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a24:	76 04                	jbe    c0005a2a <f_lseek+0x10d>
c0005a26:	89 c5                	mov    ebp,eax
c0005a28:	eb 8d                	jmp    c00059b7 <f_lseek+0x9a>
c0005a2a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a2d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a31:	89 30                	mov    DWORD PTR [eax],esi
c0005a33:	0f 87 87 03 00 00    	ja     c0005dc0 <f_lseek+0x4a3>
c0005a39:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a3f:	e9 84 03 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c0005a44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a56:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a5d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a61:	73 0f                	jae    c0005a72 <f_lseek+0x155>
c0005a63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a7a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a7d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a84:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a88:	0f 84 3a 03 00 00    	je     c0005dc8 <f_lseek+0x4ab>
c0005a8e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a92:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a96:	83 c6 ff             	add    esi,0xffffffff
c0005a99:	89 d8                	mov    eax,ebx
c0005a9b:	83 d7 ff             	adc    edi,0xffffffff
c0005a9e:	89 f2                	mov    edx,esi
c0005aa0:	89 f9                	mov    ecx,edi
c0005aa2:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005aa6:	89 34 24             	mov    DWORD PTR [esp],esi
c0005aa9:	e8 78 c2 ff ff       	call   c0001d26 <clmt_clust>
c0005aae:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ab2:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ab5:	89 c2                	mov    edx,eax
c0005ab7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005abb:	89 c8                	mov    eax,ecx
c0005abd:	e8 43 c2 ff ff       	call   c0001d05 <clst2sect>
c0005ac2:	89 d7                	mov    edi,edx
c0005ac4:	09 c7                	or     edi,eax
c0005ac6:	0f 84 0d ff ff ff    	je     c00059d9 <f_lseek+0xbc>
c0005acc:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ad0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ad6:	0f 84 ec 02 00 00    	je     c0005dc8 <f_lseek+0x4ab>
c0005adc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ae0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ae4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ae7:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005aeb:	0f ac fe 09          	shrd   esi,edi,0x9
c0005aef:	4d                   	dec    ebp
c0005af0:	31 ff                	xor    edi,edi
c0005af2:	21 ee                	and    esi,ebp
c0005af4:	01 c6                	add    esi,eax
c0005af6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005af9:	11 d7                	adc    edi,edx
c0005afb:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005afe:	39 fa                	cmp    edx,edi
c0005b00:	75 08                	jne    c0005b0a <f_lseek+0x1ed>
c0005b02:	39 f0                	cmp    eax,esi
c0005b04:	0f 84 be 02 00 00    	je     c0005dc8 <f_lseek+0x4ab>
c0005b0a:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005b0d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005b11:	0f 89 80 02 00 00    	jns    c0005d97 <f_lseek+0x47a>
c0005b17:	83 ec 0c             	sub    esp,0xc
c0005b1a:	6a 01                	push   0x1
c0005b1c:	52                   	push   edx
c0005b1d:	50                   	push   eax
c0005b1e:	55                   	push   ebp
c0005b1f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b23:	e9 5a 02 00 00       	jmp    c0005d82 <f_lseek+0x465>
c0005b28:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b2c:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b2f:	74 16                	je     c0005b47 <f_lseek+0x22a>
c0005b31:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b36:	76 0f                	jbe    c0005b47 <f_lseek+0x22a>
c0005b38:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b47:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b4d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b50:	89 c7                	mov    edi,eax
c0005b52:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b56:	73 0d                	jae    c0005b65 <f_lseek+0x248>
c0005b58:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b5c:	75 07                	jne    c0005b65 <f_lseek+0x248>
c0005b5e:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b65:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b68:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b6b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b6f:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b76:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b7d:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b80:	75 09                	jne    c0005b8b <f_lseek+0x26e>
c0005b82:	31 f6                	xor    esi,esi
c0005b84:	31 ff                	xor    edi,edi
c0005b86:	e9 af 01 00 00       	jmp    c0005d3a <f_lseek+0x41d>
c0005b8b:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b8f:	89 d7                	mov    edi,edx
c0005b91:	c1 e1 09             	shl    ecx,0x9
c0005b94:	09 c7                	or     edi,eax
c0005b96:	89 cd                	mov    ebp,ecx
c0005b98:	74 6d                	je     c0005c07 <f_lseek+0x2ea>
c0005b9a:	83 c0 ff             	add    eax,0xffffffff
c0005b9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba1:	83 d2 ff             	adc    edx,0xffffffff
c0005ba4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bab:	83 c0 ff             	add    eax,0xffffffff
c0005bae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005bb2:	83 d2 ff             	adc    edx,0xffffffff
c0005bb5:	31 ff                	xor    edi,edi
c0005bb7:	57                   	push   edi
c0005bb8:	51                   	push   ecx
c0005bb9:	52                   	push   edx
c0005bba:	50                   	push   eax
c0005bbb:	e8 10 d7 01 00       	call   c00232d0 <__udivdi3>
c0005bc0:	83 c4 10             	add    esp,0x10
c0005bc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005bcb:	57                   	push   edi
c0005bcc:	55                   	push   ebp
c0005bcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bd5:	e8 f6 d6 01 00       	call   c00232d0 <__udivdi3>
c0005bda:	83 c4 10             	add    esp,0x10
c0005bdd:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005be1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005be5:	19 d1                	sbb    ecx,edx
c0005be7:	72 1e                	jb     c0005c07 <f_lseek+0x2ea>
c0005be9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bed:	89 e9                	mov    ecx,ebp
c0005bef:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bf2:	f7 d9                	neg    ecx
c0005bf4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bf7:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bfb:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bfe:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005c01:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005c05:	eb 28                	jmp    c0005c2f <f_lseek+0x312>
c0005c07:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005c0a:	85 c0                	test   eax,eax
c0005c0c:	75 1e                	jne    c0005c2c <f_lseek+0x30f>
c0005c0e:	31 d2                	xor    edx,edx
c0005c10:	89 d8                	mov    eax,ebx
c0005c12:	e8 a9 d4 ff ff       	call   c00030c0 <create_chain>
c0005c17:	83 f8 01             	cmp    eax,0x1
c0005c1a:	0f 84 b9 fd ff ff    	je     c00059d9 <f_lseek+0xbc>
c0005c20:	83 f8 ff             	cmp    eax,0xffffffff
c0005c23:	0f 84 c6 fd ff ff    	je     c00059ef <f_lseek+0xd2>
c0005c29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c2c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c2f:	85 c0                	test   eax,eax
c0005c31:	0f 84 4b ff ff ff    	je     c0005b82 <f_lseek+0x265>
c0005c37:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c43:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c46:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c4a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c4d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c50:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c54:	0f 83 9d 00 00 00    	jae    c0005cf7 <f_lseek+0x3da>
c0005c5a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c5e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c62:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c65:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c69:	01 f2                	add    edx,esi
c0005c6b:	11 f9                	adc    ecx,edi
c0005c6d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c75:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c78:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c7b:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c7e:	f6 c1 02             	test   cl,0x2
c0005c81:	74 35                	je     c0005cb8 <f_lseek+0x39b>
c0005c83:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c87:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c8a:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c8d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c91:	73 16                	jae    c0005ca9 <f_lseek+0x38c>
c0005c93:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c97:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c9b:	88 ca                	mov    dl,cl
c0005c9d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005ca0:	83 ca 40             	or     edx,0x40
c0005ca3:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ca6:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ca9:	89 c2                	mov    edx,eax
c0005cab:	89 d8                	mov    eax,ebx
c0005cad:	e8 0e d4 ff ff       	call   c00030c0 <create_chain>
c0005cb2:	85 c0                	test   eax,eax
c0005cb4:	75 0b                	jne    c0005cc1 <f_lseek+0x3a4>
c0005cb6:	eb 30                	jmp    c0005ce8 <f_lseek+0x3cb>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	89 d8                	mov    eax,ebx
c0005cbc:	e8 11 d1 ff ff       	call   c0002dd2 <get_fat>
c0005cc1:	83 f8 ff             	cmp    eax,0xffffffff
c0005cc4:	0f 84 25 fd ff ff    	je     c00059ef <f_lseek+0xd2>
c0005cca:	83 f8 01             	cmp    eax,0x1
c0005ccd:	0f 86 06 fd ff ff    	jbe    c00059d9 <f_lseek+0xbc>
c0005cd3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cd7:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cda:	0f 86 f9 fc ff ff    	jbe    c00059d9 <f_lseek+0xbc>
c0005ce0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ce3:	e9 5b ff ff ff       	jmp    c0005c43 <f_lseek+0x326>
c0005ce8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cf7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cfa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cfe:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005d01:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005d04:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005d07:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005d0d:	0f 84 6f fe ff ff    	je     c0005b82 <f_lseek+0x265>
c0005d13:	89 c2                	mov    edx,eax
c0005d15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005d19:	e8 e7 bf ff ff       	call   c0001d05 <clst2sect>
c0005d1e:	89 d7                	mov    edi,edx
c0005d20:	09 c7                	or     edi,eax
c0005d22:	0f 84 b1 fc ff ff    	je     c00059d9 <f_lseek+0xbc>
c0005d28:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d2f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d33:	c1 ef 09             	shr    edi,0x9
c0005d36:	01 c6                	add    esi,eax
c0005d38:	11 d7                	adc    edi,edx
c0005d3a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d3d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d40:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d43:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d46:	19 d1                	sbb    ecx,edx
c0005d48:	73 0a                	jae    c0005d54 <f_lseek+0x437>
c0005d4a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d4d:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d50:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d54:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d59:	74 6d                	je     c0005dc8 <f_lseek+0x4ab>
c0005d5b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d5e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d61:	39 fa                	cmp    edx,edi
c0005d63:	75 04                	jne    c0005d69 <f_lseek+0x44c>
c0005d65:	39 f0                	cmp    eax,esi
c0005d67:	74 5f                	je     c0005dc8 <f_lseek+0x4ab>
c0005d69:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d6c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d70:	79 25                	jns    c0005d97 <f_lseek+0x47a>
c0005d72:	83 ec 0c             	sub    esp,0xc
c0005d75:	6a 01                	push   0x1
c0005d77:	52                   	push   edx
c0005d78:	50                   	push   eax
c0005d79:	55                   	push   ebp
c0005d7a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d7e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d82:	50                   	push   eax
c0005d83:	e8 af bc ff ff       	call   c0001a37 <disk_write>
c0005d88:	83 c4 20             	add    esp,0x20
c0005d8b:	85 c0                	test   eax,eax
c0005d8d:	0f 85 5c fc ff ff    	jne    c00059ef <f_lseek+0xd2>
c0005d93:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d97:	83 ec 0c             	sub    esp,0xc
c0005d9a:	6a 01                	push   0x1
c0005d9c:	57                   	push   edi
c0005d9d:	56                   	push   esi
c0005d9e:	55                   	push   ebp
c0005d9f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005da3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005da7:	50                   	push   eax
c0005da8:	e8 74 bc ff ff       	call   c0001a21 <disk_read>
c0005dad:	83 c4 20             	add    esp,0x20
c0005db0:	85 c0                	test   eax,eax
c0005db2:	0f 85 37 fc ff ff    	jne    c00059ef <f_lseek+0xd2>
c0005db8:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005dbb:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005dbe:	eb 08                	jmp    c0005dc8 <f_lseek+0x4ab>
c0005dc0:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005dc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005dcc:	83 c4 3c             	add    esp,0x3c
c0005dcf:	5b                   	pop    ebx
c0005dd0:	5e                   	pop    esi
c0005dd1:	5f                   	pop    edi
c0005dd2:	5d                   	pop    ebp
c0005dd3:	c3                   	ret    

c0005dd4 <f_opendir>:
c0005dd4:	56                   	push   esi
c0005dd5:	b8 09 00 00 00       	mov    eax,0x9
c0005dda:	53                   	push   ebx
c0005ddb:	83 ec 24             	sub    esp,0x24
c0005dde:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005de2:	85 db                	test   ebx,ebx
c0005de4:	0f 84 e6 00 00 00    	je     c0005ed0 <f_opendir+0xfc>
c0005dea:	31 c9                	xor    ecx,ecx
c0005dec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005df0:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005df4:	e8 03 c7 ff ff       	call   c00024fc <mount_volume>
c0005df9:	85 c0                	test   eax,eax
c0005dfb:	0f 85 c9 00 00 00    	jne    c0005eca <f_opendir+0xf6>
c0005e01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e05:	83 ec 0c             	sub    esp,0xc
c0005e08:	89 03                	mov    DWORD PTR [ebx],eax
c0005e0a:	68 60 04 00 00       	push   0x460
c0005e0f:	e8 8b 24 00 00       	call   c000829f <ff_memalloc>
c0005e14:	83 c4 10             	add    esp,0x10
c0005e17:	89 c6                	mov    esi,eax
c0005e19:	b8 11 00 00 00       	mov    eax,0x11
c0005e1e:	85 f6                	test   esi,esi
c0005e20:	0f 84 aa 00 00 00    	je     c0005ed0 <f_opendir+0xfc>
c0005e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e30:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e33:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e3a:	89 d8                	mov    eax,ebx
c0005e3c:	e8 31 ee ff ff       	call   c0004c72 <follow_path>
c0005e41:	85 c0                	test   eax,eax
c0005e43:	75 61                	jne    c0005ea6 <f_opendir+0xd2>
c0005e45:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e49:	78 46                	js     c0005e91 <f_opendir+0xbd>
c0005e4b:	b8 05 00 00 00       	mov    eax,0x5
c0005e50:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e54:	74 50                	je     c0005ea6 <f_opendir+0xd2>
c0005e56:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e5a:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e5c:	3c 04                	cmp    al,0x4
c0005e5e:	75 26                	jne    c0005e86 <f_opendir+0xb2>
c0005e60:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e63:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e66:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e69:	30 d2                	xor    dl,dl
c0005e6b:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e6f:	09 c2                	or     edx,eax
c0005e71:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e74:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e77:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e7a:	89 da                	mov    edx,ebx
c0005e7c:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e7f:	e8 b4 ed ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0005e84:	eb 0b                	jmp    c0005e91 <f_opendir+0xbd>
c0005e86:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e89:	e8 59 ed ff ff       	call   c0004be7 <ld_clust.isra.0>
c0005e8e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e95:	31 d2                	xor    edx,edx
c0005e97:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e9b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e9f:	89 d8                	mov    eax,ebx
c0005ea1:	e8 22 d1 ff ff       	call   c0002fc8 <dir_sdi>
c0005ea6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eaa:	83 ec 0c             	sub    esp,0xc
c0005ead:	56                   	push   esi
c0005eae:	e8 02 24 00 00       	call   c00082b5 <ff_memfree>
c0005eb3:	83 c4 10             	add    esp,0x10
c0005eb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eba:	83 f8 04             	cmp    eax,0x4
c0005ebd:	74 06                	je     c0005ec5 <f_opendir+0xf1>
c0005ebf:	85 c0                	test   eax,eax
c0005ec1:	74 0d                	je     c0005ed0 <f_opendir+0xfc>
c0005ec3:	eb 05                	jmp    c0005eca <f_opendir+0xf6>
c0005ec5:	b8 05 00 00 00       	mov    eax,0x5
c0005eca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed0:	83 c4 24             	add    esp,0x24
c0005ed3:	5b                   	pop    ebx
c0005ed4:	5e                   	pop    esi
c0005ed5:	c3                   	ret    

c0005ed6 <f_closedir>:
c0005ed6:	53                   	push   ebx
c0005ed7:	83 ec 18             	sub    esp,0x18
c0005eda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ede:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ee2:	89 d8                	mov    eax,ebx
c0005ee4:	e8 86 c2 ff ff       	call   c000216f <validate>
c0005ee9:	85 c0                	test   eax,eax
c0005eeb:	75 06                	jne    c0005ef3 <f_closedir+0x1d>
c0005eed:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ef3:	83 c4 18             	add    esp,0x18
c0005ef6:	5b                   	pop    ebx
c0005ef7:	c3                   	ret    

c0005ef8 <f_readdir>:
c0005ef8:	57                   	push   edi
c0005ef9:	56                   	push   esi
c0005efa:	53                   	push   ebx
c0005efb:	83 ec 20             	sub    esp,0x20
c0005efe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f02:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005f06:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005f0a:	89 d8                	mov    eax,ebx
c0005f0c:	e8 5e c2 ff ff       	call   c000216f <validate>
c0005f11:	85 c0                	test   eax,eax
c0005f13:	75 77                	jne    c0005f8c <f_readdir+0x94>
c0005f15:	85 ff                	test   edi,edi
c0005f17:	75 0b                	jne    c0005f24 <f_readdir+0x2c>
c0005f19:	31 d2                	xor    edx,edx
c0005f1b:	89 d8                	mov    eax,ebx
c0005f1d:	e8 a6 d0 ff ff       	call   c0002fc8 <dir_sdi>
c0005f22:	eb 68                	jmp    c0005f8c <f_readdir+0x94>
c0005f24:	83 ec 0c             	sub    esp,0xc
c0005f27:	68 60 04 00 00       	push   0x460
c0005f2c:	e8 6e 23 00 00       	call   c000829f <ff_memalloc>
c0005f31:	83 c4 10             	add    esp,0x10
c0005f34:	89 c6                	mov    esi,eax
c0005f36:	b8 11 00 00 00       	mov    eax,0x11
c0005f3b:	85 f6                	test   esi,esi
c0005f3d:	74 4d                	je     c0005f8c <f_readdir+0x94>
c0005f3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f43:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f49:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f4c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f4f:	31 d2                	xor    edx,edx
c0005f51:	89 d8                	mov    eax,ebx
c0005f53:	e8 80 d8 ff ff       	call   c00037d8 <dir_read>
c0005f58:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f5d:	75 19                	jne    c0005f78 <f_readdir+0x80>
c0005f5f:	89 fa                	mov    edx,edi
c0005f61:	89 d8                	mov    eax,ebx
c0005f63:	e8 7e ea ff ff       	call   c00049e6 <get_fileinfo>
c0005f68:	31 d2                	xor    edx,edx
c0005f6a:	89 d8                	mov    eax,ebx
c0005f6c:	e8 af d5 ff ff       	call   c0003520 <dir_next>
c0005f71:	83 f8 04             	cmp    eax,0x4
c0005f74:	75 02                	jne    c0005f78 <f_readdir+0x80>
c0005f76:	31 c0                	xor    eax,eax
c0005f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f7c:	83 ec 0c             	sub    esp,0xc
c0005f7f:	56                   	push   esi
c0005f80:	e8 30 23 00 00       	call   c00082b5 <ff_memfree>
c0005f85:	83 c4 10             	add    esp,0x10
c0005f88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f8c:	83 c4 20             	add    esp,0x20
c0005f8f:	5b                   	pop    ebx
c0005f90:	5e                   	pop    esi
c0005f91:	5f                   	pop    edi
c0005f92:	c3                   	ret    

c0005f93 <f_stat>:
c0005f93:	57                   	push   edi
c0005f94:	31 c9                	xor    ecx,ecx
c0005f96:	56                   	push   esi
c0005f97:	53                   	push   ebx
c0005f98:	83 ec 50             	sub    esp,0x50
c0005f9b:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f9f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005fa3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005fa7:	e8 50 c5 ff ff       	call   c00024fc <mount_volume>
c0005fac:	89 c3                	mov    ebx,eax
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	75 67                	jne    c0006019 <f_stat+0x86>
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	bb 11 00 00 00       	mov    ebx,0x11
c0005fba:	68 60 04 00 00       	push   0x460
c0005fbf:	e8 db 22 00 00       	call   c000829f <ff_memalloc>
c0005fc4:	83 c4 10             	add    esp,0x10
c0005fc7:	89 c6                	mov    esi,eax
c0005fc9:	85 c0                	test   eax,eax
c0005fcb:	74 4c                	je     c0006019 <f_stat+0x86>
c0005fcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fd1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fd7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fdd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fe1:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fe5:	e8 88 ec ff ff       	call   c0004c72 <follow_path>
c0005fea:	89 c3                	mov    ebx,eax
c0005fec:	85 c0                	test   eax,eax
c0005fee:	75 1d                	jne    c000600d <f_stat+0x7a>
c0005ff0:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005ff5:	78 11                	js     c0006008 <f_stat+0x75>
c0005ff7:	85 ff                	test   edi,edi
c0005ff9:	74 12                	je     c000600d <f_stat+0x7a>
c0005ffb:	89 fa                	mov    edx,edi
c0005ffd:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006001:	e8 e0 e9 ff ff       	call   c00049e6 <get_fileinfo>
c0006006:	eb 05                	jmp    c000600d <f_stat+0x7a>
c0006008:	bb 06 00 00 00       	mov    ebx,0x6
c000600d:	83 ec 0c             	sub    esp,0xc
c0006010:	56                   	push   esi
c0006011:	e8 9f 22 00 00       	call   c00082b5 <ff_memfree>
c0006016:	83 c4 10             	add    esp,0x10
c0006019:	83 c4 50             	add    esp,0x50
c000601c:	89 d8                	mov    eax,ebx
c000601e:	5b                   	pop    ebx
c000601f:	5e                   	pop    esi
c0006020:	5f                   	pop    edi
c0006021:	c3                   	ret    

c0006022 <f_getfree>:
c0006022:	55                   	push   ebp
c0006023:	31 c9                	xor    ecx,ecx
c0006025:	57                   	push   edi
c0006026:	56                   	push   esi
c0006027:	53                   	push   ebx
c0006028:	83 ec 5c             	sub    esp,0x5c
c000602b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000602f:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006033:	e8 c4 c4 ff ff       	call   c00024fc <mount_volume>
c0006038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000603c:	85 c0                	test   eax,eax
c000603e:	0f 85 9d 01 00 00    	jne    c00061e1 <f_getfree+0x1bf>
c0006044:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006048:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000604c:	89 02                	mov    DWORD PTR [edx],eax
c000604e:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006051:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006054:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006057:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000605b:	39 f2                	cmp    edx,esi
c000605d:	77 0b                	ja     c000606a <f_getfree+0x48>
c000605f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006063:	89 10                	mov    DWORD PTR [eax],edx
c0006065:	e9 77 01 00 00       	jmp    c00061e1 <f_getfree+0x1bf>
c000606a:	8a 10                	mov    dl,BYTE PTR [eax]
c000606c:	80 fa 01             	cmp    dl,0x1
c000606f:	75 3a                	jne    c00060ab <f_getfree+0x89>
c0006071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006075:	be 02 00 00 00       	mov    esi,0x2
c000607a:	31 db                	xor    ebx,ebx
c000607c:	89 f2                	mov    edx,esi
c000607e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006082:	e8 4b cd ff ff       	call   c0002dd2 <get_fat>
c0006087:	83 f8 ff             	cmp    eax,0xffffffff
c000608a:	0f 84 28 01 00 00    	je     c00061b8 <f_getfree+0x196>
c0006090:	83 f8 01             	cmp    eax,0x1
c0006093:	0f 84 29 01 00 00    	je     c00061c2 <f_getfree+0x1a0>
c0006099:	83 d3 00             	adc    ebx,0x0
c000609c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a0:	46                   	inc    esi
c00060a1:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00060a4:	77 d6                	ja     c000607c <f_getfree+0x5a>
c00060a6:	e9 25 01 00 00       	jmp    c00061d0 <f_getfree+0x1ae>
c00060ab:	80 fa 04             	cmp    dl,0x4
c00060ae:	0f 85 88 00 00 00    	jne    c000613c <f_getfree+0x11a>
c00060b4:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00060b7:	31 ed                	xor    ebp,ebp
c00060b9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00060bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060c4:	31 db                	xor    ebx,ebx
c00060c6:	85 ed                	test   ebp,ebp
c00060c8:	75 3f                	jne    c0006109 <f_getfree+0xe7>
c00060ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060d2:	83 c0 01             	add    eax,0x1
c00060d5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060d9:	83 d2 00             	adc    edx,0x0
c00060dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060ec:	e8 59 c1 ff ff       	call   c000224a <move_window>
c00060f1:	85 c0                	test   eax,eax
c00060f3:	0f 85 d3 00 00 00    	jne    c00061cc <f_getfree+0x1aa>
c00060f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006101:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006105:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006109:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610d:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006110:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006114:	89 cf                	mov    edi,ecx
c0006116:	85 f6                	test   esi,esi
c0006118:	74 12                	je     c000612c <f_getfree+0x10a>
c000611a:	88 c1                	mov    cl,al
c000611c:	83 e1 01             	and    ecx,0x1
c000611f:	80 f9 01             	cmp    cl,0x1
c0006122:	83 d3 00             	adc    ebx,0x0
c0006125:	d0 e8                	shr    al,1
c0006127:	4e                   	dec    esi
c0006128:	39 fe                	cmp    esi,edi
c000612a:	75 ea                	jne    c0006116 <f_getfree+0xf4>
c000612c:	45                   	inc    ebp
c000612d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006133:	85 f6                	test   esi,esi
c0006135:	75 8f                	jne    c00060c6 <f_getfree+0xa4>
c0006137:	e9 94 00 00 00       	jmp    c00061d0 <f_getfree+0x1ae>
c000613c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000613f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006142:	31 f6                	xor    esi,esi
c0006144:	31 db                	xor    ebx,ebx
c0006146:	85 f6                	test   esi,esi
c0006148:	75 1b                	jne    c0006165 <f_getfree+0x143>
c000614a:	89 d7                	mov    edi,edx
c000614c:	89 cd                	mov    ebp,ecx
c000614e:	83 c7 01             	add    edi,0x1
c0006151:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006155:	83 d5 00             	adc    ebp,0x0
c0006158:	e8 ed c0 ff ff       	call   c000224a <move_window>
c000615d:	85 c0                	test   eax,eax
c000615f:	75 6b                	jne    c00061cc <f_getfree+0x1aa>
c0006161:	89 fa                	mov    edx,edi
c0006163:	89 e9                	mov    ecx,ebp
c0006165:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006169:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000616d:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006171:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006174:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006178:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000617c:	75 11                	jne    c000618f <f_getfree+0x16d>
c000617e:	e8 e9 b8 ff ff       	call   c0001a6c <ld_word>
c0006183:	66 83 f8 01          	cmp    ax,0x1
c0006187:	83 d3 00             	adc    ebx,0x0
c000618a:	83 c6 02             	add    esi,0x2
c000618d:	eb 13                	jmp    c00061a2 <f_getfree+0x180>
c000618f:	e8 e5 b8 ff ff       	call   c0001a79 <ld_dword>
c0006194:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006199:	83 f8 01             	cmp    eax,0x1
c000619c:	83 d3 00             	adc    ebx,0x0
c000619f:	83 c6 04             	add    esi,0x4
c00061a2:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00061a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00061ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00061b0:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00061b4:	75 90                	jne    c0006146 <f_getfree+0x124>
c00061b6:	eb 18                	jmp    c00061d0 <f_getfree+0x1ae>
c00061b8:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00061c0:	eb 0e                	jmp    c00061d0 <f_getfree+0x1ae>
c00061c2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061ca:	eb 04                	jmp    c00061d0 <f_getfree+0x1ae>
c00061cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061d0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061d4:	89 18                	mov    DWORD PTR [eax],ebx
c00061d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061da:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061dd:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061e5:	83 c4 5c             	add    esp,0x5c
c00061e8:	5b                   	pop    ebx
c00061e9:	5e                   	pop    esi
c00061ea:	5f                   	pop    edi
c00061eb:	5d                   	pop    ebp
c00061ec:	c3                   	ret    

c00061ed <f_truncate>:
c00061ed:	56                   	push   esi
c00061ee:	53                   	push   ebx
c00061ef:	83 ec 14             	sub    esp,0x14
c00061f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061f6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061fa:	89 d8                	mov    eax,ebx
c00061fc:	e8 6e bf ff ff       	call   c000216f <validate>
c0006201:	89 c6                	mov    esi,eax
c0006203:	85 c0                	test   eax,eax
c0006205:	0f 85 d2 00 00 00    	jne    c00062dd <f_truncate+0xf0>
c000620b:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000620f:	85 f6                	test   esi,esi
c0006211:	0f 85 c6 00 00 00    	jne    c00062dd <f_truncate+0xf0>
c0006217:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000621b:	0f 84 b7 00 00 00    	je     c00062d8 <f_truncate+0xeb>
c0006221:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006224:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006227:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000622a:	89 d1                	mov    ecx,edx
c000622c:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000622f:	0f 83 a8 00 00 00    	jae    c00062dd <f_truncate+0xf0>
c0006235:	09 c2                	or     edx,eax
c0006237:	75 15                	jne    c000624e <f_truncate+0x61>
c0006239:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000623c:	31 c9                	xor    ecx,ecx
c000623e:	89 d8                	mov    eax,ebx
c0006240:	e8 7a d0 ff ff       	call   c00032bf <remove_chain>
c0006245:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000624c:	eb 35                	jmp    c0006283 <f_truncate+0x96>
c000624e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006251:	89 d8                	mov    eax,ebx
c0006253:	e8 7a cb ff ff       	call   c0002dd2 <get_fat>
c0006258:	89 c2                	mov    edx,eax
c000625a:	b8 01 00 00 00       	mov    eax,0x1
c000625f:	83 fa ff             	cmp    edx,0xffffffff
c0006262:	74 1f                	je     c0006283 <f_truncate+0x96>
c0006264:	b8 02 00 00 00       	mov    eax,0x2
c0006269:	83 fa 01             	cmp    edx,0x1
c000626c:	74 15                	je     c0006283 <f_truncate+0x96>
c000626e:	31 c0                	xor    eax,eax
c0006270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006274:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006277:	76 0a                	jbe    c0006283 <f_truncate+0x96>
c0006279:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000627c:	89 d8                	mov    eax,ebx
c000627e:	e8 3c d0 ff ff       	call   c00032bf <remove_chain>
c0006283:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006286:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006289:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000628c:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000628f:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006292:	83 ca 40             	or     edx,0x40
c0006295:	85 c0                	test   eax,eax
c0006297:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000629a:	75 35                	jne    c00062d1 <f_truncate+0xe4>
c000629c:	84 d2                	test   dl,dl
c000629e:	79 3d                	jns    c00062dd <f_truncate+0xf0>
c00062a0:	83 ec 0c             	sub    esp,0xc
c00062a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00062a6:	6a 01                	push   0x1
c00062a8:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00062ab:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00062ae:	50                   	push   eax
c00062af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00062b3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00062b7:	50                   	push   eax
c00062b8:	e8 7a b7 ff ff       	call   c0001a37 <disk_write>
c00062bd:	83 c4 20             	add    esp,0x20
c00062c0:	85 c0                	test   eax,eax
c00062c2:	75 08                	jne    c00062cc <f_truncate+0xdf>
c00062c4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062c8:	31 f6                	xor    esi,esi
c00062ca:	eb 11                	jmp    c00062dd <f_truncate+0xf0>
c00062cc:	b8 01 00 00 00       	mov    eax,0x1
c00062d1:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062d4:	89 c6                	mov    esi,eax
c00062d6:	eb 05                	jmp    c00062dd <f_truncate+0xf0>
c00062d8:	be 07 00 00 00       	mov    esi,0x7
c00062dd:	89 f0                	mov    eax,esi
c00062df:	83 c4 14             	add    esp,0x14
c00062e2:	5b                   	pop    ebx
c00062e3:	5e                   	pop    esi
c00062e4:	c3                   	ret    

c00062e5 <f_unlink>:
c00062e5:	56                   	push   esi
c00062e6:	b9 02 00 00 00       	mov    ecx,0x2
c00062eb:	53                   	push   ebx
c00062ec:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062f6:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062fd:	e8 fa c1 ff ff       	call   c00024fc <mount_volume>
c0006302:	85 c0                	test   eax,eax
c0006304:	0f 85 55 01 00 00    	jne    c000645f <f_unlink+0x17a>
c000630a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000630e:	83 ec 0c             	sub    esp,0xc
c0006311:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006315:	68 60 04 00 00       	push   0x460
c000631a:	e8 80 1f 00 00       	call   c000829f <ff_memalloc>
c000631f:	83 c4 10             	add    esp,0x10
c0006322:	89 c3                	mov    ebx,eax
c0006324:	b8 11 00 00 00       	mov    eax,0x11
c0006329:	85 db                	test   ebx,ebx
c000632b:	0f 84 2e 01 00 00    	je     c000645f <f_unlink+0x17a>
c0006331:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006335:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000633b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000633e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006341:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006348:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634c:	e8 21 e9 ff ff       	call   c0004c72 <follow_path>
c0006351:	85 c0                	test   eax,eax
c0006353:	0f 85 f2 00 00 00    	jne    c000644b <f_unlink+0x166>
c0006359:	b8 06 00 00 00       	mov    eax,0x6
c000635e:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006366:	0f 88 df 00 00 00    	js     c000644b <f_unlink+0x166>
c000636c:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006371:	74 0a                	je     c000637d <f_unlink+0x98>
c0006373:	b8 07 00 00 00       	mov    eax,0x7
c0006378:	e9 ce 00 00 00       	jmp    c000644b <f_unlink+0x166>
c000637d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006381:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006385:	8a 02                	mov    al,BYTE PTR [edx]
c0006387:	3c 04                	cmp    al,0x4
c0006389:	75 12                	jne    c000639d <f_unlink+0xb8>
c000638b:	8d 42 10             	lea    eax,[edx+0x10]
c000638e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006392:	e8 a1 e8 ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0006397:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000639b:	eb 0e                	jmp    c00063ab <f_unlink+0xc6>
c000639d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00063a4:	e8 3e e8 ff ff       	call   c0004be7 <ld_clust.isra.0>
c00063a9:	89 c6                	mov    esi,eax
c00063ab:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00063b0:	75 12                	jne    c00063c4 <f_unlink+0xdf>
c00063b2:	8d 44 24 48          	lea    eax,[esp+0x48]
c00063b6:	e8 94 d6 ff ff       	call   c0003a4f <dir_remove>
c00063bb:	85 c0                	test   eax,eax
c00063bd:	74 6c                	je     c000642b <f_unlink+0x146>
c00063bf:	e9 87 00 00 00       	jmp    c000644b <f_unlink+0x166>
c00063c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063c8:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063cf:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063d6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063d9:	75 21                	jne    c00063fc <f_unlink+0x117>
c00063db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063e3:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063ea:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063f1:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063f5:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063fc:	31 d2                	xor    edx,edx
c00063fe:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006405:	e8 be cb ff ff       	call   c0002fc8 <dir_sdi>
c000640a:	85 c0                	test   eax,eax
c000640c:	75 3d                	jne    c000644b <f_unlink+0x166>
c000640e:	31 d2                	xor    edx,edx
c0006410:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006417:	e8 bc d3 ff ff       	call   c00037d8 <dir_read>
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 84 4f ff ff ff    	je     c0006373 <f_unlink+0x8e>
c0006424:	83 f8 04             	cmp    eax,0x4
c0006427:	75 22                	jne    c000644b <f_unlink+0x166>
c0006429:	eb 87                	jmp    c00063b2 <f_unlink+0xcd>
c000642b:	85 f6                	test   esi,esi
c000642d:	75 0b                	jne    c000643a <f_unlink+0x155>
c000642f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006433:	e8 3d df ff ff       	call   c0004375 <sync_fs>
c0006438:	eb 11                	jmp    c000644b <f_unlink+0x166>
c000643a:	31 c9                	xor    ecx,ecx
c000643c:	89 f2                	mov    edx,esi
c000643e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006442:	e8 78 ce ff ff       	call   c00032bf <remove_chain>
c0006447:	85 c0                	test   eax,eax
c0006449:	74 e4                	je     c000642f <f_unlink+0x14a>
c000644b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000644f:	83 ec 0c             	sub    esp,0xc
c0006452:	53                   	push   ebx
c0006453:	e8 5d 1e 00 00       	call   c00082b5 <ff_memfree>
c0006458:	83 c4 10             	add    esp,0x10
c000645b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000645f:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006465:	5b                   	pop    ebx
c0006466:	5e                   	pop    esi
c0006467:	c3                   	ret    

c0006468 <f_mkdir>:
c0006468:	57                   	push   edi
c0006469:	b9 02 00 00 00       	mov    ecx,0x2
c000646e:	56                   	push   esi
c000646f:	53                   	push   ebx
c0006470:	83 c4 80             	add    esp,0xffffff80
c0006473:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006477:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000647e:	e8 79 c0 ff ff       	call   c00024fc <mount_volume>
c0006483:	89 c3                	mov    ebx,eax
c0006485:	85 c0                	test   eax,eax
c0006487:	0f 85 fe 01 00 00    	jne    c000668b <f_mkdir+0x223>
c000648d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006491:	bb 11 00 00 00       	mov    ebx,0x11
c0006496:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000649a:	83 ec 0c             	sub    esp,0xc
c000649d:	68 60 04 00 00       	push   0x460
c00064a2:	e8 f8 1d 00 00       	call   c000829f <ff_memalloc>
c00064a7:	83 c4 10             	add    esp,0x10
c00064aa:	89 c7                	mov    edi,eax
c00064ac:	85 c0                	test   eax,eax
c00064ae:	0f 84 d7 01 00 00    	je     c000668b <f_mkdir+0x223>
c00064b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b8:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00064be:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064c4:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064cb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064cf:	e8 9e e7 ff ff       	call   c0004c72 <follow_path>
c00064d4:	89 c3                	mov    ebx,eax
c00064d6:	85 c0                	test   eax,eax
c00064d8:	74 3e                	je     c0006518 <f_mkdir+0xb0>
c00064da:	83 f8 04             	cmp    eax,0x4
c00064dd:	75 3e                	jne    c000651d <f_mkdir+0xb5>
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ed:	e8 ce cb ff ff       	call   c00030c0 <create_chain>
c00064f2:	89 c6                	mov    esi,eax
c00064f4:	85 c0                	test   eax,eax
c00064f6:	74 0c                	je     c0006504 <f_mkdir+0x9c>
c00064f8:	bb 02 00 00 00       	mov    ebx,0x2
c00064fd:	83 f8 01             	cmp    eax,0x1
c0006500:	74 07                	je     c0006509 <f_mkdir+0xa1>
c0006502:	eb 2a                	jmp    c000652e <f_mkdir+0xc6>
c0006504:	bb 07 00 00 00       	mov    ebx,0x7
c0006509:	31 c9                	xor    ecx,ecx
c000650b:	89 f2                	mov    edx,esi
c000650d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006511:	e8 a9 cd ff ff       	call   c00032bf <remove_chain>
c0006516:	eb 05                	jmp    c000651d <f_mkdir+0xb5>
c0006518:	bb 08 00 00 00       	mov    ebx,0x8
c000651d:	83 ec 0c             	sub    esp,0xc
c0006520:	57                   	push   edi
c0006521:	e8 8f 1d 00 00       	call   c00082b5 <ff_memfree>
c0006526:	83 c4 10             	add    esp,0x10
c0006529:	e9 5d 01 00 00       	jmp    c000668b <f_mkdir+0x223>
c000652e:	bb 01 00 00 00       	mov    ebx,0x1
c0006533:	83 f8 ff             	cmp    eax,0xffffffff
c0006536:	74 d1                	je     c0006509 <f_mkdir+0xa1>
c0006538:	89 f2                	mov    edx,esi
c000653a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653e:	e8 c4 ce ff ff       	call   c0003407 <dir_clear>
c0006543:	89 c3                	mov    ebx,eax
c0006545:	85 c0                	test   eax,eax
c0006547:	75 c0                	jne    c0006509 <f_mkdir+0xa1>
c0006549:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006550:	74 69                	je     c00065bb <f_mkdir+0x153>
c0006552:	b9 0b 00 00 00       	mov    ecx,0xb
c0006557:	83 c0 54             	add    eax,0x54
c000655a:	ba 20 00 00 00       	mov    edx,0x20
c000655f:	e8 9c b5 ff ff       	call   c0001b00 <mem_set>
c0006564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006568:	ba 00 00 21 50       	mov    edx,0x50210000
c000656d:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006571:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006575:	83 c0 6a             	add    eax,0x6a
c0006578:	e8 65 b5 ff ff       	call   c0001ae2 <st_dword>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	89 f1                	mov    ecx,esi
c0006583:	8d 50 54             	lea    edx,[eax+0x54]
c0006586:	e8 85 e6 ff ff       	call   c0004c10 <st_clust.isra.1>
c000658b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658f:	b9 20 00 00 00       	mov    ecx,0x20
c0006594:	8d 50 54             	lea    edx,[eax+0x54]
c0006597:	83 c0 74             	add    eax,0x74
c000659a:	e8 4c b5 ff ff       	call   c0001aeb <mem_cpy>
c000659f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00065a7:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00065ab:	8d 50 74             	lea    edx,[eax+0x74]
c00065ae:	e8 5d e6 ff ff       	call   c0004c10 <st_clust.isra.1>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065bb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065bf:	e8 2f db ff ff       	call   c00040f3 <dir_register>
c00065c4:	89 c3                	mov    ebx,eax
c00065c6:	85 c0                	test   eax,eax
c00065c8:	0f 85 3b ff ff ff    	jne    c0006509 <f_mkdir+0xa1>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d5:	75 74                	jne    c000664b <f_mkdir+0x1e3>
c00065d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065da:	ba 00 00 21 50       	mov    edx,0x50210000
c00065df:	83 c0 0c             	add    eax,0xc
c00065e2:	e8 fb b4 ff ff       	call   c0001ae2 <st_dword>
c00065e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065eb:	89 f2                	mov    edx,esi
c00065ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f0:	83 c0 34             	add    eax,0x34
c00065f3:	e8 ea b4 ff ff       	call   c0001ae2 <st_dword>
c00065f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065fc:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006600:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006603:	c1 e2 09             	shl    edx,0x9
c0006606:	83 c0 38             	add    eax,0x38
c0006609:	e8 d4 b4 ff ff       	call   c0001ae2 <st_dword>
c000660e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006612:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006616:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006619:	c1 e2 09             	shl    edx,0x9
c000661c:	83 c0 28             	add    eax,0x28
c000661f:	e8 be b4 ff ff       	call   c0001ae2 <st_dword>
c0006624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006628:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000662b:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000662f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006632:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006636:	8d 44 24 34          	lea    eax,[esp+0x34]
c000663a:	e8 8b d3 ff ff       	call   c00039ca <store_xdir>
c000663f:	89 c3                	mov    ebx,eax
c0006641:	85 c0                	test   eax,eax
c0006643:	0f 85 d4 fe ff ff    	jne    c000651d <f_mkdir+0xb5>
c0006649:	eb 30                	jmp    c000667b <f_mkdir+0x213>
c000664b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	83 c0 16             	add    eax,0x16
c0006657:	e8 86 b4 ff ff       	call   c0001ae2 <st_dword>
c000665c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006660:	89 f1                	mov    ecx,esi
c0006662:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006666:	e8 a5 e5 ff ff       	call   c0004c10 <st_clust.isra.1>
c000666b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000666f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006677:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000667b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667f:	e8 f1 dc ff ff       	call   c0004375 <sync_fs>
c0006684:	89 c3                	mov    ebx,eax
c0006686:	e9 92 fe ff ff       	jmp    c000651d <f_mkdir+0xb5>
c000668b:	83 ec 80             	sub    esp,0xffffff80
c000668e:	89 d8                	mov    eax,ebx
c0006690:	5b                   	pop    ebx
c0006691:	5e                   	pop    esi
c0006692:	5f                   	pop    edi
c0006693:	c3                   	ret    

c0006694 <f_rename>:
c0006694:	55                   	push   ebp
c0006695:	57                   	push   edi
c0006696:	56                   	push   esi
c0006697:	53                   	push   ebx
c0006698:	81 ec fc 00 00 00    	sub    esp,0xfc
c000669e:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00066a5:	e8 a4 b9 ff ff       	call   c000204e <get_ldnumber>
c00066aa:	b9 02 00 00 00       	mov    ecx,0x2
c00066af:	8d 54 24 14          	lea    edx,[esp+0x14]
c00066b3:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00066ba:	e8 3d be ff ff       	call   c00024fc <mount_volume>
c00066bf:	85 c0                	test   eax,eax
c00066c1:	0f 85 b5 02 00 00    	jne    c000697c <f_rename+0x2e8>
c00066c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066cb:	83 ec 0c             	sub    esp,0xc
c00066ce:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066d2:	68 60 04 00 00       	push   0x460
c00066d7:	e8 c3 1b 00 00       	call   c000829f <ff_memalloc>
c00066dc:	83 c4 10             	add    esp,0x10
c00066df:	89 c3                	mov    ebx,eax
c00066e1:	b8 11 00 00 00       	mov    eax,0x11
c00066e6:	85 db                	test   ebx,ebx
c00066e8:	0f 84 8e 02 00 00    	je     c000697c <f_rename+0x2e8>
c00066ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066f2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066f8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066fb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066fe:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006705:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006709:	e8 64 e5 ff ff       	call   c0004c72 <follow_path>
c000670e:	85 c0                	test   eax,eax
c0006710:	0f 85 52 02 00 00    	jne    c0006968 <f_rename+0x2d4>
c0006716:	b8 06 00 00 00       	mov    eax,0x6
c000671b:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006723:	0f 85 3f 02 00 00    	jne    c0006968 <f_rename+0x2d4>
c0006729:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000672d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006730:	0f 85 05 01 00 00    	jne    c000683b <f_rename+0x1a7>
c0006736:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006739:	b9 40 00 00 00       	mov    ecx,0x40
c000673e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006742:	e8 a4 b3 ff ff       	call   c0001aeb <mem_cpy>
c0006747:	b9 4c 00 00 00       	mov    ecx,0x4c
c000674c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006750:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006757:	e8 8f b3 ff ff       	call   c0001aeb <mem_cpy>
c000675c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006763:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000676a:	e8 03 e5 ff ff       	call   c0004c72 <follow_path>
c000676f:	85 c0                	test   eax,eax
c0006771:	75 29                	jne    c000679c <f_rename+0x108>
c0006773:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006777:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000677e:	74 0a                	je     c000678a <f_rename+0xf6>
c0006780:	b8 08 00 00 00       	mov    eax,0x8
c0006785:	e9 de 01 00 00       	jmp    c0006968 <f_rename+0x2d4>
c000678a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006791:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006798:	75 e6                	jne    c0006780 <f_rename+0xec>
c000679a:	eb 09                	jmp    c00067a5 <f_rename+0x111>
c000679c:	83 f8 04             	cmp    eax,0x4
c000679f:	0f 85 c3 01 00 00    	jne    c0006968 <f_rename+0x2d4>
c00067a5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ac:	e8 42 d9 ff ff       	call   c00040f3 <dir_register>
c00067b1:	85 c0                	test   eax,eax
c00067b3:	0f 85 af 01 00 00    	jne    c0006968 <f_rename+0x2d4>
c00067b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067bd:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00067c0:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067c3:	89 c5                	mov    ebp,eax
c00067c5:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067cc:	8d 46 24             	lea    eax,[esi+0x24]
c00067cf:	e8 98 b2 ff ff       	call   c0001a6c <ld_word>
c00067d4:	b9 40 00 00 00       	mov    ecx,0x40
c00067d9:	89 c7                	mov    edi,eax
c00067db:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067df:	89 f0                	mov    eax,esi
c00067e1:	e8 05 b3 ff ff       	call   c0001aeb <mem_cpy>
c00067e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ea:	89 e9                	mov    ecx,ebp
c00067ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ef:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067f2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067fa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067fd:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006800:	0f b7 d7             	movzx  edx,di
c0006803:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006806:	83 c0 24             	add    eax,0x24
c0006809:	e8 d0 b2 ff ff       	call   c0001ade <st_word>
c000680e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006812:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006815:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006818:	a8 10                	test   al,0x10
c000681a:	75 06                	jne    c0006822 <f_rename+0x18e>
c000681c:	83 c8 20             	or     eax,0x20
c000681f:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006822:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006829:	e8 9c d1 ff ff       	call   c00039ca <store_xdir>
c000682e:	85 c0                	test   eax,eax
c0006830:	0f 84 1c 01 00 00    	je     c0006952 <f_rename+0x2be>
c0006836:	e9 2d 01 00 00       	jmp    c0006968 <f_rename+0x2d4>
c000683b:	b9 20 00 00 00       	mov    ecx,0x20
c0006840:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006847:	8d 44 24 18          	lea    eax,[esp+0x18]
c000684b:	e8 9b b2 ff ff       	call   c0001aeb <mem_cpy>
c0006850:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006855:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006859:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006860:	e8 86 b2 ff ff       	call   c0001aeb <mem_cpy>
c0006865:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000686c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006873:	e8 fa e3 ff ff       	call   c0004c72 <follow_path>
c0006878:	85 c0                	test   eax,eax
c000687a:	75 27                	jne    c00068a3 <f_rename+0x20f>
c000687c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006880:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006887:	0f 85 f3 fe ff ff    	jne    c0006780 <f_rename+0xec>
c000688d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006894:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000689b:	0f 85 df fe ff ff    	jne    c0006780 <f_rename+0xec>
c00068a1:	eb 09                	jmp    c00068ac <f_rename+0x218>
c00068a3:	83 f8 04             	cmp    eax,0x4
c00068a6:	0f 85 bc 00 00 00    	jne    c0006968 <f_rename+0x2d4>
c00068ac:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068b3:	e8 3b d8 ff ff       	call   c00040f3 <dir_register>
c00068b8:	85 c0                	test   eax,eax
c00068ba:	0f 85 a8 00 00 00    	jne    c0006968 <f_rename+0x2d4>
c00068c0:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068c7:	b9 13 00 00 00       	mov    ecx,0x13
c00068cc:	8d 46 0d             	lea    eax,[esi+0xd]
c00068cf:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068d3:	e8 13 b2 ff ff       	call   c0001aeb <mem_cpy>
c00068d8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068dc:	a8 10                	test   al,0x10
c00068de:	75 03                	jne    c00068e3 <f_rename+0x24f>
c00068e0:	83 c8 20             	or     eax,0x20
c00068e3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068ee:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068f2:	74 5e                	je     c0006952 <f_rename+0x2be>
c00068f4:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068fb:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068ff:	74 51                	je     c0006952 <f_rename+0x2be>
c0006901:	89 f2                	mov    edx,esi
c0006903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006907:	8a 07                	mov    al,BYTE PTR [edi]
c0006909:	e8 d9 e2 ff ff       	call   c0004be7 <ld_clust.isra.0>
c000690e:	89 c2                	mov    edx,eax
c0006910:	89 f8                	mov    eax,edi
c0006912:	e8 ee b3 ff ff       	call   c0001d05 <clst2sect>
c0006917:	89 c6                	mov    esi,eax
c0006919:	89 d1                	mov    ecx,edx
c000691b:	b8 02 00 00 00       	mov    eax,0x2
c0006920:	09 f2                	or     edx,esi
c0006922:	74 44                	je     c0006968 <f_rename+0x2d4>
c0006924:	89 f2                	mov    edx,esi
c0006926:	89 f8                	mov    eax,edi
c0006928:	e8 1d b9 ff ff       	call   c000224a <move_window>
c000692d:	85 c0                	test   eax,eax
c000692f:	75 37                	jne    c0006968 <f_rename+0x2d4>
c0006931:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006935:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006939:	75 17                	jne    c0006952 <f_rename+0x2be>
c000693b:	8d 50 74             	lea    edx,[eax+0x74]
c000693e:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006945:	e8 c6 e2 ff ff       	call   c0004c10 <st_clust.isra.1>
c000694a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000694e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006952:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006956:	e8 f4 d0 ff ff       	call   c0003a4f <dir_remove>
c000695b:	85 c0                	test   eax,eax
c000695d:	75 09                	jne    c0006968 <f_rename+0x2d4>
c000695f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006963:	e8 0d da ff ff       	call   c0004375 <sync_fs>
c0006968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000696c:	83 ec 0c             	sub    esp,0xc
c000696f:	53                   	push   ebx
c0006970:	e8 40 19 00 00       	call   c00082b5 <ff_memfree>
c0006975:	83 c4 10             	add    esp,0x10
c0006978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000697c:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006982:	5b                   	pop    ebx
c0006983:	5e                   	pop    esi
c0006984:	5f                   	pop    edi
c0006985:	5d                   	pop    ebp
c0006986:	c3                   	ret    

c0006987 <f_chmod>:
c0006987:	57                   	push   edi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	56                   	push   esi
c000698e:	53                   	push   ebx
c000698f:	83 ec 60             	sub    esp,0x60
c0006992:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006996:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000699a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000699e:	8d 44 24 70          	lea    eax,[esp+0x70]
c00069a2:	e8 55 bb ff ff       	call   c00024fc <mount_volume>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 af 00 00 00    	jne    c0006a5e <f_chmod+0xd7>
c00069af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b3:	83 ec 0c             	sub    esp,0xc
c00069b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069ba:	68 60 04 00 00       	push   0x460
c00069bf:	e8 db 18 00 00       	call   c000829f <ff_memalloc>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	89 c6                	mov    esi,eax
c00069c9:	b8 11 00 00 00       	mov    eax,0x11
c00069ce:	85 f6                	test   esi,esi
c00069d0:	0f 84 88 00 00 00    	je     c0006a5e <f_chmod+0xd7>
c00069d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069da:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ee:	e8 7f e2 ff ff       	call   c0004c72 <follow_path>
c00069f3:	85 c0                	test   eax,eax
c00069f5:	75 53                	jne    c0006a4a <f_chmod+0xc3>
c00069f7:	b8 06 00 00 00       	mov    eax,0x6
c00069fc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a01:	75 47                	jne    c0006a4a <f_chmod+0xc3>
c0006a03:	89 f9                	mov    ecx,edi
c0006a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a09:	83 e1 27             	and    ecx,0x27
c0006a0c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a0f:	75 1d                	jne    c0006a2e <f_chmod+0xa7>
c0006a11:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a14:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a17:	21 cb                	and    ebx,ecx
c0006a19:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a1c:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 a2 cf ff ff       	call   c00039ca <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1e                	jne    c0006a4a <f_chmod+0xc3>
c0006a2c:	eb 13                	jmp    c0006a41 <f_chmod+0xba>
c0006a2e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a32:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a35:	21 cb                	and    ebx,ecx
c0006a37:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a3a:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a45:	e8 2b d9 ff ff       	call   c0004375 <sync_fs>
c0006a4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4e:	83 ec 0c             	sub    esp,0xc
c0006a51:	56                   	push   esi
c0006a52:	e8 5e 18 00 00       	call   c00082b5 <ff_memfree>
c0006a57:	83 c4 10             	add    esp,0x10
c0006a5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5e:	83 c4 60             	add    esp,0x60
c0006a61:	5b                   	pop    ebx
c0006a62:	5e                   	pop    esi
c0006a63:	5f                   	pop    edi
c0006a64:	c3                   	ret    

c0006a65 <f_utime>:
c0006a65:	56                   	push   esi
c0006a66:	b9 02 00 00 00       	mov    ecx,0x2
c0006a6b:	53                   	push   ebx
c0006a6c:	83 ec 64             	sub    esp,0x64
c0006a6f:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a73:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a77:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a7b:	e8 7c ba ff ff       	call   c00024fc <mount_volume>
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 b5 00 00 00    	jne    c0006b3d <f_utime+0xd8>
c0006a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8c:	83 ec 0c             	sub    esp,0xc
c0006a8f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a93:	68 60 04 00 00       	push   0x460
c0006a98:	e8 02 18 00 00       	call   c000829f <ff_memalloc>
c0006a9d:	83 c4 10             	add    esp,0x10
c0006aa0:	89 c3                	mov    ebx,eax
c0006aa2:	b8 11 00 00 00       	mov    eax,0x11
c0006aa7:	85 db                	test   ebx,ebx
c0006aa9:	0f 84 8e 00 00 00    	je     c0006b3d <f_utime+0xd8>
c0006aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab3:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ab9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006abc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006abf:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ac3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac7:	e8 a6 e1 ff ff       	call   c0004c72 <follow_path>
c0006acc:	85 c0                	test   eax,eax
c0006ace:	75 59                	jne    c0006b29 <f_utime+0xc4>
c0006ad0:	b8 06 00 00 00       	mov    eax,0x6
c0006ad5:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ada:	75 4d                	jne    c0006b29 <f_utime+0xc4>
c0006adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ae0:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ae4:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ae8:	c1 e2 10             	shl    edx,0x10
c0006aeb:	09 ca                	or     edx,ecx
c0006aed:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af0:	75 1a                	jne    c0006b0c <f_utime+0xa7>
c0006af2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006af5:	83 c0 0c             	add    eax,0xc
c0006af8:	e8 e5 af ff ff       	call   c0001ae2 <st_dword>
c0006afd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b01:	e8 c4 ce ff ff       	call   c00039ca <store_xdir>
c0006b06:	85 c0                	test   eax,eax
c0006b08:	75 1f                	jne    c0006b29 <f_utime+0xc4>
c0006b0a:	eb 14                	jmp    c0006b20 <f_utime+0xbb>
c0006b0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b10:	83 c0 16             	add    eax,0x16
c0006b13:	e8 ca af ff ff       	call   c0001ae2 <st_dword>
c0006b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b24:	e8 4c d8 ff ff       	call   c0004375 <sync_fs>
c0006b29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b2d:	83 ec 0c             	sub    esp,0xc
c0006b30:	53                   	push   ebx
c0006b31:	e8 7f 17 00 00       	call   c00082b5 <ff_memfree>
c0006b36:	83 c4 10             	add    esp,0x10
c0006b39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b3d:	83 c4 64             	add    esp,0x64
c0006b40:	5b                   	pop    ebx
c0006b41:	5e                   	pop    esi
c0006b42:	c3                   	ret    

c0006b43 <f_getlabel>:
c0006b43:	55                   	push   ebp
c0006b44:	31 c9                	xor    ecx,ecx
c0006b46:	57                   	push   edi
c0006b47:	56                   	push   esi
c0006b48:	53                   	push   ebx
c0006b49:	83 ec 6c             	sub    esp,0x6c
c0006b4c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b50:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b57:	e8 a0 b9 ff ff       	call   c00024fc <mount_volume>
c0006b5c:	89 c6                	mov    esi,eax
c0006b5e:	85 c0                	test   eax,eax
c0006b60:	0f 85 c1 01 00 00    	jne    c0006d27 <f_getlabel+0x1e4>
c0006b66:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b6e:	0f 84 5f 01 00 00    	je     c0006cd3 <f_getlabel+0x190>
c0006b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b78:	31 d2                	xor    edx,edx
c0006b7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b7e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b8a:	e8 39 c4 ff ff       	call   c0002fc8 <dir_sdi>
c0006b8f:	85 c0                	test   eax,eax
c0006b91:	0f 85 2d 01 00 00    	jne    c0006cc4 <f_getlabel+0x181>
c0006b97:	ba 01 00 00 00       	mov    edx,0x1
c0006b9c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba0:	e8 33 cc ff ff       	call   c00037d8 <dir_read>
c0006ba5:	85 c0                	test   eax,eax
c0006ba7:	0f 85 17 01 00 00    	jne    c0006cc4 <f_getlabel+0x181>
c0006bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bb4:	74 09                	je     c0006bbf <f_getlabel+0x7c>
c0006bb6:	31 db                	xor    ebx,ebx
c0006bb8:	31 c9                	xor    ecx,ecx
c0006bba:	e9 c8 00 00 00       	jmp    c0006c87 <f_getlabel+0x144>
c0006bbf:	31 ed                	xor    ebp,ebp
c0006bc1:	31 db                	xor    ebx,ebx
c0006bc3:	31 ff                	xor    edi,edi
c0006bc5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bc9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bcd:	39 fa                	cmp    edx,edi
c0006bcf:	76 4b                	jbe    c0006c1c <f_getlabel+0xd9>
c0006bd1:	47                   	inc    edi
c0006bd2:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bd5:	01 d0                	add    eax,edx
c0006bd7:	e8 90 ae ff ff       	call   c0001a6c <ld_word>
c0006bdc:	66 85 ed             	test   bp,bp
c0006bdf:	75 0d                	jne    c0006bee <f_getlabel+0xab>
c0006be1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006be7:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bec:	76 28                	jbe    c0006c16 <f_getlabel+0xd3>
c0006bee:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bf5:	89 e9                	mov    ecx,ebp
c0006bf7:	01 da                	add    edx,ebx
c0006bf9:	c1 e1 10             	shl    ecx,0x10
c0006bfc:	0f b7 c0             	movzx  eax,ax
c0006bff:	09 c8                	or     eax,ecx
c0006c01:	b9 04 00 00 00       	mov    ecx,0x4
c0006c06:	e8 01 b0 ff ff       	call   c0001c0c <put_utf>
c0006c0b:	84 c0                	test   al,al
c0006c0d:	74 0b                	je     c0006c1a <f_getlabel+0xd7>
c0006c0f:	0f b6 c0             	movzx  eax,al
c0006c12:	01 c3                	add    ebx,eax
c0006c14:	31 c0                	xor    eax,eax
c0006c16:	89 c5                	mov    ebp,eax
c0006c18:	eb ab                	jmp    c0006bc5 <f_getlabel+0x82>
c0006c1a:	31 db                	xor    ebx,ebx
c0006c1c:	66 85 ed             	test   bp,bp
c0006c1f:	74 02                	je     c0006c23 <f_getlabel+0xe0>
c0006c21:	31 db                	xor    ebx,ebx
c0006c23:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c2a:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c2e:	e9 a0 00 00 00       	jmp    c0006cd3 <f_getlabel+0x190>
c0006c33:	83 ff 0b             	cmp    edi,0xb
c0006c36:	74 11                	je     c0006c49 <f_getlabel+0x106>
c0006c38:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c41:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c44:	c1 e0 08             	shl    eax,0x8
c0006c47:	09 c2                	or     edx,eax
c0006c49:	0f b7 d2             	movzx  edx,dx
c0006c4c:	50                   	push   eax
c0006c4d:	50                   	push   eax
c0006c4e:	68 b5 01 00 00       	push   0x1b5
c0006c53:	52                   	push   edx
c0006c54:	e8 03 17 00 00       	call   c000835c <ff_oem2uni>
c0006c59:	83 c4 10             	add    esp,0x10
c0006c5c:	66 85 c0             	test   ax,ax
c0006c5f:	74 46                	je     c0006ca7 <f_getlabel+0x164>
c0006c61:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c68:	0f b7 c0             	movzx  eax,ax
c0006c6b:	01 da                	add    edx,ebx
c0006c6d:	b9 04 00 00 00       	mov    ecx,0x4
c0006c72:	e8 95 af ff ff       	call   c0001c0c <put_utf>
c0006c77:	84 c0                	test   al,al
c0006c79:	74 2c                	je     c0006ca7 <f_getlabel+0x164>
c0006c7b:	0f b6 c0             	movzx  eax,al
c0006c7e:	01 c3                	add    ebx,eax
c0006c80:	83 ff 0b             	cmp    edi,0xb
c0006c83:	74 24                	je     c0006ca9 <f_getlabel+0x166>
c0006c85:	89 f9                	mov    ecx,edi
c0006c87:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c8b:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c8e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c93:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c9c:	e8 9f ae ff ff       	call   c0001b40 <dbc_1st>
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 a4                	je     c0006c49 <f_getlabel+0x106>
c0006ca5:	eb 8c                	jmp    c0006c33 <f_getlabel+0xf0>
c0006ca7:	31 db                	xor    ebx,ebx
c0006ca9:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006cb0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006cb3:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006cba:	74 17                	je     c0006cd3 <f_getlabel+0x190>
c0006cbc:	4b                   	dec    ebx
c0006cbd:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006cc0:	74 ee                	je     c0006cb0 <f_getlabel+0x16d>
c0006cc2:	eb 0f                	jmp    c0006cd3 <f_getlabel+0x190>
c0006cc4:	83 f8 04             	cmp    eax,0x4
c0006cc7:	75 5c                	jne    c0006d25 <f_getlabel+0x1e2>
c0006cc9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cd0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cd3:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cdb:	74 4a                	je     c0006d27 <f_getlabel+0x1e4>
c0006cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ce1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ce4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ce7:	e8 5e b5 ff ff       	call   c000224a <move_window>
c0006cec:	89 c6                	mov    esi,eax
c0006cee:	85 c0                	test   eax,eax
c0006cf0:	75 35                	jne    c0006d27 <f_getlabel+0x1e4>
c0006cf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cf6:	b8 43 00 00 00       	mov    eax,0x43
c0006cfb:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cfd:	80 f9 03             	cmp    cl,0x3
c0006d00:	74 0f                	je     c0006d11 <f_getlabel+0x1ce>
c0006d02:	31 c0                	xor    eax,eax
c0006d04:	80 f9 04             	cmp    cl,0x4
c0006d07:	0f 94 c0             	sete   al
c0006d0a:	48                   	dec    eax
c0006d0b:	83 e0 c3             	and    eax,0xffffffc3
c0006d0e:	83 c0 64             	add    eax,0x64
c0006d11:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006d15:	e8 5f ad ff ff       	call   c0001a79 <ld_dword>
c0006d1a:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d21:	89 07                	mov    DWORD PTR [edi],eax
c0006d23:	eb 02                	jmp    c0006d27 <f_getlabel+0x1e4>
c0006d25:	89 c6                	mov    esi,eax
c0006d27:	83 c4 6c             	add    esp,0x6c
c0006d2a:	89 f0                	mov    eax,esi
c0006d2c:	5b                   	pop    ebx
c0006d2d:	5e                   	pop    esi
c0006d2e:	5f                   	pop    edi
c0006d2f:	5d                   	pop    ebp
c0006d30:	c3                   	ret    

c0006d31 <f_setlabel>:
c0006d31:	56                   	push   esi
c0006d32:	b9 02 00 00 00       	mov    ecx,0x2
c0006d37:	53                   	push   ebx
c0006d38:	83 ec 74             	sub    esp,0x74
c0006d3b:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d46:	e8 b1 b7 ff ff       	call   c00024fc <mount_volume>
c0006d4b:	89 c6                	mov    esi,eax
c0006d4d:	85 c0                	test   eax,eax
c0006d4f:	0f 85 41 02 00 00    	jne    c0006f96 <f_setlabel+0x265>
c0006d55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d59:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d5c:	0f 85 8e 00 00 00    	jne    c0006df0 <f_setlabel+0xbf>
c0006d62:	b9 16 00 00 00       	mov    ecx,0x16
c0006d67:	31 d2                	xor    edx,edx
c0006d69:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d6d:	31 db                	xor    ebx,ebx
c0006d6f:	e8 8c ad ff ff       	call   c0001b00 <mem_set>
c0006d74:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d7b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d7e:	0f 86 0a 01 00 00    	jbe    c0006e8e <f_setlabel+0x15d>
c0006d84:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d8b:	e8 b6 ad ff ff       	call   c0001b46 <tchar2uni>
c0006d90:	89 c6                	mov    esi,eax
c0006d92:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d97:	76 2a                	jbe    c0006dc3 <f_setlabel+0x92>
c0006d99:	83 f8 ff             	cmp    eax,0xffffffff
c0006d9c:	74 05                	je     c0006da3 <f_setlabel+0x72>
c0006d9e:	83 fb 09             	cmp    ebx,0x9
c0006da1:	76 0a                	jbe    c0006dad <f_setlabel+0x7c>
c0006da3:	be 06 00 00 00       	mov    esi,0x6
c0006da8:	e9 e9 01 00 00       	jmp    c0006f96 <f_setlabel+0x265>
c0006dad:	89 c2                	mov    edx,eax
c0006daf:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006db3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006db6:	c1 ea 10             	shr    edx,0x10
c0006db9:	01 c8                	add    eax,ecx
c0006dbb:	43                   	inc    ebx
c0006dbc:	e8 1d ad ff ff       	call   c0001ade <st_word>
c0006dc1:	eb 04                	jmp    c0006dc7 <f_setlabel+0x96>
c0006dc3:	85 c0                	test   eax,eax
c0006dc5:	74 dc                	je     c0006da3 <f_setlabel+0x72>
c0006dc7:	89 f2                	mov    edx,esi
c0006dc9:	b8 b7 5c 02 c0       	mov    eax,0xc0025cb7
c0006dce:	e8 5b ad ff ff       	call   c0001b2e <chk_chr>
c0006dd3:	85 c0                	test   eax,eax
c0006dd5:	75 cc                	jne    c0006da3 <f_setlabel+0x72>
c0006dd7:	83 fb 0a             	cmp    ebx,0xa
c0006dda:	77 c7                	ja     c0006da3 <f_setlabel+0x72>
c0006ddc:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ddf:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006de3:	0f b7 d6             	movzx  edx,si
c0006de6:	01 c8                	add    eax,ecx
c0006de8:	43                   	inc    ebx
c0006de9:	e8 f0 ac ff ff       	call   c0001ade <st_word>
c0006dee:	eb 84                	jmp    c0006d74 <f_setlabel+0x43>
c0006df0:	b9 0b 00 00 00       	mov    ecx,0xb
c0006df5:	ba 20 00 00 00       	mov    edx,0x20
c0006dfa:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006dfe:	31 db                	xor    ebx,ebx
c0006e00:	e8 fb ac ff ff       	call   c0001b00 <mem_set>
c0006e05:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e0c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e0f:	76 60                	jbe    c0006e71 <f_setlabel+0x140>
c0006e11:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e18:	e8 29 ad ff ff       	call   c0001b46 <tchar2uni>
c0006e1d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e22:	0f 87 7b ff ff ff    	ja     c0006da3 <f_setlabel+0x72>
c0006e28:	83 ec 0c             	sub    esp,0xc
c0006e2b:	50                   	push   eax
c0006e2c:	e8 97 15 00 00       	call   c00083c8 <ff_wtoupper>
c0006e31:	5a                   	pop    edx
c0006e32:	59                   	pop    ecx
c0006e33:	68 b5 01 00 00       	push   0x1b5
c0006e38:	50                   	push   eax
c0006e39:	e8 8e 14 00 00       	call   c00082cc <ff_uni2oem>
c0006e3e:	83 c4 10             	add    esp,0x10
c0006e41:	89 c6                	mov    esi,eax
c0006e43:	66 85 c0             	test   ax,ax
c0006e46:	0f 84 57 ff ff ff    	je     c0006da3 <f_setlabel+0x72>
c0006e4c:	0f b7 d0             	movzx  edx,ax
c0006e4f:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0006e54:	e8 d5 ac ff ff       	call   c0001b2e <chk_chr>
c0006e59:	85 c0                	test   eax,eax
c0006e5b:	0f 85 42 ff ff ff    	jne    c0006da3 <f_setlabel+0x72>
c0006e61:	66 81 fe ff 00       	cmp    si,0xff
c0006e66:	0f 87 14 01 00 00    	ja     c0006f80 <f_setlabel+0x24f>
c0006e6c:	e9 fa 00 00 00       	jmp    c0006f6b <f_setlabel+0x23a>
c0006e71:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e76:	0f 84 27 ff ff ff    	je     c0006da3 <f_setlabel+0x72>
c0006e7c:	85 db                	test   ebx,ebx
c0006e7e:	74 0e                	je     c0006e8e <f_setlabel+0x15d>
c0006e80:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e83:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e88:	75 04                	jne    c0006e8e <f_setlabel+0x15d>
c0006e8a:	89 c3                	mov    ebx,eax
c0006e8c:	eb ee                	jmp    c0006e7c <f_setlabel+0x14b>
c0006e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e92:	31 d2                	xor    edx,edx
c0006e94:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e98:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006ea0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea4:	e8 1f c1 ff ff       	call   c0002fc8 <dir_sdi>
c0006ea9:	89 c6                	mov    esi,eax
c0006eab:	85 c0                	test   eax,eax
c0006ead:	0f 85 e3 00 00 00    	jne    c0006f96 <f_setlabel+0x265>
c0006eb3:	ba 01 00 00 00       	mov    edx,0x1
c0006eb8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ebc:	e8 17 c9 ff ff       	call   c00037d8 <dir_read>
c0006ec1:	85 c0                	test   eax,eax
c0006ec3:	75 21                	jne    c0006ee6 <f_setlabel+0x1b5>
c0006ec5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecd:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ed0:	74 5d                	je     c0006f2f <f_setlabel+0x1fe>
c0006ed2:	85 db                	test   ebx,ebx
c0006ed4:	74 0b                	je     c0006ee1 <f_setlabel+0x1b0>
c0006ed6:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edb:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006edf:	eb 70                	jmp    c0006f51 <f_setlabel+0x220>
c0006ee1:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ee4:	eb 70                	jmp    c0006f56 <f_setlabel+0x225>
c0006ee6:	83 f8 04             	cmp    eax,0x4
c0006ee9:	75 7c                	jne    c0006f67 <f_setlabel+0x236>
c0006eeb:	85 db                	test   ebx,ebx
c0006eed:	0f 84 a3 00 00 00    	je     c0006f96 <f_setlabel+0x265>
c0006ef3:	ba 01 00 00 00       	mov    edx,0x1
c0006ef8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006efc:	e8 51 ca ff ff       	call   c0003952 <dir_alloc>
c0006f01:	89 c6                	mov    esi,eax
c0006f03:	85 c0                	test   eax,eax
c0006f05:	0f 85 8b 00 00 00    	jne    c0006f96 <f_setlabel+0x265>
c0006f0b:	31 d2                	xor    edx,edx
c0006f0d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f11:	b9 20 00 00 00       	mov    ecx,0x20
c0006f16:	e8 e5 ab ff ff       	call   c0001b00 <mem_set>
c0006f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f1f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f22:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f26:	75 18                	jne    c0006f40 <f_setlabel+0x20f>
c0006f28:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f32:	b9 16 00 00 00       	mov    ecx,0x16
c0006f37:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f3b:	83 c0 02             	add    eax,0x2
c0006f3e:	eb 9b                	jmp    c0006edb <f_setlabel+0x1aa>
c0006f40:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f44:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f49:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f51:	e8 95 ab ff ff       	call   c0001aeb <mem_cpy>
c0006f56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f62:	e8 0e d4 ff ff       	call   c0004375 <sync_fs>
c0006f67:	89 c6                	mov    esi,eax
c0006f69:	eb 2b                	jmp    c0006f96 <f_setlabel+0x265>
c0006f6b:	83 fb 0a             	cmp    ebx,0xa
c0006f6e:	0f 87 2f fe ff ff    	ja     c0006da3 <f_setlabel+0x72>
c0006f74:	89 f0                	mov    eax,esi
c0006f76:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f7a:	43                   	inc    ebx
c0006f7b:	e9 85 fe ff ff       	jmp    c0006e05 <f_setlabel+0xd4>
c0006f80:	83 fb 09             	cmp    ebx,0x9
c0006f83:	0f 87 1a fe ff ff    	ja     c0006da3 <f_setlabel+0x72>
c0006f89:	89 f0                	mov    eax,esi
c0006f8b:	66 c1 e8 08          	shr    ax,0x8
c0006f8f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f93:	43                   	inc    ebx
c0006f94:	eb de                	jmp    c0006f74 <f_setlabel+0x243>
c0006f96:	89 f0                	mov    eax,esi
c0006f98:	83 c4 74             	add    esp,0x74
c0006f9b:	5b                   	pop    ebx
c0006f9c:	5e                   	pop    esi
c0006f9d:	c3                   	ret    

c0006f9e <f_forward>:
c0006f9e:	55                   	push   ebp
c0006f9f:	57                   	push   edi
c0006fa0:	56                   	push   esi
c0006fa1:	53                   	push   ebx
c0006fa2:	83 ec 2c             	sub    esp,0x2c
c0006fa5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006fa9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006fad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006fb3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006fb7:	89 d8                	mov    eax,ebx
c0006fb9:	e8 b1 b1 ff ff       	call   c000216f <validate>
c0006fbe:	89 c5                	mov    ebp,eax
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	0f 85 aa 01 00 00    	jne    c0007172 <f_forward+0x1d4>
c0006fc8:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fcc:	85 ed                	test   ebp,ebp
c0006fce:	0f 85 9e 01 00 00    	jne    c0007172 <f_forward+0x1d4>
c0006fd4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fd8:	0f 84 8f 01 00 00    	je     c000716d <f_forward+0x1cf>
c0006fde:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fe1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fe4:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fe7:	bf 00 00 00 00       	mov    edi,0x0
c0006fec:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fef:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006ff3:	89 d1                	mov    ecx,edx
c0006ff5:	19 f9                	sbb    ecx,edi
c0006ff7:	0f 83 cf 00 00 00    	jae    c00070cc <f_forward+0x12e>
c0006ffd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007001:	e9 c6 00 00 00       	jmp    c00070cc <f_forward+0x12e>
c0007006:	50                   	push   eax
c0007007:	50                   	push   eax
c0007008:	6a 00                	push   0x0
c000700a:	6a 00                	push   0x0
c000700c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007010:	83 c4 10             	add    esp,0x10
c0007013:	85 c0                	test   eax,eax
c0007015:	0f 84 57 01 00 00    	je     c0007172 <f_forward+0x1d4>
c000701b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007022:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007025:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007029:	89 d7                	mov    edi,edx
c000702b:	8d 4e ff             	lea    ecx,[esi-0x1]
c000702e:	89 c6                	mov    esi,eax
c0007030:	0f ac fe 09          	shrd   esi,edi,0x9
c0007034:	21 ce                	and    esi,ecx
c0007036:	89 c1                	mov    ecx,eax
c0007038:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000703e:	0f 84 98 00 00 00    	je     c00070dc <f_forward+0x13e>
c0007044:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007048:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000704b:	89 c8                	mov    eax,ecx
c000704d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007051:	e8 af ac ff ff       	call   c0001d05 <clst2sect>
c0007056:	89 d7                	mov    edi,edx
c0007058:	09 c7                	or     edi,eax
c000705a:	0f 84 9e 00 00 00    	je     c00070fe <f_forward+0x160>
c0007060:	31 ff                	xor    edi,edi
c0007062:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007065:	01 c6                	add    esi,eax
c0007067:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000706b:	11 d7                	adc    edi,edx
c000706d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007070:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007073:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007077:	39 fa                	cmp    edx,edi
c0007079:	0f 85 a2 00 00 00    	jne    c0007121 <f_forward+0x183>
c000707f:	39 f0                	cmp    eax,esi
c0007081:	0f 85 9a 00 00 00    	jne    c0007121 <f_forward+0x183>
c0007087:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000708a:	ba 00 02 00 00       	mov    edx,0x200
c000708f:	25 ff 01 00 00       	and    eax,0x1ff
c0007094:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007098:	29 c2                	sub    edx,eax
c000709a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000709d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00070a0:	39 d1                	cmp    ecx,edx
c00070a2:	76 02                	jbe    c00070a6 <f_forward+0x108>
c00070a4:	89 d1                	mov    ecx,edx
c00070a6:	8d 73 50             	lea    esi,[ebx+0x50]
c00070a9:	52                   	push   edx
c00070aa:	01 c6                	add    esi,eax
c00070ac:	52                   	push   edx
c00070ad:	51                   	push   ecx
c00070ae:	56                   	push   esi
c00070af:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00070b3:	83 c4 10             	add    esp,0x10
c00070b6:	85 c0                	test   eax,eax
c00070b8:	74 44                	je     c00070fe <f_forward+0x160>
c00070ba:	31 ff                	xor    edi,edi
c00070bc:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00070bf:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070c2:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070c6:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070ca:	01 07                	add    DWORD PTR [edi],eax
c00070cc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070d1:	0f 85 2f ff ff ff    	jne    c0007006 <f_forward+0x68>
c00070d7:	e9 96 00 00 00       	jmp    c0007172 <f_forward+0x1d4>
c00070dc:	85 f6                	test   esi,esi
c00070de:	0f 85 60 ff ff ff    	jne    c0007044 <f_forward+0xa6>
c00070e4:	89 d7                	mov    edi,edx
c00070e6:	09 c7                	or     edi,eax
c00070e8:	75 05                	jne    c00070ef <f_forward+0x151>
c00070ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070ed:	eb 0a                	jmp    c00070f9 <f_forward+0x15b>
c00070ef:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070f2:	89 d8                	mov    eax,ebx
c00070f4:	e8 d9 bc ff ff       	call   c0002dd2 <get_fat>
c00070f9:	83 f8 01             	cmp    eax,0x1
c00070fc:	77 0b                	ja     c0007109 <f_forward+0x16b>
c00070fe:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007102:	bd 02 00 00 00       	mov    ebp,0x2
c0007107:	eb 69                	jmp    c0007172 <f_forward+0x1d4>
c0007109:	83 f8 ff             	cmp    eax,0xffffffff
c000710c:	75 0b                	jne    c0007119 <f_forward+0x17b>
c000710e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007112:	bd 01 00 00 00       	mov    ebp,0x1
c0007117:	eb 59                	jmp    c0007172 <f_forward+0x1d4>
c0007119:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000711c:	e9 23 ff ff ff       	jmp    c0007044 <f_forward+0xa6>
c0007121:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007125:	79 20                	jns    c0007147 <f_forward+0x1a9>
c0007127:	83 ec 0c             	sub    esp,0xc
c000712a:	6a 01                	push   0x1
c000712c:	52                   	push   edx
c000712d:	50                   	push   eax
c000712e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007132:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007136:	50                   	push   eax
c0007137:	e8 fb a8 ff ff       	call   c0001a37 <disk_write>
c000713c:	83 c4 20             	add    esp,0x20
c000713f:	85 c0                	test   eax,eax
c0007141:	75 cb                	jne    c000710e <f_forward+0x170>
c0007143:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007147:	83 ec 0c             	sub    esp,0xc
c000714a:	6a 01                	push   0x1
c000714c:	57                   	push   edi
c000714d:	56                   	push   esi
c000714e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007152:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007156:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000715a:	50                   	push   eax
c000715b:	e8 c1 a8 ff ff       	call   c0001a21 <disk_read>
c0007160:	83 c4 20             	add    esp,0x20
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 1c ff ff ff    	je     c0007087 <f_forward+0xe9>
c000716b:	eb a1                	jmp    c000710e <f_forward+0x170>
c000716d:	bd 07 00 00 00       	mov    ebp,0x7
c0007172:	83 c4 2c             	add    esp,0x2c
c0007175:	89 e8                	mov    eax,ebp
c0007177:	5b                   	pop    ebx
c0007178:	5e                   	pop    esi
c0007179:	5f                   	pop    edi
c000717a:	5d                   	pop    ebp
c000717b:	c3                   	ret    

c000717c <f_mkfs>:
c000717c:	55                   	push   ebp
c000717d:	57                   	push   edi
c000717e:	56                   	push   esi
c000717f:	53                   	push   ebx
c0007180:	bb 0b 00 00 00       	mov    ebx,0xb
c0007185:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000718b:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007192:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007199:	e8 b0 ae ff ff       	call   c000204e <get_ldnumber>
c000719e:	85 c0                	test   eax,eax
c00071a0:	0f 88 ec 10 00 00    	js     c0008292 <f_mkfs+0x1116>
c00071a6:	8b 14 85 80 a4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5b80]
c00071ad:	85 d2                	test   edx,edx
c00071af:	74 03                	je     c00071b4 <f_mkfs+0x38>
c00071b1:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00071b4:	85 f6                	test   esi,esi
c00071b6:	75 05                	jne    c00071bd <f_mkfs+0x41>
c00071b8:	be a0 5c 02 c0       	mov    esi,0xc0025ca0
c00071bd:	83 ec 0c             	sub    esp,0xc
c00071c0:	0f b6 c0             	movzx  eax,al
c00071c3:	bb 03 00 00 00       	mov    ebx,0x3
c00071c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d0:	e8 49 a8 ff ff       	call   c0001a1e <disk_initialize>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	a8 01                	test   al,0x1
c00071da:	0f 85 b2 10 00 00    	jne    c0008292 <f_mkfs+0x1116>
c00071e0:	bb 0a 00 00 00       	mov    ebx,0xa
c00071e5:	a8 04                	test   al,0x4
c00071e7:	0f 85 a5 10 00 00    	jne    c0008292 <f_mkfs+0x1116>
c00071ed:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071f0:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071f4:	85 c0                	test   eax,eax
c00071f6:	75 20                	jne    c0007218 <f_mkfs+0x9c>
c00071f8:	51                   	push   ecx
c00071f9:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071fd:	50                   	push   eax
c00071fe:	6a 03                	push   0x3
c0007200:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007204:	e8 44 a8 ff ff       	call   c0001a4d <disk_ioctl>
c0007209:	83 c4 10             	add    esp,0x10
c000720c:	85 c0                	test   eax,eax
c000720e:	74 08                	je     c0007218 <f_mkfs+0x9c>
c0007210:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007218:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000721c:	8d 42 ff             	lea    eax,[edx-0x1]
c000721f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007224:	77 04                	ja     c000722a <f_mkfs+0xae>
c0007226:	85 c2                	test   edx,eax
c0007228:	74 08                	je     c0007232 <f_mkfs+0xb6>
c000722a:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007232:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007235:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007239:	48                   	dec    eax
c000723a:	3c 01                	cmp    al,0x1
c000723c:	76 05                	jbe    c0007243 <f_mkfs+0xc7>
c000723e:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007243:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007246:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000724a:	48                   	dec    eax
c000724b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007250:	77 07                	ja     c0007259 <f_mkfs+0xdd>
c0007252:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007257:	74 08                	je     c0007261 <f_mkfs+0xe5>
c0007259:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007261:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007264:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000726a:	77 07                	ja     c0007273 <f_mkfs+0xf7>
c000726c:	8d 43 ff             	lea    eax,[ebx-0x1]
c000726f:	85 d8                	test   eax,ebx
c0007271:	74 02                	je     c0007275 <f_mkfs+0xf9>
c0007273:	31 db                	xor    ebx,ebx
c0007275:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007280:	77 0a                	ja     c000728c <f_mkfs+0x110>
c0007282:	bb 11 00 00 00       	mov    ebx,0x11
c0007287:	e9 06 10 00 00       	jmp    c0008292 <f_mkfs+0x1116>
c000728c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007293:	8b 36                	mov    esi,DWORD PTR [esi]
c0007295:	85 ed                	test   ebp,ebp
c0007297:	75 1e                	jne    c00072b7 <f_mkfs+0x13b>
c0007299:	83 ec 0c             	sub    esp,0xc
c000729c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00072a3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00072a8:	50                   	push   eax
c00072a9:	e8 f1 0f 00 00       	call   c000829f <ff_memalloc>
c00072ae:	83 c4 10             	add    esp,0x10
c00072b1:	89 c5                	mov    ebp,eax
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 cb                	je     c0007282 <f_mkfs+0x106>
c00072b7:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00072bf:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072c7:	52                   	push   edx
c00072c8:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072cc:	50                   	push   eax
c00072cd:	6a 01                	push   0x1
c00072cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072d3:	e8 75 a7 ff ff       	call   c0001a4d <disk_ioctl>
c00072d8:	83 c4 10             	add    esp,0x10
c00072db:	85 c0                	test   eax,eax
c00072dd:	0f 85 4a 0f 00 00    	jne    c000822d <f_mkfs+0x10b1>
c00072e3:	89 f1                	mov    ecx,esi
c00072e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072ed:	83 e1 0f             	and    ecx,0xf
c00072f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072f8:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072fc:	83 e6 08             	and    esi,0x8
c00072ff:	75 56                	jne    c0007357 <f_mkfs+0x1db>
c0007301:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007305:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007309:	83 ff 00             	cmp    edi,0x0
c000730c:	76 20                	jbe    c000732e <f_mkfs+0x1b2>
c000730e:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007313:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000731b:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007321:	83 d7 ff             	adc    edi,0xffffffff
c0007324:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007328:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732c:	eb 21                	jmp    c000734f <f_mkfs+0x1d3>
c000732e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007333:	39 f2                	cmp    edx,esi
c0007335:	19 f8                	sbb    eax,edi
c0007337:	73 1e                	jae    c0007357 <f_mkfs+0x1db>
c0007339:	83 c6 c1             	add    esi,0xffffffc1
c000733c:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007344:	83 d7 ff             	adc    edi,0xffffffff
c0007347:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000734b:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000734f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007357:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000735b:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000735f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007362:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007366:	31 c0                	xor    eax,eax
c0007368:	ba 7f 00 00 00       	mov    edx,0x7f
c000736d:	89 c7                	mov    edi,eax
c000736f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007372:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007376:	0f 83 c5 0a 00 00    	jae    c0007e41 <f_mkfs+0xcc5>
c000737c:	89 df                	mov    edi,ebx
c000737e:	c1 ef 09             	shr    edi,0x9
c0007381:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007385:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000738c:	c1 ef 09             	shr    edi,0x9
c000738f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007394:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007398:	74 29                	je     c00073c3 <f_mkfs+0x247>
c000739a:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073a0:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00073a5:	0f 97 c2             	seta   dl
c00073a8:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00073ab:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073af:	0f 92 c0             	setb   al
c00073b2:	08 c2                	or     dl,al
c00073b4:	75 5b                	jne    c0007411 <f_mkfs+0x295>
c00073b6:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073ba:	83 e0 07             	and    eax,0x7
c00073bd:	3c 04                	cmp    al,0x4
c00073bf:	74 50                	je     c0007411 <f_mkfs+0x295>
c00073c1:	eb 1b                	jmp    c00073de <f_mkfs+0x262>
c00073c3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073c8:	0f 87 73 0a 00 00    	ja     c0007e41 <f_mkfs+0xcc5>
c00073ce:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073d4:	76 08                	jbe    c00073de <f_mkfs+0x262>
c00073d6:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073de:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073e2:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073e6:	83 e0 01             	and    eax,0x1
c00073e9:	80 e1 02             	and    cl,0x2
c00073ec:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073f0:	74 0d                	je     c00073ff <f_mkfs+0x283>
c00073f2:	84 c0                	test   al,al
c00073f4:	0f 84 53 09 00 00    	je     c0007d4d <f_mkfs+0xbd1>
c00073fa:	e9 12 08 00 00       	jmp    c0007c11 <f_mkfs+0xa95>
c00073ff:	bb 13 00 00 00       	mov    ebx,0x13
c0007404:	84 c0                	test   al,al
c0007406:	0f 85 05 08 00 00    	jne    c0007c11 <f_mkfs+0xa95>
c000740c:	e9 39 0e 00 00       	jmp    c000824a <f_mkfs+0x10ce>
c0007411:	31 c0                	xor    eax,eax
c0007413:	ba ff 0f 00 00       	mov    edx,0xfff
c0007418:	89 c7                	mov    edi,eax
c000741a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007421:	0f 83 1a 0a 00 00    	jae    c0007e41 <f_mkfs+0xcc5>
c0007427:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000742d:	77 39                	ja     c0007468 <f_mkfs+0x2ec>
c000742f:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007434:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000743c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000743f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007443:	73 08                	jae    c000744d <f_mkfs+0x2d1>
c0007445:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000744d:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007452:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007455:	b8 00 00 00 00       	mov    eax,0x0
c000745a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000745e:	73 08                	jae    c0007468 <f_mkfs+0x2ec>
c0007460:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000746c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007470:	83 c0 20             	add    eax,0x20
c0007473:	83 d2 00             	adc    edx,0x0
c0007476:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000747a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000747e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007482:	31 d2                	xor    edx,edx
c0007484:	31 ff                	xor    edi,edi
c0007486:	52                   	push   edx
c0007487:	89 fb                	mov    ebx,edi
c0007489:	50                   	push   eax
c000748a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000748e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007492:	e8 39 be 01 00       	call   c00232d0 <__udivdi3>
c0007497:	83 c4 10             	add    esp,0x10
c000749a:	c1 e0 02             	shl    eax,0x2
c000749d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00074a1:	05 07 02 00 00       	add    eax,0x207
c00074a6:	89 f1                	mov    ecx,esi
c00074a8:	c1 e8 09             	shr    eax,0x9
c00074ab:	83 c1 ff             	add    ecx,0xffffffff
c00074ae:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00074b2:	83 d3 ff             	adc    ebx,0xffffffff
c00074b5:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00074b9:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00074bd:	31 d2                	xor    edx,edx
c00074bf:	01 c8                	add    eax,ecx
c00074c1:	11 da                	adc    edx,ebx
c00074c3:	89 c1                	mov    ecx,eax
c00074c5:	f7 de                	neg    esi
c00074c7:	89 d0                	mov    eax,edx
c00074c9:	83 d7 00             	adc    edi,0x0
c00074cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074d0:	f7 df                	neg    edi
c00074d2:	21 f1                	and    ecx,esi
c00074d4:	21 f8                	and    eax,edi
c00074d6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074e6:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074ea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ed:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074f1:	0f ac d0 01          	shrd   eax,edx,0x1
c00074f5:	89 df                	mov    edi,ebx
c00074f7:	d1 ea                	shr    edx,1
c00074f9:	39 c1                	cmp    ecx,eax
c00074fb:	19 d7                	sbb    edi,edx
c00074fd:	0f 83 3e 09 00 00    	jae    c0007e41 <f_mkfs+0xcc5>
c0007503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007507:	31 d2                	xor    edx,edx
c0007509:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000750d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007511:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007515:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007518:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000751c:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007520:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007524:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007528:	83 f8 0f             	cmp    eax,0xf
c000752b:	0f 86 10 09 00 00    	jbe    c0007e41 <f_mkfs+0xcc5>
c0007531:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007539:	0f 87 02 09 00 00    	ja     c0007e41 <f_mkfs+0xcc5>
c000753f:	31 d2                	xor    edx,edx
c0007541:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007545:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000754d:	83 c0 07             	add    eax,0x7
c0007550:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007558:	c1 e8 03             	shr    eax,0x3
c000755b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007562:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007566:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000756a:	c1 e0 09             	shl    eax,0x9
c000756d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007571:	48                   	dec    eax
c0007572:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007576:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000757a:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000757e:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007582:	31 d2                	xor    edx,edx
c0007584:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007588:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000758f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007593:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007598:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000759c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00075a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00075a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00075a8:	31 ff                	xor    edi,edi
c00075aa:	31 f6                	xor    esi,esi
c00075ac:	31 db                	xor    ebx,ebx
c00075ae:	85 ff                	test   edi,edi
c00075b0:	74 05                	je     c00075b7 <f_mkfs+0x43b>
c00075b2:	4f                   	dec    edi
c00075b3:	74 44                	je     c00075f9 <f_mkfs+0x47d>
c00075b5:	eb 4f                	jmp    c0007606 <f_mkfs+0x48a>
c00075b7:	83 ec 0c             	sub    esp,0xc
c00075ba:	0f b7 c3             	movzx  eax,bx
c00075bd:	50                   	push   eax
c00075be:	e8 05 0e 00 00       	call   c00083c8 <ff_wtoupper>
c00075c3:	83 c4 10             	add    esp,0x10
c00075c6:	89 c1                	mov    ecx,eax
c00075c8:	8d 53 01             	lea    edx,[ebx+0x1]
c00075cb:	66 39 c3             	cmp    bx,ax
c00075ce:	75 3e                	jne    c000760e <f_mkfs+0x492>
c00075d0:	be 01 00 00 00       	mov    esi,0x1
c00075d5:	89 df                	mov    edi,ebx
c00075d7:	66 01 f7             	add    di,si
c00075da:	75 07                	jne    c00075e3 <f_mkfs+0x467>
c00075dc:	83 fe 7f             	cmp    esi,0x7f
c00075df:	77 31                	ja     c0007612 <f_mkfs+0x496>
c00075e1:	eb 16                	jmp    c00075f9 <f_mkfs+0x47d>
c00075e3:	83 ec 0c             	sub    esp,0xc
c00075e6:	0f b7 ff             	movzx  edi,di
c00075e9:	57                   	push   edi
c00075ea:	e8 d9 0d 00 00       	call   c00083c8 <ff_wtoupper>
c00075ef:	83 c4 10             	add    esp,0x10
c00075f2:	39 c7                	cmp    edi,eax
c00075f4:	75 e6                	jne    c00075dc <f_mkfs+0x460>
c00075f6:	46                   	inc    esi
c00075f7:	eb dc                	jmp    c00075d5 <f_mkfs+0x459>
c00075f9:	31 c0                	xor    eax,eax
c00075fb:	89 d9                	mov    ecx,ebx
c00075fd:	4e                   	dec    esi
c00075fe:	0f 95 c0             	setne  al
c0007601:	43                   	inc    ebx
c0007602:	89 c7                	mov    edi,eax
c0007604:	eb 14                	jmp    c000761a <f_mkfs+0x49e>
c0007606:	89 f1                	mov    ecx,esi
c0007608:	01 f3                	add    ebx,esi
c000760a:	31 ff                	xor    edi,edi
c000760c:	eb 0c                	jmp    c000761a <f_mkfs+0x49e>
c000760e:	89 d3                	mov    ebx,edx
c0007610:	eb 08                	jmp    c000761a <f_mkfs+0x49e>
c0007612:	bf 02 00 00 00       	mov    edi,0x2
c0007617:	83 c9 ff             	or     ecx,0xffffffff
c000761a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000761e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007621:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007625:	0f b6 c1             	movzx  eax,cl
c0007628:	e8 3a a9 ff ff       	call   c0001f67 <xsum32>
c000762d:	66 c1 e9 08          	shr    cx,0x8
c0007631:	89 c2                	mov    edx,eax
c0007633:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007636:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000763a:	0f b7 c1             	movzx  eax,cx
c000763d:	e8 25 a9 ff ff       	call   c0001f67 <xsum32>
c0007642:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007647:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000764b:	66 85 db             	test   bx,bx
c000764e:	74 1f                	je     c000766f <f_mkfs+0x4f3>
c0007650:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007653:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000765a:	83 c0 02             	add    eax,0x2
c000765d:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007663:	39 c2                	cmp    edx,eax
c0007665:	74 08                	je     c000766f <f_mkfs+0x4f3>
c0007667:	89 04 24             	mov    DWORD PTR [esp],eax
c000766a:	e9 3f ff ff ff       	jmp    c00075ae <f_mkfs+0x432>
c000766f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007672:	83 ec 0c             	sub    esp,0xc
c0007675:	05 01 02 00 00       	add    eax,0x201
c000767a:	c1 e8 09             	shr    eax,0x9
c000767d:	50                   	push   eax
c000767e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007686:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000768a:	55                   	push   ebp
c000768b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000768f:	e8 a3 a3 ff ff       	call   c0001a37 <disk_write>
c0007694:	83 c4 20             	add    esp,0x20
c0007697:	85 c0                	test   eax,eax
c0007699:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000769c:	0f 85 8b 0b 00 00    	jne    c000822d <f_mkfs+0x10b1>
c00076a2:	89 d0                	mov    eax,edx
c00076a4:	31 d2                	xor    edx,edx
c00076a6:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00076aa:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00076ae:	66 85 db             	test   bx,bx
c00076b1:	74 04                	je     c00076b7 <f_mkfs+0x53b>
c00076b3:	31 c0                	xor    eax,eax
c00076b5:	eb b0                	jmp    c0007667 <f_mkfs+0x4eb>
c00076b7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00076bb:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00076bf:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076c3:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076c9:	31 d2                	xor    edx,edx
c00076cb:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076d6:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076da:	c1 eb 09             	shr    ebx,0x9
c00076dd:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076e8:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076f0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076f4:	8d 70 01             	lea    esi,[eax+0x1]
c00076f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ff:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007706:	31 d2                	xor    edx,edx
c0007708:	25 00 fe ff ff       	and    eax,0xfffffe00
c000770d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007710:	89 c1                	mov    ecx,eax
c0007712:	89 e8                	mov    eax,ebp
c0007714:	e8 e7 a3 ff ff       	call   c0001b00 <mem_set>
c0007719:	31 c0                	xor    eax,eax
c000771b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771e:	76 10                	jbe    c0007730 <f_mkfs+0x5b4>
c0007720:	83 fe 07             	cmp    esi,0x7
c0007723:	76 0b                	jbe    c0007730 <f_mkfs+0x5b4>
c0007725:	40                   	inc    eax
c0007726:	83 ee 08             	sub    esi,0x8
c0007729:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000772e:	eb eb                	jmp    c000771b <f_mkfs+0x59f>
c0007730:	b2 01                	mov    dl,0x1
c0007732:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007736:	85 f6                	test   esi,esi
c0007738:	74 0c                	je     c0007746 <f_mkfs+0x5ca>
c000773a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000773d:	76 07                	jbe    c0007746 <f_mkfs+0x5ca>
c000773f:	08 11                	or     BYTE PTR [ecx],dl
c0007741:	4e                   	dec    esi
c0007742:	d1 e2                	shl    edx,1
c0007744:	eb f0                	jmp    c0007736 <f_mkfs+0x5ba>
c0007746:	89 df                	mov    edi,ebx
c0007748:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000774c:	76 04                	jbe    c0007752 <f_mkfs+0x5d6>
c000774e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007752:	83 ec 0c             	sub    esp,0xc
c0007755:	57                   	push   edi
c0007756:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000775a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000775e:	55                   	push   ebp
c000775f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007763:	e8 cf a2 ff ff       	call   c0001a37 <disk_write>
c0007768:	83 c4 20             	add    esp,0x20
c000776b:	85 c0                	test   eax,eax
c000776d:	0f 85 ba 0a 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007773:	31 d2                	xor    edx,edx
c0007775:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007779:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000777d:	29 fb                	sub    ebx,edi
c000777f:	0f 85 7a ff ff ff    	jne    c00076ff <f_mkfs+0x583>
c0007785:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007789:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007791:	31 f6                	xor    esi,esi
c0007793:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007797:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000779a:	31 d2                	xor    edx,edx
c000779c:	89 e8                	mov    eax,ebp
c000779e:	e8 5d a3 ff ff       	call   c0001b00 <mem_set>
c00077a3:	31 c9                	xor    ecx,ecx
c00077a5:	85 db                	test   ebx,ebx
c00077a7:	75 40                	jne    c00077e9 <f_mkfs+0x66d>
c00077a9:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00077ae:	89 e8                	mov    eax,ebp
c00077b0:	bb 02 00 00 00       	mov    ebx,0x2
c00077b5:	e8 28 a3 ff ff       	call   c0001ae2 <st_dword>
c00077ba:	8d 45 04             	lea    eax,[ebp+0x4]
c00077bd:	83 ca ff             	or     edx,0xffffffff
c00077c0:	e8 1d a3 ff ff       	call   c0001ae2 <st_dword>
c00077c5:	b9 08 00 00 00       	mov    ecx,0x8
c00077ca:	eb 1d                	jmp    c00077e9 <f_mkfs+0x66d>
c00077cc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077cf:	76 3b                	jbe    c000780c <f_mkfs+0x690>
c00077d1:	43                   	inc    ebx
c00077d2:	83 fe 01             	cmp    esi,0x1
c00077d5:	89 da                	mov    edx,ebx
c00077d7:	77 03                	ja     c00077dc <f_mkfs+0x660>
c00077d9:	83 ca ff             	or     edx,0xffffffff
c00077dc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077e0:	4e                   	dec    esi
c00077e1:	e8 fc a2 ff ff       	call   c0001ae2 <st_dword>
c00077e6:	83 c1 04             	add    ecx,0x4
c00077e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077ed:	85 f6                	test   esi,esi
c00077ef:	75 db                	jne    c00077cc <f_mkfs+0x650>
c00077f1:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077f6:	77 14                	ja     c000780c <f_mkfs+0x690>
c00077f8:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077fc:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007803:	85 f6                	test   esi,esi
c0007805:	74 05                	je     c000780c <f_mkfs+0x690>
c0007807:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000780a:	77 dd                	ja     c00077e9 <f_mkfs+0x66d>
c000780c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007810:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007814:	39 cf                	cmp    edi,ecx
c0007816:	76 02                	jbe    c000781a <f_mkfs+0x69e>
c0007818:	89 cf                	mov    edi,ecx
c000781a:	83 ec 0c             	sub    esp,0xc
c000781d:	57                   	push   edi
c000781e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007822:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007826:	55                   	push   ebp
c0007827:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000782b:	e8 07 a2 ff ff       	call   c0001a37 <disk_write>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	85 c0                	test   eax,eax
c0007835:	0f 85 f2 09 00 00    	jne    c000822d <f_mkfs+0x10b1>
c000783b:	31 d2                	xor    edx,edx
c000783d:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007841:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007845:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007849:	0f 85 48 ff ff ff    	jne    c0007797 <f_mkfs+0x61b>
c000784f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007852:	31 d2                	xor    edx,edx
c0007854:	89 e8                	mov    eax,ebp
c0007856:	31 ff                	xor    edi,edi
c0007858:	e8 a3 a2 ff ff       	call   c0001b00 <mem_set>
c000785d:	8d 45 34             	lea    eax,[ebp+0x34]
c0007860:	ba 02 00 00 00       	mov    edx,0x2
c0007865:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007869:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000786d:	e8 70 a2 ff ff       	call   c0001ae2 <st_dword>
c0007872:	8d 45 38             	lea    eax,[ebp+0x38]
c0007875:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007879:	e8 64 a2 ff ff       	call   c0001ae2 <st_dword>
c000787e:	8d 45 44             	lea    eax,[ebp+0x44]
c0007881:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007885:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007889:	e8 54 a2 ff ff       	call   c0001ae2 <st_dword>
c000788e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007891:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007895:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007899:	83 c2 02             	add    edx,0x2
c000789c:	e8 41 a2 ff ff       	call   c0001ae2 <st_dword>
c00078a1:	8d 45 58             	lea    eax,[ebp+0x58]
c00078a4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00078a8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00078ac:	e8 31 a2 ff ff       	call   c0001ae2 <st_dword>
c00078b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00078ba:	89 c6                	mov    esi,eax
c00078bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c0:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00078c7:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078cb:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078d2:	39 cb                	cmp    ebx,ecx
c00078d4:	76 02                	jbe    c00078d8 <f_mkfs+0x75c>
c00078d6:	89 cb                	mov    ebx,ecx
c00078d8:	83 ec 0c             	sub    esp,0xc
c00078db:	53                   	push   ebx
c00078dc:	57                   	push   edi
c00078dd:	56                   	push   esi
c00078de:	55                   	push   ebp
c00078df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078e3:	e8 4f a1 ff ff       	call   c0001a37 <disk_write>
c00078e8:	83 c4 20             	add    esp,0x20
c00078eb:	85 c0                	test   eax,eax
c00078ed:	0f 85 3a 09 00 00    	jne    c000822d <f_mkfs+0x10b1>
c00078f3:	31 d2                	xor    edx,edx
c00078f5:	b9 00 02 00 00       	mov    ecx,0x200
c00078fa:	89 e8                	mov    eax,ebp
c00078fc:	e8 ff a1 ff ff       	call   c0001b00 <mem_set>
c0007901:	31 d2                	xor    edx,edx
c0007903:	01 de                	add    esi,ebx
c0007905:	11 d7                	adc    edi,edx
c0007907:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000790a:	75 bf                	jne    c00078cb <f_mkfs+0x74f>
c000790c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007910:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007914:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000791c:	b9 00 02 00 00       	mov    ecx,0x200
c0007921:	31 d2                	xor    edx,edx
c0007923:	89 e8                	mov    eax,ebp
c0007925:	e8 d6 a1 ff ff       	call   c0001b00 <mem_set>
c000792a:	b9 0b 00 00 00       	mov    ecx,0xb
c000792f:	ba 80 5d 02 c0       	mov    edx,0xc0025d80
c0007934:	89 e8                	mov    eax,ebp
c0007936:	e8 b0 a1 ff ff       	call   c0001aeb <mem_cpy>
c000793b:	8d 45 40             	lea    eax,[ebp+0x40]
c000793e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007942:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007946:	e8 9a a1 ff ff       	call   c0001ae5 <st_qword>
c000794b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000794f:	8d 45 48             	lea    eax,[ebp+0x48]
c0007952:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007956:	e8 8a a1 ff ff       	call   c0001ae5 <st_qword>
c000795b:	8d 45 50             	lea    eax,[ebp+0x50]
c000795e:	ba 20 00 00 00       	mov    edx,0x20
c0007963:	e8 7a a1 ff ff       	call   c0001ae2 <st_dword>
c0007968:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000796c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007970:	e8 6d a1 ff ff       	call   c0001ae2 <st_dword>
c0007975:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007979:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000797d:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007981:	e8 5c a1 ff ff       	call   c0001ae2 <st_dword>
c0007986:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007989:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000798d:	e8 50 a1 ff ff       	call   c0001ae2 <st_dword>
c0007992:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007996:	8d 50 02             	lea    edx,[eax+0x2]
c0007999:	8d 45 60             	lea    eax,[ebp+0x60]
c000799c:	e8 41 a1 ff ff       	call   c0001ae2 <st_dword>
c00079a1:	8d 45 64             	lea    eax,[ebp+0x64]
c00079a4:	ba 00 00 21 50       	mov    edx,0x50210000
c00079a9:	e8 34 a1 ff ff       	call   c0001ae2 <st_dword>
c00079ae:	8d 45 68             	lea    eax,[ebp+0x68]
c00079b1:	ba 00 01 00 00       	mov    edx,0x100
c00079b6:	e8 23 a1 ff ff       	call   c0001ade <st_word>
c00079bb:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00079bf:	b8 0a 00 00 00       	mov    eax,0xa
c00079c4:	48                   	dec    eax
c00079c5:	74 05                	je     c00079cc <f_mkfs+0x850>
c00079c7:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079ca:	eb f8                	jmp    c00079c4 <f_mkfs+0x848>
c00079cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079d0:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079d8:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079dc:	74 05                	je     c00079e3 <f_mkfs+0x867>
c00079de:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079e1:	eb f5                	jmp    c00079d8 <f_mkfs+0x85c>
c00079e3:	8d 45 78             	lea    eax,[ebp+0x78]
c00079e6:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079eb:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079f1:	31 db                	xor    ebx,ebx
c00079f3:	e8 e6 a0 ff ff       	call   c0001ade <st_word>
c00079f8:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079fe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a03:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a06:	e8 d3 a0 ff ff       	call   c0001ade <st_word>
c0007a0b:	31 c9                	xor    ecx,ecx
c0007a0d:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007a10:	83 f8 01             	cmp    eax,0x1
c0007a13:	76 13                	jbe    c0007a28 <f_mkfs+0x8ac>
c0007a15:	83 f9 70             	cmp    ecx,0x70
c0007a18:	74 0e                	je     c0007a28 <f_mkfs+0x8ac>
c0007a1a:	89 da                	mov    edx,ebx
c0007a1c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a21:	e8 41 a5 ff ff       	call   c0001f67 <xsum32>
c0007a26:	89 c3                	mov    ebx,eax
c0007a28:	41                   	inc    ecx
c0007a29:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a2f:	75 dc                	jne    c0007a0d <f_mkfs+0x891>
c0007a31:	89 f0                	mov    eax,esi
c0007a33:	89 fa                	mov    edx,edi
c0007a35:	83 c0 01             	add    eax,0x1
c0007a38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a3c:	83 d2 00             	adc    edx,0x0
c0007a3f:	83 ec 0c             	sub    esp,0xc
c0007a42:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a46:	6a 01                	push   0x1
c0007a48:	57                   	push   edi
c0007a49:	56                   	push   esi
c0007a4a:	55                   	push   ebp
c0007a4b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a4f:	e8 e3 9f ff ff       	call   c0001a37 <disk_write>
c0007a54:	83 c4 20             	add    esp,0x20
c0007a57:	85 c0                	test   eax,eax
c0007a59:	0f 85 ce 07 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007a5f:	31 d2                	xor    edx,edx
c0007a61:	b9 00 02 00 00       	mov    ecx,0x200
c0007a66:	89 e8                	mov    eax,ebp
c0007a68:	e8 93 a0 ff ff       	call   c0001b00 <mem_set>
c0007a6d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a75:	e8 64 a0 ff ff       	call   c0001ade <st_word>
c0007a7a:	89 f0                	mov    eax,esi
c0007a7c:	89 fa                	mov    edx,edi
c0007a7e:	83 c0 09             	add    eax,0x9
c0007a81:	83 d2 00             	adc    edx,0x0
c0007a84:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a8b:	31 c9                	xor    ecx,ecx
c0007a8d:	41                   	inc    ecx
c0007a8e:	89 da                	mov    edx,ebx
c0007a90:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a95:	e8 cd a4 ff ff       	call   c0001f67 <xsum32>
c0007a9a:	89 c3                	mov    ebx,eax
c0007a9c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007aa2:	75 e9                	jne    c0007a8d <f_mkfs+0x911>
c0007aa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007aa8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007aac:	83 c0 01             	add    eax,0x1
c0007aaf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ab3:	83 d2 00             	adc    edx,0x0
c0007ab6:	83 ec 0c             	sub    esp,0xc
c0007ab9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007abd:	6a 01                	push   0x1
c0007abf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ac3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ac7:	55                   	push   ebp
c0007ac8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007acc:	e8 66 9f ff ff       	call   c0001a37 <disk_write>
c0007ad1:	83 c4 20             	add    esp,0x20
c0007ad4:	85 c0                	test   eax,eax
c0007ad6:	0f 85 51 07 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ae0:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ae4:	75 09                	jne    c0007aef <f_mkfs+0x973>
c0007ae6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ae9:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007aed:	74 12                	je     c0007b01 <f_mkfs+0x985>
c0007aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007af3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007af7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007afb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aff:	eb 8a                	jmp    c0007a8b <f_mkfs+0x90f>
c0007b01:	31 d2                	xor    edx,edx
c0007b03:	b9 00 02 00 00       	mov    ecx,0x200
c0007b08:	89 e8                	mov    eax,ebp
c0007b0a:	e8 f1 9f ff ff       	call   c0001b00 <mem_set>
c0007b0f:	83 c6 0b             	add    esi,0xb
c0007b12:	83 d7 00             	adc    edi,0x0
c0007b15:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007b19:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007b1d:	31 c9                	xor    ecx,ecx
c0007b1f:	41                   	inc    ecx
c0007b20:	89 da                	mov    edx,ebx
c0007b22:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b27:	e8 3b a4 ff ff       	call   c0001f67 <xsum32>
c0007b2c:	89 c3                	mov    ebx,eax
c0007b2e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b34:	75 e9                	jne    c0007b1f <f_mkfs+0x9a3>
c0007b36:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b39:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b3d:	83 c6 01             	add    esi,0x1
c0007b40:	83 d7 00             	adc    edi,0x0
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	6a 01                	push   0x1
c0007b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b50:	55                   	push   ebp
c0007b51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b55:	e8 dd 9e ff ff       	call   c0001a37 <disk_write>
c0007b5a:	83 c4 20             	add    esp,0x20
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	0f 85 c8 06 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007b65:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b69:	75 06                	jne    c0007b71 <f_mkfs+0x9f5>
c0007b6b:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b6f:	74 09                	je     c0007b7a <f_mkfs+0x9fe>
c0007b71:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b74:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b78:	eb a3                	jmp    c0007b1d <f_mkfs+0x9a1>
c0007b7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b7e:	89 da                	mov    edx,ebx
c0007b80:	01 e8                	add    eax,ebp
c0007b82:	e8 5b 9f ff ff       	call   c0001ae2 <st_dword>
c0007b87:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b8c:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b94:	75 e4                	jne    c0007b7a <f_mkfs+0x9fe>
c0007b96:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b99:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b9d:	83 c6 02             	add    esi,0x2
c0007ba0:	83 d7 00             	adc    edi,0x0
c0007ba3:	83 ec 0c             	sub    esp,0xc
c0007ba6:	6a 01                	push   0x1
c0007ba8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007bac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007bb0:	55                   	push   ebp
c0007bb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007bb5:	e8 7d 9e ff ff       	call   c0001a37 <disk_write>
c0007bba:	83 c4 20             	add    esp,0x20
c0007bbd:	85 c0                	test   eax,eax
c0007bbf:	0f 85 68 06 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007bc5:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007bca:	74 0d                	je     c0007bd9 <f_mkfs+0xa5d>
c0007bcc:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bd4:	e9 43 fd ff ff       	jmp    c000791c <f_mkfs+0x7a0>
c0007bd9:	b1 07                	mov    cl,0x7
c0007bdb:	e9 e3 05 00 00       	jmp    c00081c3 <f_mkfs+0x1047>
c0007be0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007be5:	0f 85 4f 02 00 00    	jne    c0007e3a <f_mkfs+0xcbe>
c0007beb:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bf0:	0f 86 22 02 00 00    	jbe    c0007e18 <f_mkfs+0xc9c>
c0007bf6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bfb:	0f 85 81 06 00 00    	jne    c0008282 <f_mkfs+0x1106>
c0007c01:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007c04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c08:	83 f8 40             	cmp    eax,0x40
c0007c0b:	0f 87 51 06 00 00    	ja     c0008262 <f_mkfs+0x10e6>
c0007c11:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007c15:	85 ff                	test   edi,edi
c0007c17:	75 1c                	jne    c0007c35 <f_mkfs+0xab9>
c0007c19:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c1c:	ba 80 5c 02 c0       	mov    edx,0xc0025c80
c0007c21:	c1 e9 0c             	shr    ecx,0xc
c0007c24:	bf 01 00 00 00       	mov    edi,0x1
c0007c29:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c2c:	66 85 c0             	test   ax,ax
c0007c2f:	0f 85 95 01 00 00    	jne    c0007dca <f_mkfs+0xc4e>
c0007c35:	31 d2                	xor    edx,edx
c0007c37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c3a:	f7 f7                	div    edi
c0007c3c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c41:	0f 86 95 01 00 00    	jbe    c0007ddc <f_mkfs+0xc60>
c0007c47:	83 c0 02             	add    eax,0x2
c0007c4a:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c4f:	01 c0                	add    eax,eax
c0007c51:	05 ff 01 00 00       	add    eax,0x1ff
c0007c56:	be 01 00 00 00       	mov    esi,0x1
c0007c5b:	c1 e8 09             	shr    eax,0x9
c0007c5e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c66:	c1 e0 05             	shl    eax,0x5
c0007c69:	c1 e8 09             	shr    eax,0x9
c0007c6c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c70:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c75:	31 d2                	xor    edx,edx
c0007c77:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c7b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c7f:	89 f0                	mov    eax,esi
c0007c81:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c85:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c91:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c95:	31 d2                	xor    edx,edx
c0007c97:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c9c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007ca0:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ca4:	31 db                	xor    ebx,ebx
c0007ca6:	01 c8                	add    eax,ecx
c0007ca8:	11 da                	adc    edx,ebx
c0007caa:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007cae:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007cb2:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007cb6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007cba:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007cbe:	f7 da                	neg    edx
c0007cc0:	21 d1                	and    ecx,edx
c0007cc2:	29 d9                	sub    ecx,ebx
c0007cc4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc9:	0f 85 20 01 00 00    	jne    c0007def <f_mkfs+0xc73>
c0007ccf:	31 db                	xor    ebx,ebx
c0007cd1:	01 ce                	add    esi,ecx
c0007cd3:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cd7:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cdb:	31 d2                	xor    edx,edx
c0007cdd:	89 f8                	mov    eax,edi
c0007cdf:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ce3:	c1 e0 04             	shl    eax,0x4
c0007ce6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cea:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cee:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cf2:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cf6:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cf9:	19 d3                	sbb    ebx,edx
c0007cfb:	0f 82 40 01 00 00    	jb     c0007e41 <f_mkfs+0xcc5>
c0007d01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d04:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d08:	89 c8                	mov    eax,ecx
c0007d0a:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007d0f:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007d13:	29 f0                	sub    eax,esi
c0007d15:	29 d0                	sub    eax,edx
c0007d17:	31 d2                	xor    edx,edx
c0007d19:	f7 f7                	div    edi
c0007d1b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d20:	89 c3                	mov    ebx,eax
c0007d22:	0f 85 b8 fe ff ff    	jne    c0007be0 <f_mkfs+0xa64>
c0007d28:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d2d:	0f 87 1d 01 00 00    	ja     c0007e50 <f_mkfs+0xcd4>
c0007d33:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d38:	0f 85 03 01 00 00    	jne    c0007e41 <f_mkfs+0xcc5>
c0007d3e:	83 ff 01             	cmp    edi,0x1
c0007d41:	0f 86 fa 00 00 00    	jbe    c0007e41 <f_mkfs+0xcc5>
c0007d47:	d1 ef                	shr    edi,1
c0007d49:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d4d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d51:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d54:	85 db                	test   ebx,ebx
c0007d56:	75 2d                	jne    c0007d85 <f_mkfs+0xc09>
c0007d58:	89 cb                	mov    ebx,ecx
c0007d5a:	ba 90 5c 02 c0       	mov    edx,0xc0025c90
c0007d5f:	c1 eb 11             	shr    ebx,0x11
c0007d62:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d6a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d6d:	66 85 c0             	test   ax,ax
c0007d70:	74 11                	je     c0007d83 <f_mkfs+0xc07>
c0007d72:	83 c2 02             	add    edx,0x2
c0007d75:	39 d8                	cmp    eax,ebx
c0007d77:	77 0a                	ja     c0007d83 <f_mkfs+0xc07>
c0007d79:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d7d:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d81:	eb e7                	jmp    c0007d6a <f_mkfs+0xbee>
c0007d83:	31 db                	xor    ebx,ebx
c0007d85:	31 d2                	xor    edx,edx
c0007d87:	89 c8                	mov    eax,ecx
c0007d89:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d8d:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d94:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d99:	c1 ea 09             	shr    edx,0x9
c0007d9c:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007da1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007da5:	0f 87 96 00 00 00    	ja     c0007e41 <f_mkfs+0xcc5>
c0007dab:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007daf:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007db7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007dbb:	be 20 00 00 00       	mov    esi,0x20
c0007dc0:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007dc5:	e9 a6 fe ff ff       	jmp    c0007c70 <f_mkfs+0xaf4>
c0007dca:	83 c2 02             	add    edx,0x2
c0007dcd:	39 c8                	cmp    eax,ecx
c0007dcf:	0f 87 60 fe ff ff    	ja     c0007c35 <f_mkfs+0xab9>
c0007dd5:	01 ff                	add    edi,edi
c0007dd7:	e9 4d fe ff ff       	jmp    c0007c29 <f_mkfs+0xaad>
c0007ddc:	8d 04 40             	lea    eax,[eax+eax*2]
c0007ddf:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de4:	40                   	inc    eax
c0007de5:	d1 e8                	shr    eax,1
c0007de7:	83 c0 03             	add    eax,0x3
c0007dea:	e9 62 fe ff ff       	jmp    c0007c51 <f_mkfs+0xad5>
c0007def:	31 d2                	xor    edx,edx
c0007df1:	89 c8                	mov    eax,ecx
c0007df3:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007df7:	85 d2                	test   edx,edx
c0007df9:	74 0c                	je     c0007e07 <f_mkfs+0xc8b>
c0007dfb:	49                   	dec    ecx
c0007dfc:	46                   	inc    esi
c0007dfd:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007e02:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007e07:	89 c8                	mov    eax,ecx
c0007e09:	31 d2                	xor    edx,edx
c0007e0b:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007e0f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007e13:	e9 c3 fe ff ff       	jmp    c0007cdb <f_mkfs+0xb5f>
c0007e18:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1d:	77 31                	ja     c0007e50 <f_mkfs+0xcd4>
c0007e1f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e24:	75 1b                	jne    c0007e41 <f_mkfs+0xcc5>
c0007e26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e2d:	3d 80 00 00 00       	cmp    eax,0x80
c0007e32:	0f 86 d9 fd ff ff    	jbe    c0007c11 <f_mkfs+0xa95>
c0007e38:	eb 07                	jmp    c0007e41 <f_mkfs+0xcc5>
c0007e3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3f:	76 0a                	jbe    c0007e4b <f_mkfs+0xccf>
c0007e41:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e46:	e9 ff 03 00 00       	jmp    c000824a <f_mkfs+0x10ce>
c0007e4b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 a2 9c ff ff       	call   c0001b00 <mem_set>
c0007e5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e63:	ba a2 5d 02 c0       	mov    edx,0xc0025da2
c0007e68:	89 e8                	mov    eax,ebp
c0007e6a:	e8 7c 9c ff ff       	call   c0001aeb <mem_cpy>
c0007e6f:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e72:	ba 00 02 00 00       	mov    edx,0x200
c0007e77:	e8 62 9c ff ff       	call   c0001ade <st_word>
c0007e7c:	89 f8                	mov    eax,edi
c0007e7e:	0f b7 d6             	movzx  edx,si
c0007e81:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e84:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e87:	e8 52 9c ff ff       	call   c0001ade <st_word>
c0007e8c:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e90:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e95:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e98:	75 08                	jne    c0007ea2 <f_mkfs+0xd26>
c0007e9a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ea2:	8d 45 11             	lea    eax,[ebp+0x11]
c0007ea5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007ea9:	e8 30 9c ff ff       	call   c0001ade <st_word>
c0007eae:	b8 ff ff 00 00       	mov    eax,0xffff
c0007eb3:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007eb7:	39 d0                	cmp    eax,edx
c0007eb9:	b8 00 00 00 00       	mov    eax,0x0
c0007ebe:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ec2:	72 0a                	jb     c0007ece <f_mkfs+0xd52>
c0007ec4:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ec7:	e8 12 9c ff ff       	call   c0001ade <st_word>
c0007ecc:	eb 08                	jmp    c0007ed6 <f_mkfs+0xd5a>
c0007ece:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ed1:	e8 0c 9c ff ff       	call   c0001ae2 <st_dword>
c0007ed6:	8d 45 18             	lea    eax,[ebp+0x18]
c0007ed9:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ede:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ee2:	e8 f7 9b ff ff       	call   c0001ade <st_word>
c0007ee7:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007eea:	ba ff 00 00 00       	mov    edx,0xff
c0007eef:	e8 ea 9b ff ff       	call   c0001ade <st_word>
c0007ef4:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ef7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007efb:	e8 e2 9b ff ff       	call   c0001ae2 <st_dword>
c0007f00:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f05:	75 57                	jne    c0007f5e <f_mkfs+0xde2>
c0007f07:	8d 45 43             	lea    eax,[ebp+0x43]
c0007f0a:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0f:	e8 ce 9b ff ff       	call   c0001ae2 <st_dword>
c0007f14:	8d 45 24             	lea    eax,[ebp+0x24]
c0007f17:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f1b:	e8 c2 9b ff ff       	call   c0001ae2 <st_dword>
c0007f20:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f23:	ba 02 00 00 00       	mov    edx,0x2
c0007f28:	e8 b5 9b ff ff       	call   c0001ae2 <st_dword>
c0007f2d:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f30:	ba 01 00 00 00       	mov    edx,0x1
c0007f35:	e8 a4 9b ff ff       	call   c0001ade <st_word>
c0007f3a:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f3d:	ba 06 00 00 00       	mov    edx,0x6
c0007f42:	e8 97 9b ff ff       	call   c0001ade <st_word>
c0007f47:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f4b:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f4f:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f52:	b9 13 00 00 00       	mov    ecx,0x13
c0007f57:	ba ae 5d 02 c0       	mov    edx,0xc0025dae
c0007f5c:	eb 2f                	jmp    c0007f8d <f_mkfs+0xe11>
c0007f5e:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f61:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f66:	e8 77 9b ff ff       	call   c0001ae2 <st_dword>
c0007f6b:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f70:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f73:	e8 66 9b ff ff       	call   c0001ade <st_word>
c0007f78:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f7c:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f80:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f83:	b9 13 00 00 00       	mov    ecx,0x13
c0007f88:	ba c2 5d 02 c0       	mov    edx,0xc0025dc2
c0007f8d:	e8 59 9b ff ff       	call   c0001aeb <mem_cpy>
c0007f92:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f98:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f9d:	89 f0                	mov    eax,esi
c0007f9f:	e8 3a 9b ff ff       	call   c0001ade <st_word>
c0007fa4:	83 ec 0c             	sub    esp,0xc
c0007fa7:	6a 01                	push   0x1
c0007fa9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fb1:	55                   	push   ebp
c0007fb2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fb6:	e8 7c 9a ff ff       	call   c0001a37 <disk_write>
c0007fbb:	83 c4 20             	add    esp,0x20
c0007fbe:	85 c0                	test   eax,eax
c0007fc0:	0f 85 67 02 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007fc6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fcb:	0f 85 b7 00 00 00    	jne    c0008088 <f_mkfs+0xf0c>
c0007fd1:	83 ec 0c             	sub    esp,0xc
c0007fd4:	6a 01                	push   0x1
c0007fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fda:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fde:	83 c0 06             	add    eax,0x6
c0007fe1:	83 d2 00             	adc    edx,0x0
c0007fe4:	52                   	push   edx
c0007fe5:	50                   	push   eax
c0007fe6:	55                   	push   ebp
c0007fe7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007feb:	e8 47 9a ff ff       	call   c0001a37 <disk_write>
c0007ff0:	83 c4 20             	add    esp,0x20
c0007ff3:	b9 00 02 00 00       	mov    ecx,0x200
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 e8                	mov    eax,ebp
c0007ffc:	e8 ff 9a ff ff       	call   c0001b00 <mem_set>
c0008001:	ba 52 52 61 41       	mov    edx,0x41615252
c0008006:	89 e8                	mov    eax,ebp
c0008008:	e8 d5 9a ff ff       	call   c0001ae2 <st_dword>
c000800d:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008013:	ba 72 72 41 61       	mov    edx,0x61417272
c0008018:	e8 c5 9a ff ff       	call   c0001ae2 <st_dword>
c000801d:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008020:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008026:	e8 b7 9a ff ff       	call   c0001ae2 <st_dword>
c000802b:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008031:	ba 02 00 00 00       	mov    edx,0x2
c0008036:	e8 a7 9a ff ff       	call   c0001ae2 <st_dword>
c000803b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008040:	89 f0                	mov    eax,esi
c0008042:	e8 97 9a ff ff       	call   c0001ade <st_word>
c0008047:	83 ec 0c             	sub    esp,0xc
c000804a:	6a 01                	push   0x1
c000804c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008050:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008054:	83 c0 07             	add    eax,0x7
c0008057:	83 d2 00             	adc    edx,0x0
c000805a:	52                   	push   edx
c000805b:	50                   	push   eax
c000805c:	55                   	push   ebp
c000805d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008061:	e8 d1 99 ff ff       	call   c0001a37 <disk_write>
c0008066:	83 c4 14             	add    esp,0x14
c0008069:	6a 01                	push   0x1
c000806b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000806f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008073:	83 c0 01             	add    eax,0x1
c0008076:	83 d2 00             	adc    edx,0x0
c0008079:	52                   	push   edx
c000807a:	50                   	push   eax
c000807b:	55                   	push   ebp
c000807c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008080:	e8 b2 99 ff ff       	call   c0001a37 <disk_write>
c0008085:	83 c4 20             	add    esp,0x20
c0008088:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000808f:	31 d2                	xor    edx,edx
c0008091:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008097:	31 db                	xor    ebx,ebx
c0008099:	89 e8                	mov    eax,ebp
c000809b:	e8 60 9a ff ff       	call   c0001b00 <mem_set>
c00080a0:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00080a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00080ac:	0f 94 c3             	sete   bl
c00080af:	4b                   	dec    ebx
c00080b0:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00080b6:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00080bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c1:	75 21                	jne    c00080e4 <f_mkfs+0xf68>
c00080c3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080c8:	89 e8                	mov    eax,ebp
c00080ca:	e8 13 9a ff ff       	call   c0001ae2 <st_dword>
c00080cf:	8d 45 04             	lea    eax,[ebp+0x4]
c00080d2:	83 ca ff             	or     edx,0xffffffff
c00080d5:	e8 08 9a ff ff       	call   c0001ae2 <st_dword>
c00080da:	8d 45 08             	lea    eax,[ebp+0x8]
c00080dd:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080e2:	eb 04                	jmp    c00080e8 <f_mkfs+0xf6c>
c00080e4:	89 da                	mov    edx,ebx
c00080e6:	89 e8                	mov    eax,ebp
c00080e8:	e8 f5 99 ff ff       	call   c0001ae2 <st_dword>
c00080ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080f5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080f9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080fd:	39 ce                	cmp    esi,ecx
c00080ff:	76 02                	jbe    c0008103 <f_mkfs+0xf87>
c0008101:	89 ce                	mov    esi,ecx
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	56                   	push   esi
c0008107:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810f:	55                   	push   ebp
c0008110:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008114:	e8 1e 99 ff ff       	call   c0001a37 <disk_write>
c0008119:	83 c4 20             	add    esp,0x20
c000811c:	85 c0                	test   eax,eax
c000811e:	0f 85 09 01 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0008124:	31 d2                	xor    edx,edx
c0008126:	b9 00 02 00 00       	mov    ecx,0x200
c000812b:	89 e8                	mov    eax,ebp
c000812d:	e8 ce 99 ff ff       	call   c0001b00 <mem_set>
c0008132:	31 d2                	xor    edx,edx
c0008134:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008138:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813c:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008140:	75 b3                	jne    c00080f5 <f_mkfs+0xf79>
c0008142:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008145:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000814c:	40                   	inc    eax
c000814d:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008151:	0f 87 65 ff ff ff    	ja     c00080bc <f_mkfs+0xf40>
c0008157:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000815c:	74 04                	je     c0008162 <f_mkfs+0xfe6>
c000815e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008162:	89 fb                	mov    ebx,edi
c0008164:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008168:	76 04                	jbe    c000816e <f_mkfs+0xff2>
c000816a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000816e:	83 ec 0c             	sub    esp,0xc
c0008171:	53                   	push   ebx
c0008172:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008176:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000817a:	55                   	push   ebp
c000817b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000817f:	e8 b3 98 ff ff       	call   c0001a37 <disk_write>
c0008184:	83 c4 20             	add    esp,0x20
c0008187:	85 c0                	test   eax,eax
c0008189:	0f 85 9e 00 00 00    	jne    c000822d <f_mkfs+0x10b1>
c000818f:	31 d2                	xor    edx,edx
c0008191:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008195:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008199:	29 df                	sub    edi,ebx
c000819b:	75 c5                	jne    c0008162 <f_mkfs+0xfe6>
c000819d:	b1 0c                	mov    cl,0xc
c000819f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081a4:	74 1d                	je     c00081c3 <f_mkfs+0x1047>
c00081a6:	b8 ff ff 00 00       	mov    eax,0xffff
c00081ab:	b1 06                	mov    cl,0x6
c00081ad:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00081b1:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00081b5:	72 0c                	jb     c00081c3 <f_mkfs+0x1047>
c00081b7:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00081bc:	0f 94 c1             	sete   cl
c00081bf:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081c3:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081c8:	75 4c                	jne    c0008216 <f_mkfs+0x109a>
c00081ca:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ce:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081d2:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081d9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081e0:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081eb:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081f6:	0f b6 c9             	movzx  ecx,cl
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008204:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008208:	e8 2f c2 ff ff       	call   c000443c <create_partition>
c000820d:	83 c4 10             	add    esp,0x10
c0008210:	89 c3                	mov    ebx,eax
c0008212:	85 c0                	test   eax,eax
c0008214:	75 34                	jne    c000824a <f_mkfs+0x10ce>
c0008216:	31 db                	xor    ebx,ebx
c0008218:	50                   	push   eax
c0008219:	6a 00                	push   0x0
c000821b:	6a 00                	push   0x0
c000821d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008221:	e8 27 98 ff ff       	call   c0001a4d <disk_ioctl>
c0008226:	83 c4 10             	add    esp,0x10
c0008229:	85 c0                	test   eax,eax
c000822b:	74 1d                	je     c000824a <f_mkfs+0x10ce>
c000822d:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008235:	75 0c                	jne    c0008243 <f_mkfs+0x10c7>
c0008237:	83 ec 0c             	sub    esp,0xc
c000823a:	55                   	push   ebp
c000823b:	e8 75 00 00 00       	call   c00082b5 <ff_memfree>
c0008240:	83 c4 10             	add    esp,0x10
c0008243:	bb 01 00 00 00       	mov    ebx,0x1
c0008248:	eb 48                	jmp    c0008292 <f_mkfs+0x1116>
c000824a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008252:	75 3e                	jne    c0008292 <f_mkfs+0x1116>
c0008254:	83 ec 0c             	sub    esp,0xc
c0008257:	55                   	push   ebp
c0008258:	e8 58 00 00 00       	call   c00082b5 <ff_memfree>
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	eb 30                	jmp    c0008292 <f_mkfs+0x1116>
c0008262:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008267:	0f 85 eb fa ff ff    	jne    c0007d58 <f_mkfs+0xbdc>
c000826d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008271:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008277:	0f 86 b8 f9 ff ff    	jbe    c0007c35 <f_mkfs+0xab9>
c000827d:	e9 bf fb ff ff       	jmp    c0007e41 <f_mkfs+0xcc5>
c0008282:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008287:	0f 85 c0 fa ff ff    	jne    c0007d4d <f_mkfs+0xbd1>
c000828d:	e9 af fb ff ff       	jmp    c0007e41 <f_mkfs+0xcc5>
c0008292:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008298:	89 d8                	mov    eax,ebx
c000829a:	5b                   	pop    ebx
c000829b:	5e                   	pop    esi
c000829c:	5f                   	pop    edi
c000829d:	5d                   	pop    ebp
c000829e:	c3                   	ret    

c000829f <ff_memalloc>:
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	83 ec 0c             	sub    esp,0xc
c00082a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082a9:	e8 b2 6e 00 00       	call   c000f160 <malloc>
c00082ae:	83 c4 10             	add    esp,0x10
c00082b1:	83 c4 0c             	add    esp,0xc
c00082b4:	c3                   	ret    

c00082b5 <ff_memfree>:
c00082b5:	83 ec 0c             	sub    esp,0xc
c00082b8:	83 ec 0c             	sub    esp,0xc
c00082bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082bf:	e8 ac 6e 00 00       	call   c000f170 <free>
c00082c4:	83 c4 10             	add    esp,0x10
c00082c7:	90                   	nop
c00082c8:	83 c4 0c             	add    esp,0xc
c00082cb:	c3                   	ret    

c00082cc <ff_uni2oem>:
c00082cc:	83 ec 14             	sub    esp,0x14
c00082cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082d3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082d7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082de:	c7 44 24 0c e0 60 02 c0 	mov    DWORD PTR [esp+0xc],0xc00260e0
c00082e6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082eb:	77 0b                	ja     c00082f8 <ff_uni2oem+0x2c>
c00082ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082f1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f6:	eb 5b                	jmp    c0008353 <ff_uni2oem+0x87>
c00082f8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008300:	77 51                	ja     c0008353 <ff_uni2oem+0x87>
c0008302:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008308:	75 49                	jne    c0008353 <ff_uni2oem+0x87>
c000830a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008311:	eb 0b                	jmp    c000831e <ff_uni2oem+0x52>
c0008313:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008318:	40                   	inc    eax
c0008319:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000831e:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008324:	77 1b                	ja     c0008341 <ff_uni2oem+0x75>
c0008326:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000832b:	01 c0                	add    eax,eax
c000832d:	89 c2                	mov    edx,eax
c000832f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008333:	01 d0                	add    eax,edx
c0008335:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008338:	0f b7 c0             	movzx  eax,ax
c000833b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000833f:	75 d2                	jne    c0008313 <ff_uni2oem+0x47>
c0008341:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008346:	83 e8 80             	sub    eax,0xffffff80
c0008349:	25 ff 00 00 00       	and    eax,0xff
c000834e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008353:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008358:	83 c4 14             	add    esp,0x14
c000835b:	c3                   	ret    

c000835c <ff_oem2uni>:
c000835c:	83 ec 18             	sub    esp,0x18
c000835f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008367:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000836c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008370:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008377:	c7 44 24 10 e0 60 02 c0 	mov    DWORD PTR [esp+0x10],0xc00260e0
c000837f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008385:	77 0b                	ja     c0008392 <ff_oem2uni+0x36>
c0008387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000838b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008390:	eb 2d                	jmp    c00083bf <ff_oem2uni+0x63>
c0008392:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008398:	75 25                	jne    c00083bf <ff_oem2uni+0x63>
c000839a:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00083a1:	77 1c                	ja     c00083bf <ff_oem2uni+0x63>
c00083a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00083a8:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00083ad:	01 c0                	add    eax,eax
c00083af:	89 c2                	mov    edx,eax
c00083b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083b5:	01 d0                	add    eax,edx
c00083b7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ba:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00083bf:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083c4:	83 c4 18             	add    esp,0x18
c00083c7:	c3                   	ret    

c00083c8 <ff_wtoupper>:
c00083c8:	83 ec 10             	sub    esp,0x10
c00083cb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083d3:	0f 87 3e 01 00 00    	ja     c0008517 <ff_wtoupper+0x14f>
c00083d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083dd:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083e2:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083e9:	77 07                	ja     c00083f2 <ff_wtoupper+0x2a>
c00083eb:	b8 e0 5e 02 c0       	mov    eax,0xc0025ee0
c00083f0:	eb 05                	jmp    c00083f7 <ff_wtoupper+0x2f>
c00083f2:	b8 20 5e 02 c0       	mov    eax,0xc0025e20
c00083f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ff:	8d 50 02             	lea    edx,[eax+0x2]
c0008402:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008406:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008409:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000840e:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008414:	0f 84 f4 00 00 00    	je     c000850e <ff_wtoupper+0x146>
c000841a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000841f:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008424:	0f 82 e4 00 00 00    	jb     c000850e <ff_wtoupper+0x146>
c000842a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842e:	8d 50 02             	lea    edx,[eax+0x2]
c0008431:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008435:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008438:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000843d:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008442:	66 c1 e8 08          	shr    ax,0x8
c0008446:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000844b:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008452:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008457:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000845c:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008461:	01 ca                	add    edx,ecx
c0008463:	39 d0                	cmp    eax,edx
c0008465:	0f 8d 86 00 00 00    	jge    c00084f1 <ff_wtoupper+0x129>
c000846b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008470:	83 f8 08             	cmp    eax,0x8
c0008473:	0f 87 94 00 00 00    	ja     c000850d <ff_wtoupper+0x145>
c0008479:	8b 04 85 e0 5d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda220]
c0008480:	ff e0                	jmp    eax
c0008482:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008487:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000848c:	29 c2                	sub    edx,eax
c000848e:	89 d0                	mov    eax,edx
c0008490:	01 c0                	add    eax,eax
c0008492:	89 c2                	mov    edx,eax
c0008494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008498:	01 d0                	add    eax,edx
c000849a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000849d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00084a2:	eb 4b                	jmp    c00084ef <ff_wtoupper+0x127>
c00084a4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084a9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00084ad:	83 e0 01             	and    eax,0x1
c00084b0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00084b5:	eb 38                	jmp    c00084ef <ff_wtoupper+0x127>
c00084b7:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00084bd:	eb 30                	jmp    c00084ef <ff_wtoupper+0x127>
c00084bf:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084c5:	eb 28                	jmp    c00084ef <ff_wtoupper+0x127>
c00084c7:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084cd:	eb 20                	jmp    c00084ef <ff_wtoupper+0x127>
c00084cf:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084d5:	eb 18                	jmp    c00084ef <ff_wtoupper+0x127>
c00084d7:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084dd:	eb 10                	jmp    c00084ef <ff_wtoupper+0x127>
c00084df:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084e5:	eb 08                	jmp    c00084ef <ff_wtoupper+0x127>
c00084e7:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084ee:	90                   	nop
c00084ef:	eb 1c                	jmp    c000850d <ff_wtoupper+0x145>
c00084f1:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084f7:	0f 85 fe fe ff ff    	jne    c00083fb <ff_wtoupper+0x33>
c00084fd:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008502:	01 c0                	add    eax,eax
c0008504:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008508:	e9 ee fe ff ff       	jmp    c00083fb <ff_wtoupper+0x33>
c000850d:	90                   	nop
c000850e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008513:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000851b:	83 c4 10             	add    esp,0x10
c000851e:	c3                   	ret    

c000851f <is_bad_src_ratio>:
c000851f:	83 ec 1c             	sub    esp,0x1c
c0008522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008526:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000852a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000852e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008532:	b8 00 00 00 00       	mov    eax,0x0
c0008537:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000853c:	52                   	push   edx
c000853d:	50                   	push   eax
c000853e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008542:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008546:	e8 58 c8 01 00       	call   c0024da3 <__ltdf2>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	78 20                	js     c0008572 <is_bad_src_ratio+0x53>
c0008552:	b8 00 00 00 00       	mov    eax,0x0
c0008557:	ba 00 00 70 40       	mov    edx,0x40700000
c000855c:	52                   	push   edx
c000855d:	50                   	push   eax
c000855e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008562:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008566:	e8 1a c8 01 00       	call   c0024d85 <__gtdf2>
c000856b:	83 c4 10             	add    esp,0x10
c000856e:	85 c0                	test   eax,eax
c0008570:	7e 07                	jle    c0008579 <is_bad_src_ratio+0x5a>
c0008572:	b8 01 00 00 00       	mov    eax,0x1
c0008577:	eb 05                	jmp    c000857e <is_bad_src_ratio+0x5f>
c0008579:	b8 00 00 00 00       	mov    eax,0x0
c000857e:	83 c4 1c             	add    esp,0x1c
c0008581:	c3                   	ret    

c0008582 <psrc_set_converter>:
c0008582:	56                   	push   esi
c0008583:	89 d6                	mov    esi,edx
c0008585:	53                   	push   ebx
c0008586:	89 c3                	mov    ebx,eax
c0008588:	83 ec 0c             	sub    esp,0xc
c000858b:	52                   	push   edx
c000858c:	50                   	push   eax
c000858d:	e8 58 51 00 00       	call   c000d6ea <sinc_set_converter>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	85 c0                	test   eax,eax
c0008597:	74 25                	je     c00085be <psrc_set_converter+0x3c>
c0008599:	50                   	push   eax
c000859a:	50                   	push   eax
c000859b:	56                   	push   esi
c000859c:	53                   	push   ebx
c000859d:	e8 2a 59 00 00       	call   c000decc <zoh_set_converter>
c00085a2:	83 c4 10             	add    esp,0x10
c00085a5:	85 c0                	test   eax,eax
c00085a7:	74 15                	je     c00085be <psrc_set_converter+0x3c>
c00085a9:	51                   	push   ecx
c00085aa:	51                   	push   ecx
c00085ab:	56                   	push   esi
c00085ac:	53                   	push   ebx
c00085ad:	e8 77 10 00 00       	call   c0009629 <linear_set_converter>
c00085b2:	83 c4 10             	add    esp,0x10
c00085b5:	ba 0a 00 00 00       	mov    edx,0xa
c00085ba:	85 c0                	test   eax,eax
c00085bc:	75 02                	jne    c00085c0 <psrc_set_converter+0x3e>
c00085be:	31 d2                	xor    edx,edx
c00085c0:	89 d0                	mov    eax,edx
c00085c2:	5a                   	pop    edx
c00085c3:	5b                   	pop    ebx
c00085c4:	5e                   	pop    esi
c00085c5:	c3                   	ret    

c00085c6 <src_delete>:
c00085c6:	53                   	push   ebx
c00085c7:	83 ec 08             	sub    esp,0x8
c00085ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085ce:	85 db                	test   ebx,ebx
c00085d0:	74 29                	je     c00085fb <src_delete+0x35>
c00085d2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085d5:	85 c0                	test   eax,eax
c00085d7:	74 0c                	je     c00085e5 <src_delete+0x1f>
c00085d9:	83 ec 0c             	sub    esp,0xc
c00085dc:	50                   	push   eax
c00085dd:	e8 8e 6b 00 00       	call   c000f170 <free>
c00085e2:	83 c4 10             	add    esp,0x10
c00085e5:	50                   	push   eax
c00085e6:	6a 3c                	push   0x3c
c00085e8:	6a 00                	push   0x0
c00085ea:	53                   	push   ebx
c00085eb:	e8 f6 80 ff ff       	call   c00006e6 <memset>
c00085f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085f3:	e8 78 6b 00 00       	call   c000f170 <free>
c00085f8:	83 c4 10             	add    esp,0x10
c00085fb:	31 c0                	xor    eax,eax
c00085fd:	83 c4 08             	add    esp,0x8
c0008600:	5b                   	pop    ebx
c0008601:	c3                   	ret    

c0008602 <src_process>:
c0008602:	56                   	push   esi
c0008603:	53                   	push   ebx
c0008604:	83 ec 14             	sub    esp,0x14
c0008607:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000860b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000860f:	85 f6                	test   esi,esi
c0008611:	0f 84 2a 01 00 00    	je     c0008741 <src_process+0x13f>
c0008617:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000861b:	0f 84 27 01 00 00    	je     c0008748 <src_process+0x146>
c0008621:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008625:	0f 84 1d 01 00 00    	je     c0008748 <src_process+0x146>
c000862b:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008632:	0f 85 17 01 00 00    	jne    c000874f <src_process+0x14d>
c0008638:	85 db                	test   ebx,ebx
c000863a:	0f 84 16 01 00 00    	je     c0008756 <src_process+0x154>
c0008640:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008643:	0f 84 14 01 00 00    	je     c000875d <src_process+0x15b>
c0008649:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000864d:	0f 84 0a 01 00 00    	je     c000875d <src_process+0x15b>
c0008653:	50                   	push   eax
c0008654:	50                   	push   eax
c0008655:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008658:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000865b:	e8 bf fe ff ff       	call   c000851f <is_bad_src_ratio>
c0008660:	83 c4 10             	add    esp,0x10
c0008663:	85 c0                	test   eax,eax
c0008665:	0f 85 f9 00 00 00    	jne    c0008764 <src_process+0x162>
c000866b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000866f:	79 07                	jns    c0008678 <src_process+0x76>
c0008671:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008678:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000867c:	79 07                	jns    c0008685 <src_process+0x83>
c000867e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008685:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008687:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000868a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000868d:	39 ca                	cmp    edx,ecx
c000868f:	73 0b                	jae    c000869c <src_process+0x9a>
c0008691:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008695:	8d 04 82             	lea    eax,[edx+eax*4]
c0008698:	39 c1                	cmp    ecx,eax
c000869a:	eb 09                	jmp    c00086a5 <src_process+0xa3>
c000869c:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00086a0:	8d 04 81             	lea    eax,[ecx+eax*4]
c00086a3:	39 c2                	cmp    edx,eax
c00086a5:	0f 82 c0 00 00 00    	jb     c000876b <src_process+0x169>
c00086ab:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00086b2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00086b9:	68 00 00 70 3f       	push   0x3f700000
c00086be:	6a 00                	push   0x0
c00086c0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086c3:	ff 36                	push   DWORD PTR [esi]
c00086c5:	e8 d9 c6 01 00       	call   c0024da3 <__ltdf2>
c00086ca:	83 c4 10             	add    esp,0x10
c00086cd:	85 c0                	test   eax,eax
c00086cf:	79 0b                	jns    c00086dc <src_process+0xda>
c00086d1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00086d4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00086d7:	89 06                	mov    DWORD PTR [esi],eax
c00086d9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00086dc:	83 ec 10             	sub    esp,0x10
c00086df:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086e5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086e8:	ff 36                	push   DWORD PTR [esi]
c00086ea:	e8 b9 bd 01 00       	call   c00244a8 <__subdf3>
c00086ef:	83 c4 18             	add    esp,0x18
c00086f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086fa:	52                   	push   edx
c00086fb:	50                   	push   eax
c00086fc:	e8 3f c8 01 00       	call   c0024f40 <fabs>
c0008701:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008705:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008709:	83 c4 10             	add    esp,0x10
c000870c:	68 af 03 d2 3c       	push   0x3cd203af
c0008711:	68 16 56 e7 9e       	push   0x9ee75616
c0008716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000871a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000871e:	e8 80 c6 01 00       	call   c0024da3 <__ltdf2>
c0008723:	83 c4 10             	add    esp,0x10
c0008726:	85 c0                	test   eax,eax
c0008728:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c000872c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008730:	79 05                	jns    c0008737 <src_process+0x135>
c0008732:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008735:	eb 03                	jmp    c000873a <src_process+0x138>
c0008737:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000873a:	83 c4 14             	add    esp,0x14
c000873d:	5b                   	pop    ebx
c000873e:	5e                   	pop    esi
c000873f:	ff e0                	jmp    eax
c0008741:	b8 02 00 00 00       	mov    eax,0x2
c0008746:	eb 28                	jmp    c0008770 <src_process+0x16e>
c0008748:	b8 07 00 00 00       	mov    eax,0x7
c000874d:	eb 21                	jmp    c0008770 <src_process+0x16e>
c000874f:	b8 12 00 00 00       	mov    eax,0x12
c0008754:	eb 1a                	jmp    c0008770 <src_process+0x16e>
c0008756:	b8 03 00 00 00       	mov    eax,0x3
c000875b:	eb 13                	jmp    c0008770 <src_process+0x16e>
c000875d:	b8 04 00 00 00       	mov    eax,0x4
c0008762:	eb 0c                	jmp    c0008770 <src_process+0x16e>
c0008764:	b8 06 00 00 00       	mov    eax,0x6
c0008769:	eb 05                	jmp    c0008770 <src_process+0x16e>
c000876b:	b8 10 00 00 00       	mov    eax,0x10
c0008770:	83 c4 14             	add    esp,0x14
c0008773:	5b                   	pop    ebx
c0008774:	5e                   	pop    esi
c0008775:	c3                   	ret    

c0008776 <src_callback_read>:
c0008776:	55                   	push   ebp
c0008777:	57                   	push   edi
c0008778:	56                   	push   esi
c0008779:	53                   	push   ebx
c000877a:	83 ec 3c             	sub    esp,0x3c
c000877d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008781:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008785:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008789:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000878d:	85 ed                	test   ebp,ebp
c000878f:	0f 8e 30 01 00 00    	jle    c00088c5 <src_callback_read+0x14f>
c0008795:	85 db                	test   ebx,ebx
c0008797:	0f 84 28 01 00 00    	je     c00088c5 <src_callback_read+0x14f>
c000879d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00087a4:	74 0c                	je     c00087b2 <src_callback_read+0x3c>
c00087a6:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00087ad:	e9 13 01 00 00       	jmp    c00088c5 <src_callback_read+0x14f>
c00087b2:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c00087b6:	75 0c                	jne    c00087c4 <src_callback_read+0x4e>
c00087b8:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c00087bf:	e9 01 01 00 00       	jmp    c00088c5 <src_callback_read+0x14f>
c00087c4:	51                   	push   ecx
c00087c5:	6a 24                	push   0x24
c00087c7:	6a 00                	push   0x0
c00087c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00087cd:	50                   	push   eax
c00087ce:	e8 13 7f ff ff       	call   c00006e6 <memset>
c00087d3:	58                   	pop    eax
c00087d4:	5a                   	pop    edx
c00087d5:	57                   	push   edi
c00087d6:	56                   	push   esi
c00087d7:	e8 43 fd ff ff       	call   c000851f <is_bad_src_ratio>
c00087dc:	83 c4 10             	add    esp,0x10
c00087df:	85 c0                	test   eax,eax
c00087e1:	74 0c                	je     c00087ef <src_callback_read+0x79>
c00087e3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087ea:	e9 d6 00 00 00       	jmp    c00088c5 <src_callback_read+0x14f>
c00087ef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087f3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087fb:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008802:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008806:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000880a:	31 f6                	xor    esi,esi
c000880c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000880f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008813:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008818:	75 30                	jne    c000884a <src_callback_read+0xd4>
c000881a:	8d 44 24 04          	lea    eax,[esp+0x4]
c000881e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008822:	52                   	push   edx
c0008823:	52                   	push   edx
c0008824:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008828:	50                   	push   eax
c0008829:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000882c:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000882f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008833:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008837:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000883b:	83 c4 10             	add    esp,0x10
c000883e:	85 c0                	test   eax,eax
c0008840:	75 08                	jne    c000884a <src_callback_read+0xd4>
c0008842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000884a:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008851:	50                   	push   eax
c0008852:	50                   	push   eax
c0008853:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008857:	50                   	push   eax
c0008858:	53                   	push   ebx
c0008859:	e8 a4 fd ff ff       	call   c0008602 <src_process>
c000885e:	83 c4 10             	add    esp,0x10
c0008861:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008868:	85 c0                	test   eax,eax
c000886a:	75 42                	jne    c00088ae <src_callback_read+0x138>
c000886c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008870:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008873:	89 f9                	mov    ecx,edi
c0008875:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008879:	0f af ca             	imul   ecx,edx
c000887c:	c1 e1 02             	shl    ecx,0x2
c000887f:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008883:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008887:	0f af d1             	imul   edx,ecx
c000888a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000888e:	c1 e2 02             	shl    edx,0x2
c0008891:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008895:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008898:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000889d:	75 04                	jne    c00088a3 <src_callback_read+0x12d>
c000889f:	85 c9                	test   ecx,ecx
c00088a1:	74 0b                	je     c00088ae <src_callback_read+0x138>
c00088a3:	39 d5                	cmp    ebp,edx
c00088a5:	7e 09                	jle    c00088b0 <src_callback_read+0x13a>
c00088a7:	89 d6                	mov    esi,edx
c00088a9:	e9 65 ff ff ff       	jmp    c0008813 <src_callback_read+0x9d>
c00088ae:	89 f2                	mov    edx,esi
c00088b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00088b4:	85 c0                	test   eax,eax
c00088b6:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00088b9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00088bd:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00088c0:	74 05                	je     c00088c7 <src_callback_read+0x151>
c00088c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088c5:	31 d2                	xor    edx,edx
c00088c7:	83 c4 3c             	add    esp,0x3c
c00088ca:	89 d0                	mov    eax,edx
c00088cc:	5b                   	pop    ebx
c00088cd:	5e                   	pop    esi
c00088ce:	5f                   	pop    edi
c00088cf:	5d                   	pop    ebp
c00088d0:	c3                   	ret    

c00088d1 <src_set_ratio>:
c00088d1:	57                   	push   edi
c00088d2:	b8 02 00 00 00       	mov    eax,0x2
c00088d7:	56                   	push   esi
c00088d8:	53                   	push   ebx
c00088d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088e1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088e5:	85 db                	test   ebx,ebx
c00088e7:	74 2d                	je     c0008916 <src_set_ratio+0x45>
c00088e9:	b8 07 00 00 00       	mov    eax,0x7
c00088ee:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088f2:	74 22                	je     c0008916 <src_set_ratio+0x45>
c00088f4:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088f8:	74 1c                	je     c0008916 <src_set_ratio+0x45>
c00088fa:	50                   	push   eax
c00088fb:	50                   	push   eax
c00088fc:	57                   	push   edi
c00088fd:	56                   	push   esi
c00088fe:	e8 1c fc ff ff       	call   c000851f <is_bad_src_ratio>
c0008903:	83 c4 10             	add    esp,0x10
c0008906:	85 c0                	test   eax,eax
c0008908:	75 07                	jne    c0008911 <src_set_ratio+0x40>
c000890a:	89 33                	mov    DWORD PTR [ebx],esi
c000890c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000890f:	eb 05                	jmp    c0008916 <src_set_ratio+0x45>
c0008911:	b8 06 00 00 00       	mov    eax,0x6
c0008916:	5b                   	pop    ebx
c0008917:	5e                   	pop    esi
c0008918:	5f                   	pop    edi
c0008919:	c3                   	ret    

c000891a <src_get_channels>:
c000891a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000891e:	b8 02 00 00 00       	mov    eax,0x2
c0008923:	85 d2                	test   edx,edx
c0008925:	74 14                	je     c000893b <src_get_channels+0x21>
c0008927:	b8 07 00 00 00       	mov    eax,0x7
c000892c:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008930:	74 09                	je     c000893b <src_get_channels+0x21>
c0008932:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008936:	74 03                	je     c000893b <src_get_channels+0x21>
c0008938:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000893b:	c3                   	ret    

c000893c <src_reset>:
c000893c:	53                   	push   ebx
c000893d:	b8 02 00 00 00       	mov    eax,0x2
c0008942:	83 ec 08             	sub    esp,0x8
c0008945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008949:	85 db                	test   ebx,ebx
c000894b:	74 36                	je     c0008983 <src_reset+0x47>
c000894d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008950:	85 c0                	test   eax,eax
c0008952:	74 09                	je     c000895d <src_reset+0x21>
c0008954:	83 ec 0c             	sub    esp,0xc
c0008957:	53                   	push   ebx
c0008958:	ff d0                	call   eax
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	31 c0                	xor    eax,eax
c000895f:	31 d2                	xor    edx,edx
c0008961:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008964:	89 03                	mov    DWORD PTR [ebx],eax
c0008966:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008969:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000896c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008973:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000897a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008981:	31 c0                	xor    eax,eax
c0008983:	83 c4 08             	add    esp,0x8
c0008986:	5b                   	pop    ebx
c0008987:	c3                   	ret    

c0008988 <src_new>:
c0008988:	57                   	push   edi
c0008989:	56                   	push   esi
c000898a:	53                   	push   ebx
c000898b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000898f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008993:	85 f6                	test   esi,esi
c0008995:	74 73                	je     c0008a0a <src_new+0x82>
c0008997:	85 ff                	test   edi,edi
c0008999:	7f 08                	jg     c00089a3 <src_new+0x1b>
c000899b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089a1:	eb 1e                	jmp    c00089c1 <src_new+0x39>
c00089a3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089a9:	50                   	push   eax
c00089aa:	50                   	push   eax
c00089ab:	6a 3c                	push   0x3c
c00089ad:	6a 01                	push   0x1
c00089af:	e8 dc 67 00 00       	call   c000f190 <calloc>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	89 c3                	mov    ebx,eax
c00089b9:	85 c0                	test   eax,eax
c00089bb:	75 10                	jne    c00089cd <src_new+0x45>
c00089bd:	85 f6                	test   esi,esi
c00089bf:	75 04                	jne    c00089c5 <src_new+0x3d>
c00089c1:	31 db                	xor    ebx,ebx
c00089c3:	eb 4b                	jmp    c0008a10 <src_new+0x88>
c00089c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089cb:	eb 43                	jmp    c0008a10 <src_new+0x88>
c00089cd:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089d0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089db:	e8 a2 fb ff ff       	call   c0008582 <psrc_set_converter>
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 18                	je     c00089fc <src_new+0x74>
c00089e4:	85 f6                	test   esi,esi
c00089e6:	74 06                	je     c00089ee <src_new+0x66>
c00089e8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089ee:	83 ec 0c             	sub    esp,0xc
c00089f1:	53                   	push   ebx
c00089f2:	31 db                	xor    ebx,ebx
c00089f4:	e8 77 67 00 00       	call   c000f170 <free>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 37 ff ff ff       	call   c000893c <src_reset>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	eb 06                	jmp    c0008a10 <src_new+0x88>
c0008a0a:	85 ff                	test   edi,edi
c0008a0c:	7f 9b                	jg     c00089a9 <src_new+0x21>
c0008a0e:	eb b1                	jmp    c00089c1 <src_new+0x39>
c0008a10:	89 d8                	mov    eax,ebx
c0008a12:	5b                   	pop    ebx
c0008a13:	5e                   	pop    esi
c0008a14:	5f                   	pop    edi
c0008a15:	c3                   	ret    

c0008a16 <src_callback_new>:
c0008a16:	56                   	push   esi
c0008a17:	53                   	push   ebx
c0008a18:	53                   	push   ebx
c0008a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a21:	85 f6                	test   esi,esi
c0008a23:	75 0e                	jne    c0008a33 <src_callback_new+0x1d>
c0008a25:	31 db                	xor    ebx,ebx
c0008a27:	85 c0                	test   eax,eax
c0008a29:	74 47                	je     c0008a72 <src_callback_new+0x5c>
c0008a2b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a31:	eb 3f                	jmp    c0008a72 <src_callback_new+0x5c>
c0008a33:	85 c0                	test   eax,eax
c0008a35:	74 06                	je     c0008a3d <src_callback_new+0x27>
c0008a37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3d:	51                   	push   ecx
c0008a3e:	50                   	push   eax
c0008a3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a47:	e8 3c ff ff ff       	call   c0008988 <src_new>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	89 c3                	mov    ebx,eax
c0008a51:	85 c0                	test   eax,eax
c0008a53:	74 1d                	je     c0008a72 <src_callback_new+0x5c>
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	50                   	push   eax
c0008a59:	e8 de fe ff ff       	call   c000893c <src_reset>
c0008a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a62:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a69:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a6c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a6f:	83 c4 10             	add    esp,0x10
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	5a                   	pop    edx
c0008a75:	5b                   	pop    ebx
c0008a76:	5e                   	pop    esi
c0008a77:	c3                   	ret    

c0008a78 <src_get_name>:
c0008a78:	53                   	push   ebx
c0008a79:	83 ec 14             	sub    esp,0x14
c0008a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a80:	53                   	push   ebx
c0008a81:	e8 3e 4c 00 00       	call   c000d6c4 <sinc_get_name>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 1d                	jne    c0008aaa <src_get_name+0x32>
c0008a8d:	83 ec 0c             	sub    esp,0xc
c0008a90:	53                   	push   ebx
c0008a91:	e8 18 54 00 00       	call   c000deae <zoh_get_name>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	85 c0                	test   eax,eax
c0008a9b:	75 0d                	jne    c0008aaa <src_get_name+0x32>
c0008a9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aa1:	83 c4 08             	add    esp,0x8
c0008aa4:	5b                   	pop    ebx
c0008aa5:	e9 61 0b 00 00       	jmp    c000960b <linear_get_name>
c0008aaa:	83 c4 08             	add    esp,0x8
c0008aad:	5b                   	pop    ebx
c0008aae:	c3                   	ret    

c0008aaf <src_get_description>:
c0008aaf:	53                   	push   ebx
c0008ab0:	83 ec 14             	sub    esp,0x14
c0008ab3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ab7:	53                   	push   ebx
c0008ab8:	e8 1a 4c 00 00       	call   c000d6d7 <sinc_get_description>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	85 c0                	test   eax,eax
c0008ac2:	75 1d                	jne    c0008ae1 <src_get_description+0x32>
c0008ac4:	83 ec 0c             	sub    esp,0xc
c0008ac7:	53                   	push   ebx
c0008ac8:	e8 f0 53 00 00       	call   c000debd <zoh_get_description>
c0008acd:	83 c4 10             	add    esp,0x10
c0008ad0:	85 c0                	test   eax,eax
c0008ad2:	75 0d                	jne    c0008ae1 <src_get_description+0x32>
c0008ad4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ad8:	83 c4 08             	add    esp,0x8
c0008adb:	5b                   	pop    ebx
c0008adc:	e9 39 0b 00 00       	jmp    c000961a <linear_get_description>
c0008ae1:	83 c4 08             	add    esp,0x8
c0008ae4:	5b                   	pop    ebx
c0008ae5:	c3                   	ret    

c0008ae6 <src_get_version>:
c0008ae6:	b8 e0 61 02 c0       	mov    eax,0xc00261e0
c0008aeb:	c3                   	ret    

c0008aec <src_is_valid_ratio>:
c0008aec:	83 ec 14             	sub    esp,0x14
c0008aef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008af3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008af7:	e8 23 fa ff ff       	call   c000851f <is_bad_src_ratio>
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 94 c0             	sete   al
c0008b01:	83 c4 1c             	add    esp,0x1c
c0008b04:	0f b6 c0             	movzx  eax,al
c0008b07:	c3                   	ret    

c0008b08 <src_error>:
c0008b08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0c:	31 c0                	xor    eax,eax
c0008b0e:	85 d2                	test   edx,edx
c0008b10:	74 03                	je     c0008b15 <src_error+0xd>
c0008b12:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b15:	c3                   	ret    

c0008b16 <src_strerror>:
c0008b16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b1a:	31 c0                	xor    eax,eax
c0008b1c:	83 fa 17             	cmp    edx,0x17
c0008b1f:	77 07                	ja     c0008b28 <src_strerror+0x12>
c0008b21:	8b 04 95 40 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd99c0]
c0008b28:	c3                   	ret    

c0008b29 <src_simple>:
c0008b29:	56                   	push   esi
c0008b2a:	53                   	push   ebx
c0008b2b:	83 ec 18             	sub    esp,0x18
c0008b2e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b36:	50                   	push   eax
c0008b37:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3f:	e8 44 fe ff ff       	call   c0008988 <src_new>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	85 c0                	test   eax,eax
c0008b49:	75 06                	jne    c0008b51 <src_simple+0x28>
c0008b4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4f:	eb 25                	jmp    c0008b76 <src_simple+0x4d>
c0008b51:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b58:	89 c3                	mov    ebx,eax
c0008b5a:	50                   	push   eax
c0008b5b:	50                   	push   eax
c0008b5c:	56                   	push   esi
c0008b5d:	53                   	push   ebx
c0008b5e:	e8 9f fa ff ff       	call   c0008602 <src_process>
c0008b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b6a:	e8 57 fa ff ff       	call   c00085c6 <src_delete>
c0008b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b73:	83 c4 10             	add    esp,0x10
c0008b76:	83 c4 14             	add    esp,0x14
c0008b79:	5b                   	pop    ebx
c0008b7a:	5e                   	pop    esi
c0008b7b:	c3                   	ret    

c0008b7c <src_short_to_float_array>:
c0008b7c:	53                   	push   ebx
c0008b7d:	83 ec 18             	sub    esp,0x18
c0008b80:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b84:	85 db                	test   ebx,ebx
c0008b86:	74 54                	je     c0008bdc <src_short_to_float_array+0x60>
c0008b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8c:	4b                   	dec    ebx
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b94:	50                   	push   eax
c0008b95:	e8 9d bf 01 00       	call   c0024b37 <__floatsidf>
c0008b9a:	83 c4 10             	add    esp,0x10
c0008b9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba5:	68 00 00 00 3f       	push   0x3f000000
c0008baa:	6a 00                	push   0x0
c0008bac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb4:	e8 1b b9 01 00       	call   c00244d4 <__muldf3>
c0008bb9:	59                   	pop    ecx
c0008bba:	59                   	pop    ecx
c0008bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bcb:	e8 d7 c1 01 00       	call   c0024da7 <__truncdfsf2>
c0008bd0:	83 c4 10             	add    esp,0x10
c0008bd3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bda:	eb a8                	jmp    c0008b84 <src_short_to_float_array+0x8>
c0008bdc:	83 c4 18             	add    esp,0x18
c0008bdf:	5b                   	pop    ebx
c0008be0:	c3                   	ret    

c0008be1 <src_float_to_short_array>:
c0008be1:	56                   	push   esi
c0008be2:	53                   	push   ebx
c0008be3:	83 ec 14             	sub    esp,0x14
c0008be6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bea:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bee:	85 db                	test   ebx,ebx
c0008bf0:	0f 84 a4 00 00 00    	je     c0008c9a <src_float_to_short_array+0xb9>
c0008bf6:	83 ec 0c             	sub    esp,0xc
c0008bf9:	4b                   	dec    ebx
c0008bfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfe:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c01:	e8 c5 c2 01 00       	call   c0024ecb <__extendsfdf2>
c0008c06:	83 c4 10             	add    esp,0x10
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c11:	68 00 00 e0 41       	push   0x41e00000
c0008c16:	6a 00                	push   0x0
c0008c18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c20:	e8 af b8 01 00       	call   c00244d4 <__muldf3>
c0008c25:	83 c4 10             	add    esp,0x10
c0008c28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c30:	68 ff ff df 41       	push   0x41dfffff
c0008c35:	68 00 00 c0 ff       	push   0xffc00000
c0008c3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c42:	e8 5a c1 01 00       	call   c0024da1 <__gedf2>
c0008c47:	83 c4 10             	add    esp,0x10
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	78 08                	js     c0008c56 <src_float_to_short_array+0x75>
c0008c4e:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c54:	eb 98                	jmp    c0008bee <src_float_to_short_array+0xd>
c0008c56:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5b:	6a 00                	push   0x0
c0008c5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c65:	e8 3b c1 01 00       	call   c0024da5 <__ledf2>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	85 c0                	test   eax,eax
c0008c6f:	7f 0b                	jg     c0008c7c <src_float_to_short_array+0x9b>
c0008c71:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c77:	e9 72 ff ff ff       	jmp    c0008bee <src_float_to_short_array+0xd>
c0008c7c:	50                   	push   eax
c0008c7d:	50                   	push   eax
c0008c7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c86:	e8 d5 c2 01 00       	call   c0024f60 <lrint>
c0008c8b:	83 c4 10             	add    esp,0x10
c0008c8e:	c1 f8 10             	sar    eax,0x10
c0008c91:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c95:	e9 54 ff ff ff       	jmp    c0008bee <src_float_to_short_array+0xd>
c0008c9a:	83 c4 14             	add    esp,0x14
c0008c9d:	5b                   	pop    ebx
c0008c9e:	5e                   	pop    esi
c0008c9f:	c3                   	ret    

c0008ca0 <src_int_to_float_array>:
c0008ca0:	53                   	push   ebx
c0008ca1:	83 ec 18             	sub    esp,0x18
c0008ca4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca8:	85 db                	test   ebx,ebx
c0008caa:	74 52                	je     c0008cfe <src_int_to_float_array+0x5e>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	4b                   	dec    ebx
c0008cb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb4:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb7:	e8 7b be 01 00       	call   c0024b37 <__floatsidf>
c0008cbc:	83 c4 10             	add    esp,0x10
c0008cbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc7:	68 00 00 00 3e       	push   0x3e000000
c0008ccc:	6a 00                	push   0x0
c0008cce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd6:	e8 f9 b7 01 00       	call   c00244d4 <__muldf3>
c0008cdb:	59                   	pop    ecx
c0008cdc:	59                   	pop    ecx
c0008cdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ced:	e8 b5 c0 01 00       	call   c0024da7 <__truncdfsf2>
c0008cf2:	83 c4 10             	add    esp,0x10
c0008cf5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf9:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfc:	eb aa                	jmp    c0008ca8 <src_int_to_float_array+0x8>
c0008cfe:	83 c4 18             	add    esp,0x18
c0008d01:	5b                   	pop    ebx
c0008d02:	c3                   	ret    

c0008d03 <src_float_to_int_array>:
c0008d03:	56                   	push   esi
c0008d04:	53                   	push   ebx
c0008d05:	83 ec 14             	sub    esp,0x14
c0008d08:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d10:	85 db                	test   ebx,ebx
c0008d12:	0f 84 a2 00 00 00    	je     c0008dba <src_float_to_int_array+0xb7>
c0008d18:	83 ec 0c             	sub    esp,0xc
c0008d1b:	4b                   	dec    ebx
c0008d1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d20:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d23:	e8 a3 c1 01 00       	call   c0024ecb <__extendsfdf2>
c0008d28:	83 c4 10             	add    esp,0x10
c0008d2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d33:	68 00 00 e0 41       	push   0x41e00000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 8d b7 01 00       	call   c00244d4 <__muldf3>
c0008d47:	83 c4 10             	add    esp,0x10
c0008d4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d52:	68 ff ff df 41       	push   0x41dfffff
c0008d57:	68 00 00 c0 ff       	push   0xffc00000
c0008d5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d64:	e8 38 c0 01 00       	call   c0024da1 <__gedf2>
c0008d69:	83 c4 10             	add    esp,0x10
c0008d6c:	85 c0                	test   eax,eax
c0008d6e:	78 09                	js     c0008d79 <src_float_to_int_array+0x76>
c0008d70:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d77:	eb 97                	jmp    c0008d10 <src_float_to_int_array+0xd>
c0008d79:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7e:	6a 00                	push   0x0
c0008d80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d88:	e8 18 c0 01 00       	call   c0024da5 <__ledf2>
c0008d8d:	83 c4 10             	add    esp,0x10
c0008d90:	85 c0                	test   eax,eax
c0008d92:	7f 0c                	jg     c0008da0 <src_float_to_int_array+0x9d>
c0008d94:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9b:	e9 70 ff ff ff       	jmp    c0008d10 <src_float_to_int_array+0xd>
c0008da0:	50                   	push   eax
c0008da1:	50                   	push   eax
c0008da2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008daa:	e8 b1 c1 01 00       	call   c0024f60 <lrint>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db5:	e9 56 ff ff ff       	jmp    c0008d10 <src_float_to_int_array+0xd>
c0008dba:	83 c4 14             	add    esp,0x14
c0008dbd:	5b                   	pop    ebx
c0008dbe:	5e                   	pop    esi
c0008dbf:	c3                   	ret    

c0008dc0 <is_bad_src_ratio>:
c0008dc0:	83 ec 1c             	sub    esp,0x1c
c0008dc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008dcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008dd3:	b8 00 00 00 00       	mov    eax,0x0
c0008dd8:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008ddd:	52                   	push   edx
c0008dde:	50                   	push   eax
c0008ddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de7:	e8 b7 bf 01 00       	call   c0024da3 <__ltdf2>
c0008dec:	83 c4 10             	add    esp,0x10
c0008def:	85 c0                	test   eax,eax
c0008df1:	78 20                	js     c0008e13 <is_bad_src_ratio+0x53>
c0008df3:	b8 00 00 00 00       	mov    eax,0x0
c0008df8:	ba 00 00 70 40       	mov    edx,0x40700000
c0008dfd:	52                   	push   edx
c0008dfe:	50                   	push   eax
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	e8 79 bf 01 00       	call   c0024d85 <__gtdf2>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	85 c0                	test   eax,eax
c0008e11:	7e 07                	jle    c0008e1a <is_bad_src_ratio+0x5a>
c0008e13:	b8 01 00 00 00       	mov    eax,0x1
c0008e18:	eb 05                	jmp    c0008e1f <is_bad_src_ratio+0x5f>
c0008e1a:	b8 00 00 00 00       	mov    eax,0x0
c0008e1f:	83 c4 1c             	add    esp,0x1c
c0008e22:	c3                   	ret    

c0008e23 <fmod_one>:
c0008e23:	83 ec 2c             	sub    esp,0x2c
c0008e26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e36:	83 ec 08             	sub    esp,0x8
c0008e39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e41:	e8 1a c1 01 00       	call   c0024f60 <lrint>
c0008e46:	83 c4 10             	add    esp,0x10
c0008e49:	83 ec 0c             	sub    esp,0xc
c0008e4c:	50                   	push   eax
c0008e4d:	e8 e5 bc 01 00       	call   c0024b37 <__floatsidf>
c0008e52:	83 c4 10             	add    esp,0x10
c0008e55:	52                   	push   edx
c0008e56:	50                   	push   eax
c0008e57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e5f:	e8 44 b6 01 00       	call   c00244a8 <__subdf3>
c0008e64:	83 c4 10             	add    esp,0x10
c0008e67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e6f:	b8 00 00 00 00       	mov    eax,0x0
c0008e74:	ba 00 00 00 00       	mov    edx,0x0
c0008e79:	52                   	push   edx
c0008e7a:	50                   	push   eax
c0008e7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e83:	e8 1b bf 01 00       	call   c0024da3 <__ltdf2>
c0008e88:	83 c4 10             	add    esp,0x10
c0008e8b:	85 c0                	test   eax,eax
c0008e8d:	79 1e                	jns    c0008ead <fmod_one+0x8a>
c0008e8f:	b8 00 00 00 00       	mov    eax,0x0
c0008e94:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e99:	52                   	push   edx
c0008e9a:	50                   	push   eax
c0008e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008ea3:	e8 af af 01 00       	call   c0023e57 <__adddf3>
c0008ea8:	83 c4 10             	add    esp,0x10
c0008eab:	eb 08                	jmp    c0008eb5 <fmod_one+0x92>
c0008ead:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008eb1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008eb5:	83 c4 2c             	add    esp,0x2c
c0008eb8:	c3                   	ret    

c0008eb9 <linear_vari_process>:
c0008eb9:	55                   	push   ebp
c0008eba:	57                   	push   edi
c0008ebb:	56                   	push   esi
c0008ebc:	53                   	push   ebx
c0008ebd:	83 ec 3c             	sub    esp,0x3c
c0008ec0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ec4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008ecc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008ed0:	0f 8e f7 06 00 00    	jle    c00095cd <linear_vari_process+0x714>
c0008ed6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008eda:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008ee2:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ee5:	85 db                	test   ebx,ebx
c0008ee7:	0f 84 e0 06 00 00    	je     c00095cd <linear_vari_process+0x714>
c0008eed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ef0:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008ef4:	74 19                	je     c0008f0f <linear_vari_process+0x56>
c0008ef6:	31 d2                	xor    edx,edx
c0008ef8:	39 c2                	cmp    edx,eax
c0008efa:	7d 0c                	jge    c0008f08 <linear_vari_process+0x4f>
c0008efc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008efe:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008f01:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008f05:	42                   	inc    edx
c0008f06:	eb f0                	jmp    c0008ef8 <linear_vari_process+0x3f>
c0008f08:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008f0f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008f12:	0f af d0             	imul   edx,eax
c0008f15:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f18:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f23:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f26:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f31:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008f34:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f36:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f3e:	57                   	push   edi
c0008f3f:	57                   	push   edi
c0008f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f48:	e8 73 fe ff ff       	call   c0008dc0 <is_bad_src_ratio>
c0008f4d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008f59:	0f 85 66 06 00 00    	jne    c00095c5 <linear_vari_process+0x70c>
c0008f5f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f63:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008f66:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f71:	68 00 00 f0 3f       	push   0x3ff00000
c0008f76:	6a 00                	push   0x0
c0008f78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f80:	e8 1e be 01 00       	call   c0024da3 <__ltdf2>
c0008f85:	83 c4 10             	add    esp,0x10
c0008f88:	85 c0                	test   eax,eax
c0008f8a:	0f 89 89 02 00 00    	jns    c0009219 <linear_vari_process+0x360>
c0008f90:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f93:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f96:	0f 8d 7d 02 00 00    	jge    c0009219 <linear_vari_process+0x360>
c0008f9c:	83 ec 0c             	sub    esp,0xc
c0008f9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008fa2:	e8 90 bb 01 00       	call   c0024b37 <__floatsidf>
c0008fa7:	83 c4 10             	add    esp,0x10
c0008faa:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fb1:	68 00 00 f0 3f       	push   0x3ff00000
c0008fb6:	6a 00                	push   0x0
c0008fb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc0:	e8 92 ae 01 00       	call   c0023e57 <__adddf3>
c0008fc5:	83 c4 10             	add    esp,0x10
c0008fc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fcc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fd0:	52                   	push   edx
c0008fd1:	50                   	push   eax
c0008fd2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fd6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fda:	e8 f5 b4 01 00       	call   c00244d4 <__muldf3>
c0008fdf:	5d                   	pop    ebp
c0008fe0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fe4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008fe8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008feb:	e8 47 bb 01 00       	call   c0024b37 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009005:	e8 4d ae 01 00       	call   c0023e57 <__adddf3>
c000900a:	59                   	pop    ecx
c000900b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000900f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009013:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009016:	e8 1c bb 01 00       	call   c0024b37 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000902c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009030:	e8 6c bd 01 00       	call   c0024da1 <__gedf2>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	85 c0                	test   eax,eax
c000903a:	0f 89 d9 01 00 00    	jns    c0009219 <linear_vari_process+0x360>
c0009040:	85 ff                	test   edi,edi
c0009042:	0f 8e f4 00 00 00    	jle    c000913c <linear_vari_process+0x283>
c0009048:	83 ec 10             	sub    esp,0x10
c000904b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000904e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009051:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009055:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009058:	ff 30                	push   DWORD PTR [eax]
c000905a:	e8 49 b4 01 00       	call   c00244a8 <__subdf3>
c000905f:	83 c4 18             	add    esp,0x18
c0009062:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009066:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000906a:	52                   	push   edx
c000906b:	50                   	push   eax
c000906c:	e8 cf be 01 00       	call   c0024f40 <fabs>
c0009071:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009075:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009079:	83 c4 10             	add    esp,0x10
c000907c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009081:	68 23 42 92 0c       	push   0xc924223
c0009086:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000908a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000908e:	e8 f2 bc 01 00       	call   c0024d85 <__gtdf2>
c0009093:	83 c4 10             	add    esp,0x10
c0009096:	85 c0                	test   eax,eax
c0009098:	0f 8e 9e 00 00 00    	jle    c000913c <linear_vari_process+0x283>
c000909e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090a2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00090a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ae:	52                   	push   edx
c00090af:	50                   	push   eax
c00090b0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00090b3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00090b6:	e8 ed b3 01 00       	call   c00244a8 <__subdf3>
c00090bb:	59                   	pop    ecx
c00090bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090c0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090c4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00090c7:	e8 6b ba 01 00       	call   c0024b37 <__floatsidf>
c00090cc:	83 c4 10             	add    esp,0x10
c00090cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090d7:	52                   	push   edx
c00090d8:	50                   	push   eax
c00090d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e1:	e8 ee b3 01 00       	call   c00244d4 <__muldf3>
c00090e6:	5f                   	pop    edi
c00090e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090eb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00090f2:	e8 40 ba 01 00       	call   c0024b37 <__floatsidf>
c00090f7:	83 c4 10             	add    esp,0x10
c00090fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009102:	52                   	push   edx
c0009103:	50                   	push   eax
c0009104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000910c:	e8 a7 b6 01 00       	call   c00247b8 <__divdf3>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009118:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000911c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009120:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912c:	e8 26 ad 01 00       	call   c0023e57 <__adddf3>
c0009131:	83 c4 10             	add    esp,0x10
c0009134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009138:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000913c:	31 ff                	xor    edi,edi
c000913e:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009141:	0f 8e 9d 00 00 00    	jle    c00091e4 <linear_vari_process+0x32b>
c0009147:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000914a:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c000914e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009151:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009155:	89 04 24             	mov    DWORD PTR [esp],eax
c0009158:	8b 06                	mov    eax,DWORD PTR [esi]
c000915a:	52                   	push   edx
c000915b:	52                   	push   edx
c000915c:	55                   	push   ebp
c000915d:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009160:	47                   	inc    edi
c0009161:	e8 86 a6 01 00       	call   c00237ec <__subsf3>
c0009166:	89 04 24             	mov    DWORD PTR [esp],eax
c0009169:	e8 5d bd 01 00       	call   c0024ecb <__extendsfdf2>
c000916e:	83 c4 10             	add    esp,0x10
c0009171:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009175:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009185:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009189:	e8 46 b3 01 00       	call   c00244d4 <__muldf3>
c000918e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009191:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009195:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009199:	e8 2d bd 01 00       	call   c0024ecb <__extendsfdf2>
c000919e:	83 c4 10             	add    esp,0x10
c00091a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091a5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091a9:	52                   	push   edx
c00091aa:	50                   	push   eax
c00091ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b3:	e8 9f ac 01 00       	call   c0023e57 <__adddf3>
c00091b8:	59                   	pop    ecx
c00091b9:	5d                   	pop    ebp
c00091ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091be:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ca:	e8 d8 bb 01 00       	call   c0024da7 <__truncdfsf2>
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00091d5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00091d9:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00091dc:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00091df:	e9 5a ff ff ff       	jmp    c000913e <linear_vari_process+0x285>
c00091e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ec:	68 00 00 f0 3f       	push   0x3ff00000
c00091f1:	6a 00                	push   0x0
c00091f3:	e8 c0 b5 01 00       	call   c00247b8 <__divdf3>
c00091f8:	83 c4 10             	add    esp,0x10
c00091fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00091fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009202:	52                   	push   edx
c0009203:	50                   	push   eax
c0009204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000920c:	e8 46 ac 01 00       	call   c0023e57 <__adddf3>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	e9 50 fd ff ff       	jmp    c0008f69 <linear_vari_process+0xb0>
c0009219:	50                   	push   eax
c000921a:	50                   	push   eax
c000921b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009223:	e8 fb fb ff ff       	call   c0008e23 <fmod_one>
c0009228:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000922b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000922f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009233:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009237:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000923f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009243:	e8 60 b2 01 00       	call   c00244a8 <__subdf3>
c0009248:	83 c4 18             	add    esp,0x18
c000924b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000924f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	e8 06 bd 01 00       	call   c0024f60 <lrint>
c000925a:	83 c4 10             	add    esp,0x10
c000925d:	0f af f8             	imul   edi,eax
c0009260:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009263:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009266:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009269:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000926c:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000926f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009273:	0f 8d b4 02 00 00    	jge    c000952d <linear_vari_process+0x674>
c0009279:	83 ec 0c             	sub    esp,0xc
c000927c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000927f:	e8 b3 b8 01 00       	call   c0024b37 <__floatsidf>
c0009284:	83 c4 10             	add    esp,0x10
c0009287:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000928b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000928f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009293:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009297:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000929b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000929f:	e8 30 b2 01 00       	call   c00244d4 <__muldf3>
c00092a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00092a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092af:	e8 83 b8 01 00       	call   c0024b37 <__floatsidf>
c00092b4:	83 c4 10             	add    esp,0x10
c00092b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092bf:	52                   	push   edx
c00092c0:	50                   	push   eax
c00092c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c9:	e8 89 ab 01 00       	call   c0023e57 <__adddf3>
c00092ce:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092d9:	e8 59 b8 01 00       	call   c0024b37 <__floatsidf>
c00092de:	83 c4 10             	add    esp,0x10
c00092e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092e9:	52                   	push   edx
c00092ea:	50                   	push   eax
c00092eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f3:	e8 ab ba 01 00       	call   c0024da3 <__ltdf2>
c00092f8:	83 c4 10             	add    esp,0x10
c00092fb:	85 c0                	test   eax,eax
c00092fd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009301:	0f 89 26 02 00 00    	jns    c000952d <linear_vari_process+0x674>
c0009307:	85 c9                	test   ecx,ecx
c0009309:	0f 8e f5 00 00 00    	jle    c0009404 <linear_vari_process+0x54b>
c000930f:	83 ec 10             	sub    esp,0x10
c0009312:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009315:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009318:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000931c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000931f:	ff 30                	push   DWORD PTR [eax]
c0009321:	e8 82 b1 01 00       	call   c00244a8 <__subdf3>
c0009326:	83 c4 18             	add    esp,0x18
c0009329:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000932d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009331:	52                   	push   edx
c0009332:	50                   	push   eax
c0009333:	e8 08 bc 01 00       	call   c0024f40 <fabs>
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	83 c4 10             	add    esp,0x10
c0009343:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009348:	68 23 42 92 0c       	push   0xc924223
c000934d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009355:	e8 2b ba 01 00       	call   c0024d85 <__gtdf2>
c000935a:	83 c4 10             	add    esp,0x10
c000935d:	85 c0                	test   eax,eax
c000935f:	0f 8e 9f 00 00 00    	jle    c0009404 <linear_vari_process+0x54b>
c0009365:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009369:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000936c:	8b 00                	mov    eax,DWORD PTR [eax]
c000936e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009372:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000937b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000937e:	e8 25 b1 01 00       	call   c00244a8 <__subdf3>
c0009383:	5f                   	pop    edi
c0009384:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009388:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000938c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000938f:	e8 a3 b7 01 00       	call   c0024b37 <__floatsidf>
c0009394:	83 c4 10             	add    esp,0x10
c0009397:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000939b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000939f:	52                   	push   edx
c00093a0:	50                   	push   eax
c00093a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a9:	e8 26 b1 01 00       	call   c00244d4 <__muldf3>
c00093ae:	5d                   	pop    ebp
c00093af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093b3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00093b7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00093ba:	e8 78 b7 01 00       	call   c0024b37 <__floatsidf>
c00093bf:	83 c4 10             	add    esp,0x10
c00093c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093ca:	52                   	push   edx
c00093cb:	50                   	push   eax
c00093cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d4:	e8 df b3 01 00       	call   c00247b8 <__divdf3>
c00093d9:	83 c4 10             	add    esp,0x10
c00093dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093f4:	e8 5e aa 01 00       	call   c0023e57 <__adddf3>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009400:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009404:	31 ff                	xor    edi,edi
c0009406:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009409:	39 f8                	cmp    eax,edi
c000940b:	0f 8e ac 00 00 00    	jle    c00094bd <linear_vari_process+0x604>
c0009411:	8b 16                	mov    edx,DWORD PTR [esi]
c0009413:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009416:	29 c1                	sub    ecx,eax
c0009418:	89 c8                	mov    eax,ecx
c000941a:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000941d:	01 f8                	add    eax,edi
c000941f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009423:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009426:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009429:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000942d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009430:	51                   	push   ecx
c0009431:	01 f8                	add    eax,edi
c0009433:	51                   	push   ecx
c0009434:	47                   	inc    edi
c0009435:	55                   	push   ebp
c0009436:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009439:	e8 ae a3 01 00       	call   c00237ec <__subsf3>
c000943e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009441:	e8 85 ba 01 00       	call   c0024ecb <__extendsfdf2>
c0009446:	83 c4 10             	add    esp,0x10
c0009449:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000944d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009451:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009455:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009461:	e8 6e b0 01 00       	call   c00244d4 <__muldf3>
c0009466:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000946d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009471:	e8 55 ba 01 00       	call   c0024ecb <__extendsfdf2>
c0009476:	83 c4 10             	add    esp,0x10
c0009479:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000947d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009481:	52                   	push   edx
c0009482:	50                   	push   eax
c0009483:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009487:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000948b:	e8 c7 a9 01 00       	call   c0023e57 <__adddf3>
c0009490:	5d                   	pop    ebp
c0009491:	59                   	pop    ecx
c0009492:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009496:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000949a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000949e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a2:	e8 00 b9 01 00       	call   c0024da7 <__truncdfsf2>
c00094a7:	83 c4 10             	add    esp,0x10
c00094aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00094ae:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00094b2:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00094b5:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00094b8:	e9 49 ff ff ff       	jmp    c0009406 <linear_vari_process+0x54d>
c00094bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c5:	68 00 00 f0 3f       	push   0x3ff00000
c00094ca:	6a 00                	push   0x0
c00094cc:	e8 e7 b2 01 00       	call   c00247b8 <__divdf3>
c00094d1:	83 c4 10             	add    esp,0x10
c00094d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094dc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094e0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ec:	e8 66 a9 01 00       	call   c0023e57 <__adddf3>
c00094f1:	59                   	pop    ecx
c00094f2:	5f                   	pop    edi
c00094f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009503:	e8 1b f9 ff ff       	call   c0008e23 <fmod_one>
c0009508:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000950b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000950f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 80 af 01 00       	call   c00244a8 <__subdf3>
c0009528:	e9 1b fd ff ff       	jmp    c0009248 <linear_vari_process+0x38f>
c000952d:	39 fd                	cmp    ebp,edi
c000952f:	7d 38                	jge    c0009569 <linear_vari_process+0x6b0>
c0009531:	83 ec 0c             	sub    esp,0xc
c0009534:	89 f8                	mov    eax,edi
c0009536:	29 e8                	sub    eax,ebp
c0009538:	99                   	cdq    
c0009539:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000953c:	50                   	push   eax
c000953d:	e8 f5 b5 01 00       	call   c0024b37 <__floatsidf>
c0009542:	83 c4 10             	add    esp,0x10
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	52                   	push   edx
c000954e:	50                   	push   eax
c000954f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009553:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009557:	e8 fb a8 01 00       	call   c0023e57 <__adddf3>
c000955c:	83 c4 10             	add    esp,0x10
c000955f:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009562:	89 04 24             	mov    DWORD PTR [esp],eax
c0009565:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009569:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000956d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009574:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009577:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000957a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000957d:	85 c0                	test   eax,eax
c000957f:	7f 27                	jg     c00095a8 <linear_vari_process+0x6ef>
c0009581:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009589:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000958d:	89 01                	mov    DWORD PTR [ecx],eax
c000958f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009592:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009595:	99                   	cdq    
c0009596:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009599:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000959c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000959f:	99                   	cdq    
c00095a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095a3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095a6:	eb 25                	jmp    c00095cd <linear_vari_process+0x714>
c00095a8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095ab:	31 d2                	xor    edx,edx
c00095ad:	29 c8                	sub    eax,ecx
c00095af:	c1 e0 02             	shl    eax,0x2
c00095b2:	39 d1                	cmp    ecx,edx
c00095b4:	7e cb                	jle    c0009581 <linear_vari_process+0x6c8>
c00095b6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095b8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095bb:	83 c0 04             	add    eax,0x4
c00095be:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095c2:	42                   	inc    edx
c00095c3:	eb ed                	jmp    c00095b2 <linear_vari_process+0x6f9>
c00095c5:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c00095cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095d1:	83 c4 3c             	add    esp,0x3c
c00095d4:	5b                   	pop    ebx
c00095d5:	5e                   	pop    esi
c00095d6:	5f                   	pop    edi
c00095d7:	5d                   	pop    ebp
c00095d8:	c3                   	ret    

c00095d9 <linear_reset>:
c00095d9:	83 ec 0c             	sub    esp,0xc
c00095dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095e0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095e3:	85 c0                	test   eax,eax
c00095e5:	74 20                	je     c0009607 <linear_reset+0x2e>
c00095e7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095ea:	83 c0 1c             	add    eax,0x1c
c00095ed:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095f0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095f7:	c1 e2 02             	shl    edx,0x2
c00095fa:	51                   	push   ecx
c00095fb:	52                   	push   edx
c00095fc:	6a 00                	push   0x0
c00095fe:	50                   	push   eax
c00095ff:	e8 e2 70 ff ff       	call   c00006e6 <memset>
c0009604:	83 c4 10             	add    esp,0x10
c0009607:	83 c4 0c             	add    esp,0xc
c000960a:	c3                   	ret    

c000960b <linear_get_name>:
c000960b:	31 c0                	xor    eax,eax
c000960d:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009612:	75 05                	jne    c0009619 <linear_get_name+0xe>
c0009614:	b8 a0 66 02 c0       	mov    eax,0xc00266a0
c0009619:	c3                   	ret    

c000961a <linear_get_description>:
c000961a:	31 c0                	xor    eax,eax
c000961c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009621:	75 05                	jne    c0009628 <linear_get_description+0xe>
c0009623:	b8 b4 66 02 c0       	mov    eax,0xc00266b4
c0009628:	c3                   	ret    

c0009629 <linear_set_converter>:
c0009629:	53                   	push   ebx
c000962a:	b8 0a 00 00 00       	mov    eax,0xa
c000962f:	83 ec 08             	sub    esp,0x8
c0009632:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009636:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000963b:	75 6e                	jne    c00096ab <linear_set_converter+0x82>
c000963d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009640:	85 c0                	test   eax,eax
c0009642:	74 13                	je     c0009657 <linear_set_converter+0x2e>
c0009644:	83 ec 0c             	sub    esp,0xc
c0009647:	50                   	push   eax
c0009648:	e8 23 5b 00 00       	call   c000f170 <free>
c000964d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	50                   	push   eax
c0009658:	50                   	push   eax
c0009659:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000965c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009663:	50                   	push   eax
c0009664:	6a 01                	push   0x1
c0009666:	e8 25 5b 00 00       	call   c000f190 <calloc>
c000966b:	83 c4 10             	add    esp,0x10
c000966e:	89 c2                	mov    edx,eax
c0009670:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009673:	85 d2                	test   edx,edx
c0009675:	b8 01 00 00 00       	mov    eax,0x1
c000967a:	74 2f                	je     c00096ab <linear_set_converter+0x82>
c000967c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000967f:	83 ec 0c             	sub    esp,0xc
c0009682:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009685:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000968b:	c7 43 24 b9 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008eb9
c0009692:	c7 43 20 b9 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008eb9
c0009699:	c7 43 28 d9 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d9
c00096a0:	53                   	push   ebx
c00096a1:	e8 33 ff ff ff       	call   c00095d9 <linear_reset>
c00096a6:	83 c4 10             	add    esp,0x10
c00096a9:	31 c0                	xor    eax,eax
c00096ab:	83 c4 08             	add    esp,0x8
c00096ae:	5b                   	pop    ebx
c00096af:	c3                   	ret    

c00096b0 <is_bad_src_ratio>:
c00096b0:	83 ec 1c             	sub    esp,0x1c
c00096b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00096b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00096bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096c3:	b8 00 00 00 00       	mov    eax,0x0
c00096c8:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00096cd:	52                   	push   edx
c00096ce:	50                   	push   eax
c00096cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d7:	e8 c7 b6 01 00       	call   c0024da3 <__ltdf2>
c00096dc:	83 c4 10             	add    esp,0x10
c00096df:	85 c0                	test   eax,eax
c00096e1:	78 20                	js     c0009703 <is_bad_src_ratio+0x53>
c00096e3:	b8 00 00 00 00       	mov    eax,0x0
c00096e8:	ba 00 00 70 40       	mov    edx,0x40700000
c00096ed:	52                   	push   edx
c00096ee:	50                   	push   eax
c00096ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f7:	e8 89 b6 01 00       	call   c0024d85 <__gtdf2>
c00096fc:	83 c4 10             	add    esp,0x10
c00096ff:	85 c0                	test   eax,eax
c0009701:	7e 07                	jle    c000970a <is_bad_src_ratio+0x5a>
c0009703:	b8 01 00 00 00       	mov    eax,0x1
c0009708:	eb 05                	jmp    c000970f <is_bad_src_ratio+0x5f>
c000970a:	b8 00 00 00 00       	mov    eax,0x0
c000970f:	83 c4 1c             	add    esp,0x1c
c0009712:	c3                   	ret    

c0009713 <int_to_fp>:
c0009713:	c1 e0 0c             	shl    eax,0xc
c0009716:	c3                   	ret    

c0009717 <fp_to_int>:
c0009717:	c1 f8 0c             	sar    eax,0xc
c000971a:	c3                   	ret    

c000971b <fp_fraction_part>:
c000971b:	25 ff 0f 00 00       	and    eax,0xfff
c0009720:	c3                   	ret    

c0009721 <fp_to_double>:
c0009721:	83 ec 1c             	sub    esp,0x1c
c0009724:	e8 f2 ff ff ff       	call   c000971b <fp_fraction_part>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	50                   	push   eax
c000972d:	e8 05 b4 01 00       	call   c0024b37 <__floatsidf>
c0009732:	83 c4 10             	add    esp,0x10
c0009735:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009739:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000973d:	68 00 00 30 3f       	push   0x3f300000
c0009742:	6a 00                	push   0x0
c0009744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009748:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974c:	e8 83 ad 01 00       	call   c00244d4 <__muldf3>
c0009751:	83 c4 2c             	add    esp,0x2c
c0009754:	c3                   	ret    

c0009755 <calc_output_single>:
c0009755:	55                   	push   ebp
c0009756:	57                   	push   edi
c0009757:	56                   	push   esi
c0009758:	89 c6                	mov    esi,eax
c000975a:	53                   	push   ebx
c000975b:	89 d3                	mov    ebx,edx
c000975d:	83 ec 4c             	sub    esp,0x4c
c0009760:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009764:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009767:	e8 a7 ff ff ff       	call   c0009713 <int_to_fp>
c000976c:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000976f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009773:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009777:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000977b:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000977e:	99                   	cdq    
c000977f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009787:	f7 fb                	idiv   ebx
c0009789:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009791:	89 da                	mov    edx,ebx
c0009793:	0f af d0             	imul   edx,eax
c0009796:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000979a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000979e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00097a2:	29 c2                	sub    edx,eax
c00097a4:	8d 2c 96             	lea    ebp,[esi+edx*4]
c00097a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097ab:	83 c5 04             	add    ebp,0x4
c00097ae:	e8 6e ff ff ff       	call   c0009721 <fp_to_double>
c00097b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bf:	e8 53 ff ff ff       	call   c0009717 <fp_to_int>
c00097c4:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00097c7:	52                   	push   edx
c00097c8:	52                   	push   edx
c00097c9:	51                   	push   ecx
c00097ca:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00097ce:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00097d2:	e8 15 a0 01 00       	call   c00237ec <__subsf3>
c00097d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00097da:	e8 ec b6 01 00       	call   c0024ecb <__extendsfdf2>
c00097df:	83 c4 10             	add    esp,0x10
c00097e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097e6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097fa:	e8 d5 ac 01 00       	call   c00244d4 <__muldf3>
c00097ff:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009803:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009807:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000980a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000980e:	e8 b8 b6 01 00       	call   c0024ecb <__extendsfdf2>
c0009813:	83 c4 10             	add    esp,0x10
c0009816:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000981a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000981e:	52                   	push   edx
c000981f:	50                   	push   eax
c0009820:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009824:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009828:	e8 2a a6 01 00       	call   c0023e57 <__adddf3>
c000982d:	59                   	pop    ecx
c000982e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009832:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009836:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c000983c:	e8 8a b6 01 00       	call   c0024ecb <__extendsfdf2>
c0009841:	83 c4 10             	add    esp,0x10
c0009844:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009848:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000984c:	52                   	push   edx
c000984d:	50                   	push   eax
c000984e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009852:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009856:	e8 79 ac 01 00       	call   c00244d4 <__muldf3>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009862:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009866:	52                   	push   edx
c0009867:	50                   	push   eax
c0009868:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000986c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009870:	e8 e2 a5 01 00       	call   c0023e57 <__adddf3>
c0009875:	83 c4 10             	add    esp,0x10
c0009878:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000987c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009880:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009884:	0f 89 1d ff ff ff    	jns    c00097a7 <calc_output_single+0x52>
c000988a:	89 d9                	mov    ecx,ebx
c000988c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009890:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009894:	89 dd                	mov    ebp,ebx
c0009896:	29 c8                	sub    eax,ecx
c0009898:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00098a0:	99                   	cdq    
c00098a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00098a9:	f7 fb                	idiv   ebx
c00098ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00098af:	0f af e8             	imul   ebp,eax
c00098b2:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c00098b6:	01 cd                	add    ebp,ecx
c00098b8:	8d 34 86             	lea    esi,[esi+eax*4]
c00098bb:	89 e8                	mov    eax,ebp
c00098bd:	83 ee 04             	sub    esi,0x4
c00098c0:	e8 5c fe ff ff       	call   c0009721 <fp_to_double>
c00098c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098cd:	89 e8                	mov    eax,ebp
c00098cf:	29 dd                	sub    ebp,ebx
c00098d1:	e8 41 fe ff ff       	call   c0009717 <fp_to_int>
c00098d6:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00098d9:	52                   	push   edx
c00098da:	52                   	push   edx
c00098db:	51                   	push   ecx
c00098dc:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00098e0:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00098e4:	e8 03 9f 01 00       	call   c00237ec <__subsf3>
c00098e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00098ec:	e8 da b5 01 00       	call   c0024ecb <__extendsfdf2>
c00098f1:	83 c4 10             	add    esp,0x10
c00098f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009904:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009908:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000990c:	e8 c3 ab 01 00       	call   c00244d4 <__muldf3>
c0009911:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009915:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009919:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000991c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009920:	e8 a6 b5 01 00       	call   c0024ecb <__extendsfdf2>
c0009925:	83 c4 10             	add    esp,0x10
c0009928:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000992c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009930:	52                   	push   edx
c0009931:	50                   	push   eax
c0009932:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009936:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000993a:	e8 18 a5 01 00       	call   c0023e57 <__adddf3>
c000993f:	59                   	pop    ecx
c0009940:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009944:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009948:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000994e:	e8 78 b5 01 00       	call   c0024ecb <__extendsfdf2>
c0009953:	83 c4 10             	add    esp,0x10
c0009956:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000995a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000995e:	52                   	push   edx
c000995f:	50                   	push   eax
c0009960:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009964:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009968:	e8 67 ab 01 00       	call   c00244d4 <__muldf3>
c000996d:	83 c4 10             	add    esp,0x10
c0009970:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009974:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009978:	52                   	push   edx
c0009979:	50                   	push   eax
c000997a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009982:	e8 d0 a4 01 00       	call   c0023e57 <__adddf3>
c0009987:	83 c4 10             	add    esp,0x10
c000998a:	85 ed                	test   ebp,ebp
c000998c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009990:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009994:	0f 8f 21 ff ff ff    	jg     c00098bb <calc_output_single+0x166>
c000999a:	52                   	push   edx
c000999b:	50                   	push   eax
c000999c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099a4:	e8 ae a4 01 00       	call   c0023e57 <__adddf3>
c00099a9:	83 c4 5c             	add    esp,0x5c
c00099ac:	5b                   	pop    ebx
c00099ad:	5e                   	pop    esi
c00099ae:	5f                   	pop    edi
c00099af:	5d                   	pop    ebp
c00099b0:	c3                   	ret    

c00099b1 <calc_output_stereo>:
c00099b1:	55                   	push   ebp
c00099b2:	89 cd                	mov    ebp,ecx
c00099b4:	57                   	push   edi
c00099b5:	56                   	push   esi
c00099b6:	53                   	push   ebx
c00099b7:	89 c3                	mov    ebx,eax
c00099b9:	83 ec 6c             	sub    esp,0x6c
c00099bc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00099c7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00099ce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00099d2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00099d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099d9:	e8 35 fd ff ff       	call   c0009713 <int_to_fp>
c00099de:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00099e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ea:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099f2:	29 c8                	sub    eax,ecx
c00099f4:	99                   	cdq    
c00099f5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099fd:	0f af d0             	imul   edx,eax
c0009a00:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009a03:	31 d2                	xor    edx,edx
c0009a05:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009a09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009a0d:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009a10:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009a14:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009a17:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009a1b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009a1f:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009a22:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009a27:	29 c1                	sub    ecx,eax
c0009a29:	31 c0                	xor    eax,eax
c0009a2b:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009a2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a36:	83 c7 08             	add    edi,0x8
c0009a39:	e8 e3 fc ff ff       	call   c0009721 <fp_to_double>
c0009a3e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009a42:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009a46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a4a:	e8 c8 fc ff ff       	call   c0009717 <fp_to_int>
c0009a4f:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a52:	52                   	push   edx
c0009a53:	52                   	push   edx
c0009a54:	51                   	push   ecx
c0009a55:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a59:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a5d:	e8 8a 9d 01 00       	call   c00237ec <__subsf3>
c0009a62:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a65:	e8 61 b4 01 00       	call   c0024ecb <__extendsfdf2>
c0009a6a:	83 c4 10             	add    esp,0x10
c0009a6d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a71:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a7d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a81:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a85:	e8 4a aa 01 00       	call   c00244d4 <__muldf3>
c0009a8a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a8e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a92:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a95:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a99:	e8 2d b4 01 00       	call   c0024ecb <__extendsfdf2>
c0009a9e:	83 c4 10             	add    esp,0x10
c0009aa1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aa5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aa9:	52                   	push   edx
c0009aaa:	50                   	push   eax
c0009aab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009aaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009ab3:	e8 9f a3 01 00       	call   c0023e57 <__adddf3>
c0009ab8:	59                   	pop    ecx
c0009ab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009abd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009ac1:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ac7:	e8 ff b3 01 00       	call   c0024ecb <__extendsfdf2>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009adb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009adf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae7:	e8 e8 a9 01 00       	call   c00244d4 <__muldf3>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009af3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009afd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b01:	e8 51 a3 01 00       	call   c0023e57 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b0b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009b0f:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009b15:	e8 b1 b3 01 00       	call   c0024ecb <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009b21:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009b25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b35:	e8 9a a9 01 00       	call   c00244d4 <__muldf3>
c0009b3a:	83 c4 10             	add    esp,0x10
c0009b3d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009b41:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009b45:	52                   	push   edx
c0009b46:	50                   	push   eax
c0009b47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b4f:	e8 03 a3 01 00       	call   c0023e57 <__adddf3>
c0009b54:	83 c4 10             	add    esp,0x10
c0009b57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b5f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b63:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b67:	0f 89 c5 fe ff ff    	jns    c0009a32 <calc_output_stereo+0x81>
c0009b6d:	29 e9                	sub    ecx,ebp
c0009b6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b73:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b77:	29 c8                	sub    eax,ecx
c0009b79:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	31 d2                	xor    edx,edx
c0009b88:	0f af f8             	imul   edi,eax
c0009b8b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b8f:	40                   	inc    eax
c0009b90:	01 cf                	add    edi,ecx
c0009b92:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b97:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b9b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009ba3:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009ba6:	31 c0                	xor    eax,eax
c0009ba8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009bac:	89 f8                	mov    eax,edi
c0009bae:	83 eb 08             	sub    ebx,0x8
c0009bb1:	e8 6b fb ff ff       	call   c0009721 <fp_to_double>
c0009bb6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bbe:	89 f8                	mov    eax,edi
c0009bc0:	e8 52 fb ff ff       	call   c0009717 <fp_to_int>
c0009bc5:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009bc8:	52                   	push   edx
c0009bc9:	52                   	push   edx
c0009bca:	55                   	push   ebp
c0009bcb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bcf:	e8 18 9c 01 00       	call   c00237ec <__subsf3>
c0009bd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bd7:	e8 ef b2 01 00       	call   c0024ecb <__extendsfdf2>
c0009bdc:	83 c4 10             	add    esp,0x10
c0009bdf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009be3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bf7:	e8 d8 a8 01 00       	call   c00244d4 <__muldf3>
c0009bfc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009bff:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009c03:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009c07:	e8 bf b2 01 00       	call   c0024ecb <__extendsfdf2>
c0009c0c:	83 c4 10             	add    esp,0x10
c0009c0f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c13:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c17:	52                   	push   edx
c0009c18:	50                   	push   eax
c0009c19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c21:	e8 31 a2 01 00       	call   c0023e57 <__adddf3>
c0009c26:	59                   	pop    ecx
c0009c27:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009c2b:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009c2f:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009c35:	e8 91 b2 01 00       	call   c0024ecb <__extendsfdf2>
c0009c3a:	83 c4 10             	add    esp,0x10
c0009c3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c55:	e8 7a a8 01 00       	call   c00244d4 <__muldf3>
c0009c5a:	83 c4 10             	add    esp,0x10
c0009c5d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c61:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c65:	52                   	push   edx
c0009c66:	50                   	push   eax
c0009c67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c6f:	e8 e3 a1 01 00       	call   c0023e57 <__adddf3>
c0009c74:	5d                   	pop    ebp
c0009c75:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c79:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c7d:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c83:	e8 43 b2 01 00       	call   c0024ecb <__extendsfdf2>
c0009c88:	83 c4 10             	add    esp,0x10
c0009c8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ca3:	e8 2c a8 01 00       	call   c00244d4 <__muldf3>
c0009ca8:	83 c4 10             	add    esp,0x10
c0009cab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009caf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009cb3:	52                   	push   edx
c0009cb4:	50                   	push   eax
c0009cb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009cb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009cbd:	e8 95 a1 01 00       	call   c0023e57 <__adddf3>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009cc9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ccd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009cd1:	85 ff                	test   edi,edi
c0009cd3:	0f 8f d3 fe ff ff    	jg     c0009bac <calc_output_stereo+0x1fb>
c0009cd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce9:	e8 69 a1 01 00       	call   c0023e57 <__adddf3>
c0009cee:	83 c4 10             	add    esp,0x10
c0009cf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cf5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d09:	e8 c6 a7 01 00       	call   c00244d4 <__muldf3>
c0009d0e:	59                   	pop    ecx
c0009d0f:	5b                   	pop    ebx
c0009d10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d20:	e8 82 b0 01 00       	call   c0024da7 <__truncdfsf2>
c0009d25:	83 c4 10             	add    esp,0x10
c0009d28:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009d2f:	89 03                	mov    DWORD PTR [ebx],eax
c0009d31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d41:	e8 11 a1 01 00       	call   c0023e57 <__adddf3>
c0009d46:	83 c4 10             	add    esp,0x10
c0009d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d61:	e8 6e a7 01 00       	call   c00244d4 <__muldf3>
c0009d66:	5e                   	pop    esi
c0009d67:	5f                   	pop    edi
c0009d68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d78:	e8 2a b0 01 00       	call   c0024da7 <__truncdfsf2>
c0009d7d:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d87:	83 c4 7c             	add    esp,0x7c
c0009d8a:	5b                   	pop    ebx
c0009d8b:	5e                   	pop    esi
c0009d8c:	5f                   	pop    edi
c0009d8d:	5d                   	pop    ebp
c0009d8e:	c3                   	ret    

c0009d8f <calc_output_quad>:
c0009d8f:	55                   	push   ebp
c0009d90:	57                   	push   edi
c0009d91:	56                   	push   esi
c0009d92:	89 c6                	mov    esi,eax
c0009d94:	53                   	push   ebx
c0009d95:	83 ec 7c             	sub    esp,0x7c
c0009d98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d9c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009da0:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009da7:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009dae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009db2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009db6:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009db9:	e8 55 f9 ff ff       	call   c0009713 <int_to_fp>
c0009dbe:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009dc1:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009dc4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009dc8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009dcc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009dd0:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009dd4:	99                   	cdq    
c0009dd5:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009dd9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ddd:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009de0:	31 d2                	xor    edx,edx
c0009de2:	0f af d8             	imul   ebx,eax
c0009de5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009ded:	0f af c7             	imul   eax,edi
c0009df0:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009df4:	29 c1                	sub    ecx,eax
c0009df6:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009dfe:	31 c0                	xor    eax,eax
c0009e00:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009e03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e0b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e0f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009e17:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009e1b:	89 d8                	mov    eax,ebx
c0009e1d:	83 c7 10             	add    edi,0x10
c0009e20:	e8 fc f8 ff ff       	call   c0009721 <fp_to_double>
c0009e25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009e29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e2d:	89 d8                	mov    eax,ebx
c0009e2f:	e8 e3 f8 ff ff       	call   c0009717 <fp_to_int>
c0009e34:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009e38:	52                   	push   edx
c0009e39:	52                   	push   edx
c0009e3a:	51                   	push   ecx
c0009e3b:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009e3f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009e43:	e8 a4 99 01 00       	call   c00237ec <__subsf3>
c0009e48:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e4b:	e8 7b b0 01 00       	call   c0024ecb <__extendsfdf2>
c0009e50:	83 c4 10             	add    esp,0x10
c0009e53:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e57:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e63:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e67:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e6b:	e8 64 a6 01 00       	call   c00244d4 <__muldf3>
c0009e70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e78:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e7f:	e8 47 b0 01 00       	call   c0024ecb <__extendsfdf2>
c0009e84:	83 c4 10             	add    esp,0x10
c0009e87:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e8b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e8f:	52                   	push   edx
c0009e90:	50                   	push   eax
c0009e91:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e99:	e8 b9 9f 01 00       	call   c0023e57 <__adddf3>
c0009e9e:	59                   	pop    ecx
c0009e9f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ea3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ea7:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009ead:	e8 19 b0 01 00       	call   c0024ecb <__extendsfdf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecd:	e8 02 a6 01 00       	call   c00244d4 <__muldf3>
c0009ed2:	83 c4 10             	add    esp,0x10
c0009ed5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ed9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009edd:	52                   	push   edx
c0009ede:	50                   	push   eax
c0009edf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee7:	e8 6b 9f 01 00       	call   c0023e57 <__adddf3>
c0009eec:	59                   	pop    ecx
c0009eed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ef1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ef5:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009efb:	e8 cb af 01 00       	call   c0024ecb <__extendsfdf2>
c0009f00:	83 c4 10             	add    esp,0x10
c0009f03:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f07:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f13:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1b:	e8 b4 a5 01 00       	call   c00244d4 <__muldf3>
c0009f20:	83 c4 10             	add    esp,0x10
c0009f23:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f27:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f2b:	52                   	push   edx
c0009f2c:	50                   	push   eax
c0009f2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f35:	e8 1d 9f 01 00       	call   c0023e57 <__adddf3>
c0009f3a:	59                   	pop    ecx
c0009f3b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009f3f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009f43:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009f49:	e8 7d af 01 00       	call   c0024ecb <__extendsfdf2>
c0009f4e:	83 c4 10             	add    esp,0x10
c0009f51:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f55:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f61:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f69:	e8 66 a5 01 00       	call   c00244d4 <__muldf3>
c0009f6e:	83 c4 10             	add    esp,0x10
c0009f71:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f75:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f79:	52                   	push   edx
c0009f7a:	50                   	push   eax
c0009f7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f83:	e8 cf 9e 01 00       	call   c0023e57 <__adddf3>
c0009f88:	59                   	pop    ecx
c0009f89:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f8d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f91:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f97:	e8 2f af 01 00       	call   c0024ecb <__extendsfdf2>
c0009f9c:	83 c4 10             	add    esp,0x10
c0009f9f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fa3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009faf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fb3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fb7:	e8 18 a5 01 00       	call   c00244d4 <__muldf3>
c0009fbc:	83 c4 10             	add    esp,0x10
c0009fbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc7:	52                   	push   edx
c0009fc8:	50                   	push   eax
c0009fc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fd1:	e8 81 9e 01 00       	call   c0023e57 <__adddf3>
c0009fd6:	83 c4 10             	add    esp,0x10
c0009fd9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fdd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fe1:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009fe5:	0f 89 30 fe ff ff    	jns    c0009e1b <calc_output_quad+0x8c>
c0009feb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009fef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ff3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ff7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009ffb:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a003:	29 c8                	sub    eax,ecx
c000a005:	99                   	cdq    
c000a006:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a00a:	31 d2                	xor    edx,edx
c000a00c:	0f af d8             	imul   ebx,eax
c000a00f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a013:	40                   	inc    eax
c000a014:	01 cb                	add    ebx,ecx
c000a016:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a01b:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a01f:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a023:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a027:	8d 34 86             	lea    esi,[esi+eax*4]
c000a02a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a032:	31 c0                	xor    eax,eax
c000a034:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a038:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a03c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a040:	89 d8                	mov    eax,ebx
c000a042:	83 ee 10             	sub    esi,0x10
c000a045:	e8 d7 f6 ff ff       	call   c0009721 <fp_to_double>
c000a04a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a052:	89 d8                	mov    eax,ebx
c000a054:	e8 be f6 ff ff       	call   c0009717 <fp_to_int>
c000a059:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a05d:	52                   	push   edx
c000a05e:	52                   	push   edx
c000a05f:	57                   	push   edi
c000a060:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a064:	e8 83 97 01 00       	call   c00237ec <__subsf3>
c000a069:	89 04 24             	mov    DWORD PTR [esp],eax
c000a06c:	e8 5a ae 01 00       	call   c0024ecb <__extendsfdf2>
c000a071:	83 c4 10             	add    esp,0x10
c000a074:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a078:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a07c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a084:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a088:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a08c:	e8 43 a4 01 00       	call   c00244d4 <__muldf3>
c000a091:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a094:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a098:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a09c:	e8 2a ae 01 00       	call   c0024ecb <__extendsfdf2>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0b6:	e8 9c 9d 01 00       	call   c0023e57 <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a0c0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a0c4:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a0ca:	e8 fc ad 01 00       	call   c0024ecb <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 e5 a3 01 00       	call   c00244d4 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a100:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a104:	e8 4e 9d 01 00       	call   c0023e57 <__adddf3>
c000a109:	5f                   	pop    edi
c000a10a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a10e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a112:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a118:	e8 ae ad 01 00       	call   c0024ecb <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 97 a3 01 00       	call   c00244d4 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a14e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a152:	e8 00 9d 01 00       	call   c0023e57 <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a15c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a160:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a166:	e8 60 ad 01 00       	call   c0024ecb <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 49 a3 01 00       	call   c00244d4 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a192:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a19c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1a0:	e8 b2 9c 01 00       	call   c0023e57 <__adddf3>
c000a1a5:	5f                   	pop    edi
c000a1a6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a1aa:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a1ae:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a1b4:	e8 12 ad 01 00       	call   c0024ecb <__extendsfdf2>
c000a1b9:	83 c4 10             	add    esp,0x10
c000a1bc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a1c0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a1c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1cc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1d0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1d4:	e8 fb a2 01 00       	call   c00244d4 <__muldf3>
c000a1d9:	83 c4 10             	add    esp,0x10
c000a1dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1e4:	52                   	push   edx
c000a1e5:	50                   	push   eax
c000a1e6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1ea:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1ee:	e8 64 9c 01 00       	call   c0023e57 <__adddf3>
c000a1f3:	83 c4 10             	add    esp,0x10
c000a1f6:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1fe:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a202:	85 db                	test   ebx,ebx
c000a204:	0f 8f 36 fe ff ff    	jg     c000a040 <calc_output_quad+0x2b1>
c000a20a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a20e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a212:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a216:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a21a:	e8 38 9c 01 00       	call   c0023e57 <__adddf3>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a226:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a22a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a22e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23a:	e8 95 a2 01 00       	call   c00244d4 <__muldf3>
c000a23f:	59                   	pop    ecx
c000a240:	5b                   	pop    ebx
c000a241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a249:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a251:	e8 51 ab 01 00       	call   c0024da7 <__truncdfsf2>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a260:	89 06                	mov    DWORD PTR [esi],eax
c000a262:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a266:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a26a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a26e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a272:	e8 e0 9b 01 00       	call   c0023e57 <__adddf3>
c000a277:	83 c4 10             	add    esp,0x10
c000a27a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a27e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a282:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a286:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a292:	e8 3d a2 01 00       	call   c00244d4 <__muldf3>
c000a297:	5e                   	pop    esi
c000a298:	5f                   	pop    edi
c000a299:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a29d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a9:	e8 f9 aa 01 00       	call   c0024da7 <__truncdfsf2>
c000a2ae:	83 c4 10             	add    esp,0x10
c000a2b1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2b8:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a2bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2cb:	e8 87 9b 01 00       	call   c0023e57 <__adddf3>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2eb:	e8 e4 a1 01 00       	call   c00244d4 <__muldf3>
c000a2f0:	5d                   	pop    ebp
c000a2f1:	59                   	pop    ecx
c000a2f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a302:	e8 a0 aa 01 00       	call   c0024da7 <__truncdfsf2>
c000a307:	83 c4 10             	add    esp,0x10
c000a30a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a311:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a314:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a318:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a31c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a320:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a324:	e8 2e 9b 01 00       	call   c0023e57 <__adddf3>
c000a329:	83 c4 10             	add    esp,0x10
c000a32c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a330:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a334:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a338:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a33c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a344:	e8 8b a1 01 00       	call   c00244d4 <__muldf3>
c000a349:	5b                   	pop    ebx
c000a34a:	5e                   	pop    esi
c000a34b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a34f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a353:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a357:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a35b:	e8 47 aa 01 00       	call   c0024da7 <__truncdfsf2>
c000a360:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a367:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a36a:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a370:	5b                   	pop    ebx
c000a371:	5e                   	pop    esi
c000a372:	5f                   	pop    edi
c000a373:	5d                   	pop    ebp
c000a374:	c3                   	ret    

c000a375 <calc_output_hex>:
c000a375:	55                   	push   ebp
c000a376:	89 cd                	mov    ebp,ecx
c000a378:	57                   	push   edi
c000a379:	56                   	push   esi
c000a37a:	53                   	push   ebx
c000a37b:	89 c3                	mov    ebx,eax
c000a37d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a383:	89 14 24             	mov    DWORD PTR [esp],edx
c000a386:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a38d:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a394:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a398:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a39c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a39f:	e8 6f f3 ff ff       	call   c0009713 <int_to_fp>
c000a3a4:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a3a7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ab:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a3ae:	29 c8                	sub    eax,ecx
c000a3b0:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a3b4:	99                   	cdq    
c000a3b5:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a3bd:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a3c0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a3c8:	0f af f8             	imul   edi,eax
c000a3cb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a3ce:	01 cf                	add    edi,ecx
c000a3d0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a3d4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a3d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a3db:	0f af c2             	imul   eax,edx
c000a3de:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a3e2:	29 c1                	sub    ecx,eax
c000a3e4:	31 d2                	xor    edx,edx
c000a3e6:	31 c0                	xor    eax,eax
c000a3e8:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3fb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3ff:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a403:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a407:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a40b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a40f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a413:	89 f8                	mov    eax,edi
c000a415:	e8 07 f3 ff ff       	call   c0009721 <fp_to_double>
c000a41a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a41e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a422:	89 f8                	mov    eax,edi
c000a424:	e8 ee f2 ff ff       	call   c0009717 <fp_to_int>
c000a429:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a42d:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a430:	52                   	push   edx
c000a431:	52                   	push   edx
c000a432:	51                   	push   ecx
c000a433:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a437:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a43e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a442:	e8 a5 93 01 00       	call   c00237ec <__subsf3>
c000a447:	89 04 24             	mov    DWORD PTR [esp],eax
c000a44a:	e8 7c aa 01 00       	call   c0024ecb <__extendsfdf2>
c000a44f:	83 c4 10             	add    esp,0x10
c000a452:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a456:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a45a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a462:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a466:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a46a:	e8 65 a0 01 00       	call   c00244d4 <__muldf3>
c000a46f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a473:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a477:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a47a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a47e:	e8 48 aa 01 00       	call   c0024ecb <__extendsfdf2>
c000a483:	83 c4 10             	add    esp,0x10
c000a486:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a48a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a48e:	52                   	push   edx
c000a48f:	50                   	push   eax
c000a490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a498:	e8 ba 99 01 00       	call   c0023e57 <__adddf3>
c000a49d:	59                   	pop    ecx
c000a49e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a4a2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a4a6:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a4ac:	e8 1a aa 01 00       	call   c0024ecb <__extendsfdf2>
c000a4b1:	83 c4 10             	add    esp,0x10
c000a4b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4cc:	e8 03 a0 01 00       	call   c00244d4 <__muldf3>
c000a4d1:	83 c4 10             	add    esp,0x10
c000a4d4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4d8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4dc:	52                   	push   edx
c000a4dd:	50                   	push   eax
c000a4de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4e6:	e8 6c 99 01 00       	call   c0023e57 <__adddf3>
c000a4eb:	59                   	pop    ecx
c000a4ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4f0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4f4:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4fa:	e8 cc a9 01 00       	call   c0024ecb <__extendsfdf2>
c000a4ff:	83 c4 10             	add    esp,0x10
c000a502:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a506:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a512:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a516:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51a:	e8 b5 9f 01 00       	call   c00244d4 <__muldf3>
c000a51f:	83 c4 10             	add    esp,0x10
c000a522:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a526:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a52a:	52                   	push   edx
c000a52b:	50                   	push   eax
c000a52c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a530:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a534:	e8 1e 99 01 00       	call   c0023e57 <__adddf3>
c000a539:	59                   	pop    ecx
c000a53a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a53e:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a542:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a548:	e8 7e a9 01 00       	call   c0024ecb <__extendsfdf2>
c000a54d:	83 c4 10             	add    esp,0x10
c000a550:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a554:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a560:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a564:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a568:	e8 67 9f 01 00       	call   c00244d4 <__muldf3>
c000a56d:	83 c4 10             	add    esp,0x10
c000a570:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a574:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a578:	52                   	push   edx
c000a579:	50                   	push   eax
c000a57a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a57e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a582:	e8 d0 98 01 00       	call   c0023e57 <__adddf3>
c000a587:	59                   	pop    ecx
c000a588:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a58c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a590:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a596:	e8 30 a9 01 00       	call   c0024ecb <__extendsfdf2>
c000a59b:	83 c4 10             	add    esp,0x10
c000a59e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b6:	e8 19 9f 01 00       	call   c00244d4 <__muldf3>
c000a5bb:	83 c4 10             	add    esp,0x10
c000a5be:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5c6:	52                   	push   edx
c000a5c7:	50                   	push   eax
c000a5c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5d0:	e8 82 98 01 00       	call   c0023e57 <__adddf3>
c000a5d5:	59                   	pop    ecx
c000a5d6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a5da:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a5de:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a5e4:	e8 e2 a8 01 00       	call   c0024ecb <__extendsfdf2>
c000a5e9:	83 c4 10             	add    esp,0x10
c000a5ec:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a600:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a604:	e8 cb 9e 01 00       	call   c00244d4 <__muldf3>
c000a609:	83 c4 10             	add    esp,0x10
c000a60c:	83 c6 18             	add    esi,0x18
c000a60f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a613:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a617:	52                   	push   edx
c000a618:	50                   	push   eax
c000a619:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a61d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a621:	e8 31 98 01 00       	call   c0023e57 <__adddf3>
c000a626:	59                   	pop    ecx
c000a627:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a62b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a62f:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a635:	e8 91 a8 01 00       	call   c0024ecb <__extendsfdf2>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a641:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	e8 7a 9e 01 00       	call   c00244d4 <__muldf3>
c000a65a:	83 c4 10             	add    esp,0x10
c000a65d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a661:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a665:	52                   	push   edx
c000a666:	50                   	push   eax
c000a667:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a66b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a66f:	e8 e3 97 01 00       	call   c0023e57 <__adddf3>
c000a674:	83 c4 10             	add    esp,0x10
c000a677:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a67b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a67f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a682:	0f 89 8b fd ff ff    	jns    c000a413 <calc_output_hex+0x9e>
c000a688:	31 f6                	xor    esi,esi
c000a68a:	31 ff                	xor    edi,edi
c000a68c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a690:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a693:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a697:	29 e9                	sub    ecx,ebp
c000a699:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a69d:	29 c8                	sub    eax,ecx
c000a69f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a6a2:	99                   	cdq    
c000a6a3:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a6a7:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a6aa:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a6ae:	0f af e8             	imul   ebp,eax
c000a6b1:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a6b5:	40                   	inc    eax
c000a6b6:	01 cd                	add    ebp,ecx
c000a6b8:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a6bd:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a6c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6c5:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a6c9:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a6cc:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a6d0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a6d4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a6d8:	89 e8                	mov    eax,ebp
c000a6da:	e8 42 f0 ff ff       	call   c0009721 <fp_to_double>
c000a6df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6e7:	89 e8                	mov    eax,ebp
c000a6e9:	e8 29 f0 ff ff       	call   c0009717 <fp_to_int>
c000a6ee:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6f2:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6f5:	52                   	push   edx
c000a6f6:	52                   	push   edx
c000a6f7:	51                   	push   ecx
c000a6f8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6ff:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a706:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a70a:	e8 dd 90 01 00       	call   c00237ec <__subsf3>
c000a70f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a712:	e8 b4 a7 01 00       	call   c0024ecb <__extendsfdf2>
c000a717:	83 c4 10             	add    esp,0x10
c000a71a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a72e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a732:	e8 9d 9d 01 00       	call   c00244d4 <__muldf3>
c000a737:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a73e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a742:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a745:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a749:	e8 7d a7 01 00       	call   c0024ecb <__extendsfdf2>
c000a74e:	83 c4 10             	add    esp,0x10
c000a751:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a755:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a759:	52                   	push   edx
c000a75a:	50                   	push   eax
c000a75b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a75f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a763:	e8 ef 96 01 00       	call   c0023e57 <__adddf3>
c000a768:	59                   	pop    ecx
c000a769:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a76d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a771:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a777:	e8 4f a7 01 00       	call   c0024ecb <__extendsfdf2>
c000a77c:	83 c4 10             	add    esp,0x10
c000a77f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a783:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a793:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a797:	e8 38 9d 01 00       	call   c00244d4 <__muldf3>
c000a79c:	83 c4 10             	add    esp,0x10
c000a79f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7a7:	52                   	push   edx
c000a7a8:	50                   	push   eax
c000a7a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7b1:	e8 a1 96 01 00       	call   c0023e57 <__adddf3>
c000a7b6:	59                   	pop    ecx
c000a7b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a7bb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a7bf:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a7c5:	e8 01 a7 01 00       	call   c0024ecb <__extendsfdf2>
c000a7ca:	83 c4 10             	add    esp,0x10
c000a7cd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7dd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e5:	e8 ea 9c 01 00       	call   c00244d4 <__muldf3>
c000a7ea:	83 c4 10             	add    esp,0x10
c000a7ed:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7f1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f5:	52                   	push   edx
c000a7f6:	50                   	push   eax
c000a7f7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7fb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7ff:	e8 53 96 01 00       	call   c0023e57 <__adddf3>
c000a804:	59                   	pop    ecx
c000a805:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a809:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a80d:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a813:	e8 b3 a6 01 00       	call   c0024ecb <__extendsfdf2>
c000a818:	83 c4 10             	add    esp,0x10
c000a81b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a823:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a82f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a833:	e8 9c 9c 01 00       	call   c00244d4 <__muldf3>
c000a838:	83 c4 10             	add    esp,0x10
c000a83b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a83f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a843:	52                   	push   edx
c000a844:	50                   	push   eax
c000a845:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a849:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a84d:	e8 05 96 01 00       	call   c0023e57 <__adddf3>
c000a852:	59                   	pop    ecx
c000a853:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a857:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a85b:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a861:	e8 65 a6 01 00       	call   c0024ecb <__extendsfdf2>
c000a866:	83 c4 10             	add    esp,0x10
c000a869:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a875:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a879:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a881:	e8 4e 9c 01 00       	call   c00244d4 <__muldf3>
c000a886:	83 c4 10             	add    esp,0x10
c000a889:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a88d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a891:	52                   	push   edx
c000a892:	50                   	push   eax
c000a893:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a897:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a89b:	e8 b7 95 01 00       	call   c0023e57 <__adddf3>
c000a8a0:	59                   	pop    ecx
c000a8a1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a8a5:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a8a9:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a8af:	e8 17 a6 01 00       	call   c0024ecb <__extendsfdf2>
c000a8b4:	83 c4 10             	add    esp,0x10
c000a8b7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8cb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8cf:	e8 00 9c 01 00       	call   c00244d4 <__muldf3>
c000a8d4:	83 c4 10             	add    esp,0x10
c000a8d7:	83 eb 18             	sub    ebx,0x18
c000a8da:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8de:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e2:	52                   	push   edx
c000a8e3:	50                   	push   eax
c000a8e4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8e8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8ec:	e8 66 95 01 00       	call   c0023e57 <__adddf3>
c000a8f1:	59                   	pop    ecx
c000a8f2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8f6:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8fa:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a900:	e8 c6 a5 01 00       	call   c0024ecb <__extendsfdf2>
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a90c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a910:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	e8 af 9b 01 00       	call   c00244d4 <__muldf3>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a930:	52                   	push   edx
c000a931:	50                   	push   eax
c000a932:	57                   	push   edi
c000a933:	56                   	push   esi
c000a934:	e8 1e 95 01 00       	call   c0023e57 <__adddf3>
c000a939:	83 c4 10             	add    esp,0x10
c000a93c:	89 c6                	mov    esi,eax
c000a93e:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a941:	89 d7                	mov    edi,edx
c000a943:	85 ed                	test   ebp,ebp
c000a945:	0f 8f 8d fd ff ff    	jg     c000a6d8 <calc_output_hex+0x363>
c000a94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a953:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a957:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a95b:	e8 f7 94 01 00       	call   c0023e57 <__adddf3>
c000a960:	83 c4 10             	add    esp,0x10
c000a963:	89 04 24             	mov    DWORD PTR [esp],eax
c000a966:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a96a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a96e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a972:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a976:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97a:	e8 55 9b 01 00       	call   c00244d4 <__muldf3>
c000a97f:	59                   	pop    ecx
c000a980:	5b                   	pop    ebx
c000a981:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a985:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a991:	e8 11 a4 01 00       	call   c0024da7 <__truncdfsf2>
c000a996:	83 c4 10             	add    esp,0x10
c000a999:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a0:	89 03                	mov    DWORD PTR [ebx],eax
c000a9a2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9a6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9aa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a9ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a9b2:	e8 a0 94 01 00       	call   c0023e57 <__adddf3>
c000a9b7:	83 c4 10             	add    esp,0x10
c000a9ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d1:	e8 fe 9a 01 00       	call   c00244d4 <__muldf3>
c000a9d6:	5d                   	pop    ebp
c000a9d7:	59                   	pop    ecx
c000a9d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e8:	e8 ba a3 01 00       	call   c0024da7 <__truncdfsf2>
c000a9ed:	83 c4 10             	add    esp,0x10
c000a9f0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9f7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9fa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9fe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa06:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa0a:	e8 48 94 01 00       	call   c0023e57 <__adddf3>
c000aa0f:	83 c4 10             	add    esp,0x10
c000aa12:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa29:	e8 a6 9a 01 00       	call   c00244d4 <__muldf3>
c000aa2e:	5b                   	pop    ebx
c000aa2f:	5d                   	pop    ebp
c000aa30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa40:	e8 62 a3 01 00       	call   c0024da7 <__truncdfsf2>
c000aa45:	83 c4 10             	add    esp,0x10
c000aa48:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa4f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa52:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa62:	e8 f0 93 01 00       	call   c0023e57 <__adddf3>
c000aa67:	83 c4 10             	add    esp,0x10
c000aa6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa81:	e8 4e 9a 01 00       	call   c00244d4 <__muldf3>
c000aa86:	59                   	pop    ecx
c000aa87:	5b                   	pop    ebx
c000aa88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa98:	e8 0a a3 01 00       	call   c0024da7 <__truncdfsf2>
c000aa9d:	83 c4 10             	add    esp,0x10
c000aaa0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaa7:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aaaa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aaae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aab2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aab6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aaba:	e8 98 93 01 00       	call   c0023e57 <__adddf3>
c000aabf:	83 c4 10             	add    esp,0x10
c000aac2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aac5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aac9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad9:	e8 f6 99 01 00       	call   c00244d4 <__muldf3>
c000aade:	5d                   	pop    ebp
c000aadf:	59                   	pop    ecx
c000aae0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aae4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf0:	e8 b2 a2 01 00       	call   c0024da7 <__truncdfsf2>
c000aaf5:	83 c4 10             	add    esp,0x10
c000aaf8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ab02:	57                   	push   edi
c000ab03:	56                   	push   esi
c000ab04:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ab08:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ab0c:	e8 46 93 01 00       	call   c0023e57 <__adddf3>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab17:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab2b:	e8 a4 99 01 00       	call   c00244d4 <__muldf3>
c000ab30:	5b                   	pop    ebx
c000ab31:	5e                   	pop    esi
c000ab32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab3a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab42:	e8 60 a2 01 00       	call   c0024da7 <__truncdfsf2>
c000ab47:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ab4e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab51:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab57:	5b                   	pop    ebx
c000ab58:	5e                   	pop    esi
c000ab59:	5f                   	pop    edi
c000ab5a:	5d                   	pop    ebp
c000ab5b:	c3                   	ret    

c000ab5c <sinc_reset>:
c000ab5c:	56                   	push   esi
c000ab5d:	53                   	push   ebx
c000ab5e:	51                   	push   ecx
c000ab5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab63:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab66:	85 db                	test   ebx,ebx
c000ab68:	74 59                	je     c000abc3 <sinc_reset+0x67>
c000ab6a:	31 d2                	xor    edx,edx
c000ab6c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab73:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab76:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab79:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab80:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab87:	31 c0                	xor    eax,eax
c000ab89:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab8f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab92:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab95:	52                   	push   edx
c000ab96:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab99:	c1 e0 02             	shl    eax,0x2
c000ab9c:	50                   	push   eax
c000ab9d:	6a 00                	push   0x0
c000ab9f:	56                   	push   esi
c000aba0:	e8 41 5b ff ff       	call   c00006e6 <memset>
c000aba5:	83 c4 0c             	add    esp,0xc
c000aba8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abab:	c1 e0 02             	shl    eax,0x2
c000abae:	50                   	push   eax
c000abaf:	68 aa 00 00 00       	push   0xaa
c000abb4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000abb7:	8d 04 86             	lea    eax,[esi+eax*4]
c000abba:	50                   	push   eax
c000abbb:	e8 26 5b ff ff       	call   c00006e6 <memset>
c000abc0:	83 c4 10             	add    esp,0x10
c000abc3:	58                   	pop    eax
c000abc4:	5b                   	pop    ebx
c000abc5:	5e                   	pop    esi
c000abc6:	c3                   	ret    

c000abc7 <calc_output_multi>:
c000abc7:	55                   	push   ebp
c000abc8:	57                   	push   edi
c000abc9:	56                   	push   esi
c000abca:	89 c6                	mov    esi,eax
c000abcc:	53                   	push   ebx
c000abcd:	83 ec 4c             	sub    esp,0x4c
c000abd0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abd4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000abd8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000abdc:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000abe0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000abe4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000abe8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000abec:	8d 46 44             	lea    eax,[esi+0x44]
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000abf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abfc:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abff:	e8 0f eb ff ff       	call   c0009713 <int_to_fp>
c000ac04:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ac07:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ac0b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ac0f:	99                   	cdq    
c000ac10:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ac14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ac18:	0f af d0             	imul   edx,eax
c000ac1b:	0f af c3             	imul   eax,ebx
c000ac1e:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ac22:	29 c1                	sub    ecx,eax
c000ac24:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac2c:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ac33:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ac37:	57                   	push   edi
c000ac38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac3c:	6a 00                	push   0x0
c000ac3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac42:	e8 9f 5a ff ff       	call   c00006e6 <memset>
c000ac47:	83 c4 10             	add    esp,0x10
c000ac4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac4e:	89 df                	mov    edi,ebx
c000ac50:	e8 cc ea ff ff       	call   c0009721 <fp_to_double>
c000ac55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac59:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac61:	e8 b1 ea ff ff       	call   c0009717 <fp_to_int>
c000ac66:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac69:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac6c:	51                   	push   ecx
c000ac6d:	51                   	push   ecx
c000ac6e:	55                   	push   ebp
c000ac6f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac73:	e8 74 8b 01 00       	call   c00237ec <__subsf3>
c000ac78:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac7b:	e8 4b a2 01 00       	call   c0024ecb <__extendsfdf2>
c000ac80:	83 c4 10             	add    esp,0x10
c000ac83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9b:	e8 34 98 01 00       	call   c00244d4 <__muldf3>
c000aca0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000aca3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000aca7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000acab:	e8 1b a2 01 00       	call   c0024ecb <__extendsfdf2>
c000acb0:	83 c4 10             	add    esp,0x10
c000acb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acbb:	52                   	push   edx
c000acbc:	50                   	push   eax
c000acbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acc5:	e8 8d 91 01 00       	call   c0023e57 <__adddf3>
c000acca:	83 c4 10             	add    esp,0x10
c000accd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acd1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acd5:	89 f8                	mov    eax,edi
c000acd7:	b9 08 00 00 00       	mov    ecx,0x8
c000acdc:	99                   	cdq    
c000acdd:	f7 f9                	idiv   ecx
c000acdf:	4a                   	dec    edx
c000ace0:	83 fa 06             	cmp    edx,0x6
c000ace3:	77 07                	ja     c000acec <calc_output_multi+0x125>
c000ace5:	ff 24 95 e4 66 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd991c]
c000acec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acef:	4f                   	dec    edi
c000acf0:	83 ec 0c             	sub    esp,0xc
c000acf3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acfa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad01:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad05:	e8 c1 a1 01 00       	call   c0024ecb <__extendsfdf2>
c000ad0a:	83 c4 10             	add    esp,0x10
c000ad0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad11:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad21:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad25:	e8 aa 97 01 00       	call   c00244d4 <__muldf3>
c000ad2a:	83 c4 10             	add    esp,0x10
c000ad2d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad31:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad35:	52                   	push   edx
c000ad36:	50                   	push   eax
c000ad37:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad3a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad3d:	e8 15 91 01 00       	call   c0023e57 <__adddf3>
c000ad42:	83 c4 10             	add    esp,0x10
c000ad45:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad48:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad4e:	4f                   	dec    edi
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad59:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad60:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad64:	e8 62 a1 01 00       	call   c0024ecb <__extendsfdf2>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad84:	e8 4b 97 01 00       	call   c00244d4 <__muldf3>
c000ad89:	83 c4 10             	add    esp,0x10
c000ad8c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad90:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad94:	52                   	push   edx
c000ad95:	50                   	push   eax
c000ad96:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad99:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad9c:	e8 b6 90 01 00       	call   c0023e57 <__adddf3>
c000ada1:	83 c4 10             	add    esp,0x10
c000ada4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ada7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adaa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adad:	4f                   	dec    edi
c000adae:	83 ec 0c             	sub    esp,0xc
c000adb1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adb8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adbf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adc3:	e8 03 a1 01 00       	call   c0024ecb <__extendsfdf2>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adcf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000add3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000add7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000addb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000addf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade3:	e8 ec 96 01 00       	call   c00244d4 <__muldf3>
c000ade8:	83 c4 10             	add    esp,0x10
c000adeb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adef:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adf3:	52                   	push   edx
c000adf4:	50                   	push   eax
c000adf5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adf8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adfb:	e8 57 90 01 00       	call   c0023e57 <__adddf3>
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae06:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae0c:	4f                   	dec    edi
c000ae0d:	83 ec 0c             	sub    esp,0xc
c000ae10:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae17:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae1e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae22:	e8 a4 a0 01 00       	call   c0024ecb <__extendsfdf2>
c000ae27:	83 c4 10             	add    esp,0x10
c000ae2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae3e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae42:	e8 8d 96 01 00       	call   c00244d4 <__muldf3>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	52                   	push   edx
c000ae53:	50                   	push   eax
c000ae54:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae57:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae5a:	e8 f8 8f 01 00       	call   c0023e57 <__adddf3>
c000ae5f:	83 c4 10             	add    esp,0x10
c000ae62:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae65:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae6b:	4f                   	dec    edi
c000ae6c:	83 ec 0c             	sub    esp,0xc
c000ae6f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae76:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae7d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae81:	e8 45 a0 01 00       	call   c0024ecb <__extendsfdf2>
c000ae86:	83 c4 10             	add    esp,0x10
c000ae89:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae8d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aea1:	e8 2e 96 01 00       	call   c00244d4 <__muldf3>
c000aea6:	83 c4 10             	add    esp,0x10
c000aea9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aead:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb1:	52                   	push   edx
c000aeb2:	50                   	push   eax
c000aeb3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeb6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeb9:	e8 99 8f 01 00       	call   c0023e57 <__adddf3>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aec4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aec7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeca:	4f                   	dec    edi
c000aecb:	83 ec 0c             	sub    esp,0xc
c000aece:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aed1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed5:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aedc:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aee0:	e8 e6 9f 01 00       	call   c0024ecb <__extendsfdf2>
c000aee5:	83 c4 10             	add    esp,0x10
c000aee8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeec:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aef0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aef4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aef8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aefc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af00:	e8 cf 95 01 00       	call   c00244d4 <__muldf3>
c000af05:	83 c4 10             	add    esp,0x10
c000af08:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af0c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af10:	52                   	push   edx
c000af11:	50                   	push   eax
c000af12:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af15:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af18:	e8 3a 8f 01 00       	call   c0023e57 <__adddf3>
c000af1d:	83 c4 10             	add    esp,0x10
c000af20:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af23:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af26:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af29:	4f                   	dec    edi
c000af2a:	83 ec 0c             	sub    esp,0xc
c000af2d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af34:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af3b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af3f:	e8 87 9f 01 00       	call   c0024ecb <__extendsfdf2>
c000af44:	83 c4 10             	add    esp,0x10
c000af47:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af4b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af5f:	e8 70 95 01 00       	call   c00244d4 <__muldf3>
c000af64:	83 c4 10             	add    esp,0x10
c000af67:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af6b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af6f:	52                   	push   edx
c000af70:	50                   	push   eax
c000af71:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af74:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af77:	e8 db 8e 01 00       	call   c0023e57 <__adddf3>
c000af7c:	83 c4 10             	add    esp,0x10
c000af7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af88:	4f                   	dec    edi
c000af89:	83 ec 0c             	sub    esp,0xc
c000af8c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af93:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af9e:	e8 28 9f 01 00       	call   c0024ecb <__extendsfdf2>
c000afa3:	83 c4 10             	add    esp,0x10
c000afa6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afaa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afbe:	e8 11 95 01 00       	call   c00244d4 <__muldf3>
c000afc3:	83 c4 10             	add    esp,0x10
c000afc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afca:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afce:	52                   	push   edx
c000afcf:	50                   	push   eax
c000afd0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afd3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afd6:	e8 7c 8e 01 00       	call   c0023e57 <__adddf3>
c000afdb:	83 c4 10             	add    esp,0x10
c000afde:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afe1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afe4:	85 ff                	test   edi,edi
c000afe6:	0f 8f e9 fc ff ff    	jg     c000acd5 <calc_output_multi+0x10e>
c000afec:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000aff0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000aff4:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000aff8:	0f 89 4c fc ff ff    	jns    c000ac4a <calc_output_multi+0x83>
c000affe:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b002:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b006:	29 c8                	sub    eax,ecx
c000b008:	99                   	cdq    
c000b009:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b00d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b011:	0f af d0             	imul   edx,eax
c000b014:	40                   	inc    eax
c000b015:	01 d1                	add    ecx,edx
c000b017:	0f af c3             	imul   eax,ebx
c000b01a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b01e:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b021:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b025:	55                   	push   ebp
c000b026:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b02a:	6a 00                	push   0x0
c000b02c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b030:	e8 b1 56 ff ff       	call   c00006e6 <memset>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b03c:	e8 e0 e6 ff ff       	call   c0009721 <fp_to_double>
c000b041:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b045:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b049:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b04d:	e8 c5 e6 ff ff       	call   c0009717 <fp_to_int>
c000b052:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b055:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b058:	57                   	push   edi
c000b059:	57                   	push   edi
c000b05a:	89 df                	mov    edi,ebx
c000b05c:	55                   	push   ebp
c000b05d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b061:	e8 86 87 01 00       	call   c00237ec <__subsf3>
c000b066:	89 04 24             	mov    DWORD PTR [esp],eax
c000b069:	e8 5d 9e 01 00       	call   c0024ecb <__extendsfdf2>
c000b06e:	83 c4 10             	add    esp,0x10
c000b071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b075:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b079:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b085:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b089:	e8 46 94 01 00       	call   c00244d4 <__muldf3>
c000b08e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b091:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b095:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b099:	e8 2d 9e 01 00       	call   c0024ecb <__extendsfdf2>
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0a9:	52                   	push   edx
c000b0aa:	50                   	push   eax
c000b0ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b3:	e8 9f 8d 01 00       	call   c0023e57 <__adddf3>
c000b0b8:	83 c4 10             	add    esp,0x10
c000b0bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b0bf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b0c3:	89 f8                	mov    eax,edi
c000b0c5:	b9 08 00 00 00       	mov    ecx,0x8
c000b0ca:	99                   	cdq    
c000b0cb:	f7 f9                	idiv   ecx
c000b0cd:	4a                   	dec    edx
c000b0ce:	83 fa 06             	cmp    edx,0x6
c000b0d1:	77 07                	ja     c000b0da <calc_output_multi+0x513>
c000b0d3:	ff 24 95 00 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9900]
c000b0da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0de:	4f                   	dec    edi
c000b0df:	83 ec 0c             	sub    esp,0xc
c000b0e2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0e9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0f0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0f4:	e8 d2 9d 01 00       	call   c0024ecb <__extendsfdf2>
c000b0f9:	83 c4 10             	add    esp,0x10
c000b0fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b100:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b10c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b110:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b114:	e8 bb 93 01 00       	call   c00244d4 <__muldf3>
c000b119:	83 c4 10             	add    esp,0x10
c000b11c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b120:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b124:	52                   	push   edx
c000b125:	50                   	push   eax
c000b126:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b129:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b12c:	e8 26 8d 01 00       	call   c0023e57 <__adddf3>
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b137:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b13a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b13e:	4f                   	dec    edi
c000b13f:	83 ec 0c             	sub    esp,0xc
c000b142:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b149:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b150:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b154:	e8 72 9d 01 00       	call   c0024ecb <__extendsfdf2>
c000b159:	83 c4 10             	add    esp,0x10
c000b15c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b160:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b164:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b168:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b16c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b170:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b174:	e8 5b 93 01 00       	call   c00244d4 <__muldf3>
c000b179:	83 c4 10             	add    esp,0x10
c000b17c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b180:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b184:	52                   	push   edx
c000b185:	50                   	push   eax
c000b186:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b189:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b18c:	e8 c6 8c 01 00       	call   c0023e57 <__adddf3>
c000b191:	83 c4 10             	add    esp,0x10
c000b194:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b197:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b19a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b19e:	4f                   	dec    edi
c000b19f:	83 ec 0c             	sub    esp,0xc
c000b1a2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1a9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1b0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1b4:	e8 12 9d 01 00       	call   c0024ecb <__extendsfdf2>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d4:	e8 fb 92 01 00       	call   c00244d4 <__muldf3>
c000b1d9:	83 c4 10             	add    esp,0x10
c000b1dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1e4:	52                   	push   edx
c000b1e5:	50                   	push   eax
c000b1e6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1e9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1ec:	e8 66 8c 01 00       	call   c0023e57 <__adddf3>
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1f7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1fe:	4f                   	dec    edi
c000b1ff:	83 ec 0c             	sub    esp,0xc
c000b202:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b205:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b209:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b210:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b214:	e8 b2 9c 01 00       	call   c0024ecb <__extendsfdf2>
c000b219:	83 c4 10             	add    esp,0x10
c000b21c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b220:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b22c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b230:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b234:	e8 9b 92 01 00       	call   c00244d4 <__muldf3>
c000b239:	83 c4 10             	add    esp,0x10
c000b23c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b240:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b244:	52                   	push   edx
c000b245:	50                   	push   eax
c000b246:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b249:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b24c:	e8 06 8c 01 00       	call   c0023e57 <__adddf3>
c000b251:	83 c4 10             	add    esp,0x10
c000b254:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b257:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b25a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b25e:	4f                   	dec    edi
c000b25f:	83 ec 0c             	sub    esp,0xc
c000b262:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b265:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b269:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b270:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b274:	e8 52 9c 01 00       	call   c0024ecb <__extendsfdf2>
c000b279:	83 c4 10             	add    esp,0x10
c000b27c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b280:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b284:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b288:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b28c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b290:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b294:	e8 3b 92 01 00       	call   c00244d4 <__muldf3>
c000b299:	83 c4 10             	add    esp,0x10
c000b29c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2a4:	52                   	push   edx
c000b2a5:	50                   	push   eax
c000b2a6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2a9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2ac:	e8 a6 8b 01 00       	call   c0023e57 <__adddf3>
c000b2b1:	83 c4 10             	add    esp,0x10
c000b2b4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2b7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2be:	4f                   	dec    edi
c000b2bf:	83 ec 0c             	sub    esp,0xc
c000b2c2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2c9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2d4:	e8 f2 9b 01 00       	call   c0024ecb <__extendsfdf2>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2f4:	e8 db 91 01 00       	call   c00244d4 <__muldf3>
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b300:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b304:	52                   	push   edx
c000b305:	50                   	push   eax
c000b306:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b309:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b30c:	e8 46 8b 01 00       	call   c0023e57 <__adddf3>
c000b311:	83 c4 10             	add    esp,0x10
c000b314:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b317:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b31a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b31e:	4f                   	dec    edi
c000b31f:	83 ec 0c             	sub    esp,0xc
c000b322:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b325:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b329:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b330:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b334:	e8 92 9b 01 00       	call   c0024ecb <__extendsfdf2>
c000b339:	83 c4 10             	add    esp,0x10
c000b33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b34c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b350:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b354:	e8 7b 91 01 00       	call   c00244d4 <__muldf3>
c000b359:	83 c4 10             	add    esp,0x10
c000b35c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b360:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b364:	52                   	push   edx
c000b365:	50                   	push   eax
c000b366:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b369:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b36c:	e8 e6 8a 01 00       	call   c0023e57 <__adddf3>
c000b371:	83 c4 10             	add    esp,0x10
c000b374:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b377:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b37a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b37e:	4f                   	dec    edi
c000b37f:	83 ec 0c             	sub    esp,0xc
c000b382:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b389:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b390:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b394:	e8 32 9b 01 00       	call   c0024ecb <__extendsfdf2>
c000b399:	83 c4 10             	add    esp,0x10
c000b39c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3b4:	e8 1b 91 01 00       	call   c00244d4 <__muldf3>
c000b3b9:	83 c4 10             	add    esp,0x10
c000b3bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3c4:	52                   	push   edx
c000b3c5:	50                   	push   eax
c000b3c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3c9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3cc:	e8 86 8a 01 00       	call   c0023e57 <__adddf3>
c000b3d1:	83 c4 10             	add    esp,0x10
c000b3d4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3d7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3da:	85 ff                	test   edi,edi
c000b3dc:	0f 8f e1 fc ff ff    	jg     c000b0c3 <calc_output_multi+0x4fc>
c000b3e2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3e6:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b3ea:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3ee:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3f3:	0f 8f 3f fc ff ff    	jg     c000b038 <calc_output_multi+0x471>
c000b3f9:	be 08 00 00 00       	mov    esi,0x8
c000b3fe:	89 d8                	mov    eax,ebx
c000b400:	99                   	cdq    
c000b401:	f7 fe                	idiv   esi
c000b403:	4a                   	dec    edx
c000b404:	83 fa 06             	cmp    edx,0x6
c000b407:	77 07                	ja     c000b410 <calc_output_multi+0x849>
c000b409:	ff 24 95 1c 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd98e4]
c000b410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b414:	4b                   	dec    ebx
c000b415:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b419:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b41c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b420:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b424:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b427:	e8 2b 8a 01 00       	call   c0023e57 <__adddf3>
c000b42c:	83 c4 10             	add    esp,0x10
c000b42f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b433:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b437:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b443:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b447:	e8 88 90 01 00       	call   c00244d4 <__muldf3>
c000b44c:	5d                   	pop    ebp
c000b44d:	59                   	pop    ecx
c000b44e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b452:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45e:	e8 44 99 01 00       	call   c0024da7 <__truncdfsf2>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b46a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b46d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b471:	4b                   	dec    ebx
c000b472:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b476:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b479:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b47d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b481:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b484:	e8 ce 89 01 00       	call   c0023e57 <__adddf3>
c000b489:	83 c4 10             	add    esp,0x10
c000b48c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b490:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a4:	e8 2b 90 01 00       	call   c00244d4 <__muldf3>
c000b4a9:	59                   	pop    ecx
c000b4aa:	5f                   	pop    edi
c000b4ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	e8 e7 98 01 00       	call   c0024da7 <__truncdfsf2>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4c7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ce:	4b                   	dec    ebx
c000b4cf:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4d3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4da:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4de:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e1:	e8 71 89 01 00       	call   c0023e57 <__adddf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b501:	e8 ce 8f 01 00       	call   c00244d4 <__muldf3>
c000b506:	5f                   	pop    edi
c000b507:	5d                   	pop    ebp
c000b508:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b50c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b510:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b514:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b518:	e8 8a 98 01 00       	call   c0024da7 <__truncdfsf2>
c000b51d:	83 c4 10             	add    esp,0x10
c000b520:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b524:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52b:	4b                   	dec    ebx
c000b52c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b530:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b533:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b537:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b53b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b53e:	e8 14 89 01 00       	call   c0023e57 <__adddf3>
c000b543:	83 c4 10             	add    esp,0x10
c000b546:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b54a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55e:	e8 71 8f 01 00       	call   c00244d4 <__muldf3>
c000b563:	5d                   	pop    ebp
c000b564:	59                   	pop    ecx
c000b565:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b569:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b56d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b571:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b575:	e8 2d 98 01 00       	call   c0024da7 <__truncdfsf2>
c000b57a:	83 c4 10             	add    esp,0x10
c000b57d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b581:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b588:	4b                   	dec    ebx
c000b589:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b58d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b590:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b594:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b598:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b59b:	e8 b7 88 01 00       	call   c0023e57 <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5bb:	e8 14 8f 01 00       	call   c00244d4 <__muldf3>
c000b5c0:	59                   	pop    ecx
c000b5c1:	5f                   	pop    edi
c000b5c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d2:	e8 d0 97 01 00       	call   c0024da7 <__truncdfsf2>
c000b5d7:	83 c4 10             	add    esp,0x10
c000b5da:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5de:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e5:	4b                   	dec    ebx
c000b5e6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5ea:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5f1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f8:	e8 5a 88 01 00       	call   c0023e57 <__adddf3>
c000b5fd:	83 c4 10             	add    esp,0x10
c000b600:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b604:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b614:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b618:	e8 b7 8e 01 00       	call   c00244d4 <__muldf3>
c000b61d:	5f                   	pop    edi
c000b61e:	5d                   	pop    ebp
c000b61f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b623:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b627:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62f:	e8 73 97 01 00       	call   c0024da7 <__truncdfsf2>
c000b634:	83 c4 10             	add    esp,0x10
c000b637:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b63b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b642:	4b                   	dec    ebx
c000b643:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b647:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b652:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b655:	e8 fd 87 01 00       	call   c0023e57 <__adddf3>
c000b65a:	83 c4 10             	add    esp,0x10
c000b65d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b661:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b665:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b675:	e8 5a 8e 01 00       	call   c00244d4 <__muldf3>
c000b67a:	5d                   	pop    ebp
c000b67b:	59                   	pop    ecx
c000b67c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b680:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b688:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68c:	e8 16 97 01 00       	call   c0024da7 <__truncdfsf2>
c000b691:	83 c4 10             	add    esp,0x10
c000b694:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b698:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b69b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69f:	4b                   	dec    ebx
c000b6a0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6ab:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6af:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b2:	e8 a0 87 01 00       	call   c0023e57 <__adddf3>
c000b6b7:	83 c4 10             	add    esp,0x10
c000b6ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d2:	e8 fd 8d 01 00       	call   c00244d4 <__muldf3>
c000b6d7:	59                   	pop    ecx
c000b6d8:	5f                   	pop    edi
c000b6d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e9:	e8 b9 96 01 00       	call   c0024da7 <__truncdfsf2>
c000b6ee:	83 c4 10             	add    esp,0x10
c000b6f1:	85 db                	test   ebx,ebx
c000b6f3:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6f7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6fa:	0f 8f fe fc ff ff    	jg     c000b3fe <calc_output_multi+0x837>
c000b700:	83 c4 4c             	add    esp,0x4c
c000b703:	5b                   	pop    ebx
c000b704:	5e                   	pop    esi
c000b705:	5f                   	pop    edi
c000b706:	5d                   	pop    ebp
c000b707:	c3                   	ret    

c000b708 <double_to_fp>:
c000b708:	83 ec 0c             	sub    esp,0xc
c000b70b:	68 00 00 b0 40       	push   0x40b00000
c000b710:	6a 00                	push   0x0
c000b712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71a:	e8 b5 8d 01 00       	call   c00244d4 <__muldf3>
c000b71f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b723:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b727:	83 c4 1c             	add    esp,0x1c
c000b72a:	e9 31 98 01 00       	jmp    c0024f60 <lrint>

c000b72f <fmod_one>:
c000b72f:	83 ec 2c             	sub    esp,0x2c
c000b732:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b736:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b73a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b73e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b742:	83 ec 08             	sub    esp,0x8
c000b745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74d:	e8 0e 98 01 00       	call   c0024f60 <lrint>
c000b752:	83 c4 10             	add    esp,0x10
c000b755:	83 ec 0c             	sub    esp,0xc
c000b758:	50                   	push   eax
c000b759:	e8 d9 93 01 00       	call   c0024b37 <__floatsidf>
c000b75e:	83 c4 10             	add    esp,0x10
c000b761:	52                   	push   edx
c000b762:	50                   	push   eax
c000b763:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	e8 38 8d 01 00       	call   c00244a8 <__subdf3>
c000b770:	83 c4 10             	add    esp,0x10
c000b773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b77b:	b8 00 00 00 00       	mov    eax,0x0
c000b780:	ba 00 00 00 00       	mov    edx,0x0
c000b785:	52                   	push   edx
c000b786:	50                   	push   eax
c000b787:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b78b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b78f:	e8 0f 96 01 00       	call   c0024da3 <__ltdf2>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	85 c0                	test   eax,eax
c000b799:	79 1e                	jns    c000b7b9 <fmod_one+0x8a>
c000b79b:	b8 00 00 00 00       	mov    eax,0x0
c000b7a0:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b7a5:	52                   	push   edx
c000b7a6:	50                   	push   eax
c000b7a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7af:	e8 a3 86 01 00       	call   c0023e57 <__adddf3>
c000b7b4:	83 c4 10             	add    esp,0x10
c000b7b7:	eb 08                	jmp    c000b7c1 <fmod_one+0x92>
c000b7b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b7bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b7c1:	83 c4 2c             	add    esp,0x2c
c000b7c4:	c3                   	ret    

c000b7c5 <prepare_data>:
c000b7c5:	55                   	push   ebp
c000b7c6:	57                   	push   edi
c000b7c7:	56                   	push   esi
c000b7c8:	53                   	push   ebx
c000b7c9:	83 ec 1c             	sub    esp,0x1c
c000b7cc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b7d0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b7d4:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b7d8:	0f 89 57 01 00 00    	jns    c000b935 <prepare_data+0x170>
c000b7de:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b7e1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7e4:	85 d2                	test   edx,edx
c000b7e6:	75 0d                	jne    c000b7f5 <prepare_data+0x30>
c000b7e8:	8d 14 36             	lea    edx,[esi+esi*1]
c000b7eb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b7ee:	29 d0                	sub    eax,edx
c000b7f0:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7f3:	eb 44                	jmp    c000b839 <prepare_data+0x74>
c000b7f5:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b7f8:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b7fb:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b7fe:	39 c1                	cmp    ecx,eax
c000b800:	7d 04                	jge    c000b806 <prepare_data+0x41>
c000b802:	29 d0                	sub    eax,edx
c000b804:	eb 2d                	jmp    c000b833 <prepare_data+0x6e>
c000b806:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b80c:	29 d7                	sub    edi,edx
c000b80e:	01 f7                	add    edi,esi
c000b810:	51                   	push   ecx
c000b811:	29 f2                	sub    edx,esi
c000b813:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b81a:	8d 14 90             	lea    edx,[eax+edx*4]
c000b81d:	51                   	push   ecx
c000b81e:	52                   	push   edx
c000b81f:	50                   	push   eax
c000b820:	e8 53 4e ff ff       	call   c0000678 <memmove>
c000b825:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b828:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b82b:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b82e:	29 f0                	sub    eax,esi
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	29 f0                	sub    eax,esi
c000b835:	79 02                	jns    c000b839 <prepare_data+0x74>
c000b837:	31 c0                	xor    eax,eax
c000b839:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b83c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b83f:	29 ef                	sub    edi,ebp
c000b841:	39 c7                	cmp    edi,eax
c000b843:	7e 02                	jle    c000b847 <prepare_data+0x82>
c000b845:	89 c7                	mov    edi,eax
c000b847:	89 f8                	mov    eax,edi
c000b849:	99                   	cdq    
c000b84a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b84d:	b8 15 00 00 00       	mov    eax,0x15
c000b852:	29 d7                	sub    edi,edx
c000b854:	0f 88 dd 00 00 00    	js     c000b937 <prepare_data+0x172>
c000b85a:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b85d:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b860:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b863:	0f 8f ce 00 00 00    	jg     c000b937 <prepare_data+0x172>
c000b869:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b86f:	50                   	push   eax
c000b870:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b877:	50                   	push   eax
c000b878:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b87c:	8b 00                	mov    eax,DWORD PTR [eax]
c000b87e:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b881:	50                   	push   eax
c000b882:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b885:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b889:	50                   	push   eax
c000b88a:	e8 21 4e ff ff       	call   c00006b0 <memcpy>
c000b88f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b892:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b895:	01 fd                	add    ebp,edi
c000b897:	01 f9                	add    ecx,edi
c000b899:	83 c4 10             	add    esp,0x10
c000b89c:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b89f:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b8a2:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b8a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8a9:	0f 85 86 00 00 00    	jne    c000b935 <prepare_data+0x170>
c000b8af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b8b2:	89 e8                	mov    eax,ebp
c000b8b4:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b8b7:	29 c8                	sub    eax,ecx
c000b8b9:	39 f8                	cmp    eax,edi
c000b8bb:	7d 78                	jge    c000b935 <prepare_data+0x170>
c000b8bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b8c1:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b8c5:	74 6e                	je     c000b935 <prepare_data+0x170>
c000b8c7:	8d 7e 04             	lea    edi,[esi+0x4]
c000b8ca:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b8ce:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b8d1:	29 ef                	sub    edi,ebp
c000b8d3:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b8d7:	7c 29                	jl     c000b902 <prepare_data+0x13d>
c000b8d9:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8dc:	29 f1                	sub    ecx,esi
c000b8de:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b8e5:	55                   	push   ebp
c000b8e6:	50                   	push   eax
c000b8e7:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b8ea:	50                   	push   eax
c000b8eb:	52                   	push   edx
c000b8ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8f0:	e8 83 4d ff ff       	call   c0000678 <memmove>
c000b8f5:	83 c4 10             	add    esp,0x10
c000b8f8:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8fb:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b8fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b902:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b905:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b908:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b90b:	83 c6 05             	add    esi,0x5
c000b90e:	78 07                	js     c000b917 <prepare_data+0x152>
c000b910:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b913:	39 cf                	cmp    edi,ecx
c000b915:	7e 04                	jle    c000b91b <prepare_data+0x156>
c000b917:	89 ce                	mov    esi,ecx
c000b919:	29 c6                	sub    esi,eax
c000b91b:	8d 04 82             	lea    eax,[edx+eax*4]
c000b91e:	51                   	push   ecx
c000b91f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b926:	51                   	push   ecx
c000b927:	6a 00                	push   0x0
c000b929:	50                   	push   eax
c000b92a:	e8 b7 4d ff ff       	call   c00006e6 <memset>
c000b92f:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	31 c0                	xor    eax,eax
c000b937:	83 c4 1c             	add    esp,0x1c
c000b93a:	5b                   	pop    ebx
c000b93b:	5e                   	pop    esi
c000b93c:	5f                   	pop    edi
c000b93d:	5d                   	pop    ebp
c000b93e:	c3                   	ret    

c000b93f <sinc_multichan_vari_process>:
c000b93f:	55                   	push   ebp
c000b940:	b8 05 00 00 00       	mov    eax,0x5
c000b945:	57                   	push   edi
c000b946:	56                   	push   esi
c000b947:	53                   	push   ebx
c000b948:	83 ec 4c             	sub    esp,0x4c
c000b94b:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b94f:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b953:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b956:	85 db                	test   ebx,ebx
c000b958:	0f 84 b5 05 00 00    	je     c000bf13 <sinc_multichan_vari_process+0x5d4>
c000b95e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b961:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b964:	0f af d0             	imul   edx,eax
c000b967:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b96a:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b96e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b975:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b978:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b97f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b982:	8b 06                	mov    eax,DWORD PTR [esi]
c000b984:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b988:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b98c:	57                   	push   edi
c000b98d:	57                   	push   edi
c000b98e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b992:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b996:	e8 15 dd ff ff       	call   c00096b0 <is_bad_src_ratio>
c000b99b:	83 c4 10             	add    esp,0x10
c000b99e:	89 c2                	mov    edx,eax
c000b9a0:	b8 16 00 00 00       	mov    eax,0x16
c000b9a5:	85 d2                	test   edx,edx
c000b9a7:	0f 85 66 05 00 00    	jne    c000bf13 <sinc_multichan_vari_process+0x5d4>
c000b9ad:	83 ec 0c             	sub    esp,0xc
c000b9b0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b9b3:	e8 7f 91 01 00       	call   c0024b37 <__floatsidf>
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9c2:	68 00 00 00 40       	push   0x40000000
c000b9c7:	6a 00                	push   0x0
c000b9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9d1:	e8 81 84 01 00       	call   c0023e57 <__adddf3>
c000b9d6:	59                   	pop    ecx
c000b9d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b9df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b9e2:	e8 50 91 01 00       	call   c0024b37 <__floatsidf>
c000b9e7:	83 c4 10             	add    esp,0x10
c000b9ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9f2:	52                   	push   edx
c000b9f3:	50                   	push   eax
c000b9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9fc:	e8 b7 8d 01 00       	call   c00247b8 <__divdf3>
c000ba01:	83 c4 10             	add    esp,0x10
c000ba04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba08:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba0c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba0e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba11:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba14:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba18:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000ba1b:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000ba1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba26:	52                   	push   edx
c000ba27:	50                   	push   eax
c000ba28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba2c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba30:	e8 6e 93 01 00       	call   c0024da3 <__ltdf2>
c000ba35:	83 c4 10             	add    esp,0x10
c000ba38:	85 c0                	test   eax,eax
c000ba3a:	79 1d                	jns    c000ba59 <sinc_multichan_vari_process+0x11a>
c000ba3c:	68 00 00 f0 3f       	push   0x3ff00000
c000ba41:	6a 00                	push   0x0
c000ba43:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba4b:	e8 53 93 01 00       	call   c0024da3 <__ltdf2>
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	85 c0                	test   eax,eax
c000ba55:	78 2c                	js     c000ba83 <sinc_multichan_vari_process+0x144>
c000ba57:	eb 4a                	jmp    c000baa3 <sinc_multichan_vari_process+0x164>
c000ba59:	68 00 00 f0 3f       	push   0x3ff00000
c000ba5e:	6a 00                	push   0x0
c000ba60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba68:	e8 36 93 01 00       	call   c0024da3 <__ltdf2>
c000ba6d:	83 c4 10             	add    esp,0x10
c000ba70:	85 c0                	test   eax,eax
c000ba72:	79 2f                	jns    c000baa3 <sinc_multichan_vari_process+0x164>
c000ba74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba7f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba83:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba87:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba93:	e8 20 8d 01 00       	call   c00247b8 <__divdf3>
c000ba98:	83 c4 10             	add    esp,0x10
c000ba9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba9f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000baa3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000baa6:	50                   	push   eax
c000baa7:	50                   	push   eax
c000baa8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000baac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab0:	e8 ab 94 01 00       	call   c0024f60 <lrint>
c000bab5:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bab8:	40                   	inc    eax
c000bab9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000babd:	0f af c7             	imul   eax,edi
c000bac0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bac4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bac7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bacb:	58                   	pop    eax
c000bacc:	5a                   	pop    edx
c000bacd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bad1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bad5:	e8 55 fc ff ff       	call   c000b72f <fmod_one>
c000bada:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000badd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bae5:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bae8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000baec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baf8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bafc:	e8 a7 89 01 00       	call   c00244a8 <__subdf3>
c000bb01:	83 c4 18             	add    esp,0x18
c000bb04:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb0c:	52                   	push   edx
c000bb0d:	50                   	push   eax
c000bb0e:	e8 4d 94 01 00       	call   c0024f60 <lrint>
c000bb13:	0f af f8             	imul   edi,eax
c000bb16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bb1a:	01 f8                	add    eax,edi
c000bb1c:	99                   	cdq    
c000bb1d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bb20:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bb23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb2b:	68 00 00 f0 3f       	push   0x3ff00000
c000bb30:	6a 00                	push   0x0
c000bb32:	e8 81 8c 01 00       	call   c00247b8 <__divdf3>
c000bb37:	83 c4 10             	add    esp,0x10
c000bb3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb42:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bb47:	68 23 42 92 0c       	push   0xc924223
c000bb4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb54:	e8 fe 82 01 00       	call   c0023e57 <__adddf3>
c000bb59:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bb5d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bb61:	83 c4 20             	add    esp,0x20
c000bb64:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb6c:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb74:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb77:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb7a:	7d 4e                	jge    c000bbca <sinc_multichan_vari_process+0x28b>
c000bb7c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb7f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb82:	01 c8                	add    eax,ecx
c000bb84:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb87:	99                   	cdq    
c000bb88:	f7 f9                	idiv   ecx
c000bb8a:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb8e:	7d 0c                	jge    c000bb9c <sinc_multichan_vari_process+0x25d>
c000bb90:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb93:	85 ff                	test   edi,edi
c000bb95:	79 68                	jns    c000bbff <sinc_multichan_vari_process+0x2c0>
c000bb97:	e9 e3 00 00 00       	jmp    c000bc7f <sinc_multichan_vari_process+0x340>
c000bb9c:	50                   	push   eax
c000bb9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba1:	55                   	push   ebp
c000bba2:	53                   	push   ebx
c000bba3:	e8 1d fc ff ff       	call   c000b7c5 <prepare_data>
c000bba8:	83 c4 10             	add    esp,0x10
c000bbab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bbae:	85 c0                	test   eax,eax
c000bbb0:	0f 85 5d 03 00 00    	jne    c000bf13 <sinc_multichan_vari_process+0x5d4>
c000bbb6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bbb9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bbbc:	01 c8                	add    eax,ecx
c000bbbe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bbc1:	99                   	cdq    
c000bbc2:	f7 f9                	idiv   ecx
c000bbc4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bbc8:	7c c6                	jl     c000bb90 <sinc_multichan_vari_process+0x251>
c000bbca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bbcd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbd1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bbd4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bbd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bbdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbdf:	89 06                	mov    DWORD PTR [esi],eax
c000bbe1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bbe4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bbe7:	99                   	cdq    
c000bbe8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbeb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bbee:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bbf1:	99                   	cdq    
c000bbf2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbf5:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bbf8:	31 c0                	xor    eax,eax
c000bbfa:	e9 14 03 00 00       	jmp    c000bf13 <sinc_multichan_vari_process+0x5d4>
c000bbff:	83 ec 0c             	sub    esp,0xc
c000bc02:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bc05:	e8 2d 8f 01 00       	call   c0024b37 <__floatsidf>
c000bc0a:	83 c4 10             	add    esp,0x10
c000bc0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc11:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc15:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc19:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc25:	e8 2d 82 01 00       	call   c0023e57 <__adddf3>
c000bc2a:	83 c4 10             	add    esp,0x10
c000bc2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc45:	e8 0d 82 01 00       	call   c0023e57 <__adddf3>
c000bc4a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bc4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc51:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc55:	e8 dd 8e 01 00       	call   c0024b37 <__floatsidf>
c000bc5a:	83 c4 10             	add    esp,0x10
c000bc5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc65:	52                   	push   edx
c000bc66:	50                   	push   eax
c000bc67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc6f:	e8 2d 91 01 00       	call   c0024da1 <__gedf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	0f 89 4b ff ff ff    	jns    c000bbca <sinc_multichan_vari_process+0x28b>
c000bc7f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc83:	0f 8e ed 00 00 00    	jle    c000bd76 <sinc_multichan_vari_process+0x437>
c000bc89:	83 ec 10             	sub    esp,0x10
c000bc8c:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc8f:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc92:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc95:	ff 36                	push   DWORD PTR [esi]
c000bc97:	e8 0c 88 01 00       	call   c00244a8 <__subdf3>
c000bc9c:	83 c4 18             	add    esp,0x18
c000bc9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bca7:	52                   	push   edx
c000bca8:	50                   	push   eax
c000bca9:	e8 92 92 01 00       	call   c0024f40 <fabs>
c000bcae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcb6:	83 c4 10             	add    esp,0x10
c000bcb9:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bcbe:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bcc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcc7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bccb:	e8 b5 90 01 00       	call   c0024d85 <__gtdf2>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	85 c0                	test   eax,eax
c000bcd5:	0f 8e 9b 00 00 00    	jle    c000bd76 <sinc_multichan_vari_process+0x437>
c000bcdb:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcdd:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bce4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bce8:	52                   	push   edx
c000bce9:	50                   	push   eax
c000bcea:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bced:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bcf0:	e8 b3 87 01 00       	call   c00244a8 <__subdf3>
c000bcf5:	59                   	pop    ecx
c000bcf6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bcfa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bcfe:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bd01:	e8 31 8e 01 00       	call   c0024b37 <__floatsidf>
c000bd06:	83 c4 10             	add    esp,0x10
c000bd09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd0d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd11:	52                   	push   edx
c000bd12:	50                   	push   eax
c000bd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd1b:	e8 b4 87 01 00       	call   c00244d4 <__muldf3>
c000bd20:	5f                   	pop    edi
c000bd21:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd25:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd29:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bd2c:	e8 06 8e 01 00       	call   c0024b37 <__floatsidf>
c000bd31:	83 c4 10             	add    esp,0x10
c000bd34:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd38:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd3c:	52                   	push   edx
c000bd3d:	50                   	push   eax
c000bd3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd46:	e8 6d 8a 01 00       	call   c00247b8 <__divdf3>
c000bd4b:	83 c4 10             	add    esp,0x10
c000bd4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd62:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd66:	e8 ec 80 01 00       	call   c0023e57 <__adddf3>
c000bd6b:	83 c4 10             	add    esp,0x10
c000bd6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd76:	83 ec 0c             	sub    esp,0xc
c000bd79:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd7c:	e8 b6 8d 01 00       	call   c0024b37 <__floatsidf>
c000bd81:	83 c4 10             	add    esp,0x10
c000bd84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd90:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd9c:	e8 02 90 01 00       	call   c0024da3 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bdaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bdae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bdb2:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bdb6:	78 10                	js     c000bdc8 <sinc_multichan_vari_process+0x489>
c000bdb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdbc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bdc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd8:	e8 f7 86 01 00       	call   c00244d4 <__muldf3>
c000bddd:	59                   	pop    ecx
c000bdde:	5f                   	pop    edi
c000bddf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdef:	e8 14 f9 ff ff       	call   c000b708 <double_to_fp>
c000bdf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf8:	89 c7                	mov    edi,eax
c000bdfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be06:	e8 c9 86 01 00       	call   c00244d4 <__muldf3>
c000be0b:	83 c4 18             	add    esp,0x18
c000be0e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be16:	52                   	push   edx
c000be17:	50                   	push   eax
c000be18:	e8 eb f8 ff ff       	call   c000b708 <double_to_fp>
c000be1d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000be20:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000be24:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000be27:	8d 04 90             	lea    eax,[eax+edx*4]
c000be2a:	50                   	push   eax
c000be2b:	50                   	push   eax
c000be2c:	50                   	push   eax
c000be2d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000be30:	e8 02 8d 01 00       	call   c0024b37 <__floatsidf>
c000be35:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be39:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be41:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be45:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be4d:	e8 66 89 01 00       	call   c00247b8 <__divdf3>
c000be52:	83 c4 1c             	add    esp,0x1c
c000be55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be59:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be5d:	52                   	push   edx
c000be5e:	89 fa                	mov    edx,edi
c000be60:	50                   	push   eax
c000be61:	89 d8                	mov    eax,ebx
c000be63:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be66:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be6a:	e8 58 ed ff ff       	call   c000abc7 <calc_output_multi>
c000be6f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be72:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be85:	e8 2e 89 01 00       	call   c00247b8 <__divdf3>
c000be8a:	83 c4 10             	add    esp,0x10
c000be8d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be91:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bea1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bea5:	e8 ad 7f 01 00       	call   c0023e57 <__adddf3>
c000beaa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000beae:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000beb2:	83 c4 28             	add    esp,0x28
c000beb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bebd:	e8 6d f8 ff ff       	call   c000b72f <fmod_one>
c000bec2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bec5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bec9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000becd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bed0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bedc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bee0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bee4:	e8 bf 85 01 00       	call   c00244a8 <__subdf3>
c000bee9:	83 c4 18             	add    esp,0x18
c000beec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bef0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	e8 65 90 01 00       	call   c0024f60 <lrint>
c000befb:	0f af f8             	imul   edi,eax
c000befe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	01 f8                	add    eax,edi
c000bf07:	99                   	cdq    
c000bf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf0e:	e9 61 fc ff ff       	jmp    c000bb74 <sinc_multichan_vari_process+0x235>
c000bf13:	83 c4 4c             	add    esp,0x4c
c000bf16:	5b                   	pop    ebx
c000bf17:	5e                   	pop    esi
c000bf18:	5f                   	pop    edi
c000bf19:	5d                   	pop    ebp
c000bf1a:	c3                   	ret    

c000bf1b <sinc_hex_vari_process>:
c000bf1b:	55                   	push   ebp
c000bf1c:	b8 05 00 00 00       	mov    eax,0x5
c000bf21:	57                   	push   edi
c000bf22:	56                   	push   esi
c000bf23:	53                   	push   ebx
c000bf24:	83 ec 4c             	sub    esp,0x4c
c000bf27:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf2b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf2f:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf32:	85 db                	test   ebx,ebx
c000bf34:	0f 84 b7 05 00 00    	je     c000c4f1 <sinc_hex_vari_process+0x5d6>
c000bf3a:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bf3d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf40:	0f af d0             	imul   edx,eax
c000bf43:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bf46:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bf4a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf51:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf54:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf5b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf5e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf69:	57                   	push   edi
c000bf6a:	57                   	push   edi
c000bf6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf73:	e8 38 d7 ff ff       	call   c00096b0 <is_bad_src_ratio>
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	89 c2                	mov    edx,eax
c000bf7d:	b8 16 00 00 00       	mov    eax,0x16
c000bf82:	85 d2                	test   edx,edx
c000bf84:	0f 85 67 05 00 00    	jne    c000c4f1 <sinc_hex_vari_process+0x5d6>
c000bf8a:	83 ec 0c             	sub    esp,0xc
c000bf8d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf90:	e8 a2 8b 01 00       	call   c0024b37 <__floatsidf>
c000bf95:	83 c4 10             	add    esp,0x10
c000bf98:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf9f:	68 00 00 00 40       	push   0x40000000
c000bfa4:	6a 00                	push   0x0
c000bfa6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfae:	e8 a4 7e 01 00       	call   c0023e57 <__adddf3>
c000bfb3:	59                   	pop    ecx
c000bfb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bfb8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bfbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfbf:	e8 73 8b 01 00       	call   c0024b37 <__floatsidf>
c000bfc4:	83 c4 10             	add    esp,0x10
c000bfc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfcb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfcf:	52                   	push   edx
c000bfd0:	50                   	push   eax
c000bfd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfd9:	e8 da 87 01 00       	call   c00247b8 <__divdf3>
c000bfde:	83 c4 10             	add    esp,0x10
c000bfe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfe9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bfec:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bfef:	89 04 24             	mov    DWORD PTR [esp],eax
c000bff2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bff6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bff9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bffc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c000:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c004:	52                   	push   edx
c000c005:	50                   	push   eax
c000c006:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c00a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c00e:	e8 90 8d 01 00       	call   c0024da3 <__ltdf2>
c000c013:	83 c4 10             	add    esp,0x10
c000c016:	85 c0                	test   eax,eax
c000c018:	79 1d                	jns    c000c037 <sinc_hex_vari_process+0x11c>
c000c01a:	68 00 00 f0 3f       	push   0x3ff00000
c000c01f:	6a 00                	push   0x0
c000c021:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c025:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c029:	e8 75 8d 01 00       	call   c0024da3 <__ltdf2>
c000c02e:	83 c4 10             	add    esp,0x10
c000c031:	85 c0                	test   eax,eax
c000c033:	78 2c                	js     c000c061 <sinc_hex_vari_process+0x146>
c000c035:	eb 4a                	jmp    c000c081 <sinc_hex_vari_process+0x166>
c000c037:	68 00 00 f0 3f       	push   0x3ff00000
c000c03c:	6a 00                	push   0x0
c000c03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c046:	e8 58 8d 01 00       	call   c0024da3 <__ltdf2>
c000c04b:	83 c4 10             	add    esp,0x10
c000c04e:	85 c0                	test   eax,eax
c000c050:	79 2f                	jns    c000c081 <sinc_hex_vari_process+0x166>
c000c052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c056:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c05a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c05d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c061:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c065:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c069:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c06d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c071:	e8 42 87 01 00       	call   c00247b8 <__divdf3>
c000c076:	83 c4 10             	add    esp,0x10
c000c079:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c07d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c081:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c084:	50                   	push   eax
c000c085:	50                   	push   eax
c000c086:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08e:	e8 cd 8e 01 00       	call   c0024f60 <lrint>
c000c093:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c096:	40                   	inc    eax
c000c097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c09b:	0f af c7             	imul   eax,edi
c000c09e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a9:	58                   	pop    eax
c000c0aa:	5a                   	pop    edx
c000c0ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b3:	e8 77 f6 ff ff       	call   c000b72f <fmod_one>
c000c0b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c0bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0bf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c0c3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0da:	e8 c9 83 01 00       	call   c00244a8 <__subdf3>
c000c0df:	83 c4 18             	add    esp,0x18
c000c0e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0ea:	52                   	push   edx
c000c0eb:	50                   	push   eax
c000c0ec:	e8 6f 8e 01 00       	call   c0024f60 <lrint>
c000c0f1:	0f af f8             	imul   edi,eax
c000c0f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0f8:	01 f8                	add    eax,edi
c000c0fa:	99                   	cdq    
c000c0fb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0fe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c109:	68 00 00 f0 3f       	push   0x3ff00000
c000c10e:	6a 00                	push   0x0
c000c110:	e8 a3 86 01 00       	call   c00247b8 <__divdf3>
c000c115:	83 c4 10             	add    esp,0x10
c000c118:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c11c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c120:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c125:	68 23 42 92 0c       	push   0xc924223
c000c12a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c12e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c132:	e8 20 7d 01 00       	call   c0023e57 <__adddf3>
c000c137:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c13b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c13f:	83 c4 20             	add    esp,0x20
c000c142:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c14a:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c152:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c155:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c158:	7d 4e                	jge    c000c1a8 <sinc_hex_vari_process+0x28d>
c000c15a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c15d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c160:	01 c8                	add    eax,ecx
c000c162:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c165:	99                   	cdq    
c000c166:	f7 f9                	idiv   ecx
c000c168:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c16c:	7d 0c                	jge    c000c17a <sinc_hex_vari_process+0x25f>
c000c16e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c171:	85 ff                	test   edi,edi
c000c173:	79 69                	jns    c000c1de <sinc_hex_vari_process+0x2c3>
c000c175:	e9 e4 00 00 00       	jmp    c000c25e <sinc_hex_vari_process+0x343>
c000c17a:	50                   	push   eax
c000c17b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c17f:	56                   	push   esi
c000c180:	53                   	push   ebx
c000c181:	e8 3f f6 ff ff       	call   c000b7c5 <prepare_data>
c000c186:	83 c4 10             	add    esp,0x10
c000c189:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c18c:	85 c0                	test   eax,eax
c000c18e:	0f 85 5d 03 00 00    	jne    c000c4f1 <sinc_hex_vari_process+0x5d6>
c000c194:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c197:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c19a:	01 c8                	add    eax,ecx
c000c19c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c19f:	99                   	cdq    
c000c1a0:	f7 f9                	idiv   ecx
c000c1a2:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c1a6:	7c c6                	jl     c000c16e <sinc_hex_vari_process+0x253>
c000c1a8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c1ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c1af:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1b2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c1b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1c0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c1c3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1c6:	99                   	cdq    
c000c1c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c1cd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c1d0:	99                   	cdq    
c000c1d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1d4:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c1d7:	31 c0                	xor    eax,eax
c000c1d9:	e9 13 03 00 00       	jmp    c000c4f1 <sinc_hex_vari_process+0x5d6>
c000c1de:	83 ec 0c             	sub    esp,0xc
c000c1e1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c1e4:	e8 4e 89 01 00       	call   c0024b37 <__floatsidf>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1f8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c200:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c204:	e8 4e 7c 01 00       	call   c0023e57 <__adddf3>
c000c209:	83 c4 10             	add    esp,0x10
c000c20c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c210:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c214:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c218:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c21c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c220:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c224:	e8 2e 7c 01 00       	call   c0023e57 <__adddf3>
c000c229:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c22c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c230:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c234:	e8 fe 88 01 00       	call   c0024b37 <__floatsidf>
c000c239:	83 c4 10             	add    esp,0x10
c000c23c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c240:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c244:	52                   	push   edx
c000c245:	50                   	push   eax
c000c246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c24e:	e8 4e 8b 01 00       	call   c0024da1 <__gedf2>
c000c253:	83 c4 10             	add    esp,0x10
c000c256:	85 c0                	test   eax,eax
c000c258:	0f 89 4a ff ff ff    	jns    c000c1a8 <sinc_hex_vari_process+0x28d>
c000c25e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c262:	0f 8e ef 00 00 00    	jle    c000c357 <sinc_hex_vari_process+0x43c>
c000c268:	83 ec 10             	sub    esp,0x10
c000c26b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c26e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c271:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c274:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c277:	e8 2c 82 01 00       	call   c00244a8 <__subdf3>
c000c27c:	83 c4 18             	add    esp,0x18
c000c27f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c283:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c287:	52                   	push   edx
c000c288:	50                   	push   eax
c000c289:	e8 b2 8c 01 00       	call   c0024f40 <fabs>
c000c28e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c292:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c296:	83 c4 10             	add    esp,0x10
c000c299:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c29e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ab:	e8 d5 8a 01 00       	call   c0024d85 <__gtdf2>
c000c2b0:	83 c4 10             	add    esp,0x10
c000c2b3:	85 c0                	test   eax,eax
c000c2b5:	0f 8e 9c 00 00 00    	jle    c000c357 <sinc_hex_vari_process+0x43c>
c000c2bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2be:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2c9:	52                   	push   edx
c000c2ca:	50                   	push   eax
c000c2cb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ce:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2d1:	e8 d2 81 01 00       	call   c00244a8 <__subdf3>
c000c2d6:	59                   	pop    ecx
c000c2d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2df:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c2e2:	e8 50 88 01 00       	call   c0024b37 <__floatsidf>
c000c2e7:	83 c4 10             	add    esp,0x10
c000c2ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2f2:	52                   	push   edx
c000c2f3:	50                   	push   eax
c000c2f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2fc:	e8 d3 81 01 00       	call   c00244d4 <__muldf3>
c000c301:	5f                   	pop    edi
c000c302:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c306:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c30a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c30d:	e8 25 88 01 00       	call   c0024b37 <__floatsidf>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	52                   	push   edx
c000c31e:	50                   	push   eax
c000c31f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c327:	e8 8c 84 01 00       	call   c00247b8 <__divdf3>
c000c32c:	83 c4 10             	add    esp,0x10
c000c32f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c333:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c337:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c33b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c33f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c343:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c347:	e8 0b 7b 01 00       	call   c0023e57 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	83 ec 0c             	sub    esp,0xc
c000c35a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c35d:	e8 d5 87 01 00       	call   c0024b37 <__floatsidf>
c000c362:	83 c4 10             	add    esp,0x10
c000c365:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c369:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c371:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c379:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37d:	e8 21 8a 01 00       	call   c0024da3 <__ltdf2>
c000c382:	83 c4 10             	add    esp,0x10
c000c385:	85 c0                	test   eax,eax
c000c387:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c38b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c38f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c393:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c397:	78 10                	js     c000c3a9 <sinc_hex_vari_process+0x48e>
c000c399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c39d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c3a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c3a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c3a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3b9:	e8 16 81 01 00       	call   c00244d4 <__muldf3>
c000c3be:	59                   	pop    ecx
c000c3bf:	5f                   	pop    edi
c000c3c0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3d0:	e8 33 f3 ff ff       	call   c000b708 <double_to_fp>
c000c3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3d9:	89 c7                	mov    edi,eax
c000c3db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e7:	e8 e8 80 01 00       	call   c00244d4 <__muldf3>
c000c3ec:	83 c4 18             	add    esp,0x18
c000c3ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3f7:	52                   	push   edx
c000c3f8:	50                   	push   eax
c000c3f9:	e8 0a f3 ff ff       	call   c000b708 <double_to_fp>
c000c3fe:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c401:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c405:	83 c4 0c             	add    esp,0xc
c000c408:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c40b:	8d 04 90             	lea    eax,[eax+edx*4]
c000c40e:	50                   	push   eax
c000c40f:	50                   	push   eax
c000c410:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c413:	e8 1f 87 01 00       	call   c0024b37 <__floatsidf>
c000c418:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c41c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c420:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c424:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c430:	e8 83 83 01 00       	call   c00247b8 <__divdf3>
c000c435:	83 c4 18             	add    esp,0x18
c000c438:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c43c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c440:	52                   	push   edx
c000c441:	89 fa                	mov    edx,edi
c000c443:	50                   	push   eax
c000c444:	89 d8                	mov    eax,ebx
c000c446:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c44a:	e8 26 df ff ff       	call   c000a375 <calc_output_hex>
c000c44f:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c45f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c463:	e8 50 83 01 00       	call   c00247b8 <__divdf3>
c000c468:	83 c4 10             	add    esp,0x10
c000c46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c477:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c483:	e8 cf 79 01 00       	call   c0023e57 <__adddf3>
c000c488:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c48c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c490:	83 c4 18             	add    esp,0x18
c000c493:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c497:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c49b:	e8 8f f2 ff ff       	call   c000b72f <fmod_one>
c000c4a0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c4a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c4ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c4ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c2:	e8 e1 7f 01 00       	call   c00244a8 <__subdf3>
c000c4c7:	83 c4 18             	add    esp,0x18
c000c4ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4d2:	52                   	push   edx
c000c4d3:	50                   	push   eax
c000c4d4:	e8 87 8a 01 00       	call   c0024f60 <lrint>
c000c4d9:	0f af f8             	imul   edi,eax
c000c4dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c4e0:	83 c4 10             	add    esp,0x10
c000c4e3:	01 f8                	add    eax,edi
c000c4e5:	99                   	cdq    
c000c4e6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c4e9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c4ec:	e9 61 fc ff ff       	jmp    c000c152 <sinc_hex_vari_process+0x237>
c000c4f1:	83 c4 4c             	add    esp,0x4c
c000c4f4:	5b                   	pop    ebx
c000c4f5:	5e                   	pop    esi
c000c4f6:	5f                   	pop    edi
c000c4f7:	5d                   	pop    ebp
c000c4f8:	c3                   	ret    

c000c4f9 <sinc_quad_vari_process>:
c000c4f9:	55                   	push   ebp
c000c4fa:	b8 05 00 00 00       	mov    eax,0x5
c000c4ff:	57                   	push   edi
c000c500:	56                   	push   esi
c000c501:	53                   	push   ebx
c000c502:	83 ec 4c             	sub    esp,0x4c
c000c505:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c509:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c50d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c510:	85 db                	test   ebx,ebx
c000c512:	0f 84 b7 05 00 00    	je     c000cacf <sinc_quad_vari_process+0x5d6>
c000c518:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c51b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c51e:	0f af d0             	imul   edx,eax
c000c521:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c524:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c528:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c52f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c532:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c539:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c53c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c53f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c543:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c547:	57                   	push   edi
c000c548:	57                   	push   edi
c000c549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c54d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c551:	e8 5a d1 ff ff       	call   c00096b0 <is_bad_src_ratio>
c000c556:	83 c4 10             	add    esp,0x10
c000c559:	89 c2                	mov    edx,eax
c000c55b:	b8 16 00 00 00       	mov    eax,0x16
c000c560:	85 d2                	test   edx,edx
c000c562:	0f 85 67 05 00 00    	jne    c000cacf <sinc_quad_vari_process+0x5d6>
c000c568:	83 ec 0c             	sub    esp,0xc
c000c56b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c56e:	e8 c4 85 01 00       	call   c0024b37 <__floatsidf>
c000c573:	83 c4 10             	add    esp,0x10
c000c576:	89 04 24             	mov    DWORD PTR [esp],eax
c000c579:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c57d:	68 00 00 00 40       	push   0x40000000
c000c582:	6a 00                	push   0x0
c000c584:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c588:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c58c:	e8 c6 78 01 00       	call   c0023e57 <__adddf3>
c000c591:	59                   	pop    ecx
c000c592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c596:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c59a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c59d:	e8 95 85 01 00       	call   c0024b37 <__floatsidf>
c000c5a2:	83 c4 10             	add    esp,0x10
c000c5a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5a9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ad:	52                   	push   edx
c000c5ae:	50                   	push   eax
c000c5af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5b7:	e8 fc 81 01 00       	call   c00247b8 <__divdf3>
c000c5bc:	83 c4 10             	add    esp,0x10
c000c5bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5c3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5ca:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5cd:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5d0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c5d7:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5de:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e2:	52                   	push   edx
c000c5e3:	50                   	push   eax
c000c5e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5ec:	e8 b2 87 01 00       	call   c0024da3 <__ltdf2>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	85 c0                	test   eax,eax
c000c5f6:	79 1d                	jns    c000c615 <sinc_quad_vari_process+0x11c>
c000c5f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c5fd:	6a 00                	push   0x0
c000c5ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c603:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c607:	e8 97 87 01 00       	call   c0024da3 <__ltdf2>
c000c60c:	83 c4 10             	add    esp,0x10
c000c60f:	85 c0                	test   eax,eax
c000c611:	78 2c                	js     c000c63f <sinc_quad_vari_process+0x146>
c000c613:	eb 4a                	jmp    c000c65f <sinc_quad_vari_process+0x166>
c000c615:	68 00 00 f0 3f       	push   0x3ff00000
c000c61a:	6a 00                	push   0x0
c000c61c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c624:	e8 7a 87 01 00       	call   c0024da3 <__ltdf2>
c000c629:	83 c4 10             	add    esp,0x10
c000c62c:	85 c0                	test   eax,eax
c000c62e:	79 2f                	jns    c000c65f <sinc_quad_vari_process+0x166>
c000c630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c634:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c638:	89 04 24             	mov    DWORD PTR [esp],eax
c000c63b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c63f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c643:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c647:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64f:	e8 64 81 01 00       	call   c00247b8 <__divdf3>
c000c654:	83 c4 10             	add    esp,0x10
c000c657:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c65b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c65f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c662:	50                   	push   eax
c000c663:	50                   	push   eax
c000c664:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c668:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66c:	e8 ef 88 01 00       	call   c0024f60 <lrint>
c000c671:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c674:	40                   	inc    eax
c000c675:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c679:	0f af c7             	imul   eax,edi
c000c67c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c683:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c687:	58                   	pop    eax
c000c688:	5a                   	pop    edx
c000c689:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c691:	e8 99 f0 ff ff       	call   c000b72f <fmod_one>
c000c696:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c699:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c69d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c6a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c6a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b8:	e8 eb 7d 01 00       	call   c00244a8 <__subdf3>
c000c6bd:	83 c4 18             	add    esp,0x18
c000c6c0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6c8:	52                   	push   edx
c000c6c9:	50                   	push   eax
c000c6ca:	e8 91 88 01 00       	call   c0024f60 <lrint>
c000c6cf:	0f af f8             	imul   edi,eax
c000c6d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6d6:	01 f8                	add    eax,edi
c000c6d8:	99                   	cdq    
c000c6d9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c6dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6e7:	68 00 00 f0 3f       	push   0x3ff00000
c000c6ec:	6a 00                	push   0x0
c000c6ee:	e8 c5 80 01 00       	call   c00247b8 <__divdf3>
c000c6f3:	83 c4 10             	add    esp,0x10
c000c6f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6fe:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c703:	68 23 42 92 0c       	push   0xc924223
c000c708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c70c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c710:	e8 42 77 01 00       	call   c0023e57 <__adddf3>
c000c715:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c719:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c71d:	83 c4 20             	add    esp,0x20
c000c720:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c728:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c730:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c733:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c736:	7d 4e                	jge    c000c786 <sinc_quad_vari_process+0x28d>
c000c738:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c73b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c73e:	01 c8                	add    eax,ecx
c000c740:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c743:	99                   	cdq    
c000c744:	f7 f9                	idiv   ecx
c000c746:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c74a:	7d 0c                	jge    c000c758 <sinc_quad_vari_process+0x25f>
c000c74c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c74f:	85 ff                	test   edi,edi
c000c751:	79 69                	jns    c000c7bc <sinc_quad_vari_process+0x2c3>
c000c753:	e9 e4 00 00 00       	jmp    c000c83c <sinc_quad_vari_process+0x343>
c000c758:	50                   	push   eax
c000c759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c75d:	56                   	push   esi
c000c75e:	53                   	push   ebx
c000c75f:	e8 61 f0 ff ff       	call   c000b7c5 <prepare_data>
c000c764:	83 c4 10             	add    esp,0x10
c000c767:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c76a:	85 c0                	test   eax,eax
c000c76c:	0f 85 5d 03 00 00    	jne    c000cacf <sinc_quad_vari_process+0x5d6>
c000c772:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c775:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c778:	01 c8                	add    eax,ecx
c000c77a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c77d:	99                   	cdq    
c000c77e:	f7 f9                	idiv   ecx
c000c780:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c784:	7c c6                	jl     c000c74c <sinc_quad_vari_process+0x253>
c000c786:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c789:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c78d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c790:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c797:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c79b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c79e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c7a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c7a4:	99                   	cdq    
c000c7a5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c7a8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c7ab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c7ae:	99                   	cdq    
c000c7af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c7b2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c7b5:	31 c0                	xor    eax,eax
c000c7b7:	e9 13 03 00 00       	jmp    c000cacf <sinc_quad_vari_process+0x5d6>
c000c7bc:	83 ec 0c             	sub    esp,0xc
c000c7bf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c7c2:	e8 70 83 01 00       	call   c0024b37 <__floatsidf>
c000c7c7:	83 c4 10             	add    esp,0x10
c000c7ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7d2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7d6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e2:	e8 70 76 01 00       	call   c0023e57 <__adddf3>
c000c7e7:	83 c4 10             	add    esp,0x10
c000c7ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c802:	e8 50 76 01 00       	call   c0023e57 <__adddf3>
c000c807:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c80a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c80e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c812:	e8 20 83 01 00       	call   c0024b37 <__floatsidf>
c000c817:	83 c4 10             	add    esp,0x10
c000c81a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c81e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c822:	52                   	push   edx
c000c823:	50                   	push   eax
c000c824:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c82c:	e8 70 85 01 00       	call   c0024da1 <__gedf2>
c000c831:	83 c4 10             	add    esp,0x10
c000c834:	85 c0                	test   eax,eax
c000c836:	0f 89 4a ff ff ff    	jns    c000c786 <sinc_quad_vari_process+0x28d>
c000c83c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c840:	0f 8e ef 00 00 00    	jle    c000c935 <sinc_quad_vari_process+0x43c>
c000c846:	83 ec 10             	sub    esp,0x10
c000c849:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c84c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c84f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c852:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c855:	e8 4e 7c 01 00       	call   c00244a8 <__subdf3>
c000c85a:	83 c4 18             	add    esp,0x18
c000c85d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c861:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c865:	52                   	push   edx
c000c866:	50                   	push   eax
c000c867:	e8 d4 86 01 00       	call   c0024f40 <fabs>
c000c86c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c870:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c874:	83 c4 10             	add    esp,0x10
c000c877:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c87c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c881:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c885:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c889:	e8 f7 84 01 00       	call   c0024d85 <__gtdf2>
c000c88e:	83 c4 10             	add    esp,0x10
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8e 9c 00 00 00    	jle    c000c935 <sinc_quad_vari_process+0x43c>
c000c899:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c89c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	52                   	push   edx
c000c8a8:	50                   	push   eax
c000c8a9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c8ac:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c8af:	e8 f4 7b 01 00       	call   c00244a8 <__subdf3>
c000c8b4:	59                   	pop    ecx
c000c8b5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8b9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8bd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c8c0:	e8 72 82 01 00       	call   c0024b37 <__floatsidf>
c000c8c5:	83 c4 10             	add    esp,0x10
c000c8c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d0:	52                   	push   edx
c000c8d1:	50                   	push   eax
c000c8d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8da:	e8 f5 7b 01 00       	call   c00244d4 <__muldf3>
c000c8df:	5f                   	pop    edi
c000c8e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8e4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8e8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c8eb:	e8 47 82 01 00       	call   c0024b37 <__floatsidf>
c000c8f0:	83 c4 10             	add    esp,0x10
c000c8f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8fb:	52                   	push   edx
c000c8fc:	50                   	push   eax
c000c8fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c901:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c905:	e8 ae 7e 01 00       	call   c00247b8 <__divdf3>
c000c90a:	83 c4 10             	add    esp,0x10
c000c90d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c911:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c915:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c919:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c91d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c921:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c925:	e8 2d 75 01 00       	call   c0023e57 <__adddf3>
c000c92a:	83 c4 10             	add    esp,0x10
c000c92d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c935:	83 ec 0c             	sub    esp,0xc
c000c938:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c93b:	e8 f7 81 01 00       	call   c0024b37 <__floatsidf>
c000c940:	83 c4 10             	add    esp,0x10
c000c943:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c947:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	e8 43 84 01 00       	call   c0024da3 <__ltdf2>
c000c960:	83 c4 10             	add    esp,0x10
c000c963:	85 c0                	test   eax,eax
c000c965:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c969:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c96d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c971:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c975:	78 10                	js     c000c987 <sinc_quad_vari_process+0x48e>
c000c977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c97f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	e8 38 7b 01 00       	call   c00244d4 <__muldf3>
c000c99c:	59                   	pop    ecx
c000c99d:	5f                   	pop    edi
c000c99e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c9a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	e8 55 ed ff ff       	call   c000b708 <double_to_fp>
c000c9b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b7:	89 c7                	mov    edi,eax
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c5:	e8 0a 7b 01 00       	call   c00244d4 <__muldf3>
c000c9ca:	83 c4 18             	add    esp,0x18
c000c9cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9d5:	52                   	push   edx
c000c9d6:	50                   	push   eax
c000c9d7:	e8 2c ed ff ff       	call   c000b708 <double_to_fp>
c000c9dc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c9df:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c9e3:	83 c4 0c             	add    esp,0xc
c000c9e6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c9e9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c9ec:	50                   	push   eax
c000c9ed:	50                   	push   eax
c000c9ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9f1:	e8 41 81 01 00       	call   c0024b37 <__floatsidf>
c000c9f6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9fa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c9fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca0e:	e8 a5 7d 01 00       	call   c00247b8 <__divdf3>
c000ca13:	83 c4 18             	add    esp,0x18
c000ca16:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca1a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca1e:	52                   	push   edx
c000ca1f:	89 fa                	mov    edx,edi
c000ca21:	50                   	push   eax
c000ca22:	89 d8                	mov    eax,ebx
c000ca24:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000ca28:	e8 62 d3 ff ff       	call   c0009d8f <calc_output_quad>
c000ca2d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca41:	e8 72 7d 01 00       	call   c00247b8 <__divdf3>
c000ca46:	83 c4 10             	add    esp,0x10
c000ca49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca61:	e8 f1 73 01 00       	call   c0023e57 <__adddf3>
c000ca66:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca6a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca6e:	83 c4 18             	add    esp,0x18
c000ca71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca75:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca79:	e8 b1 ec ff ff       	call   c000b72f <fmod_one>
c000ca7e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca85:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca89:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca8c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caa0:	e8 03 7a 01 00       	call   c00244a8 <__subdf3>
c000caa5:	83 c4 18             	add    esp,0x18
c000caa8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab0:	52                   	push   edx
c000cab1:	50                   	push   eax
c000cab2:	e8 a9 84 01 00       	call   c0024f60 <lrint>
c000cab7:	0f af f8             	imul   edi,eax
c000caba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cabe:	83 c4 10             	add    esp,0x10
c000cac1:	01 f8                	add    eax,edi
c000cac3:	99                   	cdq    
c000cac4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cac7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000caca:	e9 61 fc ff ff       	jmp    c000c730 <sinc_quad_vari_process+0x237>
c000cacf:	83 c4 4c             	add    esp,0x4c
c000cad2:	5b                   	pop    ebx
c000cad3:	5e                   	pop    esi
c000cad4:	5f                   	pop    edi
c000cad5:	5d                   	pop    ebp
c000cad6:	c3                   	ret    

c000cad7 <sinc_stereo_vari_process>:
c000cad7:	55                   	push   ebp
c000cad8:	b8 05 00 00 00       	mov    eax,0x5
c000cadd:	57                   	push   edi
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	83 ec 4c             	sub    esp,0x4c
c000cae3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cae7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000caeb:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000caee:	85 db                	test   ebx,ebx
c000caf0:	0f 84 b7 05 00 00    	je     c000d0ad <sinc_stereo_vari_process+0x5d6>
c000caf6:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000caf9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cafc:	0f af d0             	imul   edx,eax
c000caff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000cb02:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000cb06:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cb0d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cb10:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cb17:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb25:	57                   	push   edi
c000cb26:	57                   	push   edi
c000cb27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb2f:	e8 7c cb ff ff       	call   c00096b0 <is_bad_src_ratio>
c000cb34:	83 c4 10             	add    esp,0x10
c000cb37:	89 c2                	mov    edx,eax
c000cb39:	b8 16 00 00 00       	mov    eax,0x16
c000cb3e:	85 d2                	test   edx,edx
c000cb40:	0f 85 67 05 00 00    	jne    c000d0ad <sinc_stereo_vari_process+0x5d6>
c000cb46:	83 ec 0c             	sub    esp,0xc
c000cb49:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cb4c:	e8 e6 7f 01 00       	call   c0024b37 <__floatsidf>
c000cb51:	83 c4 10             	add    esp,0x10
c000cb54:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb57:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb5b:	68 00 00 00 40       	push   0x40000000
c000cb60:	6a 00                	push   0x0
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb6a:	e8 e8 72 01 00       	call   c0023e57 <__adddf3>
c000cb6f:	59                   	pop    ecx
c000cb70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb74:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb78:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb7b:	e8 b7 7f 01 00       	call   c0024b37 <__floatsidf>
c000cb80:	83 c4 10             	add    esp,0x10
c000cb83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb8b:	52                   	push   edx
c000cb8c:	50                   	push   eax
c000cb8d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb95:	e8 1e 7c 01 00       	call   c00247b8 <__divdf3>
c000cb9a:	83 c4 10             	add    esp,0x10
c000cb9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cba1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cba5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cba8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbab:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbb2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cbb5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cbb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbc0:	52                   	push   edx
c000cbc1:	50                   	push   eax
c000cbc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbc6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbca:	e8 d4 81 01 00       	call   c0024da3 <__ltdf2>
c000cbcf:	83 c4 10             	add    esp,0x10
c000cbd2:	85 c0                	test   eax,eax
c000cbd4:	79 1d                	jns    c000cbf3 <sinc_stereo_vari_process+0x11c>
c000cbd6:	68 00 00 f0 3f       	push   0x3ff00000
c000cbdb:	6a 00                	push   0x0
c000cbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbe5:	e8 b9 81 01 00       	call   c0024da3 <__ltdf2>
c000cbea:	83 c4 10             	add    esp,0x10
c000cbed:	85 c0                	test   eax,eax
c000cbef:	78 2c                	js     c000cc1d <sinc_stereo_vari_process+0x146>
c000cbf1:	eb 4a                	jmp    c000cc3d <sinc_stereo_vari_process+0x166>
c000cbf3:	68 00 00 f0 3f       	push   0x3ff00000
c000cbf8:	6a 00                	push   0x0
c000cbfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc02:	e8 9c 81 01 00       	call   c0024da3 <__ltdf2>
c000cc07:	83 c4 10             	add    esp,0x10
c000cc0a:	85 c0                	test   eax,eax
c000cc0c:	79 2f                	jns    c000cc3d <sinc_stereo_vari_process+0x166>
c000cc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cc16:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc19:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc1d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc21:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc2d:	e8 86 7b 01 00       	call   c00247b8 <__divdf3>
c000cc32:	83 c4 10             	add    esp,0x10
c000cc35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cc3d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc40:	50                   	push   eax
c000cc41:	50                   	push   eax
c000cc42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc4a:	e8 11 83 01 00       	call   c0024f60 <lrint>
c000cc4f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cc52:	40                   	inc    eax
c000cc53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc57:	0f af c7             	imul   eax,edi
c000cc5a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc65:	58                   	pop    eax
c000cc66:	5a                   	pop    edx
c000cc67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc6f:	e8 bb ea ff ff       	call   c000b72f <fmod_one>
c000cc74:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc96:	e8 0d 78 01 00       	call   c00244a8 <__subdf3>
c000cc9b:	83 c4 18             	add    esp,0x18
c000cc9e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cca6:	52                   	push   edx
c000cca7:	50                   	push   eax
c000cca8:	e8 b3 82 01 00       	call   c0024f60 <lrint>
c000ccad:	0f af f8             	imul   edi,eax
c000ccb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ccb4:	01 f8                	add    eax,edi
c000ccb6:	99                   	cdq    
c000ccb7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ccba:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ccbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc5:	68 00 00 f0 3f       	push   0x3ff00000
c000ccca:	6a 00                	push   0x0
c000cccc:	e8 e7 7a 01 00       	call   c00247b8 <__divdf3>
c000ccd1:	83 c4 10             	add    esp,0x10
c000ccd4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccdc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cce1:	68 23 42 92 0c       	push   0xc924223
c000cce6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccee:	e8 64 71 01 00       	call   c0023e57 <__adddf3>
c000ccf3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ccf7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ccfb:	83 c4 20             	add    esp,0x20
c000ccfe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000cd06:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000cd0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cd11:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cd14:	7d 4e                	jge    c000cd64 <sinc_stereo_vari_process+0x28d>
c000cd16:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd1c:	01 c8                	add    eax,ecx
c000cd1e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd21:	99                   	cdq    
c000cd22:	f7 f9                	idiv   ecx
c000cd24:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd28:	7d 0c                	jge    c000cd36 <sinc_stereo_vari_process+0x25f>
c000cd2a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cd2d:	85 ff                	test   edi,edi
c000cd2f:	79 69                	jns    c000cd9a <sinc_stereo_vari_process+0x2c3>
c000cd31:	e9 e4 00 00 00       	jmp    c000ce1a <sinc_stereo_vari_process+0x343>
c000cd36:	50                   	push   eax
c000cd37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd3b:	56                   	push   esi
c000cd3c:	53                   	push   ebx
c000cd3d:	e8 83 ea ff ff       	call   c000b7c5 <prepare_data>
c000cd42:	83 c4 10             	add    esp,0x10
c000cd45:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cd48:	85 c0                	test   eax,eax
c000cd4a:	0f 85 5d 03 00 00    	jne    c000d0ad <sinc_stereo_vari_process+0x5d6>
c000cd50:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd56:	01 c8                	add    eax,ecx
c000cd58:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd5b:	99                   	cdq    
c000cd5c:	f7 f9                	idiv   ecx
c000cd5e:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd62:	7c c6                	jl     c000cd2a <sinc_stereo_vari_process+0x253>
c000cd64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cd67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd6b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd6e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd79:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd7c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd7f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd82:	99                   	cdq    
c000cd83:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd86:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd89:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd8c:	99                   	cdq    
c000cd8d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd90:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd93:	31 c0                	xor    eax,eax
c000cd95:	e9 13 03 00 00       	jmp    c000d0ad <sinc_stereo_vari_process+0x5d6>
c000cd9a:	83 ec 0c             	sub    esp,0xc
c000cd9d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cda0:	e8 92 7d 01 00       	call   c0024b37 <__floatsidf>
c000cda5:	83 c4 10             	add    esp,0x10
c000cda8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cdb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cdb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc0:	e8 92 70 01 00       	call   c0023e57 <__adddf3>
c000cdc5:	83 c4 10             	add    esp,0x10
c000cdc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdcc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cddc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde0:	e8 72 70 01 00       	call   c0023e57 <__adddf3>
c000cde5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cde8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf0:	e8 42 7d 01 00       	call   c0024b37 <__floatsidf>
c000cdf5:	83 c4 10             	add    esp,0x10
c000cdf8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdfc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce00:	52                   	push   edx
c000ce01:	50                   	push   eax
c000ce02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce0a:	e8 92 7f 01 00       	call   c0024da1 <__gedf2>
c000ce0f:	83 c4 10             	add    esp,0x10
c000ce12:	85 c0                	test   eax,eax
c000ce14:	0f 89 4a ff ff ff    	jns    c000cd64 <sinc_stereo_vari_process+0x28d>
c000ce1a:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000ce1e:	0f 8e ef 00 00 00    	jle    c000cf13 <sinc_stereo_vari_process+0x43c>
c000ce24:	83 ec 10             	sub    esp,0x10
c000ce27:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce30:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ce33:	e8 70 76 01 00       	call   c00244a8 <__subdf3>
c000ce38:	83 c4 18             	add    esp,0x18
c000ce3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce3f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce43:	52                   	push   edx
c000ce44:	50                   	push   eax
c000ce45:	e8 f6 80 01 00       	call   c0024f40 <fabs>
c000ce4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce52:	83 c4 10             	add    esp,0x10
c000ce55:	68 df 7c db 3d       	push   0x3ddb7cdf
c000ce5a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce67:	e8 19 7f 01 00       	call   c0024d85 <__gtdf2>
c000ce6c:	83 c4 10             	add    esp,0x10
c000ce6f:	85 c0                	test   eax,eax
c000ce71:	0f 8e 9c 00 00 00    	jle    c000cf13 <sinc_stereo_vari_process+0x43c>
c000ce77:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce7a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce85:	52                   	push   edx
c000ce86:	50                   	push   eax
c000ce87:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce8a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce8d:	e8 16 76 01 00       	call   c00244a8 <__subdf3>
c000ce92:	59                   	pop    ecx
c000ce93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce97:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce9b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce9e:	e8 94 7c 01 00       	call   c0024b37 <__floatsidf>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceae:	52                   	push   edx
c000ceaf:	50                   	push   eax
c000ceb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ceb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ceb8:	e8 17 76 01 00       	call   c00244d4 <__muldf3>
c000cebd:	5f                   	pop    edi
c000cebe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cec2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cec6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cec9:	e8 69 7c 01 00       	call   c0024b37 <__floatsidf>
c000cece:	83 c4 10             	add    esp,0x10
c000ced1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ced5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ced9:	52                   	push   edx
c000ceda:	50                   	push   eax
c000cedb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee3:	e8 d0 78 01 00       	call   c00247b8 <__divdf3>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ceef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cef3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cef7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cefb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ceff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf03:	e8 4f 6f 01 00       	call   c0023e57 <__adddf3>
c000cf08:	83 c4 10             	add    esp,0x10
c000cf0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf13:	83 ec 0c             	sub    esp,0xc
c000cf16:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf19:	e8 19 7c 01 00       	call   c0024b37 <__floatsidf>
c000cf1e:	83 c4 10             	add    esp,0x10
c000cf21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf2d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf39:	e8 65 7e 01 00       	call   c0024da3 <__ltdf2>
c000cf3e:	83 c4 10             	add    esp,0x10
c000cf41:	85 c0                	test   eax,eax
c000cf43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000cf53:	78 10                	js     c000cf65 <sinc_stereo_vari_process+0x48e>
c000cf55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cf5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf61:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf75:	e8 5a 75 01 00       	call   c00244d4 <__muldf3>
c000cf7a:	59                   	pop    ecx
c000cf7b:	5f                   	pop    edi
c000cf7c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf8c:	e8 77 e7 ff ff       	call   c000b708 <double_to_fp>
c000cf91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf95:	89 c7                	mov    edi,eax
c000cf97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa3:	e8 2c 75 01 00       	call   c00244d4 <__muldf3>
c000cfa8:	83 c4 18             	add    esp,0x18
c000cfab:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfaf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfb3:	52                   	push   edx
c000cfb4:	50                   	push   eax
c000cfb5:	e8 4e e7 ff ff       	call   c000b708 <double_to_fp>
c000cfba:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cfbd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cfc1:	83 c4 0c             	add    esp,0xc
c000cfc4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cfc7:	8d 04 90             	lea    eax,[eax+edx*4]
c000cfca:	50                   	push   eax
c000cfcb:	50                   	push   eax
c000cfcc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfcf:	e8 63 7b 01 00       	call   c0024b37 <__floatsidf>
c000cfd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfec:	e8 c7 77 01 00       	call   c00247b8 <__divdf3>
c000cff1:	83 c4 18             	add    esp,0x18
c000cff4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cff8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cffc:	52                   	push   edx
c000cffd:	89 fa                	mov    edx,edi
c000cfff:	50                   	push   eax
c000d000:	89 d8                	mov    eax,ebx
c000d002:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d006:	e8 a6 c9 ff ff       	call   c00099b1 <calc_output_stereo>
c000d00b:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d00f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d017:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01f:	e8 94 77 01 00       	call   c00247b8 <__divdf3>
c000d024:	83 c4 10             	add    esp,0x10
c000d027:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d02b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d02f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d033:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d03b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d03f:	e8 13 6e 01 00       	call   c0023e57 <__adddf3>
c000d044:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d048:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d04c:	83 c4 18             	add    esp,0x18
c000d04f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d053:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d057:	e8 d3 e6 ff ff       	call   c000b72f <fmod_one>
c000d05c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d05f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d063:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d067:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d072:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d076:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07e:	e8 25 74 01 00       	call   c00244a8 <__subdf3>
c000d083:	83 c4 18             	add    esp,0x18
c000d086:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d08a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d08e:	52                   	push   edx
c000d08f:	50                   	push   eax
c000d090:	e8 cb 7e 01 00       	call   c0024f60 <lrint>
c000d095:	0f af f8             	imul   edi,eax
c000d098:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	01 f8                	add    eax,edi
c000d0a1:	99                   	cdq    
c000d0a2:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0a8:	e9 61 fc ff ff       	jmp    c000cd0e <sinc_stereo_vari_process+0x237>
c000d0ad:	83 c4 4c             	add    esp,0x4c
c000d0b0:	5b                   	pop    ebx
c000d0b1:	5e                   	pop    esi
c000d0b2:	5f                   	pop    edi
c000d0b3:	5d                   	pop    ebp
c000d0b4:	c3                   	ret    

c000d0b5 <sinc_mono_vari_process>:
c000d0b5:	55                   	push   ebp
c000d0b6:	b8 05 00 00 00       	mov    eax,0x5
c000d0bb:	57                   	push   edi
c000d0bc:	56                   	push   esi
c000d0bd:	53                   	push   ebx
c000d0be:	83 ec 4c             	sub    esp,0x4c
c000d0c1:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0c5:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0c9:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0cc:	85 db                	test   ebx,ebx
c000d0ce:	0f 84 e8 05 00 00    	je     c000d6bc <sinc_mono_vari_process+0x607>
c000d0d4:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d0d7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d0da:	0f af d0             	imul   edx,eax
c000d0dd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d0e0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d0e4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0eb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0ee:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d103:	57                   	push   edi
c000d104:	57                   	push   edi
c000d105:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d109:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d10d:	e8 9e c5 ff ff       	call   c00096b0 <is_bad_src_ratio>
c000d112:	83 c4 10             	add    esp,0x10
c000d115:	89 c2                	mov    edx,eax
c000d117:	b8 16 00 00 00       	mov    eax,0x16
c000d11c:	85 d2                	test   edx,edx
c000d11e:	0f 85 98 05 00 00    	jne    c000d6bc <sinc_mono_vari_process+0x607>
c000d124:	83 ec 0c             	sub    esp,0xc
c000d127:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d12a:	e8 08 7a 01 00       	call   c0024b37 <__floatsidf>
c000d12f:	83 c4 10             	add    esp,0x10
c000d132:	89 04 24             	mov    DWORD PTR [esp],eax
c000d135:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d139:	68 00 00 00 40       	push   0x40000000
c000d13e:	6a 00                	push   0x0
c000d140:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d144:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d148:	e8 0a 6d 01 00       	call   c0023e57 <__adddf3>
c000d14d:	59                   	pop    ecx
c000d14e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d152:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d156:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d159:	e8 d9 79 01 00       	call   c0024b37 <__floatsidf>
c000d15e:	83 c4 10             	add    esp,0x10
c000d161:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d165:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d169:	52                   	push   edx
c000d16a:	50                   	push   eax
c000d16b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d16f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d173:	e8 40 76 01 00       	call   c00247b8 <__divdf3>
c000d178:	83 c4 10             	add    esp,0x10
c000d17b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d17f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d183:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d186:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d189:	89 04 24             	mov    DWORD PTR [esp],eax
c000d18c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d193:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d196:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d19a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d19e:	52                   	push   edx
c000d19f:	50                   	push   eax
c000d1a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1a8:	e8 f6 7b 01 00       	call   c0024da3 <__ltdf2>
c000d1ad:	83 c4 10             	add    esp,0x10
c000d1b0:	85 c0                	test   eax,eax
c000d1b2:	79 1d                	jns    c000d1d1 <sinc_mono_vari_process+0x11c>
c000d1b4:	68 00 00 f0 3f       	push   0x3ff00000
c000d1b9:	6a 00                	push   0x0
c000d1bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1c3:	e8 db 7b 01 00       	call   c0024da3 <__ltdf2>
c000d1c8:	83 c4 10             	add    esp,0x10
c000d1cb:	85 c0                	test   eax,eax
c000d1cd:	78 2c                	js     c000d1fb <sinc_mono_vari_process+0x146>
c000d1cf:	eb 4a                	jmp    c000d21b <sinc_mono_vari_process+0x166>
c000d1d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d1d6:	6a 00                	push   0x0
c000d1d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e0:	e8 be 7b 01 00       	call   c0024da3 <__ltdf2>
c000d1e5:	83 c4 10             	add    esp,0x10
c000d1e8:	85 c0                	test   eax,eax
c000d1ea:	79 2f                	jns    c000d21b <sinc_mono_vari_process+0x166>
c000d1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1fb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1ff:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d203:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d207:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d20b:	e8 a8 75 01 00       	call   c00247b8 <__divdf3>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d217:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d21b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d21e:	50                   	push   eax
c000d21f:	50                   	push   eax
c000d220:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d224:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d228:	e8 33 7d 01 00       	call   c0024f60 <lrint>
c000d22d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d230:	40                   	inc    eax
c000d231:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d235:	0f af c7             	imul   eax,edi
c000d238:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d23f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d243:	58                   	pop    eax
c000d244:	5a                   	pop    edx
c000d245:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d249:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24d:	e8 dd e4 ff ff       	call   c000b72f <fmod_one>
c000d252:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d255:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d259:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d25d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d260:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d264:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d268:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d26c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d270:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d274:	e8 2f 72 01 00       	call   c00244a8 <__subdf3>
c000d279:	83 c4 18             	add    esp,0x18
c000d27c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d280:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d284:	52                   	push   edx
c000d285:	50                   	push   eax
c000d286:	e8 d5 7c 01 00       	call   c0024f60 <lrint>
c000d28b:	0f af f8             	imul   edi,eax
c000d28e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d292:	01 f8                	add    eax,edi
c000d294:	99                   	cdq    
c000d295:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d298:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d29b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d29f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a3:	68 00 00 f0 3f       	push   0x3ff00000
c000d2a8:	6a 00                	push   0x0
c000d2aa:	e8 09 75 01 00       	call   c00247b8 <__divdf3>
c000d2af:	83 c4 10             	add    esp,0x10
c000d2b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d2bf:	68 23 42 92 0c       	push   0xc924223
c000d2c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2cc:	e8 86 6b 01 00       	call   c0023e57 <__adddf3>
c000d2d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d2d9:	83 c4 20             	add    esp,0x20
c000d2dc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d2e4:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d2ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d2ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d2f2:	7d 4e                	jge    c000d342 <sinc_mono_vari_process+0x28d>
c000d2f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d2fa:	01 c8                	add    eax,ecx
c000d2fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d2ff:	99                   	cdq    
c000d300:	f7 f9                	idiv   ecx
c000d302:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d306:	7d 0c                	jge    c000d314 <sinc_mono_vari_process+0x25f>
c000d308:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d30b:	85 ff                	test   edi,edi
c000d30d:	79 69                	jns    c000d378 <sinc_mono_vari_process+0x2c3>
c000d30f:	e9 e4 00 00 00       	jmp    c000d3f8 <sinc_mono_vari_process+0x343>
c000d314:	57                   	push   edi
c000d315:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d319:	56                   	push   esi
c000d31a:	53                   	push   ebx
c000d31b:	e8 a5 e4 ff ff       	call   c000b7c5 <prepare_data>
c000d320:	83 c4 10             	add    esp,0x10
c000d323:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d326:	85 c0                	test   eax,eax
c000d328:	0f 85 8e 03 00 00    	jne    c000d6bc <sinc_mono_vari_process+0x607>
c000d32e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d331:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d334:	01 c8                	add    eax,ecx
c000d336:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d339:	99                   	cdq    
c000d33a:	f7 f9                	idiv   ecx
c000d33c:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d340:	7c c6                	jl     c000d308 <sinc_mono_vari_process+0x253>
c000d342:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d345:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d349:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d34c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d34f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d353:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d357:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d35a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d35d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d360:	99                   	cdq    
c000d361:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d364:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d367:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d36a:	99                   	cdq    
c000d36b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d36e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d371:	31 c0                	xor    eax,eax
c000d373:	e9 44 03 00 00       	jmp    c000d6bc <sinc_mono_vari_process+0x607>
c000d378:	83 ec 0c             	sub    esp,0xc
c000d37b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d37e:	e8 b4 77 01 00       	call   c0024b37 <__floatsidf>
c000d383:	83 c4 10             	add    esp,0x10
c000d386:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d38a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d38e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d392:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	e8 b4 6a 01 00       	call   c0023e57 <__adddf3>
c000d3a3:	83 c4 10             	add    esp,0x10
c000d3a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d3aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d3ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3be:	e8 94 6a 01 00       	call   c0023e57 <__adddf3>
c000d3c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d3c6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3ce:	e8 64 77 01 00       	call   c0024b37 <__floatsidf>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3de:	52                   	push   edx
c000d3df:	50                   	push   eax
c000d3e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e8:	e8 98 79 01 00       	call   c0024d85 <__gtdf2>
c000d3ed:	83 c4 10             	add    esp,0x10
c000d3f0:	85 c0                	test   eax,eax
c000d3f2:	0f 8f 4a ff ff ff    	jg     c000d342 <sinc_mono_vari_process+0x28d>
c000d3f8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d3fc:	0f 8e ef 00 00 00    	jle    c000d4f1 <sinc_mono_vari_process+0x43c>
c000d402:	83 ec 10             	sub    esp,0x10
c000d405:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d408:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d40b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d40e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d411:	e8 92 70 01 00       	call   c00244a8 <__subdf3>
c000d416:	83 c4 18             	add    esp,0x18
c000d419:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d41d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d421:	52                   	push   edx
c000d422:	50                   	push   eax
c000d423:	e8 18 7b 01 00       	call   c0024f40 <fabs>
c000d428:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d42c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d430:	83 c4 10             	add    esp,0x10
c000d433:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d438:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d43d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d441:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d445:	e8 3b 79 01 00       	call   c0024d85 <__gtdf2>
c000d44a:	83 c4 10             	add    esp,0x10
c000d44d:	85 c0                	test   eax,eax
c000d44f:	0f 8e 9c 00 00 00    	jle    c000d4f1 <sinc_mono_vari_process+0x43c>
c000d455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d458:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d45b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d45f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d463:	52                   	push   edx
c000d464:	50                   	push   eax
c000d465:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d468:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d46b:	e8 38 70 01 00       	call   c00244a8 <__subdf3>
c000d470:	5f                   	pop    edi
c000d471:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d475:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d479:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d47c:	e8 b6 76 01 00       	call   c0024b37 <__floatsidf>
c000d481:	83 c4 10             	add    esp,0x10
c000d484:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d488:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d48c:	52                   	push   edx
c000d48d:	50                   	push   eax
c000d48e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d496:	e8 39 70 01 00       	call   c00244d4 <__muldf3>
c000d49b:	59                   	pop    ecx
c000d49c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d4a0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d4a4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d4a7:	e8 8b 76 01 00       	call   c0024b37 <__floatsidf>
c000d4ac:	83 c4 10             	add    esp,0x10
c000d4af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b7:	52                   	push   edx
c000d4b8:	50                   	push   eax
c000d4b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c1:	e8 f2 72 01 00       	call   c00247b8 <__divdf3>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e1:	e8 71 69 01 00       	call   c0023e57 <__adddf3>
c000d4e6:	83 c4 10             	add    esp,0x10
c000d4e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f1:	83 ec 0c             	sub    esp,0xc
c000d4f4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4f7:	e8 3b 76 01 00       	call   c0024b37 <__floatsidf>
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d503:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d507:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d50b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d517:	e8 87 78 01 00       	call   c0024da3 <__ltdf2>
c000d51c:	83 c4 10             	add    esp,0x10
c000d51f:	85 c0                	test   eax,eax
c000d521:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d525:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d529:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d52d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d531:	78 10                	js     c000d543 <sinc_mono_vari_process+0x48e>
c000d533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d537:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d53b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d53f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d543:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d553:	e8 7c 6f 01 00       	call   c00244d4 <__muldf3>
c000d558:	59                   	pop    ecx
c000d559:	5f                   	pop    edi
c000d55a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d562:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d566:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d56a:	e8 99 e1 ff ff       	call   c000b708 <double_to_fp>
c000d56f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d573:	89 c7                	mov    edi,eax
c000d575:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d579:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d581:	e8 4e 6f 01 00       	call   c00244d4 <__muldf3>
c000d586:	83 c4 18             	add    esp,0x18
c000d589:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d58d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d591:	52                   	push   edx
c000d592:	50                   	push   eax
c000d593:	e8 70 e1 ff ff       	call   c000b708 <double_to_fp>
c000d598:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d59c:	83 ec 0c             	sub    esp,0xc
c000d59f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d5a2:	e8 90 75 01 00       	call   c0024b37 <__floatsidf>
c000d5a7:	83 c4 10             	add    esp,0x10
c000d5aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5ae:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5b2:	52                   	push   edx
c000d5b3:	50                   	push   eax
c000d5b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bc:	e8 f7 71 01 00       	call   c00247b8 <__divdf3>
c000d5c1:	83 c4 10             	add    esp,0x10
c000d5c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5c8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5cc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5d0:	89 d8                	mov    eax,ebx
c000d5d2:	89 fa                	mov    edx,edi
c000d5d4:	e8 7c c1 ff ff       	call   c0009755 <calc_output_single>
c000d5d9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d5dc:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d5eb:	52                   	push   edx
c000d5ec:	50                   	push   eax
c000d5ed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5f5:	e8 da 6e 01 00       	call   c00244d4 <__muldf3>
c000d5fa:	59                   	pop    ecx
c000d5fb:	59                   	pop    ecx
c000d5fc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d600:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d604:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d608:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d60c:	e8 96 77 01 00       	call   c0024da7 <__truncdfsf2>
c000d611:	83 c4 10             	add    esp,0x10
c000d614:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d618:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d61b:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d626:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d62a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d62e:	e8 85 71 01 00       	call   c00247b8 <__divdf3>
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d63a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d63e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d642:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d646:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d64a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d64e:	e8 04 68 01 00       	call   c0023e57 <__adddf3>
c000d653:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d657:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d65b:	83 c4 18             	add    esp,0x18
c000d65e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d666:	e8 c4 e0 ff ff       	call   c000b72f <fmod_one>
c000d66b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d66e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d672:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d676:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d679:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d67d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d685:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d689:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d68d:	e8 16 6e 01 00       	call   c00244a8 <__subdf3>
c000d692:	83 c4 18             	add    esp,0x18
c000d695:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d699:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d69d:	52                   	push   edx
c000d69e:	50                   	push   eax
c000d69f:	e8 bc 78 01 00       	call   c0024f60 <lrint>
c000d6a4:	0f af f8             	imul   edi,eax
c000d6a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	01 f8                	add    eax,edi
c000d6b0:	99                   	cdq    
c000d6b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d6b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d6b7:	e9 30 fc ff ff       	jmp    c000d2ec <sinc_mono_vari_process+0x237>
c000d6bc:	83 c4 4c             	add    esp,0x4c
c000d6bf:	5b                   	pop    ebx
c000d6c0:	5e                   	pop    esi
c000d6c1:	5f                   	pop    edi
c000d6c2:	5d                   	pop    ebp
c000d6c3:	c3                   	ret    

c000d6c4 <sinc_get_name>:
c000d6c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6c8:	31 c0                	xor    eax,eax
c000d6ca:	83 fa 02             	cmp    edx,0x2
c000d6cd:	77 07                	ja     c000d6d6 <sinc_get_name+0x12>
c000d6cf:	8b 04 95 44 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd98bc]
c000d6d6:	c3                   	ret    

c000d6d7 <sinc_get_description>:
c000d6d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6db:	31 c0                	xor    eax,eax
c000d6dd:	83 fa 02             	cmp    edx,0x2
c000d6e0:	77 07                	ja     c000d6e9 <sinc_get_description+0x12>
c000d6e2:	8b 04 95 38 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd98c8]
c000d6e9:	c3                   	ret    

c000d6ea <sinc_set_converter>:
c000d6ea:	53                   	push   ebx
c000d6eb:	81 ec 58 08 00 00    	sub    esp,0x858
c000d6f1:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d6f8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d6fb:	85 c0                	test   eax,eax
c000d6fd:	74 13                	je     c000d712 <sinc_set_converter+0x28>
c000d6ff:	83 ec 0c             	sub    esp,0xc
c000d702:	50                   	push   eax
c000d703:	e8 68 1a 00 00       	call   c000f170 <free>
c000d708:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	50                   	push   eax
c000d713:	68 44 08 00 00       	push   0x844
c000d718:	6a 00                	push   0x0
c000d71a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d71e:	50                   	push   eax
c000d71f:	e8 c2 2f ff ff       	call   c00006e6 <memset>
c000d724:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d727:	83 c4 10             	add    esp,0x10
c000d72a:	b8 0b 00 00 00       	mov    eax,0xb
c000d72f:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d735:	7f 6e                	jg     c000d7a5 <sinc_set_converter+0xbb>
c000d737:	83 fa 01             	cmp    edx,0x1
c000d73a:	75 10                	jne    c000d74c <sinc_set_converter+0x62>
c000d73c:	c7 43 24 b5 d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0b5
c000d743:	c7 43 20 b5 d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0b5
c000d74a:	eb 4d                	jmp    c000d799 <sinc_set_converter+0xaf>
c000d74c:	83 fa 02             	cmp    edx,0x2
c000d74f:	75 10                	jne    c000d761 <sinc_set_converter+0x77>
c000d751:	c7 43 24 d7 ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cad7
c000d758:	c7 43 20 d7 ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cad7
c000d75f:	eb 38                	jmp    c000d799 <sinc_set_converter+0xaf>
c000d761:	83 fa 04             	cmp    edx,0x4
c000d764:	75 10                	jne    c000d776 <sinc_set_converter+0x8c>
c000d766:	c7 43 24 f9 c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c4f9
c000d76d:	c7 43 20 f9 c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c4f9
c000d774:	eb 23                	jmp    c000d799 <sinc_set_converter+0xaf>
c000d776:	83 fa 06             	cmp    edx,0x6
c000d779:	75 10                	jne    c000d78b <sinc_set_converter+0xa1>
c000d77b:	c7 43 24 1b bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf1b
c000d782:	c7 43 20 1b bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf1b
c000d789:	eb 0e                	jmp    c000d799 <sinc_set_converter+0xaf>
c000d78b:	c7 43 24 3f b9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b93f
c000d792:	c7 43 20 3f b9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b93f
c000d799:	c7 43 28 5c ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab5c
c000d7a0:	b8 0a 00 00 00       	mov    eax,0xa
c000d7a5:	81 c4 58 08 00 00    	add    esp,0x858
c000d7ab:	5b                   	pop    ebx
c000d7ac:	c3                   	ret    

c000d7ad <is_bad_src_ratio>:
c000d7ad:	83 ec 1c             	sub    esp,0x1c
c000d7b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d7bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7c0:	b8 00 00 00 00       	mov    eax,0x0
c000d7c5:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d7ca:	52                   	push   edx
c000d7cb:	50                   	push   eax
c000d7cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d4:	e8 ca 75 01 00       	call   c0024da3 <__ltdf2>
c000d7d9:	83 c4 10             	add    esp,0x10
c000d7dc:	85 c0                	test   eax,eax
c000d7de:	78 20                	js     c000d800 <is_bad_src_ratio+0x53>
c000d7e0:	b8 00 00 00 00       	mov    eax,0x0
c000d7e5:	ba 00 00 70 40       	mov    edx,0x40700000
c000d7ea:	52                   	push   edx
c000d7eb:	50                   	push   eax
c000d7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7f4:	e8 8c 75 01 00       	call   c0024d85 <__gtdf2>
c000d7f9:	83 c4 10             	add    esp,0x10
c000d7fc:	85 c0                	test   eax,eax
c000d7fe:	7e 07                	jle    c000d807 <is_bad_src_ratio+0x5a>
c000d800:	b8 01 00 00 00       	mov    eax,0x1
c000d805:	eb 05                	jmp    c000d80c <is_bad_src_ratio+0x5f>
c000d807:	b8 00 00 00 00       	mov    eax,0x0
c000d80c:	83 c4 1c             	add    esp,0x1c
c000d80f:	c3                   	ret    

c000d810 <fmod_one>:
c000d810:	83 ec 2c             	sub    esp,0x2c
c000d813:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d817:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d81b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d81f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d823:	83 ec 08             	sub    esp,0x8
c000d826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d82a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d82e:	e8 2d 77 01 00       	call   c0024f60 <lrint>
c000d833:	83 c4 10             	add    esp,0x10
c000d836:	83 ec 0c             	sub    esp,0xc
c000d839:	50                   	push   eax
c000d83a:	e8 f8 72 01 00       	call   c0024b37 <__floatsidf>
c000d83f:	83 c4 10             	add    esp,0x10
c000d842:	52                   	push   edx
c000d843:	50                   	push   eax
c000d844:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d848:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d84c:	e8 57 6c 01 00       	call   c00244a8 <__subdf3>
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d858:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d85c:	b8 00 00 00 00       	mov    eax,0x0
c000d861:	ba 00 00 00 00       	mov    edx,0x0
c000d866:	52                   	push   edx
c000d867:	50                   	push   eax
c000d868:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d86c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d870:	e8 2e 75 01 00       	call   c0024da3 <__ltdf2>
c000d875:	83 c4 10             	add    esp,0x10
c000d878:	85 c0                	test   eax,eax
c000d87a:	79 1e                	jns    c000d89a <fmod_one+0x8a>
c000d87c:	b8 00 00 00 00       	mov    eax,0x0
c000d881:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d886:	52                   	push   edx
c000d887:	50                   	push   eax
c000d888:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d890:	e8 c2 65 01 00       	call   c0023e57 <__adddf3>
c000d895:	83 c4 10             	add    esp,0x10
c000d898:	eb 08                	jmp    c000d8a2 <fmod_one+0x92>
c000d89a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d89e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d8a2:	83 c4 2c             	add    esp,0x2c
c000d8a5:	c3                   	ret    

c000d8a6 <zoh_vari_process>:
c000d8a6:	55                   	push   ebp
c000d8a7:	57                   	push   edi
c000d8a8:	56                   	push   esi
c000d8a9:	53                   	push   ebx
c000d8aa:	83 ec 3c             	sub    esp,0x3c
c000d8ad:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d8b1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d8b5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d8bd:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d8c1:	0f 8e a9 05 00 00    	jle    c000de70 <zoh_vari_process+0x5ca>
c000d8c7:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d8ca:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d8d2:	85 db                	test   ebx,ebx
c000d8d4:	0f 84 96 05 00 00    	je     c000de70 <zoh_vari_process+0x5ca>
c000d8da:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d8dd:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d8e1:	74 19                	je     c000d8fc <zoh_vari_process+0x56>
c000d8e3:	31 d2                	xor    edx,edx
c000d8e5:	39 c2                	cmp    edx,eax
c000d8e7:	7d 0c                	jge    c000d8f5 <zoh_vari_process+0x4f>
c000d8e9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8eb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d8ee:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d8f2:	42                   	inc    edx
c000d8f3:	eb f0                	jmp    c000d8e5 <zoh_vari_process+0x3f>
c000d8f5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d8fc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d8ff:	0f af d0             	imul   edx,eax
c000d902:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d905:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d909:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d910:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d913:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d91a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d91d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d924:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d928:	57                   	push   edi
c000d929:	57                   	push   edi
c000d92a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d92e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d932:	e8 76 fe ff ff       	call   c000d7ad <is_bad_src_ratio>
c000d937:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d93b:	83 c4 10             	add    esp,0x10
c000d93e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d943:	0f 85 1f 05 00 00    	jne    c000de68 <zoh_vari_process+0x5c2>
c000d949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d94c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d94f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d953:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d957:	68 00 00 f0 3f       	push   0x3ff00000
c000d95c:	6a 00                	push   0x0
c000d95e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d966:	e8 38 74 01 00       	call   c0024da3 <__ltdf2>
c000d96b:	83 c4 10             	add    esp,0x10
c000d96e:	85 c0                	test   eax,eax
c000d970:	0f 89 dc 01 00 00    	jns    c000db52 <zoh_vari_process+0x2ac>
c000d976:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d979:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d97c:	0f 8d d0 01 00 00    	jge    c000db52 <zoh_vari_process+0x2ac>
c000d982:	83 ec 0c             	sub    esp,0xc
c000d985:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d988:	e8 aa 71 01 00       	call   c0024b37 <__floatsidf>
c000d98d:	83 c4 10             	add    esp,0x10
c000d990:	89 04 24             	mov    DWORD PTR [esp],eax
c000d993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d997:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9a7:	e8 28 6b 01 00       	call   c00244d4 <__muldf3>
c000d9ac:	59                   	pop    ecx
c000d9ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9b1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9b5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9b8:	e8 7a 71 01 00       	call   c0024b37 <__floatsidf>
c000d9bd:	83 c4 10             	add    esp,0x10
c000d9c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9c8:	52                   	push   edx
c000d9c9:	50                   	push   eax
c000d9ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9d2:	e8 80 64 01 00       	call   c0023e57 <__adddf3>
c000d9d7:	59                   	pop    ecx
c000d9d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9dc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9e0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d9e3:	e8 4f 71 01 00       	call   c0024b37 <__floatsidf>
c000d9e8:	83 c4 10             	add    esp,0x10
c000d9eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9f3:	52                   	push   edx
c000d9f4:	50                   	push   eax
c000d9f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9fd:	e8 9f 73 01 00       	call   c0024da1 <__gedf2>
c000da02:	83 c4 10             	add    esp,0x10
c000da05:	85 c0                	test   eax,eax
c000da07:	0f 89 45 01 00 00    	jns    c000db52 <zoh_vari_process+0x2ac>
c000da0d:	85 ff                	test   edi,edi
c000da0f:	0f 8e ee 00 00 00    	jle    c000db03 <zoh_vari_process+0x25d>
c000da15:	83 ec 10             	sub    esp,0x10
c000da18:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da1b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da1e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da21:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000da24:	e8 7f 6a 01 00       	call   c00244a8 <__subdf3>
c000da29:	83 c4 18             	add    esp,0x18
c000da2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da34:	52                   	push   edx
c000da35:	50                   	push   eax
c000da36:	e8 05 75 01 00       	call   c0024f40 <fabs>
c000da3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da3f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da4b:	68 23 42 92 0c       	push   0xc924223
c000da50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da58:	e8 28 73 01 00       	call   c0024d85 <__gtdf2>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	85 c0                	test   eax,eax
c000da62:	0f 8e 9b 00 00 00    	jle    c000db03 <zoh_vari_process+0x25d>
c000da68:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da6b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da6e:	89 04 24             	mov    DWORD PTR [esp],eax
c000da71:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da75:	52                   	push   edx
c000da76:	50                   	push   eax
c000da77:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da7a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da7d:	e8 26 6a 01 00       	call   c00244a8 <__subdf3>
c000da82:	59                   	pop    ecx
c000da83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da87:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da8b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da8e:	e8 a4 70 01 00       	call   c0024b37 <__floatsidf>
c000da93:	83 c4 10             	add    esp,0x10
c000da96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da9a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da9e:	52                   	push   edx
c000da9f:	50                   	push   eax
c000daa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daa8:	e8 27 6a 01 00       	call   c00244d4 <__muldf3>
c000daad:	5f                   	pop    edi
c000daae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dab2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dab6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dab9:	e8 79 70 01 00       	call   c0024b37 <__floatsidf>
c000dabe:	83 c4 10             	add    esp,0x10
c000dac1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dac5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dac9:	52                   	push   edx
c000daca:	50                   	push   eax
c000dacb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dacf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad3:	e8 e0 6c 01 00       	call   c00247b8 <__divdf3>
c000dad8:	83 c4 10             	add    esp,0x10
c000dadb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dadf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dae3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dae7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000daeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daf3:	e8 5f 63 01 00       	call   c0023e57 <__adddf3>
c000daf8:	83 c4 10             	add    esp,0x10
c000dafb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000daff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db03:	31 c0                	xor    eax,eax
c000db05:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000db08:	7e 13                	jle    c000db1d <zoh_vari_process+0x277>
c000db0a:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000db0e:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000db11:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000db14:	40                   	inc    eax
c000db15:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000db18:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000db1b:	eb e8                	jmp    c000db05 <zoh_vari_process+0x25f>
c000db1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db25:	68 00 00 f0 3f       	push   0x3ff00000
c000db2a:	6a 00                	push   0x0
c000db2c:	e8 87 6c 01 00       	call   c00247b8 <__divdf3>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	89 04 24             	mov    DWORD PTR [esp],eax
c000db37:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db3b:	52                   	push   edx
c000db3c:	50                   	push   eax
c000db3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db45:	e8 0d 63 01 00       	call   c0023e57 <__adddf3>
c000db4a:	83 c4 10             	add    esp,0x10
c000db4d:	e9 fd fd ff ff       	jmp    c000d94f <zoh_vari_process+0xa9>
c000db52:	57                   	push   edi
c000db53:	57                   	push   edi
c000db54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5c:	e8 af fc ff ff       	call   c000d810 <fmod_one>
c000db61:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000db64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db7c:	e8 27 69 01 00       	call   c00244a8 <__subdf3>
c000db81:	83 c4 18             	add    esp,0x18
c000db84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db8c:	52                   	push   edx
c000db8d:	50                   	push   eax
c000db8e:	e8 cd 73 01 00       	call   c0024f60 <lrint>
c000db93:	83 c4 10             	add    esp,0x10
c000db96:	0f af f8             	imul   edi,eax
c000db99:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db9c:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000db9f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000dba3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dba6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000dba9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbad:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dbb0:	0f 8d 1d 02 00 00    	jge    c000ddd3 <zoh_vari_process+0x52d>
c000dbb6:	83 ec 0c             	sub    esp,0xc
c000dbb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbbc:	e8 76 6f 01 00       	call   c0024b37 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbdc:	e8 f3 68 01 00       	call   c00244d4 <__muldf3>
c000dbe1:	59                   	pop    ecx
c000dbe2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbe6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbee:	e8 44 6f 01 00       	call   c0024b37 <__floatsidf>
c000dbf3:	83 c4 10             	add    esp,0x10
c000dbf6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dbfa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dbfe:	52                   	push   edx
c000dbff:	50                   	push   eax
c000dc00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc08:	e8 4a 62 01 00       	call   c0023e57 <__adddf3>
c000dc0d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dc10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc18:	e8 1a 6f 01 00       	call   c0024b37 <__floatsidf>
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc24:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc28:	52                   	push   edx
c000dc29:	50                   	push   eax
c000dc2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc32:	e8 6e 71 01 00       	call   c0024da5 <__ledf2>
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	85 c0                	test   eax,eax
c000dc3c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc40:	0f 8f 8d 01 00 00    	jg     c000ddd3 <zoh_vari_process+0x52d>
c000dc46:	85 c9                	test   ecx,ecx
c000dc48:	0f 8e ef 00 00 00    	jle    c000dd3d <zoh_vari_process+0x497>
c000dc4e:	83 ec 10             	sub    esp,0x10
c000dc51:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc54:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc57:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dc5a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc5d:	e8 46 68 01 00       	call   c00244a8 <__subdf3>
c000dc62:	83 c4 18             	add    esp,0x18
c000dc65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc69:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc6d:	52                   	push   edx
c000dc6e:	50                   	push   eax
c000dc6f:	e8 cc 72 01 00       	call   c0024f40 <fabs>
c000dc74:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc78:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc7c:	83 c4 10             	add    esp,0x10
c000dc7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc84:	68 23 42 92 0c       	push   0xc924223
c000dc89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc91:	e8 ef 70 01 00       	call   c0024d85 <__gtdf2>
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	85 c0                	test   eax,eax
c000dc9b:	0f 8e 9c 00 00 00    	jle    c000dd3d <zoh_vari_process+0x497>
c000dca1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dca4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dca7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcaf:	52                   	push   edx
c000dcb0:	50                   	push   eax
c000dcb1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcb4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcb7:	e8 ec 67 01 00       	call   c00244a8 <__subdf3>
c000dcbc:	5f                   	pop    edi
c000dcbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcc1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dcc5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcc8:	e8 6a 6e 01 00       	call   c0024b37 <__floatsidf>
c000dccd:	83 c4 10             	add    esp,0x10
c000dcd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dcd8:	52                   	push   edx
c000dcd9:	50                   	push   eax
c000dcda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce2:	e8 ed 67 01 00       	call   c00244d4 <__muldf3>
c000dce7:	59                   	pop    ecx
c000dce8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcec:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dcf0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dcf3:	e8 3f 6e 01 00       	call   c0024b37 <__floatsidf>
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd03:	52                   	push   edx
c000dd04:	50                   	push   eax
c000dd05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd0d:	e8 a6 6a 01 00       	call   c00247b8 <__divdf3>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd2d:	e8 25 61 01 00       	call   c0023e57 <__adddf3>
c000dd32:	83 c4 10             	add    esp,0x10
c000dd35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd39:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd3d:	31 c0                	xor    eax,eax
c000dd3f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dd42:	39 c2                	cmp    edx,eax
c000dd44:	7e 1d                	jle    c000dd63 <zoh_vari_process+0x4bd>
c000dd46:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dd49:	29 d1                	sub    ecx,edx
c000dd4b:	89 ca                	mov    edx,ecx
c000dd4d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd4f:	01 c2                	add    edx,eax
c000dd51:	40                   	inc    eax
c000dd52:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dd55:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd58:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd5b:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dd5e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd61:	eb dc                	jmp    c000dd3f <zoh_vari_process+0x499>
c000dd63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd67:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd6b:	68 00 00 f0 3f       	push   0x3ff00000
c000dd70:	6a 00                	push   0x0
c000dd72:	e8 41 6a 01 00       	call   c00247b8 <__divdf3>
c000dd77:	83 c4 10             	add    esp,0x10
c000dd7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd7e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd82:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd86:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd92:	e8 c0 60 01 00       	call   c0023e57 <__adddf3>
c000dd97:	5f                   	pop    edi
c000dd98:	59                   	pop    ecx
c000dd99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dda1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dda5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dda9:	e8 62 fa ff ff       	call   c000d810 <fmod_one>
c000ddae:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ddb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddc9:	e8 da 66 01 00       	call   c00244a8 <__subdf3>
c000ddce:	e9 ae fd ff ff       	jmp    c000db81 <zoh_vari_process+0x2db>
c000ddd3:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000ddd7:	7d 3a                	jge    c000de13 <zoh_vari_process+0x56d>
c000ddd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dddd:	83 ec 0c             	sub    esp,0xc
c000dde0:	29 f8                	sub    eax,edi
c000dde2:	99                   	cdq    
c000dde3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dde6:	50                   	push   eax
c000dde7:	e8 4b 6d 01 00       	call   c0024b37 <__floatsidf>
c000ddec:	83 c4 10             	add    esp,0x10
c000ddef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf7:	52                   	push   edx
c000ddf8:	50                   	push   eax
c000ddf9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddfd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de01:	e8 51 60 01 00       	call   c0023e57 <__adddf3>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000de0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000de0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de13:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000de16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de1a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000de1d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000de20:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de23:	85 c0                	test   eax,eax
c000de25:	7f 24                	jg     c000de4b <zoh_vari_process+0x5a5>
c000de27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000de32:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000de35:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de38:	99                   	cdq    
c000de39:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de3c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000de3f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000de42:	99                   	cdq    
c000de43:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de46:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000de49:	eb 25                	jmp    c000de70 <zoh_vari_process+0x5ca>
c000de4b:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000de4e:	31 d2                	xor    edx,edx
c000de50:	29 c8                	sub    eax,ecx
c000de52:	c1 e0 02             	shl    eax,0x2
c000de55:	39 d1                	cmp    ecx,edx
c000de57:	7e ce                	jle    c000de27 <zoh_vari_process+0x581>
c000de59:	8b 3e                	mov    edi,DWORD PTR [esi]
c000de5b:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000de5e:	83 c0 04             	add    eax,0x4
c000de61:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000de65:	42                   	inc    edx
c000de66:	eb ed                	jmp    c000de55 <zoh_vari_process+0x5af>
c000de68:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de74:	83 c4 3c             	add    esp,0x3c
c000de77:	5b                   	pop    ebx
c000de78:	5e                   	pop    esi
c000de79:	5f                   	pop    edi
c000de7a:	5d                   	pop    ebp
c000de7b:	c3                   	ret    

c000de7c <zoh_reset>:
c000de7c:	83 ec 0c             	sub    esp,0xc
c000de7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de83:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de86:	85 c0                	test   eax,eax
c000de88:	74 20                	je     c000deaa <zoh_reset+0x2e>
c000de8a:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de8d:	83 c0 1c             	add    eax,0x1c
c000de90:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de93:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000de9a:	c1 e2 02             	shl    edx,0x2
c000de9d:	51                   	push   ecx
c000de9e:	52                   	push   edx
c000de9f:	6a 00                	push   0x0
c000dea1:	50                   	push   eax
c000dea2:	e8 3f 28 ff ff       	call   c00006e6 <memset>
c000dea7:	83 c4 10             	add    esp,0x10
c000deaa:	83 c4 0c             	add    esp,0xc
c000dead:	c3                   	ret    

c000deae <zoh_get_name>:
c000deae:	31 c0                	xor    eax,eax
c000deb0:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000deb5:	75 05                	jne    c000debc <zoh_get_name+0xe>
c000deb7:	b8 5e 68 02 c0       	mov    eax,0xc002685e
c000debc:	c3                   	ret    

c000debd <zoh_get_description>:
c000debd:	31 c0                	xor    eax,eax
c000debf:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000dec4:	75 05                	jne    c000decb <zoh_get_description+0xe>
c000dec6:	b8 6f 68 02 c0       	mov    eax,0xc002686f
c000decb:	c3                   	ret    

c000decc <zoh_set_converter>:
c000decc:	53                   	push   ebx
c000decd:	b8 0a 00 00 00       	mov    eax,0xa
c000ded2:	83 ec 08             	sub    esp,0x8
c000ded5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ded9:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000dede:	75 6e                	jne    c000df4e <zoh_set_converter+0x82>
c000dee0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dee3:	85 c0                	test   eax,eax
c000dee5:	74 13                	je     c000defa <zoh_set_converter+0x2e>
c000dee7:	83 ec 0c             	sub    esp,0xc
c000deea:	50                   	push   eax
c000deeb:	e8 80 12 00 00       	call   c000f170 <free>
c000def0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	50                   	push   eax
c000defb:	50                   	push   eax
c000defc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000deff:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000df06:	50                   	push   eax
c000df07:	6a 01                	push   0x1
c000df09:	e8 82 12 00 00       	call   c000f190 <calloc>
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	89 c2                	mov    edx,eax
c000df13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000df16:	85 d2                	test   edx,edx
c000df18:	b8 01 00 00 00       	mov    eax,0x1
c000df1d:	74 2f                	je     c000df4e <zoh_set_converter+0x82>
c000df1f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df22:	83 ec 0c             	sub    esp,0xc
c000df25:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000df28:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000df2e:	c7 43 24 a6 d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d8a6
c000df35:	c7 43 20 a6 d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d8a6
c000df3c:	c7 43 28 7c de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de7c
c000df43:	53                   	push   ebx
c000df44:	e8 33 ff ff ff       	call   c000de7c <zoh_reset>
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	31 c0                	xor    eax,eax
c000df4e:	83 c4 08             	add    esp,0x8
c000df51:	5b                   	pop    ebx
c000df52:	c3                   	ret    
c000df53:	90                   	nop

c000df54 <Computer::close(int, int, void*)>:
c000df54:	57                   	push   edi
c000df55:	56                   	push   esi
c000df56:	53                   	push   ebx
c000df57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df5b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000df5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df63:	83 ec 0c             	sub    esp,0xc
c000df66:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df6c:	e8 61 58 00 00       	call   c00137d2 <Device::closeAll()>
c000df71:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df77:	83 c4 10             	add    esp,0x10
c000df7a:	8b 10                	mov    edx,DWORD PTR [eax]
c000df7c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df80:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df90:	5b                   	pop    ebx
c000df91:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df94:	5e                   	pop    esi
c000df95:	5f                   	pop    edi
c000df96:	ff e0                	jmp    eax

c000df98 <Computer::Computer()>:
c000df98:	83 ec 0c             	sub    esp,0xc
c000df9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9f:	83 ec 08             	sub    esp,0x8
c000dfa2:	68 a6 68 02 c0       	push   0xc00268a6
c000dfa7:	50                   	push   eax
c000dfa8:	e8 9f 58 00 00       	call   c001384c <Device::Device(char const*)>
c000dfad:	83 c4 10             	add    esp,0x10
c000dfb0:	ba 70 6a 02 c0       	mov    edx,0xc0026a70
c000dfb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb9:	89 10                	mov    DWORD PTR [eax],edx
c000dfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dfc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcd:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000dfe1:	83 ca 04             	or     edx,0x4
c000dfe4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000dfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dff4:	0f b6 d0             	movzx  edx,al
c000dff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffb:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e006:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e00c:	0f b6 d0             	movzx  edx,al
c000e00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e013:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e01c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e022:	8d 50 01             	lea    edx,[eax+0x1]
c000e025:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e029:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e02f:	0f b6 d0             	movzx  edx,al
c000e032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e036:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e03a:	83 e1 3f             	and    ecx,0x3f
c000e03d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e045:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e04b:	0f b6 d0             	movzx  edx,al
c000e04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e052:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e063:	0f b6 d0             	movzx  edx,al
c000e066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e073:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e079:	8d 50 01             	lea    edx,[eax+0x1]
c000e07c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e080:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e086:	0f b6 d0             	movzx  edx,al
c000e089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e091:	83 e1 3f             	and    ecx,0x3f
c000e094:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0a2:	0f b6 d0             	movzx  edx,al
c000e0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0ba:	0f b6 d0             	movzx  edx,al
c000e0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0d0:	8d 50 01             	lea    edx,[eax+0x1]
c000e0d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e0d7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e0dd:	0f b6 d0             	movzx  edx,al
c000e0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e0e8:	83 e1 3f             	and    ecx,0x3f
c000e0eb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e0ef:	90                   	nop
c000e0f0:	83 c4 0c             	add    esp,0xc
c000e0f3:	c3                   	ret    

c000e0f4 <Computer::setBootMessage(char const*)>:
c000e0f4:	c3                   	ret    
c000e0f5:	90                   	nop

c000e0f6 <Computer::start()>:
c000e0f6:	56                   	push   esi
c000e0f7:	53                   	push   ebx
c000e0f8:	50                   	push   eax
c000e0f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0fd:	e8 24 e5 00 00       	call   c001c626 <lockScheduler()>
c000e102:	e8 53 e8 00 00       	call   c001c95a <schedule()>
c000e107:	e8 1c e5 00 00       	call   c001c628 <unlockScheduler()>
c000e10c:	fb                   	sti    
c000e10d:	83 ec 0c             	sub    esp,0xc
c000e110:	68 3b 07 00 00       	push   0x73b
c000e115:	e8 48 40 00 00       	call   c0012162 <operator new(unsigned long)>
c000e11a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e121:	89 c6                	mov    esi,eax
c000e123:	ff 35 94 b9 02 c0    	push   DWORD PTR ds:0xc002b994
c000e129:	68 af 68 02 c0       	push   0xc00268af
c000e12e:	6a 01                	push   0x1
c000e130:	50                   	push   eax
c000e131:	e8 50 e3 00 00       	call   c001c486 <Process::Process(bool, char const*, Process*, char**)>
c000e136:	83 c4 20             	add    esp,0x20
c000e139:	68 ff 00 00 00       	push   0xff
c000e13e:	6a 00                	push   0x0
c000e140:	68 ed ea 00 c0       	push   0xc000eaed
c000e145:	56                   	push   esi
c000e146:	e8 05 e6 00 00       	call   c001c750 <Process::createThread(void (*)(void*), void*, int)>
c000e14b:	6a 7a                	push   0x7a
c000e14d:	6a 00                	push   0x0
c000e14f:	68 89 cf 01 c0       	push   0xc001cf89
c000e154:	ff 35 94 b9 02 c0    	push   DWORD PTR ds:0xc002b994
c000e15a:	e8 f1 e5 00 00       	call   c001c750 <Process::createThread(void (*)(void*), void*, int)>
c000e15f:	83 c4 20             	add    esp,0x20
c000e162:	a3 48 b9 02 c0       	mov    ds:0xc002b948,eax
c000e167:	c6 05 ed a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4ed,0x1
c000e16e:	e8 39 44 00 00       	call   c00125ac <initVFS()>
c000e173:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e179:	8b 10                	mov    edx,DWORD PTR [eax]
c000e17b:	6a 00                	push   0x0
c000e17d:	6a 00                	push   0x0
c000e17f:	6a 00                	push   0x0
c000e181:	50                   	push   eax
c000e182:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e185:	e8 fa cc 00 00       	call   c001ae84 <setupSystemCalls()>
c000e18a:	e8 1b 4f 00 00       	call   c00130aa <loadClockSettings()>
c000e18f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e192:	e8 0f 56 00 00       	call   c00137a6 <Device::loadDriversForAll()>
c000e197:	5a                   	pop    edx
c000e198:	8b 1d e8 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4e8
c000e19e:	59                   	pop    ecx
c000e19f:	6a 01                	push   0x1
c000e1a1:	68 bc 68 02 c0       	push   0xc00268bc
c000e1a6:	e8 ab de 00 00       	call   c001c056 <Thr::loadDLL(char const*, bool)>
c000e1ab:	5e                   	pop    esi
c000e1ac:	5a                   	pop    edx
c000e1ad:	53                   	push   ebx
c000e1ae:	50                   	push   eax
c000e1af:	e8 68 e0 00 00       	call   c001c21c <Thr::executeDLL(unsigned long, void*)>
c000e1b4:	c7 04 24 3c 7a 02 c0 	mov    DWORD PTR [esp],0xc0027a3c
c000e1bb:	e8 91 40 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e1c0:	83 c4 10             	add    esp,0x10
c000e1c3:	83 ec 0c             	sub    esp,0xc
c000e1c6:	6a 02                	push   0x2
c000e1c8:	e8 e7 e8 00 00       	call   c001cab4 <blockTask(TaskState)>
c000e1cd:	83 c4 10             	add    esp,0x10
c000e1d0:	eb f1                	jmp    c000e1c3 <Computer::start()+0xcd>

c000e1d2 <firstTask()>:
c000e1d2:	83 ec 18             	sub    esp,0x18
c000e1d5:	ff 35 e8 a4 02 c0    	push   DWORD PTR ds:0xc002a4e8
c000e1db:	e8 16 ff ff ff       	call   c000e0f6 <Computer::start()>

c000e1e0 <Computer::detectFeatures()>:
c000e1e0:	55                   	push   ebp
c000e1e1:	57                   	push   edi
c000e1e2:	56                   	push   esi
c000e1e3:	53                   	push   ebx
c000e1e4:	83 ec 1c             	sub    esp,0x1c
c000e1e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e1eb:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e1f5:	e8 a3 21 ff ff       	call   c000039d <detectCPUID>
c000e1fa:	85 c0                	test   eax,eax
c000e1fc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e202:	0f 95 c2             	setne  dl
c000e205:	83 e0 fd             	and    eax,0xfffffffd
c000e208:	d1 e2                	shl    edx,1
c000e20a:	09 d0                	or     eax,edx
c000e20c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e212:	a8 02                	test   al,0x2
c000e214:	75 46                	jne    c000e25c <Computer::detectFeatures()+0x7c>
c000e216:	f6 05 01 a5 02 c0 04 	test   BYTE PTR ds:0xc002a501,0x4
c000e21d:	74 07                	je     c000e226 <Computer::detectFeatures()+0x46>
c000e21f:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e226:	e8 eb 4b 01 00       	call   c0022e16 <x87Detect>
c000e22b:	83 e0 01             	and    eax,0x1
c000e22e:	c1 e0 04             	shl    eax,0x4
c000e231:	88 c2                	mov    dl,al
c000e233:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e239:	83 e0 ef             	and    eax,0xffffffef
c000e23c:	09 d0                	or     eax,edx
c000e23e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e244:	a8 10                	test   al,0x10
c000e246:	0f 85 10 01 00 00    	jne    c000e35c <Computer::detectFeatures()+0x17c>
c000e24c:	84 c0                	test   al,al
c000e24e:	0f 88 2b 01 00 00    	js     c000e37f <Computer::detectFeatures()+0x19f>
c000e254:	83 c4 1c             	add    esp,0x1c
c000e257:	5b                   	pop    ebx
c000e258:	5e                   	pop    esi
c000e259:	5f                   	pop    edi
c000e25a:	5d                   	pop    ebp
c000e25b:	c3                   	ret    
c000e25c:	83 ec 0c             	sub    esp,0xc
c000e25f:	6a 20                	push   0x20
c000e261:	e8 1d 95 00 00       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c000e266:	83 e0 01             	and    eax,0x1
c000e269:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e270:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e276:	83 e0 f7             	and    eax,0xfffffff7
c000e279:	09 d0                	or     eax,edx
c000e27b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e281:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e288:	e8 f6 94 00 00       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c000e28d:	83 e0 01             	and    eax,0x1
c000e290:	88 c2                	mov    dl,al
c000e292:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e298:	83 e0 fe             	and    eax,0xfffffffe
c000e29b:	09 d0                	or     eax,edx
c000e29d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2a3:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e2aa:	e8 d4 94 00 00       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c000e2af:	c1 e0 07             	shl    eax,0x7
c000e2b2:	88 c2                	mov    dl,al
c000e2b4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e2ba:	83 e0 7f             	and    eax,0x7f
c000e2bd:	09 d0                	or     eax,edx
c000e2bf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2c5:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e2cc:	e8 b2 94 00 00       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c000e2d1:	83 c4 10             	add    esp,0x10
c000e2d4:	83 e0 01             	and    eax,0x1
c000e2d7:	c1 e0 05             	shl    eax,0x5
c000e2da:	88 c2                	mov    dl,al
c000e2dc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2e2:	83 e0 df             	and    eax,0xffffffdf
c000e2e5:	09 d0                	or     eax,edx
c000e2e7:	f7 05 00 a5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a500,0x401
c000e2f1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2f7:	0f 84 a8 00 00 00    	je     c000e3a5 <Computer::detectFeatures()+0x1c5>
c000e2fd:	83 ec 0c             	sub    esp,0xc
c000e300:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000e307:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e30b:	50                   	push   eax
c000e30c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e310:	55                   	push   ebp
c000e311:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e315:	57                   	push   edi
c000e316:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e31a:	56                   	push   esi
c000e31b:	68 00 00 00 80       	push   0x80000000
c000e320:	e8 db 93 00 00       	call   c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e325:	83 c4 20             	add    esp,0x20
c000e328:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e32f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e333:	0f 86 dd fe ff ff    	jbe    c000e216 <Computer::detectFeatures()+0x36>
c000e339:	83 ec 0c             	sub    esp,0xc
c000e33c:	50                   	push   eax
c000e33d:	55                   	push   ebp
c000e33e:	57                   	push   edi
c000e33f:	56                   	push   esi
c000e340:	68 01 00 00 80       	push   0x80000001
c000e345:	e8 b6 93 00 00       	call   c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e34a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e354:	83 c4 20             	add    esp,0x20
c000e357:	e9 ba fe ff ff       	jmp    c000e216 <Computer::detectFeatures()+0x36>
c000e35c:	e8 6f 4a 01 00       	call   c0022dd0 <sseDetect>
c000e361:	88 c2                	mov    dl,al
c000e363:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e369:	c1 e2 07             	shl    edx,0x7
c000e36c:	83 e0 7f             	and    eax,0x7f
c000e36f:	09 d0                	or     eax,edx
c000e371:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e377:	84 c0                	test   al,al
c000e379:	0f 89 d5 fe ff ff    	jns    c000e254 <Computer::detectFeatures()+0x74>
c000e37f:	e8 3c 4a 01 00       	call   c0022dc0 <avxDetect>
c000e384:	83 e0 01             	and    eax,0x1
c000e387:	c1 e0 05             	shl    eax,0x5
c000e38a:	88 c2                	mov    dl,al
c000e38c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e392:	83 e0 df             	and    eax,0xffffffdf
c000e395:	09 d0                	or     eax,edx
c000e397:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e39d:	83 c4 1c             	add    esp,0x1c
c000e3a0:	5b                   	pop    ebx
c000e3a1:	5e                   	pop    esi
c000e3a2:	5f                   	pop    edi
c000e3a3:	5d                   	pop    ebp
c000e3a4:	c3                   	ret    
c000e3a5:	83 ec 0c             	sub    esp,0xc
c000e3a8:	68 00 02 00 00       	push   0x200
c000e3ad:	e8 d1 93 00 00       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c000e3b2:	83 c4 10             	add    esp,0x10
c000e3b5:	e9 43 ff ff ff       	jmp    c000e2fd <Computer::detectFeatures()+0x11d>

c000e3ba <Computer::displayFeatures()>:
c000e3ba:	53                   	push   ebx
c000e3bb:	83 ec 14             	sub    esp,0x14
c000e3be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3c2:	68 df 68 02 c0       	push   0xc00268df
c000e3c7:	e8 85 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e3cc:	83 c4 10             	add    esp,0x10
c000e3cf:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e3d6:	0f 85 73 02 00 00    	jne    c000e64f <Computer::displayFeatures()+0x295>
c000e3dc:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e3e1:	83 ec 08             	sub    esp,0x8
c000e3e4:	50                   	push   eax
c000e3e5:	68 f2 68 02 c0       	push   0xc00268f2
c000e3ea:	e8 62 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e3f9:	0f 85 8c 02 00 00    	jne    c000e68b <Computer::displayFeatures()+0x2d1>
c000e3ff:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e404:	83 ec 08             	sub    esp,0x8
c000e407:	50                   	push   eax
c000e408:	68 03 69 02 c0       	push   0xc0026903
c000e40d:	e8 3f 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e412:	83 c4 10             	add    esp,0x10
c000e415:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e41c:	0f 85 5f 02 00 00    	jne    c000e681 <Computer::displayFeatures()+0x2c7>
c000e422:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e427:	83 ec 08             	sub    esp,0x8
c000e42a:	50                   	push   eax
c000e42b:	68 14 69 02 c0       	push   0xc0026914
c000e430:	e8 1c 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e435:	83 c4 10             	add    esp,0x10
c000e438:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e43f:	0f 85 32 02 00 00    	jne    c000e677 <Computer::displayFeatures()+0x2bd>
c000e445:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e44a:	83 ec 08             	sub    esp,0x8
c000e44d:	50                   	push   eax
c000e44e:	68 25 69 02 c0       	push   0xc0026925
c000e453:	e8 f9 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e462:	0f 85 05 02 00 00    	jne    c000e66d <Computer::displayFeatures()+0x2b3>
c000e468:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e46d:	83 ec 08             	sub    esp,0x8
c000e470:	50                   	push   eax
c000e471:	68 36 69 02 c0       	push   0xc0026936
c000e476:	e8 d6 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e47b:	83 c4 10             	add    esp,0x10
c000e47e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e485:	0f 85 d8 01 00 00    	jne    c000e663 <Computer::displayFeatures()+0x2a9>
c000e48b:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e490:	83 ec 08             	sub    esp,0x8
c000e493:	50                   	push   eax
c000e494:	68 47 69 02 c0       	push   0xc0026947
c000e499:	e8 b3 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e49e:	83 c4 10             	add    esp,0x10
c000e4a1:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e4a8:	0f 85 ab 01 00 00    	jne    c000e659 <Computer::displayFeatures()+0x29f>
c000e4ae:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e4b3:	83 ec 08             	sub    esp,0x8
c000e4b6:	50                   	push   eax
c000e4b7:	68 58 69 02 c0       	push   0xc0026958
c000e4bc:	e8 90 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e4c1:	83 c4 10             	add    esp,0x10
c000e4c4:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e4cb:	0f 88 1b 02 00 00    	js     c000e6ec <Computer::displayFeatures()+0x332>
c000e4d1:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e4d6:	83 ec 08             	sub    esp,0x8
c000e4d9:	50                   	push   eax
c000e4da:	68 69 69 02 c0       	push   0xc0026969
c000e4df:	e8 6d 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e4e4:	83 c4 10             	add    esp,0x10
c000e4e7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4ee:	0f 85 a1 01 00 00    	jne    c000e695 <Computer::displayFeatures()+0x2db>
c000e4f4:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e4f9:	83 ec 08             	sub    esp,0x8
c000e4fc:	50                   	push   eax
c000e4fd:	68 7a 69 02 c0       	push   0xc002697a
c000e502:	e8 4a 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e507:	83 c4 10             	add    esp,0x10
c000e50a:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e511:	0f 85 cb 01 00 00    	jne    c000e6e2 <Computer::displayFeatures()+0x328>
c000e517:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e51c:	83 ec 08             	sub    esp,0x8
c000e51f:	50                   	push   eax
c000e520:	68 8b 69 02 c0       	push   0xc002698b
c000e525:	e8 27 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e52a:	83 c4 10             	add    esp,0x10
c000e52d:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e534:	0f 85 9e 01 00 00    	jne    c000e6d8 <Computer::displayFeatures()+0x31e>
c000e53a:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e53f:	83 ec 08             	sub    esp,0x8
c000e542:	50                   	push   eax
c000e543:	68 9c 69 02 c0       	push   0xc002699c
c000e548:	e8 04 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e54d:	83 c4 10             	add    esp,0x10
c000e550:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e557:	0f 85 71 01 00 00    	jne    c000e6ce <Computer::displayFeatures()+0x314>
c000e55d:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e562:	83 ec 08             	sub    esp,0x8
c000e565:	50                   	push   eax
c000e566:	68 ad 69 02 c0       	push   0xc00269ad
c000e56b:	e8 e1 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e570:	83 c4 10             	add    esp,0x10
c000e573:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e57a:	0f 85 44 01 00 00    	jne    c000e6c4 <Computer::displayFeatures()+0x30a>
c000e580:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e585:	83 ec 08             	sub    esp,0x8
c000e588:	50                   	push   eax
c000e589:	68 be 69 02 c0       	push   0xc00269be
c000e58e:	e8 be 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e593:	83 c4 10             	add    esp,0x10
c000e596:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e59d:	0f 85 17 01 00 00    	jne    c000e6ba <Computer::displayFeatures()+0x300>
c000e5a3:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e5a8:	83 ec 08             	sub    esp,0x8
c000e5ab:	50                   	push   eax
c000e5ac:	68 cf 69 02 c0       	push   0xc00269cf
c000e5b1:	e8 9b 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e5b6:	83 c4 10             	add    esp,0x10
c000e5b9:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e5c0:	0f 85 ea 00 00 00    	jne    c000e6b0 <Computer::displayFeatures()+0x2f6>
c000e5c6:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e5cb:	83 ec 08             	sub    esp,0x8
c000e5ce:	50                   	push   eax
c000e5cf:	68 e0 69 02 c0       	push   0xc00269e0
c000e5d4:	e8 78 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e5d9:	83 c4 10             	add    esp,0x10
c000e5dc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5e3:	0f 88 0d 01 00 00    	js     c000e6f6 <Computer::displayFeatures()+0x33c>
c000e5e9:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e5ee:	83 ec 08             	sub    esp,0x8
c000e5f1:	50                   	push   eax
c000e5f2:	68 f1 69 02 c0       	push   0xc00269f1
c000e5f7:	e8 55 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e5fc:	83 c4 10             	add    esp,0x10
c000e5ff:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e606:	0f 85 9a 00 00 00    	jne    c000e6a6 <Computer::displayFeatures()+0x2ec>
c000e60c:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e611:	83 ec 08             	sub    esp,0x8
c000e614:	50                   	push   eax
c000e615:	68 02 6a 02 c0       	push   0xc0026a02
c000e61a:	e8 32 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e61f:	83 c4 10             	add    esp,0x10
c000e622:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e629:	75 74                	jne    c000e69f <Computer::displayFeatures()+0x2e5>
c000e62b:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c000e630:	83 ec 08             	sub    esp,0x8
c000e633:	50                   	push   eax
c000e634:	68 13 6a 02 c0       	push   0xc0026a13
c000e639:	e8 13 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e63e:	c7 44 24 20 1a 81 02 c0 	mov    DWORD PTR [esp+0x20],0xc002811a
c000e646:	83 c4 18             	add    esp,0x18
c000e649:	5b                   	pop    ebx
c000e64a:	e9 02 3c 00 00       	jmp    c0012251 <Dbg::kprintf(char const*, ...)>
c000e64f:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e654:	e9 88 fd ff ff       	jmp    c000e3e1 <Computer::displayFeatures()+0x27>
c000e659:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e65e:	e9 50 fe ff ff       	jmp    c000e4b3 <Computer::displayFeatures()+0xf9>
c000e663:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e668:	e9 23 fe ff ff       	jmp    c000e490 <Computer::displayFeatures()+0xd6>
c000e66d:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e672:	e9 f6 fd ff ff       	jmp    c000e46d <Computer::displayFeatures()+0xb3>
c000e677:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e67c:	e9 c9 fd ff ff       	jmp    c000e44a <Computer::displayFeatures()+0x90>
c000e681:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e686:	e9 9c fd ff ff       	jmp    c000e427 <Computer::displayFeatures()+0x6d>
c000e68b:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e690:	e9 6f fd ff ff       	jmp    c000e404 <Computer::displayFeatures()+0x4a>
c000e695:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e69a:	e9 5a fe ff ff       	jmp    c000e4f9 <Computer::displayFeatures()+0x13f>
c000e69f:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e6a4:	eb 8a                	jmp    c000e630 <Computer::displayFeatures()+0x276>
c000e6a6:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e6ab:	e9 61 ff ff ff       	jmp    c000e611 <Computer::displayFeatures()+0x257>
c000e6b0:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e6b5:	e9 11 ff ff ff       	jmp    c000e5cb <Computer::displayFeatures()+0x211>
c000e6ba:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e6bf:	e9 e4 fe ff ff       	jmp    c000e5a8 <Computer::displayFeatures()+0x1ee>
c000e6c4:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e6c9:	e9 b7 fe ff ff       	jmp    c000e585 <Computer::displayFeatures()+0x1cb>
c000e6ce:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e6d3:	e9 8a fe ff ff       	jmp    c000e562 <Computer::displayFeatures()+0x1a8>
c000e6d8:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e6dd:	e9 5d fe ff ff       	jmp    c000e53f <Computer::displayFeatures()+0x185>
c000e6e2:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e6e7:	e9 30 fe ff ff       	jmp    c000e51c <Computer::displayFeatures()+0x162>
c000e6ec:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e6f1:	e9 e0 fd ff ff       	jmp    c000e4d6 <Computer::displayFeatures()+0x11c>
c000e6f6:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c000e6fb:	e9 ee fe ff ff       	jmp    c000e5ee <Computer::displayFeatures()+0x234>

c000e700 <Computer::rdmsr(unsigned int)>:
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e707:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e70e:	74 0a                	je     c000e71a <Computer::rdmsr(unsigned int)+0x1a>
c000e710:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e714:	0f 32                	rdmsr  
c000e716:	83 c4 0c             	add    esp,0xc
c000e719:	c3                   	ret    
c000e71a:	83 ec 0c             	sub    esp,0xc
c000e71d:	68 24 6a 02 c0       	push   0xc0026a24
c000e722:	e8 ac af 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	eb e4                	jmp    c000e710 <Computer::rdmsr(unsigned int)+0x10>

c000e72c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e72c:	57                   	push   edi
c000e72d:	56                   	push   esi
c000e72e:	52                   	push   edx
c000e72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e733:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e737:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e73b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e742:	74 0e                	je     c000e752 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e744:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e748:	89 f0                	mov    eax,esi
c000e74a:	89 fa                	mov    edx,edi
c000e74c:	0f 30                	wrmsr  
c000e74e:	58                   	pop    eax
c000e74f:	5e                   	pop    esi
c000e750:	5f                   	pop    edi
c000e751:	c3                   	ret    
c000e752:	83 ec 0c             	sub    esp,0xc
c000e755:	68 2a 6a 02 c0       	push   0xc0026a2a
c000e75a:	e8 74 af 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000e75f:	83 c4 10             	add    esp,0x10
c000e762:	eb e0                	jmp    c000e744 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e764 <Computer::nmiEnabled()>:
c000e764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e768:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e76e:	c3                   	ret    
c000e76f:	90                   	nop

c000e770 <Computer::readCMOS(unsigned char)>:
c000e770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e774:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e77b:	19 c0                	sbb    eax,eax
c000e77d:	83 e0 80             	and    eax,0xffffff80
c000e780:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e784:	e6 70                	out    0x70,al
c000e786:	e4 71                	in     al,0x71
c000e788:	c3                   	ret    
c000e789:	90                   	nop

c000e78a <Computer::enableNMI(bool)>:
c000e78a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e792:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e798:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e7a0:	eb ce                	jmp    c000e770 <Computer::readCMOS(unsigned char)>

c000e7a2 <Computer::open(int, int, void*)>:
c000e7a2:	56                   	push   esi
c000e7a3:	53                   	push   ebx
c000e7a4:	83 ec 10             	sub    esp,0x10
c000e7a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7ab:	f6 05 00 a5 02 c0 04 	test   BYTE PTR ds:0xc002a500,0x4
c000e7b2:	68 68 22 00 00       	push   0x2268
c000e7b7:	0f 94 05 c0 93 02 c0 	sete   BYTE PTR ds:0xc00293c0
c000e7be:	e8 9f 39 00 00       	call   c0012162 <operator new(unsigned long)>
c000e7c3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7c6:	89 c6                	mov    esi,eax
c000e7c8:	e8 f7 85 00 00       	call   c0016dc4 <ACPI::ACPI()>
c000e7cd:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e7d3:	58                   	pop    eax
c000e7d4:	5a                   	pop    edx
c000e7d5:	56                   	push   esi
c000e7d6:	53                   	push   ebx
c000e7d7:	e8 80 4e 00 00       	call   c001365c <Device::addChild(Device*)>
c000e7dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7df:	e8 fc f9 ff ff       	call   c000e1e0 <Computer::detectFeatures()>
c000e7e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7e7:	e8 ce fb ff ff       	call   c000e3ba <Computer::displayFeatures()>
c000e7ec:	59                   	pop    ecx
c000e7ed:	5e                   	pop    esi
c000e7ee:	6a 01                	push   0x1
c000e7f0:	53                   	push   ebx
c000e7f1:	e8 94 ff ff ff       	call   c000e78a <Computer::enableNMI(bool)>
c000e7f6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e7fd:	e8 60 39 00 00       	call   c0012162 <operator new(unsigned long)>
c000e802:	89 04 24             	mov    DWORD PTR [esp],eax
c000e805:	89 c6                	mov    esi,eax
c000e807:	e8 42 90 00 00       	call   c001784e <CPU::CPU()>
c000e80c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e812:	58                   	pop    eax
c000e813:	5a                   	pop    edx
c000e814:	56                   	push   esi
c000e815:	53                   	push   ebx
c000e816:	e8 41 4e 00 00       	call   c001365c <Device::addChild(Device*)>
c000e81b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e821:	8b 10                	mov    edx,DWORD PTR [eax]
c000e823:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e827:	6a 00                	push   0x0
c000e829:	6a 00                	push   0x0
c000e82b:	50                   	push   eax
c000e82c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e82f:	83 c4 20             	add    esp,0x20
c000e832:	e8 8d 53 00 00       	call   c0013bc4 <setupFPU()>
c000e837:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e83d:	85 c0                	test   eax,eax
c000e83f:	74 1f                	je     c000e860 <Computer::open(int, int, void*)+0xbe>
c000e841:	83 ec 08             	sub    esp,0x8
c000e844:	50                   	push   eax
c000e845:	53                   	push   ebx
c000e846:	e8 11 4e 00 00       	call   c001365c <Device::addChild(Device*)>
c000e84b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e851:	8b 10                	mov    edx,DWORD PTR [eax]
c000e853:	6a 00                	push   0x0
c000e855:	6a 00                	push   0x0
c000e857:	6a 00                	push   0x0
c000e859:	50                   	push   eax
c000e85a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e85d:	83 c4 20             	add    esp,0x20
c000e860:	83 ec 0c             	sub    esp,0xc
c000e863:	68 d2 e1 00 c0       	push   0xc000e1d2
c000e868:	e8 e3 df 00 00       	call   c001c850 <setupMultitasking(void (*)())>
c000e86d:	83 c4 14             	add    esp,0x14
c000e870:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e875:	5b                   	pop    ebx
c000e876:	5e                   	pop    esi
c000e877:	c3                   	ret    

c000e878 <Computer::disableNMI()>:
c000e878:	6a 00                	push   0x0
c000e87a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e87e:	e8 07 ff ff ff       	call   c000e78a <Computer::enableNMI(bool)>
c000e883:	58                   	pop    eax
c000e884:	5a                   	pop    edx
c000e885:	c3                   	ret    

c000e886 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e88a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e891:	19 c0                	sbb    eax,eax
c000e893:	83 e0 80             	and    eax,0xffffff80
c000e896:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e89a:	e6 70                	out    0x70,al
c000e89c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a0:	e6 71                	out    0x71,al
c000e8a2:	c3                   	ret    
c000e8a3:	90                   	nop

c000e8a4 <Computer::handleNMI()>:
c000e8a4:	56                   	push   esi
c000e8a5:	53                   	push   ebx
c000e8a6:	83 ec 10             	sub    esp,0x10
c000e8a9:	e4 92                	in     al,0x92
c000e8ab:	89 c6                	mov    esi,eax
c000e8ad:	e4 61                	in     al,0x61
c000e8af:	68 30 6a 02 c0       	push   0xc0026a30
c000e8b4:	88 c3                	mov    bl,al
c000e8b6:	e8 96 39 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	83 e6 10             	and    esi,0x10
c000e8c1:	75 0d                	jne    c000e8d0 <Computer::handleNMI()+0x2c>
c000e8c3:	f6 c3 40             	test   bl,0x40
c000e8c6:	75 1d                	jne    c000e8e5 <Computer::handleNMI()+0x41>
c000e8c8:	84 db                	test   bl,bl
c000e8ca:	78 2d                	js     c000e8f9 <Computer::handleNMI()+0x55>
c000e8cc:	58                   	pop    eax
c000e8cd:	5b                   	pop    ebx
c000e8ce:	5e                   	pop    esi
c000e8cf:	c3                   	ret    
c000e8d0:	83 ec 0c             	sub    esp,0xc
c000e8d3:	68 41 6a 02 c0       	push   0xc0026a41
c000e8d8:	e8 f6 ad 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000e8dd:	83 c4 10             	add    esp,0x10
c000e8e0:	f6 c3 40             	test   bl,0x40
c000e8e3:	74 e3                	je     c000e8c8 <Computer::handleNMI()+0x24>
c000e8e5:	83 ec 0c             	sub    esp,0xc
c000e8e8:	68 4e 6a 02 c0       	push   0xc0026a4e
c000e8ed:	e8 e1 ad 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000e8f2:	83 c4 10             	add    esp,0x10
c000e8f5:	84 db                	test   bl,bl
c000e8f7:	79 d3                	jns    c000e8cc <Computer::handleNMI()+0x28>
c000e8f9:	c7 44 24 10 58 6a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026a58
c000e901:	5a                   	pop    edx
c000e902:	5b                   	pop    ebx
c000e903:	5e                   	pop    esi
c000e904:	e9 ca ad 00 00       	jmp    c00196d3 <Krnl::panic(char const*)>
c000e909:	90                   	nop

c000e90a <Computer::setDiskActivityLight(int, bool)>:
c000e90a:	56                   	push   esi
c000e90b:	53                   	push   ebx
c000e90c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e910:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e915:	77 1b                	ja     c000e932 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e917:	e4 92                	in     al,0x92
c000e919:	bb 40 00 00 00       	mov    ebx,0x40
c000e91e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e922:	89 da                	mov    edx,ebx
c000e924:	d3 e2                	shl    edx,cl
c000e926:	89 f1                	mov    ecx,esi
c000e928:	f7 d2                	not    edx
c000e92a:	d3 e3                	shl    ebx,cl
c000e92c:	21 d0                	and    eax,edx
c000e92e:	09 d8                	or     eax,ebx
c000e930:	e6 92                	out    0x92,al
c000e932:	5b                   	pop    ebx
c000e933:	5e                   	pop    esi
c000e934:	c3                   	ret    
c000e935:	90                   	nop

c000e936 <GDTEntry::setBase(unsigned int)>:
c000e936:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e93a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e93e:	89 c1                	mov    ecx,eax
c000e940:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e944:	c1 e9 10             	shr    ecx,0x10
c000e947:	c1 e8 18             	shr    eax,0x18
c000e94a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e94d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e950:	c3                   	ret    
c000e951:	90                   	nop

c000e952 <GDTEntry::setLimit(unsigned int)>:
c000e952:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e95a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e95d:	66 89 01             	mov    WORD PTR [ecx],ax
c000e960:	83 e2 f0             	and    edx,0xfffffff0
c000e963:	c1 e8 10             	shr    eax,0x10
c000e966:	83 e0 0f             	and    eax,0xf
c000e969:	09 d0                	or     eax,edx
c000e96b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e96e:	c3                   	ret    
c000e96f:	90                   	nop

c000e970 <GDT::GDT()>:
c000e970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e974:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e97a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e97e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e984:	90                   	nop
c000e985:	c3                   	ret    

c000e986 <GDT::addEntry(GDTEntry)>:
c000e986:	53                   	push   ebx
c000e987:	83 ec 0c             	sub    esp,0xc
c000e98a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e98e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e990:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e997:	52                   	push   edx
c000e998:	50                   	push   eax
c000e999:	68 94 6a 02 c0       	push   0xc0026a94
c000e99e:	e8 ae 38 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e9a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e9a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e9a9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9ad:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e9b1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e9b5:	8d 50 01             	lea    edx,[eax+0x1]
c000e9b8:	c1 e0 03             	shl    eax,0x3
c000e9bb:	89 13                	mov    DWORD PTR [ebx],edx
c000e9bd:	83 c4 18             	add    esp,0x18
c000e9c0:	5b                   	pop    ebx
c000e9c1:	c3                   	ret    

c000e9c2 <GDT::getNumberOfEntries()>:
c000e9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9c8:	c3                   	ret    
c000e9c9:	90                   	nop

c000e9ca <GDT::flush()>:
c000e9ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9d0:	83 c0 04             	add    eax,0x4
c000e9d3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9da:	a3 f2 a4 02 c0       	mov    ds:0xc002a4f2,eax
c000e9df:	66 89 15 f0 a4 02 c0 	mov    WORD PTR ds:0xc002a4f0,dx
c000e9e6:	e9 26 1a ff ff       	jmp    c0000411 <loadGDT>
c000e9eb:	90                   	nop

c000e9ec <GDT::setup()>:
c000e9ec:	55                   	push   ebp
c000e9ed:	57                   	push   edi
c000e9ee:	56                   	push   esi
c000e9ef:	53                   	push   ebx
c000e9f0:	83 ec 3c             	sub    esp,0x3c
c000e9f3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000e9f7:	6a 00                	push   0x0
c000e9f9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000e9fd:	53                   	push   ebx
c000e9fe:	e8 33 ff ff ff       	call   c000e936 <GDTEntry::setBase(unsigned int)>
c000ea03:	6a 00                	push   0x0
c000ea05:	53                   	push   ebx
c000ea06:	e8 47 ff ff ff       	call   c000e952 <GDTEntry::setLimit(unsigned int)>
c000ea0b:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ea13:	6a 00                	push   0x0
c000ea15:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ea19:	53                   	push   ebx
c000ea1a:	e8 17 ff ff ff       	call   c000e936 <GDTEntry::setBase(unsigned int)>
c000ea1f:	68 ff ff ff 00       	push   0xffffff
c000ea24:	53                   	push   ebx
c000ea25:	e8 28 ff ff ff       	call   c000e952 <GDTEntry::setLimit(unsigned int)>
c000ea2a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea2e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea33:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ea38:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea3c:	83 c4 20             	add    esp,0x20
c000ea3f:	6a 00                	push   0x0
c000ea41:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea45:	53                   	push   ebx
c000ea46:	e8 eb fe ff ff       	call   c000e936 <GDTEntry::setBase(unsigned int)>
c000ea4b:	68 ff ff ff 00       	push   0xffffff
c000ea50:	53                   	push   ebx
c000ea51:	e8 fc fe ff ff       	call   c000e952 <GDTEntry::setLimit(unsigned int)>
c000ea56:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea5e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea62:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea66:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea6a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea6f:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea74:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea78:	89 d8                	mov    eax,ebx
c000ea7a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea7e:	80 cc 60             	or     ah,0x60
c000ea81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea85:	83 c4 0c             	add    esp,0xc
c000ea88:	89 f8                	mov    eax,edi
c000ea8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea8e:	80 cc 60             	or     ah,0x60
c000ea91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea95:	89 c7                	mov    edi,eax
c000ea97:	55                   	push   ebp
c000ea98:	e8 e9 fe ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c000ea9d:	83 c4 0c             	add    esp,0xc
c000eaa0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaa4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaa8:	55                   	push   ebp
c000eaa9:	e8 d8 fe ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c000eaae:	83 c4 0c             	add    esp,0xc
c000eab1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eab5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eab9:	55                   	push   ebp
c000eaba:	e8 c7 fe ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c000eabf:	83 c4 0c             	add    esp,0xc
c000eac2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eac6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eaca:	53                   	push   ebx
c000eacb:	51                   	push   ecx
c000eacc:	55                   	push   ebp
c000eacd:	e8 b4 fe ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c000ead2:	83 c4 0c             	add    esp,0xc
c000ead5:	57                   	push   edi
c000ead6:	56                   	push   esi
c000ead7:	55                   	push   ebp
c000ead8:	e8 a9 fe ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c000eadd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eae0:	e8 e5 fe ff ff       	call   c000e9ca <GDT::flush()>
c000eae5:	83 c4 4c             	add    esp,0x4c
c000eae8:	5b                   	pop    ebx
c000eae9:	5e                   	pop    esi
c000eaea:	5f                   	pop    edi
c000eaeb:	5d                   	pop    ebp
c000eaec:	c3                   	ret    

c000eaed <idleFunction(void*)>:
c000eaed:	53                   	push   ebx
c000eaee:	83 ec 08             	sub    esp,0x8
c000eaf1:	e8 32 db 00 00       	call   c001c628 <unlockScheduler()>
c000eaf6:	e8 3f 8d 00 00       	call   c001783a <thisCPU()>
c000eafb:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000eb02:	74 41                	je     c000eb45 <idleFunction(void*)+0x58>
c000eb04:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c000eb09:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb10:	74 33                	je     c000eb45 <idleFunction(void*)+0x58>
c000eb12:	31 db                	xor    ebx,ebx
c000eb14:	52                   	push   edx
c000eb15:	52                   	push   edx
c000eb16:	68 e1 00 00 00       	push   0xe1
c000eb1b:	50                   	push   eax
c000eb1c:	e8 df fb ff ff       	call   c000e700 <Computer::rdmsr(unsigned int)>
c000eb21:	53                   	push   ebx
c000eb22:	83 e0 02             	and    eax,0x2
c000eb25:	50                   	push   eax
c000eb26:	68 e1 00 00 00       	push   0xe1
c000eb2b:	ff 35 e8 a4 02 c0    	push   DWORD PTR ds:0xc002a4e8
c000eb31:	e8 f6 fb ff ff       	call   c000e72c <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb36:	83 c4 20             	add    esp,0x20
c000eb39:	e8 f0 16 ff ff       	call   c000022e <doTPAUSE>
c000eb3e:	e8 9d 64 01 00       	call   c0024fe0 <idleCommon()>
c000eb43:	eb f4                	jmp    c000eb39 <idleFunction(void*)+0x4c>
c000eb45:	fb                   	sti    
c000eb46:	f4                   	hlt    
c000eb47:	e8 94 64 01 00       	call   c0024fe0 <idleCommon()>
c000eb4c:	eb f7                	jmp    c000eb45 <idleFunction(void*)+0x58>

c000eb4e <IDTEntry::IDTEntry(bool)>:
c000eb4e:	83 ec 04             	sub    esp,0x4
c000eb51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb55:	88 04 24             	mov    BYTE PTR [esp],al
c000eb58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb5c:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb66:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb6e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb71:	83 e2 f0             	and    edx,0xfffffff0
c000eb74:	83 ca 0e             	or     edx,0xe
c000eb77:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb7e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb81:	83 e2 ef             	and    edx,0xffffffef
c000eb84:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb87:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb8b:	74 04                	je     c000eb91 <IDTEntry::IDTEntry(bool)+0x43>
c000eb8d:	b2 03                	mov    dl,0x3
c000eb8f:	eb 02                	jmp    c000eb93 <IDTEntry::IDTEntry(bool)+0x45>
c000eb91:	b2 00                	mov    dl,0x0
c000eb93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb97:	83 e2 03             	and    edx,0x3
c000eb9a:	88 d1                	mov    cl,dl
c000eb9c:	c1 e1 05             	shl    ecx,0x5
c000eb9f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eba2:	83 e2 9f             	and    edx,0xffffff9f
c000eba5:	09 ca                	or     edx,ecx
c000eba7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebae:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ebb1:	83 ca 80             	or     edx,0xffffff80
c000ebb4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebb7:	90                   	nop
c000ebb8:	83 c4 04             	add    esp,0x4
c000ebbb:	c3                   	ret    

c000ebbc <IDTEntry::setOffset(unsigned int)>:
c000ebbc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ebc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebc4:	66 89 02             	mov    WORD PTR [edx],ax
c000ebc7:	c1 e8 10             	shr    eax,0x10
c000ebca:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ebce:	c3                   	ret    
c000ebcf:	90                   	nop

c000ebd0 <IDT::IDT()>:
c000ebd0:	90                   	nop
c000ebd1:	c3                   	ret    

c000ebd2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ebd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd6:	83 c0 30             	add    eax,0x30
c000ebd9:	c3                   	ret    

c000ebda <IDT::addEntry(IDTEntry, int)>:
c000ebda:	53                   	push   ebx
c000ebdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebe7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebeb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebee:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebf2:	5b                   	pop    ebx
c000ebf3:	c3                   	ret    

c000ebf4 <IDT::addEntry(int, void (*)(), bool)>:
c000ebf4:	53                   	push   ebx
c000ebf5:	83 ec 10             	sub    esp,0x10
c000ebf8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ebfd:	50                   	push   eax
c000ebfe:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ec02:	53                   	push   ebx
c000ec03:	e8 46 ff ff ff       	call   c000eb4e <IDTEntry::IDTEntry(bool)>
c000ec08:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ec0c:	53                   	push   ebx
c000ec0d:	e8 aa ff ff ff       	call   c000ebbc <IDTEntry::setOffset(unsigned int)>
c000ec12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ec22:	e8 b3 ff ff ff       	call   c000ebda <IDT::addEntry(IDTEntry, int)>
c000ec27:	83 c4 30             	add    esp,0x30
c000ec2a:	5b                   	pop    ebx
c000ec2b:	c3                   	ret    

c000ec2c <IDT::flush()>:
c000ec2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec30:	66 c7 05 f8 a4 02 c0 ff 07 	mov    WORD PTR ds:0xc002a4f8,0x7ff
c000ec39:	a3 fa a4 02 c0       	mov    ds:0xc002a4fa,eax
c000ec3e:	0f 01 1d f8 a4 02 c0 	lidtd  ds:0xc002a4f8
c000ec45:	c3                   	ret    

c000ec46 <IDT::setup()>:
c000ec46:	57                   	push   edi
c000ec47:	56                   	push   esi
c000ec48:	53                   	push   ebx
c000ec49:	83 ec 10             	sub    esp,0x10
c000ec4c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec50:	6a 00                	push   0x0
c000ec52:	68 31 04 00 c0       	push   0xc0000431
c000ec57:	6a 00                	push   0x0
c000ec59:	53                   	push   ebx
c000ec5a:	e8 95 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ec5f:	6a 00                	push   0x0
c000ec61:	68 41 04 00 c0       	push   0xc0000441
c000ec66:	6a 01                	push   0x1
c000ec68:	53                   	push   ebx
c000ec69:	e8 86 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ec6e:	83 c4 20             	add    esp,0x20
c000ec71:	6a 00                	push   0x0
c000ec73:	68 4b 04 00 c0       	push   0xc000044b
c000ec78:	6a 02                	push   0x2
c000ec7a:	53                   	push   ebx
c000ec7b:	e8 74 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ec80:	6a 00                	push   0x0
c000ec82:	68 55 04 00 c0       	push   0xc0000455
c000ec87:	6a 03                	push   0x3
c000ec89:	53                   	push   ebx
c000ec8a:	e8 65 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ec8f:	83 c4 20             	add    esp,0x20
c000ec92:	6a 00                	push   0x0
c000ec94:	68 5f 04 00 c0       	push   0xc000045f
c000ec99:	6a 04                	push   0x4
c000ec9b:	53                   	push   ebx
c000ec9c:	e8 53 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eca1:	6a 00                	push   0x0
c000eca3:	68 69 04 00 c0       	push   0xc0000469
c000eca8:	6a 05                	push   0x5
c000ecaa:	53                   	push   ebx
c000ecab:	e8 44 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ecb0:	83 c4 20             	add    esp,0x20
c000ecb3:	6a 00                	push   0x0
c000ecb5:	68 73 04 00 c0       	push   0xc0000473
c000ecba:	6a 06                	push   0x6
c000ecbc:	53                   	push   ebx
c000ecbd:	e8 32 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ecc2:	6a 00                	push   0x0
c000ecc4:	68 7d 04 00 c0       	push   0xc000047d
c000ecc9:	6a 07                	push   0x7
c000eccb:	53                   	push   ebx
c000eccc:	e8 23 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ecd1:	83 c4 20             	add    esp,0x20
c000ecd4:	6a 00                	push   0x0
c000ecd6:	68 87 04 00 c0       	push   0xc0000487
c000ecdb:	6a 08                	push   0x8
c000ecdd:	53                   	push   ebx
c000ecde:	e8 11 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ece3:	6a 00                	push   0x0
c000ece5:	68 8f 04 00 c0       	push   0xc000048f
c000ecea:	6a 09                	push   0x9
c000ecec:	53                   	push   ebx
c000eced:	e8 02 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ecf2:	83 c4 20             	add    esp,0x20
c000ecf5:	6a 00                	push   0x0
c000ecf7:	68 99 04 00 c0       	push   0xc0000499
c000ecfc:	6a 0a                	push   0xa
c000ecfe:	53                   	push   ebx
c000ecff:	e8 f0 fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed04:	6a 00                	push   0x0
c000ed06:	68 a1 04 00 c0       	push   0xc00004a1
c000ed0b:	6a 0b                	push   0xb
c000ed0d:	53                   	push   ebx
c000ed0e:	e8 e1 fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed13:	83 c4 20             	add    esp,0x20
c000ed16:	6a 00                	push   0x0
c000ed18:	68 a9 04 00 c0       	push   0xc00004a9
c000ed1d:	6a 0c                	push   0xc
c000ed1f:	53                   	push   ebx
c000ed20:	e8 cf fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed25:	6a 00                	push   0x0
c000ed27:	68 b1 04 00 c0       	push   0xc00004b1
c000ed2c:	6a 0d                	push   0xd
c000ed2e:	53                   	push   ebx
c000ed2f:	e8 c0 fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed34:	83 c4 20             	add    esp,0x20
c000ed37:	6a 00                	push   0x0
c000ed39:	68 b9 04 00 c0       	push   0xc00004b9
c000ed3e:	6a 0e                	push   0xe
c000ed40:	53                   	push   ebx
c000ed41:	e8 ae fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed46:	6a 00                	push   0x0
c000ed48:	68 c1 04 00 c0       	push   0xc00004c1
c000ed4d:	6a 0f                	push   0xf
c000ed4f:	53                   	push   ebx
c000ed50:	e8 9f fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed55:	83 c4 20             	add    esp,0x20
c000ed58:	6a 00                	push   0x0
c000ed5a:	68 cb 04 00 c0       	push   0xc00004cb
c000ed5f:	6a 10                	push   0x10
c000ed61:	53                   	push   ebx
c000ed62:	e8 8d fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed67:	6a 00                	push   0x0
c000ed69:	68 d5 04 00 c0       	push   0xc00004d5
c000ed6e:	6a 11                	push   0x11
c000ed70:	53                   	push   ebx
c000ed71:	e8 7e fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed76:	83 c4 20             	add    esp,0x20
c000ed79:	6a 00                	push   0x0
c000ed7b:	68 df 04 00 c0       	push   0xc00004df
c000ed80:	6a 12                	push   0x12
c000ed82:	53                   	push   ebx
c000ed83:	e8 6c fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed88:	6a 01                	push   0x1
c000ed8a:	68 e9 04 00 c0       	push   0xc00004e9
c000ed8f:	6a 60                	push   0x60
c000ed91:	53                   	push   ebx
c000ed92:	e8 5d fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed97:	83 c4 20             	add    esp,0x20
c000ed9a:	6a 00                	push   0x0
c000ed9c:	68 f3 04 00 c0       	push   0xc00004f3
c000eda1:	6a 20                	push   0x20
c000eda3:	53                   	push   ebx
c000eda4:	e8 4b fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eda9:	6a 00                	push   0x0
c000edab:	68 fd 04 00 c0       	push   0xc00004fd
c000edb0:	6a 21                	push   0x21
c000edb2:	53                   	push   ebx
c000edb3:	e8 3c fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	68 07 05 00 c0       	push   0xc0000507
c000edc2:	6a 22                	push   0x22
c000edc4:	53                   	push   ebx
c000edc5:	e8 2a fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000edca:	6a 00                	push   0x0
c000edcc:	68 11 05 00 c0       	push   0xc0000511
c000edd1:	6a 23                	push   0x23
c000edd3:	53                   	push   ebx
c000edd4:	e8 1b fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000edd9:	83 c4 20             	add    esp,0x20
c000eddc:	6a 00                	push   0x0
c000edde:	68 1b 05 00 c0       	push   0xc000051b
c000ede3:	6a 24                	push   0x24
c000ede5:	53                   	push   ebx
c000ede6:	e8 09 fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000edeb:	6a 00                	push   0x0
c000eded:	68 25 05 00 c0       	push   0xc0000525
c000edf2:	6a 25                	push   0x25
c000edf4:	53                   	push   ebx
c000edf5:	e8 fa fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000edfa:	83 c4 20             	add    esp,0x20
c000edfd:	6a 00                	push   0x0
c000edff:	68 2f 05 00 c0       	push   0xc000052f
c000ee04:	6a 26                	push   0x26
c000ee06:	53                   	push   ebx
c000ee07:	e8 e8 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee0c:	6a 00                	push   0x0
c000ee0e:	68 39 05 00 c0       	push   0xc0000539
c000ee13:	6a 27                	push   0x27
c000ee15:	53                   	push   ebx
c000ee16:	e8 d9 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee1b:	83 c4 20             	add    esp,0x20
c000ee1e:	6a 00                	push   0x0
c000ee20:	68 43 05 00 c0       	push   0xc0000543
c000ee25:	6a 28                	push   0x28
c000ee27:	53                   	push   ebx
c000ee28:	e8 c7 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee2d:	6a 00                	push   0x0
c000ee2f:	68 4d 05 00 c0       	push   0xc000054d
c000ee34:	6a 29                	push   0x29
c000ee36:	53                   	push   ebx
c000ee37:	e8 b8 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee3c:	83 c4 20             	add    esp,0x20
c000ee3f:	6a 00                	push   0x0
c000ee41:	68 57 05 00 c0       	push   0xc0000557
c000ee46:	6a 2a                	push   0x2a
c000ee48:	53                   	push   ebx
c000ee49:	e8 a6 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee4e:	6a 00                	push   0x0
c000ee50:	68 61 05 00 c0       	push   0xc0000561
c000ee55:	6a 2b                	push   0x2b
c000ee57:	53                   	push   ebx
c000ee58:	e8 97 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee5d:	83 c4 20             	add    esp,0x20
c000ee60:	6a 00                	push   0x0
c000ee62:	68 6b 05 00 c0       	push   0xc000056b
c000ee67:	6a 2c                	push   0x2c
c000ee69:	53                   	push   ebx
c000ee6a:	e8 85 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee6f:	6a 00                	push   0x0
c000ee71:	68 75 05 00 c0       	push   0xc0000575
c000ee76:	6a 2d                	push   0x2d
c000ee78:	53                   	push   ebx
c000ee79:	e8 76 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	68 7f 05 00 c0       	push   0xc000057f
c000ee88:	6a 2e                	push   0x2e
c000ee8a:	53                   	push   ebx
c000ee8b:	e8 64 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee90:	6a 00                	push   0x0
c000ee92:	68 89 05 00 c0       	push   0xc0000589
c000ee97:	6a 2f                	push   0x2f
c000ee99:	53                   	push   ebx
c000ee9a:	e8 55 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee9f:	83 c4 20             	add    esp,0x20
c000eea2:	6a 00                	push   0x0
c000eea4:	68 93 05 00 c0       	push   0xc0000593
c000eea9:	6a 30                	push   0x30
c000eeab:	53                   	push   ebx
c000eeac:	e8 43 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eeb1:	6a 00                	push   0x0
c000eeb3:	68 9d 05 00 c0       	push   0xc000059d
c000eeb8:	6a 31                	push   0x31
c000eeba:	53                   	push   ebx
c000eebb:	e8 34 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eec0:	83 c4 20             	add    esp,0x20
c000eec3:	6a 00                	push   0x0
c000eec5:	68 a7 05 00 c0       	push   0xc00005a7
c000eeca:	6a 32                	push   0x32
c000eecc:	53                   	push   ebx
c000eecd:	e8 22 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eed2:	6a 00                	push   0x0
c000eed4:	68 b1 05 00 c0       	push   0xc00005b1
c000eed9:	6a 33                	push   0x33
c000eedb:	53                   	push   ebx
c000eedc:	e8 13 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eee1:	83 c4 20             	add    esp,0x20
c000eee4:	6a 00                	push   0x0
c000eee6:	68 bb 05 00 c0       	push   0xc00005bb
c000eeeb:	6a 34                	push   0x34
c000eeed:	53                   	push   ebx
c000eeee:	e8 01 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eef3:	6a 00                	push   0x0
c000eef5:	68 c5 05 00 c0       	push   0xc00005c5
c000eefa:	6a 35                	push   0x35
c000eefc:	53                   	push   ebx
c000eefd:	e8 f2 fc ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ef02:	83 c4 20             	add    esp,0x20
c000ef05:	6a 00                	push   0x0
c000ef07:	68 cf 05 00 c0       	push   0xc00005cf
c000ef0c:	6a 36                	push   0x36
c000ef0e:	53                   	push   ebx
c000ef0f:	e8 e0 fc ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ef14:	6a 00                	push   0x0
c000ef16:	68 d9 05 00 c0       	push   0xc00005d9
c000ef1b:	6a 37                	push   0x37
c000ef1d:	53                   	push   ebx
c000ef1e:	e8 d1 fc ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ef23:	83 c4 20             	add    esp,0x20
c000ef26:	e8 e4 24 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000ef2b:	52                   	push   edx
c000ef2c:	6a 03                	push   0x3
c000ef2e:	6a 02                	push   0x2
c000ef30:	50                   	push   eax
c000ef31:	e8 1c 2b 00 00       	call   c0011a52 <VAS::allocatePages(int, int)>
c000ef36:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef3d:	89 c6                	mov    esi,eax
c000ef3f:	e8 1e 32 00 00       	call   c0012162 <operator new(unsigned long)>
c000ef44:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef4a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef4d:	89 c7                	mov    edi,eax
c000ef4f:	e8 c0 1c 00 00       	call   c0010c14 <TSS::TSS()>
c000ef54:	83 c4 0c             	add    esp,0xc
c000ef57:	68 87 04 00 c0       	push   0xc0000487
c000ef5c:	56                   	push   esi
c000ef5d:	57                   	push   edi
c000ef5e:	e8 f1 1c 00 00       	call   c0010c54 <TSS::setup(unsigned long, unsigned long)>
c000ef63:	59                   	pop    ecx
c000ef64:	89 c6                	mov    esi,eax
c000ef66:	5f                   	pop    edi
c000ef67:	6a 00                	push   0x0
c000ef69:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef6d:	50                   	push   eax
c000ef6e:	e8 db fb ff ff       	call   c000eb4e <IDTEntry::IDTEntry(bool)>
c000ef73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef77:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef7c:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef83:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef8d:	80 ce 05             	or     dh,0x5
c000ef90:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef9b:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efa1:	e8 86 fc ff ff       	call   c000ec2c <IDT::flush()>
c000efa6:	83 c4 20             	add    esp,0x20
c000efa9:	5b                   	pop    ebx
c000efaa:	5e                   	pop    esi
c000efab:	5f                   	pop    edi
c000efac:	c3                   	ret    

c000efad <sbrk>:
c000efad:	55                   	push   ebp
c000efae:	57                   	push   edi
c000efaf:	56                   	push   esi
c000efb0:	53                   	push   ebx
c000efb1:	83 ec 1c             	sub    esp,0x1c
c000efb4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000efb8:	85 db                	test   ebx,ebx
c000efba:	74 37                	je     c000eff3 <sbrk+0x46>
c000efbc:	78 3f                	js     c000effd <sbrk+0x50>
c000efbe:	e8 77 88 00 00       	call   c001783a <thisCPU()>
c000efc3:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000efc9:	83 e0 01             	and    eax,0x1
c000efcc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000efd0:	a1 b0 93 02 c0       	mov    eax,ds:0xc00293b0
c000efd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efd9:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000efdf:	89 d8                	mov    eax,ebx
c000efe1:	78 35                	js     c000f018 <sbrk+0x6b>
c000efe3:	c1 f8 0c             	sar    eax,0xc
c000efe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000efea:	89 c7                	mov    edi,eax
c000efec:	be 00 00 00 00       	mov    esi,0x0
c000eff1:	eb 3c                	jmp    c000f02f <sbrk+0x82>
c000eff3:	a1 b0 93 02 c0       	mov    eax,ds:0xc00293b0
c000eff8:	e9 ad 00 00 00       	jmp    c000f0aa <sbrk+0xfd>
c000effd:	83 ec 08             	sub    esp,0x8
c000f000:	53                   	push   ebx
c000f001:	68 b0 6a 02 c0       	push   0xc0026ab0
c000f006:	e8 46 32 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f00b:	83 c4 10             	add    esp,0x10
c000f00e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f013:	e9 92 00 00 00       	jmp    c000f0aa <sbrk+0xfd>
c000f018:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f01e:	eb c3                	jmp    c000efe3 <sbrk+0x36>
c000f020:	81 05 b0 93 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00293b0,0x1000
c000f02a:	46                   	inc    esi
c000f02b:	39 f7                	cmp    edi,esi
c000f02d:	74 34                	je     c000f063 <sbrk+0xb6>
c000f02f:	e8 db 23 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000f034:	89 c3                	mov    ebx,eax
c000f036:	8b 2d b0 93 02 c0    	mov    ebp,DWORD PTR ds:0xc00293b0
c000f03c:	e8 c9 06 00 00       	call   c000f70a <Phys::allocatePage()>
c000f041:	68 01 04 00 00       	push   0x401
c000f046:	55                   	push   ebp
c000f047:	50                   	push   eax
c000f048:	53                   	push   ebx
c000f049:	e8 04 29 00 00       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f04e:	83 c4 10             	add    esp,0x10
c000f051:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f056:	74 c8                	je     c000f020 <sbrk+0x73>
c000f058:	8b 1d b0 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293b0
c000f05e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f061:	eb bd                	jmp    c000f020 <sbrk+0x73>
c000f063:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f068:	74 48                	je     c000f0b2 <sbrk+0x105>
c000f06a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f06e:	89 d3                	mov    ebx,edx
c000f070:	c1 eb 0a             	shr    ebx,0xa
c000f073:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f079:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f07f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f083:	c1 e0 0c             	shl    eax,0xc
c000f086:	01 d0                	add    eax,edx
c000f088:	c1 e8 0a             	shr    eax,0xa
c000f08b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f090:	2d 00 00 40 00       	sub    eax,0x400000
c000f095:	39 c3                	cmp    ebx,eax
c000f097:	77 0d                	ja     c000f0a6 <sbrk+0xf9>
c000f099:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f09c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f0a2:	39 d8                	cmp    eax,ebx
c000f0a4:	73 f3                	jae    c000f099 <sbrk+0xec>
c000f0a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0aa:	83 c4 1c             	add    esp,0x1c
c000f0ad:	5b                   	pop    ebx
c000f0ae:	5e                   	pop    esi
c000f0af:	5f                   	pop    edi
c000f0b0:	5d                   	pop    ebp
c000f0b1:	c3                   	ret    
c000f0b2:	e8 3e 5f 01 00       	call   c0024ff5 <CPU::readCR3()>
c000f0b7:	83 ec 0c             	sub    esp,0xc
c000f0ba:	50                   	push   eax
c000f0bb:	e8 47 5f 01 00       	call   c0025007 <CPU::writeCR3(unsigned long)>
c000f0c0:	83 c4 10             	add    esp,0x10
c000f0c3:	eb e1                	jmp    c000f0a6 <sbrk+0xf9>

c000f0c5 <mmap>:
c000f0c5:	83 ec 18             	sub    esp,0x18
c000f0c8:	68 e0 6a 02 c0       	push   0xc0026ae0
c000f0cd:	e8 01 a6 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000f0d2:	b8 00 00 00 00       	mov    eax,0x0
c000f0d7:	83 c4 1c             	add    esp,0x1c
c000f0da:	c3                   	ret    

c000f0db <munmap>:
c000f0db:	83 ec 18             	sub    esp,0x18
c000f0de:	68 e5 6a 02 c0       	push   0xc0026ae5
c000f0e3:	e8 eb a5 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000f0e8:	b8 00 00 00 00       	mov    eax,0x0
c000f0ed:	83 c4 1c             	add    esp,0x1c
c000f0f0:	c3                   	ret    

c000f0f1 <liballoc_lock()>:
c000f0f1:	83 ec 0c             	sub    esp,0xc
c000f0f4:	e8 2d d5 00 00       	call   c001c626 <lockScheduler()>
c000f0f9:	b8 00 00 00 00       	mov    eax,0x0
c000f0fe:	83 c4 0c             	add    esp,0xc
c000f101:	c3                   	ret    

c000f102 <liballoc_unlock()>:
c000f102:	83 ec 0c             	sub    esp,0xc
c000f105:	e8 1e d5 00 00       	call   c001c628 <unlockScheduler()>
c000f10a:	b8 00 00 00 00       	mov    eax,0x0
c000f10f:	83 c4 0c             	add    esp,0xc
c000f112:	c3                   	ret    

c000f113 <liballoc_alloc(int)>:
c000f113:	83 ec 0c             	sub    esp,0xc
c000f116:	e8 f4 22 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000f11b:	83 ec 04             	sub    esp,0x4
c000f11e:	6a 01                	push   0x1
c000f120:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f124:	50                   	push   eax
c000f125:	e8 28 29 00 00       	call   c0011a52 <VAS::allocatePages(int, int)>
c000f12a:	83 c4 1c             	add    esp,0x1c
c000f12d:	c3                   	ret    

c000f12e <liballoc_free(void*, int)>:
c000f12e:	83 ec 0c             	sub    esp,0xc
c000f131:	e8 d9 22 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000f136:	83 ec 08             	sub    esp,0x8
c000f139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f13d:	50                   	push   eax
c000f13e:	e8 b9 25 00 00       	call   c00116fc <VAS::freeAllocatedPages(unsigned long)>
c000f143:	b8 00 00 00 00       	mov    eax,0x0
c000f148:	83 c4 1c             	add    esp,0x1c
c000f14b:	c3                   	ret    

c000f14c <realloc>:
c000f14c:	83 ec 14             	sub    esp,0x14
c000f14f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f153:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f157:	e8 03 23 ff ff       	call   c000145f <dlrealloc>
c000f15c:	83 c4 1c             	add    esp,0x1c
c000f15f:	c3                   	ret    

c000f160 <malloc>:
c000f160:	83 ec 18             	sub    esp,0x18
c000f163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f167:	e8 b6 1d ff ff       	call   c0000f22 <dlmalloc>
c000f16c:	83 c4 1c             	add    esp,0x1c
c000f16f:	c3                   	ret    

c000f170 <free>:
c000f170:	83 ec 18             	sub    esp,0x18
c000f173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f177:	e8 4b 1a ff ff       	call   c0000bc7 <dlfree>
c000f17c:	83 c4 1c             	add    esp,0x1c
c000f17f:	c3                   	ret    

c000f180 <rfree>:
c000f180:	83 ec 18             	sub    esp,0x18
c000f183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f187:	e8 e4 ff ff ff       	call   c000f170 <free>
c000f18c:	83 c4 1c             	add    esp,0x1c
c000f18f:	c3                   	ret    

c000f190 <calloc>:
c000f190:	56                   	push   esi
c000f191:	53                   	push   ebx
c000f192:	83 ec 10             	sub    esp,0x10
c000f195:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f199:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f19e:	53                   	push   ebx
c000f19f:	e8 bc ff ff ff       	call   c000f160 <malloc>
c000f1a4:	89 c6                	mov    esi,eax
c000f1a6:	83 c4 0c             	add    esp,0xc
c000f1a9:	53                   	push   ebx
c000f1aa:	6a 00                	push   0x0
c000f1ac:	50                   	push   eax
c000f1ad:	e8 34 15 ff ff       	call   c00006e6 <memset>
c000f1b2:	89 f0                	mov    eax,esi
c000f1b4:	83 c4 14             	add    esp,0x14
c000f1b7:	5b                   	pop    ebx
c000f1b8:	5e                   	pop    esi
c000f1b9:	c3                   	ret    

c000f1ba <hwTextMode_loadInData(VgaText*)>:
c000f1ba:	57                   	push   edi
c000f1bb:	56                   	push   esi
c000f1bc:	53                   	push   ebx
c000f1bd:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f1c1:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f1c7:	85 c0                	test   eax,eax
c000f1c9:	7e 30                	jle    c000f1fb <hwTextMode_loadInData(VgaText*)+0x41>
c000f1cb:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f1ce:	31 f6                	xor    esi,esi
c000f1d0:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f1d3:	31 c0                	xor    eax,eax
c000f1d5:	c1 e1 05             	shl    ecx,0x5
c000f1d8:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1de:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1e2:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1e6:	40                   	inc    eax
c000f1e7:	83 f8 50             	cmp    eax,0x50
c000f1ea:	75 f2                	jne    c000f1de <hwTextMode_loadInData(VgaText*)+0x24>
c000f1ec:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f1f2:	46                   	inc    esi
c000f1f3:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f1f9:	7f d5                	jg     c000f1d0 <hwTextMode_loadInData(VgaText*)+0x16>
c000f1fb:	5b                   	pop    ebx
c000f1fc:	5e                   	pop    esi
c000f1fd:	5f                   	pop    edi
c000f1fe:	c3                   	ret    

c000f1ff <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f1ff:	56                   	push   esi
c000f200:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f205:	53                   	push   ebx
c000f206:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f20a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f20e:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f214:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f21a:	c1 e0 04             	shl    eax,0x4
c000f21d:	83 e6 0f             	and    esi,0xf
c000f220:	0f b6 c0             	movzx  eax,al
c000f223:	41                   	inc    ecx
c000f224:	09 f0                	or     eax,esi
c000f226:	83 c2 02             	add    edx,0x2
c000f229:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f22d:	c1 e0 08             	shl    eax,0x8
c000f230:	09 f0                	or     eax,esi
c000f232:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f236:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f23c:	75 d0                	jne    c000f20e <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f23e:	5b                   	pop    ebx
c000f23f:	5e                   	pop    esi
c000f240:	c3                   	ret    

c000f241 <hwTextMode_showCursor(VgaText*, bool)>:
c000f241:	56                   	push   esi
c000f242:	53                   	push   ebx
c000f243:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f248:	74 38                	je     c000f282 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f24a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f24f:	b0 0a                	mov    al,0xa
c000f251:	89 da                	mov    edx,ebx
c000f253:	ee                   	out    dx,al
c000f254:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f259:	89 ca                	mov    edx,ecx
c000f25b:	ec                   	in     al,dx
c000f25c:	b2 0f                	mov    dl,0xf
c000f25e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f262:	83 e0 c0             	and    eax,0xffffffc0
c000f265:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f26b:	09 d0                	or     eax,edx
c000f26d:	89 ca                	mov    edx,ecx
c000f26f:	ee                   	out    dx,al
c000f270:	b0 0b                	mov    al,0xb
c000f272:	89 da                	mov    edx,ebx
c000f274:	ee                   	out    dx,al
c000f275:	89 ca                	mov    edx,ecx
c000f277:	ec                   	in     al,dx
c000f278:	83 e0 e0             	and    eax,0xffffffe0
c000f27b:	83 c8 0f             	or     eax,0xf
c000f27e:	ee                   	out    dx,al
c000f27f:	5b                   	pop    ebx
c000f280:	5e                   	pop    esi
c000f281:	c3                   	ret    
c000f282:	b0 0a                	mov    al,0xa
c000f284:	ba d4 03 00 00       	mov    edx,0x3d4
c000f289:	ee                   	out    dx,al
c000f28a:	b0 20                	mov    al,0x20
c000f28c:	ba d5 03 00 00       	mov    edx,0x3d5
c000f291:	ee                   	out    dx,al
c000f292:	5b                   	pop    ebx
c000f293:	5e                   	pop    esi
c000f294:	c3                   	ret    

c000f295 <hwTextMode_update(VgaText*)>:
c000f295:	c3                   	ret    

c000f296 <hwTextMode_updateCursor(VgaText*)>:
c000f296:	56                   	push   esi
c000f297:	b9 19 00 00 00       	mov    ecx,0x19
c000f29c:	53                   	push   ebx
c000f29d:	be d4 03 00 00       	mov    esi,0x3d4
c000f2a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2a6:	89 f2                	mov    edx,esi
c000f2a8:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f2ae:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f2b4:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f2b7:	c1 e1 04             	shl    ecx,0x4
c000f2ba:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f2c0:	b0 0f                	mov    al,0xf
c000f2c2:	ee                   	out    dx,al
c000f2c3:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f2c8:	88 c8                	mov    al,cl
c000f2ca:	89 da                	mov    edx,ebx
c000f2cc:	ee                   	out    dx,al
c000f2cd:	b0 0e                	mov    al,0xe
c000f2cf:	89 f2                	mov    edx,esi
c000f2d1:	ee                   	out    dx,al
c000f2d2:	89 c8                	mov    eax,ecx
c000f2d4:	89 da                	mov    edx,ebx
c000f2d6:	66 c1 e8 08          	shr    ax,0x8
c000f2da:	ee                   	out    dx,al
c000f2db:	5b                   	pop    ebx
c000f2dc:	5e                   	pop    esi
c000f2dd:	c3                   	ret    

c000f2de <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2de:	ba da 03 00 00       	mov    edx,0x3da
c000f2e3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2e8:	75 18                	jne    c000f302 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2ea:	ec                   	in     al,dx
c000f2eb:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2f0:	b0 30                	mov    al,0x30
c000f2f2:	89 ca                	mov    edx,ecx
c000f2f4:	ee                   	out    dx,al
c000f2f5:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2fa:	ec                   	in     al,dx
c000f2fb:	83 c8 08             	or     eax,0x8
c000f2fe:	89 ca                	mov    edx,ecx
c000f300:	ee                   	out    dx,al
c000f301:	c3                   	ret    
c000f302:	ec                   	in     al,dx
c000f303:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f308:	b0 30                	mov    al,0x30
c000f30a:	89 ca                	mov    edx,ecx
c000f30c:	ee                   	out    dx,al
c000f30d:	ba c1 03 00 00       	mov    edx,0x3c1
c000f312:	ec                   	in     al,dx
c000f313:	83 e0 f7             	and    eax,0xfffffff7
c000f316:	89 ca                	mov    edx,ecx
c000f318:	ee                   	out    dx,al
c000f319:	c3                   	ret    

c000f31a <hwTextMode_scrollScreen(VgaText*)>:
c000f31a:	55                   	push   ebp
c000f31b:	bd 02 00 00 00       	mov    ebp,0x2
c000f320:	57                   	push   edi
c000f321:	56                   	push   esi
c000f322:	53                   	push   ebx
c000f323:	83 ec 1c             	sub    esp,0x1c
c000f326:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f32e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f332:	31 c0                	xor    eax,eax
c000f334:	eb 0b                	jmp    c000f341 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f336:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f33c:	74 57                	je     c000f395 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f33e:	43                   	inc    ebx
c000f33f:	89 f0                	mov    eax,esi
c000f341:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f347:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f34d:	88 13                	mov    BYTE PTR [ebx],dl
c000f34f:	8d 70 01             	lea    esi,[eax+0x1]
c000f352:	83 fd 18             	cmp    ebp,0x18
c000f355:	75 df                	jne    c000f336 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f357:	a8 01                	test   al,0x1
c000f359:	75 13                	jne    c000f36e <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f35b:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f35e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f364:	75 d8                	jne    c000f33e <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f366:	83 c4 1c             	add    esp,0x1c
c000f369:	5b                   	pop    ebx
c000f36a:	5e                   	pop    esi
c000f36b:	5f                   	pop    edi
c000f36c:	5d                   	pop    ebp
c000f36d:	c3                   	ret    
c000f36e:	83 ec 08             	sub    esp,0x8
c000f371:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f375:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f37c:	50                   	push   eax
c000f37d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f381:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f388:	50                   	push   eax
c000f389:	e8 66 0b 00 00       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c000f38e:	83 c4 10             	add    esp,0x10
c000f391:	88 07                	mov    BYTE PTR [edi],al
c000f393:	eb c9                	jmp    c000f35e <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f395:	45                   	inc    ebp
c000f396:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f39e:	eb 8e                	jmp    c000f32e <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f3a0 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f3a0:	56                   	push   esi
c000f3a1:	53                   	push   ebx
c000f3a2:	83 ec 0c             	sub    esp,0xc
c000f3a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f3a9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f3ad:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3b2:	50                   	push   eax
c000f3b3:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 36 0b 00 00       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c000f3be:	5a                   	pop    edx
c000f3bf:	0f b6 c0             	movzx  eax,al
c000f3c2:	59                   	pop    ecx
c000f3c3:	50                   	push   eax
c000f3c4:	89 f0                	mov    eax,esi
c000f3c6:	0f be f0             	movsx  esi,al
c000f3c9:	56                   	push   esi
c000f3ca:	e8 cb 0b 00 00       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c000f3cf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f3d3:	ba 19 00 00 00       	mov    edx,0x19
c000f3d8:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3de:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3e1:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3e4:	c1 e1 04             	shl    ecx,0x4
c000f3e7:	c1 e2 04             	shl    edx,0x4
c000f3ea:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3ee:	01 ca                	add    edx,ecx
c000f3f0:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f3f8:	83 c4 14             	add    esp,0x14
c000f3fb:	5b                   	pop    ebx
c000f3fc:	5e                   	pop    esi
c000f3fd:	c3                   	ret    

c000f3fe <setupTextMode()>:
c000f3fe:	c7 05 98 a5 02 c0 de f2 00 c0 	mov    DWORD PTR ds:0xc002a598,0xc000f2de
c000f408:	c7 05 84 a5 02 c0 ba f1 00 c0 	mov    DWORD PTR ds:0xc002a584,0xc000f1ba
c000f412:	c7 05 80 a5 02 c0 ff f1 00 c0 	mov    DWORD PTR ds:0xc002a580,0xc000f1ff
c000f41c:	c7 05 8c a5 02 c0 1a f3 00 c0 	mov    DWORD PTR ds:0xc002a58c,0xc000f31a
c000f426:	c7 05 94 a5 02 c0 41 f2 00 c0 	mov    DWORD PTR ds:0xc002a594,0xc000f241
c000f430:	c7 05 88 a5 02 c0 95 f2 00 c0 	mov    DWORD PTR ds:0xc002a588,0xc000f295
c000f43a:	c7 05 90 a5 02 c0 96 f2 00 c0 	mov    DWORD PTR ds:0xc002a590,0xc000f296
c000f444:	c7 05 9c a5 02 c0 a0 f3 00 c0 	mov    DWORD PTR ds:0xc002a59c,0xc000f3a0
c000f44e:	c3                   	ret    

c000f44f <kernel_main>:
c000f44f:	57                   	push   edi
c000f450:	bf f9 03 00 00       	mov    edi,0x3f9
c000f455:	56                   	push   esi
c000f456:	31 f6                	xor    esi,esi
c000f458:	53                   	push   ebx
c000f459:	83 ec 10             	sub    esp,0x10
c000f45c:	e8 ed 08 00 00       	call   c000fd4e <installVgaTextImplementation()>
c000f461:	e8 98 ff ff ff       	call   c000f3fe <setupTextMode()>
c000f466:	89 f0                	mov    eax,esi
c000f468:	89 fa                	mov    edx,edi
c000f46a:	ee                   	out    dx,al
c000f46b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f470:	b0 80                	mov    al,0x80
c000f472:	89 da                	mov    edx,ebx
c000f474:	ee                   	out    dx,al
c000f475:	b1 03                	mov    cl,0x3
c000f477:	ba f8 03 00 00       	mov    edx,0x3f8
c000f47c:	88 c8                	mov    al,cl
c000f47e:	ee                   	out    dx,al
c000f47f:	89 f0                	mov    eax,esi
c000f481:	89 fa                	mov    edx,edi
c000f483:	ee                   	out    dx,al
c000f484:	88 c8                	mov    al,cl
c000f486:	89 da                	mov    edx,ebx
c000f488:	ee                   	out    dx,al
c000f489:	b0 c7                	mov    al,0xc7
c000f48b:	ba fa 03 00 00       	mov    edx,0x3fa
c000f490:	ee                   	out    dx,al
c000f491:	b0 0b                	mov    al,0xb
c000f493:	ba fc 03 00 00       	mov    edx,0x3fc
c000f498:	ee                   	out    dx,al
c000f499:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f49e:	83 ec 0c             	sub    esp,0xc
c000f4a1:	05 ff 0f 00 00       	add    eax,0xfff
c000f4a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ab:	50                   	push   eax
c000f4ac:	e8 59 03 00 00       	call   c000f80a <Phys::physicalMemorySetup(unsigned int)>
c000f4b1:	e8 da 1e 00 00       	call   c0011390 <Virt::virtualMemorySetup()>
c000f4b6:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f4bc:	83 c4 10             	add    esp,0x10
c000f4bf:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f4c5:	75 0e                	jne    c000f4d5 <kernel_main+0x86>
c000f4c7:	89 d8                	mov    eax,ebx
c000f4c9:	25 48 03 00 00       	and    eax,0x348
c000f4ce:	3d 00 03 00 00       	cmp    eax,0x300
c000f4d3:	74 10                	je     c000f4e5 <kernel_main+0x96>
c000f4d5:	83 ec 0c             	sub    esp,0xc
c000f4d8:	68 1b 81 02 c0       	push   0xc002811b
c000f4dd:	e8 f1 a1 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000f4e2:	83 c4 10             	add    esp,0x10
c000f4e5:	83 ec 0c             	sub    esp,0xc
c000f4e8:	89 1d 00 a5 02 c0    	mov    DWORD PTR ds:0xc002a500,ebx
c000f4ee:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f4f2:	53                   	push   ebx
c000f4f3:	e8 42 20 00 00       	call   c001153a <VAS::VAS()>
c000f4f8:	89 1d 44 a6 02 c0    	mov    DWORD PTR ds:0xc002a644,ebx
c000f4fe:	e8 1d 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f503:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f50a:	e8 53 2c 00 00       	call   c0012162 <operator new(unsigned long)>
c000f50f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f512:	89 c6                	mov    esi,eax
c000f514:	e8 7f ea ff ff       	call   c000df98 <Computer::Computer()>
c000f519:	6a 00                	push   0x0
c000f51b:	89 35 e8 a4 02 c0    	mov    DWORD PTR ds:0xc002a4e8,esi
c000f521:	6a 00                	push   0x0
c000f523:	6a 00                	push   0x0
c000f525:	56                   	push   esi
c000f526:	e8 77 f2 ff ff       	call   c000e7a2 <Computer::open(int, int, void*)>
c000f52b:	83 c4 14             	add    esp,0x14
c000f52e:	53                   	push   ebx
c000f52f:	e8 b2 22 00 00       	call   c00117e6 <VAS::~VAS()>
c000f534:	c7 04 24 ec 6a 02 c0 	mov    DWORD PTR [esp],0xc0026aec
c000f53b:	e8 93 a1 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000f540:	83 c4 20             	add    esp,0x20
c000f543:	5b                   	pop    ebx
c000f544:	5e                   	pop    esi
c000f545:	5f                   	pop    edi
c000f546:	c3                   	ret    

c000f547 <Phys::allocateDMA(unsigned long)>:
c000f547:	55                   	push   ebp
c000f548:	31 d2                	xor    edx,edx
c000f54a:	57                   	push   edi
c000f54b:	31 ed                	xor    ebp,ebp
c000f54d:	56                   	push   esi
c000f54e:	31 c9                	xor    ecx,ecx
c000f550:	53                   	push   ebx
c000f551:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f555:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f55b:	31 c0                	xor    eax,eax
c000f55d:	c1 ee 0c             	shr    esi,0xc
c000f560:	eb 17                	jmp    c000f579 <Phys::allocateDMA(unsigned long)+0x32>
c000f562:	85 c9                	test   ecx,ecx
c000f564:	75 04                	jne    c000f56a <Phys::allocateDMA(unsigned long)+0x23>
c000f566:	89 d5                	mov    ebp,edx
c000f568:	89 d0                	mov    eax,edx
c000f56a:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f56d:	39 de                	cmp    esi,ebx
c000f56f:	74 20                	je     c000f591 <Phys::allocateDMA(unsigned long)+0x4a>
c000f571:	42                   	inc    edx
c000f572:	89 d9                	mov    ecx,ebx
c000f574:	83 fa 2f             	cmp    edx,0x2f
c000f577:	7f 11                	jg     c000f58a <Phys::allocateDMA(unsigned long)+0x43>
c000f579:	80 ba 40 a5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5ac0],0x0
c000f580:	74 e0                	je     c000f562 <Phys::allocateDMA(unsigned long)+0x1b>
c000f582:	31 c9                	xor    ecx,ecx
c000f584:	42                   	inc    edx
c000f585:	83 fa 2f             	cmp    edx,0x2f
c000f588:	7e ef                	jle    c000f579 <Phys::allocateDMA(unsigned long)+0x32>
c000f58a:	5b                   	pop    ebx
c000f58b:	31 c0                	xor    eax,eax
c000f58d:	5e                   	pop    esi
c000f58e:	5f                   	pop    edi
c000f58f:	5d                   	pop    ebp
c000f590:	c3                   	ret    
c000f591:	8d 14 30             	lea    edx,[eax+esi*1]
c000f594:	89 d7                	mov    edi,edx
c000f596:	4f                   	dec    edi
c000f597:	79 03                	jns    c000f59c <Phys::allocateDMA(unsigned long)+0x55>
c000f599:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f59c:	c1 ff 04             	sar    edi,0x4
c000f59f:	89 c2                	mov    edx,eax
c000f5a1:	c1 fa 04             	sar    edx,0x4
c000f5a4:	39 fa                	cmp    edx,edi
c000f5a6:	75 2f                	jne    c000f5d7 <Phys::allocateDMA(unsigned long)+0x90>
c000f5a8:	85 db                	test   ebx,ebx
c000f5aa:	74 1a                	je     c000f5c6 <Phys::allocateDMA(unsigned long)+0x7f>
c000f5ac:	be 40 a5 02 c0       	mov    esi,0xc002a540
c000f5b1:	8d 90 40 a5 02 c0    	lea    edx,[eax-0x3ffd5ac0]
c000f5b7:	f7 d6                	not    esi
c000f5b9:	29 c6                	sub    esi,eax
c000f5bb:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f5be:	42                   	inc    edx
c000f5bf:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f5c2:	39 d9                	cmp    ecx,ebx
c000f5c4:	7f f5                	jg     c000f5bb <Phys::allocateDMA(unsigned long)+0x74>
c000f5c6:	85 ff                	test   edi,edi
c000f5c8:	74 13                	je     c000f5dd <Phys::allocateDMA(unsigned long)+0x96>
c000f5ca:	5b                   	pop    ebx
c000f5cb:	05 50 20 0c 00       	add    eax,0xc2050
c000f5d0:	5e                   	pop    esi
c000f5d1:	c1 e0 0c             	shl    eax,0xc
c000f5d4:	5f                   	pop    edi
c000f5d5:	5d                   	pop    ebp
c000f5d6:	c3                   	ret    
c000f5d7:	89 ea                	mov    edx,ebp
c000f5d9:	31 c9                	xor    ecx,ecx
c000f5db:	eb a7                	jmp    c000f584 <Phys::allocateDMA(unsigned long)+0x3d>
c000f5dd:	5b                   	pop    ebx
c000f5de:	c1 e0 0c             	shl    eax,0xc
c000f5e1:	5e                   	pop    esi
c000f5e2:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5e7:	5f                   	pop    edi
c000f5e8:	5d                   	pop    ebp
c000f5e9:	c3                   	ret    

c000f5ea <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f5f2:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f5f8:	c1 e9 0c             	shr    ecx,0xc
c000f5fb:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f600:	76 25                	jbe    c000f627 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f602:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f607:	c1 e8 0c             	shr    eax,0xc
c000f60a:	8d 50 10             	lea    edx,[eax+0x10]
c000f60d:	85 c9                	test   ecx,ecx
c000f60f:	74 15                	je     c000f626 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f611:	8d 82 40 a5 02 c0    	lea    eax,[edx-0x3ffd5ac0]
c000f617:	8d 94 11 40 a5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5ac0]
c000f61e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f621:	40                   	inc    eax
c000f622:	39 d0                	cmp    eax,edx
c000f624:	75 f8                	jne    c000f61e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f626:	c3                   	ret    
c000f627:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f62d:	c1 ea 0c             	shr    edx,0xc
c000f630:	eb db                	jmp    c000f60d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f632 <Phys::setPageState(unsigned long, bool)>:
c000f632:	56                   	push   esi
c000f633:	ba 01 00 00 00       	mov    edx,0x1
c000f638:	53                   	push   ebx
c000f639:	8b 35 b4 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293b4
c000f63f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f643:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f647:	89 c8                	mov    eax,ecx
c000f649:	83 e1 07             	and    ecx,0x7
c000f64c:	c1 e8 03             	shr    eax,0x3
c000f64f:	d3 e3                	shl    ebx,cl
c000f651:	01 c6                	add    esi,eax
c000f653:	d3 e2                	shl    edx,cl
c000f655:	f7 d2                	not    edx
c000f657:	20 16                	and    BYTE PTR [esi],dl
c000f659:	03 05 b4 93 02 c0    	add    eax,DWORD PTR ds:0xc00293b4
c000f65f:	08 18                	or     BYTE PTR [eax],bl
c000f661:	5b                   	pop    ebx
c000f662:	5e                   	pop    esi
c000f663:	c3                   	ret    

c000f664 <Phys::getPageState(unsigned long)>:
c000f664:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f668:	8b 15 b4 93 02 c0    	mov    edx,DWORD PTR ds:0xc00293b4
c000f66e:	89 c8                	mov    eax,ecx
c000f670:	83 e1 07             	and    ecx,0x7
c000f673:	c1 e8 03             	shr    eax,0x3
c000f676:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f67a:	d3 f8                	sar    eax,cl
c000f67c:	83 e0 01             	and    eax,0x1
c000f67f:	c3                   	ret    

c000f680 <Phys::freePage(unsigned long)>:
c000f680:	53                   	push   ebx
c000f681:	83 ec 08             	sub    esp,0x8
c000f684:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f688:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f68e:	76 57                	jbe    c000f6e7 <Phys::freePage(unsigned long)+0x67>
c000f690:	c1 eb 0c             	shr    ebx,0xc
c000f693:	53                   	push   ebx
c000f694:	e8 cb ff ff ff       	call   c000f664 <Phys::getPageState(unsigned long)>
c000f699:	5a                   	pop    edx
c000f69a:	84 c0                	test   al,al
c000f69c:	74 5b                	je     c000f6f9 <Phys::freePage(unsigned long)+0x79>
c000f69e:	a1 2c a5 02 c0       	mov    eax,ds:0xc002a52c
c000f6a3:	48                   	dec    eax
c000f6a4:	a3 2c a5 02 c0       	mov    ds:0xc002a52c,eax
c000f6a9:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6ac:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6af:	c1 e0 02             	shl    eax,0x2
c000f6b2:	99                   	cdq    
c000f6b3:	f7 3d 30 a5 02 c0    	idiv   DWORD PTR ds:0xc002a530
c000f6b9:	39 05 28 a5 02 c0    	cmp    DWORD PTR ds:0xc002a528,eax
c000f6bf:	75 13                	jne    c000f6d4 <Phys::freePage(unsigned long)+0x54>
c000f6c1:	83 ec 08             	sub    esp,0x8
c000f6c4:	6a 00                	push   0x0
c000f6c6:	53                   	push   ebx
c000f6c7:	e8 66 ff ff ff       	call   c000f632 <Phys::setPageState(unsigned long, bool)>
c000f6cc:	83 c4 10             	add    esp,0x10
c000f6cf:	83 c4 08             	add    esp,0x8
c000f6d2:	5b                   	pop    ebx
c000f6d3:	c3                   	ret    
c000f6d4:	83 ec 0c             	sub    esp,0xc
c000f6d7:	a3 28 a5 02 c0       	mov    ds:0xc002a528,eax
c000f6dc:	50                   	push   eax
c000f6dd:	e8 00 0a 00 00       	call   c00100e2 <VgaText::updateRAMUsageDisplay(int)>
c000f6e2:	83 c4 10             	add    esp,0x10
c000f6e5:	eb da                	jmp    c000f6c1 <Phys::freePage(unsigned long)+0x41>
c000f6e7:	68 00 10 00 00       	push   0x1000
c000f6ec:	53                   	push   ebx
c000f6ed:	e8 f8 fe ff ff       	call   c000f5ea <Phys::freeDMA(unsigned long, unsigned long)>
c000f6f2:	59                   	pop    ecx
c000f6f3:	5b                   	pop    ebx
c000f6f4:	83 c4 08             	add    esp,0x8
c000f6f7:	5b                   	pop    ebx
c000f6f8:	c3                   	ret    
c000f6f9:	c7 44 24 10 07 6b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026b07
c000f701:	83 c4 08             	add    esp,0x8
c000f704:	5b                   	pop    ebx
c000f705:	e9 c9 9f 00 00       	jmp    c00196d3 <Krnl::panic(char const*)>

c000f70a <Phys::allocatePage()>:
c000f70a:	56                   	push   esi
c000f70b:	53                   	push   ebx
c000f70c:	51                   	push   ecx
c000f70d:	8b 35 20 a5 02 c0    	mov    esi,DWORD PTR ds:0xc002a520
c000f713:	89 f3                	mov    ebx,esi
c000f715:	eb 0a                	jmp    c000f721 <Phys::allocatePage()+0x17>
c000f717:	89 1d 20 a5 02 c0    	mov    DWORD PTR ds:0xc002a520,ebx
c000f71d:	39 de                	cmp    esi,ebx
c000f71f:	74 24                	je     c000f745 <Phys::allocatePage()+0x3b>
c000f721:	53                   	push   ebx
c000f722:	e8 3d ff ff ff       	call   c000f664 <Phys::getPageState(unsigned long)>
c000f727:	5a                   	pop    edx
c000f728:	84 c0                	test   al,al
c000f72a:	74 5a                	je     c000f786 <Phys::allocatePage()+0x7c>
c000f72c:	43                   	inc    ebx
c000f72d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f733:	75 e2                	jne    c000f717 <Phys::allocatePage()+0xd>
c000f735:	31 db                	xor    ebx,ebx
c000f737:	c7 05 20 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a520,0x0
c000f741:	39 de                	cmp    esi,ebx
c000f743:	75 dc                	jne    c000f721 <Phys::allocatePage()+0x17>
c000f745:	83 ec 0c             	sub    esp,0xc
c000f748:	68 1d 6b 02 c0       	push   0xc0026b1d
c000f74d:	e8 ff 2a 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f752:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f759:	e8 e9 fd ff ff       	call   c000f547 <Phys::allocateDMA(unsigned long)>
c000f75e:	83 c4 10             	add    esp,0x10
c000f761:	85 c0                	test   eax,eax
c000f763:	75 56                	jne    c000f7bb <Phys::allocatePage()+0xb1>
c000f765:	83 ec 0c             	sub    esp,0xc
c000f768:	68 2e 6b 02 c0       	push   0xc0026b2e
c000f76d:	e8 61 9f 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000f772:	83 c4 10             	add    esp,0x10
c000f775:	8b 1d 20 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a520
c000f77b:	53                   	push   ebx
c000f77c:	e8 e3 fe ff ff       	call   c000f664 <Phys::getPageState(unsigned long)>
c000f781:	5a                   	pop    edx
c000f782:	84 c0                	test   al,al
c000f784:	75 a6                	jne    c000f72c <Phys::allocatePage()+0x22>
c000f786:	6a 01                	push   0x1
c000f788:	53                   	push   ebx
c000f789:	e8 a4 fe ff ff       	call   c000f632 <Phys::setPageState(unsigned long, bool)>
c000f78e:	a1 2c a5 02 c0       	mov    eax,ds:0xc002a52c
c000f793:	59                   	pop    ecx
c000f794:	40                   	inc    eax
c000f795:	5b                   	pop    ebx
c000f796:	a3 2c a5 02 c0       	mov    ds:0xc002a52c,eax
c000f79b:	8d 04 80             	lea    eax,[eax+eax*4]
c000f79e:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7a1:	c1 e0 02             	shl    eax,0x2
c000f7a4:	99                   	cdq    
c000f7a5:	f7 3d 30 a5 02 c0    	idiv   DWORD PTR ds:0xc002a530
c000f7ab:	39 05 28 a5 02 c0    	cmp    DWORD PTR ds:0xc002a528,eax
c000f7b1:	75 0c                	jne    c000f7bf <Phys::allocatePage()+0xb5>
c000f7b3:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c000f7b8:	c1 e0 0c             	shl    eax,0xc
c000f7bb:	5a                   	pop    edx
c000f7bc:	5b                   	pop    ebx
c000f7bd:	5e                   	pop    esi
c000f7be:	c3                   	ret    
c000f7bf:	83 ec 0c             	sub    esp,0xc
c000f7c2:	a3 28 a5 02 c0       	mov    ds:0xc002a528,eax
c000f7c7:	50                   	push   eax
c000f7c8:	e8 15 09 00 00       	call   c00100e2 <VgaText::updateRAMUsageDisplay(int)>
c000f7cd:	83 c4 10             	add    esp,0x10
c000f7d0:	eb e1                	jmp    c000f7b3 <Phys::allocatePage()+0xa9>

c000f7d2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f7d2:	56                   	push   esi
c000f7d3:	53                   	push   ebx
c000f7d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7d8:	39 1d 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,ebx
c000f7de:	73 06                	jae    c000f7e6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7e0:	89 1d 24 a5 02 c0    	mov    DWORD PTR ds:0xc002a524,ebx
c000f7e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7ea:	c1 eb 0c             	shr    ebx,0xc
c000f7ed:	c1 e8 0c             	shr    eax,0xc
c000f7f0:	39 d8                	cmp    eax,ebx
c000f7f2:	73 13                	jae    c000f807 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f7f4:	6a 00                	push   0x0
c000f7f6:	8d 70 01             	lea    esi,[eax+0x1]
c000f7f9:	50                   	push   eax
c000f7fa:	e8 33 fe ff ff       	call   c000f632 <Phys::setPageState(unsigned long, bool)>
c000f7ff:	5a                   	pop    edx
c000f800:	89 f0                	mov    eax,esi
c000f802:	59                   	pop    ecx
c000f803:	39 f3                	cmp    ebx,esi
c000f805:	75 ed                	jne    c000f7f4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f807:	5b                   	pop    ebx
c000f808:	5e                   	pop    esi
c000f809:	c3                   	ret    

c000f80a <Phys::physicalMemorySetup(unsigned int)>:
c000f80a:	55                   	push   ebp
c000f80b:	57                   	push   edi
c000f80c:	56                   	push   esi
c000f80d:	53                   	push   ebx
c000f80e:	31 db                	xor    ebx,ebx
c000f810:	83 ec 40             	sub    esp,0x40
c000f813:	6a 30                	push   0x30
c000f815:	6a 00                	push   0x0
c000f817:	68 40 a5 02 c0       	push   0xc002a540
c000f81c:	e8 c5 0e ff ff       	call   c00006e6 <memset>
c000f821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f825:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f82a:	05 00 10 00 00       	add    eax,0x1000
c000f82f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f833:	83 c4 10             	add    esp,0x10
c000f836:	83 ec 08             	sub    esp,0x8
c000f839:	6a 01                	push   0x1
c000f83b:	53                   	push   ebx
c000f83c:	43                   	inc    ebx
c000f83d:	e8 f0 fd ff ff       	call   c000f632 <Phys::setPageState(unsigned long, bool)>
c000f842:	83 c4 10             	add    esp,0x10
c000f845:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f84b:	75 e9                	jne    c000f836 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f84d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f854:	66 85 c0             	test   ax,ax
c000f857:	0f 84 8e 01 00 00    	je     c000f9eb <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f85d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f861:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f869:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f86d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f872:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f876:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f87e:	eb 15                	jmp    c000f895 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f880:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f884:	83 c3 18             	add    ebx,0x18
c000f887:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f88b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f88f:	0f 84 66 01 00 00    	je     c000f9fb <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f895:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f898:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f89b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f89e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8a6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f8a8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f8ab:	01 f0                	add    eax,esi
c000f8ad:	55                   	push   ebp
c000f8ae:	11 fa                	adc    edx,edi
c000f8b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8b4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f8b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8bc:	56                   	push   esi
c000f8bd:	68 68 6b 02 c0       	push   0xc0026b68
c000f8c2:	e8 8a 29 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f8c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8cb:	83 c4 10             	add    esp,0x10
c000f8ce:	09 f8                	or     eax,edi
c000f8d0:	0f 85 25 01 00 00    	jne    c000f9fb <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8d6:	4d                   	dec    ebp
c000f8d7:	75 a7                	jne    c000f880 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8d9:	ba 00 00 08 00       	mov    edx,0x80000
c000f8de:	89 c1                	mov    ecx,eax
c000f8e0:	39 f2                	cmp    edx,esi
c000f8e2:	19 f9                	sbb    ecx,edi
c000f8e4:	0f 82 a7 00 00 00    	jb     c000f991 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8ea:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8ee:	89 c1                	mov    ecx,eax
c000f8f0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f8f4:	0f 83 97 00 00 00    	jae    c000f991 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8fa:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f8ff:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f903:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f907:	39 fa                	cmp    edx,edi
c000f909:	19 e8                	sbb    eax,ebp
c000f90b:	0f 82 14 01 00 00    	jb     c000fa25 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f911:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f915:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f919:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f91f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f924:	83 d5 ff             	adc    ebp,0xffffffff
c000f927:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f92b:	31 c0                	xor    eax,eax
c000f92d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f931:	39 fa                	cmp    edx,edi
c000f933:	89 c1                	mov    ecx,eax
c000f935:	19 e9                	sbb    ecx,ebp
c000f937:	0f 83 43 ff ff ff    	jae    c000f880 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f93d:	be 00 00 08 00       	mov    esi,0x80000
c000f942:	50                   	push   eax
c000f943:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f947:	57                   	push   edi
c000f948:	56                   	push   esi
c000f949:	68 8c 6b 02 c0       	push   0xc0026b8c
c000f94e:	e8 fe 28 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f953:	5a                   	pop    edx
c000f954:	59                   	pop    ecx
c000f955:	57                   	push   edi
c000f956:	56                   	push   esi
c000f957:	e8 76 fe ff ff       	call   c000f7d2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f95c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f960:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f964:	83 c4 0c             	add    esp,0xc
c000f967:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f96b:	03 05 30 a5 02 c0    	add    eax,DWORD PTR ds:0xc002a530
c000f971:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f978:	a3 30 a5 02 c0       	mov    ds:0xc002a530,eax
c000f97d:	52                   	push   edx
c000f97e:	50                   	push   eax
c000f97f:	68 4a 6b 02 c0       	push   0xc0026b4a
c000f984:	e8 c8 28 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f989:	83 c4 10             	add    esp,0x10
c000f98c:	e9 ef fe ff ff       	jmp    c000f880 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f991:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f995:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f999:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f99d:	39 ea                	cmp    edx,ebp
c000f99f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f9a3:	0f 82 d7 fe ff ff    	jb     c000f880 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9a9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f9ae:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f9b2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f9b6:	0f 83 c4 fe ff ff    	jae    c000f880 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9bc:	39 ee                	cmp    esi,ebp
c000f9be:	89 f8                	mov    eax,edi
c000f9c0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f9c4:	0f 83 78 ff ff ff    	jae    c000f942 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9d2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f9d6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9da:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9e6:	e9 57 ff ff ff       	jmp    c000f942 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9eb:	83 ec 0c             	sub    esp,0xc
c000f9ee:	68 3c 6b 02 c0       	push   0xc0026b3c
c000f9f3:	e8 db 9c 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000f9f8:	83 c4 10             	add    esp,0x10
c000f9fb:	bb 40 01 00 00       	mov    ebx,0x140
c000fa00:	83 ec 08             	sub    esp,0x8
c000fa03:	6a 00                	push   0x0
c000fa05:	53                   	push   ebx
c000fa06:	43                   	inc    ebx
c000fa07:	e8 26 fc ff ff       	call   c000f632 <Phys::setPageState(unsigned long, bool)>
c000fa0c:	ff 05 30 a5 02 c0    	inc    DWORD PTR ds:0xc002a530
c000fa12:	83 c4 10             	add    esp,0x10
c000fa15:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fa1b:	75 e3                	jne    c000fa00 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fa1d:	83 c4 3c             	add    esp,0x3c
c000fa20:	5b                   	pop    ebx
c000fa21:	5e                   	pop    esi
c000fa22:	5f                   	pop    edi
c000fa23:	5d                   	pop    ebp
c000fa24:	c3                   	ret    
c000fa25:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fa2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa35:	e9 d7 fe ff ff       	jmp    c000f911 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa3a <Pipe::isAtty()>:
c000fa3a:	31 c0                	xor    eax,eax
c000fa3c:	c3                   	ret    
c000fa3d:	90                   	nop

c000fa3e <Pipe::~Pipe()>:
c000fa3e:	83 ec 0c             	sub    esp,0xc
c000fa41:	ba f8 6b 02 c0       	mov    edx,0xc0026bf8
c000fa46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa4a:	89 10                	mov    DWORD PTR [eax],edx
c000fa4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa50:	83 ec 0c             	sub    esp,0xc
c000fa53:	50                   	push   eax
c000fa54:	e8 c5 15 00 00       	call   c001101e <UnixFile::~UnixFile()>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	90                   	nop
c000fa5d:	83 c4 0c             	add    esp,0xc
c000fa60:	c3                   	ret    
c000fa61:	90                   	nop

c000fa62 <Pipe::~Pipe()>:
c000fa62:	83 ec 0c             	sub    esp,0xc
c000fa65:	83 ec 0c             	sub    esp,0xc
c000fa68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa6c:	e8 cd ff ff ff       	call   c000fa3e <Pipe::~Pipe()>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	83 ec 08             	sub    esp,0x8
c000fa77:	6a 20                	push   0x20
c000fa79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa7d:	e8 ef 26 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c000fa82:	83 c4 10             	add    esp,0x10
c000fa85:	83 c4 0c             	add    esp,0xc
c000fa88:	c3                   	ret    
c000fa89:	90                   	nop

c000fa8a <Pipe::read(unsigned long long, void*, int*)>:
c000fa8a:	55                   	push   ebp
c000fa8b:	57                   	push   edi
c000fa8c:	56                   	push   esi
c000fa8d:	53                   	push   ebx
c000fa8e:	83 ec 1c             	sub    esp,0x1c
c000fa91:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fa95:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fa99:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fa9d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000faa0:	89 c8                	mov    eax,ecx
c000faa2:	99                   	cdq    
c000faa3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000faa7:	74 19                	je     c000fac2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000faa9:	39 f9                	cmp    ecx,edi
c000faab:	89 d1                	mov    ecx,edx
c000faad:	19 f1                	sbb    ecx,esi
c000faaf:	73 11                	jae    c000fac2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fab1:	e8 70 cb 00 00       	call   c001c626 <lockScheduler()>
c000fab6:	e8 9f ce 00 00       	call   c001c95a <schedule()>
c000fabb:	e8 68 cb 00 00       	call   c001c628 <unlockScheduler()>
c000fac0:	eb db                	jmp    c000fa9d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fac2:	39 f8                	cmp    eax,edi
c000fac4:	89 d1                	mov    ecx,edx
c000fac6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000faca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000face:	19 f1                	sbb    ecx,esi
c000fad0:	73 08                	jae    c000fada <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fad2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fad6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fada:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fadd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fae0:	29 c6                	sub    esi,eax
c000fae2:	89 f1                	mov    ecx,esi
c000fae4:	c1 f9 1f             	sar    ecx,0x1f
c000fae7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000faeb:	89 ca                	mov    edx,ecx
c000faed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faf1:	19 d1                	sbb    ecx,edx
c000faf3:	73 04                	jae    c000faf9 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000faf5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000faf9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fafd:	89 fd                	mov    ebp,edi
c000faff:	29 f5                	sub    ebp,esi
c000fb01:	85 f6                	test   esi,esi
c000fb03:	74 12                	je     c000fb17 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fb05:	52                   	push   edx
c000fb06:	56                   	push   esi
c000fb07:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fb0a:	50                   	push   eax
c000fb0b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fb0f:	e8 9c 0b ff ff       	call   c00006b0 <memcpy>
c000fb14:	83 c4 10             	add    esp,0x10
c000fb17:	85 ed                	test   ebp,ebp
c000fb19:	74 12                	je     c000fb2d <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fb1b:	50                   	push   eax
c000fb1c:	55                   	push   ebp
c000fb1d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fb20:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fb24:	56                   	push   esi
c000fb25:	e8 86 0b ff ff       	call   c00006b0 <memcpy>
c000fb2a:	83 c4 10             	add    esp,0x10
c000fb2d:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fb30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fb33:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fb36:	99                   	cdq    
c000fb37:	89 f7                	mov    edi,esi
c000fb39:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb3d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb41:	c1 ff 1f             	sar    edi,0x1f
c000fb44:	57                   	push   edi
c000fb45:	56                   	push   esi
c000fb46:	52                   	push   edx
c000fb47:	50                   	push   eax
c000fb48:	e8 83 38 01 00       	call   c00233d0 <__umoddi3>
c000fb4d:	83 c4 10             	add    esp,0x10
c000fb50:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb53:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb58:	75 10                	jne    c000fb6a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb5a:	83 ec 0c             	sub    esp,0xc
c000fb5d:	68 b5 6b 02 c0       	push   0xc0026bb5
c000fb62:	e8 6c 9b 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000fb67:	83 c4 10             	add    esp,0x10
c000fb6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb72:	89 10                	mov    DWORD PTR [eax],edx
c000fb74:	83 c4 1c             	add    esp,0x1c
c000fb77:	31 c0                	xor    eax,eax
c000fb79:	5b                   	pop    ebx
c000fb7a:	5e                   	pop    esi
c000fb7b:	5f                   	pop    edi
c000fb7c:	5d                   	pop    ebp
c000fb7d:	c3                   	ret    

c000fb7e <Pipe::write(unsigned long long, void*, int*)>:
c000fb7e:	55                   	push   ebp
c000fb7f:	57                   	push   edi
c000fb80:	56                   	push   esi
c000fb81:	53                   	push   ebx
c000fb82:	83 ec 1c             	sub    esp,0x1c
c000fb85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb89:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb8d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb91:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb94:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fb97:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fb9a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fb9e:	89 de                	mov    esi,ebx
c000fba0:	89 df                	mov    edi,ebx
c000fba2:	c1 ff 1f             	sar    edi,0x1f
c000fba5:	01 c6                	add    esi,eax
c000fba7:	89 c8                	mov    eax,ecx
c000fba9:	11 d7                	adc    edi,edx
c000fbab:	99                   	cdq    
c000fbac:	39 f1                	cmp    ecx,esi
c000fbae:	89 d0                	mov    eax,edx
c000fbb0:	19 f8                	sbb    eax,edi
c000fbb2:	b8 01 00 00 00       	mov    eax,0x1
c000fbb7:	0f 82 80 00 00 00    	jb     c000fc3d <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fbbd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fbc0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fbc3:	01 d8                	add    eax,ebx
c000fbc5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fbc9:	99                   	cdq    
c000fbca:	f7 f9                	idiv   ecx
c000fbcc:	29 d1                	sub    ecx,edx
c000fbce:	89 d7                	mov    edi,edx
c000fbd0:	89 c8                	mov    eax,ecx
c000fbd2:	99                   	cdq    
c000fbd3:	39 ce                	cmp    esi,ecx
c000fbd5:	19 d3                	sbb    ebx,edx
c000fbd7:	bb 00 00 00 00       	mov    ebx,0x0
c000fbdc:	72 04                	jb     c000fbe2 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fbde:	89 f3                	mov    ebx,esi
c000fbe0:	29 cb                	sub    ebx,ecx
c000fbe2:	89 f1                	mov    ecx,esi
c000fbe4:	29 d9                	sub    ecx,ebx
c000fbe6:	74 1a                	je     c000fc02 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbe8:	52                   	push   edx
c000fbe9:	51                   	push   ecx
c000fbea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fbf2:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fbf5:	57                   	push   edi
c000fbf6:	e8 b5 0a ff ff       	call   c00006b0 <memcpy>
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc02:	85 db                	test   ebx,ebx
c000fc04:	74 12                	je     c000fc18 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fc06:	50                   	push   eax
c000fc07:	53                   	push   ebx
c000fc08:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fc0c:	51                   	push   ecx
c000fc0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fc10:	e8 9b 0a ff ff       	call   c00006b0 <memcpy>
c000fc15:	83 c4 10             	add    esp,0x10
c000fc18:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fc1b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fc20:	75 10                	jne    c000fc32 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fc22:	83 ec 0c             	sub    esp,0xc
c000fc25:	68 d1 6b 02 c0       	push   0xc0026bd1
c000fc2a:	e8 a4 9a 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c000fc2f:	83 c4 10             	add    esp,0x10
c000fc32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc36:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fc39:	89 38                	mov    DWORD PTR [eax],edi
c000fc3b:	31 c0                	xor    eax,eax
c000fc3d:	83 c4 1c             	add    esp,0x1c
c000fc40:	5b                   	pop    ebx
c000fc41:	5e                   	pop    esi
c000fc42:	5f                   	pop    edi
c000fc43:	5d                   	pop    ebp
c000fc44:	c3                   	ret    
c000fc45:	90                   	nop

c000fc46 <Pipe::Pipe(int)>:
c000fc46:	83 ec 0c             	sub    esp,0xc
c000fc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4d:	83 ec 08             	sub    esp,0x8
c000fc50:	6a 00                	push   0x0
c000fc52:	50                   	push   eax
c000fc53:	e8 24 12 00 00       	call   c0010e7c <UnixFile::UnixFile(int)>
c000fc58:	83 c4 10             	add    esp,0x10
c000fc5b:	ba f8 6b 02 c0       	mov    edx,0xc0026bf8
c000fc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc64:	89 10                	mov    DWORD PTR [eax],edx
c000fc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc6e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc75:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc80:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc8b:	83 ec 0c             	sub    esp,0xc
c000fc8e:	50                   	push   eax
c000fc8f:	e8 cc f4 ff ff       	call   c000f160 <malloc>
c000fc94:	83 c4 10             	add    esp,0x10
c000fc97:	89 c2                	mov    edx,eax
c000fc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc9d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fca8:	90                   	nop
c000fca9:	83 c4 0c             	add    esp,0xc
c000fcac:	c3                   	ret    
c000fcad:	90                   	nop

c000fcae <VgaText::isAtty()>:
c000fcae:	b0 01                	mov    al,0x1
c000fcb0:	c3                   	ret    
c000fcb1:	90                   	nop

c000fcb2 <VgaText::~VgaText()>:
c000fcb2:	83 ec 0c             	sub    esp,0xc
c000fcb5:	ba b4 6c 02 c0       	mov    edx,0xc0026cb4
c000fcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcbe:	89 10                	mov    DWORD PTR [eax],edx
c000fcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcc4:	83 ec 0c             	sub    esp,0xc
c000fcc7:	50                   	push   eax
c000fcc8:	e8 51 13 00 00       	call   c001101e <UnixFile::~UnixFile()>
c000fccd:	83 c4 10             	add    esp,0x10
c000fcd0:	90                   	nop
c000fcd1:	83 c4 0c             	add    esp,0xc
c000fcd4:	c3                   	ret    
c000fcd5:	90                   	nop

c000fcd6 <VgaText::~VgaText()>:
c000fcd6:	83 ec 0c             	sub    esp,0xc
c000fcd9:	83 ec 0c             	sub    esp,0xc
c000fcdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fce0:	e8 cd ff ff ff       	call   c000fcb2 <VgaText::~VgaText()>
c000fce5:	83 c4 10             	add    esp,0x10
c000fce8:	83 ec 08             	sub    esp,0x8
c000fceb:	68 60 12 00 00       	push   0x1260
c000fcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcf4:	e8 78 24 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c000fcf9:	83 c4 10             	add    esp,0x10
c000fcfc:	83 c4 0c             	add    esp,0xc
c000fcff:	c3                   	ret    

c000fd00 <VgaText::read(unsigned long long, void*, int*)>:
c000fd00:	83 ec 10             	sub    esp,0x10
c000fd03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd0f:	e8 e4 56 00 00       	call   c00153f8 <readKeyboard(VgaText*, char*, unsigned long)>
c000fd14:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fd18:	89 02                	mov    DWORD PTR [edx],eax
c000fd1a:	31 c0                	xor    eax,eax
c000fd1c:	83 c4 1c             	add    esp,0x1c
c000fd1f:	c3                   	ret    

c000fd20 <setTerminalScrollLock(bool)>:
c000fd20:	c3                   	ret    

c000fd21 <addToTerminalCycle(VgaText*)>:
c000fd21:	8b 15 a0 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a5a0
c000fd27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd2b:	85 d2                	test   edx,edx
c000fd2d:	75 0c                	jne    c000fd3b <addToTerminalCycle(VgaText*)+0x1a>
c000fd2f:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fd35:	a3 a0 a5 02 c0       	mov    ds:0xc002a5a0,eax
c000fd3a:	c3                   	ret    
c000fd3b:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd41:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd47:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd4d:	c3                   	ret    

c000fd4e <installVgaTextImplementation()>:
c000fd4e:	83 ec 10             	sub    esp,0x10
c000fd51:	6a 20                	push   0x20
c000fd53:	6a 00                	push   0x0
c000fd55:	68 80 a5 02 c0       	push   0xc002a580
c000fd5a:	e8 87 09 ff ff       	call   c00006e6 <memset>
c000fd5f:	83 c4 1c             	add    esp,0x1c
c000fd62:	c3                   	ret    

c000fd63 <scrollTerminalScrollLock(int)>:
c000fd63:	c3                   	ret    

c000fd64 <VgaText::load()>:
c000fd64:	53                   	push   ebx
c000fd65:	31 c0                	xor    eax,eax
c000fd67:	83 ec 58             	sub    esp,0x58
c000fd6a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd6e:	89 e2                	mov    edx,esp
c000fd70:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd74:	40                   	inc    eax
c000fd75:	83 f8 50             	cmp    eax,0x50
c000fd78:	75 f6                	jne    c000fd70 <VgaText::load()+0xc>
c000fd7a:	31 c0                	xor    eax,eax
c000fd7c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd83:	84 c9                	test   cl,cl
c000fd85:	74 06                	je     c000fd8d <VgaText::load()+0x29>
c000fd87:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd8a:	40                   	inc    eax
c000fd8b:	eb ef                	jmp    c000fd7c <VgaText::load()+0x18>
c000fd8d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fd93:	85 c0                	test   eax,eax
c000fd95:	74 09                	je     c000fda0 <VgaText::load()+0x3c>
c000fd97:	51                   	push   ecx
c000fd98:	51                   	push   ecx
c000fd99:	52                   	push   edx
c000fd9a:	53                   	push   ebx
c000fd9b:	ff d0                	call   eax
c000fd9d:	83 c4 10             	add    esp,0x10
c000fda0:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fda6:	85 c0                	test   eax,eax
c000fda8:	74 09                	je     c000fdb3 <VgaText::load()+0x4f>
c000fdaa:	83 ec 0c             	sub    esp,0xc
c000fdad:	53                   	push   ebx
c000fdae:	ff d0                	call   eax
c000fdb0:	83 c4 10             	add    esp,0x10
c000fdb3:	83 c4 58             	add    esp,0x58
c000fdb6:	5b                   	pop    ebx
c000fdb7:	c3                   	ret    

c000fdb8 <VgaText::updateCursor()>:
c000fdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdbc:	39 05 a4 a5 02 c0    	cmp    DWORD PTR ds:0xc002a5a4,eax
c000fdc2:	75 0c                	jne    c000fdd0 <VgaText::updateCursor()+0x18>
c000fdc4:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fdca:	85 c0                	test   eax,eax
c000fdcc:	74 02                	je     c000fdd0 <VgaText::updateCursor()+0x18>
c000fdce:	ff e0                	jmp    eax
c000fdd0:	c3                   	ret    
c000fdd1:	90                   	nop

c000fdd2 <VgaText::showCursor(bool)>:
c000fdd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdda:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fde0:	c3                   	ret    
c000fde1:	90                   	nop

c000fde2 <VgaText::disableBlink(bool)>:
c000fde2:	56                   	push   esi
c000fde3:	53                   	push   ebx
c000fde4:	51                   	push   ecx
c000fde5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fde9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fded:	39 1d a4 a5 02 c0    	cmp    DWORD PTR ds:0xc002a5a4,ebx
c000fdf3:	75 18                	jne    c000fe0d <VgaText::disableBlink(bool)+0x2b>
c000fdf5:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fdfb:	85 c0                	test   eax,eax
c000fdfd:	74 0e                	je     c000fe0d <VgaText::disableBlink(bool)+0x2b>
c000fdff:	89 f1                	mov    ecx,esi
c000fe01:	52                   	push   edx
c000fe02:	52                   	push   edx
c000fe03:	0f b6 d1             	movzx  edx,cl
c000fe06:	52                   	push   edx
c000fe07:	53                   	push   ebx
c000fe08:	ff d0                	call   eax
c000fe0a:	83 c4 10             	add    esp,0x10
c000fe0d:	89 f0                	mov    eax,esi
c000fe0f:	83 f0 01             	xor    eax,0x1
c000fe12:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fe18:	58                   	pop    eax
c000fe19:	5b                   	pop    ebx
c000fe1a:	5e                   	pop    esi
c000fe1b:	c3                   	ret    

c000fe1c <VgaText::doANSI_SGR(int)>:
c000fe1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe24:	85 d2                	test   edx,edx
c000fe26:	75 14                	jne    c000fe3c <VgaText::doANSI_SGR(int)+0x20>
c000fe28:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fe2e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe34:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe3a:	eb 65                	jmp    c000fea1 <VgaText::doANSI_SGR(int)+0x85>
c000fe3c:	83 fa 07             	cmp    edx,0x7
c000fe3f:	75 14                	jne    c000fe55 <VgaText::doANSI_SGR(int)+0x39>
c000fe41:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe47:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe4d:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe53:	eb 4c                	jmp    c000fea1 <VgaText::doANSI_SGR(int)+0x85>
c000fe55:	83 fa 1b             	cmp    edx,0x1b
c000fe58:	74 ce                	je     c000fe28 <VgaText::doANSI_SGR(int)+0xc>
c000fe5a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe5d:	83 f9 07             	cmp    ecx,0x7
c000fe60:	77 09                	ja     c000fe6b <VgaText::doANSI_SGR(int)+0x4f>
c000fe62:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe69:	eb 20                	jmp    c000fe8b <VgaText::doANSI_SGR(int)+0x6f>
c000fe6b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe6e:	83 f9 07             	cmp    ecx,0x7
c000fe71:	77 09                	ja     c000fe7c <VgaText::doANSI_SGR(int)+0x60>
c000fe73:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe7a:	eb 25                	jmp    c000fea1 <VgaText::doANSI_SGR(int)+0x85>
c000fe7c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe7f:	83 f9 07             	cmp    ecx,0x7
c000fe82:	77 0e                	ja     c000fe92 <VgaText::doANSI_SGR(int)+0x76>
c000fe84:	8b 14 95 98 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d68]
c000fe8b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe91:	c3                   	ret    
c000fe92:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fe95:	83 f9 07             	cmp    ecx,0x7
c000fe98:	77 0d                	ja     c000fea7 <VgaText::doANSI_SGR(int)+0x8b>
c000fe9a:	8b 14 95 70 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d90]
c000fea1:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fea7:	c3                   	ret    

c000fea8 <VgaText::setDefaultBgColour(VgaColour)>:
c000fea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feb0:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000feb6:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000febc:	c3                   	ret    
c000febd:	90                   	nop

c000febe <VgaText::setDefaultFgColour(VgaColour)>:
c000febe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fec6:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fecc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fed2:	c3                   	ret    
c000fed3:	90                   	nop

c000fed4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fed4:	53                   	push   ebx
c000fed5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fed9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fedd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fee1:	51                   	push   ecx
c000fee2:	e8 c1 ff ff ff       	call   c000fea8 <VgaText::setDefaultBgColour(VgaColour)>
c000fee7:	58                   	pop    eax
c000fee8:	5a                   	pop    edx
c000fee9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000feed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fef1:	5b                   	pop    ebx
c000fef2:	eb ca                	jmp    c000febe <VgaText::setDefaultFgColour(VgaColour)>

c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>:
c000fef4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fef8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fefd:	83 e0 0f             	and    eax,0xf
c000ff00:	c1 e2 04             	shl    edx,0x4
c000ff03:	09 d0                	or     eax,edx
c000ff05:	c3                   	ret    

c000ff06 <VgaText::scrollScreen()>:
c000ff06:	57                   	push   edi
c000ff07:	56                   	push   esi
c000ff08:	be 01 00 00 00       	mov    esi,0x1
c000ff0d:	53                   	push   ebx
c000ff0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff12:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000ff18:	31 ff                	xor    edi,edi
c000ff1a:	01 d9                	add    ecx,ebx
c000ff1c:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000ff1f:	83 fe 17             	cmp    esi,0x17
c000ff22:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ff28:	75 28                	jne    c000ff52 <VgaText::scrollScreen()+0x4c>
c000ff2a:	f7 c7 01 00 00 00    	test   edi,0x1
c000ff30:	74 1c                	je     c000ff4e <VgaText::scrollScreen()+0x48>
c000ff32:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ff39:	50                   	push   eax
c000ff3a:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff41:	50                   	push   eax
c000ff42:	e8 ad ff ff ff       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c000ff47:	5a                   	pop    edx
c000ff48:	5a                   	pop    edx
c000ff49:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff4c:	eb 04                	jmp    c000ff52 <VgaText::scrollScreen()+0x4c>
c000ff4e:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff52:	47                   	inc    edi
c000ff53:	41                   	inc    ecx
c000ff54:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff5a:	75 c0                	jne    c000ff1c <VgaText::scrollScreen()+0x16>
c000ff5c:	46                   	inc    esi
c000ff5d:	83 fe 18             	cmp    esi,0x18
c000ff60:	75 b0                	jne    c000ff12 <VgaText::scrollScreen()+0xc>
c000ff62:	39 1d a4 a5 02 c0    	cmp    DWORD PTR ds:0xc002a5a4,ebx
c000ff68:	75 24                	jne    c000ff8e <VgaText::scrollScreen()+0x88>
c000ff6a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff71:	74 08                	je     c000ff7b <VgaText::scrollScreen()+0x75>
c000ff73:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff79:	eb 13                	jmp    c000ff8e <VgaText::scrollScreen()+0x88>
c000ff7b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff81:	85 c0                	test   eax,eax
c000ff83:	74 09                	je     c000ff8e <VgaText::scrollScreen()+0x88>
c000ff85:	83 ec 0c             	sub    esp,0xc
c000ff88:	53                   	push   ebx
c000ff89:	ff d0                	call   eax
c000ff8b:	83 c4 10             	add    esp,0x10
c000ff8e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff92:	5b                   	pop    ebx
c000ff93:	5e                   	pop    esi
c000ff94:	5f                   	pop    edi
c000ff95:	e9 1e fe ff ff       	jmp    c000fdb8 <VgaText::updateCursor()>

c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>:
c000ff9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ff9f:	c1 e0 08             	shl    eax,0x8
c000ffa2:	89 c2                	mov    edx,eax
c000ffa4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ffa9:	09 d0                	or     eax,edx
c000ffab:	c3                   	ret    

c000ffac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ffac:	53                   	push   ebx
c000ffad:	83 ec 08             	sub    esp,0x8
c000ffb0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ffb4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffb9:	50                   	push   eax
c000ffba:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffbf:	50                   	push   eax
c000ffc0:	e8 2f ff ff ff       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c000ffc5:	5a                   	pop    edx
c000ffc6:	0f b6 c0             	movzx  eax,al
c000ffc9:	5b                   	pop    ebx
c000ffca:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ffcf:	50                   	push   eax
c000ffd0:	53                   	push   ebx
c000ffd1:	e8 c4 ff ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c000ffd6:	5a                   	pop    edx
c000ffd7:	5a                   	pop    edx
c000ffd8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffde:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ffe2:	0f b7 d2             	movzx  edx,dx
c000ffe5:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ffea:	39 0d a4 a5 02 c0    	cmp    DWORD PTR ds:0xc002a5a4,ecx
c000fff0:	75 14                	jne    c0010006 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000fff2:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000fff8:	85 c0                	test   eax,eax
c000fffa:	74 0a                	je     c0010006 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000fffc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010000:	83 c4 08             	add    esp,0x8
c0010003:	5b                   	pop    ebx
c0010004:	ff e0                	jmp    eax
c0010006:	83 c4 08             	add    esp,0x8
c0010009:	5b                   	pop    ebx
c001000a:	c3                   	ret    
c001000b:	90                   	nop

c001000c <VgaText::getCursorX()>:
c001000c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010010:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010016:	c3                   	ret    
c0010017:	90                   	nop

c0010018 <VgaText::getCursorY()>:
c0010018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001001c:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010022:	c3                   	ret    
c0010023:	90                   	nop

c0010024 <VgaText::setCursor(int, int)>:
c0010024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010028:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001002c:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010032:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010036:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001003c:	e9 77 fd ff ff       	jmp    c000fdb8 <VgaText::updateCursor()>
c0010041:	90                   	nop

c0010042 <VgaText::setCursorX(int)>:
c0010042:	83 ec 10             	sub    esp,0x10
c0010045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010049:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001004f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010053:	50                   	push   eax
c0010054:	e8 cb ff ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c0010059:	83 c4 1c             	add    esp,0x1c
c001005c:	c3                   	ret    
c001005d:	90                   	nop

c001005e <VgaText::setCursorY(int)>:
c001005e:	83 ec 10             	sub    esp,0x10
c0010061:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010069:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001006f:	50                   	push   eax
c0010070:	e8 af ff ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c0010075:	83 c4 1c             	add    esp,0x1c
c0010078:	c3                   	ret    
c0010079:	90                   	nop

c001007a <VgaText::incrementCursor(bool)>:
c001007a:	56                   	push   esi
c001007b:	53                   	push   ebx
c001007c:	51                   	push   ecx
c001007d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010081:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010085:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001008b:	40                   	inc    eax
c001008c:	83 f8 50             	cmp    eax,0x50
c001008f:	74 08                	je     c0010099 <VgaText::incrementCursor(bool)+0x1f>
c0010091:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010097:	eb 33                	jmp    c00100cc <VgaText::incrementCursor(bool)+0x52>
c0010099:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001009f:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00100a9:	8d 50 01             	lea    edx,[eax+0x1]
c00100ac:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00100b2:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00100b8:	75 12                	jne    c00100cc <VgaText::incrementCursor(bool)+0x52>
c00100ba:	83 ec 0c             	sub    esp,0xc
c00100bd:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00100c3:	53                   	push   ebx
c00100c4:	e8 3d fe ff ff       	call   c000ff06 <VgaText::scrollScreen()>
c00100c9:	83 c4 10             	add    esp,0x10
c00100cc:	89 f0                	mov    eax,esi
c00100ce:	84 c0                	test   al,al
c00100d0:	74 0c                	je     c00100de <VgaText::incrementCursor(bool)+0x64>
c00100d2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100d6:	5a                   	pop    edx
c00100d7:	5b                   	pop    ebx
c00100d8:	5e                   	pop    esi
c00100d9:	e9 da fc ff ff       	jmp    c000fdb8 <VgaText::updateCursor()>
c00100de:	58                   	pop    eax
c00100df:	5b                   	pop    ebx
c00100e0:	5e                   	pop    esi
c00100e1:	c3                   	ret    

c00100e2 <VgaText::updateRAMUsageDisplay(int)>:
c00100e2:	53                   	push   ebx
c00100e3:	bb 0a 00 00 00       	mov    ebx,0xa
c00100e8:	6a 0f                	push   0xf
c00100ea:	6a 00                	push   0x0
c00100ec:	e8 03 fe ff ff       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c00100f1:	5a                   	pop    edx
c00100f2:	59                   	pop    ecx
c00100f3:	0f b6 c8             	movzx  ecx,al
c00100f6:	51                   	push   ecx
c00100f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100fb:	99                   	cdq    
c00100fc:	f7 fb                	idiv   ebx
c00100fe:	89 d3                	mov    ebx,edx
c0010100:	83 c0 30             	add    eax,0x30
c0010103:	83 c3 30             	add    ebx,0x30
c0010106:	0f be c0             	movsx  eax,al
c0010109:	0f b6 db             	movzx  ebx,bl
c001010c:	50                   	push   eax
c001010d:	e8 88 fe ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010112:	5a                   	pop    edx
c0010113:	5a                   	pop    edx
c0010114:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c001011a:	51                   	push   ecx
c001011b:	53                   	push   ebx
c001011c:	e8 79 fe ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010121:	5b                   	pop    ebx
c0010122:	5a                   	pop    edx
c0010123:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010129:	51                   	push   ecx
c001012a:	6a 25                	push   0x25
c001012c:	e8 69 fe ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010131:	59                   	pop    ecx
c0010132:	5b                   	pop    ebx
c0010133:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010139:	5b                   	pop    ebx
c001013a:	c3                   	ret    
c001013b:	90                   	nop

c001013c <VgaText::updateDiskUsage()>:
c001013c:	55                   	push   ebp
c001013d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010142:	57                   	push   edi
c0010143:	56                   	push   esi
c0010144:	53                   	push   ebx
c0010145:	6a 0f                	push   0xf
c0010147:	6a 00                	push   0x0
c0010149:	e8 a6 fd ff ff       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c001014e:	5a                   	pop    edx
c001014f:	0f b6 d8             	movzx  ebx,al
c0010152:	59                   	pop    ecx
c0010153:	a1 e8 c6 02 c0       	mov    eax,ds:0xc002c6e8
c0010158:	53                   	push   ebx
c0010159:	b9 0a 00 00 00       	mov    ecx,0xa
c001015e:	99                   	cdq    
c001015f:	f7 fd                	idiv   ebp
c0010161:	99                   	cdq    
c0010162:	f7 f9                	idiv   ecx
c0010164:	8d 42 30             	lea    eax,[edx+0x30]
c0010167:	0f b6 c0             	movzx  eax,al
c001016a:	50                   	push   eax
c001016b:	e8 2a fe ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010170:	5e                   	pop    esi
c0010171:	5f                   	pop    edi
c0010172:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010178:	bf e8 03 00 00       	mov    edi,0x3e8
c001017d:	53                   	push   ebx
c001017e:	a1 e8 c6 02 c0       	mov    eax,ds:0xc002c6e8
c0010183:	99                   	cdq    
c0010184:	f7 ff                	idiv   edi
c0010186:	99                   	cdq    
c0010187:	f7 f9                	idiv   ecx
c0010189:	8d 42 30             	lea    eax,[edx+0x30]
c001018c:	0f b6 c0             	movzx  eax,al
c001018f:	50                   	push   eax
c0010190:	e8 05 fe ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010195:	5a                   	pop    edx
c0010196:	5e                   	pop    esi
c0010197:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001019d:	be 64 00 00 00       	mov    esi,0x64
c00101a2:	53                   	push   ebx
c00101a3:	a1 e8 c6 02 c0       	mov    eax,ds:0xc002c6e8
c00101a8:	99                   	cdq    
c00101a9:	f7 fe                	idiv   esi
c00101ab:	99                   	cdq    
c00101ac:	f7 f9                	idiv   ecx
c00101ae:	8d 42 30             	lea    eax,[edx+0x30]
c00101b1:	0f b6 c0             	movzx  eax,al
c00101b4:	50                   	push   eax
c00101b5:	e8 e0 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c00101ba:	5a                   	pop    edx
c00101bb:	5a                   	pop    edx
c00101bc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c00101c2:	53                   	push   ebx
c00101c3:	a1 e8 c6 02 c0       	mov    eax,ds:0xc002c6e8
c00101c8:	99                   	cdq    
c00101c9:	f7 f9                	idiv   ecx
c00101cb:	99                   	cdq    
c00101cc:	f7 f9                	idiv   ecx
c00101ce:	8d 42 30             	lea    eax,[edx+0x30]
c00101d1:	0f b6 c0             	movzx  eax,al
c00101d4:	50                   	push   eax
c00101d5:	e8 c0 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c00101da:	5a                   	pop    edx
c00101db:	5a                   	pop    edx
c00101dc:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101e2:	53                   	push   ebx
c00101e3:	a1 e8 c6 02 c0       	mov    eax,ds:0xc002c6e8
c00101e8:	99                   	cdq    
c00101e9:	f7 f9                	idiv   ecx
c00101eb:	8d 42 30             	lea    eax,[edx+0x30]
c00101ee:	0f b6 c0             	movzx  eax,al
c00101f1:	50                   	push   eax
c00101f2:	e8 a3 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c00101f7:	5a                   	pop    edx
c00101f8:	5a                   	pop    edx
c00101f9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00101ff:	53                   	push   ebx
c0010200:	a1 e4 c6 02 c0       	mov    eax,ds:0xc002c6e4
c0010205:	99                   	cdq    
c0010206:	f7 fd                	idiv   ebp
c0010208:	99                   	cdq    
c0010209:	f7 f9                	idiv   ecx
c001020b:	8d 42 30             	lea    eax,[edx+0x30]
c001020e:	0f b6 c0             	movzx  eax,al
c0010211:	50                   	push   eax
c0010212:	e8 83 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010217:	5d                   	pop    ebp
c0010218:	5a                   	pop    edx
c0010219:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001021f:	53                   	push   ebx
c0010220:	a1 e4 c6 02 c0       	mov    eax,ds:0xc002c6e4
c0010225:	99                   	cdq    
c0010226:	f7 ff                	idiv   edi
c0010228:	99                   	cdq    
c0010229:	f7 f9                	idiv   ecx
c001022b:	8d 42 30             	lea    eax,[edx+0x30]
c001022e:	0f b6 c0             	movzx  eax,al
c0010231:	50                   	push   eax
c0010232:	e8 63 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010237:	5f                   	pop    edi
c0010238:	5d                   	pop    ebp
c0010239:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001023f:	53                   	push   ebx
c0010240:	a1 e4 c6 02 c0       	mov    eax,ds:0xc002c6e4
c0010245:	99                   	cdq    
c0010246:	f7 fe                	idiv   esi
c0010248:	99                   	cdq    
c0010249:	f7 f9                	idiv   ecx
c001024b:	8d 42 30             	lea    eax,[edx+0x30]
c001024e:	0f b6 c0             	movzx  eax,al
c0010251:	50                   	push   eax
c0010252:	e8 43 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010257:	5a                   	pop    edx
c0010258:	5e                   	pop    esi
c0010259:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001025f:	53                   	push   ebx
c0010260:	a1 e4 c6 02 c0       	mov    eax,ds:0xc002c6e4
c0010265:	99                   	cdq    
c0010266:	f7 f9                	idiv   ecx
c0010268:	99                   	cdq    
c0010269:	f7 f9                	idiv   ecx
c001026b:	8d 42 30             	lea    eax,[edx+0x30]
c001026e:	0f b6 c0             	movzx  eax,al
c0010271:	50                   	push   eax
c0010272:	e8 23 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010277:	5f                   	pop    edi
c0010278:	5d                   	pop    ebp
c0010279:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001027f:	53                   	push   ebx
c0010280:	a1 e4 c6 02 c0       	mov    eax,ds:0xc002c6e4
c0010285:	99                   	cdq    
c0010286:	f7 f9                	idiv   ecx
c0010288:	83 c2 30             	add    edx,0x30
c001028b:	0f b6 d2             	movzx  edx,dl
c001028e:	52                   	push   edx
c001028f:	e8 06 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010294:	5a                   	pop    edx
c0010295:	59                   	pop    ecx
c0010296:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001029c:	5b                   	pop    ebx
c001029d:	5e                   	pop    esi
c001029e:	5f                   	pop    edi
c001029f:	5d                   	pop    ebp
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <VgaText::updateTitle()>:
c00102a2:	53                   	push   ebx
c00102a3:	31 c0                	xor    eax,eax
c00102a5:	83 ec 58             	sub    esp,0x58
c00102a8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00102ac:	89 e1                	mov    ecx,esp
c00102ae:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00102b2:	40                   	inc    eax
c00102b3:	83 f8 50             	cmp    eax,0x50
c00102b6:	75 f6                	jne    c00102ae <VgaText::updateTitle()+0xc>
c00102b8:	31 c0                	xor    eax,eax
c00102ba:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00102c1:	84 db                	test   bl,bl
c00102c3:	74 06                	je     c00102cb <VgaText::updateTitle()+0x29>
c00102c5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102c8:	40                   	inc    eax
c00102c9:	eb ef                	jmp    c00102ba <VgaText::updateTitle()+0x18>
c00102cb:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00102d1:	85 c0                	test   eax,eax
c00102d3:	74 09                	je     c00102de <VgaText::updateTitle()+0x3c>
c00102d5:	53                   	push   ebx
c00102d6:	53                   	push   ebx
c00102d7:	51                   	push   ecx
c00102d8:	52                   	push   edx
c00102d9:	ff d0                	call   eax
c00102db:	83 c4 10             	add    esp,0x10
c00102de:	e8 59 fe ff ff       	call   c001013c <VgaText::updateDiskUsage()>
c00102e3:	83 c4 58             	add    esp,0x58
c00102e6:	5b                   	pop    ebx
c00102e7:	c3                   	ret    

c00102e8 <VgaText::setTitleTextColour(VgaColour)>:
c00102e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102f0:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00102f6:	eb aa                	jmp    c00102a2 <VgaText::updateTitle()>

c00102f8 <VgaText::setTitleColour(VgaColour)>:
c00102f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010300:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010306:	eb 9a                	jmp    c00102a2 <VgaText::updateTitle()>

c0010308 <VgaText::setTitle(char*)>:
c0010308:	53                   	push   ebx
c0010309:	83 ec 10             	sub    esp,0x10
c001030c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010314:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001031a:	50                   	push   eax
c001031b:	e8 65 04 ff ff       	call   c0000785 <strcpy>
c0010320:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010324:	83 c4 18             	add    esp,0x18
c0010327:	5b                   	pop    ebx
c0010328:	e9 75 ff ff ff       	jmp    c00102a2 <VgaText::updateTitle()>
c001032d:	90                   	nop

c001032e <VgaText::decrementCursor(bool)>:
c001032e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010332:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010336:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001033c:	85 c0                	test   eax,eax
c001033e:	74 07                	je     c0010347 <VgaText::decrementCursor(bool)+0x19>
c0010340:	48                   	dec    eax
c0010341:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010347:	84 c9                	test   cl,cl
c0010349:	74 09                	je     c0010354 <VgaText::decrementCursor(bool)+0x26>
c001034b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001034f:	e9 64 fa ff ff       	jmp    c000fdb8 <VgaText::updateCursor()>
c0010354:	c3                   	ret    
c0010355:	90                   	nop

c0010356 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010356:	53                   	push   ebx
c0010357:	83 ec 08             	sub    esp,0x8
c001035a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001035e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010362:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010366:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001036a:	3c 07                	cmp    al,0x7
c001036c:	75 2a                	jne    c0010398 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001036e:	a1 4c a6 02 c0       	mov    eax,ds:0xc002a64c
c0010373:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001037b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010383:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001038b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001038f:	83 c4 08             	add    esp,0x8
c0010392:	5b                   	pop    ebx
c0010393:	e9 a4 2c 00 00       	jmp    c001303c <Buzzer::beep(int, int, bool)>
c0010398:	3c 0d                	cmp    al,0xd
c001039a:	75 0c                	jne    c00103a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001039c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103a6:	eb 3b                	jmp    c00103e3 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00103a8:	3c 0a                	cmp    al,0xa
c00103aa:	75 40                	jne    c00103ec <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00103ac:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00103b2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103bc:	8d 50 01             	lea    edx,[eax+0x1]
c00103bf:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103c5:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103cb:	75 12                	jne    c00103df <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00103cd:	83 ec 0c             	sub    esp,0xc
c00103d0:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103d6:	53                   	push   ebx
c00103d7:	e8 2a fb ff ff       	call   c000ff06 <VgaText::scrollScreen()>
c00103dc:	83 c4 10             	add    esp,0x10
c00103df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103e3:	83 c4 08             	add    esp,0x8
c00103e6:	5b                   	pop    ebx
c00103e7:	e9 cc f9 ff ff       	jmp    c000fdb8 <VgaText::updateCursor()>
c00103ec:	3c 08                	cmp    al,0x8
c00103ee:	75 31                	jne    c0010421 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103f0:	50                   	push   eax
c00103f1:	50                   	push   eax
c00103f2:	6a 01                	push   0x1
c00103f4:	53                   	push   ebx
c00103f5:	e8 34 ff ff ff       	call   c001032e <VgaText::decrementCursor(bool)>
c00103fa:	5a                   	pop    edx
c00103fb:	59                   	pop    ecx
c00103fc:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010402:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010408:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001040e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010414:	6a 20                	push   0x20
c0010416:	53                   	push   ebx
c0010417:	e8 90 fb ff ff       	call   c000ffac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001041c:	83 c4 28             	add    esp,0x28
c001041f:	5b                   	pop    ebx
c0010420:	c3                   	ret    
c0010421:	83 ec 08             	sub    esp,0x8
c0010424:	0f be c0             	movsx  eax,al
c0010427:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001042d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010433:	51                   	push   ecx
c0010434:	52                   	push   edx
c0010435:	50                   	push   eax
c0010436:	53                   	push   ebx
c0010437:	e8 70 fb ff ff       	call   c000ffac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001043c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010440:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010448:	83 c4 28             	add    esp,0x28
c001044b:	5b                   	pop    ebx
c001044c:	e9 29 fc ff ff       	jmp    c001007a <VgaText::incrementCursor(bool)>
c0010451:	90                   	nop

c0010452 <VgaText::isShowingCursor()>:
c0010452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010456:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001045c:	c3                   	ret    
c001045d:	90                   	nop

c001045e <VgaText::isBlinkDisabled()>:
c001045e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010462:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010468:	83 f0 01             	xor    eax,0x1
c001046b:	c3                   	ret    

c001046c <VgaText::setCursorHeight(int)>:
c001046c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010470:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010474:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c001047a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010481:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010485:	e9 48 f9 ff ff       	jmp    c000fdd2 <VgaText::showCursor(bool)>

c001048a <VgaText::getCursorHeight()>:
c001048a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001048e:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010494:	c3                   	ret    

c0010495 <setActiveTerminal(VgaText*)>:
c0010495:	53                   	push   ebx
c0010496:	83 ec 08             	sub    esp,0x8
c0010499:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001049d:	85 db                	test   ebx,ebx
c001049f:	75 11                	jne    c00104b2 <setActiveTerminal(VgaText*)+0x1d>
c00104a1:	c7 44 24 10 0c 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026c0c
c00104a9:	83 c4 08             	add    esp,0x8
c00104ac:	5b                   	pop    ebx
c00104ad:	e9 21 92 00 00       	jmp    c00196d3 <Krnl::panic(char const*)>
c00104b2:	50                   	push   eax
c00104b3:	50                   	push   eax
c00104b4:	53                   	push   ebx
c00104b5:	68 1a 6c 02 c0       	push   0xc0026c1a
c00104ba:	e8 92 1d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00104bf:	a1 a4 a5 02 c0       	mov    eax,ds:0xc002a5a4
c00104c4:	83 c4 10             	add    esp,0x10
c00104c7:	85 c0                	test   eax,eax
c00104c9:	74 0c                	je     c00104d7 <setActiveTerminal(VgaText*)+0x42>
c00104cb:	83 ec 0c             	sub    esp,0xc
c00104ce:	50                   	push   eax
c00104cf:	e8 e4 f8 ff ff       	call   c000fdb8 <VgaText::updateCursor()>
c00104d4:	83 c4 10             	add    esp,0x10
c00104d7:	89 1d a4 a5 02 c0    	mov    DWORD PTR ds:0xc002a5a4,ebx
c00104dd:	51                   	push   ecx
c00104de:	51                   	push   ecx
c00104df:	53                   	push   ebx
c00104e0:	68 32 6c 02 c0       	push   0xc0026c32
c00104e5:	e8 67 1d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00104ea:	83 c4 0c             	add    esp,0xc
c00104ed:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104f3:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104f9:	53                   	push   ebx
c00104fa:	e8 25 fb ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c00104ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010502:	e8 57 ff ff ff       	call   c001045e <VgaText::isBlinkDisabled()>
c0010507:	5a                   	pop    edx
c0010508:	0f b6 c0             	movzx  eax,al
c001050b:	59                   	pop    ecx
c001050c:	50                   	push   eax
c001050d:	53                   	push   ebx
c001050e:	e8 cf f8 ff ff       	call   c000fde2 <VgaText::disableBlink(bool)>
c0010513:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010516:	e8 6f ff ff ff       	call   c001048a <VgaText::getCursorHeight()>
c001051b:	5a                   	pop    edx
c001051c:	59                   	pop    ecx
c001051d:	50                   	push   eax
c001051e:	53                   	push   ebx
c001051f:	e8 48 ff ff ff       	call   c001046c <VgaText::setCursorHeight(int)>
c0010524:	83 c4 10             	add    esp,0x10
c0010527:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001052e:	75 0a                	jne    c001053a <setActiveTerminal(VgaText*)+0xa5>
c0010530:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c001053a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001053e:	83 c4 08             	add    esp,0x8
c0010541:	5b                   	pop    ebx
c0010542:	e9 1d f8 ff ff       	jmp    c000fd64 <VgaText::load()>

c0010547 <doTerminalCycle()>:
c0010547:	83 ec 18             	sub    esp,0x18
c001054a:	a1 a0 a5 02 c0       	mov    eax,ds:0xc002a5a0
c001054f:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010555:	50                   	push   eax
c0010556:	a3 a0 a5 02 c0       	mov    ds:0xc002a5a0,eax
c001055b:	e8 35 ff ff ff       	call   c0010495 <setActiveTerminal(VgaText*)>
c0010560:	83 c4 1c             	add    esp,0x1c
c0010563:	c3                   	ret    

c0010564 <VgaText::doUpdate()>:
c0010564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010568:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001056e:	85 c0                	test   eax,eax
c0010570:	74 02                	je     c0010574 <VgaText::doUpdate()+0x10>
c0010572:	ff e0                	jmp    eax
c0010574:	c3                   	ret    
c0010575:	90                   	nop

c0010576 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010576:	55                   	push   ebp
c0010577:	57                   	push   edi
c0010578:	56                   	push   esi
c0010579:	53                   	push   ebx
c001057a:	83 ec 1c             	sub    esp,0x1c
c001057d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010581:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010586:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001058d:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010590:	50                   	push   eax
c0010591:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010596:	50                   	push   eax
c0010597:	e8 58 f9 ff ff       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c001059c:	59                   	pop    ecx
c001059d:	0f b6 c0             	movzx  eax,al
c00105a0:	5b                   	pop    ebx
c00105a1:	31 c9                	xor    ecx,ecx
c00105a3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00105af:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00105b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105b9:	0f b7 db             	movzx  ebx,bx
c00105bc:	01 db                	add    ebx,ebx
c00105be:	01 fb                	add    ebx,edi
c00105c0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00105c3:	84 c0                	test   al,al
c00105c5:	0f 84 38 01 00 00    	je     c0010703 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00105cb:	3c 0d                	cmp    al,0xd
c00105cd:	75 0f                	jne    c00105de <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00105cf:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105d9:	e9 1f 01 00 00       	jmp    c00106fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105de:	3c 0a                	cmp    al,0xa
c00105e0:	75 5b                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105e2:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105e8:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105f2:	8d 48 01             	lea    ecx,[eax+0x1]
c00105f5:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00105fb:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010601:	75 12                	jne    c0010615 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010603:	83 ec 0c             	sub    esp,0xc
c0010606:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c001060c:	55                   	push   ebp
c001060d:	e8 f4 f8 ff ff       	call   c000ff06 <VgaText::scrollScreen()>
c0010612:	83 c4 10             	add    esp,0x10
c0010615:	83 ec 0c             	sub    esp,0xc
c0010618:	55                   	push   ebp
c0010619:	e8 9a f7 ff ff       	call   c000fdb8 <VgaText::updateCursor()>
c001061e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010626:	83 c4 10             	add    esp,0x10
c0010629:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001062f:	31 c9                	xor    ecx,ecx
c0010631:	0f b7 db             	movzx  ebx,bx
c0010634:	01 db                	add    ebx,ebx
c0010636:	01 fb                	add    ebx,edi
c0010638:	e9 c0 00 00 00       	jmp    c00106fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001063d:	3c 08                	cmp    al,0x8
c001063f:	75 4e                	jne    c001068f <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010641:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010645:	53                   	push   ebx
c0010646:	53                   	push   ebx
c0010647:	6a 01                	push   0x1
c0010649:	55                   	push   ebp
c001064a:	e8 df fc ff ff       	call   c001032e <VgaText::decrementCursor(bool)>
c001064f:	58                   	pop    eax
c0010650:	5a                   	pop    edx
c0010651:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010657:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001065d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010663:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010669:	6a 20                	push   0x20
c001066b:	55                   	push   ebp
c001066c:	e8 3b f9 ff ff       	call   c000ffac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010671:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010679:	83 c4 20             	add    esp,0x20
c001067c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010682:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010686:	0f b7 db             	movzx  ebx,bx
c0010689:	01 db                	add    ebx,ebx
c001068b:	01 fb                	add    ebx,edi
c001068d:	eb 6e                	jmp    c00106fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001068f:	51                   	push   ecx
c0010690:	51                   	push   ecx
c0010691:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010695:	50                   	push   eax
c0010696:	e8 ff f8 ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c001069b:	83 c4 10             	add    esp,0x10
c001069e:	66 89 03             	mov    WORD PTR [ebx],ax
c00106a1:	39 2d a4 a5 02 c0    	cmp    DWORD PTR ds:0xc002a5a4,ebp
c00106a7:	75 2a                	jne    c00106d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106a9:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c00106af:	85 c0                	test   eax,eax
c00106b1:	74 20                	je     c00106d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106b3:	52                   	push   edx
c00106b4:	52                   	push   edx
c00106b5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00106bb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00106c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106c9:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00106cc:	51                   	push   ecx
c00106cd:	55                   	push   ebp
c00106ce:	ff d0                	call   eax
c00106d0:	83 c4 20             	add    esp,0x20
c00106d3:	83 c3 02             	add    ebx,0x2
c00106d6:	50                   	push   eax
c00106d7:	50                   	push   eax
c00106d8:	6a 00                	push   0x0
c00106da:	55                   	push   ebp
c00106db:	e8 9a f9 ff ff       	call   c001007a <VgaText::incrementCursor(bool)>
c00106e0:	83 c4 10             	add    esp,0x10
c00106e3:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106ea:	75 0f                	jne    c00106fb <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106ec:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106f4:	0f b7 db             	movzx  ebx,bx
c00106f7:	01 db                	add    ebx,ebx
c00106f9:	01 fb                	add    ebx,edi
c00106fb:	b1 01                	mov    cl,0x1
c00106fd:	46                   	inc    esi
c00106fe:	e9 bd fe ff ff       	jmp    c00105c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010703:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010707:	83 ec 0c             	sub    esp,0xc
c001070a:	55                   	push   ebp
c001070b:	e8 a8 f6 ff ff       	call   c000fdb8 <VgaText::updateCursor()>
c0010710:	83 c4 10             	add    esp,0x10
c0010713:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010717:	84 c9                	test   cl,cl
c0010719:	74 0c                	je     c0010727 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c001071b:	83 ec 0c             	sub    esp,0xc
c001071e:	55                   	push   ebp
c001071f:	e8 40 fe ff ff       	call   c0010564 <VgaText::doUpdate()>
c0010724:	83 c4 10             	add    esp,0x10
c0010727:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001072e:	83 c4 1c             	add    esp,0x1c
c0010731:	5b                   	pop    ebx
c0010732:	5e                   	pop    esi
c0010733:	5f                   	pop    edi
c0010734:	5d                   	pop    ebp
c0010735:	c3                   	ret    

c0010736 <VgaText::clearScreen()>:
c0010736:	57                   	push   edi
c0010737:	56                   	push   esi
c0010738:	31 f6                	xor    esi,esi
c001073a:	53                   	push   ebx
c001073b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001073f:	52                   	push   edx
c0010740:	6a 00                	push   0x0
c0010742:	6a 00                	push   0x0
c0010744:	53                   	push   ebx
c0010745:	e8 da f8 ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c001074a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010751:	83 c4 10             	add    esp,0x10
c0010754:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001075a:	7e 26                	jle    c0010782 <VgaText::clearScreen()+0x4c>
c001075c:	31 ff                	xor    edi,edi
c001075e:	50                   	push   eax
c001075f:	50                   	push   eax
c0010760:	56                   	push   esi
c0010761:	57                   	push   edi
c0010762:	47                   	inc    edi
c0010763:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010769:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001076f:	6a 20                	push   0x20
c0010771:	53                   	push   ebx
c0010772:	e8 35 f8 ff ff       	call   c000ffac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010777:	83 c4 20             	add    esp,0x20
c001077a:	83 ff 50             	cmp    edi,0x50
c001077d:	75 df                	jne    c001075e <VgaText::clearScreen()+0x28>
c001077f:	46                   	inc    esi
c0010780:	eb d2                	jmp    c0010754 <VgaText::clearScreen()+0x1e>
c0010782:	83 ec 0c             	sub    esp,0xc
c0010785:	53                   	push   ebx
c0010786:	e8 d9 fd ff ff       	call   c0010564 <VgaText::doUpdate()>
c001078b:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010792:	83 c4 10             	add    esp,0x10
c0010795:	5b                   	pop    ebx
c0010796:	5e                   	pop    esi
c0010797:	5f                   	pop    edi
c0010798:	c3                   	ret    
c0010799:	90                   	nop

c001079a <VgaText::putchar(char)>:
c001079a:	56                   	push   esi
c001079b:	53                   	push   ebx
c001079c:	83 ec 14             	sub    esp,0x14
c001079f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00107a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107a7:	3c 5b                	cmp    al,0x5b
c00107a9:	75 21                	jne    c00107cc <VgaText::putchar(char)+0x32>
c00107ab:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00107b2:	74 28                	je     c00107dc <VgaText::putchar(char)+0x42>
c00107b4:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00107bd:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00107c7:	e9 e2 00 00 00       	jmp    c00108ae <VgaText::putchar(char)+0x114>
c00107cc:	3c 1b                	cmp    al,0x1b
c00107ce:	75 0c                	jne    c00107dc <VgaText::putchar(char)+0x42>
c00107d0:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00107d7:	e9 d2 00 00 00       	jmp    c00108ae <VgaText::putchar(char)+0x114>
c00107dc:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107e2:	84 c9                	test   cl,cl
c00107e4:	0f 84 ab 00 00 00    	je     c0010895 <VgaText::putchar(char)+0xfb>
c00107ea:	8d 50 c0             	lea    edx,[eax-0x40]
c00107ed:	80 fa 3e             	cmp    dl,0x3e
c00107f0:	0f 87 82 00 00 00    	ja     c0010878 <VgaText::putchar(char)+0xde>
c00107f6:	3c 6d                	cmp    al,0x6d
c00107f8:	75 4d                	jne    c0010847 <VgaText::putchar(char)+0xad>
c00107fa:	31 f6                	xor    esi,esi
c00107fc:	31 d2                	xor    edx,edx
c00107fe:	31 c0                	xor    eax,eax
c0010800:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010806:	7e 30                	jle    c0010838 <VgaText::putchar(char)+0x9e>
c0010808:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010810:	80 fa 3b             	cmp    dl,0x3b
c0010813:	75 17                	jne    c001082c <VgaText::putchar(char)+0x92>
c0010815:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010819:	50                   	push   eax
c001081a:	53                   	push   ebx
c001081b:	e8 fc f5 ff ff       	call   c000fe1c <VgaText::doANSI_SGR(int)>
c0010820:	59                   	pop    ecx
c0010821:	31 d2                	xor    edx,edx
c0010823:	58                   	pop    eax
c0010824:	31 c0                	xor    eax,eax
c0010826:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001082a:	eb 09                	jmp    c0010835 <VgaText::putchar(char)+0x9b>
c001082c:	6b c0 0a             	imul   eax,eax,0xa
c001082f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010833:	88 ca                	mov    dl,cl
c0010835:	46                   	inc    esi
c0010836:	eb c8                	jmp    c0010800 <VgaText::putchar(char)+0x66>
c0010838:	84 d2                	test   dl,dl
c001083a:	74 31                	je     c001086d <VgaText::putchar(char)+0xd3>
c001083c:	50                   	push   eax
c001083d:	53                   	push   ebx
c001083e:	e8 d9 f5 ff ff       	call   c000fe1c <VgaText::doANSI_SGR(int)>
c0010843:	58                   	pop    eax
c0010844:	5a                   	pop    edx
c0010845:	eb 26                	jmp    c001086d <VgaText::putchar(char)+0xd3>
c0010847:	3c 4a                	cmp    al,0x4a
c0010849:	75 22                	jne    c001086d <VgaText::putchar(char)+0xd3>
c001084b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010852:	75 19                	jne    c001086d <VgaText::putchar(char)+0xd3>
c0010854:	83 ec 0c             	sub    esp,0xc
c0010857:	53                   	push   ebx
c0010858:	e8 d9 fe ff ff       	call   c0010736 <VgaText::clearScreen()>
c001085d:	83 c4 0c             	add    esp,0xc
c0010860:	6a 00                	push   0x0
c0010862:	6a 00                	push   0x0
c0010864:	53                   	push   ebx
c0010865:	e8 ba f7 ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c001086a:	83 c4 10             	add    esp,0x10
c001086d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010876:	eb 36                	jmp    c00108ae <VgaText::putchar(char)+0x114>
c0010878:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001087e:	83 fa 0e             	cmp    edx,0xe
c0010881:	7f 2b                	jg     c00108ae <VgaText::putchar(char)+0x114>
c0010883:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010886:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001088c:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010893:	eb 19                	jmp    c00108ae <VgaText::putchar(char)+0x114>
c0010895:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001089b:	0f be c0             	movsx  eax,al
c001089e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108a4:	50                   	push   eax
c00108a5:	53                   	push   ebx
c00108a6:	e8 ab fa ff ff       	call   c0010356 <VgaText::putchar(char, VgaColour, VgaColour)>
c00108ab:	83 c4 10             	add    esp,0x10
c00108ae:	83 c4 14             	add    esp,0x14
c00108b1:	5b                   	pop    ebx
c00108b2:	5e                   	pop    esi
c00108b3:	c3                   	ret    

c00108b4 <VgaText::puts(char const*)>:
c00108b4:	53                   	push   ebx
c00108b5:	83 ec 08             	sub    esp,0x8
c00108b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108bc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00108bf:	84 c0                	test   al,al
c00108c1:	74 12                	je     c00108d5 <VgaText::puts(char const*)+0x21>
c00108c3:	43                   	inc    ebx
c00108c4:	51                   	push   ecx
c00108c5:	51                   	push   ecx
c00108c6:	50                   	push   eax
c00108c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108cb:	e8 ca fe ff ff       	call   c001079a <VgaText::putchar(char)>
c00108d0:	83 c4 10             	add    esp,0x10
c00108d3:	eb e7                	jmp    c00108bc <VgaText::puts(char const*)+0x8>
c00108d5:	83 c4 08             	add    esp,0x8
c00108d8:	5b                   	pop    ebx
c00108d9:	c3                   	ret    

c00108da <VgaText::putx(unsigned int)>:
c00108da:	57                   	push   edi
c00108db:	b9 11 00 00 00       	mov    ecx,0x11
c00108e0:	56                   	push   esi
c00108e1:	be 4e 6c 02 c0       	mov    esi,0xc0026c4e
c00108e6:	53                   	push   ebx
c00108e7:	83 ec 20             	sub    esp,0x20
c00108ea:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108ee:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00108f2:	fc                   	cld    
c00108f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108f5:	be 08 00 00 00       	mov    esi,0x8
c00108fa:	50                   	push   eax
c00108fb:	50                   	push   eax
c00108fc:	89 d8                	mov    eax,ebx
c00108fe:	c1 e3 04             	shl    ebx,0x4
c0010901:	c1 e8 1c             	shr    eax,0x1c
c0010904:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010909:	50                   	push   eax
c001090a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001090e:	e8 87 fe ff ff       	call   c001079a <VgaText::putchar(char)>
c0010913:	83 c4 10             	add    esp,0x10
c0010916:	4e                   	dec    esi
c0010917:	75 e1                	jne    c00108fa <VgaText::putx(unsigned int)+0x20>
c0010919:	83 c4 20             	add    esp,0x20
c001091c:	5b                   	pop    ebx
c001091d:	5e                   	pop    esi
c001091e:	5f                   	pop    edi
c001091f:	c3                   	ret    

c0010920 <VgaText::VgaText(char const*)>:
c0010920:	57                   	push   edi
c0010921:	56                   	push   esi
c0010922:	53                   	push   ebx
c0010923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010927:	83 ec 08             	sub    esp,0x8
c001092a:	6a 00                	push   0x0
c001092c:	50                   	push   eax
c001092d:	e8 4a 05 00 00       	call   c0010e7c <UnixFile::UnixFile(int)>
c0010932:	83 c4 10             	add    esp,0x10
c0010935:	ba b4 6c 02 c0       	mov    edx,0xc0026cb4
c001093a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093e:	89 10                	mov    DWORD PTR [eax],edx
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001094e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010952:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001095c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010960:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010976:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010984:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001098e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010992:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00109a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a8:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00109ae:	bb 80 a5 02 c0       	mov    ebx,0xc002a580
c00109b3:	b8 08 00 00 00       	mov    eax,0x8
c00109b8:	fc                   	cld    
c00109b9:	89 d7                	mov    edi,edx
c00109bb:	89 de                	mov    esi,ebx
c00109bd:	89 c1                	mov    ecx,eax
c00109bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00109c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c5:	05 1e 10 00 00       	add    eax,0x101e
c00109ca:	83 ec 08             	sub    esp,0x8
c00109cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d1:	50                   	push   eax
c00109d2:	e8 ae fd fe ff       	call   c0000785 <strcpy>
c00109d7:	83 c4 10             	add    esp,0x10
c00109da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109de:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ec:	83 c0 0c             	add    eax,0xc
c00109ef:	83 ec 04             	sub    esp,0x4
c00109f2:	68 00 0f 00 00       	push   0xf00
c00109f7:	6a 00                	push   0x0
c00109f9:	50                   	push   eax
c00109fa:	e8 e7 fc fe ff       	call   c00006e6 <memset>
c00109ff:	83 c4 10             	add    esp,0x10
c0010a02:	83 ec 04             	sub    esp,0x4
c0010a05:	6a 00                	push   0x0
c0010a07:	6a 07                	push   0x7
c0010a09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a0d:	e8 c2 f4 ff ff       	call   c000fed4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010a12:	83 c4 10             	add    esp,0x10
c0010a15:	83 ec 08             	sub    esp,0x8
c0010a18:	6a 02                	push   0x2
c0010a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1e:	e8 49 fa ff ff       	call   c001046c <VgaText::setCursorHeight(int)>
c0010a23:	83 c4 10             	add    esp,0x10
c0010a26:	83 ec 04             	sub    esp,0x4
c0010a29:	6a 00                	push   0x0
c0010a2b:	6a 00                	push   0x0
c0010a2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a31:	e8 ee f5 ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c0010a36:	83 c4 10             	add    esp,0x10
c0010a39:	83 ec 08             	sub    esp,0x8
c0010a3c:	6a 01                	push   0x1
c0010a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a42:	e8 8b f3 ff ff       	call   c000fdd2 <VgaText::showCursor(bool)>
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	83 ec 08             	sub    esp,0x8
c0010a4d:	6a 01                	push   0x1
c0010a4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a53:	e8 8a f3 ff ff       	call   c000fde2 <VgaText::disableBlink(bool)>
c0010a58:	83 c4 10             	add    esp,0x10
c0010a5b:	83 ec 0c             	sub    esp,0xc
c0010a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a62:	e8 cf fc ff ff       	call   c0010736 <VgaText::clearScreen()>
c0010a67:	83 c4 10             	add    esp,0x10
c0010a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a79:	05 9e 10 00 00       	add    eax,0x109e
c0010a7e:	83 ec 04             	sub    esp,0x4
c0010a81:	68 96 00 00 00       	push   0x96
c0010a86:	6a 00                	push   0x0
c0010a88:	50                   	push   eax
c0010a89:	e8 58 fc fe ff       	call   c00006e6 <memset>
c0010a8e:	83 c4 10             	add    esp,0x10
c0010a91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a95:	05 34 11 00 00       	add    eax,0x1134
c0010a9a:	83 ec 04             	sub    esp,0x4
c0010a9d:	68 2c 01 00 00       	push   0x12c
c0010aa2:	6a 00                	push   0x0
c0010aa4:	50                   	push   eax
c0010aa5:	e8 3c fc fe ff       	call   c00006e6 <memset>
c0010aaa:	83 c4 10             	add    esp,0x10
c0010aad:	90                   	nop
c0010aae:	5b                   	pop    ebx
c0010aaf:	5e                   	pop    esi
c0010ab0:	5f                   	pop    edi
c0010ab1:	c3                   	ret    

c0010ab2 <VgaText::receiveKey(unsigned char)>:
c0010ab2:	55                   	push   ebp
c0010ab3:	57                   	push   edi
c0010ab4:	56                   	push   esi
c0010ab5:	53                   	push   ebx
c0010ab6:	83 ec 1c             	sub    esp,0x1c
c0010ab9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010abd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ac1:	84 db                	test   bl,bl
c0010ac3:	0f 84 c9 00 00 00    	je     c0010b92 <VgaText::receiveKey(unsigned char)+0xe0>
c0010ac9:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010acf:	80 fb 08             	cmp    bl,0x8
c0010ad2:	75 2c                	jne    c0010b00 <VgaText::receiveKey(unsigned char)+0x4e>
c0010ad4:	83 ec 0c             	sub    esp,0xc
c0010ad7:	57                   	push   edi
c0010ad8:	e8 26 fc fe ff       	call   c0000703 <strlen>
c0010add:	83 c4 10             	add    esp,0x10
c0010ae0:	85 c0                	test   eax,eax
c0010ae2:	74 41                	je     c0010b25 <VgaText::receiveKey(unsigned char)+0x73>
c0010ae4:	50                   	push   eax
c0010ae5:	50                   	push   eax
c0010ae6:	6a 08                	push   0x8
c0010ae8:	56                   	push   esi
c0010ae9:	e8 ac fc ff ff       	call   c001079a <VgaText::putchar(char)>
c0010aee:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010af1:	e8 0d fc fe ff       	call   c0000703 <strlen>
c0010af6:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010afe:	eb 22                	jmp    c0010b22 <VgaText::receiveKey(unsigned char)+0x70>
c0010b00:	0f be c3             	movsx  eax,bl
c0010b03:	52                   	push   edx
c0010b04:	52                   	push   edx
c0010b05:	50                   	push   eax
c0010b06:	56                   	push   esi
c0010b07:	e8 8e fc ff ff       	call   c001079a <VgaText::putchar(char)>
c0010b0c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010b10:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010b15:	59                   	pop    ecx
c0010b16:	5d                   	pop    ebp
c0010b17:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010b1b:	50                   	push   eax
c0010b1c:	57                   	push   edi
c0010b1d:	e8 1a fd fe ff       	call   c000083c <strcat>
c0010b22:	83 c4 10             	add    esp,0x10
c0010b25:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010b2c:	75 05                	jne    c0010b33 <VgaText::receiveKey(unsigned char)+0x81>
c0010b2e:	80 fb 0a             	cmp    bl,0xa
c0010b31:	75 53                	jne    c0010b86 <VgaText::receiveKey(unsigned char)+0xd4>
c0010b33:	83 ec 0c             	sub    esp,0xc
c0010b36:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b3c:	53                   	push   ebx
c0010b3d:	e8 c1 fb fe ff       	call   c0000703 <strlen>
c0010b42:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b45:	89 c5                	mov    ebp,eax
c0010b47:	e8 b7 fb fe ff       	call   c0000703 <strlen>
c0010b4c:	83 c4 10             	add    esp,0x10
c0010b4f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b53:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b58:	76 10                	jbe    c0010b6a <VgaText::receiveKey(unsigned char)+0xb8>
c0010b5a:	83 ec 0c             	sub    esp,0xc
c0010b5d:	68 5f 6c 02 c0       	push   0xc0026c5f
c0010b62:	e8 6c 8b 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0010b67:	83 c4 10             	add    esp,0x10
c0010b6a:	50                   	push   eax
c0010b6b:	50                   	push   eax
c0010b6c:	57                   	push   edi
c0010b6d:	53                   	push   ebx
c0010b6e:	e8 c9 fc fe ff       	call   c000083c <strcat>
c0010b73:	83 c4 0c             	add    esp,0xc
c0010b76:	68 96 00 00 00       	push   0x96
c0010b7b:	6a 00                	push   0x0
c0010b7d:	57                   	push   edi
c0010b7e:	e8 63 fb fe ff       	call   c00006e6 <memset>
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	83 ec 0c             	sub    esp,0xc
c0010b89:	56                   	push   esi
c0010b8a:	e8 d5 f9 ff ff       	call   c0010564 <VgaText::doUpdate()>
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	83 c4 1c             	add    esp,0x1c
c0010b95:	5b                   	pop    ebx
c0010b96:	5e                   	pop    esi
c0010b97:	5f                   	pop    edi
c0010b98:	5d                   	pop    ebp
c0010b99:	c3                   	ret    

c0010b9a <VgaText::write(unsigned long long, void*, int*)>:
c0010b9a:	55                   	push   ebp
c0010b9b:	57                   	push   edi
c0010b9c:	56                   	push   esi
c0010b9d:	53                   	push   ebx
c0010b9e:	83 ec 0c             	sub    esp,0xc
c0010ba1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ba5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ba9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010bad:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010bb4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010bb7:	39 eb                	cmp    ebx,ebp
c0010bb9:	74 13                	je     c0010bce <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010bbb:	43                   	inc    ebx
c0010bbc:	50                   	push   eax
c0010bbd:	50                   	push   eax
c0010bbe:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010bc2:	50                   	push   eax
c0010bc3:	56                   	push   esi
c0010bc4:	e8 d1 fb ff ff       	call   c001079a <VgaText::putchar(char)>
c0010bc9:	83 c4 10             	add    esp,0x10
c0010bcc:	eb e9                	jmp    c0010bb7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010bce:	83 ec 0c             	sub    esp,0xc
c0010bd1:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010bd8:	56                   	push   esi
c0010bd9:	e8 86 f9 ff ff       	call   c0010564 <VgaText::doUpdate()>
c0010bde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010be2:	89 38                	mov    DWORD PTR [eax],edi
c0010be4:	83 c4 1c             	add    esp,0x1c
c0010be7:	31 c0                	xor    eax,eax
c0010be9:	5b                   	pop    ebx
c0010bea:	5e                   	pop    esi
c0010beb:	5f                   	pop    edi
c0010bec:	5d                   	pop    ebp
c0010bed:	c3                   	ret    

c0010bee <newTerminal(char*)>:
c0010bee:	83 ec 28             	sub    esp,0x28
c0010bf1:	68 60 12 00 00       	push   0x1260
c0010bf6:	e8 67 15 00 00       	call   c0012162 <operator new(unsigned long)>
c0010bfb:	5a                   	pop    edx
c0010bfc:	59                   	pop    ecx
c0010bfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010c01:	50                   	push   eax
c0010c02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c06:	e8 15 fd ff ff       	call   c0010920 <VgaText::VgaText(char const*)>
c0010c0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010c0f:	83 c4 2c             	add    esp,0x2c
c0010c12:	c3                   	ret    
c0010c13:	90                   	nop

c0010c14 <TSS::TSS()>:
c0010c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c1f:	90                   	nop
c0010c20:	c3                   	ret    
c0010c21:	90                   	nop

c0010c22 <TSS::setESP(unsigned long)>:
c0010c22:	55                   	push   ebp
c0010c23:	89 e5                	mov    ebp,esp
c0010c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c2e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c31:	90                   	nop
c0010c32:	5d                   	pop    ebp
c0010c33:	c3                   	ret    

c0010c34 <TSS::flush()>:
c0010c34:	55                   	push   ebp
c0010c35:	89 e5                	mov    ebp,esp
c0010c37:	83 ec 10             	sub    esp,0x10
c0010c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c3f:	83 c8 03             	or     eax,0x3
c0010c42:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c46:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c4a:	66 89 d0             	mov    ax,dx
c0010c4d:	0f 00 d8             	ltr    ax
c0010c50:	90                   	nop
c0010c51:	c9                   	leave  
c0010c52:	c3                   	ret    
c0010c53:	90                   	nop

c0010c54 <TSS::setup(unsigned long, unsigned long)>:
c0010c54:	55                   	push   ebp
c0010c55:	89 e5                	mov    ebp,esp
c0010c57:	53                   	push   ebx
c0010c58:	83 ec 14             	sub    esp,0x14
c0010c5b:	83 ec 0c             	sub    esp,0xc
c0010c5e:	6a 68                	push   0x68
c0010c60:	e8 fb e4 ff ff       	call   c000f160 <malloc>
c0010c65:	83 c4 10             	add    esp,0x10
c0010c68:	89 c2                	mov    edx,eax
c0010c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c76:	83 ec 04             	sub    esp,0x4
c0010c79:	6a 68                	push   0x68
c0010c7b:	6a 00                	push   0x0
c0010c7d:	50                   	push   eax
c0010c7e:	e8 63 fa fe ff       	call   c00006e6 <memset>
c0010c83:	83 c4 10             	add    esp,0x10
c0010c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c8c:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c98:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ca7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb0:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cbc:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cc8:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cd4:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010cda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ce3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf8:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d02:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010d05:	e8 eb 42 01 00       	call   c0024ff5 <CPU::readCR3()>
c0010d0a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d13:	83 ec 08             	sub    esp,0x8
c0010d16:	50                   	push   eax
c0010d17:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d1a:	50                   	push   eax
c0010d1b:	e8 16 dc ff ff       	call   c000e936 <GDTEntry::setBase(unsigned int)>
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	83 ec 08             	sub    esp,0x8
c0010d26:	6a 68                	push   0x68
c0010d28:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d2b:	50                   	push   eax
c0010d2c:	e8 21 dc ff ff       	call   c000e952 <GDTEntry::setLimit(unsigned int)>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010d38:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d3b:	83 e0 0f             	and    eax,0xf
c0010d3e:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d41:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d44:	83 c8 40             	or     eax,0x40
c0010d47:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d4a:	e8 eb 6a 00 00       	call   c001783a <thisCPU()>
c0010d4f:	05 78 01 00 00       	add    eax,0x178
c0010d54:	83 ec 04             	sub    esp,0x4
c0010d57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010d5a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d5d:	50                   	push   eax
c0010d5e:	e8 23 dc ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c0010d63:	83 c4 10             	add    esp,0x10
c0010d66:	89 c2                	mov    edx,eax
c0010d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d6b:	89 10                	mov    DWORD PTR [eax],edx
c0010d6d:	e8 c8 6a 00 00       	call   c001783a <thisCPU()>
c0010d72:	05 78 01 00 00       	add    eax,0x178
c0010d77:	83 ec 0c             	sub    esp,0xc
c0010d7a:	50                   	push   eax
c0010d7b:	e8 4a dc ff ff       	call   c000e9ca <GDT::flush()>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d86:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d88:	83 ec 08             	sub    esp,0x8
c0010d8b:	50                   	push   eax
c0010d8c:	68 c8 6c 02 c0       	push   0xc0026cc8
c0010d91:	e8 bb 14 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0010d96:	83 c4 10             	add    esp,0x10
c0010d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d9e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010da1:	c9                   	leave  
c0010da2:	c3                   	ret    
c0010da3:	90                   	nop

c0010da4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010dac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010daf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010db4:	75 08                	jne    c0010dbe <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010db6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010dbc:	eb 38                	jmp    c0010df6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010dbe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010dc3:	75 17                	jne    c0010ddc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010dc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010dcd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010dd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dd5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dd9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010ddc:	89 c1                	mov    ecx,eax
c0010dde:	83 e1 fd             	and    ecx,0xfffffffd
c0010de1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010de7:	74 cd                	je     c0010db6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010de9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dee:	83 e0 ef             	and    eax,0xffffffef
c0010df1:	83 f8 08             	cmp    eax,0x8
c0010df4:	76 c0                	jbe    c0010db6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010df6:	31 c0                	xor    eax,eax
c0010df8:	c3                   	ret    
c0010df9:	90                   	nop

c0010dfa <ReservedFilename::isAtty()>:
c0010dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dfe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e01:	31 c0                	xor    eax,eax
c0010e03:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010e09:	74 09                	je     c0010e14 <ReservedFilename::isAtty()+0x1a>
c0010e0b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010e11:	0f 94 c0             	sete   al
c0010e14:	c3                   	ret    
c0010e15:	90                   	nop

c0010e16 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e25:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e2a:	75 08                	jne    c0010e34 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e2c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e32:	eb 3d                	jmp    c0010e71 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e34:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e39:	75 17                	jne    c0010e52 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e43:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e49:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e4f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e52:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e57:	75 04                	jne    c0010e5d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e59:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e5b:	eb 14                	jmp    c0010e71 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e5d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e62:	74 c8                	je     c0010e2c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e64:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e69:	83 e0 ef             	and    eax,0xffffffef
c0010e6c:	83 f8 08             	cmp    eax,0x8
c0010e6f:	76 bb                	jbe    c0010e2c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e71:	31 c0                	xor    eax,eax
c0010e73:	c3                   	ret    

c0010e74 <UnixFile::getFileDescriptor()>:
c0010e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7b:	c3                   	ret    

c0010e7c <UnixFile::UnixFile(int)>:
c0010e7c:	53                   	push   ebx
c0010e7d:	83 ec 18             	sub    esp,0x18
c0010e80:	ba b4 6d 02 c0       	mov    edx,0xc0026db4
c0010e85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e89:	89 10                	mov    DWORD PTR [eax],edx
c0010e8b:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010e93:	0f 8f 4d 01 00 00    	jg     c0010fe6 <UnixFile::UnixFile(int)+0x16a>
c0010e99:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c0010e9e:	8d 50 01             	lea    edx,[eax+0x1]
c0010ea1:	89 15 20 94 02 c0    	mov    DWORD PTR ds:0xc0029420,edx
c0010ea7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010eab:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010eae:	83 ec 08             	sub    esp,0x8
c0010eb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010eb5:	68 38 a6 02 c0       	push   0xc002a638
c0010eba:	e8 ab 41 01 00       	call   c002506a <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	a0 34 a6 02 c0       	mov    al,ds:0xc002a634
c0010ec7:	83 f0 01             	xor    eax,0x1
c0010eca:	84 c0                	test   al,al
c0010ecc:	0f 84 15 01 00 00    	je     c0010fe7 <UnixFile::UnixFile(int)+0x16b>
c0010ed2:	c6 05 34 a6 02 c0 01 	mov    BYTE PTR ds:0xc002a634,0x1
c0010ed9:	83 ec 0c             	sub    esp,0xc
c0010edc:	6a 0c                	push   0xc
c0010ede:	e8 7f 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	89 c3                	mov    ebx,eax
c0010ee8:	83 ec 08             	sub    esp,0x8
c0010eeb:	68 03 ff ff 0f       	push   0xfffff03
c0010ef0:	53                   	push   ebx
c0010ef1:	e8 f6 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010ef6:	83 c4 10             	add    esp,0x10
c0010ef9:	89 1d 2c a6 02 c0    	mov    DWORD PTR ds:0xc002a62c,ebx
c0010eff:	83 ec 0c             	sub    esp,0xc
c0010f02:	6a 0c                	push   0xc
c0010f04:	e8 59 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	89 c3                	mov    ebx,eax
c0010f0e:	83 ec 08             	sub    esp,0x8
c0010f11:	68 01 ff ff 0f       	push   0xfffff01
c0010f16:	53                   	push   ebx
c0010f17:	e8 d0 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 1d 30 a6 02 c0    	mov    DWORD PTR ds:0xc002a630,ebx
c0010f25:	83 ec 0c             	sub    esp,0xc
c0010f28:	6a 0c                	push   0xc
c0010f2a:	e8 33 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	89 c3                	mov    ebx,eax
c0010f34:	83 ec 08             	sub    esp,0x8
c0010f37:	68 00 ff ff 0f       	push   0xfffff00
c0010f3c:	53                   	push   ebx
c0010f3d:	e8 aa 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010f42:	83 c4 10             	add    esp,0x10
c0010f45:	89 1d 24 a6 02 c0    	mov    DWORD PTR ds:0xc002a624,ebx
c0010f4b:	83 ec 0c             	sub    esp,0xc
c0010f4e:	6a 0c                	push   0xc
c0010f50:	e8 0d 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f55:	83 c4 10             	add    esp,0x10
c0010f58:	89 c3                	mov    ebx,eax
c0010f5a:	83 ec 08             	sub    esp,0x8
c0010f5d:	68 02 ff ff 0f       	push   0xfffff02
c0010f62:	53                   	push   ebx
c0010f63:	e8 84 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	89 1d 28 a6 02 c0    	mov    DWORD PTR ds:0xc002a628,ebx
c0010f71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f79:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010f7e:	7f 67                	jg     c0010fe7 <UnixFile::UnixFile(int)+0x16b>
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	6a 0c                	push   0xc
c0010f85:	e8 d8 11 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f8a:	83 c4 10             	add    esp,0x10
c0010f8d:	89 c3                	mov    ebx,eax
c0010f8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f93:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f98:	83 ec 08             	sub    esp,0x8
c0010f9b:	50                   	push   eax
c0010f9c:	53                   	push   ebx
c0010f9d:	e8 4a 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa9:	89 1c 85 00 a6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a00],ebx
c0010fb0:	83 ec 0c             	sub    esp,0xc
c0010fb3:	6a 0c                	push   0xc
c0010fb5:	e8 a8 11 00 00       	call   c0012162 <operator new(unsigned long)>
c0010fba:	83 c4 10             	add    esp,0x10
c0010fbd:	89 c3                	mov    ebx,eax
c0010fbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fc3:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fc8:	83 ec 08             	sub    esp,0x8
c0010fcb:	50                   	push   eax
c0010fcc:	53                   	push   ebx
c0010fcd:	e8 1a 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fd9:	89 1c 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],ebx
c0010fe0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fe4:	eb 93                	jmp    c0010f79 <UnixFile::UnixFile(int)+0xfd>
c0010fe6:	90                   	nop
c0010fe7:	83 c4 18             	add    esp,0x18
c0010fea:	5b                   	pop    ebx
c0010feb:	c3                   	ret    

c0010fec <ReservedFilename::ReservedFilename(int)>:
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff3:	83 ec 08             	sub    esp,0x8
c0010ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffa:	50                   	push   eax
c0010ffb:	e8 7c fe ff ff       	call   c0010e7c <UnixFile::UnixFile(int)>
c0011000:	83 c4 10             	add    esp,0x10
c0011003:	ba d0 6d 02 c0       	mov    edx,0xc0026dd0
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	89 10                	mov    DWORD PTR [eax],edx
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011016:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011019:	90                   	nop
c001101a:	83 c4 0c             	add    esp,0xc
c001101d:	c3                   	ret    

c001101e <UnixFile::~UnixFile()>:
c001101e:	83 ec 1c             	sub    esp,0x1c
c0011021:	ba b4 6d 02 c0       	mov    edx,0xc0026db4
c0011026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001102a:	89 10                	mov    DWORD PTR [eax],edx
c001102c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011033:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011038:	7f 73                	jg     c00110ad <UnixFile::~UnixFile()+0x8f>
c001103a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011042:	83 ec 0c             	sub    esp,0xc
c0011045:	68 38 a6 02 c0       	push   0xc002a638
c001104a:	e8 ef 40 01 00       	call   c002513e <LinkedList<UnixFile>::getFirstElement()>
c001104f:	83 c4 10             	add    esp,0x10
c0011052:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	68 38 a6 02 c0       	push   0xc002a638
c001105e:	e8 e3 40 01 00       	call   c0025146 <LinkedList<UnixFile>::removeFirst()>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001106a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001106e:	74 40                	je     c00110b0 <UnixFile::~UnixFile()+0x92>
c0011070:	83 ec 08             	sub    esp,0x8
c0011073:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011077:	68 38 a6 02 c0       	push   0xc002a638
c001107c:	e8 e9 3f 01 00       	call   c002506a <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011088:	8d 50 01             	lea    edx,[eax+0x1]
c001108b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001108f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011094:	0f 94 c0             	sete   al
c0011097:	84 c0                	test   al,al
c0011099:	74 a7                	je     c0011042 <UnixFile::~UnixFile()+0x24>
c001109b:	83 ec 0c             	sub    esp,0xc
c001109e:	68 8c 6d 02 c0       	push   0xc0026d8c
c00110a3:	e8 2b 86 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c00110a8:	83 c4 10             	add    esp,0x10
c00110ab:	eb 95                	jmp    c0011042 <UnixFile::~UnixFile()+0x24>
c00110ad:	90                   	nop
c00110ae:	eb 01                	jmp    c00110b1 <UnixFile::~UnixFile()+0x93>
c00110b0:	90                   	nop
c00110b1:	90                   	nop
c00110b2:	83 c4 1c             	add    esp,0x1c
c00110b5:	c3                   	ret    

c00110b6 <UnixFile::~UnixFile()>:
c00110b6:	83 ec 0c             	sub    esp,0xc
c00110b9:	83 ec 0c             	sub    esp,0xc
c00110bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110c0:	e8 59 ff ff ff       	call   c001101e <UnixFile::~UnixFile()>
c00110c5:	83 c4 10             	add    esp,0x10
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	6a 0c                	push   0xc
c00110cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110d1:	e8 9b 10 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c00110d6:	83 c4 10             	add    esp,0x10
c00110d9:	83 c4 0c             	add    esp,0xc
c00110dc:	c3                   	ret    
c00110dd:	90                   	nop

c00110de <ReservedFilename::~ReservedFilename()>:
c00110de:	83 ec 0c             	sub    esp,0xc
c00110e1:	ba d0 6d 02 c0       	mov    edx,0xc0026dd0
c00110e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ea:	89 10                	mov    DWORD PTR [eax],edx
c00110ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f0:	83 ec 0c             	sub    esp,0xc
c00110f3:	50                   	push   eax
c00110f4:	e8 25 ff ff ff       	call   c001101e <UnixFile::~UnixFile()>
c00110f9:	83 c4 10             	add    esp,0x10
c00110fc:	90                   	nop
c00110fd:	83 c4 0c             	add    esp,0xc
c0011100:	c3                   	ret    
c0011101:	90                   	nop

c0011102 <ReservedFilename::~ReservedFilename()>:
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	83 ec 0c             	sub    esp,0xc
c0011108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001110c:	e8 cd ff ff ff       	call   c00110de <ReservedFilename::~ReservedFilename()>
c0011111:	83 c4 10             	add    esp,0x10
c0011114:	83 ec 08             	sub    esp,0x8
c0011117:	6a 0c                	push   0xc
c0011119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111d:	e8 4f 10 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c0011122:	83 c4 10             	add    esp,0x10
c0011125:	83 c4 0c             	add    esp,0xc
c0011128:	c3                   	ret    

c0011129 <getFromFileDescriptor(int)>:
c0011129:	53                   	push   ebx
c001112a:	83 ec 08             	sub    esp,0x8
c001112d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011131:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011137:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001113d:	7f 2c                	jg     c001116b <getFromFileDescriptor(int)+0x42>
c001113f:	83 ec 0c             	sub    esp,0xc
c0011142:	68 38 a6 02 c0       	push   0xc002a638
c0011147:	e8 f2 3f 01 00       	call   c002513e <LinkedList<UnixFile>::getFirstElement()>
c001114c:	83 c4 10             	add    esp,0x10
c001114f:	85 c0                	test   eax,eax
c0011151:	75 04                	jne    c0011157 <getFromFileDescriptor(int)+0x2e>
c0011153:	31 c0                	xor    eax,eax
c0011155:	eb 6e                	jmp    c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011157:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001115a:	74 69                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c001115c:	52                   	push   edx
c001115d:	52                   	push   edx
c001115e:	50                   	push   eax
c001115f:	68 38 a6 02 c0       	push   0xc002a638
c0011164:	e8 7f 40 01 00       	call   c00251e8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011169:	eb e1                	jmp    c001114c <getFromFileDescriptor(int)+0x23>
c001116b:	a1 2c a6 02 c0       	mov    eax,ds:0xc002a62c
c0011170:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011176:	74 4d                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011178:	a1 30 a6 02 c0       	mov    eax,ds:0xc002a630
c001117d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011183:	74 40                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011185:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c001118a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011190:	74 33                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011192:	a1 24 a6 02 c0       	mov    eax,ds:0xc002a624
c0011197:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001119d:	74 26                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c001119f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00111a5:	83 f8 08             	cmp    eax,0x8
c00111a8:	77 09                	ja     c00111b3 <getFromFileDescriptor(int)+0x8a>
c00111aa:	8b 04 85 00 a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5a00]
c00111b1:	eb 12                	jmp    c00111c5 <getFromFileDescriptor(int)+0x9c>
c00111b3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00111b9:	83 fb 08             	cmp    ebx,0x8
c00111bc:	77 95                	ja     c0011153 <getFromFileDescriptor(int)+0x2a>
c00111be:	8b 04 9d c0 a5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5a40]
c00111c5:	83 c4 08             	add    esp,0x8
c00111c8:	5b                   	pop    ebx
c00111c9:	c3                   	ret    

c00111ca <__static_initialization_and_destruction_0(int, int)>:
c00111ca:	83 ec 0c             	sub    esp,0xc
c00111cd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111d2:	75 34                	jne    c0011208 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111d4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111dc:	75 2a                	jne    c0011208 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111de:	83 ec 0c             	sub    esp,0xc
c00111e1:	68 38 a6 02 c0       	push   0xc002a638
c00111e6:	e8 27 3e 01 00       	call   c0025012 <LinkedList<UnixFile>::LinkedList()>
c00111eb:	83 c4 10             	add    esp,0x10
c00111ee:	83 ec 04             	sub    esp,0x4
c00111f1:	68 ac 93 02 c0       	push   0xc00293ac
c00111f6:	68 38 a6 02 c0       	push   0xc002a638
c00111fb:	68 10 50 02 c0       	push   0xc0025010
c0011200:	e8 e8 0e 00 00       	call   c00120ed <__cxa_atexit>
c0011205:	83 c4 10             	add    esp,0x10
c0011208:	90                   	nop
c0011209:	83 c4 0c             	add    esp,0xc
c001120c:	c3                   	ret    

c001120d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001120d:	83 ec 0c             	sub    esp,0xc
c0011210:	83 ec 08             	sub    esp,0x8
c0011213:	68 ff ff 00 00       	push   0xffff
c0011218:	6a 01                	push   0x1
c001121a:	e8 ab ff ff ff       	call   c00111ca <__static_initialization_and_destruction_0(int, int)>
c001121f:	83 c4 10             	add    esp,0x10
c0011222:	83 c4 0c             	add    esp,0xc
c0011225:	c3                   	ret    

c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011226:	53                   	push   ebx
c0011227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001122b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001122f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011235:	89 c8                	mov    eax,ecx
c0011237:	d1 e8                	shr    eax,1
c0011239:	03 05 28 94 02 c0    	add    eax,DWORD PTR ds:0xc0029428
c001123f:	83 e1 01             	and    ecx,0x1
c0011242:	8a 10                	mov    dl,BYTE PTR [eax]
c0011244:	75 09                	jne    c001124f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011246:	83 e2 f0             	and    edx,0xfffffff0
c0011249:	09 da                	or     edx,ebx
c001124b:	88 10                	mov    BYTE PTR [eax],dl
c001124d:	5b                   	pop    ebx
c001124e:	c3                   	ret    
c001124f:	c1 e3 04             	shl    ebx,0x4
c0011252:	83 e2 0f             	and    edx,0xf
c0011255:	09 da                	or     edx,ebx
c0011257:	88 10                	mov    BYTE PTR [eax],dl
c0011259:	5b                   	pop    ebx
c001125a:	c3                   	ret    

c001125b <Virt::getPageState(unsigned long)>:
c001125b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001125f:	8b 0d 28 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029428
c0011265:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001126b:	89 d0                	mov    eax,edx
c001126d:	d1 e8                	shr    eax,1
c001126f:	83 e2 01             	and    edx,0x1
c0011272:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011275:	75 04                	jne    c001127b <Virt::getPageState(unsigned long)+0x20>
c0011277:	83 e0 0f             	and    eax,0xf
c001127a:	c3                   	ret    
c001127b:	c0 e8 04             	shr    al,0x4
c001127e:	c3                   	ret    

c001127f <Virt::allocateKernelVirtualPages(int)>:
c001127f:	55                   	push   ebp
c0011280:	31 ed                	xor    ebp,ebp
c0011282:	57                   	push   edi
c0011283:	56                   	push   esi
c0011284:	53                   	push   ebx
c0011285:	31 db                	xor    ebx,ebx
c0011287:	83 ec 1c             	sub    esp,0x1c
c001128a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001128e:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c0011294:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011299:	57                   	push   edi
c001129a:	e8 bc ff ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c001129f:	5a                   	pop    edx
c00112a0:	84 c0                	test   al,al
c00112a2:	75 3a                	jne    c00112de <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112a4:	85 db                	test   ebx,ebx
c00112a6:	75 02                	jne    c00112aa <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112a8:	89 fd                	mov    ebp,edi
c00112aa:	43                   	inc    ebx
c00112ab:	39 f3                	cmp    ebx,esi
c00112ad:	74 5a                	je     c0011309 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112af:	47                   	inc    edi
c00112b0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112b6:	76 31                	jbe    c00112e9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112b8:	c7 05 24 94 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029424,0xc8000
c00112c2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112c7:	75 28                	jne    c00112f1 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112c9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112ce:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112d3:	57                   	push   edi
c00112d4:	e8 82 ff ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c00112d9:	5a                   	pop    edx
c00112da:	84 c0                	test   al,al
c00112dc:	74 c6                	je     c00112a4 <Virt::allocateKernelVirtualPages(int)+0x25>
c00112de:	31 db                	xor    ebx,ebx
c00112e0:	47                   	inc    edi
c00112e1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112e7:	77 cf                	ja     c00112b8 <Virt::allocateKernelVirtualPages(int)+0x39>
c00112e9:	89 3d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edi
c00112ef:	eb a8                	jmp    c0011299 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112f1:	83 ec 0c             	sub    esp,0xc
c00112f4:	68 e4 6d 02 c0       	push   0xc0026de4
c00112f9:	e8 d5 83 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c00112fe:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c0011304:	83 c4 10             	add    esp,0x10
c0011307:	eb 90                	jmp    c0011299 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011309:	89 2d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ebp
c001130f:	4b                   	dec    ebx
c0011310:	74 5f                	je     c0011371 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011312:	85 f6                	test   esi,esi
c0011314:	74 3d                	je     c0011353 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011316:	89 e8                	mov    eax,ebp
c0011318:	31 db                	xor    ebx,ebx
c001131a:	8d 7e ff             	lea    edi,[esi-0x1]
c001131d:	eb 14                	jmp    c0011333 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001131f:	6a 01                	push   0x1
c0011321:	43                   	inc    ebx
c0011322:	50                   	push   eax
c0011323:	e8 fe fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011328:	58                   	pop    eax
c0011329:	39 f3                	cmp    ebx,esi
c001132b:	5a                   	pop    edx
c001132c:	74 25                	je     c0011353 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001132e:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0011333:	8d 50 01             	lea    edx,[eax+0x1]
c0011336:	85 db                	test   ebx,ebx
c0011338:	89 15 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edx
c001133e:	74 20                	je     c0011360 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011340:	39 df                	cmp    edi,ebx
c0011342:	75 db                	jne    c001131f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011344:	6a 03                	push   0x3
c0011346:	43                   	inc    ebx
c0011347:	50                   	push   eax
c0011348:	e8 d9 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001134d:	59                   	pop    ecx
c001134e:	39 f3                	cmp    ebx,esi
c0011350:	58                   	pop    eax
c0011351:	75 db                	jne    c001132e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011353:	83 c4 1c             	add    esp,0x1c
c0011356:	89 e8                	mov    eax,ebp
c0011358:	5b                   	pop    ebx
c0011359:	c1 e0 0c             	shl    eax,0xc
c001135c:	5e                   	pop    esi
c001135d:	5f                   	pop    edi
c001135e:	5d                   	pop    ebp
c001135f:	c3                   	ret    
c0011360:	6a 02                	push   0x2
c0011362:	bb 01 00 00 00       	mov    ebx,0x1
c0011367:	50                   	push   eax
c0011368:	e8 b9 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136d:	58                   	pop    eax
c001136e:	5a                   	pop    edx
c001136f:	eb bd                	jmp    c001132e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011371:	6a 04                	push   0x4
c0011373:	8d 45 01             	lea    eax,[ebp+0x1]
c0011376:	55                   	push   ebp
c0011377:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c001137c:	e8 a5 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011381:	59                   	pop    ecx
c0011382:	89 e8                	mov    eax,ebp
c0011384:	5b                   	pop    ebx
c0011385:	c1 e0 0c             	shl    eax,0xc
c0011388:	83 c4 1c             	add    esp,0x1c
c001138b:	5b                   	pop    ebx
c001138c:	5e                   	pop    esi
c001138d:	5f                   	pop    edi
c001138e:	5d                   	pop    ebp
c001138f:	c3                   	ret    

c0011390 <Virt::virtualMemorySetup()>:
c0011390:	53                   	push   ebx
c0011391:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011396:	83 ec 08             	sub    esp,0x8
c0011399:	6a 0f                	push   0xf
c001139b:	53                   	push   ebx
c001139c:	43                   	inc    ebx
c001139d:	e8 84 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a2:	59                   	pop    ecx
c00113a3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113a9:	58                   	pop    eax
c00113aa:	75 ed                	jne    c0011399 <Virt::virtualMemorySetup()+0x9>
c00113ac:	83 ec 08             	sub    esp,0x8
c00113af:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113b4:	68 00 00 00 c8       	push   0xc8000000
c00113b9:	68 6b 6f 02 c0       	push   0xc0026f6b
c00113be:	e8 8e 0e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00113c3:	58                   	pop    eax
c00113c4:	5a                   	pop    edx
c00113c5:	68 00 f0 ff ef       	push   0xeffff000
c00113ca:	68 7f 6f 02 c0       	push   0xc0026f7f
c00113cf:	e8 7d 0e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00113d4:	83 c4 10             	add    esp,0x10
c00113d7:	83 ec 08             	sub    esp,0x8
c00113da:	6a 00                	push   0x0
c00113dc:	53                   	push   ebx
c00113dd:	43                   	inc    ebx
c00113de:	e8 43 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113ec:	75 e9                	jne    c00113d7 <Virt::virtualMemorySetup()+0x47>
c00113ee:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113f3:	83 ec 08             	sub    esp,0x8
c00113f6:	6a 0f                	push   0xf
c00113f8:	53                   	push   ebx
c00113f9:	43                   	inc    ebx
c00113fa:	e8 27 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011408:	75 e9                	jne    c00113f3 <Virt::virtualMemorySetup()+0x63>
c001140a:	83 c4 08             	add    esp,0x8
c001140d:	5b                   	pop    ebx
c001140e:	c3                   	ret    

c001140f <Virt::getAKernelVAS()>:
c001140f:	a1 44 a6 02 c0       	mov    eax,ds:0xc002a644
c0011414:	c3                   	ret    

c0011415 <Virt::setupPageSwapping(int)>:
c0011415:	57                   	push   edi
c0011416:	56                   	push   esi
c0011417:	53                   	push   ebx
c0011418:	83 ec 1c             	sub    esp,0x1c
c001141b:	68 14 01 00 00       	push   0x114
c0011420:	e8 3d 0d 00 00       	call   c0012162 <operator new(unsigned long)>
c0011425:	83 c4 0c             	add    esp,0xc
c0011428:	89 c6                	mov    esi,eax
c001142a:	ff 35 94 b9 02 c0    	push   DWORD PTR ds:0xc002b994
c0011430:	68 93 6f 02 c0       	push   0xc0026f93
c0011435:	50                   	push   eax
c0011436:	e8 45 13 00 00       	call   c0012780 <File::File(char const*, Process*)>
c001143b:	89 34 24             	mov    DWORD PTR [esp],esi
c001143e:	e8 19 15 00 00       	call   c001295c <File::unlink()>
c0011443:	58                   	pop    eax
c0011444:	5a                   	pop    edx
c0011445:	6a 12                	push   0x12
c0011447:	56                   	push   esi
c0011448:	e8 97 13 00 00       	call   c00127e4 <File::open(FileOpenMode)>
c001144d:	83 c4 10             	add    esp,0x10
c0011450:	85 c0                	test   eax,eax
c0011452:	0f 85 bf 00 00 00    	jne    c0011517 <Virt::setupPageSwapping(int)+0x102>
c0011458:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001145c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011464:	c1 e3 08             	shl    ebx,0x8
c0011467:	83 ec 0c             	sub    esp,0xc
c001146a:	68 00 00 01 00       	push   0x10000
c001146f:	e8 ec dc ff ff       	call   c000f160 <malloc>
c0011474:	83 c4 0c             	add    esp,0xc
c0011477:	89 c7                	mov    edi,eax
c0011479:	68 00 00 01 00       	push   0x10000
c001147e:	6a 00                	push   0x0
c0011480:	50                   	push   eax
c0011481:	e8 60 f2 fe ff       	call   c00006e6 <memset>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	85 db                	test   ebx,ebx
c001148b:	79 03                	jns    c0011490 <Virt::setupPageSwapping(int)+0x7b>
c001148d:	83 c3 0f             	add    ebx,0xf
c0011490:	c1 fb 04             	sar    ebx,0x4
c0011493:	4b                   	dec    ebx
c0011494:	83 fb ff             	cmp    ebx,0xffffffff
c0011497:	74 4b                	je     c00114e4 <Virt::setupPageSwapping(int)+0xcf>
c0011499:	83 ec 0c             	sub    esp,0xc
c001149c:	8b 06                	mov    eax,DWORD PTR [esi]
c001149e:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114a2:	52                   	push   edx
c00114a3:	57                   	push   edi
c00114a4:	6a 00                	push   0x0
c00114a6:	68 00 00 01 00       	push   0x10000
c00114ab:	56                   	push   esi
c00114ac:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114af:	83 c4 20             	add    esp,0x20
c00114b2:	85 c0                	test   eax,eax
c00114b4:	75 4e                	jne    c0011504 <Virt::setupPageSwapping(int)+0xef>
c00114b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114ba:	3d 00 00 01 00       	cmp    eax,0x10000
c00114bf:	74 d2                	je     c0011493 <Virt::setupPageSwapping(int)+0x7e>
c00114c1:	83 ec 08             	sub    esp,0x8
c00114c4:	4b                   	dec    ebx
c00114c5:	50                   	push   eax
c00114c6:	68 e6 6f 02 c0       	push   0xc0026fe6
c00114cb:	e8 81 0d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00114d0:	c7 04 24 ef 6f 02 c0 	mov    DWORD PTR [esp],0xc0026fef
c00114d7:	e8 f7 81 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	83 fb ff             	cmp    ebx,0xffffffff
c00114e2:	75 b5                	jne    c0011499 <Virt::setupPageSwapping(int)+0x84>
c00114e4:	83 ec 0c             	sub    esp,0xc
c00114e7:	56                   	push   esi
c00114e8:	e8 55 13 00 00       	call   c0012842 <File::close()>
c00114ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f0:	e8 8b dc ff ff       	call   c000f180 <rfree>
c00114f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00114f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00114fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114fd:	83 c4 20             	add    esp,0x20
c0011500:	5b                   	pop    ebx
c0011501:	5e                   	pop    esi
c0011502:	5f                   	pop    edi
c0011503:	c3                   	ret    
c0011504:	83 ec 08             	sub    esp,0x8
c0011507:	50                   	push   eax
c0011508:	68 ce 6f 02 c0       	push   0xc0026fce
c001150d:	e8 3f 0d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	eb 9f                	jmp    c00114b6 <Virt::setupPageSwapping(int)+0xa1>
c0011517:	83 ec 08             	sub    esp,0x8
c001151a:	50                   	push   eax
c001151b:	68 aa 6f 02 c0       	push   0xc0026faa
c0011520:	e8 2c 0d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0011525:	c7 04 24 b3 6f 02 c0 	mov    DWORD PTR [esp],0xc0026fb3
c001152c:	e8 a2 81 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	e9 1f ff ff ff       	jmp    c0011458 <Virt::setupPageSwapping(int)+0x43>
c0011539:	90                   	nop

c001153a <VAS::VAS()>:
c001153a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011549:	a3 44 a6 02 c0       	mov    ds:0xc002a644,eax
c001154e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011552:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001155d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011561:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011568:	90                   	nop
c0011569:	c3                   	ret    

c001156a <VAS::VAS(VAS*)>:
c001156a:	83 ec 0c             	sub    esp,0xc
c001156d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011571:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011578:	83 ec 0c             	sub    esp,0xc
c001157b:	68 04 6e 02 c0       	push   0xc0026e04
c0011580:	e8 4e 81 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0011585:	83 c4 10             	add    esp,0x10
c0011588:	90                   	nop
c0011589:	83 c4 0c             	add    esp,0xc
c001158c:	c3                   	ret    
c001158d:	90                   	nop

c001158e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001158e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011592:	89 c2                	mov    edx,eax
c0011594:	c1 e8 0a             	shr    eax,0xa
c0011597:	c1 ea 16             	shr    edx,0x16
c001159a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001159f:	19 c9                	sbb    ecx,ecx
c00115a1:	c1 e2 0c             	shl    edx,0xc
c00115a4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115aa:	25 fc 0f 00 00       	and    eax,0xffc
c00115af:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115b6:	01 d0                	add    eax,edx
c00115b8:	c3                   	ret    
c00115b9:	90                   	nop

c00115ba <VAS::getPageTableEntry(unsigned long)>:
c00115ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115be:	89 ca                	mov    edx,ecx
c00115c0:	c1 e9 0a             	shr    ecx,0xa
c00115c3:	c1 ea 16             	shr    edx,0x16
c00115c6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115cc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115d2:	c1 e0 0c             	shl    eax,0xc
c00115d5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115d8:	c3                   	ret    

c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115d9:	57                   	push   edi
c00115da:	56                   	push   esi
c00115db:	be 01 00 00 00       	mov    esi,0x1
c00115e0:	53                   	push   ebx
c00115e1:	83 ec 10             	sub    esp,0x10
c00115e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115e8:	c1 eb 0c             	shr    ebx,0xc
c00115eb:	eb 3f                	jmp    c001162c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115ed:	e8 1d fe ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00115f2:	83 ec 08             	sub    esp,0x8
c00115f5:	57                   	push   edi
c00115f6:	50                   	push   eax
c00115f7:	e8 be ff ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c00115fc:	83 c4 10             	add    esp,0x10
c00115ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011605:	f6 c4 04             	test   ah,0x4
c0011608:	75 5f                	jne    c0011669 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001160a:	80 fa 04             	cmp    dl,0x4
c001160d:	74 78                	je     c0011687 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001160f:	80 fa 02             	cmp    dl,0x2
c0011612:	0f 84 88 00 00 00    	je     c00116a0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011618:	80 fa 03             	cmp    dl,0x3
c001161b:	0f 84 ad 00 00 00    	je     c00116ce <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011621:	fe ca                	dec    dl
c0011623:	0f 84 92 00 00 00    	je     c00116bb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011629:	43                   	inc    ebx
c001162a:	31 f6                	xor    esi,esi
c001162c:	53                   	push   ebx
c001162d:	e8 29 fc ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c0011632:	5f                   	pop    edi
c0011633:	89 df                	mov    edi,ebx
c0011635:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011639:	c1 e7 0c             	shl    edi,0xc
c001163c:	84 c0                	test   al,al
c001163e:	75 ad                	jne    c00115ed <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011640:	83 ec 0c             	sub    esp,0xc
c0011643:	68 f5 6f 02 c0       	push   0xc0026ff5
c0011648:	e8 86 80 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c001164d:	e8 bd fd ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011652:	5a                   	pop    edx
c0011653:	59                   	pop    ecx
c0011654:	57                   	push   edi
c0011655:	50                   	push   eax
c0011656:	e8 5f ff ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011660:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011664:	f6 c4 04             	test   ah,0x4
c0011667:	74 c0                	je     c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011669:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001166d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	50                   	push   eax
c0011676:	e8 05 e0 ff ff       	call   c000f680 <Phys::freePage(unsigned long)>
c001167b:	83 c4 10             	add    esp,0x10
c001167e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011682:	80 fa 04             	cmp    dl,0x4
c0011685:	75 88                	jne    c001160f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011687:	89 f0                	mov    eax,esi
c0011689:	84 c0                	test   al,al
c001168b:	75 47                	jne    c00116d4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001168d:	c7 44 24 20 28 6e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026e28
c0011695:	83 c4 10             	add    esp,0x10
c0011698:	5b                   	pop    ebx
c0011699:	5e                   	pop    esi
c001169a:	5f                   	pop    edi
c001169b:	e9 33 80 00 00       	jmp    c00196d3 <Krnl::panic(char const*)>
c00116a0:	89 f0                	mov    eax,esi
c00116a2:	84 c0                	test   al,al
c00116a4:	75 15                	jne    c00116bb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116a6:	83 ec 0c             	sub    esp,0xc
c00116a9:	68 11 70 02 c0       	push   0xc0027011
c00116ae:	e8 20 80 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c00116b3:	83 c4 10             	add    esp,0x10
c00116b6:	e9 6e ff ff ff       	jmp    c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116bb:	83 ec 08             	sub    esp,0x8
c00116be:	6a 00                	push   0x0
c00116c0:	53                   	push   ebx
c00116c1:	e8 60 fb ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	e9 5b ff ff ff       	jmp    c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116ce:	89 f0                	mov    eax,esi
c00116d0:	84 c0                	test   al,al
c00116d2:	75 15                	jne    c00116e9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116d4:	83 ec 08             	sub    esp,0x8
c00116d7:	6a 00                	push   0x0
c00116d9:	53                   	push   ebx
c00116da:	e8 47 fb ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	5b                   	pop    ebx
c00116e6:	5e                   	pop    esi
c00116e7:	5f                   	pop    edi
c00116e8:	c3                   	ret    
c00116e9:	c7 44 24 20 2d 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc002702d
c00116f1:	83 c4 10             	add    esp,0x10
c00116f4:	5b                   	pop    ebx
c00116f5:	5e                   	pop    esi
c00116f6:	5f                   	pop    edi
c00116f7:	e9 d7 7f 00 00       	jmp    c00196d3 <Krnl::panic(char const*)>

c00116fc <VAS::freeAllocatedPages(unsigned long)>:
c00116fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011700:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011704:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011708:	74 09                	je     c0011713 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001170a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001170e:	e9 c6 fe ff ff       	jmp    c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011713:	c7 44 24 04 4c 6e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026e4c
c001171b:	e9 31 0b 00 00       	jmp    c0012251 <Dbg::kprintf(char const*, ...)>

c0011720 <VAS::virtualToPhysical(unsigned long)>:
c0011720:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011724:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011728:	e8 8d fe ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c001172d:	5a                   	pop    edx
c001172e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011730:	59                   	pop    ecx
c0011731:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011736:	c3                   	ret    
c0011737:	90                   	nop

c0011738 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011738:	55                   	push   ebp
c0011739:	57                   	push   edi
c001173a:	56                   	push   esi
c001173b:	53                   	push   ebx
c001173c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011740:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011744:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011748:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001174c:	85 db                	test   ebx,ebx
c001174e:	7e 22                	jle    c0011772 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011750:	c1 e3 0c             	shl    ebx,0xc
c0011753:	01 f3                	add    ebx,esi
c0011755:	56                   	push   esi
c0011756:	81 c6 00 10 00 00    	add    esi,0x1000
c001175c:	55                   	push   ebp
c001175d:	e8 58 fe ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c0011762:	5a                   	pop    edx
c0011763:	59                   	pop    ecx
c0011764:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011766:	21 f9                	and    ecx,edi
c0011768:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001176c:	39 f3                	cmp    ebx,esi
c001176e:	89 08                	mov    DWORD PTR [eax],ecx
c0011770:	75 e3                	jne    c0011755 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011772:	5b                   	pop    ebx
c0011773:	5e                   	pop    esi
c0011774:	5f                   	pop    edi
c0011775:	5d                   	pop    ebp
c0011776:	c3                   	ret    
c0011777:	90                   	nop

c0011778 <VAS::setToWriteCombining(unsigned long, int)>:
c0011778:	83 ec 0c             	sub    esp,0xc
c001177b:	e8 ba 60 00 00       	call   c001783a <thisCPU()>
c0011780:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011787:	75 04                	jne    c001178d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011789:	83 c4 0c             	add    esp,0xc
c001178c:	c3                   	ret    
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	68 80 00 00 00       	push   0x80
c0011795:	6a ff                	push   0xffffffff
c0011797:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001179b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001179f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117a3:	e8 90 ff ff ff       	call   c0011738 <VAS::reflagRange(unsigned long, int, int, int)>
c00117a8:	83 c4 20             	add    esp,0x20
c00117ab:	83 c4 0c             	add    esp,0xc
c00117ae:	c3                   	ret    
c00117af:	90                   	nop

c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b0:	83 ec 0c             	sub    esp,0xc
c00117b3:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117c6:	19 c0                	sbb    eax,eax
c00117c8:	83 ca 03             	or     edx,0x3
c00117cb:	83 e0 fc             	and    eax,0xfffffffc
c00117ce:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117d5:	e8 1b 38 01 00       	call   c0024ff5 <CPU::readCR3()>
c00117da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117de:	83 c4 0c             	add    esp,0xc
c00117e1:	e9 21 38 01 00       	jmp    c0025007 <CPU::writeCR3(unsigned long)>

c00117e6 <VAS::~VAS()>:
c00117e6:	83 ec 2c             	sub    esp,0x2c
c00117e9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117f1:	e8 30 ae 00 00       	call   c001c626 <lockScheduler()>
c00117f6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00117fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011800:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011806:	83 ec 04             	sub    esp,0x4
c0011809:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001180d:	6a 01                	push   0x1
c001180f:	50                   	push   eax
c0011810:	e8 9b ff ff ff       	call   c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011820:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011828:	0f 8f d7 00 00 00    	jg     c0011905 <VAS::~VAS()+0x11f>
c001182e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011832:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011839:	c1 e2 02             	shl    edx,0x2
c001183c:	01 d0                	add    eax,edx
c001183e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011840:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011848:	83 e0 01             	and    eax,0x1
c001184b:	0f 84 ab 00 00 00    	je     c00118fc <VAS::~VAS()+0x116>
c0011851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011859:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011861:	7f 75                	jg     c00118d8 <VAS::~VAS()+0xf2>
c0011863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011867:	c1 e0 0a             	shl    eax,0xa
c001186a:	89 c2                	mov    edx,eax
c001186c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011870:	01 d0                	add    eax,edx
c0011872:	c1 e0 0c             	shl    eax,0xc
c0011875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011879:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011883:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011889:	83 ec 04             	sub    esp,0x4
c001188c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011890:	6a 01                	push   0x1
c0011892:	50                   	push   eax
c0011893:	e8 f6 fc ff ff       	call   c001158e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011898:	83 c4 10             	add    esp,0x10
c001189b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001189f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ad:	25 01 04 00 00       	and    eax,0x401
c00118b2:	3d 01 04 00 00       	cmp    eax,0x401
c00118b7:	75 19                	jne    c00118d2 <VAS::~VAS()+0xec>
c00118b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118c2:	83 ec 0c             	sub    esp,0xc
c00118c5:	50                   	push   eax
c00118c6:	e8 b5 dd ff ff       	call   c000f680 <Phys::freePage(unsigned long)>
c00118cb:	83 c4 10             	add    esp,0x10
c00118ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118d2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118d6:	eb 81                	jmp    c0011859 <VAS::~VAS()+0x73>
c00118d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118dc:	25 00 04 00 00       	and    eax,0x400
c00118e1:	74 19                	je     c00118fc <VAS::~VAS()+0x116>
c00118e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118ec:	83 ec 0c             	sub    esp,0xc
c00118ef:	50                   	push   eax
c00118f0:	e8 8b dd ff ff       	call   c000f680 <Phys::freePage(unsigned long)>
c00118f5:	83 c4 10             	add    esp,0x10
c00118f8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118fc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011900:	e9 1b ff ff ff       	jmp    c0011820 <VAS::~VAS()+0x3a>
c0011905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011909:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	50                   	push   eax
c0011910:	e8 c4 fc ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001191f:	83 ec 0c             	sub    esp,0xc
c0011922:	50                   	push   eax
c0011923:	e8 58 dd ff ff       	call   c000f680 <Phys::freePage(unsigned long)>
c0011928:	83 c4 10             	add    esp,0x10
c001192b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001192f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011933:	c1 e0 02             	shl    eax,0x2
c0011936:	83 ec 08             	sub    esp,0x8
c0011939:	50                   	push   eax
c001193a:	68 70 6e 02 c0       	push   0xc0026e70
c001193f:	e8 0d 09 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	e8 dc ac 00 00       	call   c001c628 <unlockScheduler()>
c001194c:	90                   	nop
c001194d:	83 c4 2c             	add    esp,0x2c
c0011950:	c3                   	ret    
c0011951:	90                   	nop

c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011952:	55                   	push   ebp
c0011953:	57                   	push   edi
c0011954:	56                   	push   esi
c0011955:	53                   	push   ebx
c0011956:	83 ec 1c             	sub    esp,0x1c
c0011959:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001195d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011961:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011967:	77 08                	ja     c0011971 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011969:	0f 20 d8             	mov    eax,cr3
c001196c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001196f:	75 47                	jne    c00119b8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011975:	09 d8                	or     eax,ebx
c0011977:	a9 ff 0f 00 00       	test   eax,0xfff
c001197c:	75 57                	jne    c00119d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001197e:	89 de                	mov    esi,ebx
c0011980:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011983:	c1 ee 16             	shr    esi,0x16
c0011986:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001198d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011991:	74 54                	je     c00119e7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011993:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011997:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001199d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119a1:	c1 e6 0c             	shl    esi,0xc
c00119a4:	c1 eb 0a             	shr    ebx,0xa
c00119a7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119ad:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119b0:	83 c4 1c             	add    esp,0x1c
c00119b3:	5b                   	pop    ebx
c00119b4:	5e                   	pop    esi
c00119b5:	5f                   	pop    edi
c00119b6:	5d                   	pop    ebp
c00119b7:	c3                   	ret    
c00119b8:	83 ec 0c             	sub    esp,0xc
c00119bb:	68 90 6e 02 c0       	push   0xc0026e90
c00119c0:	e8 8c 08 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119cc:	09 d8                	or     eax,ebx
c00119ce:	a9 ff 0f 00 00       	test   eax,0xfff
c00119d3:	74 a9                	je     c001197e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119d5:	83 ec 0c             	sub    esp,0xc
c00119d8:	68 f8 6e 02 c0       	push   0xc0026ef8
c00119dd:	e8 f1 7c 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	eb 97                	jmp    c001197e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119eb:	e8 1a dd ff ff       	call   c000f70a <Phys::allocatePage()>
c00119f0:	89 c5                	mov    ebp,eax
c00119f2:	e8 18 fa ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119fe:	6a 01                	push   0x1
c0011a00:	e8 7a f8 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011a05:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a0c:	6a 01                	push   0x1
c0011a0e:	50                   	push   eax
c0011a0f:	55                   	push   ebp
c0011a10:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a16:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a1a:	51                   	push   ecx
c0011a1b:	e8 1e 02 00 00       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a20:	83 c4 1c             	add    esp,0x1c
c0011a23:	68 00 10 00 00       	push   0x1000
c0011a28:	6a 00                	push   0x0
c0011a2a:	50                   	push   eax
c0011a2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a2f:	e8 b2 ec fe ff       	call   c00006e6 <memset>
c0011a34:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a38:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a3b:	e8 99 fb ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a44:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a4d:	e9 41 ff ff ff       	jmp    c0011993 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a52 <VAS::allocatePages(int, int)>:
c0011a52:	55                   	push   ebp
c0011a53:	57                   	push   edi
c0011a54:	56                   	push   esi
c0011a55:	53                   	push   ebx
c0011a56:	83 ec 1c             	sub    esp,0x1c
c0011a59:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a5d:	e8 d8 5d 00 00       	call   c001783a <thisCPU()>
c0011a62:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a68:	83 e0 01             	and    eax,0x1
c0011a6b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a6f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a73:	0f 85 d7 00 00 00    	jne    c0011b50 <VAS::allocatePages(int, int)+0xfe>
c0011a79:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a80:	85 c0                	test   eax,eax
c0011a82:	0f 84 ac 00 00 00    	je     c0011b34 <VAS::allocatePages(int, int)+0xe2>
c0011a88:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a90:	c1 e6 0c             	shl    esi,0xc
c0011a93:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a97:	85 c0                	test   eax,eax
c0011a99:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a9c:	7e 33                	jle    c0011ad1 <VAS::allocatePages(int, int)+0x7f>
c0011a9e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011aa2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aa6:	81 cd 00 04 00 00    	or     ebp,0x400
c0011aac:	e8 59 dc ff ff       	call   c000f70a <Phys::allocatePage()>
c0011ab1:	55                   	push   ebp
c0011ab2:	53                   	push   ebx
c0011ab3:	50                   	push   eax
c0011ab4:	57                   	push   edi
c0011ab5:	e8 98 fe ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011aba:	83 c4 10             	add    esp,0x10
c0011abd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ac2:	74 03                	je     c0011ac7 <VAS::allocatePages(int, int)+0x75>
c0011ac4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ac7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011acd:	39 de                	cmp    esi,ebx
c0011acf:	75 db                	jne    c0011aac <VAS::allocatePages(int, int)+0x5a>
c0011ad1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ad6:	74 3f                	je     c0011b17 <VAS::allocatePages(int, int)+0xc5>
c0011ad8:	c1 ee 0a             	shr    esi,0xa
c0011adb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011adf:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ae5:	c1 eb 0a             	shr    ebx,0xa
c0011ae8:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011aee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011af4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011afa:	39 f3                	cmp    ebx,esi
c0011afc:	77 0d                	ja     c0011b0b <VAS::allocatePages(int, int)+0xb9>
c0011afe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b01:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b07:	39 de                	cmp    esi,ebx
c0011b09:	73 f3                	jae    c0011afe <VAS::allocatePages(int, int)+0xac>
c0011b0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b0f:	83 c4 1c             	add    esp,0x1c
c0011b12:	5b                   	pop    ebx
c0011b13:	5e                   	pop    esi
c0011b14:	5f                   	pop    edi
c0011b15:	5d                   	pop    ebp
c0011b16:	c3                   	ret    
c0011b17:	e8 d9 34 01 00       	call   c0024ff5 <CPU::readCR3()>
c0011b1c:	83 ec 0c             	sub    esp,0xc
c0011b1f:	50                   	push   eax
c0011b20:	e8 e2 34 01 00       	call   c0025007 <CPU::writeCR3(unsigned long)>
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b2c:	83 c4 1c             	add    esp,0x1c
c0011b2f:	5b                   	pop    ebx
c0011b30:	5e                   	pop    esi
c0011b31:	5f                   	pop    edi
c0011b32:	5d                   	pop    ebp
c0011b33:	c3                   	ret    
c0011b34:	83 ec 0c             	sub    esp,0xc
c0011b37:	68 1c 6f 02 c0       	push   0xc0026f1c
c0011b3c:	e8 92 7b 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0011b41:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b48:	83 c4 10             	add    esp,0x10
c0011b4b:	e9 38 ff ff ff       	jmp    c0011a88 <VAS::allocatePages(int, int)+0x36>
c0011b50:	83 ec 0c             	sub    esp,0xc
c0011b53:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b57:	e8 23 f7 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011b5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b60:	83 c4 10             	add    esp,0x10
c0011b63:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b68:	0f 87 94 00 00 00    	ja     c0011c02 <VAS::allocatePages(int, int)+0x1b0>
c0011b6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b72:	85 d2                	test   edx,edx
c0011b74:	7e 3c                	jle    c0011bb2 <VAS::allocatePages(int, int)+0x160>
c0011b76:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b7a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b7e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b82:	c1 e5 0c             	shl    ebp,0xc
c0011b85:	81 ce 00 04 00 00    	or     esi,0x400
c0011b8b:	01 dd                	add    ebp,ebx
c0011b8d:	e8 78 db ff ff       	call   c000f70a <Phys::allocatePage()>
c0011b92:	56                   	push   esi
c0011b93:	53                   	push   ebx
c0011b94:	50                   	push   eax
c0011b95:	57                   	push   edi
c0011b96:	e8 b7 fd ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba3:	74 03                	je     c0011ba8 <VAS::allocatePages(int, int)+0x156>
c0011ba5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bae:	39 dd                	cmp    ebp,ebx
c0011bb0:	75 db                	jne    c0011b8d <VAS::allocatePages(int, int)+0x13b>
c0011bb2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bb7:	0f 84 5a ff ff ff    	je     c0011b17 <VAS::allocatePages(int, int)+0xc5>
c0011bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bc5:	89 d3                	mov    ebx,edx
c0011bc7:	c1 e0 0c             	shl    eax,0xc
c0011bca:	c1 eb 0a             	shr    ebx,0xa
c0011bcd:	01 d0                	add    eax,edx
c0011bcf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bd5:	c1 e8 0a             	shr    eax,0xa
c0011bd8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bde:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011be3:	2d 00 00 40 00       	sub    eax,0x400000
c0011be8:	39 c3                	cmp    ebx,eax
c0011bea:	0f 87 1b ff ff ff    	ja     c0011b0b <VAS::allocatePages(int, int)+0xb9>
c0011bf0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bf9:	39 d8                	cmp    eax,ebx
c0011bfb:	73 f3                	jae    c0011bf0 <VAS::allocatePages(int, int)+0x19e>
c0011bfd:	e9 09 ff ff ff       	jmp    c0011b0b <VAS::allocatePages(int, int)+0xb9>
c0011c02:	e8 33 5c 00 00       	call   c001783a <thisCPU()>
c0011c07:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c0e:	0f 84 5a ff ff ff    	je     c0011b6e <VAS::allocatePages(int, int)+0x11c>
c0011c14:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c1c:	e9 4d ff ff ff       	jmp    c0011b6e <VAS::allocatePages(int, int)+0x11c>
c0011c21:	90                   	nop

c0011c22 <VAS::setCPUSpecific(unsigned long)>:
c0011c22:	83 ec 0c             	sub    esp,0xc
c0011c25:	6a 05                	push   0x5
c0011c27:	68 00 00 40 c2       	push   0xc2400000
c0011c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c34:	e8 19 fd ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c39:	83 c4 1c             	add    esp,0x1c
c0011c3c:	c3                   	ret    
c0011c3d:	90                   	nop

c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c3e:	55                   	push   ebp
c0011c3f:	57                   	push   edi
c0011c40:	56                   	push   esi
c0011c41:	53                   	push   ebx
c0011c42:	83 ec 1c             	sub    esp,0x1c
c0011c45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c49:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c4d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c51:	e8 e4 5b 00 00       	call   c001783a <thisCPU()>
c0011c56:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c5c:	83 e0 01             	and    eax,0x1
c0011c5f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c67:	85 c0                	test   eax,eax
c0011c69:	7e 39                	jle    c0011ca4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c6f:	89 f3                	mov    ebx,esi
c0011c71:	c1 e0 0c             	shl    eax,0xc
c0011c74:	01 f0                	add    eax,esi
c0011c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c7a:	55                   	push   ebp
c0011c7b:	53                   	push   ebx
c0011c7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c80:	29 f0                	sub    eax,esi
c0011c82:	01 d8                	add    eax,ebx
c0011c84:	50                   	push   eax
c0011c85:	57                   	push   edi
c0011c86:	e8 c7 fc ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c8b:	83 c4 10             	add    esp,0x10
c0011c8e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c93:	74 03                	je     c0011c98 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c95:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c98:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c9e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ca2:	75 d6                	jne    c0011c7a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011ca4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ca9:	74 42                	je     c0011ced <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011cab:	89 f3                	mov    ebx,esi
c0011cad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cb1:	c1 eb 0a             	shr    ebx,0xa
c0011cb4:	c1 e0 0c             	shl    eax,0xc
c0011cb7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cbd:	01 f0                	add    eax,esi
c0011cbf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cc5:	c1 e8 0a             	shr    eax,0xa
c0011cc8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ccd:	2d 00 00 40 00       	sub    eax,0x400000
c0011cd2:	39 c3                	cmp    ebx,eax
c0011cd4:	77 0d                	ja     c0011ce3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cd6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cd9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cdf:	39 d8                	cmp    eax,ebx
c0011ce1:	73 f3                	jae    c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011ce3:	83 c4 1c             	add    esp,0x1c
c0011ce6:	89 f0                	mov    eax,esi
c0011ce8:	5b                   	pop    ebx
c0011ce9:	5e                   	pop    esi
c0011cea:	5f                   	pop    edi
c0011ceb:	5d                   	pop    ebp
c0011cec:	c3                   	ret    
c0011ced:	e8 03 33 01 00       	call   c0024ff5 <CPU::readCR3()>
c0011cf2:	83 ec 0c             	sub    esp,0xc
c0011cf5:	50                   	push   eax
c0011cf6:	e8 0c 33 01 00       	call   c0025007 <CPU::writeCR3(unsigned long)>
c0011cfb:	89 f0                	mov    eax,esi
c0011cfd:	83 c4 10             	add    esp,0x10
c0011d00:	83 c4 1c             	add    esp,0x1c
c0011d03:	5b                   	pop    ebx
c0011d04:	5e                   	pop    esi
c0011d05:	5f                   	pop    edi
c0011d06:	5d                   	pop    ebp
c0011d07:	c3                   	ret    

c0011d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d08:	55                   	push   ebp
c0011d09:	57                   	push   edi
c0011d0a:	56                   	push   esi
c0011d0b:	53                   	push   ebx
c0011d0c:	83 ec 1c             	sub    esp,0x1c
c0011d0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d13:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d17:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d1f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d24:	75 4a                	jne    c0011d70 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d26:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d2a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d2d:	c1 eb 16             	shr    ebx,0x16
c0011d30:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d37:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d3b:	74 4d                	je     c0011d8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d41:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d45:	c1 e8 0a             	shr    eax,0xa
c0011d48:	80 fa 01             	cmp    dl,0x1
c0011d4b:	19 d2                	sbb    edx,edx
c0011d4d:	c1 e3 0c             	shl    ebx,0xc
c0011d50:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d54:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d5a:	25 fc 0f 00 00       	and    eax,0xffc
c0011d5f:	01 d8                	add    eax,ebx
c0011d61:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d68:	83 c4 1c             	add    esp,0x1c
c0011d6b:	5b                   	pop    ebx
c0011d6c:	5e                   	pop    esi
c0011d6d:	5f                   	pop    edi
c0011d6e:	5d                   	pop    ebp
c0011d6f:	c3                   	ret    
c0011d70:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d74:	83 ec 0c             	sub    esp,0xc
c0011d77:	68 48 6f 02 c0       	push   0xc0026f48
c0011d7c:	e8 52 79 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0011d81:	83 c4 10             	add    esp,0x10
c0011d84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d88:	eb 9c                	jmp    c0011d26 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d8e:	e8 77 d9 ff ff       	call   c000f70a <Phys::allocatePage()>
c0011d93:	89 c5                	mov    ebp,eax
c0011d95:	e8 75 f6 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011d9a:	83 ec 0c             	sub    esp,0xc
c0011d9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011da1:	6a 01                	push   0x1
c0011da3:	e8 d7 f4 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011da8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011daf:	6a 01                	push   0x1
c0011db1:	50                   	push   eax
c0011db2:	55                   	push   ebp
c0011db3:	81 cd 07 04 00 00    	or     ebp,0x407
c0011db9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dbd:	51                   	push   ecx
c0011dbe:	e8 7b fe ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dc3:	83 c4 1c             	add    esp,0x1c
c0011dc6:	68 00 10 00 00       	push   0x1000
c0011dcb:	6a 00                	push   0x0
c0011dcd:	50                   	push   eax
c0011dce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dd2:	e8 0f e9 fe ff       	call   c00006e6 <memset>
c0011dd7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ddb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dde:	e8 f6 f7 ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011de3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011df0:	e9 48 ff ff ff       	jmp    c0011d3d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011df5:	90                   	nop

c0011df6 <VAS::VAS(bool)>:
c0011df6:	53                   	push   ebx
c0011df7:	83 ec 28             	sub    esp,0x28
c0011dfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dfe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e11:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e15:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e18:	e8 ed d8 ff ff       	call   c000f70a <Phys::allocatePage()>
c0011e1d:	89 c2                	mov    edx,eax
c0011e1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e23:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e26:	e8 e4 f5 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011e2b:	89 c3                	mov    ebx,eax
c0011e2d:	83 ec 0c             	sub    esp,0xc
c0011e30:	6a 01                	push   0x1
c0011e32:	e8 48 f4 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011e37:	83 c4 10             	add    esp,0x10
c0011e3a:	89 c2                	mov    edx,eax
c0011e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e43:	83 ec 0c             	sub    esp,0xc
c0011e46:	6a 03                	push   0x3
c0011e48:	6a 01                	push   0x1
c0011e4a:	52                   	push   edx
c0011e4b:	50                   	push   eax
c0011e4c:	53                   	push   ebx
c0011e4d:	e8 ec fd ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e52:	83 c4 20             	add    esp,0x20
c0011e55:	89 c2                	mov    edx,eax
c0011e57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e5e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e66:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e6e:	7f 1c                	jg     c0011e8c <VAS::VAS(bool)+0x96>
c0011e70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e7b:	c1 e2 02             	shl    edx,0x2
c0011e7e:	01 d0                	add    eax,edx
c0011e80:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e86:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e8a:	eb da                	jmp    c0011e66 <VAS::VAS(bool)+0x70>
c0011e8c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e94:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011e9c:	7f 71                	jg     c0011f0f <VAS::VAS(bool)+0x119>
c0011e9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ea2:	2d 00 02 00 00       	sub    eax,0x200
c0011ea7:	c1 e0 0c             	shl    eax,0xc
c0011eaa:	83 c8 03             	or     eax,0x3
c0011ead:	89 c3                	mov    ebx,eax
c0011eaf:	e8 86 59 00 00       	call   c001783a <thisCPU()>
c0011eb4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011eba:	83 e0 10             	and    eax,0x10
c0011ebd:	84 c0                	test   al,al
c0011ebf:	74 07                	je     c0011ec8 <VAS::VAS(bool)+0xd2>
c0011ec1:	b8 00 01 00 00       	mov    eax,0x100
c0011ec6:	eb 05                	jmp    c0011ecd <VAS::VAS(bool)+0xd7>
c0011ec8:	b8 00 00 00 00       	mov    eax,0x0
c0011ecd:	09 d8                	or     eax,ebx
c0011ecf:	89 c1                	mov    ecx,eax
c0011ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ed8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011edc:	c1 e2 02             	shl    edx,0x2
c0011edf:	01 d0                	add    eax,edx
c0011ee1:	89 ca                	mov    edx,ecx
c0011ee3:	89 10                	mov    DWORD PTR [eax],edx
c0011ee5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee9:	2d 40 03 00 00       	sub    eax,0x340
c0011eee:	83 f8 7f             	cmp    eax,0x7f
c0011ef1:	77 16                	ja     c0011f09 <VAS::VAS(bool)+0x113>
c0011ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011efa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011efe:	c1 e2 02             	shl    edx,0x2
c0011f01:	01 d0                	add    eax,edx
c0011f03:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f09:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f0d:	eb 85                	jmp    c0011e94 <VAS::VAS(bool)+0x9e>
c0011f0f:	e8 26 59 00 00       	call   c001783a <thisCPU()>
c0011f14:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f1a:	83 e0 10             	and    eax,0x10
c0011f1d:	84 c0                	test   al,al
c0011f1f:	74 07                	je     c0011f28 <VAS::VAS(bool)+0x132>
c0011f21:	b8 03 41 00 00       	mov    eax,0x4103
c0011f26:	eb 05                	jmp    c0011f2d <VAS::VAS(bool)+0x137>
c0011f28:	b8 03 40 00 00       	mov    eax,0x4003
c0011f2d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f31:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f34:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f3a:	89 02                	mov    DWORD PTR [edx],eax
c0011f3c:	e8 f9 58 00 00       	call   c001783a <thisCPU()>
c0011f41:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f47:	83 ec 08             	sub    esp,0x8
c0011f4a:	50                   	push   eax
c0011f4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f4f:	e8 ce fc ff ff       	call   c0011c22 <VAS::setCPUSpecific(unsigned long)>
c0011f54:	83 c4 10             	add    esp,0x10
c0011f57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f5b:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f5e:	e8 d7 58 00 00       	call   c001783a <thisCPU()>
c0011f63:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f69:	83 e0 10             	and    eax,0x10
c0011f6c:	84 c0                	test   al,al
c0011f6e:	74 07                	je     c0011f77 <VAS::VAS(bool)+0x181>
c0011f70:	b8 00 01 00 00       	mov    eax,0x100
c0011f75:	eb 05                	jmp    c0011f7c <VAS::VAS(bool)+0x186>
c0011f77:	b8 00 00 00 00       	mov    eax,0x0
c0011f7c:	09 d8                	or     eax,ebx
c0011f7e:	89 c2                	mov    edx,eax
c0011f80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f87:	05 fc 0f 00 00       	add    eax,0xffc
c0011f8c:	83 ca 03             	or     edx,0x3
c0011f8f:	89 10                	mov    DWORD PTR [eax],edx
c0011f91:	e8 a4 58 00 00       	call   c001783a <thisCPU()>
c0011f96:	83 ec 0c             	sub    esp,0xc
c0011f99:	50                   	push   eax
c0011f9a:	e8 9f 19 00 00       	call   c001393e <Device::getName()>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	83 ec 08             	sub    esp,0x8
c0011fa5:	68 47 70 02 c0       	push   0xc0027047
c0011faa:	50                   	push   eax
c0011fab:	e8 26 e8 fe ff       	call   c00007d6 <strcmp>
c0011fb0:	83 c4 10             	add    esp,0x10
c0011fb3:	85 c0                	test   eax,eax
c0011fb5:	0f 94 c0             	sete   al
c0011fb8:	84 c0                	test   al,al
c0011fba:	74 64                	je     c0012020 <VAS::VAS(bool)+0x22a>
c0011fbc:	e8 48 a6 00 00       	call   c001c609 <disableIRQs()>
c0011fc1:	e8 74 58 00 00       	call   c001783a <thisCPU()>
c0011fc6:	05 7c 09 00 00       	add    eax,0x97c
c0011fcb:	83 ec 0c             	sub    esp,0xc
c0011fce:	50                   	push   eax
c0011fcf:	e8 fe cb ff ff       	call   c000ebd2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fd4:	83 c4 10             	add    esp,0x10
c0011fd7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fdc:	89 c3                	mov    ebx,eax
c0011fde:	e8 57 58 00 00       	call   c001783a <thisCPU()>
c0011fe3:	05 7c 09 00 00       	add    eax,0x97c
c0011fe8:	83 ec 0c             	sub    esp,0xc
c0011feb:	50                   	push   eax
c0011fec:	e8 e1 cb ff ff       	call   c000ebd2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011ff1:	83 c4 10             	add    esp,0x10
c0011ff4:	83 ec 08             	sub    esp,0x8
c0011ff7:	50                   	push   eax
c0011ff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ffc:	e8 b9 f5 ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c0012001:	83 c4 10             	add    esp,0x10
c0012004:	8b 00                	mov    eax,DWORD PTR [eax]
c0012006:	25 00 f0 ff ff       	and    eax,0xfffff000
c001200b:	6a 11                	push   0x11
c001200d:	53                   	push   ebx
c001200e:	50                   	push   eax
c001200f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012013:	e8 3a f9 ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012018:	83 c4 10             	add    esp,0x10
c001201b:	e8 f7 a5 00 00       	call   c001c617 <enableIRQs()>
c0012020:	90                   	nop
c0012021:	83 c4 28             	add    esp,0x28
c0012024:	5b                   	pop    ebx
c0012025:	c3                   	ret    

c0012026 <mapVASFirstTime>:
c0012026:	55                   	push   ebp
c0012027:	57                   	push   edi
c0012028:	56                   	push   esi
c0012029:	53                   	push   ebx
c001202a:	83 ec 0c             	sub    esp,0xc
c001202d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012032:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012035:	4a                   	dec    edx
c0012036:	0f 84 99 00 00 00    	je     c00120d5 <mapVASFirstTime+0xaf>
c001203c:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001203f:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012042:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012047:	c1 e5 15             	shl    ebp,0x15
c001204a:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001204f:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012055:	29 eb                	sub    ebx,ebp
c0012057:	29 ee                	sub    esi,ebp
c0012059:	e8 ac d6 ff ff       	call   c000f70a <Phys::allocatePage()>
c001205e:	83 ec 0c             	sub    esp,0xc
c0012061:	68 03 04 00 00       	push   0x403
c0012066:	6a 01                	push   0x1
c0012068:	53                   	push   ebx
c0012069:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001206f:	50                   	push   eax
c0012070:	57                   	push   edi
c0012071:	e8 c8 fb ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012076:	83 c4 20             	add    esp,0x20
c0012079:	39 f3                	cmp    ebx,esi
c001207b:	75 dc                	jne    c0012059 <mapVASFirstTime+0x33>
c001207d:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012082:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012087:	29 ee                	sub    esi,ebp
c0012089:	29 e8                	sub    eax,ebp
c001208b:	89 c5                	mov    ebp,eax
c001208d:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012091:	19 db                	sbb    ebx,ebx
c0012093:	e8 72 d6 ff ff       	call   c000f70a <Phys::allocatePage()>
c0012098:	83 e3 04             	and    ebx,0x4
c001209b:	83 ec 0c             	sub    esp,0xc
c001209e:	81 c3 03 04 00 00    	add    ebx,0x403
c00120a4:	53                   	push   ebx
c00120a5:	6a 01                	push   0x1
c00120a7:	56                   	push   esi
c00120a8:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120ae:	50                   	push   eax
c00120af:	57                   	push   edi
c00120b0:	e8 89 fb ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120b5:	83 c4 20             	add    esp,0x20
c00120b8:	39 f5                	cmp    ebp,esi
c00120ba:	75 d1                	jne    c001208d <mapVASFirstTime+0x67>
c00120bc:	e8 34 2f 01 00       	call   c0024ff5 <CPU::readCR3()>
c00120c1:	83 ec 0c             	sub    esp,0xc
c00120c4:	50                   	push   eax
c00120c5:	e8 3d 2f 01 00       	call   c0025007 <CPU::writeCR3(unsigned long)>
c00120ca:	83 c4 10             	add    esp,0x10
c00120cd:	83 c4 0c             	add    esp,0xc
c00120d0:	5b                   	pop    ebx
c00120d1:	5e                   	pop    esi
c00120d2:	5f                   	pop    edi
c00120d3:	5d                   	pop    ebp
c00120d4:	c3                   	ret    
c00120d5:	83 ec 0c             	sub    esp,0xc
c00120d8:	68 55 70 02 c0       	push   0xc0027055
c00120dd:	e8 6f 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00120e2:	83 c4 10             	add    esp,0x10
c00120e5:	83 c4 0c             	add    esp,0xc
c00120e8:	5b                   	pop    ebx
c00120e9:	5e                   	pop    esi
c00120ea:	5f                   	pop    edi
c00120eb:	5d                   	pop    ebp
c00120ec:	c3                   	ret    

c00120ed <__cxa_atexit>:
c00120ed:	31 c0                	xor    eax,eax
c00120ef:	c3                   	ret    

c00120f0 <__cxa_finalize>:
c00120f0:	c3                   	ret    

c00120f1 <__stack_chk_fail>:
c00120f1:	55                   	push   ebp
c00120f2:	89 e5                	mov    ebp,esp
c00120f4:	83 ec 10             	sub    esp,0x10
c00120f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00120fa:	68 6e 70 02 c0       	push   0xc002706e
c00120ff:	e8 4d 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0012104:	58                   	pop    eax
c0012105:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012108:	5a                   	pop    edx
c0012109:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001210c:	68 6e 70 02 c0       	push   0xc002706e
c0012111:	e8 3b 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0012116:	59                   	pop    ecx
c0012117:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001211a:	5a                   	pop    edx
c001211b:	8b 00                	mov    eax,DWORD PTR [eax]
c001211d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012120:	68 6e 70 02 c0       	push   0xc002706e
c0012125:	e8 27 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001212a:	59                   	pop    ecx
c001212b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001212e:	5a                   	pop    edx
c001212f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012131:	8b 00                	mov    eax,DWORD PTR [eax]
c0012133:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012136:	68 6e 70 02 c0       	push   0xc002706e
c001213b:	e8 11 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0012140:	c7 04 24 76 70 02 c0 	mov    DWORD PTR [esp],0xc0027076
c0012147:	e8 87 75 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c001214c:	83 c4 10             	add    esp,0x10
c001214f:	c9                   	leave  
c0012150:	c3                   	ret    

c0012151 <__cxa_pure_virtual>:
c0012151:	83 ec 18             	sub    esp,0x18
c0012154:	68 8e 70 02 c0       	push   0xc002708e
c0012159:	e8 75 75 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c001215e:	83 c4 1c             	add    esp,0x1c
c0012161:	c3                   	ret    

c0012162 <operator new(unsigned long)>:
c0012162:	e9 f9 cf ff ff       	jmp    c000f160 <malloc>

c0012167 <operator new[](unsigned long)>:
c0012167:	e9 f4 cf ff ff       	jmp    c000f160 <malloc>

c001216c <operator delete(void*)>:
c001216c:	e9 0f d0 ff ff       	jmp    c000f180 <rfree>

c0012171 <operator delete(void*, unsigned long)>:
c0012171:	e9 0a d0 ff ff       	jmp    c000f180 <rfree>

c0012176 <operator delete[](void*)>:
c0012176:	e9 05 d0 ff ff       	jmp    c000f180 <rfree>

c001217b <operator delete[](void*, unsigned long)>:
c001217b:	e9 00 d0 ff ff       	jmp    c000f180 <rfree>

c0012180 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012180:	57                   	push   edi
c0012181:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012186:	56                   	push   esi
c0012187:	be a4 70 02 c0       	mov    esi,0xc00270a4
c001218c:	53                   	push   ebx
c001218d:	83 ec 40             	sub    esp,0x40
c0012190:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012194:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012198:	fc                   	cld    
c0012199:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001219b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001219f:	83 f9 3e             	cmp    ecx,0x3e
c00121a2:	7e 05                	jle    c00121a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00121a4:	b9 3e 00 00 00       	mov    ecx,0x3e
c00121a9:	89 df                	mov    edi,ebx
c00121ab:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121af:	eb 02                	jmp    c00121b3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121b1:	89 c7                	mov    edi,eax
c00121b3:	31 d2                	xor    edx,edx
c00121b5:	46                   	inc    esi
c00121b6:	89 f8                	mov    eax,edi
c00121b8:	f7 f1                	div    ecx
c00121ba:	39 cf                	cmp    edi,ecx
c00121bc:	73 f3                	jae    c00121b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121c1:	eb 02                	jmp    c00121c5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121c3:	89 c3                	mov    ebx,eax
c00121c5:	31 d2                	xor    edx,edx
c00121c7:	4e                   	dec    esi
c00121c8:	89 d8                	mov    eax,ebx
c00121ca:	f7 f1                	div    ecx
c00121cc:	39 cb                	cmp    ebx,ecx
c00121ce:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121d2:	88 16                	mov    BYTE PTR [esi],dl
c00121d4:	73 ed                	jae    c00121c3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121d6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121da:	83 c4 40             	add    esp,0x40
c00121dd:	5b                   	pop    ebx
c00121de:	5e                   	pop    esi
c00121df:	5f                   	pop    edi
c00121e0:	c3                   	ret    

c00121e1 <Dbg::logc(char)>:
c00121e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00121e5:	ba fd 03 00 00       	mov    edx,0x3fd
c00121ea:	ec                   	in     al,dx
c00121eb:	a8 20                	test   al,0x20
c00121ed:	74 fb                	je     c00121ea <Dbg::logc(char)+0x9>
c00121ef:	ba f8 03 00 00       	mov    edx,0x3f8
c00121f4:	88 c8                	mov    al,cl
c00121f6:	ee                   	out    dx,al
c00121f7:	c3                   	ret    

c00121f8 <Dbg::logs(char*)>:
c00121f8:	53                   	push   ebx
c00121f9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00121fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012200:	84 c0                	test   al,al
c0012202:	74 0f                	je     c0012213 <Dbg::logs(char*)+0x1b>
c0012204:	50                   	push   eax
c0012205:	43                   	inc    ebx
c0012206:	e8 d6 ff ff ff       	call   c00121e1 <Dbg::logc(char)>
c001220b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001220e:	5a                   	pop    edx
c001220f:	84 c0                	test   al,al
c0012211:	75 f1                	jne    c0012204 <Dbg::logs(char*)+0xc>
c0012213:	5b                   	pop    ebx
c0012214:	c3                   	ret    

c0012215 <Dbg::logWriteInt(unsigned int)>:
c0012215:	83 ec 10             	sub    esp,0x10
c0012218:	6a 0a                	push   0xa
c001221a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001221e:	50                   	push   eax
c001221f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012223:	e8 58 ff ff ff       	call   c0012180 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012228:	50                   	push   eax
c0012229:	e8 ca ff ff ff       	call   c00121f8 <Dbg::logs(char*)>
c001222e:	83 c4 20             	add    esp,0x20
c0012231:	c3                   	ret    

c0012232 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012232:	83 ec 10             	sub    esp,0x10
c0012235:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012239:	8d 44 24 08          	lea    eax,[esp+0x8]
c001223d:	50                   	push   eax
c001223e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012242:	e8 39 ff ff ff       	call   c0012180 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012247:	50                   	push   eax
c0012248:	e8 ab ff ff ff       	call   c00121f8 <Dbg::logs(char*)>
c001224d:	83 c4 20             	add    esp,0x20
c0012250:	c3                   	ret    

c0012251 <Dbg::kprintf(char const*, ...)>:
c0012251:	55                   	push   ebp
c0012252:	57                   	push   edi
c0012253:	56                   	push   esi
c0012254:	53                   	push   ebx
c0012255:	83 ec 0c             	sub    esp,0xc
c0012258:	8d 44 24 24          	lea    eax,[esp+0x24]
c001225c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012260:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012264:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012267:	84 c0                	test   al,al
c0012269:	74 4a                	je     c00122b5 <Dbg::kprintf(char const*, ...)+0x64>
c001226b:	31 db                	xor    ebx,ebx
c001226d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012270:	3c 25                	cmp    al,0x25
c0012272:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012275:	0f 85 e4 00 00 00    	jne    c001235f <Dbg::kprintf(char const*, ...)+0x10e>
c001227b:	83 c3 02             	add    ebx,0x2
c001227e:	8a 07                	mov    al,BYTE PTR [edi]
c0012280:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012283:	83 e8 25             	sub    eax,0x25
c0012286:	3c 53                	cmp    al,0x53
c0012288:	0f 87 ba 00 00 00    	ja     c0012348 <Dbg::kprintf(char const*, ...)+0xf7>
c001228e:	0f b6 c0             	movzx  eax,al
c0012291:	ff 24 85 e4 70 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8f1c]
c0012298:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001229c:	89 c8                	mov    eax,ecx
c001229e:	83 c1 04             	add    ecx,0x4
c00122a1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122a5:	ff 30                	push   DWORD PTR [eax]
c00122a7:	e8 4c ff ff ff       	call   c00121f8 <Dbg::logs(char*)>
c00122ac:	58                   	pop    eax
c00122ad:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122b1:	84 c0                	test   al,al
c00122b3:	75 b8                	jne    c001226d <Dbg::kprintf(char const*, ...)+0x1c>
c00122b5:	83 c4 0c             	add    esp,0xc
c00122b8:	5b                   	pop    ebx
c00122b9:	5e                   	pop    esi
c00122ba:	5f                   	pop    edi
c00122bb:	5d                   	pop    ebp
c00122bc:	c3                   	ret    
c00122bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122c1:	89 d0                	mov    eax,edx
c00122c3:	83 c2 04             	add    edx,0x4
c00122c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122ca:	ff 30                	push   DWORD PTR [eax]
c00122cc:	e8 44 ff ff ff       	call   c0012215 <Dbg::logWriteInt(unsigned int)>
c00122d1:	58                   	pop    eax
c00122d2:	eb d9                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c00122d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122d8:	89 d0                	mov    eax,edx
c00122da:	83 c2 04             	add    edx,0x4
c00122dd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00122e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122e4:	50                   	push   eax
c00122e5:	e8 f7 fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c00122ea:	58                   	pop    eax
c00122eb:	eb c0                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c00122ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122f1:	89 c8                	mov    eax,ecx
c00122f3:	83 c1 04             	add    ecx,0x4
c00122f6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122fa:	ff 30                	push   DWORD PTR [eax]
c00122fc:	e8 14 ff ff ff       	call   c0012215 <Dbg::logWriteInt(unsigned int)>
c0012301:	5f                   	pop    edi
c0012302:	eb a9                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c0012304:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012308:	89 c8                	mov    eax,ecx
c001230a:	83 c1 04             	add    ecx,0x4
c001230d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012311:	6a 10                	push   0x10
c0012313:	ff 30                	push   DWORD PTR [eax]
c0012315:	e8 18 ff ff ff       	call   c0012232 <Dbg::logWriteIntBase(unsigned int, int)>
c001231a:	59                   	pop    ecx
c001231b:	5f                   	pop    edi
c001231c:	eb 8f                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001231e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012322:	89 d0                	mov    eax,edx
c0012324:	83 c2 08             	add    edx,0x8
c0012327:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001232b:	6a 10                	push   0x10
c001232d:	ff 30                	push   DWORD PTR [eax]
c001232f:	e8 fe fe ff ff       	call   c0012232 <Dbg::logWriteIntBase(unsigned int, int)>
c0012334:	58                   	pop    eax
c0012335:	5a                   	pop    edx
c0012336:	e9 72 ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001233b:	6a 25                	push   0x25
c001233d:	e8 9f fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c0012342:	58                   	pop    eax
c0012343:	e9 65 ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c0012348:	6a 25                	push   0x25
c001234a:	e8 92 fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c001234f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012352:	50                   	push   eax
c0012353:	e8 89 fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c0012358:	5a                   	pop    edx
c0012359:	59                   	pop    ecx
c001235a:	e9 4e ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001235f:	50                   	push   eax
c0012360:	89 eb                	mov    ebx,ebp
c0012362:	e8 7a fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c0012367:	89 fd                	mov    ebp,edi
c0012369:	58                   	pop    eax
c001236a:	e9 3e ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001236f:	90                   	nop

c0012370 <File::read(unsigned long long, void*, int*)>:
c0012370:	53                   	push   ebx
c0012371:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012375:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012379:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012380:	3c 19                	cmp    al,0x19
c0012382:	77 35                	ja     c00123b9 <File::read(unsigned long long, void*, int*)+0x49>
c0012384:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c001238b:	85 c0                	test   eax,eax
c001238d:	74 2a                	je     c00123b9 <File::read(unsigned long long, void*, int*)+0x49>
c001238f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012395:	85 c0                	test   eax,eax
c0012397:	74 20                	je     c00123b9 <File::read(unsigned long long, void*, int*)+0x49>
c0012399:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001239d:	74 21                	je     c00123c0 <File::read(unsigned long long, void*, int*)+0x50>
c001239f:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123a5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123b3:	5b                   	pop    ebx
c00123b4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123b7:	ff e0                	jmp    eax
c00123b9:	b8 0b 00 00 00       	mov    eax,0xb
c00123be:	eb 05                	jmp    c00123c5 <File::read(unsigned long long, void*, int*)+0x55>
c00123c0:	b8 05 00 00 00       	mov    eax,0x5
c00123c5:	5b                   	pop    ebx
c00123c6:	c3                   	ret    
c00123c7:	90                   	nop

c00123c8 <File::write(unsigned long long, void*, int*)>:
c00123c8:	53                   	push   ebx
c00123c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123d1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123d8:	3c 19                	cmp    al,0x19
c00123da:	77 35                	ja     c0012411 <File::write(unsigned long long, void*, int*)+0x49>
c00123dc:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c00123e3:	85 c0                	test   eax,eax
c00123e5:	74 2a                	je     c0012411 <File::write(unsigned long long, void*, int*)+0x49>
c00123e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123ed:	85 c0                	test   eax,eax
c00123ef:	74 20                	je     c0012411 <File::write(unsigned long long, void*, int*)+0x49>
c00123f1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123f5:	74 21                	je     c0012418 <File::write(unsigned long long, void*, int*)+0x50>
c00123f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123f9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123fd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240b:	5b                   	pop    ebx
c001240c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001240f:	ff e0                	jmp    eax
c0012411:	b8 0b 00 00 00       	mov    eax,0xb
c0012416:	eb 05                	jmp    c001241d <File::write(unsigned long long, void*, int*)+0x55>
c0012418:	b8 05 00 00 00       	mov    eax,0x5
c001241d:	5b                   	pop    ebx
c001241e:	c3                   	ret    
c001241f:	90                   	nop

c0012420 <Directory::read(unsigned long long, void*, int*)>:
c0012420:	53                   	push   ebx
c0012421:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012425:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012429:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012430:	3c 19                	cmp    al,0x19
c0012432:	77 35                	ja     c0012469 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012434:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c001243b:	85 c0                	test   eax,eax
c001243d:	74 2a                	je     c0012469 <Directory::read(unsigned long long, void*, int*)+0x49>
c001243f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012445:	85 c0                	test   eax,eax
c0012447:	74 20                	je     c0012469 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012449:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001244d:	74 21                	je     c0012470 <Directory::read(unsigned long long, void*, int*)+0x50>
c001244f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012451:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012455:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001245b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001245f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012463:	5b                   	pop    ebx
c0012464:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012467:	ff e0                	jmp    eax
c0012469:	b8 0b 00 00 00       	mov    eax,0xb
c001246e:	eb 05                	jmp    c0012475 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012470:	b8 05 00 00 00       	mov    eax,0x5
c0012475:	5b                   	pop    ebx
c0012476:	c3                   	ret    
c0012477:	90                   	nop

c0012478 <Directory::write(unsigned long long, void*, int*)>:
c0012478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001247c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012483:	b8 0b 00 00 00       	mov    eax,0xb
c0012488:	80 fa 19             	cmp    dl,0x19
c001248b:	77 18                	ja     c00124a5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001248d:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c0012494:	85 d2                	test   edx,edx
c0012496:	74 0d                	je     c00124a5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012498:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001249f:	19 c0                	sbb    eax,eax
c00124a1:	83 e0 0a             	and    eax,0xa
c00124a4:	40                   	inc    eax
c00124a5:	c3                   	ret    

c00124a6 <File::isAtty()>:
c00124a6:	31 c0                	xor    eax,eax
c00124a8:	c3                   	ret    
c00124a9:	90                   	nop

c00124aa <Directory::isAtty()>:
c00124aa:	31 c0                	xor    eax,eax
c00124ac:	c3                   	ret    
c00124ad:	90                   	nop

c00124ae <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124ae:	b8 0a 00 00 00       	mov    eax,0xa
c00124b3:	c3                   	ret    

c00124b4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124b4:	b8 0a 00 00 00       	mov    eax,0xa
c00124b9:	c3                   	ret    

c00124ba <File::~File()>:
c00124ba:	83 ec 0c             	sub    esp,0xc
c00124bd:	ba a0 72 02 c0       	mov    edx,0xc00272a0
c00124c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c6:	89 10                	mov    DWORD PTR [eax],edx
c00124c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	50                   	push   eax
c00124d0:	e8 49 eb ff ff       	call   c001101e <UnixFile::~UnixFile()>
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	90                   	nop
c00124d9:	83 c4 0c             	add    esp,0xc
c00124dc:	c3                   	ret    
c00124dd:	90                   	nop

c00124de <File::~File()>:
c00124de:	83 ec 0c             	sub    esp,0xc
c00124e1:	83 ec 0c             	sub    esp,0xc
c00124e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124e8:	e8 cd ff ff ff       	call   c00124ba <File::~File()>
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	83 ec 08             	sub    esp,0x8
c00124f3:	68 14 01 00 00       	push   0x114
c00124f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124fc:	e8 70 fc ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0012501:	83 c4 10             	add    esp,0x10
c0012504:	83 c4 0c             	add    esp,0xc
c0012507:	c3                   	ret    

c0012508 <Directory::~Directory()>:
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	ba bc 72 02 c0       	mov    edx,0xc00272bc
c0012510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012514:	89 10                	mov    DWORD PTR [eax],edx
c0012516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251a:	83 ec 0c             	sub    esp,0xc
c001251d:	50                   	push   eax
c001251e:	e8 fb ea ff ff       	call   c001101e <UnixFile::~UnixFile()>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	90                   	nop
c0012527:	83 c4 0c             	add    esp,0xc
c001252a:	c3                   	ret    
c001252b:	90                   	nop

c001252c <Directory::~Directory()>:
c001252c:	83 ec 0c             	sub    esp,0xc
c001252f:	83 ec 0c             	sub    esp,0xc
c0012532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012536:	e8 cd ff ff ff       	call   c0012508 <Directory::~Directory()>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	83 ec 08             	sub    esp,0x8
c0012541:	68 14 01 00 00       	push   0x114
c0012546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001254a:	e8 22 fc ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	83 c4 0c             	add    esp,0xc
c0012555:	c3                   	ret    

c0012556 <Filesystem::Filesystem()>:
c0012556:	ba 3c 72 02 c0       	mov    edx,0xc002723c
c001255b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001255f:	89 10                	mov    DWORD PTR [eax],edx
c0012561:	8b 15 48 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a648
c0012567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001256b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001256e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012572:	a3 48 a6 02 c0       	mov    ds:0xc002a648,eax
c0012577:	90                   	nop
c0012578:	c3                   	ret    
c0012579:	90                   	nop

c001257a <Filesystem::~Filesystem()>:
c001257a:	ba 3c 72 02 c0       	mov    edx,0xc002723c
c001257f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012583:	89 10                	mov    DWORD PTR [eax],edx
c0012585:	90                   	nop
c0012586:	c3                   	ret    
c0012587:	90                   	nop

c0012588 <Filesystem::~Filesystem()>:
c0012588:	83 ec 0c             	sub    esp,0xc
c001258b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001258f:	e8 e6 ff ff ff       	call   c001257a <Filesystem::~Filesystem()>
c0012594:	83 c4 04             	add    esp,0x4
c0012597:	83 ec 08             	sub    esp,0x8
c001259a:	6a 08                	push   0x8
c001259c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a0:	e8 cc fb ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00125a5:	83 c4 10             	add    esp,0x10
c00125a8:	83 c4 0c             	add    esp,0xc
c00125ab:	c3                   	ret    

c00125ac <initVFS()>:
c00125ac:	83 ec 18             	sub    esp,0x18
c00125af:	6a 08                	push   0x8
c00125b1:	e8 ac fb ff ff       	call   c0012162 <operator new(unsigned long)>
c00125b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00125b9:	e8 4a bf 00 00       	call   c001e508 <FAT::FAT()>
c00125be:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125c5:	e8 98 fb ff ff       	call   c0012162 <operator new(unsigned long)>
c00125ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00125cd:	e8 ac d1 00 00       	call   c001f77e <ISO9660::ISO9660()>
c00125d2:	83 c4 1c             	add    esp,0x1c
c00125d5:	c3                   	ret    

c00125d6 <standardiseFiles(char*, char const*, char const*)>:
c00125d6:	55                   	push   ebp
c00125d7:	57                   	push   edi
c00125d8:	56                   	push   esi
c00125d9:	53                   	push   ebx
c00125da:	81 ec 10 04 00 00    	sub    esp,0x410
c00125e0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00125e7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00125ee:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00125f5:	68 00 04 00 00       	push   0x400
c00125fa:	6a 00                	push   0x0
c00125fc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012600:	56                   	push   esi
c0012601:	e8 e0 e0 fe ff       	call   c00006e6 <memset>
c0012606:	83 c4 10             	add    esp,0x10
c0012609:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001260d:	75 0b                	jne    c001261a <standardiseFiles(char*, char const*, char const*)+0x44>
c001260f:	50                   	push   eax
c0012610:	50                   	push   eax
c0012611:	57                   	push   edi
c0012612:	56                   	push   esi
c0012613:	e8 6d e1 fe ff       	call   c0000785 <strcpy>
c0012618:	eb 41                	jmp    c001265b <standardiseFiles(char*, char const*, char const*)+0x85>
c001261a:	8a 07                	mov    al,BYTE PTR [edi]
c001261c:	3c 5c                	cmp    al,0x5c
c001261e:	74 04                	je     c0012624 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012620:	3c 2f                	cmp    al,0x2f
c0012622:	75 18                	jne    c001263c <standardiseFiles(char*, char const*, char const*)+0x66>
c0012624:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012627:	3c 60                	cmp    al,0x60
c0012629:	7e 03                	jle    c001262e <standardiseFiles(char*, char const*, char const*)+0x58>
c001262b:	83 e8 20             	sub    eax,0x20
c001262e:	88 04 24             	mov    BYTE PTR [esp],al
c0012631:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012638:	50                   	push   eax
c0012639:	50                   	push   eax
c001263a:	eb 18                	jmp    c0012654 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001263c:	50                   	push   eax
c001263d:	50                   	push   eax
c001263e:	55                   	push   ebp
c001263f:	56                   	push   esi
c0012640:	e8 40 e1 fe ff       	call   c0000785 <strcpy>
c0012645:	5a                   	pop    edx
c0012646:	59                   	pop    ecx
c0012647:	68 68 86 02 c0       	push   0xc0028668
c001264c:	56                   	push   esi
c001264d:	e8 ea e1 fe ff       	call   c000083c <strcat>
c0012652:	5d                   	pop    ebp
c0012653:	58                   	pop    eax
c0012654:	57                   	push   edi
c0012655:	56                   	push   esi
c0012656:	e8 e1 e1 fe ff       	call   c000083c <strcat>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012661:	3c 60                	cmp    al,0x60
c0012663:	7e 03                	jle    c0012668 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012665:	83 e8 20             	sub    eax,0x20
c0012668:	88 04 24             	mov    BYTE PTR [esp],al
c001266b:	88 03                	mov    BYTE PTR [ebx],al
c001266d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012674:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001267a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001267e:	bf 03 00 00 00       	mov    edi,0x3
c0012683:	b8 03 00 00 00       	mov    eax,0x3
c0012688:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001268b:	84 d2                	test   dl,dl
c001268d:	0f 84 91 00 00 00    	je     c0012724 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012693:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012696:	80 fa 5c             	cmp    dl,0x5c
c0012699:	74 05                	je     c00126a0 <standardiseFiles(char*, char const*, char const*)+0xca>
c001269b:	80 fa 2f             	cmp    dl,0x2f
c001269e:	75 12                	jne    c00126b2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126a0:	89 c5                	mov    ebp,eax
c00126a2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00126a7:	74 09                	je     c00126b2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126a9:	40                   	inc    eax
c00126aa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126ae:	89 cf                	mov    edi,ecx
c00126b0:	eb d6                	jmp    c0012688 <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126b2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126b7:	75 5b                	jne    c0012714 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126b9:	80 fa 2e             	cmp    dl,0x2e
c00126bc:	75 56                	jne    c0012714 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126be:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126c2:	74 19                	je     c00126dd <standardiseFiles(char*, char const*, char const*)+0x107>
c00126c4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126c9:	74 53                	je     c001271e <standardiseFiles(char*, char const*, char const*)+0x148>
c00126cb:	89 f9                	mov    ecx,edi
c00126cd:	41                   	inc    ecx
c00126ce:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126d1:	80 fa 2f             	cmp    dl,0x2f
c00126d4:	74 f7                	je     c00126cd <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126d6:	80 fa 5c             	cmp    dl,0x5c
c00126d9:	74 f2                	je     c00126cd <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126db:	eb d1                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126dd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126e2:	74 3a                	je     c001271e <standardiseFiles(char*, char const*, char const*)+0x148>
c00126e4:	83 f8 03             	cmp    eax,0x3
c00126e7:	74 c5                	je     c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126e9:	41                   	inc    ecx
c00126ea:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126ed:	80 fa 2f             	cmp    dl,0x2f
c00126f0:	74 f7                	je     c00126e9 <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f2:	80 fa 5c             	cmp    dl,0x5c
c00126f5:	74 f2                	je     c00126e9 <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f7:	48                   	dec    eax
c00126f8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126fc:	75 06                	jne    c0012704 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00126fe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012702:	eb f3                	jmp    c00126f7 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012704:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012708:	74 07                	je     c0012711 <standardiseFiles(char*, char const*, char const*)+0x13b>
c001270a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001270e:	48                   	dec    eax
c001270f:	eb f3                	jmp    c0012704 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012711:	40                   	inc    eax
c0012712:	eb 9a                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012714:	80 fa 2f             	cmp    dl,0x2f
c0012717:	74 95                	je     c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012719:	80 fa 5c             	cmp    dl,0x5c
c001271c:	74 90                	je     c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c001271e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012721:	40                   	inc    eax
c0012722:	eb 8a                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012724:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012728:	83 ec 0c             	sub    esp,0xc
c001272b:	53                   	push   ebx
c001272c:	e8 d2 df fe ff       	call   c0000703 <strlen>
c0012731:	83 c4 10             	add    esp,0x10
c0012734:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012739:	75 26                	jne    c0012761 <standardiseFiles(char*, char const*, char const*)+0x18b>
c001273b:	83 ec 0c             	sub    esp,0xc
c001273e:	53                   	push   ebx
c001273f:	e8 bf df fe ff       	call   c0000703 <strlen>
c0012744:	83 c4 10             	add    esp,0x10
c0012747:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001274c:	74 26                	je     c0012774 <standardiseFiles(char*, char const*, char const*)+0x19e>
c001274e:	83 ec 0c             	sub    esp,0xc
c0012751:	53                   	push   ebx
c0012752:	e8 ac df fe ff       	call   c0000703 <strlen>
c0012757:	83 c4 10             	add    esp,0x10
c001275a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001275f:	eb c7                	jmp    c0012728 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012761:	83 ec 0c             	sub    esp,0xc
c0012764:	53                   	push   ebx
c0012765:	e8 99 df fe ff       	call   c0000703 <strlen>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012772:	74 c7                	je     c001273b <standardiseFiles(char*, char const*, char const*)+0x165>
c0012774:	81 c4 0c 04 00 00    	add    esp,0x40c
c001277a:	5b                   	pop    ebx
c001277b:	5e                   	pop    esi
c001277c:	5f                   	pop    edi
c001277d:	5d                   	pop    ebp
c001277e:	c3                   	ret    
c001277f:	90                   	nop

c0012780 <File::File(char const*, Process*)>:
c0012780:	83 ec 0c             	sub    esp,0xc
c0012783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012787:	83 ec 08             	sub    esp,0x8
c001278a:	6a 00                	push   0x0
c001278c:	50                   	push   eax
c001278d:	e8 ea e6 ff ff       	call   c0010e7c <UnixFile::UnixFile(int)>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	ba a0 72 02 c0       	mov    edx,0xc00272a0
c001279a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001279e:	89 10                	mov    DWORD PTR [eax],edx
c00127a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127a4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ae:	83 c0 0d             	add    eax,0xd
c00127b1:	83 ec 04             	sub    esp,0x4
c00127b4:	52                   	push   edx
c00127b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127b9:	50                   	push   eax
c00127ba:	e8 17 fe ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c00127bf:	83 c4 10             	add    esp,0x10
c00127c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127c9:	8d 50 bf             	lea    edx,[eax-0x41]
c00127cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127da:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00127de:	90                   	nop
c00127df:	83 c4 0c             	add    esp,0xc
c00127e2:	c3                   	ret    
c00127e3:	90                   	nop

c00127e4 <File::open(FileOpenMode)>:
c00127e4:	53                   	push   ebx
c00127e5:	b8 0b 00 00 00       	mov    eax,0xb
c00127ea:	83 ec 08             	sub    esp,0x8
c00127ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127f1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00127f8:	80 fa 19             	cmp    dl,0x19
c00127fb:	77 40                	ja     c001283d <File::open(FileOpenMode)+0x59>
c00127fd:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c0012804:	85 d2                	test   edx,edx
c0012806:	74 35                	je     c001283d <File::open(FileOpenMode)+0x59>
c0012808:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001280e:	85 d2                	test   edx,edx
c0012810:	74 2b                	je     c001283d <File::open(FileOpenMode)+0x59>
c0012812:	b8 06 00 00 00       	mov    eax,0x6
c0012817:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001281b:	75 20                	jne    c001283d <File::open(FileOpenMode)+0x59>
c001281d:	8b 02                	mov    eax,DWORD PTR [edx]
c001281f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012829:	51                   	push   ecx
c001282a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001282d:	51                   	push   ecx
c001282e:	52                   	push   edx
c001282f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012832:	83 c4 10             	add    esp,0x10
c0012835:	85 c0                	test   eax,eax
c0012837:	75 04                	jne    c001283d <File::open(FileOpenMode)+0x59>
c0012839:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001283d:	83 c4 08             	add    esp,0x8
c0012840:	5b                   	pop    ebx
c0012841:	c3                   	ret    

c0012842 <File::close()>:
c0012842:	53                   	push   ebx
c0012843:	b8 0b 00 00 00       	mov    eax,0xb
c0012848:	83 ec 08             	sub    esp,0x8
c001284b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001284f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012856:	80 fa 19             	cmp    dl,0x19
c0012859:	77 41                	ja     c001289c <File::close()+0x5a>
c001285b:	8b 1c 95 e0 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5520]
c0012862:	85 db                	test   ebx,ebx
c0012864:	74 36                	je     c001289c <File::close()+0x5a>
c0012866:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001286d:	74 2d                	je     c001289c <File::close()+0x5a>
c001286f:	b8 05 00 00 00       	mov    eax,0x5
c0012874:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012878:	74 22                	je     c001289c <File::close()+0x5a>
c001287a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001287e:	8b 04 95 e0 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5520]
c0012885:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001288b:	53                   	push   ebx
c001288c:	53                   	push   ebx
c001288d:	8b 10                	mov    edx,DWORD PTR [eax]
c001288f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012895:	50                   	push   eax
c0012896:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012899:	83 c4 10             	add    esp,0x10
c001289c:	83 c4 08             	add    esp,0x8
c001289f:	5b                   	pop    ebx
c00128a0:	c3                   	ret    
c00128a1:	90                   	nop

c00128a2 <File::seek(unsigned long long)>:
c00128a2:	56                   	push   esi
c00128a3:	53                   	push   ebx
c00128a4:	b8 0b 00 00 00       	mov    eax,0xb
c00128a9:	51                   	push   ecx
c00128aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128b2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128bd:	80 fa 19             	cmp    dl,0x19
c00128c0:	77 31                	ja     c00128f3 <File::seek(unsigned long long)+0x51>
c00128c2:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c00128c9:	85 d2                	test   edx,edx
c00128cb:	74 26                	je     c00128f3 <File::seek(unsigned long long)+0x51>
c00128cd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128d3:	85 d2                	test   edx,edx
c00128d5:	74 1c                	je     c00128f3 <File::seek(unsigned long long)+0x51>
c00128d7:	b8 05 00 00 00       	mov    eax,0x5
c00128dc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00128e0:	74 11                	je     c00128f3 <File::seek(unsigned long long)+0x51>
c00128e2:	8b 02                	mov    eax,DWORD PTR [edx]
c00128e4:	53                   	push   ebx
c00128e5:	51                   	push   ecx
c00128e6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00128ec:	52                   	push   edx
c00128ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	5a                   	pop    edx
c00128f4:	5b                   	pop    ebx
c00128f5:	5e                   	pop    esi
c00128f6:	c3                   	ret    
c00128f7:	90                   	nop

c00128f8 <File::tell(unsigned long long*)>:
c00128f8:	83 ec 0c             	sub    esp,0xc
c00128fb:	b8 0b 00 00 00       	mov    eax,0xb
c0012900:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012904:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001290b:	80 fa 19             	cmp    dl,0x19
c001290e:	77 34                	ja     c0012944 <File::tell(unsigned long long*)+0x4c>
c0012910:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c0012917:	85 d2                	test   edx,edx
c0012919:	74 29                	je     c0012944 <File::tell(unsigned long long*)+0x4c>
c001291b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012921:	85 d2                	test   edx,edx
c0012923:	74 1f                	je     c0012944 <File::tell(unsigned long long*)+0x4c>
c0012925:	b8 05 00 00 00       	mov    eax,0x5
c001292a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001292e:	74 14                	je     c0012944 <File::tell(unsigned long long*)+0x4c>
c0012930:	50                   	push   eax
c0012931:	8b 02                	mov    eax,DWORD PTR [edx]
c0012933:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012937:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001293d:	52                   	push   edx
c001293e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	83 c4 0c             	add    esp,0xc
c0012947:	c3                   	ret    

c0012948 <File::rewind()>:
c0012948:	83 ec 10             	sub    esp,0x10
c001294b:	6a 00                	push   0x0
c001294d:	6a 00                	push   0x0
c001294f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012953:	e8 4a ff ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c0012958:	83 c4 1c             	add    esp,0x1c
c001295b:	c3                   	ret    

c001295c <File::unlink()>:
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	b8 0b 00 00 00       	mov    eax,0xb
c0012964:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012968:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001296f:	80 f9 19             	cmp    cl,0x19
c0012972:	77 2f                	ja     c00129a3 <File::unlink()+0x47>
c0012974:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c001297b:	85 c9                	test   ecx,ecx
c001297d:	74 24                	je     c00129a3 <File::unlink()+0x47>
c001297f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012985:	85 c9                	test   ecx,ecx
c0012987:	74 1a                	je     c00129a3 <File::unlink()+0x47>
c0012989:	b8 06 00 00 00       	mov    eax,0x6
c001298e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012992:	75 0f                	jne    c00129a3 <File::unlink()+0x47>
c0012994:	83 c2 0d             	add    edx,0xd
c0012997:	50                   	push   eax
c0012998:	50                   	push   eax
c0012999:	8b 01                	mov    eax,DWORD PTR [ecx]
c001299b:	52                   	push   edx
c001299c:	51                   	push   ecx
c001299d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00129a0:	83 c4 10             	add    esp,0x10
c00129a3:	83 c4 0c             	add    esp,0xc
c00129a6:	c3                   	ret    
c00129a7:	90                   	nop

c00129a8 <File::rename(char const*)>:
c00129a8:	83 ec 0c             	sub    esp,0xc
c00129ab:	b8 0b 00 00 00       	mov    eax,0xb
c00129b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129bb:	80 f9 19             	cmp    cl,0x19
c00129be:	77 32                	ja     c00129f2 <File::rename(char const*)+0x4a>
c00129c0:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c00129c7:	85 c9                	test   ecx,ecx
c00129c9:	74 27                	je     c00129f2 <File::rename(char const*)+0x4a>
c00129cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129d1:	85 c9                	test   ecx,ecx
c00129d3:	74 1d                	je     c00129f2 <File::rename(char const*)+0x4a>
c00129d5:	b8 06 00 00 00       	mov    eax,0x6
c00129da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129de:	75 12                	jne    c00129f2 <File::rename(char const*)+0x4a>
c00129e0:	83 c2 0d             	add    edx,0xd
c00129e3:	50                   	push   eax
c00129e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129ea:	52                   	push   edx
c00129eb:	51                   	push   ecx
c00129ec:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	83 c4 0c             	add    esp,0xc
c00129f5:	c3                   	ret    

c00129f6 <File::chfatattr(unsigned char, unsigned char)>:
c00129f6:	57                   	push   edi
c00129f7:	b8 0b 00 00 00       	mov    eax,0xb
c00129fc:	56                   	push   esi
c00129fd:	53                   	push   ebx
c00129fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a02:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a06:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a0d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a11:	80 f9 19             	cmp    cl,0x19
c0012a14:	77 37                	ja     c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a16:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0012a1d:	85 c9                	test   ecx,ecx
c0012a1f:	74 2c                	je     c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a21:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a27:	85 c9                	test   ecx,ecx
c0012a29:	74 22                	je     c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a2b:	b8 06 00 00 00       	mov    eax,0x6
c0012a30:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a34:	75 17                	jne    c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a36:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a38:	89 f0                	mov    eax,esi
c0012a3a:	83 c2 0d             	add    edx,0xd
c0012a3d:	0f b6 f0             	movzx  esi,al
c0012a40:	0f b6 db             	movzx  ebx,bl
c0012a43:	56                   	push   esi
c0012a44:	53                   	push   ebx
c0012a45:	52                   	push   edx
c0012a46:	51                   	push   ecx
c0012a47:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a4a:	83 c4 10             	add    esp,0x10
c0012a4d:	5b                   	pop    ebx
c0012a4e:	5e                   	pop    esi
c0012a4f:	5f                   	pop    edi
c0012a50:	c3                   	ret    
c0012a51:	90                   	nop

c0012a52 <File::exists()>:
c0012a52:	83 ec 0c             	sub    esp,0xc
c0012a55:	31 c0                	xor    eax,eax
c0012a57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a5b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a62:	80 f9 19             	cmp    cl,0x19
c0012a65:	77 24                	ja     c0012a8b <File::exists()+0x39>
c0012a67:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0012a6e:	85 c9                	test   ecx,ecx
c0012a70:	74 19                	je     c0012a8b <File::exists()+0x39>
c0012a72:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a78:	85 c9                	test   ecx,ecx
c0012a7a:	74 0f                	je     c0012a8b <File::exists()+0x39>
c0012a7c:	83 c2 0d             	add    edx,0xd
c0012a7f:	50                   	push   eax
c0012a80:	50                   	push   eax
c0012a81:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a83:	52                   	push   edx
c0012a84:	51                   	push   ecx
c0012a85:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	83 c4 0c             	add    esp,0xc
c0012a8e:	c3                   	ret    
c0012a8f:	90                   	nop

c0012a90 <File::stat(unsigned long long*, bool*)>:
c0012a90:	56                   	push   esi
c0012a91:	53                   	push   ebx
c0012a92:	50                   	push   eax
c0012a93:	b8 0b 00 00 00       	mov    eax,0xb
c0012a98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a9c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012aa0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aa7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012aab:	80 f9 19             	cmp    cl,0x19
c0012aae:	77 3d                	ja     c0012aed <File::stat(unsigned long long*, bool*)+0x5d>
c0012ab0:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0012ab7:	85 c9                	test   ecx,ecx
c0012ab9:	74 32                	je     c0012aed <File::stat(unsigned long long*, bool*)+0x5d>
c0012abb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ac1:	85 c9                	test   ecx,ecx
c0012ac3:	74 28                	je     c0012aed <File::stat(unsigned long long*, bool*)+0x5d>
c0012ac5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ac7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012acb:	74 13                	je     c0012ae0 <File::stat(unsigned long long*, bool*)+0x50>
c0012acd:	83 ec 04             	sub    esp,0x4
c0012ad0:	56                   	push   esi
c0012ad1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ad7:	51                   	push   ecx
c0012ad8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012adb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ade:	eb 0a                	jmp    c0012aea <File::stat(unsigned long long*, bool*)+0x5a>
c0012ae0:	53                   	push   ebx
c0012ae1:	83 c2 0d             	add    edx,0xd
c0012ae4:	56                   	push   esi
c0012ae5:	52                   	push   edx
c0012ae6:	51                   	push   ecx
c0012ae7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012aea:	83 c4 10             	add    esp,0x10
c0012aed:	5a                   	pop    edx
c0012aee:	5b                   	pop    ebx
c0012aef:	5e                   	pop    esi
c0012af0:	c3                   	ret    

c0012af1 <getcwd(Process*, char*, int)>:
c0012af1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012af5:	31 c0                	xor    eax,eax
c0012af7:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012afa:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012afe:	7d 15                	jge    c0012b15 <getcwd(Process*, char*, int)+0x24>
c0012b00:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b04:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b0b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b0e:	84 c9                	test   cl,cl
c0012b10:	74 06                	je     c0012b18 <getcwd(Process*, char*, int)+0x27>
c0012b12:	40                   	inc    eax
c0012b13:	eb e2                	jmp    c0012af7 <getcwd(Process*, char*, int)+0x6>
c0012b15:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b18:	31 c0                	xor    eax,eax
c0012b1a:	c3                   	ret    

c0012b1b <setcwd(Process*, char*)>:
c0012b1b:	55                   	push   ebp
c0012b1c:	57                   	push   edi
c0012b1d:	56                   	push   esi
c0012b1e:	53                   	push   ebx
c0012b1f:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b25:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b2c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b32:	57                   	push   edi
c0012b33:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b3a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b3e:	56                   	push   esi
c0012b3f:	e8 92 fa ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c0012b44:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b47:	e8 b7 db fe ff       	call   c0000703 <strlen>
c0012b4c:	83 c4 10             	add    esp,0x10
c0012b4f:	83 f8 02             	cmp    eax,0x2
c0012b52:	77 17                	ja     c0012b6b <setcwd(Process*, char*)+0x50>
c0012b54:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b59:	83 e8 41             	sub    eax,0x41
c0012b5c:	83 f8 19             	cmp    eax,0x19
c0012b5f:	76 24                	jbe    c0012b85 <setcwd(Process*, char*)+0x6a>
c0012b61:	b8 03 00 00 00       	mov    eax,0x3
c0012b66:	e9 cb 00 00 00       	jmp    c0012c36 <setcwd(Process*, char*)+0x11b>
c0012b6b:	83 ec 0c             	sub    esp,0xc
c0012b6e:	56                   	push   esi
c0012b6f:	e8 8f db fe ff       	call   c0000703 <strlen>
c0012b74:	83 c4 10             	add    esp,0x10
c0012b77:	83 f8 03             	cmp    eax,0x3
c0012b7a:	75 33                	jne    c0012baf <setcwd(Process*, char*)+0x94>
c0012b7c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012b81:	75 2c                	jne    c0012baf <setcwd(Process*, char*)+0x94>
c0012b83:	eb cf                	jmp    c0012b54 <setcwd(Process*, char*)+0x39>
c0012b85:	8b 14 85 e0 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5520]
c0012b8c:	b8 05 00 00 00       	mov    eax,0x5
c0012b91:	85 d2                	test   edx,edx
c0012b93:	0f 84 9d 00 00 00    	je     c0012c36 <setcwd(Process*, char*)+0x11b>
c0012b99:	b8 06 00 00 00       	mov    eax,0x6
c0012b9e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ba5:	0f 84 8b 00 00 00    	je     c0012c36 <setcwd(Process*, char*)+0x11b>
c0012bab:	51                   	push   ecx
c0012bac:	51                   	push   ecx
c0012bad:	eb 7b                	jmp    c0012c2a <setcwd(Process*, char*)+0x10f>
c0012baf:	83 ec 0c             	sub    esp,0xc
c0012bb2:	68 14 01 00 00       	push   0x114
c0012bb7:	e8 a6 f5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0012bbc:	83 c4 0c             	add    esp,0xc
c0012bbf:	89 c3                	mov    ebx,eax
c0012bc1:	55                   	push   ebp
c0012bc2:	56                   	push   esi
c0012bc3:	50                   	push   eax
c0012bc4:	e8 b7 fb ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0012bc9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bce:	83 c4 0c             	add    esp,0xc
c0012bd1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bd5:	50                   	push   eax
c0012bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bda:	50                   	push   eax
c0012bdb:	53                   	push   ebx
c0012bdc:	e8 af fe ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c0012be1:	83 c4 10             	add    esp,0x10
c0012be4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012be6:	83 f8 02             	cmp    eax,0x2
c0012be9:	75 09                	jne    c0012bf4 <setcwd(Process*, char*)+0xd9>
c0012beb:	83 ec 0c             	sub    esp,0xc
c0012bee:	53                   	push   ebx
c0012bef:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012bf2:	eb 0d                	jmp    c0012c01 <setcwd(Process*, char*)+0xe6>
c0012bf4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012bf7:	85 c0                	test   eax,eax
c0012bf9:	74 10                	je     c0012c0b <setcwd(Process*, char*)+0xf0>
c0012bfb:	83 ec 0c             	sub    esp,0xc
c0012bfe:	53                   	push   ebx
c0012bff:	ff d2                	call   edx
c0012c01:	83 c4 10             	add    esp,0x10
c0012c04:	b8 01 00 00 00       	mov    eax,0x1
c0012c09:	eb 2b                	jmp    c0012c36 <setcwd(Process*, char*)+0x11b>
c0012c0b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c10:	75 10                	jne    c0012c22 <setcwd(Process*, char*)+0x107>
c0012c12:	83 ec 0c             	sub    esp,0xc
c0012c15:	53                   	push   ebx
c0012c16:	ff d2                	call   edx
c0012c18:	83 c4 10             	add    esp,0x10
c0012c1b:	b8 02 00 00 00       	mov    eax,0x2
c0012c20:	eb 14                	jmp    c0012c36 <setcwd(Process*, char*)+0x11b>
c0012c22:	83 ec 0c             	sub    esp,0xc
c0012c25:	53                   	push   ebx
c0012c26:	ff d2                	call   edx
c0012c28:	58                   	pop    eax
c0012c29:	5a                   	pop    edx
c0012c2a:	56                   	push   esi
c0012c2b:	57                   	push   edi
c0012c2c:	e8 54 db fe ff       	call   c0000785 <strcpy>
c0012c31:	83 c4 10             	add    esp,0x10
c0012c34:	31 c0                	xor    eax,eax
c0012c36:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c3c:	5b                   	pop    ebx
c0012c3d:	5e                   	pop    esi
c0012c3e:	5f                   	pop    edi
c0012c3f:	5d                   	pop    ebp
c0012c40:	c3                   	ret    
c0012c41:	90                   	nop

c0012c42 <Directory::Directory(char const*, Process*)>:
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c49:	83 ec 08             	sub    esp,0x8
c0012c4c:	6a 00                	push   0x0
c0012c4e:	50                   	push   eax
c0012c4f:	e8 28 e2 ff ff       	call   c0010e7c <UnixFile::UnixFile(int)>
c0012c54:	83 c4 10             	add    esp,0x10
c0012c57:	ba bc 72 02 c0       	mov    edx,0xc00272bc
c0012c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c60:	89 10                	mov    DWORD PTR [eax],edx
c0012c62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c70:	83 c0 0d             	add    eax,0xd
c0012c73:	83 ec 04             	sub    esp,0x4
c0012c76:	52                   	push   edx
c0012c77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c7b:	50                   	push   eax
c0012c7c:	e8 55 f9 ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c0012c81:	83 c4 10             	add    esp,0x10
c0012c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c88:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c8b:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c92:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ca0:	90                   	nop
c0012ca1:	83 c4 0c             	add    esp,0xc
c0012ca4:	c3                   	ret    
c0012ca5:	90                   	nop

c0012ca6 <Directory::open()>:
c0012ca6:	53                   	push   ebx
c0012ca7:	b8 0b 00 00 00       	mov    eax,0xb
c0012cac:	83 ec 08             	sub    esp,0x8
c0012caf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cb3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cba:	80 fa 19             	cmp    dl,0x19
c0012cbd:	77 3d                	ja     c0012cfc <Directory::open()+0x56>
c0012cbf:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c0012cc6:	85 d2                	test   edx,edx
c0012cc8:	74 32                	je     c0012cfc <Directory::open()+0x56>
c0012cca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cd0:	85 d2                	test   edx,edx
c0012cd2:	74 28                	je     c0012cfc <Directory::open()+0x56>
c0012cd4:	b8 06 00 00 00       	mov    eax,0x6
c0012cd9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cdd:	75 1d                	jne    c0012cfc <Directory::open()+0x56>
c0012cdf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ce5:	50                   	push   eax
c0012ce6:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ce8:	51                   	push   ecx
c0012ce9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cec:	51                   	push   ecx
c0012ced:	52                   	push   edx
c0012cee:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012cf1:	83 c4 10             	add    esp,0x10
c0012cf4:	85 c0                	test   eax,eax
c0012cf6:	75 04                	jne    c0012cfc <Directory::open()+0x56>
c0012cf8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cfc:	83 c4 08             	add    esp,0x8
c0012cff:	5b                   	pop    ebx
c0012d00:	c3                   	ret    
c0012d01:	90                   	nop

c0012d02 <Directory::close()>:
c0012d02:	53                   	push   ebx
c0012d03:	b8 0b 00 00 00       	mov    eax,0xb
c0012d08:	83 ec 08             	sub    esp,0x8
c0012d0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d0f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d16:	80 fa 19             	cmp    dl,0x19
c0012d19:	77 41                	ja     c0012d5c <Directory::close()+0x5a>
c0012d1b:	8b 1c 95 e0 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5520]
c0012d22:	85 db                	test   ebx,ebx
c0012d24:	74 36                	je     c0012d5c <Directory::close()+0x5a>
c0012d26:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d2d:	74 2d                	je     c0012d5c <Directory::close()+0x5a>
c0012d2f:	b8 05 00 00 00       	mov    eax,0x5
c0012d34:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d38:	74 22                	je     c0012d5c <Directory::close()+0x5a>
c0012d3a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d3e:	8b 04 95 e0 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5520]
c0012d45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d4b:	53                   	push   ebx
c0012d4c:	53                   	push   ebx
c0012d4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d4f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d55:	50                   	push   eax
c0012d56:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d59:	83 c4 10             	add    esp,0x10
c0012d5c:	83 c4 08             	add    esp,0x8
c0012d5f:	5b                   	pop    ebx
c0012d60:	c3                   	ret    
c0012d61:	90                   	nop

c0012d62 <Directory::unlink()>:
c0012d62:	83 ec 0c             	sub    esp,0xc
c0012d65:	b8 0b 00 00 00       	mov    eax,0xb
c0012d6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d6e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d75:	80 f9 19             	cmp    cl,0x19
c0012d78:	77 2f                	ja     c0012da9 <Directory::unlink()+0x47>
c0012d7a:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0012d81:	85 c9                	test   ecx,ecx
c0012d83:	74 24                	je     c0012da9 <Directory::unlink()+0x47>
c0012d85:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d8b:	85 c9                	test   ecx,ecx
c0012d8d:	74 1a                	je     c0012da9 <Directory::unlink()+0x47>
c0012d8f:	b8 06 00 00 00       	mov    eax,0x6
c0012d94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d98:	75 0f                	jne    c0012da9 <Directory::unlink()+0x47>
c0012d9a:	83 c2 0d             	add    edx,0xd
c0012d9d:	50                   	push   eax
c0012d9e:	50                   	push   eax
c0012d9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012da1:	52                   	push   edx
c0012da2:	51                   	push   ecx
c0012da3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	83 c4 0c             	add    esp,0xc
c0012dac:	c3                   	ret    
c0012dad:	90                   	nop

c0012dae <Directory::rename(char const*)>:
c0012dae:	83 ec 0c             	sub    esp,0xc
c0012db1:	b8 0b 00 00 00       	mov    eax,0xb
c0012db6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dc1:	80 f9 19             	cmp    cl,0x19
c0012dc4:	77 32                	ja     c0012df8 <Directory::rename(char const*)+0x4a>
c0012dc6:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0012dcd:	85 c9                	test   ecx,ecx
c0012dcf:	74 27                	je     c0012df8 <Directory::rename(char const*)+0x4a>
c0012dd1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dd7:	85 c9                	test   ecx,ecx
c0012dd9:	74 1d                	je     c0012df8 <Directory::rename(char const*)+0x4a>
c0012ddb:	b8 06 00 00 00       	mov    eax,0x6
c0012de0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012de4:	75 12                	jne    c0012df8 <Directory::rename(char const*)+0x4a>
c0012de6:	83 c2 0d             	add    edx,0xd
c0012de9:	50                   	push   eax
c0012dea:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012df0:	52                   	push   edx
c0012df1:	51                   	push   ecx
c0012df2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012df5:	83 c4 10             	add    esp,0x10
c0012df8:	83 c4 0c             	add    esp,0xc
c0012dfb:	c3                   	ret    

c0012dfc <Directory::exists()>:
c0012dfc:	83 ec 0c             	sub    esp,0xc
c0012dff:	31 c0                	xor    eax,eax
c0012e01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e05:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e0c:	80 f9 19             	cmp    cl,0x19
c0012e0f:	77 24                	ja     c0012e35 <Directory::exists()+0x39>
c0012e11:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0012e18:	85 c9                	test   ecx,ecx
c0012e1a:	74 19                	je     c0012e35 <Directory::exists()+0x39>
c0012e1c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e22:	85 c9                	test   ecx,ecx
c0012e24:	74 0f                	je     c0012e35 <Directory::exists()+0x39>
c0012e26:	83 c2 0d             	add    edx,0xd
c0012e29:	50                   	push   eax
c0012e2a:	50                   	push   eax
c0012e2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e2d:	52                   	push   edx
c0012e2e:	51                   	push   ecx
c0012e2f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e32:	83 c4 10             	add    esp,0x10
c0012e35:	83 c4 0c             	add    esp,0xc
c0012e38:	c3                   	ret    
c0012e39:	90                   	nop

c0012e3a <Directory::read(dirent*)>:
c0012e3a:	83 ec 1c             	sub    esp,0x1c
c0012e3d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e42:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e46:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e4d:	80 fa 19             	cmp    dl,0x19
c0012e50:	77 30                	ja     c0012e82 <Directory::read(dirent*)+0x48>
c0012e52:	8b 14 95 e0 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5520]
c0012e59:	85 d2                	test   edx,edx
c0012e5b:	74 25                	je     c0012e82 <Directory::read(dirent*)+0x48>
c0012e5d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e64:	74 1c                	je     c0012e82 <Directory::read(dirent*)+0x48>
c0012e66:	83 ec 0c             	sub    esp,0xc
c0012e69:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e6b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e6f:	52                   	push   edx
c0012e70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e74:	6a 00                	push   0x0
c0012e76:	68 10 01 00 00       	push   0x110
c0012e7b:	51                   	push   ecx
c0012e7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e7f:	83 c4 20             	add    esp,0x20
c0012e82:	83 c4 1c             	add    esp,0x1c
c0012e85:	c3                   	ret    

c0012e86 <Directory::create()>:
c0012e86:	83 ec 0c             	sub    esp,0xc
c0012e89:	b8 0b 00 00 00       	mov    eax,0xb
c0012e8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e99:	80 f9 19             	cmp    cl,0x19
c0012e9c:	77 2f                	ja     c0012ecd <Directory::create()+0x47>
c0012e9e:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c0012ea5:	85 c9                	test   ecx,ecx
c0012ea7:	74 24                	je     c0012ecd <Directory::create()+0x47>
c0012ea9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eaf:	85 c9                	test   ecx,ecx
c0012eb1:	74 1a                	je     c0012ecd <Directory::create()+0x47>
c0012eb3:	b8 06 00 00 00       	mov    eax,0x6
c0012eb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ebc:	75 0f                	jne    c0012ecd <Directory::create()+0x47>
c0012ebe:	83 c2 0d             	add    edx,0xd
c0012ec1:	50                   	push   eax
c0012ec2:	50                   	push   eax
c0012ec3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ec5:	52                   	push   edx
c0012ec6:	51                   	push   ecx
c0012ec7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	83 c4 0c             	add    esp,0xc
c0012ed0:	c3                   	ret    
c0012ed1:	90                   	nop

c0012ed2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ed2:	b8 0a 00 00 00       	mov    eax,0xa
c0012ed7:	c3                   	ret    

c0012ed8 <Bus::Bus(char const*)>:
c0012ed8:	83 ec 0c             	sub    esp,0xc
c0012edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012edf:	83 ec 08             	sub    esp,0x8
c0012ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ee6:	50                   	push   eax
c0012ee7:	e8 60 09 00 00       	call   c001384c <Device::Device(char const*)>
c0012eec:	83 c4 10             	add    esp,0x10
c0012eef:	ba d8 72 02 c0       	mov    edx,0xc00272d8
c0012ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef8:	89 10                	mov    DWORD PTR [eax],edx
c0012efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012efe:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012f08:	90                   	nop
c0012f09:	83 c4 0c             	add    esp,0xc
c0012f0c:	c3                   	ret    
c0012f0d:	90                   	nop

c0012f0e <Bus::~Bus()>:
c0012f0e:	83 ec 0c             	sub    esp,0xc
c0012f11:	ba d8 72 02 c0       	mov    edx,0xc00272d8
c0012f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1a:	89 10                	mov    DWORD PTR [eax],edx
c0012f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	50                   	push   eax
c0012f24:	e8 d5 05 00 00       	call   c00134fe <Device::~Device()>
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	90                   	nop
c0012f2d:	83 c4 0c             	add    esp,0xc
c0012f30:	c3                   	ret    
c0012f31:	90                   	nop

c0012f32 <Bus::~Bus()>:
c0012f32:	83 ec 0c             	sub    esp,0xc
c0012f35:	83 ec 0c             	sub    esp,0xc
c0012f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f3c:	e8 cd ff ff ff       	call   c0012f0e <Bus::~Bus()>
c0012f41:	83 c4 10             	add    esp,0x10
c0012f44:	83 ec 08             	sub    esp,0x8
c0012f47:	68 58 01 00 00       	push   0x158
c0012f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f50:	e8 1c f2 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	83 c4 0c             	add    esp,0xc
c0012f5b:	c3                   	ret    

c0012f5c <Buzzer::Buzzer(char const*)>:
c0012f5c:	83 ec 0c             	sub    esp,0xc
c0012f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f63:	83 ec 08             	sub    esp,0x8
c0012f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6a:	50                   	push   eax
c0012f6b:	e8 dc 08 00 00       	call   c001384c <Device::Device(char const*)>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	ba 04 73 02 c0       	mov    edx,0xc0027304
c0012f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f7c:	89 10                	mov    DWORD PTR [eax],edx
c0012f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f90:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012f9a:	90                   	nop
c0012f9b:	83 c4 0c             	add    esp,0xc
c0012f9e:	c3                   	ret    
c0012f9f:	90                   	nop

c0012fa0 <Buzzer::~Buzzer()>:
c0012fa0:	83 ec 0c             	sub    esp,0xc
c0012fa3:	ba 04 73 02 c0       	mov    edx,0xc0027304
c0012fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fac:	89 10                	mov    DWORD PTR [eax],edx
c0012fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb2:	83 ec 0c             	sub    esp,0xc
c0012fb5:	50                   	push   eax
c0012fb6:	e8 43 05 00 00       	call   c00134fe <Device::~Device()>
c0012fbb:	83 c4 10             	add    esp,0x10
c0012fbe:	90                   	nop
c0012fbf:	83 c4 0c             	add    esp,0xc
c0012fc2:	c3                   	ret    
c0012fc3:	90                   	nop

c0012fc4 <Buzzer::~Buzzer()>:
c0012fc4:	83 ec 0c             	sub    esp,0xc
c0012fc7:	83 ec 0c             	sub    esp,0xc
c0012fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fce:	e8 cd ff ff ff       	call   c0012fa0 <Buzzer::~Buzzer()>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	83 ec 08             	sub    esp,0x8
c0012fd9:	68 5c 01 00 00       	push   0x15c
c0012fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe2:	e8 8a f1 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0012fe7:	83 c4 10             	add    esp,0x10
c0012fea:	83 c4 0c             	add    esp,0xc
c0012fed:	c3                   	ret    

c0012fee <Buzzer::stop()>:
c0012fee:	83 ec 14             	sub    esp,0x14
c0012ff1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff7:	6a 00                	push   0x0
c0012ff9:	50                   	push   eax
c0012ffa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012ffd:	83 c4 1c             	add    esp,0x1c
c0013000:	c3                   	ret    

c0013001 <beepThread(void*)>:
c0013001:	53                   	push   ebx
c0013002:	83 ec 08             	sub    esp,0x8
c0013005:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013009:	e8 1a 96 00 00       	call   c001c628 <unlockScheduler()>
c001300e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013013:	52                   	push   edx
c0013014:	52                   	push   edx
c0013015:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001301b:	52                   	push   edx
c001301c:	50                   	push   eax
c001301d:	e8 4c 9b 00 00       	call   c001cb6e <nanoSleep(unsigned long long)>
c0013022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013025:	e8 c4 ff ff ff       	call   c0012fee <Buzzer::stop()>
c001302a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013032:	83 c4 18             	add    esp,0x18
c0013035:	5b                   	pop    ebx
c0013036:	e9 79 9a 00 00       	jmp    c001cab4 <blockTask(TaskState)>
c001303b:	90                   	nop

c001303c <Buzzer::beep(int, int, bool)>:
c001303c:	57                   	push   edi
c001303d:	56                   	push   esi
c001303e:	53                   	push   ebx
c001303f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013043:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001304b:	52                   	push   edx
c001304c:	52                   	push   edx
c001304d:	8b 06                	mov    eax,DWORD PTR [esi]
c001304f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013053:	56                   	push   esi
c0013054:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	89 f8                	mov    eax,edi
c001305c:	84 c0                	test   al,al
c001305e:	74 1f                	je     c001307f <Buzzer::beep(int, int, bool)+0x43>
c0013060:	50                   	push   eax
c0013061:	50                   	push   eax
c0013062:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013068:	99                   	cdq    
c0013069:	52                   	push   edx
c001306a:	50                   	push   eax
c001306b:	e8 fe 9a 00 00       	call   c001cb6e <nanoSleep(unsigned long long)>
c0013070:	83 c4 10             	add    esp,0x10
c0013073:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013077:	5b                   	pop    ebx
c0013078:	5e                   	pop    esi
c0013079:	5f                   	pop    edi
c001307a:	e9 6f ff ff ff       	jmp    c0012fee <Buzzer::stop()>
c001307f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013085:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001308a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013092:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013096:	c7 44 24 14 01 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013001
c001309e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130a2:	5b                   	pop    ebx
c00130a3:	5e                   	pop    esi
c00130a4:	5f                   	pop    edi
c00130a5:	e9 a6 96 00 00       	jmp    c001c750 <Process::createThread(void (*)(void*), void*, int)>

c00130aa <loadClockSettings()>:
c00130aa:	c7 05 54 a6 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a654,0xa
c00130b4:	c6 05 51 a6 02 c0 00 	mov    BYTE PTR ds:0xc002a651,0x0
c00130bb:	c6 05 50 a6 02 c0 01 	mov    BYTE PTR ds:0xc002a650,0x1
c00130c2:	c3                   	ret    
c00130c3:	90                   	nop

c00130c4 <Clock::Clock(char const*)>:
c00130c4:	83 ec 0c             	sub    esp,0xc
c00130c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130cb:	83 ec 08             	sub    esp,0x8
c00130ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d2:	50                   	push   eax
c00130d3:	e8 74 07 00 00       	call   c001384c <Device::Device(char const*)>
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	ba 34 73 02 c0       	mov    edx,0xc0027334
c00130e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e4:	89 10                	mov    DWORD PTR [eax],edx
c00130e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ea:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00130f4:	90                   	nop
c00130f5:	83 c4 0c             	add    esp,0xc
c00130f8:	c3                   	ret    
c00130f9:	90                   	nop

c00130fa <Clock::~Clock()>:
c00130fa:	83 ec 0c             	sub    esp,0xc
c00130fd:	ba 34 73 02 c0       	mov    edx,0xc0027334
c0013102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013106:	89 10                	mov    DWORD PTR [eax],edx
c0013108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	50                   	push   eax
c0013110:	e8 e9 03 00 00       	call   c00134fe <Device::~Device()>
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	90                   	nop
c0013119:	83 c4 0c             	add    esp,0xc
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <Clock::~Clock()>:
c001311e:	83 ec 0c             	sub    esp,0xc
c0013121:	83 ec 0c             	sub    esp,0xc
c0013124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013128:	e8 cd ff ff ff       	call   c00130fa <Clock::~Clock()>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	83 ec 08             	sub    esp,0x8
c0013133:	68 58 01 00 00       	push   0x158
c0013138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313c:	e8 30 f0 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	83 c4 0c             	add    esp,0xc
c0013147:	c3                   	ret    

c0013148 <Clock::timeInSecondsLocal()>:
c0013148:	53                   	push   ebx
c0013149:	83 ec 14             	sub    esp,0x14
c001314c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013150:	8b 10                	mov    edx,DWORD PTR [eax]
c0013152:	50                   	push   eax
c0013153:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013156:	0f b6 0d 50 a6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a650
c001315d:	03 0d 54 a6 02 c0    	add    ecx,DWORD PTR ds:0xc002a654
c0013163:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013169:	89 cb                	mov    ebx,ecx
c001316b:	c1 fb 1f             	sar    ebx,0x1f
c001316e:	01 c8                	add    eax,ecx
c0013170:	11 da                	adc    edx,ebx
c0013172:	83 c4 10             	add    esp,0x10
c0013175:	31 c9                	xor    ecx,ecx
c0013177:	80 3d 51 a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a651,0x0
c001317e:	74 05                	je     c0013185 <Clock::timeInSecondsLocal()+0x3d>
c0013180:	b9 08 07 00 00       	mov    ecx,0x708
c0013185:	31 db                	xor    ebx,ebx
c0013187:	01 c8                	add    eax,ecx
c0013189:	11 da                	adc    edx,ebx
c001318b:	83 c4 08             	add    esp,0x8
c001318e:	5b                   	pop    ebx
c001318f:	c3                   	ret    

c0013190 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013190:	57                   	push   edi
c0013191:	56                   	push   esi
c0013192:	53                   	push   ebx
c0013193:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013197:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001319b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001319d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131a1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00131a4:	0f b6 05 50 a6 02 c0 	movzx  eax,BYTE PTR ds:0xc002a650
c00131ab:	03 05 54 a6 02 c0    	add    eax,DWORD PTR ds:0xc002a654
c00131b1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131b7:	99                   	cdq    
c00131b8:	29 c6                	sub    esi,eax
c00131ba:	19 d7                	sbb    edi,edx
c00131bc:	89 f0                	mov    eax,esi
c00131be:	89 fa                	mov    edx,edi
c00131c0:	31 f6                	xor    esi,esi
c00131c2:	80 3d 51 a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a651,0x0
c00131c9:	74 05                	je     c00131d0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131cb:	be 08 07 00 00       	mov    esi,0x708
c00131d0:	31 ff                	xor    edi,edi
c00131d2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131d6:	29 f0                	sub    eax,esi
c00131d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131dc:	19 fa                	sbb    edx,edi
c00131de:	89 d8                	mov    eax,ebx
c00131e0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131e4:	5b                   	pop    ebx
c00131e5:	5e                   	pop    esi
c00131e6:	5f                   	pop    edi
c00131e7:	ff e0                	jmp    eax

c00131e9 <datetimeToSeconds(datetime_t)>:
c00131e9:	55                   	push   ebp
c00131ea:	57                   	push   edi
c00131eb:	56                   	push   esi
c00131ec:	53                   	push   ebx
c00131ed:	83 ec 14             	sub    esp,0x14
c00131f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131f4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00131f8:	89 d3                	mov    ebx,edx
c00131fa:	0f b6 c6             	movzx  eax,dh
c00131fd:	c1 eb 10             	shr    ebx,0x10
c0013200:	48                   	dec    eax
c0013201:	66 81 eb 6c 07       	sub    bx,0x76c
c0013206:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001320a:	0f b6 f5             	movzx  esi,ch
c001320d:	89 cf                	mov    edi,ecx
c001320f:	6b f6 3c             	imul   esi,esi,0x3c
c0013212:	c1 ef 10             	shr    edi,0x10
c0013215:	0f b6 c9             	movzx  ecx,cl
c0013218:	89 f8                	mov    eax,edi
c001321a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013220:	0f b6 f8             	movzx  edi,al
c0013223:	0f b6 d2             	movzx  edx,dl
c0013226:	01 fe                	add    esi,edi
c0013228:	01 f1                	add    ecx,esi
c001322a:	0f b7 f3             	movzx  esi,bx
c001322d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013231:	c1 f9 1f             	sar    ecx,0x1f
c0013234:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013239:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001323d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013242:	8b 0c 8d 80 73 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8c80]
c0013249:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001324d:	76 29                	jbe    c0013278 <datetimeToSeconds(datetime_t)+0x8f>
c001324f:	f6 c3 03             	test   bl,0x3
c0013252:	75 24                	jne    c0013278 <datetimeToSeconds(datetime_t)+0x8f>
c0013254:	31 d2                	xor    edx,edx
c0013256:	bf 64 00 00 00       	mov    edi,0x64
c001325b:	89 d8                	mov    eax,ebx
c001325d:	66 f7 f7             	div    di
c0013260:	66 85 d2             	test   dx,dx
c0013263:	75 12                	jne    c0013277 <datetimeToSeconds(datetime_t)+0x8e>
c0013265:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001326b:	bf 90 01 00 00       	mov    edi,0x190
c0013270:	99                   	cdq    
c0013271:	f7 ff                	idiv   edi
c0013273:	85 d2                	test   edx,edx
c0013275:	75 01                	jne    c0013278 <datetimeToSeconds(datetime_t)+0x8f>
c0013277:	41                   	inc    ecx
c0013278:	66 83 fb 46          	cmp    bx,0x46
c001327c:	76 45                	jbe    c00132c3 <datetimeToSeconds(datetime_t)+0xda>
c001327e:	bb 46 00 00 00       	mov    ebx,0x46
c0013283:	bf 64 00 00 00       	mov    edi,0x64
c0013288:	bd 90 01 00 00       	mov    ebp,0x190
c001328d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013292:	f6 c3 03             	test   bl,0x3
c0013295:	75 23                	jne    c00132ba <datetimeToSeconds(datetime_t)+0xd1>
c0013297:	89 d8                	mov    eax,ebx
c0013299:	99                   	cdq    
c001329a:	f7 ff                	idiv   edi
c001329c:	b8 6e 01 00 00       	mov    eax,0x16e
c00132a1:	85 d2                	test   edx,edx
c00132a3:	75 15                	jne    c00132ba <datetimeToSeconds(datetime_t)+0xd1>
c00132a5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132ab:	99                   	cdq    
c00132ac:	f7 fd                	idiv   ebp
c00132ae:	83 fa 01             	cmp    edx,0x1
c00132b1:	19 c0                	sbb    eax,eax
c00132b3:	f7 d0                	not    eax
c00132b5:	05 6e 01 00 00       	add    eax,0x16e
c00132ba:	01 c1                	add    ecx,eax
c00132bc:	43                   	inc    ebx
c00132bd:	39 f3                	cmp    ebx,esi
c00132bf:	7c cc                	jl     c001328d <datetimeToSeconds(datetime_t)+0xa4>
c00132c1:	eb 35                	jmp    c00132f8 <datetimeToSeconds(datetime_t)+0x10f>
c00132c3:	74 33                	je     c00132f8 <datetimeToSeconds(datetime_t)+0x10f>
c00132c5:	b8 45 00 00 00       	mov    eax,0x45
c00132ca:	89 c2                	mov    edx,eax
c00132cc:	83 e2 03             	and    edx,0x3
c00132cf:	39 f0                	cmp    eax,esi
c00132d1:	7e 0f                	jle    c00132e2 <datetimeToSeconds(datetime_t)+0xf9>
c00132d3:	83 fa 01             	cmp    edx,0x1
c00132d6:	19 d2                	sbb    edx,edx
c00132d8:	48                   	dec    eax
c00132d9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00132e0:	eb e8                	jmp    c00132ca <datetimeToSeconds(datetime_t)+0xe1>
c00132e2:	b8 6d 01 00 00       	mov    eax,0x16d
c00132e7:	85 d2                	test   edx,edx
c00132e9:	75 0b                	jne    c00132f6 <datetimeToSeconds(datetime_t)+0x10d>
c00132eb:	66 83 fb 01          	cmp    bx,0x1
c00132ef:	19 c0                	sbb    eax,eax
c00132f1:	05 6e 01 00 00       	add    eax,0x16e
c00132f6:	29 c1                	sub    ecx,eax
c00132f8:	b8 80 51 01 00       	mov    eax,0x15180
c00132fd:	f7 e9                	imul   ecx
c00132ff:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013303:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013307:	83 c4 14             	add    esp,0x14
c001330a:	5b                   	pop    ebx
c001330b:	5e                   	pop    esi
c001330c:	5f                   	pop    edi
c001330d:	5d                   	pop    ebp
c001330e:	c3                   	ret    
c001330f:	90                   	nop

c0013310 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013310:	57                   	push   edi
c0013311:	56                   	push   esi
c0013312:	53                   	push   ebx
c0013313:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013317:	8b 06                	mov    eax,DWORD PTR [esi]
c0013319:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001331c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013320:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013324:	e8 c0 fe ff ff       	call   c00131e9 <datetimeToSeconds(datetime_t)>
c0013329:	59                   	pop    ecx
c001332a:	0f b6 0d 50 a6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a650
c0013331:	5b                   	pop    ebx
c0013332:	03 0d 54 a6 02 c0    	add    ecx,DWORD PTR ds:0xc002a654
c0013338:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001333e:	89 cb                	mov    ebx,ecx
c0013340:	c1 fb 1f             	sar    ebx,0x1f
c0013343:	29 c8                	sub    eax,ecx
c0013345:	19 da                	sbb    edx,ebx
c0013347:	31 c9                	xor    ecx,ecx
c0013349:	80 3d 51 a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a651,0x0
c0013350:	74 05                	je     c0013357 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013352:	b9 08 07 00 00       	mov    ecx,0x708
c0013357:	31 db                	xor    ebx,ebx
c0013359:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001335d:	29 c8                	sub    eax,ecx
c001335f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013363:	19 da                	sbb    edx,ebx
c0013365:	89 f8                	mov    eax,edi
c0013367:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001336b:	5b                   	pop    ebx
c001336c:	5e                   	pop    esi
c001336d:	5f                   	pop    edi
c001336e:	ff e0                	jmp    eax

c0013370 <secondsToDatetime(unsigned long long)>:
c0013370:	55                   	push   ebp
c0013371:	57                   	push   edi
c0013372:	56                   	push   esi
c0013373:	53                   	push   ebx
c0013374:	83 ec 1c             	sub    esp,0x1c
c0013377:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001337b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001337f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013383:	6a 00                	push   0x0
c0013385:	68 80 51 01 00       	push   0x15180
c001338a:	55                   	push   ebp
c001338b:	57                   	push   edi
c001338c:	e8 3f ff 00 00       	call   c00232d0 <__udivdi3>
c0013391:	83 c4 10             	add    esp,0x10
c0013394:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001339a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001339e:	6a 00                	push   0x0
c00133a0:	68 80 51 01 00       	push   0x15180
c00133a5:	55                   	push   ebp
c00133a6:	57                   	push   edi
c00133a7:	bf 10 0e 00 00       	mov    edi,0xe10
c00133ac:	e8 1f 00 01 00       	call   c00233d0 <__umoddi3>
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	99                   	cdq    
c00133b5:	f7 ff                	idiv   edi
c00133b7:	bf 3c 00 00 00       	mov    edi,0x3c
c00133bc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133bf:	89 d0                	mov    eax,edx
c00133c1:	99                   	cdq    
c00133c2:	f7 ff                	idiv   edi
c00133c4:	85 db                	test   ebx,ebx
c00133c6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133c9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133cc:	79 11                	jns    c00133df <secondsToDatetime(unsigned long long)+0x6f>
c00133ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133d2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133d8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133dd:	eb 07                	jmp    c00133e6 <secondsToDatetime(unsigned long long)+0x76>
c00133df:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133e4:	89 d8                	mov    eax,ebx
c00133e6:	bf b4 05 00 00       	mov    edi,0x5b4
c00133eb:	99                   	cdq    
c00133ec:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00133f1:	f7 f9                	idiv   ecx
c00133f3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00133f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133fc:	31 d2                	xor    edx,edx
c00133fe:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013406:	01 c3                	add    ebx,eax
c0013408:	89 d8                	mov    eax,ebx
c001340a:	f7 f1                	div    ecx
c001340c:	31 d2                	xor    edx,edx
c001340e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013411:	89 d8                	mov    eax,ebx
c0013413:	f7 f7                	div    edi
c0013415:	31 d2                	xor    edx,edx
c0013417:	29 c1                	sub    ecx,eax
c0013419:	89 d8                	mov    eax,ebx
c001341b:	f7 f5                	div    ebp
c001341d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013422:	29 c1                	sub    ecx,eax
c0013424:	31 d2                	xor    edx,edx
c0013426:	89 c8                	mov    eax,ecx
c0013428:	f7 f5                	div    ebp
c001342a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001342f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013433:	31 d2                	xor    edx,edx
c0013435:	89 c8                	mov    eax,ecx
c0013437:	f7 f5                	div    ebp
c0013439:	31 d2                	xor    edx,edx
c001343b:	01 c3                	add    ebx,eax
c001343d:	89 c8                	mov    eax,ecx
c001343f:	f7 f7                	div    edi
c0013441:	bf 99 00 00 00       	mov    edi,0x99
c0013446:	29 c3                	sub    ebx,eax
c0013448:	31 d2                	xor    edx,edx
c001344a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013452:	29 c3                	sub    ebx,eax
c0013454:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013457:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001345a:	bb 05 00 00 00       	mov    ebx,0x5
c001345f:	83 c1 02             	add    ecx,0x2
c0013462:	89 c8                	mov    eax,ecx
c0013464:	f7 f7                	div    edi
c0013466:	31 d2                	xor    edx,edx
c0013468:	89 c7                	mov    edi,eax
c001346a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013470:	83 c0 02             	add    eax,0x2
c0013473:	f7 f3                	div    ebx
c0013475:	89 eb                	mov    ebx,ebp
c0013477:	29 c3                	sub    ebx,eax
c0013479:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001347f:	88 1e                	mov    BYTE PTR [esi],bl
c0013481:	19 c0                	sbb    eax,eax
c0013483:	31 d2                	xor    edx,edx
c0013485:	83 e0 0c             	and    eax,0xc
c0013488:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001348c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013494:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013498:	83 f9 01             	cmp    ecx,0x1
c001349b:	0f 96 c2             	setbe  dl
c001349e:	41                   	inc    ecx
c001349f:	01 d0                	add    eax,edx
c00134a1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00134a4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00134a8:	83 c4 1c             	add    esp,0x1c
c00134ab:	89 f0                	mov    eax,esi
c00134ad:	5b                   	pop    ebx
c00134ae:	5e                   	pop    esi
c00134af:	5f                   	pop    edi
c00134b0:	5d                   	pop    ebp
c00134b1:	c2 04 00             	ret    0x4

c00134b4 <Clock::timeInDatetimeLocal()>:
c00134b4:	53                   	push   ebx
c00134b5:	83 ec 14             	sub    esp,0x14
c00134b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134c0:	e8 83 fc ff ff       	call   c0013148 <Clock::timeInSecondsLocal()>
c00134c5:	83 c4 0c             	add    esp,0xc
c00134c8:	52                   	push   edx
c00134c9:	50                   	push   eax
c00134ca:	53                   	push   ebx
c00134cb:	e8 a0 fe ff ff       	call   c0013370 <secondsToDatetime(unsigned long long)>
c00134d0:	89 d8                	mov    eax,ebx
c00134d2:	83 c4 14             	add    esp,0x14
c00134d5:	5b                   	pop    ebx
c00134d6:	c2 04 00             	ret    0x4
c00134d9:	90                   	nop

c00134da <Device::hibernate()>:
c00134da:	c3                   	ret    
c00134db:	90                   	nop

c00134dc <Device::wake()>:
c00134dc:	c3                   	ret    
c00134dd:	90                   	nop

c00134de <Device::detect()>:
c00134de:	c3                   	ret    
c00134df:	90                   	nop

c00134e0 <Device::disableLegacy()>:
c00134e0:	c3                   	ret    
c00134e1:	90                   	nop

c00134e2 <Device::powerSaving(PowerSavingLevel)>:
c00134e2:	c3                   	ret    
c00134e3:	90                   	nop

c00134e4 <DriverlessDevice::close(int, int, void*)>:
c00134e4:	31 c0                	xor    eax,eax
c00134e6:	c3                   	ret    
c00134e7:	90                   	nop

c00134e8 <DriverlessDevice::detect()>:
c00134e8:	c3                   	ret    
c00134e9:	90                   	nop

c00134ea <DriverlessDevice::open(int, int, void*)>:
c00134ea:	83 ec 18             	sub    esp,0x18
c00134ed:	68 b0 73 02 c0       	push   0xc00273b0
c00134f2:	e8 dc 61 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c00134f7:	83 c8 ff             	or     eax,0xffffffff
c00134fa:	83 c4 1c             	add    esp,0x1c
c00134fd:	c3                   	ret    

c00134fe <Device::~Device()>:
c00134fe:	ba d8 73 02 c0       	mov    edx,0xc00273d8
c0013503:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013507:	89 10                	mov    DWORD PTR [eax],edx
c0013509:	90                   	nop
c001350a:	c3                   	ret    
c001350b:	90                   	nop

c001350c <Device::~Device()>:
c001350c:	83 ec 0c             	sub    esp,0xc
c001350f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013513:	e8 e6 ff ff ff       	call   c00134fe <Device::~Device()>
c0013518:	83 c4 04             	add    esp,0x4
c001351b:	83 ec 08             	sub    esp,0x8
c001351e:	68 58 01 00 00       	push   0x158
c0013523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013527:	e8 45 ec ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	83 c4 0c             	add    esp,0xc
c0013532:	c3                   	ret    
c0013533:	90                   	nop

c0013534 <Device::findAndLoadDriver()>:
c0013534:	c3                   	ret    
c0013535:	90                   	nop

c0013536 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013536:	57                   	push   edi
c0013537:	b9 09 00 00 00       	mov    ecx,0x9
c001353c:	56                   	push   esi
c001353d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013541:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013545:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001354f:	81 c7 18 01 00 00    	add    edi,0x118
c0013555:	fc                   	cld    
c0013556:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013558:	5e                   	pop    esi
c0013559:	5f                   	pop    edi
c001355a:	c3                   	ret    
c001355b:	90                   	nop

c001355c <Device::preOpenACPI(void*, char*, char*)>:
c001355c:	56                   	push   esi
c001355d:	53                   	push   ebx
c001355e:	83 ec 08             	sub    esp,0x8
c0013561:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013565:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013569:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013573:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013577:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001357d:	6a 1e                	push   0x1e
c001357f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013585:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013589:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001358f:	50                   	push   eax
c0013590:	e8 1b d1 fe ff       	call   c00006b0 <memcpy>
c0013595:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013599:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001359d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00135a5:	83 c4 14             	add    esp,0x14
c00135a8:	5b                   	pop    ebx
c00135a9:	5e                   	pop    esi
c00135aa:	e9 01 d1 fe ff       	jmp    c00006b0 <memcpy>
c00135af:	90                   	nop

c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135b0:	55                   	push   ebp
c00135b1:	57                   	push   edi
c00135b2:	56                   	push   esi
c00135b3:	53                   	push   ebx
c00135b4:	83 ec 0c             	sub    esp,0xc
c00135b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135bb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00135bf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135c7:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00135cc:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135d3:	75 0b                	jne    c00135e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00135d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00135d7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135db:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00135de:	eb 24                	jmp    c0013604 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00135e0:	e8 55 42 00 00       	call   c001783a <thisCPU()>
c00135e5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00135eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00135ed:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00135f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135f5:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00135f9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00135fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013601:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013604:	83 c4 0c             	add    esp,0xc
c0013607:	5b                   	pop    ebx
c0013608:	5e                   	pop    esi
c0013609:	5f                   	pop    edi
c001360a:	5d                   	pop    ebp
c001360b:	ff e0                	jmp    eax
c001360d:	90                   	nop

c001360e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001360e:	57                   	push   edi
c001360f:	56                   	push   esi
c0013610:	53                   	push   ebx
c0013611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013619:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001361d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013622:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013629:	75 0b                	jne    c0013636 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001362b:	8b 00                	mov    eax,DWORD PTR [eax]
c001362d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013631:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013634:	eb 20                	jmp    c0013656 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013636:	e8 ff 41 00 00       	call   c001783a <thisCPU()>
c001363b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013641:	8b 10                	mov    edx,DWORD PTR [eax]
c0013643:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013647:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001364b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001364f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013653:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013656:	5b                   	pop    ebx
c0013657:	5e                   	pop    esi
c0013658:	5f                   	pop    edi
c0013659:	ff e0                	jmp    eax
c001365b:	90                   	nop

c001365c <Device::addChild(Device*)>:
c001365c:	53                   	push   ebx
c001365d:	83 ec 08             	sub    esp,0x8
c0013660:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013664:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013668:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001366e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013674:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013676:	85 d2                	test   edx,edx
c0013678:	74 04                	je     c001367e <Device::addChild(Device*)+0x22>
c001367a:	89 d3                	mov    ebx,edx
c001367c:	eb f6                	jmp    c0013674 <Device::addChild(Device*)+0x18>
c001367e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013681:	83 ec 0c             	sub    esp,0xc
c0013684:	6a 08                	push   0x8
c0013686:	e8 d7 ea ff ff       	call   c0012162 <operator new(unsigned long)>
c001368b:	89 03                	mov    DWORD PTR [ebx],eax
c001368d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013693:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001369a:	83 c4 18             	add    esp,0x18
c001369d:	5b                   	pop    ebx
c001369e:	c3                   	ret    
c001369f:	90                   	nop

c00136a0 <Device::removeAllChildren()>:
c00136a0:	56                   	push   esi
c00136a1:	53                   	push   ebx
c00136a2:	52                   	push   edx
c00136a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136a7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00136ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136b0:	74 17                	je     c00136c9 <Device::removeAllChildren()+0x29>
c00136b2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00136b5:	85 c0                	test   eax,eax
c00136b7:	74 0c                	je     c00136c5 <Device::removeAllChildren()+0x25>
c00136b9:	83 ec 0c             	sub    esp,0xc
c00136bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00136be:	50                   	push   eax
c00136bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136c7:	eb e4                	jmp    c00136ad <Device::removeAllChildren()+0xd>
c00136c9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136d5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136e2:	58                   	pop    eax
c00136e3:	5b                   	pop    ebx
c00136e4:	5e                   	pop    esi
c00136e5:	c3                   	ret    

c00136e6 <Device::hibernateAll()>:
c00136e6:	53                   	push   ebx
c00136e7:	83 ec 14             	sub    esp,0x14
c00136ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136f0:	53                   	push   ebx
c00136f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00136f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136fa:	83 c4 10             	add    esp,0x10
c00136fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013700:	74 0f                	je     c0013711 <Device::hibernateAll()+0x2b>
c0013702:	83 ec 0c             	sub    esp,0xc
c0013705:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013708:	e8 d9 ff ff ff       	call   c00136e6 <Device::hibernateAll()>
c001370d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001370f:	eb e9                	jmp    c00136fa <Device::hibernateAll()+0x14>
c0013711:	83 c4 08             	add    esp,0x8
c0013714:	5b                   	pop    ebx
c0013715:	c3                   	ret    

c0013716 <Device::wakeAll()>:
c0013716:	53                   	push   ebx
c0013717:	83 ec 14             	sub    esp,0x14
c001371a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001371e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013720:	53                   	push   ebx
c0013721:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013724:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001372a:	83 c4 10             	add    esp,0x10
c001372d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013730:	74 0f                	je     c0013741 <Device::wakeAll()+0x2b>
c0013732:	83 ec 0c             	sub    esp,0xc
c0013735:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013738:	e8 d9 ff ff ff       	call   c0013716 <Device::wakeAll()>
c001373d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001373f:	eb e9                	jmp    c001372a <Device::wakeAll()+0x14>
c0013741:	83 c4 08             	add    esp,0x8
c0013744:	5b                   	pop    ebx
c0013745:	c3                   	ret    

c0013746 <Device::detectAll()>:
c0013746:	53                   	push   ebx
c0013747:	83 ec 14             	sub    esp,0x14
c001374a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001374e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013750:	53                   	push   ebx
c0013751:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013754:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001375a:	83 c4 10             	add    esp,0x10
c001375d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013760:	74 0f                	je     c0013771 <Device::detectAll()+0x2b>
c0013762:	83 ec 0c             	sub    esp,0xc
c0013765:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013768:	e8 d9 ff ff ff       	call   c0013746 <Device::detectAll()>
c001376d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001376f:	eb e9                	jmp    c001375a <Device::detectAll()+0x14>
c0013771:	83 c4 08             	add    esp,0x8
c0013774:	5b                   	pop    ebx
c0013775:	c3                   	ret    

c0013776 <Device::disableLegacyAll()>:
c0013776:	53                   	push   ebx
c0013777:	83 ec 14             	sub    esp,0x14
c001377a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001377e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013780:	53                   	push   ebx
c0013781:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013784:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001378a:	83 c4 10             	add    esp,0x10
c001378d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013790:	74 0f                	je     c00137a1 <Device::disableLegacyAll()+0x2b>
c0013792:	83 ec 0c             	sub    esp,0xc
c0013795:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013798:	e8 d9 ff ff ff       	call   c0013776 <Device::disableLegacyAll()>
c001379d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001379f:	eb e9                	jmp    c001378a <Device::disableLegacyAll()+0x14>
c00137a1:	83 c4 08             	add    esp,0x8
c00137a4:	5b                   	pop    ebx
c00137a5:	c3                   	ret    

c00137a6 <Device::loadDriversForAll()>:
c00137a6:	53                   	push   ebx
c00137a7:	83 ec 08             	sub    esp,0x8
c00137aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ae:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00137b6:	85 db                	test   ebx,ebx
c00137b8:	74 12                	je     c00137cc <Device::loadDriversForAll()+0x26>
c00137ba:	83 ec 0c             	sub    esp,0xc
c00137bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00137c0:	e8 e1 ff ff ff       	call   c00137a6 <Device::loadDriversForAll()>
c00137c5:	83 c4 10             	add    esp,0x10
c00137c8:	89 d8                	mov    eax,ebx
c00137ca:	eb e8                	jmp    c00137b4 <Device::loadDriversForAll()+0xe>
c00137cc:	83 c4 08             	add    esp,0x8
c00137cf:	5b                   	pop    ebx
c00137d0:	c3                   	ret    
c00137d1:	90                   	nop

c00137d2 <Device::closeAll()>:
c00137d2:	53                   	push   ebx
c00137d3:	83 ec 08             	sub    esp,0x8
c00137d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137dc:	6a 00                	push   0x0
c00137de:	6a 00                	push   0x0
c00137e0:	6a 00                	push   0x0
c00137e2:	53                   	push   ebx
c00137e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137f2:	74 0f                	je     c0013803 <Device::closeAll()+0x31>
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137fa:	e8 d3 ff ff ff       	call   c00137d2 <Device::closeAll()>
c00137ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013801:	eb e9                	jmp    c00137ec <Device::closeAll()+0x1a>
c0013803:	83 c4 08             	add    esp,0x8
c0013806:	5b                   	pop    ebx
c0013807:	c3                   	ret    

c0013808 <Device::powerSavingAll(PowerSavingLevel)>:
c0013808:	56                   	push   esi
c0013809:	53                   	push   ebx
c001380a:	83 ec 0c             	sub    esp,0xc
c001380d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013811:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013815:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013817:	56                   	push   esi
c0013818:	53                   	push   ebx
c0013819:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001381c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013822:	83 c4 10             	add    esp,0x10
c0013825:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013828:	74 0f                	je     c0013839 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001382a:	52                   	push   edx
c001382b:	52                   	push   edx
c001382c:	56                   	push   esi
c001382d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013830:	e8 d3 ff ff ff       	call   c0013808 <Device::powerSavingAll(PowerSavingLevel)>
c0013835:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013837:	eb e9                	jmp    c0013822 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013839:	58                   	pop    eax
c001383a:	5b                   	pop    ebx
c001383b:	5e                   	pop    esi
c001383c:	c3                   	ret    
c001383d:	90                   	nop

c001383e <Device::setName(char const*)>:
c001383e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013846:	e9 3a cf fe ff       	jmp    c0000785 <strcpy>
c001384b:	90                   	nop

c001384c <Device::Device(char const*)>:
c001384c:	83 ec 0c             	sub    esp,0xc
c001384f:	ba d8 73 02 c0       	mov    edx,0xc00273d8
c0013854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013858:	89 10                	mov    DWORD PTR [eax],edx
c001385a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013888:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013892:	83 ec 08             	sub    esp,0x8
c0013895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389d:	e8 9c ff ff ff       	call   c001383e <Device::setName(char const*)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	83 ec 0c             	sub    esp,0xc
c00138a8:	6a 08                	push   0x8
c00138aa:	e8 b3 e8 ff ff       	call   c0012162 <operator new(unsigned long)>
c00138af:	83 c4 10             	add    esp,0x10
c00138b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138c3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00138c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138cd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138dd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ee:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00138f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013904:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001390e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013912:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001391c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013920:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001392a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013938:	90                   	nop
c0013939:	83 c4 0c             	add    esp,0xc
c001393c:	c3                   	ret    
c001393d:	90                   	nop

c001393e <Device::getName()>:
c001393e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013942:	05 d0 00 00 00       	add    eax,0xd0
c0013947:	c3                   	ret    

c0013948 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013948:	83 ec 0c             	sub    esp,0xc
c001394b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394f:	83 ec 08             	sub    esp,0x8
c0013952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013956:	50                   	push   eax
c0013957:	e8 f0 fe ff ff       	call   c001384c <Device::Device(char const*)>
c001395c:	83 c4 10             	add    esp,0x10
c001395f:	ba 04 74 02 c0       	mov    edx,0xc0027404
c0013964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013968:	89 10                	mov    DWORD PTR [eax],edx
c001396a:	90                   	nop
c001396b:	83 c4 0c             	add    esp,0xc
c001396e:	c3                   	ret    
c001396f:	90                   	nop

c0013970 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013970:	57                   	push   edi
c0013971:	56                   	push   esi
c0013972:	53                   	push   ebx
c0013973:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013977:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001397b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001397f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013985:	75 0c                	jne    c0013993 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013987:	52                   	push   edx
c0013988:	52                   	push   edx
c0013989:	53                   	push   ebx
c001398a:	56                   	push   esi
c001398b:	e8 a4 18 01 00       	call   c0025234 <LinkedList<Device>::addElement(Device*)>
c0013990:	83 c4 10             	add    esp,0x10
c0013993:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013999:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001399c:	74 12                	je     c00139b0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001399e:	50                   	push   eax
c001399f:	57                   	push   edi
c00139a0:	56                   	push   esi
c00139a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139a4:	e8 c7 ff ff ff       	call   c0013970 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139ab:	83 c4 10             	add    esp,0x10
c00139ae:	eb e9                	jmp    c0013999 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00139b0:	5b                   	pop    ebx
c00139b1:	5e                   	pop    esi
c00139b2:	5f                   	pop    edi
c00139b3:	c3                   	ret    

c00139b4 <getDevicesOfType(DeviceType)>:
c00139b4:	53                   	push   ebx
c00139b5:	83 ec 14             	sub    esp,0x14
c00139b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139bc:	53                   	push   ebx
c00139bd:	e8 4e 19 01 00       	call   c0025310 <LinkedList<Device>::LinkedList()>
c00139c2:	83 c4 0c             	add    esp,0xc
c00139c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139c9:	53                   	push   ebx
c00139ca:	ff 35 e8 a4 02 c0    	push   DWORD PTR ds:0xc002a4e8
c00139d0:	e8 9b ff ff ff       	call   c0013970 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139d5:	89 d8                	mov    eax,ebx
c00139d7:	83 c4 18             	add    esp,0x18
c00139da:	5b                   	pop    ebx
c00139db:	c2 04 00             	ret    0x4

c00139de <HardDiskController::HardDiskController(char const*)>:
c00139de:	83 ec 0c             	sub    esp,0xc
c00139e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e5:	83 ec 08             	sub    esp,0x8
c00139e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139ec:	50                   	push   eax
c00139ed:	e8 5a fe ff ff       	call   c001384c <Device::Device(char const*)>
c00139f2:	83 c4 10             	add    esp,0x10
c00139f5:	ba 30 74 02 c0       	mov    edx,0xc0027430
c00139fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fe:	89 10                	mov    DWORD PTR [eax],edx
c0013a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a04:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013a0e:	90                   	nop
c0013a0f:	83 c4 0c             	add    esp,0xc
c0013a12:	c3                   	ret    
c0013a13:	90                   	nop

c0013a14 <HardDiskController::~HardDiskController()>:
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	ba 30 74 02 c0       	mov    edx,0xc0027430
c0013a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a20:	89 10                	mov    DWORD PTR [eax],edx
c0013a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a26:	83 ec 0c             	sub    esp,0xc
c0013a29:	50                   	push   eax
c0013a2a:	e8 cf fa ff ff       	call   c00134fe <Device::~Device()>
c0013a2f:	83 c4 10             	add    esp,0x10
c0013a32:	90                   	nop
c0013a33:	83 c4 0c             	add    esp,0xc
c0013a36:	c3                   	ret    
c0013a37:	90                   	nop

c0013a38 <HardDiskController::~HardDiskController()>:
c0013a38:	83 ec 0c             	sub    esp,0xc
c0013a3b:	83 ec 0c             	sub    esp,0xc
c0013a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a42:	e8 cd ff ff ff       	call   c0013a14 <HardDiskController::~HardDiskController()>
c0013a47:	83 c4 10             	add    esp,0x10
c0013a4a:	83 ec 08             	sub    esp,0x8
c0013a4d:	68 58 01 00 00       	push   0x158
c0013a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a56:	e8 16 e7 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013a5b:	83 c4 10             	add    esp,0x10
c0013a5e:	83 c4 0c             	add    esp,0xc
c0013a61:	c3                   	ret    

c0013a62 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a62:	83 ec 0c             	sub    esp,0xc
c0013a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a69:	83 ec 08             	sub    esp,0x8
c0013a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a70:	50                   	push   eax
c0013a71:	e8 d6 fd ff ff       	call   c001384c <Device::Device(char const*)>
c0013a76:	83 c4 10             	add    esp,0x10
c0013a79:	ba 5c 74 02 c0       	mov    edx,0xc002745c
c0013a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a82:	89 10                	mov    DWORD PTR [eax],edx
c0013a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a88:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a93:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a9e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ab0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ac4:	90                   	nop
c0013ac5:	83 c4 0c             	add    esp,0xc
c0013ac8:	c3                   	ret    
c0013ac9:	90                   	nop

c0013aca <PhysicalDisk::startCache()>:
c0013aca:	56                   	push   esi
c0013acb:	53                   	push   ebx
c0013acc:	83 ec 10             	sub    esp,0x10
c0013acf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ad3:	6a 30                	push   0x30
c0013ad5:	e8 88 e6 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013ada:	89 c6                	mov    esi,eax
c0013adc:	58                   	pop    eax
c0013add:	5a                   	pop    edx
c0013ade:	53                   	push   ebx
c0013adf:	56                   	push   esi
c0013ae0:	e8 eb 24 00 00       	call   c0015fd0 <VCache::VCache(PhysicalDisk*)>
c0013ae5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013aeb:	83 c4 14             	add    esp,0x14
c0013aee:	5b                   	pop    ebx
c0013aef:	5e                   	pop    esi
c0013af0:	c3                   	ret    
c0013af1:	90                   	nop

c0013af2 <PhysicalDisk::~PhysicalDisk()>:
c0013af2:	83 ec 0c             	sub    esp,0xc
c0013af5:	ba 5c 74 02 c0       	mov    edx,0xc002745c
c0013afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013afe:	89 10                	mov    DWORD PTR [eax],edx
c0013b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b04:	83 ec 0c             	sub    esp,0xc
c0013b07:	50                   	push   eax
c0013b08:	e8 f1 f9 ff ff       	call   c00134fe <Device::~Device()>
c0013b0d:	83 c4 10             	add    esp,0x10
c0013b10:	90                   	nop
c0013b11:	83 c4 0c             	add    esp,0xc
c0013b14:	c3                   	ret    
c0013b15:	90                   	nop

c0013b16 <PhysicalDisk::~PhysicalDisk()>:
c0013b16:	83 ec 0c             	sub    esp,0xc
c0013b19:	83 ec 0c             	sub    esp,0xc
c0013b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b20:	e8 cd ff ff ff       	call   c0013af2 <PhysicalDisk::~PhysicalDisk()>
c0013b25:	83 c4 10             	add    esp,0x10
c0013b28:	83 ec 08             	sub    esp,0x8
c0013b2b:	68 6c 01 00 00       	push   0x16c
c0013b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b34:	e8 38 e6 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	83 c4 0c             	add    esp,0xc
c0013b3f:	c3                   	ret    

c0013b40 <FPU::FPU(char const*)>:
c0013b40:	83 ec 0c             	sub    esp,0xc
c0013b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b47:	83 ec 08             	sub    esp,0x8
c0013b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4e:	50                   	push   eax
c0013b4f:	e8 f8 fc ff ff       	call   c001384c <Device::Device(char const*)>
c0013b54:	83 c4 10             	add    esp,0x10
c0013b57:	ba 9c 74 02 c0       	mov    edx,0xc002749c
c0013b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b60:	89 10                	mov    DWORD PTR [eax],edx
c0013b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b66:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b70:	90                   	nop
c0013b71:	83 c4 0c             	add    esp,0xc
c0013b74:	c3                   	ret    
c0013b75:	90                   	nop

c0013b76 <FPU::~FPU()>:
c0013b76:	83 ec 0c             	sub    esp,0xc
c0013b79:	ba 9c 74 02 c0       	mov    edx,0xc002749c
c0013b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b82:	89 10                	mov    DWORD PTR [eax],edx
c0013b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b88:	83 ec 0c             	sub    esp,0xc
c0013b8b:	50                   	push   eax
c0013b8c:	e8 6d f9 ff ff       	call   c00134fe <Device::~Device()>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	90                   	nop
c0013b95:	83 c4 0c             	add    esp,0xc
c0013b98:	c3                   	ret    
c0013b99:	90                   	nop

c0013b9a <FPU::~FPU()>:
c0013b9a:	83 ec 0c             	sub    esp,0xc
c0013b9d:	83 ec 0c             	sub    esp,0xc
c0013ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba4:	e8 cd ff ff ff       	call   c0013b76 <FPU::~FPU()>
c0013ba9:	83 c4 10             	add    esp,0x10
c0013bac:	83 ec 08             	sub    esp,0x8
c0013baf:	68 58 01 00 00       	push   0x158
c0013bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb8:	e8 b4 e5 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013bbd:	83 c4 10             	add    esp,0x10
c0013bc0:	83 c4 0c             	add    esp,0xc
c0013bc3:	c3                   	ret    

c0013bc4 <setupFPU()>:
c0013bc4:	83 ec 18             	sub    esp,0x18
c0013bc7:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0013bcc:	80 a0 e8 01 00 00 ef 	and    BYTE PTR [eax+0x1e8],0xef
c0013bd3:	68 88 74 02 c0       	push   0xc0027488
c0013bd8:	e8 74 e6 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0013bdd:	e8 58 3c 00 00       	call   c001783a <thisCPU()>
c0013be2:	e8 53 3c 00 00       	call   c001783a <thisCPU()>
c0013be7:	e8 7c 17 01 00       	call   c0025368 <CPU::readCR0()>
c0013bec:	83 c8 04             	or     eax,0x4
c0013bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bf2:	e8 83 17 01 00       	call   c002537a <CPU::writeCR0(unsigned long)>
c0013bf7:	31 c0                	xor    eax,eax
c0013bf9:	83 c4 1c             	add    esp,0x1c
c0013bfc:	c3                   	ret    
c0013bfd:	90                   	nop

c0013bfe <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013bfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c06:	c1 e0 04             	shl    eax,0x4
c0013c09:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013c0d:	8d 50 10             	lea    edx,[eax+0x10]
c0013c10:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013c16:	74 08                	je     c0013c20 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013c18:	83 c0 04             	add    eax,0x4
c0013c1b:	39 d0                	cmp    eax,edx
c0013c1d:	75 f1                	jne    c0013c10 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013c1f:	c3                   	ret    
c0013c20:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c2a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013c34:	eb e2                	jmp    c0013c18 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013c36 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013c36:	57                   	push   edi
c0013c37:	31 c0                	xor    eax,eax
c0013c39:	56                   	push   esi
c0013c3a:	53                   	push   ebx
c0013c3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013c3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c43:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c47:	89 da                	mov    edx,ebx
c0013c49:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c4d:	c1 e2 04             	shl    edx,0x4
c0013c50:	01 ca                	add    edx,ecx
c0013c52:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013c5a:	74 16                	je     c0013c72 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013c5c:	40                   	inc    eax
c0013c5d:	83 f8 04             	cmp    eax,0x4
c0013c60:	75 f0                	jne    c0013c52 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013c62:	c7 44 24 10 cc 74 02 c0 	mov    DWORD PTR [esp+0x10],0xc00274cc
c0013c6a:	5b                   	pop    ebx
c0013c6b:	5e                   	pop    esi
c0013c6c:	5f                   	pop    edi
c0013c6d:	e9 61 5a 00 00       	jmp    c00196d3 <Krnl::panic(char const*)>
c0013c72:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013c75:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013c78:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013c7e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013c84:	5b                   	pop    ebx
c0013c85:	5e                   	pop    esi
c0013c86:	5f                   	pop    edi
c0013c87:	c3                   	ret    

c0013c88 <doubleFault(regs*, void*)>:
c0013c88:	55                   	push   ebp
c0013c89:	89 e5                	mov    ebp,esp
c0013c8b:	83 ec 08             	sub    esp,0x8
c0013c8e:	83 ec 0c             	sub    esp,0xc
c0013c91:	68 07 75 02 c0       	push   0xc0027507
c0013c96:	e8 38 5a 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0013c9b:	83 c4 10             	add    esp,0x10
c0013c9e:	90                   	nop
c0013c9f:	c9                   	leave  
c0013ca0:	c3                   	ret    
c0013ca1:	90                   	nop

c0013ca2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ca2:	56                   	push   esi
c0013ca3:	53                   	push   ebx
c0013ca4:	50                   	push   eax
c0013ca5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ca9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cad:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013cb2:	75 35                	jne    c0013ce9 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013cb4:	8d 43 20             	lea    eax,[ebx+0x20]
c0013cb7:	31 d2                	xor    edx,edx
c0013cb9:	89 c1                	mov    ecx,eax
c0013cbb:	c1 e1 04             	shl    ecx,0x4
c0013cbe:	01 f1                	add    ecx,esi
c0013cc0:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013cc8:	74 3e                	je     c0013d08 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013cca:	42                   	inc    edx
c0013ccb:	83 fa 04             	cmp    edx,0x4
c0013cce:	75 f0                	jne    c0013cc0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	68 4c 75 02 c0       	push   0xc002754c
c0013cd8:	e8 f6 59 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0013cdd:	83 c4 10             	add    esp,0x10
c0013ce0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013ce5:	5a                   	pop    edx
c0013ce6:	5b                   	pop    ebx
c0013ce7:	5e                   	pop    esi
c0013ce8:	c3                   	ret    
c0013ce9:	83 ec 0c             	sub    esp,0xc
c0013cec:	56                   	push   esi
c0013ced:	e8 4c fc ff ff       	call   c001393e <Device::getName()>
c0013cf2:	83 c4 10             	add    esp,0x10
c0013cf5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013cf8:	75 ba                	jne    c0013cb4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013cfa:	83 fb 0f             	cmp    ebx,0xf
c0013cfd:	7f 29                	jg     c0013d28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013cff:	0f b6 9b e0 96 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd6920]
c0013d06:	eb ac                	jmp    c0013cb4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d08:	8d 04 82             	lea    eax,[edx+eax*4]
c0013d0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d0f:	8d 04 86             	lea    eax,[esi+eax*4]
c0013d12:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013d18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d1c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013d22:	89 d8                	mov    eax,ebx
c0013d24:	5a                   	pop    edx
c0013d25:	5b                   	pop    ebx
c0013d26:	5e                   	pop    esi
c0013d27:	c3                   	ret    
c0013d28:	83 ec 0c             	sub    esp,0xc
c0013d2b:	68 14 75 02 c0       	push   0xc0027514
c0013d30:	e8 9e 59 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0013d35:	83 c4 10             	add    esp,0x10
c0013d38:	e9 77 ff ff ff       	jmp    c0013cb4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d3d:	90                   	nop

c0013d3e <InterruptController::clearAllHandlers(int, bool)>:
c0013d3e:	56                   	push   esi
c0013d3f:	53                   	push   ebx
c0013d40:	52                   	push   edx
c0013d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d49:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013d4e:	75 61                	jne    c0013db1 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013d50:	8d 46 20             	lea    eax,[esi+0x20]
c0013d53:	c1 e6 04             	shl    esi,0x4
c0013d56:	c1 e0 04             	shl    eax,0x4
c0013d59:	01 de                	add    esi,ebx
c0013d5b:	01 d8                	add    eax,ebx
c0013d5d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013d67:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013d71:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013d7b:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013d85:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013d8f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013d99:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013da3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013dad:	58                   	pop    eax
c0013dae:	5b                   	pop    ebx
c0013daf:	5e                   	pop    esi
c0013db0:	c3                   	ret    
c0013db1:	83 ec 0c             	sub    esp,0xc
c0013db4:	53                   	push   ebx
c0013db5:	e8 84 fb ff ff       	call   c001393e <Device::getName()>
c0013dba:	83 c4 10             	add    esp,0x10
c0013dbd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013dc0:	75 8e                	jne    c0013d50 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013dc2:	83 fe 0f             	cmp    esi,0xf
c0013dc5:	7f 09                	jg     c0013dd0 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013dc7:	0f b6 b6 e0 96 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd6920]
c0013dce:	eb 80                	jmp    c0013d50 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013dd0:	83 ec 0c             	sub    esp,0xc
c0013dd3:	68 88 75 02 c0       	push   0xc0027588
c0013dd8:	e8 f6 58 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0013ddd:	83 c4 10             	add    esp,0x10
c0013de0:	e9 6b ff ff ff       	jmp    c0013d50 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013de5:	90                   	nop

c0013de6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013de6:	56                   	push   esi
c0013de7:	53                   	push   ebx
c0013de8:	52                   	push   edx
c0013de9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ded:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013df1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013df6:	75 3a                	jne    c0013e32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013df8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dfc:	8d 50 20             	lea    edx,[eax+0x20]
c0013dff:	c1 e2 04             	shl    edx,0x4
c0013e02:	8d 04 16             	lea    eax,[esi+edx*1]
c0013e05:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013e09:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013e0f:	74 0b                	je     c0013e1c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013e11:	83 c0 04             	add    eax,0x4
c0013e14:	39 d0                	cmp    eax,edx
c0013e16:	75 f1                	jne    c0013e09 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013e18:	58                   	pop    eax
c0013e19:	5b                   	pop    ebx
c0013e1a:	5e                   	pop    esi
c0013e1b:	c3                   	ret    
c0013e1c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e26:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013e30:	eb df                	jmp    c0013e11 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013e32:	83 ec 0c             	sub    esp,0xc
c0013e35:	56                   	push   esi
c0013e36:	e8 03 fb ff ff       	call   c001393e <Device::getName()>
c0013e3b:	83 c4 10             	add    esp,0x10
c0013e3e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e41:	75 b5                	jne    c0013df8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013e43:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013e48:	7f 11                	jg     c0013e5b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013e4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e4e:	0f b6 80 e0 96 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6920]
c0013e55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e59:	eb 9d                	jmp    c0013df8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013e5b:	83 ec 0c             	sub    esp,0xc
c0013e5e:	68 88 75 02 c0       	push   0xc0027588
c0013e63:	e8 6b 58 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0013e68:	83 c4 10             	add    esp,0x10
c0013e6b:	eb 8b                	jmp    c0013df8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013e6d <nmiHandler(regs*, void*)>:
c0013e6d:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0013e72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e76:	e9 29 aa ff ff       	jmp    c000e8a4 <Computer::handleNMI()>

c0013e7b <int_handler>:
c0013e7b:	55                   	push   ebp
c0013e7c:	57                   	push   edi
c0013e7d:	56                   	push   esi
c0013e7e:	53                   	push   ebx
c0013e7f:	83 ec 0c             	sub    esp,0xc
c0013e82:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013e86:	80 3d 8c af 02 c0 00 	cmp    BYTE PTR ds:0xc002af8c,0x0
c0013e8d:	74 0b                	je     c0013e9a <int_handler+0x1f>
c0013e8f:	fa                   	cli    
c0013e90:	f4                   	hlt    
c0013e91:	80 3d 8c af 02 c0 00 	cmp    BYTE PTR ds:0xc002af8c,0x0
c0013e98:	75 f5                	jne    c0013e8f <int_handler+0x14>
c0013e9a:	e8 9b 39 00 00       	call   c001783a <thisCPU()>
c0013e9f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013ea2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013ea8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013eab:	83 f8 17             	cmp    eax,0x17
c0013eae:	77 13                	ja     c0013ec3 <int_handler+0x48>
c0013eb0:	83 ec 08             	sub    esp,0x8
c0013eb3:	8b 17                	mov    edx,DWORD PTR [edi]
c0013eb5:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013eb8:	0f b6 c0             	movzx  eax,al
c0013ebb:	50                   	push   eax
c0013ebc:	57                   	push   edi
c0013ebd:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013ec0:	83 c4 10             	add    esp,0x10
c0013ec3:	83 c3 15             	add    ebx,0x15
c0013ec6:	c1 e3 04             	shl    ebx,0x4
c0013ec9:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013ecd:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013ed4:	31 db                	xor    ebx,ebx
c0013ed6:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013eda:	85 c0                	test   eax,eax
c0013edc:	74 13                	je     c0013ef1 <int_handler+0x76>
c0013ede:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013ee1:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013ee5:	74 1c                	je     c0013f03 <int_handler+0x88>
c0013ee7:	83 ec 08             	sub    esp,0x8
c0013eea:	52                   	push   edx
c0013eeb:	56                   	push   esi
c0013eec:	ff d0                	call   eax
c0013eee:	83 c4 10             	add    esp,0x10
c0013ef1:	43                   	inc    ebx
c0013ef2:	83 fb 04             	cmp    ebx,0x4
c0013ef5:	75 df                	jne    c0013ed6 <int_handler+0x5b>
c0013ef7:	83 c4 0c             	add    esp,0xc
c0013efa:	31 c0                	xor    eax,eax
c0013efc:	5b                   	pop    ebx
c0013efd:	31 d2                	xor    edx,edx
c0013eff:	5e                   	pop    esi
c0013f00:	5f                   	pop    edi
c0013f01:	5d                   	pop    ebp
c0013f02:	c3                   	ret    
c0013f03:	83 ec 08             	sub    esp,0x8
c0013f06:	52                   	push   edx
c0013f07:	56                   	push   esi
c0013f08:	ff d0                	call   eax
c0013f0a:	83 c4 10             	add    esp,0x10
c0013f0d:	83 c4 0c             	add    esp,0xc
c0013f10:	5b                   	pop    ebx
c0013f11:	5e                   	pop    esi
c0013f12:	5f                   	pop    edi
c0013f13:	5d                   	pop    ebp
c0013f14:	c3                   	ret    
c0013f15:	90                   	nop

c0013f16 <InterruptController::InterruptController(char const*)>:
c0013f16:	83 ec 1c             	sub    esp,0x1c
c0013f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1d:	83 ec 08             	sub    esp,0x8
c0013f20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f24:	50                   	push   eax
c0013f25:	e8 22 f9 ff ff       	call   c001384c <Device::Device(char const*)>
c0013f2a:	83 c4 10             	add    esp,0x10
c0013f2d:	ba b8 77 02 c0       	mov    edx,0xc00277b8
c0013f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f36:	89 10                	mov    DWORD PTR [eax],edx
c0013f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f3c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013f46:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f4e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013f56:	7f 5e                	jg     c0013fb6 <InterruptController::InterruptController(char const*)+0xa0>
c0013f58:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f60:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013f65:	7f 49                	jg     c0013fb0 <InterruptController::InterruptController(char const*)+0x9a>
c0013f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013f6f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013f76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f7a:	01 ca                	add    edx,ecx
c0013f7c:	83 c2 54             	add    edx,0x54
c0013f7f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013f8f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013f96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f9a:	01 ca                	add    edx,ecx
c0013f9c:	81 c2 54 04 00 00    	add    edx,0x454
c0013fa2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013faa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013fae:	eb b0                	jmp    c0013f60 <InterruptController::InterruptController(char const*)+0x4a>
c0013fb0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013fb4:	eb 98                	jmp    c0013f4e <InterruptController::InterruptController(char const*)+0x38>
c0013fb6:	90                   	nop
c0013fb7:	83 c4 1c             	add    esp,0x1c
c0013fba:	c3                   	ret    
c0013fbb:	90                   	nop

c0013fbc <InterruptController::~InterruptController()>:
c0013fbc:	83 ec 0c             	sub    esp,0xc
c0013fbf:	ba b8 77 02 c0       	mov    edx,0xc00277b8
c0013fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc8:	89 10                	mov    DWORD PTR [eax],edx
c0013fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fce:	83 ec 0c             	sub    esp,0xc
c0013fd1:	50                   	push   eax
c0013fd2:	e8 27 f5 ff ff       	call   c00134fe <Device::~Device()>
c0013fd7:	83 c4 10             	add    esp,0x10
c0013fda:	90                   	nop
c0013fdb:	83 c4 0c             	add    esp,0xc
c0013fde:	c3                   	ret    
c0013fdf:	90                   	nop

c0013fe0 <InterruptController::~InterruptController()>:
c0013fe0:	83 ec 0c             	sub    esp,0xc
c0013fe3:	83 ec 0c             	sub    esp,0xc
c0013fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fea:	e8 cd ff ff ff       	call   c0013fbc <InterruptController::~InterruptController()>
c0013fef:	83 c4 10             	add    esp,0x10
c0013ff2:	83 ec 08             	sub    esp,0x8
c0013ff5:	68 58 21 00 00       	push   0x2158
c0013ffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ffe:	e8 6e e1 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0014003:	83 c4 10             	add    esp,0x10
c0014006:	83 c4 0c             	add    esp,0xc
c0014009:	c3                   	ret    

c001400a <displayDebugInfo(regs*)>:
c001400a:	55                   	push   ebp
c001400b:	57                   	push   edi
c001400c:	56                   	push   esi
c001400d:	53                   	push   ebx
c001400e:	83 ec 24             	sub    esp,0x24
c0014011:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014015:	0f 20 c2             	mov    edx,cr0
c0014018:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001401c:	0f 20 d7             	mov    edi,cr2
c001401f:	0f 20 de             	mov    esi,cr3
c0014022:	0f 20 e5             	mov    ebp,cr4
c0014025:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014028:	68 c2 75 02 c0       	push   0xc00275c2
c001402d:	e8 1f e2 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014032:	58                   	pop    eax
c0014033:	5a                   	pop    edx
c0014034:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014037:	68 cd 75 02 c0       	push   0xc00275cd
c001403c:	e8 10 e2 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014041:	59                   	pop    ecx
c0014042:	58                   	pop    eax
c0014043:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014046:	68 d8 75 02 c0       	push   0xc00275d8
c001404b:	e8 01 e2 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014050:	58                   	pop    eax
c0014051:	5a                   	pop    edx
c0014052:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014055:	68 e3 75 02 c0       	push   0xc00275e3
c001405a:	e8 f2 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001405f:	59                   	pop    ecx
c0014060:	58                   	pop    eax
c0014061:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014064:	68 ee 75 02 c0       	push   0xc00275ee
c0014069:	e8 e3 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001406e:	58                   	pop    eax
c001406f:	5a                   	pop    edx
c0014070:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014073:	68 f9 75 02 c0       	push   0xc00275f9
c0014078:	e8 d4 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001407d:	59                   	pop    ecx
c001407e:	58                   	pop    eax
c001407f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014082:	68 04 76 02 c0       	push   0xc0027604
c0014087:	e8 c5 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001408c:	58                   	pop    eax
c001408d:	5a                   	pop    edx
c001408e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014091:	68 0f 76 02 c0       	push   0xc002760f
c0014096:	e8 b6 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001409b:	59                   	pop    ecx
c001409c:	58                   	pop    eax
c001409d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00140a0:	68 1a 76 02 c0       	push   0xc002761a
c00140a5:	e8 a7 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140aa:	58                   	pop    eax
c00140ab:	5a                   	pop    edx
c00140ac:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00140af:	68 29 76 02 c0       	push   0xc0027629
c00140b4:	e8 98 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140b9:	59                   	pop    ecx
c00140ba:	58                   	pop    eax
c00140bb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00140be:	68 34 76 02 c0       	push   0xc0027634
c00140c3:	e8 89 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140c8:	58                   	pop    eax
c00140c9:	5a                   	pop    edx
c00140ca:	57                   	push   edi
c00140cb:	68 3f 76 02 c0       	push   0xc002763f
c00140d0:	e8 7c e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140d5:	59                   	pop    ecx
c00140d6:	58                   	pop    eax
c00140d7:	56                   	push   esi
c00140d8:	68 4a 76 02 c0       	push   0xc002764a
c00140dd:	e8 6f e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140e2:	58                   	pop    eax
c00140e3:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00140e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140ee:	e8 a2 c3 ff ff       	call   c0010495 <setActiveTerminal(VgaText*)>
c00140f3:	58                   	pop    eax
c00140f4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00140f7:	5a                   	pop    edx
c00140f8:	c1 e0 05             	shl    eax,0x5
c00140fb:	05 40 94 02 c0       	add    eax,0xc0029440
c0014100:	50                   	push   eax
c0014101:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014106:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001410c:	e8 a3 c7 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014111:	59                   	pop    ecx
c0014112:	58                   	pop    eax
c0014113:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014118:	68 55 76 02 c0       	push   0xc0027655
c001411d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014123:	e8 8c c7 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014128:	58                   	pop    eax
c0014129:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001412e:	5a                   	pop    edx
c001412f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014132:	83 c0 0c             	add    eax,0xc
c0014135:	50                   	push   eax
c0014136:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001413b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014141:	e8 6e c7 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014146:	59                   	pop    ecx
c0014147:	58                   	pop    eax
c0014148:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001414d:	68 5e 76 02 c0       	push   0xc002765e
c0014152:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014158:	e8 57 c7 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c001415d:	58                   	pop    eax
c001415e:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014163:	5a                   	pop    edx
c0014164:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014167:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001416d:	e8 68 c7 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0014172:	59                   	pop    ecx
c0014173:	58                   	pop    eax
c0014174:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014179:	68 66 76 02 c0       	push   0xc0027666
c001417e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014184:	e8 2b c7 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014189:	58                   	pop    eax
c001418a:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001418f:	5a                   	pop    edx
c0014190:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014193:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014199:	e8 3c c7 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001419e:	59                   	pop    ecx
c001419f:	58                   	pop    eax
c00141a0:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00141a5:	68 6e 76 02 c0       	push   0xc002766e
c00141aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141b0:	e8 ff c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00141b5:	58                   	pop    eax
c00141b6:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00141bb:	5a                   	pop    edx
c00141bc:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00141bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c5:	e8 10 c7 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00141ca:	59                   	pop    ecx
c00141cb:	58                   	pop    eax
c00141cc:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00141d1:	68 76 76 02 c0       	push   0xc0027676
c00141d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141dc:	e8 d3 c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00141e1:	58                   	pop    eax
c00141e2:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00141e7:	5a                   	pop    edx
c00141e8:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00141eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f1:	e8 e4 c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00141f6:	59                   	pop    ecx
c00141f7:	58                   	pop    eax
c00141f8:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00141fd:	68 7e 76 02 c0       	push   0xc002767e
c0014202:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014208:	e8 a7 c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c001420d:	58                   	pop    eax
c001420e:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014213:	5a                   	pop    edx
c0014214:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014217:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001421d:	e8 b8 c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0014222:	59                   	pop    ecx
c0014223:	58                   	pop    eax
c0014224:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014229:	68 86 76 02 c0       	push   0xc0027686
c001422e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014234:	e8 7b c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014239:	58                   	pop    eax
c001423a:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001423f:	5a                   	pop    edx
c0014240:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014243:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014249:	e8 8c c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001424e:	59                   	pop    ecx
c001424f:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014254:	5b                   	pop    ebx
c0014255:	68 8e 76 02 c0       	push   0xc002768e
c001425a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014260:	e8 4f c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014265:	58                   	pop    eax
c0014266:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001426b:	5a                   	pop    edx
c001426c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014270:	52                   	push   edx
c0014271:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014277:	e8 5e c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001427c:	59                   	pop    ecx
c001427d:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014282:	5b                   	pop    ebx
c0014283:	68 97 76 02 c0       	push   0xc0027697
c0014288:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001428e:	e8 21 c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014293:	58                   	pop    eax
c0014294:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014299:	5a                   	pop    edx
c001429a:	57                   	push   edi
c001429b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142a1:	e8 34 c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00142a6:	59                   	pop    ecx
c00142a7:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00142ac:	5b                   	pop    ebx
c00142ad:	68 9f 76 02 c0       	push   0xc002769f
c00142b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142b8:	e8 f7 c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00142bd:	5f                   	pop    edi
c00142be:	58                   	pop    eax
c00142bf:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00142c4:	56                   	push   esi
c00142c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142cb:	e8 0a c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00142d0:	58                   	pop    eax
c00142d1:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00142d6:	5a                   	pop    edx
c00142d7:	68 a7 76 02 c0       	push   0xc00276a7
c00142dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e2:	e8 cd c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00142e7:	59                   	pop    ecx
c00142e8:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00142ed:	5b                   	pop    ebx
c00142ee:	55                   	push   ebp
c00142ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142f5:	e8 e0 c5 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00142fa:	5e                   	pop    esi
c00142fb:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014300:	5f                   	pop    edi
c0014301:	68 af 76 02 c0       	push   0xc00276af
c0014306:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001430c:	e8 a3 c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014311:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014316:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001431c:	e8 62 10 01 00       	call   c0025383 <CPU::readDR0()>
c0014321:	5d                   	pop    ebp
c0014322:	5a                   	pop    edx
c0014323:	50                   	push   eax
c0014324:	53                   	push   ebx
c0014325:	e8 b0 c5 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001432a:	59                   	pop    ecx
c001432b:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014330:	5b                   	pop    ebx
c0014331:	68 b8 76 02 c0       	push   0xc00276b8
c0014336:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001433c:	e8 73 c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014341:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014346:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001434c:	e8 44 10 01 00       	call   c0025395 <CPU::readDR1()>
c0014351:	5e                   	pop    esi
c0014352:	5f                   	pop    edi
c0014353:	50                   	push   eax
c0014354:	53                   	push   ebx
c0014355:	e8 80 c5 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001435a:	5d                   	pop    ebp
c001435b:	58                   	pop    eax
c001435c:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014361:	68 c0 76 02 c0       	push   0xc00276c0
c0014366:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001436c:	e8 43 c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014371:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014376:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001437c:	e8 26 10 01 00       	call   c00253a7 <CPU::readDR2()>
c0014381:	5a                   	pop    edx
c0014382:	59                   	pop    ecx
c0014383:	50                   	push   eax
c0014384:	53                   	push   ebx
c0014385:	e8 50 c5 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001438a:	5b                   	pop    ebx
c001438b:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014390:	5e                   	pop    esi
c0014391:	68 c8 76 02 c0       	push   0xc00276c8
c0014396:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001439c:	e8 13 c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00143a1:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00143a6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143ac:	e8 08 10 01 00       	call   c00253b9 <CPU::readDR3()>
c00143b1:	5f                   	pop    edi
c00143b2:	5d                   	pop    ebp
c00143b3:	50                   	push   eax
c00143b4:	53                   	push   ebx
c00143b5:	e8 20 c5 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00143ba:	58                   	pop    eax
c00143bb:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00143c0:	5a                   	pop    edx
c00143c1:	68 d0 76 02 c0       	push   0xc00276d0
c00143c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143cc:	e8 e3 c4 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00143d1:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00143d6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143dc:	e8 ea 0f 01 00       	call   c00253cb <CPU::readDR6()>
c00143e1:	59                   	pop    ecx
c00143e2:	5e                   	pop    esi
c00143e3:	50                   	push   eax
c00143e4:	53                   	push   ebx
c00143e5:	e8 f0 c4 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00143ea:	5f                   	pop    edi
c00143eb:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00143f0:	5d                   	pop    ebp
c00143f1:	68 d8 76 02 c0       	push   0xc00276d8
c00143f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143fc:	e8 b3 c4 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014401:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0014406:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001440c:	e8 cc 0f 01 00       	call   c00253dd <CPU::readDR7()>
c0014411:	5a                   	pop    edx
c0014412:	59                   	pop    ecx
c0014413:	50                   	push   eax
c0014414:	53                   	push   ebx
c0014415:	e8 c0 c4 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001441a:	fa                   	cli    
c001441b:	f4                   	hlt    
c001441c:	83 c4 10             	add    esp,0x10
c001441f:	eb fe                	jmp    c001441f <displayDebugInfo(regs*)+0x415>

c0014421 <x87EmulHandler(regs*, void*)>:
c0014421:	57                   	push   edi
c0014422:	8b 0d 74 a6 02 c0    	mov    ecx,DWORD PTR ds:0xc002a674
c0014428:	56                   	push   esi
c0014429:	85 c9                	test   ecx,ecx
c001442b:	53                   	push   ebx
c001442c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014430:	74 60                	je     c0014492 <x87EmulHandler(regs*, void*)+0x71>
c0014432:	e8 03 34 00 00       	call   c001783a <thisCPU()>
c0014437:	e8 fe 33 00 00       	call   c001783a <thisCPU()>
c001443c:	e8 27 0f 01 00       	call   c0025368 <CPU::readCR0()>
c0014441:	83 ec 0c             	sub    esp,0xc
c0014444:	83 e0 fb             	and    eax,0xfffffffb
c0014447:	50                   	push   eax
c0014448:	e8 2d 0f 01 00       	call   c002537a <CPU::writeCR0(unsigned long)>
c001444d:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0014450:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014453:	ff 15 74 a6 02 c0    	call   DWORD PTR ds:0xc002a674
c0014459:	2b 73 38             	sub    esi,DWORD PTR [ebx+0x38]
c001445c:	89 c7                	mov    edi,eax
c001445e:	58                   	pop    eax
c001445f:	5a                   	pop    edx
c0014460:	56                   	push   esi
c0014461:	68 fb 76 02 c0       	push   0xc00276fb
c0014466:	e8 e6 dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001446b:	e8 ca 33 00 00       	call   c001783a <thisCPU()>
c0014470:	e8 c5 33 00 00       	call   c001783a <thisCPU()>
c0014475:	e8 ee 0e 01 00       	call   c0025368 <CPU::readCR0()>
c001447a:	83 c8 04             	or     eax,0x4
c001447d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014480:	e8 f5 0e 01 00       	call   c002537a <CPU::writeCR0(unsigned long)>
c0014485:	83 c4 10             	add    esp,0x10
c0014488:	89 f8                	mov    eax,edi
c001448a:	84 c0                	test   al,al
c001448c:	74 10                	je     c001449e <x87EmulHandler(regs*, void*)+0x7d>
c001448e:	5b                   	pop    ebx
c001448f:	5e                   	pop    esi
c0014490:	5f                   	pop    edi
c0014491:	c3                   	ret    
c0014492:	c7 05 74 a6 02 c0 f7 90 01 c0 	mov    DWORD PTR ds:0xc002a674,0xc00190f7
c001449c:	eb 94                	jmp    c0014432 <x87EmulHandler(regs*, void*)+0x11>
c001449e:	83 ec 0c             	sub    esp,0xc
c00144a1:	68 e0 76 02 c0       	push   0xc00276e0
c00144a6:	e8 a6 dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00144ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144ae:	e8 57 fb ff ff       	call   c001400a <displayDebugInfo(regs*)>

c00144b3 <gpFault(regs*, void*)>:
c00144b3:	53                   	push   ebx
c00144b4:	83 ec 14             	sub    esp,0x14
c00144b7:	c7 05 70 a6 02 c0 99 d4 01 c0 	mov    DWORD PTR ds:0xc002a670,0xc001d499
c00144c1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144c5:	53                   	push   ebx
c00144c6:	e8 ce 8f 00 00       	call   c001d499 <Vm::faultHandler(regs*)>
c00144cb:	83 c4 10             	add    esp,0x10
c00144ce:	84 c0                	test   al,al
c00144d0:	74 05                	je     c00144d7 <gpFault(regs*, void*)+0x24>
c00144d2:	83 c4 08             	add    esp,0x8
c00144d5:	5b                   	pop    ebx
c00144d6:	c3                   	ret    
c00144d7:	83 ec 0c             	sub    esp,0xc
c00144da:	68 e0 76 02 c0       	push   0xc00276e0
c00144df:	e8 6d dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00144e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144e7:	e8 1e fb ff ff       	call   c001400a <displayDebugInfo(regs*)>

c00144ec <pgFault(regs*, void*)>:
c00144ec:	83 ec 18             	sub    esp,0x18
c00144ef:	68 0e 77 02 c0       	push   0xc002770e
c00144f4:	e8 58 dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00144f9:	58                   	pop    eax
c00144fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144fe:	e8 07 fb ff ff       	call   c001400a <displayDebugInfo(regs*)>

c0014503 <otherISRHandler(regs*, void*)>:
c0014503:	53                   	push   ebx
c0014504:	83 ec 0c             	sub    esp,0xc
c0014507:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001450b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001450e:	50                   	push   eax
c001450f:	50                   	push   eax
c0014510:	68 1b 77 02 c0       	push   0xc002771b
c0014515:	e8 37 dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001451a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001451d:	e8 e8 fa ff ff       	call   c001400a <displayDebugInfo(regs*)>

c0014522 <opcodeFault(regs*, void*)>:
c0014522:	55                   	push   ebp
c0014523:	89 e5                	mov    ebp,esp
c0014525:	56                   	push   esi
c0014526:	53                   	push   ebx
c0014527:	83 ec 40             	sub    esp,0x40
c001452a:	e8 0b 33 00 00       	call   c001783a <thisCPU()>
c001452f:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014535:	84 c0                	test   al,al
c0014537:	74 24                	je     c001455d <opcodeFault(regs*, void*)+0x3b>
c0014539:	83 ec 0c             	sub    esp,0xc
c001453c:	68 38 77 02 c0       	push   0xc0027738
c0014541:	e8 0b dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014546:	83 c4 10             	add    esp,0x10
c0014549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001454c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001454f:	8d 50 19             	lea    edx,[eax+0x19]
c0014552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014555:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014558:	e9 77 05 00 00       	jmp    c0014ad4 <opcodeFault(regs*, void*)+0x5b2>
c001455d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014560:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014563:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014566:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001456a:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001456e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014571:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014574:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014577:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001457a:	8a 00                	mov    al,BYTE PTR [eax]
c001457c:	3c f0                	cmp    al,0xf0
c001457e:	75 17                	jne    c0014597 <opcodeFault(regs*, void*)+0x75>
c0014580:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014586:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014589:	8d 50 01             	lea    edx,[eax+0x1]
c001458c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001458f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014592:	e9 da 00 00 00       	jmp    c0014671 <opcodeFault(regs*, void*)+0x14f>
c0014597:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001459a:	8a 00                	mov    al,BYTE PTR [eax]
c001459c:	3c f2                	cmp    al,0xf2
c001459e:	74 09                	je     c00145a9 <opcodeFault(regs*, void*)+0x87>
c00145a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145a3:	8a 00                	mov    al,BYTE PTR [eax]
c00145a5:	3c f3                	cmp    al,0xf3
c00145a7:	75 1b                	jne    c00145c4 <opcodeFault(regs*, void*)+0xa2>
c00145a9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145b6:	8d 50 01             	lea    edx,[eax+0x1]
c00145b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145bf:	e9 ad 00 00 00       	jmp    c0014671 <opcodeFault(regs*, void*)+0x14f>
c00145c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145c7:	8a 00                	mov    al,BYTE PTR [eax]
c00145c9:	3c 66                	cmp    al,0x66
c00145cb:	75 1f                	jne    c00145ec <opcodeFault(regs*, void*)+0xca>
c00145cd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145d1:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00145d5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145de:	8d 50 01             	lea    edx,[eax+0x1]
c00145e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145e4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145e7:	e9 85 00 00 00       	jmp    c0014671 <opcodeFault(regs*, void*)+0x14f>
c00145ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145ef:	8a 00                	mov    al,BYTE PTR [eax]
c00145f1:	3c 67                	cmp    al,0x67
c00145f3:	75 18                	jne    c001460d <opcodeFault(regs*, void*)+0xeb>
c00145f5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145f9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014602:	8d 50 01             	lea    edx,[eax+0x1]
c0014605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014608:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001460b:	eb 64                	jmp    c0014671 <opcodeFault(regs*, void*)+0x14f>
c001460d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014610:	8a 00                	mov    al,BYTE PTR [eax]
c0014612:	3c 2e                	cmp    al,0x2e
c0014614:	74 09                	je     c001461f <opcodeFault(regs*, void*)+0xfd>
c0014616:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014619:	8a 00                	mov    al,BYTE PTR [eax]
c001461b:	3c 3e                	cmp    al,0x3e
c001461d:	75 18                	jne    c0014637 <opcodeFault(regs*, void*)+0x115>
c001461f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014623:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014629:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001462c:	8d 50 01             	lea    edx,[eax+0x1]
c001462f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014632:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014635:	eb 3a                	jmp    c0014671 <opcodeFault(regs*, void*)+0x14f>
c0014637:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001463a:	8a 00                	mov    al,BYTE PTR [eax]
c001463c:	3c 36                	cmp    al,0x36
c001463e:	74 1b                	je     c001465b <opcodeFault(regs*, void*)+0x139>
c0014640:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014643:	8a 00                	mov    al,BYTE PTR [eax]
c0014645:	3c 26                	cmp    al,0x26
c0014647:	74 12                	je     c001465b <opcodeFault(regs*, void*)+0x139>
c0014649:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001464c:	8a 00                	mov    al,BYTE PTR [eax]
c001464e:	3c 64                	cmp    al,0x64
c0014650:	74 09                	je     c001465b <opcodeFault(regs*, void*)+0x139>
c0014652:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014655:	8a 00                	mov    al,BYTE PTR [eax]
c0014657:	3c 65                	cmp    al,0x65
c0014659:	75 16                	jne    c0014671 <opcodeFault(regs*, void*)+0x14f>
c001465b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001465f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014665:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014668:	8d 50 01             	lea    edx,[eax+0x1]
c001466b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001466e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014671:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014674:	8a 00                	mov    al,BYTE PTR [eax]
c0014676:	3c 0f                	cmp    al,0xf
c0014678:	0f 85 ad 00 00 00    	jne    c001472b <opcodeFault(regs*, void*)+0x209>
c001467e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014681:	40                   	inc    eax
c0014682:	8a 00                	mov    al,BYTE PTR [eax]
c0014684:	3c c2                	cmp    al,0xc2
c0014686:	74 0e                	je     c0014696 <opcodeFault(regs*, void*)+0x174>
c0014688:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001468b:	40                   	inc    eax
c001468c:	8a 00                	mov    al,BYTE PTR [eax]
c001468e:	3c c3                	cmp    al,0xc3
c0014690:	0f 85 95 00 00 00    	jne    c001472b <opcodeFault(regs*, void*)+0x209>
c0014696:	83 ec 0c             	sub    esp,0xc
c0014699:	68 5b 77 02 c0       	push   0xc002775b
c001469e:	e8 ae db ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00146a3:	83 c4 10             	add    esp,0x10
c00146a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146ac:	8d 50 01             	lea    edx,[eax+0x1]
c00146af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146b5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00146b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146bb:	8a 00                	mov    al,BYTE PTR [eax]
c00146bd:	8d 50 fe             	lea    edx,[eax-0x2]
c00146c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146c3:	88 10                	mov    BYTE PTR [eax],dl
c00146c5:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00146c8:	50                   	push   eax
c00146c9:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00146cc:	50                   	push   eax
c00146cd:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00146d0:	50                   	push   eax
c00146d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00146d4:	e8 e9 40 00 00       	call   c00187c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00146d9:	83 c4 10             	add    esp,0x10
c00146dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146e2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00146e5:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00146e8:	01 d0                	add    eax,edx
c00146ea:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00146ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146f3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00146f6:	48                   	dec    eax
c00146f7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00146fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146fd:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014700:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014706:	83 ec 04             	sub    esp,0x4
c0014709:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001470c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001470f:	50                   	push   eax
c0014710:	e8 54 ba fe ff       	call   c0000169 <voodooXADD>
c0014715:	83 c4 10             	add    esp,0x10
c0014718:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001471b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001471e:	01 c2                	add    edx,eax
c0014720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014723:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014726:	e9 a9 03 00 00       	jmp    c0014ad4 <opcodeFault(regs*, void*)+0x5b2>
c001472b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001472e:	8a 00                	mov    al,BYTE PTR [eax]
c0014730:	3c 0f                	cmp    al,0xf
c0014732:	0f 85 8b 01 00 00    	jne    c00148c3 <opcodeFault(regs*, void*)+0x3a1>
c0014738:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001473b:	40                   	inc    eax
c001473c:	8a 00                	mov    al,BYTE PTR [eax]
c001473e:	3c c7                	cmp    al,0xc7
c0014740:	0f 86 7d 01 00 00    	jbe    c00148c3 <opcodeFault(regs*, void*)+0x3a1>
c0014746:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014749:	40                   	inc    eax
c001474a:	8a 00                	mov    al,BYTE PTR [eax]
c001474c:	3c cf                	cmp    al,0xcf
c001474e:	0f 87 6f 01 00 00    	ja     c00148c3 <opcodeFault(regs*, void*)+0x3a1>
c0014754:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014757:	40                   	inc    eax
c0014758:	8a 00                	mov    al,BYTE PTR [eax]
c001475a:	83 c0 38             	add    eax,0x38
c001475d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014760:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014764:	75 0b                	jne    c0014771 <opcodeFault(regs*, void*)+0x24f>
c0014766:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014769:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001476c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001476f:	eb 75                	jmp    c00147e6 <opcodeFault(regs*, void*)+0x2c4>
c0014771:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014775:	75 0b                	jne    c0014782 <opcodeFault(regs*, void*)+0x260>
c0014777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001477a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001477d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014780:	eb 64                	jmp    c00147e6 <opcodeFault(regs*, void*)+0x2c4>
c0014782:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014786:	75 0b                	jne    c0014793 <opcodeFault(regs*, void*)+0x271>
c0014788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001478b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001478e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014791:	eb 53                	jmp    c00147e6 <opcodeFault(regs*, void*)+0x2c4>
c0014793:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014797:	75 0b                	jne    c00147a4 <opcodeFault(regs*, void*)+0x282>
c0014799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001479c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001479f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147a2:	eb 42                	jmp    c00147e6 <opcodeFault(regs*, void*)+0x2c4>
c00147a4:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00147a8:	75 0b                	jne    c00147b5 <opcodeFault(regs*, void*)+0x293>
c00147aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ad:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00147b0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147b3:	eb 31                	jmp    c00147e6 <opcodeFault(regs*, void*)+0x2c4>
c00147b5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00147b9:	75 0b                	jne    c00147c6 <opcodeFault(regs*, void*)+0x2a4>
c00147bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147be:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00147c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147c4:	eb 20                	jmp    c00147e6 <opcodeFault(regs*, void*)+0x2c4>
c00147c6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00147ca:	75 0b                	jne    c00147d7 <opcodeFault(regs*, void*)+0x2b5>
c00147cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147cf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00147d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147d5:	eb 0f                	jmp    c00147e6 <opcodeFault(regs*, void*)+0x2c4>
c00147d7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00147db:	75 09                	jne    c00147e6 <opcodeFault(regs*, void*)+0x2c4>
c00147dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147e0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00147e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147e6:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00147ea:	74 10                	je     c00147fc <opcodeFault(regs*, void*)+0x2da>
c00147ec:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00147f3:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00147fa:	eb 2d                	jmp    c0014829 <opcodeFault(regs*, void*)+0x307>
c00147fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00147ff:	c1 e0 18             	shl    eax,0x18
c0014802:	89 c2                	mov    edx,eax
c0014804:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014807:	c1 e0 08             	shl    eax,0x8
c001480a:	25 00 00 ff 00       	and    eax,0xff0000
c001480f:	09 c2                	or     edx,eax
c0014811:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014814:	c1 e8 08             	shr    eax,0x8
c0014817:	25 00 ff 00 00       	and    eax,0xff00
c001481c:	09 c2                	or     edx,eax
c001481e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014821:	c1 e8 18             	shr    eax,0x18
c0014824:	09 d0                	or     eax,edx
c0014826:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014829:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001482d:	75 0b                	jne    c001483a <opcodeFault(regs*, void*)+0x318>
c001482f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014832:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014835:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014838:	eb 75                	jmp    c00148af <opcodeFault(regs*, void*)+0x38d>
c001483a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001483e:	75 0b                	jne    c001484b <opcodeFault(regs*, void*)+0x329>
c0014840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014843:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014846:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014849:	eb 64                	jmp    c00148af <opcodeFault(regs*, void*)+0x38d>
c001484b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001484f:	75 0b                	jne    c001485c <opcodeFault(regs*, void*)+0x33a>
c0014851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014854:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014857:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001485a:	eb 53                	jmp    c00148af <opcodeFault(regs*, void*)+0x38d>
c001485c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014860:	75 0b                	jne    c001486d <opcodeFault(regs*, void*)+0x34b>
c0014862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014865:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014868:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001486b:	eb 42                	jmp    c00148af <opcodeFault(regs*, void*)+0x38d>
c001486d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014871:	75 0b                	jne    c001487e <opcodeFault(regs*, void*)+0x35c>
c0014873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014876:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014879:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001487c:	eb 31                	jmp    c00148af <opcodeFault(regs*, void*)+0x38d>
c001487e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014882:	75 0b                	jne    c001488f <opcodeFault(regs*, void*)+0x36d>
c0014884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014887:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001488a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001488d:	eb 20                	jmp    c00148af <opcodeFault(regs*, void*)+0x38d>
c001488f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014893:	75 0b                	jne    c00148a0 <opcodeFault(regs*, void*)+0x37e>
c0014895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014898:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001489b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001489e:	eb 0f                	jmp    c00148af <opcodeFault(regs*, void*)+0x38d>
c00148a0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00148a4:	75 09                	jne    c00148af <opcodeFault(regs*, void*)+0x38d>
c00148a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148a9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00148af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148b5:	8d 50 02             	lea    edx,[eax+0x2]
c00148b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148bb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148be:	e9 11 02 00 00       	jmp    c0014ad4 <opcodeFault(regs*, void*)+0x5b2>
c00148c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148c6:	8a 00                	mov    al,BYTE PTR [eax]
c00148c8:	3c 0f                	cmp    al,0xf
c00148ca:	0f 85 76 01 00 00    	jne    c0014a46 <opcodeFault(regs*, void*)+0x524>
c00148d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148d3:	40                   	inc    eax
c00148d4:	8a 00                	mov    al,BYTE PTR [eax]
c00148d6:	3c c7                	cmp    al,0xc7
c00148d8:	0f 85 68 01 00 00    	jne    c0014a46 <opcodeFault(regs*, void*)+0x524>
c00148de:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00148e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148e7:	8d 50 01             	lea    edx,[eax+0x1]
c00148ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148f0:	8d 45 ba             	lea    eax,[ebp-0x46]
c00148f3:	50                   	push   eax
c00148f4:	8d 45 bb             	lea    eax,[ebp-0x45]
c00148f7:	50                   	push   eax
c00148f8:	8d 45 bc             	lea    eax,[ebp-0x44]
c00148fb:	50                   	push   eax
c00148fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00148ff:	e8 be 3e 00 00       	call   c00187c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014904:	83 c4 10             	add    esp,0x10
c0014907:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001490a:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001490d:	83 f0 01             	xor    eax,0x1
c0014910:	84 c0                	test   al,al
c0014912:	0f 84 2e 01 00 00    	je     c0014a46 <opcodeFault(regs*, void*)+0x524>
c0014918:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001491b:	3c 01                	cmp    al,0x1
c001491d:	0f 85 23 01 00 00    	jne    c0014a46 <opcodeFault(regs*, void*)+0x524>
c0014923:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014926:	83 f0 01             	xor    eax,0x1
c0014929:	84 c0                	test   al,al
c001492b:	0f 84 15 01 00 00    	je     c0014a46 <opcodeFault(regs*, void*)+0x524>
c0014931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014934:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014937:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001493a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014941:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014944:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014947:	89 c2                	mov    edx,eax
c0014949:	b8 00 00 00 00       	mov    eax,0x0
c001494e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014951:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014957:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001495a:	ba 00 00 00 00       	mov    edx,0x0
c001495f:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014962:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014968:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001496b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001496e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014975:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014978:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001497b:	89 c2                	mov    edx,eax
c001497d:	b8 00 00 00 00       	mov    eax,0x0
c0014982:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014985:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001498b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001498e:	ba 00 00 00 00       	mov    edx,0x0
c0014993:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014996:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014999:	e8 88 7c 00 00       	call   c001c626 <lockScheduler()>
c001499e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149a1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00149a6:	89 c1                	mov    ecx,eax
c00149a8:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00149ab:	89 cb                	mov    ebx,ecx
c00149ad:	89 d0                	mov    eax,edx
c00149af:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00149b2:	89 c6                	mov    esi,eax
c00149b4:	89 f0                	mov    eax,esi
c00149b6:	09 d8                	or     eax,ebx
c00149b8:	85 c0                	test   eax,eax
c00149ba:	75 21                	jne    c00149dd <opcodeFault(regs*, void*)+0x4bb>
c00149bc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00149bf:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149c2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149c5:	89 01                	mov    DWORD PTR [ecx],eax
c00149c7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00149ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149d0:	83 c8 40             	or     eax,0x40
c00149d3:	89 c2                	mov    edx,eax
c00149d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00149db:	eb 3e                	jmp    c0014a1b <opcodeFault(regs*, void*)+0x4f9>
c00149dd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00149e5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00149e8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00149eb:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00149ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00149f4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00149f7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00149fa:	89 d0                	mov    eax,edx
c00149fc:	31 d2                	xor    edx,edx
c00149fe:	89 c3                	mov    ebx,eax
c0014a00:	89 d6                	mov    esi,edx
c0014a02:	89 da                	mov    edx,ebx
c0014a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a07:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014a0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a0d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a10:	83 e0 bf             	and    eax,0xffffffbf
c0014a13:	89 c2                	mov    edx,eax
c0014a15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a18:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a1b:	e8 08 7c 00 00       	call   c001c628 <unlockScheduler()>
c0014a20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a26:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a29:	01 c2                	add    edx,eax
c0014a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a31:	83 ec 0c             	sub    esp,0xc
c0014a34:	68 6a 77 02 c0       	push   0xc002776a
c0014a39:	e8 13 d8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014a3e:	83 c4 10             	add    esp,0x10
c0014a41:	e9 8e 00 00 00       	jmp    c0014ad4 <opcodeFault(regs*, void*)+0x5b2>
c0014a46:	83 ec 0c             	sub    esp,0xc
c0014a49:	68 7d 77 02 c0       	push   0xc002777d
c0014a4e:	e8 fe d7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014a53:	83 c4 10             	add    esp,0x10
c0014a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a59:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a62:	c1 e0 04             	shl    eax,0x4
c0014a65:	01 d0                	add    eax,edx
c0014a67:	83 c0 03             	add    eax,0x3
c0014a6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a6c:	0f b6 d8             	movzx  ebx,al
c0014a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a72:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a7b:	c1 e0 04             	shl    eax,0x4
c0014a7e:	01 d0                	add    eax,edx
c0014a80:	83 c0 02             	add    eax,0x2
c0014a83:	8a 00                	mov    al,BYTE PTR [eax]
c0014a85:	0f b6 c8             	movzx  ecx,al
c0014a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a94:	c1 e0 04             	shl    eax,0x4
c0014a97:	01 d0                	add    eax,edx
c0014a99:	40                   	inc    eax
c0014a9a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a9c:	0f b6 d0             	movzx  edx,al
c0014a9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa2:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014aab:	c1 e0 04             	shl    eax,0x4
c0014aae:	01 f0                	add    eax,esi
c0014ab0:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab2:	0f b6 c0             	movzx  eax,al
c0014ab5:	83 ec 0c             	sub    esp,0xc
c0014ab8:	53                   	push   ebx
c0014ab9:	51                   	push   ecx
c0014aba:	52                   	push   edx
c0014abb:	50                   	push   eax
c0014abc:	68 90 77 02 c0       	push   0xc0027790
c0014ac1:	e8 8b d7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014ac6:	83 c4 20             	add    esp,0x20
c0014ac9:	83 ec 0c             	sub    esp,0xc
c0014acc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014acf:	e8 36 f5 ff ff       	call   c001400a <displayDebugInfo(regs*)>
c0014ad4:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014ad7:	5b                   	pop    ebx
c0014ad8:	5e                   	pop    esi
c0014ad9:	5d                   	pop    ebp
c0014ada:	c3                   	ret    

c0014adb <displayProgramFault(char const*)>:
c0014adb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ae0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ae3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014ae9:	85 c0                	test   eax,eax
c0014aeb:	74 15                	je     c0014b02 <displayProgramFault(char const*)+0x27>
c0014aed:	83 ec 0c             	sub    esp,0xc
c0014af0:	6a 04                	push   0x4
c0014af2:	6a 0f                	push   0xf
c0014af4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014af8:	50                   	push   eax
c0014af9:	e8 78 ba ff ff       	call   c0010576 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014afe:	83 c4 1c             	add    esp,0x1c
c0014b01:	c3                   	ret    
c0014b02:	c3                   	ret    

c0014b03 <setupInterruptController()>:
c0014b03:	55                   	push   ebp
c0014b04:	89 e5                	mov    ebp,esp
c0014b06:	53                   	push   ebx
c0014b07:	83 ec 14             	sub    esp,0x14
c0014b0a:	e8 28 2d 00 00       	call   c0017837 <getCPUNumber()>
c0014b0f:	85 c0                	test   eax,eax
c0014b11:	0f 95 c0             	setne  al
c0014b14:	84 c0                	test   al,al
c0014b16:	74 56                	je     c0014b6e <setupInterruptController()+0x6b>
c0014b18:	83 ec 0c             	sub    esp,0xc
c0014b1b:	68 58 21 00 00       	push   0x2158
c0014b20:	e8 3d d6 ff ff       	call   c0012162 <operator new(unsigned long)>
c0014b25:	83 c4 10             	add    esp,0x10
c0014b28:	89 c3                	mov    ebx,eax
c0014b2a:	83 ec 0c             	sub    esp,0xc
c0014b2d:	53                   	push   ebx
c0014b2e:	e8 41 d6 00 00       	call   c0022174 <APIC::APIC()>
c0014b33:	83 c4 10             	add    esp,0x10
c0014b36:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b39:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b41:	83 c0 08             	add    eax,0x8
c0014b44:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b46:	6a 00                	push   0x0
c0014b48:	6a 00                	push   0x0
c0014b4a:	6a 00                	push   0x0
c0014b4c:	52                   	push   edx
c0014b4d:	ff d0                	call   eax
c0014b4f:	83 c4 10             	add    esp,0x10
c0014b52:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0014b57:	83 ec 08             	sub    esp,0x8
c0014b5a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014b5d:	50                   	push   eax
c0014b5e:	e8 f9 ea ff ff       	call   c001365c <Device::addChild(Device*)>
c0014b63:	83 c4 10             	add    esp,0x10
c0014b66:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b69:	e9 48 03 00 00       	jmp    c0014eb6 <setupInterruptController()+0x3b3>
c0014b6e:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0014b73:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014b79:	83 e0 01             	and    eax,0x1
c0014b7c:	84 c0                	test   al,al
c0014b7e:	0f 95 c0             	setne  al
c0014b81:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014b84:	83 ec 0c             	sub    esp,0xc
c0014b87:	68 58 21 00 00       	push   0x2158
c0014b8c:	e8 d1 d5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0014b91:	83 c4 10             	add    esp,0x10
c0014b94:	89 c3                	mov    ebx,eax
c0014b96:	83 ec 0c             	sub    esp,0xc
c0014b99:	53                   	push   ebx
c0014b9a:	e8 97 da 00 00       	call   c0022636 <PIC::PIC()>
c0014b9f:	83 c4 10             	add    esp,0x10
c0014ba2:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014ba5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014ba8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bab:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bad:	83 c0 08             	add    eax,0x8
c0014bb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bb2:	6a 00                	push   0x0
c0014bb4:	6a 00                	push   0x0
c0014bb6:	6a 00                	push   0x0
c0014bb8:	52                   	push   edx
c0014bb9:	ff d0                	call   eax
c0014bbb:	83 c4 10             	add    esp,0x10
c0014bbe:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014bc2:	74 6e                	je     c0014c32 <setupInterruptController()+0x12f>
c0014bc4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bca:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bcc:	83 c0 0c             	add    eax,0xc
c0014bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bd1:	6a 00                	push   0x0
c0014bd3:	6a 00                	push   0x0
c0014bd5:	6a 00                	push   0x0
c0014bd7:	52                   	push   edx
c0014bd8:	ff d0                	call   eax
c0014bda:	83 c4 10             	add    esp,0x10
c0014bdd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014be1:	74 15                	je     c0014bf8 <setupInterruptController()+0xf5>
c0014be3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014be6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014be8:	83 c0 04             	add    eax,0x4
c0014beb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bed:	83 ec 0c             	sub    esp,0xc
c0014bf0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014bf3:	ff d0                	call   eax
c0014bf5:	83 c4 10             	add    esp,0x10
c0014bf8:	83 ec 0c             	sub    esp,0xc
c0014bfb:	68 58 21 00 00       	push   0x2158
c0014c00:	e8 5d d5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	89 c3                	mov    ebx,eax
c0014c0a:	83 ec 0c             	sub    esp,0xc
c0014c0d:	53                   	push   ebx
c0014c0e:	e8 61 d5 00 00       	call   c0022174 <APIC::APIC()>
c0014c13:	83 c4 10             	add    esp,0x10
c0014c16:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c19:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c21:	83 c0 08             	add    eax,0x8
c0014c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c26:	6a 00                	push   0x0
c0014c28:	6a 00                	push   0x0
c0014c2a:	6a 00                	push   0x0
c0014c2c:	52                   	push   edx
c0014c2d:	ff d0                	call   eax
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0014c37:	83 ec 08             	sub    esp,0x8
c0014c3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c3d:	50                   	push   eax
c0014c3e:	e8 19 ea ff ff       	call   c001365c <Device::addChild(Device*)>
c0014c43:	83 c4 10             	add    esp,0x10
c0014c46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c4b:	83 c0 24             	add    eax,0x24
c0014c4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c50:	6a 00                	push   0x0
c0014c52:	68 03 45 01 c0       	push   0xc0014503
c0014c57:	6a 00                	push   0x0
c0014c59:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c5c:	ff d0                	call   eax
c0014c5e:	83 c4 10             	add    esp,0x10
c0014c61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c66:	83 c0 24             	add    eax,0x24
c0014c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c6b:	6a 00                	push   0x0
c0014c6d:	68 03 45 01 c0       	push   0xc0014503
c0014c72:	6a 01                	push   0x1
c0014c74:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c77:	ff d0                	call   eax
c0014c79:	83 c4 10             	add    esp,0x10
c0014c7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c81:	83 c0 24             	add    eax,0x24
c0014c84:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c86:	6a 00                	push   0x0
c0014c88:	68 6d 3e 01 c0       	push   0xc0013e6d
c0014c8d:	6a 02                	push   0x2
c0014c8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c92:	ff d0                	call   eax
c0014c94:	83 c4 10             	add    esp,0x10
c0014c97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c9c:	83 c0 24             	add    eax,0x24
c0014c9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ca1:	6a 00                	push   0x0
c0014ca3:	68 03 45 01 c0       	push   0xc0014503
c0014ca8:	6a 03                	push   0x3
c0014caa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cad:	ff d0                	call   eax
c0014caf:	83 c4 10             	add    esp,0x10
c0014cb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cb7:	83 c0 24             	add    eax,0x24
c0014cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cbc:	6a 00                	push   0x0
c0014cbe:	68 03 45 01 c0       	push   0xc0014503
c0014cc3:	6a 04                	push   0x4
c0014cc5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cc8:	ff d0                	call   eax
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd2:	83 c0 24             	add    eax,0x24
c0014cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd7:	6a 00                	push   0x0
c0014cd9:	68 03 45 01 c0       	push   0xc0014503
c0014cde:	6a 05                	push   0x5
c0014ce0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ce3:	ff d0                	call   eax
c0014ce5:	83 c4 10             	add    esp,0x10
c0014ce8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ced:	83 c0 24             	add    eax,0x24
c0014cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cf2:	6a 00                	push   0x0
c0014cf4:	68 22 45 01 c0       	push   0xc0014522
c0014cf9:	6a 06                	push   0x6
c0014cfb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cfe:	ff d0                	call   eax
c0014d00:	83 c4 10             	add    esp,0x10
c0014d03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d06:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d08:	83 c0 24             	add    eax,0x24
c0014d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d0d:	6a 00                	push   0x0
c0014d0f:	68 21 44 01 c0       	push   0xc0014421
c0014d14:	6a 07                	push   0x7
c0014d16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d19:	ff d0                	call   eax
c0014d1b:	83 c4 10             	add    esp,0x10
c0014d1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d23:	83 c0 24             	add    eax,0x24
c0014d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d28:	6a 00                	push   0x0
c0014d2a:	68 88 3c 01 c0       	push   0xc0013c88
c0014d2f:	6a 08                	push   0x8
c0014d31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d34:	ff d0                	call   eax
c0014d36:	83 c4 10             	add    esp,0x10
c0014d39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d3e:	83 c0 24             	add    eax,0x24
c0014d41:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d43:	6a 00                	push   0x0
c0014d45:	68 03 45 01 c0       	push   0xc0014503
c0014d4a:	6a 09                	push   0x9
c0014d4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d4f:	ff d0                	call   eax
c0014d51:	83 c4 10             	add    esp,0x10
c0014d54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d57:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d59:	83 c0 24             	add    eax,0x24
c0014d5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d5e:	6a 00                	push   0x0
c0014d60:	68 03 45 01 c0       	push   0xc0014503
c0014d65:	6a 0a                	push   0xa
c0014d67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d6a:	ff d0                	call   eax
c0014d6c:	83 c4 10             	add    esp,0x10
c0014d6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d74:	83 c0 24             	add    eax,0x24
c0014d77:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d79:	6a 00                	push   0x0
c0014d7b:	68 03 45 01 c0       	push   0xc0014503
c0014d80:	6a 0b                	push   0xb
c0014d82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d85:	ff d0                	call   eax
c0014d87:	83 c4 10             	add    esp,0x10
c0014d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8f:	83 c0 24             	add    eax,0x24
c0014d92:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d94:	6a 00                	push   0x0
c0014d96:	68 03 45 01 c0       	push   0xc0014503
c0014d9b:	6a 0c                	push   0xc
c0014d9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014da0:	ff d0                	call   eax
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014daa:	83 c0 24             	add    eax,0x24
c0014dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0014daf:	6a 00                	push   0x0
c0014db1:	68 b3 44 01 c0       	push   0xc00144b3
c0014db6:	6a 0d                	push   0xd
c0014db8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dbb:	ff d0                	call   eax
c0014dbd:	83 c4 10             	add    esp,0x10
c0014dc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc5:	83 c0 24             	add    eax,0x24
c0014dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dca:	6a 00                	push   0x0
c0014dcc:	68 ec 44 01 c0       	push   0xc00144ec
c0014dd1:	6a 0e                	push   0xe
c0014dd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dd6:	ff d0                	call   eax
c0014dd8:	83 c4 10             	add    esp,0x10
c0014ddb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de0:	83 c0 24             	add    eax,0x24
c0014de3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de5:	6a 00                	push   0x0
c0014de7:	68 03 45 01 c0       	push   0xc0014503
c0014dec:	6a 0f                	push   0xf
c0014dee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014df1:	ff d0                	call   eax
c0014df3:	83 c4 10             	add    esp,0x10
c0014df6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dfb:	83 c0 24             	add    eax,0x24
c0014dfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e00:	6a 00                	push   0x0
c0014e02:	68 03 45 01 c0       	push   0xc0014503
c0014e07:	6a 10                	push   0x10
c0014e09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e0c:	ff d0                	call   eax
c0014e0e:	83 c4 10             	add    esp,0x10
c0014e11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e16:	83 c0 24             	add    eax,0x24
c0014e19:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1b:	6a 00                	push   0x0
c0014e1d:	68 03 45 01 c0       	push   0xc0014503
c0014e22:	6a 11                	push   0x11
c0014e24:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e27:	ff d0                	call   eax
c0014e29:	83 c4 10             	add    esp,0x10
c0014e2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e31:	83 c0 24             	add    eax,0x24
c0014e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e36:	6a 00                	push   0x0
c0014e38:	68 03 45 01 c0       	push   0xc0014503
c0014e3d:	6a 12                	push   0x12
c0014e3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e42:	ff d0                	call   eax
c0014e44:	83 c4 10             	add    esp,0x10
c0014e47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e4c:	83 c0 24             	add    eax,0x24
c0014e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e51:	6a 00                	push   0x0
c0014e53:	68 03 45 01 c0       	push   0xc0014503
c0014e58:	6a 13                	push   0x13
c0014e5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e5d:	ff d0                	call   eax
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e65:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e67:	83 c0 24             	add    eax,0x24
c0014e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e6c:	6a 00                	push   0x0
c0014e6e:	68 03 45 01 c0       	push   0xc0014503
c0014e73:	6a 14                	push   0x14
c0014e75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e78:	ff d0                	call   eax
c0014e7a:	83 c4 10             	add    esp,0x10
c0014e7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e82:	83 c0 24             	add    eax,0x24
c0014e85:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e87:	6a 00                	push   0x0
c0014e89:	68 03 45 01 c0       	push   0xc0014503
c0014e8e:	6a 1e                	push   0x1e
c0014e90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e93:	ff d0                	call   eax
c0014e95:	83 c4 10             	add    esp,0x10
c0014e98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e9d:	83 c0 24             	add    eax,0x24
c0014ea0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea2:	6a 00                	push   0x0
c0014ea4:	68 3d b0 01 c0       	push   0xc001b03d
c0014ea9:	6a 60                	push   0x60
c0014eab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014eae:	ff d0                	call   eax
c0014eb0:	83 c4 10             	add    esp,0x10
c0014eb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014eb9:	c9                   	leave  
c0014eba:	c3                   	ret    
c0014ebb:	90                   	nop

c0014ebc <InterruptController::convertLegacyIRQNumber(int)>:
c0014ebc:	55                   	push   ebp
c0014ebd:	89 e5                	mov    ebp,esp
c0014ebf:	83 ec 08             	sub    esp,0x8
c0014ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec5:	83 ec 0c             	sub    esp,0xc
c0014ec8:	50                   	push   eax
c0014ec9:	e8 70 ea ff ff       	call   c001393e <Device::getName()>
c0014ece:	83 c4 10             	add    esp,0x10
c0014ed1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed3:	3c 41                	cmp    al,0x41
c0014ed5:	0f 94 c0             	sete   al
c0014ed8:	84 c0                	test   al,al
c0014eda:	74 28                	je     c0014f04 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014edc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014ee0:	7f 12                	jg     c0014ef4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014ee2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014ee5:	05 e0 96 02 c0       	add    eax,0xc00296e0
c0014eea:	8a 00                	mov    al,BYTE PTR [eax]
c0014eec:	0f b6 c0             	movzx  eax,al
c0014eef:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014ef2:	eb 10                	jmp    c0014f04 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014ef4:	83 ec 0c             	sub    esp,0xc
c0014ef7:	68 14 75 02 c0       	push   0xc0027514
c0014efc:	e8 d2 47 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0014f01:	83 c4 10             	add    esp,0x10
c0014f04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f07:	c9                   	leave  
c0014f08:	c3                   	ret    
c0014f09:	90                   	nop

c0014f0a <startGUI(void*)>:
c0014f0a:	55                   	push   ebp
c0014f0b:	89 e5                	mov    ebp,esp
c0014f0d:	53                   	push   ebx
c0014f0e:	83 ec 04             	sub    esp,0x4
c0014f11:	e8 12 77 00 00       	call   c001c628 <unlockScheduler()>
c0014f16:	e8 f6 76 00 00       	call   c001c611 <getIRQNestingLevel()>
c0014f1b:	83 ec 08             	sub    esp,0x8
c0014f1e:	50                   	push   eax
c0014f1f:	68 f8 77 02 c0       	push   0xc00277f8
c0014f24:	e8 28 d3 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014f29:	83 c4 10             	add    esp,0x10
c0014f2c:	8b 1d e8 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4e8
c0014f32:	83 ec 08             	sub    esp,0x8
c0014f35:	6a 01                	push   0x1
c0014f37:	68 12 78 02 c0       	push   0xc0027812
c0014f3c:	e8 15 71 00 00       	call   c001c056 <Thr::loadDLL(char const*, bool)>
c0014f41:	83 c4 10             	add    esp,0x10
c0014f44:	83 ec 08             	sub    esp,0x8
c0014f47:	53                   	push   ebx
c0014f48:	50                   	push   eax
c0014f49:	e8 ce 72 00 00       	call   c001c21c <Thr::executeDLL(unsigned long, void*)>
c0014f4e:	83 c4 10             	add    esp,0x10
c0014f51:	8b 1d e8 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4e8
c0014f57:	83 ec 08             	sub    esp,0x8
c0014f5a:	6a 01                	push   0x1
c0014f5c:	68 2c 78 02 c0       	push   0xc002782c
c0014f61:	e8 f0 70 00 00       	call   c001c056 <Thr::loadDLL(char const*, bool)>
c0014f66:	83 c4 10             	add    esp,0x10
c0014f69:	83 ec 08             	sub    esp,0x8
c0014f6c:	53                   	push   ebx
c0014f6d:	50                   	push   eax
c0014f6e:	e8 a9 72 00 00       	call   c001c21c <Thr::executeDLL(unsigned long, void*)>
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	90                   	nop
c0014f77:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014f7a:	c9                   	leave  
c0014f7b:	c3                   	ret    

c0014f7c <sendKeyToTerminal(unsigned char)>:
c0014f7c:	55                   	push   ebp
c0014f7d:	89 e5                	mov    ebp,esp
c0014f7f:	83 ec 28             	sub    esp,0x28
c0014f82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f85:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014f88:	a1 a4 a5 02 c0       	mov    eax,ds:0xc002a5a4
c0014f8d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014f91:	83 ec 08             	sub    esp,0x8
c0014f94:	52                   	push   edx
c0014f95:	50                   	push   eax
c0014f96:	e8 17 bb ff ff       	call   c0010ab2 <VgaText::receiveKey(unsigned char)>
c0014f9b:	83 c4 10             	add    esp,0x10
c0014f9e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014fa2:	75 41                	jne    c0014fe5 <sendKeyToTerminal(unsigned char)+0x69>
c0014fa4:	e8 a4 76 00 00       	call   c001c64d <lockStuff()>
c0014fa9:	a1 80 a6 02 c0       	mov    eax,ds:0xc002a680
c0014fae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fb1:	c7 05 80 a6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a680,0x0
c0014fbb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fbf:	74 1f                	je     c0014fe0 <sendKeyToTerminal(unsigned char)+0x64>
c0014fc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fc4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014fc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014fcd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fd0:	83 ec 0c             	sub    esp,0xc
c0014fd3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fd6:	e8 5b 7c 00 00       	call   c001cc36 <unblockTask(ThreadControlBlock*)>
c0014fdb:	83 c4 10             	add    esp,0x10
c0014fde:	eb db                	jmp    c0014fbb <sendKeyToTerminal(unsigned char)+0x3f>
c0014fe0:	e8 fa 79 00 00       	call   c001c9df <unlockStuff()>
c0014fe5:	90                   	nop
c0014fe6:	c9                   	leave  
c0014fe7:	c3                   	ret    

c0014fe8 <sendKeyboardToken(KeyboardToken)>:
c0014fe8:	55                   	push   ebp
c0014fe9:	89 e5                	mov    ebp,esp
c0014feb:	83 ec 18             	sub    esp,0x18
c0014fee:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0014ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff4:	0f b7 c0             	movzx  eax,ax
c0014ff7:	83 f2 01             	xor    edx,0x1
c0014ffa:	88 90 a0 a6 02 c0    	mov    BYTE PTR [eax-0x3ffd5960],dl
c0015000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015003:	66 3d 03 02          	cmp    ax,0x203
c0015007:	75 07                	jne    c0015010 <sendKeyboardToken(KeyboardToken)+0x28>
c0015009:	a0 a0 a7 02 c0       	mov    al,ds:0xc002a7a0
c001500e:	84 c0                	test   al,al
c0015010:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015014:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015017:	a0 a8 aa 02 c0       	mov    al,ds:0xc002aaa8
c001501c:	38 c2                	cmp    dl,al
c001501e:	74 1c                	je     c001503c <sendKeyboardToken(KeyboardToken)+0x54>
c0015020:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015023:	a2 a8 aa 02 c0       	mov    ds:0xc002aaa8,al
c0015028:	a0 a8 aa 02 c0       	mov    al,ds:0xc002aaa8
c001502d:	0f b6 c0             	movzx  eax,al
c0015030:	83 ec 0c             	sub    esp,0xc
c0015033:	50                   	push   eax
c0015034:	e8 e7 ac ff ff       	call   c000fd20 <setTerminalScrollLock(bool)>
c0015039:	83 c4 10             	add    esp,0x10
c001503c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001503f:	84 c0                	test   al,al
c0015041:	0f 84 ae 00 00 00    	je     c00150f5 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504a:	66 3d 10 03          	cmp    ax,0x310
c001504e:	75 06                	jne    c0015056 <sendKeyboardToken(KeyboardToken)+0x6e>
c0015050:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015056:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015059:	66 3d 11 03          	cmp    ax,0x311
c001505d:	75 06                	jne    c0015065 <sendKeyboardToken(KeyboardToken)+0x7d>
c001505f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015068:	66 3d 12 03          	cmp    ax,0x312
c001506c:	75 06                	jne    c0015074 <sendKeyboardToken(KeyboardToken)+0x8c>
c001506e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015077:	66 3d 13 03          	cmp    ax,0x313
c001507b:	75 06                	jne    c0015083 <sendKeyboardToken(KeyboardToken)+0x9b>
c001507d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015086:	66 3d 14 03          	cmp    ax,0x314
c001508a:	75 06                	jne    c0015092 <sendKeyboardToken(KeyboardToken)+0xaa>
c001508c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015095:	66 3d 15 03          	cmp    ax,0x315
c0015099:	75 06                	jne    c00150a1 <sendKeyboardToken(KeyboardToken)+0xb9>
c001509b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00150a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a4:	66 3d 16 03          	cmp    ax,0x316
c00150a8:	75 06                	jne    c00150b0 <sendKeyboardToken(KeyboardToken)+0xc8>
c00150aa:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00150b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b3:	66 3d 17 03          	cmp    ax,0x317
c00150b7:	75 06                	jne    c00150bf <sendKeyboardToken(KeyboardToken)+0xd7>
c00150b9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00150bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c2:	66 3d 18 03          	cmp    ax,0x318
c00150c6:	75 06                	jne    c00150ce <sendKeyboardToken(KeyboardToken)+0xe6>
c00150c8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00150ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d1:	66 3d 19 03          	cmp    ax,0x319
c00150d5:	75 06                	jne    c00150dd <sendKeyboardToken(KeyboardToken)+0xf5>
c00150d7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00150dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e0:	66 3d 1a 03          	cmp    ax,0x31a
c00150e4:	0f 85 c9 00 00 00    	jne    c00151b3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00150ea:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00150f0:	e9 be 00 00 00       	jmp    c00151b3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00150f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f8:	66 3d 10 03          	cmp    ax,0x310
c00150fc:	75 0a                	jne    c0015108 <sendKeyboardToken(KeyboardToken)+0x120>
c00150fe:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015104:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510b:	66 3d 11 03          	cmp    ax,0x311
c001510f:	75 0a                	jne    c001511b <sendKeyboardToken(KeyboardToken)+0x133>
c0015111:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015117:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001511b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511e:	66 3d 12 03          	cmp    ax,0x312
c0015122:	75 0a                	jne    c001512e <sendKeyboardToken(KeyboardToken)+0x146>
c0015124:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001512a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001512e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015131:	66 3d 13 03          	cmp    ax,0x313
c0015135:	75 0a                	jne    c0015141 <sendKeyboardToken(KeyboardToken)+0x159>
c0015137:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001513d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015144:	66 3d 14 03          	cmp    ax,0x314
c0015148:	75 0a                	jne    c0015154 <sendKeyboardToken(KeyboardToken)+0x16c>
c001514a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015150:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015157:	66 3d 15 03          	cmp    ax,0x315
c001515b:	75 0a                	jne    c0015167 <sendKeyboardToken(KeyboardToken)+0x17f>
c001515d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015163:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516a:	66 3d 16 03          	cmp    ax,0x316
c001516e:	75 0a                	jne    c001517a <sendKeyboardToken(KeyboardToken)+0x192>
c0015170:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015176:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001517a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517d:	66 3d 17 03          	cmp    ax,0x317
c0015181:	75 0a                	jne    c001518d <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015183:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015189:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001518d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015190:	66 3d 18 03          	cmp    ax,0x318
c0015194:	75 0a                	jne    c00151a0 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015196:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001519c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a3:	66 3d 19 03          	cmp    ax,0x319
c00151a7:	75 0a                	jne    c00151b3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00151a9:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00151af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b6:	66 3d 00 02          	cmp    ax,0x200
c00151ba:	75 2a                	jne    c00151e6 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151bc:	a0 a0 aa 02 c0       	mov    al,ds:0xc002aaa0
c00151c1:	83 f0 01             	xor    eax,0x1
c00151c4:	84 c0                	test   al,al
c00151c6:	74 1e                	je     c00151e6 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151c8:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00151cd:	6a 01                	push   0x1
c00151cf:	6a 00                	push   0x0
c00151d1:	68 0a 4f 01 c0       	push   0xc0014f0a
c00151d6:	50                   	push   eax
c00151d7:	e8 74 75 00 00       	call   c001c750 <Process::createThread(void (*)(void*), void*, int)>
c00151dc:	83 c4 10             	add    esp,0x10
c00151df:	c6 05 a0 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aaa0,0x1
c00151e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e9:	66 3d 1d 03          	cmp    ax,0x31d
c00151ed:	75 06                	jne    c00151f5 <sendKeyboardToken(KeyboardToken)+0x20d>
c00151ef:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00151f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f8:	66 3d 1c 03          	cmp    ax,0x31c
c00151fc:	75 06                	jne    c0015204 <sendKeyboardToken(KeyboardToken)+0x21c>
c00151fe:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015207:	66 3d 1b 03          	cmp    ax,0x31b
c001520b:	75 06                	jne    c0015213 <sendKeyboardToken(KeyboardToken)+0x22b>
c001520d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015216:	66 3d 1e 03          	cmp    ax,0x31e
c001521a:	75 06                	jne    c0015222 <sendKeyboardToken(KeyboardToken)+0x23a>
c001521c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015225:	66 3d 1f 03          	cmp    ax,0x31f
c0015229:	75 06                	jne    c0015231 <sendKeyboardToken(KeyboardToken)+0x249>
c001522b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015234:	66 3d 1a 03          	cmp    ax,0x31a
c0015238:	75 06                	jne    c0015240 <sendKeyboardToken(KeyboardToken)+0x258>
c001523a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015240:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015244:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015247:	83 f0 01             	xor    eax,0x1
c001524a:	84 c0                	test   al,al
c001524c:	74 77                	je     c00152c5 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001524e:	a0 a1 a7 02 c0       	mov    al,ds:0xc002a7a1
c0015253:	84 c0                	test   al,al
c0015255:	74 41                	je     c0015298 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0015257:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001525b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001525f:	74 2b                	je     c001528c <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015261:	8b 15 a4 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aaa4
c0015267:	89 d0                	mov    eax,edx
c0015269:	c1 e0 02             	shl    eax,0x2
c001526c:	01 d0                	add    eax,edx
c001526e:	01 c0                	add    eax,eax
c0015270:	a3 a4 aa 02 c0       	mov    ds:0xc002aaa4,eax
c0015275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015278:	0f b7 c0             	movzx  eax,ax
c001527b:	8d 50 d0             	lea    edx,[eax-0x30]
c001527e:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c0015283:	01 d0                	add    eax,edx
c0015285:	a3 a4 aa 02 c0       	mov    ds:0xc002aaa4,eax
c001528a:	eb 6d                	jmp    c00152f9 <sendKeyboardToken(KeyboardToken)+0x311>
c001528c:	c7 05 a4 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aaa4,0x0
c0015296:	eb 61                	jmp    c00152f9 <sendKeyboardToken(KeyboardToken)+0x311>
c0015298:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c001529d:	85 c0                	test   eax,eax
c001529f:	74 18                	je     c00152b9 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00152a1:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c00152a6:	0f b6 c0             	movzx  eax,al
c00152a9:	83 ec 0c             	sub    esp,0xc
c00152ac:	50                   	push   eax
c00152ad:	e8 ca fc ff ff       	call   c0014f7c <sendKeyToTerminal(unsigned char)>
c00152b2:	83 c4 10             	add    esp,0x10
c00152b5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152b9:	c7 05 a4 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aaa4,0x0
c00152c3:	eb 34                	jmp    c00152f9 <sendKeyboardToken(KeyboardToken)+0x311>
c00152c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c8:	66 3d 01 01          	cmp    ax,0x101
c00152cc:	75 2b                	jne    c00152f9 <sendKeyboardToken(KeyboardToken)+0x311>
c00152ce:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c00152d3:	85 c0                	test   eax,eax
c00152d5:	74 18                	je     c00152ef <sendKeyboardToken(KeyboardToken)+0x307>
c00152d7:	a1 a4 aa 02 c0       	mov    eax,ds:0xc002aaa4
c00152dc:	0f b6 c0             	movzx  eax,al
c00152df:	83 ec 0c             	sub    esp,0xc
c00152e2:	50                   	push   eax
c00152e3:	e8 94 fc ff ff       	call   c0014f7c <sendKeyToTerminal(unsigned char)>
c00152e8:	83 c4 10             	add    esp,0x10
c00152eb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152ef:	c7 05 a4 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aaa4,0x0
c00152f9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00152fc:	83 f0 01             	xor    eax,0x1
c00152ff:	84 c0                	test   al,al
c0015301:	74 4c                	je     c001534f <sendKeyboardToken(KeyboardToken)+0x367>
c0015303:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015306:	83 f0 01             	xor    eax,0x1
c0015309:	84 c0                	test   al,al
c001530b:	74 42                	je     c001534f <sendKeyboardToken(KeyboardToken)+0x367>
c001530d:	a0 a0 a7 02 c0       	mov    al,ds:0xc002a7a0
c0015312:	83 f0 01             	xor    eax,0x1
c0015315:	84 c0                	test   al,al
c0015317:	74 36                	je     c001534f <sendKeyboardToken(KeyboardToken)+0x367>
c0015319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531c:	66 83 f8 1f          	cmp    ax,0x1f
c0015320:	76 09                	jbe    c001532b <sendKeyboardToken(KeyboardToken)+0x343>
c0015322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015325:	66 83 f8 7e          	cmp    ax,0x7e
c0015329:	76 12                	jbe    c001533d <sendKeyboardToken(KeyboardToken)+0x355>
c001532b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532e:	66 83 f8 0a          	cmp    ax,0xa
c0015332:	74 09                	je     c001533d <sendKeyboardToken(KeyboardToken)+0x355>
c0015334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015337:	66 83 f8 08          	cmp    ax,0x8
c001533b:	75 12                	jne    c001534f <sendKeyboardToken(KeyboardToken)+0x367>
c001533d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015340:	0f b6 c0             	movzx  eax,al
c0015343:	83 ec 0c             	sub    esp,0xc
c0015346:	50                   	push   eax
c0015347:	e8 30 fc ff ff       	call   c0014f7c <sendKeyToTerminal(unsigned char)>
c001534c:	83 c4 10             	add    esp,0x10
c001534f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015352:	83 f0 01             	xor    eax,0x1
c0015355:	84 c0                	test   al,al
c0015357:	74 4f                	je     c00153a8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015359:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001535c:	83 f0 01             	xor    eax,0x1
c001535f:	84 c0                	test   al,al
c0015361:	74 45                	je     c00153a8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015363:	a0 a0 a7 02 c0       	mov    al,ds:0xc002a7a0
c0015368:	84 c0                	test   al,al
c001536a:	74 3c                	je     c00153a8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001536c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536f:	66 83 f8 3f          	cmp    ax,0x3f
c0015373:	76 33                	jbe    c00153a8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015378:	66 83 f8 7f          	cmp    ax,0x7f
c001537c:	77 2a                	ja     c00153a8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001537e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015381:	88 c2                	mov    dl,al
c0015383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015386:	66 83 f8 5f          	cmp    ax,0x5f
c001538a:	76 04                	jbe    c0015390 <sendKeyboardToken(KeyboardToken)+0x3a8>
c001538c:	b0 20                	mov    al,0x20
c001538e:	eb 02                	jmp    c0015392 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0015390:	b0 00                	mov    al,0x0
c0015392:	29 c2                	sub    edx,eax
c0015394:	88 d0                	mov    al,dl
c0015396:	83 e8 40             	sub    eax,0x40
c0015399:	0f b6 c0             	movzx  eax,al
c001539c:	83 ec 0c             	sub    esp,0xc
c001539f:	50                   	push   eax
c00153a0:	e8 d7 fb ff ff       	call   c0014f7c <sendKeyToTerminal(unsigned char)>
c00153a5:	83 c4 10             	add    esp,0x10
c00153a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ab:	66 3d 00 03          	cmp    ax,0x300
c00153af:	75 0f                	jne    c00153c0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153b1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153b4:	83 f0 01             	xor    eax,0x1
c00153b7:	84 c0                	test   al,al
c00153b9:	74 05                	je     c00153c0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153bb:	e8 87 b1 ff ff       	call   c0010547 <doTerminalCycle()>
c00153c0:	90                   	nop
c00153c1:	c9                   	leave  
c00153c2:	c3                   	ret    

c00153c3 <clearInternalKeybuffer(VgaText*)>:
c00153c3:	55                   	push   ebp
c00153c4:	89 e5                	mov    ebp,esp
c00153c6:	83 ec 08             	sub    esp,0x8
c00153c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cc:	05 34 11 00 00       	add    eax,0x1134
c00153d1:	83 ec 0c             	sub    esp,0xc
c00153d4:	50                   	push   eax
c00153d5:	e8 29 b3 fe ff       	call   c0000703 <strlen>
c00153da:	83 c4 10             	add    esp,0x10
c00153dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00153e0:	81 c2 34 11 00 00    	add    edx,0x1134
c00153e6:	83 ec 04             	sub    esp,0x4
c00153e9:	50                   	push   eax
c00153ea:	6a 00                	push   0x0
c00153ec:	52                   	push   edx
c00153ed:	e8 f4 b2 fe ff       	call   c00006e6 <memset>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	90                   	nop
c00153f6:	c9                   	leave  
c00153f7:	c3                   	ret    

c00153f8 <readKeyboard(VgaText*, char*, unsigned long)>:
c00153f8:	55                   	push   ebp
c00153f9:	89 e5                	mov    ebp,esp
c00153fb:	83 ec 18             	sub    esp,0x18
c00153fe:	fb                   	sti    
c00153ff:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015406:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001540a:	0f 84 8a 00 00 00    	je     c001549a <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015413:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015419:	84 c0                	test   al,al
c001541b:	75 11                	jne    c001542e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001541d:	e8 04 72 00 00       	call   c001c626 <lockScheduler()>
c0015422:	e8 33 75 00 00       	call   c001c95a <schedule()>
c0015427:	e8 fc 71 00 00       	call   c001c628 <unlockScheduler()>
c001542c:	eb e2                	jmp    c0015410 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001542e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015431:	8d 50 01             	lea    edx,[eax+0x1]
c0015434:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015437:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001543a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015440:	88 10                	mov    BYTE PTR [eax],dl
c0015442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015445:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001544b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001544e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015451:	05 34 11 00 00       	add    eax,0x1134
c0015456:	83 ec 0c             	sub    esp,0xc
c0015459:	50                   	push   eax
c001545a:	e8 a4 b2 fe ff       	call   c0000703 <strlen>
c001545f:	83 c4 10             	add    esp,0x10
c0015462:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015465:	81 c2 34 11 00 00    	add    edx,0x1134
c001546b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001546e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015471:	81 c2 34 11 00 00    	add    edx,0x1134
c0015477:	83 ec 04             	sub    esp,0x4
c001547a:	50                   	push   eax
c001547b:	51                   	push   ecx
c001547c:	52                   	push   edx
c001547d:	e8 f6 b1 fe ff       	call   c0000678 <memmove>
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015488:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001548b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001548f:	0f 85 71 ff ff ff    	jne    c0015406 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015495:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015498:	eb 03                	jmp    c001549d <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001549a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549d:	c9                   	leave  
c001549e:	c3                   	ret    
c001549f:	90                   	nop

c00154a0 <Keyboard::Keyboard(char const*)>:
c00154a0:	83 ec 0c             	sub    esp,0xc
c00154a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154a7:	83 ec 08             	sub    esp,0x8
c00154aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154ae:	50                   	push   eax
c00154af:	e8 98 e3 ff ff       	call   c001384c <Device::Device(char const*)>
c00154b4:	83 c4 10             	add    esp,0x10
c00154b7:	ba 50 78 02 c0       	mov    edx,0xc0027850
c00154bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154c0:	89 10                	mov    DWORD PTR [eax],edx
c00154c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154c6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00154d0:	c6 05 84 a6 02 c0 01 	mov    BYTE PTR ds:0xc002a684,0x1
c00154d7:	90                   	nop
c00154d8:	83 c4 0c             	add    esp,0xc
c00154db:	c3                   	ret    

c00154dc <Keyboard::~Keyboard()>:
c00154dc:	83 ec 0c             	sub    esp,0xc
c00154df:	ba 50 78 02 c0       	mov    edx,0xc0027850
c00154e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154e8:	89 10                	mov    DWORD PTR [eax],edx
c00154ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ee:	83 ec 0c             	sub    esp,0xc
c00154f1:	50                   	push   eax
c00154f2:	e8 07 e0 ff ff       	call   c00134fe <Device::~Device()>
c00154f7:	83 c4 10             	add    esp,0x10
c00154fa:	90                   	nop
c00154fb:	83 c4 0c             	add    esp,0xc
c00154fe:	c3                   	ret    
c00154ff:	90                   	nop

c0015500 <Keyboard::~Keyboard()>:
c0015500:	83 ec 0c             	sub    esp,0xc
c0015503:	83 ec 0c             	sub    esp,0xc
c0015506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001550a:	e8 cd ff ff ff       	call   c00154dc <Keyboard::~Keyboard()>
c001550f:	83 c4 10             	add    esp,0x10
c0015512:	83 ec 08             	sub    esp,0x8
c0015515:	68 5c 01 00 00       	push   0x15c
c001551a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001551e:	e8 4e cc ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0015523:	83 c4 10             	add    esp,0x10
c0015526:	83 c4 0c             	add    esp,0xc
c0015529:	c3                   	ret    

c001552a <LogicalDisk::close(int, int, void*)>:
c001552a:	83 c8 ff             	or     eax,0xffffffff
c001552d:	c3                   	ret    

c001552e <LogicalDisk::~LogicalDisk()>:
c001552e:	83 ec 0c             	sub    esp,0xc
c0015531:	ba 00 79 02 c0       	mov    edx,0xc0027900
c0015536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001553a:	89 10                	mov    DWORD PTR [eax],edx
c001553c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015540:	83 ec 0c             	sub    esp,0xc
c0015543:	50                   	push   eax
c0015544:	e8 b5 df ff ff       	call   c00134fe <Device::~Device()>
c0015549:	83 c4 10             	add    esp,0x10
c001554c:	90                   	nop
c001554d:	83 c4 0c             	add    esp,0xc
c0015550:	c3                   	ret    
c0015551:	90                   	nop

c0015552 <LogicalDisk::~LogicalDisk()>:
c0015552:	83 ec 0c             	sub    esp,0xc
c0015555:	83 ec 0c             	sub    esp,0xc
c0015558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001555c:	e8 cd ff ff ff       	call   c001552e <LogicalDisk::~LogicalDisk()>
c0015561:	83 c4 10             	add    esp,0x10
c0015564:	83 ec 08             	sub    esp,0x8
c0015567:	68 74 01 00 00       	push   0x174
c001556c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015570:	e8 fc cb ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0015575:	83 c4 10             	add    esp,0x10
c0015578:	83 c4 0c             	add    esp,0xc
c001557b:	c3                   	ret    

c001557c <LogicalDisk::open(int, int, void*)>:
c001557c:	83 ec 18             	sub    esp,0x18
c001557f:	68 7c 78 02 c0       	push   0xc002787c
c0015584:	e8 4a 41 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0015589:	83 c8 ff             	or     eax,0xffffffff
c001558c:	83 c4 1c             	add    esp,0x1c
c001558f:	c3                   	ret    

c0015590 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015590:	53                   	push   ebx
c0015591:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015595:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015599:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001559d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00155a3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00155a9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00155af:	77 10                	ja     c00155c1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00155b1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00155b7:	89 d3                	mov    ebx,edx
c00155b9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00155bf:	72 05                	jb     c00155c6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00155c1:	83 c8 ff             	or     eax,0xffffffff
c00155c4:	89 c2                	mov    edx,eax
c00155c6:	5b                   	pop    ebx
c00155c7:	c3                   	ret    

c00155c8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00155c8:	56                   	push   esi
c00155c9:	83 c8 ff             	or     eax,0xffffffff
c00155cc:	53                   	push   ebx
c00155cd:	89 c2                	mov    edx,eax
c00155cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00155d3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00155d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00155db:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00155e1:	77 27                	ja     c001560a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00155e3:	89 d8                	mov    eax,ebx
c00155e5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00155eb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00155f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155f6:	89 c2                	mov    edx,eax
c00155f8:	73 10                	jae    c001560a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00155fa:	89 c8                	mov    eax,ecx
c00155fc:	89 da                	mov    edx,ebx
c00155fe:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015604:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001560a:	5b                   	pop    ebx
c001560b:	5e                   	pop    esi
c001560c:	c3                   	ret    
c001560d:	90                   	nop

c001560e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001560e:	83 ec 1c             	sub    esp,0x1c
c0015611:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015615:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015619:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001561d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015621:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015625:	89 04 24             	mov    DWORD PTR [esp],eax
c0015628:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001562c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015634:	83 ec 08             	sub    esp,0x8
c0015637:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001563b:	50                   	push   eax
c001563c:	e8 0b e2 ff ff       	call   c001384c <Device::Device(char const*)>
c0015641:	83 c4 10             	add    esp,0x10
c0015644:	ba 00 79 02 c0       	mov    edx,0xc0027900
c0015649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001564d:	89 10                	mov    DWORD PTR [eax],edx
c001564f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015653:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001565a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001565e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015669:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015673:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015677:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001567b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001567f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015685:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001568b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001568f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015692:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015696:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001569c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00156a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156aa:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00156b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00156be:	90                   	nop
c00156bf:	83 c4 1c             	add    esp,0x1c
c00156c2:	c3                   	ret    
c00156c3:	90                   	nop

c00156c4 <LogicalDisk::assignDriveLetter()>:
c00156c4:	55                   	push   ebp
c00156c5:	57                   	push   edi
c00156c6:	56                   	push   esi
c00156c7:	53                   	push   ebx
c00156c8:	83 ec 14             	sub    esp,0x14
c00156cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156cf:	8b 3d c0 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aac0
c00156d5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00156db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00156df:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00156e5:	8b 3d c4 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aac4
c00156eb:	3c 01                	cmp    al,0x1
c00156ed:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00156f1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00156f5:	19 c0                	sbb    eax,eax
c00156f7:	83 e0 02             	and    eax,0x2
c00156fa:	83 c0 41             	add    eax,0x41
c00156fd:	0f be e8             	movsx  ebp,al
c0015700:	3c 43                	cmp    al,0x43
c0015702:	75 10                	jne    c0015714 <LogicalDisk::assignDriveLetter()+0x50>
c0015704:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001570b:	75 5d                	jne    c001576a <LogicalDisk::assignDriveLetter()+0xa6>
c001570d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015712:	75 56                	jne    c001576a <LogicalDisk::assignDriveLetter()+0xa6>
c0015714:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015717:	ba 01 00 00 00       	mov    edx,0x1
c001571c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015720:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015724:	d3 e2                	shl    edx,cl
c0015726:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001572a:	89 d7                	mov    edi,edx
c001572c:	89 d6                	mov    esi,edx
c001572e:	c1 ff 1f             	sar    edi,0x1f
c0015731:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015735:	21 f9                	and    ecx,edi
c0015737:	09 d1                	or     ecx,edx
c0015739:	75 2f                	jne    c001576a <LogicalDisk::assignDriveLetter()+0xa6>
c001573b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015743:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015749:	09 f2                	or     edx,esi
c001574b:	89 15 c0 aa 02 c0    	mov    DWORD PTR ds:0xc002aac0,edx
c0015751:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015755:	09 fa                	or     edx,edi
c0015757:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001575b:	89 15 c4 aa 02 c0    	mov    DWORD PTR ds:0xc002aac4,edx
c0015761:	89 1c bd e0 aa 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5520],ebx
c0015768:	eb 08                	jmp    c0015772 <LogicalDisk::assignDriveLetter()+0xae>
c001576a:	45                   	inc    ebp
c001576b:	40                   	inc    eax
c001576c:	3c 5b                	cmp    al,0x5b
c001576e:	75 90                	jne    c0015700 <LogicalDisk::assignDriveLetter()+0x3c>
c0015770:	31 c0                	xor    eax,eax
c0015772:	83 c4 14             	add    esp,0x14
c0015775:	5b                   	pop    ebx
c0015776:	5e                   	pop    esi
c0015777:	5f                   	pop    edi
c0015778:	5d                   	pop    ebp
c0015779:	c3                   	ret    

c001577a <LogicalDisk::mount()>:
c001577a:	56                   	push   esi
c001577b:	53                   	push   ebx
c001577c:	51                   	push   ecx
c001577d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015781:	8b 1d 48 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a648
c0015787:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015791:	85 db                	test   ebx,ebx
c0015793:	74 50                	je     c00157e5 <LogicalDisk::mount()+0x6b>
c0015795:	e8 77 6e 00 00       	call   c001c611 <getIRQNestingLevel()>
c001579a:	52                   	push   edx
c001579b:	52                   	push   edx
c001579c:	50                   	push   eax
c001579d:	68 a0 78 02 c0       	push   0xc00278a0
c00157a2:	e8 aa ca ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00157a7:	83 c4 0c             	add    esp,0xc
c00157aa:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00157b1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00157b3:	83 e8 41             	sub    eax,0x41
c00157b6:	50                   	push   eax
c00157b7:	56                   	push   esi
c00157b8:	53                   	push   ebx
c00157b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157bc:	83 c4 10             	add    esp,0x10
c00157bf:	84 c0                	test   al,al
c00157c1:	74 08                	je     c00157cb <LogicalDisk::mount()+0x51>
c00157c3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00157c9:	eb 1c                	jmp    c00157e7 <LogicalDisk::mount()+0x6d>
c00157cb:	e8 41 6e 00 00       	call   c001c611 <getIRQNestingLevel()>
c00157d0:	51                   	push   ecx
c00157d1:	51                   	push   ecx
c00157d2:	50                   	push   eax
c00157d3:	68 bb 78 02 c0       	push   0xc00278bb
c00157d8:	e8 74 ca ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00157dd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00157e0:	83 c4 10             	add    esp,0x10
c00157e3:	eb ac                	jmp    c0015791 <LogicalDisk::mount()+0x17>
c00157e5:	31 c0                	xor    eax,eax
c00157e7:	5a                   	pop    edx
c00157e8:	5b                   	pop    ebx
c00157e9:	5e                   	pop    esi
c00157ea:	c3                   	ret    
c00157eb:	90                   	nop

c00157ec <LogicalDisk::unmount()>:
c00157ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157f0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00157fa:	c3                   	ret    
c00157fb:	90                   	nop

c00157fc <LogicalDisk::unassignDriveLetter()>:
c00157fc:	57                   	push   edi
c00157fd:	56                   	push   esi
c00157fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015802:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015809:	84 c9                	test   cl,cl
c001580b:	75 0f                	jne    c001581c <LogicalDisk::unassignDriveLetter()+0x20>
c001580d:	c7 44 24 0c d6 78 02 c0 	mov    DWORD PTR [esp+0xc],0xc00278d6
c0015815:	5e                   	pop    esi
c0015816:	5f                   	pop    edi
c0015817:	e9 b7 3e 00 00       	jmp    c00196d3 <Krnl::panic(char const*)>
c001581c:	83 e9 41             	sub    ecx,0x41
c001581f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015826:	b8 01 00 00 00       	mov    eax,0x1
c001582b:	c7 04 8d e0 aa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5520],0x0
c0015836:	d3 e0                	shl    eax,cl
c0015838:	89 c7                	mov    edi,eax
c001583a:	f7 d0                	not    eax
c001583c:	c1 ff 1f             	sar    edi,0x1f
c001583f:	21 05 c0 aa 02 c0    	and    DWORD PTR ds:0xc002aac0,eax
c0015845:	89 fe                	mov    esi,edi
c0015847:	f7 d6                	not    esi
c0015849:	21 35 c4 aa 02 c0    	and    DWORD PTR ds:0xc002aac4,esi
c001584f:	5e                   	pop    esi
c0015850:	5f                   	pop    edi
c0015851:	c3                   	ret    

c0015852 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015852:	57                   	push   edi
c0015853:	56                   	push   esi
c0015854:	53                   	push   ebx
c0015855:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015859:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001585d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015861:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015865:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001586b:	77 41                	ja     c00158ae <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001586d:	99                   	cdq    
c001586e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015874:	01 c8                	add    eax,ecx
c0015876:	11 da                	adc    edx,ebx
c0015878:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001587e:	19 d7                	sbb    edi,edx
c0015880:	72 33                	jb     c00158b5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015882:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015888:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001588e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015892:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015896:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001589c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158a6:	5b                   	pop    ebx
c00158a7:	5e                   	pop    esi
c00158a8:	5f                   	pop    edi
c00158a9:	e9 9a 09 00 00       	jmp    c0016248 <VCache::read(unsigned long long, int, void*)>
c00158ae:	b8 05 00 00 00       	mov    eax,0x5
c00158b3:	eb 05                	jmp    c00158ba <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00158b5:	b8 07 00 00 00       	mov    eax,0x7
c00158ba:	5b                   	pop    ebx
c00158bb:	5e                   	pop    esi
c00158bc:	5f                   	pop    edi
c00158bd:	c3                   	ret    

c00158be <LogicalDisk::write(unsigned long long, int, void*)>:
c00158be:	57                   	push   edi
c00158bf:	56                   	push   esi
c00158c0:	53                   	push   ebx
c00158c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158c9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158d1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00158d7:	77 41                	ja     c001591a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00158d9:	99                   	cdq    
c00158da:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00158e0:	01 c8                	add    eax,ecx
c00158e2:	11 da                	adc    edx,ebx
c00158e4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158ea:	19 d7                	sbb    edi,edx
c00158ec:	72 33                	jb     c0015921 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00158ee:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158f4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158fe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015902:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015908:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001590e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015912:	5b                   	pop    ebx
c0015913:	5e                   	pop    esi
c0015914:	5f                   	pop    edi
c0015915:	e9 4a 08 00 00       	jmp    c0016164 <VCache::write(unsigned long long, int, void*)>
c001591a:	b8 05 00 00 00       	mov    eax,0x5
c001591f:	eb 05                	jmp    c0015926 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015921:	b8 07 00 00 00       	mov    eax,0x7
c0015926:	5b                   	pop    ebx
c0015927:	5e                   	pop    esi
c0015928:	5f                   	pop    edi
c0015929:	c3                   	ret    

c001592a <Mouse::Mouse(char const*)>:
c001592a:	83 ec 0c             	sub    esp,0xc
c001592d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015931:	83 ec 08             	sub    esp,0x8
c0015934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015938:	50                   	push   eax
c0015939:	e8 0e df ff ff       	call   c001384c <Device::Device(char const*)>
c001593e:	83 c4 10             	add    esp,0x10
c0015941:	ba 2c 79 02 c0       	mov    edx,0xc002792c
c0015946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001594a:	89 10                	mov    DWORD PTR [eax],edx
c001594c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015950:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001595a:	90                   	nop
c001595b:	83 c4 0c             	add    esp,0xc
c001595e:	c3                   	ret    
c001595f:	90                   	nop

c0015960 <Mouse::~Mouse()>:
c0015960:	83 ec 0c             	sub    esp,0xc
c0015963:	ba 2c 79 02 c0       	mov    edx,0xc002792c
c0015968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001596c:	89 10                	mov    DWORD PTR [eax],edx
c001596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015972:	83 ec 0c             	sub    esp,0xc
c0015975:	50                   	push   eax
c0015976:	e8 83 db ff ff       	call   c00134fe <Device::~Device()>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	90                   	nop
c001597f:	83 c4 0c             	add    esp,0xc
c0015982:	c3                   	ret    
c0015983:	90                   	nop

c0015984 <Mouse::~Mouse()>:
c0015984:	83 ec 0c             	sub    esp,0xc
c0015987:	83 ec 0c             	sub    esp,0xc
c001598a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001598e:	e8 cd ff ff ff       	call   c0015960 <Mouse::~Mouse()>
c0015993:	83 c4 10             	add    esp,0x10
c0015996:	83 ec 08             	sub    esp,0x8
c0015999:	68 58 01 00 00       	push   0x158
c001599e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159a2:	e8 ca c7 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00159a7:	83 c4 10             	add    esp,0x10
c00159aa:	83 c4 0c             	add    esp,0xc
c00159ad:	c3                   	ret    

c00159ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00159ae:	55                   	push   ebp
c00159af:	57                   	push   edi
c00159b0:	56                   	push   esi
c00159b1:	53                   	push   ebx
c00159b2:	81 ec 28 01 00 00    	sub    esp,0x128
c00159b8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00159bf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00159c6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00159cd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00159d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00159d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00159dc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00159e3:	e8 56 df ff ff       	call   c001393e <Device::getName()>
c00159e8:	5a                   	pop    edx
c00159e9:	59                   	pop    ecx
c00159ea:	50                   	push   eax
c00159eb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00159ef:	55                   	push   ebp
c00159f0:	e8 90 ad fe ff       	call   c0000785 <strcpy>
c00159f5:	5b                   	pop    ebx
c00159f6:	58                   	pop    eax
c00159f7:	68 50 79 02 c0       	push   0xc0027950
c00159fc:	55                   	push   ebp
c00159fd:	e8 3a ae fe ff       	call   c000083c <strcat>
c0015a02:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015a09:	e8 54 c7 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015a0e:	83 c4 0c             	add    esp,0xc
c0015a11:	89 c3                	mov    ebx,eax
c0015a13:	57                   	push   edi
c0015a14:	56                   	push   esi
c0015a15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a1d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a24:	55                   	push   ebp
c0015a25:	50                   	push   eax
c0015a26:	e8 e3 fb ff ff       	call   c001560e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a2b:	83 c4 14             	add    esp,0x14
c0015a2e:	53                   	push   ebx
c0015a2f:	e8 90 fc ff ff       	call   c00156c4 <LogicalDisk::assignDriveLetter()>
c0015a34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a37:	e8 3e fd ff ff       	call   c001577a <LogicalDisk::mount()>
c0015a3c:	58                   	pop    eax
c0015a3d:	5a                   	pop    edx
c0015a3e:	53                   	push   ebx
c0015a3f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a46:	e8 11 dc ff ff       	call   c001365c <Device::addChild(Device*)>
c0015a4b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a51:	5b                   	pop    ebx
c0015a52:	5e                   	pop    esi
c0015a53:	5f                   	pop    edi
c0015a54:	5d                   	pop    ebp
c0015a55:	c3                   	ret    

c0015a56 <createPartitionsForDisk(PhysicalDisk*)>:
c0015a56:	55                   	push   ebp
c0015a57:	57                   	push   edi
c0015a58:	56                   	push   esi
c0015a59:	53                   	push   ebx
c0015a5a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015a60:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015a67:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015a6d:	3d 00 02 00 00       	cmp    eax,0x200
c0015a72:	74 27                	je     c0015a9b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015a74:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015a7a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015a80:	83 ec 10             	sub    esp,0x10
c0015a83:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015a87:	99                   	cdq    
c0015a88:	c1 e6 0a             	shl    esi,0xa
c0015a8b:	52                   	push   edx
c0015a8c:	89 fd                	mov    ebp,edi
c0015a8e:	50                   	push   eax
c0015a8f:	55                   	push   ebp
c0015a90:	56                   	push   esi
c0015a91:	e8 3a d8 00 00       	call   c00232d0 <__udivdi3>
c0015a96:	e9 b1 00 00 00       	jmp    c0015b4c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015a9b:	83 ec 0c             	sub    esp,0xc
c0015a9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aa0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015aa4:	56                   	push   esi
c0015aa5:	6a 01                	push   0x1
c0015aa7:	6a 00                	push   0x0
c0015aa9:	6a 00                	push   0x0
c0015aab:	53                   	push   ebx
c0015aac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015aaf:	83 c4 20             	add    esp,0x20
c0015ab2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015aba:	75 0a                	jne    c0015ac6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015abc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015ac4:	74 2c                	je     c0015af2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015ac6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015acc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015ad2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015ad8:	83 ec 10             	sub    esp,0x10
c0015adb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015adf:	89 f7                	mov    edi,esi
c0015ae1:	c1 e0 0a             	shl    eax,0xa
c0015ae4:	c1 ff 1f             	sar    edi,0x1f
c0015ae7:	57                   	push   edi
c0015ae8:	56                   	push   esi
c0015ae9:	52                   	push   edx
c0015aea:	50                   	push   eax
c0015aeb:	e8 e0 d7 00 00       	call   c00232d0 <__udivdi3>
c0015af0:	eb 5a                	jmp    c0015b4c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015af2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015af9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015b00:	83 e1 7f             	and    ecx,0x7f
c0015b03:	83 e0 7f             	and    eax,0x7f
c0015b06:	01 c1                	add    ecx,eax
c0015b08:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015b0f:	83 e0 7f             	and    eax,0x7f
c0015b12:	01 c1                	add    ecx,eax
c0015b14:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b1b:	83 e0 7f             	and    eax,0x7f
c0015b1e:	00 c1                	add    cl,al
c0015b20:	74 41                	je     c0015b63 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b22:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b28:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b2e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b34:	83 ec 10             	sub    esp,0x10
c0015b37:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b3b:	89 f7                	mov    edi,esi
c0015b3d:	c1 e0 0a             	shl    eax,0xa
c0015b40:	c1 ff 1f             	sar    edi,0x1f
c0015b43:	57                   	push   edi
c0015b44:	56                   	push   esi
c0015b45:	52                   	push   edx
c0015b46:	50                   	push   eax
c0015b47:	e8 84 d7 00 00       	call   c00232d0 <__udivdi3>
c0015b4c:	83 c4 14             	add    esp,0x14
c0015b4f:	52                   	push   edx
c0015b50:	50                   	push   eax
c0015b51:	6a 00                	push   0x0
c0015b53:	6a 00                	push   0x0
c0015b55:	53                   	push   ebx
c0015b56:	e8 53 fe ff ff       	call   c00159ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015b5b:	83 c4 20             	add    esp,0x20
c0015b5e:	e9 79 01 00 00       	jmp    c0015cdc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015b63:	89 f0                	mov    eax,esi
c0015b65:	31 f6                	xor    esi,esi
c0015b67:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015b6e:	75 02                	jne    c0015b72 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015b70:	89 f1                	mov    ecx,esi
c0015b72:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015b79:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015b80:	c1 e2 08             	shl    edx,0x8
c0015b83:	c1 e7 10             	shl    edi,0x10
c0015b86:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015b8e:	09 fa                	or     edx,edi
c0015b90:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015b98:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015b9f:	83 c0 10             	add    eax,0x10
c0015ba2:	09 fa                	or     edx,edi
c0015ba4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015bab:	c1 e7 18             	shl    edi,0x18
c0015bae:	09 fa                	or     edx,edi
c0015bb0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015bb7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015bbb:	c1 e7 10             	shl    edi,0x10
c0015bbe:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015bc5:	c1 e2 08             	shl    edx,0x8
c0015bc8:	09 fa                	or     edx,edi
c0015bca:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015bd1:	09 fa                	or     edx,edi
c0015bd3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015bda:	c1 e7 18             	shl    edi,0x18
c0015bdd:	09 fa                	or     edx,edi
c0015bdf:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015be3:	46                   	inc    esi
c0015be4:	83 fe 04             	cmp    esi,0x4
c0015be7:	0f 85 7a ff ff ff    	jne    c0015b67 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bf1:	83 f0 01             	xor    eax,0x1
c0015bf4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015bf8:	75 57                	jne    c0015c51 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015bfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bfe:	83 f0 01             	xor    eax,0x1
c0015c01:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015c05:	75 4a                	jne    c0015c51 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c07:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015c0b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c13:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c1b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c21:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c27:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c2d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c31:	89 f7                	mov    edi,esi
c0015c33:	c1 e0 0a             	shl    eax,0xa
c0015c36:	c1 ff 1f             	sar    edi,0x1f
c0015c39:	57                   	push   edi
c0015c3a:	56                   	push   esi
c0015c3b:	52                   	push   edx
c0015c3c:	50                   	push   eax
c0015c3d:	e8 8e d6 00 00       	call   c00232d0 <__udivdi3>
c0015c42:	83 c4 10             	add    esp,0x10
c0015c45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c4d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015c51:	84 c9                	test   cl,cl
c0015c53:	74 53                	je     c0015ca8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015c55:	0f b6 c9             	movzx  ecx,cl
c0015c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c5c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015c60:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c64:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015c70:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015c74:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015c78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c7c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015c80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c88:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015c8c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015c90:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015c94:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015c98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c9c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015ca0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015ca4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015ca8:	31 ed                	xor    ebp,ebp
c0015caa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015cae:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015cb2:	89 f8                	mov    eax,edi
c0015cb4:	09 f0                	or     eax,esi
c0015cb6:	74 1e                	je     c0015cd6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015cb8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015cbc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015cc0:	89 d1                	mov    ecx,edx
c0015cc2:	09 c1                	or     ecx,eax
c0015cc4:	74 10                	je     c0015cd6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015cc6:	83 ec 0c             	sub    esp,0xc
c0015cc9:	57                   	push   edi
c0015cca:	56                   	push   esi
c0015ccb:	52                   	push   edx
c0015ccc:	50                   	push   eax
c0015ccd:	53                   	push   ebx
c0015cce:	e8 db fc ff ff       	call   c00159ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015cd3:	83 c4 20             	add    esp,0x20
c0015cd6:	45                   	inc    ebp
c0015cd7:	83 fd 04             	cmp    ebp,0x4
c0015cda:	75 ce                	jne    c0015caa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015cdc:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015ce2:	5b                   	pop    ebx
c0015ce3:	5e                   	pop    esi
c0015ce4:	5f                   	pop    edi
c0015ce5:	5d                   	pop    ebp
c0015ce6:	c3                   	ret    
c0015ce7:	90                   	nop

c0015ce8 <Timer::Timer(char const*)>:
c0015ce8:	83 ec 0c             	sub    esp,0xc
c0015ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cef:	83 ec 08             	sub    esp,0x8
c0015cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf6:	50                   	push   eax
c0015cf7:	e8 50 db ff ff       	call   c001384c <Device::Device(char const*)>
c0015cfc:	83 c4 10             	add    esp,0x10
c0015cff:	ba 64 79 02 c0       	mov    edx,0xc0027964
c0015d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d08:	89 10                	mov    DWORD PTR [eax],edx
c0015d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d0e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015d18:	90                   	nop
c0015d19:	83 c4 0c             	add    esp,0xc
c0015d1c:	c3                   	ret    
c0015d1d:	90                   	nop

c0015d1e <Timer::~Timer()>:
c0015d1e:	83 ec 0c             	sub    esp,0xc
c0015d21:	ba 64 79 02 c0       	mov    edx,0xc0027964
c0015d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d2a:	89 10                	mov    DWORD PTR [eax],edx
c0015d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d30:	83 ec 0c             	sub    esp,0xc
c0015d33:	50                   	push   eax
c0015d34:	e8 c5 d7 ff ff       	call   c00134fe <Device::~Device()>
c0015d39:	83 c4 10             	add    esp,0x10
c0015d3c:	90                   	nop
c0015d3d:	83 c4 0c             	add    esp,0xc
c0015d40:	c3                   	ret    
c0015d41:	90                   	nop

c0015d42 <Timer::~Timer()>:
c0015d42:	83 ec 0c             	sub    esp,0xc
c0015d45:	83 ec 0c             	sub    esp,0xc
c0015d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d4c:	e8 cd ff ff ff       	call   c0015d1e <Timer::~Timer()>
c0015d51:	83 c4 10             	add    esp,0x10
c0015d54:	83 ec 08             	sub    esp,0x8
c0015d57:	68 5c 01 00 00       	push   0x15c
c0015d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d60:	e8 0c c4 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0015d65:	83 c4 10             	add    esp,0x10
c0015d68:	83 c4 0c             	add    esp,0xc
c0015d6b:	c3                   	ret    

c0015d6c <Timer::read()>:
c0015d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d70:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d76:	c3                   	ret    

c0015d77 <timerHandler(unsigned long long)>:
c0015d77:	55                   	push   ebp
c0015d78:	57                   	push   edi
c0015d79:	56                   	push   esi
c0015d7a:	53                   	push   ebx
c0015d7b:	83 ec 0c             	sub    esp,0xc
c0015d7e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015d82:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015d86:	01 35 50 ab 02 c0    	add    DWORD PTR ds:0xc002ab50,esi
c0015d8c:	11 3d 54 ab 02 c0    	adc    DWORD PTR ds:0xc002ab54,edi
c0015d92:	80 3d ed a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4ed,0x0
c0015d99:	0f 84 07 01 00 00    	je     c0015ea6 <timerHandler(unsigned long long)+0x12f>
c0015d9f:	e8 a9 68 00 00       	call   c001c64d <lockStuff()>
c0015da4:	83 ec 0c             	sub    esp,0xc
c0015da7:	68 7c b9 02 c0       	push   0xc002b97c
c0015dac:	e8 3f f6 00 00       	call   c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015db1:	c7 04 24 7c b9 02 c0 	mov    DWORD PTR [esp],0xc002b97c
c0015db8:	89 c3                	mov    ebx,eax
c0015dba:	e8 39 f6 00 00       	call   c00253f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015dbf:	83 c4 10             	add    esp,0x10
c0015dc2:	84 c0                	test   al,al
c0015dc4:	74 60                	je     c0015e26 <timerHandler(unsigned long long)+0xaf>
c0015dc6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015dcc:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015dcf:	85 c0                	test   eax,eax
c0015dd1:	0f 85 91 00 00 00    	jne    c0015e68 <timerHandler(unsigned long long)+0xf1>
c0015dd7:	e9 be 00 00 00       	jmp    c0015e9a <timerHandler(unsigned long long)+0x123>
c0015ddc:	83 ec 0c             	sub    esp,0xc
c0015ddf:	55                   	push   ebp
c0015de0:	e8 51 6e 00 00       	call   c001cc36 <unblockTask(ThreadControlBlock*)>
c0015de5:	83 c4 10             	add    esp,0x10
c0015de8:	39 eb                	cmp    ebx,ebp
c0015dea:	75 12                	jne    c0015dfe <timerHandler(unsigned long long)+0x87>
c0015dec:	83 ec 0c             	sub    esp,0xc
c0015def:	68 7c b9 02 c0       	push   0xc002b97c
c0015df4:	e8 f7 f5 00 00       	call   c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015df9:	89 c3                	mov    ebx,eax
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	83 ec 0c             	sub    esp,0xc
c0015e01:	68 7c b9 02 c0       	push   0xc002b97c
c0015e06:	e8 ed f5 00 00       	call   c00253f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e0b:	83 c4 10             	add    esp,0x10
c0015e0e:	84 c0                	test   al,al
c0015e10:	75 b4                	jne    c0015dc6 <timerHandler(unsigned long long)+0x4f>
c0015e12:	83 ec 0c             	sub    esp,0xc
c0015e15:	68 7c b9 02 c0       	push   0xc002b97c
c0015e1a:	e8 d1 f5 00 00       	call   c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e1f:	83 c4 10             	add    esp,0x10
c0015e22:	39 d8                	cmp    eax,ebx
c0015e24:	74 a0                	je     c0015dc6 <timerHandler(unsigned long long)+0x4f>
c0015e26:	83 ec 0c             	sub    esp,0xc
c0015e29:	68 7c b9 02 c0       	push   0xc002b97c
c0015e2e:	e8 bd f5 00 00       	call   c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e33:	c7 04 24 7c b9 02 c0 	mov    DWORD PTR [esp],0xc002b97c
c0015e3a:	89 c5                	mov    ebp,eax
c0015e3c:	e8 d3 f5 00 00       	call   c0025414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e41:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e44:	83 c4 10             	add    esp,0x10
c0015e47:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e4a:	39 15 50 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab50,edx
c0015e50:	a1 54 ab 02 c0       	mov    eax,ds:0xc002ab54
c0015e55:	19 c8                	sbb    eax,ecx
c0015e57:	73 83                	jae    c0015ddc <timerHandler(unsigned long long)+0x65>
c0015e59:	50                   	push   eax
c0015e5a:	50                   	push   eax
c0015e5b:	55                   	push   ebp
c0015e5c:	68 7c b9 02 c0       	push   0xc002b97c
c0015e61:	e8 5c f6 00 00       	call   c00254c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e66:	eb 93                	jmp    c0015dfb <timerHandler(unsigned long long)+0x84>
c0015e68:	80 3d ec a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4ec,0x0
c0015e6f:	74 29                	je     c0015e9a <timerHandler(unsigned long long)+0x123>
c0015e71:	39 c6                	cmp    esi,eax
c0015e73:	bb 00 00 00 00       	mov    ebx,0x0
c0015e78:	19 df                	sbb    edi,ebx
c0015e7a:	72 19                	jb     c0015e95 <timerHandler(unsigned long long)+0x11e>
c0015e7c:	e8 a5 67 00 00       	call   c001c626 <lockScheduler()>
c0015e81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e86:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015e89:	e8 cc 6a 00 00       	call   c001c95a <schedule()>
c0015e8e:	e8 95 67 00 00       	call   c001c628 <unlockScheduler()>
c0015e93:	eb 05                	jmp    c0015e9a <timerHandler(unsigned long long)+0x123>
c0015e95:	29 f0                	sub    eax,esi
c0015e97:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015e9a:	83 c4 0c             	add    esp,0xc
c0015e9d:	5b                   	pop    ebx
c0015e9e:	5e                   	pop    esi
c0015e9f:	5f                   	pop    edi
c0015ea0:	5d                   	pop    ebp
c0015ea1:	e9 39 6b 00 00       	jmp    c001c9df <unlockStuff()>
c0015ea6:	83 c4 0c             	add    esp,0xc
c0015ea9:	5b                   	pop    ebx
c0015eaa:	5e                   	pop    esi
c0015eab:	5f                   	pop    edi
c0015eac:	5d                   	pop    ebp
c0015ead:	c3                   	ret    

c0015eae <setupTimer(int)>:
c0015eae:	57                   	push   edi
c0015eaf:	56                   	push   esi
c0015eb0:	53                   	push   ebx
c0015eb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015eb5:	e8 7d 19 00 00       	call   c0017837 <getCPUNumber()>
c0015eba:	85 c0                	test   eax,eax
c0015ebc:	74 32                	je     c0015ef0 <setupTimer(int)+0x42>
c0015ebe:	83 ec 0c             	sub    esp,0xc
c0015ec1:	68 60 01 00 00       	push   0x160
c0015ec6:	e8 97 c2 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015ecb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ece:	89 c3                	mov    ebx,eax
c0015ed0:	e8 0f cd 00 00       	call   c0022be4 <APICTimer::APICTimer()>
c0015ed5:	6a 00                	push   0x0
c0015ed7:	6a 00                	push   0x0
c0015ed9:	56                   	push   esi
c0015eda:	53                   	push   ebx
c0015edb:	e8 0c cc 00 00       	call   c0022aec <APICTimer::open(int, int, void*)>
c0015ee0:	83 c4 20             	add    esp,0x20
c0015ee3:	e8 52 19 00 00       	call   c001783a <thisCPU()>
c0015ee8:	56                   	push   esi
c0015ee9:	56                   	push   esi
c0015eea:	53                   	push   ebx
c0015eeb:	e9 96 00 00 00       	jmp    c0015f86 <setupTimer(int)+0xd8>
c0015ef0:	e8 45 19 00 00       	call   c001783a <thisCPU()>
c0015ef5:	83 ec 0c             	sub    esp,0xc
c0015ef8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015efe:	e8 3b da ff ff       	call   c001393e <Device::getName()>
c0015f03:	83 c4 10             	add    esp,0x10
c0015f06:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015f09:	0f 85 87 00 00 00    	jne    c0015f96 <setupTimer(int)+0xe8>
c0015f0f:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0015f14:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015f1b:	74 79                	je     c0015f96 <setupTimer(int)+0xe8>
c0015f1d:	83 ec 0c             	sub    esp,0xc
c0015f20:	68 5c 01 00 00       	push   0x15c
c0015f25:	e8 38 c2 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015f2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f2d:	89 c3                	mov    ebx,eax
c0015f2f:	e8 00 ce 00 00       	call   c0022d34 <PIT::PIT()>
c0015f34:	59                   	pop    ecx
c0015f35:	5f                   	pop    edi
c0015f36:	53                   	push   ebx
c0015f37:	ff 35 e8 a4 02 c0    	push   DWORD PTR ds:0xc002a4e8
c0015f3d:	e8 1a d7 ff ff       	call   c001365c <Device::addChild(Device*)>
c0015f42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f44:	6a 00                	push   0x0
c0015f46:	6a 00                	push   0x0
c0015f48:	56                   	push   esi
c0015f49:	53                   	push   ebx
c0015f4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f4d:	83 c4 14             	add    esp,0x14
c0015f50:	68 60 01 00 00       	push   0x160
c0015f55:	e8 08 c2 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015f5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f5d:	89 c7                	mov    edi,eax
c0015f5f:	e8 80 cc 00 00       	call   c0022be4 <APICTimer::APICTimer()>
c0015f64:	6a 00                	push   0x0
c0015f66:	6a 00                	push   0x0
c0015f68:	56                   	push   esi
c0015f69:	57                   	push   edi
c0015f6a:	e8 7d cb 00 00       	call   c0022aec <APICTimer::open(int, int, void*)>
c0015f6f:	83 c4 20             	add    esp,0x20
c0015f72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f74:	6a 00                	push   0x0
c0015f76:	6a 00                	push   0x0
c0015f78:	6a 00                	push   0x0
c0015f7a:	53                   	push   ebx
c0015f7b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f7e:	e8 b7 18 00 00       	call   c001783a <thisCPU()>
c0015f83:	5a                   	pop    edx
c0015f84:	59                   	pop    ecx
c0015f85:	57                   	push   edi
c0015f86:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f8c:	e8 cb d6 ff ff       	call   c001365c <Device::addChild(Device*)>
c0015f91:	83 c4 10             	add    esp,0x10
c0015f94:	eb 33                	jmp    c0015fc9 <setupTimer(int)+0x11b>
c0015f96:	83 ec 0c             	sub    esp,0xc
c0015f99:	68 5c 01 00 00       	push   0x15c
c0015f9e:	e8 bf c1 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015fa3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fa6:	89 c3                	mov    ebx,eax
c0015fa8:	e8 87 cd 00 00       	call   c0022d34 <PIT::PIT()>
c0015fad:	58                   	pop    eax
c0015fae:	5a                   	pop    edx
c0015faf:	53                   	push   ebx
c0015fb0:	ff 35 e8 a4 02 c0    	push   DWORD PTR ds:0xc002a4e8
c0015fb6:	e8 a1 d6 ff ff       	call   c001365c <Device::addChild(Device*)>
c0015fbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fbd:	6a 00                	push   0x0
c0015fbf:	6a 00                	push   0x0
c0015fc1:	56                   	push   esi
c0015fc2:	53                   	push   ebx
c0015fc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fc6:	83 c4 20             	add    esp,0x20
c0015fc9:	89 d8                	mov    eax,ebx
c0015fcb:	5b                   	pop    ebx
c0015fcc:	5e                   	pop    esi
c0015fcd:	5f                   	pop    edi
c0015fce:	c3                   	ret    
c0015fcf:	90                   	nop

c0015fd0 <VCache::VCache(PhysicalDisk*)>:
c0015fd0:	53                   	push   ebx
c0015fd1:	83 ec 08             	sub    esp,0x8
c0015fd4:	ba 94 79 02 c0       	mov    edx,0xc0027994
c0015fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fdd:	89 10                	mov    DWORD PTR [eax],edx
c0015fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fe3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0015fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fee:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0015ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ff9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016000:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001600b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016012:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001601d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016028:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001602c:	83 ec 0c             	sub    esp,0xc
c001602f:	6a 10                	push   0x10
c0016031:	e8 2c c1 ff ff       	call   c0012162 <operator new(unsigned long)>
c0016036:	83 c4 10             	add    esp,0x10
c0016039:	89 c3                	mov    ebx,eax
c001603b:	83 ec 0c             	sub    esp,0xc
c001603e:	53                   	push   ebx
c001603f:	e8 fa 66 00 00       	call   c001c73e <Mutex::Mutex()>
c0016044:	83 c4 10             	add    esp,0x10
c0016047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001604b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001604e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016052:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016056:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001605d:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016064:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016068:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001606e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016072:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016075:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016079:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001607f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016085:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016089:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001608c:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001608f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016093:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016097:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001609b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160a1:	c1 e0 06             	shl    eax,0x6
c00160a4:	83 ec 0c             	sub    esp,0xc
c00160a7:	50                   	push   eax
c00160a8:	e8 b3 90 ff ff       	call   c000f160 <malloc>
c00160ad:	83 c4 10             	add    esp,0x10
c00160b0:	89 c2                	mov    edx,eax
c00160b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00160b9:	90                   	nop
c00160ba:	83 c4 08             	add    esp,0x8
c00160bd:	5b                   	pop    ebx
c00160be:	c3                   	ret    
c00160bf:	90                   	nop

c00160c0 <VCache::writeWriteBuffer()>:
c00160c0:	53                   	push   ebx
c00160c1:	83 ec 14             	sub    esp,0x14
c00160c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00160c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00160cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00160cd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00160d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00160d3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00160d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00160d9:	50                   	push   eax
c00160da:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00160dd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00160e4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00160eb:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00160ef:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00160f6:	83 c4 28             	add    esp,0x28
c00160f9:	5b                   	pop    ebx
c00160fa:	c3                   	ret    
c00160fb:	90                   	nop

c00160fc <VCache::~VCache()>:
c00160fc:	83 ec 0c             	sub    esp,0xc
c00160ff:	ba 94 79 02 c0       	mov    edx,0xc0027994
c0016104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016108:	89 10                	mov    DWORD PTR [eax],edx
c001610a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001610e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016111:	84 c0                	test   al,al
c0016113:	74 0f                	je     c0016124 <VCache::~VCache()+0x28>
c0016115:	83 ec 0c             	sub    esp,0xc
c0016118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001611c:	e8 9f ff ff ff       	call   c00160c0 <VCache::writeWriteBuffer()>
c0016121:	83 c4 10             	add    esp,0x10
c0016124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016128:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001612b:	83 ec 0c             	sub    esp,0xc
c001612e:	50                   	push   eax
c001612f:	e8 3c 90 ff ff       	call   c000f170 <free>
c0016134:	83 c4 10             	add    esp,0x10
c0016137:	90                   	nop
c0016138:	83 c4 0c             	add    esp,0xc
c001613b:	c3                   	ret    

c001613c <VCache::~VCache()>:
c001613c:	83 ec 0c             	sub    esp,0xc
c001613f:	83 ec 0c             	sub    esp,0xc
c0016142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016146:	e8 b1 ff ff ff       	call   c00160fc <VCache::~VCache()>
c001614b:	83 c4 10             	add    esp,0x10
c001614e:	83 ec 08             	sub    esp,0x8
c0016151:	6a 30                	push   0x30
c0016153:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016157:	e8 15 c0 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001615c:	83 c4 10             	add    esp,0x10
c001615f:	83 c4 0c             	add    esp,0xc
c0016162:	c3                   	ret    
c0016163:	90                   	nop

c0016164 <VCache::write(unsigned long long, int, void*)>:
c0016164:	55                   	push   ebp
c0016165:	57                   	push   edi
c0016166:	56                   	push   esi
c0016167:	53                   	push   ebx
c0016168:	83 ec 28             	sub    esp,0x28
c001616b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001616f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016173:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016177:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001617b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001617e:	e8 1d 6a 00 00       	call   c001cba0 <Semaphore::acquire()>
c0016183:	83 c4 10             	add    esp,0x10
c0016186:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001618a:	74 66                	je     c00161f2 <VCache::write(unsigned long long, int, void*)+0x8e>
c001618c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001618f:	99                   	cdq    
c0016190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016194:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016197:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001619a:	89 c1                	mov    ecx,eax
c001619c:	89 d0                	mov    eax,edx
c001619e:	31 f1                	xor    ecx,esi
c00161a0:	31 f8                	xor    eax,edi
c00161a2:	89 ca                	mov    edx,ecx
c00161a4:	09 c2                	or     edx,eax
c00161a6:	75 3e                	jne    c00161e6 <VCache::write(unsigned long long, int, void*)+0x82>
c00161a8:	83 fd 01             	cmp    ebp,0x1
c00161ab:	75 39                	jne    c00161e6 <VCache::write(unsigned long long, int, void*)+0x82>
c00161ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00161b0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00161b6:	51                   	push   ecx
c00161b7:	50                   	push   eax
c00161b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00161c0:	0f af c8             	imul   ecx,eax
c00161c3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00161c6:	51                   	push   ecx
c00161c7:	e8 e4 a4 fe ff       	call   c00006b0 <memcpy>
c00161cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161cf:	83 c4 10             	add    esp,0x10
c00161d2:	40                   	inc    eax
c00161d3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00161d6:	83 f8 40             	cmp    eax,0x40
c00161d9:	75 57                	jne    c0016232 <VCache::write(unsigned long long, int, void*)+0xce>
c00161db:	83 ec 0c             	sub    esp,0xc
c00161de:	53                   	push   ebx
c00161df:	e8 dc fe ff ff       	call   c00160c0 <VCache::writeWriteBuffer()>
c00161e4:	eb 34                	jmp    c001621a <VCache::write(unsigned long long, int, void*)+0xb6>
c00161e6:	83 ec 0c             	sub    esp,0xc
c00161e9:	53                   	push   ebx
c00161ea:	e8 d1 fe ff ff       	call   c00160c0 <VCache::writeWriteBuffer()>
c00161ef:	83 c4 10             	add    esp,0x10
c00161f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00161f5:	83 fd 3f             	cmp    ebp,0x3f
c00161f8:	7f 25                	jg     c001621f <VCache::write(unsigned long long, int, void*)+0xbb>
c00161fa:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00161fd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016200:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016203:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016207:	52                   	push   edx
c0016208:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001620e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016212:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016215:	e8 96 a4 fe ff       	call   c00006b0 <memcpy>
c001621a:	83 c4 10             	add    esp,0x10
c001621d:	eb 13                	jmp    c0016232 <VCache::write(unsigned long long, int, void*)+0xce>
c001621f:	83 ec 0c             	sub    esp,0xc
c0016222:	8b 10                	mov    edx,DWORD PTR [eax]
c0016224:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016228:	55                   	push   ebp
c0016229:	57                   	push   edi
c001622a:	56                   	push   esi
c001622b:	50                   	push   eax
c001622c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001622f:	83 c4 20             	add    esp,0x20
c0016232:	83 ec 0c             	sub    esp,0xc
c0016235:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016238:	e8 eb 6e 00 00       	call   c001d128 <Semaphore::release()>
c001623d:	83 c4 2c             	add    esp,0x2c
c0016240:	31 c0                	xor    eax,eax
c0016242:	5b                   	pop    ebx
c0016243:	5e                   	pop    esi
c0016244:	5f                   	pop    edi
c0016245:	5d                   	pop    ebp
c0016246:	c3                   	ret    
c0016247:	90                   	nop

c0016248 <VCache::read(unsigned long long, int, void*)>:
c0016248:	57                   	push   edi
c0016249:	56                   	push   esi
c001624a:	53                   	push   ebx
c001624b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001624f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016253:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016257:	83 ec 0c             	sub    esp,0xc
c001625a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001625d:	e8 3e 69 00 00       	call   c001cba0 <Semaphore::acquire()>
c0016262:	83 c4 10             	add    esp,0x10
c0016265:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016269:	74 0c                	je     c0016277 <VCache::read(unsigned long long, int, void*)+0x2f>
c001626b:	83 ec 0c             	sub    esp,0xc
c001626e:	53                   	push   ebx
c001626f:	e8 4c fe ff ff       	call   c00160c0 <VCache::writeWriteBuffer()>
c0016274:	83 c4 10             	add    esp,0x10
c0016277:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001627a:	83 ec 0c             	sub    esp,0xc
c001627d:	8b 10                	mov    edx,DWORD PTR [eax]
c001627f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016283:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016287:	57                   	push   edi
c0016288:	56                   	push   esi
c0016289:	50                   	push   eax
c001628a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001628d:	83 c4 14             	add    esp,0x14
c0016290:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016293:	e8 90 6e 00 00       	call   c001d128 <Semaphore::release()>
c0016298:	83 c4 10             	add    esp,0x10
c001629b:	31 c0                	xor    eax,eax
c001629d:	5b                   	pop    ebx
c001629e:	5e                   	pop    esi
c001629f:	5f                   	pop    edi
c00162a0:	c3                   	ret    
c00162a1:	90                   	nop

c00162a2 <Video::putrect(int, int, int, int, unsigned int)>:
c00162a2:	55                   	push   ebp
c00162a3:	57                   	push   edi
c00162a4:	56                   	push   esi
c00162a5:	53                   	push   ebx
c00162a6:	83 ec 1c             	sub    esp,0x1c
c00162a9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00162b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162b5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00162b9:	01 e8                	add    eax,ebp
c00162bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162c3:	01 df                	add    edi,ebx
c00162c5:	39 fb                	cmp    ebx,edi
c00162c7:	7d 1b                	jge    c00162e4 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00162c9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00162cd:	7d 12                	jge    c00162e1 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00162cf:	8b 16                	mov    edx,DWORD PTR [esi]
c00162d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00162d5:	53                   	push   ebx
c00162d6:	55                   	push   ebp
c00162d7:	45                   	inc    ebp
c00162d8:	56                   	push   esi
c00162d9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162dc:	83 c4 10             	add    esp,0x10
c00162df:	eb e8                	jmp    c00162c9 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00162e1:	43                   	inc    ebx
c00162e2:	eb e1                	jmp    c00162c5 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00162e4:	83 c4 1c             	add    esp,0x1c
c00162e7:	5b                   	pop    ebx
c00162e8:	5e                   	pop    esi
c00162e9:	5f                   	pop    edi
c00162ea:	5d                   	pop    ebp
c00162eb:	c3                   	ret    

c00162ec <Video::blit(unsigned int*, int, int, int, int)>:
c00162ec:	55                   	push   ebp
c00162ed:	57                   	push   edi
c00162ee:	56                   	push   esi
c00162ef:	53                   	push   ebx
c00162f0:	83 ec 1c             	sub    esp,0x1c
c00162f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00162f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162fb:	85 c0                	test   eax,eax
c00162fd:	79 02                	jns    c0016301 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00162ff:	31 c0                	xor    eax,eax
c0016301:	c1 e0 02             	shl    eax,0x2
c0016304:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016308:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001630c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016310:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016314:	39 d8                	cmp    eax,ebx
c0016316:	7e 49                	jle    c0016361 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016318:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001631e:	7c 41                	jl     c0016361 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016320:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016324:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016328:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001632c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016330:	39 f9                	cmp    ecx,edi
c0016332:	7e 22                	jle    c0016356 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016334:	83 c5 04             	add    ebp,0x4
c0016337:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001633d:	7c 14                	jl     c0016353 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001633f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016341:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016344:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016348:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001634c:	56                   	push   esi
c001634d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016350:	83 c4 10             	add    esp,0x10
c0016353:	47                   	inc    edi
c0016354:	eb d2                	jmp    c0016328 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016356:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001635a:	43                   	inc    ebx
c001635b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001635f:	eb ab                	jmp    c001630c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016361:	83 c4 1c             	add    esp,0x1c
c0016364:	5b                   	pop    ebx
c0016365:	5e                   	pop    esi
c0016366:	5f                   	pop    edi
c0016367:	5d                   	pop    ebp
c0016368:	c3                   	ret    
c0016369:	90                   	nop

c001636a <Video::clearScreen(unsigned int)>:
c001636a:	57                   	push   edi
c001636b:	56                   	push   esi
c001636c:	53                   	push   ebx
c001636d:	31 db                	xor    ebx,ebx
c001636f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016373:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016379:	7e 1f                	jle    c001639a <Video::clearScreen(unsigned int)+0x30>
c001637b:	31 ff                	xor    edi,edi
c001637d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016383:	7e 12                	jle    c0016397 <Video::clearScreen(unsigned int)+0x2d>
c0016385:	8b 06                	mov    eax,DWORD PTR [esi]
c0016387:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001638b:	53                   	push   ebx
c001638c:	57                   	push   edi
c001638d:	47                   	inc    edi
c001638e:	56                   	push   esi
c001638f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016392:	83 c4 10             	add    esp,0x10
c0016395:	eb e6                	jmp    c001637d <Video::clearScreen(unsigned int)+0x13>
c0016397:	43                   	inc    ebx
c0016398:	eb d9                	jmp    c0016373 <Video::clearScreen(unsigned int)+0x9>
c001639a:	5b                   	pop    ebx
c001639b:	5e                   	pop    esi
c001639c:	5f                   	pop    edi
c001639d:	c3                   	ret    

c001639e <Video::putpixel(int, int, unsigned int)>:
c001639e:	c7 44 24 04 9c 79 02 c0 	mov    DWORD PTR [esp+0x4],0xc002799c
c00163a6:	e9 a6 be ff ff       	jmp    c0012251 <Dbg::kprintf(char const*, ...)>
c00163ab:	90                   	nop

c00163ac <Video::Video(char const*)>:
c00163ac:	83 ec 0c             	sub    esp,0xc
c00163af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b3:	83 ec 08             	sub    esp,0x8
c00163b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ba:	50                   	push   eax
c00163bb:	e8 8c d4 ff ff       	call   c001384c <Device::Device(char const*)>
c00163c0:	83 c4 10             	add    esp,0x10
c00163c3:	ba b4 79 02 c0       	mov    edx,0xc00279b4
c00163c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163cc:	89 10                	mov    DWORD PTR [eax],edx
c00163ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00163dc:	90                   	nop
c00163dd:	83 c4 0c             	add    esp,0xc
c00163e0:	c3                   	ret    
c00163e1:	90                   	nop

c00163e2 <Video::~Video()>:
c00163e2:	83 ec 0c             	sub    esp,0xc
c00163e5:	ba b4 79 02 c0       	mov    edx,0xc00279b4
c00163ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ee:	89 10                	mov    DWORD PTR [eax],edx
c00163f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f4:	83 ec 0c             	sub    esp,0xc
c00163f7:	50                   	push   eax
c00163f8:	e8 01 d1 ff ff       	call   c00134fe <Device::~Device()>
c00163fd:	83 c4 10             	add    esp,0x10
c0016400:	90                   	nop
c0016401:	83 c4 0c             	add    esp,0xc
c0016404:	c3                   	ret    
c0016405:	90                   	nop

c0016406 <Video::~Video()>:
c0016406:	83 ec 0c             	sub    esp,0xc
c0016409:	83 ec 0c             	sub    esp,0xc
c001640c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016410:	e8 cd ff ff ff       	call   c00163e2 <Video::~Video()>
c0016415:	83 c4 10             	add    esp,0x10
c0016418:	83 ec 08             	sub    esp,0x8
c001641b:	68 64 01 00 00       	push   0x164
c0016420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016424:	e8 48 bd ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0016429:	83 c4 10             	add    esp,0x10
c001642c:	83 c4 0c             	add    esp,0xc
c001642f:	c3                   	ret    

c0016430 <Video::isMonochrome()>:
c0016430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016434:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001643a:	c3                   	ret    
c001643b:	90                   	nop

c001643c <Video::getWidth()>:
c001643c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016440:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016446:	c3                   	ret    
c0016447:	90                   	nop

c0016448 <Video::getHeight()>:
c0016448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001644c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016452:	c3                   	ret    
c0016453:	90                   	nop

c0016454 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016454:	55                   	push   ebp
c0016455:	57                   	push   edi
c0016456:	56                   	push   esi
c0016457:	53                   	push   ebx
c0016458:	83 ec 2c             	sub    esp,0x2c
c001645b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001645f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016463:	83 f8 01             	cmp    eax,0x1
c0016466:	19 c9                	sbb    ecx,ecx
c0016468:	31 db                	xor    ebx,ebx
c001646a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001646e:	89 cd                	mov    ebp,ecx
c0016470:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016478:	f7 d5                	not    ebp
c001647a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016480:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016484:	01 d8                	add    eax,ebx
c0016486:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001648a:	56                   	push   esi
c001648b:	e8 b8 ff ff ff       	call   c0016448 <Video::getHeight()>
c0016490:	59                   	pop    ecx
c0016491:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016495:	7e 70                	jle    c0016507 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016497:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001649b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001649f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00164a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164a6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164aa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00164b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164b5:	89 f8                	mov    eax,edi
c00164b7:	83 c0 20             	add    eax,0x20
c00164ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164be:	56                   	push   esi
c00164bf:	e8 78 ff ff ff       	call   c001643c <Video::getWidth()>
c00164c4:	5a                   	pop    edx
c00164c5:	39 c7                	cmp    edi,eax
c00164c7:	7d 34                	jge    c00164fd <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00164c9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00164ce:	74 05                	je     c00164d5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00164d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00164d2:	55                   	push   ebp
c00164d3:	eb 0d                	jmp    c00164e2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00164d5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00164da:	74 12                	je     c00164ee <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00164dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00164de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00164e6:	57                   	push   edi
c00164e7:	56                   	push   esi
c00164e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00164f2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00164f6:	47                   	inc    edi
c00164f7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00164fb:	75 c1                	jne    c00164be <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00164fd:	43                   	inc    ebx
c00164fe:	83 fb 20             	cmp    ebx,0x20
c0016501:	0f 85 79 ff ff ff    	jne    c0016480 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016507:	83 c4 2c             	add    esp,0x2c
c001650a:	5b                   	pop    ebx
c001650b:	5e                   	pop    esi
c001650c:	5f                   	pop    edi
c001650d:	5d                   	pop    ebp
c001650e:	c3                   	ret    
c001650f:	90                   	nop

c0016510 <ACPI::close(int, int, void*)>:
c0016510:	83 ec 1c             	sub    esp,0x1c
c0016513:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001651b:	74 0a                	je     c0016527 <ACPI::close(int, int, void*)+0x17>
c001651d:	b8 00 00 00 00       	mov    eax,0x0
c0016522:	e9 9a 00 00 00       	jmp    c00165c1 <ACPI::close(int, int, void*)+0xb1>
c0016527:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001652c:	75 37                	jne    c0016565 <ACPI::close(int, int, void*)+0x55>
c001652e:	83 ec 0c             	sub    esp,0xc
c0016531:	68 ec 79 02 c0       	push   0xc00279ec
c0016536:	e8 16 bd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001653b:	83 c4 10             	add    esp,0x10
c001653e:	a1 68 ab 02 c0       	mov    eax,ds:0xc002ab68
c0016543:	85 c0                	test   eax,eax
c0016545:	74 07                	je     c001654e <ACPI::close(int, int, void*)+0x3e>
c0016547:	a1 68 ab 02 c0       	mov    eax,ds:0xc002ab68
c001654c:	ff d0                	call   eax
c001654e:	83 ec 0c             	sub    esp,0xc
c0016551:	68 a0 7a 02 c0       	push   0xc0027aa0
c0016556:	e8 78 31 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c001655b:	83 c4 10             	add    esp,0x10
c001655e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016563:	eb 5c                	jmp    c00165c1 <ACPI::close(int, int, void*)+0xb1>
c0016565:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001656a:	75 50                	jne    c00165bc <ACPI::close(int, int, void*)+0xac>
c001656c:	a1 64 ab 02 c0       	mov    eax,ds:0xc002ab64
c0016571:	85 c0                	test   eax,eax
c0016573:	74 07                	je     c001657c <ACPI::close(int, int, void*)+0x6c>
c0016575:	a1 64 ab 02 c0       	mov    eax,ds:0xc002ab64
c001657a:	ff d0                	call   eax
c001657c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016581:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016586:	83 e0 02             	and    eax,0x2
c0016589:	74 1c                	je     c00165a7 <ACPI::close(int, int, void*)+0x97>
c001658b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016592:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016596:	89 c2                	mov    edx,eax
c0016598:	ec                   	in     al,dx
c0016599:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001659d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00165a1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165a5:	eb da                	jmp    c0016581 <ACPI::close(int, int, void*)+0x71>
c00165a7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00165ae:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00165b3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00165b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165bb:	ee                   	out    dx,al
c00165bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165c1:	83 c4 1c             	add    esp,0x1c
c00165c4:	c3                   	ret    

c00165c5 <findRSDP()>:
c00165c5:	83 ec 1c             	sub    esp,0x1c
c00165c8:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c00165cd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00165d3:	83 e0 04             	and    eax,0x4
c00165d6:	84 c0                	test   al,al
c00165d8:	75 07                	jne    c00165e1 <findRSDP()+0x1c>
c00165da:	b8 00 00 00 00       	mov    eax,0x0
c00165df:	eb 6a                	jmp    c001664b <findRSDP()+0x86>
c00165e1:	a1 30 a5 02 c0       	mov    eax,ds:0xc002a530
c00165e6:	3d ff 07 00 00       	cmp    eax,0x7ff
c00165eb:	7f 1b                	jg     c0016608 <findRSDP()+0x43>
c00165ed:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c00165f2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00165f8:	83 e2 fb             	and    edx,0xfffffffb
c00165fb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016601:	b8 00 00 00 00       	mov    eax,0x0
c0016606:	eb 43                	jmp    c001664b <findRSDP()+0x86>
c0016608:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016610:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016618:	77 2c                	ja     c0016646 <findRSDP()+0x81>
c001661a:	83 ec 04             	sub    esp,0x4
c001661d:	6a 08                	push   0x8
c001661f:	68 f9 79 02 c0       	push   0xc00279f9
c0016624:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016628:	e8 20 a0 fe ff       	call   c000064d <memcmp>
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	85 c0                	test   eax,eax
c0016632:	0f 94 c0             	sete   al
c0016635:	84 c0                	test   al,al
c0016637:	74 06                	je     c001663f <findRSDP()+0x7a>
c0016639:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001663d:	eb 0c                	jmp    c001664b <findRSDP()+0x86>
c001663f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016644:	eb ca                	jmp    c0016610 <findRSDP()+0x4b>
c0016646:	b8 00 00 00 00       	mov    eax,0x0
c001664b:	83 c4 1c             	add    esp,0x1c
c001664e:	c3                   	ret    

c001664f <loadACPITables(unsigned char*)>:
c001664f:	56                   	push   esi
c0016650:	53                   	push   ebx
c0016651:	83 ec 44             	sub    esp,0x44
c0016654:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0016659:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001665f:	83 e0 04             	and    eax,0x4
c0016662:	84 c0                	test   al,al
c0016664:	0f 84 05 02 00 00    	je     c001686f <loadACPITables(unsigned char*)+0x220>
c001666a:	a0 80 ad 02 c0       	mov    al,ds:0xc002ad80
c001666f:	84 c0                	test   al,al
c0016671:	74 75                	je     c00166e8 <loadACPITables(unsigned char*)+0x99>
c0016673:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016677:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001667b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001667f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016682:	83 e8 24             	sub    eax,0x24
c0016685:	c1 e8 03             	shr    eax,0x3
c0016688:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001668c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016694:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016698:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001669c:	0f 8d b2 00 00 00    	jge    c0016754 <loadACPITables(unsigned char*)+0x105>
c00166a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166a6:	83 c0 24             	add    eax,0x24
c00166a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00166ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00166b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166b9:	c1 e0 03             	shl    eax,0x3
c00166bc:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00166c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00166c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00166c9:	89 c1                	mov    ecx,eax
c00166cb:	a1 6c ab 02 c0       	mov    eax,ds:0xc002ab6c
c00166d0:	8d 50 01             	lea    edx,[eax+0x1]
c00166d3:	89 15 6c ab 02 c0    	mov    DWORD PTR ds:0xc002ab6c,edx
c00166d9:	89 ca                	mov    edx,ecx
c00166db:	89 14 c5 84 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd547c],edx
c00166e2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00166e6:	eb ac                	jmp    c0016694 <loadACPITables(unsigned char*)+0x45>
c00166e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00166f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166f7:	83 e8 24             	sub    eax,0x24
c00166fa:	c1 e8 02             	shr    eax,0x2
c00166fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016701:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016709:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001670d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016711:	7d 41                	jge    c0016754 <loadACPITables(unsigned char*)+0x105>
c0016713:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016717:	83 c0 24             	add    eax,0x24
c001671a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001671e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016722:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016726:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001672a:	c1 e0 02             	shl    eax,0x2
c001672d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016731:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016735:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016737:	a1 6c ab 02 c0       	mov    eax,ds:0xc002ab6c
c001673c:	8d 50 01             	lea    edx,[eax+0x1]
c001673f:	89 15 6c ab 02 c0    	mov    DWORD PTR ds:0xc002ab6c,edx
c0016745:	89 ca                	mov    edx,ecx
c0016747:	89 14 c5 84 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd547c],edx
c001674e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016752:	eb b5                	jmp    c0016709 <loadACPITables(unsigned char*)+0xba>
c0016754:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001675c:	a1 6c ab 02 c0       	mov    eax,ds:0xc002ab6c
c0016761:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016765:	0f 8d 05 01 00 00    	jge    c0016870 <loadACPITables(unsigned char*)+0x221>
c001676b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001676f:	8b 04 c5 84 ab 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd547c]
c0016776:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001677a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001677e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016786:	25 ff 0f 00 00       	and    eax,0xfff
c001678b:	89 c6                	mov    esi,eax
c001678d:	e8 7d ac ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0016792:	89 c3                	mov    ebx,eax
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	6a 01                	push   0x1
c0016799:	e8 e1 aa ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c001679e:	83 c4 10             	add    esp,0x10
c00167a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167a5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167ab:	83 ec 0c             	sub    esp,0xc
c00167ae:	6a 01                	push   0x1
c00167b0:	6a 01                	push   0x1
c00167b2:	50                   	push   eax
c00167b3:	52                   	push   edx
c00167b4:	53                   	push   ebx
c00167b5:	e8 84 b4 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167ba:	83 c4 20             	add    esp,0x20
c00167bd:	09 f0                	or     eax,esi
c00167bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167c7:	c1 e0 03             	shl    eax,0x3
c00167ca:	05 80 ab 02 c0       	add    eax,0xc002ab80
c00167cf:	83 ec 04             	sub    esp,0x4
c00167d2:	6a 04                	push   0x4
c00167d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167d8:	50                   	push   eax
c00167d9:	e8 d2 9e fe ff       	call   c00006b0 <memcpy>
c00167de:	83 c4 10             	add    esp,0x10
c00167e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00167e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167f0:	05 00 10 00 00       	add    eax,0x1000
c00167f5:	c1 e8 0c             	shr    eax,0xc
c00167f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016800:	89 04 24             	mov    DWORD PTR [esp],eax
c0016803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016807:	25 ff 0f 00 00       	and    eax,0xfff
c001680c:	89 c6                	mov    esi,eax
c001680e:	e8 fc ab ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0016813:	89 c3                	mov    ebx,eax
c0016815:	83 ec 0c             	sub    esp,0xc
c0016818:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001681c:	e8 5e aa ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0016821:	83 c4 10             	add    esp,0x10
c0016824:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016828:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001682e:	83 ec 0c             	sub    esp,0xc
c0016831:	6a 01                	push   0x1
c0016833:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016837:	50                   	push   eax
c0016838:	52                   	push   edx
c0016839:	53                   	push   ebx
c001683a:	e8 ff b3 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001683f:	83 c4 20             	add    esp,0x20
c0016842:	09 f0                	or     eax,esi
c0016844:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016848:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001684b:	83 ec 0c             	sub    esp,0xc
c001684e:	50                   	push   eax
c001684f:	e8 85 ad ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0016854:	83 c4 10             	add    esp,0x10
c0016857:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001685b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001685f:	89 14 c5 84 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd547c],edx
c0016866:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001686a:	e9 ed fe ff ff       	jmp    c001675c <loadACPITables(unsigned char*)+0x10d>
c001686f:	90                   	nop
c0016870:	83 c4 44             	add    esp,0x44
c0016873:	5b                   	pop    ebx
c0016874:	5e                   	pop    esi
c0016875:	c3                   	ret    

c0016876 <findRSDT(unsigned char*)>:
c0016876:	56                   	push   esi
c0016877:	53                   	push   ebx
c0016878:	83 ec 44             	sub    esp,0x44
c001687b:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0016880:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016886:	83 e0 04             	and    eax,0x4
c0016889:	84 c0                	test   al,al
c001688b:	75 0a                	jne    c0016897 <findRSDT(unsigned char*)+0x21>
c001688d:	b8 00 00 00 00       	mov    eax,0x0
c0016892:	e9 f7 00 00 00       	jmp    c001698e <findRSDT(unsigned char*)+0x118>
c0016897:	83 ec 04             	sub    esp,0x4
c001689a:	6a 24                	push   0x24
c001689c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00168a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168a4:	50                   	push   eax
c00168a5:	e8 06 9e fe ff       	call   c00006b0 <memcpy>
c00168aa:	83 c4 10             	add    esp,0x10
c00168ad:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00168b1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00168b5:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00168bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00168c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00168d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168d5:	25 ff 0f 00 00       	and    eax,0xfff
c00168da:	89 c6                	mov    esi,eax
c00168dc:	e8 2e ab ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00168e1:	89 c3                	mov    ebx,eax
c00168e3:	83 ec 0c             	sub    esp,0xc
c00168e6:	6a 02                	push   0x2
c00168e8:	e8 92 a9 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c00168ed:	83 c4 10             	add    esp,0x10
c00168f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00168f4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00168fa:	83 ec 0c             	sub    esp,0xc
c00168fd:	6a 01                	push   0x1
c00168ff:	6a 02                	push   0x2
c0016901:	50                   	push   eax
c0016902:	52                   	push   edx
c0016903:	53                   	push   ebx
c0016904:	e8 35 b3 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016909:	83 c4 20             	add    esp,0x20
c001690c:	09 f0                	or     eax,esi
c001690e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016912:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016916:	25 ff 0f 00 00       	and    eax,0xfff
c001691b:	89 c6                	mov    esi,eax
c001691d:	e8 ed aa ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0016922:	89 c3                	mov    ebx,eax
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	6a 02                	push   0x2
c0016929:	e8 51 a9 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c001692e:	83 c4 10             	add    esp,0x10
c0016931:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016935:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001693b:	83 ec 0c             	sub    esp,0xc
c001693e:	6a 01                	push   0x1
c0016940:	6a 02                	push   0x2
c0016942:	50                   	push   eax
c0016943:	52                   	push   edx
c0016944:	53                   	push   ebx
c0016945:	e8 f4 b2 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001694a:	83 c4 20             	add    esp,0x20
c001694d:	09 f0                	or     eax,esi
c001694f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016953:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016958:	75 11                	jne    c001696b <findRSDT(unsigned char*)+0xf5>
c001695a:	c6 05 80 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad80,0x0
c0016961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016965:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016969:	eb 1f                	jmp    c001698a <findRSDT(unsigned char*)+0x114>
c001696b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016970:	75 11                	jne    c0016983 <findRSDT(unsigned char*)+0x10d>
c0016972:	c6 05 80 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad80,0x1
c0016979:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001697d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016981:	eb 07                	jmp    c001698a <findRSDT(unsigned char*)+0x114>
c0016983:	b8 00 00 00 00       	mov    eax,0x0
c0016988:	eb 04                	jmp    c001698e <findRSDT(unsigned char*)+0x118>
c001698a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001698e:	83 c4 44             	add    esp,0x44
c0016991:	5b                   	pop    ebx
c0016992:	5e                   	pop    esi
c0016993:	c3                   	ret    

c0016994 <findDataTable(unsigned char*, char*)>:
c0016994:	83 ec 1c             	sub    esp,0x1c
c0016997:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c001699c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169a2:	83 e0 04             	and    eax,0x4
c00169a5:	84 c0                	test   al,al
c00169a7:	75 07                	jne    c00169b0 <findDataTable(unsigned char*, char*)+0x1c>
c00169a9:	b8 00 00 00 00       	mov    eax,0x0
c00169ae:	eb 7c                	jmp    c0016a2c <findDataTable(unsigned char*, char*)+0x98>
c00169b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00169b8:	a1 6c ab 02 c0       	mov    eax,ds:0xc002ab6c
c00169bd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00169c1:	7d 3a                	jge    c00169fd <findDataTable(unsigned char*, char*)+0x69>
c00169c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169c7:	c1 e0 03             	shl    eax,0x3
c00169ca:	05 80 ab 02 c0       	add    eax,0xc002ab80
c00169cf:	83 ec 04             	sub    esp,0x4
c00169d2:	6a 04                	push   0x4
c00169d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169d8:	50                   	push   eax
c00169d9:	e8 6f 9c fe ff       	call   c000064d <memcmp>
c00169de:	83 c4 10             	add    esp,0x10
c00169e1:	85 c0                	test   eax,eax
c00169e3:	0f 94 c0             	sete   al
c00169e6:	84 c0                	test   al,al
c00169e8:	74 0d                	je     c00169f7 <findDataTable(unsigned char*, char*)+0x63>
c00169ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169ee:	8b 04 c5 84 ab 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd547c]
c00169f5:	eb 35                	jmp    c0016a2c <findDataTable(unsigned char*, char*)+0x98>
c00169f7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00169fb:	eb bb                	jmp    c00169b8 <findDataTable(unsigned char*, char*)+0x24>
c00169fd:	a0 80 ad 02 c0       	mov    al,ds:0xc002ad80
c0016a02:	84 c0                	test   al,al
c0016a04:	74 07                	je     c0016a0d <findDataTable(unsigned char*, char*)+0x79>
c0016a06:	b8 58 00 00 00       	mov    eax,0x58
c0016a0b:	eb 05                	jmp    c0016a12 <findDataTable(unsigned char*, char*)+0x7e>
c0016a0d:	b8 52 00 00 00       	mov    eax,0x52
c0016a12:	83 ec 04             	sub    esp,0x4
c0016a15:	50                   	push   eax
c0016a16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a1a:	68 c4 7a 02 c0       	push   0xc0027ac4
c0016a1f:	e8 2d b8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0016a24:	83 c4 10             	add    esp,0x10
c0016a27:	b8 00 00 00 00       	mov    eax,0x0
c0016a2c:	83 c4 1c             	add    esp,0x1c
c0016a2f:	c3                   	ret    

c0016a30 <scanMADT()>:
c0016a30:	83 ec 2c             	sub    esp,0x2c
c0016a33:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0016a38:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a3e:	83 e0 04             	and    eax,0x4
c0016a41:	84 c0                	test   al,al
c0016a43:	0f 84 73 03 00 00    	je     c0016dbc <scanMADT()+0x38c>
c0016a49:	e8 77 fb ff ff       	call   c00165c5 <findRSDP()>
c0016a4e:	a3 8c ad 02 c0       	mov    ds:0xc002ad8c,eax
c0016a53:	a1 8c ad 02 c0       	mov    eax,ds:0xc002ad8c
c0016a58:	85 c0                	test   eax,eax
c0016a5a:	75 19                	jne    c0016a75 <scanMADT()+0x45>
c0016a5c:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0016a61:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a67:	83 e2 fb             	and    edx,0xfffffffb
c0016a6a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016a70:	e9 4b 03 00 00       	jmp    c0016dc0 <scanMADT()+0x390>
c0016a75:	a1 8c ad 02 c0       	mov    eax,ds:0xc002ad8c
c0016a7a:	83 ec 0c             	sub    esp,0xc
c0016a7d:	50                   	push   eax
c0016a7e:	e8 f3 fd ff ff       	call   c0016876 <findRSDT(unsigned char*)>
c0016a83:	83 c4 10             	add    esp,0x10
c0016a86:	a3 88 ad 02 c0       	mov    ds:0xc002ad88,eax
c0016a8b:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c0016a90:	85 c0                	test   eax,eax
c0016a92:	75 19                	jne    c0016aad <scanMADT()+0x7d>
c0016a94:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0016a99:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a9f:	83 e2 fb             	and    edx,0xfffffffb
c0016aa2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016aa8:	e9 13 03 00 00       	jmp    c0016dc0 <scanMADT()+0x390>
c0016aad:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c0016ab2:	83 ec 0c             	sub    esp,0xc
c0016ab5:	50                   	push   eax
c0016ab6:	e8 94 fb ff ff       	call   c001664f <loadACPITables(unsigned char*)>
c0016abb:	83 c4 10             	add    esp,0x10
c0016abe:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c0016ac3:	83 ec 08             	sub    esp,0x8
c0016ac6:	68 02 7a 02 c0       	push   0xc0027a02
c0016acb:	50                   	push   eax
c0016acc:	e8 c3 fe ff ff       	call   c0016994 <findDataTable(unsigned char*, char*)>
c0016ad1:	83 c4 10             	add    esp,0x10
c0016ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ad8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0016add:	75 19                	jne    c0016af8 <scanMADT()+0xc8>
c0016adf:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0016ae4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016aea:	83 e2 fe             	and    edx,0xfffffffe
c0016aed:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016af3:	e9 c8 02 00 00       	jmp    c0016dc0 <scanMADT()+0x390>
c0016af8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016b00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016b07:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016b0b:	0f 87 af 02 00 00    	ja     c0016dc0 <scanMADT()+0x390>
c0016b11:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016b19:	0f 87 a1 02 00 00    	ja     c0016dc0 <scanMADT()+0x390>
c0016b1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b2b:	8d 50 01             	lea    edx,[eax+0x1]
c0016b2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b36:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b3a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016b3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b42:	8d 50 01             	lea    edx,[eax+0x1]
c0016b45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b49:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b4d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b51:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016b55:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016b5a:	0f 86 5f 02 00 00    	jbe    c0016dbf <scanMADT()+0x38f>
c0016b60:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016b65:	75 57                	jne    c0016bbe <scanMADT()+0x18e>
c0016b67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b6b:	8d 50 01             	lea    edx,[eax+0x1]
c0016b6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b72:	8a 15 c0 ae 02 c0    	mov    dl,BYTE PTR ds:0xc002aec0
c0016b78:	0f b6 d2             	movzx  edx,dl
c0016b7b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016b7f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016b83:	88 82 00 af 02 c0    	mov    BYTE PTR [edx-0x3ffd5100],al
c0016b89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b8d:	8d 50 01             	lea    edx,[eax+0x1]
c0016b90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b94:	8a 15 c0 ae 02 c0    	mov    dl,BYTE PTR ds:0xc002aec0
c0016b9a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016b9d:	88 0d c0 ae 02 c0    	mov    BYTE PTR ds:0xc002aec0,cl
c0016ba3:	0f b6 d2             	movzx  edx,dl
c0016ba6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016baa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bae:	88 82 e0 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd5120],al
c0016bb4:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016bb9:	e9 ea 01 00 00       	jmp    c0016da8 <scanMADT()+0x378>
c0016bbe:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0016bc3:	0f 85 14 01 00 00    	jne    c0016cdd <scanMADT()+0x2ad>
c0016bc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bcd:	8d 50 01             	lea    edx,[eax+0x1]
c0016bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bd4:	8a 15 90 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ad90
c0016bda:	0f b6 d2             	movzx  edx,dl
c0016bdd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016be1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016be5:	88 82 a0 ad 02 c0    	mov    BYTE PTR [edx-0x3ffd5260],al
c0016beb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016bef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bf7:	01 d0                	add    eax,edx
c0016bf9:	83 c0 2c             	add    eax,0x2c
c0016bfc:	8a 00                	mov    al,BYTE PTR [eax]
c0016bfe:	0f b6 d0             	movzx  edx,al
c0016c01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c05:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c0c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c10:	0f b6 c0             	movzx  eax,al
c0016c13:	c1 e0 08             	shl    eax,0x8
c0016c16:	89 d1                	mov    ecx,edx
c0016c18:	09 c1                	or     ecx,eax
c0016c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c1e:	8d 50 02             	lea    edx,[eax+0x2]
c0016c21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c25:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c29:	0f b6 c0             	movzx  eax,al
c0016c2c:	c1 e0 10             	shl    eax,0x10
c0016c2f:	09 c1                	or     ecx,eax
c0016c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c35:	8d 50 03             	lea    edx,[eax+0x3]
c0016c38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c3c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c40:	0f b6 c0             	movzx  eax,al
c0016c43:	c1 e0 18             	shl    eax,0x18
c0016c46:	09 c1                	or     ecx,eax
c0016c48:	89 ca                	mov    edx,ecx
c0016c4a:	a0 90 ad 02 c0       	mov    al,ds:0xc002ad90
c0016c4f:	0f b6 c0             	movzx  eax,al
c0016c52:	89 14 85 c0 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5240],edx
c0016c59:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016c5e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c66:	01 d0                	add    eax,edx
c0016c68:	83 c0 2c             	add    eax,0x2c
c0016c6b:	8a 00                	mov    al,BYTE PTR [eax]
c0016c6d:	0f b6 d0             	movzx  edx,al
c0016c70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c74:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c7b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c7f:	0f b6 c0             	movzx  eax,al
c0016c82:	c1 e0 08             	shl    eax,0x8
c0016c85:	89 d1                	mov    ecx,edx
c0016c87:	09 c1                	or     ecx,eax
c0016c89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c8d:	8d 50 02             	lea    edx,[eax+0x2]
c0016c90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c94:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c98:	0f b6 c0             	movzx  eax,al
c0016c9b:	c1 e0 10             	shl    eax,0x10
c0016c9e:	09 c1                	or     ecx,eax
c0016ca0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ca4:	8d 50 03             	lea    edx,[eax+0x3]
c0016ca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cab:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016caf:	0f b6 c0             	movzx  eax,al
c0016cb2:	c1 e0 18             	shl    eax,0x18
c0016cb5:	09 c1                	or     ecx,eax
c0016cb7:	89 ca                	mov    edx,ecx
c0016cb9:	a0 90 ad 02 c0       	mov    al,ds:0xc002ad90
c0016cbe:	0f b6 c0             	movzx  eax,al
c0016cc1:	89 14 85 40 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd51c0],edx
c0016cc8:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016ccd:	a0 90 ad 02 c0       	mov    al,ds:0xc002ad90
c0016cd2:	40                   	inc    eax
c0016cd3:	a2 90 ad 02 c0       	mov    ds:0xc002ad90,al
c0016cd8:	e9 cb 00 00 00       	jmp    c0016da8 <scanMADT()+0x378>
c0016cdd:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0016ce2:	0f 85 a6 00 00 00    	jne    c0016d8e <scanMADT()+0x35e>
c0016ce8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cec:	8d 50 01             	lea    edx,[eax+0x1]
c0016cef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016cf3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016cf7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016cfb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016cff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d03:	8d 50 01             	lea    edx,[eax+0x1]
c0016d06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d0e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d12:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d1e:	01 d0                	add    eax,edx
c0016d20:	83 c0 2c             	add    eax,0x2c
c0016d23:	8a 00                	mov    al,BYTE PTR [eax]
c0016d25:	0f b6 d0             	movzx  edx,al
c0016d28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d2c:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d33:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016d37:	0f b6 c0             	movzx  eax,al
c0016d3a:	c1 e0 08             	shl    eax,0x8
c0016d3d:	89 d1                	mov    ecx,edx
c0016d3f:	09 c1                	or     ecx,eax
c0016d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d45:	8d 50 02             	lea    edx,[eax+0x2]
c0016d48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d4c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d50:	0f b6 c0             	movzx  eax,al
c0016d53:	c1 e0 10             	shl    eax,0x10
c0016d56:	09 c1                	or     ecx,eax
c0016d58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d5c:	8d 50 03             	lea    edx,[eax+0x3]
c0016d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d63:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d67:	0f b6 c0             	movzx  eax,al
c0016d6a:	c1 e0 18             	shl    eax,0x18
c0016d6d:	09 c8                	or     eax,ecx
c0016d6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d73:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016d78:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016d7d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016d82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d86:	88 90 e0 96 02 c0    	mov    BYTE PTR [eax-0x3ffd6920],dl
c0016d8c:	eb 1a                	jmp    c0016da8 <scanMADT()+0x378>
c0016d8e:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016d93:	75 07                	jne    c0016d9c <scanMADT()+0x36c>
c0016d95:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016d9a:	eb 0c                	jmp    c0016da8 <scanMADT()+0x378>
c0016d9c:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016da1:	75 05                	jne    c0016da8 <scanMADT()+0x378>
c0016da3:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016da8:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016dad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016db1:	01 d0                	add    eax,edx
c0016db3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016db7:	e9 44 fd ff ff       	jmp    c0016b00 <scanMADT()+0xd0>
c0016dbc:	90                   	nop
c0016dbd:	eb 01                	jmp    c0016dc0 <scanMADT()+0x390>
c0016dbf:	90                   	nop
c0016dc0:	83 c4 2c             	add    esp,0x2c
c0016dc3:	c3                   	ret    

c0016dc4 <ACPI::ACPI()>:
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dcb:	83 ec 08             	sub    esp,0x8
c0016dce:	68 07 7a 02 c0       	push   0xc0027a07
c0016dd3:	50                   	push   eax
c0016dd4:	e8 73 ca ff ff       	call   c001384c <Device::Device(char const*)>
c0016dd9:	83 c4 10             	add    esp,0x10
c0016ddc:	ba 90 7b 02 c0       	mov    edx,0xc0027b90
c0016de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016de5:	89 10                	mov    DWORD PTR [eax],edx
c0016de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016deb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df6:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e04:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e12:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016e19:	e8 12 fc ff ff       	call   c0016a30 <scanMADT()>
c0016e1e:	90                   	nop
c0016e1f:	83 c4 0c             	add    esp,0xc
c0016e22:	c3                   	ret    
c0016e23:	90                   	nop

c0016e24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016e24:	83 ec 2c             	sub    esp,0x2c
c0016e27:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e2f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016e33:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016e37:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016e3c:	88 d0                	mov    al,dl
c0016e3e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016e42:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016e47:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016e4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e53:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016e59:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016e5d:	0f 8d 97 00 00 00    	jge    c0016efa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016e63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e6b:	83 c2 2a             	add    edx,0x2a
c0016e6e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016e72:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016e77:	75 78                	jne    c0016ef1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016e79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e7d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e81:	83 c2 2a             	add    edx,0x2a
c0016e84:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016e88:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016e8c:	75 63                	jne    c0016ef1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016e8e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016e93:	74 3a                	je     c0016ecf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016e95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e9d:	83 c2 2a             	add    edx,0x2a
c0016ea0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016ea4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ea8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016eab:	39 c2                	cmp    edx,eax
c0016ead:	74 10                	je     c0016ebf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016eaf:	83 ec 0c             	sub    esp,0xc
c0016eb2:	68 f4 7a 02 c0       	push   0xc0027af4
c0016eb7:	e8 17 28 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0016ebc:	83 c4 10             	add    esp,0x10
c0016ebf:	83 ec 0c             	sub    esp,0xc
c0016ec2:	68 0c 7a 02 c0       	push   0xc0027a0c
c0016ec7:	e8 07 28 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0016ecc:	83 c4 10             	add    esp,0x10
c0016ecf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016ed3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ed7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016edb:	83 c2 2a             	add    edx,0x2a
c0016ede:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016ee2:	8b 02                	mov    eax,DWORD PTR [edx]
c0016ee4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016ee7:	89 01                	mov    DWORD PTR [ecx],eax
c0016ee9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016eec:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016ef1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016ef5:	e9 55 ff ff ff       	jmp    c0016e4f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016efa:	90                   	nop
c0016efb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016eff:	83 c4 2c             	add    esp,0x2c
c0016f02:	c2 04 00             	ret    0x4
c0016f05:	90                   	nop

c0016f06 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016f06:	56                   	push   esi
c0016f07:	53                   	push   ebx
c0016f08:	83 ec 14             	sub    esp,0x14
c0016f0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016f13:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f17:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016f1c:	88 c8                	mov    al,cl
c0016f1e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016f22:	88 d0                	mov    al,dl
c0016f24:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f2c:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f36:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016f3c:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016f41:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016f46:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016f4b:	83 ec 04             	sub    esp,0x4
c0016f4e:	56                   	push   esi
c0016f4f:	53                   	push   ebx
c0016f50:	51                   	push   ecx
c0016f51:	52                   	push   edx
c0016f52:	50                   	push   eax
c0016f53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016f57:	68 24 7b 02 c0       	push   0xc0027b24
c0016f5c:	e8 f0 b2 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0016f61:	83 c4 20             	add    esp,0x20
c0016f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f68:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f72:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016f75:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016f79:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016f7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f81:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016f87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016f8b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016f8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f92:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016f97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fa1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016fa5:	8d 48 01             	lea    ecx,[eax+0x1]
c0016fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fac:	83 c2 2a             	add    edx,0x2a
c0016faf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0016fb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb7:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016fc4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016fc8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0016fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd0:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016fd6:	8d 50 01             	lea    edx,[eax+0x1]
c0016fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fdd:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0016fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe7:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016fed:	3d 00 08 00 00       	cmp    eax,0x800
c0016ff2:	75 10                	jne    c0017004 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0016ff4:	83 ec 0c             	sub    esp,0xc
c0016ff7:	68 1b 7a 02 c0       	push   0xc0027a1b
c0016ffc:	e8 d2 26 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0017001:	83 c4 10             	add    esp,0x10
c0017004:	90                   	nop
c0017005:	83 c4 14             	add    esp,0x14
c0017008:	5b                   	pop    ebx
c0017009:	5e                   	pop    esi
c001700a:	c3                   	ret    
c001700b:	90                   	nop

c001700c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001700c:	b8 00 00 00 00       	mov    eax,0x0
c0017011:	c3                   	ret    

c0017012 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017012:	83 ec 1c             	sub    esp,0x1c
c0017015:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017019:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001701c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017020:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0017025:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001702a:	83 ec 08             	sub    esp,0x8
c001702d:	52                   	push   edx
c001702e:	50                   	push   eax
c001702f:	e8 3c 77 ff ff       	call   c000e770 <Computer::readCMOS(unsigned char)>
c0017034:	83 c4 10             	add    esp,0x10
c0017037:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001703b:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0017040:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017045:	83 ec 04             	sub    esp,0x4
c0017048:	6a 01                	push   0x1
c001704a:	52                   	push   edx
c001704b:	50                   	push   eax
c001704c:	e8 35 78 ff ff       	call   c000e886 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017051:	83 c4 10             	add    esp,0x10
c0017054:	90                   	nop
c0017055:	83 c4 1c             	add    esp,0x1c
c0017058:	c3                   	ret    
c0017059:	90                   	nop

c001705a <ACPI::open(int, int, void*)>:
c001705a:	53                   	push   ebx
c001705b:	83 ec 18             	sub    esp,0x18
c001705e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017062:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706d:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017073:	84 c0                	test   al,al
c0017075:	74 60                	je     c00170d7 <ACPI::open(int, int, void*)+0x7d>
c0017077:	83 ec 0c             	sub    esp,0xc
c001707a:	68 58 01 00 00       	push   0x158
c001707f:	e8 de b0 ff ff       	call   c0012162 <operator new(unsigned long)>
c0017084:	83 c4 10             	add    esp,0x10
c0017087:	89 c3                	mov    ebx,eax
c0017089:	83 ec 0c             	sub    esp,0xc
c001708c:	53                   	push   ebx
c001708d:	e8 24 8e 00 00       	call   c001feb6 <PCI::PCI()>
c0017092:	83 c4 10             	add    esp,0x10
c0017095:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709d:	83 ec 08             	sub    esp,0x8
c00170a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170a4:	50                   	push   eax
c00170a5:	e8 b2 c5 ff ff       	call   c001365c <Device::addChild(Device*)>
c00170aa:	83 c4 10             	add    esp,0x10
c00170ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00170b3:	83 c0 08             	add    eax,0x8
c00170b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00170b8:	6a 00                	push   0x0
c00170ba:	6a 00                	push   0x0
c00170bc:	6a 00                	push   0x0
c00170be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170c2:	ff d0                	call   eax
c00170c4:	83 c4 10             	add    esp,0x10
c00170c7:	83 ec 0c             	sub    esp,0xc
c00170ca:	68 38 7a 02 c0       	push   0xc0027a38
c00170cf:	e8 7d b1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00170d4:	83 c4 10             	add    esp,0x10
c00170d7:	83 ec 0c             	sub    esp,0xc
c00170da:	68 43 7a 02 c0       	push   0xc0027a43
c00170df:	e8 90 44 00 00       	call   c001b574 <Thr::loadKernelSymbolTable(char const*)>
c00170e4:	83 c4 10             	add    esp,0x10
c00170e7:	8b 1d e8 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4e8
c00170ed:	83 ec 08             	sub    esp,0x8
c00170f0:	6a 01                	push   0x1
c00170f2:	68 61 7a 02 c0       	push   0xc0027a61
c00170f7:	e8 5a 4f 00 00       	call   c001c056 <Thr::loadDLL(char const*, bool)>
c00170fc:	83 c4 10             	add    esp,0x10
c00170ff:	83 ec 08             	sub    esp,0x8
c0017102:	53                   	push   ebx
c0017103:	50                   	push   eax
c0017104:	e8 13 51 00 00       	call   c001c21c <Thr::executeDLL(unsigned long, void*)>
c0017109:	83 c4 10             	add    esp,0x10
c001710c:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0017111:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017117:	83 e0 04             	and    eax,0x4
c001711a:	84 c0                	test   al,al
c001711c:	0f 84 cf 00 00 00    	je     c00171f1 <ACPI::open(int, int, void*)+0x197>
c0017122:	83 ec 0c             	sub    esp,0xc
c0017125:	68 14 01 00 00       	push   0x114
c001712a:	e8 33 b0 ff ff       	call   c0012162 <operator new(unsigned long)>
c001712f:	83 c4 10             	add    esp,0x10
c0017132:	89 c3                	mov    ebx,eax
c0017134:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0017139:	83 ec 04             	sub    esp,0x4
c001713c:	50                   	push   eax
c001713d:	68 7e 7a 02 c0       	push   0xc0027a7e
c0017142:	53                   	push   ebx
c0017143:	e8 38 b6 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001714f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017154:	74 17                	je     c001716d <ACPI::open(int, int, void*)+0x113>
c0017156:	83 ec 0c             	sub    esp,0xc
c0017159:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001715d:	e8 f0 b8 ff ff       	call   c0012a52 <File::exists()>
c0017162:	83 c4 10             	add    esp,0x10
c0017165:	84 c0                	test   al,al
c0017167:	74 04                	je     c001716d <ACPI::open(int, int, void*)+0x113>
c0017169:	b0 01                	mov    al,0x1
c001716b:	eb 02                	jmp    c001716f <ACPI::open(int, int, void*)+0x115>
c001716d:	b0 00                	mov    al,0x0
c001716f:	84 c0                	test   al,al
c0017171:	74 25                	je     c0017198 <ACPI::open(int, int, void*)+0x13e>
c0017173:	8b 1d e8 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4e8
c0017179:	83 ec 08             	sub    esp,0x8
c001717c:	6a 01                	push   0x1
c001717e:	68 7e 7a 02 c0       	push   0xc0027a7e
c0017183:	e8 ce 4e 00 00       	call   c001c056 <Thr::loadDLL(char const*, bool)>
c0017188:	83 c4 10             	add    esp,0x10
c001718b:	83 ec 08             	sub    esp,0x8
c001718e:	53                   	push   ebx
c001718f:	50                   	push   eax
c0017190:	e8 87 50 00 00       	call   c001c21c <Thr::executeDLL(unsigned long, void*)>
c0017195:	83 c4 10             	add    esp,0x10
c0017198:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001719d:	74 1e                	je     c00171bd <ACPI::open(int, int, void*)+0x163>
c001719f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171a4:	74 17                	je     c00171bd <ACPI::open(int, int, void*)+0x163>
c00171a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00171ac:	83 c0 08             	add    eax,0x8
c00171af:	8b 00                	mov    eax,DWORD PTR [eax]
c00171b1:	83 ec 0c             	sub    esp,0xc
c00171b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171b8:	ff d0                	call   eax
c00171ba:	83 c4 10             	add    esp,0x10
c00171bd:	a1 88 ad 02 c0       	mov    eax,ds:0xc002ad88
c00171c2:	83 ec 08             	sub    esp,0x8
c00171c5:	68 9b 7a 02 c0       	push   0xc0027a9b
c00171ca:	50                   	push   eax
c00171cb:	e8 c4 f7 ff ff       	call   c0016994 <findDataTable(unsigned char*, char*)>
c00171d0:	83 c4 10             	add    esp,0x10
c00171d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171d7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00171dc:	74 13                	je     c00171f1 <ACPI::open(int, int, void*)+0x197>
c00171de:	83 ec 08             	sub    esp,0x8
c00171e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00171e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171e9:	e8 24 fe ff ff       	call   c0017012 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00171ee:	83 c4 10             	add    esp,0x10
c00171f1:	b8 00 00 00 00       	mov    eax,0x0
c00171f6:	83 c4 18             	add    esp,0x18
c00171f9:	5b                   	pop    ebx
c00171fa:	c3                   	ret    
c00171fb:	90                   	nop

c00171fc <ACPI::sleep()>:
c00171fc:	83 ec 0c             	sub    esp,0xc
c00171ff:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c0017204:	85 c0                	test   eax,eax
c0017206:	74 07                	je     c001720f <ACPI::sleep()+0x13>
c0017208:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c001720d:	ff d0                	call   eax
c001720f:	90                   	nop
c0017210:	83 c4 0c             	add    esp,0xc
c0017213:	c3                   	ret    

c0017214 <CPU::close(int, int, void*)>:
c0017214:	31 c0                	xor    eax,eax
c0017216:	c3                   	ret    

c0017217 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0017217:	55                   	push   ebp
c0017218:	57                   	push   edi
c0017219:	56                   	push   esi
c001721a:	53                   	push   ebx
c001721b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001721f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017223:	89 ce                	mov    esi,ecx
c0017225:	89 d5                	mov    ebp,edx
c0017227:	80 f9 04             	cmp    cl,0x4
c001722a:	75 28                	jne    c0017254 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c001722c:	8d 42 f9             	lea    eax,[edx-0x7]
c001722f:	3c 03                	cmp    al,0x3
c0017231:	0f 86 63 01 00 00    	jbe    c001739a <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0017237:	80 fa 03             	cmp    dl,0x3
c001723a:	0f 84 5a 01 00 00    	je     c001739a <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0017240:	8d 7a f2             	lea    edi,[edx-0xe]
c0017243:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c0017248:	89 fb                	mov    ebx,edi
c001724a:	80 fb 01             	cmp    bl,0x1
c001724d:	77 4e                	ja     c001729d <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c001724f:	e9 52 01 00 00       	jmp    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017254:	80 f9 05             	cmp    cl,0x5
c0017257:	75 4d                	jne    c00172a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0017259:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c001725e:	80 fa 03             	cmp    dl,0x3
c0017261:	0f 86 3f 01 00 00    	jbe    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017267:	8d 7a fa             	lea    edi,[edx-0x6]
c001726a:	b8 d0 98 02 c0       	mov    eax,0xc00298d0
c001726f:	89 fb                	mov    ebx,edi
c0017271:	80 fb 01             	cmp    bl,0x1
c0017274:	0f 86 2c 01 00 00    	jbe    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001727a:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c001727f:	80 fa 08             	cmp    dl,0x8
c0017282:	0f 84 1e 01 00 00    	je     c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017288:	89 d7                	mov    edi,edx
c001728a:	b8 f0 98 02 c0       	mov    eax,0xc00298f0
c001728f:	83 e7 fb             	and    edi,0xfffffffb
c0017292:	89 fb                	mov    ebx,edi
c0017294:	80 fb 09             	cmp    bl,0x9
c0017297:	0f 84 09 01 00 00    	je     c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001729d:	31 c0                	xor    eax,eax
c001729f:	89 eb                	mov    ebx,ebp
c00172a1:	0f b6 fb             	movzx  edi,bl
c00172a4:	eb 30                	jmp    c00172d6 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00172a6:	31 c0                	xor    eax,eax
c00172a8:	80 f9 06             	cmp    cl,0x6
c00172ab:	75 f2                	jne    c001729f <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00172ad:	80 fa 0a             	cmp    dl,0xa
c00172b0:	77 ed                	ja     c001729f <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00172b2:	bf de 05 00 00       	mov    edi,0x5de
c00172b7:	0f a3 d7             	bt     edi,edx
c00172ba:	73 e3                	jae    c001729f <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00172bc:	b8 00 99 02 c0       	mov    eax,0xc0029900
c00172c1:	e9 e0 00 00 00       	jmp    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172c6:	39 c7                	cmp    edi,eax
c00172c8:	0f 84 d3 00 00 00    	je     c00173a1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00172ce:	40                   	inc    eax
c00172cf:	3d d0 00 00 00       	cmp    eax,0xd0
c00172d4:	74 09                	je     c00172df <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c00172d6:	89 f3                	mov    ebx,esi
c00172d8:	80 fb 0f             	cmp    bl,0xf
c00172db:	75 f1                	jne    c00172ce <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c00172dd:	eb e7                	jmp    c00172c6 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c00172df:	80 f9 10             	cmp    cl,0x10
c00172e2:	75 14                	jne    c00172f8 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c00172e4:	8d 42 fc             	lea    eax,[edx-0x4]
c00172e7:	83 e0 fb             	and    eax,0xfffffffb
c00172ea:	3c 02                	cmp    al,0x2
c00172ec:	76 34                	jbe    c0017322 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c00172ee:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c00172f3:	80 fa 02             	cmp    dl,0x2
c00172f6:	eb 24                	jmp    c001731c <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c00172f8:	80 f9 11             	cmp    cl,0x11
c00172fb:	75 13                	jne    c0017310 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c00172fd:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c0017302:	80 fa 03             	cmp    dl,0x3
c0017305:	0f 85 9b 00 00 00    	jne    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001730b:	e9 91 00 00 00       	jmp    c00173a1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0017310:	80 f9 12             	cmp    cl,0x12
c0017313:	75 14                	jne    c0017329 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0017315:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c001731a:	fe ca                	dec    dl
c001731c:	0f 85 84 00 00 00    	jne    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017322:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0017327:	eb 7d                	jmp    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017329:	80 f9 14             	cmp    cl,0x14
c001732c:	75 12                	jne    c0017340 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c001732e:	4a                   	dec    edx
c001732f:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c0017334:	80 fa 01             	cmp    dl,0x1
c0017337:	77 6d                	ja     c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017339:	b8 30 99 02 c0       	mov    eax,0xc0029930
c001733e:	eb 66                	jmp    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017340:	80 f9 15             	cmp    cl,0x15
c0017343:	75 31                	jne    c0017376 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0017345:	b8 40 99 02 c0       	mov    eax,0xc0029940
c001734a:	80 fa 01             	cmp    dl,0x1
c001734d:	74 57                	je     c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001734f:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c0017354:	80 fa 13             	cmp    dl,0x13
c0017357:	76 0c                	jbe    c0017365 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0017359:	80 fa 30             	cmp    dl,0x30
c001735c:	75 48                	jne    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001735e:	b8 60 99 02 c0       	mov    eax,0xc0029960
c0017363:	eb 41                	jmp    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017365:	b9 04 00 09 00       	mov    ecx,0x90004
c001736a:	0f a3 d1             	bt     ecx,edx
c001736d:	73 37                	jae    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001736f:	b8 50 99 02 c0       	mov    eax,0xc0029950
c0017374:	eb 30                	jmp    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017376:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c001737b:	80 f9 16             	cmp    cl,0x16
c001737e:	75 26                	jne    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017380:	b8 70 99 02 c0       	mov    eax,0xc0029970
c0017385:	84 d2                	test   dl,dl
c0017387:	74 1d                	je     c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017389:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c001738e:	80 fa 30             	cmp    dl,0x30
c0017391:	75 13                	jne    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017393:	b8 80 99 02 c0       	mov    eax,0xc0029980
c0017398:	eb 0c                	jmp    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001739a:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c001739f:	eb 05                	jmp    c00173a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173a1:	b8 10 99 02 c0       	mov    eax,0xc0029910
c00173a6:	5b                   	pop    ebx
c00173a7:	5e                   	pop    esi
c00173a8:	5f                   	pop    edi
c00173a9:	5d                   	pop    ebp
c00173aa:	c3                   	ret    

c00173ab <lookupIntelCPUName(unsigned char, unsigned char)>:
c00173ab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00173af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173b3:	80 f9 04             	cmp    cl,0x4
c00173b6:	75 6b                	jne    c0017423 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c00173b8:	b8 00 97 02 c0       	mov    eax,0xc0029700
c00173bd:	80 fa 01             	cmp    dl,0x1
c00173c0:	0f 86 92 02 00 00    	jbe    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00173c6:	b8 10 97 02 c0       	mov    eax,0xc0029710
c00173cb:	80 fa 02             	cmp    dl,0x2
c00173ce:	0f 84 84 02 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00173d4:	b8 20 97 02 c0       	mov    eax,0xc0029720
c00173d9:	80 fa 03             	cmp    dl,0x3
c00173dc:	0f 84 76 02 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00173e2:	b8 30 97 02 c0       	mov    eax,0xc0029730
c00173e7:	80 fa 04             	cmp    dl,0x4
c00173ea:	0f 84 68 02 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00173f0:	b8 40 97 02 c0       	mov    eax,0xc0029740
c00173f5:	80 fa 05             	cmp    dl,0x5
c00173f8:	0f 84 5a 02 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00173fe:	b8 20 97 02 c0       	mov    eax,0xc0029720
c0017403:	80 fa 07             	cmp    dl,0x7
c0017406:	0f 84 4c 02 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001740c:	83 ea 08             	sub    edx,0x8
c001740f:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c0017414:	80 fa 01             	cmp    dl,0x1
c0017417:	0f 87 3b 02 00 00    	ja     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001741d:	b8 50 97 02 c0       	mov    eax,0xc0029750
c0017422:	c3                   	ret    
c0017423:	80 f9 05             	cmp    cl,0x5
c0017426:	75 45                	jne    c001746d <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0017428:	8d 4a ff             	lea    ecx,[edx-0x1]
c001742b:	b8 60 97 02 c0       	mov    eax,0xc0029760
c0017430:	80 f9 02             	cmp    cl,0x2
c0017433:	0f 86 1f 02 00 00    	jbe    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017439:	80 fa 04             	cmp    dl,0x4
c001743c:	0f 84 f3 01 00 00    	je     c0017635 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0017442:	80 fa 07             	cmp    dl,0x7
c0017445:	0f 84 0d 02 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001744b:	b8 70 97 02 c0       	mov    eax,0xc0029770
c0017450:	80 fa 08             	cmp    dl,0x8
c0017453:	0f 84 ff 01 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017459:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c001745e:	80 fa 09             	cmp    dl,0x9
c0017461:	0f 85 f1 01 00 00    	jne    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017467:	b8 80 97 02 c0       	mov    eax,0xc0029780
c001746c:	c3                   	ret    
c001746d:	80 f9 06             	cmp    cl,0x6
c0017470:	0f 85 85 01 00 00    	jne    c00175fb <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0017476:	b8 90 97 02 c0       	mov    eax,0xc0029790
c001747b:	80 fa 01             	cmp    dl,0x1
c001747e:	0f 84 d4 01 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017484:	8d 42 fb             	lea    eax,[edx-0x5]
c0017487:	3c 01                	cmp    al,0x1
c0017489:	0f 86 ac 01 00 00    	jbe    c001763b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c001748f:	80 fa 03             	cmp    dl,0x3
c0017492:	0f 84 a3 01 00 00    	je     c001763b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0017498:	8d 4a f9             	lea    ecx,[edx-0x7]
c001749b:	b8 b0 97 02 c0       	mov    eax,0xc00297b0
c00174a0:	80 f9 01             	cmp    cl,0x1
c00174a3:	0f 86 af 01 00 00    	jbe    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174a9:	80 fa 09             	cmp    dl,0x9
c00174ac:	0f 84 8f 01 00 00    	je     c0017641 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c00174b2:	8d 4a f6             	lea    ecx,[edx-0xa]
c00174b5:	80 f9 01             	cmp    cl,0x1
c00174b8:	0f 86 9a 01 00 00    	jbe    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174be:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c00174c3:	80 fa 0d             	cmp    dl,0xd
c00174c6:	0f 84 8c 01 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174cc:	b8 d0 97 02 c0       	mov    eax,0xc00297d0
c00174d1:	80 fa 0e             	cmp    dl,0xe
c00174d4:	0f 84 7e 01 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174da:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c00174df:	80 fa 0f             	cmp    dl,0xf
c00174e2:	0f 84 70 01 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174e8:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c00174ed:	80 fa 15             	cmp    dl,0x15
c00174f0:	0f 84 62 01 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174f6:	8d 4a ea             	lea    ecx,[edx-0x16]
c00174f9:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c00174fe:	80 f9 01             	cmp    cl,0x1
c0017501:	0f 86 51 01 00 00    	jbe    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017507:	80 fa 1a             	cmp    dl,0x1a
c001750a:	0f 84 37 01 00 00    	je     c0017647 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0017510:	80 fa 1c             	cmp    dl,0x1c
c0017513:	0f 84 34 01 00 00    	je     c001764d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0017519:	80 fa 1d             	cmp    dl,0x1d
c001751c:	0f 84 36 01 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017522:	b8 10 98 02 c0       	mov    eax,0xc0029810
c0017527:	80 fa 25             	cmp    dl,0x25
c001752a:	0f 84 28 01 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017530:	8d 4a da             	lea    ecx,[edx-0x26]
c0017533:	b8 00 98 02 c0       	mov    eax,0xc0029800
c0017538:	80 f9 01             	cmp    cl,0x1
c001753b:	0f 86 17 01 00 00    	jbe    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017541:	b8 20 98 02 c0       	mov    eax,0xc0029820
c0017546:	80 fa 2a             	cmp    dl,0x2a
c0017549:	0f 84 09 01 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001754f:	b8 10 98 02 c0       	mov    eax,0xc0029810
c0017554:	80 fa 2c             	cmp    dl,0x2c
c0017557:	0f 84 fb 00 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001755d:	b8 20 98 02 c0       	mov    eax,0xc0029820
c0017562:	80 fa 2d             	cmp    dl,0x2d
c0017565:	0f 84 ed 00 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001756b:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c0017570:	80 fa 2e             	cmp    dl,0x2e
c0017573:	0f 84 df 00 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017579:	b8 10 98 02 c0       	mov    eax,0xc0029810
c001757e:	80 fa 2f             	cmp    dl,0x2f
c0017581:	0f 84 d1 00 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017587:	8d 4a cb             	lea    ecx,[edx-0x35]
c001758a:	b8 00 98 02 c0       	mov    eax,0xc0029800
c001758f:	80 f9 01             	cmp    cl,0x1
c0017592:	0f 86 c0 00 00 00    	jbe    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017598:	b8 30 98 02 c0       	mov    eax,0xc0029830
c001759d:	80 fa 37             	cmp    dl,0x37
c00175a0:	0f 84 b2 00 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175a6:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00175ab:	80 fa 3a             	cmp    dl,0x3a
c00175ae:	0f 84 a4 00 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175b4:	b8 50 98 02 c0       	mov    eax,0xc0029850
c00175b9:	80 fa 3c             	cmp    dl,0x3c
c00175bc:	0f 84 96 00 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175c2:	b8 60 98 02 c0       	mov    eax,0xc0029860
c00175c7:	80 fa 3d             	cmp    dl,0x3d
c00175ca:	0f 84 88 00 00 00    	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175d0:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00175d5:	80 fa 3e             	cmp    dl,0x3e
c00175d8:	74 7e                	je     c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175da:	8d 42 bb             	lea    eax,[edx-0x45]
c00175dd:	3c 01                	cmp    al,0x1
c00175df:	76 72                	jbe    c0017653 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c00175e1:	80 fa 3f             	cmp    dl,0x3f
c00175e4:	74 6d                	je     c0017653 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c00175e6:	80 fa 4a             	cmp    dl,0x4a
c00175e9:	74 0a                	je     c00175f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c00175eb:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c00175f0:	80 fa 4d             	cmp    dl,0x4d
c00175f3:	75 63                	jne    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175f5:	b8 30 98 02 c0       	mov    eax,0xc0029830
c00175fa:	c3                   	ret    
c00175fb:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c0017600:	80 f9 0b             	cmp    cl,0xb
c0017603:	75 0a                	jne    c001760f <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0017605:	fe ca                	dec    dl
c0017607:	75 4f                	jne    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017609:	b8 70 98 02 c0       	mov    eax,0xc0029870
c001760e:	c3                   	ret    
c001760f:	80 f9 0f             	cmp    cl,0xf
c0017612:	75 44                	jne    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017614:	b8 80 98 02 c0       	mov    eax,0xc0029880
c0017619:	80 fa 02             	cmp    dl,0x2
c001761c:	76 3a                	jbe    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001761e:	8d 42 fd             	lea    eax,[edx-0x3]
c0017621:	3c 01                	cmp    al,0x1
c0017623:	76 0a                	jbe    c001762f <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0017625:	b8 a6 7e 02 c0       	mov    eax,0xc0027ea6
c001762a:	80 fa 06             	cmp    dl,0x6
c001762d:	75 29                	jne    c0017658 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001762f:	b8 90 98 02 c0       	mov    eax,0xc0029890
c0017634:	c3                   	ret    
c0017635:	b8 70 97 02 c0       	mov    eax,0xc0029770
c001763a:	c3                   	ret    
c001763b:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c0017640:	c3                   	ret    
c0017641:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c0017646:	c3                   	ret    
c0017647:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c001764c:	c3                   	ret    
c001764d:	b8 00 98 02 c0       	mov    eax,0xc0029800
c0017652:	c3                   	ret    
c0017653:	b8 50 98 02 c0       	mov    eax,0xc0029850
c0017658:	c3                   	ret    

c0017659 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0017659:	60                   	pusha  
c001765a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001765e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017662:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017666:	9c                   	pushf  
c0017667:	fa                   	cli    
c0017668:	0f 09                	wbinvd 
c001766a:	0f 30                	wrmsr  
c001766c:	9d                   	popf   
c001766d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017671:	89 02                	mov    DWORD PTR [edx],eax
c0017673:	61                   	popa   
c0017674:	c3                   	ret    

c0017675 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0017675:	60                   	pusha  
c0017676:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001767a:	9c                   	pushf  
c001767b:	fa                   	cli    
c001767c:	0f 09                	wbinvd 
c001767e:	31 c0                	xor    eax,eax
c0017680:	31 d2                	xor    edx,edx
c0017682:	0f 32                	rdmsr  
c0017684:	9d                   	popf   
c0017685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017689:	89 02                	mov    DWORD PTR [edx],eax
c001768b:	61                   	popa   
c001768c:	c3                   	ret    

c001768d <AMD_K6_writeback(int, int, int)>:
c001768d:	56                   	push   esi
c001768e:	53                   	push   ebx
c001768f:	83 ec 10             	sub    esp,0x10
c0017692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017696:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001769b:	75 5d                	jne    c00176fa <AMD_K6_writeback(int, int, int)+0x6d>
c001769d:	83 f8 08             	cmp    eax,0x8
c00176a0:	75 09                	jne    c00176ab <AMD_K6_writeback(int, int, int)+0x1e>
c00176a2:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00176a7:	7e 13                	jle    c00176bc <AMD_K6_writeback(int, int, int)+0x2f>
c00176a9:	eb 30                	jmp    c00176db <AMD_K6_writeback(int, int, int)+0x4e>
c00176ab:	83 f8 06             	cmp    eax,0x6
c00176ae:	7c 4a                	jl     c00176fa <AMD_K6_writeback(int, int, int)+0x6d>
c00176b0:	83 f8 07             	cmp    eax,0x7
c00176b3:	7e 07                	jle    c00176bc <AMD_K6_writeback(int, int, int)+0x2f>
c00176b5:	83 f8 09             	cmp    eax,0x9
c00176b8:	74 21                	je     c00176db <AMD_K6_writeback(int, int, int)+0x4e>
c00176ba:	eb 3e                	jmp    c00176fa <AMD_K6_writeback(int, int, int)+0x6d>
c00176bc:	89 e6                	mov    esi,esp
c00176be:	8b 1d 24 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a524
c00176c4:	56                   	push   esi
c00176c5:	c1 eb 15             	shr    ebx,0x15
c00176c8:	68 82 00 00 c0       	push   0xc0000082
c00176cd:	83 e3 7e             	and    ebx,0x7e
c00176d0:	e8 a0 ff ff ff       	call   c0017675 <AMD_K6_read_msr(unsigned int, REGS*)>
c00176d5:	56                   	push   esi
c00176d6:	6a 00                	push   0x0
c00176d8:	53                   	push   ebx
c00176d9:	eb 12                	jmp    c00176ed <AMD_K6_writeback(int, int, int)+0x60>
c00176db:	89 e3                	mov    ebx,esp
c00176dd:	53                   	push   ebx
c00176de:	68 82 00 00 c0       	push   0xc0000082
c00176e3:	e8 8d ff ff ff       	call   c0017675 <AMD_K6_read_msr(unsigned int, REGS*)>
c00176e8:	53                   	push   ebx
c00176e9:	6a 00                	push   0x0
c00176eb:	6a 00                	push   0x0
c00176ed:	68 82 00 00 c0       	push   0xc0000082
c00176f2:	e8 62 ff ff ff       	call   c0017659 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00176f7:	83 c4 18             	add    esp,0x18
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	5b                   	pop    ebx
c00176fe:	5e                   	pop    esi
c00176ff:	c3                   	ret    

c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017700:	55                   	push   ebp
c0017701:	57                   	push   edi
c0017702:	56                   	push   esi
c0017703:	53                   	push   ebx
c0017704:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017708:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001770c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017710:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017714:	39 05 a0 99 02 c0    	cmp    DWORD PTR ds:0xc00299a0,eax
c001771a:	75 23                	jne    c001773f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001771c:	a1 2c af 02 c0       	mov    eax,ds:0xc002af2c
c0017721:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017725:	89 06                	mov    DWORD PTR [esi],eax
c0017727:	a1 28 af 02 c0       	mov    eax,ds:0xc002af28
c001772c:	89 07                	mov    DWORD PTR [edi],eax
c001772e:	a1 24 af 02 c0       	mov    eax,ds:0xc002af24
c0017733:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017736:	a1 20 af 02 c0       	mov    eax,ds:0xc002af20
c001773b:	89 02                	mov    DWORD PTR [edx],eax
c001773d:	eb 3f                	jmp    c001777e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001773f:	31 c9                	xor    ecx,ecx
c0017741:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017745:	0f a2                	cpuid  
c0017747:	89 06                	mov    DWORD PTR [esi],eax
c0017749:	89 1f                	mov    DWORD PTR [edi],ebx
c001774b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001774f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017752:	89 10                	mov    DWORD PTR [eax],edx
c0017754:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017758:	a3 a0 99 02 c0       	mov    ds:0xc00299a0,eax
c001775d:	8b 06                	mov    eax,DWORD PTR [esi]
c001775f:	a3 2c af 02 c0       	mov    ds:0xc002af2c,eax
c0017764:	8b 07                	mov    eax,DWORD PTR [edi]
c0017766:	a3 28 af 02 c0       	mov    ds:0xc002af28,eax
c001776b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001776e:	a3 24 af 02 c0       	mov    ds:0xc002af24,eax
c0017773:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017777:	8b 00                	mov    eax,DWORD PTR [eax]
c0017779:	a3 20 af 02 c0       	mov    ds:0xc002af20,eax
c001777e:	5b                   	pop    ebx
c001777f:	5e                   	pop    esi
c0017780:	5f                   	pop    edi
c0017781:	5d                   	pop    ebp
c0017782:	c3                   	ret    

c0017783 <cpuidCheckEDX(unsigned int)>:
c0017783:	83 ec 10             	sub    esp,0x10
c0017786:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001778a:	50                   	push   eax
c001778b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001778f:	50                   	push   eax
c0017790:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017794:	50                   	push   eax
c0017795:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017799:	50                   	push   eax
c001779a:	6a 01                	push   0x1
c001779c:	e8 5f ff ff ff       	call   c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177a5:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00177a9:	0f 95 c0             	setne  al
c00177ac:	83 c4 24             	add    esp,0x24
c00177af:	c3                   	ret    

c00177b0 <cpuidCheckECX(unsigned int)>:
c00177b0:	83 ec 10             	sub    esp,0x10
c00177b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177b7:	50                   	push   eax
c00177b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177bc:	50                   	push   eax
c00177bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177c1:	50                   	push   eax
c00177c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177c6:	50                   	push   eax
c00177c7:	6a 01                	push   0x1
c00177c9:	e8 32 ff ff ff       	call   c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177d2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00177d6:	0f 95 c0             	setne  al
c00177d9:	83 c4 24             	add    esp,0x24
c00177dc:	c3                   	ret    

c00177dd <cpuidCheckExtendedEBX(unsigned int)>:
c00177dd:	83 ec 10             	sub    esp,0x10
c00177e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e4:	50                   	push   eax
c00177e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e9:	50                   	push   eax
c00177ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ee:	50                   	push   eax
c00177ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177f3:	50                   	push   eax
c00177f4:	6a 07                	push   0x7
c00177f6:	e8 05 ff ff ff       	call   c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177ff:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017803:	0f 95 c0             	setne  al
c0017806:	83 c4 24             	add    esp,0x24
c0017809:	c3                   	ret    

c001780a <cpuidCheckExtendedECX(unsigned int)>:
c001780a:	83 ec 10             	sub    esp,0x10
c001780d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017811:	50                   	push   eax
c0017812:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017816:	50                   	push   eax
c0017817:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001781b:	50                   	push   eax
c001781c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017820:	50                   	push   eax
c0017821:	6a 07                	push   0x7
c0017823:	e8 d8 fe ff ff       	call   c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017828:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001782c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017830:	0f 95 c0             	setne  al
c0017833:	83 c4 24             	add    esp,0x24
c0017836:	c3                   	ret    

c0017837 <getCPUNumber()>:
c0017837:	31 c0                	xor    eax,eax
c0017839:	c3                   	ret    

c001783a <thisCPU()>:
c001783a:	e8 f8 ff ff ff       	call   c0017837 <getCPUNumber()>
c001783f:	8b 15 e8 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a4e8
c0017845:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c001784c:	c3                   	ret    
c001784d:	90                   	nop

c001784e <CPU::CPU()>:
c001784e:	83 ec 0c             	sub    esp,0xc
c0017851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017855:	83 ec 08             	sub    esp,0x8
c0017858:	68 a6 7e 02 c0       	push   0xc0027ea6
c001785d:	50                   	push   eax
c001785e:	e8 e9 bf ff ff       	call   c001384c <Device::Device(char const*)>
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	ba 80 7f 02 c0       	mov    edx,0xc0027f80
c001786b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001786f:	89 10                	mov    DWORD PTR [eax],edx
c0017871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017875:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001787f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017883:	05 78 01 00 00       	add    eax,0x178
c0017888:	83 ec 0c             	sub    esp,0xc
c001788b:	50                   	push   eax
c001788c:	e8 df 70 ff ff       	call   c000e970 <GDT::GDT()>
c0017891:	83 c4 10             	add    esp,0x10
c0017894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017898:	05 7c 09 00 00       	add    eax,0x97c
c001789d:	83 ec 0c             	sub    esp,0xc
c00178a0:	50                   	push   eax
c00178a1:	e8 2a 73 ff ff       	call   c000ebd0 <IDT::IDT()>
c00178a6:	83 c4 10             	add    esp,0x10
c00178a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ad:	05 7c 11 00 00       	add    eax,0x117c
c00178b2:	83 ec 0c             	sub    esp,0xc
c00178b5:	50                   	push   eax
c00178b6:	e8 59 93 ff ff       	call   c0010c14 <TSS::TSS()>
c00178bb:	83 c4 10             	add    esp,0x10
c00178be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00178c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178cd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00178d7:	90                   	nop
c00178d8:	83 c4 0c             	add    esp,0xc
c00178db:	c3                   	ret    

c00178dc <CPU::displayFeatures()>:
c00178dc:	53                   	push   ebx
c00178dd:	83 ec 10             	sub    esp,0x10
c00178e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00178e4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00178ea:	68 b4 7b 02 c0       	push   0xc0027bb4
c00178ef:	e8 5d a9 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00178f4:	59                   	pop    ecx
c00178f5:	58                   	pop    eax
c00178f6:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00178fc:	50                   	push   eax
c00178fd:	68 c5 7b 02 c0       	push   0xc0027bc5
c0017902:	e8 4a a9 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017907:	58                   	pop    eax
c0017908:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001790e:	5a                   	pop    edx
c001790f:	c1 e8 0e             	shr    eax,0xe
c0017912:	0f b6 c0             	movzx  eax,al
c0017915:	50                   	push   eax
c0017916:	68 d6 7b 02 c0       	push   0xc0027bd6
c001791b:	e8 31 a9 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017920:	59                   	pop    ecx
c0017921:	58                   	pop    eax
c0017922:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017928:	66 c1 e8 06          	shr    ax,0x6
c001792c:	0f b6 c0             	movzx  eax,al
c001792f:	50                   	push   eax
c0017930:	68 e7 7b 02 c0       	push   0xc0027be7
c0017935:	e8 17 a9 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001793a:	c7 04 24 1a 81 02 c0 	mov    DWORD PTR [esp],0xc002811a
c0017941:	e8 0b a9 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017946:	83 c4 10             	add    esp,0x10
c0017949:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c001794e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0017955:	74 05                	je     c001795c <CPU::displayFeatures()+0x80>
c0017957:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c001795c:	52                   	push   edx
c001795d:	52                   	push   edx
c001795e:	50                   	push   eax
c001795f:	68 f8 7b 02 c0       	push   0xc0027bf8
c0017964:	e8 e8 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017969:	83 c4 10             	add    esp,0x10
c001796c:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017971:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0017978:	78 05                	js     c001797f <CPU::displayFeatures()+0xa3>
c001797a:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c001797f:	51                   	push   ecx
c0017980:	51                   	push   ecx
c0017981:	50                   	push   eax
c0017982:	68 0f 7c 02 c0       	push   0xc0027c0f
c0017987:	e8 c5 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001798c:	83 c4 10             	add    esp,0x10
c001798f:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017994:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001799b:	75 05                	jne    c00179a2 <CPU::displayFeatures()+0xc6>
c001799d:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c00179a2:	52                   	push   edx
c00179a3:	52                   	push   edx
c00179a4:	50                   	push   eax
c00179a5:	68 26 7c 02 c0       	push   0xc0027c26
c00179aa:	e8 a2 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00179af:	83 c4 10             	add    esp,0x10
c00179b2:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c00179b7:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00179be:	75 05                	jne    c00179c5 <CPU::displayFeatures()+0xe9>
c00179c0:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c00179c5:	51                   	push   ecx
c00179c6:	51                   	push   ecx
c00179c7:	50                   	push   eax
c00179c8:	68 3d 7c 02 c0       	push   0xc0027c3d
c00179cd:	e8 7f a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00179d2:	83 c4 10             	add    esp,0x10
c00179d5:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c00179da:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00179e1:	75 05                	jne    c00179e8 <CPU::displayFeatures()+0x10c>
c00179e3:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c00179e8:	52                   	push   edx
c00179e9:	52                   	push   edx
c00179ea:	50                   	push   eax
c00179eb:	68 54 7c 02 c0       	push   0xc0027c54
c00179f0:	e8 5c a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00179f5:	83 c4 10             	add    esp,0x10
c00179f8:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c00179fd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017a04:	75 05                	jne    c0017a0b <CPU::displayFeatures()+0x12f>
c0017a06:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c0017a0b:	51                   	push   ecx
c0017a0c:	51                   	push   ecx
c0017a0d:	50                   	push   eax
c0017a0e:	68 6b 7c 02 c0       	push   0xc0027c6b
c0017a13:	e8 39 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a18:	83 c4 10             	add    esp,0x10
c0017a1b:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017a20:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017a27:	75 05                	jne    c0017a2e <CPU::displayFeatures()+0x152>
c0017a29:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c0017a2e:	52                   	push   edx
c0017a2f:	52                   	push   edx
c0017a30:	50                   	push   eax
c0017a31:	68 82 7c 02 c0       	push   0xc0027c82
c0017a36:	e8 16 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a3b:	83 c4 10             	add    esp,0x10
c0017a3e:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017a43:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017a4a:	75 05                	jne    c0017a51 <CPU::displayFeatures()+0x175>
c0017a4c:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c0017a51:	51                   	push   ecx
c0017a52:	51                   	push   ecx
c0017a53:	50                   	push   eax
c0017a54:	68 99 7c 02 c0       	push   0xc0027c99
c0017a59:	e8 f3 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a5e:	83 c4 10             	add    esp,0x10
c0017a61:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017a66:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017a6d:	75 05                	jne    c0017a74 <CPU::displayFeatures()+0x198>
c0017a6f:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c0017a74:	52                   	push   edx
c0017a75:	52                   	push   edx
c0017a76:	50                   	push   eax
c0017a77:	68 b0 7c 02 c0       	push   0xc0027cb0
c0017a7c:	e8 d0 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a81:	83 c4 10             	add    esp,0x10
c0017a84:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017a89:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017a90:	75 05                	jne    c0017a97 <CPU::displayFeatures()+0x1bb>
c0017a92:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c0017a97:	51                   	push   ecx
c0017a98:	51                   	push   ecx
c0017a99:	50                   	push   eax
c0017a9a:	68 c7 7c 02 c0       	push   0xc0027cc7
c0017a9f:	e8 ad a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017aa4:	83 c4 10             	add    esp,0x10
c0017aa7:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017aac:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017ab3:	75 05                	jne    c0017aba <CPU::displayFeatures()+0x1de>
c0017ab5:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c0017aba:	52                   	push   edx
c0017abb:	52                   	push   edx
c0017abc:	50                   	push   eax
c0017abd:	68 de 7c 02 c0       	push   0xc0027cde
c0017ac2:	e8 8a a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017ac7:	83 c4 10             	add    esp,0x10
c0017aca:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017acf:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017ad6:	75 05                	jne    c0017add <CPU::displayFeatures()+0x201>
c0017ad8:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c0017add:	51                   	push   ecx
c0017ade:	51                   	push   ecx
c0017adf:	50                   	push   eax
c0017ae0:	68 f5 7c 02 c0       	push   0xc0027cf5
c0017ae5:	e8 67 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017aea:	83 c4 10             	add    esp,0x10
c0017aed:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017af2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017af9:	75 05                	jne    c0017b00 <CPU::displayFeatures()+0x224>
c0017afb:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c0017b00:	52                   	push   edx
c0017b01:	52                   	push   edx
c0017b02:	50                   	push   eax
c0017b03:	68 0c 7d 02 c0       	push   0xc0027d0c
c0017b08:	e8 44 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b0d:	83 c4 10             	add    esp,0x10
c0017b10:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017b15:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017b1c:	78 05                	js     c0017b23 <CPU::displayFeatures()+0x247>
c0017b1e:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c0017b23:	51                   	push   ecx
c0017b24:	51                   	push   ecx
c0017b25:	50                   	push   eax
c0017b26:	68 23 7d 02 c0       	push   0xc0027d23
c0017b2b:	e8 21 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b30:	83 c4 10             	add    esp,0x10
c0017b33:	b8 d8 68 02 c0       	mov    eax,0xc00268d8
c0017b38:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017b3f:	75 05                	jne    c0017b46 <CPU::displayFeatures()+0x26a>
c0017b41:	b8 dc 68 02 c0       	mov    eax,0xc00268dc
c0017b46:	52                   	push   edx
c0017b47:	52                   	push   edx
c0017b48:	50                   	push   eax
c0017b49:	68 3a 7d 02 c0       	push   0xc0027d3a
c0017b4e:	e8 fe a6 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b53:	83 c4 18             	add    esp,0x18
c0017b56:	5b                   	pop    ebx
c0017b57:	c3                   	ret    

c0017b58 <CPU::detectFeatures()>:
c0017b58:	55                   	push   ebp
c0017b59:	57                   	push   edi
c0017b5a:	56                   	push   esi
c0017b5b:	53                   	push   ebx
c0017b5c:	83 ec 50             	sub    esp,0x50
c0017b5f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017b63:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017b6d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017b74:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017b7a:	6a 0d                	push   0xd
c0017b7c:	6a 00                	push   0x0
c0017b7e:	57                   	push   edi
c0017b7f:	e8 62 8b fe ff       	call   c00006e6 <memset>
c0017b84:	83 c4 10             	add    esp,0x10
c0017b87:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0017b8c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017b93:	0f 84 20 09 00 00    	je     c00184b9 <CPU::detectFeatures()+0x961>
c0017b99:	83 ec 0c             	sub    esp,0xc
c0017b9c:	6a 10                	push   0x10
c0017b9e:	e8 e0 fb ff ff       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c0017ba3:	83 e0 01             	and    eax,0x1
c0017ba6:	8d 14 00             	lea    edx,[eax+eax*1]
c0017ba9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017baf:	83 e0 fd             	and    eax,0xfffffffd
c0017bb2:	09 d0                	or     eax,edx
c0017bb4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017bba:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017bc1:	e8 bd fb ff ff       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c0017bc6:	83 e0 01             	and    eax,0x1
c0017bc9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017bd0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017bd6:	83 e0 fb             	and    eax,0xfffffffb
c0017bd9:	09 d0                	or     eax,edx
c0017bdb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017be1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017be8:	e8 96 fb ff ff       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c0017bed:	83 e0 01             	and    eax,0x1
c0017bf0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017bf7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017bfd:	83 e0 f7             	and    eax,0xfffffff7
c0017c00:	09 d0                	or     eax,edx
c0017c02:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c08:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017c0f:	e8 6f fb ff ff       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c0017c14:	83 e0 01             	and    eax,0x1
c0017c17:	c1 e0 04             	shl    eax,0x4
c0017c1a:	88 c2                	mov    dl,al
c0017c1c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c22:	83 e0 ef             	and    eax,0xffffffef
c0017c25:	09 d0                	or     eax,edx
c0017c27:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c2d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017c34:	e8 4a fb ff ff       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c0017c39:	83 e0 01             	and    eax,0x1
c0017c3c:	c1 e0 05             	shl    eax,0x5
c0017c3f:	88 c2                	mov    dl,al
c0017c41:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c47:	83 e0 df             	and    eax,0xffffffdf
c0017c4a:	09 d0                	or     eax,edx
c0017c4c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c52:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017c59:	e8 25 fb ff ff       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c0017c5e:	83 e0 01             	and    eax,0x1
c0017c61:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c64:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017c6a:	83 e0 fd             	and    eax,0xfffffffd
c0017c6d:	09 d0                	or     eax,edx
c0017c6f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017c75:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017c7c:	e8 02 fb ff ff       	call   c0017783 <cpuidCheckEDX(unsigned int)>
c0017c81:	83 e0 01             	and    eax,0x1
c0017c84:	c1 e0 06             	shl    eax,0x6
c0017c87:	88 c2                	mov    dl,al
c0017c89:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017c8f:	83 e0 bf             	and    eax,0xffffffbf
c0017c92:	09 d0                	or     eax,edx
c0017c94:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017c9a:	58                   	pop    eax
c0017c9b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017c9f:	56                   	push   esi
c0017ca0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017ca4:	55                   	push   ebp
c0017ca5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017ca9:	50                   	push   eax
c0017caa:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017cae:	52                   	push   edx
c0017caf:	6a 00                	push   0x0
c0017cb1:	e8 4a fa ff ff       	call   c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017cb6:	83 c4 1c             	add    esp,0x1c
c0017cb9:	6a 04                	push   0x4
c0017cbb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017cbf:	50                   	push   eax
c0017cc0:	57                   	push   edi
c0017cc1:	e8 ea 89 fe ff       	call   c00006b0 <memcpy>
c0017cc6:	83 c4 0c             	add    esp,0xc
c0017cc9:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017ccf:	6a 04                	push   0x4
c0017cd1:	56                   	push   esi
c0017cd2:	50                   	push   eax
c0017cd3:	e8 d8 89 fe ff       	call   c00006b0 <memcpy>
c0017cd8:	83 c4 0c             	add    esp,0xc
c0017cdb:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017ce1:	6a 04                	push   0x4
c0017ce3:	55                   	push   ebp
c0017ce4:	50                   	push   eax
c0017ce5:	e8 c6 89 fe ff       	call   c00006b0 <memcpy>
c0017cea:	58                   	pop    eax
c0017ceb:	5a                   	pop    edx
c0017cec:	68 51 7d 02 c0       	push   0xc0027d51
c0017cf1:	57                   	push   edi
c0017cf2:	e8 df 8a fe ff       	call   c00007d6 <strcmp>
c0017cf7:	83 c4 10             	add    esp,0x10
c0017cfa:	85 c0                	test   eax,eax
c0017cfc:	75 0f                	jne    c0017d0d <CPU::detectFeatures()+0x1b5>
c0017cfe:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017d08:	e9 22 02 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017d0d:	50                   	push   eax
c0017d0e:	50                   	push   eax
c0017d0f:	68 5e 7d 02 c0       	push   0xc0027d5e
c0017d14:	57                   	push   edi
c0017d15:	e8 bc 8a fe ff       	call   c00007d6 <strcmp>
c0017d1a:	83 c4 10             	add    esp,0x10
c0017d1d:	85 c0                	test   eax,eax
c0017d1f:	74 dd                	je     c0017cfe <CPU::detectFeatures()+0x1a6>
c0017d21:	51                   	push   ecx
c0017d22:	51                   	push   ecx
c0017d23:	68 6b 7d 02 c0       	push   0xc0027d6b
c0017d28:	57                   	push   edi
c0017d29:	e8 a8 8a fe ff       	call   c00007d6 <strcmp>
c0017d2e:	83 c4 10             	add    esp,0x10
c0017d31:	85 c0                	test   eax,eax
c0017d33:	74 2a                	je     c0017d5f <CPU::detectFeatures()+0x207>
c0017d35:	52                   	push   edx
c0017d36:	52                   	push   edx
c0017d37:	68 78 7d 02 c0       	push   0xc0027d78
c0017d3c:	57                   	push   edi
c0017d3d:	e8 94 8a fe ff       	call   c00007d6 <strcmp>
c0017d42:	83 c4 10             	add    esp,0x10
c0017d45:	85 c0                	test   eax,eax
c0017d47:	74 16                	je     c0017d5f <CPU::detectFeatures()+0x207>
c0017d49:	50                   	push   eax
c0017d4a:	50                   	push   eax
c0017d4b:	68 85 7d 02 c0       	push   0xc0027d85
c0017d50:	57                   	push   edi
c0017d51:	e8 80 8a fe ff       	call   c00007d6 <strcmp>
c0017d56:	83 c4 10             	add    esp,0x10
c0017d59:	85 c0                	test   eax,eax
c0017d5b:	74 48                	je     c0017da5 <CPU::detectFeatures()+0x24d>
c0017d5d:	eb 0f                	jmp    c0017d6e <CPU::detectFeatures()+0x216>
c0017d5f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017d69:	e9 c1 01 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017d6e:	50                   	push   eax
c0017d6f:	50                   	push   eax
c0017d70:	68 92 7d 02 c0       	push   0xc0027d92
c0017d75:	57                   	push   edi
c0017d76:	e8 5b 8a fe ff       	call   c00007d6 <strcmp>
c0017d7b:	83 c4 10             	add    esp,0x10
c0017d7e:	85 c0                	test   eax,eax
c0017d80:	74 23                	je     c0017da5 <CPU::detectFeatures()+0x24d>
c0017d82:	50                   	push   eax
c0017d83:	50                   	push   eax
c0017d84:	68 9f 7d 02 c0       	push   0xc0027d9f
c0017d89:	57                   	push   edi
c0017d8a:	e8 47 8a fe ff       	call   c00007d6 <strcmp>
c0017d8f:	83 c4 10             	add    esp,0x10
c0017d92:	85 c0                	test   eax,eax
c0017d94:	75 1e                	jne    c0017db4 <CPU::detectFeatures()+0x25c>
c0017d96:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017da0:	e9 8a 01 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017da5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017daf:	e9 7b 01 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017db4:	50                   	push   eax
c0017db5:	50                   	push   eax
c0017db6:	68 ac 7d 02 c0       	push   0xc0027dac
c0017dbb:	57                   	push   edi
c0017dbc:	e8 15 8a fe ff       	call   c00007d6 <strcmp>
c0017dc1:	83 c4 10             	add    esp,0x10
c0017dc4:	85 c0                	test   eax,eax
c0017dc6:	75 0f                	jne    c0017dd7 <CPU::detectFeatures()+0x27f>
c0017dc8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017dd2:	e9 58 01 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017dd7:	50                   	push   eax
c0017dd8:	50                   	push   eax
c0017dd9:	68 6b 7d 02 c0       	push   0xc0027d6b
c0017dde:	57                   	push   edi
c0017ddf:	e8 f2 89 fe ff       	call   c00007d6 <strcmp>
c0017de4:	83 c4 10             	add    esp,0x10
c0017de7:	85 c0                	test   eax,eax
c0017de9:	75 0f                	jne    c0017dfa <CPU::detectFeatures()+0x2a2>
c0017deb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017df5:	e9 35 01 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017dfa:	50                   	push   eax
c0017dfb:	50                   	push   eax
c0017dfc:	68 b9 7d 02 c0       	push   0xc0027db9
c0017e01:	57                   	push   edi
c0017e02:	e8 cf 89 fe ff       	call   c00007d6 <strcmp>
c0017e07:	83 c4 10             	add    esp,0x10
c0017e0a:	85 c0                	test   eax,eax
c0017e0c:	75 0f                	jne    c0017e1d <CPU::detectFeatures()+0x2c5>
c0017e0e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017e18:	e9 12 01 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017e1d:	51                   	push   ecx
c0017e1e:	51                   	push   ecx
c0017e1f:	68 c6 7d 02 c0       	push   0xc0027dc6
c0017e24:	57                   	push   edi
c0017e25:	e8 ac 89 fe ff       	call   c00007d6 <strcmp>
c0017e2a:	83 c4 10             	add    esp,0x10
c0017e2d:	85 c0                	test   eax,eax
c0017e2f:	75 0f                	jne    c0017e40 <CPU::detectFeatures()+0x2e8>
c0017e31:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017e3b:	e9 ef 00 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017e40:	52                   	push   edx
c0017e41:	52                   	push   edx
c0017e42:	68 d3 7d 02 c0       	push   0xc0027dd3
c0017e47:	57                   	push   edi
c0017e48:	e8 89 89 fe ff       	call   c00007d6 <strcmp>
c0017e4d:	83 c4 10             	add    esp,0x10
c0017e50:	85 c0                	test   eax,eax
c0017e52:	75 0f                	jne    c0017e63 <CPU::detectFeatures()+0x30b>
c0017e54:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017e5e:	e9 cc 00 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017e63:	50                   	push   eax
c0017e64:	50                   	push   eax
c0017e65:	68 e0 7d 02 c0       	push   0xc0027de0
c0017e6a:	57                   	push   edi
c0017e6b:	e8 66 89 fe ff       	call   c00007d6 <strcmp>
c0017e70:	83 c4 10             	add    esp,0x10
c0017e73:	85 c0                	test   eax,eax
c0017e75:	75 0f                	jne    c0017e86 <CPU::detectFeatures()+0x32e>
c0017e77:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017e81:	e9 a9 00 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017e86:	50                   	push   eax
c0017e87:	50                   	push   eax
c0017e88:	68 ed 7d 02 c0       	push   0xc0027ded
c0017e8d:	57                   	push   edi
c0017e8e:	e8 43 89 fe ff       	call   c00007d6 <strcmp>
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	85 c0                	test   eax,eax
c0017e98:	75 0f                	jne    c0017ea9 <CPU::detectFeatures()+0x351>
c0017e9a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017ea4:	e9 86 00 00 00       	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017ea9:	50                   	push   eax
c0017eaa:	50                   	push   eax
c0017eab:	68 fa 7d 02 c0       	push   0xc0027dfa
c0017eb0:	57                   	push   edi
c0017eb1:	e8 20 89 fe ff       	call   c00007d6 <strcmp>
c0017eb6:	83 c4 10             	add    esp,0x10
c0017eb9:	85 c0                	test   eax,eax
c0017ebb:	75 0c                	jne    c0017ec9 <CPU::detectFeatures()+0x371>
c0017ebd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017ec7:	eb 66                	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017ec9:	50                   	push   eax
c0017eca:	50                   	push   eax
c0017ecb:	68 07 7e 02 c0       	push   0xc0027e07
c0017ed0:	57                   	push   edi
c0017ed1:	e8 00 89 fe ff       	call   c00007d6 <strcmp>
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	85 c0                	test   eax,eax
c0017edb:	75 0c                	jne    c0017ee9 <CPU::detectFeatures()+0x391>
c0017edd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017ee7:	eb 46                	jmp    c0017f2f <CPU::detectFeatures()+0x3d7>
c0017ee9:	50                   	push   eax
c0017eea:	50                   	push   eax
c0017eeb:	68 14 7e 02 c0       	push   0xc0027e14
c0017ef0:	57                   	push   edi
c0017ef1:	e8 e0 88 fe ff       	call   c00007d6 <strcmp>
c0017ef6:	83 c4 10             	add    esp,0x10
c0017ef9:	85 c0                	test   eax,eax
c0017efb:	74 e0                	je     c0017edd <CPU::detectFeatures()+0x385>
c0017efd:	50                   	push   eax
c0017efe:	50                   	push   eax
c0017eff:	68 21 7e 02 c0       	push   0xc0027e21
c0017f04:	57                   	push   edi
c0017f05:	e8 cc 88 fe ff       	call   c00007d6 <strcmp>
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	85 c0                	test   eax,eax
c0017f0f:	74 cc                	je     c0017edd <CPU::detectFeatures()+0x385>
c0017f11:	51                   	push   ecx
c0017f12:	51                   	push   ecx
c0017f13:	68 2e 7e 02 c0       	push   0xc0027e2e
c0017f18:	57                   	push   edi
c0017f19:	e8 b8 88 fe ff       	call   c00007d6 <strcmp>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	85 c0                	test   eax,eax
c0017f23:	74 b8                	je     c0017edd <CPU::detectFeatures()+0x385>
c0017f25:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017f2f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017f34:	0f 86 be 00 00 00    	jbe    c0017ff8 <CPU::detectFeatures()+0x4a0>
c0017f3a:	83 ec 0c             	sub    esp,0xc
c0017f3d:	68 80 00 00 00       	push   0x80
c0017f42:	e8 96 f8 ff ff       	call   c00177dd <cpuidCheckExtendedEBX(unsigned int)>
c0017f47:	83 e0 01             	and    eax,0x1
c0017f4a:	c1 e0 06             	shl    eax,0x6
c0017f4d:	88 c2                	mov    dl,al
c0017f4f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017f55:	83 e0 bf             	and    eax,0xffffffbf
c0017f58:	09 d0                	or     eax,edx
c0017f5a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017f60:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017f67:	e8 71 f8 ff ff       	call   c00177dd <cpuidCheckExtendedEBX(unsigned int)>
c0017f6c:	83 e0 01             	and    eax,0x1
c0017f6f:	c1 e0 04             	shl    eax,0x4
c0017f72:	88 c2                	mov    dl,al
c0017f74:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017f7a:	83 e0 ef             	and    eax,0xffffffef
c0017f7d:	09 d0                	or     eax,edx
c0017f7f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017f85:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0017f8c:	e8 4c f8 ff ff       	call   c00177dd <cpuidCheckExtendedEBX(unsigned int)>
c0017f91:	c1 e0 07             	shl    eax,0x7
c0017f94:	88 c2                	mov    dl,al
c0017f96:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017f9c:	83 e0 7f             	and    eax,0x7f
c0017f9f:	09 d0                	or     eax,edx
c0017fa1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017fa7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017fae:	e8 57 f8 ff ff       	call   c001780a <cpuidCheckExtendedECX(unsigned int)>
c0017fb3:	83 e0 01             	and    eax,0x1
c0017fb6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017fbd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017fc3:	83 e0 f7             	and    eax,0xfffffff7
c0017fc6:	09 d0                	or     eax,edx
c0017fc8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017fce:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0017fd5:	e8 30 f8 ff ff       	call   c001780a <cpuidCheckExtendedECX(unsigned int)>
c0017fda:	83 c4 10             	add    esp,0x10
c0017fdd:	83 e0 01             	and    eax,0x1
c0017fe0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017fe7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017fed:	83 e0 fb             	and    eax,0xfffffffb
c0017ff0:	09 d0                	or     eax,edx
c0017ff2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017ff8:	83 ec 0c             	sub    esp,0xc
c0017ffb:	56                   	push   esi
c0017ffc:	55                   	push   ebp
c0017ffd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018001:	57                   	push   edi
c0018002:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018006:	50                   	push   eax
c0018007:	6a 01                	push   0x1
c0018009:	e8 f2 f6 ff ff       	call   c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001800e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018012:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018018:	88 ca                	mov    dl,cl
c001801a:	83 e0 f0             	and    eax,0xfffffff0
c001801d:	83 e2 0f             	and    edx,0xf
c0018020:	09 d0                	or     eax,edx
c0018022:	88 ca                	mov    dl,cl
c0018024:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001802a:	c0 ea 04             	shr    dl,0x4
c001802d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018031:	0f b6 c2             	movzx  eax,dl
c0018034:	83 c4 20             	add    esp,0x20
c0018037:	c1 e0 06             	shl    eax,0x6
c001803a:	89 c5                	mov    ebp,eax
c001803c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018042:	66 25 3f c0          	and    ax,0xc03f
c0018046:	09 e8                	or     eax,ebp
c0018048:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001804f:	89 c8                	mov    eax,ecx
c0018051:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018057:	c1 e8 08             	shr    eax,0x8
c001805a:	83 e2 3f             	and    edx,0x3f
c001805d:	83 e0 0f             	and    eax,0xf
c0018060:	89 c5                	mov    ebp,eax
c0018062:	c1 e5 06             	shl    ebp,0x6
c0018065:	09 d5                	or     ebp,edx
c0018067:	89 ea                	mov    edx,ebp
c0018069:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001806f:	88 c2                	mov    dl,al
c0018071:	c0 ea 02             	shr    dl,0x2
c0018074:	89 d5                	mov    ebp,edx
c0018076:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001807c:	83 e2 c0             	and    edx,0xffffffc0
c001807f:	09 d5                	or     ebp,edx
c0018081:	89 ea                	mov    edx,ebp
c0018083:	89 cd                	mov    ebp,ecx
c0018085:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001808b:	c1 ed 0c             	shr    ebp,0xc
c001808e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018094:	83 e5 03             	and    ebp,0x3
c0018097:	83 e2 cf             	and    edx,0xffffffcf
c001809a:	c1 e5 04             	shl    ebp,0x4
c001809d:	09 d5                	or     ebp,edx
c001809f:	3c 06                	cmp    al,0x6
c00180a1:	89 ea                	mov    edx,ebp
c00180a3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00180a9:	74 04                	je     c00180af <CPU::detectFeatures()+0x557>
c00180ab:	3c 0f                	cmp    al,0xf
c00180ad:	75 5c                	jne    c001810b <CPU::detectFeatures()+0x5b3>
c00180af:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00180b3:	89 cd                	mov    ebp,ecx
c00180b5:	c1 ed 10             	shr    ebp,0x10
c00180b8:	c1 e5 04             	shl    ebp,0x4
c00180bb:	09 ea                	or     edx,ebp
c00180bd:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00180c3:	0f b6 d2             	movzx  edx,dl
c00180c6:	66 81 e5 3f c0       	and    bp,0xc03f
c00180cb:	c1 e2 06             	shl    edx,0x6
c00180ce:	09 ea                	or     edx,ebp
c00180d0:	3c 0f                	cmp    al,0xf
c00180d2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00180d9:	75 30                	jne    c001810b <CPU::detectFeatures()+0x5b3>
c00180db:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00180e1:	c1 e9 14             	shr    ecx,0x14
c00180e4:	83 e0 3f             	and    eax,0x3f
c00180e7:	83 c1 0f             	add    ecx,0xf
c00180ea:	88 ca                	mov    dl,cl
c00180ec:	c0 e9 02             	shr    cl,0x2
c00180ef:	c1 e2 06             	shl    edx,0x6
c00180f2:	09 d0                	or     eax,edx
c00180f4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00180fa:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018100:	83 e0 c0             	and    eax,0xffffffc0
c0018103:	09 c1                	or     ecx,eax
c0018105:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001810b:	83 ec 0c             	sub    esp,0xc
c001810e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018115:	56                   	push   esi
c0018116:	8d 44 24 28          	lea    eax,[esp+0x28]
c001811a:	50                   	push   eax
c001811b:	57                   	push   edi
c001811c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018120:	55                   	push   ebp
c0018121:	68 00 00 00 80       	push   0x80000000
c0018126:	e8 d5 f5 ff ff       	call   c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001812b:	83 c4 20             	add    esp,0x20
c001812e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018136:	8d 44 24 18          	lea    eax,[esp+0x18]
c001813a:	76 1e                	jbe    c001815a <CPU::detectFeatures()+0x602>
c001813c:	83 ec 0c             	sub    esp,0xc
c001813f:	56                   	push   esi
c0018140:	50                   	push   eax
c0018141:	57                   	push   edi
c0018142:	55                   	push   ebp
c0018143:	68 01 00 00 80       	push   0x80000001
c0018148:	e8 b3 f5 ff ff       	call   c0017700 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001814d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018157:	83 c4 20             	add    esp,0x20
c001815a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018160:	83 f8 01             	cmp    eax,0x1
c0018163:	75 6f                	jne    c00181d4 <CPU::detectFeatures()+0x67c>
c0018165:	51                   	push   ecx
c0018166:	51                   	push   ecx
c0018167:	68 3a 7e 02 c0       	push   0xc0027e3a
c001816c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018170:	56                   	push   esi
c0018171:	e8 0f 86 fe ff       	call   c0000785 <strcpy>
c0018176:	5f                   	pop    edi
c0018177:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001817d:	5d                   	pop    ebp
c001817e:	66 c1 e8 06          	shr    ax,0x6
c0018182:	0f b6 c0             	movzx  eax,al
c0018185:	50                   	push   eax
c0018186:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001818c:	c1 e8 0e             	shr    eax,0xe
c001818f:	0f b6 c0             	movzx  eax,al
c0018192:	50                   	push   eax
c0018193:	e8 13 f2 ff ff       	call   c00173ab <lookupIntelCPUName(unsigned char, unsigned char)>
c0018198:	5a                   	pop    edx
c0018199:	59                   	pop    ecx
c001819a:	50                   	push   eax
c001819b:	56                   	push   esi
c001819c:	e8 9b 86 fe ff       	call   c000083c <strcat>
c00181a1:	5f                   	pop    edi
c00181a2:	5d                   	pop    ebp
c00181a3:	56                   	push   esi
c00181a4:	53                   	push   ebx
c00181a5:	e8 94 b6 ff ff       	call   c001383e <Device::setName(char const*)>
c00181aa:	58                   	pop    eax
c00181ab:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00181b1:	5a                   	pop    edx
c00181b2:	68 41 7e 02 c0       	push   0xc0027e41
c00181b7:	50                   	push   eax
c00181b8:	e8 19 86 fe ff       	call   c00007d6 <strcmp>
c00181bd:	83 c4 10             	add    esp,0x10
c00181c0:	85 c0                	test   eax,eax
c00181c2:	0f 85 73 03 00 00    	jne    c001853b <CPU::detectFeatures()+0x9e3>
c00181c8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00181cf:	e9 67 03 00 00       	jmp    c001853b <CPU::detectFeatures()+0x9e3>
c00181d4:	83 f8 02             	cmp    eax,0x2
c00181d7:	0f 85 b5 00 00 00    	jne    c0018292 <CPU::detectFeatures()+0x73a>
c00181dd:	57                   	push   edi
c00181de:	57                   	push   edi
c00181df:	68 53 7e 02 c0       	push   0xc0027e53
c00181e4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00181e8:	56                   	push   esi
c00181e9:	e8 97 85 fe ff       	call   c0000785 <strcpy>
c00181ee:	5d                   	pop    ebp
c00181ef:	58                   	pop    eax
c00181f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181f6:	66 c1 e8 06          	shr    ax,0x6
c00181fa:	0f b6 c0             	movzx  eax,al
c00181fd:	50                   	push   eax
c00181fe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018204:	c1 e8 0e             	shr    eax,0xe
c0018207:	0f b6 c0             	movzx  eax,al
c001820a:	50                   	push   eax
c001820b:	e8 07 f0 ff ff       	call   c0017217 <lookupAMDCPUName(unsigned char, unsigned char)>
c0018210:	5a                   	pop    edx
c0018211:	59                   	pop    ecx
c0018212:	50                   	push   eax
c0018213:	56                   	push   esi
c0018214:	e8 23 86 fe ff       	call   c000083c <strcat>
c0018219:	5f                   	pop    edi
c001821a:	5d                   	pop    ebp
c001821b:	56                   	push   esi
c001821c:	53                   	push   ebx
c001821d:	e8 1c b6 ff ff       	call   c001383e <Device::setName(char const*)>
c0018222:	58                   	pop    eax
c0018223:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018229:	5a                   	pop    edx
c001822a:	68 58 7e 02 c0       	push   0xc0027e58
c001822f:	50                   	push   eax
c0018230:	e8 a1 85 fe ff       	call   c00007d6 <strcmp>
c0018235:	83 c4 10             	add    esp,0x10
c0018238:	85 c0                	test   eax,eax
c001823a:	75 20                	jne    c001825c <CPU::detectFeatures()+0x704>
c001823c:	8b 15 e8 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a4e8
c0018242:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018248:	a8 01                	test   al,0x1
c001824a:	74 10                	je     c001825c <CPU::detectFeatures()+0x704>
c001824c:	83 e0 fe             	and    eax,0xfffffffe
c001824f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018255:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001825c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018262:	c1 e8 0e             	shr    eax,0xe
c0018265:	3c 05                	cmp    al,0x5
c0018267:	0f 85 ce 02 00 00    	jne    c001853b <CPU::detectFeatures()+0x9e3>
c001826d:	56                   	push   esi
c001826e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018274:	83 e0 0f             	and    eax,0xf
c0018277:	50                   	push   eax
c0018278:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001827e:	66 c1 e8 06          	shr    ax,0x6
c0018282:	0f b6 c0             	movzx  eax,al
c0018285:	50                   	push   eax
c0018286:	6a 05                	push   0x5
c0018288:	e8 00 f4 ff ff       	call   c001768d <AMD_K6_writeback(int, int, int)>
c001828d:	e9 1f 02 00 00       	jmp    c00184b1 <CPU::detectFeatures()+0x959>
c0018292:	8d 50 fd             	lea    edx,[eax-0x3]
c0018295:	83 fa 01             	cmp    edx,0x1
c0018298:	76 09                	jbe    c00182a3 <CPU::detectFeatures()+0x74b>
c001829a:	83 f8 06             	cmp    eax,0x6
c001829d:	0f 85 91 01 00 00    	jne    c0018434 <CPU::detectFeatures()+0x8dc>
c00182a3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182a9:	c1 ea 0e             	shr    edx,0xe
c00182ac:	80 fa 05             	cmp    dl,0x5
c00182af:	75 7b                	jne    c001832c <CPU::detectFeatures()+0x7d4>
c00182b1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182b7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00182bc:	66 81 fa 00 01       	cmp    dx,0x100
c00182c1:	75 0c                	jne    c00182cf <CPU::detectFeatures()+0x777>
c00182c3:	51                   	push   ecx
c00182c4:	51                   	push   ecx
c00182c5:	68 5f 7e 02 c0       	push   0xc0027e5f
c00182ca:	e9 dc 01 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c00182cf:	66 81 fa 00 02       	cmp    dx,0x200
c00182d4:	75 0c                	jne    c00182e2 <CPU::detectFeatures()+0x78a>
c00182d6:	52                   	push   edx
c00182d7:	52                   	push   edx
c00182d8:	68 72 7e 02 c0       	push   0xc0027e72
c00182dd:	e9 c9 01 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c00182e2:	66 81 fa 40 02       	cmp    dx,0x240
c00182e7:	75 0c                	jne    c00182f5 <CPU::detectFeatures()+0x79d>
c00182e9:	50                   	push   eax
c00182ea:	50                   	push   eax
c00182eb:	68 84 7e 02 c0       	push   0xc0027e84
c00182f0:	e9 b6 01 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c00182f5:	83 f8 06             	cmp    eax,0x6
c00182f8:	75 0c                	jne    c0018306 <CPU::detectFeatures()+0x7ae>
c00182fa:	50                   	push   eax
c00182fb:	50                   	push   eax
c00182fc:	68 96 7e 02 c0       	push   0xc0027e96
c0018301:	e9 a5 01 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c0018306:	83 f8 04             	cmp    eax,0x4
c0018309:	75 0c                	jne    c0018317 <CPU::detectFeatures()+0x7bf>
c001830b:	50                   	push   eax
c001830c:	50                   	push   eax
c001830d:	68 a2 7e 02 c0       	push   0xc0027ea2
c0018312:	e9 94 01 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c0018317:	83 f8 03             	cmp    eax,0x3
c001831a:	0f 85 1b 02 00 00    	jne    c001853b <CPU::detectFeatures()+0x9e3>
c0018320:	50                   	push   eax
c0018321:	50                   	push   eax
c0018322:	68 aa 7e 02 c0       	push   0xc0027eaa
c0018327:	e9 7f 01 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c001832c:	80 fa 06             	cmp    dl,0x6
c001832f:	0f 85 db 00 00 00    	jne    c0018410 <CPU::detectFeatures()+0x8b8>
c0018335:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001833b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018340:	66 81 fa 80 01       	cmp    dx,0x180
c0018345:	75 0c                	jne    c0018353 <CPU::detectFeatures()+0x7fb>
c0018347:	50                   	push   eax
c0018348:	50                   	push   eax
c0018349:	68 b5 7e 02 c0       	push   0xc0027eb5
c001834e:	e9 58 01 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c0018353:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018359:	66 f7 c1 80 ff       	test   cx,0xff80
c001835e:	75 0c                	jne    c001836c <CPU::detectFeatures()+0x814>
c0018360:	50                   	push   eax
c0018361:	50                   	push   eax
c0018362:	68 c5 7e 02 c0       	push   0xc0027ec5
c0018367:	e9 3f 01 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c001836c:	66 81 fa 40 02       	cmp    dx,0x240
c0018371:	75 0c                	jne    c001837f <CPU::detectFeatures()+0x827>
c0018373:	55                   	push   ebp
c0018374:	55                   	push   ebp
c0018375:	68 cc 7e 02 c0       	push   0xc0027ecc
c001837a:	e9 2c 01 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c001837f:	66 81 fa 80 02       	cmp    dx,0x280
c0018384:	75 0c                	jne    c0018392 <CPU::detectFeatures()+0x83a>
c0018386:	57                   	push   edi
c0018387:	57                   	push   edi
c0018388:	68 d5 7e 02 c0       	push   0xc0027ed5
c001838d:	e9 19 01 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c0018392:	66 81 fa 40 03       	cmp    dx,0x340
c0018397:	74 ed                	je     c0018386 <CPU::detectFeatures()+0x82e>
c0018399:	66 81 fa c0 03       	cmp    dx,0x3c0
c001839e:	75 0c                	jne    c00183ac <CPU::detectFeatures()+0x854>
c00183a0:	56                   	push   esi
c00183a1:	56                   	push   esi
c00183a2:	68 dc 7e 02 c0       	push   0xc0027edc
c00183a7:	e9 ff 00 00 00       	jmp    c00184ab <CPU::detectFeatures()+0x953>
c00183ac:	83 f8 06             	cmp    eax,0x6
c00183af:	0f 84 45 ff ff ff    	je     c00182fa <CPU::detectFeatures()+0x7a2>
c00183b5:	83 f8 04             	cmp    eax,0x4
c00183b8:	0f 84 4d ff ff ff    	je     c001830b <CPU::detectFeatures()+0x7b3>
c00183be:	83 f8 03             	cmp    eax,0x3
c00183c1:	0f 85 74 01 00 00    	jne    c001853b <CPU::detectFeatures()+0x9e3>
c00183c7:	51                   	push   ecx
c00183c8:	51                   	push   ecx
c00183c9:	68 e5 7e 02 c0       	push   0xc0027ee5
c00183ce:	53                   	push   ebx
c00183cf:	e8 6a b4 ff ff       	call   c001383e <Device::setName(char const*)>
c00183d4:	b1 c1                	mov    cl,0xc1
c00183d6:	88 c8                	mov    al,cl
c00183d8:	e6 22                	out    0x22,al
c00183da:	e4 23                	in     al,0x23
c00183dc:	88 c2                	mov    dl,al
c00183de:	88 c8                	mov    al,cl
c00183e0:	e6 22                	out    0x22,al
c00183e2:	88 d0                	mov    al,dl
c00183e4:	83 c8 10             	or     eax,0x10
c00183e7:	e6 23                	out    0x23,al
c00183e9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00183f0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00183f3:	89 d0                	mov    eax,edx
c00183f5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00183fb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00183ff:	40                   	inc    eax
c0018400:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018406:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001840b:	e9 a1 00 00 00       	jmp    c00184b1 <CPU::detectFeatures()+0x959>
c0018410:	83 f8 06             	cmp    eax,0x6
c0018413:	0f 84 e1 fe ff ff    	je     c00182fa <CPU::detectFeatures()+0x7a2>
c0018419:	83 f8 04             	cmp    eax,0x4
c001841c:	0f 84 e9 fe ff ff    	je     c001830b <CPU::detectFeatures()+0x7b3>
c0018422:	83 f8 03             	cmp    eax,0x3
c0018425:	0f 85 10 01 00 00    	jne    c001853b <CPU::detectFeatures()+0x9e3>
c001842b:	52                   	push   edx
c001842c:	52                   	push   edx
c001842d:	68 f0 7e 02 c0       	push   0xc0027ef0
c0018432:	eb 77                	jmp    c00184ab <CPU::detectFeatures()+0x953>
c0018434:	83 f8 07             	cmp    eax,0x7
c0018437:	75 09                	jne    c0018442 <CPU::detectFeatures()+0x8ea>
c0018439:	50                   	push   eax
c001843a:	50                   	push   eax
c001843b:	68 fa 7e 02 c0       	push   0xc0027efa
c0018440:	eb 69                	jmp    c00184ab <CPU::detectFeatures()+0x953>
c0018442:	83 f8 0a             	cmp    eax,0xa
c0018445:	75 09                	jne    c0018450 <CPU::detectFeatures()+0x8f8>
c0018447:	50                   	push   eax
c0018448:	50                   	push   eax
c0018449:	68 05 7f 02 c0       	push   0xc0027f05
c001844e:	eb 5b                	jmp    c00184ab <CPU::detectFeatures()+0x953>
c0018450:	83 f8 0b             	cmp    eax,0xb
c0018453:	75 09                	jne    c001845e <CPU::detectFeatures()+0x906>
c0018455:	50                   	push   eax
c0018456:	50                   	push   eax
c0018457:	68 0d 7f 02 c0       	push   0xc0027f0d
c001845c:	eb 4d                	jmp    c00184ab <CPU::detectFeatures()+0x953>
c001845e:	83 f8 08             	cmp    eax,0x8
c0018461:	75 09                	jne    c001846c <CPU::detectFeatures()+0x914>
c0018463:	50                   	push   eax
c0018464:	50                   	push   eax
c0018465:	68 16 7f 02 c0       	push   0xc0027f16
c001846a:	eb 3f                	jmp    c00184ab <CPU::detectFeatures()+0x953>
c001846c:	83 f8 09             	cmp    eax,0x9
c001846f:	75 09                	jne    c001847a <CPU::detectFeatures()+0x922>
c0018471:	50                   	push   eax
c0018472:	50                   	push   eax
c0018473:	68 1e 7f 02 c0       	push   0xc0027f1e
c0018478:	eb 31                	jmp    c00184ab <CPU::detectFeatures()+0x953>
c001847a:	83 f8 05             	cmp    eax,0x5
c001847d:	75 09                	jne    c0018488 <CPU::detectFeatures()+0x930>
c001847f:	50                   	push   eax
c0018480:	50                   	push   eax
c0018481:	68 26 7f 02 c0       	push   0xc0027f26
c0018486:	eb 23                	jmp    c00184ab <CPU::detectFeatures()+0x953>
c0018488:	83 f8 0c             	cmp    eax,0xc
c001848b:	75 09                	jne    c0018496 <CPU::detectFeatures()+0x93e>
c001848d:	55                   	push   ebp
c001848e:	55                   	push   ebp
c001848f:	68 34 7f 02 c0       	push   0xc0027f34
c0018494:	eb 15                	jmp    c00184ab <CPU::detectFeatures()+0x953>
c0018496:	83 f8 0d             	cmp    eax,0xd
c0018499:	75 09                	jne    c00184a4 <CPU::detectFeatures()+0x94c>
c001849b:	57                   	push   edi
c001849c:	57                   	push   edi
c001849d:	68 3f 7f 02 c0       	push   0xc0027f3f
c00184a2:	eb 07                	jmp    c00184ab <CPU::detectFeatures()+0x953>
c00184a4:	56                   	push   esi
c00184a5:	56                   	push   esi
c00184a6:	68 53 7f 02 c0       	push   0xc0027f53
c00184ab:	53                   	push   ebx
c00184ac:	e8 8d b3 ff ff       	call   c001383e <Device::setName(char const*)>
c00184b1:	83 c4 10             	add    esp,0x10
c00184b4:	e9 82 00 00 00       	jmp    c001853b <CPU::detectFeatures()+0x9e3>
c00184b9:	51                   	push   ecx
c00184ba:	51                   	push   ecx
c00184bb:	68 9f 7d 02 c0       	push   0xc0027d9f
c00184c0:	57                   	push   edi
c00184c1:	e8 bf 82 fe ff       	call   c0000785 <strcpy>
c00184c6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00184d0:	e8 88 7d fe ff       	call   c000025d <is486>
c00184d5:	83 c4 10             	add    esp,0x10
c00184d8:	85 c0                	test   eax,eax
c00184da:	74 2d                	je     c0018509 <CPU::detectFeatures()+0x9b1>
c00184dc:	52                   	push   edx
c00184dd:	52                   	push   edx
c00184de:	68 5f 7f 02 c0       	push   0xc0027f5f
c00184e3:	53                   	push   ebx
c00184e4:	e8 55 b3 ff ff       	call   c001383e <Device::setName(char const*)>
c00184e9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00184f0:	e8 73 ce 00 00       	call   c0025368 <CPU::readCR0()>
c00184f5:	83 c4 10             	add    esp,0x10
c00184f8:	83 e0 14             	and    eax,0x14
c00184fb:	83 f8 04             	cmp    eax,0x4
c00184fe:	75 1f                	jne    c001851f <CPU::detectFeatures()+0x9c7>
c0018500:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018507:	eb 32                	jmp    c001853b <CPU::detectFeatures()+0x9e3>
c0018509:	50                   	push   eax
c001850a:	50                   	push   eax
c001850b:	68 6a 7f 02 c0       	push   0xc0027f6a
c0018510:	53                   	push   ebx
c0018511:	e8 28 b3 ff ff       	call   c001383e <Device::setName(char const*)>
c0018516:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001851d:	eb d1                	jmp    c00184f0 <CPU::detectFeatures()+0x998>
c001851f:	e8 14 7d fe ff       	call   c0000238 <hasLegacyFPU>
c0018524:	83 e0 01             	and    eax,0x1
c0018527:	8d 14 00             	lea    edx,[eax+eax*1]
c001852a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018530:	83 e0 fd             	and    eax,0xfffffffd
c0018533:	09 d0                	or     eax,edx
c0018535:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001853b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018542:	83 c4 4c             	add    esp,0x4c
c0018545:	5b                   	pop    ebx
c0018546:	5e                   	pop    esi
c0018547:	5f                   	pop    edi
c0018548:	5d                   	pop    ebp
c0018549:	c3                   	ret    

c001854a <CPU::setupSMEP()>:
c001854a:	83 ec 0c             	sub    esp,0xc
c001854d:	e8 e0 d0 00 00       	call   c0025632 <CPU::readCR4()>
c0018552:	0d 00 00 10 00       	or     eax,0x100000
c0018557:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001855b:	83 c4 0c             	add    esp,0xc
c001855e:	e9 ea d0 00 00       	jmp    c002564d <CPU::writeCR4(unsigned long)>
c0018563:	90                   	nop

c0018564 <CPU::setupUMIP()>:
c0018564:	83 ec 0c             	sub    esp,0xc
c0018567:	e8 c6 d0 00 00       	call   c0025632 <CPU::readCR4()>
c001856c:	80 cc 08             	or     ah,0x8
c001856f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018573:	83 c4 0c             	add    esp,0xc
c0018576:	e9 d2 d0 00 00       	jmp    c002564d <CPU::writeCR4(unsigned long)>
c001857b:	90                   	nop

c001857c <CPU::setupTSC()>:
c001857c:	83 ec 0c             	sub    esp,0xc
c001857f:	e8 ae d0 00 00       	call   c0025632 <CPU::readCR4()>
c0018584:	83 c8 04             	or     eax,0x4
c0018587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001858b:	83 c4 0c             	add    esp,0xc
c001858e:	e9 ba d0 00 00       	jmp    c002564d <CPU::writeCR4(unsigned long)>
c0018593:	90                   	nop

c0018594 <CPU::setupLargePages()>:
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	e8 96 d0 00 00       	call   c0025632 <CPU::readCR4()>
c001859c:	83 c8 10             	or     eax,0x10
c001859f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185a3:	83 c4 0c             	add    esp,0xc
c00185a6:	e9 a2 d0 00 00       	jmp    c002564d <CPU::writeCR4(unsigned long)>
c00185ab:	90                   	nop

c00185ac <CPU::setupPAT()>:
c00185ac:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c00185b1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00185b8:	74 2c                	je     c00185e6 <CPU::setupPAT()+0x3a>
c00185ba:	53                   	push   ebx
c00185bb:	83 ec 10             	sub    esp,0x10
c00185be:	68 77 02 00 00       	push   0x277
c00185c3:	50                   	push   eax
c00185c4:	e8 37 61 ff ff       	call   c000e700 <Computer::rdmsr(unsigned int)>
c00185c9:	83 e2 f8             	and    edx,0xfffffff8
c00185cc:	83 ca 01             	or     edx,0x1
c00185cf:	52                   	push   edx
c00185d0:	50                   	push   eax
c00185d1:	68 77 02 00 00       	push   0x277
c00185d6:	ff 35 e8 a4 02 c0    	push   DWORD PTR ds:0xc002a4e8
c00185dc:	e8 4b 61 ff ff       	call   c000e72c <Computer::wrmsr(unsigned int, unsigned long long)>
c00185e1:	83 c4 28             	add    esp,0x28
c00185e4:	5b                   	pop    ebx
c00185e5:	c3                   	ret    
c00185e6:	c3                   	ret    
c00185e7:	90                   	nop

c00185e8 <CPU::setupMTRR()>:
c00185e8:	c3                   	ret    
c00185e9:	90                   	nop

c00185ea <CPU::setupGlobalPages()>:
c00185ea:	83 ec 0c             	sub    esp,0xc
c00185ed:	e8 40 d0 00 00       	call   c0025632 <CPU::readCR4()>
c00185f2:	0c 80                	or     al,0x80
c00185f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185f8:	83 c4 0c             	add    esp,0xc
c00185fb:	e9 4d d0 00 00       	jmp    c002564d <CPU::writeCR4(unsigned long)>

c0018600 <CPU::allowUsermodeDataAccess()>:
c0018600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018604:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001860b:	74 03                	je     c0018610 <CPU::allowUsermodeDataAccess()+0x10>
c001860d:	0f 01 cb             	stac   
c0018610:	c3                   	ret    
c0018611:	90                   	nop

c0018612 <CPU::prohibitUsermodeDataAccess()>:
c0018612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018616:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001861d:	74 03                	je     c0018622 <CPU::prohibitUsermodeDataAccess()+0x10>
c001861f:	0f 01 ca             	clac   
c0018622:	c3                   	ret    
c0018623:	90                   	nop

c0018624 <CPU::setupSMAP()>:
c0018624:	53                   	push   ebx
c0018625:	83 ec 08             	sub    esp,0x8
c0018628:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001862c:	e8 01 d0 00 00       	call   c0025632 <CPU::readCR4()>
c0018631:	83 ec 0c             	sub    esp,0xc
c0018634:	0d 00 00 20 00       	or     eax,0x200000
c0018639:	50                   	push   eax
c001863a:	e8 0e d0 00 00       	call   c002564d <CPU::writeCR4(unsigned long)>
c001863f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018643:	83 c4 18             	add    esp,0x18
c0018646:	5b                   	pop    ebx
c0018647:	eb c9                	jmp    c0018612 <CPU::prohibitUsermodeDataAccess()>
c0018649:	90                   	nop

c001864a <CPU::setupFeatures()>:
c001864a:	53                   	push   ebx
c001864b:	83 ec 08             	sub    esp,0x8
c001864e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018652:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018659:	74 0c                	je     c0018667 <CPU::setupFeatures()+0x1d>
c001865b:	83 ec 0c             	sub    esp,0xc
c001865e:	53                   	push   ebx
c001865f:	e8 e6 fe ff ff       	call   c001854a <CPU::setupSMEP()>
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001866e:	74 0c                	je     c001867c <CPU::setupFeatures()+0x32>
c0018670:	83 ec 0c             	sub    esp,0xc
c0018673:	53                   	push   ebx
c0018674:	e8 ab ff ff ff       	call   c0018624 <CPU::setupSMAP()>
c0018679:	83 c4 10             	add    esp,0x10
c001867c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018683:	74 0c                	je     c0018691 <CPU::setupFeatures()+0x47>
c0018685:	83 ec 0c             	sub    esp,0xc
c0018688:	53                   	push   ebx
c0018689:	e8 d6 fe ff ff       	call   c0018564 <CPU::setupUMIP()>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018698:	74 0c                	je     c00186a6 <CPU::setupFeatures()+0x5c>
c001869a:	83 ec 0c             	sub    esp,0xc
c001869d:	53                   	push   ebx
c001869e:	e8 d9 fe ff ff       	call   c001857c <CPU::setupTSC()>
c00186a3:	83 c4 10             	add    esp,0x10
c00186a6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00186ad:	74 0c                	je     c00186bb <CPU::setupFeatures()+0x71>
c00186af:	83 ec 0c             	sub    esp,0xc
c00186b2:	53                   	push   ebx
c00186b3:	e8 dc fe ff ff       	call   c0018594 <CPU::setupLargePages()>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00186c2:	74 0c                	je     c00186d0 <CPU::setupFeatures()+0x86>
c00186c4:	83 ec 0c             	sub    esp,0xc
c00186c7:	53                   	push   ebx
c00186c8:	e8 1d ff ff ff       	call   c00185ea <CPU::setupGlobalPages()>
c00186cd:	83 c4 10             	add    esp,0x10
c00186d0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00186d7:	74 0d                	je     c00186e6 <CPU::setupFeatures()+0x9c>
c00186d9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186dd:	83 c4 08             	add    esp,0x8
c00186e0:	5b                   	pop    ebx
c00186e1:	e9 c6 fe ff ff       	jmp    c00185ac <CPU::setupPAT()>
c00186e6:	83 c4 08             	add    esp,0x8
c00186e9:	5b                   	pop    ebx
c00186ea:	c3                   	ret    
c00186eb:	90                   	nop

c00186ec <CPU::open(int, int, void*)>:
c00186ec:	57                   	push   edi
c00186ed:	56                   	push   esi
c00186ee:	53                   	push   ebx
c00186ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00186f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00186f7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00186fd:	83 ec 0c             	sub    esp,0xc
c0018700:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018706:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001870c:	50                   	push   eax
c001870d:	e8 da 62 ff ff       	call   c000e9ec <GDT::setup()>
c0018712:	83 c4 0c             	add    esp,0xc
c0018715:	6a 00                	push   0x0
c0018717:	68 ef be ad de       	push   0xdeadbeef
c001871c:	57                   	push   edi
c001871d:	e8 32 85 ff ff       	call   c0010c54 <TSS::setup(unsigned long, unsigned long)>
c0018722:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018725:	e8 0a 85 ff ff       	call   c0010c34 <TSS::flush()>
c001872a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018730:	89 04 24             	mov    DWORD PTR [esp],eax
c0018733:	e8 0e 65 ff ff       	call   c000ec46 <IDT::setup()>
c0018738:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c001873f:	e8 00 cf 00 00       	call   c0025644 <CPU::writeDR7(unsigned long)>
c0018744:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001874e:	e8 b7 6f ff ff       	call   c000f70a <Phys::allocatePage()>
c0018753:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018759:	89 30                	mov    DWORD PTR [eax],esi
c001875b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018761:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018764:	58                   	pop    eax
c0018765:	5a                   	pop    edx
c0018766:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001876c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018770:	e8 ad 94 ff ff       	call   c0011c22 <VAS::setCPUSpecific(unsigned long)>
c0018775:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018778:	e8 db f3 ff ff       	call   c0017b58 <CPU::detectFeatures()>
c001877d:	e8 81 c3 ff ff       	call   c0014b03 <setupInterruptController()>
c0018782:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018788:	a1 00 a5 02 c0       	mov    eax,ds:0xc002a500
c001878d:	83 e0 10             	and    eax,0x10
c0018790:	83 f8 01             	cmp    eax,0x1
c0018793:	19 c0                	sbb    eax,eax
c0018795:	83 e0 46             	and    eax,0x46
c0018798:	83 c0 1e             	add    eax,0x1e
c001879b:	89 04 24             	mov    DWORD PTR [esp],eax
c001879e:	e8 0b d7 ff ff       	call   c0015eae <setupTimer(int)>
c00187a3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00187a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187ac:	e8 99 fe ff ff       	call   c001864a <CPU::setupFeatures()>
c00187b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187b4:	e8 23 f1 ff ff       	call   c00178dc <CPU::displayFeatures()>
c00187b9:	83 c4 10             	add    esp,0x10
c00187bc:	31 c0                	xor    eax,eax
c00187be:	5b                   	pop    ebx
c00187bf:	5e                   	pop    esi
c00187c0:	5f                   	pop    edi
c00187c1:	c3                   	ret    

c00187c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00187c2:	57                   	push   edi
c00187c3:	56                   	push   esi
c00187c4:	53                   	push   ebx
c00187c5:	51                   	push   ecx
c00187c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187ca:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00187cd:	0f 02 c0             	lar    eax,ax
c00187d0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00187d3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00187d7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00187da:	88 ca                	mov    dl,cl
c00187dc:	c0 ea 06             	shr    dl,0x6
c00187df:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00187e3:	89 ca                	mov    edx,ecx
c00187e5:	66 c1 ea 03          	shr    dx,0x3
c00187e9:	83 e2 07             	and    edx,0x7
c00187ec:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00187f1:	88 17                	mov    BYTE PTR [edi],dl
c00187f3:	0f 84 a3 01 00 00    	je     c001899c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00187f9:	83 e1 07             	and    ecx,0x7
c00187fc:	80 f9 04             	cmp    cl,0x4
c00187ff:	0f 84 98 00 00 00    	je     c001889d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018805:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001880a:	0f 95 c0             	setne  al
c001880d:	80 f9 05             	cmp    cl,0x5
c0018810:	0f 95 c2             	setne  dl
c0018813:	08 c2                	or     dl,al
c0018815:	74 79                	je     c0018890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018817:	84 c9                	test   cl,cl
c0018819:	75 05                	jne    c0018820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001881b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001881e:	eb 3c                	jmp    c001885c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018820:	80 f9 01             	cmp    cl,0x1
c0018823:	75 05                	jne    c001882a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018825:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018828:	eb 32                	jmp    c001885c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001882a:	80 f9 02             	cmp    cl,0x2
c001882d:	75 05                	jne    c0018834 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001882f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018832:	eb 28                	jmp    c001885c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018834:	31 c0                	xor    eax,eax
c0018836:	80 f9 03             	cmp    cl,0x3
c0018839:	75 05                	jne    c0018840 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001883b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001883e:	eb 1c                	jmp    c001885c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018840:	80 f9 05             	cmp    cl,0x5
c0018843:	75 05                	jne    c001884a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018845:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018848:	eb 12                	jmp    c001885c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001884a:	80 f9 06             	cmp    cl,0x6
c001884d:	75 05                	jne    c0018854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001884f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018852:	eb 08                	jmp    c001885c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018854:	80 f9 07             	cmp    cl,0x7
c0018857:	75 03                	jne    c001885c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018859:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001885c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018861:	75 10                	jne    c0018873 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018863:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0018867:	b9 03 00 00 00       	mov    ecx,0x3
c001886c:	01 d0                	add    eax,edx
c001886e:	e9 34 01 00 00       	jmp    c00189a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c0018873:	b9 02 00 00 00       	mov    ecx,0x2
c0018878:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001887d:	0f 85 24 01 00 00    	jne    c00189a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c0018883:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0018886:	b9 06 00 00 00       	mov    ecx,0x6
c001888b:	e9 17 01 00 00       	jmp    c00189a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c0018890:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0018893:	b9 06 00 00 00       	mov    ecx,0x6
c0018898:	e9 0c 01 00 00       	jmp    c00189a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c001889d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00188a0:	88 ca                	mov    dl,cl
c00188a2:	c0 ea 06             	shr    dl,0x6
c00188a5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00188a9:	89 ca                	mov    edx,ecx
c00188ab:	66 c1 ea 03          	shr    dx,0x3
c00188af:	83 e2 07             	and    edx,0x7
c00188b2:	80 e1 07             	and    cl,0x7
c00188b5:	75 05                	jne    c00188bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00188b7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00188ba:	eb 49                	jmp    c0018905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00188bc:	80 f9 01             	cmp    cl,0x1
c00188bf:	75 05                	jne    c00188c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00188c1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00188c4:	eb 3f                	jmp    c0018905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00188c6:	80 f9 02             	cmp    cl,0x2
c00188c9:	75 05                	jne    c00188d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00188cb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00188ce:	eb 35                	jmp    c0018905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00188d0:	80 f9 03             	cmp    cl,0x3
c00188d3:	75 05                	jne    c00188da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00188d5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00188d8:	eb 2b                	jmp    c0018905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00188da:	80 f9 04             	cmp    cl,0x4
c00188dd:	75 0f                	jne    c00188ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12c>
c00188df:	f6 c4 60             	test   ah,0x60
c00188e2:	75 05                	jne    c00188e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x127>
c00188e4:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c00188e7:	eb 1c                	jmp    c0018905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00188e9:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00188ec:	eb 17                	jmp    c0018905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00188ee:	80 f9 05             	cmp    cl,0x5
c00188f1:	75 05                	jne    c00188f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x136>
c00188f3:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00188f6:	eb 0d                	jmp    c0018905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00188f8:	80 f9 06             	cmp    cl,0x6
c00188fb:	75 05                	jne    c0018902 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x140>
c00188fd:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018900:	eb 03                	jmp    c0018905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018902:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018905:	84 d2                	test   dl,dl
c0018907:	75 05                	jne    c001890e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14c>
c0018909:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001890c:	eb 3c                	jmp    c001894a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001890e:	80 fa 01             	cmp    dl,0x1
c0018911:	75 05                	jne    c0018918 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x156>
c0018913:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018916:	eb 32                	jmp    c001894a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018918:	80 fa 02             	cmp    dl,0x2
c001891b:	75 05                	jne    c0018922 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x160>
c001891d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018920:	eb 28                	jmp    c001894a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018922:	80 fa 03             	cmp    dl,0x3
c0018925:	75 05                	jne    c001892c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16a>
c0018927:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001892a:	eb 1e                	jmp    c001894a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001892c:	31 c0                	xor    eax,eax
c001892e:	80 fa 04             	cmp    dl,0x4
c0018931:	74 17                	je     c001894a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018933:	80 fa 05             	cmp    dl,0x5
c0018936:	75 05                	jne    c001893d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17b>
c0018938:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001893b:	eb 0d                	jmp    c001894a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001893d:	80 fa 06             	cmp    dl,0x6
c0018940:	75 05                	jne    c0018947 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x185>
c0018942:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018945:	eb 03                	jmp    c001894a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018947:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001894a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001894f:	0f 94 c2             	sete   dl
c0018952:	80 f9 05             	cmp    cl,0x5
c0018955:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018959:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001895e:	d3 e0                	shl    eax,cl
c0018960:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0018964:	74 0a                	je     c0018970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ae>
c0018966:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018969:	b9 07 00 00 00       	mov    ecx,0x7
c001896e:	eb 37                	jmp    c00189a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c0018970:	01 f8                	add    eax,edi
c0018972:	b9 03 00 00 00       	mov    ecx,0x3
c0018977:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001897c:	74 2b                	je     c00189a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c001897e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018983:	75 0d                	jne    c0018992 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c0018985:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0018989:	01 c8                	add    eax,ecx
c001898b:	b9 04 00 00 00       	mov    ecx,0x4
c0018990:	eb 17                	jmp    c00189a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0018992:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018995:	b9 07 00 00 00       	mov    ecx,0x7
c001899a:	eb 0d                	jmp    c00189a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c001899c:	b9 02 00 00 00       	mov    ecx,0x2
c00189a1:	b2 01                	mov    dl,0x1
c00189a3:	31 c0                	xor    eax,eax
c00189a5:	eb 02                	jmp    c00189a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00189a7:	31 d2                	xor    edx,edx
c00189a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189ad:	89 0b                	mov    DWORD PTR [ebx],ecx
c00189af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189b3:	88 11                	mov    BYTE PTR [ecx],dl
c00189b5:	5a                   	pop    edx
c00189b6:	5b                   	pop    ebx
c00189b7:	5e                   	pop    esi
c00189b8:	5f                   	pop    edi
c00189b9:	c3                   	ret    

c00189ba <fpuInternalTo32(unsigned long long)>:
c00189ba:	83 ec 2c             	sub    esp,0x2c
c00189bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00189c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00189c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00189cd:	83 ec 08             	sub    esp,0x8
c00189d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00189d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00189d8:	e8 8b a5 00 00       	call   c0022f68 <__floatundisf>
c00189dd:	83 c4 10             	add    esp,0x10
c00189e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00189e8:	83 c4 2c             	add    esp,0x2c
c00189eb:	c3                   	ret    

c00189ec <fpuInternalTo64(unsigned long long)>:
c00189ec:	83 ec 0c             	sub    esp,0xc
c00189ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00189f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00189fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018a01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a05:	83 c4 0c             	add    esp,0xc
c0018a08:	c3                   	ret    

c0018a09 <fpu32ToInternal(unsigned int)>:
c0018a09:	83 ec 1c             	sub    esp,0x1c
c0018a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a18:	83 ec 0c             	sub    esp,0xc
c0018a1b:	50                   	push   eax
c0018a1c:	e8 5f a4 00 00       	call   c0022e80 <__fixunssfdi>
c0018a21:	83 c4 10             	add    esp,0x10
c0018a24:	83 c4 1c             	add    esp,0x1c
c0018a27:	c3                   	ret    

c0018a28 <fpu64ToInternal(unsigned long long)>:
c0018a28:	83 ec 0c             	sub    esp,0xc
c0018a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018a3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a41:	83 c4 0c             	add    esp,0xc
c0018a44:	c3                   	ret    

c0018a45 <fpuFloatToLong(unsigned long long)>:
c0018a45:	83 ec 2c             	sub    esp,0x2c
c0018a48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018a54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a58:	83 ec 08             	sub    esp,0x8
c0018a5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018a5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018a63:	e8 60 a5 00 00       	call   c0022fc8 <__floatundidf>
c0018a68:	83 c4 10             	add    esp,0x10
c0018a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0018a73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a7b:	83 c4 2c             	add    esp,0x2c
c0018a7e:	c3                   	ret    

c0018a7f <fpuULongToFloat(unsigned long long)>:
c0018a7f:	83 ec 2c             	sub    esp,0x2c
c0018a82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018a8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0018aa2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018aa6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018aaa:	83 ec 08             	sub    esp,0x8
c0018aad:	52                   	push   edx
c0018aae:	50                   	push   eax
c0018aaf:	e8 40 a4 00 00       	call   c0022ef4 <__fixunsdfdi>
c0018ab4:	83 c4 10             	add    esp,0x10
c0018ab7:	83 c4 2c             	add    esp,0x2c
c0018aba:	c3                   	ret    

c0018abb <fpuLongToFloat(long long)>:
c0018abb:	83 ec 2c             	sub    esp,0x2c
c0018abe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ac6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018aca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ad2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ad6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ada:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0018ade:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ae2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ae6:	83 ec 08             	sub    esp,0x8
c0018ae9:	52                   	push   edx
c0018aea:	50                   	push   eax
c0018aeb:	e8 04 a4 00 00       	call   c0022ef4 <__fixunsdfdi>
c0018af0:	83 c4 10             	add    esp,0x10
c0018af3:	83 c4 2c             	add    esp,0x2c
c0018af6:	c3                   	ret    

c0018af7 <fpuGet0()>:
c0018af7:	b8 00 00 00 00       	mov    eax,0x0
c0018afc:	ba 00 00 00 00       	mov    edx,0x0
c0018b01:	c3                   	ret    

c0018b02 <fpuGet1()>:
c0018b02:	b8 01 00 00 00       	mov    eax,0x1
c0018b07:	ba 00 00 00 00       	mov    edx,0x0
c0018b0c:	c3                   	ret    

c0018b0d <fpuGetPi()>:
c0018b0d:	b8 03 00 00 00       	mov    eax,0x3
c0018b12:	ba 00 00 00 00       	mov    edx,0x0
c0018b17:	c3                   	ret    

c0018b18 <fpuGetLog2E()>:
c0018b18:	83 ec 0c             	sub    esp,0xc
c0018b1b:	83 ec 0c             	sub    esp,0xc
c0018b1e:	68 a4 7f 02 c0       	push   0xc0027fa4
c0018b23:	e8 ab 0b 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0018b28:	83 c4 10             	add    esp,0x10
c0018b2b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018b30:	ba 00 00 00 00       	mov    edx,0x0
c0018b35:	83 c4 0c             	add    esp,0xc
c0018b38:	c3                   	ret    

c0018b39 <fpuGetLogE2()>:
c0018b39:	83 ec 0c             	sub    esp,0xc
c0018b3c:	83 ec 0c             	sub    esp,0xc
c0018b3f:	68 a4 7f 02 c0       	push   0xc0027fa4
c0018b44:	e8 8a 0b 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0018b49:	83 c4 10             	add    esp,0x10
c0018b4c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018b51:	ba 00 00 00 00       	mov    edx,0x0
c0018b56:	83 c4 0c             	add    esp,0xc
c0018b59:	c3                   	ret    

c0018b5a <fpuGetLog210()>:
c0018b5a:	83 ec 0c             	sub    esp,0xc
c0018b5d:	83 ec 0c             	sub    esp,0xc
c0018b60:	68 a4 7f 02 c0       	push   0xc0027fa4
c0018b65:	e8 69 0b 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0018b6a:	83 c4 10             	add    esp,0x10
c0018b6d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018b72:	ba 00 00 00 00       	mov    edx,0x0
c0018b77:	83 c4 0c             	add    esp,0xc
c0018b7a:	c3                   	ret    

c0018b7b <fpuGetLog102()>:
c0018b7b:	83 ec 0c             	sub    esp,0xc
c0018b7e:	83 ec 0c             	sub    esp,0xc
c0018b81:	68 a4 7f 02 c0       	push   0xc0027fa4
c0018b86:	e8 48 0b 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018b93:	ba 00 00 00 00       	mov    edx,0x0
c0018b98:	83 c4 0c             	add    esp,0xc
c0018b9b:	c3                   	ret    

c0018b9c <fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0018b9c:	53                   	push   ebx
c0018b9d:	83 ec 10             	sub    esp,0x10
c0018ba0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ba8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018bac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bb4:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018bbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018bbf:	b3 01                	mov    bl,0x1
c0018bc1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018bc4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018bc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018bcc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018bd0:	19 d1                	sbb    ecx,edx
c0018bd2:	72 02                	jb     c0018bd6 <fpuIsSecondLarger(unsigned long long, unsigned long long)+0x3a>
c0018bd4:	b3 00                	mov    bl,0x0
c0018bd6:	88 d8                	mov    al,bl
c0018bd8:	83 c4 10             	add    esp,0x10
c0018bdb:	5b                   	pop    ebx
c0018bdc:	c3                   	ret    

c0018bdd <fpuAreEqual(unsigned long long, unsigned long long)>:
c0018bdd:	83 ec 14             	sub    esp,0x14
c0018be0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018be4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018be8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018bec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018bf0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018bf4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018bf7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018bfb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0018bff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018c03:	33 0c 24             	xor    ecx,DWORD PTR [esp]
c0018c06:	89 c8                	mov    eax,ecx
c0018c08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c0c:	33 4c 24 04          	xor    ecx,DWORD PTR [esp+0x4]
c0018c10:	89 ca                	mov    edx,ecx
c0018c12:	09 d0                	or     eax,edx
c0018c14:	0f 94 c0             	sete   al
c0018c17:	83 c4 14             	add    esp,0x14
c0018c1a:	c3                   	ret    

c0018c1b <fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0018c1b:	83 ec 14             	sub    esp,0x14
c0018c1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c32:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c3d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0018c41:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0018c45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018c49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018c4d:	e8 8b ff ff ff       	call   c0018bdd <fpuAreEqual(unsigned long long, unsigned long long)>
c0018c52:	83 c4 10             	add    esp,0x10
c0018c55:	83 f0 01             	xor    eax,0x1
c0018c58:	84 c0                	test   al,al
c0018c5a:	74 20                	je     c0018c7c <fpuUnorderedCompare(unsigned long long, unsigned long long)+0x61>
c0018c5c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0018c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0018c64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018c6c:	e8 2b ff ff ff       	call   c0018b9c <fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0018c71:	83 c4 10             	add    esp,0x10
c0018c74:	84 c0                	test   al,al
c0018c76:	74 04                	je     c0018c7c <fpuUnorderedCompare(unsigned long long, unsigned long long)+0x61>
c0018c78:	b0 01                	mov    al,0x1
c0018c7a:	eb 02                	jmp    c0018c7e <fpuUnorderedCompare(unsigned long long, unsigned long long)+0x63>
c0018c7c:	b0 00                	mov    al,0x0
c0018c7e:	83 e0 01             	and    eax,0x1
c0018c81:	88 c2                	mov    dl,al
c0018c83:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0018c88:	83 e0 fe             	and    eax,0xfffffffe
c0018c8b:	09 d0                	or     eax,edx
c0018c8d:	a2 41 af 02 c0       	mov    ds:0xc002af41,al
c0018c92:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0018c97:	83 e0 fb             	and    eax,0xfffffffb
c0018c9a:	a2 41 af 02 c0       	mov    ds:0xc002af41,al
c0018c9f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0018ca3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0018ca7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018cab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018caf:	e8 29 ff ff ff       	call   c0018bdd <fpuAreEqual(unsigned long long, unsigned long long)>
c0018cb4:	83 c4 10             	add    esp,0x10
c0018cb7:	83 e0 01             	and    eax,0x1
c0018cba:	c1 e0 06             	shl    eax,0x6
c0018cbd:	88 c2                	mov    dl,al
c0018cbf:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0018cc4:	83 e0 bf             	and    eax,0xffffffbf
c0018cc7:	09 d0                	or     eax,edx
c0018cc9:	a2 41 af 02 c0       	mov    ds:0xc002af41,al
c0018cce:	90                   	nop
c0018ccf:	83 c4 14             	add    esp,0x14
c0018cd2:	c3                   	ret    

c0018cd3 <fpuAdd(unsigned long long, unsigned long long)>:
c0018cd3:	53                   	push   ebx
c0018cd4:	83 ec 10             	sub    esp,0x10
c0018cd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018cdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ce3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ceb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cf2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018cf6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018cfa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018cfe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018d01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018d05:	01 c8                	add    eax,ecx
c0018d07:	11 da                	adc    edx,ebx
c0018d09:	83 c4 10             	add    esp,0x10
c0018d0c:	5b                   	pop    ebx
c0018d0d:	c3                   	ret    

c0018d0e <fpuAbs(unsigned long long)>:
c0018d0e:	83 ec 0c             	sub    esp,0xc
c0018d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d15:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018d23:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018d27:	83 c4 0c             	add    esp,0xc
c0018d2a:	c3                   	ret    

c0018d2b <fpuChs(unsigned long long)>:
c0018d2b:	83 ec 0c             	sub    esp,0xc
c0018d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d32:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d3d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018d40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018d44:	f7 d8                	neg    eax
c0018d46:	83 d2 00             	adc    edx,0x0
c0018d49:	f7 da                	neg    edx
c0018d4b:	83 c4 0c             	add    esp,0xc
c0018d4e:	c3                   	ret    

c0018d4f <fpuSub(unsigned long long, unsigned long long)>:
c0018d4f:	83 ec 14             	sub    esp,0x14
c0018d52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018d5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d66:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018d74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018d78:	f7 d8                	neg    eax
c0018d7a:	83 d2 00             	adc    edx,0x0
c0018d7d:	f7 da                	neg    edx
c0018d7f:	52                   	push   edx
c0018d80:	50                   	push   eax
c0018d81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018d85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018d89:	e8 45 ff ff ff       	call   c0018cd3 <fpuAdd(unsigned long long, unsigned long long)>
c0018d8e:	83 c4 10             	add    esp,0x10
c0018d91:	83 c4 14             	add    esp,0x14
c0018d94:	c3                   	ret    

c0018d95 <fpuMultiply(unsigned long long, unsigned long long)>:
c0018d95:	83 ec 14             	sub    esp,0x14
c0018d98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018da0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018da4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0018daf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018db3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018db7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018dbb:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c0018dbf:	89 c2                	mov    edx,eax
c0018dc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dc5:	0f af 44 24 08       	imul   eax,DWORD PTR [esp+0x8]
c0018dca:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018dcd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018dd0:	f7 64 24 08          	mul    DWORD PTR [esp+0x8]
c0018dd4:	01 d1                	add    ecx,edx
c0018dd6:	89 ca                	mov    edx,ecx
c0018dd8:	83 c4 14             	add    esp,0x14
c0018ddb:	c3                   	ret    

c0018ddc <fpuDivide(unsigned long long, unsigned long long)>:
c0018ddc:	83 ec 1c             	sub    esp,0x1c
c0018ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018de3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018de7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018deb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018def:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018df3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018df6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018dfa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018dfe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0018e02:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0018e06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018e0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018e0e:	e8 bd a4 00 00       	call   c00232d0 <__udivdi3>
c0018e13:	83 c4 10             	add    esp,0x10
c0018e16:	83 c4 1c             	add    esp,0x1c
c0018e19:	c3                   	ret    

c0018e1a <fpuSquare(unsigned long long)>:
c0018e1a:	83 ec 0c             	sub    esp,0xc
c0018e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e21:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e2c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0018e30:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0018e34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018e38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018e3c:	e8 54 ff ff ff       	call   c0018d95 <fpuMultiply(unsigned long long, unsigned long long)>
c0018e41:	83 c4 10             	add    esp,0x10
c0018e44:	83 c4 0c             	add    esp,0xc
c0018e47:	c3                   	ret    

c0018e48 <fpuGetReg(int)>:
c0018e48:	83 ec 0c             	sub    esp,0xc
c0018e4b:	83 ec 0c             	sub    esp,0xc
c0018e4e:	68 a9 7f 02 c0       	push   0xc0027fa9
c0018e53:	e8 f9 93 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018e58:	83 c4 10             	add    esp,0x10
c0018e5b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0018e60:	78 07                	js     c0018e69 <fpuGetReg(int)+0x21>
c0018e62:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0018e67:	7e 10                	jle    c0018e79 <fpuGetReg(int)+0x31>
c0018e69:	83 ec 0c             	sub    esp,0xc
c0018e6c:	68 b3 7f 02 c0       	push   0xc0027fb3
c0018e71:	e8 5d 08 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0018e76:	83 c4 10             	add    esp,0x10
c0018e79:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0018e7e:	c0 e8 03             	shr    al,0x3
c0018e81:	83 e0 07             	and    eax,0x7
c0018e84:	0f b6 d0             	movzx  edx,al
c0018e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e8b:	01 d0                	add    eax,edx
c0018e8d:	25 07 00 00 80       	and    eax,0x80000007
c0018e92:	79 05                	jns    c0018e99 <fpuGetReg(int)+0x51>
c0018e94:	48                   	dec    eax
c0018e95:	83 c8 f8             	or     eax,0xfffffff8
c0018e98:	40                   	inc    eax
c0018e99:	83 ec 04             	sub    esp,0x4
c0018e9c:	50                   	push   eax
c0018e9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018ea1:	68 c6 7f 02 c0       	push   0xc0027fc6
c0018ea6:	e8 a6 93 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018eab:	83 c4 10             	add    esp,0x10
c0018eae:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0018eb3:	c0 e8 03             	shr    al,0x3
c0018eb6:	83 e0 07             	and    eax,0x7
c0018eb9:	0f b6 d0             	movzx  edx,al
c0018ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ec0:	01 d0                	add    eax,edx
c0018ec2:	25 07 00 00 80       	and    eax,0x80000007
c0018ec7:	79 05                	jns    c0018ece <fpuGetReg(int)+0x86>
c0018ec9:	48                   	dec    eax
c0018eca:	83 c8 f8             	or     eax,0xfffffff8
c0018ecd:	40                   	inc    eax
c0018ece:	8b 14 c5 48 af 02 c0 	mov    edx,DWORD PTR [eax*8-0x3ffd50b8]
c0018ed5:	8b 04 c5 44 af 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd50bc]
c0018edc:	83 c4 0c             	add    esp,0xc
c0018edf:	c3                   	ret    

c0018ee0 <fpuSetReg(int, unsigned long long)>:
c0018ee0:	83 ec 1c             	sub    esp,0x1c
c0018ee3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ee7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018eeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018eef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ef3:	83 ec 0c             	sub    esp,0xc
c0018ef6:	68 d8 7f 02 c0       	push   0xc0027fd8
c0018efb:	e8 51 93 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018f00:	83 c4 10             	add    esp,0x10
c0018f03:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0018f08:	78 07                	js     c0018f11 <fpuSetReg(int, unsigned long long)+0x31>
c0018f0a:	83 7c 24 20 07       	cmp    DWORD PTR [esp+0x20],0x7
c0018f0f:	7e 10                	jle    c0018f21 <fpuSetReg(int, unsigned long long)+0x41>
c0018f11:	83 ec 0c             	sub    esp,0xc
c0018f14:	68 e2 7f 02 c0       	push   0xc0027fe2
c0018f19:	e8 b5 07 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0018f1e:	83 c4 10             	add    esp,0x10
c0018f21:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0018f26:	c0 e8 03             	shr    al,0x3
c0018f29:	83 e0 07             	and    eax,0x7
c0018f2c:	0f b6 d0             	movzx  edx,al
c0018f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f33:	01 d0                	add    eax,edx
c0018f35:	25 07 00 00 80       	and    eax,0x80000007
c0018f3a:	79 05                	jns    c0018f41 <fpuSetReg(int, unsigned long long)+0x61>
c0018f3c:	48                   	dec    eax
c0018f3d:	83 c8 f8             	or     eax,0xfffffff8
c0018f40:	40                   	inc    eax
c0018f41:	83 ec 04             	sub    esp,0x4
c0018f44:	50                   	push   eax
c0018f45:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018f49:	68 c6 7f 02 c0       	push   0xc0027fc6
c0018f4e:	e8 fe 92 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018f53:	83 c4 10             	add    esp,0x10
c0018f56:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0018f5b:	c0 e8 03             	shr    al,0x3
c0018f5e:	83 e0 07             	and    eax,0x7
c0018f61:	0f b6 d0             	movzx  edx,al
c0018f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f68:	01 d0                	add    eax,edx
c0018f6a:	25 07 00 00 80       	and    eax,0x80000007
c0018f6f:	79 05                	jns    c0018f76 <fpuSetReg(int, unsigned long long)+0x96>
c0018f71:	48                   	dec    eax
c0018f72:	83 c8 f8             	or     eax,0xfffffff8
c0018f75:	40                   	inc    eax
c0018f76:	89 c1                	mov    ecx,eax
c0018f78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f80:	89 04 cd 44 af 02 c0 	mov    DWORD PTR [ecx*8-0x3ffd50bc],eax
c0018f87:	89 14 cd 48 af 02 c0 	mov    DWORD PTR [ecx*8-0x3ffd50b8],edx
c0018f8e:	90                   	nop
c0018f8f:	83 c4 1c             	add    esp,0x1c
c0018f92:	c3                   	ret    

c0018f93 <fpuPush(unsigned long long)>:
c0018f93:	83 ec 1c             	sub    esp,0x1c
c0018f96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018f9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018fa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fa6:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0018fab:	c0 e8 03             	shr    al,0x3
c0018fae:	83 e0 07             	and    eax,0x7
c0018fb1:	0f b6 c0             	movzx  eax,al
c0018fb4:	83 c0 07             	add    eax,0x7
c0018fb7:	25 07 00 00 80       	and    eax,0x80000007
c0018fbc:	79 05                	jns    c0018fc3 <fpuPush(unsigned long long)+0x30>
c0018fbe:	48                   	dec    eax
c0018fbf:	83 c8 f8             	or     eax,0xfffffff8
c0018fc2:	40                   	inc    eax
c0018fc3:	83 e0 07             	and    eax,0x7
c0018fc6:	83 e0 07             	and    eax,0x7
c0018fc9:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018fd0:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0018fd5:	83 e0 c7             	and    eax,0xffffffc7
c0018fd8:	09 d0                	or     eax,edx
c0018fda:	a2 41 af 02 c0       	mov    ds:0xc002af41,al
c0018fdf:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0018fe4:	c0 e8 03             	shr    al,0x3
c0018fe7:	83 e0 07             	and    eax,0x7
c0018fea:	0f b6 c8             	movzx  ecx,al
c0018fed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ff1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ff5:	89 04 cd 44 af 02 c0 	mov    DWORD PTR [ecx*8-0x3ffd50bc],eax
c0018ffc:	89 14 cd 48 af 02 c0 	mov    DWORD PTR [ecx*8-0x3ffd50b8],edx
c0019003:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0019008:	c0 e8 03             	shr    al,0x3
c001900b:	83 e0 07             	and    eax,0x7
c001900e:	0f b6 c0             	movzx  eax,al
c0019011:	83 ec 08             	sub    esp,0x8
c0019014:	50                   	push   eax
c0019015:	68 f5 7f 02 c0       	push   0xc0027ff5
c001901a:	e8 32 92 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	a1 84 af 02 c0       	mov    eax,ds:0xc002af84
c0019027:	83 f8 08             	cmp    eax,0x8
c001902a:	75 0f                	jne    c001903b <fpuPush(unsigned long long)+0xa8>
c001902c:	a0 40 af 02 c0       	mov    al,ds:0xc002af40
c0019031:	83 c8 40             	or     eax,0x40
c0019034:	a2 40 af 02 c0       	mov    ds:0xc002af40,al
c0019039:	eb 0b                	jmp    c0019046 <fpuPush(unsigned long long)+0xb3>
c001903b:	a1 84 af 02 c0       	mov    eax,ds:0xc002af84
c0019040:	40                   	inc    eax
c0019041:	a3 84 af 02 c0       	mov    ds:0xc002af84,eax
c0019046:	90                   	nop
c0019047:	83 c4 1c             	add    esp,0x1c
c001904a:	c3                   	ret    

c001904b <fpuPop()>:
c001904b:	83 ec 1c             	sub    esp,0x1c
c001904e:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0019053:	c0 e8 03             	shr    al,0x3
c0019056:	83 e0 07             	and    eax,0x7
c0019059:	0f b6 c0             	movzx  eax,al
c001905c:	83 ec 08             	sub    esp,0x8
c001905f:	50                   	push   eax
c0019060:	68 0d 80 02 c0       	push   0xc002800d
c0019065:	e8 e7 91 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001906a:	83 c4 10             	add    esp,0x10
c001906d:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0019072:	c0 e8 03             	shr    al,0x3
c0019075:	83 e0 07             	and    eax,0x7
c0019078:	0f b6 c0             	movzx  eax,al
c001907b:	8b 14 c5 48 af 02 c0 	mov    edx,DWORD PTR [eax*8-0x3ffd50b8]
c0019082:	8b 04 c5 44 af 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd50bc]
c0019089:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001908d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019091:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c0019096:	c0 e8 03             	shr    al,0x3
c0019099:	83 e0 07             	and    eax,0x7
c001909c:	0f b6 c0             	movzx  eax,al
c001909f:	40                   	inc    eax
c00190a0:	25 07 00 00 80       	and    eax,0x80000007
c00190a5:	79 05                	jns    c00190ac <fpuPop()+0x61>
c00190a7:	48                   	dec    eax
c00190a8:	83 c8 f8             	or     eax,0xfffffff8
c00190ab:	40                   	inc    eax
c00190ac:	83 e0 07             	and    eax,0x7
c00190af:	83 e0 07             	and    eax,0x7
c00190b2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190b9:	a0 41 af 02 c0       	mov    al,ds:0xc002af41
c00190be:	83 e0 c7             	and    eax,0xffffffc7
c00190c1:	09 d0                	or     eax,edx
c00190c3:	a2 41 af 02 c0       	mov    ds:0xc002af41,al
c00190c8:	a1 84 af 02 c0       	mov    eax,ds:0xc002af84
c00190cd:	85 c0                	test   eax,eax
c00190cf:	74 0d                	je     c00190de <fpuPop()+0x93>
c00190d1:	a1 84 af 02 c0       	mov    eax,ds:0xc002af84
c00190d6:	48                   	dec    eax
c00190d7:	a3 84 af 02 c0       	mov    ds:0xc002af84,eax
c00190dc:	eb 0d                	jmp    c00190eb <fpuPop()+0xa0>
c00190de:	a0 40 af 02 c0       	mov    al,ds:0xc002af40
c00190e3:	83 c8 40             	or     eax,0x40
c00190e6:	a2 40 af 02 c0       	mov    ds:0xc002af40,al
c00190eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00190f3:	83 c4 1c             	add    esp,0x1c
c00190f6:	c3                   	ret    

c00190f7 <x87Handler(regs*)>:
c00190f7:	56                   	push   esi
c00190f8:	53                   	push   ebx
c00190f9:	83 ec 34             	sub    esp,0x34
c00190fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019100:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019103:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019107:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001910c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0019114:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019119:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019121:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019125:	50                   	push   eax
c0019126:	8d 44 24 17          	lea    eax,[esp+0x17]
c001912a:	50                   	push   eax
c001912b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001912f:	50                   	push   eax
c0019130:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019134:	e8 89 f6 ff ff       	call   c00187c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019139:	83 c4 10             	add    esp,0x10
c001913c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0019140:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019144:	8a 00                	mov    al,BYTE PTR [eax]
c0019146:	3c d9                	cmp    al,0xd9
c0019148:	0f 85 3a 02 00 00    	jne    c0019388 <x87Handler(regs*)+0x291>
c001914e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019152:	40                   	inc    eax
c0019153:	8a 00                	mov    al,BYTE PTR [eax]
c0019155:	0f b6 c0             	movzx  eax,al
c0019158:	2d e0 00 00 00       	sub    eax,0xe0
c001915d:	83 f8 0e             	cmp    eax,0xe
c0019160:	0f 87 21 02 00 00    	ja     c0019387 <x87Handler(regs*)+0x290>
c0019166:	8b 04 85 88 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f78]
c001916d:	ff e0                	jmp    eax
c001916f:	e8 83 f9 ff ff       	call   c0018af7 <fpuGet0()>
c0019174:	83 ec 08             	sub    esp,0x8
c0019177:	52                   	push   edx
c0019178:	50                   	push   eax
c0019179:	e8 15 fe ff ff       	call   c0018f93 <fpuPush(unsigned long long)>
c001917e:	83 c4 10             	add    esp,0x10
c0019181:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019185:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019188:	8d 50 02             	lea    edx,[eax+0x2]
c001918b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001918f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019192:	b0 01                	mov    al,0x1
c0019194:	e9 f2 04 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c0019199:	e8 64 f9 ff ff       	call   c0018b02 <fpuGet1()>
c001919e:	83 ec 08             	sub    esp,0x8
c00191a1:	52                   	push   edx
c00191a2:	50                   	push   eax
c00191a3:	e8 eb fd ff ff       	call   c0018f93 <fpuPush(unsigned long long)>
c00191a8:	83 c4 10             	add    esp,0x10
c00191ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00191af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191b2:	8d 50 02             	lea    edx,[eax+0x2]
c00191b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00191b9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00191bc:	b0 01                	mov    al,0x1
c00191be:	e9 c8 04 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c00191c3:	83 ec 0c             	sub    esp,0xc
c00191c6:	6a 00                	push   0x0
c00191c8:	e8 7b fc ff ff       	call   c0018e48 <fpuGetReg(int)>
c00191cd:	83 c4 10             	add    esp,0x10
c00191d0:	83 ec 08             	sub    esp,0x8
c00191d3:	52                   	push   edx
c00191d4:	50                   	push   eax
c00191d5:	e8 51 fb ff ff       	call   c0018d2b <fpuChs(unsigned long long)>
c00191da:	83 c4 10             	add    esp,0x10
c00191dd:	83 ec 04             	sub    esp,0x4
c00191e0:	52                   	push   edx
c00191e1:	50                   	push   eax
c00191e2:	6a 00                	push   0x0
c00191e4:	e8 f7 fc ff ff       	call   c0018ee0 <fpuSetReg(int, unsigned long long)>
c00191e9:	83 c4 10             	add    esp,0x10
c00191ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00191f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191f3:	8d 50 02             	lea    edx,[eax+0x2]
c00191f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00191fa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00191fd:	83 ec 0c             	sub    esp,0xc
c0019200:	68 24 80 02 c0       	push   0xc0028024
c0019205:	e8 c9 04 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c001920a:	83 c4 10             	add    esp,0x10
c001920d:	b0 01                	mov    al,0x1
c001920f:	e9 77 04 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c0019214:	83 ec 0c             	sub    esp,0xc
c0019217:	6a 00                	push   0x0
c0019219:	e8 2a fc ff ff       	call   c0018e48 <fpuGetReg(int)>
c001921e:	83 c4 10             	add    esp,0x10
c0019221:	83 ec 08             	sub    esp,0x8
c0019224:	52                   	push   edx
c0019225:	50                   	push   eax
c0019226:	e8 e3 fa ff ff       	call   c0018d0e <fpuAbs(unsigned long long)>
c001922b:	83 c4 10             	add    esp,0x10
c001922e:	83 ec 04             	sub    esp,0x4
c0019231:	52                   	push   edx
c0019232:	50                   	push   eax
c0019233:	6a 00                	push   0x0
c0019235:	e8 a6 fc ff ff       	call   c0018ee0 <fpuSetReg(int, unsigned long long)>
c001923a:	83 c4 10             	add    esp,0x10
c001923d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019241:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019244:	8d 50 02             	lea    edx,[eax+0x2]
c0019247:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001924b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001924e:	83 ec 0c             	sub    esp,0xc
c0019251:	68 30 80 02 c0       	push   0xc0028030
c0019256:	e8 78 04 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c001925b:	83 c4 10             	add    esp,0x10
c001925e:	b0 01                	mov    al,0x1
c0019260:	e9 26 04 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c0019265:	e8 f0 f8 ff ff       	call   c0018b5a <fpuGetLog210()>
c001926a:	83 ec 08             	sub    esp,0x8
c001926d:	52                   	push   edx
c001926e:	50                   	push   eax
c001926f:	e8 1f fd ff ff       	call   c0018f93 <fpuPush(unsigned long long)>
c0019274:	83 c4 10             	add    esp,0x10
c0019277:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001927b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001927e:	8d 50 02             	lea    edx,[eax+0x2]
c0019281:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019285:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019288:	83 ec 0c             	sub    esp,0xc
c001928b:	68 3c 80 02 c0       	push   0xc002803c
c0019290:	e8 3e 04 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0019295:	83 c4 10             	add    esp,0x10
c0019298:	b0 01                	mov    al,0x1
c001929a:	e9 ec 03 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c001929f:	e8 74 f8 ff ff       	call   c0018b18 <fpuGetLog2E()>
c00192a4:	83 ec 08             	sub    esp,0x8
c00192a7:	52                   	push   edx
c00192a8:	50                   	push   eax
c00192a9:	e8 e5 fc ff ff       	call   c0018f93 <fpuPush(unsigned long long)>
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00192b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00192b8:	8d 50 02             	lea    edx,[eax+0x2]
c00192bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00192bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00192c2:	83 ec 0c             	sub    esp,0xc
c00192c5:	68 48 80 02 c0       	push   0xc0028048
c00192ca:	e8 04 04 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c00192cf:	83 c4 10             	add    esp,0x10
c00192d2:	b0 01                	mov    al,0x1
c00192d4:	e9 b2 03 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c00192d9:	e8 2f f8 ff ff       	call   c0018b0d <fpuGetPi()>
c00192de:	83 ec 08             	sub    esp,0x8
c00192e1:	52                   	push   edx
c00192e2:	50                   	push   eax
c00192e3:	e8 ab fc ff ff       	call   c0018f93 <fpuPush(unsigned long long)>
c00192e8:	83 c4 10             	add    esp,0x10
c00192eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00192ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00192f2:	8d 50 02             	lea    edx,[eax+0x2]
c00192f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00192f9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00192fc:	83 ec 0c             	sub    esp,0xc
c00192ff:	68 54 80 02 c0       	push   0xc0028054
c0019304:	e8 ca 03 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0019309:	83 c4 10             	add    esp,0x10
c001930c:	b0 01                	mov    al,0x1
c001930e:	e9 78 03 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c0019313:	e8 63 f8 ff ff       	call   c0018b7b <fpuGetLog102()>
c0019318:	83 ec 08             	sub    esp,0x8
c001931b:	52                   	push   edx
c001931c:	50                   	push   eax
c001931d:	e8 71 fc ff ff       	call   c0018f93 <fpuPush(unsigned long long)>
c0019322:	83 c4 10             	add    esp,0x10
c0019325:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019329:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001932c:	8d 50 02             	lea    edx,[eax+0x2]
c001932f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019333:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019336:	83 ec 0c             	sub    esp,0xc
c0019339:	68 60 80 02 c0       	push   0xc0028060
c001933e:	e8 90 03 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c0019343:	83 c4 10             	add    esp,0x10
c0019346:	b0 01                	mov    al,0x1
c0019348:	e9 3e 03 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c001934d:	e8 e7 f7 ff ff       	call   c0018b39 <fpuGetLogE2()>
c0019352:	83 ec 08             	sub    esp,0x8
c0019355:	52                   	push   edx
c0019356:	50                   	push   eax
c0019357:	e8 37 fc ff ff       	call   c0018f93 <fpuPush(unsigned long long)>
c001935c:	83 c4 10             	add    esp,0x10
c001935f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019363:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019366:	8d 50 02             	lea    edx,[eax+0x2]
c0019369:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001936d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019370:	83 ec 0c             	sub    esp,0xc
c0019373:	68 6c 80 02 c0       	push   0xc002806c
c0019378:	e8 56 03 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c001937d:	83 c4 10             	add    esp,0x10
c0019380:	b0 01                	mov    al,0x1
c0019382:	e9 04 03 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c0019387:	90                   	nop
c0019388:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001938c:	8a 00                	mov    al,BYTE PTR [eax]
c001938e:	3c d8                	cmp    al,0xd8
c0019390:	0f 85 85 00 00 00    	jne    c001941b <x87Handler(regs*)+0x324>
c0019396:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001939a:	40                   	inc    eax
c001939b:	8a 00                	mov    al,BYTE PTR [eax]
c001939d:	3c bf                	cmp    al,0xbf
c001939f:	76 7a                	jbe    c001941b <x87Handler(regs*)+0x324>
c00193a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193a5:	40                   	inc    eax
c00193a6:	8a 00                	mov    al,BYTE PTR [eax]
c00193a8:	3c c7                	cmp    al,0xc7
c00193aa:	77 6f                	ja     c001941b <x87Handler(regs*)+0x324>
c00193ac:	83 ec 0c             	sub    esp,0xc
c00193af:	68 77 80 02 c0       	push   0xc0028077
c00193b4:	e8 1a 03 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c00193b9:	83 c4 10             	add    esp,0x10
c00193bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193c0:	40                   	inc    eax
c00193c1:	8a 00                	mov    al,BYTE PTR [eax]
c00193c3:	0f b6 c0             	movzx  eax,al
c00193c6:	2d c0 00 00 00       	sub    eax,0xc0
c00193cb:	83 ec 0c             	sub    esp,0xc
c00193ce:	50                   	push   eax
c00193cf:	e8 74 fa ff ff       	call   c0018e48 <fpuGetReg(int)>
c00193d4:	83 c4 10             	add    esp,0x10
c00193d7:	89 c3                	mov    ebx,eax
c00193d9:	89 d6                	mov    esi,edx
c00193db:	83 ec 0c             	sub    esp,0xc
c00193de:	6a 00                	push   0x0
c00193e0:	e8 63 fa ff ff       	call   c0018e48 <fpuGetReg(int)>
c00193e5:	83 c4 10             	add    esp,0x10
c00193e8:	56                   	push   esi
c00193e9:	53                   	push   ebx
c00193ea:	52                   	push   edx
c00193eb:	50                   	push   eax
c00193ec:	e8 e2 f8 ff ff       	call   c0018cd3 <fpuAdd(unsigned long long, unsigned long long)>
c00193f1:	83 c4 10             	add    esp,0x10
c00193f4:	83 ec 04             	sub    esp,0x4
c00193f7:	52                   	push   edx
c00193f8:	50                   	push   eax
c00193f9:	6a 00                	push   0x0
c00193fb:	e8 e0 fa ff ff       	call   c0018ee0 <fpuSetReg(int, unsigned long long)>
c0019400:	83 c4 10             	add    esp,0x10
c0019403:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019407:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001940a:	8d 50 02             	lea    edx,[eax+0x2]
c001940d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019411:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019414:	b0 01                	mov    al,0x1
c0019416:	e9 70 02 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c001941b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001941f:	8a 00                	mov    al,BYTE PTR [eax]
c0019421:	3c d8                	cmp    al,0xd8
c0019423:	75 7f                	jne    c00194a4 <x87Handler(regs*)+0x3ad>
c0019425:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019429:	40                   	inc    eax
c001942a:	8a 00                	mov    al,BYTE PTR [eax]
c001942c:	3c f7                	cmp    al,0xf7
c001942e:	76 74                	jbe    c00194a4 <x87Handler(regs*)+0x3ad>
c0019430:	83 ec 0c             	sub    esp,0xc
c0019433:	68 77 80 02 c0       	push   0xc0028077
c0019438:	e8 96 02 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c001943d:	83 c4 10             	add    esp,0x10
c0019440:	83 ec 0c             	sub    esp,0xc
c0019443:	6a 00                	push   0x0
c0019445:	e8 fe f9 ff ff       	call   c0018e48 <fpuGetReg(int)>
c001944a:	83 c4 10             	add    esp,0x10
c001944d:	89 c3                	mov    ebx,eax
c001944f:	89 d6                	mov    esi,edx
c0019451:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019455:	40                   	inc    eax
c0019456:	8a 00                	mov    al,BYTE PTR [eax]
c0019458:	0f b6 c0             	movzx  eax,al
c001945b:	2d f8 00 00 00       	sub    eax,0xf8
c0019460:	83 ec 0c             	sub    esp,0xc
c0019463:	50                   	push   eax
c0019464:	e8 df f9 ff ff       	call   c0018e48 <fpuGetReg(int)>
c0019469:	83 c4 10             	add    esp,0x10
c001946c:	56                   	push   esi
c001946d:	53                   	push   ebx
c001946e:	52                   	push   edx
c001946f:	50                   	push   eax
c0019470:	e8 67 f9 ff ff       	call   c0018ddc <fpuDivide(unsigned long long, unsigned long long)>
c0019475:	83 c4 10             	add    esp,0x10
c0019478:	83 ec 04             	sub    esp,0x4
c001947b:	52                   	push   edx
c001947c:	50                   	push   eax
c001947d:	6a 00                	push   0x0
c001947f:	e8 5c fa ff ff       	call   c0018ee0 <fpuSetReg(int, unsigned long long)>
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001948b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001948e:	8d 50 02             	lea    edx,[eax+0x2]
c0019491:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019495:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019498:	e8 ae fb ff ff       	call   c001904b <fpuPop()>
c001949d:	b0 01                	mov    al,0x1
c001949f:	e9 e7 01 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c00194a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00194a8:	8a 00                	mov    al,BYTE PTR [eax]
c00194aa:	3c de                	cmp    al,0xde
c00194ac:	0f 85 92 00 00 00    	jne    c0019544 <x87Handler(regs*)+0x44d>
c00194b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00194b6:	40                   	inc    eax
c00194b7:	8a 00                	mov    al,BYTE PTR [eax]
c00194b9:	3c f7                	cmp    al,0xf7
c00194bb:	0f 86 83 00 00 00    	jbe    c0019544 <x87Handler(regs*)+0x44d>
c00194c1:	83 ec 0c             	sub    esp,0xc
c00194c4:	68 77 80 02 c0       	push   0xc0028077
c00194c9:	e8 05 02 00 00       	call   c00196d3 <Krnl::panic(char const*)>
c00194ce:	83 c4 10             	add    esp,0x10
c00194d1:	83 ec 0c             	sub    esp,0xc
c00194d4:	6a 00                	push   0x0
c00194d6:	e8 6d f9 ff ff       	call   c0018e48 <fpuGetReg(int)>
c00194db:	83 c4 10             	add    esp,0x10
c00194de:	89 c3                	mov    ebx,eax
c00194e0:	89 d6                	mov    esi,edx
c00194e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00194e6:	40                   	inc    eax
c00194e7:	8a 00                	mov    al,BYTE PTR [eax]
c00194e9:	0f b6 c0             	movzx  eax,al
c00194ec:	2d f8 00 00 00       	sub    eax,0xf8
c00194f1:	83 ec 0c             	sub    esp,0xc
c00194f4:	50                   	push   eax
c00194f5:	e8 4e f9 ff ff       	call   c0018e48 <fpuGetReg(int)>
c00194fa:	83 c4 10             	add    esp,0x10
c00194fd:	56                   	push   esi
c00194fe:	53                   	push   ebx
c00194ff:	52                   	push   edx
c0019500:	50                   	push   eax
c0019501:	e8 d6 f8 ff ff       	call   c0018ddc <fpuDivide(unsigned long long, unsigned long long)>
c0019506:	83 c4 10             	add    esp,0x10
c0019509:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001950d:	41                   	inc    ecx
c001950e:	8a 09                	mov    cl,BYTE PTR [ecx]
c0019510:	0f b6 c9             	movzx  ecx,cl
c0019513:	81 e9 f8 00 00 00    	sub    ecx,0xf8
c0019519:	83 ec 04             	sub    esp,0x4
c001951c:	52                   	push   edx
c001951d:	50                   	push   eax
c001951e:	51                   	push   ecx
c001951f:	e8 bc f9 ff ff       	call   c0018ee0 <fpuSetReg(int, unsigned long long)>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001952b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001952e:	8d 50 02             	lea    edx,[eax+0x2]
c0019531:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019535:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019538:	e8 0e fb ff ff       	call   c001904b <fpuPop()>
c001953d:	b0 01                	mov    al,0x1
c001953f:	e9 47 01 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c0019544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019548:	8a 00                	mov    al,BYTE PTR [eax]
c001954a:	3c d9                	cmp    al,0xd9
c001954c:	75 4a                	jne    c0019598 <x87Handler(regs*)+0x4a1>
c001954e:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019552:	84 c0                	test   al,al
c0019554:	75 42                	jne    c0019598 <x87Handler(regs*)+0x4a1>
c0019556:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001955a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001955e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019562:	8b 00                	mov    eax,DWORD PTR [eax]
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	50                   	push   eax
c0019568:	e8 9c f4 ff ff       	call   c0018a09 <fpu32ToInternal(unsigned int)>
c001956d:	83 c4 10             	add    esp,0x10
c0019570:	83 ec 08             	sub    esp,0x8
c0019573:	52                   	push   edx
c0019574:	50                   	push   eax
c0019575:	e8 19 fa ff ff       	call   c0018f93 <fpuPush(unsigned long long)>
c001957a:	83 c4 10             	add    esp,0x10
c001957d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019581:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019584:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019588:	01 c2                	add    edx,eax
c001958a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001958e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019591:	b0 01                	mov    al,0x1
c0019593:	e9 f3 00 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c0019598:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001959c:	8a 00                	mov    al,BYTE PTR [eax]
c001959e:	3c db                	cmp    al,0xdb
c00195a0:	75 45                	jne    c00195e7 <x87Handler(regs*)+0x4f0>
c00195a2:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00195a6:	3c 03                	cmp    al,0x3
c00195a8:	75 3d                	jne    c00195e7 <x87Handler(regs*)+0x4f0>
c00195aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00195ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00195b2:	e8 94 fa ff ff       	call   c001904b <fpuPop()>
c00195b7:	83 ec 08             	sub    esp,0x8
c00195ba:	52                   	push   edx
c00195bb:	50                   	push   eax
c00195bc:	e8 84 f4 ff ff       	call   c0018a45 <fpuFloatToLong(unsigned long long)>
c00195c1:	83 c4 10             	add    esp,0x10
c00195c4:	89 c2                	mov    edx,eax
c00195c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195ca:	89 10                	mov    DWORD PTR [eax],edx
c00195cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00195d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00195d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195d7:	01 c2                	add    edx,eax
c00195d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00195dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00195e0:	b0 01                	mov    al,0x1
c00195e2:	e9 a4 00 00 00       	jmp    c001968b <x87Handler(regs*)+0x594>
c00195e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00195eb:	8a 00                	mov    al,BYTE PTR [eax]
c00195ed:	3c dd                	cmp    al,0xdd
c00195ef:	75 4b                	jne    c001963c <x87Handler(regs*)+0x545>
c00195f1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00195f5:	84 c0                	test   al,al
c00195f7:	75 43                	jne    c001963c <x87Handler(regs*)+0x545>
c00195f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00195fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019601:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019605:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019608:	8b 00                	mov    eax,DWORD PTR [eax]
c001960a:	83 ec 08             	sub    esp,0x8
c001960d:	52                   	push   edx
c001960e:	50                   	push   eax
c001960f:	e8 14 f4 ff ff       	call   c0018a28 <fpu64ToInternal(unsigned long long)>
c0019614:	83 c4 10             	add    esp,0x10
c0019617:	83 ec 08             	sub    esp,0x8
c001961a:	52                   	push   edx
c001961b:	50                   	push   eax
c001961c:	e8 72 f9 ff ff       	call   c0018f93 <fpuPush(unsigned long long)>
c0019621:	83 c4 10             	add    esp,0x10
c0019624:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019628:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001962b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001962f:	01 c2                	add    edx,eax
c0019631:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019635:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019638:	b0 01                	mov    al,0x1
c001963a:	eb 4f                	jmp    c001968b <x87Handler(regs*)+0x594>
c001963c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019640:	8a 00                	mov    al,BYTE PTR [eax]
c0019642:	3c dd                	cmp    al,0xdd
c0019644:	75 43                	jne    c0019689 <x87Handler(regs*)+0x592>
c0019646:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001964a:	3c 03                	cmp    al,0x3
c001964c:	75 3b                	jne    c0019689 <x87Handler(regs*)+0x592>
c001964e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019652:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019656:	e8 f0 f9 ff ff       	call   c001904b <fpuPop()>
c001965b:	83 ec 08             	sub    esp,0x8
c001965e:	52                   	push   edx
c001965f:	50                   	push   eax
c0019660:	e8 87 f3 ff ff       	call   c00189ec <fpuInternalTo64(unsigned long long)>
c0019665:	83 c4 10             	add    esp,0x10
c0019668:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001966c:	89 01                	mov    DWORD PTR [ecx],eax
c001966e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019671:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019675:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019678:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001967c:	01 c2                	add    edx,eax
c001967e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019682:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019685:	b0 01                	mov    al,0x1
c0019687:	eb 02                	jmp    c001968b <x87Handler(regs*)+0x594>
c0019689:	b0 00                	mov    al,0x0
c001968b:	83 c4 34             	add    esp,0x34
c001968e:	5b                   	pop    ebx
c001968f:	5e                   	pop    esi
c0019690:	c3                   	ret    

c0019691 <__static_initialization_and_destruction_0(int, int)>:
c0019691:	83 ec 0c             	sub    esp,0xc
c0019694:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019699:	75 1a                	jne    c00196b5 <__static_initialization_and_destruction_0(int, int)+0x24>
c001969b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00196a3:	75 10                	jne    c00196b5 <__static_initialization_and_destruction_0(int, int)+0x24>
c00196a5:	83 ec 0c             	sub    esp,0xc
c00196a8:	68 40 af 02 c0       	push   0xc002af40
c00196ad:	e8 a4 bf 00 00       	call   c0025656 <_FPUState::_FPUState()>
c00196b2:	83 c4 10             	add    esp,0x10
c00196b5:	90                   	nop
c00196b6:	83 c4 0c             	add    esp,0xc
c00196b9:	c3                   	ret    

c00196ba <_GLOBAL__sub_I_fpuState>:
c00196ba:	83 ec 0c             	sub    esp,0xc
c00196bd:	83 ec 08             	sub    esp,0x8
c00196c0:	68 ff ff 00 00       	push   0xffff
c00196c5:	6a 01                	push   0x1
c00196c7:	e8 c5 ff ff ff       	call   c0019691 <__static_initialization_and_destruction_0(int, int)>
c00196cc:	83 c4 10             	add    esp,0x10
c00196cf:	83 c4 0c             	add    esp,0xc
c00196d2:	c3                   	ret    

c00196d3 <Krnl::panic(char const*)>:
c00196d3:	55                   	push   ebp
c00196d4:	89 e5                	mov    ebp,esp
c00196d6:	53                   	push   ebx
c00196d7:	50                   	push   eax
c00196d8:	a1 88 af 02 c0       	mov    eax,ds:0xc002af88
c00196dd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00196e0:	85 c0                	test   eax,eax
c00196e2:	74 02                	je     c00196e6 <Krnl::panic(char const*)+0x13>
c00196e4:	ff d0                	call   eax
c00196e6:	fa                   	cli    
c00196e7:	c6 05 8c af 02 c0 01 	mov    BYTE PTR ds:0xc002af8c,0x1
c00196ee:	83 ec 08             	sub    esp,0x8
c00196f1:	c6 05 c0 93 02 c0 00 	mov    BYTE PTR ds:0xc00293c0,0x0
c00196f8:	53                   	push   ebx
c00196f9:	68 c4 80 02 c0       	push   0xc00280c4
c00196fe:	e8 4e 8b ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019703:	58                   	pop    eax
c0019704:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019709:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001970f:	e8 81 6d ff ff       	call   c0010495 <setActiveTerminal(VgaText*)>
c0019714:	83 c4 0c             	add    esp,0xc
c0019717:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001971c:	6a 01                	push   0x1
c001971e:	6a 0f                	push   0xf
c0019720:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019726:	e8 a9 67 ff ff       	call   c000fed4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001972b:	5a                   	pop    edx
c001972c:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019731:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019737:	e8 fa 6f ff ff       	call   c0010736 <VgaText::clearScreen()>
c001973c:	59                   	pop    ecx
c001973d:	58                   	pop    eax
c001973e:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019743:	68 dd 80 02 c0       	push   0xc00280dd
c0019748:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001974e:	e8 61 71 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0019753:	58                   	pop    eax
c0019754:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019759:	5a                   	pop    edx
c001975a:	68 84 81 02 c0       	push   0xc0028184
c001975f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019765:	e8 4a 71 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c001976a:	59                   	pop    ecx
c001976b:	58                   	pop    eax
c001976c:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019771:	68 f9 80 02 c0       	push   0xc00280f9
c0019776:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001977c:	e8 33 71 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0019781:	58                   	pop    eax
c0019782:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019787:	5a                   	pop    edx
c0019788:	53                   	push   ebx
c0019789:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001978f:	e8 20 71 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0019794:	59                   	pop    ecx
c0019795:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001979a:	5b                   	pop    ebx
c001979b:	68 19 81 02 c0       	push   0xc0028119
c00197a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197a6:	e8 09 71 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00197ab:	58                   	pop    eax
c00197ac:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00197b1:	5a                   	pop    edx
c00197b2:	68 c0 81 02 c0       	push   0xc00281c0
c00197b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197bd:	e8 f2 70 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00197c2:	59                   	pop    ecx
c00197c3:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00197c8:	5b                   	pop    ebx
c00197c9:	68 f9 80 02 c0       	push   0xc00280f9
c00197ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197d4:	e8 db 70 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00197d9:	58                   	pop    eax
c00197da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00197df:	5a                   	pop    edx
c00197e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00197e3:	83 c0 0c             	add    eax,0xc
c00197e6:	50                   	push   eax
c00197e7:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00197ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197f2:	e8 bd 70 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00197f7:	59                   	pop    ecx
c00197f8:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00197fd:	5b                   	pop    ebx
c00197fe:	68 18 81 02 c0       	push   0xc0028118
c0019803:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019809:	e8 a6 70 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c001980e:	58                   	pop    eax
c001980f:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019814:	5a                   	pop    edx
c0019815:	68 ec 81 02 c0       	push   0xc00281ec
c001981a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019820:	e8 8f 70 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0019825:	59                   	pop    ecx
c0019826:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001982b:	5b                   	pop    ebx
c001982c:	68 2c 82 02 c0       	push   0xc002822c
c0019831:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019837:	e8 78 70 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c001983c:	58                   	pop    eax
c001983d:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019842:	5a                   	pop    edx
c0019843:	68 04 81 02 c0       	push   0xc0028104
c0019848:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001984e:	e8 61 70 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0019853:	59                   	pop    ecx
c0019854:	5b                   	pop    ebx
c0019855:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019858:	68 1c 81 02 c0       	push   0xc002811c
c001985d:	e8 ef 89 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019862:	58                   	pop    eax
c0019863:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019866:	5a                   	pop    edx
c0019867:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001986a:	68 25 81 02 c0       	push   0xc0028125
c001986f:	e8 dd 89 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019874:	59                   	pop    ecx
c0019875:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019878:	5b                   	pop    ebx
c0019879:	8b 00                	mov    eax,DWORD PTR [eax]
c001987b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001987e:	68 2e 81 02 c0       	push   0xc002812e
c0019883:	e8 c9 89 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019888:	58                   	pop    eax
c0019889:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001988e:	5a                   	pop    edx
c001988f:	68 70 82 02 c0       	push   0xc0028270
c0019894:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001989a:	e8 15 70 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c001989f:	59                   	pop    ecx
c00198a0:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00198a5:	5b                   	pop    ebx
c00198a6:	68 37 81 02 c0       	push   0xc0028137
c00198ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198b1:	e8 fe 6f ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00198b6:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00198bb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00198c1:	e8 a2 ba 00 00       	call   c0025368 <CPU::readCR0()>
c00198c6:	5a                   	pop    edx
c00198c7:	59                   	pop    ecx
c00198c8:	50                   	push   eax
c00198c9:	53                   	push   ebx
c00198ca:	e8 0b 70 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00198cf:	5b                   	pop    ebx
c00198d0:	58                   	pop    eax
c00198d1:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00198d6:	68 41 81 02 c0       	push   0xc0028141
c00198db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198e1:	e8 ce 6f ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00198e6:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00198eb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00198f1:	e8 6d bd 00 00       	call   c0025663 <CPU::readCR2()>
c00198f6:	5a                   	pop    edx
c00198f7:	59                   	pop    ecx
c00198f8:	50                   	push   eax
c00198f9:	53                   	push   ebx
c00198fa:	e8 db 6f ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00198ff:	5b                   	pop    ebx
c0019900:	58                   	pop    eax
c0019901:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019906:	68 4b 81 02 c0       	push   0xc002814b
c001990b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019911:	e8 9e 6f ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0019916:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001991b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019921:	e8 cf b6 00 00       	call   c0024ff5 <CPU::readCR3()>
c0019926:	5a                   	pop    edx
c0019927:	59                   	pop    ecx
c0019928:	50                   	push   eax
c0019929:	53                   	push   ebx
c001992a:	e8 ab 6f ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001992f:	5b                   	pop    ebx
c0019930:	58                   	pop    eax
c0019931:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019936:	68 5e 81 02 c0       	push   0xc002815e
c001993b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019941:	e8 6e 6f ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0019946:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001994b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019951:	e8 dc bc 00 00       	call   c0025632 <CPU::readCR4()>
c0019956:	5a                   	pop    edx
c0019957:	59                   	pop    ecx
c0019958:	50                   	push   eax
c0019959:	53                   	push   ebx
c001995a:	e8 7b 6f ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001995f:	5b                   	pop    ebx
c0019960:	58                   	pop    eax
c0019961:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019966:	68 68 81 02 c0       	push   0xc0028168
c001996b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019971:	e8 3e 6f ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0019976:	5a                   	pop    edx
c0019977:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c001997c:	59                   	pop    ecx
c001997d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019986:	50                   	push   eax
c0019987:	e8 4e 6f ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001998c:	5b                   	pop    ebx
c001998d:	58                   	pop    eax
c001998e:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c0019993:	68 7f 81 02 c0       	push   0xc002817f
c0019998:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001999e:	e8 11 6f ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00199a3:	5a                   	pop    edx
c00199a4:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00199a9:	59                   	pop    ecx
c00199aa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00199b0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199b3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00199b6:	50                   	push   eax
c00199b7:	e8 1e 6f ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00199bc:	5b                   	pop    ebx
c00199bd:	58                   	pop    eax
c00199be:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00199c3:	68 7f 81 02 c0       	push   0xc002817f
c00199c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ce:	e8 e1 6e ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00199d3:	59                   	pop    ecx
c00199d4:	a1 94 b9 02 c0       	mov    eax,ds:0xc002b994
c00199d9:	5b                   	pop    ebx
c00199da:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00199e0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199e3:	8b 12                	mov    edx,DWORD PTR [edx]
c00199e5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00199e8:	50                   	push   eax
c00199e9:	e8 ec 6e ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00199ee:	83 c4 10             	add    esp,0x10
c00199f1:	b2 fe                	mov    dl,0xfe
c00199f3:	e4 60                	in     al,0x60
c00199f5:	3c 1c                	cmp    al,0x1c
c00199f7:	74 04                	je     c00199fd <Krnl::panic(char const*)+0x32a>
c00199f9:	3c 5a                	cmp    al,0x5a
c00199fb:	75 f6                	jne    c00199f3 <Krnl::panic(char const*)+0x320>
c00199fd:	e4 64                	in     al,0x64
c00199ff:	a8 02                	test   al,0x2
c0019a01:	75 fa                	jne    c00199fd <Krnl::panic(char const*)+0x32a>
c0019a03:	88 d0                	mov    al,dl
c0019a05:	e6 64                	out    0x64,al
c0019a07:	fa                   	cli    
c0019a08:	f4                   	hlt    
c0019a09:	eb e8                	jmp    c00199f3 <Krnl::panic(char const*)+0x320>

c0019a0b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019a0b:	55                   	push   ebp
c0019a0c:	57                   	push   edi
c0019a0d:	56                   	push   esi
c0019a0e:	53                   	push   ebx
c0019a0f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a15:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019a1c:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019a1e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019a21:	80 fb 40             	cmp    bl,0x40
c0019a24:	75 1b                	jne    c0019a41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019a26:	8a 16                	mov    dl,BYTE PTR [esi]
c0019a28:	84 d2                	test   dl,dl
c0019a2a:	0f 84 f1 00 00 00    	je     c0019b21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019a30:	8d 46 01             	lea    eax,[esi+0x1]
c0019a33:	80 fa 3a             	cmp    dl,0x3a
c0019a36:	74 04                	je     c0019a3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019a38:	89 c6                	mov    esi,eax
c0019a3a:	eb ea                	jmp    c0019a26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019a3c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019a3f:	89 c6                	mov    esi,eax
c0019a41:	50                   	push   eax
c0019a42:	6a 40                	push   0x40
c0019a44:	6a 00                	push   0x0
c0019a46:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a4a:	50                   	push   eax
c0019a4b:	e8 96 6c fe ff       	call   c00006e6 <memset>
c0019a50:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019a57:	31 c0                	xor    eax,eax
c0019a59:	83 c4 10             	add    esp,0x10
c0019a5c:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019a5e:	84 c9                	test   cl,cl
c0019a60:	0f 84 bb 00 00 00    	je     c0019b21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019a66:	3d c7 00 00 00       	cmp    eax,0xc7
c0019a6b:	0f 8f b0 00 00 00    	jg     c0019b21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019a71:	80 f9 0a             	cmp    cl,0xa
c0019a74:	0f 85 98 00 00 00    	jne    c0019b12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019a7a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019a7f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019a83:	a8 df                	test   al,0xdf
c0019a85:	0f 94 c1             	sete   cl
c0019a88:	3c 23                	cmp    al,0x23
c0019a8a:	0f 94 c2             	sete   dl
c0019a8d:	08 d1                	or     cl,dl
c0019a8f:	75 4a                	jne    c0019adb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019a91:	8d 50 f7             	lea    edx,[eax-0x9]
c0019a94:	80 fa 01             	cmp    dl,0x1
c0019a97:	76 42                	jbe    c0019adb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019a99:	3c 5b                	cmp    al,0x5b
c0019a9b:	75 42                	jne    c0019adf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0019a9d:	80 fb 40             	cmp    bl,0x40
c0019aa0:	75 39                	jne    c0019adb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019aa2:	83 ec 0c             	sub    esp,0xc
c0019aa5:	8d 54 24 65          	lea    edx,[esp+0x65]
c0019aa9:	52                   	push   edx
c0019aaa:	e8 54 6c fe ff       	call   c0000703 <strlen>
c0019aaf:	83 c4 10             	add    esp,0x10
c0019ab2:	83 f8 3f             	cmp    eax,0x3f
c0019ab5:	77 6a                	ja     c0019b21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ab7:	50                   	push   eax
c0019ab8:	50                   	push   eax
c0019ab9:	8d 54 24 61          	lea    edx,[esp+0x61]
c0019abd:	52                   	push   edx
c0019abe:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019ac2:	52                   	push   edx
c0019ac3:	e8 bd 6c fe ff       	call   c0000785 <strcpy>
c0019ac8:	58                   	pop    eax
c0019ac9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019acd:	52                   	push   edx
c0019ace:	e8 30 6c fe ff       	call   c0000703 <strlen>
c0019ad3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0019ad8:	83 c4 10             	add    esp,0x10
c0019adb:	31 d2                	xor    edx,edx
c0019add:	eb 3a                	jmp    c0019b19 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0019adf:	80 fb 40             	cmp    bl,0x40
c0019ae2:	74 06                	je     c0019aea <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0019ae4:	8d 44 24 58          	lea    eax,[esp+0x58]
c0019ae8:	eb 20                	jmp    c0019b0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0019aea:	50                   	push   eax
c0019aeb:	50                   	push   eax
c0019aec:	55                   	push   ebp
c0019aed:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019af1:	50                   	push   eax
c0019af2:	e8 df 6c fe ff       	call   c00007d6 <strcmp>
c0019af7:	83 c4 10             	add    esp,0x10
c0019afa:	85 c0                	test   eax,eax
c0019afc:	75 dd                	jne    c0019adb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019afe:	eb e4                	jmp    c0019ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0019b00:	8d 50 01             	lea    edx,[eax+0x1]
c0019b03:	80 f9 3d             	cmp    cl,0x3d
c0019b06:	74 1d                	je     c0019b25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0019b08:	89 d0                	mov    eax,edx
c0019b0a:	8a 08                	mov    cl,BYTE PTR [eax]
c0019b0c:	84 c9                	test   cl,cl
c0019b0e:	75 f0                	jne    c0019b00 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0019b10:	eb 0f                	jmp    c0019b21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019b12:	8d 50 01             	lea    edx,[eax+0x1]
c0019b15:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0019b19:	47                   	inc    edi
c0019b1a:	89 d0                	mov    eax,edx
c0019b1c:	e9 3b ff ff ff       	jmp    c0019a5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0019b21:	31 c0                	xor    eax,eax
c0019b23:	eb 33                	jmp    c0019b58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0019b25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019b29:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019b2c:	50                   	push   eax
c0019b2d:	50                   	push   eax
c0019b2e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0019b32:	50                   	push   eax
c0019b33:	56                   	push   esi
c0019b34:	e8 9d 6c fe ff       	call   c00007d6 <strcmp>
c0019b39:	83 c4 10             	add    esp,0x10
c0019b3c:	85 c0                	test   eax,eax
c0019b3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b42:	75 97                	jne    c0019adb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019b44:	51                   	push   ecx
c0019b45:	51                   	push   ecx
c0019b46:	52                   	push   edx
c0019b47:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0019b4e:	e8 32 6c fe ff       	call   c0000785 <strcpy>
c0019b53:	83 c4 10             	add    esp,0x10
c0019b56:	b0 01                	mov    al,0x1
c0019b58:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b5e:	5b                   	pop    ebx
c0019b5f:	5e                   	pop    esi
c0019b60:	5f                   	pop    edi
c0019b61:	5d                   	pop    ebp
c0019b62:	c3                   	ret    

c0019b63 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0019b63:	57                   	push   edi
c0019b64:	56                   	push   esi
c0019b65:	53                   	push   ebx
c0019b66:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b6c:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0019b73:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0019b7a:	53                   	push   ebx
c0019b7b:	e8 83 6b fe ff       	call   c0000703 <strlen>
c0019b80:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b83:	89 c7                	mov    edi,eax
c0019b85:	e8 79 6b fe ff       	call   c0000703 <strlen>
c0019b8a:	83 c4 10             	add    esp,0x10
c0019b8d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0019b91:	31 ff                	xor    edi,edi
c0019b93:	3d ff 00 00 00       	cmp    eax,0xff
c0019b98:	0f 87 18 01 00 00    	ja     c0019cb6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0019b9e:	51                   	push   ecx
c0019b9f:	51                   	push   ecx
c0019ba0:	56                   	push   esi
c0019ba1:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0019ba5:	56                   	push   esi
c0019ba6:	e8 da 6b fe ff       	call   c0000785 <strcpy>
c0019bab:	58                   	pop    eax
c0019bac:	5a                   	pop    edx
c0019bad:	68 68 86 02 c0       	push   0xc0028668
c0019bb2:	56                   	push   esi
c0019bb3:	e8 84 6c fe ff       	call   c000083c <strcat>
c0019bb8:	59                   	pop    ecx
c0019bb9:	58                   	pop    eax
c0019bba:	53                   	push   ebx
c0019bbb:	56                   	push   esi
c0019bbc:	e8 7b 6c fe ff       	call   c000083c <strcat>
c0019bc1:	58                   	pop    eax
c0019bc2:	5a                   	pop    edx
c0019bc3:	68 96 82 02 c0       	push   0xc0028296
c0019bc8:	56                   	push   esi
c0019bc9:	e8 6e 6c fe ff       	call   c000083c <strcat>
c0019bce:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019bd5:	e8 88 85 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019bda:	83 c4 0c             	add    esp,0xc
c0019bdd:	89 c3                	mov    ebx,eax
c0019bdf:	ff 35 94 b9 02 c0    	push   DWORD PTR ds:0xc002b994
c0019be5:	56                   	push   esi
c0019be6:	50                   	push   eax
c0019be7:	e8 94 8b ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019bec:	59                   	pop    ecx
c0019bed:	5e                   	pop    esi
c0019bee:	6a 01                	push   0x1
c0019bf0:	53                   	push   ebx
c0019bf1:	e8 ee 8b ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c0019bf6:	83 c4 10             	add    esp,0x10
c0019bf9:	85 c0                	test   eax,eax
c0019bfb:	74 08                	je     c0019c05 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0019bfd:	83 ec 0c             	sub    esp,0xc
c0019c00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c02:	53                   	push   ebx
c0019c03:	eb 2e                	jmp    c0019c33 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0019c05:	52                   	push   edx
c0019c06:	8d 44 24 07          	lea    eax,[esp+0x7]
c0019c0a:	50                   	push   eax
c0019c0b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019c0f:	50                   	push   eax
c0019c10:	53                   	push   ebx
c0019c11:	e8 7a 8e ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c0019c16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c1a:	83 c4 10             	add    esp,0x10
c0019c1d:	89 c1                	mov    ecx,eax
c0019c1f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0019c23:	75 13                	jne    c0019c38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0019c25:	83 ec 0c             	sub    esp,0xc
c0019c28:	53                   	push   ebx
c0019c29:	e8 14 8c ff ff       	call   c0012842 <File::close()>
c0019c2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c36:	eb 7b                	jmp    c0019cb3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0019c38:	83 ec 0c             	sub    esp,0xc
c0019c3b:	50                   	push   eax
c0019c3c:	e8 1f 55 ff ff       	call   c000f160 <malloc>
c0019c41:	89 c6                	mov    esi,eax
c0019c43:	58                   	pop    eax
c0019c44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c46:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019c4a:	52                   	push   edx
c0019c4b:	56                   	push   esi
c0019c4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c54:	53                   	push   ebx
c0019c55:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c58:	83 c4 20             	add    esp,0x20
c0019c5b:	85 c0                	test   eax,eax
c0019c5d:	75 0a                	jne    c0019c69 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0019c5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c63:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0019c67:	74 18                	je     c0019c81 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0019c69:	83 ec 0c             	sub    esp,0xc
c0019c6c:	31 ff                	xor    edi,edi
c0019c6e:	53                   	push   ebx
c0019c6f:	e8 ce 8b ff ff       	call   c0012842 <File::close()>
c0019c74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c7c:	83 c4 10             	add    esp,0x10
c0019c7f:	eb 35                	jmp    c0019cb6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0019c81:	83 ec 0c             	sub    esp,0xc
c0019c84:	53                   	push   ebx
c0019c85:	e8 b8 8b ff ff       	call   c0012842 <File::close()>
c0019c8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c92:	83 c4 0c             	add    esp,0xc
c0019c95:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0019c9c:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0019ca3:	56                   	push   esi
c0019ca4:	e8 62 fd ff ff       	call   c0019a0b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0019ca9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019cac:	89 c7                	mov    edi,eax
c0019cae:	e8 bd 54 ff ff       	call   c000f170 <free>
c0019cb3:	83 c4 10             	add    esp,0x10
c0019cb6:	81 c4 10 01 00 00    	add    esp,0x110
c0019cbc:	89 f8                	mov    eax,edi
c0019cbe:	5b                   	pop    ebx
c0019cbf:	5e                   	pop    esi
c0019cc0:	5f                   	pop    edi
c0019cc1:	c3                   	ret    

c0019cc2 <Reg::getLine(char*, char*, char*)>:
c0019cc2:	57                   	push   edi
c0019cc3:	56                   	push   esi
c0019cc4:	53                   	push   ebx
c0019cc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ccd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019cd1:	57                   	push   edi
c0019cd2:	56                   	push   esi
c0019cd3:	53                   	push   ebx
c0019cd4:	68 9b 82 02 c0       	push   0xc002829b
c0019cd9:	e8 85 fe ff ff       	call   c0019b63 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019cde:	83 c4 10             	add    esp,0x10
c0019ce1:	84 c0                	test   al,al
c0019ce3:	75 10                	jne    c0019cf5 <Reg::getLine(char*, char*, char*)+0x33>
c0019ce5:	57                   	push   edi
c0019ce6:	56                   	push   esi
c0019ce7:	53                   	push   ebx
c0019ce8:	68 c0 82 02 c0       	push   0xc00282c0
c0019ced:	e8 71 fe ff ff       	call   c0019b63 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019cf2:	83 c4 10             	add    esp,0x10
c0019cf5:	5b                   	pop    ebx
c0019cf6:	5e                   	pop    esi
c0019cf7:	5f                   	pop    edi
c0019cf8:	c3                   	ret    

c0019cf9 <Reg::readInt(char*, char*, int*)>:
c0019cf9:	55                   	push   ebp
c0019cfa:	57                   	push   edi
c0019cfb:	56                   	push   esi
c0019cfc:	53                   	push   ebx
c0019cfd:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019d03:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019d07:	57                   	push   edi
c0019d08:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019d0f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019d16:	e8 a7 ff ff ff       	call   c0019cc2 <Reg::getLine(char*, char*, char*)>
c0019d1b:	83 c4 10             	add    esp,0x10
c0019d1e:	84 c0                	test   al,al
c0019d20:	0f 84 b3 00 00 00    	je     c0019dd9 <Reg::readInt(char*, char*, int*)+0xe0>
c0019d26:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0019d2a:	80 fa 2b             	cmp    dl,0x2b
c0019d2d:	74 0c                	je     c0019d3b <Reg::readInt(char*, char*, int*)+0x42>
c0019d2f:	80 fa 2d             	cmp    dl,0x2d
c0019d32:	75 0e                	jne    c0019d42 <Reg::readInt(char*, char*, int*)+0x49>
c0019d34:	ba 01 00 00 00       	mov    edx,0x1
c0019d39:	eb 0b                	jmp    c0019d46 <Reg::readInt(char*, char*, int*)+0x4d>
c0019d3b:	ba 01 00 00 00       	mov    edx,0x1
c0019d40:	eb 02                	jmp    c0019d44 <Reg::readInt(char*, char*, int*)+0x4b>
c0019d42:	31 d2                	xor    edx,edx
c0019d44:	31 c0                	xor    eax,eax
c0019d46:	be 0a 00 00 00       	mov    esi,0xa
c0019d4b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019d50:	75 20                	jne    c0019d72 <Reg::readInt(char*, char*, int*)+0x79>
c0019d52:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019d56:	80 f9 78             	cmp    cl,0x78
c0019d59:	75 0a                	jne    c0019d65 <Reg::readInt(char*, char*, int*)+0x6c>
c0019d5b:	83 c2 02             	add    edx,0x2
c0019d5e:	be 10 00 00 00       	mov    esi,0x10
c0019d63:	eb 0d                	jmp    c0019d72 <Reg::readInt(char*, char*, int*)+0x79>
c0019d65:	80 f9 62             	cmp    cl,0x62
c0019d68:	75 08                	jne    c0019d72 <Reg::readInt(char*, char*, int*)+0x79>
c0019d6a:	83 c2 02             	add    edx,0x2
c0019d6d:	be 02 00 00 00       	mov    esi,0x2
c0019d72:	01 d7                	add    edi,edx
c0019d74:	31 d2                	xor    edx,edx
c0019d76:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019d78:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0019d7c:	80 fb 0d             	cmp    bl,0xd
c0019d7f:	0f 94 c3             	sete   bl
c0019d82:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019d87:	0f 94 c1             	sete   cl
c0019d8a:	08 cb                	or     bl,cl
c0019d8c:	75 3a                	jne    c0019dc8 <Reg::readInt(char*, char*, int*)+0xcf>
c0019d8e:	0f af d6             	imul   edx,esi
c0019d91:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0019d96:	83 fe 10             	cmp    esi,0x10
c0019d99:	75 26                	jne    c0019dc1 <Reg::readInt(char*, char*, int*)+0xc8>
c0019d9b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019d9f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0019da2:	89 e9                	mov    ecx,ebp
c0019da4:	80 f9 05             	cmp    cl,0x5
c0019da7:	77 06                	ja     c0019daf <Reg::readInt(char*, char*, int*)+0xb6>
c0019da9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0019dad:	eb 16                	jmp    c0019dc5 <Reg::readInt(char*, char*, int*)+0xcc>
c0019daf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019db3:	83 e9 61             	sub    ecx,0x61
c0019db6:	80 f9 05             	cmp    cl,0x5
c0019db9:	77 06                	ja     c0019dc1 <Reg::readInt(char*, char*, int*)+0xc8>
c0019dbb:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0019dbf:	eb 04                	jmp    c0019dc5 <Reg::readInt(char*, char*, int*)+0xcc>
c0019dc1:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0019dc5:	47                   	inc    edi
c0019dc6:	eb ae                	jmp    c0019d76 <Reg::readInt(char*, char*, int*)+0x7d>
c0019dc8:	84 c0                	test   al,al
c0019dca:	74 02                	je     c0019dce <Reg::readInt(char*, char*, int*)+0xd5>
c0019dcc:	f7 da                	neg    edx
c0019dce:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0019dd5:	89 10                	mov    DWORD PTR [eax],edx
c0019dd7:	88 d8                	mov    al,bl
c0019dd9:	81 c4 ec 00 00 00    	add    esp,0xec
c0019ddf:	5b                   	pop    ebx
c0019de0:	5e                   	pop    esi
c0019de1:	5f                   	pop    edi
c0019de2:	5d                   	pop    ebp
c0019de3:	c3                   	ret    

c0019de4 <Reg::readString(char*, char*, char*, int)>:
c0019de4:	57                   	push   edi
c0019de5:	56                   	push   esi
c0019de6:	53                   	push   ebx
c0019de7:	81 ec d4 00 00 00    	sub    esp,0xd4
c0019ded:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0019df4:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019df8:	57                   	push   edi
c0019df9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019e00:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019e07:	e8 b6 fe ff ff       	call   c0019cc2 <Reg::getLine(char*, char*, char*)>
c0019e0c:	83 c4 10             	add    esp,0x10
c0019e0f:	89 c6                	mov    esi,eax
c0019e11:	84 c0                	test   al,al
c0019e13:	74 44                	je     c0019e59 <Reg::readString(char*, char*, char*, int)+0x75>
c0019e15:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0019e1c:	31 c0                	xor    eax,eax
c0019e1e:	4a                   	dec    edx
c0019e1f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019e22:	84 c9                	test   cl,cl
c0019e24:	74 0f                	je     c0019e35 <Reg::readString(char*, char*, char*, int)+0x51>
c0019e26:	39 c2                	cmp    edx,eax
c0019e28:	7e 0b                	jle    c0019e35 <Reg::readString(char*, char*, char*, int)+0x51>
c0019e2a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019e2d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019e32:	40                   	inc    eax
c0019e33:	eb ea                	jmp    c0019e1f <Reg::readString(char*, char*, char*, int)+0x3b>
c0019e35:	83 ec 0c             	sub    esp,0xc
c0019e38:	53                   	push   ebx
c0019e39:	e8 c5 68 fe ff       	call   c0000703 <strlen>
c0019e3e:	83 c4 10             	add    esp,0x10
c0019e41:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019e46:	75 11                	jne    c0019e59 <Reg::readString(char*, char*, char*, int)+0x75>
c0019e48:	83 ec 0c             	sub    esp,0xc
c0019e4b:	53                   	push   ebx
c0019e4c:	e8 b2 68 fe ff       	call   c0000703 <strlen>
c0019e51:	83 c4 10             	add    esp,0x10
c0019e54:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019e59:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019e5f:	89 f0                	mov    eax,esi
c0019e61:	5b                   	pop    ebx
c0019e62:	5e                   	pop    esi
c0019e63:	5f                   	pop    edi
c0019e64:	c3                   	ret    

c0019e65 <Reg::readBool(char*, char*, bool*)>:
c0019e65:	83 ec 20             	sub    esp,0x20
c0019e68:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e6c:	50                   	push   eax
c0019e6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e75:	e8 7f fe ff ff       	call   c0019cf9 <Reg::readInt(char*, char*, int*)>
c0019e7a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019e7f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019e83:	0f 95 02             	setne  BYTE PTR [edx]
c0019e86:	83 c4 2c             	add    esp,0x2c
c0019e89:	c3                   	ret    

c0019e8a <Reg::readBoolWithDefault(char*, char*, bool)>:
c0019e8a:	53                   	push   ebx
c0019e8b:	83 ec 1c             	sub    esp,0x1c
c0019e8e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019e92:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019e96:	50                   	push   eax
c0019e97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e9f:	e8 c1 ff ff ff       	call   c0019e65 <Reg::readBool(char*, char*, bool*)>
c0019ea4:	83 c4 10             	add    esp,0x10
c0019ea7:	84 c0                	test   al,al
c0019ea9:	74 04                	je     c0019eaf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0019eab:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0019eaf:	88 d8                	mov    al,bl
c0019eb1:	83 c4 18             	add    esp,0x18
c0019eb4:	5b                   	pop    ebx
c0019eb5:	c3                   	ret    

c0019eb6 <Reg::readIntWithDefault(char*, char*, int)>:
c0019eb6:	53                   	push   ebx
c0019eb7:	83 ec 1c             	sub    esp,0x1c
c0019eba:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ebe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ec2:	50                   	push   eax
c0019ec3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ec7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ecb:	e8 29 fe ff ff       	call   c0019cf9 <Reg::readInt(char*, char*, int*)>
c0019ed0:	83 c4 10             	add    esp,0x10
c0019ed3:	84 c0                	test   al,al
c0019ed5:	74 04                	je     c0019edb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0019ed7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019edb:	89 d8                	mov    eax,ebx
c0019edd:	83 c4 18             	add    esp,0x18
c0019ee0:	5b                   	pop    ebx
c0019ee1:	c3                   	ret    

c0019ee2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0019ee2:	56                   	push   esi
c0019ee3:	53                   	push   ebx
c0019ee4:	51                   	push   ecx
c0019ee5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ee9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019eed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ef1:	56                   	push   esi
c0019ef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019efa:	e8 e5 fe ff ff       	call   c0019de4 <Reg::readString(char*, char*, char*, int)>
c0019eff:	83 c4 10             	add    esp,0x10
c0019f02:	84 c0                	test   al,al
c0019f04:	74 02                	je     c0019f08 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0019f06:	89 f3                	mov    ebx,esi
c0019f08:	89 d8                	mov    eax,ebx
c0019f0a:	5a                   	pop    edx
c0019f0b:	5b                   	pop    ebx
c0019f0c:	5e                   	pop    esi
c0019f0d:	c3                   	ret    

c0019f0e <Sys::exit(regs*)>:
c0019f0e:	83 ec 18             	sub    esp,0x18
c0019f11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f15:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019f18:	e8 1f 31 00 00       	call   c001d03c <terminateTask(int)>
c0019f1d:	83 c8 ff             	or     eax,0xffffffff
c0019f20:	83 c4 1c             	add    esp,0x1c
c0019f23:	89 c2                	mov    edx,eax
c0019f25:	c3                   	ret    

c0019f26 <Sys::loadDLL(regs*)>:
c0019f26:	56                   	push   esi
c0019f27:	53                   	push   ebx
c0019f28:	31 d2                	xor    edx,edx
c0019f2a:	51                   	push   ecx
c0019f2b:	b8 01 00 00 00       	mov    eax,0x1
c0019f30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f34:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0019f38:	74 7d                	je     c0019fb7 <Sys::loadDLL(regs*)+0x91>
c0019f3a:	83 ec 0c             	sub    esp,0xc
c0019f3d:	68 14 01 00 00       	push   0x114
c0019f42:	e8 1b 82 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019f47:	83 c4 0c             	add    esp,0xc
c0019f4a:	89 c3                	mov    ebx,eax
c0019f4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f51:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019f54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019f57:	53                   	push   ebx
c0019f58:	e8 23 88 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019f5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f60:	e8 ed 8a ff ff       	call   c0012a52 <File::exists()>
c0019f65:	83 c4 10             	add    esp,0x10
c0019f68:	84 c0                	test   al,al
c0019f6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f6c:	75 11                	jne    c0019f7f <Sys::loadDLL(regs*)+0x59>
c0019f6e:	83 ec 0c             	sub    esp,0xc
c0019f71:	53                   	push   ebx
c0019f72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f75:	83 c4 10             	add    esp,0x10
c0019f78:	b8 03 00 00 00       	mov    eax,0x3
c0019f7d:	eb 36                	jmp    c0019fb5 <Sys::loadDLL(regs*)+0x8f>
c0019f7f:	83 ec 0c             	sub    esp,0xc
c0019f82:	53                   	push   ebx
c0019f83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f86:	58                   	pop    eax
c0019f87:	5a                   	pop    edx
c0019f88:	6a 00                	push   0x0
c0019f8a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019f8d:	e8 c4 20 00 00       	call   c001c056 <Thr::loadDLL(char const*, bool)>
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	89 c1                	mov    ecx,eax
c0019f97:	31 d2                	xor    edx,edx
c0019f99:	b8 04 00 00 00       	mov    eax,0x4
c0019f9e:	85 c9                	test   ecx,ecx
c0019fa0:	74 15                	je     c0019fb7 <Sys::loadDLL(regs*)+0x91>
c0019fa2:	53                   	push   ebx
c0019fa3:	53                   	push   ebx
c0019fa4:	ff 35 e8 a4 02 c0    	push   DWORD PTR ds:0xc002a4e8
c0019faa:	51                   	push   ecx
c0019fab:	e8 6c 22 00 00       	call   c001c21c <Thr::executeDLL(unsigned long, void*)>
c0019fb0:	83 c4 10             	add    esp,0x10
c0019fb3:	31 c0                	xor    eax,eax
c0019fb5:	31 d2                	xor    edx,edx
c0019fb7:	59                   	pop    ecx
c0019fb8:	5b                   	pop    ebx
c0019fb9:	5e                   	pop    esi
c0019fba:	c3                   	ret    

c0019fbb <Sys::read(regs*)>:
c0019fbb:	57                   	push   edi
c0019fbc:	56                   	push   esi
c0019fbd:	53                   	push   ebx
c0019fbe:	83 ec 10             	sub    esp,0x10
c0019fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019fc5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019fc8:	83 f8 02             	cmp    eax,0x2
c0019fcb:	77 10                	ja     c0019fdd <Sys::read(regs*)+0x22>
c0019fcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019fd2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019fd5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019fdb:	eb 0e                	jmp    c0019feb <Sys::read(regs*)+0x30>
c0019fdd:	83 ec 0c             	sub    esp,0xc
c0019fe0:	50                   	push   eax
c0019fe1:	e8 43 71 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019fe6:	83 c4 10             	add    esp,0x10
c0019fe9:	89 c1                	mov    ecx,eax
c0019feb:	83 c8 ff             	or     eax,0xffffffff
c0019fee:	85 c9                	test   ecx,ecx
c0019ff0:	89 c2                	mov    edx,eax
c0019ff2:	74 28                	je     c001a01c <Sys::read(regs*)+0x61>
c0019ff4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ffc:	31 ff                	xor    edi,edi
c0019ffe:	83 ec 0c             	sub    esp,0xc
c001a001:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a003:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a007:	52                   	push   edx
c001a008:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a00b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a00e:	57                   	push   edi
c001a00f:	56                   	push   esi
c001a010:	51                   	push   ecx
c001a011:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a014:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a018:	83 c4 20             	add    esp,0x20
c001a01b:	99                   	cdq    
c001a01c:	83 c4 10             	add    esp,0x10
c001a01f:	5b                   	pop    ebx
c001a020:	5e                   	pop    esi
c001a021:	5f                   	pop    edi
c001a022:	c3                   	ret    

c001a023 <Sys::sbrk(regs*)>:
c001a023:	56                   	push   esi
c001a024:	53                   	push   ebx
c001a025:	50                   	push   eax
c001a026:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a02b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a02f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a032:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a035:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a03b:	85 db                	test   ebx,ebx
c001a03d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a040:	74 02                	je     c001a044 <Sys::sbrk(regs*)+0x21>
c001a042:	79 06                	jns    c001a04a <Sys::sbrk(regs*)+0x27>
c001a044:	89 f0                	mov    eax,esi
c001a046:	31 d2                	xor    edx,edx
c001a048:	eb 2a                	jmp    c001a074 <Sys::sbrk(regs*)+0x51>
c001a04a:	83 c8 ff             	or     eax,0xffffffff
c001a04d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a053:	89 c2                	mov    edx,eax
c001a055:	77 1d                	ja     c001a074 <Sys::sbrk(regs*)+0x51>
c001a057:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a05d:	50                   	push   eax
c001a05e:	c1 ea 0c             	shr    edx,0xc
c001a061:	68 07 04 00 00       	push   0x407
c001a066:	52                   	push   edx
c001a067:	51                   	push   ecx
c001a068:	e8 e5 79 ff ff       	call   c0011a52 <VAS::allocatePages(int, int)>
c001a06d:	89 f0                	mov    eax,esi
c001a06f:	31 d2                	xor    edx,edx
c001a071:	83 c4 10             	add    esp,0x10
c001a074:	59                   	pop    ecx
c001a075:	5b                   	pop    ebx
c001a076:	5e                   	pop    esi
c001a077:	c3                   	ret    

c001a078 <Sys::write(regs*)>:
c001a078:	57                   	push   edi
c001a079:	56                   	push   esi
c001a07a:	53                   	push   ebx
c001a07b:	83 ec 10             	sub    esp,0x10
c001a07e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a082:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a085:	83 f8 02             	cmp    eax,0x2
c001a088:	77 10                	ja     c001a09a <Sys::write(regs*)+0x22>
c001a08a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a08f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a092:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a098:	eb 0e                	jmp    c001a0a8 <Sys::write(regs*)+0x30>
c001a09a:	83 ec 0c             	sub    esp,0xc
c001a09d:	50                   	push   eax
c001a09e:	e8 86 70 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001a0a3:	83 c4 10             	add    esp,0x10
c001a0a6:	89 c1                	mov    ecx,eax
c001a0a8:	83 c8 ff             	or     eax,0xffffffff
c001a0ab:	85 c9                	test   ecx,ecx
c001a0ad:	89 c2                	mov    edx,eax
c001a0af:	74 28                	je     c001a0d9 <Sys::write(regs*)+0x61>
c001a0b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a0b9:	31 ff                	xor    edi,edi
c001a0bb:	83 ec 0c             	sub    esp,0xc
c001a0be:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a0c0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a0c4:	52                   	push   edx
c001a0c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0c8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a0cb:	57                   	push   edi
c001a0cc:	56                   	push   esi
c001a0cd:	51                   	push   ecx
c001a0ce:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a0d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a0d5:	83 c4 20             	add    esp,0x20
c001a0d8:	99                   	cdq    
c001a0d9:	83 c4 10             	add    esp,0x10
c001a0dc:	5b                   	pop    ebx
c001a0dd:	5e                   	pop    esi
c001a0de:	5f                   	pop    edi
c001a0df:	c3                   	ret    

c001a0e0 <Sys::yield(regs*)>:
c001a0e0:	83 ec 0c             	sub    esp,0xc
c001a0e3:	e8 3e 25 00 00       	call   c001c626 <lockScheduler()>
c001a0e8:	e8 6d 28 00 00       	call   c001c95a <schedule()>
c001a0ed:	e8 36 25 00 00       	call   c001c628 <unlockScheduler()>
c001a0f2:	31 c0                	xor    eax,eax
c001a0f4:	31 d2                	xor    edx,edx
c001a0f6:	83 c4 0c             	add    esp,0xc
c001a0f9:	c3                   	ret    

c001a0fa <sysCallGetPID(regs*)>:
c001a0fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a102:	8b 00                	mov    eax,DWORD PTR [eax]
c001a104:	99                   	cdq    
c001a105:	c3                   	ret    

c001a106 <sysCallSeekDir(regs*)>:
c001a106:	31 c0                	xor    eax,eax
c001a108:	31 d2                	xor    edx,edx
c001a10a:	c3                   	ret    

c001a10b <sysCallTellDir(regs*)>:
c001a10b:	31 c0                	xor    eax,eax
c001a10d:	31 d2                	xor    edx,edx
c001a10f:	c3                   	ret    

c001a110 <sysCallVerify(regs*)>:
c001a110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a114:	31 d2                	xor    edx,edx
c001a116:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a119:	c3                   	ret    

c001a11a <sysCallFork(regs*)>:
c001a11a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a11f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a124:	c3                   	ret    

c001a125 <sysCallExecve(regs*)>:
c001a125:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a12a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a12f:	c3                   	ret    

c001a130 <sysCallGetArgc(regs*)>:
c001a130:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a135:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a138:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a13e:	99                   	cdq    
c001a13f:	c3                   	ret    

c001a140 <sysFormatDisk(regs*)>:
c001a140:	56                   	push   esi
c001a141:	53                   	push   ebx
c001a142:	53                   	push   ebx
c001a143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a147:	8b 1d 48 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a648
c001a14d:	eb 25                	jmp    c001a174 <sysFormatDisk(regs*)+0x34>
c001a14f:	83 ec 0c             	sub    esp,0xc
c001a152:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a155:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a157:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a15a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a15d:	50                   	push   eax
c001a15e:	ff 34 85 e0 aa 02 c0 	push   DWORD PTR [eax*4-0x3ffd5520]
c001a165:	53                   	push   ebx
c001a166:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a169:	83 c4 20             	add    esp,0x20
c001a16c:	83 f8 08             	cmp    eax,0x8
c001a16f:	75 12                	jne    c001a183 <sysFormatDisk(regs*)+0x43>
c001a171:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a174:	85 db                	test   ebx,ebx
c001a176:	75 d7                	jne    c001a14f <sysFormatDisk(regs*)+0xf>
c001a178:	59                   	pop    ecx
c001a179:	b8 03 00 00 00       	mov    eax,0x3
c001a17e:	31 d2                	xor    edx,edx
c001a180:	5b                   	pop    ebx
c001a181:	5e                   	pop    esi
c001a182:	c3                   	ret    
c001a183:	85 c0                	test   eax,eax
c001a185:	74 1b                	je     c001a1a2 <sysFormatDisk(regs*)+0x62>
c001a187:	83 f8 09             	cmp    eax,0x9
c001a18a:	74 0b                	je     c001a197 <sysFormatDisk(regs*)+0x57>
c001a18c:	59                   	pop    ecx
c001a18d:	b8 02 00 00 00       	mov    eax,0x2
c001a192:	31 d2                	xor    edx,edx
c001a194:	5b                   	pop    ebx
c001a195:	5e                   	pop    esi
c001a196:	c3                   	ret    
c001a197:	59                   	pop    ecx
c001a198:	b8 01 00 00 00       	mov    eax,0x1
c001a19d:	31 d2                	xor    edx,edx
c001a19f:	5b                   	pop    ebx
c001a1a0:	5e                   	pop    esi
c001a1a1:	c3                   	ret    
c001a1a2:	59                   	pop    ecx
c001a1a3:	31 c0                	xor    eax,eax
c001a1a5:	31 d2                	xor    edx,edx
c001a1a7:	5b                   	pop    ebx
c001a1a8:	5e                   	pop    esi
c001a1a9:	c3                   	ret    

c001a1aa <sysSetDiskVolumeLabel(regs*)>:
c001a1aa:	56                   	push   esi
c001a1ab:	53                   	push   ebx
c001a1ac:	53                   	push   ebx
c001a1ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a1b1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a1b4:	83 f8 19             	cmp    eax,0x19
c001a1b7:	77 29                	ja     c001a1e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a1b9:	8b 0c 85 e0 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5520]
c001a1c0:	85 c9                	test   ecx,ecx
c001a1c2:	74 1e                	je     c001a1e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a1c4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a1c7:	85 d2                	test   edx,edx
c001a1c9:	74 17                	je     c001a1e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a1cb:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a1d1:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a1d3:	52                   	push   edx
c001a1d4:	50                   	push   eax
c001a1d5:	51                   	push   ecx
c001a1d6:	53                   	push   ebx
c001a1d7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a1da:	83 c4 10             	add    esp,0x10
c001a1dd:	99                   	cdq    
c001a1de:	59                   	pop    ecx
c001a1df:	5b                   	pop    ebx
c001a1e0:	5e                   	pop    esi
c001a1e1:	c3                   	ret    
c001a1e2:	59                   	pop    ecx
c001a1e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a1e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a1ed:	5b                   	pop    ebx
c001a1ee:	5e                   	pop    esi
c001a1ef:	c3                   	ret    

c001a1f0 <sysGetDiskVolumeLabel(regs*)>:
c001a1f0:	57                   	push   edi
c001a1f1:	56                   	push   esi
c001a1f2:	53                   	push   ebx
c001a1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1f7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a1fa:	83 fa 19             	cmp    edx,0x19
c001a1fd:	77 34                	ja     c001a233 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a1ff:	8b 0c 95 e0 aa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5520]
c001a206:	85 c9                	test   ecx,ecx
c001a208:	74 29                	je     c001a233 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a20a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a20d:	85 db                	test   ebx,ebx
c001a20f:	74 22                	je     c001a233 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a211:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a214:	85 c0                	test   eax,eax
c001a216:	74 1b                	je     c001a233 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a218:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a21e:	83 ec 0c             	sub    esp,0xc
c001a221:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a223:	50                   	push   eax
c001a224:	53                   	push   ebx
c001a225:	52                   	push   edx
c001a226:	51                   	push   ecx
c001a227:	56                   	push   esi
c001a228:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a22b:	83 c4 20             	add    esp,0x20
c001a22e:	99                   	cdq    
c001a22f:	5b                   	pop    ebx
c001a230:	5e                   	pop    esi
c001a231:	5f                   	pop    edi
c001a232:	c3                   	ret    
c001a233:	5b                   	pop    ebx
c001a234:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a239:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a23e:	5e                   	pop    esi
c001a23f:	5f                   	pop    edi
c001a240:	c3                   	ret    

c001a241 <sysShutdown(regs*)>:
c001a241:	83 ec 0c             	sub    esp,0xc
c001a244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a248:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a24b:	85 c0                	test   eax,eax
c001a24d:	74 18                	je     c001a267 <sysShutdown(regs*)+0x26>
c001a24f:	83 f8 01             	cmp    eax,0x1
c001a252:	74 38                	je     c001a28c <sysShutdown(regs*)+0x4b>
c001a254:	83 f8 02             	cmp    eax,0x2
c001a257:	74 24                	je     c001a27d <sysShutdown(regs*)+0x3c>
c001a259:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a25e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a263:	83 c4 0c             	add    esp,0xc
c001a266:	c3                   	ret    
c001a267:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c001a26c:	8b 10                	mov    edx,DWORD PTR [eax]
c001a26e:	6a 00                	push   0x0
c001a270:	6a 00                	push   0x0
c001a272:	6a 00                	push   0x0
c001a274:	50                   	push   eax
c001a275:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a278:	83 c4 10             	add    esp,0x10
c001a27b:	eb dc                	jmp    c001a259 <sysShutdown(regs*)+0x18>
c001a27d:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c001a282:	8b 10                	mov    edx,DWORD PTR [eax]
c001a284:	6a 00                	push   0x0
c001a286:	6a 00                	push   0x0
c001a288:	6a 01                	push   0x1
c001a28a:	eb e8                	jmp    c001a274 <sysShutdown(regs*)+0x33>
c001a28c:	a1 60 ab 02 c0       	mov    eax,ds:0xc002ab60
c001a291:	85 c0                	test   eax,eax
c001a293:	74 02                	je     c001a297 <sysShutdown(regs*)+0x56>
c001a295:	ff d0                	call   eax
c001a297:	31 c0                	xor    eax,eax
c001a299:	31 d2                	xor    edx,edx
c001a29b:	83 c4 0c             	add    esp,0xc
c001a29e:	c3                   	ret    

c001a29f <sysCallGetCwd(regs*)>:
c001a29f:	83 ec 10             	sub    esp,0x10
c001a2a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2a6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a2a9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a2ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2b1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a2b4:	e8 38 88 ff ff       	call   c0012af1 <getcwd(Process*, char*, int)>
c001a2b9:	83 c4 1c             	add    esp,0x1c
c001a2bc:	99                   	cdq    
c001a2bd:	c3                   	ret    

c001a2be <sysCallSetCwd(regs*)>:
c001a2be:	83 ec 14             	sub    esp,0x14
c001a2c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2c5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a2c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2cd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a2d0:	e8 46 88 ff ff       	call   c0012b1b <setcwd(Process*, char*)>
c001a2d5:	83 c4 1c             	add    esp,0x1c
c001a2d8:	99                   	cdq    
c001a2d9:	c3                   	ret    

c001a2da <sysCallRealpath(regs*)>:
c001a2da:	83 ec 0c             	sub    esp,0xc
c001a2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2e1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a2e4:	85 d2                	test   edx,edx
c001a2e6:	74 07                	je     c001a2ef <sysCallRealpath(regs*)+0x15>
c001a2e8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a2eb:	85 c0                	test   eax,eax
c001a2ed:	75 0b                	jne    c001a2fa <sysCallRealpath(regs*)+0x20>
c001a2ef:	b8 01 00 00 00       	mov    eax,0x1
c001a2f4:	31 d2                	xor    edx,edx
c001a2f6:	83 c4 0c             	add    esp,0xc
c001a2f9:	c3                   	ret    
c001a2fa:	51                   	push   ecx
c001a2fb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a301:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a304:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a30a:	51                   	push   ecx
c001a30b:	52                   	push   edx
c001a30c:	50                   	push   eax
c001a30d:	e8 c4 82 ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	31 c0                	xor    eax,eax
c001a317:	31 d2                	xor    edx,edx
c001a319:	83 c4 0c             	add    esp,0xc
c001a31c:	c3                   	ret    

c001a31d <sysCallReadDir(regs*)>:
c001a31d:	53                   	push   ebx
c001a31e:	83 ec 18             	sub    esp,0x18
c001a321:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a325:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a328:	83 f8 02             	cmp    eax,0x2
c001a32b:	76 53                	jbe    c001a380 <sysCallReadDir(regs*)+0x63>
c001a32d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a330:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a336:	77 4f                	ja     c001a387 <sysCallReadDir(regs*)+0x6a>
c001a338:	83 ec 0c             	sub    esp,0xc
c001a33b:	50                   	push   eax
c001a33c:	e8 e8 6d ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	85 c0                	test   eax,eax
c001a346:	74 50                	je     c001a398 <sysCallReadDir(regs*)+0x7b>
c001a348:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a350:	83 ec 0c             	sub    esp,0xc
c001a353:	8b 10                	mov    edx,DWORD PTR [eax]
c001a355:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a359:	51                   	push   ecx
c001a35a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a35d:	6a 00                	push   0x0
c001a35f:	68 10 01 00 00       	push   0x110
c001a364:	50                   	push   eax
c001a365:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a368:	83 c4 20             	add    esp,0x20
c001a36b:	85 c0                	test   eax,eax
c001a36d:	74 38                	je     c001a3a7 <sysCallReadDir(regs*)+0x8a>
c001a36f:	83 f8 07             	cmp    eax,0x7
c001a372:	74 0c                	je     c001a380 <sysCallReadDir(regs*)+0x63>
c001a374:	b8 02 00 00 00       	mov    eax,0x2
c001a379:	31 d2                	xor    edx,edx
c001a37b:	83 c4 18             	add    esp,0x18
c001a37e:	5b                   	pop    ebx
c001a37f:	c3                   	ret    
c001a380:	b8 01 00 00 00       	mov    eax,0x1
c001a385:	eb f2                	jmp    c001a379 <sysCallReadDir(regs*)+0x5c>
c001a387:	83 ec 08             	sub    esp,0x8
c001a38a:	52                   	push   edx
c001a38b:	68 dc 82 02 c0       	push   0xc00282dc
c001a390:	e8 bc 7e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a395:	83 c4 10             	add    esp,0x10
c001a398:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a39d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a3a2:	83 c4 18             	add    esp,0x18
c001a3a5:	5b                   	pop    ebx
c001a3a6:	c3                   	ret    
c001a3a7:	31 c0                	xor    eax,eax
c001a3a9:	eb ce                	jmp    c001a379 <sysCallReadDir(regs*)+0x5c>

c001a3ab <sysCallIsATTY(regs*)>:
c001a3ab:	83 ec 0c             	sub    esp,0xc
c001a3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a3b5:	83 f8 02             	cmp    eax,0x2
c001a3b8:	76 07                	jbe    c001a3c1 <sysCallIsATTY(regs*)+0x16>
c001a3ba:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a3bf:	75 26                	jne    c001a3e7 <sysCallIsATTY(regs*)+0x3c>
c001a3c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a3c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a3c9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a3cf:	85 c0                	test   eax,eax
c001a3d1:	74 24                	je     c001a3f7 <sysCallIsATTY(regs*)+0x4c>
c001a3d3:	83 ec 0c             	sub    esp,0xc
c001a3d6:	8b 10                	mov    edx,DWORD PTR [eax]
c001a3d8:	50                   	push   eax
c001a3d9:	ff 12                	call   DWORD PTR [edx]
c001a3db:	31 d2                	xor    edx,edx
c001a3dd:	0f b6 c0             	movzx  eax,al
c001a3e0:	83 c4 10             	add    esp,0x10
c001a3e3:	83 c4 0c             	add    esp,0xc
c001a3e6:	c3                   	ret    
c001a3e7:	83 ec 0c             	sub    esp,0xc
c001a3ea:	50                   	push   eax
c001a3eb:	e8 39 6d ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001a3f0:	83 c4 10             	add    esp,0x10
c001a3f3:	85 c0                	test   eax,eax
c001a3f5:	75 dc                	jne    c001a3d3 <sysCallIsATTY(regs*)+0x28>
c001a3f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a3fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a401:	83 c4 0c             	add    esp,0xc
c001a404:	c3                   	ret    

c001a405 <sysCallSeek(regs*)>:
c001a405:	53                   	push   ebx
c001a406:	83 ec 08             	sub    esp,0x8
c001a409:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a40d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a410:	83 f8 02             	cmp    eax,0x2
c001a413:	76 4a                	jbe    c001a45f <sysCallSeek(regs*)+0x5a>
c001a415:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a41a:	77 32                	ja     c001a44e <sysCallSeek(regs*)+0x49>
c001a41c:	83 ec 0c             	sub    esp,0xc
c001a41f:	50                   	push   eax
c001a420:	e8 04 6d ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001a425:	83 c4 0c             	add    esp,0xc
c001a428:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a42b:	31 db                	xor    ebx,ebx
c001a42d:	53                   	push   ebx
c001a42e:	51                   	push   ecx
c001a42f:	50                   	push   eax
c001a430:	e8 6d 84 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a435:	83 c4 10             	add    esp,0x10
c001a438:	85 c0                	test   eax,eax
c001a43a:	0f 95 c0             	setne  al
c001a43d:	31 d2                	xor    edx,edx
c001a43f:	0f b6 c0             	movzx  eax,al
c001a442:	f7 d8                	neg    eax
c001a444:	83 d2 00             	adc    edx,0x0
c001a447:	83 c4 08             	add    esp,0x8
c001a44a:	f7 da                	neg    edx
c001a44c:	5b                   	pop    ebx
c001a44d:	c3                   	ret    
c001a44e:	83 ec 08             	sub    esp,0x8
c001a451:	50                   	push   eax
c001a452:	68 98 83 02 c0       	push   0xc0028398
c001a457:	e8 f5 7d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a45c:	83 c4 10             	add    esp,0x10
c001a45f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a464:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a469:	83 c4 08             	add    esp,0x8
c001a46c:	5b                   	pop    ebx
c001a46d:	c3                   	ret    

c001a46e <sysCallTell(regs*)>:
c001a46e:	53                   	push   ebx
c001a46f:	83 ec 08             	sub    esp,0x8
c001a472:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a476:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a479:	83 f8 02             	cmp    eax,0x2
c001a47c:	76 5e                	jbe    c001a4dc <sysCallTell(regs*)+0x6e>
c001a47e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a483:	77 2d                	ja     c001a4b2 <sysCallTell(regs*)+0x44>
c001a485:	83 ec 0c             	sub    esp,0xc
c001a488:	50                   	push   eax
c001a489:	e8 9b 6c ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001a48e:	5a                   	pop    edx
c001a48f:	59                   	pop    ecx
c001a490:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a493:	50                   	push   eax
c001a494:	e8 5f 84 ff ff       	call   c00128f8 <File::tell(unsigned long long*)>
c001a499:	83 c4 10             	add    esp,0x10
c001a49c:	85 c0                	test   eax,eax
c001a49e:	0f 95 c0             	setne  al
c001a4a1:	31 d2                	xor    edx,edx
c001a4a3:	0f b6 c0             	movzx  eax,al
c001a4a6:	f7 d8                	neg    eax
c001a4a8:	83 d2 00             	adc    edx,0x0
c001a4ab:	83 c4 08             	add    esp,0x8
c001a4ae:	f7 da                	neg    edx
c001a4b0:	5b                   	pop    ebx
c001a4b1:	c3                   	ret    
c001a4b2:	83 ec 08             	sub    esp,0x8
c001a4b5:	50                   	push   eax
c001a4b6:	68 b2 83 02 c0       	push   0xc00283b2
c001a4bb:	e8 91 7d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a4c0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a4c3:	83 c4 10             	add    esp,0x10
c001a4c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a4cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a4d3:	31 d2                	xor    edx,edx
c001a4d5:	31 c0                	xor    eax,eax
c001a4d7:	83 c4 08             	add    esp,0x8
c001a4da:	5b                   	pop    ebx
c001a4db:	c3                   	ret    
c001a4dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a4e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a4e6:	83 c4 08             	add    esp,0x8
c001a4e9:	5b                   	pop    ebx
c001a4ea:	c3                   	ret    

c001a4eb <sysCallSizeFromFilename(regs*)>:
c001a4eb:	57                   	push   edi
c001a4ec:	56                   	push   esi
c001a4ed:	53                   	push   ebx
c001a4ee:	83 ec 10             	sub    esp,0x10
c001a4f1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a4f5:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001a4f8:	83 fb 02             	cmp    ebx,0x2
c001a4fb:	0f 86 8a 00 00 00    	jbe    c001a58b <sysCallSizeFromFilename(regs*)+0xa0>
c001a501:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001a507:	77 56                	ja     c001a55f <sysCallSizeFromFilename(regs*)+0x74>
c001a509:	83 ec 0c             	sub    esp,0xc
c001a50c:	68 14 01 00 00       	push   0x114
c001a511:	e8 4c 7c ff ff       	call   c0012162 <operator new(unsigned long)>
c001a516:	83 c4 0c             	add    esp,0xc
c001a519:	89 c7                	mov    edi,eax
c001a51b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a520:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a523:	53                   	push   ebx
c001a524:	57                   	push   edi
c001a525:	e8 56 82 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001a52a:	83 c4 0c             	add    esp,0xc
c001a52d:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a531:	50                   	push   eax
c001a532:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a535:	57                   	push   edi
c001a536:	e8 55 85 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c001a53b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a53e:	89 c3                	mov    ebx,eax
c001a540:	8b 07                	mov    eax,DWORD PTR [edi]
c001a542:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a545:	83 c4 10             	add    esp,0x10
c001a548:	31 c0                	xor    eax,eax
c001a54a:	85 db                	test   ebx,ebx
c001a54c:	0f 95 c0             	setne  al
c001a54f:	31 d2                	xor    edx,edx
c001a551:	f7 d8                	neg    eax
c001a553:	83 d2 00             	adc    edx,0x0
c001a556:	83 c4 10             	add    esp,0x10
c001a559:	f7 da                	neg    edx
c001a55b:	5b                   	pop    ebx
c001a55c:	5e                   	pop    esi
c001a55d:	5f                   	pop    edi
c001a55e:	c3                   	ret    
c001a55f:	83 ec 08             	sub    esp,0x8
c001a562:	53                   	push   ebx
c001a563:	68 cc 83 02 c0       	push   0xc00283cc
c001a568:	e8 e4 7c ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a56d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a570:	83 c4 10             	add    esp,0x10
c001a573:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a579:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a580:	31 d2                	xor    edx,edx
c001a582:	83 c4 10             	add    esp,0x10
c001a585:	31 c0                	xor    eax,eax
c001a587:	5b                   	pop    ebx
c001a588:	5e                   	pop    esi
c001a589:	5f                   	pop    edi
c001a58a:	c3                   	ret    
c001a58b:	83 c4 10             	add    esp,0x10
c001a58e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a593:	5b                   	pop    ebx
c001a594:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a599:	5e                   	pop    esi
c001a59a:	5f                   	pop    edi
c001a59b:	c3                   	ret    

c001a59c <sysCallSize(regs*)>:
c001a59c:	53                   	push   ebx
c001a59d:	83 ec 18             	sub    esp,0x18
c001a5a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a5a7:	83 f8 02             	cmp    eax,0x2
c001a5aa:	76 64                	jbe    c001a610 <sysCallSize(regs*)+0x74>
c001a5ac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a5b1:	77 33                	ja     c001a5e6 <sysCallSize(regs*)+0x4a>
c001a5b3:	83 ec 0c             	sub    esp,0xc
c001a5b6:	50                   	push   eax
c001a5b7:	e8 6d 6b ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001a5bc:	83 c4 0c             	add    esp,0xc
c001a5bf:	8d 54 24 13          	lea    edx,[esp+0x13]
c001a5c3:	52                   	push   edx
c001a5c4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a5c7:	50                   	push   eax
c001a5c8:	e8 c3 84 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c001a5cd:	83 c4 10             	add    esp,0x10
c001a5d0:	85 c0                	test   eax,eax
c001a5d2:	0f 95 c0             	setne  al
c001a5d5:	31 d2                	xor    edx,edx
c001a5d7:	0f b6 c0             	movzx  eax,al
c001a5da:	f7 d8                	neg    eax
c001a5dc:	83 d2 00             	adc    edx,0x0
c001a5df:	83 c4 18             	add    esp,0x18
c001a5e2:	f7 da                	neg    edx
c001a5e4:	5b                   	pop    ebx
c001a5e5:	c3                   	ret    
c001a5e6:	83 ec 08             	sub    esp,0x8
c001a5e9:	50                   	push   eax
c001a5ea:	68 cc 83 02 c0       	push   0xc00283cc
c001a5ef:	e8 5d 7c ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a5f4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a5f7:	83 c4 10             	add    esp,0x10
c001a5fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a600:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a607:	31 d2                	xor    edx,edx
c001a609:	31 c0                	xor    eax,eax
c001a60b:	83 c4 18             	add    esp,0x18
c001a60e:	5b                   	pop    ebx
c001a60f:	c3                   	ret    
c001a610:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a615:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a61a:	83 c4 18             	add    esp,0x18
c001a61d:	5b                   	pop    ebx
c001a61e:	c3                   	ret    

c001a61f <sysCallClose(regs*)>:
c001a61f:	53                   	push   ebx
c001a620:	83 ec 08             	sub    esp,0x8
c001a623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a627:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a62a:	83 f8 02             	cmp    eax,0x2
c001a62d:	76 50                	jbe    c001a67f <sysCallClose(regs*)+0x60>
c001a62f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a634:	74 58                	je     c001a68e <sysCallClose(regs*)+0x6f>
c001a636:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a63b:	74 60                	je     c001a69d <sysCallClose(regs*)+0x7e>
c001a63d:	77 2f                	ja     c001a66e <sysCallClose(regs*)+0x4f>
c001a63f:	83 ec 0c             	sub    esp,0xc
c001a642:	50                   	push   eax
c001a643:	e8 e1 6a ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001a648:	89 c3                	mov    ebx,eax
c001a64a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a64d:	e8 f0 81 ff ff       	call   c0012842 <File::close()>
c001a652:	83 c4 10             	add    esp,0x10
c001a655:	85 db                	test   ebx,ebx
c001a657:	74 0c                	je     c001a665 <sysCallClose(regs*)+0x46>
c001a659:	83 ec 0c             	sub    esp,0xc
c001a65c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a65e:	53                   	push   ebx
c001a65f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a662:	83 c4 10             	add    esp,0x10
c001a665:	31 c0                	xor    eax,eax
c001a667:	31 d2                	xor    edx,edx
c001a669:	83 c4 08             	add    esp,0x8
c001a66c:	5b                   	pop    ebx
c001a66d:	c3                   	ret    
c001a66e:	83 ec 08             	sub    esp,0x8
c001a671:	50                   	push   eax
c001a672:	68 00 83 02 c0       	push   0xc0028300
c001a677:	e8 d5 7b ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a67c:	83 c4 10             	add    esp,0x10
c001a67f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a684:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a689:	83 c4 08             	add    esp,0x8
c001a68c:	5b                   	pop    ebx
c001a68d:	c3                   	ret    
c001a68e:	83 ec 0c             	sub    esp,0xc
c001a691:	68 e7 83 02 c0       	push   0xc00283e7
c001a696:	e8 b6 7b ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a69b:	eb c5                	jmp    c001a662 <sysCallClose(regs*)+0x43>
c001a69d:	83 ec 0c             	sub    esp,0xc
c001a6a0:	68 f5 83 02 c0       	push   0xc00283f5
c001a6a5:	eb ef                	jmp    c001a696 <sysCallClose(regs*)+0x77>

c001a6a7 <sysCallOpenDir(regs*)>:
c001a6a7:	56                   	push   esi
c001a6a8:	53                   	push   ebx
c001a6a9:	53                   	push   ebx
c001a6aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a6ae:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001a6b1:	85 f6                	test   esi,esi
c001a6b3:	74 51                	je     c001a706 <sysCallOpenDir(regs*)+0x5f>
c001a6b5:	83 ec 0c             	sub    esp,0xc
c001a6b8:	68 14 01 00 00       	push   0x114
c001a6bd:	e8 a0 7a ff ff       	call   c0012162 <operator new(unsigned long)>
c001a6c2:	83 c4 0c             	add    esp,0xc
c001a6c5:	89 c6                	mov    esi,eax
c001a6c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6cc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a6cf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a6d2:	56                   	push   esi
c001a6d3:	e8 6a 85 ff ff       	call   c0012c42 <Directory::Directory(char const*, Process*)>
c001a6d8:	89 34 24             	mov    DWORD PTR [esp],esi
c001a6db:	e8 c6 85 ff ff       	call   c0012ca6 <Directory::open()>
c001a6e0:	83 c4 10             	add    esp,0x10
c001a6e3:	85 c0                	test   eax,eax
c001a6e5:	75 1f                	jne    c001a706 <sysCallOpenDir(regs*)+0x5f>
c001a6e7:	83 ec 0c             	sub    esp,0xc
c001a6ea:	56                   	push   esi
c001a6eb:	e8 84 67 ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c001a6f0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a6f3:	83 c4 10             	add    esp,0x10
c001a6f6:	89 02                	mov    DWORD PTR [edx],eax
c001a6f8:	c1 f8 1f             	sar    eax,0x1f
c001a6fb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a6fe:	31 c0                	xor    eax,eax
c001a700:	59                   	pop    ecx
c001a701:	31 d2                	xor    edx,edx
c001a703:	5b                   	pop    ebx
c001a704:	5e                   	pop    esi
c001a705:	c3                   	ret    
c001a706:	59                   	pop    ecx
c001a707:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a70c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a711:	5b                   	pop    ebx
c001a712:	5e                   	pop    esi
c001a713:	c3                   	ret    

c001a714 <sysCallMakeDir(regs*)>:
c001a714:	56                   	push   esi
c001a715:	53                   	push   ebx
c001a716:	83 ec 10             	sub    esp,0x10
c001a719:	68 14 01 00 00       	push   0x114
c001a71e:	e8 3f 7a ff ff       	call   c0012162 <operator new(unsigned long)>
c001a723:	83 c4 0c             	add    esp,0xc
c001a726:	89 c3                	mov    ebx,eax
c001a728:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a72d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a730:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a734:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a737:	53                   	push   ebx
c001a738:	e8 05 85 ff ff       	call   c0012c42 <Directory::Directory(char const*, Process*)>
c001a73d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a740:	e8 41 87 ff ff       	call   c0012e86 <Directory::create()>
c001a745:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a748:	89 c6                	mov    esi,eax
c001a74a:	e8 b3 85 ff ff       	call   c0012d02 <Directory::close()>
c001a74f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a751:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a754:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a757:	31 c0                	xor    eax,eax
c001a759:	85 f6                	test   esi,esi
c001a75b:	0f 95 c0             	setne  al
c001a75e:	31 d2                	xor    edx,edx
c001a760:	f7 d8                	neg    eax
c001a762:	83 d2 00             	adc    edx,0x0
c001a765:	83 c4 14             	add    esp,0x14
c001a768:	f7 da                	neg    edx
c001a76a:	5b                   	pop    ebx
c001a76b:	5e                   	pop    esi
c001a76c:	c3                   	ret    

c001a76d <sysCallCloseDir(regs*)>:
c001a76d:	53                   	push   ebx
c001a76e:	83 ec 08             	sub    esp,0x8
c001a771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a775:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a778:	83 f8 02             	cmp    eax,0x2
c001a77b:	76 47                	jbe    c001a7c4 <sysCallCloseDir(regs*)+0x57>
c001a77d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a782:	77 2f                	ja     c001a7b3 <sysCallCloseDir(regs*)+0x46>
c001a784:	83 ec 0c             	sub    esp,0xc
c001a787:	50                   	push   eax
c001a788:	e8 9c 69 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001a78d:	89 c3                	mov    ebx,eax
c001a78f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a792:	e8 6b 85 ff ff       	call   c0012d02 <Directory::close()>
c001a797:	83 c4 10             	add    esp,0x10
c001a79a:	85 db                	test   ebx,ebx
c001a79c:	74 0c                	je     c001a7aa <sysCallCloseDir(regs*)+0x3d>
c001a79e:	83 ec 0c             	sub    esp,0xc
c001a7a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7a3:	53                   	push   ebx
c001a7a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a7a7:	83 c4 10             	add    esp,0x10
c001a7aa:	31 c0                	xor    eax,eax
c001a7ac:	31 d2                	xor    edx,edx
c001a7ae:	83 c4 08             	add    esp,0x8
c001a7b1:	5b                   	pop    ebx
c001a7b2:	c3                   	ret    
c001a7b3:	83 ec 08             	sub    esp,0x8
c001a7b6:	50                   	push   eax
c001a7b7:	68 28 83 02 c0       	push   0xc0028328
c001a7bc:	e8 90 7a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a7c1:	83 c4 10             	add    esp,0x10
c001a7c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a7c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a7ce:	83 c4 08             	add    esp,0x8
c001a7d1:	5b                   	pop    ebx
c001a7d2:	c3                   	ret    

c001a7d3 <sysCallWait(regs*)>:
c001a7d3:	83 ec 10             	sub    esp,0x10
c001a7d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7da:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a7dd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a7e0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a7e3:	e8 ed 22 00 00       	call   c001cad5 <waitTask(int, int*, int)>
c001a7e8:	83 c4 1c             	add    esp,0x1c
c001a7eb:	99                   	cdq    
c001a7ec:	c3                   	ret    

c001a7ed <sysCallRmdir(regs*)>:
c001a7ed:	56                   	push   esi
c001a7ee:	53                   	push   ebx
c001a7ef:	83 ec 10             	sub    esp,0x10
c001a7f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7f6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a7f9:	68 14 01 00 00       	push   0x114
c001a7fe:	e8 5f 79 ff ff       	call   c0012162 <operator new(unsigned long)>
c001a803:	83 c4 0c             	add    esp,0xc
c001a806:	89 c3                	mov    ebx,eax
c001a808:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a80d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a810:	56                   	push   esi
c001a811:	53                   	push   ebx
c001a812:	e8 69 7f ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001a817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a81a:	e8 3d 81 ff ff       	call   c001295c <File::unlink()>
c001a81f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a822:	89 c6                	mov    esi,eax
c001a824:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a826:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a829:	31 c0                	xor    eax,eax
c001a82b:	85 f6                	test   esi,esi
c001a82d:	0f 95 c0             	setne  al
c001a830:	31 d2                	xor    edx,edx
c001a832:	f7 d8                	neg    eax
c001a834:	83 d2 00             	adc    edx,0x0
c001a837:	83 c4 14             	add    esp,0x14
c001a83a:	f7 da                	neg    edx
c001a83c:	5b                   	pop    ebx
c001a83d:	5e                   	pop    esi
c001a83e:	c3                   	ret    

c001a83f <sysCallUnlink(regs*)>:
c001a83f:	56                   	push   esi
c001a840:	53                   	push   ebx
c001a841:	83 ec 10             	sub    esp,0x10
c001a844:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a848:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a84b:	68 14 01 00 00       	push   0x114
c001a850:	e8 0d 79 ff ff       	call   c0012162 <operator new(unsigned long)>
c001a855:	83 c4 0c             	add    esp,0xc
c001a858:	89 c3                	mov    ebx,eax
c001a85a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a85f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a862:	56                   	push   esi
c001a863:	53                   	push   ebx
c001a864:	e8 17 7f ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001a869:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a86c:	e8 eb 80 ff ff       	call   c001295c <File::unlink()>
c001a871:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a874:	89 c6                	mov    esi,eax
c001a876:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a878:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a87b:	31 c0                	xor    eax,eax
c001a87d:	85 f6                	test   esi,esi
c001a87f:	0f 95 c0             	setne  al
c001a882:	31 d2                	xor    edx,edx
c001a884:	f7 d8                	neg    eax
c001a886:	83 d2 00             	adc    edx,0x0
c001a889:	83 c4 14             	add    esp,0x14
c001a88c:	f7 da                	neg    edx
c001a88e:	5b                   	pop    ebx
c001a88f:	5e                   	pop    esi
c001a890:	c3                   	ret    

c001a891 <sysCallGetArgv(regs*)>:
c001a891:	83 ec 0c             	sub    esp,0xc
c001a894:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a898:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a89b:	85 c0                	test   eax,eax
c001a89d:	78 2b                	js     c001a8ca <sysCallGetArgv(regs*)+0x39>
c001a89f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a8a5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a8a8:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001a8ae:	7d 1a                	jge    c001a8ca <sysCallGetArgv(regs*)+0x39>
c001a8b0:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001a8b7:	85 c0                	test   eax,eax
c001a8b9:	74 17                	je     c001a8d2 <sysCallGetArgv(regs*)+0x41>
c001a8bb:	83 ec 08             	sub    esp,0x8
c001a8be:	50                   	push   eax
c001a8bf:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001a8c2:	e8 be 5e fe ff       	call   c0000785 <strcpy>
c001a8c7:	83 c4 10             	add    esp,0x10
c001a8ca:	31 c0                	xor    eax,eax
c001a8cc:	31 d2                	xor    edx,edx
c001a8ce:	83 c4 0c             	add    esp,0xc
c001a8d1:	c3                   	ret    
c001a8d2:	b8 01 00 00 00       	mov    eax,0x1
c001a8d7:	31 d2                	xor    edx,edx
c001a8d9:	83 c4 0c             	add    esp,0xc
c001a8dc:	c3                   	ret    

c001a8dd <sysCallTTYName(regs*)>:
c001a8dd:	56                   	push   esi
c001a8de:	53                   	push   ebx
c001a8df:	53                   	push   ebx
c001a8e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a8e4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a8e7:	85 c0                	test   eax,eax
c001a8e9:	74 5f                	je     c001a94a <sysCallTTYName(regs*)+0x6d>
c001a8eb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a8ee:	83 f8 02             	cmp    eax,0x2
c001a8f1:	77 3e                	ja     c001a931 <sysCallTTYName(regs*)+0x54>
c001a8f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8fb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001a901:	85 db                	test   ebx,ebx
c001a903:	74 45                	je     c001a94a <sysCallTTYName(regs*)+0x6d>
c001a905:	83 ec 0c             	sub    esp,0xc
c001a908:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a90a:	53                   	push   ebx
c001a90b:	ff 10                	call   DWORD PTR [eax]
c001a90d:	83 c4 10             	add    esp,0x10
c001a910:	84 c0                	test   al,al
c001a912:	74 41                	je     c001a955 <sysCallTTYName(regs*)+0x78>
c001a914:	83 ec 08             	sub    esp,0x8
c001a917:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001a91d:	53                   	push   ebx
c001a91e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a921:	e8 5f 5e fe ff       	call   c0000785 <strcpy>
c001a926:	83 c4 10             	add    esp,0x10
c001a929:	31 c0                	xor    eax,eax
c001a92b:	59                   	pop    ecx
c001a92c:	31 d2                	xor    edx,edx
c001a92e:	5b                   	pop    ebx
c001a92f:	5e                   	pop    esi
c001a930:	c3                   	ret    
c001a931:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a936:	74 bb                	je     c001a8f3 <sysCallTTYName(regs*)+0x16>
c001a938:	83 ec 0c             	sub    esp,0xc
c001a93b:	50                   	push   eax
c001a93c:	e8 e8 67 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001a941:	83 c4 10             	add    esp,0x10
c001a944:	89 c3                	mov    ebx,eax
c001a946:	85 db                	test   ebx,ebx
c001a948:	75 bb                	jne    c001a905 <sysCallTTYName(regs*)+0x28>
c001a94a:	59                   	pop    ecx
c001a94b:	b8 01 00 00 00       	mov    eax,0x1
c001a950:	31 d2                	xor    edx,edx
c001a952:	5b                   	pop    ebx
c001a953:	5e                   	pop    esi
c001a954:	c3                   	ret    
c001a955:	59                   	pop    ecx
c001a956:	b8 02 00 00 00       	mov    eax,0x2
c001a95b:	31 d2                	xor    edx,edx
c001a95d:	5b                   	pop    ebx
c001a95e:	5e                   	pop    esi
c001a95f:	c3                   	ret    

c001a960 <sysCallGetEnv(regs*)>:
c001a960:	83 ec 0c             	sub    esp,0xc
c001a963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a967:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001a96a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a96d:	85 c9                	test   ecx,ecx
c001a96f:	75 22                	jne    c001a993 <sysCallGetEnv(regs*)+0x33>
c001a971:	85 d2                	test   edx,edx
c001a973:	74 08                	je     c001a97d <sysCallGetEnv(regs*)+0x1d>
c001a975:	31 c0                	xor    eax,eax
c001a977:	31 d2                	xor    edx,edx
c001a979:	83 c4 0c             	add    esp,0xc
c001a97c:	c3                   	ret    
c001a97d:	83 ec 0c             	sub    esp,0xc
c001a980:	68 4c 83 02 c0       	push   0xc002834c
c001a985:	e8 79 5d fe ff       	call   c0000703 <strlen>
c001a98a:	83 c4 10             	add    esp,0x10
c001a98d:	31 d2                	xor    edx,edx
c001a98f:	83 c4 0c             	add    esp,0xc
c001a992:	c3                   	ret    
c001a993:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a996:	85 d2                	test   edx,edx
c001a998:	74 05                	je     c001a99f <sysCallGetEnv(regs*)+0x3f>
c001a99a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a99d:	eb d6                	jmp    c001a975 <sysCallGetEnv(regs*)+0x15>
c001a99f:	83 ec 08             	sub    esp,0x8
c001a9a2:	68 4c 83 02 c0       	push   0xc002834c
c001a9a7:	50                   	push   eax
c001a9a8:	e8 d8 5d fe ff       	call   c0000785 <strcpy>
c001a9ad:	83 c4 10             	add    esp,0x10
c001a9b0:	eb c3                	jmp    c001a975 <sysCallGetEnv(regs*)+0x15>

c001a9b2 <sysCallUSleep(regs*)>:
c001a9b2:	83 ec 14             	sub    esp,0x14
c001a9b5:	b8 e8 03 00 00       	mov    eax,0x3e8
c001a9ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a9be:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001a9c5:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001a9c8:	01 ca                	add    edx,ecx
c001a9ca:	52                   	push   edx
c001a9cb:	50                   	push   eax
c001a9cc:	e8 9d 21 00 00       	call   c001cb6e <nanoSleep(unsigned long long)>
c001a9d1:	31 c0                	xor    eax,eax
c001a9d3:	31 d2                	xor    edx,edx
c001a9d5:	83 c4 1c             	add    esp,0x1c
c001a9d8:	c3                   	ret    

c001a9d9 <sysCallSpawn(regs*)>:
c001a9d9:	56                   	push   esi
c001a9da:	53                   	push   ebx
c001a9db:	53                   	push   ebx
c001a9dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9e0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001a9e3:	85 f6                	test   esi,esi
c001a9e5:	75 08                	jne    c001a9ef <sysCallSpawn(regs*)+0x16>
c001a9e7:	59                   	pop    ecx
c001a9e8:	31 c0                	xor    eax,eax
c001a9ea:	31 d2                	xor    edx,edx
c001a9ec:	5b                   	pop    ebx
c001a9ed:	5e                   	pop    esi
c001a9ee:	c3                   	ret    
c001a9ef:	83 ec 0c             	sub    esp,0xc
c001a9f2:	68 3b 07 00 00       	push   0x73b
c001a9f7:	e8 66 77 ff ff       	call   c0012162 <operator new(unsigned long)>
c001a9fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a9ff:	89 c6                	mov    esi,eax
c001aa01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa06:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aa09:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aa0c:	56                   	push   esi
c001aa0d:	e8 bc 18 00 00       	call   c001c2ce <Process::Process(char const*, Process*, char**)>
c001aa12:	83 c4 20             	add    esp,0x20
c001aa15:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001aa1c:	75 c9                	jne    c001a9e7 <sysCallSpawn(regs*)+0xe>
c001aa1e:	83 ec 0c             	sub    esp,0xc
c001aa21:	56                   	push   esi
c001aa22:	e8 0d 1e 00 00       	call   c001c834 <Process::createUserThread()>
c001aa27:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa29:	83 c4 10             	add    esp,0x10
c001aa2c:	99                   	cdq    
c001aa2d:	59                   	pop    ecx
c001aa2e:	5b                   	pop    ebx
c001aa2f:	5e                   	pop    esi
c001aa30:	c3                   	ret    

c001aa31 <sysAppSettings(regs*)>:
c001aa31:	53                   	push   ebx
c001aa32:	83 ec 08             	sub    esp,0x8
c001aa35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa39:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001aa3c:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001aa42:	25 e0 1f 00 00       	and    eax,0x1fe0
c001aa47:	66 3d c0 09          	cmp    ax,0x9c0
c001aa4b:	75 2f                	jne    c001aa7c <sysAppSettings(regs*)+0x4b>
c001aa4d:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001aa53:	83 e0 1f             	and    eax,0x1f
c001aa56:	3c 01                	cmp    al,0x1
c001aa58:	74 2e                	je     c001aa88 <sysAppSettings(regs*)+0x57>
c001aa5a:	3c 07                	cmp    al,0x7
c001aa5c:	0f 84 bd 00 00 00    	je     c001ab1f <sysAppSettings(regs*)+0xee>
c001aa62:	84 c0                	test   al,al
c001aa64:	0f 84 dc 00 00 00    	je     c001ab46 <sysAppSettings(regs*)+0x115>
c001aa6a:	3c 08                	cmp    al,0x8
c001aa6c:	74 6d                	je     c001aadb <sysAppSettings(regs*)+0xaa>
c001aa6e:	0f b6 c0             	movzx  eax,al
c001aa71:	83 c4 08             	add    esp,0x8
c001aa74:	05 e8 03 00 00       	add    eax,0x3e8
c001aa79:	5b                   	pop    ebx
c001aa7a:	99                   	cdq    
c001aa7b:	c3                   	ret    
c001aa7c:	b8 01 00 00 00       	mov    eax,0x1
c001aa81:	31 d2                	xor    edx,edx
c001aa83:	83 c4 08             	add    esp,0x8
c001aa86:	5b                   	pop    ebx
c001aa87:	c3                   	ret    
c001aa88:	51                   	push   ecx
c001aa89:	68 00 01 00 00       	push   0x100
c001aa8e:	6a 00                	push   0x0
c001aa90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa98:	83 c0 0c             	add    eax,0xc
c001aa9b:	50                   	push   eax
c001aa9c:	e8 45 5c fe ff       	call   c00006e6 <memset>
c001aaa1:	83 c4 0c             	add    esp,0xc
c001aaa4:	68 ff 00 00 00       	push   0xff
c001aaa9:	53                   	push   ebx
c001aaaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aaaf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aab2:	83 c0 0c             	add    eax,0xc
c001aab5:	50                   	push   eax
c001aab6:	e8 f5 5b fe ff       	call   c00006b0 <memcpy>
c001aabb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aac0:	5b                   	pop    ebx
c001aac1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aac4:	5a                   	pop    edx
c001aac5:	8d 50 0c             	lea    edx,[eax+0xc]
c001aac8:	52                   	push   edx
c001aac9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aacf:	e8 34 58 ff ff       	call   c0010308 <VgaText::setTitle(char*)>
c001aad4:	83 c4 10             	add    esp,0x10
c001aad7:	31 c0                	xor    eax,eax
c001aad9:	eb a6                	jmp    c001aa81 <sysAppSettings(regs*)+0x50>
c001aadb:	83 ec 08             	sub    esp,0x8
c001aade:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001aae4:	83 e0 0f             	and    eax,0xf
c001aae7:	50                   	push   eax
c001aae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aaed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aaf0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaf6:	e8 fd 57 ff ff       	call   c00102f8 <VgaText::setTitleColour(VgaColour)>
c001aafb:	58                   	pop    eax
c001aafc:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001ab02:	5a                   	pop    edx
c001ab03:	c1 e8 04             	shr    eax,0x4
c001ab06:	83 e0 0f             	and    eax,0xf
c001ab09:	50                   	push   eax
c001ab0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab18:	e8 cb 57 ff ff       	call   c00102e8 <VgaText::setTitleTextColour(VgaColour)>
c001ab1d:	eb b5                	jmp    c001aad4 <sysAppSettings(regs*)+0xa3>
c001ab1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab24:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab27:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ab2d:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001ab33:	c0 e8 06             	shr    al,0x6
c001ab36:	83 e0 01             	and    eax,0x1
c001ab39:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001ab3f:	31 c0                	xor    eax,eax
c001ab41:	e9 3b ff ff ff       	jmp    c001aa81 <sysAppSettings(regs*)+0x50>
c001ab46:	b8 02 00 00 00       	mov    eax,0x2
c001ab4b:	e9 31 ff ff ff       	jmp    c001aa81 <sysAppSettings(regs*)+0x50>

c001ab50 <sysSetFatAttrib(regs*)>:
c001ab50:	57                   	push   edi
c001ab51:	56                   	push   esi
c001ab52:	53                   	push   ebx
c001ab53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab57:	83 ec 0c             	sub    esp,0xc
c001ab5a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001ab5d:	68 14 01 00 00       	push   0x114
c001ab62:	e8 fb 75 ff ff       	call   c0012162 <operator new(unsigned long)>
c001ab67:	83 c4 0c             	add    esp,0xc
c001ab6a:	89 c3                	mov    ebx,eax
c001ab6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab71:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab74:	57                   	push   edi
c001ab75:	53                   	push   ebx
c001ab76:	e8 05 7c ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001ab7b:	83 c4 0c             	add    esp,0xc
c001ab7e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001ab81:	0f b6 d4             	movzx  edx,ah
c001ab84:	0f b6 c0             	movzx  eax,al
c001ab87:	52                   	push   edx
c001ab88:	50                   	push   eax
c001ab89:	53                   	push   ebx
c001ab8a:	e8 67 7e ff ff       	call   c00129f6 <File::chfatattr(unsigned char, unsigned char)>
c001ab8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab92:	89 c6                	mov    esi,eax
c001ab94:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	31 c0                	xor    eax,eax
c001ab9e:	5b                   	pop    ebx
c001ab9f:	85 f6                	test   esi,esi
c001aba1:	5e                   	pop    esi
c001aba2:	0f 95 c0             	setne  al
c001aba5:	5f                   	pop    edi
c001aba6:	31 d2                	xor    edx,edx
c001aba8:	f7 d8                	neg    eax
c001abaa:	83 d2 00             	adc    edx,0x0
c001abad:	f7 da                	neg    edx
c001abaf:	c3                   	ret    

c001abb0 <sysPanic(regs*)>:
c001abb0:	83 ec 18             	sub    esp,0x18
c001abb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abb7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001abba:	e8 14 eb ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001abbf:	c7 04 24 03 84 02 c0 	mov    DWORD PTR [esp],0xc0028403
c001abc6:	e8 08 eb ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001abcb:	b8 01 00 00 00       	mov    eax,0x1
c001abd0:	31 d2                	xor    edx,edx
c001abd2:	83 c4 1c             	add    esp,0x1c
c001abd5:	c3                   	ret    

c001abd6 <sysPipe(regs*)>:
c001abd6:	57                   	push   edi
c001abd7:	56                   	push   esi
c001abd8:	53                   	push   ebx
c001abd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abdd:	83 ec 0c             	sub    esp,0xc
c001abe0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001abe3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001abe6:	6a 20                	push   0x20
c001abe8:	e8 75 75 ff ff       	call   c0012162 <operator new(unsigned long)>
c001abed:	89 c3                	mov    ebx,eax
c001abef:	58                   	pop    eax
c001abf0:	5a                   	pop    edx
c001abf1:	68 00 50 00 00       	push   0x5000
c001abf6:	53                   	push   ebx
c001abf7:	e8 4a 50 ff ff       	call   c000fc46 <Pipe::Pipe(int)>
c001abfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abff:	e8 70 62 ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c001ac04:	89 07                	mov    DWORD PTR [edi],eax
c001ac06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac09:	e8 66 62 ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c001ac0e:	83 c4 10             	add    esp,0x10
c001ac11:	89 06                	mov    DWORD PTR [esi],eax
c001ac13:	31 d2                	xor    edx,edx
c001ac15:	5b                   	pop    ebx
c001ac16:	31 c0                	xor    eax,eax
c001ac18:	5e                   	pop    esi
c001ac19:	5f                   	pop    edi
c001ac1a:	c3                   	ret    

c001ac1b <sysGetUnixTime(regs*)>:
c001ac1b:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c001ac20:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ac26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac2a:	e9 19 85 ff ff       	jmp    c0013148 <Clock::timeInSecondsLocal()>

c001ac2f <string_ends_with(char const*, char const*)>:
c001ac2f:	57                   	push   edi
c001ac30:	56                   	push   esi
c001ac31:	53                   	push   ebx
c001ac32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac36:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ac3a:	83 ec 0c             	sub    esp,0xc
c001ac3d:	53                   	push   ebx
c001ac3e:	e8 c0 5a fe ff       	call   c0000703 <strlen>
c001ac43:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ac46:	89 c6                	mov    esi,eax
c001ac48:	e8 b6 5a fe ff       	call   c0000703 <strlen>
c001ac4d:	83 c4 10             	add    esp,0x10
c001ac50:	39 c6                	cmp    esi,eax
c001ac52:	7d 06                	jge    c001ac5a <string_ends_with(char const*, char const*)+0x2b>
c001ac54:	5b                   	pop    ebx
c001ac55:	31 c0                	xor    eax,eax
c001ac57:	5e                   	pop    esi
c001ac58:	5f                   	pop    edi
c001ac59:	c3                   	ret    
c001ac5a:	83 ec 08             	sub    esp,0x8
c001ac5d:	29 c6                	sub    esi,eax
c001ac5f:	57                   	push   edi
c001ac60:	01 f3                	add    ebx,esi
c001ac62:	53                   	push   ebx
c001ac63:	e8 6e 5b fe ff       	call   c00007d6 <strcmp>
c001ac68:	83 c4 10             	add    esp,0x10
c001ac6b:	85 c0                	test   eax,eax
c001ac6d:	5b                   	pop    ebx
c001ac6e:	0f 94 c0             	sete   al
c001ac71:	5e                   	pop    esi
c001ac72:	0f b6 c0             	movzx  eax,al
c001ac75:	5f                   	pop    edi
c001ac76:	c3                   	ret    

c001ac77 <sysCallOpen(regs*)>:
c001ac77:	56                   	push   esi
c001ac78:	53                   	push   ebx
c001ac79:	81 ec 04 01 00 00    	sub    esp,0x104
c001ac7f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001ac86:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001ac89:	85 c9                	test   ecx,ecx
c001ac8b:	0f 84 b3 00 00 00    	je     c001ad44 <sysCallOpen(regs*)+0xcd>
c001ac91:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001ac94:	85 c0                	test   eax,eax
c001ac96:	0f 84 a8 00 00 00    	je     c001ad44 <sysCallOpen(regs*)+0xcd>
c001ac9c:	52                   	push   edx
c001ac9d:	68 12 84 02 c0       	push   0xc0028412
c001aca2:	50                   	push   eax
c001aca3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aca7:	56                   	push   esi
c001aca8:	e8 29 79 ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c001acad:	89 34 24             	mov    DWORD PTR [esp],esi
c001acb0:	e8 4e 5a fe ff       	call   c0000703 <strlen>
c001acb5:	83 c4 10             	add    esp,0x10
c001acb8:	48                   	dec    eax
c001acb9:	74 1d                	je     c001acd8 <sysCallOpen(regs*)+0x61>
c001acbb:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001acbe:	eb 0f                	jmp    c001accf <sysCallOpen(regs*)+0x58>
c001acc0:	80 fa 3a             	cmp    dl,0x3a
c001acc3:	74 0f                	je     c001acd4 <sysCallOpen(regs*)+0x5d>
c001acc5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001acc9:	48                   	dec    eax
c001acca:	74 0c                	je     c001acd8 <sysCallOpen(regs*)+0x61>
c001accc:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001accf:	80 fa 2e             	cmp    dl,0x2e
c001acd2:	75 ec                	jne    c001acc0 <sysCallOpen(regs*)+0x49>
c001acd4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001acd8:	83 ec 08             	sub    esp,0x8
c001acdb:	68 16 84 02 c0       	push   0xc0028416
c001ace0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ace3:	e8 47 ff ff ff       	call   c001ac2f <string_ends_with(char const*, char const*)>
c001ace8:	83 c4 10             	add    esp,0x10
c001aceb:	85 c0                	test   eax,eax
c001aced:	75 17                	jne    c001ad06 <sysCallOpen(regs*)+0x8f>
c001acef:	83 ec 08             	sub    esp,0x8
c001acf2:	68 37 84 02 c0       	push   0xc0028437
c001acf7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001acfa:	e8 30 ff ff ff       	call   c001ac2f <string_ends_with(char const*, char const*)>
c001acff:	83 c4 10             	add    esp,0x10
c001ad02:	85 c0                	test   eax,eax
c001ad04:	74 51                	je     c001ad57 <sysCallOpen(regs*)+0xe0>
c001ad06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ad09:	83 ec 08             	sub    esp,0x8
c001ad0c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001ad12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ad19:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ad1c:	ff 30                	push   DWORD PTR [eax]
c001ad1e:	68 1b 84 02 c0       	push   0xc002841b
c001ad23:	e8 29 75 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ad28:	c7 04 24 2a 84 02 c0 	mov    DWORD PTR [esp],0xc002842a
c001ad2f:	e8 1d 75 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ad34:	83 c4 10             	add    esp,0x10
c001ad37:	81 c4 04 01 00 00    	add    esp,0x104
c001ad3d:	31 c0                	xor    eax,eax
c001ad3f:	31 d2                	xor    edx,edx
c001ad41:	5b                   	pop    ebx
c001ad42:	5e                   	pop    esi
c001ad43:	c3                   	ret    
c001ad44:	81 c4 04 01 00 00    	add    esp,0x104
c001ad4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad54:	5b                   	pop    ebx
c001ad55:	5e                   	pop    esi
c001ad56:	c3                   	ret    
c001ad57:	83 ec 08             	sub    esp,0x8
c001ad5a:	68 17 84 02 c0       	push   0xc0028417
c001ad5f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad62:	e8 6f 5a fe ff       	call   c00007d6 <strcmp>
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	85 c0                	test   eax,eax
c001ad6c:	74 98                	je     c001ad06 <sysCallOpen(regs*)+0x8f>
c001ad6e:	83 ec 08             	sub    esp,0x8
c001ad71:	68 16 84 02 c0       	push   0xc0028416
c001ad76:	56                   	push   esi
c001ad77:	e8 b3 fe ff ff       	call   c001ac2f <string_ends_with(char const*, char const*)>
c001ad7c:	83 c4 10             	add    esp,0x10
c001ad7f:	85 c0                	test   eax,eax
c001ad81:	75 83                	jne    c001ad06 <sysCallOpen(regs*)+0x8f>
c001ad83:	83 ec 08             	sub    esp,0x8
c001ad86:	68 3c 84 02 c0       	push   0xc002843c
c001ad8b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad8e:	e8 9c fe ff ff       	call   c001ac2f <string_ends_with(char const*, char const*)>
c001ad93:	83 c4 10             	add    esp,0x10
c001ad96:	85 c0                	test   eax,eax
c001ad98:	0f 85 d1 00 00 00    	jne    c001ae6f <sysCallOpen(regs*)+0x1f8>
c001ad9e:	83 ec 08             	sub    esp,0x8
c001ada1:	68 41 84 02 c0       	push   0xc0028441
c001ada6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ada9:	e8 81 fe ff ff       	call   c001ac2f <string_ends_with(char const*, char const*)>
c001adae:	83 c4 10             	add    esp,0x10
c001adb1:	85 c0                	test   eax,eax
c001adb3:	0f 85 b6 00 00 00    	jne    c001ae6f <sysCallOpen(regs*)+0x1f8>
c001adb9:	83 ec 08             	sub    esp,0x8
c001adbc:	68 3d 84 02 c0       	push   0xc002843d
c001adc1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001adc4:	e8 0d 5a fe ff       	call   c00007d6 <strcmp>
c001adc9:	83 c4 10             	add    esp,0x10
c001adcc:	85 c0                	test   eax,eax
c001adce:	0f 84 9b 00 00 00    	je     c001ae6f <sysCallOpen(regs*)+0x1f8>
c001add4:	83 ec 08             	sub    esp,0x8
c001add7:	68 3c 84 02 c0       	push   0xc002843c
c001addc:	56                   	push   esi
c001addd:	e8 4d fe ff ff       	call   c001ac2f <string_ends_with(char const*, char const*)>
c001ade2:	83 c4 10             	add    esp,0x10
c001ade5:	85 c0                	test   eax,eax
c001ade7:	0f 85 82 00 00 00    	jne    c001ae6f <sysCallOpen(regs*)+0x1f8>
c001aded:	83 ec 0c             	sub    esp,0xc
c001adf0:	68 14 01 00 00       	push   0x114
c001adf5:	e8 68 73 ff ff       	call   c0012162 <operator new(unsigned long)>
c001adfa:	83 c4 0c             	add    esp,0xc
c001adfd:	89 c6                	mov    esi,eax
c001adff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae04:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae07:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae0a:	56                   	push   esi
c001ae0b:	e8 70 79 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001ae10:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ae13:	83 c4 10             	add    esp,0x10
c001ae16:	0f b6 c2             	movzx  eax,dl
c001ae19:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001ae1c:	89 d0                	mov    eax,edx
c001ae1e:	83 e0 01             	and    eax,0x1
c001ae21:	f6 c2 02             	test   dl,0x2
c001ae24:	74 03                	je     c001ae29 <sysCallOpen(regs*)+0x1b2>
c001ae26:	83 c8 02             	or     eax,0x2
c001ae29:	f6 c2 04             	test   dl,0x4
c001ae2c:	74 03                	je     c001ae31 <sysCallOpen(regs*)+0x1ba>
c001ae2e:	83 c8 04             	or     eax,0x4
c001ae31:	f6 c2 08             	test   dl,0x8
c001ae34:	74 03                	je     c001ae39 <sysCallOpen(regs*)+0x1c2>
c001ae36:	83 c8 0a             	or     eax,0xa
c001ae39:	83 e2 10             	and    edx,0x10
c001ae3c:	74 03                	je     c001ae41 <sysCallOpen(regs*)+0x1ca>
c001ae3e:	83 c8 12             	or     eax,0x12
c001ae41:	83 ec 08             	sub    esp,0x8
c001ae44:	50                   	push   eax
c001ae45:	56                   	push   esi
c001ae46:	e8 99 79 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	85 c0                	test   eax,eax
c001ae50:	0f 85 ee fe ff ff    	jne    c001ad44 <sysCallOpen(regs*)+0xcd>
c001ae56:	83 ec 0c             	sub    esp,0xc
c001ae59:	56                   	push   esi
c001ae5a:	e8 15 60 ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c001ae5f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ae62:	89 02                	mov    DWORD PTR [edx],eax
c001ae64:	c1 f8 1f             	sar    eax,0x1f
c001ae67:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ae6a:	e9 c5 fe ff ff       	jmp    c001ad34 <sysCallOpen(regs*)+0xbd>
c001ae6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae72:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001ae78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ae7f:	e9 b3 fe ff ff       	jmp    c001ad37 <sysCallOpen(regs*)+0xc0>

c001ae84 <setupSystemCalls()>:
c001ae84:	c7 05 a0 af 02 c0 e0 a0 01 c0 	mov    DWORD PTR ds:0xc002afa0,0xc001a0e0
c001ae8e:	c7 05 a4 af 02 c0 0e 9f 01 c0 	mov    DWORD PTR ds:0xc002afa4,0xc0019f0e
c001ae98:	c7 05 a8 af 02 c0 23 a0 01 c0 	mov    DWORD PTR ds:0xc002afa8,0xc001a023
c001aea2:	c7 05 ac af 02 c0 78 a0 01 c0 	mov    DWORD PTR ds:0xc002afac,0xc001a078
c001aeac:	c7 05 b0 af 02 c0 bb 9f 01 c0 	mov    DWORD PTR ds:0xc002afb0,0xc0019fbb
c001aeb6:	c7 05 b4 af 02 c0 fa a0 01 c0 	mov    DWORD PTR ds:0xc002afb4,0xc001a0fa
c001aec0:	c7 05 b8 af 02 c0 9f a2 01 c0 	mov    DWORD PTR ds:0xc002afb8,0xc001a29f
c001aeca:	c7 05 bc af 02 c0 be a2 01 c0 	mov    DWORD PTR ds:0xc002afbc,0xc001a2be
c001aed4:	c7 05 c4 af 02 c0 1f a6 01 c0 	mov    DWORD PTR ds:0xc002afc4,0xc001a61f
c001aede:	c7 05 c0 af 02 c0 77 ac 01 c0 	mov    DWORD PTR ds:0xc002afc0,0xc001ac77
c001aee8:	c7 05 c8 af 02 c0 a7 a6 01 c0 	mov    DWORD PTR ds:0xc002afc8,0xc001a6a7
c001aef2:	c7 05 cc af 02 c0 1d a3 01 c0 	mov    DWORD PTR ds:0xc002afcc,0xc001a31d
c001aefc:	c7 05 d0 af 02 c0 06 a1 01 c0 	mov    DWORD PTR ds:0xc002afd0,0xc001a106
c001af06:	c7 05 d4 af 02 c0 0b a1 01 c0 	mov    DWORD PTR ds:0xc002afd4,0xc001a10b
c001af10:	c7 05 d8 af 02 c0 14 a7 01 c0 	mov    DWORD PTR ds:0xc002afd8,0xc001a714
c001af1a:	c7 05 dc af 02 c0 6d a7 01 c0 	mov    DWORD PTR ds:0xc002afdc,0xc001a76d
c001af24:	c7 05 e0 af 02 c0 05 a4 01 c0 	mov    DWORD PTR ds:0xc002afe0,0xc001a405
c001af2e:	c7 05 e4 af 02 c0 6e a4 01 c0 	mov    DWORD PTR ds:0xc002afe4,0xc001a46e
c001af38:	c7 05 e8 af 02 c0 9c a5 01 c0 	mov    DWORD PTR ds:0xc002afe8,0xc001a59c
c001af42:	c7 05 ec af 02 c0 10 a1 01 c0 	mov    DWORD PTR ds:0xc002afec,0xc001a110
c001af4c:	c7 05 f0 af 02 c0 d3 a7 01 c0 	mov    DWORD PTR ds:0xc002aff0,0xc001a7d3
c001af56:	c7 05 f4 af 02 c0 1a a1 01 c0 	mov    DWORD PTR ds:0xc002aff4,0xc001a11a
c001af60:	c7 05 f8 af 02 c0 25 a1 01 c0 	mov    DWORD PTR ds:0xc002aff8,0xc001a125
c001af6a:	c7 05 fc af 02 c0 ed a7 01 c0 	mov    DWORD PTR ds:0xc002affc,0xc001a7ed
c001af74:	c7 05 00 b0 02 c0 3f a8 01 c0 	mov    DWORD PTR ds:0xc002b000,0xc001a83f
c001af7e:	c7 05 04 b0 02 c0 30 a1 01 c0 	mov    DWORD PTR ds:0xc002b004,0xc001a130
c001af88:	c7 05 08 b0 02 c0 91 a8 01 c0 	mov    DWORD PTR ds:0xc002b008,0xc001a891
c001af92:	c7 05 0c b0 02 c0 da a2 01 c0 	mov    DWORD PTR ds:0xc002b00c,0xc001a2da
c001af9c:	c7 05 10 b0 02 c0 dd a8 01 c0 	mov    DWORD PTR ds:0xc002b010,0xc001a8dd
c001afa6:	c7 05 14 b0 02 c0 ab a3 01 c0 	mov    DWORD PTR ds:0xc002b014,0xc001a3ab
c001afb0:	c7 05 18 b0 02 c0 b2 a9 01 c0 	mov    DWORD PTR ds:0xc002b018,0xc001a9b2
c001afba:	c7 05 1c b0 02 c0 eb a4 01 c0 	mov    DWORD PTR ds:0xc002b01c,0xc001a4eb
c001afc4:	c7 05 20 b0 02 c0 d9 a9 01 c0 	mov    DWORD PTR ds:0xc002b020,0xc001a9d9
c001afce:	c7 05 24 b0 02 c0 60 a9 01 c0 	mov    DWORD PTR ds:0xc002b024,0xc001a960
c001afd8:	c7 05 28 b0 02 c0 31 aa 01 c0 	mov    DWORD PTR ds:0xc002b028,0xc001aa31
c001afe2:	c7 05 2c b0 02 c0 40 a1 01 c0 	mov    DWORD PTR ds:0xc002b02c,0xc001a140
c001afec:	c7 05 30 b0 02 c0 aa a1 01 c0 	mov    DWORD PTR ds:0xc002b030,0xc001a1aa
c001aff6:	c7 05 34 b0 02 c0 f0 a1 01 c0 	mov    DWORD PTR ds:0xc002b034,0xc001a1f0
c001b000:	c7 05 38 b0 02 c0 50 ab 01 c0 	mov    DWORD PTR ds:0xc002b038,0xc001ab50
c001b00a:	c7 05 3c b0 02 c0 b0 ab 01 c0 	mov    DWORD PTR ds:0xc002b03c,0xc001abb0
c001b014:	c7 05 40 b0 02 c0 41 a2 01 c0 	mov    DWORD PTR ds:0xc002b040,0xc001a241
c001b01e:	c7 05 44 b0 02 c0 d6 ab 01 c0 	mov    DWORD PTR ds:0xc002b044,0xc001abd6
c001b028:	c7 05 48 b0 02 c0 1b ac 01 c0 	mov    DWORD PTR ds:0xc002b048,0xc001ac1b
c001b032:	c7 05 4c b0 02 c0 26 9f 01 c0 	mov    DWORD PTR ds:0xc002b04c,0xc0019f26
c001b03c:	c3                   	ret    

c001b03d <systemCall(regs*, void*)>:
c001b03d:	53                   	push   ebx
c001b03e:	83 ec 08             	sub    esp,0x8
c001b041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b045:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b048:	83 f8 7f             	cmp    eax,0x7f
c001b04b:	77 16                	ja     c001b063 <systemCall(regs*, void*)+0x26>
c001b04d:	8b 14 85 a0 af 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5060]
c001b054:	85 d2                	test   edx,edx
c001b056:	74 0b                	je     c001b063 <systemCall(regs*, void*)+0x26>
c001b058:	83 ec 0c             	sub    esp,0xc
c001b05b:	53                   	push   ebx
c001b05c:	ff d2                	call   edx
c001b05e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b061:	eb 0d                	jmp    c001b070 <systemCall(regs*, void*)+0x33>
c001b063:	52                   	push   edx
c001b064:	52                   	push   edx
c001b065:	50                   	push   eax
c001b066:	68 46 84 02 c0       	push   0xc0028446
c001b06b:	e8 e1 71 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b070:	83 c4 10             	add    esp,0x10
c001b073:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b078:	31 d2                	xor    edx,edx
c001b07a:	83 c4 08             	add    esp,0x8
c001b07d:	5b                   	pop    ebx
c001b07e:	c3                   	ret    

c001b07f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b07f:	55                   	push   ebp
c001b080:	89 e5                	mov    ebp,esp
c001b082:	57                   	push   edi
c001b083:	56                   	push   esi
c001b084:	53                   	push   ebx
c001b085:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b08b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b08e:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b091:	85 c0                	test   eax,eax
c001b093:	0f 95 c1             	setne  cl
c001b096:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b09a:	0f 94 c2             	sete   dl
c001b09d:	84 d1                	test   cl,dl
c001b09f:	74 26                	je     c001b0c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b0a1:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b0a8:	74 1d                	je     c001b0c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b0aa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b0ad:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b0b3:	89 d6                	mov    esi,edx
c001b0b5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b0bb:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b0c1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b0c4:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b0c7:	83 ec 0c             	sub    esp,0xc
c001b0ca:	05 ff 0f 00 00       	add    eax,0xfff
c001b0cf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b0d2:	6a 01                	push   0x1
c001b0d4:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b0da:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b0e0:	e8 9a 61 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c001b0e5:	83 c4 10             	add    esp,0x10
c001b0e8:	89 c6                	mov    esi,eax
c001b0ea:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b0f0:	0f 86 21 01 00 00    	jbe    c001b217 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b0f6:	c1 eb 0c             	shr    ebx,0xc
c001b0f9:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b103:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b109:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b10c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b10f:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b115:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b118:	29 d8                	sub    eax,ebx
c001b11a:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b120:	0f 83 f4 00 00 00    	jae    c001b21a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b126:	83 ec 0c             	sub    esp,0xc
c001b129:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b12f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b132:	3d 00 10 00 00       	cmp    eax,0x1000
c001b137:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b139:	52                   	push   edx
c001b13a:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b140:	52                   	push   edx
c001b141:	76 05                	jbe    c001b148 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b143:	b8 00 10 00 00       	mov    eax,0x1000
c001b148:	31 d2                	xor    edx,edx
c001b14a:	52                   	push   edx
c001b14b:	50                   	push   eax
c001b14c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b14f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b152:	83 c4 20             	add    esp,0x20
c001b155:	85 c0                	test   eax,eax
c001b157:	74 1f                	je     c001b178 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b159:	51                   	push   ecx
c001b15a:	51                   	push   ecx
c001b15b:	50                   	push   eax
c001b15c:	68 5a 84 02 c0       	push   0xc002845a
c001b161:	e8 eb 70 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b166:	89 34 24             	mov    DWORD PTR [esp],esi
c001b169:	e8 6b 64 ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c001b16e:	83 c4 10             	add    esp,0x10
c001b171:	31 c0                	xor    eax,eax
c001b173:	e9 7c 01 00 00       	jmp    c001b2f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b178:	e8 a9 14 00 00       	call   c001c626 <lockScheduler()>
c001b17d:	e8 88 45 ff ff       	call   c000f70a <Phys::allocatePage()>
c001b182:	6a 07                	push   0x7
c001b184:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b18a:	56                   	push   esi
c001b18b:	50                   	push   eax
c001b18c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b192:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b195:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b19b:	e8 b2 67 ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b1a0:	83 c4 0c             	add    esp,0xc
c001b1a3:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b1a9:	6a 00                	push   0x0
c001b1ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b1b1:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b1b4:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b1ba:	e8 f1 65 ff ff       	call   c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>
c001b1bf:	58                   	pop    eax
c001b1c0:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b1c6:	5a                   	pop    edx
c001b1c7:	68 07 04 00 00       	push   0x407
c001b1cc:	53                   	push   ebx
c001b1cd:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b1d3:	50                   	push   eax
c001b1d4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b1da:	6a 00                	push   0x0
c001b1dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1e4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b1ea:	e8 19 6b ff ff       	call   c0011d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b1ef:	83 c4 1c             	add    esp,0x1c
c001b1f2:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b1f8:	68 00 10 00 00       	push   0x1000
c001b1fd:	50                   	push   eax
c001b1fe:	56                   	push   esi
c001b1ff:	e8 ac 54 fe ff       	call   c00006b0 <memcpy>
c001b204:	e8 1f 14 00 00       	call   c001c628 <unlockScheduler()>
c001b209:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b20f:	83 c4 10             	add    esp,0x10
c001b212:	e9 f5 fe ff ff       	jmp    c001b10c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b217:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b21a:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b224:	0f 86 bc 00 00 00    	jbe    c001b2e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b22a:	e8 f7 13 00 00       	call   c001c626 <lockScheduler()>
c001b22f:	51                   	push   ecx
c001b230:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b236:	6a 00                	push   0x0
c001b238:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b23d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b240:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b246:	e8 65 65 ff ff       	call   c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>
c001b24b:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b251:	83 c4 10             	add    esp,0x10
c001b254:	c1 e8 0c             	shr    eax,0xc
c001b257:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b261:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b267:	e8 9e 44 ff ff       	call   c000f70a <Phys::allocatePage()>
c001b26c:	6a 07                	push   0x7
c001b26e:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b274:	56                   	push   esi
c001b275:	50                   	push   eax
c001b276:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b27c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b27f:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b285:	e8 c8 66 ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b28a:	58                   	pop    eax
c001b28b:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b291:	5a                   	pop    edx
c001b292:	68 07 04 00 00       	push   0x407
c001b297:	53                   	push   ebx
c001b298:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b29e:	50                   	push   eax
c001b29f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b2a5:	6a 00                	push   0x0
c001b2a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2af:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b2b5:	e8 4e 6a ff ff       	call   c0011d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b2ba:	83 c4 1c             	add    esp,0x1c
c001b2bd:	68 00 10 00 00       	push   0x1000
c001b2c2:	6a 00                	push   0x0
c001b2c4:	56                   	push   esi
c001b2c5:	e8 1c 54 fe ff       	call   c00006e6 <memset>
c001b2ca:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b2d0:	83 c4 10             	add    esp,0x10
c001b2d3:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b2d9:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b2df:	77 86                	ja     c001b267 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b2e1:	e8 42 13 00 00       	call   c001c628 <unlockScheduler()>
c001b2e6:	83 ec 0c             	sub    esp,0xc
c001b2e9:	56                   	push   esi
c001b2ea:	e8 ea 62 ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c001b2ef:	83 c4 10             	add    esp,0x10
c001b2f2:	b0 01                	mov    al,0x1
c001b2f4:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b2f7:	5b                   	pop    ebx
c001b2f8:	5e                   	pop    esi
c001b2f9:	5f                   	pop    edi
c001b2fa:	5d                   	pop    ebp
c001b2fb:	c3                   	ret    

c001b2fc <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b2fc:	55                   	push   ebp
c001b2fd:	57                   	push   edi
c001b2fe:	56                   	push   esi
c001b2ff:	53                   	push   ebx
c001b300:	83 ec 48             	sub    esp,0x48
c001b303:	68 14 01 00 00       	push   0x114
c001b308:	e8 55 6e ff ff       	call   c0012162 <operator new(unsigned long)>
c001b30d:	83 c4 0c             	add    esp,0xc
c001b310:	89 c6                	mov    esi,eax
c001b312:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b316:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b31a:	50                   	push   eax
c001b31b:	e8 60 74 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001b320:	58                   	pop    eax
c001b321:	5a                   	pop    edx
c001b322:	6a 01                	push   0x1
c001b324:	56                   	push   esi
c001b325:	e8 ba 74 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001b32a:	83 c4 10             	add    esp,0x10
c001b32d:	85 c0                	test   eax,eax
c001b32f:	0f 85 47 01 00 00    	jne    c001b47c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b335:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b33d:	83 ec 0c             	sub    esp,0xc
c001b340:	6a 34                	push   0x34
c001b342:	e8 19 3e ff ff       	call   c000f160 <malloc>
c001b347:	89 c3                	mov    ebx,eax
c001b349:	58                   	pop    eax
c001b34a:	8b 06                	mov    eax,DWORD PTR [esi]
c001b34c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b350:	57                   	push   edi
c001b351:	53                   	push   ebx
c001b352:	6a 00                	push   0x0
c001b354:	6a 34                	push   0x34
c001b356:	56                   	push   esi
c001b357:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b35a:	83 c4 20             	add    esp,0x20
c001b35d:	85 c0                	test   eax,eax
c001b35f:	0f 85 17 01 00 00    	jne    c001b47c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b365:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001b36b:	0f 85 0b 01 00 00    	jne    c001b47c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b371:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b374:	85 c0                	test   eax,eax
c001b376:	0f 84 00 01 00 00    	je     c001b47c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b37c:	31 d2                	xor    edx,edx
c001b37e:	55                   	push   ebp
c001b37f:	52                   	push   edx
c001b380:	50                   	push   eax
c001b381:	56                   	push   esi
c001b382:	e8 1b 75 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001b387:	83 c4 10             	add    esp,0x10
c001b38a:	85 c0                	test   eax,eax
c001b38c:	0f 85 ea 00 00 00    	jne    c001b47c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b392:	83 ec 0c             	sub    esp,0xc
c001b395:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001b398:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b39c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b3a0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b3a4:	0f af c2             	imul   eax,edx
c001b3a7:	50                   	push   eax
c001b3a8:	e8 b3 3d ff ff       	call   c000f160 <malloc>
c001b3ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b3b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3b4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b3b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b3ba:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b3be:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b3c2:	0f af c2             	imul   eax,edx
c001b3c5:	99                   	cdq    
c001b3c6:	52                   	push   edx
c001b3c7:	50                   	push   eax
c001b3c8:	56                   	push   esi
c001b3c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b3cc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b3cf:	83 c4 20             	add    esp,0x20
c001b3d2:	85 c0                	test   eax,eax
c001b3d4:	0f 84 a2 00 00 00    	je     c001b47c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b3da:	31 d2                	xor    edx,edx
c001b3dc:	51                   	push   ecx
c001b3dd:	52                   	push   edx
c001b3de:	50                   	push   eax
c001b3df:	56                   	push   esi
c001b3e0:	e8 bd 74 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001b3e5:	83 c4 10             	add    esp,0x10
c001b3e8:	85 c0                	test   eax,eax
c001b3ea:	0f 85 8c 00 00 00    	jne    c001b47c <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b3f0:	83 ec 0c             	sub    esp,0xc
c001b3f3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b3f7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b3fb:	31 ed                	xor    ebp,ebp
c001b3fd:	0f af c2             	imul   eax,edx
c001b400:	50                   	push   eax
c001b401:	e8 5a 3d ff ff       	call   c000f160 <malloc>
c001b406:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b409:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b40d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b413:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b417:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b41b:	0f af c2             	imul   eax,edx
c001b41e:	99                   	cdq    
c001b41f:	52                   	push   edx
c001b420:	50                   	push   eax
c001b421:	56                   	push   esi
c001b422:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b425:	83 c4 20             	add    esp,0x20
c001b428:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b430:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001b434:	0f 86 80 00 00 00    	jbe    c001b4ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001b43a:	0f b7 fd             	movzx  edi,bp
c001b43d:	c1 e7 05             	shl    edi,0x5
c001b440:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001b444:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001b447:	75 6b                	jne    c001b4b4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001b449:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001b44c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b450:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001b453:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b457:	52                   	push   edx
c001b458:	31 d2                	xor    edx,edx
c001b45a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001b45d:	52                   	push   edx
c001b45e:	50                   	push   eax
c001b45f:	56                   	push   esi
c001b460:	e8 3d 74 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001b465:	83 c4 10             	add    esp,0x10
c001b468:	85 c0                	test   eax,eax
c001b46a:	74 17                	je     c001b483 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001b46c:	83 ec 0c             	sub    esp,0xc
c001b46f:	68 85 84 02 c0       	push   0xc0028485
c001b474:	e8 d8 6d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b479:	83 c4 10             	add    esp,0x10
c001b47c:	31 c0                	xor    eax,eax
c001b47e:	e9 87 00 00 00       	jmp    c001b50a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001b483:	83 ec 0c             	sub    esp,0xc
c001b486:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001b489:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001b48c:	50                   	push   eax
c001b48d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b491:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b495:	56                   	push   esi
c001b496:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001b49a:	e8 e0 fb ff ff       	call   c001b07f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001b49f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b4a3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001b4a7:	83 c4 20             	add    esp,0x20
c001b4aa:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001b4ae:	73 04                	jae    c001b4b4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001b4b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4b4:	45                   	inc    ebp
c001b4b5:	e9 76 ff ff ff       	jmp    c001b430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001b4ba:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001b4be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b4c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4c6:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001b4cc:	83 ec 0c             	sub    esp,0xc
c001b4cf:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001b4d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b4da:	05 00 10 00 00       	add    eax,0x1000
c001b4df:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4e6:	e8 85 3c ff ff       	call   c000f170 <free>
c001b4eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4ee:	e8 7d 3c ff ff       	call   c000f170 <free>
c001b4f3:	58                   	pop    eax
c001b4f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4f8:	e8 73 3c ff ff       	call   c000f170 <free>
c001b4fd:	89 34 24             	mov    DWORD PTR [esp],esi
c001b500:	e8 3d 73 ff ff       	call   c0012842 <File::close()>
c001b505:	83 c4 10             	add    esp,0x10
c001b508:	b0 01                	mov    al,0x1
c001b50a:	83 c4 3c             	add    esp,0x3c
c001b50d:	5b                   	pop    ebx
c001b50e:	5e                   	pop    esi
c001b50f:	5f                   	pop    edi
c001b510:	5d                   	pop    ebp
c001b511:	c3                   	ret    

c001b512 <Thr::runtimeReferenceHelper()>:
c001b512:	83 ec 18             	sub    esp,0x18
c001b515:	68 8d 84 02 c0       	push   0xc002848d
c001b51a:	e8 32 6d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b51f:	fa                   	cli    
c001b520:	83 c4 10             	add    esp,0x10
c001b523:	eb fe                	jmp    c001b523 <Thr::runtimeReferenceHelper()+0x11>

c001b525 <Thr::getAddressOfKernelSymbol(char const*)>:
c001b525:	57                   	push   edi
c001b526:	56                   	push   esi
c001b527:	53                   	push   ebx
c001b528:	31 db                	xor    ebx,ebx
c001b52a:	39 1d 40 b9 02 c0    	cmp    DWORD PTR ds:0xc002b940,ebx
c001b530:	7e 3c                	jle    c001b56e <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001b532:	8b 34 9d c0 b8 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4740]
c001b539:	31 ff                	xor    edi,edi
c001b53b:	39 3c 9d c0 b7 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4840],edi
c001b542:	7e 27                	jle    c001b56b <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001b544:	50                   	push   eax
c001b545:	50                   	push   eax
c001b546:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b54a:	8b 06                	mov    eax,DWORD PTR [esi]
c001b54c:	03 04 9d 40 b8 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd47c0]
c001b553:	50                   	push   eax
c001b554:	e8 7d 52 fe ff       	call   c00007d6 <strcmp>
c001b559:	83 c4 10             	add    esp,0x10
c001b55c:	85 c0                	test   eax,eax
c001b55e:	75 05                	jne    c001b565 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001b560:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b563:	eb 0b                	jmp    c001b570 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001b565:	83 c6 10             	add    esi,0x10
c001b568:	47                   	inc    edi
c001b569:	eb d0                	jmp    c001b53b <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001b56b:	43                   	inc    ebx
c001b56c:	eb bc                	jmp    c001b52a <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001b56e:	31 c0                	xor    eax,eax
c001b570:	5b                   	pop    ebx
c001b571:	5e                   	pop    esi
c001b572:	5f                   	pop    edi
c001b573:	c3                   	ret    

c001b574 <Thr::loadKernelSymbolTable(char const*)>:
c001b574:	55                   	push   ebp
c001b575:	57                   	push   edi
c001b576:	56                   	push   esi
c001b577:	53                   	push   ebx
c001b578:	83 ec 68             	sub    esp,0x68
c001b57b:	8b 35 94 b9 02 c0    	mov    esi,DWORD PTR ds:0xc002b994
c001b581:	68 14 01 00 00       	push   0x114
c001b586:	e8 d7 6b ff ff       	call   c0012162 <operator new(unsigned long)>
c001b58b:	83 c4 0c             	add    esp,0xc
c001b58e:	89 c3                	mov    ebx,eax
c001b590:	56                   	push   esi
c001b591:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b595:	50                   	push   eax
c001b596:	e8 e5 71 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001b59b:	5e                   	pop    esi
c001b59c:	5f                   	pop    edi
c001b59d:	6a 01                	push   0x1
c001b59f:	53                   	push   ebx
c001b5a0:	e8 3f 72 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001b5a5:	83 c4 10             	add    esp,0x10
c001b5a8:	31 d2                	xor    edx,edx
c001b5aa:	85 c0                	test   eax,eax
c001b5ac:	0f 85 79 02 00 00    	jne    c001b82b <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001b5b2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b5ba:	83 ec 0c             	sub    esp,0xc
c001b5bd:	6a 34                	push   0x34
c001b5bf:	e8 9c 3b ff ff       	call   c000f160 <malloc>
c001b5c4:	59                   	pop    ecx
c001b5c5:	89 c7                	mov    edi,eax
c001b5c7:	8d 74 24 34          	lea    esi,[esp+0x34]
c001b5cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5cd:	56                   	push   esi
c001b5ce:	57                   	push   edi
c001b5cf:	6a 00                	push   0x0
c001b5d1:	6a 34                	push   0x34
c001b5d3:	53                   	push   ebx
c001b5d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b5d7:	83 c4 20             	add    esp,0x20
c001b5da:	85 c0                	test   eax,eax
c001b5dc:	74 17                	je     c001b5f5 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001b5de:	83 ec 0c             	sub    esp,0xc
c001b5e1:	68 af 84 02 c0       	push   0xc00284af
c001b5e6:	e8 e8 e0 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001b5eb:	83 c4 10             	add    esp,0x10
c001b5ee:	31 d2                	xor    edx,edx
c001b5f0:	e9 36 02 00 00       	jmp    c001b82b <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001b5f5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b5fb:	75 e1                	jne    c001b5de <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b5fd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b600:	85 c0                	test   eax,eax
c001b602:	74 da                	je     c001b5de <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b604:	52                   	push   edx
c001b605:	31 d2                	xor    edx,edx
c001b607:	52                   	push   edx
c001b608:	50                   	push   eax
c001b609:	53                   	push   ebx
c001b60a:	e8 93 72 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001b60f:	83 c4 10             	add    esp,0x10
c001b612:	85 c0                	test   eax,eax
c001b614:	75 c8                	jne    c001b5de <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b616:	83 ec 0c             	sub    esp,0xc
c001b619:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b61d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b621:	31 ed                	xor    ebp,ebp
c001b623:	0f af c2             	imul   eax,edx
c001b626:	50                   	push   eax
c001b627:	e8 34 3b ff ff       	call   c000f160 <malloc>
c001b62c:	89 34 24             	mov    DWORD PTR [esp],esi
c001b62f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b633:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b635:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b639:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b63d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b641:	0f af c2             	imul   eax,edx
c001b644:	99                   	cdq    
c001b645:	52                   	push   edx
c001b646:	50                   	push   eax
c001b647:	53                   	push   ebx
c001b648:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b64b:	83 c4 20             	add    esp,0x20
c001b64e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b656:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b65e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b666:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b66e:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001b672:	0f 86 aa 00 00 00    	jbe    c001b722 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001b678:	0f b7 f5             	movzx  esi,bp
c001b67b:	6b f6 28             	imul   esi,esi,0x28
c001b67e:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001b682:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b685:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b689:	50                   	push   eax
c001b68a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b68e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001b692:	8b 16                	mov    edx,DWORD PTR [esi]
c001b694:	6b c0 28             	imul   eax,eax,0x28
c001b697:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001b69b:	89 d0                	mov    eax,edx
c001b69d:	31 d2                	xor    edx,edx
c001b69f:	52                   	push   edx
c001b6a0:	50                   	push   eax
c001b6a1:	53                   	push   ebx
c001b6a2:	e8 fb 71 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001b6a7:	83 c4 0c             	add    esp,0xc
c001b6aa:	6a 20                	push   0x20
c001b6ac:	6a 00                	push   0x0
c001b6ae:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b6b2:	52                   	push   edx
c001b6b3:	e8 2e 50 fe ff       	call   c00006e6 <memset>
c001b6b8:	58                   	pop    eax
c001b6b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6bb:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001b6bf:	51                   	push   ecx
c001b6c0:	8d 54 24 40          	lea    edx,[esp+0x40]
c001b6c4:	52                   	push   edx
c001b6c5:	6a 00                	push   0x0
c001b6c7:	6a 1f                	push   0x1f
c001b6c9:	53                   	push   ebx
c001b6ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b6cd:	83 c4 18             	add    esp,0x18
c001b6d0:	68 c6 84 02 c0       	push   0xc00284c6
c001b6d5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b6d9:	52                   	push   edx
c001b6da:	e8 f7 50 fe ff       	call   c00007d6 <strcmp>
c001b6df:	83 c4 10             	add    esp,0x10
c001b6e2:	85 c0                	test   eax,eax
c001b6e4:	75 0f                	jne    c001b6f5 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001b6e6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b6e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b6ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b6f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b6f5:	50                   	push   eax
c001b6f6:	50                   	push   eax
c001b6f7:	68 ce 84 02 c0       	push   0xc00284ce
c001b6fc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b700:	50                   	push   eax
c001b701:	e8 d0 50 fe ff       	call   c00007d6 <strcmp>
c001b706:	83 c4 10             	add    esp,0x10
c001b709:	85 c0                	test   eax,eax
c001b70b:	75 0f                	jne    c001b71c <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001b70d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b714:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b718:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b71c:	45                   	inc    ebp
c001b71d:	e9 4c ff ff ff       	jmp    c001b66e <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001b722:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b727:	75 10                	jne    c001b739 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001b729:	83 ec 0c             	sub    esp,0xc
c001b72c:	68 d6 84 02 c0       	push   0xc00284d6
c001b731:	e8 9d df ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001b736:	83 c4 10             	add    esp,0x10
c001b739:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b73e:	75 10                	jne    c001b750 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001b740:	83 ec 0c             	sub    esp,0xc
c001b743:	68 d6 84 02 c0       	push   0xc00284d6
c001b748:	e8 86 df ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001b74d:	83 c4 10             	add    esp,0x10
c001b750:	31 d2                	xor    edx,edx
c001b752:	50                   	push   eax
c001b753:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b757:	52                   	push   edx
c001b758:	50                   	push   eax
c001b759:	53                   	push   ebx
c001b75a:	e8 43 71 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001b75f:	5a                   	pop    edx
c001b760:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b764:	e8 f7 39 ff ff       	call   c000f160 <malloc>
c001b769:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b771:	89 c1                	mov    ecx,eax
c001b773:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b777:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b77b:	5e                   	pop    esi
c001b77c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b77e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001b782:	55                   	push   ebp
c001b783:	51                   	push   ecx
c001b784:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001b788:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b78c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b790:	53                   	push   ebx
c001b791:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b794:	83 c4 14             	add    esp,0x14
c001b797:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b79b:	e8 c0 39 ff ff       	call   c000f160 <malloc>
c001b7a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b7a3:	89 c6                	mov    esi,eax
c001b7a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7a7:	56                   	push   esi
c001b7a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b7ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b7b0:	53                   	push   ebx
c001b7b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b7b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7b8:	8b 15 40 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b940
c001b7be:	83 c4 1c             	add    esp,0x1c
c001b7c1:	c1 e8 04             	shr    eax,0x4
c001b7c4:	89 04 95 c0 b7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4840],eax
c001b7cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7cf:	31 d2                	xor    edx,edx
c001b7d1:	52                   	push   edx
c001b7d2:	50                   	push   eax
c001b7d3:	53                   	push   ebx
c001b7d4:	e8 c9 70 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001b7d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b7dc:	31 d2                	xor    edx,edx
c001b7de:	56                   	push   esi
c001b7df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7e3:	52                   	push   edx
c001b7e4:	50                   	push   eax
c001b7e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7e7:	53                   	push   ebx
c001b7e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b7eb:	83 c4 14             	add    esp,0x14
c001b7ee:	53                   	push   ebx
c001b7ef:	e8 4e 70 ff ff       	call   c0012842 <File::close()>
c001b7f4:	5d                   	pop    ebp
c001b7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7f9:	e8 72 39 ff ff       	call   c000f170 <free>
c001b7fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b801:	e8 6a 39 ff ff       	call   c000f170 <free>
c001b806:	a1 40 b9 02 c0       	mov    eax,ds:0xc002b940
c001b80b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001b80f:	8d 50 01             	lea    edx,[eax+0x1]
c001b812:	89 0c 85 c0 b8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4740],ecx
c001b819:	89 15 40 b9 02 c0    	mov    DWORD PTR ds:0xc002b940,edx
c001b81f:	89 34 85 40 b8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd47c0],esi
c001b826:	83 c4 10             	add    esp,0x10
c001b829:	b2 01                	mov    dl,0x1
c001b82b:	83 c4 5c             	add    esp,0x5c
c001b82e:	88 d0                	mov    al,dl
c001b830:	5b                   	pop    ebx
c001b831:	5e                   	pop    esi
c001b832:	5f                   	pop    edi
c001b833:	5d                   	pop    ebp
c001b834:	c3                   	ret    

c001b835 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001b835:	55                   	push   ebp
c001b836:	57                   	push   edi
c001b837:	56                   	push   esi
c001b838:	53                   	push   ebx
c001b839:	81 ec 68 03 00 00    	sub    esp,0x368
c001b83f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001b846:	8b 1d 94 b9 02 c0    	mov    ebx,DWORD PTR ds:0xc002b994
c001b84c:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b850:	68 14 01 00 00       	push   0x114
c001b855:	e8 08 69 ff ff       	call   c0012162 <operator new(unsigned long)>
c001b85a:	83 c4 0c             	add    esp,0xc
c001b85d:	89 c7                	mov    edi,eax
c001b85f:	53                   	push   ebx
c001b860:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001b867:	50                   	push   eax
c001b868:	e8 13 6f ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001b86d:	5e                   	pop    esi
c001b86e:	5d                   	pop    ebp
c001b86f:	6a 01                	push   0x1
c001b871:	57                   	push   edi
c001b872:	e8 6d 6f ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001b877:	83 c4 10             	add    esp,0x10
c001b87a:	85 c0                	test   eax,eax
c001b87c:	0f 85 10 07 00 00    	jne    c001bf92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b882:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b88a:	83 ec 0c             	sub    esp,0xc
c001b88d:	6a 34                	push   0x34
c001b88f:	e8 cc 38 ff ff       	call   c000f160 <malloc>
c001b894:	5b                   	pop    ebx
c001b895:	89 c5                	mov    ebp,eax
c001b897:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b89b:	8b 07                	mov    eax,DWORD PTR [edi]
c001b89d:	53                   	push   ebx
c001b89e:	55                   	push   ebp
c001b89f:	6a 00                	push   0x0
c001b8a1:	6a 34                	push   0x34
c001b8a3:	57                   	push   edi
c001b8a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b8a7:	83 c4 20             	add    esp,0x20
c001b8aa:	85 c0                	test   eax,eax
c001b8ac:	0f 85 e0 06 00 00    	jne    c001bf92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b8b2:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001b8b9:	0f 85 d3 06 00 00    	jne    c001bf92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b8bf:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b8c2:	85 c0                	test   eax,eax
c001b8c4:	0f 84 c8 06 00 00    	je     c001bf92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b8ca:	31 d2                	xor    edx,edx
c001b8cc:	51                   	push   ecx
c001b8cd:	52                   	push   edx
c001b8ce:	50                   	push   eax
c001b8cf:	57                   	push   edi
c001b8d0:	e8 cd 6f ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001b8d5:	83 c4 10             	add    esp,0x10
c001b8d8:	85 c0                	test   eax,eax
c001b8da:	0f 85 b2 06 00 00    	jne    c001bf92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b8e0:	83 ec 0c             	sub    esp,0xc
c001b8e3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b8e6:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001b8ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b8ee:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b8f2:	0f af c2             	imul   eax,edx
c001b8f5:	50                   	push   eax
c001b8f6:	e8 65 38 ff ff       	call   c000f160 <malloc>
c001b8fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b902:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001b904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b908:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001b90c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b910:	0f af c2             	imul   eax,edx
c001b913:	99                   	cdq    
c001b914:	52                   	push   edx
c001b915:	50                   	push   eax
c001b916:	57                   	push   edi
c001b917:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b91a:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001b91d:	83 c4 20             	add    esp,0x20
c001b920:	85 c0                	test   eax,eax
c001b922:	0f 84 6a 06 00 00    	je     c001bf92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b928:	52                   	push   edx
c001b929:	31 d2                	xor    edx,edx
c001b92b:	52                   	push   edx
c001b92c:	50                   	push   eax
c001b92d:	57                   	push   edi
c001b92e:	e8 6f 6f ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001b933:	83 c4 10             	add    esp,0x10
c001b936:	85 c0                	test   eax,eax
c001b938:	0f 85 54 06 00 00    	jne    c001bf92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b93e:	83 ec 0c             	sub    esp,0xc
c001b941:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001b945:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001b949:	31 f6                	xor    esi,esi
c001b94b:	0f af c2             	imul   eax,edx
c001b94e:	50                   	push   eax
c001b94f:	e8 0c 38 ff ff       	call   c000f160 <malloc>
c001b954:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b957:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b95b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001b95d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b961:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001b965:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001b969:	0f af c2             	imul   eax,edx
c001b96c:	99                   	cdq    
c001b96d:	52                   	push   edx
c001b96e:	50                   	push   eax
c001b96f:	57                   	push   edi
c001b970:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b973:	83 c4 20             	add    esp,0x20
c001b976:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001b97a:	0f 86 af 00 00 00    	jbe    c001ba2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001b980:	0f b7 de             	movzx  ebx,si
c001b983:	c1 e3 05             	shl    ebx,0x5
c001b986:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001b98a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001b98d:	0f 85 96 00 00 00    	jne    c001ba29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001b993:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b996:	31 d2                	xor    edx,edx
c001b998:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b99c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b99f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b9a3:	50                   	push   eax
c001b9a4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b9a7:	52                   	push   edx
c001b9a8:	50                   	push   eax
c001b9a9:	57                   	push   edi
c001b9aa:	e8 f3 6e ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001b9af:	83 c4 10             	add    esp,0x10
c001b9b2:	85 c0                	test   eax,eax
c001b9b4:	0f 85 d8 05 00 00    	jne    c001bf92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b9ba:	52                   	push   edx
c001b9bb:	52                   	push   edx
c001b9bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b9c0:	68 f0 84 02 c0       	push   0xc00284f0
c001b9c5:	e8 87 68 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b9ca:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001b9d1:	31 d2                	xor    edx,edx
c001b9d3:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001b9d7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b9db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9df:	59                   	pop    ecx
c001b9e0:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001b9e2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b9e9:	50                   	push   eax
c001b9ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b9ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9f2:	52                   	push   edx
c001b9f3:	50                   	push   eax
c001b9f4:	57                   	push   edi
c001b9f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b9f8:	83 c4 18             	add    esp,0x18
c001b9fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b9fe:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ba01:	50                   	push   eax
c001ba02:	68 14 85 02 c0       	push   0xc0028514
c001ba07:	e8 45 68 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ba0c:	83 c4 0c             	add    esp,0xc
c001ba0f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ba12:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ba15:	50                   	push   eax
c001ba16:	6a 00                	push   0x0
c001ba18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba1c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ba20:	50                   	push   eax
c001ba21:	e8 c0 4c fe ff       	call   c00006e6 <memset>
c001ba26:	83 c4 10             	add    esp,0x10
c001ba29:	46                   	inc    esi
c001ba2a:	e9 47 ff ff ff       	jmp    c001b976 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ba2f:	31 db                	xor    ebx,ebx
c001ba31:	50                   	push   eax
c001ba32:	68 00 01 00 00       	push   0x100
c001ba37:	6a 00                	push   0x0
c001ba39:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ba3d:	50                   	push   eax
c001ba3e:	e8 a3 4c fe ff       	call   c00006e6 <memset>
c001ba43:	83 c4 0c             	add    esp,0xc
c001ba46:	68 00 01 00 00       	push   0x100
c001ba4b:	6a 00                	push   0x0
c001ba4d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ba54:	50                   	push   eax
c001ba55:	e8 8c 4c fe ff       	call   c00006e6 <memset>
c001ba5a:	83 c4 10             	add    esp,0x10
c001ba5d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ba65:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ba6d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ba75:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ba7d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ba85:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001ba89:	0f 86 2f 01 00 00    	jbe    c001bbbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001ba8f:	0f b7 f3             	movzx  esi,bx
c001ba92:	6b f6 28             	imul   esi,esi,0x28
c001ba95:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001ba99:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ba9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001baa0:	50                   	push   eax
c001baa1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001baa5:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001baa9:	8b 06                	mov    eax,DWORD PTR [esi]
c001baab:	6b d2 28             	imul   edx,edx,0x28
c001baae:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001bab2:	31 d2                	xor    edx,edx
c001bab4:	52                   	push   edx
c001bab5:	50                   	push   eax
c001bab6:	57                   	push   edi
c001bab7:	e8 e6 6d ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001babc:	83 c4 0c             	add    esp,0xc
c001babf:	6a 20                	push   0x20
c001bac1:	6a 00                	push   0x0
c001bac3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001baca:	51                   	push   ecx
c001bacb:	e8 16 4c fe ff       	call   c00006e6 <memset>
c001bad0:	58                   	pop    eax
c001bad1:	8b 07                	mov    eax,DWORD PTR [edi]
c001bad3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001bad7:	52                   	push   edx
c001bad8:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001badf:	51                   	push   ecx
c001bae0:	6a 00                	push   0x0
c001bae2:	6a 1f                	push   0x1f
c001bae4:	57                   	push   edi
c001bae5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bae8:	83 c4 1c             	add    esp,0x1c
c001baeb:	6a 09                	push   0x9
c001baed:	68 31 85 02 c0       	push   0xc0028531
c001baf2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001baf9:	51                   	push   ecx
c001bafa:	e8 4e 4b fe ff       	call   c000064d <memcmp>
c001baff:	83 c4 10             	add    esp,0x10
c001bb02:	85 c0                	test   eax,eax
c001bb04:	75 21                	jne    c001bb27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001bb06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001bb0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bb12:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001bb16:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bb19:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001bb20:	89 c8                	mov    eax,ecx
c001bb22:	40                   	inc    eax
c001bb23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb27:	50                   	push   eax
c001bb28:	6a 09                	push   0x9
c001bb2a:	68 3b 85 02 c0       	push   0xc002853b
c001bb2f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bb36:	50                   	push   eax
c001bb37:	e8 11 4b fe ff       	call   c000064d <memcmp>
c001bb3c:	83 c4 10             	add    esp,0x10
c001bb3f:	85 c0                	test   eax,eax
c001bb41:	75 21                	jne    c001bb64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001bb43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001bb4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bb4f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001bb53:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bb56:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001bb5d:	89 c8                	mov    eax,ecx
c001bb5f:	40                   	inc    eax
c001bb60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb64:	50                   	push   eax
c001bb65:	50                   	push   eax
c001bb66:	68 c6 84 02 c0       	push   0xc00284c6
c001bb6b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bb72:	50                   	push   eax
c001bb73:	e8 5e 4c fe ff       	call   c00007d6 <strcmp>
c001bb78:	83 c4 10             	add    esp,0x10
c001bb7b:	85 c0                	test   eax,eax
c001bb7d:	75 0f                	jne    c001bb8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001bb7f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bb82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bb86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb8e:	50                   	push   eax
c001bb8f:	50                   	push   eax
c001bb90:	68 ce 84 02 c0       	push   0xc00284ce
c001bb95:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bb9c:	50                   	push   eax
c001bb9d:	e8 34 4c fe ff       	call   c00007d6 <strcmp>
c001bba2:	83 c4 10             	add    esp,0x10
c001bba5:	85 c0                	test   eax,eax
c001bba7:	75 0f                	jne    c001bbb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001bba9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bbac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bbb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bbb8:	43                   	inc    ebx
c001bbb9:	e9 c7 fe ff ff       	jmp    c001ba85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001bbbe:	31 d2                	xor    edx,edx
c001bbc0:	50                   	push   eax
c001bbc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bbc5:	52                   	push   edx
c001bbc6:	50                   	push   eax
c001bbc7:	57                   	push   edi
c001bbc8:	e8 d5 6c ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001bbcd:	5a                   	pop    edx
c001bbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bbd2:	e8 89 35 ff ff       	call   c000f160 <malloc>
c001bbd7:	31 d2                	xor    edx,edx
c001bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001bbdd:	59                   	pop    ecx
c001bbde:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001bbe0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001bbe4:	53                   	push   ebx
c001bbe5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bbe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bbed:	52                   	push   edx
c001bbee:	50                   	push   eax
c001bbef:	57                   	push   edi
c001bbf0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bbf3:	83 c4 14             	add    esp,0x14
c001bbf6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bbfa:	e8 61 35 ff ff       	call   c000f160 <malloc>
c001bbff:	31 d2                	xor    edx,edx
c001bc01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bc05:	83 c4 0c             	add    esp,0xc
c001bc08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bc0c:	52                   	push   edx
c001bc0d:	50                   	push   eax
c001bc0e:	57                   	push   edi
c001bc0f:	e8 8e 6c ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001bc14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc17:	31 d2                	xor    edx,edx
c001bc19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc1d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001bc1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bc23:	52                   	push   edx
c001bc24:	50                   	push   eax
c001bc25:	57                   	push   edi
c001bc26:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bc29:	83 c4 20             	add    esp,0x20
c001bc2c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001bc34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc38:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001bc3c:	0f 84 54 03 00 00    	je     c001bf96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001bc42:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001bc49:	31 d2                	xor    edx,edx
c001bc4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc4f:	c1 e8 03             	shr    eax,0x3
c001bc52:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001bc56:	50                   	push   eax
c001bc57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bc5b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001bc5f:	52                   	push   edx
c001bc60:	50                   	push   eax
c001bc61:	57                   	push   edi
c001bc62:	e8 3b 6c ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001bc67:	58                   	pop    eax
c001bc68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bc6c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001bc73:	e8 e8 34 ff ff       	call   c000f160 <malloc>
c001bc78:	31 d2                	xor    edx,edx
c001bc7a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc7e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001bc80:	58                   	pop    eax
c001bc81:	8d 44 24 58          	lea    eax,[esp+0x58]
c001bc85:	50                   	push   eax
c001bc86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bc8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bc8e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001bc95:	52                   	push   edx
c001bc96:	50                   	push   eax
c001bc97:	57                   	push   edi
c001bc98:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bc9b:	83 c4 20             	add    esp,0x20
c001bc9e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bca6:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001bcaa:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001bcae:	0f 8d c6 02 00 00    	jge    c001bf7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001bcb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bcbc:	31 db                	xor    ebx,ebx
c001bcbe:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001bcc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bcc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bcc9:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001bccd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcd1:	c1 e8 08             	shr    eax,0x8
c001bcd4:	89 c6                	mov    esi,eax
c001bcd6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001bcda:	c1 e6 04             	shl    esi,0x4
c001bcdd:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001bce1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bce4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bce8:	85 c0                	test   eax,eax
c001bcea:	0f 85 17 01 00 00    	jne    c001be07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001bcf0:	83 ec 0c             	sub    esp,0xc
c001bcf3:	b3 01                	mov    bl,0x1
c001bcf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bcf9:	03 06                	add    eax,DWORD PTR [esi]
c001bcfb:	50                   	push   eax
c001bcfc:	e8 24 f8 ff ff       	call   c001b525 <Thr::getAddressOfKernelSymbol(char const*)>
c001bd01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd05:	83 c4 10             	add    esp,0x10
c001bd08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bd0d:	0f 85 f4 00 00 00    	jne    c001be07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001bd13:	50                   	push   eax
c001bd14:	50                   	push   eax
c001bd15:	68 45 85 02 c0       	push   0xc0028545
c001bd1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd1e:	03 06                	add    eax,DWORD PTR [esi]
c001bd20:	50                   	push   eax
c001bd21:	e8 b0 4a fe ff       	call   c00007d6 <strcmp>
c001bd26:	83 c4 10             	add    esp,0x10
c001bd29:	85 c0                	test   eax,eax
c001bd2b:	75 0a                	jne    c001bd37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001bd2d:	b8 d0 32 02 c0       	mov    eax,0xc00232d0
c001bd32:	e9 ca 00 00 00       	jmp    c001be01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001bd37:	50                   	push   eax
c001bd38:	50                   	push   eax
c001bd39:	68 4f 85 02 c0       	push   0xc002854f
c001bd3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd42:	03 06                	add    eax,DWORD PTR [esi]
c001bd44:	50                   	push   eax
c001bd45:	e8 8c 4a fe ff       	call   c00007d6 <strcmp>
c001bd4a:	83 c4 10             	add    esp,0x10
c001bd4d:	85 c0                	test   eax,eax
c001bd4f:	75 0a                	jne    c001bd5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001bd51:	b8 04 30 02 c0       	mov    eax,0xc0023004
c001bd56:	e9 a6 00 00 00       	jmp    c001be01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001bd5b:	53                   	push   ebx
c001bd5c:	53                   	push   ebx
c001bd5d:	68 58 85 02 c0       	push   0xc0028558
c001bd62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd66:	03 06                	add    eax,DWORD PTR [esi]
c001bd68:	50                   	push   eax
c001bd69:	e8 68 4a fe ff       	call   c00007d6 <strcmp>
c001bd6e:	83 c4 10             	add    esp,0x10
c001bd71:	85 c0                	test   eax,eax
c001bd73:	75 0a                	jne    c001bd7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001bd75:	b8 d0 33 02 c0       	mov    eax,0xc00233d0
c001bd7a:	e9 82 00 00 00       	jmp    c001be01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001bd7f:	51                   	push   ecx
c001bd80:	51                   	push   ecx
c001bd81:	68 62 85 02 c0       	push   0xc0028562
c001bd86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd8a:	03 06                	add    eax,DWORD PTR [esi]
c001bd8c:	50                   	push   eax
c001bd8d:	e8 44 4a fe ff       	call   c00007d6 <strcmp>
c001bd92:	83 c4 10             	add    esp,0x10
c001bd95:	85 c0                	test   eax,eax
c001bd97:	74 63                	je     c001bdfc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001bd99:	50                   	push   eax
c001bd9a:	50                   	push   eax
c001bd9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd9f:	03 06                	add    eax,DWORD PTR [esi]
c001bda1:	50                   	push   eax
c001bda2:	68 6b 85 02 c0       	push   0xc002856b
c001bda7:	e8 a5 64 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bdac:	58                   	pop    eax
c001bdad:	5a                   	pop    edx
c001bdae:	68 85 85 02 c0       	push   0xc0028585
c001bdb3:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001bdba:	53                   	push   ebx
c001bdbb:	e8 c5 49 fe ff       	call   c0000785 <strcpy>
c001bdc0:	59                   	pop    ecx
c001bdc1:	58                   	pop    eax
c001bdc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdc6:	03 06                	add    eax,DWORD PTR [esi]
c001bdc8:	50                   	push   eax
c001bdc9:	53                   	push   ebx
c001bdca:	e8 6d 4a fe ff       	call   c000083c <strcat>
c001bdcf:	58                   	pop    eax
c001bdd0:	5a                   	pop    edx
c001bdd1:	68 1b 86 02 c0       	push   0xc002861b
c001bdd6:	53                   	push   ebx
c001bdd7:	e8 60 4a fe ff       	call   c000083c <strcat>
c001bddc:	83 c4 10             	add    esp,0x10
c001bddf:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001bde4:	0f 84 4b 01 00 00    	je     c001bf35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001bdea:	83 ec 0c             	sub    esp,0xc
c001bded:	53                   	push   ebx
c001bdee:	e8 e0 d8 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001bdf3:	83 c4 10             	add    esp,0x10
c001bdf6:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001bdfa:	eb 0b                	jmp    c001be07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001bdfc:	b8 50 31 02 c0       	mov    eax,0xc0023150
c001be01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be05:	b3 01                	mov    bl,0x1
c001be07:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001be0c:	0f 85 80 00 00 00    	jne    c001be92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001be12:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001be19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be1d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001be21:	01 ce                	add    esi,ecx
c001be23:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001be2b:	8b 06                	mov    eax,DWORD PTR [esi]
c001be2d:	0f 94 c2             	sete   dl
c001be30:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001be38:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001be3d:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001be41:	84 db                	test   bl,bl
c001be43:	74 31                	je     c001be76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001be45:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001be49:	01 c3                	add    ebx,eax
c001be4b:	84 d2                	test   dl,dl
c001be4d:	75 0a                	jne    c001be59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001be4f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001be53:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001be57:	76 32                	jbe    c001be8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001be59:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001be5e:	0f 84 d1 00 00 00    	je     c001bf35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001be64:	83 ec 0c             	sub    esp,0xc
c001be67:	68 9c 85 02 c0       	push   0xc002859c
c001be6c:	e8 62 d8 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001be71:	83 c4 10             	add    esp,0x10
c001be74:	eb 15                	jmp    c001be8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001be76:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001be79:	84 d2                	test   dl,dl
c001be7b:	75 0e                	jne    c001be8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001be7d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001be81:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001be85:	77 04                	ja     c001be8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001be87:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001be8b:	89 1e                	mov    DWORD PTR [esi],ebx
c001be8d:	e9 df 00 00 00       	jmp    c001bf71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001be92:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001be97:	75 6e                	jne    c001bf07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001be99:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001bea0:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001bea4:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001bea8:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001beb0:	74 17                	je     c001bec9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001beb2:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001beba:	74 0d                	je     c001bec9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001bebc:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001bec0:	83 e8 04             	sub    eax,0x4
c001bec3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001bec7:	76 17                	jbe    c001bee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001bec9:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001bece:	74 65                	je     c001bf35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001bed0:	83 ec 0c             	sub    esp,0xc
c001bed3:	68 b8 85 02 c0       	push   0xc00285b8
c001bed8:	e8 f6 d7 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001bedd:	83 c4 10             	add    esp,0x10
c001bee0:	8b 16                	mov    edx,DWORD PTR [esi]
c001bee2:	84 db                	test   bl,bl
c001bee4:	74 13                	je     c001bef9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001bee6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001beea:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001bef1:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001bef5:	01 d0                	add    eax,edx
c001bef7:	eb 06                	jmp    c001beff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001bef9:	89 d0                	mov    eax,edx
c001befb:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001beff:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001bf03:	89 06                	mov    DWORD PTR [esi],eax
c001bf05:	eb 6a                	jmp    c001bf71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001bf07:	50                   	push   eax
c001bf08:	50                   	push   eax
c001bf09:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001bf0e:	50                   	push   eax
c001bf0f:	68 d4 85 02 c0       	push   0xc00285d4
c001bf14:	e8 38 63 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001bf21:	74 12                	je     c001bf35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001bf23:	83 ec 0c             	sub    esp,0xc
c001bf26:	68 df 85 02 c0       	push   0xc00285df
c001bf2b:	e8 a3 d7 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001bf30:	83 c4 10             	add    esp,0x10
c001bf33:	eb 3c                	jmp    c001bf71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001bf35:	83 ec 0c             	sub    esp,0xc
c001bf38:	57                   	push   edi
c001bf39:	e8 04 69 ff ff       	call   c0012842 <File::close()>
c001bf3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf41:	8b 07                	mov    eax,DWORD PTR [edi]
c001bf43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf46:	59                   	pop    ecx
c001bf47:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bf4b:	e8 20 32 ff ff       	call   c000f170 <free>
c001bf50:	5b                   	pop    ebx
c001bf51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf55:	e8 16 32 ff ff       	call   c000f170 <free>
c001bf5a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bf5d:	e8 0e 32 ff ff       	call   c000f170 <free>
c001bf62:	5e                   	pop    esi
c001bf63:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bf67:	e8 04 32 ff ff       	call   c000f170 <free>
c001bf6c:	83 c4 10             	add    esp,0x10
c001bf6f:	eb 21                	jmp    c001bf92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001bf71:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001bf75:	e9 2c fd ff ff       	jmp    c001bca6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001bf7a:	83 ec 0c             	sub    esp,0xc
c001bf7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bf81:	e8 ea 31 ff ff       	call   c000f170 <free>
c001bf86:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001bf8a:	83 c4 10             	add    esp,0x10
c001bf8d:	e9 a2 fc ff ff       	jmp    c001bc34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001bf92:	31 c0                	xor    eax,eax
c001bf94:	eb 32                	jmp    c001bfc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001bf96:	83 ec 0c             	sub    esp,0xc
c001bf99:	57                   	push   edi
c001bf9a:	e8 a3 68 ff ff       	call   c0012842 <File::close()>
c001bf9f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfa2:	8b 07                	mov    eax,DWORD PTR [edi]
c001bfa4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bfa7:	58                   	pop    eax
c001bfa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bfac:	e8 bf 31 ff ff       	call   c000f170 <free>
c001bfb1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bfb4:	e8 b7 31 ff ff       	call   c000f170 <free>
c001bfb9:	5a                   	pop    edx
c001bfba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bfbe:	e8 ad 31 ff ff       	call   c000f170 <free>
c001bfc3:	83 c4 10             	add    esp,0x10
c001bfc6:	b0 01                	mov    al,0x1
c001bfc8:	81 c4 5c 03 00 00    	add    esp,0x35c
c001bfce:	5b                   	pop    ebx
c001bfcf:	5e                   	pop    esi
c001bfd0:	5f                   	pop    edi
c001bfd1:	5d                   	pop    ebp
c001bfd2:	c3                   	ret    

c001bfd3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001bfd3:	56                   	push   esi
c001bfd4:	31 d2                	xor    edx,edx
c001bfd6:	53                   	push   ebx
c001bfd7:	8b 1d a0 b1 02 c0    	mov    ebx,DWORD PTR ds:0xc002b1a0
c001bfdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bfe1:	39 d3                	cmp    ebx,edx
c001bfe3:	7e 1b                	jle    c001c000 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001bfe5:	8b 04 95 c0 b3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4c40]
c001bfec:	39 c8                	cmp    eax,ecx
c001bfee:	77 0d                	ja     c001bffd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001bff0:	8b 34 95 c0 b1 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4e40]
c001bff7:	01 c6                	add    esi,eax
c001bff9:	39 ce                	cmp    esi,ecx
c001bffb:	77 05                	ja     c001c002 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001bffd:	42                   	inc    edx
c001bffe:	eb e1                	jmp    c001bfe1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c000:	31 c0                	xor    eax,eax
c001c002:	5b                   	pop    ebx
c001c003:	5e                   	pop    esi
c001c004:	c3                   	ret    

c001c005 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c005:	53                   	push   ebx
c001c006:	31 c0                	xor    eax,eax
c001c008:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c00c:	8b 1d a0 b1 02 c0    	mov    ebx,DWORD PTR ds:0xc002b1a0
c001c012:	39 c3                	cmp    ebx,eax
c001c014:	7e 22                	jle    c001c038 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c016:	8b 14 85 c0 b3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4c40]
c001c01d:	39 ca                	cmp    edx,ecx
c001c01f:	77 14                	ja     c001c035 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c021:	03 14 85 c0 b1 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4e40]
c001c028:	39 ca                	cmp    edx,ecx
c001c02a:	76 09                	jbe    c001c035 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c02c:	8b 04 85 c0 b5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4a40]
c001c033:	eb 05                	jmp    c001c03a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c035:	40                   	inc    eax
c001c036:	eb da                	jmp    c001c012 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c038:	31 c0                	xor    eax,eax
c001c03a:	5b                   	pop    ebx
c001c03b:	c3                   	ret    

c001c03c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c03c:	53                   	push   ebx
c001c03d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c041:	53                   	push   ebx
c001c042:	e8 8c ff ff ff       	call   c001bfd3 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c047:	5a                   	pop    edx
c001c048:	31 d2                	xor    edx,edx
c001c04a:	85 c0                	test   eax,eax
c001c04c:	74 04                	je     c001c052 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c04e:	89 da                	mov    edx,ebx
c001c050:	29 c2                	sub    edx,eax
c001c052:	89 d0                	mov    eax,edx
c001c054:	5b                   	pop    ebx
c001c055:	c3                   	ret    

c001c056 <Thr::loadDLL(char const*, bool)>:
c001c056:	55                   	push   ebp
c001c057:	57                   	push   edi
c001c058:	56                   	push   esi
c001c059:	53                   	push   ebx
c001c05a:	81 ec 34 01 00 00    	sub    esp,0x134
c001c060:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c067:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c06e:	56                   	push   esi
c001c06f:	68 f7 85 02 c0       	push   0xc00285f7
c001c074:	e8 d8 61 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c079:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c080:	e8 dd 60 ff ff       	call   c0012162 <operator new(unsigned long)>
c001c085:	83 c4 0c             	add    esp,0xc
c001c088:	89 c3                	mov    ebx,eax
c001c08a:	ff 35 94 b9 02 c0    	push   DWORD PTR ds:0xc002b994
c001c090:	56                   	push   esi
c001c091:	50                   	push   eax
c001c092:	e8 e9 66 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001c097:	83 c4 0c             	add    esp,0xc
c001c09a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c09e:	50                   	push   eax
c001c09f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c0a3:	50                   	push   eax
c001c0a4:	53                   	push   ebx
c001c0a5:	e8 e6 69 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c001c0aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0b2:	83 c4 10             	add    esp,0x10
c001c0b5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c0ba:	75 0a                	jne    c001c0c6 <Thr::loadDLL(char const*, bool)+0x70>
c001c0bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0c0:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c0c4:	75 3c                	jne    c001c102 <Thr::loadDLL(char const*, bool)+0xac>
c001c0c6:	89 e8                	mov    eax,ebp
c001c0c8:	84 c0                	test   al,al
c001c0ca:	0f 84 3d 01 00 00    	je     c001c20d <Thr::loadDLL(char const*, bool)+0x1b7>
c001c0d0:	50                   	push   eax
c001c0d1:	50                   	push   eax
c001c0d2:	68 08 86 02 c0       	push   0xc0028608
c001c0d7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c0db:	53                   	push   ebx
c001c0dc:	e8 a4 46 fe ff       	call   c0000785 <strcpy>
c001c0e1:	58                   	pop    eax
c001c0e2:	5a                   	pop    edx
c001c0e3:	56                   	push   esi
c001c0e4:	53                   	push   ebx
c001c0e5:	e8 52 47 fe ff       	call   c000083c <strcat>
c001c0ea:	59                   	pop    ecx
c001c0eb:	5f                   	pop    edi
c001c0ec:	68 1b 86 02 c0       	push   0xc002861b
c001c0f1:	53                   	push   ebx
c001c0f2:	e8 45 47 fe ff       	call   c000083c <strcat>
c001c0f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0fa:	e8 d4 d5 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001c0ff:	83 c4 10             	add    esp,0x10
c001c102:	e8 08 53 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001c107:	51                   	push   ecx
c001c108:	6a 03                	push   0x3
c001c10a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c10e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c112:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c118:	83 d3 00             	adc    ebx,0x0
c001c11b:	89 ca                	mov    edx,ecx
c001c11d:	89 d1                	mov    ecx,edx
c001c11f:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c123:	51                   	push   ecx
c001c124:	50                   	push   eax
c001c125:	e8 28 59 ff ff       	call   c0011a52 <VAS::allocatePages(int, int)>
c001c12a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c12d:	89 c3                	mov    ebx,eax
c001c12f:	e8 cf 45 fe ff       	call   c0000703 <strlen>
c001c134:	8b 3d a0 b1 02 c0    	mov    edi,DWORD PTR ds:0xc002b1a0
c001c13a:	40                   	inc    eax
c001c13b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c13e:	e8 1d 30 ff ff       	call   c000f160 <malloc>
c001c143:	89 04 bd c0 b5 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4a40],eax
c001c14a:	5f                   	pop    edi
c001c14b:	58                   	pop    eax
c001c14c:	a1 a0 b1 02 c0       	mov    eax,ds:0xc002b1a0
c001c151:	56                   	push   esi
c001c152:	ff 34 85 c0 b5 02 c0 	push   DWORD PTR [eax*4-0x3ffd4a40]
c001c159:	e8 27 46 fe ff       	call   c0000785 <strcpy>
c001c15e:	a1 a0 b1 02 c0       	mov    eax,ds:0xc002b1a0
c001c163:	8d 50 01             	lea    edx,[eax+0x1]
c001c166:	89 1c 85 c0 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4c40],ebx
c001c16d:	89 15 a0 b1 02 c0    	mov    DWORD PTR ds:0xc002b1a0,edx
c001c173:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c177:	83 c4 0c             	add    esp,0xc
c001c17a:	89 14 85 c0 b1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4e40],edx
c001c181:	6a 01                	push   0x1
c001c183:	53                   	push   ebx
c001c184:	56                   	push   esi
c001c185:	e8 ab f6 ff ff       	call   c001b835 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c18a:	83 c4 10             	add    esp,0x10
c001c18d:	89 c7                	mov    edi,eax
c001c18f:	fe c8                	dec    al
c001c191:	74 16                	je     c001c1a9 <Thr::loadDLL(char const*, bool)+0x153>
c001c193:	89 e8                	mov    eax,ebp
c001c195:	84 c0                	test   al,al
c001c197:	74 10                	je     c001c1a9 <Thr::loadDLL(char const*, bool)+0x153>
c001c199:	83 ec 0c             	sub    esp,0xc
c001c19c:	68 1d 86 02 c0       	push   0xc002861d
c001c1a1:	e8 2d d5 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001c1a6:	83 c4 10             	add    esp,0x10
c001c1a9:	31 f6                	xor    esi,esi
c001c1ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c1af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c1b3:	05 ff 0f 00 00       	add    eax,0xfff
c001c1b8:	83 d2 00             	adc    edx,0x0
c001c1bb:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c1bf:	c1 ea 0c             	shr    edx,0xc
c001c1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c1ca:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c1ce:	ba 00 00 00 00       	mov    edx,0x0
c001c1d3:	89 d0                	mov    eax,edx
c001c1d5:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c1d9:	73 2c                	jae    c001c207 <Thr::loadDLL(char const*, bool)+0x1b1>
c001c1db:	e8 2f 52 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001c1e0:	89 f5                	mov    ebp,esi
c001c1e2:	c1 e5 0c             	shl    ebp,0xc
c001c1e5:	52                   	push   edx
c001c1e6:	01 dd                	add    ebp,ebx
c001c1e8:	52                   	push   edx
c001c1e9:	55                   	push   ebp
c001c1ea:	50                   	push   eax
c001c1eb:	e8 ca 53 ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c001c1f0:	83 c4 10             	add    esp,0x10
c001c1f3:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c1f6:	75 0c                	jne    c001c204 <Thr::loadDLL(char const*, bool)+0x1ae>
c001c1f8:	83 ec 0c             	sub    esp,0xc
c001c1fb:	55                   	push   ebp
c001c1fc:	e8 7f 34 ff ff       	call   c000f680 <Phys::freePage(unsigned long)>
c001c201:	83 c4 10             	add    esp,0x10
c001c204:	46                   	inc    esi
c001c205:	eb a4                	jmp    c001c1ab <Thr::loadDLL(char const*, bool)+0x155>
c001c207:	89 f8                	mov    eax,edi
c001c209:	84 c0                	test   al,al
c001c20b:	75 02                	jne    c001c20f <Thr::loadDLL(char const*, bool)+0x1b9>
c001c20d:	31 db                	xor    ebx,ebx
c001c20f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c215:	89 d8                	mov    eax,ebx
c001c217:	5b                   	pop    ebx
c001c218:	5e                   	pop    esi
c001c219:	5f                   	pop    edi
c001c21a:	5d                   	pop    ebp
c001c21b:	c3                   	ret    

c001c21c <Thr::executeDLL(unsigned long, void*)>:
c001c21c:	56                   	push   esi
c001c21d:	53                   	push   ebx
c001c21e:	51                   	push   ecx
c001c21f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c223:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c227:	85 db                	test   ebx,ebx
c001c229:	75 10                	jne    c001c23b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c22b:	83 ec 0c             	sub    esp,0xc
c001c22e:	68 3c 86 02 c0       	push   0xc002863c
c001c233:	e8 9b d4 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c23f:	89 d8                	mov    eax,ebx
c001c241:	5a                   	pop    edx
c001c242:	5b                   	pop    ebx
c001c243:	5e                   	pop    esi
c001c244:	ff e0                	jmp    eax

c001c246 <changeTSS>:
c001c246:	83 ec 0c             	sub    esp,0xc
c001c249:	e8 ec b5 ff ff       	call   c001783a <thisCPU()>
c001c24e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c254:	83 ec 08             	sub    esp,0x8
c001c257:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001c25a:	05 7c 11 00 00       	add    eax,0x117c
c001c25f:	c1 e1 15             	shl    ecx,0x15
c001c262:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001c267:	29 ca                	sub    edx,ecx
c001c269:	52                   	push   edx
c001c26a:	50                   	push   eax
c001c26b:	e8 b2 49 ff ff       	call   c0010c22 <TSS::setESP(unsigned long)>
c001c270:	83 c4 1c             	add    esp,0x1c
c001c273:	c3                   	ret    

c001c274 <Process::addArgs(char**)>:
c001c274:	57                   	push   edi
c001c275:	56                   	push   esi
c001c276:	53                   	push   ebx
c001c277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c27b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c27f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c289:	85 ff                	test   edi,edi
c001c28b:	74 3d                	je     c001c2ca <Process::addArgs(char**)+0x56>
c001c28d:	8b 07                	mov    eax,DWORD PTR [edi]
c001c28f:	85 c0                	test   eax,eax
c001c291:	74 37                	je     c001c2ca <Process::addArgs(char**)+0x56>
c001c293:	31 db                	xor    ebx,ebx
c001c295:	83 ec 0c             	sub    esp,0xc
c001c298:	50                   	push   eax
c001c299:	e8 65 44 fe ff       	call   c0000703 <strlen>
c001c29e:	40                   	inc    eax
c001c29f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2a2:	e8 b9 2e ff ff       	call   c000f160 <malloc>
c001c2a7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c2ae:	5a                   	pop    edx
c001c2af:	59                   	pop    ecx
c001c2b0:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c2b3:	43                   	inc    ebx
c001c2b4:	50                   	push   eax
c001c2b5:	e8 cb 44 fe ff       	call   c0000785 <strcpy>
c001c2ba:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c2c0:	83 c4 10             	add    esp,0x10
c001c2c3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c2c6:	85 c0                	test   eax,eax
c001c2c8:	75 cb                	jne    c001c295 <Process::addArgs(char**)+0x21>
c001c2ca:	5b                   	pop    ebx
c001c2cb:	5e                   	pop    esi
c001c2cc:	5f                   	pop    edi
c001c2cd:	c3                   	ret    

c001c2ce <Process::Process(char const*, Process*, char**)>:
c001c2ce:	56                   	push   esi
c001c2cf:	53                   	push   ebx
c001c2d0:	83 ec 14             	sub    esp,0x14
c001c2d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2d7:	05 0c 02 00 00       	add    eax,0x20c
c001c2dc:	bb 07 00 00 00       	mov    ebx,0x7
c001c2e1:	89 c6                	mov    esi,eax
c001c2e3:	85 db                	test   ebx,ebx
c001c2e5:	78 12                	js     c001c2f9 <Process::Process(char const*, Process*, char**)+0x2b>
c001c2e7:	83 ec 0c             	sub    esp,0xc
c001c2ea:	56                   	push   esi
c001c2eb:	e8 88 93 00 00       	call   c0025678 <ThreadControlBlock::ThreadControlBlock()>
c001c2f0:	83 c4 10             	add    esp,0x10
c001c2f3:	83 c6 63             	add    esi,0x63
c001c2f6:	4b                   	dec    ebx
c001c2f7:	eb ea                	jmp    c001c2e3 <Process::Process(char const*, Process*, char**)+0x15>
c001c2f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2fd:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001c304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c308:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c311:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001c316:	8d 50 01             	lea    edx,[eax+0x1]
c001c319:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001c31f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c323:	89 02                	mov    DWORD PTR [edx],eax
c001c325:	83 ec 0c             	sub    esp,0xc
c001c328:	6a 10                	push   0x10
c001c32a:	e8 33 5e ff ff       	call   c0012162 <operator new(unsigned long)>
c001c32f:	83 c4 10             	add    esp,0x10
c001c332:	89 c3                	mov    ebx,eax
c001c334:	83 ec 08             	sub    esp,0x8
c001c337:	6a 00                	push   0x0
c001c339:	53                   	push   ebx
c001c33a:	e8 b7 5a ff ff       	call   c0011df6 <VAS::VAS(bool)>
c001c33f:	83 c4 10             	add    esp,0x10
c001c342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c346:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c350:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c35e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c362:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c36c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c372:	85 c0                	test   eax,eax
c001c374:	74 42                	je     c001c3b8 <Process::Process(char const*, Process*, char**)+0xea>
c001c376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c37a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c380:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c38a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c394:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c39a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c3a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3a4:	05 0c 01 00 00       	add    eax,0x10c
c001c3a9:	83 ec 08             	sub    esp,0x8
c001c3ac:	52                   	push   edx
c001c3ad:	50                   	push   eax
c001c3ae:	e8 d2 43 fe ff       	call   c0000785 <strcpy>
c001c3b3:	83 c4 10             	add    esp,0x10
c001c3b6:	eb 5c                	jmp    c001c414 <Process::Process(char const*, Process*, char**)+0x146>
c001c3b8:	83 ec 0c             	sub    esp,0xc
c001c3bb:	68 60 12 00 00       	push   0x1260
c001c3c0:	e8 9d 5d ff ff       	call   c0012162 <operator new(unsigned long)>
c001c3c5:	83 c4 10             	add    esp,0x10
c001c3c8:	89 c3                	mov    ebx,eax
c001c3ca:	83 ec 08             	sub    esp,0x8
c001c3cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3d1:	53                   	push   ebx
c001c3d2:	e8 49 45 ff ff       	call   c0010920 <VgaText::VgaText(char const*)>
c001c3d7:	83 c4 10             	add    esp,0x10
c001c3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3de:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c3e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3e8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c3ee:	83 ec 0c             	sub    esp,0xc
c001c3f1:	50                   	push   eax
c001c3f2:	e8 2a 39 ff ff       	call   c000fd21 <addToTerminalCycle(VgaText*)>
c001c3f7:	83 c4 10             	add    esp,0x10
c001c3fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3fe:	05 0c 01 00 00       	add    eax,0x10c
c001c403:	83 ec 08             	sub    esp,0x8
c001c406:	68 66 86 02 c0       	push   0xc0028666
c001c40b:	50                   	push   eax
c001c40c:	e8 74 43 fe ff       	call   c0000785 <strcpy>
c001c411:	83 c4 10             	add    esp,0x10
c001c414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c418:	83 c0 0c             	add    eax,0xc
c001c41b:	83 ec 08             	sub    esp,0x8
c001c41e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c422:	50                   	push   eax
c001c423:	e8 5d 43 fe ff       	call   c0000785 <strcpy>
c001c428:	83 c4 10             	add    esp,0x10
c001c42b:	83 ec 08             	sub    esp,0x8
c001c42e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c432:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c436:	e8 39 fe ff ff       	call   c001c274 <Process::addArgs(char**)>
c001c43b:	83 c4 10             	add    esp,0x10
c001c43e:	83 ec 08             	sub    esp,0x8
c001c441:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c449:	e8 ae ee ff ff       	call   c001b2fc <Thr::loadProgramIntoMemory(Process*, char const*)>
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c455:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c459:	83 f0 01             	xor    eax,0x1
c001c45c:	88 c2                	mov    dl,al
c001c45e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c462:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001c468:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c46d:	83 ec 08             	sub    esp,0x8
c001c470:	50                   	push   eax
c001c471:	68 64 87 02 c0       	push   0xc0028764
c001c476:	e8 d6 5d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c47b:	83 c4 10             	add    esp,0x10
c001c47e:	90                   	nop
c001c47f:	83 c4 14             	add    esp,0x14
c001c482:	5b                   	pop    ebx
c001c483:	5e                   	pop    esi
c001c484:	c3                   	ret    
c001c485:	90                   	nop

c001c486 <Process::Process(bool, char const*, Process*, char**)>:
c001c486:	56                   	push   esi
c001c487:	53                   	push   ebx
c001c488:	83 ec 14             	sub    esp,0x14
c001c48b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c48f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c497:	05 0c 02 00 00       	add    eax,0x20c
c001c49c:	bb 07 00 00 00       	mov    ebx,0x7
c001c4a1:	89 c6                	mov    esi,eax
c001c4a3:	85 db                	test   ebx,ebx
c001c4a5:	78 12                	js     c001c4b9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001c4a7:	83 ec 0c             	sub    esp,0xc
c001c4aa:	56                   	push   esi
c001c4ab:	e8 c8 91 00 00       	call   c0025678 <ThreadControlBlock::ThreadControlBlock()>
c001c4b0:	83 c4 10             	add    esp,0x10
c001c4b3:	83 c6 63             	add    esi,0x63
c001c4b6:	4b                   	dec    ebx
c001c4b7:	eb ea                	jmp    c001c4a3 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001c4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4bd:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001c4c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c8:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c4d1:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001c4d6:	8d 50 01             	lea    edx,[eax+0x1]
c001c4d9:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001c4df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c4e3:	89 02                	mov    DWORD PTR [edx],eax
c001c4e5:	83 ec 0c             	sub    esp,0xc
c001c4e8:	6a 10                	push   0x10
c001c4ea:	e8 73 5c ff ff       	call   c0012162 <operator new(unsigned long)>
c001c4ef:	83 c4 10             	add    esp,0x10
c001c4f2:	89 c3                	mov    ebx,eax
c001c4f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4f9:	83 ec 08             	sub    esp,0x8
c001c4fc:	50                   	push   eax
c001c4fd:	53                   	push   ebx
c001c4fe:	e8 f3 58 ff ff       	call   c0011df6 <VAS::VAS(bool)>
c001c503:	83 c4 10             	add    esp,0x10
c001c506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c50a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c514:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c51e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c522:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c526:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c52c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c530:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c536:	85 c0                	test   eax,eax
c001c538:	74 42                	je     c001c57c <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001c53a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c53e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c544:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c54a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c54e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c558:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c55e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c568:	05 0c 01 00 00       	add    eax,0x10c
c001c56d:	83 ec 08             	sub    esp,0x8
c001c570:	52                   	push   edx
c001c571:	50                   	push   eax
c001c572:	e8 0e 42 fe ff       	call   c0000785 <strcpy>
c001c577:	83 c4 10             	add    esp,0x10
c001c57a:	eb 5c                	jmp    c001c5d8 <Process::Process(bool, char const*, Process*, char**)+0x152>
c001c57c:	83 ec 0c             	sub    esp,0xc
c001c57f:	68 60 12 00 00       	push   0x1260
c001c584:	e8 d9 5b ff ff       	call   c0012162 <operator new(unsigned long)>
c001c589:	83 c4 10             	add    esp,0x10
c001c58c:	89 c3                	mov    ebx,eax
c001c58e:	83 ec 08             	sub    esp,0x8
c001c591:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c595:	53                   	push   ebx
c001c596:	e8 85 43 ff ff       	call   c0010920 <VgaText::VgaText(char const*)>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5a2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c5a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5ac:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c5b2:	83 ec 0c             	sub    esp,0xc
c001c5b5:	50                   	push   eax
c001c5b6:	e8 66 37 ff ff       	call   c000fd21 <addToTerminalCycle(VgaText*)>
c001c5bb:	83 c4 10             	add    esp,0x10
c001c5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5c2:	05 0c 01 00 00       	add    eax,0x10c
c001c5c7:	83 ec 08             	sub    esp,0x8
c001c5ca:	68 66 86 02 c0       	push   0xc0028666
c001c5cf:	50                   	push   eax
c001c5d0:	e8 b0 41 fe ff       	call   c0000785 <strcpy>
c001c5d5:	83 c4 10             	add    esp,0x10
c001c5d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5dc:	83 c0 0c             	add    eax,0xc
c001c5df:	83 ec 08             	sub    esp,0x8
c001c5e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c5e6:	50                   	push   eax
c001c5e7:	e8 99 41 fe ff       	call   c0000785 <strcpy>
c001c5ec:	83 c4 10             	add    esp,0x10
c001c5ef:	83 ec 08             	sub    esp,0x8
c001c5f2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c5f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c5fa:	e8 75 fc ff ff       	call   c001c274 <Process::addArgs(char**)>
c001c5ff:	83 c4 10             	add    esp,0x10
c001c602:	90                   	nop
c001c603:	83 c4 14             	add    esp,0x14
c001c606:	5b                   	pop    ebx
c001c607:	5e                   	pop    esi
c001c608:	c3                   	ret    

c001c609 <disableIRQs()>:
c001c609:	fa                   	cli    
c001c60a:	ff 05 6c b9 02 c0    	inc    DWORD PTR ds:0xc002b96c
c001c610:	c3                   	ret    

c001c611 <getIRQNestingLevel()>:
c001c611:	a1 6c b9 02 c0       	mov    eax,ds:0xc002b96c
c001c616:	c3                   	ret    

c001c617 <enableIRQs()>:
c001c617:	a1 6c b9 02 c0       	mov    eax,ds:0xc002b96c
c001c61c:	48                   	dec    eax
c001c61d:	a3 6c b9 02 c0       	mov    ds:0xc002b96c,eax
c001c622:	75 01                	jne    c001c625 <enableIRQs()+0xe>
c001c624:	fb                   	sti    
c001c625:	c3                   	ret    

c001c626 <lockScheduler()>:
c001c626:	eb e1                	jmp    c001c609 <disableIRQs()>

c001c628 <unlockScheduler()>:
c001c628:	eb ed                	jmp    c001c617 <enableIRQs()>

c001c62a <userModeEntryPoint(void*)>:
c001c62a:	83 ec 0c             	sub    esp,0xc
c001c62d:	e8 f6 ff ff ff       	call   c001c628 <unlockScheduler()>
c001c632:	fb                   	sti    
c001c633:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c638:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c63b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001c641:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c645:	83 c4 0c             	add    esp,0xc
c001c648:	e9 77 3c fe ff       	jmp    c00002c4 <goToUsermode>

c001c64d <lockStuff()>:
c001c64d:	e8 b7 ff ff ff       	call   c001c609 <disableIRQs()>
c001c652:	ff 05 68 b9 02 c0    	inc    DWORD PTR ds:0xc002b968
c001c658:	c3                   	ret    

c001c659 <taskStartupFunction>:
c001c659:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c65e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001c661:	c3                   	ret    

c001c662 <updateTimeUsed()>:
c001c662:	57                   	push   edi
c001c663:	56                   	push   esi
c001c664:	53                   	push   ebx
c001c665:	e8 d0 b1 ff ff       	call   c001783a <thisCPU()>
c001c66a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001c671:	74 49                	je     c001c6bc <updateTimeUsed()+0x5a>
c001c673:	0f 31                	rdtsc  
c001c675:	89 c1                	mov    ecx,eax
c001c677:	a3 a8 b9 02 c0       	mov    ds:0xc002b9a8,eax
c001c67c:	2b 0d 98 b9 02 c0    	sub    ecx,DWORD PTR ds:0xc002b998
c001c682:	89 d3                	mov    ebx,edx
c001c684:	89 0d a0 b9 02 c0    	mov    DWORD PTR ds:0xc002b9a0,ecx
c001c68a:	1b 1d 9c b9 02 c0    	sbb    ebx,DWORD PTR ds:0xc002b99c
c001c690:	a3 98 b9 02 c0       	mov    ds:0xc002b998,eax
c001c695:	89 1d a4 b9 02 c0    	mov    DWORD PTR ds:0xc002b9a4,ebx
c001c69b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6a0:	89 15 ac b9 02 c0    	mov    DWORD PTR ds:0xc002b9ac,edx
c001c6a6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001c6a9:	89 15 9c b9 02 c0    	mov    DWORD PTR ds:0xc002b99c,edx
c001c6af:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001c6b2:	01 f1                	add    ecx,esi
c001c6b4:	11 fb                	adc    ebx,edi
c001c6b6:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001c6b9:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001c6bc:	5b                   	pop    ebx
c001c6bd:	5e                   	pop    esi
c001c6be:	5f                   	pop    edi
c001c6bf:	c3                   	ret    

c001c6c0 <switchToThread(ThreadControlBlock*)>:
c001c6c0:	53                   	push   ebx
c001c6c1:	83 ec 08             	sub    esp,0x8
c001c6c4:	a1 68 b9 02 c0       	mov    eax,ds:0xc002b968
c001c6c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6cd:	85 c0                	test   eax,eax
c001c6cf:	75 30                	jne    c001c701 <switchToThread(ThreadControlBlock*)+0x41>
c001c6d1:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001c6d4:	3c ff                	cmp    al,0xff
c001c6d6:	74 25                	je     c001c6fd <switchToThread(ThreadControlBlock*)+0x3d>
c001c6d8:	0f b6 d0             	movzx  edx,al
c001c6db:	b8 84 03 00 00       	mov    eax,0x384
c001c6e0:	29 d0                	sub    eax,edx
c001c6e2:	c1 e0 10             	shl    eax,0x10
c001c6e5:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001c6e8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001c6eb:	e8 72 ff ff ff       	call   c001c662 <updateTimeUsed()>
c001c6f0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c6f4:	83 c4 08             	add    esp,0x8
c001c6f7:	5b                   	pop    ebx
c001c6f8:	e9 00 3c fe ff       	jmp    c00002fd <switchToThreadASM>
c001c6fd:	31 c0                	xor    eax,eax
c001c6ff:	eb e7                	jmp    c001c6e8 <switchToThread(ThreadControlBlock*)+0x28>
c001c701:	c7 05 64 b9 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b964,0x1
c001c70b:	83 c4 08             	add    esp,0x8
c001c70e:	5b                   	pop    ebx
c001c70f:	c3                   	ret    

c001c710 <Semaphore::Semaphore(int)>:
c001c710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c718:	89 10                	mov    DWORD PTR [eax],edx
c001c71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c71e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c725:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c729:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c734:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c73b:	90                   	nop
c001c73c:	c3                   	ret    
c001c73d:	90                   	nop

c001c73e <Mutex::Mutex()>:
c001c73e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c742:	6a 01                	push   0x1
c001c744:	50                   	push   eax
c001c745:	e8 c6 ff ff ff       	call   c001c710 <Semaphore::Semaphore(int)>
c001c74a:	83 c4 08             	add    esp,0x8
c001c74d:	90                   	nop
c001c74e:	c3                   	ret    
c001c74f:	90                   	nop

c001c750 <Process::createThread(void (*)(void*), void*, int)>:
c001c750:	55                   	push   ebp
c001c751:	31 c9                	xor    ecx,ecx
c001c753:	57                   	push   edi
c001c754:	56                   	push   esi
c001c755:	53                   	push   ebx
c001c756:	83 ec 1c             	sub    esp,0x1c
c001c759:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c75d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001c764:	89 f2                	mov    edx,esi
c001c766:	0f b7 c2             	movzx  eax,dx
c001c769:	83 e2 01             	and    edx,0x1
c001c76c:	74 14                	je     c001c782 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001c76e:	d1 f8                	sar    eax,1
c001c770:	41                   	inc    ecx
c001c771:	89 c2                	mov    edx,eax
c001c773:	83 f9 10             	cmp    ecx,0x10
c001c776:	75 ee                	jne    c001c766 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001c778:	83 c4 1c             	add    esp,0x1c
c001c77b:	31 c0                	xor    eax,eax
c001c77d:	5b                   	pop    ebx
c001c77e:	5e                   	pop    esi
c001c77f:	5f                   	pop    edi
c001c780:	5d                   	pop    ebp
c001c781:	c3                   	ret    
c001c782:	83 ec 08             	sub    esp,0x8
c001c785:	b8 01 00 00 00       	mov    eax,0x1
c001c78a:	d3 e0                	shl    eax,cl
c001c78c:	09 c6                	or     esi,eax
c001c78e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c794:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001c79b:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001c79e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c7a1:	01 ce                	add    esi,ecx
c001c7a3:	89 f0                	mov    eax,esi
c001c7a5:	c1 e0 05             	shl    eax,0x5
c001c7a8:	01 c6                	add    esi,eax
c001c7aa:	8d 04 33             	lea    eax,[ebx+esi*1]
c001c7ad:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001c7b3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001c7b9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001c7bd:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001c7c3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001c7c9:	89 ca                	mov    edx,ecx
c001c7cb:	f7 da                	neg    edx
c001c7cd:	c1 e2 15             	shl    edx,0x15
c001c7d0:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001c7d6:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001c7dc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001c7e0:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001c7ea:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001c7f0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c7f4:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001c7fa:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001c804:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001c80e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001c815:	50                   	push   eax
c001c816:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c81a:	68 88 b9 02 c0       	push   0xc002b988
c001c81f:	e8 9e 8c 00 00       	call   c00254c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c824:	83 c4 10             	add    esp,0x10
c001c827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c82b:	83 c4 1c             	add    esp,0x1c
c001c82e:	5b                   	pop    ebx
c001c82f:	5e                   	pop    esi
c001c830:	5f                   	pop    edi
c001c831:	5d                   	pop    ebp
c001c832:	c3                   	ret    
c001c833:	90                   	nop

c001c834 <Process::createUserThread()>:
c001c834:	83 ec 0c             	sub    esp,0xc
c001c837:	68 80 00 00 00       	push   0x80
c001c83c:	6a 00                	push   0x0
c001c83e:	68 2a c6 01 c0       	push   0xc001c62a
c001c843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c847:	e8 04 ff ff ff       	call   c001c750 <Process::createThread(void (*)(void*), void*, int)>
c001c84c:	83 c4 1c             	add    esp,0x1c
c001c84f:	c3                   	ret    

c001c850 <setupMultitasking(void (*)())>:
c001c850:	56                   	push   esi
c001c851:	53                   	push   ebx
c001c852:	53                   	push   ebx
c001c853:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c857:	eb 10                	jmp    c001c869 <setupMultitasking(void (*)())+0x19>
c001c859:	83 ec 0c             	sub    esp,0xc
c001c85c:	68 88 b9 02 c0       	push   0xc002b988
c001c861:	e8 ae 8b 00 00       	call   c0025414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c866:	83 c4 10             	add    esp,0x10
c001c869:	83 ec 0c             	sub    esp,0xc
c001c86c:	68 88 b9 02 c0       	push   0xc002b988
c001c871:	e8 82 8b 00 00       	call   c00253f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c876:	83 c4 10             	add    esp,0x10
c001c879:	84 c0                	test   al,al
c001c87b:	74 dc                	je     c001c859 <setupMultitasking(void (*)())+0x9>
c001c87d:	83 ec 0c             	sub    esp,0xc
c001c880:	68 3b 07 00 00       	push   0x73b
c001c885:	e8 d8 58 ff ff       	call   c0012162 <operator new(unsigned long)>
c001c88a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001c891:	89 c3                	mov    ebx,eax
c001c893:	6a 00                	push   0x0
c001c895:	68 6a 86 02 c0       	push   0xc002866a
c001c89a:	6a 01                	push   0x1
c001c89c:	50                   	push   eax
c001c89d:	e8 e4 fb ff ff       	call   c001c486 <Process::Process(bool, char const*, Process*, char**)>
c001c8a2:	83 c4 18             	add    esp,0x18
c001c8a5:	89 1d 94 b9 02 c0    	mov    DWORD PTR ds:0xc002b994,ebx
c001c8ab:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c8b1:	68 8c 87 02 c0       	push   0xc002878c
c001c8b6:	e8 96 59 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c8bb:	58                   	pop    eax
c001c8bc:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c8c2:	e8 ce 3b ff ff       	call   c0010495 <setActiveTerminal(VgaText*)>
c001c8c7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001c8cf:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c8d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c8d8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001c8e2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001c8e8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001c8ee:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001c8f8:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001c902:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001c90c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001c912:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001c918:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001c922:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001c928:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001c932:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001c938:	5a                   	pop    edx
c001c939:	59                   	pop    ecx
c001c93a:	68 66 86 02 c0       	push   0xc0028666
c001c93f:	50                   	push   eax
c001c940:	e8 40 3e fe ff       	call   c0000785 <strcpy>
c001c945:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001c94c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001c950:	83 c4 14             	add    esp,0x14
c001c953:	5b                   	pop    ebx
c001c954:	5e                   	pop    esi
c001c955:	e9 95 39 fe ff       	jmp    c00002ef <switchToThreadASMFirstTime>

c001c95a <schedule()>:
c001c95a:	a1 68 b9 02 c0       	mov    eax,ds:0xc002b968
c001c95f:	85 c0                	test   eax,eax
c001c961:	74 0b                	je     c001c96e <schedule()+0x14>
c001c963:	c7 05 64 b9 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b964,0x1
c001c96d:	c3                   	ret    
c001c96e:	53                   	push   ebx
c001c96f:	83 ec 14             	sub    esp,0x14
c001c972:	68 88 b9 02 c0       	push   0xc002b988
c001c977:	e8 7c 8a 00 00       	call   c00253f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c97c:	83 c4 10             	add    esp,0x10
c001c97f:	84 c0                	test   al,al
c001c981:	75 38                	jne    c001c9bb <schedule()+0x61>
c001c983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c988:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c98b:	4a                   	dec    edx
c001c98c:	74 32                	je     c001c9c0 <schedule()+0x66>
c001c98e:	83 ec 0c             	sub    esp,0xc
c001c991:	68 88 b9 02 c0       	push   0xc002b988
c001c996:	e8 55 8a 00 00       	call   c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c99b:	c7 04 24 88 b9 02 c0 	mov    DWORD PTR [esp],0xc002b988
c001c9a2:	89 c3                	mov    ebx,eax
c001c9a4:	e8 6b 8a 00 00       	call   c0025414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c9a9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001c9b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9b3:	e8 08 fd ff ff       	call   c001c6c0 <switchToThread(ThreadControlBlock*)>
c001c9b8:	83 c4 10             	add    esp,0x10
c001c9bb:	83 c4 08             	add    esp,0x8
c001c9be:	5b                   	pop    ebx
c001c9bf:	c3                   	ret    
c001c9c0:	83 ec 08             	sub    esp,0x8
c001c9c3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001c9ca:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c9d0:	68 88 b9 02 c0       	push   0xc002b988
c001c9d5:	e8 e8 8a 00 00       	call   c00254c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c9da:	83 c4 10             	add    esp,0x10
c001c9dd:	eb af                	jmp    c001c98e <schedule()+0x34>

c001c9df <unlockStuff()>:
c001c9df:	a1 68 b9 02 c0       	mov    eax,ds:0xc002b968
c001c9e4:	48                   	dec    eax
c001c9e5:	a3 68 b9 02 c0       	mov    ds:0xc002b968,eax
c001c9ea:	75 09                	jne    c001c9f5 <unlockStuff()+0x16>
c001c9ec:	a1 64 b9 02 c0       	mov    eax,ds:0xc002b964
c001c9f1:	85 c0                	test   eax,eax
c001c9f3:	75 05                	jne    c001c9fa <unlockStuff()+0x1b>
c001c9f5:	e9 1d fc ff ff       	jmp    c001c617 <enableIRQs()>
c001c9fa:	83 ec 0c             	sub    esp,0xc
c001c9fd:	c7 05 64 b9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b964,0x0
c001ca07:	e8 4e ff ff ff       	call   c001c95a <schedule()>
c001ca0c:	83 c4 0c             	add    esp,0xc
c001ca0f:	e9 03 fc ff ff       	jmp    c001c617 <enableIRQs()>

c001ca14 <Semaphore::tryAcquire()>:
c001ca14:	83 ec 0c             	sub    esp,0xc
c001ca17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1b:	e8 2d fc ff ff       	call   c001c64d <lockStuff()>
c001ca20:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ca23:	3b 10                	cmp    edx,DWORD PTR [eax]
c001ca25:	7c 0b                	jl     c001ca32 <Semaphore::tryAcquire()+0x1e>
c001ca27:	e8 b3 ff ff ff       	call   c001c9df <unlockStuff()>
c001ca2c:	31 c0                	xor    eax,eax
c001ca2e:	83 c4 0c             	add    esp,0xc
c001ca31:	c3                   	ret    
c001ca32:	42                   	inc    edx
c001ca33:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ca36:	e8 a4 ff ff ff       	call   c001c9df <unlockStuff()>
c001ca3b:	b0 01                	mov    al,0x1
c001ca3d:	83 c4 0c             	add    esp,0xc
c001ca40:	c3                   	ret    
c001ca41:	90                   	nop

c001ca42 <Semaphore::assertLocked(char const*)>:
c001ca42:	83 ec 0c             	sub    esp,0xc
c001ca45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca4d:	e8 fb fb ff ff       	call   c001c64d <lockStuff()>
c001ca52:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca54:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001ca57:	7c 05                	jl     c001ca5e <Semaphore::assertLocked(char const*)+0x1c>
c001ca59:	83 c4 0c             	add    esp,0xc
c001ca5c:	eb 81                	jmp    c001c9df <unlockStuff()>
c001ca5e:	83 ec 0c             	sub    esp,0xc
c001ca61:	52                   	push   edx
c001ca62:	e8 6c cc ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001ca67:	83 c4 10             	add    esp,0x10
c001ca6a:	83 c4 0c             	add    esp,0xc
c001ca6d:	e9 6d ff ff ff       	jmp    c001c9df <unlockStuff()>

c001ca72 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001ca72:	83 ec 0c             	sub    esp,0xc
c001ca75:	e8 97 fb ff ff       	call   c001c611 <getIRQNestingLevel()>
c001ca7a:	83 ec 08             	sub    esp,0x8
c001ca7d:	50                   	push   eax
c001ca7e:	68 c0 87 02 c0       	push   0xc00287c0
c001ca83:	e8 c9 57 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ca88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca91:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca94:	e8 c1 fe ff ff       	call   c001c95a <schedule()>
c001ca99:	e8 8a fb ff ff       	call   c001c628 <unlockScheduler()>
c001ca9e:	e8 6e fb ff ff       	call   c001c611 <getIRQNestingLevel()>
c001caa3:	5a                   	pop    edx
c001caa4:	59                   	pop    ecx
c001caa5:	50                   	push   eax
c001caa6:	68 f4 87 02 c0       	push   0xc00287f4
c001caab:	e8 a1 57 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001cab0:	83 c4 1c             	add    esp,0x1c
c001cab3:	c3                   	ret    

c001cab4 <blockTask(TaskState)>:
c001cab4:	83 ec 0c             	sub    esp,0xc
c001cab7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cabb:	e8 66 fb ff ff       	call   c001c626 <lockScheduler()>
c001cac0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cac5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cac8:	e8 8d fe ff ff       	call   c001c95a <schedule()>
c001cacd:	83 c4 0c             	add    esp,0xc
c001cad0:	e9 53 fb ff ff       	jmp    c001c628 <unlockScheduler()>

c001cad5 <waitTask(int, int*, int)>:
c001cad5:	83 ec 18             	sub    esp,0x18
c001cad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cadd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cae1:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001cae4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caed:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001caf0:	6a 07                	push   0x7
c001caf2:	e8 bd ff ff ff       	call   c001cab4 <blockTask(TaskState)>
c001caf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cafc:	83 c4 10             	add    esp,0x10
c001caff:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001cb02:	85 d2                	test   edx,edx
c001cb04:	74 0a                	je     c001cb10 <waitTask(int, int*, int)+0x3b>
c001cb06:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001cb09:	89 02                	mov    DWORD PTR [edx],eax
c001cb0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb10:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001cb13:	83 c4 0c             	add    esp,0xc
c001cb16:	c3                   	ret    

c001cb17 <nanoSleepUntil(unsigned long long)>:
c001cb17:	83 ec 0c             	sub    esp,0xc
c001cb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb22:	3b 05 50 ab 02 c0    	cmp    eax,DWORD PTR ds:0xc002ab50
c001cb28:	89 d1                	mov    ecx,edx
c001cb2a:	1b 0d 54 ab 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ab54
c001cb30:	73 04                	jae    c001cb36 <nanoSleepUntil(unsigned long long)+0x1f>
c001cb32:	83 c4 0c             	add    esp,0xc
c001cb35:	c3                   	ret    
c001cb36:	e8 12 fb ff ff       	call   c001c64d <lockStuff()>
c001cb3b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cb41:	83 ec 08             	sub    esp,0x8
c001cb44:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001cb47:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001cb4a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001cb50:	68 7c b9 02 c0       	push   0xc002b97c
c001cb55:	e8 68 89 00 00       	call   c00254c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cb5a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001cb61:	e8 4e ff ff ff       	call   c001cab4 <blockTask(TaskState)>
c001cb66:	83 c4 1c             	add    esp,0x1c
c001cb69:	e9 71 fe ff ff       	jmp    c001c9df <unlockStuff()>

c001cb6e <nanoSleep(unsigned long long)>:
c001cb6e:	a1 50 ab 02 c0       	mov    eax,ds:0xc002ab50
c001cb73:	8b 15 54 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab54
c001cb79:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001cb7d:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001cb81:	eb 94                	jmp    c001cb17 <nanoSleepUntil(unsigned long long)>

c001cb83 <sleep(unsigned long long)>:
c001cb83:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001cb8b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001cb90:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001cb94:	01 ca                	add    edx,ecx
c001cb96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb9a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cb9e:	eb ce                	jmp    c001cb6e <nanoSleep(unsigned long long)>

c001cba0 <Semaphore::acquire()>:
c001cba0:	83 ec 0c             	sub    esp,0xc
c001cba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba7:	e8 a1 fa ff ff       	call   c001c64d <lockStuff()>
c001cbac:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cbaf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001cbb1:	7d 0c                	jge    c001cbbf <Semaphore::acquire()+0x1f>
c001cbb3:	42                   	inc    edx
c001cbb4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cbb7:	83 c4 0c             	add    esp,0xc
c001cbba:	e9 20 fe ff ff       	jmp    c001c9df <unlockStuff()>
c001cbbf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cbc5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001cbcc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001cbcf:	85 d2                	test   edx,edx
c001cbd1:	74 2a                	je     c001cbfd <Semaphore::acquire()+0x5d>
c001cbd3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001cbd6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cbdc:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001cbdf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cbe5:	83 ec 0c             	sub    esp,0xc
c001cbe8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cbeb:	6a 05                	push   0x5
c001cbed:	e8 c2 fe ff ff       	call   c001cab4 <blockTask(TaskState)>
c001cbf2:	83 c4 10             	add    esp,0x10
c001cbf5:	83 c4 0c             	add    esp,0xc
c001cbf8:	e9 e2 fd ff ff       	jmp    c001c9df <unlockStuff()>
c001cbfd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cc03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cc06:	eb d7                	jmp    c001cbdf <Semaphore::acquire()+0x3f>

c001cc08 <taskReturned>:
c001cc08:	83 ec 18             	sub    esp,0x18
c001cc0b:	68 28 88 02 c0       	push   0xc0028828
c001cc10:	e8 be ca ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001cc15:	83 c4 10             	add    esp,0x10
c001cc18:	83 ec 0c             	sub    esp,0xc
c001cc1b:	6a 02                	push   0x2
c001cc1d:	e8 92 fe ff ff       	call   c001cab4 <blockTask(TaskState)>
c001cc22:	e8 ff f9 ff ff       	call   c001c626 <lockScheduler()>
c001cc27:	e8 2e fd ff ff       	call   c001c95a <schedule()>
c001cc2c:	e8 f7 f9 ff ff       	call   c001c628 <unlockScheduler()>
c001cc31:	83 c4 10             	add    esp,0x10
c001cc34:	eb e2                	jmp    c001cc18 <taskReturned+0x10>

c001cc36 <unblockTask(ThreadControlBlock*)>:
c001cc36:	53                   	push   ebx
c001cc37:	83 ec 08             	sub    esp,0x8
c001cc3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc3e:	e8 e3 f9 ff ff       	call   c001c626 <lockScheduler()>
c001cc43:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cc46:	85 c0                	test   eax,eax
c001cc48:	74 5c                	je     c001cca6 <unblockTask(ThreadControlBlock*)+0x70>
c001cc4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cc4d:	48                   	dec    eax
c001cc4e:	74 31                	je     c001cc81 <unblockTask(ThreadControlBlock*)+0x4b>
c001cc50:	83 ec 0c             	sub    esp,0xc
c001cc53:	68 88 b9 02 c0       	push   0xc002b988
c001cc58:	e8 93 87 00 00       	call   c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cc5d:	83 c4 10             	add    esp,0x10
c001cc60:	85 c0                	test   eax,eax
c001cc62:	75 17                	jne    c001cc7b <unblockTask(ThreadControlBlock*)+0x45>
c001cc64:	eb 65                	jmp    c001cccb <unblockTask(ThreadControlBlock*)+0x95>
c001cc66:	83 ec 08             	sub    esp,0x8
c001cc69:	50                   	push   eax
c001cc6a:	68 88 b9 02 c0       	push   0xc002b988
c001cc6f:	e8 9a 8a 00 00       	call   c002570e <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001cc74:	83 c4 10             	add    esp,0x10
c001cc77:	85 c0                	test   eax,eax
c001cc79:	74 50                	je     c001cccb <unblockTask(ThreadControlBlock*)+0x95>
c001cc7b:	39 c3                	cmp    ebx,eax
c001cc7d:	75 e7                	jne    c001cc66 <unblockTask(ThreadControlBlock*)+0x30>
c001cc7f:	eb 1c                	jmp    c001cc9d <unblockTask(ThreadControlBlock*)+0x67>
c001cc81:	83 ec 0c             	sub    esp,0xc
c001cc84:	68 18 89 02 c0       	push   0xc0028918
c001cc89:	e8 c3 55 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001cc8e:	c7 04 24 a4 88 02 c0 	mov    DWORD PTR [esp],0xc00288a4
c001cc95:	e8 b7 55 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001cc9a:	83 c4 10             	add    esp,0x10
c001cc9d:	83 c4 08             	add    esp,0x8
c001cca0:	5b                   	pop    ebx
c001cca1:	e9 82 f9 ff ff       	jmp    c001c628 <unlockScheduler()>
c001cca6:	83 ec 0c             	sub    esp,0xc
c001cca9:	68 5c 88 02 c0       	push   0xc002885c
c001ccae:	e8 9e 55 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ccb3:	c7 04 24 a4 88 02 c0 	mov    DWORD PTR [esp],0xc00288a4
c001ccba:	e8 92 55 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	83 c4 08             	add    esp,0x8
c001ccc5:	5b                   	pop    ebx
c001ccc6:	e9 5d f9 ff ff       	jmp    c001c628 <unlockScheduler()>
c001cccb:	83 ec 08             	sub    esp,0x8
c001ccce:	53                   	push   ebx
c001cccf:	68 88 b9 02 c0       	push   0xc002b988
c001ccd4:	e8 e9 87 00 00       	call   c00254c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ccd9:	83 c4 10             	add    esp,0x10
c001ccdc:	83 c4 08             	add    esp,0x8
c001ccdf:	5b                   	pop    ebx
c001cce0:	e9 43 f9 ff ff       	jmp    c001c628 <unlockScheduler()>

c001cce5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001cce5:	55                   	push   ebp
c001cce6:	57                   	push   edi
c001cce7:	56                   	push   esi
c001cce8:	53                   	push   ebx
c001cce9:	83 ec 1c             	sub    esp,0x1c
c001ccec:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ccf0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ccf3:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001ccf9:	85 c9                	test   ecx,ecx
c001ccfb:	7e 20                	jle    c001cd1d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ccfd:	31 f6                	xor    esi,esi
c001ccff:	83 ec 0c             	sub    esp,0xc
c001cd02:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001cd09:	46                   	inc    esi
c001cd0a:	e8 61 24 ff ff       	call   c000f170 <free>
c001cd0f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cd12:	83 c4 10             	add    esp,0x10
c001cd15:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001cd1b:	7f e2                	jg     c001ccff <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001cd1d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cd27:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001cd2c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001cd2f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001cd32:	d3 c0                	rol    eax,cl
c001cd34:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001cd3b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001cd3e:	89 f7                	mov    edi,esi
c001cd40:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001cd48:	0f 85 4f 01 00 00    	jne    c001ce9d <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001cd4e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001cd54:	85 c0                	test   eax,eax
c001cd56:	0f 84 aa 00 00 00    	je     c001ce06 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001cd5c:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001cd5f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cd63:	31 c9                	xor    ecx,ecx
c001cd65:	eb 10                	jmp    c001cd77 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001cd67:	41                   	inc    ecx
c001cd68:	83 f9 10             	cmp    ecx,0x10
c001cd6b:	0f 84 95 00 00 00    	je     c001ce06 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001cd71:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001cd77:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001cd7e:	d3 fa                	sar    edx,cl
c001cd80:	83 e2 01             	and    edx,0x1
c001cd83:	74 e2                	je     c001cd67 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001cd85:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001cd88:	01 ca                	add    edx,ecx
c001cd8a:	89 d5                	mov    ebp,edx
c001cd8c:	c1 e5 05             	shl    ebp,0x5
c001cd8f:	01 ea                	add    edx,ebp
c001cd91:	01 d0                	add    eax,edx
c001cd93:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001cd99:	83 fd 07             	cmp    ebp,0x7
c001cd9c:	75 c9                	jne    c001cd67 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001cd9e:	05 40 02 00 00       	add    eax,0x240
c001cda3:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001cda6:	83 fd ff             	cmp    ebp,0xffffffff
c001cda9:	0f 8c 08 01 00 00    	jl     c001ceb7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001cdaf:	0f 84 b9 01 00 00    	je     c001cf6e <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001cdb5:	85 ed                	test   ebp,ebp
c001cdb7:	0f 84 a0 01 00 00    	je     c001cf5d <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001cdbd:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001cdbf:	75 a6                	jne    c001cd67 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001cdc1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001cdc7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cdcb:	01 d0                	add    eax,edx
c001cdcd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001cdd1:	83 ec 0c             	sub    esp,0xc
c001cdd4:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001cdda:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cddd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cde3:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001cdea:	50                   	push   eax
c001cdeb:	e8 46 fe ff ff       	call   c001cc36 <unblockTask(ThreadControlBlock*)>
c001cdf0:	83 c4 10             	add    esp,0x10
c001cdf3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001cdf6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdfa:	89 f7                	mov    edi,esi
c001cdfc:	41                   	inc    ecx
c001cdfd:	83 f9 10             	cmp    ecx,0x10
c001ce00:	0f 85 6b ff ff ff    	jne    c001cd71 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001ce06:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ce0c:	85 c0                	test   eax,eax
c001ce0e:	74 5d                	je     c001ce6d <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001ce10:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ce16:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ce1c:	74 4f                	je     c001ce6d <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001ce1e:	83 ec 0c             	sub    esp,0xc
c001ce21:	68 88 b9 02 c0       	push   0xc002b988
c001ce26:	e8 c5 85 00 00       	call   c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce2b:	c7 04 24 88 b9 02 c0 	mov    DWORD PTR [esp],0xc002b988
c001ce32:	89 c7                	mov    edi,eax
c001ce34:	e8 bf 85 00 00       	call   c00253f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ce39:	83 c4 10             	add    esp,0x10
c001ce3c:	84 c0                	test   al,al
c001ce3e:	0f 84 e4 00 00 00    	je     c001cf28 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ce44:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ce47:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ce4d:	85 d2                	test   edx,edx
c001ce4f:	74 0f                	je     c001ce60 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001ce51:	83 ec 0c             	sub    esp,0xc
c001ce54:	8b 02                	mov    eax,DWORD PTR [edx]
c001ce56:	52                   	push   edx
c001ce57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ce5a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ce5d:	83 c4 10             	add    esp,0x10
c001ce60:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ce6a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ce6d:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ce73:	85 db                	test   ebx,ebx
c001ce75:	74 16                	je     c001ce8d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001ce77:	83 ec 0c             	sub    esp,0xc
c001ce7a:	53                   	push   ebx
c001ce7b:	e8 66 49 ff ff       	call   c00117e6 <VAS::~VAS()>
c001ce80:	58                   	pop    eax
c001ce81:	5a                   	pop    edx
c001ce82:	6a 10                	push   0x10
c001ce84:	53                   	push   ebx
c001ce85:	e8 e7 52 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001ce8a:	83 c4 10             	add    esp,0x10
c001ce8d:	83 ec 0c             	sub    esp,0xc
c001ce90:	68 71 86 02 c0       	push   0xc0028671
c001ce95:	e8 b7 53 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ce9a:	83 c4 10             	add    esp,0x10
c001ce9d:	83 ec 08             	sub    esp,0x8
c001cea0:	68 3b 07 00 00       	push   0x73b
c001cea5:	68 7f 86 02 c0       	push   0xc002867f
c001ceaa:	e8 a2 53 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ceaf:	83 c4 2c             	add    esp,0x2c
c001ceb2:	5b                   	pop    ebx
c001ceb3:	5e                   	pop    esi
c001ceb4:	5f                   	pop    edi
c001ceb5:	5d                   	pop    ebp
c001ceb6:	c3                   	ret    
c001ceb7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cebb:	83 ec 0c             	sub    esp,0xc
c001cebe:	68 5c 89 02 c0       	push   0xc002895c
c001cec3:	e8 0b c8 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001cec8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001cecb:	83 c4 10             	add    esp,0x10
c001cece:	89 f7                	mov    edi,esi
c001ced0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ced4:	e9 8e fe ff ff       	jmp    c001cd67 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001ced9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cedf:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001cee5:	75 1c                	jne    c001cf03 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001cee7:	83 ec 0c             	sub    esp,0xc
c001ceea:	68 c4 89 02 c0       	push   0xc00289c4
c001ceef:	e8 5d 53 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001cef4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001cefb:	e8 b4 fb ff ff       	call   c001cab4 <blockTask(TaskState)>
c001cf00:	83 c4 10             	add    esp,0x10
c001cf03:	83 ec 08             	sub    esp,0x8
c001cf06:	56                   	push   esi
c001cf07:	68 88 b9 02 c0       	push   0xc002b988
c001cf0c:	e8 b1 85 00 00       	call   c00254c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cf11:	c7 04 24 88 b9 02 c0 	mov    DWORD PTR [esp],0xc002b988
c001cf18:	e8 d3 84 00 00       	call   c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cf1d:	83 c4 10             	add    esp,0x10
c001cf20:	39 f8                	cmp    eax,edi
c001cf22:	0f 84 1c ff ff ff    	je     c001ce44 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001cf28:	83 ec 0c             	sub    esp,0xc
c001cf2b:	68 88 b9 02 c0       	push   0xc002b988
c001cf30:	e8 bb 84 00 00       	call   c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cf35:	c7 04 24 88 b9 02 c0 	mov    DWORD PTR [esp],0xc002b988
c001cf3c:	89 c6                	mov    esi,eax
c001cf3e:	e8 d1 84 00 00       	call   c0025414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cf43:	83 c4 10             	add    esp,0x10
c001cf46:	39 f3                	cmp    ebx,esi
c001cf48:	74 b9                	je     c001cf03 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001cf4a:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001cf4d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cf50:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001cf56:	75 ab                	jne    c001cf03 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001cf58:	e9 7c ff ff ff       	jmp    c001ced9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001cf5d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf61:	83 ec 0c             	sub    esp,0xc
c001cf64:	68 90 89 02 c0       	push   0xc0028990
c001cf69:	e9 55 ff ff ff       	jmp    c001cec3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001cf6e:	8b 36                	mov    esi,DWORD PTR [esi]
c001cf70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf74:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001cf77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cf7a:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001cf80:	01 d7                	add    edi,edx
c001cf82:	89 f8                	mov    eax,edi
c001cf84:	e9 44 fe ff ff       	jmp    c001cdcd <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001cf89 <cleanerTaskFunction(void*)>:
c001cf89:	53                   	push   ebx
c001cf8a:	83 ec 08             	sub    esp,0x8
c001cf8d:	e8 96 f6 ff ff       	call   c001c628 <unlockScheduler()>
c001cf92:	e8 8f f6 ff ff       	call   c001c626 <lockScheduler()>
c001cf97:	80 3d 4c b9 02 c0 00 	cmp    BYTE PTR ds:0xc002b94c,0x0
c001cf9e:	0f 85 8e 00 00 00    	jne    c001d032 <cleanerTaskFunction(void*)+0xa9>
c001cfa4:	83 ec 0c             	sub    esp,0xc
c001cfa7:	6a 02                	push   0x2
c001cfa9:	e8 c4 fa ff ff       	call   c001ca72 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001cfae:	83 c4 10             	add    esp,0x10
c001cfb1:	c6 05 4c b9 02 c0 00 	mov    BYTE PTR ds:0xc002b94c,0x0
c001cfb8:	e8 90 f6 ff ff       	call   c001c64d <lockStuff()>
c001cfbd:	e8 64 f6 ff ff       	call   c001c626 <lockScheduler()>
c001cfc2:	83 ec 0c             	sub    esp,0xc
c001cfc5:	68 70 b9 02 c0       	push   0xc002b970
c001cfca:	e8 29 84 00 00       	call   c00253f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cfcf:	83 c4 10             	add    esp,0x10
c001cfd2:	84 c0                	test   al,al
c001cfd4:	75 40                	jne    c001d016 <cleanerTaskFunction(void*)+0x8d>
c001cfd6:	83 ec 0c             	sub    esp,0xc
c001cfd9:	68 70 b9 02 c0       	push   0xc002b970
c001cfde:	e8 0d 84 00 00       	call   c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cfe3:	c7 04 24 70 b9 02 c0 	mov    DWORD PTR [esp],0xc002b970
c001cfea:	89 c3                	mov    ebx,eax
c001cfec:	e8 23 84 00 00       	call   c0025414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cff1:	c7 04 24 95 86 02 c0 	mov    DWORD PTR [esp],0xc0028695
c001cff8:	e8 54 52 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001cffd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d000:	e8 e0 fc ff ff       	call   c001cce5 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d005:	c7 04 24 ae 86 02 c0 	mov    DWORD PTR [esp],0xc00286ae
c001d00c:	e8 40 52 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001d011:	83 c4 10             	add    esp,0x10
c001d014:	eb ac                	jmp    c001cfc2 <cleanerTaskFunction(void*)+0x39>
c001d016:	e8 0d f6 ff ff       	call   c001c628 <unlockScheduler()>
c001d01b:	e8 bf f9 ff ff       	call   c001c9df <unlockStuff()>
c001d020:	e8 01 f6 ff ff       	call   c001c626 <lockScheduler()>
c001d025:	80 3d 4c b9 02 c0 00 	cmp    BYTE PTR ds:0xc002b94c,0x0
c001d02c:	0f 84 72 ff ff ff    	je     c001cfa4 <cleanerTaskFunction(void*)+0x1b>
c001d032:	e8 f1 f5 ff ff       	call   c001c628 <unlockScheduler()>
c001d037:	e9 75 ff ff ff       	jmp    c001cfb1 <cleanerTaskFunction(void*)+0x28>

c001d03c <terminateTask(int)>:
c001d03c:	83 ec 14             	sub    esp,0x14
c001d03f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d044:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d047:	83 c0 0c             	add    eax,0xc
c001d04a:	50                   	push   eax
c001d04b:	68 ec 89 02 c0       	push   0xc00289ec
c001d050:	e8 fc 51 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001d055:	e8 f3 f5 ff ff       	call   c001c64d <lockStuff()>
c001d05a:	e8 c7 f5 ff ff       	call   c001c626 <lockScheduler()>
c001d05f:	c7 04 24 c1 86 02 c0 	mov    DWORD PTR [esp],0xc00286c1
c001d066:	e8 e6 51 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001d06b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d06f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d074:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d077:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d07c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d07f:	5a                   	pop    edx
c001d080:	59                   	pop    ecx
c001d081:	50                   	push   eax
c001d082:	68 70 b9 02 c0       	push   0xc002b970
c001d087:	e8 36 84 00 00       	call   c00254c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d08c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d091:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d098:	c7 04 24 db 86 02 c0 	mov    DWORD PTR [esp],0xc00286db
c001d09f:	e8 ad 51 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001d0a4:	83 c4 10             	add    esp,0x10
c001d0a7:	a1 48 b9 02 c0       	mov    eax,ds:0xc002b948
c001d0ac:	85 c0                	test   eax,eax
c001d0ae:	74 5a                	je     c001d10a <terminateTask(int)+0xce>
c001d0b0:	83 ec 0c             	sub    esp,0xc
c001d0b3:	68 f5 86 02 c0       	push   0xc00286f5
c001d0b8:	e8 94 51 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001d0bd:	58                   	pop    eax
c001d0be:	c6 05 4c b9 02 c0 01 	mov    BYTE PTR ds:0xc002b94c,0x1
c001d0c5:	ff 35 48 b9 02 c0    	push   DWORD PTR ds:0xc002b948
c001d0cb:	e8 66 fb ff ff       	call   c001cc36 <unblockTask(ThreadControlBlock*)>
c001d0d0:	c7 04 24 0f 87 02 c0 	mov    DWORD PTR [esp],0xc002870f
c001d0d7:	e8 75 51 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001d0dc:	83 c4 10             	add    esp,0x10
c001d0df:	e8 44 f5 ff ff       	call   c001c628 <unlockScheduler()>
c001d0e4:	e8 f6 f8 ff ff       	call   c001c9df <unlockStuff()>
c001d0e9:	83 ec 0c             	sub    esp,0xc
c001d0ec:	68 47 87 02 c0       	push   0xc0028747
c001d0f1:	e8 5b 51 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	e8 28 f5 ff ff       	call   c001c626 <lockScheduler()>
c001d0fe:	e8 57 f8 ff ff       	call   c001c95a <schedule()>
c001d103:	e8 20 f5 ff ff       	call   c001c628 <unlockScheduler()>
c001d108:	eb ef                	jmp    c001d0f9 <terminateTask(int)+0xbd>
c001d10a:	83 ec 0c             	sub    esp,0xc
c001d10d:	68 29 87 02 c0       	push   0xc0028729
c001d112:	e8 3a 51 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001d117:	83 c4 10             	add    esp,0x10
c001d11a:	eb c3                	jmp    c001d0df <terminateTask(int)+0xa3>

c001d11c <Thr::terminateFromIRQ(int)>:
c001d11c:	83 ec 18             	sub    esp,0x18
c001d11f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d123:	e8 14 ff ff ff       	call   c001d03c <terminateTask(int)>

c001d128 <Semaphore::release()>:
c001d128:	83 ec 0c             	sub    esp,0xc
c001d12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d12f:	e8 19 f5 ff ff       	call   c001c64d <lockStuff()>
c001d134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d137:	85 d2                	test   edx,edx
c001d139:	74 1a                	je     c001d155 <Semaphore::release()+0x2d>
c001d13b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d13e:	83 ec 0c             	sub    esp,0xc
c001d141:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d144:	52                   	push   edx
c001d145:	e8 ec fa ff ff       	call   c001cc36 <unblockTask(ThreadControlBlock*)>
c001d14a:	83 c4 10             	add    esp,0x10
c001d14d:	83 c4 0c             	add    esp,0xc
c001d150:	e9 8a f8 ff ff       	jmp    c001c9df <unlockStuff()>
c001d155:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d158:	83 c4 0c             	add    esp,0xc
c001d15b:	e9 7f f8 ff ff       	jmp    c001c9df <unlockStuff()>

c001d160 <__static_initialization_and_destruction_0(int, int)>:
c001d160:	83 ec 0c             	sub    esp,0xc
c001d163:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d168:	0f 85 88 00 00 00    	jne    c001d1f6 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d16e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d176:	75 7e                	jne    c001d1f6 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d178:	83 ec 0c             	sub    esp,0xc
c001d17b:	68 88 b9 02 c0       	push   0xc002b988
c001d180:	e8 31 85 00 00       	call   c00256b6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d185:	83 c4 10             	add    esp,0x10
c001d188:	83 ec 04             	sub    esp,0x4
c001d18b:	68 ac 93 02 c0       	push   0xc00293ac
c001d190:	68 88 b9 02 c0       	push   0xc002b988
c001d195:	68 76 56 02 c0       	push   0xc0025676
c001d19a:	e8 4e 4f ff ff       	call   c00120ed <__cxa_atexit>
c001d19f:	83 c4 10             	add    esp,0x10
c001d1a2:	83 ec 0c             	sub    esp,0xc
c001d1a5:	68 7c b9 02 c0       	push   0xc002b97c
c001d1aa:	e8 07 85 00 00       	call   c00256b6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d1af:	83 c4 10             	add    esp,0x10
c001d1b2:	83 ec 04             	sub    esp,0x4
c001d1b5:	68 ac 93 02 c0       	push   0xc00293ac
c001d1ba:	68 7c b9 02 c0       	push   0xc002b97c
c001d1bf:	68 76 56 02 c0       	push   0xc0025676
c001d1c4:	e8 24 4f ff ff       	call   c00120ed <__cxa_atexit>
c001d1c9:	83 c4 10             	add    esp,0x10
c001d1cc:	83 ec 0c             	sub    esp,0xc
c001d1cf:	68 70 b9 02 c0       	push   0xc002b970
c001d1d4:	e8 dd 84 00 00       	call   c00256b6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d1d9:	83 c4 10             	add    esp,0x10
c001d1dc:	83 ec 04             	sub    esp,0x4
c001d1df:	68 ac 93 02 c0       	push   0xc00293ac
c001d1e4:	68 70 b9 02 c0       	push   0xc002b970
c001d1e9:	68 76 56 02 c0       	push   0xc0025676
c001d1ee:	e8 fa 4e ff ff       	call   c00120ed <__cxa_atexit>
c001d1f3:	83 c4 10             	add    esp,0x10
c001d1f6:	90                   	nop
c001d1f7:	83 c4 0c             	add    esp,0xc
c001d1fa:	c3                   	ret    

c001d1fb <_GLOBAL__sub_I_kernelProcess>:
c001d1fb:	83 ec 0c             	sub    esp,0xc
c001d1fe:	83 ec 08             	sub    esp,0x8
c001d201:	68 ff ff 00 00       	push   0xffff
c001d206:	6a 01                	push   0x1
c001d208:	e8 53 ff ff ff       	call   c001d160 <__static_initialization_and_destruction_0(int, int)>
c001d20d:	83 c4 10             	add    esp,0x10
c001d210:	83 c4 0c             	add    esp,0xc
c001d213:	c3                   	ret    

c001d214 <Vm::vm8086EntryPoint(void*)>:
c001d214:	83 ec 0c             	sub    esp,0xc
c001d217:	e8 0c f4 ff ff       	call   c001c628 <unlockScheduler()>
c001d21c:	fb                   	sti    
c001d21d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d222:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d226:	52                   	push   edx
c001d227:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001d22b:	52                   	push   edx
c001d22c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001d230:	52                   	push   edx
c001d231:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001d235:	50                   	push   eax
c001d236:	e8 58 30 fe ff       	call   c0000293 <goToVM86>
c001d23b:	83 c4 1c             	add    esp,0x1c
c001d23e:	c3                   	ret    

c001d23f <Vm::inbv(unsigned short)>:
c001d23f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d243:	ec                   	in     al,dx
c001d244:	c3                   	ret    

c001d245 <Vm::outbv(unsigned short, unsigned char)>:
c001d245:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d249:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d24d:	ee                   	out    dx,al
c001d24e:	c3                   	ret    

c001d24f <Vm::realToLinear(unsigned short, unsigned short)>:
c001d24f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d254:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d259:	c1 e0 04             	shl    eax,0x4
c001d25c:	01 d0                	add    eax,edx
c001d25e:	c3                   	ret    

c001d25f <Vm::getSegment(unsigned int)>:
c001d25f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d263:	c1 e8 10             	shr    eax,0x10
c001d266:	c3                   	ret    

c001d267 <Vm::getOffset(unsigned int)>:
c001d267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d26b:	c3                   	ret    

c001d26c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001d26c:	55                   	push   ebp
c001d26d:	57                   	push   edi
c001d26e:	56                   	push   esi
c001d26f:	53                   	push   ebx
c001d270:	83 ec 2c             	sub    esp,0x2c
c001d273:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001d277:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d27b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d27f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d283:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d287:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d28b:	e8 96 f3 ff ff       	call   c001c626 <lockScheduler()>
c001d290:	68 80 00 00 00       	push   0x80
c001d295:	6a 00                	push   0x0
c001d297:	68 14 d2 01 c0       	push   0xc001d214
c001d29c:	55                   	push   ebp
c001d29d:	e8 ae f4 ff ff       	call   c001c750 <Process::createThread(void (*)(void*), void*, int)>
c001d2a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d2a6:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001d2aa:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001d2ae:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001d2b2:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001d2b6:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001d2ba:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d2c1:	e8 9c 4e ff ff       	call   c0012162 <operator new(unsigned long)>
c001d2c6:	83 c4 0c             	add    esp,0xc
c001d2c9:	89 c3                	mov    ebx,eax
c001d2cb:	55                   	push   ebp
c001d2cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2d0:	50                   	push   eax
c001d2d1:	e8 aa 54 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001d2d6:	83 c4 0c             	add    esp,0xc
c001d2d9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001d2dd:	50                   	push   eax
c001d2de:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d2e2:	50                   	push   eax
c001d2e3:	53                   	push   ebx
c001d2e4:	e8 a7 57 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c001d2e9:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001d2ed:	83 c4 10             	add    esp,0x10
c001d2f0:	84 d2                	test   dl,dl
c001d2f2:	74 1c                	je     c001d310 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001d2f4:	83 ec 0c             	sub    esp,0xc
c001d2f7:	68 0b 8a 02 c0       	push   0xc0028a0b
c001d2fc:	e8 d2 c3 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001d301:	e8 22 f3 ff ff       	call   c001c628 <unlockScheduler()>
c001d306:	83 c4 10             	add    esp,0x10
c001d309:	31 d2                	xor    edx,edx
c001d30b:	e9 81 00 00 00       	jmp    c001d391 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001d310:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001d314:	51                   	push   ecx
c001d315:	51                   	push   ecx
c001d316:	6a 01                	push   0x1
c001d318:	53                   	push   ebx
c001d319:	e8 c6 54 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001d31e:	83 c4 10             	add    esp,0x10
c001d321:	85 c0                	test   eax,eax
c001d323:	74 1b                	je     c001d340 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001d325:	83 ec 0c             	sub    esp,0xc
c001d328:	68 24 8a 02 c0       	push   0xc0028a24
c001d32d:	e8 a1 c3 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001d332:	e8 f1 f2 ff ff       	call   c001c628 <unlockScheduler()>
c001d337:	83 c4 10             	add    esp,0x10
c001d33a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001d33e:	eb 51                	jmp    c001d391 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001d340:	83 ec 0c             	sub    esp,0xc
c001d343:	0f b7 ff             	movzx  edi,di
c001d346:	6a 07                	push   0x7
c001d348:	0f b7 f6             	movzx  esi,si
c001d34b:	68 00 01 00 00       	push   0x100
c001d350:	6a 00                	push   0x0
c001d352:	6a 00                	push   0x0
c001d354:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001d35a:	e8 df 48 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d35f:	83 c4 18             	add    esp,0x18
c001d362:	57                   	push   edi
c001d363:	56                   	push   esi
c001d364:	e8 e6 fe ff ff       	call   c001d24f <Vm::realToLinear(unsigned short, unsigned short)>
c001d369:	5a                   	pop    edx
c001d36a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d36c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001d370:	51                   	push   ecx
c001d371:	50                   	push   eax
c001d372:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d376:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d37a:	53                   	push   ebx
c001d37b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d37e:	83 c4 14             	add    esp,0x14
c001d381:	53                   	push   ebx
c001d382:	e8 bb 54 ff ff       	call   c0012842 <File::close()>
c001d387:	e8 9c f2 ff ff       	call   c001c628 <unlockScheduler()>
c001d38c:	83 c4 10             	add    esp,0x10
c001d38f:	b2 01                	mov    dl,0x1
c001d391:	83 c4 2c             	add    esp,0x2c
c001d394:	88 d0                	mov    al,dl
c001d396:	5b                   	pop    ebx
c001d397:	5e                   	pop    esi
c001d398:	5f                   	pop    edi
c001d399:	5d                   	pop    ebp
c001d39a:	c3                   	ret    

c001d39b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001d39b:	57                   	push   edi
c001d39c:	56                   	push   esi
c001d39d:	53                   	push   ebx
c001d39e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3aa:	83 e8 06             	sub    eax,0x6
c001d3ad:	0f b7 c0             	movzx  eax,ax
c001d3b0:	50                   	push   eax
c001d3b1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001d3b6:	50                   	push   eax
c001d3b7:	e8 93 fe ff ff       	call   c001d24f <Vm::realToLinear(unsigned short, unsigned short)>
c001d3bc:	5a                   	pop    edx
c001d3bd:	5e                   	pop    esi
c001d3be:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001d3c1:	8d 56 fa             	lea    edx,[esi-0x6]
c001d3c4:	81 e2 ff ff 00 00    	and    edx,0xffff
c001d3ca:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001d3cd:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001d3d0:	83 c2 02             	add    edx,0x2
c001d3d3:	66 89 10             	mov    WORD PTR [eax],dx
c001d3d6:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001d3d9:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001d3dd:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001d3e0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001d3e4:	89 d6                	mov    esi,edx
c001d3e6:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001d3ec:	66 81 e6 ff fd       	and    si,0xfdff
c001d3f1:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001d3f5:	74 07                	je     c001d3fe <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001d3f7:	89 d6                	mov    esi,edx
c001d3f9:	66 81 ce 00 02       	or     si,0x200
c001d3fe:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001d402:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d407:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d40b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001d413:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001d416:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001d41e:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d421:	5b                   	pop    ebx
c001d422:	5e                   	pop    esi
c001d423:	5f                   	pop    edi
c001d424:	c3                   	ret    

c001d425 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001d425:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d42a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d42f:	c1 e0 04             	shl    eax,0x4
c001d432:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001d435:	c3                   	ret    

c001d436 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001d436:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d43b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d440:	c1 e0 04             	shl    eax,0x4
c001d443:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001d447:	c3                   	ret    

c001d448 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001d448:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d44d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d452:	c1 e0 04             	shl    eax,0x4
c001d455:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001d458:	c3                   	ret    

c001d459 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001d459:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d45e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d463:	c1 e0 04             	shl    eax,0x4
c001d466:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d46a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001d46d:	c3                   	ret    

c001d46e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001d46e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d473:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d478:	c1 e0 04             	shl    eax,0x4
c001d47b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d47f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001d483:	c3                   	ret    

c001d484 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001d484:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d489:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d48e:	c1 e0 04             	shl    eax,0x4
c001d491:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d495:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001d498:	c3                   	ret    

c001d499 <Vm::faultHandler(regs*)>:
c001d499:	55                   	push   ebp
c001d49a:	57                   	push   edi
c001d49b:	56                   	push   esi
c001d49c:	53                   	push   ebx
c001d49d:	83 ec 1c             	sub    esp,0x1c
c001d4a0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d4a4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001d4a7:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001d4ab:	0f b7 f0             	movzx  esi,ax
c001d4ae:	52                   	push   edx
c001d4af:	0f b7 c0             	movzx  eax,ax
c001d4b2:	50                   	push   eax
c001d4b3:	e8 97 fd ff ff       	call   c001d24f <Vm::realToLinear(unsigned short, unsigned short)>
c001d4b8:	5a                   	pop    edx
c001d4b9:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001d4bc:	59                   	pop    ecx
c001d4bd:	89 c7                	mov    edi,eax
c001d4bf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d4c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d4cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d4cf:	0f b7 c5             	movzx  eax,bp
c001d4d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4d6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001d4da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4de:	e8 6c fd ff ff       	call   c001d24f <Vm::realToLinear(unsigned short, unsigned short)>
c001d4e3:	5a                   	pop    edx
c001d4e4:	59                   	pop    ecx
c001d4e5:	b1 06                	mov    cl,0x6
c001d4e7:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001d4ec:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001d4f1:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001d4f4:	80 fa 9d             	cmp    dl,0x9d
c001d4f7:	0f 84 1d 02 00 00    	je     c001d71a <Vm::faultHandler(regs*)+0x281>
c001d4fd:	0f 87 8e 00 00 00    	ja     c001d591 <Vm::faultHandler(regs*)+0xf8>
c001d503:	80 fa 66             	cmp    dl,0x66
c001d506:	0f 84 89 01 00 00    	je     c001d695 <Vm::faultHandler(regs*)+0x1fc>
c001d50c:	77 44                	ja     c001d552 <Vm::faultHandler(regs*)+0xb9>
c001d50e:	80 fa 36             	cmp    dl,0x36
c001d511:	0f 84 74 01 00 00    	je     c001d68b <Vm::faultHandler(regs*)+0x1f2>
c001d517:	77 1a                	ja     c001d533 <Vm::faultHandler(regs*)+0x9a>
c001d519:	80 fa 26             	cmp    dl,0x26
c001d51c:	0f 84 4b 01 00 00    	je     c001d66d <Vm::faultHandler(regs*)+0x1d4>
c001d522:	80 fa 2e             	cmp    dl,0x2e
c001d525:	0f 85 4a 05 00 00    	jne    c001da75 <Vm::faultHandler(regs*)+0x5dc>
c001d52b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d52e:	31 c9                	xor    ecx,ecx
c001d530:	47                   	inc    edi
c001d531:	eb be                	jmp    c001d4f1 <Vm::faultHandler(regs*)+0x58>
c001d533:	80 fa 64             	cmp    dl,0x64
c001d536:	0f 84 3b 01 00 00    	je     c001d677 <Vm::faultHandler(regs*)+0x1de>
c001d53c:	0f 87 3f 01 00 00    	ja     c001d681 <Vm::faultHandler(regs*)+0x1e8>
c001d542:	80 fa 3e             	cmp    dl,0x3e
c001d545:	0f 85 2a 05 00 00    	jne    c001da75 <Vm::faultHandler(regs*)+0x5dc>
c001d54b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d54e:	b1 01                	mov    cl,0x1
c001d550:	eb de                	jmp    c001d530 <Vm::faultHandler(regs*)+0x97>
c001d552:	80 fa 6d             	cmp    dl,0x6d
c001d555:	0f 84 bf 02 00 00    	je     c001d81a <Vm::faultHandler(regs*)+0x381>
c001d55b:	77 17                	ja     c001d574 <Vm::faultHandler(regs*)+0xdb>
c001d55d:	80 fa 67             	cmp    dl,0x67
c001d560:	0f 84 3c 01 00 00    	je     c001d6a2 <Vm::faultHandler(regs*)+0x209>
c001d566:	80 fa 6c             	cmp    dl,0x6c
c001d569:	0f 84 5d 02 00 00    	je     c001d7cc <Vm::faultHandler(regs*)+0x333>
c001d56f:	e9 01 05 00 00       	jmp    c001da75 <Vm::faultHandler(regs*)+0x5dc>
c001d574:	80 fa 6f             	cmp    dl,0x6f
c001d577:	0f 84 8b 03 00 00    	je     c001d908 <Vm::faultHandler(regs*)+0x46f>
c001d57d:	0f 82 0f 03 00 00    	jb     c001d892 <Vm::faultHandler(regs*)+0x3f9>
c001d583:	80 fa 9c             	cmp    dl,0x9c
c001d586:	0f 84 23 01 00 00    	je     c001d6af <Vm::faultHandler(regs*)+0x216>
c001d58c:	e9 e4 04 00 00       	jmp    c001da75 <Vm::faultHandler(regs*)+0x5dc>
c001d591:	80 fa ec             	cmp    dl,0xec
c001d594:	0f 84 7f 04 00 00    	je     c001da19 <Vm::faultHandler(regs*)+0x580>
c001d59a:	77 7b                	ja     c001d617 <Vm::faultHandler(regs*)+0x17e>
c001d59c:	80 fa e4             	cmp    dl,0xe4
c001d59f:	0f 84 fe 03 00 00    	je     c001d9a3 <Vm::faultHandler(regs*)+0x50a>
c001d5a5:	77 53                	ja     c001d5fa <Vm::faultHandler(regs*)+0x161>
c001d5a7:	80 fa cd             	cmp    dl,0xcd
c001d5aa:	0f 84 cd 01 00 00    	je     c001d77d <Vm::faultHandler(regs*)+0x2e4>
c001d5b0:	80 fa cf             	cmp    dl,0xcf
c001d5b3:	0f 85 bc 04 00 00    	jne    c001da75 <Vm::faultHandler(regs*)+0x5dc>
c001d5b9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d5bc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001d5bf:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001d5c3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001d5c6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001d5ca:	81 ca 00 02 02 00    	or     edx,0x20200
c001d5d0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d5d3:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001d5d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d5dd:	66 c1 e8 09          	shr    ax,0x9
c001d5e1:	83 e0 01             	and    eax,0x1
c001d5e4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d5e7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d5ea:	83 c0 06             	add    eax,0x6
c001d5ed:	25 ff ff 00 00       	and    eax,0xffff
c001d5f2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d5f5:	e9 77 04 00 00       	jmp    c001da71 <Vm::faultHandler(regs*)+0x5d8>
c001d5fa:	80 fa e6             	cmp    dl,0xe6
c001d5fd:	0f 84 ea 03 00 00    	je     c001d9ed <Vm::faultHandler(regs*)+0x554>
c001d603:	0f 82 b6 03 00 00    	jb     c001d9bf <Vm::faultHandler(regs*)+0x526>
c001d609:	80 fa e7             	cmp    dl,0xe7
c001d60c:	0f 84 f2 03 00 00    	je     c001da04 <Vm::faultHandler(regs*)+0x56b>
c001d612:	e9 5e 04 00 00       	jmp    c001da75 <Vm::faultHandler(regs*)+0x5dc>
c001d617:	80 fa ef             	cmp    dl,0xef
c001d61a:	0f 84 3c 04 00 00    	je     c001da5c <Vm::faultHandler(regs*)+0x5c3>
c001d620:	77 28                	ja     c001d64a <Vm::faultHandler(regs*)+0x1b1>
c001d622:	80 fa ed             	cmp    dl,0xed
c001d625:	0f 84 0a 04 00 00    	je     c001da35 <Vm::faultHandler(regs*)+0x59c>
c001d62b:	80 fa ee             	cmp    dl,0xee
c001d62e:	0f 85 41 04 00 00    	jne    c001da75 <Vm::faultHandler(regs*)+0x5dc>
c001d634:	50                   	push   eax
c001d635:	50                   	push   eax
c001d636:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d63a:	50                   	push   eax
c001d63b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d63f:	50                   	push   eax
c001d640:	e8 00 fc ff ff       	call   c001d245 <Vm::outbv(unsigned short, unsigned char)>
c001d645:	e9 0a 04 00 00       	jmp    c001da54 <Vm::faultHandler(regs*)+0x5bb>
c001d64a:	80 fa fa             	cmp    dl,0xfa
c001d64d:	0f 84 5d 01 00 00    	je     c001d7b0 <Vm::faultHandler(regs*)+0x317>
c001d653:	80 fa fb             	cmp    dl,0xfb
c001d656:	0f 84 62 01 00 00    	je     c001d7be <Vm::faultHandler(regs*)+0x325>
c001d65c:	80 fa f3             	cmp    dl,0xf3
c001d65f:	0f 85 10 04 00 00    	jne    c001da75 <Vm::faultHandler(regs*)+0x5dc>
c001d665:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d668:	e9 c3 fe ff ff       	jmp    c001d530 <Vm::faultHandler(regs*)+0x97>
c001d66d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d670:	b1 02                	mov    cl,0x2
c001d672:	e9 b9 fe ff ff       	jmp    c001d530 <Vm::faultHandler(regs*)+0x97>
c001d677:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d67a:	b1 03                	mov    cl,0x3
c001d67c:	e9 af fe ff ff       	jmp    c001d530 <Vm::faultHandler(regs*)+0x97>
c001d681:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d684:	b1 04                	mov    cl,0x4
c001d686:	e9 a5 fe ff ff       	jmp    c001d530 <Vm::faultHandler(regs*)+0x97>
c001d68b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d68e:	b1 05                	mov    cl,0x5
c001d690:	e9 9b fe ff ff       	jmp    c001d530 <Vm::faultHandler(regs*)+0x97>
c001d695:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d698:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001d69d:	e9 8e fe ff ff       	jmp    c001d530 <Vm::faultHandler(regs*)+0x97>
c001d6a2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d6a5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001d6aa:	e9 81 fe ff ff       	jmp    c001d530 <Vm::faultHandler(regs*)+0x97>
c001d6af:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d6b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d6b6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d6bb:	74 30                	je     c001d6ed <Vm::faultHandler(regs*)+0x254>
c001d6bd:	83 e9 04             	sub    ecx,0x4
c001d6c0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d6c6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d6cc:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d6cf:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d6d2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d6d8:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d6dc:	0f 84 8c 03 00 00    	je     c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001d6e2:	80 ce 02             	or     dh,0x2
c001d6e5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d6e8:	e9 81 03 00 00       	jmp    c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001d6ed:	83 e9 02             	sub    ecx,0x2
c001d6f0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d6f6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d6f9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d6fd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d703:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d707:	74 05                	je     c001d70e <Vm::faultHandler(regs*)+0x275>
c001d709:	80 ce 02             	or     dh,0x2
c001d70c:	eb 03                	jmp    c001d711 <Vm::faultHandler(regs*)+0x278>
c001d70e:	80 e6 fd             	and    dh,0xfd
c001d711:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d715:	e9 54 03 00 00       	jmp    c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001d71a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d71f:	74 2a                	je     c001d74b <Vm::faultHandler(regs*)+0x2b2>
c001d721:	8b 10                	mov    edx,DWORD PTR [eax]
c001d723:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d729:	81 ca 00 02 02 00    	or     edx,0x20200
c001d72f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d732:	8b 00                	mov    eax,DWORD PTR [eax]
c001d734:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d73a:	c1 e8 09             	shr    eax,0x9
c001d73d:	83 e0 01             	and    eax,0x1
c001d740:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d743:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d746:	83 c0 04             	add    eax,0x4
c001d749:	eb 25                	jmp    c001d770 <Vm::faultHandler(regs*)+0x2d7>
c001d74b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d74e:	81 ca 00 02 02 00    	or     edx,0x20200
c001d754:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d757:	66 8b 00             	mov    ax,WORD PTR [eax]
c001d75a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d760:	66 c1 e8 09          	shr    ax,0x9
c001d764:	83 e0 01             	and    eax,0x1
c001d767:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d76a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d76d:	83 c0 02             	add    eax,0x2
c001d770:	25 ff ff 00 00       	and    eax,0xffff
c001d775:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d778:	e9 f1 02 00 00       	jmp    c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001d77d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d781:	3c ff                	cmp    al,0xff
c001d783:	75 10                	jne    c001d795 <Vm::faultHandler(regs*)+0x2fc>
c001d785:	83 ec 0c             	sub    esp,0xc
c001d788:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001d78b:	e8 8c f9 ff ff       	call   c001d11c <Thr::terminateFromIRQ(int)>
c001d790:	e9 c2 02 00 00       	jmp    c001da57 <Vm::faultHandler(regs*)+0x5be>
c001d795:	83 ec 0c             	sub    esp,0xc
c001d798:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7a0:	57                   	push   edi
c001d7a1:	50                   	push   eax
c001d7a2:	53                   	push   ebx
c001d7a3:	e8 f3 fb ff ff       	call   c001d39b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001d7a8:	83 c4 20             	add    esp,0x20
c001d7ab:	e9 c1 02 00 00       	jmp    c001da71 <Vm::faultHandler(regs*)+0x5d8>
c001d7b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7b5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d7b9:	e9 b0 02 00 00       	jmp    c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001d7be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7c3:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001d7c7:	e9 a2 02 00 00       	jmp    c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001d7cc:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d7d1:	74 0d                	je     c001d7e0 <Vm::faultHandler(regs*)+0x347>
c001d7d3:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001d7da:	0f 87 e9 02 00 00    	ja     c001dac9 <Vm::faultHandler(regs*)+0x630>
c001d7e0:	83 ec 0c             	sub    esp,0xc
c001d7e3:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001d7e6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d7ea:	50                   	push   eax
c001d7eb:	e8 4f fa ff ff       	call   c001d23f <Vm::inbv(unsigned short)>
c001d7f0:	83 c4 0c             	add    esp,0xc
c001d7f3:	0f b6 c0             	movzx  eax,al
c001d7f6:	0f b7 c9             	movzx  ecx,cx
c001d7f9:	50                   	push   eax
c001d7fa:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001d7fe:	50                   	push   eax
c001d7ff:	51                   	push   ecx
c001d800:	e8 54 fc ff ff       	call   c001d459 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001d805:	83 c4 10             	add    esp,0x10
c001d808:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d80b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d80f:	74 03                	je     c001d814 <Vm::faultHandler(regs*)+0x37b>
c001d811:	48                   	dec    eax
c001d812:	eb 01                	jmp    c001d815 <Vm::faultHandler(regs*)+0x37c>
c001d814:	40                   	inc    eax
c001d815:	0f b7 c0             	movzx  eax,ax
c001d818:	eb 70                	jmp    c001d88a <Vm::faultHandler(regs*)+0x3f1>
c001d81a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d81d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001d820:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d825:	74 0c                	je     c001d833 <Vm::faultHandler(regs*)+0x39a>
c001d827:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d82d:	0f 87 96 02 00 00    	ja     c001dac9 <Vm::faultHandler(regs*)+0x630>
c001d833:	0f b7 c9             	movzx  ecx,cx
c001d836:	0f b7 f6             	movzx  esi,si
c001d839:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d83c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d841:	74 20                	je     c001d863 <Vm::faultHandler(regs*)+0x3ca>
c001d843:	ed                   	in     eax,dx
c001d844:	55                   	push   ebp
c001d845:	50                   	push   eax
c001d846:	51                   	push   ecx
c001d847:	56                   	push   esi
c001d848:	e8 37 fc ff ff       	call   c001d484 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001d84d:	83 c4 10             	add    esp,0x10
c001d850:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d853:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d857:	74 05                	je     c001d85e <Vm::faultHandler(regs*)+0x3c5>
c001d859:	83 e8 04             	sub    eax,0x4
c001d85c:	eb 27                	jmp    c001d885 <Vm::faultHandler(regs*)+0x3ec>
c001d85e:	83 c0 04             	add    eax,0x4
c001d861:	eb 22                	jmp    c001d885 <Vm::faultHandler(regs*)+0x3ec>
c001d863:	66 ed                	in     ax,dx
c001d865:	0f b7 c0             	movzx  eax,ax
c001d868:	57                   	push   edi
c001d869:	50                   	push   eax
c001d86a:	51                   	push   ecx
c001d86b:	56                   	push   esi
c001d86c:	e8 fd fb ff ff       	call   c001d46e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001d871:	83 c4 10             	add    esp,0x10
c001d874:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d877:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d87b:	74 05                	je     c001d882 <Vm::faultHandler(regs*)+0x3e9>
c001d87d:	83 e8 02             	sub    eax,0x2
c001d880:	eb 03                	jmp    c001d885 <Vm::faultHandler(regs*)+0x3ec>
c001d882:	83 c0 02             	add    eax,0x2
c001d885:	25 ff ff 00 00       	and    eax,0xffff
c001d88a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001d88d:	e9 dc 01 00 00       	jmp    c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001d892:	49                   	dec    ecx
c001d893:	80 f9 05             	cmp    cl,0x5
c001d896:	77 24                	ja     c001d8bc <Vm::faultHandler(regs*)+0x423>
c001d898:	0f b6 c9             	movzx  ecx,cl
c001d89b:	ff 24 8d 6c 8a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7594]
c001d8a2:	0f b7 f5             	movzx  esi,bp
c001d8a5:	eb 15                	jmp    c001d8bc <Vm::faultHandler(regs*)+0x423>
c001d8a7:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001d8ab:	eb 0f                	jmp    c001d8bc <Vm::faultHandler(regs*)+0x423>
c001d8ad:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001d8b1:	eb 09                	jmp    c001d8bc <Vm::faultHandler(regs*)+0x423>
c001d8b3:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001d8b7:	eb 03                	jmp    c001d8bc <Vm::faultHandler(regs*)+0x423>
c001d8b9:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001d8bc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d8bf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d8c4:	74 0b                	je     c001d8d1 <Vm::faultHandler(regs*)+0x438>
c001d8c6:	3d ff ff 00 00       	cmp    eax,0xffff
c001d8cb:	0f 87 f8 01 00 00    	ja     c001dac9 <Vm::faultHandler(regs*)+0x630>
c001d8d1:	0f b7 c0             	movzx  eax,ax
c001d8d4:	52                   	push   edx
c001d8d5:	52                   	push   edx
c001d8d6:	50                   	push   eax
c001d8d7:	56                   	push   esi
c001d8d8:	e8 48 fb ff ff       	call   c001d425 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001d8dd:	59                   	pop    ecx
c001d8de:	0f b6 c0             	movzx  eax,al
c001d8e1:	5e                   	pop    esi
c001d8e2:	50                   	push   eax
c001d8e3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d8e7:	50                   	push   eax
c001d8e8:	e8 58 f9 ff ff       	call   c001d245 <Vm::outbv(unsigned short, unsigned char)>
c001d8ed:	83 c4 10             	add    esp,0x10
c001d8f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d8f3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d8f7:	74 03                	je     c001d8fc <Vm::faultHandler(regs*)+0x463>
c001d8f9:	48                   	dec    eax
c001d8fa:	eb 01                	jmp    c001d8fd <Vm::faultHandler(regs*)+0x464>
c001d8fc:	40                   	inc    eax
c001d8fd:	0f b7 c0             	movzx  eax,ax
c001d900:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d903:	e9 66 01 00 00       	jmp    c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001d908:	49                   	dec    ecx
c001d909:	80 f9 05             	cmp    cl,0x5
c001d90c:	77 1f                	ja     c001d92d <Vm::faultHandler(regs*)+0x494>
c001d90e:	0f b6 c9             	movzx  ecx,cl
c001d911:	ff 24 8d 84 8a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd757c]
c001d918:	89 ee                	mov    esi,ebp
c001d91a:	eb 11                	jmp    c001d92d <Vm::faultHandler(regs*)+0x494>
c001d91c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001d91f:	eb 0c                	jmp    c001d92d <Vm::faultHandler(regs*)+0x494>
c001d921:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d924:	eb 07                	jmp    c001d92d <Vm::faultHandler(regs*)+0x494>
c001d926:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001d929:	eb 02                	jmp    c001d92d <Vm::faultHandler(regs*)+0x494>
c001d92b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001d92d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001d930:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d935:	74 0c                	je     c001d943 <Vm::faultHandler(regs*)+0x4aa>
c001d937:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d93d:	0f 87 86 01 00 00    	ja     c001dac9 <Vm::faultHandler(regs*)+0x630>
c001d943:	0f b7 d6             	movzx  edx,si
c001d946:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d949:	0f b7 c1             	movzx  eax,cx
c001d94c:	81 e7 00 04 00 00    	and    edi,0x400
c001d952:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001d955:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d95a:	74 1d                	je     c001d979 <Vm::faultHandler(regs*)+0x4e0>
c001d95c:	55                   	push   ebp
c001d95d:	55                   	push   ebp
c001d95e:	50                   	push   eax
c001d95f:	52                   	push   edx
c001d960:	e8 e3 fa ff ff       	call   c001d448 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001d965:	83 c4 10             	add    esp,0x10
c001d968:	89 f2                	mov    edx,esi
c001d96a:	ef                   	out    dx,eax
c001d96b:	85 ff                	test   edi,edi
c001d96d:	74 05                	je     c001d974 <Vm::faultHandler(regs*)+0x4db>
c001d96f:	83 e9 04             	sub    ecx,0x4
c001d972:	eb 21                	jmp    c001d995 <Vm::faultHandler(regs*)+0x4fc>
c001d974:	83 c1 04             	add    ecx,0x4
c001d977:	eb 1c                	jmp    c001d995 <Vm::faultHandler(regs*)+0x4fc>
c001d979:	55                   	push   ebp
c001d97a:	55                   	push   ebp
c001d97b:	50                   	push   eax
c001d97c:	52                   	push   edx
c001d97d:	e8 b4 fa ff ff       	call   c001d436 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001d982:	83 c4 10             	add    esp,0x10
c001d985:	89 f2                	mov    edx,esi
c001d987:	66 ef                	out    dx,ax
c001d989:	85 ff                	test   edi,edi
c001d98b:	74 05                	je     c001d992 <Vm::faultHandler(regs*)+0x4f9>
c001d98d:	83 e9 02             	sub    ecx,0x2
c001d990:	eb 03                	jmp    c001d995 <Vm::faultHandler(regs*)+0x4fc>
c001d992:	83 c1 02             	add    ecx,0x2
c001d995:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d99b:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001d99e:	e9 cb 00 00 00       	jmp    c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001d9a3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d9aa:	83 ec 0c             	sub    esp,0xc
c001d9ad:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d9b1:	50                   	push   eax
c001d9b2:	e8 88 f8 ff ff       	call   c001d23f <Vm::inbv(unsigned short)>
c001d9b7:	0f b6 c0             	movzx  eax,al
c001d9ba:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d9bd:	eb 3f                	jmp    c001d9fe <Vm::faultHandler(regs*)+0x565>
c001d9bf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d9c4:	74 07                	je     c001d9cd <Vm::faultHandler(regs*)+0x534>
c001d9c6:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d9ca:	ed                   	in     eax,dx
c001d9cb:	eb 14                	jmp    c001d9e1 <Vm::faultHandler(regs*)+0x548>
c001d9cd:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001d9d0:	66 31 c9             	xor    cx,cx
c001d9d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001d9d6:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d9da:	66 ed                	in     ax,dx
c001d9dc:	0f b7 c0             	movzx  eax,ax
c001d9df:	09 c8                	or     eax,ecx
c001d9e1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d9e4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d9e8:	e9 84 00 00 00       	jmp    c001da71 <Vm::faultHandler(regs*)+0x5d8>
c001d9ed:	52                   	push   edx
c001d9ee:	52                   	push   edx
c001d9ef:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d9f3:	50                   	push   eax
c001d9f4:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d9f8:	50                   	push   eax
c001d9f9:	e8 47 f8 ff ff       	call   c001d245 <Vm::outbv(unsigned short, unsigned char)>
c001d9fe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001da02:	eb 53                	jmp    c001da57 <Vm::faultHandler(regs*)+0x5be>
c001da04:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001da07:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001da0b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001da10:	74 03                	je     c001da15 <Vm::faultHandler(regs*)+0x57c>
c001da12:	ef                   	out    dx,eax
c001da13:	eb cf                	jmp    c001d9e4 <Vm::faultHandler(regs*)+0x54b>
c001da15:	66 ef                	out    dx,ax
c001da17:	eb cb                	jmp    c001d9e4 <Vm::faultHandler(regs*)+0x54b>
c001da19:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001da20:	83 ec 0c             	sub    esp,0xc
c001da23:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001da27:	50                   	push   eax
c001da28:	e8 12 f8 ff ff       	call   c001d23f <Vm::inbv(unsigned short)>
c001da2d:	0f b6 c0             	movzx  eax,al
c001da30:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001da33:	eb 1f                	jmp    c001da54 <Vm::faultHandler(regs*)+0x5bb>
c001da35:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001da38:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001da3d:	74 03                	je     c001da42 <Vm::faultHandler(regs*)+0x5a9>
c001da3f:	ed                   	in     eax,dx
c001da40:	eb 0d                	jmp    c001da4f <Vm::faultHandler(regs*)+0x5b6>
c001da42:	66 ed                	in     ax,dx
c001da44:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001da47:	0f b7 c0             	movzx  eax,ax
c001da4a:	66 31 d2             	xor    dx,dx
c001da4d:	09 d0                	or     eax,edx
c001da4f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001da52:	eb 1a                	jmp    c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001da54:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001da57:	83 c4 10             	add    esp,0x10
c001da5a:	eb 15                	jmp    c001da71 <Vm::faultHandler(regs*)+0x5d8>
c001da5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001da5f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001da62:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001da67:	74 03                	je     c001da6c <Vm::faultHandler(regs*)+0x5d3>
c001da69:	ef                   	out    dx,eax
c001da6a:	eb 02                	jmp    c001da6e <Vm::faultHandler(regs*)+0x5d5>
c001da6c:	66 ef                	out    dx,ax
c001da6e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001da71:	b0 01                	mov    al,0x1
c001da73:	eb 56                	jmp    c001dacb <Vm::faultHandler(regs*)+0x632>
c001da75:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001da79:	50                   	push   eax
c001da7a:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001da7e:	50                   	push   eax
c001da7f:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001da83:	50                   	push   eax
c001da84:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001da88:	50                   	push   eax
c001da89:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001da8d:	50                   	push   eax
c001da8e:	52                   	push   edx
c001da8f:	52                   	push   edx
c001da90:	68 3d 8a 02 c0       	push   0xc0028a3d
c001da95:	e8 b7 47 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001da9a:	83 c4 20             	add    esp,0x20
c001da9d:	83 ec 0c             	sub    esp,0xc
c001daa0:	6a 60                	push   0x60
c001daa2:	e8 98 f7 ff ff       	call   c001d23f <Vm::inbv(unsigned short)>
c001daa7:	83 c4 10             	add    esp,0x10
c001daaa:	3c 1c                	cmp    al,0x1c
c001daac:	74 04                	je     c001dab2 <Vm::faultHandler(regs*)+0x619>
c001daae:	3c 5a                	cmp    al,0x5a
c001dab0:	75 eb                	jne    c001da9d <Vm::faultHandler(regs*)+0x604>
c001dab2:	3c 5a                	cmp    al,0x5a
c001dab4:	74 04                	je     c001daba <Vm::faultHandler(regs*)+0x621>
c001dab6:	3c 1c                	cmp    al,0x1c
c001dab8:	75 0f                	jne    c001dac9 <Vm::faultHandler(regs*)+0x630>
c001daba:	83 ec 0c             	sub    esp,0xc
c001dabd:	6a 60                	push   0x60
c001dabf:	e8 7b f7 ff ff       	call   c001d23f <Vm::inbv(unsigned short)>
c001dac4:	83 c4 10             	add    esp,0x10
c001dac7:	eb e9                	jmp    c001dab2 <Vm::faultHandler(regs*)+0x619>
c001dac9:	31 c0                	xor    eax,eax
c001dacb:	83 c4 1c             	add    esp,0x1c
c001dace:	5b                   	pop    ebx
c001dacf:	5e                   	pop    esi
c001dad0:	5f                   	pop    edi
c001dad1:	5d                   	pop    ebp
c001dad2:	c3                   	ret    
c001dad3:	90                   	nop

c001dad4 <FAT::getName()>:
c001dad4:	b8 9c 8a 02 c0       	mov    eax,0xc0028a9c
c001dad9:	c3                   	ret    

c001dada <FAT::tell(void*, unsigned long long*)>:
c001dada:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dadf:	75 06                	jne    c001dae7 <FAT::tell(void*, unsigned long long*)+0xd>
c001dae1:	b8 04 00 00 00       	mov    eax,0x4
c001dae6:	c3                   	ret    
c001dae7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001daec:	75 06                	jne    c001daf4 <FAT::tell(void*, unsigned long long*)+0x1a>
c001daee:	b8 04 00 00 00       	mov    eax,0x4
c001daf3:	c3                   	ret    
c001daf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001daf8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001dafb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001dafe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001db02:	89 01                	mov    DWORD PTR [ecx],eax
c001db04:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001db07:	b8 00 00 00 00       	mov    eax,0x0
c001db0c:	c3                   	ret    
c001db0d:	90                   	nop

c001db0e <FAT::stat(void*, unsigned long long*)>:
c001db0e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001db13:	75 06                	jne    c001db1b <FAT::stat(void*, unsigned long long*)+0xd>
c001db15:	b8 04 00 00 00       	mov    eax,0x4
c001db1a:	c3                   	ret    
c001db1b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001db20:	75 06                	jne    c001db28 <FAT::stat(void*, unsigned long long*)+0x1a>
c001db22:	b8 04 00 00 00       	mov    eax,0x4
c001db27:	c3                   	ret    
c001db28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001db2c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001db2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001db32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001db36:	89 01                	mov    DWORD PTR [ecx],eax
c001db38:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001db3b:	b8 00 00 00 00       	mov    eax,0x0
c001db40:	c3                   	ret    
c001db41:	90                   	nop

c001db42 <FAT::~FAT()>:
c001db42:	83 ec 0c             	sub    esp,0xc
c001db45:	ba 20 8b 02 c0       	mov    edx,0xc0028b20
c001db4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db4e:	89 10                	mov    DWORD PTR [eax],edx
c001db50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db54:	83 ec 0c             	sub    esp,0xc
c001db57:	50                   	push   eax
c001db58:	e8 1d 4a ff ff       	call   c001257a <Filesystem::~Filesystem()>
c001db5d:	83 c4 10             	add    esp,0x10
c001db60:	90                   	nop
c001db61:	83 c4 0c             	add    esp,0xc
c001db64:	c3                   	ret    
c001db65:	90                   	nop

c001db66 <FAT::~FAT()>:
c001db66:	83 ec 0c             	sub    esp,0xc
c001db69:	83 ec 0c             	sub    esp,0xc
c001db6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db70:	e8 cd ff ff ff       	call   c001db42 <FAT::~FAT()>
c001db75:	83 c4 10             	add    esp,0x10
c001db78:	83 ec 08             	sub    esp,0x8
c001db7b:	6a 08                	push   0x8
c001db7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db81:	e8 eb 45 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001db86:	83 c4 10             	add    esp,0x10
c001db89:	83 c4 0c             	add    esp,0xc
c001db8c:	c3                   	ret    
c001db8d:	90                   	nop

c001db8e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001db8e:	83 ec 1c             	sub    esp,0x1c
c001db91:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001db98:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001db9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dba1:	8b 04 85 e0 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4620]
c001dba8:	83 f8 ff             	cmp    eax,0xffffffff
c001dbab:	75 34                	jne    c001dbe1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001dbad:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dbb1:	88 c2                	mov    dl,al
c001dbb3:	a1 c0 b9 02 c0       	mov    eax,ds:0xc002b9c0
c001dbb8:	01 d0                	add    eax,edx
c001dbba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dbbe:	8b 15 c0 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b9c0
c001dbc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dbc8:	89 14 85 e0 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4620],edx
c001dbcf:	a1 c0 b9 02 c0       	mov    eax,ds:0xc002b9c0
c001dbd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbd8:	89 14 85 60 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45a0],edx
c001dbdf:	eb 17                	jmp    c001dbf8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001dbe1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dbe5:	88 c2                	mov    dl,al
c001dbe7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dbeb:	8b 04 85 e0 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4620]
c001dbf2:	01 d0                	add    eax,edx
c001dbf4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dbf8:	83 ec 04             	sub    esp,0x4
c001dbfb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc03:	8d 44 24 15          	lea    eax,[esp+0x15]
c001dc07:	50                   	push   eax
c001dc08:	e8 36 8f fe ff       	call   c0006b43 <f_getlabel>
c001dc0d:	83 c4 10             	add    esp,0x10
c001dc10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dc19:	75 07                	jne    c001dc22 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001dc1b:	b8 00 00 00 00       	mov    eax,0x0
c001dc20:	eb 05                	jmp    c001dc27 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001dc22:	b8 01 00 00 00       	mov    eax,0x1
c001dc27:	83 c4 1c             	add    esp,0x1c
c001dc2a:	c3                   	ret    
c001dc2b:	90                   	nop

c001dc2c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001dc2c:	57                   	push   edi
c001dc2d:	83 ec 58             	sub    esp,0x58
c001dc30:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001dc38:	8d 54 24 10          	lea    edx,[esp+0x10]
c001dc3c:	b9 0f 00 00 00       	mov    ecx,0xf
c001dc41:	b8 00 00 00 00       	mov    eax,0x0
c001dc46:	fc                   	cld    
c001dc47:	89 d7                	mov    edi,edx
c001dc49:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dc4b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001dc4f:	8b 04 85 e0 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4620]
c001dc56:	83 f8 ff             	cmp    eax,0xffffffff
c001dc59:	75 34                	jne    c001dc8f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001dc5b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dc5f:	88 c2                	mov    dl,al
c001dc61:	a1 c0 b9 02 c0       	mov    eax,ds:0xc002b9c0
c001dc66:	01 d0                	add    eax,edx
c001dc68:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc6c:	8b 15 c0 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b9c0
c001dc72:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001dc76:	89 14 85 e0 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4620],edx
c001dc7d:	a1 c0 b9 02 c0       	mov    eax,ds:0xc002b9c0
c001dc82:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001dc86:	89 14 85 60 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45a0],edx
c001dc8d:	eb 17                	jmp    c001dca6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001dc8f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dc93:	88 c2                	mov    dl,al
c001dc95:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001dc99:	8b 04 85 e0 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4620]
c001dca0:	01 d0                	add    eax,edx
c001dca2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dca6:	83 ec 08             	sub    esp,0x8
c001dca9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001dcad:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dcb1:	50                   	push   eax
c001dcb2:	e8 85 2b fe ff       	call   c000083c <strcat>
c001dcb7:	83 c4 10             	add    esp,0x10
c001dcba:	83 ec 0c             	sub    esp,0xc
c001dcbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dcc1:	50                   	push   eax
c001dcc2:	e8 6a 90 fe ff       	call   c0006d31 <f_setlabel>
c001dcc7:	83 c4 10             	add    esp,0x10
c001dcca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dcce:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001dcd3:	75 07                	jne    c001dcdc <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001dcd5:	b8 00 00 00 00       	mov    eax,0x0
c001dcda:	eb 05                	jmp    c001dce1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001dcdc:	b8 01 00 00 00       	mov    eax,0x1
c001dce1:	83 c4 58             	add    esp,0x58
c001dce4:	5f                   	pop    edi
c001dce5:	c3                   	ret    

c001dce6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001dce6:	83 ec 2c             	sub    esp,0x2c
c001dce9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001dcf1:	83 ec 08             	sub    esp,0x8
c001dcf4:	68 c0 8a 02 c0       	push   0xc0028ac0
c001dcf9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dcfd:	e8 d4 2a fe ff       	call   c00007d6 <strcmp>
c001dd02:	83 c4 10             	add    esp,0x10
c001dd05:	85 c0                	test   eax,eax
c001dd07:	0f 94 c0             	sete   al
c001dd0a:	84 c0                	test   al,al
c001dd0c:	74 0d                	je     c001dd1b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001dd0e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001dd16:	e9 a6 00 00 00       	jmp    c001ddc1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dd1b:	83 ec 08             	sub    esp,0x8
c001dd1e:	68 b2 8a 02 c0       	push   0xc0028ab2
c001dd23:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd27:	e8 aa 2a fe ff       	call   c00007d6 <strcmp>
c001dd2c:	83 c4 10             	add    esp,0x10
c001dd2f:	85 c0                	test   eax,eax
c001dd31:	0f 94 c0             	sete   al
c001dd34:	84 c0                	test   al,al
c001dd36:	74 0a                	je     c001dd42 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001dd38:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001dd40:	eb 7f                	jmp    c001ddc1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dd42:	83 ec 08             	sub    esp,0x8
c001dd45:	68 b8 8a 02 c0       	push   0xc0028ab8
c001dd4a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd4e:	e8 83 2a fe ff       	call   c00007d6 <strcmp>
c001dd53:	83 c4 10             	add    esp,0x10
c001dd56:	85 c0                	test   eax,eax
c001dd58:	0f 94 c0             	sete   al
c001dd5b:	84 c0                	test   al,al
c001dd5d:	74 0a                	je     c001dd69 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001dd5f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001dd67:	eb 58                	jmp    c001ddc1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dd69:	83 ec 08             	sub    esp,0x8
c001dd6c:	68 8c 5d 02 c0       	push   0xc0025d8c
c001dd71:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd75:	e8 5c 2a fe ff       	call   c00007d6 <strcmp>
c001dd7a:	83 c4 10             	add    esp,0x10
c001dd7d:	85 c0                	test   eax,eax
c001dd7f:	0f 94 c0             	sete   al
c001dd82:	84 c0                	test   al,al
c001dd84:	74 0a                	je     c001dd90 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001dd86:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001dd8e:	eb 31                	jmp    c001ddc1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dd90:	83 ec 08             	sub    esp,0x8
c001dd93:	68 be 8a 02 c0       	push   0xc0028abe
c001dd98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd9c:	e8 35 2a fe ff       	call   c00007d6 <strcmp>
c001dda1:	83 c4 10             	add    esp,0x10
c001dda4:	85 c0                	test   eax,eax
c001dda6:	0f 94 c0             	sete   al
c001dda9:	84 c0                	test   al,al
c001ddab:	74 0a                	je     c001ddb7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001ddad:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ddb5:	eb 0a                	jmp    c001ddc1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ddb7:	b8 08 00 00 00       	mov    eax,0x8
c001ddbc:	e9 04 01 00 00       	jmp    c001dec5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ddc1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ddc8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ddcd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ddd1:	8b 04 85 e0 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4620]
c001ddd8:	83 f8 ff             	cmp    eax,0xffffffff
c001dddb:	75 34                	jne    c001de11 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001dddd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dde1:	88 c2                	mov    dl,al
c001dde3:	a1 c0 b9 02 c0       	mov    eax,ds:0xc002b9c0
c001dde8:	01 d0                	add    eax,edx
c001ddea:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ddee:	8b 15 c0 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b9c0
c001ddf4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ddf8:	89 14 85 e0 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4620],edx
c001ddff:	a1 c0 b9 02 c0       	mov    eax,ds:0xc002b9c0
c001de04:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001de08:	89 14 85 60 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45a0],edx
c001de0f:	eb 17                	jmp    c001de28 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001de11:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001de15:	88 c2                	mov    dl,al
c001de17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001de1b:	8b 04 85 e0 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4620]
c001de22:	01 d0                	add    eax,edx
c001de24:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001de28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001de2c:	88 04 24             	mov    BYTE PTR [esp],al
c001de2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001de33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001de3f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001de44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001de4c:	83 ec 0c             	sub    esp,0xc
c001de4f:	68 00 20 00 00       	push   0x2000
c001de54:	e8 07 13 ff ff       	call   c000f160 <malloc>
c001de59:	83 c4 10             	add    esp,0x10
c001de5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de60:	68 00 20 00 00       	push   0x2000
c001de65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de69:	8d 44 24 08          	lea    eax,[esp+0x8]
c001de6d:	50                   	push   eax
c001de6e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001de72:	50                   	push   eax
c001de73:	e8 04 93 fe ff       	call   c000717c <f_mkfs>
c001de78:	83 c4 10             	add    esp,0x10
c001de7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001de84:	75 07                	jne    c001de8d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001de86:	b8 00 00 00 00       	mov    eax,0x0
c001de8b:	eb 38                	jmp    c001dec5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001de8d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001de92:	75 17                	jne    c001deab <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001de94:	83 ec 0c             	sub    esp,0xc
c001de97:	68 f0 8a 02 c0       	push   0xc0028af0
c001de9c:	e8 b0 43 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001dea1:	83 c4 10             	add    esp,0x10
c001dea4:	b8 09 00 00 00       	mov    eax,0x9
c001dea9:	eb 1a                	jmp    c001dec5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001deab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001deaf:	83 ec 08             	sub    esp,0x8
c001deb2:	50                   	push   eax
c001deb3:	68 c4 8a 02 c0       	push   0xc0028ac4
c001deb8:	e8 94 43 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001debd:	83 c4 10             	add    esp,0x10
c001dec0:	b8 01 00 00 00       	mov    eax,0x1
c001dec5:	83 c4 2c             	add    esp,0x2c
c001dec8:	c3                   	ret    
c001dec9:	90                   	nop

c001deca <FAT::tryMount(LogicalDisk*, int)>:
c001deca:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001ded0:	a1 c0 b9 02 c0       	mov    eax,ds:0xc002b9c0
c001ded5:	83 f8 14             	cmp    eax,0x14
c001ded8:	75 17                	jne    c001def1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001deda:	83 ec 0c             	sub    esp,0xc
c001dedd:	68 d6 8a 02 c0       	push   0xc0028ad6
c001dee2:	e8 ec b7 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001dee7:	83 c4 10             	add    esp,0x10
c001deea:	b0 00                	mov    al,0x0
c001deec:	e9 d7 01 00 00       	jmp    c001e0c8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001def1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001def8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001defe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001df04:	3d 00 02 00 00       	cmp    eax,0x200
c001df09:	74 07                	je     c001df12 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001df0b:	b0 00                	mov    al,0x0
c001df0d:	e9 b6 01 00 00       	jmp    c001e0c8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001df12:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001df1a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001df21:	8b 04 85 e0 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4620]
c001df28:	83 f8 ff             	cmp    eax,0xffffffff
c001df2b:	74 07                	je     c001df34 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001df2d:	b0 01                	mov    al,0x1
c001df2f:	e9 94 01 00 00       	jmp    c001e0c8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001df34:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001df3e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001df46:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001df4d:	88 c2                	mov    dl,al
c001df4f:	a1 c0 b9 02 c0       	mov    eax,ds:0xc002b9c0
c001df54:	01 d0                	add    eax,edx
c001df56:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001df5d:	8b 15 c0 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b9c0
c001df63:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001df6a:	89 14 85 e0 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4620],edx
c001df71:	a1 c0 b9 02 c0       	mov    eax,ds:0xc002b9c0
c001df76:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001df7d:	89 14 85 60 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45a0],edx
c001df84:	83 ec 0c             	sub    esp,0xc
c001df87:	68 54 02 00 00       	push   0x254
c001df8c:	e8 cf 11 ff ff       	call   c000f160 <malloc>
c001df91:	83 c4 10             	add    esp,0x10
c001df94:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001df9b:	83 ec 04             	sub    esp,0x4
c001df9e:	6a 00                	push   0x0
c001dfa0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001dfa7:	50                   	push   eax
c001dfa8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001dfaf:	e8 86 6d fe ff       	call   c0004d3a <f_mount>
c001dfb4:	83 c4 10             	add    esp,0x10
c001dfb7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001dfbe:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001dfc6:	74 19                	je     c001dfe1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001dfc8:	83 ec 0c             	sub    esp,0xc
c001dfcb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001dfd2:	e8 a9 11 ff ff       	call   c000f180 <rfree>
c001dfd7:	83 c4 10             	add    esp,0x10
c001dfda:	b0 00                	mov    al,0x0
c001dfdc:	e9 e7 00 00 00       	jmp    c001e0c8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001dfe1:	83 ec 04             	sub    esp,0x4
c001dfe4:	68 00 01 00 00       	push   0x100
c001dfe9:	6a 00                	push   0x0
c001dfeb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001dff2:	50                   	push   eax
c001dff3:	e8 ee 26 fe ff       	call   c00006e6 <memset>
c001dff8:	83 c4 10             	add    esp,0x10
c001dffb:	83 ec 08             	sub    esp,0x8
c001dffe:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e005:	50                   	push   eax
c001e006:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e00d:	50                   	push   eax
c001e00e:	e8 29 28 fe ff       	call   c000083c <strcat>
c001e013:	83 c4 10             	add    esp,0x10
c001e016:	83 ec 08             	sub    esp,0x8
c001e019:	68 e4 8a 02 c0       	push   0xc0028ae4
c001e01e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e025:	50                   	push   eax
c001e026:	e8 11 28 fe ff       	call   c000083c <strcat>
c001e02b:	83 c4 10             	add    esp,0x10
c001e02e:	83 ec 04             	sub    esp,0x4
c001e031:	6a 01                	push   0x1
c001e033:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e03a:	50                   	push   eax
c001e03b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e03f:	50                   	push   eax
c001e040:	e8 57 6d fe ff       	call   c0004d9c <f_open>
c001e045:	83 c4 10             	add    esp,0x10
c001e048:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e04f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e056:	85 c0                	test   eax,eax
c001e058:	74 0a                	je     c001e064 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e05a:	78 2d                	js     c001e089 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e05c:	83 e8 04             	sub    eax,0x4
c001e05f:	83 f8 01             	cmp    eax,0x1
c001e062:	77 25                	ja     c001e089 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e064:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e06c:	83 ec 0c             	sub    esp,0xc
c001e06f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e073:	50                   	push   eax
c001e074:	e8 75 78 fe ff       	call   c00058ee <f_close>
c001e079:	83 c4 10             	add    esp,0x10
c001e07c:	90                   	nop
c001e07d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e085:	74 3a                	je     c001e0c1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e087:	eb 2d                	jmp    c001e0b6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e089:	83 ec 0c             	sub    esp,0xc
c001e08c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e093:	e8 e8 10 ff ff       	call   c000f180 <rfree>
c001e098:	83 c4 10             	add    esp,0x10
c001e09b:	83 ec 04             	sub    esp,0x4
c001e09e:	6a 00                	push   0x0
c001e0a0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e0a7:	50                   	push   eax
c001e0a8:	6a 00                	push   0x0
c001e0aa:	e8 8b 6c fe ff       	call   c0004d3a <f_mount>
c001e0af:	83 c4 10             	add    esp,0x10
c001e0b2:	b0 00                	mov    al,0x0
c001e0b4:	eb 12                	jmp    c001e0c8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e0b6:	a1 c0 b9 02 c0       	mov    eax,ds:0xc002b9c0
c001e0bb:	40                   	inc    eax
c001e0bc:	a3 c0 b9 02 c0       	mov    ds:0xc002b9c0,eax
c001e0c1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e0c8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e0ce:	c3                   	ret    
c001e0cf:	90                   	nop

c001e0d0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e0d0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e0d6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e0de:	74 0a                	je     c001e0ea <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e0e0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e0e8:	75 0a                	jne    c001e0f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e0ea:	b8 04 00 00 00       	mov    eax,0x4
c001e0ef:	e9 db 00 00 00       	jmp    c001e1cf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e0f4:	83 ec 08             	sub    esp,0x8
c001e0f7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e0fe:	50                   	push   eax
c001e0ff:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e106:	e8 ed 7d fe ff       	call   c0005ef8 <f_readdir>
c001e10b:	83 c4 10             	add    esp,0x10
c001e10e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e115:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e11b:	83 ec 0c             	sub    esp,0xc
c001e11e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e125:	83 c0 1a             	add    eax,0x1a
c001e128:	50                   	push   eax
c001e129:	e8 d5 25 fe ff       	call   c0000703 <strlen>
c001e12e:	83 c4 10             	add    esp,0x10
c001e131:	ba 00 00 00 00       	mov    edx,0x0
c001e136:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e13a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e13e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e145:	0f b6 c0             	movzx  eax,al
c001e148:	83 e0 10             	and    eax,0x10
c001e14b:	74 07                	je     c001e154 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e14d:	b8 02 00 00 00       	mov    eax,0x2
c001e152:	eb 05                	jmp    c001e159 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e154:	b8 01 00 00 00       	mov    eax,0x1
c001e159:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e15d:	83 ec 08             	sub    esp,0x8
c001e160:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e167:	83 c0 1a             	add    eax,0x1a
c001e16a:	50                   	push   eax
c001e16b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e16f:	83 c0 10             	add    eax,0x10
c001e172:	50                   	push   eax
c001e173:	e8 0d 26 fe ff       	call   c0000785 <strcpy>
c001e178:	83 c4 10             	add    esp,0x10
c001e17b:	83 ec 04             	sub    esp,0x4
c001e17e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e185:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e189:	50                   	push   eax
c001e18a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e191:	e8 1a 25 fe ff       	call   c00006b0 <memcpy>
c001e196:	83 c4 10             	add    esp,0x10
c001e199:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e1a0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e1a6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e1ad:	84 c0                	test   al,al
c001e1af:	75 07                	jne    c001e1b8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e1b1:	b8 07 00 00 00       	mov    eax,0x7
c001e1b6:	eb 17                	jmp    c001e1cf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e1b8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e1bf:	85 c0                	test   eax,eax
c001e1c1:	75 07                	jne    c001e1ca <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e1c3:	b8 00 00 00 00       	mov    eax,0x0
c001e1c8:	eb 05                	jmp    c001e1cf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e1ca:	b8 01 00 00 00       	mov    eax,0x1
c001e1cf:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e1d5:	c3                   	ret    

c001e1d6 <FAT::read(void*, unsigned long, void*, int*)>:
c001e1d6:	83 ec 1c             	sub    esp,0x1c
c001e1d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e1de:	74 07                	je     c001e1e7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e1e0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e1e5:	75 07                	jne    c001e1ee <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e1e7:	b8 04 00 00 00       	mov    eax,0x4
c001e1ec:	eb 3d                	jmp    c001e22b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e1ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e1f2:	50                   	push   eax
c001e1f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e1fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e1ff:	e8 d4 6f fe ff       	call   c00051d8 <f_read>
c001e204:	83 c4 10             	add    esp,0x10
c001e207:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e20b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e20f:	89 c2                	mov    edx,eax
c001e211:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e215:	89 10                	mov    DWORD PTR [eax],edx
c001e217:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e21b:	85 c0                	test   eax,eax
c001e21d:	75 07                	jne    c001e226 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e21f:	b8 00 00 00 00       	mov    eax,0x0
c001e224:	eb 05                	jmp    c001e22b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e226:	b8 01 00 00 00       	mov    eax,0x1
c001e22b:	83 c4 1c             	add    esp,0x1c
c001e22e:	c3                   	ret    
c001e22f:	90                   	nop

c001e230 <FAT::write(void*, unsigned long, void*, int*)>:
c001e230:	83 ec 1c             	sub    esp,0x1c
c001e233:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e238:	74 07                	je     c001e241 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e23a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e23f:	75 07                	jne    c001e248 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e241:	b8 04 00 00 00       	mov    eax,0x4
c001e246:	eb 3d                	jmp    c001e285 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e248:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e24c:	50                   	push   eax
c001e24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e251:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e255:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e259:	e8 fa 71 fe ff       	call   c0005458 <f_write>
c001e25e:	83 c4 10             	add    esp,0x10
c001e261:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e269:	89 c2                	mov    edx,eax
c001e26b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e26f:	89 10                	mov    DWORD PTR [eax],edx
c001e271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e275:	85 c0                	test   eax,eax
c001e277:	75 07                	jne    c001e280 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e279:	b8 00 00 00 00       	mov    eax,0x0
c001e27e:	eb 05                	jmp    c001e285 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e280:	b8 01 00 00 00       	mov    eax,0x1
c001e285:	83 c4 1c             	add    esp,0x1c
c001e288:	c3                   	ret    
c001e289:	90                   	nop

c001e28a <FAT::close(void*)>:
c001e28a:	83 ec 1c             	sub    esp,0x1c
c001e28d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e292:	75 07                	jne    c001e29b <FAT::close(void*)+0x11>
c001e294:	b8 04 00 00 00       	mov    eax,0x4
c001e299:	eb 36                	jmp    c001e2d1 <FAT::close(void*)+0x47>
c001e29b:	83 ec 0c             	sub    esp,0xc
c001e29e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e2a2:	e8 47 76 fe ff       	call   c00058ee <f_close>
c001e2a7:	83 c4 10             	add    esp,0x10
c001e2aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e2b5:	e8 b6 0e ff ff       	call   c000f170 <free>
c001e2ba:	83 c4 10             	add    esp,0x10
c001e2bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2c1:	85 c0                	test   eax,eax
c001e2c3:	75 07                	jne    c001e2cc <FAT::close(void*)+0x42>
c001e2c5:	b8 00 00 00 00       	mov    eax,0x0
c001e2ca:	eb 05                	jmp    c001e2d1 <FAT::close(void*)+0x47>
c001e2cc:	b8 01 00 00 00       	mov    eax,0x1
c001e2d1:	83 c4 1c             	add    esp,0x1c
c001e2d4:	c3                   	ret    
c001e2d5:	90                   	nop

c001e2d6 <FAT::closeDir(void*)>:
c001e2d6:	83 ec 1c             	sub    esp,0x1c
c001e2d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e2de:	75 07                	jne    c001e2e7 <FAT::closeDir(void*)+0x11>
c001e2e0:	b8 04 00 00 00       	mov    eax,0x4
c001e2e5:	eb 36                	jmp    c001e31d <FAT::closeDir(void*)+0x47>
c001e2e7:	83 ec 0c             	sub    esp,0xc
c001e2ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e2ee:	e8 e3 7b fe ff       	call   c0005ed6 <f_closedir>
c001e2f3:	83 c4 10             	add    esp,0x10
c001e2f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e2fa:	83 ec 0c             	sub    esp,0xc
c001e2fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e301:	e8 6a 0e ff ff       	call   c000f170 <free>
c001e306:	83 c4 10             	add    esp,0x10
c001e309:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e30d:	85 c0                	test   eax,eax
c001e30f:	75 07                	jne    c001e318 <FAT::closeDir(void*)+0x42>
c001e311:	b8 00 00 00 00       	mov    eax,0x0
c001e316:	eb 05                	jmp    c001e31d <FAT::closeDir(void*)+0x47>
c001e318:	b8 01 00 00 00       	mov    eax,0x1
c001e31d:	83 c4 1c             	add    esp,0x1c
c001e320:	c3                   	ret    
c001e321:	90                   	nop

c001e322 <FAT::seek(void*, unsigned long long)>:
c001e322:	83 ec 2c             	sub    esp,0x2c
c001e325:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e329:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e32d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e331:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e335:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e33a:	75 07                	jne    c001e343 <FAT::seek(void*, unsigned long long)+0x21>
c001e33c:	b8 04 00 00 00       	mov    eax,0x4
c001e341:	eb 2f                	jmp    c001e372 <FAT::seek(void*, unsigned long long)+0x50>
c001e343:	83 ec 04             	sub    esp,0x4
c001e346:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e34a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e34e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e352:	e8 c6 75 fe ff       	call   c000591d <f_lseek>
c001e357:	83 c4 10             	add    esp,0x10
c001e35a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e35e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e362:	85 c0                	test   eax,eax
c001e364:	75 07                	jne    c001e36d <FAT::seek(void*, unsigned long long)+0x4b>
c001e366:	b8 00 00 00 00       	mov    eax,0x0
c001e36b:	eb 05                	jmp    c001e372 <FAT::seek(void*, unsigned long long)+0x50>
c001e36d:	b8 01 00 00 00       	mov    eax,0x1
c001e372:	83 c4 2c             	add    esp,0x2c
c001e375:	c3                   	ret    

c001e376 <fatWrapperReadDisk>:
c001e376:	83 ec 1c             	sub    esp,0x1c
c001e379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e37d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e381:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e385:	89 04 24             	mov    DWORD PTR [esp],eax
c001e388:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e38c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e390:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e395:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c001e39c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e3a0:	83 ec 0c             	sub    esp,0xc
c001e3a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e3a7:	52                   	push   edx
c001e3a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e3ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e3b0:	50                   	push   eax
c001e3b1:	e8 9c 74 ff ff       	call   c0015852 <LogicalDisk::read(unsigned long long, int, void*)>
c001e3b6:	83 c4 20             	add    esp,0x20
c001e3b9:	83 c4 1c             	add    esp,0x1c
c001e3bc:	c3                   	ret    

c001e3bd <fatWrapperWriteDisk>:
c001e3bd:	83 ec 1c             	sub    esp,0x1c
c001e3c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e3c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e3cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3d7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e3dc:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c001e3e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e3e7:	83 ec 0c             	sub    esp,0xc
c001e3ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e3ee:	52                   	push   edx
c001e3ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e3f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e3f7:	50                   	push   eax
c001e3f8:	e8 c1 74 ff ff       	call   c00158be <LogicalDisk::write(unsigned long long, int, void*)>
c001e3fd:	83 c4 20             	add    esp,0x20
c001e400:	83 c4 1c             	add    esp,0x1c
c001e403:	c3                   	ret    

c001e404 <fatWrapperIoctl>:
c001e404:	53                   	push   ebx
c001e405:	83 ec 28             	sub    esp,0x28
c001e408:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e40c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e410:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e414:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e418:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e41d:	75 31                	jne    c001e450 <fatWrapperIoctl+0x4c>
c001e41f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e423:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e427:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e42c:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c001e433:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e439:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e43f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e443:	66 89 02             	mov    WORD PTR [edx],ax
c001e446:	b8 00 00 00 00       	mov    eax,0x0
c001e44b:	e9 b2 00 00 00       	jmp    c001e502 <fatWrapperIoctl+0xfe>
c001e450:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e455:	75 6a                	jne    c001e4c1 <fatWrapperIoctl+0xbd>
c001e457:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e45b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e45f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e464:	8b 04 85 e0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5520]
c001e46b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e471:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e477:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e47d:	89 c8                	mov    eax,ecx
c001e47f:	89 da                	mov    edx,ebx
c001e481:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e485:	c1 e0 0a             	shl    eax,0xa
c001e488:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e48d:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c001e494:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e49a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e4a0:	89 cb                	mov    ebx,ecx
c001e4a2:	c1 fb 1f             	sar    ebx,0x1f
c001e4a5:	53                   	push   ebx
c001e4a6:	51                   	push   ecx
c001e4a7:	52                   	push   edx
c001e4a8:	50                   	push   eax
c001e4a9:	e8 22 4e 00 00       	call   c00232d0 <__udivdi3>
c001e4ae:	83 c4 10             	add    esp,0x10
c001e4b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e4b5:	89 01                	mov    DWORD PTR [ecx],eax
c001e4b7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e4ba:	b8 00 00 00 00       	mov    eax,0x0
c001e4bf:	eb 41                	jmp    c001e502 <fatWrapperIoctl+0xfe>
c001e4c1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e4c6:	75 07                	jne    c001e4cf <fatWrapperIoctl+0xcb>
c001e4c8:	b8 00 00 00 00       	mov    eax,0x0
c001e4cd:	eb 33                	jmp    c001e502 <fatWrapperIoctl+0xfe>
c001e4cf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e4d4:	75 19                	jne    c001e4ef <fatWrapperIoctl+0xeb>
c001e4d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e4da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4e2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e4e8:	b8 00 00 00 00       	mov    eax,0x0
c001e4ed:	eb 13                	jmp    c001e502 <fatWrapperIoctl+0xfe>
c001e4ef:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e4f4:	75 07                	jne    c001e4fd <fatWrapperIoctl+0xf9>
c001e4f6:	b8 00 00 00 00       	mov    eax,0x0
c001e4fb:	eb 05                	jmp    c001e502 <fatWrapperIoctl+0xfe>
c001e4fd:	b8 04 00 00 00       	mov    eax,0x4
c001e502:	83 c4 28             	add    esp,0x28
c001e505:	5b                   	pop    ebx
c001e506:	c3                   	ret    
c001e507:	90                   	nop

c001e508 <FAT::FAT()>:
c001e508:	83 ec 1c             	sub    esp,0x1c
c001e50b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e50f:	83 ec 0c             	sub    esp,0xc
c001e512:	50                   	push   eax
c001e513:	e8 3e 40 ff ff       	call   c0012556 <Filesystem::Filesystem()>
c001e518:	83 c4 10             	add    esp,0x10
c001e51b:	ba 20 8b 02 c0       	mov    edx,0xc0028b20
c001e520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e524:	89 10                	mov    DWORD PTR [eax],edx
c001e526:	c7 05 c0 b9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b9c0,0x0
c001e530:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e538:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e53d:	7f 15                	jg     c001e554 <FAT::FAT()+0x4c>
c001e53f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e543:	c7 04 85 e0 b9 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd4620],0xffffffff
c001e54e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e552:	eb e4                	jmp    c001e538 <FAT::FAT()+0x30>
c001e554:	90                   	nop
c001e555:	83 c4 1c             	add    esp,0x1c
c001e558:	c3                   	ret    
c001e559:	90                   	nop

c001e55a <FAT::fixFilepath(char*)>:
c001e55a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e55e:	8a 00                	mov    al,BYTE PTR [eax]
c001e560:	3c 40                	cmp    al,0x40
c001e562:	7e 2c                	jle    c001e590 <FAT::fixFilepath(char*)+0x36>
c001e564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e568:	8a 00                	mov    al,BYTE PTR [eax]
c001e56a:	83 e8 41             	sub    eax,0x41
c001e56d:	88 c2                	mov    dl,al
c001e56f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e573:	88 10                	mov    BYTE PTR [eax],dl
c001e575:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e579:	8a 00                	mov    al,BYTE PTR [eax]
c001e57b:	0f be c0             	movsx  eax,al
c001e57e:	8b 04 85 e0 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4620]
c001e585:	83 c0 30             	add    eax,0x30
c001e588:	88 c2                	mov    dl,al
c001e58a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e58e:	88 10                	mov    BYTE PTR [eax],dl
c001e590:	90                   	nop
c001e591:	c3                   	ret    

c001e592 <FAT::open(char const*, void**, FileOpenMode)>:
c001e592:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e598:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e5a0:	74 0a                	je     c001e5ac <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e5a2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e5aa:	75 0a                	jne    c001e5b6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e5ac:	b8 04 00 00 00       	mov    eax,0x4
c001e5b1:	e9 fd 00 00 00       	jmp    c001e6b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e5b6:	83 ec 08             	sub    esp,0x8
c001e5b9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e5c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e5c4:	50                   	push   eax
c001e5c5:	e8 bb 21 fe ff       	call   c0000785 <strcpy>
c001e5ca:	83 c4 10             	add    esp,0x10
c001e5cd:	83 ec 08             	sub    esp,0x8
c001e5d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e5d4:	50                   	push   eax
c001e5d5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e5dc:	e8 79 ff ff ff       	call   c001e55a <FAT::fixFilepath(char*)>
c001e5e1:	83 c4 10             	add    esp,0x10
c001e5e4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e5ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e5f3:	83 e0 01             	and    eax,0x1
c001e5f6:	74 08                	je     c001e600 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e5f8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e600:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e607:	83 e0 04             	and    eax,0x4
c001e60a:	74 10                	je     c001e61c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e60c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e614:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e61c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e623:	83 e0 02             	and    eax,0x2
c001e626:	74 08                	je     c001e630 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e628:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e630:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e637:	83 e0 08             	and    eax,0x8
c001e63a:	74 08                	je     c001e644 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e63c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e644:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e64b:	83 e0 10             	and    eax,0x10
c001e64e:	74 08                	je     c001e658 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e650:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e658:	83 ec 0c             	sub    esp,0xc
c001e65b:	68 50 02 00 00       	push   0x250
c001e660:	e8 fb 0a ff ff       	call   c000f160 <malloc>
c001e665:	83 c4 10             	add    esp,0x10
c001e668:	89 c2                	mov    edx,eax
c001e66a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e671:	89 10                	mov    DWORD PTR [eax],edx
c001e673:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e67b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e682:	8b 00                	mov    eax,DWORD PTR [eax]
c001e684:	83 ec 04             	sub    esp,0x4
c001e687:	52                   	push   edx
c001e688:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e68c:	52                   	push   edx
c001e68d:	50                   	push   eax
c001e68e:	e8 09 67 fe ff       	call   c0004d9c <f_open>
c001e693:	83 c4 10             	add    esp,0x10
c001e696:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e69d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e6a5:	74 07                	je     c001e6ae <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e6a7:	b8 01 00 00 00       	mov    eax,0x1
c001e6ac:	eb 05                	jmp    c001e6b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e6ae:	b8 00 00 00 00       	mov    eax,0x0
c001e6b3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e6b9:	c3                   	ret    

c001e6ba <FAT::openDir(char const*, void**)>:
c001e6ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e6c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e6c8:	74 0a                	je     c001e6d4 <FAT::openDir(char const*, void**)+0x1a>
c001e6ca:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e6d2:	75 07                	jne    c001e6db <FAT::openDir(char const*, void**)+0x21>
c001e6d4:	b8 04 00 00 00       	mov    eax,0x4
c001e6d9:	eb 7d                	jmp    c001e758 <FAT::openDir(char const*, void**)+0x9e>
c001e6db:	83 ec 08             	sub    esp,0x8
c001e6de:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e6e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e6e9:	50                   	push   eax
c001e6ea:	e8 96 20 fe ff       	call   c0000785 <strcpy>
c001e6ef:	83 c4 10             	add    esp,0x10
c001e6f2:	83 ec 08             	sub    esp,0x8
c001e6f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e6f9:	50                   	push   eax
c001e6fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e701:	e8 54 fe ff ff       	call   c001e55a <FAT::fixFilepath(char*)>
c001e706:	83 c4 10             	add    esp,0x10
c001e709:	83 ec 0c             	sub    esp,0xc
c001e70c:	6a 4c                	push   0x4c
c001e70e:	e8 4d 0a ff ff       	call   c000f160 <malloc>
c001e713:	83 c4 10             	add    esp,0x10
c001e716:	89 c2                	mov    edx,eax
c001e718:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e71f:	89 10                	mov    DWORD PTR [eax],edx
c001e721:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e728:	8b 00                	mov    eax,DWORD PTR [eax]
c001e72a:	83 ec 08             	sub    esp,0x8
c001e72d:	8d 54 24 14          	lea    edx,[esp+0x14]
c001e731:	52                   	push   edx
c001e732:	50                   	push   eax
c001e733:	e8 9c 76 fe ff       	call   c0005dd4 <f_opendir>
c001e738:	83 c4 10             	add    esp,0x10
c001e73b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001e742:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001e74a:	74 07                	je     c001e753 <FAT::openDir(char const*, void**)+0x99>
c001e74c:	b8 01 00 00 00       	mov    eax,0x1
c001e751:	eb 05                	jmp    c001e758 <FAT::openDir(char const*, void**)+0x9e>
c001e753:	b8 00 00 00 00       	mov    eax,0x0
c001e758:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e75e:	c3                   	ret    
c001e75f:	90                   	nop

c001e760 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001e760:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001e766:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001e76e:	75 0a                	jne    c001e77a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001e770:	b8 04 00 00 00       	mov    eax,0x4
c001e775:	e9 c9 00 00 00       	jmp    c001e843 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e77a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001e782:	75 0a                	jne    c001e78e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001e784:	b8 04 00 00 00       	mov    eax,0x4
c001e789:	e9 b5 00 00 00       	jmp    c001e843 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e78e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001e796:	75 0a                	jne    c001e7a2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001e798:	b8 04 00 00 00       	mov    eax,0x4
c001e79d:	e9 a1 00 00 00       	jmp    c001e843 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e7a2:	83 ec 08             	sub    esp,0x8
c001e7a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e7ac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e7b3:	50                   	push   eax
c001e7b4:	e8 cc 1f fe ff       	call   c0000785 <strcpy>
c001e7b9:	83 c4 10             	add    esp,0x10
c001e7bc:	83 ec 08             	sub    esp,0x8
c001e7bf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001e7c6:	50                   	push   eax
c001e7c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e7ce:	e8 87 fd ff ff       	call   c001e55a <FAT::fixFilepath(char*)>
c001e7d3:	83 c4 10             	add    esp,0x10
c001e7d6:	83 ec 08             	sub    esp,0x8
c001e7d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e7dd:	50                   	push   eax
c001e7de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e7e5:	50                   	push   eax
c001e7e6:	e8 a8 77 fe ff       	call   c0005f93 <f_stat>
c001e7eb:	83 c4 10             	add    esp,0x10
c001e7ee:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001e7f5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001e7fc:	85 c0                	test   eax,eax
c001e7fe:	74 07                	je     c001e807 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001e800:	83 f8 04             	cmp    eax,0x4
c001e803:	74 32                	je     c001e837 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001e805:	eb 37                	jmp    c001e83e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001e807:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e80b:	0f b6 c0             	movzx  eax,al
c001e80e:	83 e0 10             	and    eax,0x10
c001e811:	0f 95 c2             	setne  dl
c001e814:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001e81b:	88 10                	mov    BYTE PTR [eax],dl
c001e81d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e820:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e824:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001e82b:	89 01                	mov    DWORD PTR [ecx],eax
c001e82d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e830:	b8 00 00 00 00       	mov    eax,0x0
c001e835:	eb 0c                	jmp    c001e843 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e837:	b8 02 00 00 00       	mov    eax,0x2
c001e83c:	eb 05                	jmp    c001e843 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e83e:	b8 01 00 00 00       	mov    eax,0x1
c001e843:	81 c4 2c 02 00 00    	add    esp,0x22c
c001e849:	c3                   	ret    

c001e84a <FAT::unlink(char const*)>:
c001e84a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e850:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e858:	75 07                	jne    c001e861 <FAT::unlink(char const*)+0x17>
c001e85a:	b8 04 00 00 00       	mov    eax,0x4
c001e85f:	eb 5c                	jmp    c001e8bd <FAT::unlink(char const*)+0x73>
c001e861:	83 ec 08             	sub    esp,0x8
c001e864:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e86b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e86f:	50                   	push   eax
c001e870:	e8 10 1f fe ff       	call   c0000785 <strcpy>
c001e875:	83 c4 10             	add    esp,0x10
c001e878:	83 ec 08             	sub    esp,0x8
c001e87b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e87f:	50                   	push   eax
c001e880:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e887:	e8 ce fc ff ff       	call   c001e55a <FAT::fixFilepath(char*)>
c001e88c:	83 c4 10             	add    esp,0x10
c001e88f:	83 ec 0c             	sub    esp,0xc
c001e892:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e896:	50                   	push   eax
c001e897:	e8 49 7a fe ff       	call   c00062e5 <f_unlink>
c001e89c:	83 c4 10             	add    esp,0x10
c001e89f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001e8a6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001e8ad:	85 c0                	test   eax,eax
c001e8af:	75 07                	jne    c001e8b8 <FAT::unlink(char const*)+0x6e>
c001e8b1:	b8 00 00 00 00       	mov    eax,0x0
c001e8b6:	eb 05                	jmp    c001e8bd <FAT::unlink(char const*)+0x73>
c001e8b8:	b8 01 00 00 00       	mov    eax,0x1
c001e8bd:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e8c3:	c3                   	ret    

c001e8c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001e8c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001e8ca:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001e8d1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001e8d8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e8dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e8e0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001e8e8:	75 0a                	jne    c001e8f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001e8ea:	b8 04 00 00 00       	mov    eax,0x4
c001e8ef:	e9 1c 01 00 00       	jmp    c001ea10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001e8f4:	83 ec 08             	sub    esp,0x8
c001e8f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001e8fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c001e902:	50                   	push   eax
c001e903:	e8 7d 1e fe ff       	call   c0000785 <strcpy>
c001e908:	83 c4 10             	add    esp,0x10
c001e90b:	83 ec 08             	sub    esp,0x8
c001e90e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e912:	50                   	push   eax
c001e913:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001e91a:	e8 3b fc ff ff       	call   c001e55a <FAT::fixFilepath(char*)>
c001e91f:	83 c4 10             	add    esp,0x10
c001e922:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001e92a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001e932:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e937:	83 e0 01             	and    eax,0x1
c001e93a:	74 08                	je     c001e944 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001e93c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001e944:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e949:	83 e0 02             	and    eax,0x2
c001e94c:	74 08                	je     c001e956 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001e94e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001e956:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e95b:	83 e0 04             	and    eax,0x4
c001e95e:	74 08                	je     c001e968 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001e960:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001e968:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e96d:	83 e0 08             	and    eax,0x8
c001e970:	74 08                	je     c001e97a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001e972:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001e97a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e97f:	83 e0 01             	and    eax,0x1
c001e982:	74 08                	je     c001e98c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001e984:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001e98c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e991:	83 e0 02             	and    eax,0x2
c001e994:	74 08                	je     c001e99e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001e996:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001e99e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e9a3:	83 e0 04             	and    eax,0x4
c001e9a6:	74 08                	je     c001e9b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001e9a8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001e9b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e9b5:	83 e0 08             	and    eax,0x8
c001e9b8:	74 08                	je     c001e9c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001e9ba:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001e9c2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001e9c9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001e9d0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001e9d8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001e9e0:	83 ec 04             	sub    esp,0x4
c001e9e3:	52                   	push   edx
c001e9e4:	50                   	push   eax
c001e9e5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001e9e9:	50                   	push   eax
c001e9ea:	e8 98 7f fe ff       	call   c0006987 <f_chmod>
c001e9ef:	83 c4 10             	add    esp,0x10
c001e9f2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001e9f9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ea00:	85 c0                	test   eax,eax
c001ea02:	75 07                	jne    c001ea0b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ea04:	b8 00 00 00 00       	mov    eax,0x0
c001ea09:	eb 05                	jmp    c001ea10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ea0b:	b8 01 00 00 00       	mov    eax,0x1
c001ea10:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ea16:	c3                   	ret    
c001ea17:	90                   	nop

c001ea18 <FAT::rename(char const*, char const*)>:
c001ea18:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ea1e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ea26:	74 0a                	je     c001ea32 <FAT::rename(char const*, char const*)+0x1a>
c001ea28:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ea30:	75 0a                	jne    c001ea3c <FAT::rename(char const*, char const*)+0x24>
c001ea32:	b8 04 00 00 00       	mov    eax,0x4
c001ea37:	e9 98 00 00 00       	jmp    c001ead4 <FAT::rename(char const*, char const*)+0xbc>
c001ea3c:	83 ec 08             	sub    esp,0x8
c001ea3f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ea46:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ea4d:	50                   	push   eax
c001ea4e:	e8 32 1d fe ff       	call   c0000785 <strcpy>
c001ea53:	83 c4 10             	add    esp,0x10
c001ea56:	83 ec 08             	sub    esp,0x8
c001ea59:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ea60:	50                   	push   eax
c001ea61:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ea68:	e8 ed fa ff ff       	call   c001e55a <FAT::fixFilepath(char*)>
c001ea6d:	83 c4 10             	add    esp,0x10
c001ea70:	83 ec 08             	sub    esp,0x8
c001ea73:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ea7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea7e:	50                   	push   eax
c001ea7f:	e8 01 1d fe ff       	call   c0000785 <strcpy>
c001ea84:	83 c4 10             	add    esp,0x10
c001ea87:	83 ec 08             	sub    esp,0x8
c001ea8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea8e:	50                   	push   eax
c001ea8f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ea96:	e8 bf fa ff ff       	call   c001e55a <FAT::fixFilepath(char*)>
c001ea9b:	83 c4 10             	add    esp,0x10
c001ea9e:	83 ec 08             	sub    esp,0x8
c001eaa1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eaa5:	50                   	push   eax
c001eaa6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001eaad:	50                   	push   eax
c001eaae:	e8 e1 7b fe ff       	call   c0006694 <f_rename>
c001eab3:	83 c4 10             	add    esp,0x10
c001eab6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001eabd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001eac4:	85 c0                	test   eax,eax
c001eac6:	75 07                	jne    c001eacf <FAT::rename(char const*, char const*)+0xb7>
c001eac8:	b8 00 00 00 00       	mov    eax,0x0
c001eacd:	eb 05                	jmp    c001ead4 <FAT::rename(char const*, char const*)+0xbc>
c001eacf:	b8 01 00 00 00       	mov    eax,0x1
c001ead4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001eada:	c3                   	ret    
c001eadb:	90                   	nop

c001eadc <FAT::mkdir(char const*)>:
c001eadc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001eae2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001eaea:	75 07                	jne    c001eaf3 <FAT::mkdir(char const*)+0x17>
c001eaec:	b8 04 00 00 00       	mov    eax,0x4
c001eaf1:	eb 5c                	jmp    c001eb4f <FAT::mkdir(char const*)+0x73>
c001eaf3:	83 ec 08             	sub    esp,0x8
c001eaf6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eafd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eb01:	50                   	push   eax
c001eb02:	e8 7e 1c fe ff       	call   c0000785 <strcpy>
c001eb07:	83 c4 10             	add    esp,0x10
c001eb0a:	83 ec 08             	sub    esp,0x8
c001eb0d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eb11:	50                   	push   eax
c001eb12:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eb19:	e8 3c fa ff ff       	call   c001e55a <FAT::fixFilepath(char*)>
c001eb1e:	83 c4 10             	add    esp,0x10
c001eb21:	83 ec 0c             	sub    esp,0xc
c001eb24:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eb28:	50                   	push   eax
c001eb29:	e8 3a 79 fe ff       	call   c0006468 <f_mkdir>
c001eb2e:	83 c4 10             	add    esp,0x10
c001eb31:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001eb38:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001eb3f:	85 c0                	test   eax,eax
c001eb41:	75 07                	jne    c001eb4a <FAT::mkdir(char const*)+0x6e>
c001eb43:	b8 00 00 00 00       	mov    eax,0x0
c001eb48:	eb 05                	jmp    c001eb4f <FAT::mkdir(char const*)+0x73>
c001eb4a:	b8 01 00 00 00       	mov    eax,0x1
c001eb4f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001eb55:	c3                   	ret    

c001eb56 <FAT::exists(char const*)>:
c001eb56:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001eb5c:	83 ec 08             	sub    esp,0x8
c001eb5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001eb66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eb6a:	50                   	push   eax
c001eb6b:	e8 15 1c fe ff       	call   c0000785 <strcpy>
c001eb70:	83 c4 10             	add    esp,0x10
c001eb73:	83 ec 08             	sub    esp,0x8
c001eb76:	8d 44 24 08          	lea    eax,[esp+0x8]
c001eb7a:	50                   	push   eax
c001eb7b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001eb82:	e8 d3 f9 ff ff       	call   c001e55a <FAT::fixFilepath(char*)>
c001eb87:	83 c4 10             	add    esp,0x10
c001eb8a:	83 ec 08             	sub    esp,0x8
c001eb8d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001eb94:	50                   	push   eax
c001eb95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eb99:	50                   	push   eax
c001eb9a:	e8 f4 73 fe ff       	call   c0005f93 <f_stat>
c001eb9f:	83 c4 10             	add    esp,0x10
c001eba2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001eba9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ebb0:	85 c0                	test   eax,eax
c001ebb2:	75 04                	jne    c001ebb8 <FAT::exists(char const*)+0x62>
c001ebb4:	b0 01                	mov    al,0x1
c001ebb6:	eb 02                	jmp    c001ebba <FAT::exists(char const*)+0x64>
c001ebb8:	b0 00                	mov    al,0x0
c001ebba:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ebc0:	c3                   	ret    
c001ebc1:	90                   	nop

c001ebc2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ebc2:	b8 08 00 00 00       	mov    eax,0x8
c001ebc7:	c3                   	ret    

c001ebc8 <ISO9660::seek(void*, unsigned long long)>:
c001ebc8:	53                   	push   ebx
c001ebc9:	b8 04 00 00 00       	mov    eax,0x4
c001ebce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ebd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebd6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ebda:	85 d2                	test   edx,edx
c001ebdc:	74 17                	je     c001ebf5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ebde:	89 c8                	mov    eax,ecx
c001ebe0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001ebe3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001ebe6:	b8 01 00 00 00       	mov    eax,0x1
c001ebeb:	73 08                	jae    c001ebf5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ebed:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ebf0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ebf3:	31 c0                	xor    eax,eax
c001ebf5:	5b                   	pop    ebx
c001ebf6:	c3                   	ret    
c001ebf7:	90                   	nop

c001ebf8 <ISO9660::tell(void*, unsigned long long*)>:
c001ebf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ebfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec00:	85 d2                	test   edx,edx
c001ec02:	74 12                	je     c001ec16 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ec04:	85 c0                	test   eax,eax
c001ec06:	74 0e                	je     c001ec16 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ec08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ec0b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ec0e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ec11:	89 10                	mov    DWORD PTR [eax],edx
c001ec13:	31 c0                	xor    eax,eax
c001ec15:	c3                   	ret    
c001ec16:	b8 04 00 00 00       	mov    eax,0x4
c001ec1b:	c3                   	ret    

c001ec1c <ISO9660::getName()>:
c001ec1c:	b8 7c 8b 02 c0       	mov    eax,0xc0028b7c
c001ec21:	c3                   	ret    

c001ec22 <ISO9660::stat(void*, unsigned long long*)>:
c001ec22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ec26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec2a:	85 d2                	test   edx,edx
c001ec2c:	74 12                	je     c001ec40 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ec2e:	85 c0                	test   eax,eax
c001ec30:	74 0e                	je     c001ec40 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ec32:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ec35:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ec38:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ec3b:	89 10                	mov    DWORD PTR [eax],edx
c001ec3d:	31 c0                	xor    eax,eax
c001ec3f:	c3                   	ret    
c001ec40:	b8 04 00 00 00       	mov    eax,0x4
c001ec45:	c3                   	ret    

c001ec46 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ec46:	b8 01 00 00 00       	mov    eax,0x1
c001ec4b:	c3                   	ret    

c001ec4c <ISO9660::unlink(char const*)>:
c001ec4c:	b8 01 00 00 00       	mov    eax,0x1
c001ec51:	c3                   	ret    

c001ec52 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ec52:	b8 01 00 00 00       	mov    eax,0x1
c001ec57:	c3                   	ret    

c001ec58 <ISO9660::rename(char const*, char const*)>:
c001ec58:	b8 01 00 00 00       	mov    eax,0x1
c001ec5d:	c3                   	ret    

c001ec5e <ISO9660::mkdir(char const*)>:
c001ec5e:	b8 01 00 00 00       	mov    eax,0x1
c001ec63:	c3                   	ret    

c001ec64 <ISO9660::close(void*)>:
c001ec64:	83 ec 0c             	sub    esp,0xc
c001ec67:	b8 04 00 00 00       	mov    eax,0x4
c001ec6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec70:	85 d2                	test   edx,edx
c001ec72:	74 0e                	je     c001ec82 <ISO9660::close(void*)+0x1e>
c001ec74:	83 ec 0c             	sub    esp,0xc
c001ec77:	52                   	push   edx
c001ec78:	e8 f3 04 ff ff       	call   c000f170 <free>
c001ec7d:	83 c4 10             	add    esp,0x10
c001ec80:	31 c0                	xor    eax,eax
c001ec82:	83 c4 0c             	add    esp,0xc
c001ec85:	c3                   	ret    

c001ec86 <ISO9660::closeDir(void*)>:
c001ec86:	83 ec 0c             	sub    esp,0xc
c001ec89:	b8 04 00 00 00       	mov    eax,0x4
c001ec8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec92:	85 d2                	test   edx,edx
c001ec94:	74 0e                	je     c001eca4 <ISO9660::closeDir(void*)+0x1e>
c001ec96:	83 ec 0c             	sub    esp,0xc
c001ec99:	52                   	push   edx
c001ec9a:	e8 d1 04 ff ff       	call   c000f170 <free>
c001ec9f:	83 c4 10             	add    esp,0x10
c001eca2:	31 c0                	xor    eax,eax
c001eca4:	83 c4 0c             	add    esp,0xc
c001eca7:	c3                   	ret    

c001eca8 <ISO9660::~ISO9660()>:
c001eca8:	83 ec 0c             	sub    esp,0xc
c001ecab:	ba d0 8b 02 c0       	mov    edx,0xc0028bd0
c001ecb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb4:	89 10                	mov    DWORD PTR [eax],edx
c001ecb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecba:	83 ec 0c             	sub    esp,0xc
c001ecbd:	50                   	push   eax
c001ecbe:	e8 b7 38 ff ff       	call   c001257a <Filesystem::~Filesystem()>
c001ecc3:	83 c4 10             	add    esp,0x10
c001ecc6:	90                   	nop
c001ecc7:	83 c4 0c             	add    esp,0xc
c001ecca:	c3                   	ret    
c001eccb:	90                   	nop

c001eccc <ISO9660::~ISO9660()>:
c001eccc:	83 ec 0c             	sub    esp,0xc
c001eccf:	83 ec 0c             	sub    esp,0xc
c001ecd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecd6:	e8 cd ff ff ff       	call   c001eca8 <ISO9660::~ISO9660()>
c001ecdb:	83 c4 10             	add    esp,0x10
c001ecde:	83 ec 08             	sub    esp,0x8
c001ece1:	6a 08                	push   0x8
c001ece3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ece7:	e8 85 34 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001ecec:	83 c4 10             	add    esp,0x10
c001ecef:	83 c4 0c             	add    esp,0xc
c001ecf2:	c3                   	ret    

c001ecf3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ecf3:	55                   	push   ebp
c001ecf4:	31 c9                	xor    ecx,ecx
c001ecf6:	57                   	push   edi
c001ecf7:	56                   	push   esi
c001ecf8:	53                   	push   ebx
c001ecf9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ecfd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ed01:	89 eb                	mov    ebx,ebp
c001ed03:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ed07:	39 ce                	cmp    esi,ecx
c001ed09:	7e 17                	jle    c001ed22 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ed0b:	31 d2                	xor    edx,edx
c001ed0d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ed11:	7d 13                	jge    c001ed26 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ed13:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ed17:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ed1a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ed1d:	75 0d                	jne    c001ed2c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ed1f:	42                   	inc    edx
c001ed20:	eb eb                	jmp    c001ed0d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ed22:	31 c0                	xor    eax,eax
c001ed24:	eb 0a                	jmp    c001ed30 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ed26:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ed2a:	eb 04                	jmp    c001ed30 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ed2c:	41                   	inc    ecx
c001ed2d:	43                   	inc    ebx
c001ed2e:	eb d7                	jmp    c001ed07 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ed30:	5b                   	pop    ebx
c001ed31:	5e                   	pop    esi
c001ed32:	5f                   	pop    edi
c001ed33:	5d                   	pop    ebp
c001ed34:	c3                   	ret    

c001ed35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ed35:	56                   	push   esi
c001ed36:	53                   	push   ebx
c001ed37:	52                   	push   edx
c001ed38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed3c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ed40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed44:	39 0d c0 ba 02 c0    	cmp    DWORD PTR ds:0xc002bac0,ecx
c001ed4a:	75 08                	jne    c001ed54 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ed4c:	38 05 a8 99 02 c0    	cmp    BYTE PTR ds:0xc00299a8,al
c001ed52:	74 2b                	je     c001ed7f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ed54:	83 ec 0c             	sub    esp,0xc
c001ed57:	a2 a8 99 02 c0       	mov    ds:0xc00299a8,al
c001ed5c:	68 e0 ba 02 c0       	push   0xc002bae0
c001ed61:	0f be c0             	movsx  eax,al
c001ed64:	6a 01                	push   0x1
c001ed66:	89 0d c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,ecx
c001ed6c:	31 db                	xor    ebx,ebx
c001ed6e:	53                   	push   ebx
c001ed6f:	51                   	push   ecx
c001ed70:	ff 34 85 dc a9 02 c0 	push   DWORD PTR [eax*4-0x3ffd5624]
c001ed77:	e8 d6 6a ff ff       	call   c0015852 <LogicalDisk::read(unsigned long long, int, void*)>
c001ed7c:	83 c4 20             	add    esp,0x20
c001ed7f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001ed87:	c7 44 24 14 e0 ba 02 c0 	mov    DWORD PTR [esp+0x14],0xc002bae0
c001ed8f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001ed93:	58                   	pop    eax
c001ed94:	5b                   	pop    ebx
c001ed95:	5e                   	pop    esi
c001ed96:	e9 15 19 fe ff       	jmp    c00006b0 <memcpy>
c001ed9b:	90                   	nop

c001ed9c <ISO9660::tryMount(LogicalDisk*, int)>:
c001ed9c:	81 ec 10 08 00 00    	sub    esp,0x810
c001eda2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001eda9:	83 c0 41             	add    eax,0x41
c001edac:	0f be c0             	movsx  eax,al
c001edaf:	50                   	push   eax
c001edb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001edb4:	50                   	push   eax
c001edb5:	6a 10                	push   0x10
c001edb7:	e8 79 ff ff ff       	call   c001ed35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001edbc:	83 c4 10             	add    esp,0x10
c001edbf:	31 c0                	xor    eax,eax
c001edc1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001edc6:	75 1d                	jne    c001ede5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001edc8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001edcd:	75 16                	jne    c001ede5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001edcf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001edd4:	75 0f                	jne    c001ede5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001edd6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001eddb:	75 08                	jne    c001ede5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001eddd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ede2:	0f 94 c0             	sete   al
c001ede5:	81 c4 0c 08 00 00    	add    esp,0x80c
c001edeb:	c3                   	ret    

c001edec <ISO9660::read(void*, unsigned long, void*, int*)>:
c001edec:	55                   	push   ebp
c001eded:	57                   	push   edi
c001edee:	56                   	push   esi
c001edef:	53                   	push   ebx
c001edf0:	81 ec 34 08 00 00    	sub    esp,0x834
c001edf6:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001edfd:	55                   	push   ebp
c001edfe:	68 97 8b 02 c0       	push   0xc0028b97
c001ee03:	e8 49 34 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ee08:	83 c4 10             	add    esp,0x10
c001ee0b:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001ee13:	0f 84 06 02 00 00    	je     c001f01f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001ee19:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001ee21:	0f 84 f8 01 00 00    	je     c001f01f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001ee27:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001ee2e:	b8 01 00 00 00       	mov    eax,0x1
c001ee33:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001ee37:	0f 85 e7 01 00 00    	jne    c001f024 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001ee3d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001ee40:	31 d2                	xor    edx,edx
c001ee42:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001ee45:	89 e9                	mov    ecx,ebp
c001ee47:	89 d3                	mov    ebx,edx
c001ee49:	01 f1                	add    ecx,esi
c001ee4b:	11 fb                	adc    ebx,edi
c001ee4d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ee51:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ee55:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001ee5c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001ee5f:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001ee62:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ee66:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001ee6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ee6e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ee72:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001ee76:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001ee7a:	72 19                	jb     c001ee95 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001ee7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ee80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee88:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ee8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee8f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ee93:	eb 13                	jmp    c001eea8 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001ee95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee9d:	29 f0                	sub    eax,esi
c001ee9f:	19 fa                	sbb    edx,edi
c001eea1:	89 04 24             	mov    DWORD PTR [esp],eax
c001eea4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001eea8:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001eeaf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001eeb2:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeb4:	53                   	push   ebx
c001eeb5:	0f a4 c2 0b          	shld   edx,eax,0xb
c001eeb9:	c1 e0 0b             	shl    eax,0xb
c001eebc:	01 c6                	add    esi,eax
c001eebe:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001eec5:	11 d7                	adc    edi,edx
c001eec7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001eecb:	89 fa                	mov    edx,edi
c001eecd:	50                   	push   eax
c001eece:	8d 44 24 28          	lea    eax,[esp+0x28]
c001eed2:	50                   	push   eax
c001eed3:	89 f0                	mov    eax,esi
c001eed5:	0f ac d0 0b          	shrd   eax,edx,0xb
c001eed9:	50                   	push   eax
c001eeda:	e8 56 fe ff ff       	call   c001ed35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001eedf:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001eee6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eeea:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001eeed:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001eef1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001eef7:	83 c4 10             	add    esp,0x10
c001eefa:	b8 00 08 00 00       	mov    eax,0x800
c001eeff:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001ef03:	29 d0                	sub    eax,edx
c001ef05:	39 c1                	cmp    ecx,eax
c001ef07:	83 db 00             	sbb    ebx,0x0
c001ef0a:	7d 19                	jge    c001ef25 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001ef0c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ef11:	75 16                	jne    c001ef29 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001ef13:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ef1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef20:	e9 f6 00 00 00       	jmp    c001f01b <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001ef25:	89 c5                	mov    ebp,eax
c001ef27:	eb 03                	jmp    c001ef2c <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001ef29:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001ef2c:	51                   	push   ecx
c001ef2d:	55                   	push   ebp
c001ef2e:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001ef32:	50                   	push   eax
c001ef33:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001ef3a:	e8 71 17 fe ff       	call   c00006b0 <memcpy>
c001ef3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef43:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef47:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001ef4e:	01 e8                	add    eax,ebp
c001ef50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ef54:	89 e8                	mov    eax,ebp
c001ef56:	99                   	cdq    
c001ef57:	01 ee                	add    esi,ebp
c001ef59:	11 d7                	adc    edi,edx
c001ef5b:	29 e9                	sub    ecx,ebp
c001ef5d:	19 d3                	sbb    ebx,edx
c001ef5f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ef63:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ef67:	83 c4 10             	add    esp,0x10
c001ef6a:	b8 ff 07 00 00       	mov    eax,0x7ff
c001ef6f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001ef72:	b8 00 00 00 00       	mov    eax,0x0
c001ef77:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001ef7b:	7d 3f                	jge    c001efbc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001ef7d:	52                   	push   edx
c001ef7e:	89 fa                	mov    edx,edi
c001ef80:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001ef87:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001ef8b:	50                   	push   eax
c001ef8c:	89 f0                	mov    eax,esi
c001ef8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ef92:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ef96:	50                   	push   eax
c001ef97:	e8 99 fd ff ff       	call   c001ed35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ef9c:	81 c6 00 08 00 00    	add    esi,0x800
c001efa2:	83 d7 00             	adc    edi,0x0
c001efa5:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001efad:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001efb5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001efba:	eb ab                	jmp    c001ef67 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001efbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc0:	0b 04 24             	or     eax,DWORD PTR [esp]
c001efc3:	74 34                	je     c001eff9 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001efc5:	89 fa                	mov    edx,edi
c001efc7:	50                   	push   eax
c001efc8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001efcf:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001efd3:	50                   	push   eax
c001efd4:	89 f0                	mov    eax,esi
c001efd6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001efda:	0f ac d0 0b          	shrd   eax,edx,0xb
c001efde:	55                   	push   ebp
c001efdf:	50                   	push   eax
c001efe0:	e8 50 fd ff ff       	call   c001ed35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001efe5:	83 c4 0c             	add    esp,0xc
c001efe8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001efec:	55                   	push   ebp
c001efed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff1:	e8 ba 16 fe ff       	call   c00006b0 <memcpy>
c001eff6:	83 c4 10             	add    esp,0x10
c001eff9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f000:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f004:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f008:	89 38                	mov    DWORD PTR [eax],edi
c001f00a:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f015:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f018:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f01b:	31 c0                	xor    eax,eax
c001f01d:	eb 05                	jmp    c001f024 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f01f:	b8 04 00 00 00       	mov    eax,0x4
c001f024:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f02a:	5b                   	pop    ebx
c001f02b:	5e                   	pop    esi
c001f02c:	5f                   	pop    edi
c001f02d:	5d                   	pop    ebp
c001f02e:	c3                   	ret    
c001f02f:	90                   	nop

c001f030 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f030:	55                   	push   ebp
c001f031:	57                   	push   edi
c001f032:	56                   	push   esi
c001f033:	53                   	push   ebx
c001f034:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f03a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f041:	85 f6                	test   esi,esi
c001f043:	0f 84 64 02 00 00    	je     c001f2ad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f049:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f051:	0f 84 56 02 00 00    	je     c001f2ad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f057:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f05a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f05d:	75 0a                	jne    c001f069 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f05f:	b8 07 00 00 00       	mov    eax,0x7
c001f064:	e9 49 02 00 00       	jmp    c001f2b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f069:	50                   	push   eax
c001f06a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f06e:	50                   	push   eax
c001f06f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f076:	53                   	push   ebx
c001f077:	8b 06                	mov    eax,DWORD PTR [esi]
c001f079:	c1 e0 0b             	shl    eax,0xb
c001f07c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f07f:	c1 e8 0b             	shr    eax,0xb
c001f082:	50                   	push   eax
c001f083:	e8 ad fc ff ff       	call   c001ed35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f088:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f08b:	83 c4 10             	add    esp,0x10
c001f08e:	89 c1                	mov    ecx,eax
c001f090:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f093:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f099:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f09c:	84 db                	test   bl,bl
c001f09e:	0f 85 90 00 00 00    	jne    c001f134 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f0a4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f0aa:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f0b0:	29 c7                	sub    edi,eax
c001f0b2:	89 fb                	mov    ebx,edi
c001f0b4:	c1 fb 1f             	sar    ebx,0x1f
c001f0b7:	01 f8                	add    eax,edi
c001f0b9:	11 da                	adc    edx,ebx
c001f0bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f0bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0c3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f0c6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f0c9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f0cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f0cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f0d6:	89 d8                	mov    eax,ebx
c001f0d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f0db:	ba 00 00 00 00       	mov    edx,0x0
c001f0e0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f0e4:	b8 00 00 00 00       	mov    eax,0x0
c001f0e9:	73 0b                	jae    c001f0f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f0eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f0ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f0f2:	29 f8                	sub    eax,edi
c001f0f4:	19 da                	sbb    edx,ebx
c001f0f6:	89 d3                	mov    ebx,edx
c001f0f8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f0fb:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f0fe:	09 c3                	or     ebx,eax
c001f100:	0f 84 59 ff ff ff    	je     c001f05f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f106:	55                   	push   ebp
c001f107:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f10b:	50                   	push   eax
c001f10c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f113:	53                   	push   ebx
c001f114:	8b 06                	mov    eax,DWORD PTR [esi]
c001f116:	c1 e0 0b             	shl    eax,0xb
c001f119:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f11d:	c1 e8 0b             	shr    eax,0xb
c001f120:	50                   	push   eax
c001f121:	e8 0f fc ff ff       	call   c001ed35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f126:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f129:	83 c4 10             	add    esp,0x10
c001f12c:	25 ff 07 00 00       	and    eax,0x7ff
c001f131:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f134:	57                   	push   edi
c001f135:	6a 28                	push   0x28
c001f137:	6a 00                	push   0x0
c001f139:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f13d:	50                   	push   eax
c001f13e:	e8 a3 15 fe ff       	call   c00006e6 <memset>
c001f143:	31 d2                	xor    edx,edx
c001f145:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f148:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f14e:	89 f8                	mov    eax,edi
c001f150:	83 c0 21             	add    eax,0x21
c001f153:	83 d2 00             	adc    edx,0x0
c001f156:	89 c7                	mov    edi,eax
c001f158:	89 d5                	mov    ebp,edx
c001f15a:	83 c4 10             	add    esp,0x10
c001f15d:	31 c9                	xor    ecx,ecx
c001f15f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f166:	83 f9 28             	cmp    ecx,0x28
c001f169:	88 04 24             	mov    BYTE PTR [esp],al
c001f16c:	0f 94 c2             	sete   dl
c001f16f:	88 d0                	mov    al,dl
c001f171:	ba ff 07 00 00       	mov    edx,0x7ff
c001f176:	39 fa                	cmp    edx,edi
c001f178:	ba 00 00 00 00       	mov    edx,0x0
c001f17d:	19 ea                	sbb    edx,ebp
c001f17f:	0f 92 c2             	setb   dl
c001f182:	09 c2                	or     edx,eax
c001f184:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f188:	0f 94 c0             	sete   al
c001f18b:	08 d0                	or     al,dl
c001f18d:	75 16                	jne    c001f1a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f18f:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f193:	74 10                	je     c001f1a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f195:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f198:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f19c:	41                   	inc    ecx
c001f19d:	83 c7 01             	add    edi,0x1
c001f1a0:	83 d5 00             	adc    ebp,0x0
c001f1a3:	eb ba                	jmp    c001f15f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f1a5:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f1ac:	83 ec 0c             	sub    esp,0xc
c001f1af:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f1b3:	57                   	push   edi
c001f1b4:	e8 4a 15 fe ff       	call   c0000703 <strlen>
c001f1b9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f1c1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f1c5:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f1cc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f1cf:	5a                   	pop    edx
c001f1d0:	25 ff 07 00 00       	and    eax,0x7ff
c001f1d5:	01 c8                	add    eax,ecx
c001f1d7:	59                   	pop    ecx
c001f1d8:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f1de:	83 e0 02             	and    eax,0x2
c001f1e1:	3c 01                	cmp    al,0x1
c001f1e3:	19 c0                	sbb    eax,eax
c001f1e5:	83 c0 02             	add    eax,0x2
c001f1e8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f1ec:	57                   	push   edi
c001f1ed:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f1f1:	50                   	push   eax
c001f1f2:	e8 8e 15 fe ff       	call   c0000785 <strcpy>
c001f1f7:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f1fb:	83 c4 10             	add    esp,0x10
c001f1fe:	84 c0                	test   al,al
c001f200:	75 21                	jne    c001f223 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f202:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f20a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f212:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f21a:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f221:	eb 28                	jmp    c001f24b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f223:	fe c8                	dec    al
c001f225:	75 24                	jne    c001f24b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f227:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f22f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f237:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f23f:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f246:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f24b:	0f b6 fb             	movzx  edi,bl
c001f24e:	31 db                	xor    ebx,ebx
c001f250:	50                   	push   eax
c001f251:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f258:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f25c:	50                   	push   eax
c001f25d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f264:	e8 47 14 fe ff       	call   c00006b0 <memcpy>
c001f269:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f270:	89 f9                	mov    ecx,edi
c001f272:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f278:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f27b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f27e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f281:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f284:	83 c4 10             	add    esp,0x10
c001f287:	39 c7                	cmp    edi,eax
c001f289:	89 df                	mov    edi,ebx
c001f28b:	19 d7                	sbb    edi,edx
c001f28d:	72 10                	jb     c001f29f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f28f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f296:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f29d:	eb 0a                	jmp    c001f2a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f29f:	29 c8                	sub    eax,ecx
c001f2a1:	19 da                	sbb    edx,ebx
c001f2a3:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f2a6:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f2a9:	31 c0                	xor    eax,eax
c001f2ab:	eb 05                	jmp    c001f2b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f2ad:	b8 04 00 00 00       	mov    eax,0x4
c001f2b2:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f2b8:	5b                   	pop    ebx
c001f2b9:	5e                   	pop    esi
c001f2ba:	5f                   	pop    edi
c001f2bb:	5d                   	pop    ebp
c001f2bc:	c3                   	ret    

c001f2bd <readRoot(unsigned int*, unsigned int*, char)>:
c001f2bd:	81 ec 40 08 00 00    	sub    esp,0x840
c001f2c3:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f2cb:	50                   	push   eax
c001f2cc:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f2d0:	50                   	push   eax
c001f2d1:	6a 10                	push   0x10
c001f2d3:	e8 5d fa ff ff       	call   c001ed35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f2d8:	83 c4 0c             	add    esp,0xc
c001f2db:	6a 22                	push   0x22
c001f2dd:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f2e4:	50                   	push   eax
c001f2e5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f2e9:	50                   	push   eax
c001f2ea:	e8 c1 13 fe ff       	call   c00006b0 <memcpy>
c001f2ef:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f2f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f2fa:	89 10                	mov    DWORD PTR [eax],edx
c001f2fc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f303:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f307:	89 10                	mov    DWORD PTR [eax],edx
c001f309:	b0 01                	mov    al,0x1
c001f30b:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f311:	c3                   	ret    

c001f312 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f312:	55                   	push   ebp
c001f313:	57                   	push   edi
c001f314:	56                   	push   esi
c001f315:	53                   	push   ebx
c001f316:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f31c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f323:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f32a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f32e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f332:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f336:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f33a:	75 03                	jne    c001f33f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f33c:	83 c3 02             	add    ebx,0x2
c001f33f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f342:	75 03                	jne    c001f347 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f344:	43                   	inc    ebx
c001f345:	eb f8                	jmp    c001f33f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f347:	51                   	push   ecx
c001f348:	68 00 01 00 00       	push   0x100
c001f34d:	6a 00                	push   0x0
c001f34f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f353:	50                   	push   eax
c001f354:	e8 8d 13 fe ff       	call   c00006e6 <memset>
c001f359:	83 c4 10             	add    esp,0x10
c001f35c:	31 d2                	xor    edx,edx
c001f35e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f361:	84 c0                	test   al,al
c001f363:	74 21                	je     c001f386 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f365:	3c 2f                	cmp    al,0x2f
c001f367:	75 0b                	jne    c001f374 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f369:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f36d:	bd 01 00 00 00       	mov    ebp,0x1
c001f372:	eb 14                	jmp    c001f388 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f374:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f377:	80 f9 19             	cmp    cl,0x19
c001f37a:	77 03                	ja     c001f37f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f37c:	83 e8 20             	sub    eax,0x20
c001f37f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f383:	42                   	inc    edx
c001f384:	eb d8                	jmp    c001f35e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f386:	31 ed                	xor    ebp,ebp
c001f388:	83 ec 0c             	sub    esp,0xc
c001f38b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f392:	e8 c9 fd fe ff       	call   c000f160 <malloc>
c001f397:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f39e:	89 c6                	mov    esi,eax
c001f3a0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f3a6:	c1 ef 0b             	shr    edi,0xb
c001f3a9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f3b0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f3b4:	83 c4 10             	add    esp,0x10
c001f3b7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f3bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3c0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f3c7:	74 28                	je     c001f3f1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f3c9:	52                   	push   edx
c001f3ca:	57                   	push   edi
c001f3cb:	50                   	push   eax
c001f3cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f3d0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f3d7:	e8 59 f9 ff ff       	call   c001ed35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f3dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f3e0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f3e7:	05 00 08 00 00       	add    eax,0x800
c001f3ec:	83 c4 10             	add    esp,0x10
c001f3ef:	eb cb                	jmp    c001f3bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f3f1:	83 ec 0c             	sub    esp,0xc
c001f3f4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f3f8:	57                   	push   edi
c001f3f9:	e8 05 13 fe ff       	call   c0000703 <strlen>
c001f3fe:	50                   	push   eax
c001f3ff:	57                   	push   edi
c001f400:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f407:	56                   	push   esi
c001f408:	e8 e6 f8 ff ff       	call   c001ecf3 <__memmem(unsigned char*, int, unsigned char*, int)>
c001f40d:	83 c4 20             	add    esp,0x20
c001f410:	85 c0                	test   eax,eax
c001f412:	75 13                	jne    c001f427 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f414:	83 ec 0c             	sub    esp,0xc
c001f417:	56                   	push   esi
c001f418:	e8 53 fd fe ff       	call   c000f170 <free>
c001f41d:	83 c4 10             	add    esp,0x10
c001f420:	31 c0                	xor    eax,eax
c001f422:	e9 b3 00 00 00       	jmp    c001f4da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f427:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f42b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f42f:	c1 e7 08             	shl    edi,0x8
c001f432:	c1 e2 10             	shl    edx,0x10
c001f435:	09 d7                	or     edi,edx
c001f437:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f43b:	09 d7                	or     edi,edx
c001f43d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f441:	c1 e2 18             	shl    edx,0x18
c001f444:	09 d7                	or     edi,edx
c001f446:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f44a:	89 d1                	mov    ecx,edx
c001f44c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f450:	c1 e1 08             	shl    ecx,0x8
c001f453:	c1 e2 10             	shl    edx,0x10
c001f456:	09 ca                	or     edx,ecx
c001f458:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f45c:	09 ca                	or     edx,ecx
c001f45e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f462:	c1 e1 18             	shl    ecx,0x18
c001f465:	09 ca                	or     edx,ecx
c001f467:	89 e9                	mov    ecx,ebp
c001f469:	84 c9                	test   cl,cl
c001f46b:	74 3c                	je     c001f4a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f46d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f471:	83 ec 0c             	sub    esp,0xc
c001f474:	56                   	push   esi
c001f475:	e8 f6 fc fe ff       	call   c000f170 <free>
c001f47a:	83 c4 0c             	add    esp,0xc
c001f47d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f484:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f489:	50                   	push   eax
c001f48a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f491:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f498:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f49c:	52                   	push   edx
c001f49d:	57                   	push   edi
c001f49e:	53                   	push   ebx
c001f49f:	e8 6e fe ff ff       	call   c001f312 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f4a4:	83 c4 20             	add    esp,0x20
c001f4a7:	eb 31                	jmp    c001f4da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f4a9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f4ac:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f4b3:	d0 e8                	shr    al,1
c001f4b5:	89 3b                	mov    DWORD PTR [ebx],edi
c001f4b7:	83 e0 01             	and    eax,0x1
c001f4ba:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f4c1:	83 ec 0c             	sub    esp,0xc
c001f4c4:	89 13                	mov    DWORD PTR [ebx],edx
c001f4c6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f4cd:	89 03                	mov    DWORD PTR [ebx],eax
c001f4cf:	56                   	push   esi
c001f4d0:	e8 9b fc fe ff       	call   c000f170 <free>
c001f4d5:	83 c4 10             	add    esp,0x10
c001f4d8:	b0 01                	mov    al,0x1
c001f4da:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f4e0:	5b                   	pop    ebx
c001f4e1:	5e                   	pop    esi
c001f4e2:	5f                   	pop    edi
c001f4e3:	5d                   	pop    ebp
c001f4e4:	c3                   	ret    

c001f4e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f4e5:	55                   	push   ebp
c001f4e6:	57                   	push   edi
c001f4e7:	56                   	push   esi
c001f4e8:	53                   	push   ebx
c001f4e9:	83 ec 20             	sub    esp,0x20
c001f4ec:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f4f0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f4f4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f4f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f500:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f508:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f50d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f513:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f519:	57                   	push   edi
c001f51a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f51e:	50                   	push   eax
c001f51f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f523:	50                   	push   eax
c001f524:	e8 94 fd ff ff       	call   c001f2bd <readRoot(unsigned int*, unsigned int*, char)>
c001f529:	5a                   	pop    edx
c001f52a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f52e:	e8 d0 11 fe ff       	call   c0000703 <strlen>
c001f533:	83 c4 10             	add    esp,0x10
c001f536:	83 f8 03             	cmp    eax,0x3
c001f539:	77 17                	ja     c001f552 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f53b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f53f:	89 03                	mov    DWORD PTR [ebx],eax
c001f541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f545:	89 06                	mov    DWORD PTR [esi],eax
c001f547:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f54e:	b0 01                	mov    al,0x1
c001f550:	eb 19                	jmp    c001f56b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f552:	50                   	push   eax
c001f553:	55                   	push   ebp
c001f554:	57                   	push   edi
c001f555:	56                   	push   esi
c001f556:	53                   	push   ebx
c001f557:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f55b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f55f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f563:	e8 aa fd ff ff       	call   c001f312 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f568:	83 c4 20             	add    esp,0x20
c001f56b:	83 c4 1c             	add    esp,0x1c
c001f56e:	5b                   	pop    ebx
c001f56f:	5e                   	pop    esi
c001f570:	5f                   	pop    edi
c001f571:	5d                   	pop    ebp
c001f572:	c3                   	ret    
c001f573:	90                   	nop

c001f574 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f574:	57                   	push   edi
c001f575:	56                   	push   esi
c001f576:	53                   	push   ebx
c001f577:	83 ec 10             	sub    esp,0x10
c001f57a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f57e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f582:	85 ff                	test   edi,edi
c001f584:	74 7b                	je     c001f601 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f586:	85 f6                	test   esi,esi
c001f588:	74 77                	je     c001f601 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f58a:	83 ec 0c             	sub    esp,0xc
c001f58d:	6a 1c                	push   0x1c
c001f58f:	e8 cc fb fe ff       	call   c000f160 <malloc>
c001f594:	89 07                	mov    DWORD PTR [edi],eax
c001f596:	89 c3                	mov    ebx,eax
c001f598:	58                   	pop    eax
c001f599:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f59d:	50                   	push   eax
c001f59e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f5a1:	50                   	push   eax
c001f5a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f5a6:	50                   	push   eax
c001f5a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f5ab:	50                   	push   eax
c001f5ac:	56                   	push   esi
c001f5ad:	e8 33 ff ff ff       	call   c001f4e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f5b2:	83 c4 20             	add    esp,0x20
c001f5b5:	84 c0                	test   al,al
c001f5b7:	74 07                	je     c001f5c0 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f5b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f5be:	74 0b                	je     c001f5cb <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f5c0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f5c4:	b8 01 00 00 00       	mov    eax,0x1
c001f5c9:	eb 3b                	jmp    c001f606 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f5cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5cf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f5d3:	89 03                	mov    DWORD PTR [ebx],eax
c001f5d5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f5dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f5e7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f5ee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f5f1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f5f8:	8a 06                	mov    al,BYTE PTR [esi]
c001f5fa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f5fd:	31 c0                	xor    eax,eax
c001f5ff:	eb 05                	jmp    c001f606 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f601:	b8 04 00 00 00       	mov    eax,0x4
c001f606:	83 c4 10             	add    esp,0x10
c001f609:	5b                   	pop    ebx
c001f60a:	5e                   	pop    esi
c001f60b:	5f                   	pop    edi
c001f60c:	c3                   	ret    
c001f60d:	90                   	nop

c001f60e <ISO9660::exists(char const*)>:
c001f60e:	83 ec 28             	sub    esp,0x28
c001f611:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f615:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f619:	52                   	push   edx
c001f61a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f61d:	52                   	push   edx
c001f61e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f622:	52                   	push   edx
c001f623:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f627:	52                   	push   edx
c001f628:	50                   	push   eax
c001f629:	e8 b7 fe ff ff       	call   c001f4e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f62e:	83 c4 3c             	add    esp,0x3c
c001f631:	c3                   	ret    

c001f632 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f632:	56                   	push   esi
c001f633:	53                   	push   ebx
c001f634:	83 ec 14             	sub    esp,0x14
c001f637:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f63b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f63f:	85 db                	test   ebx,ebx
c001f641:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f645:	0f 94 c2             	sete   dl
c001f648:	85 f6                	test   esi,esi
c001f64a:	0f 94 c0             	sete   al
c001f64d:	08 c2                	or     dl,al
c001f64f:	75 68                	jne    c001f6b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f651:	85 c9                	test   ecx,ecx
c001f653:	74 64                	je     c001f6b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f655:	83 ec 0c             	sub    esp,0xc
c001f658:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f65b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f65f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f665:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f66c:	50                   	push   eax
c001f66d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f670:	50                   	push   eax
c001f671:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f675:	50                   	push   eax
c001f676:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f67a:	50                   	push   eax
c001f67b:	51                   	push   ecx
c001f67c:	e8 64 fe ff ff       	call   c001f4e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f681:	83 c4 20             	add    esp,0x20
c001f684:	ba 01 00 00 00       	mov    edx,0x1
c001f689:	84 c0                	test   al,al
c001f68b:	74 31                	je     c001f6be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f68d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f691:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f698:	89 03                	mov    DWORD PTR [ebx],eax
c001f69a:	ba 00 00 00 00       	mov    edx,0x0
c001f69f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6a3:	85 c0                	test   eax,eax
c001f6a5:	0f 95 06             	setne  BYTE PTR [esi]
c001f6a8:	74 14                	je     c001f6be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f6aa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f6b0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f6b7:	eb 05                	jmp    c001f6be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f6b9:	ba 04 00 00 00       	mov    edx,0x4
c001f6be:	83 c4 14             	add    esp,0x14
c001f6c1:	89 d0                	mov    eax,edx
c001f6c3:	5b                   	pop    ebx
c001f6c4:	5e                   	pop    esi
c001f6c5:	c3                   	ret    

c001f6c6 <ISO9660::openDir(char const*, void**)>:
c001f6c6:	57                   	push   edi
c001f6c7:	56                   	push   esi
c001f6c8:	53                   	push   ebx
c001f6c9:	83 ec 10             	sub    esp,0x10
c001f6cc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f6d0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f6d4:	85 ff                	test   edi,edi
c001f6d6:	0f 84 95 00 00 00    	je     c001f771 <ISO9660::openDir(char const*, void**)+0xab>
c001f6dc:	85 f6                	test   esi,esi
c001f6de:	0f 84 8d 00 00 00    	je     c001f771 <ISO9660::openDir(char const*, void**)+0xab>
c001f6e4:	83 ec 0c             	sub    esp,0xc
c001f6e7:	6a 1c                	push   0x1c
c001f6e9:	e8 72 fa fe ff       	call   c000f160 <malloc>
c001f6ee:	89 07                	mov    DWORD PTR [edi],eax
c001f6f0:	89 c3                	mov    ebx,eax
c001f6f2:	59                   	pop    ecx
c001f6f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f6f7:	50                   	push   eax
c001f6f8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f6fb:	50                   	push   eax
c001f6fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f700:	50                   	push   eax
c001f701:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f705:	50                   	push   eax
c001f706:	56                   	push   esi
c001f707:	e8 d9 fd ff ff       	call   c001f4e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f70c:	83 c4 20             	add    esp,0x20
c001f70f:	84 c0                	test   al,al
c001f711:	74 07                	je     c001f71a <ISO9660::openDir(char const*, void**)+0x54>
c001f713:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f718:	75 21                	jne    c001f73b <ISO9660::openDir(char const*, void**)+0x75>
c001f71a:	0f b6 c0             	movzx  eax,al
c001f71d:	52                   	push   edx
c001f71e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f722:	50                   	push   eax
c001f723:	68 aa 8b 02 c0       	push   0xc0028baa
c001f728:	e8 24 2b ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001f72d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f731:	83 c4 10             	add    esp,0x10
c001f734:	b8 01 00 00 00       	mov    eax,0x1
c001f739:	eb 3b                	jmp    c001f776 <ISO9660::openDir(char const*, void**)+0xb0>
c001f73b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f73f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f743:	89 03                	mov    DWORD PTR [ebx],eax
c001f745:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f74c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f750:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f757:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f75e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f761:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f768:	8a 06                	mov    al,BYTE PTR [esi]
c001f76a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f76d:	31 c0                	xor    eax,eax
c001f76f:	eb 05                	jmp    c001f776 <ISO9660::openDir(char const*, void**)+0xb0>
c001f771:	b8 04 00 00 00       	mov    eax,0x4
c001f776:	83 c4 10             	add    esp,0x10
c001f779:	5b                   	pop    ebx
c001f77a:	5e                   	pop    esi
c001f77b:	5f                   	pop    edi
c001f77c:	c3                   	ret    
c001f77d:	90                   	nop

c001f77e <ISO9660::ISO9660()>:
c001f77e:	83 ec 0c             	sub    esp,0xc
c001f781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f785:	83 ec 0c             	sub    esp,0xc
c001f788:	50                   	push   eax
c001f789:	e8 c8 2d ff ff       	call   c0012556 <Filesystem::Filesystem()>
c001f78e:	83 c4 10             	add    esp,0x10
c001f791:	ba d0 8b 02 c0       	mov    edx,0xc0028bd0
c001f796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79a:	89 10                	mov    DWORD PTR [eax],edx
c001f79c:	90                   	nop
c001f79d:	83 c4 0c             	add    esp,0xc
c001f7a0:	c3                   	ret    
c001f7a1:	90                   	nop

c001f7a2 <SoundChannel::~SoundChannel()>:
c001f7a2:	83 ec 0c             	sub    esp,0xc
c001f7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001f7ac:	83 ec 0c             	sub    esp,0xc
c001f7af:	50                   	push   eax
c001f7b0:	e8 bb f9 fe ff       	call   c000f170 <free>
c001f7b5:	83 c4 10             	add    esp,0x10
c001f7b8:	90                   	nop
c001f7b9:	83 c4 0c             	add    esp,0xc
c001f7bc:	c3                   	ret    
c001f7bd:	90                   	nop

c001f7be <SoundChannel::setSpeed(float)>:
c001f7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7c6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f7c9:	c3                   	ret    

c001f7ca <SoundChannel::getSpeed()>:
c001f7ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7ce:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001f7d1:	c3                   	ret    

c001f7d2 <SoundChannel::setVolume(int)>:
c001f7d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7d6:	83 f8 64             	cmp    eax,0x64
c001f7d9:	7e 05                	jle    c001f7e0 <SoundChannel::setVolume(int)+0xe>
c001f7db:	b8 64 00 00 00       	mov    eax,0x64
c001f7e0:	85 c0                	test   eax,eax
c001f7e2:	79 02                	jns    c001f7e6 <SoundChannel::setVolume(int)+0x14>
c001f7e4:	31 c0                	xor    eax,eax
c001f7e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f7ea:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001f7ed:	c3                   	ret    

c001f7ee <SoundChannel::getVolume()>:
c001f7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001f7f5:	c3                   	ret    

c001f7f6 <SoundChannel::pause()>:
c001f7f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fa:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001f7fe:	c3                   	ret    
c001f7ff:	90                   	nop

c001f800 <SoundChannel::SoundChannel(int, int, int, int)>:
c001f800:	83 ec 1c             	sub    esp,0x1c
c001f803:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f807:	e8 ea ff ff ff       	call   c001f7f6 <SoundChannel::pause()>
c001f80c:	83 c4 04             	add    esp,0x4
c001f80f:	6a 50                	push   0x50
c001f811:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001f815:	e8 b8 ff ff ff       	call   c001f7d2 <SoundChannel::setVolume(int)>
c001f81a:	83 c4 08             	add    esp,0x8
c001f81d:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c001f822:	50                   	push   eax
c001f823:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001f827:	e8 92 ff ff ff       	call   c001f7be <SoundChannel::setSpeed(float)>
c001f82c:	83 c4 08             	add    esp,0x8
c001f82f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f833:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f837:	89 10                	mov    DWORD PTR [eax],edx
c001f839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f83d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f841:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f848:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f84c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f84f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001f854:	75 23                	jne    c001f879 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001f856:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f85a:	8b 10                	mov    edx,DWORD PTR [eax]
c001f85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f860:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f863:	0f af c2             	imul   eax,edx
c001f866:	85 c0                	test   eax,eax
c001f868:	79 03                	jns    c001f86d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001f86a:	83 c0 03             	add    eax,0x3
c001f86d:	c1 f8 02             	sar    eax,0x2
c001f870:	05 a0 0f 00 00       	add    eax,0xfa0
c001f875:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001f879:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f87d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f881:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001f884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f888:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001f88f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f893:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001f89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f89e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001f8a1:	c1 e0 02             	shl    eax,0x2
c001f8a4:	83 ec 0c             	sub    esp,0xc
c001f8a7:	50                   	push   eax
c001f8a8:	e8 b3 f8 fe ff       	call   c000f160 <malloc>
c001f8ad:	83 c4 10             	add    esp,0x10
c001f8b0:	89 c2                	mov    edx,eax
c001f8b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f8b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001f8b9:	83 ec 04             	sub    esp,0x4
c001f8bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f8c0:	50                   	push   eax
c001f8c1:	6a 01                	push   0x1
c001f8c3:	6a 04                	push   0x4
c001f8c5:	e8 be 90 fe ff       	call   c0008988 <src_new>
c001f8ca:	83 c4 10             	add    esp,0x10
c001f8cd:	89 c2                	mov    edx,eax
c001f8cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f8d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001f8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8da:	85 c0                	test   eax,eax
c001f8dc:	74 10                	je     c001f8ee <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001f8de:	83 ec 0c             	sub    esp,0xc
c001f8e1:	68 2c 8c 02 c0       	push   0xc0028c2c
c001f8e6:	e8 e8 9d ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c001f8eb:	83 c4 10             	add    esp,0x10
c001f8ee:	a0 e0 c6 02 c0       	mov    al,ds:0xc002c6e0
c001f8f3:	83 f0 01             	xor    eax,0x1
c001f8f6:	84 c0                	test   al,al
c001f8f8:	74 57                	je     c001f951 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001f8fa:	a1 4c 8c 02 c0       	mov    eax,ds:0xc0028c4c
c001f8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f903:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f90b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001f913:	7f 35                	jg     c001f94a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001f915:	83 ec 0c             	sub    esp,0xc
c001f918:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f91c:	e8 da 42 00 00       	call   c0023bfb <__floatsisf>
c001f921:	83 c4 10             	add    esp,0x10
c001f924:	8b 15 4c 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c4c
c001f92a:	83 ec 08             	sub    esp,0x8
c001f92d:	52                   	push   edx
c001f92e:	50                   	push   eax
c001f92f:	e8 d9 3e 00 00       	call   c002380d <__mulsf3>
c001f934:	83 c4 10             	add    esp,0x10
c001f937:	89 c2                	mov    edx,eax
c001f939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f93d:	89 14 85 e0 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3d20],edx
c001f944:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001f948:	eb c1                	jmp    c001f90b <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001f94a:	c6 05 e0 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6e0,0x1
c001f951:	90                   	nop
c001f952:	83 c4 1c             	add    esp,0x1c
c001f955:	c3                   	ret    

c001f956 <SoundChannel::play()>:
c001f956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f95a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001f95e:	c3                   	ret    
c001f95f:	90                   	nop

c001f960 <SoundChannel::paused()>:
c001f960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f964:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001f967:	c3                   	ret    

c001f968 <SoundChannel::getSampleRate()>:
c001f968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f96c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f96e:	c3                   	ret    
c001f96f:	90                   	nop

c001f970 <SoundChannel::getBits()>:
c001f970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f974:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f977:	c3                   	ret    

c001f978 <SoundChannel::getBufferUsed()>:
c001f978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f97c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001f97f:	c3                   	ret    

c001f980 <SoundChannel::getBufferSize()>:
c001f980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f984:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001f987:	c3                   	ret    

c001f988 <SoundChannel::unbuffer(float*, int, int)>:
c001f988:	56                   	push   esi
c001f989:	53                   	push   ebx
c001f98a:	83 ec 40             	sub    esp,0x40
c001f98d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f991:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f994:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f998:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001f99b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f99f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f9a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001f9a7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f9ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f9af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001f9b3:	e8 43 42 00 00       	call   c0023bfb <__floatsisf>
c001f9b8:	5a                   	pop    edx
c001f9b9:	89 c6                	mov    esi,eax
c001f9bb:	ff 33                	push   DWORD PTR [ebx]
c001f9bd:	e8 39 42 00 00       	call   c0023bfb <__floatsisf>
c001f9c2:	59                   	pop    ecx
c001f9c3:	5a                   	pop    edx
c001f9c4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001f9c7:	50                   	push   eax
c001f9c8:	e8 40 3e 00 00       	call   c002380d <__mulsf3>
c001f9cd:	59                   	pop    ecx
c001f9ce:	5a                   	pop    edx
c001f9cf:	50                   	push   eax
c001f9d0:	56                   	push   esi
c001f9d1:	e8 fa 3f 00 00       	call   c00239d0 <__divsf3>
c001f9d6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9d9:	e8 ed 54 00 00       	call   c0024ecb <__extendsfdf2>
c001f9de:	59                   	pop    ecx
c001f9df:	5e                   	pop    esi
c001f9e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001f9e4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001f9e8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001f9f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f9f4:	50                   	push   eax
c001f9f5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001f9f8:	e8 05 8c fe ff       	call   c0008602 <src_process>
c001f9fd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fa01:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fa04:	83 c4 0c             	add    esp,0xc
c001fa07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fa0a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fa0d:	29 d0                	sub    eax,edx
c001fa0f:	c1 e0 02             	shl    eax,0x2
c001fa12:	50                   	push   eax
c001fa13:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fa16:	50                   	push   eax
c001fa17:	51                   	push   ecx
c001fa18:	e8 5b 0c fe ff       	call   c0000678 <memmove>
c001fa1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fa21:	83 c4 44             	add    esp,0x44
c001fa24:	5b                   	pop    ebx
c001fa25:	5e                   	pop    esi
c001fa26:	c3                   	ret    
c001fa27:	90                   	nop

c001fa28 <SoundChannel::buffer8(unsigned char*, int)>:
c001fa28:	55                   	push   ebp
c001fa29:	57                   	push   edi
c001fa2a:	56                   	push   esi
c001fa2b:	53                   	push   ebx
c001fa2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa30:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fa34:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fa37:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fa3b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fa3e:	74 7a                	je     c001faba <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fa40:	85 ff                	test   edi,edi
c001fa42:	7e 76                	jle    c001faba <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fa44:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fa48:	8d 70 01             	lea    esi,[eax+0x1]
c001fa4b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fa4e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fa51:	8b 1c 9d e0 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3d20]
c001fa58:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fa5b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fa5e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fa61:	74 5e                	je     c001fac1 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fa63:	83 ff 01             	cmp    edi,0x1
c001fa66:	74 4b                	je     c001fab3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fa68:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fa6c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fa6f:	8d 70 01             	lea    esi,[eax+0x1]
c001fa72:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fa75:	8b 1c 9d e0 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3d20]
c001fa7c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fa7f:	b8 02 00 00 00       	mov    eax,0x2
c001fa84:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fa87:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fa8a:	75 23                	jne    c001faaf <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fa8c:	eb 27                	jmp    c001fab5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fa8e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fa93:	8d 71 01             	lea    esi,[ecx+0x1]
c001fa96:	40                   	inc    eax
c001fa97:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fa9a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fa9d:	8b 1c 9d e0 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3d20]
c001faa4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001faa7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001faaa:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001faad:	74 06                	je     c001fab5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001faaf:	39 c7                	cmp    edi,eax
c001fab1:	75 db                	jne    c001fa8e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fab3:	89 f8                	mov    eax,edi
c001fab5:	5b                   	pop    ebx
c001fab6:	5e                   	pop    esi
c001fab7:	5f                   	pop    edi
c001fab8:	5d                   	pop    ebp
c001fab9:	c3                   	ret    
c001faba:	5b                   	pop    ebx
c001fabb:	31 c0                	xor    eax,eax
c001fabd:	5e                   	pop    esi
c001fabe:	5f                   	pop    edi
c001fabf:	5d                   	pop    ebp
c001fac0:	c3                   	ret    
c001fac1:	b8 01 00 00 00       	mov    eax,0x1
c001fac6:	eb ed                	jmp    c001fab5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fac8 <SoundDevice::SoundDevice(char const*)>:
c001fac8:	83 ec 1c             	sub    esp,0x1c
c001facb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001facf:	83 ec 08             	sub    esp,0x8
c001fad2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fad6:	50                   	push   eax
c001fad7:	e8 70 3d ff ff       	call   c001384c <Device::Device(char const*)>
c001fadc:	83 c4 10             	add    esp,0x10
c001fadf:	ba 58 8c 02 c0       	mov    edx,0xc0028c58
c001fae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fae8:	89 10                	mov    DWORD PTR [eax],edx
c001faea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faee:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001faf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fafc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fb06:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fb0e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fb13:	7f 19                	jg     c001fb2e <SoundDevice::SoundDevice(char const*)+0x66>
c001fb15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fb1d:	83 c2 54             	add    edx,0x54
c001fb20:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fb28:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fb2c:	eb e0                	jmp    c001fb0e <SoundDevice::SoundDevice(char const*)+0x46>
c001fb2e:	90                   	nop
c001fb2f:	83 c4 1c             	add    esp,0x1c
c001fb32:	c3                   	ret    
c001fb33:	90                   	nop

c001fb34 <SoundDevice::~SoundDevice()>:
c001fb34:	53                   	push   ebx
c001fb35:	83 ec 18             	sub    esp,0x18
c001fb38:	ba 58 8c 02 c0       	mov    edx,0xc0028c58
c001fb3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb41:	89 10                	mov    DWORD PTR [eax],edx
c001fb43:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fb4b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fb50:	7f 46                	jg     c001fb98 <SoundDevice::~SoundDevice()+0x64>
c001fb52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fb5a:	83 c2 54             	add    edx,0x54
c001fb5d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fb61:	85 c0                	test   eax,eax
c001fb63:	74 2d                	je     c001fb92 <SoundDevice::~SoundDevice()+0x5e>
c001fb65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fb6d:	83 c2 54             	add    edx,0x54
c001fb70:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fb74:	85 db                	test   ebx,ebx
c001fb76:	74 1a                	je     c001fb92 <SoundDevice::~SoundDevice()+0x5e>
c001fb78:	83 ec 0c             	sub    esp,0xc
c001fb7b:	53                   	push   ebx
c001fb7c:	e8 21 fc ff ff       	call   c001f7a2 <SoundChannel::~SoundChannel()>
c001fb81:	83 c4 10             	add    esp,0x10
c001fb84:	83 ec 08             	sub    esp,0x8
c001fb87:	6a 2c                	push   0x2c
c001fb89:	53                   	push   ebx
c001fb8a:	e8 e2 25 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001fb8f:	83 c4 10             	add    esp,0x10
c001fb92:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fb96:	eb b3                	jmp    c001fb4b <SoundDevice::~SoundDevice()+0x17>
c001fb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb9c:	83 ec 0c             	sub    esp,0xc
c001fb9f:	50                   	push   eax
c001fba0:	e8 59 39 ff ff       	call   c00134fe <Device::~Device()>
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	90                   	nop
c001fba9:	83 c4 18             	add    esp,0x18
c001fbac:	5b                   	pop    ebx
c001fbad:	c3                   	ret    

c001fbae <SoundDevice::~SoundDevice()>:
c001fbae:	83 ec 0c             	sub    esp,0xc
c001fbb1:	83 ec 0c             	sub    esp,0xc
c001fbb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbb8:	e8 77 ff ff ff       	call   c001fb34 <SoundDevice::~SoundDevice()>
c001fbbd:	83 c4 10             	add    esp,0x10
c001fbc0:	83 ec 08             	sub    esp,0x8
c001fbc3:	68 e4 01 00 00       	push   0x1e4
c001fbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbcc:	e8 a0 25 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001fbd1:	83 c4 10             	add    esp,0x10
c001fbd4:	83 c4 0c             	add    esp,0xc
c001fbd7:	c3                   	ret    

c001fbd8 <SoundDevice::getFreeChannelNum()>:
c001fbd8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fbdc:	31 c0                	xor    eax,eax
c001fbde:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001fbe6:	74 09                	je     c001fbf1 <SoundDevice::getFreeChannelNum()+0x19>
c001fbe8:	40                   	inc    eax
c001fbe9:	83 f8 20             	cmp    eax,0x20
c001fbec:	75 f0                	jne    c001fbde <SoundDevice::getFreeChannelNum()+0x6>
c001fbee:	83 c8 ff             	or     eax,0xffffffff
c001fbf1:	c3                   	ret    

c001fbf2 <SoundDevice::addChannel(SoundChannel*)>:
c001fbf2:	56                   	push   esi
c001fbf3:	53                   	push   ebx
c001fbf4:	51                   	push   ecx
c001fbf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fbf9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fbfd:	53                   	push   ebx
c001fbfe:	e8 d5 ff ff ff       	call   c001fbd8 <SoundDevice::getFreeChannelNum()>
c001fc03:	5a                   	pop    edx
c001fc04:	83 f8 ff             	cmp    eax,0xffffffff
c001fc07:	74 51                	je     c001fc5a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fc09:	85 f6                	test   esi,esi
c001fc0b:	74 4d                	je     c001fc5a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fc0d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001fc14:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001fc1b:	75 30                	jne    c001fc4d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001fc1d:	83 ec 0c             	sub    esp,0xc
c001fc20:	56                   	push   esi
c001fc21:	e8 42 fd ff ff       	call   c001f968 <SoundChannel::getSampleRate()>
c001fc26:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001fc2c:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc2f:	e8 3c fd ff ff       	call   c001f970 <SoundChannel::getBits()>
c001fc34:	83 c4 0c             	add    esp,0xc
c001fc37:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001fc3d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001fc3f:	50                   	push   eax
c001fc40:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001fc46:	53                   	push   ebx
c001fc47:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001fc4a:	83 c4 10             	add    esp,0x10
c001fc4d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001fc53:	b8 01 00 00 00       	mov    eax,0x1
c001fc58:	eb 03                	jmp    c001fc5d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001fc5a:	83 c8 ff             	or     eax,0xffffffff
c001fc5d:	5a                   	pop    edx
c001fc5e:	5b                   	pop    ebx
c001fc5f:	5e                   	pop    esi
c001fc60:	c3                   	ret    
c001fc61:	90                   	nop

c001fc62 <SoundDevice::removeChannel(int)>:
c001fc62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fc66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6a:	83 fa 1f             	cmp    edx,0x1f
c001fc6d:	77 23                	ja     c001fc92 <SoundDevice::removeChannel(int)+0x30>
c001fc6f:	8d 14 90             	lea    edx,[eax+edx*4]
c001fc72:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001fc79:	74 17                	je     c001fc92 <SoundDevice::removeChannel(int)+0x30>
c001fc7b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001fc85:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001fc8b:	75 05                	jne    c001fc92 <SoundDevice::removeChannel(int)+0x30>
c001fc8d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc8f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001fc92:	c3                   	ret    
c001fc93:	90                   	nop

c001fc94 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001fc94:	57                   	push   edi
c001fc95:	56                   	push   esi
c001fc96:	53                   	push   ebx
c001fc97:	31 db                	xor    ebx,ebx
c001fc99:	83 ec 10             	sub    esp,0x10
c001fc9c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001fca0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001fca4:	0f 8d cb 00 00 00    	jge    c001fd75 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001fcaa:	83 ec 0c             	sub    esp,0xc
c001fcad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fcb1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001fcb4:	e8 12 52 00 00       	call   c0024ecb <__extendsfdf2>
c001fcb9:	83 c4 10             	add    esp,0x10
c001fcbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fcc4:	68 00 00 f0 3f       	push   0x3ff00000
c001fcc9:	6a 00                	push   0x0
c001fccb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fccf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fcd3:	e8 7f 41 00 00       	call   c0023e57 <__adddf3>
c001fcd8:	83 c4 10             	add    esp,0x10
c001fcdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fce3:	68 00 00 e0 3f       	push   0x3fe00000
c001fce8:	6a 00                	push   0x0
c001fcea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fcee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fcf2:	e8 dd 47 00 00       	call   c00244d4 <__muldf3>
c001fcf7:	83 c4 10             	add    esp,0x10
c001fcfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcfe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fd02:	68 00 00 60 40       	push   0x40600000
c001fd07:	6a 00                	push   0x0
c001fd09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fd0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fd11:	e8 be 47 00 00       	call   c00244d4 <__muldf3>
c001fd16:	59                   	pop    ecx
c001fd17:	5f                   	pop    edi
c001fd18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fd1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001fd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fd28:	e8 7a 50 00 00       	call   c0024da7 <__truncdfsf2>
c001fd2d:	5a                   	pop    edx
c001fd2e:	89 c7                	mov    edi,eax
c001fd30:	59                   	pop    ecx
c001fd31:	68 00 00 fe 42       	push   0x42fe0000
c001fd36:	50                   	push   eax
c001fd37:	e8 15 41 00 00       	call   c0023e51 <__gesf2>
c001fd3c:	83 c4 10             	add    esp,0x10
c001fd3f:	85 c0                	test   eax,eax
c001fd41:	78 06                	js     c001fd49 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c001fd43:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001fd47:	eb 26                	jmp    c001fd6f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001fd49:	50                   	push   eax
c001fd4a:	50                   	push   eax
c001fd4b:	6a 00                	push   0x0
c001fd4d:	57                   	push   edi
c001fd4e:	e8 02 41 00 00       	call   c0023e55 <__lesf2>
c001fd53:	83 c4 10             	add    esp,0x10
c001fd56:	85 c0                	test   eax,eax
c001fd58:	7f 06                	jg     c001fd60 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c001fd5a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001fd5e:	eb 0f                	jmp    c001fd6f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001fd60:	83 ec 0c             	sub    esp,0xc
c001fd63:	57                   	push   edi
c001fd64:	e8 03 52 00 00       	call   c0024f6c <lrintf>
c001fd69:	83 c4 10             	add    esp,0x10
c001fd6c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001fd6f:	43                   	inc    ebx
c001fd70:	e9 2b ff ff ff       	jmp    c001fca0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c001fd75:	83 c4 10             	add    esp,0x10
c001fd78:	5b                   	pop    ebx
c001fd79:	5e                   	pop    esi
c001fd7a:	5f                   	pop    edi
c001fd7b:	c3                   	ret    

c001fd7c <SoundDevice::getAudio(int, float*, float*)>:
c001fd7c:	55                   	push   ebp
c001fd7d:	57                   	push   edi
c001fd7e:	56                   	push   esi
c001fd7f:	53                   	push   ebx
c001fd80:	31 db                	xor    ebx,ebx
c001fd82:	83 ec 20             	sub    esp,0x20
c001fd85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fd89:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fd8d:	c1 e0 02             	shl    eax,0x2
c001fd90:	50                   	push   eax
c001fd91:	6a 00                	push   0x0
c001fd93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fd97:	e8 4a 09 fe ff       	call   c00006e6 <memset>
c001fd9c:	83 c4 10             	add    esp,0x10
c001fd9f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fda3:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001fdaa:	85 c0                	test   eax,eax
c001fdac:	0f 84 d7 00 00 00    	je     c001fe89 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001fdb2:	83 ec 0c             	sub    esp,0xc
c001fdb5:	50                   	push   eax
c001fdb6:	e8 a5 fb ff ff       	call   c001f960 <SoundChannel::paused()>
c001fdbb:	83 c4 10             	add    esp,0x10
c001fdbe:	84 c0                	test   al,al
c001fdc0:	0f 85 c3 00 00 00    	jne    c001fe89 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001fdc6:	83 ec 0c             	sub    esp,0xc
c001fdc9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001fdd0:	e8 19 fa ff ff       	call   c001f7ee <SoundChannel::getVolume()>
c001fdd5:	83 c4 10             	add    esp,0x10
c001fdd8:	85 c0                	test   eax,eax
c001fdda:	0f 84 a9 00 00 00    	je     c001fe89 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001fdea:	e8 ff f9 ff ff       	call   c001f7ee <SoundChannel::getVolume()>
c001fdef:	83 ec 0c             	sub    esp,0xc
c001fdf2:	50                   	push   eax
c001fdf3:	e8 03 3e 00 00       	call   c0023bfb <__floatsisf>
c001fdf8:	59                   	pop    ecx
c001fdf9:	5d                   	pop    ebp
c001fdfa:	31 ed                	xor    ebp,ebp
c001fdfc:	68 00 00 c8 42       	push   0x42c80000
c001fe01:	50                   	push   eax
c001fe02:	e8 c9 3b 00 00       	call   c00239d0 <__divsf3>
c001fe07:	83 c4 10             	add    esp,0x10
c001fe0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fe0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001fe12:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001fe18:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001fe1c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001fe23:	e8 60 fb ff ff       	call   c001f988 <SoundChannel::unbuffer(float*, int, int)>
c001fe28:	83 c4 20             	add    esp,0x20
c001fe2b:	89 c1                	mov    ecx,eax
c001fe2d:	39 cd                	cmp    ebp,ecx
c001fe2f:	7d 52                	jge    c001fe83 <SoundDevice::getAudio(int, float*, float*)+0x107>
c001fe31:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fe35:	50                   	push   eax
c001fe36:	50                   	push   eax
c001fe37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001fe3b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c001fe3e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fe42:	e8 c6 39 00 00       	call   c002380d <__mulsf3>
c001fe47:	5a                   	pop    edx
c001fe48:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fe4c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c001fe52:	e8 a4 3d 00 00       	call   c0023bfb <__floatsisf>
c001fe57:	59                   	pop    ecx
c001fe58:	5a                   	pop    edx
c001fe59:	50                   	push   eax
c001fe5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fe5e:	e8 6d 3b 00 00       	call   c00239d0 <__divsf3>
c001fe63:	59                   	pop    ecx
c001fe64:	5a                   	pop    edx
c001fe65:	50                   	push   eax
c001fe66:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001fe6a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c001fe6d:	e8 78 36 00 00       	call   c00234ea <__addsf3>
c001fe72:	83 c4 10             	add    esp,0x10
c001fe75:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fe79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe7d:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c001fe80:	45                   	inc    ebp
c001fe81:	eb aa                	jmp    c001fe2d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c001fe83:	39 cf                	cmp    edi,ecx
c001fe85:	7e 02                	jle    c001fe89 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001fe87:	89 cf                	mov    edi,ecx
c001fe89:	43                   	inc    ebx
c001fe8a:	83 fb 20             	cmp    ebx,0x20
c001fe8d:	0f 85 10 ff ff ff    	jne    c001fda3 <SoundDevice::getAudio(int, float*, float*)+0x27>
c001fe93:	83 c4 1c             	add    esp,0x1c
c001fe96:	89 f8                	mov    eax,edi
c001fe98:	5b                   	pop    ebx
c001fe99:	5e                   	pop    esi
c001fe9a:	5f                   	pop    edi
c001fe9b:	5d                   	pop    ebp
c001fe9c:	c3                   	ret    
c001fe9d:	90                   	nop

c001fe9e <PCI::open(int, int, void*)>:
c001fe9e:	83 ec 18             	sub    esp,0x18
c001fea1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fea5:	8b 10                	mov    edx,DWORD PTR [eax]
c001fea7:	50                   	push   eax
c001fea8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001feab:	31 c0                	xor    eax,eax
c001fead:	83 c4 1c             	add    esp,0x1c
c001feb0:	c3                   	ret    
c001feb1:	90                   	nop

c001feb2 <PCI::close(int, int, void*)>:
c001feb2:	31 c0                	xor    eax,eax
c001feb4:	c3                   	ret    
c001feb5:	90                   	nop

c001feb6 <PCI::PCI()>:
c001feb6:	83 ec 0c             	sub    esp,0xc
c001feb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febd:	83 ec 08             	sub    esp,0x8
c001fec0:	68 88 8c 02 c0       	push   0xc0028c88
c001fec5:	50                   	push   eax
c001fec6:	e8 0d 30 ff ff       	call   c0012ed8 <Bus::Bus(char const*)>
c001fecb:	83 c4 10             	add    esp,0x10
c001fece:	ba 14 8d 02 c0       	mov    edx,0xc0028d14
c001fed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed7:	89 10                	mov    DWORD PTR [eax],edx
c001fed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fedd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001fee3:	0f b6 d0             	movzx  edx,al
c001fee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feea:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001fef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001fefb:	0f b6 d0             	movzx  edx,al
c001fefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff02:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ff07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ff11:	8d 50 01             	lea    edx,[eax+0x1]
c001ff14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ff18:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ff1e:	0f b6 d0             	movzx  edx,al
c001ff21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff25:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ff29:	83 c9 c0             	or     ecx,0xffffffc0
c001ff2c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ff30:	90                   	nop
c001ff31:	83 c4 0c             	add    esp,0xc
c001ff34:	c3                   	ret    
c001ff35:	90                   	nop

c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ff36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ff3a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ff3f:	89 ca                	mov    edx,ecx
c001ff41:	c1 e0 10             	shl    eax,0x10
c001ff44:	81 e2 fc 00 00 00    	and    edx,0xfc
c001ff4a:	09 d0                	or     eax,edx
c001ff4c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001ff51:	c1 e2 08             	shl    edx,0x8
c001ff54:	09 d0                	or     eax,edx
c001ff56:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001ff5b:	c1 e2 0b             	shl    edx,0xb
c001ff5e:	09 d0                	or     eax,edx
c001ff60:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ff65:	0d 00 00 00 80       	or     eax,0x80000000
c001ff6a:	ef                   	out    dx,eax
c001ff6b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ff70:	ed                   	in     eax,dx
c001ff71:	83 e1 02             	and    ecx,0x2
c001ff74:	0f b6 c9             	movzx  ecx,cl
c001ff77:	c1 e1 03             	shl    ecx,0x3
c001ff7a:	d3 e8                	shr    eax,cl
c001ff7c:	c3                   	ret    
c001ff7d:	90                   	nop

c001ff7e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ff7e:	6a 00                	push   0x0
c001ff80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ff85:	50                   	push   eax
c001ff86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ff8b:	50                   	push   eax
c001ff8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ff91:	50                   	push   eax
c001ff92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff96:	e8 9b ff ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ff9b:	83 c4 14             	add    esp,0x14
c001ff9e:	c3                   	ret    
c001ff9f:	90                   	nop

c001ffa0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ffa0:	6a 0e                	push   0xe
c001ffa2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ffa7:	50                   	push   eax
c001ffa8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ffad:	50                   	push   eax
c001ffae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ffb3:	50                   	push   eax
c001ffb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffb8:	e8 79 ff ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ffbd:	83 c4 14             	add    esp,0x14
c001ffc0:	0f b6 c0             	movzx  eax,al
c001ffc3:	c3                   	ret    

c001ffc4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ffc4:	55                   	push   ebp
c001ffc5:	57                   	push   edi
c001ffc6:	56                   	push   esi
c001ffc7:	53                   	push   ebx
c001ffc8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ffcd:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001ffd2:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001ffd7:	6a 0a                	push   0xa
c001ffd9:	56                   	push   esi
c001ffda:	55                   	push   ebp
c001ffdb:	57                   	push   edi
c001ffdc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ffe0:	e8 51 ff ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ffe5:	6a 0a                	push   0xa
c001ffe7:	89 c3                	mov    ebx,eax
c001ffe9:	56                   	push   esi
c001ffea:	0f b6 db             	movzx  ebx,bl
c001ffed:	55                   	push   ebp
c001ffee:	57                   	push   edi
c001ffef:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001fff3:	e8 3e ff ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001fff8:	83 c4 28             	add    esp,0x28
c001fffb:	25 00 ff 00 00       	and    eax,0xff00
c0020000:	09 d8                	or     eax,ebx
c0020002:	5b                   	pop    ebx
c0020003:	5e                   	pop    esi
c0020004:	5f                   	pop    edi
c0020005:	5d                   	pop    ebp
c0020006:	c3                   	ret    
c0020007:	90                   	nop

c0020008 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020008:	6a 08                	push   0x8
c002000a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002000f:	50                   	push   eax
c0020010:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020015:	50                   	push   eax
c0020016:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002001b:	50                   	push   eax
c002001c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020020:	e8 11 ff ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020025:	83 c4 14             	add    esp,0x14
c0020028:	0f b6 c4             	movzx  eax,ah
c002002b:	c3                   	ret    

c002002c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002002c:	6a 08                	push   0x8
c002002e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020033:	50                   	push   eax
c0020034:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020039:	50                   	push   eax
c002003a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002003f:	50                   	push   eax
c0020040:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020044:	e8 ed fe ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020049:	83 c4 14             	add    esp,0x14
c002004c:	c3                   	ret    
c002004d:	90                   	nop

c002004e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002004e:	6a 3c                	push   0x3c
c0020050:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020055:	50                   	push   eax
c0020056:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002005b:	50                   	push   eax
c002005c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020061:	50                   	push   eax
c0020062:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020066:	e8 cb fe ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002006b:	83 c4 14             	add    esp,0x14
c002006e:	c3                   	ret    
c002006f:	90                   	nop

c0020070 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020070:	6a 18                	push   0x18
c0020072:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020077:	50                   	push   eax
c0020078:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002007d:	50                   	push   eax
c002007e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020083:	50                   	push   eax
c0020084:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020088:	e8 a9 fe ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002008d:	83 c4 14             	add    esp,0x14
c0020090:	0f b6 c4             	movzx  eax,ah
c0020093:	c3                   	ret    

c0020094 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020094:	55                   	push   ebp
c0020095:	57                   	push   edi
c0020096:	56                   	push   esi
c0020097:	53                   	push   ebx
c0020098:	50                   	push   eax
c0020099:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002009d:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00200a2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00200a7:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00200ac:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00200b3:	8d 43 12             	lea    eax,[ebx+0x12]
c00200b6:	83 c3 10             	add    ebx,0x10
c00200b9:	0f b6 c0             	movzx  eax,al
c00200bc:	0f b6 db             	movzx  ebx,bl
c00200bf:	50                   	push   eax
c00200c0:	51                   	push   ecx
c00200c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00200c5:	57                   	push   edi
c00200c6:	55                   	push   ebp
c00200c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00200cb:	e8 66 fe ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00200d0:	53                   	push   ebx
c00200d1:	89 c6                	mov    esi,eax
c00200d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00200d7:	c1 e6 10             	shl    esi,0x10
c00200da:	51                   	push   ecx
c00200db:	57                   	push   edi
c00200dc:	55                   	push   ebp
c00200dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00200e1:	e8 50 fe ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00200e6:	83 c4 2c             	add    esp,0x2c
c00200e9:	0f b7 c0             	movzx  eax,ax
c00200ec:	5b                   	pop    ebx
c00200ed:	09 f0                	or     eax,esi
c00200ef:	5e                   	pop    esi
c00200f0:	5f                   	pop    edi
c00200f1:	5d                   	pop    ebp
c00200f2:	c3                   	ret    
c00200f3:	90                   	nop

c00200f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00200f4:	53                   	push   ebx
c00200f5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00200fa:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00200ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020103:	c1 e1 10             	shl    ecx,0x10
c0020106:	25 fc 00 00 00       	and    eax,0xfc
c002010b:	09 c1                	or     ecx,eax
c002010d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020112:	c1 e0 08             	shl    eax,0x8
c0020115:	09 c1                	or     ecx,eax
c0020117:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002011c:	c1 e0 0b             	shl    eax,0xb
c002011f:	09 c1                	or     ecx,eax
c0020121:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020127:	89 c8                	mov    eax,ecx
c0020129:	ef                   	out    dx,eax
c002012a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002012f:	ed                   	in     eax,dx
c0020130:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020135:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002013a:	74 0a                	je     c0020146 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002013c:	0f b7 d8             	movzx  ebx,ax
c002013f:	89 d0                	mov    eax,edx
c0020141:	c1 e0 10             	shl    eax,0x10
c0020144:	eb 05                	jmp    c002014b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020146:	66 31 c0             	xor    ax,ax
c0020149:	89 d3                	mov    ebx,edx
c002014b:	09 c3                	or     ebx,eax
c002014d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020152:	89 c8                	mov    eax,ecx
c0020154:	ef                   	out    dx,eax
c0020155:	ba fc 0c 00 00       	mov    edx,0xcfc
c002015a:	89 d8                	mov    eax,ebx
c002015c:	ef                   	out    dx,eax
c002015d:	5b                   	pop    ebx
c002015e:	c3                   	ret    
c002015f:	90                   	nop

c0020160 <PCI::checkBus(unsigned char)>:
c0020160:	56                   	push   esi
c0020161:	53                   	push   ebx
c0020162:	31 db                	xor    ebx,ebx
c0020164:	51                   	push   ecx
c0020165:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002016a:	52                   	push   edx
c002016b:	53                   	push   ebx
c002016c:	43                   	inc    ebx
c002016d:	56                   	push   esi
c002016e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020172:	e8 29 03 00 00       	call   c00204a0 <PCI::checkDevice(unsigned char, unsigned char)>
c0020177:	83 c4 10             	add    esp,0x10
c002017a:	83 fb 20             	cmp    ebx,0x20
c002017d:	75 eb                	jne    c002016a <PCI::checkBus(unsigned char)+0xa>
c002017f:	58                   	pop    eax
c0020180:	5b                   	pop    ebx
c0020181:	5e                   	pop    esi
c0020182:	c3                   	ret    
c0020183:	90                   	nop

c0020184 <PCI::foundDevice(PCIDeviceInfo)>:
c0020184:	55                   	push   ebp
c0020185:	57                   	push   edi
c0020186:	56                   	push   esi
c0020187:	53                   	push   ebx
c0020188:	83 ec 1c             	sub    esp,0x1c
c002018b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002018f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0020195:	0f 84 51 01 00 00    	je     c00202ec <PCI::foundDevice(PCIDeviceInfo)+0x168>
c002019b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002019f:	66 81 f9 06 04       	cmp    cx,0x406
c00201a4:	75 2c                	jne    c00201d2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00201a6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00201ab:	50                   	push   eax
c00201ac:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00201b1:	50                   	push   eax
c00201b2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00201b7:	50                   	push   eax
c00201b8:	56                   	push   esi
c00201b9:	e8 b2 fe ff ff       	call   c0020070 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00201be:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00201c2:	0f b6 c0             	movzx  eax,al
c00201c5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00201c9:	83 c4 2c             	add    esp,0x2c
c00201cc:	5b                   	pop    ebx
c00201cd:	5e                   	pop    esi
c00201ce:	5f                   	pop    edi
c00201cf:	5d                   	pop    ebp
c00201d0:	eb 8e                	jmp    c0020160 <PCI::checkBus(unsigned char)>
c00201d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00201d6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00201dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00201e0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00201e4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00201e8:	88 d3                	mov    bl,dl
c00201ea:	85 c0                	test   eax,eax
c00201ec:	74 33                	je     c0020221 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00201ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00201f1:	85 d2                	test   edx,edx
c00201f3:	74 28                	je     c002021d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00201f5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00201fb:	31 ef                	xor    edi,ebp
c00201fd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020203:	75 18                	jne    c002021d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020205:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020209:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002020f:	75 0c                	jne    c002021d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020211:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020217:	0f 84 cf 00 00 00    	je     c00202ec <PCI::foundDevice(PCIDeviceInfo)+0x168>
c002021d:	8b 00                	mov    eax,DWORD PTR [eax]
c002021f:	eb c9                	jmp    c00201ea <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020221:	66 81 f9 01 06       	cmp    cx,0x601
c0020226:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002022a:	75 18                	jne    c0020244 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c002022c:	83 ec 0c             	sub    esp,0xc
c002022f:	68 58 01 00 00       	push   0x158
c0020234:	e8 29 1f ff ff       	call   c0012162 <operator new(unsigned long)>
c0020239:	59                   	pop    ecx
c002023a:	89 c5                	mov    ebp,eax
c002023c:	5f                   	pop    edi
c002023d:	68 90 8c 02 c0       	push   0xc0028c90
c0020242:	eb 7d                	jmp    c00202c1 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020244:	66 81 f9 01 01       	cmp    cx,0x101
c0020249:	75 60                	jne    c00202ab <PCI::foundDevice(PCIDeviceInfo)+0x127>
c002024b:	83 ec 0c             	sub    esp,0xc
c002024e:	68 70 02 00 00       	push   0x270
c0020253:	e8 0a 1f ff ff       	call   c0012162 <operator new(unsigned long)>
c0020258:	89 04 24             	mov    DWORD PTR [esp],eax
c002025b:	89 c5                	mov    ebp,eax
c002025d:	e8 02 03 00 00       	call   c0020564 <IDE::IDE()>
c0020262:	58                   	pop    eax
c0020263:	5a                   	pop    edx
c0020264:	55                   	push   ebp
c0020265:	56                   	push   esi
c0020266:	e8 f1 33 ff ff       	call   c001365c <Device::addChild(Device*)>
c002026b:	83 ec 1c             	sub    esp,0x1c
c002026e:	b9 09 00 00 00       	mov    ecx,0x9
c0020273:	fc                   	cld    
c0020274:	89 e7                	mov    edi,esp
c0020276:	89 de                	mov    esi,ebx
c0020278:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002027a:	55                   	push   ebp
c002027b:	e8 b6 32 ff ff       	call   c0013536 <Device::preOpenPCI(PCIDeviceInfo)>
c0020280:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020283:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020287:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002028f:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0020297:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002029f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202a2:	83 c4 4c             	add    esp,0x4c
c00202a5:	5b                   	pop    ebx
c00202a6:	5e                   	pop    esi
c00202a7:	5f                   	pop    edi
c00202a8:	5d                   	pop    ebp
c00202a9:	ff e0                	jmp    eax
c00202ab:	83 ec 0c             	sub    esp,0xc
c00202ae:	68 58 01 00 00       	push   0x158
c00202b3:	e8 aa 1e ff ff       	call   c0012162 <operator new(unsigned long)>
c00202b8:	59                   	pop    ecx
c00202b9:	89 c5                	mov    ebp,eax
c00202bb:	5f                   	pop    edi
c00202bc:	68 af 8c 02 c0       	push   0xc0028caf
c00202c1:	55                   	push   ebp
c00202c2:	e8 81 36 ff ff       	call   c0013948 <DriverlessDevice::DriverlessDevice(char const*)>
c00202c7:	58                   	pop    eax
c00202c8:	5a                   	pop    edx
c00202c9:	55                   	push   ebp
c00202ca:	56                   	push   esi
c00202cb:	e8 8c 33 ff ff       	call   c001365c <Device::addChild(Device*)>
c00202d0:	b9 09 00 00 00       	mov    ecx,0x9
c00202d5:	fc                   	cld    
c00202d6:	89 df                	mov    edi,ebx
c00202d8:	89 de                	mov    esi,ebx
c00202da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00202dc:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00202e0:	83 c4 2c             	add    esp,0x2c
c00202e3:	5b                   	pop    ebx
c00202e4:	5e                   	pop    esi
c00202e5:	5f                   	pop    edi
c00202e6:	5d                   	pop    ebp
c00202e7:	e9 4a 32 ff ff       	jmp    c0013536 <Device::preOpenPCI(PCIDeviceInfo)>
c00202ec:	83 c4 1c             	add    esp,0x1c
c00202ef:	5b                   	pop    ebx
c00202f0:	5e                   	pop    esi
c00202f1:	5f                   	pop    edi
c00202f2:	5d                   	pop    ebp
c00202f3:	c3                   	ret    

c00202f4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00202f4:	55                   	push   ebp
c00202f5:	57                   	push   edi
c00202f6:	56                   	push   esi
c00202f7:	53                   	push   ebx
c00202f8:	83 ec 5c             	sub    esp,0x5c
c00202fb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00202ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020303:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020307:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002030c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020310:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020314:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020319:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002031d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020322:	6a 0c                	push   0xc
c0020324:	55                   	push   ebp
c0020325:	53                   	push   ebx
c0020326:	57                   	push   edi
c0020327:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c002032e:	e8 03 fc ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020333:	55                   	push   ebp
c0020334:	53                   	push   ebx
c0020335:	57                   	push   edi
c0020336:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002033d:	e8 82 fc ff ff       	call   c001ffc4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020342:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020347:	83 c4 24             	add    esp,0x24
c002034a:	55                   	push   ebp
c002034b:	53                   	push   ebx
c002034c:	57                   	push   edi
c002034d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020351:	e8 f8 fc ff ff       	call   c002004e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020356:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002035a:	6a 3c                	push   0x3c
c002035c:	55                   	push   ebp
c002035d:	53                   	push   ebx
c002035e:	57                   	push   edi
c002035f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020366:	e8 cb fb ff ff       	call   c001ff36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002036b:	0f b6 c4             	movzx  eax,ah
c002036e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020372:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020376:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002037a:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c002037f:	83 c4 24             	add    esp,0x24
c0020382:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020388:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c002038f:	74 6c                	je     c00203fd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020391:	31 f6                	xor    esi,esi
c0020393:	8b 15 e8 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a4e8
c0020399:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002039f:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c00203a5:	7e 56                	jle    c00203fd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00203a7:	8d 14 f2             	lea    edx,[edx+esi*8]
c00203aa:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00203b1:	39 cb                	cmp    ebx,ecx
c00203b3:	75 45                	jne    c00203fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00203b5:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00203bc:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00203c0:	75 38                	jne    c00203fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00203c2:	83 ec 0c             	sub    esp,0xc
c00203c5:	68 c9 8c 02 c0       	push   0xc0028cc9
c00203ca:	e8 82 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00203cf:	8b 15 e8 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a4e8
c00203d5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00203db:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00203e3:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00203e7:	52                   	push   edx
c00203e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00203ec:	53                   	push   ebx
c00203ed:	68 ee 8c 02 c0       	push   0xc0028cee
c00203f2:	e8 5a 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00203f7:	83 c4 20             	add    esp,0x20
c00203fa:	46                   	inc    esi
c00203fb:	eb 96                	jmp    c0020393 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00203fd:	31 d2                	xor    edx,edx
c00203ff:	83 ec 0c             	sub    esp,0xc
c0020402:	55                   	push   ebp
c0020403:	53                   	push   ebx
c0020404:	57                   	push   edi
c0020405:	52                   	push   edx
c0020406:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002040a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020411:	e8 7e fc ff ff       	call   c0020094 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020416:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002041a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002041e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020422:	42                   	inc    edx
c0020423:	83 c4 20             	add    esp,0x20
c0020426:	83 fa 06             	cmp    edx,0x6
c0020429:	75 d4                	jne    c00203ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002042b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002042f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020433:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020437:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002043b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002043f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020443:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020448:	86 e0                	xchg   al,ah
c002044a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002044f:	55                   	push   ebp
c0020450:	53                   	push   ebx
c0020451:	57                   	push   edi
c0020452:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020456:	e8 ad fb ff ff       	call   c0020008 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002045b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002045f:	55                   	push   ebp
c0020460:	53                   	push   ebx
c0020461:	57                   	push   edi
c0020462:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020469:	e8 10 fb ff ff       	call   c001ff7e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002046e:	83 ec 0c             	sub    esp,0xc
c0020471:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020476:	b9 09 00 00 00       	mov    ecx,0x9
c002047b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002047f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0020483:	fc                   	cld    
c0020484:	89 e7                	mov    edi,esp
c0020486:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020488:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002048f:	e8 f0 fc ff ff       	call   c0020184 <PCI::foundDevice(PCIDeviceInfo)>
c0020494:	81 c4 8c 00 00 00    	add    esp,0x8c
c002049a:	5b                   	pop    ebx
c002049b:	5e                   	pop    esi
c002049c:	5f                   	pop    edi
c002049d:	5d                   	pop    ebp
c002049e:	c3                   	ret    
c002049f:	90                   	nop

c00204a0 <PCI::checkDevice(unsigned char, unsigned char)>:
c00204a0:	55                   	push   ebp
c00204a1:	57                   	push   edi
c00204a2:	56                   	push   esi
c00204a3:	53                   	push   ebx
c00204a4:	83 ec 0c             	sub    esp,0xc
c00204a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00204ab:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00204b0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00204b5:	6a 00                	push   0x0
c00204b7:	56                   	push   esi
c00204b8:	57                   	push   edi
c00204b9:	55                   	push   ebp
c00204ba:	e8 bf fa ff ff       	call   c001ff7e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00204bf:	6a 00                	push   0x0
c00204c1:	56                   	push   esi
c00204c2:	57                   	push   edi
c00204c3:	55                   	push   ebp
c00204c4:	e8 2b fe ff ff       	call   c00202f4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00204c9:	83 c4 20             	add    esp,0x20
c00204cc:	6a 00                	push   0x0
c00204ce:	56                   	push   esi
c00204cf:	57                   	push   edi
c00204d0:	55                   	push   ebp
c00204d1:	e8 ca fa ff ff       	call   c001ffa0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00204d6:	83 c4 10             	add    esp,0x10
c00204d9:	84 c0                	test   al,al
c00204db:	79 27                	jns    c0020504 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00204dd:	bb 01 00 00 00       	mov    ebx,0x1
c00204e2:	53                   	push   ebx
c00204e3:	56                   	push   esi
c00204e4:	57                   	push   edi
c00204e5:	55                   	push   ebp
c00204e6:	e8 93 fa ff ff       	call   c001ff7e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00204eb:	83 c4 10             	add    esp,0x10
c00204ee:	66 40                	inc    ax
c00204f0:	74 0c                	je     c00204fe <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00204f2:	53                   	push   ebx
c00204f3:	56                   	push   esi
c00204f4:	57                   	push   edi
c00204f5:	55                   	push   ebp
c00204f6:	e8 f9 fd ff ff       	call   c00202f4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00204fb:	83 c4 10             	add    esp,0x10
c00204fe:	43                   	inc    ebx
c00204ff:	83 fb 08             	cmp    ebx,0x8
c0020502:	75 de                	jne    c00204e2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020504:	83 c4 0c             	add    esp,0xc
c0020507:	5b                   	pop    ebx
c0020508:	5e                   	pop    esi
c0020509:	5f                   	pop    edi
c002050a:	5d                   	pop    ebp
c002050b:	c3                   	ret    

c002050c <PCI::detect()>:
c002050c:	56                   	push   esi
c002050d:	53                   	push   ebx
c002050e:	53                   	push   ebx
c002050f:	31 db                	xor    ebx,ebx
c0020511:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020515:	6a 00                	push   0x0
c0020517:	6a 00                	push   0x0
c0020519:	6a 00                	push   0x0
c002051b:	56                   	push   esi
c002051c:	e8 7f fa ff ff       	call   c001ffa0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020521:	83 c4 10             	add    esp,0x10
c0020524:	a8 80                	test   al,0x80
c0020526:	75 21                	jne    c0020549 <PCI::detect()+0x3d>
c0020528:	51                   	push   ecx
c0020529:	51                   	push   ecx
c002052a:	6a 00                	push   0x0
c002052c:	56                   	push   esi
c002052d:	e8 2e fc ff ff       	call   c0020160 <PCI::checkBus(unsigned char)>
c0020532:	83 c4 10             	add    esp,0x10
c0020535:	eb 24                	jmp    c002055b <PCI::detect()+0x4f>
c0020537:	52                   	push   edx
c0020538:	52                   	push   edx
c0020539:	53                   	push   ebx
c002053a:	43                   	inc    ebx
c002053b:	56                   	push   esi
c002053c:	e8 1f fc ff ff       	call   c0020160 <PCI::checkBus(unsigned char)>
c0020541:	83 c4 10             	add    esp,0x10
c0020544:	83 fb 08             	cmp    ebx,0x8
c0020547:	74 12                	je     c002055b <PCI::detect()+0x4f>
c0020549:	53                   	push   ebx
c002054a:	6a 00                	push   0x0
c002054c:	6a 00                	push   0x0
c002054e:	56                   	push   esi
c002054f:	e8 2a fa ff ff       	call   c001ff7e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020554:	83 c4 10             	add    esp,0x10
c0020557:	66 40                	inc    ax
c0020559:	74 dc                	je     c0020537 <PCI::detect()+0x2b>
c002055b:	58                   	pop    eax
c002055c:	5b                   	pop    ebx
c002055d:	5e                   	pop    esi
c002055e:	c3                   	ret    
c002055f:	90                   	nop

c0020560 <IDE::close(int, int, void*)>:
c0020560:	83 c8 ff             	or     eax,0xffffffff
c0020563:	c3                   	ret    

c0020564 <IDE::IDE()>:
c0020564:	83 ec 0c             	sub    esp,0xc
c0020567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002056b:	83 ec 08             	sub    esp,0x8
c002056e:	68 38 8d 02 c0       	push   0xc0028d38
c0020573:	50                   	push   eax
c0020574:	e8 65 34 ff ff       	call   c00139de <HardDiskController::HardDiskController(char const*)>
c0020579:	83 c4 10             	add    esp,0x10
c002057c:	ba 78 8f 02 c0       	mov    edx,0xc0028f78
c0020581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020585:	89 10                	mov    DWORD PTR [eax],edx
c0020587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002058b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0020592:	90                   	nop
c0020593:	83 c4 0c             	add    esp,0xc
c0020596:	c3                   	ret    
c0020597:	90                   	nop

c0020598 <IDE::prepareInterrupt(unsigned char)>:
c0020598:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002059d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00205a1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00205a9:	c3                   	ret    

c00205aa <selectDrive(unsigned char, unsigned char)>:
c00205aa:	c3                   	ret    
c00205ab:	90                   	nop

c00205ac <IDE::getBase(unsigned char)>:
c00205ac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00205b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205b5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00205bd:	c3                   	ret    

c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00205be:	55                   	push   ebp
c00205bf:	57                   	push   edi
c00205c0:	56                   	push   esi
c00205c1:	53                   	push   ebx
c00205c2:	83 ec 1c             	sub    esp,0x1c
c00205c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00205c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00205cd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00205d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00205d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00205d8:	80 f9 03             	cmp    cl,0x3
c00205db:	77 51                	ja     c002062e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00205dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205e1:	0f b6 f2             	movzx  esi,dl
c00205e4:	0f b6 db             	movzx  ebx,bl
c00205e7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00205ea:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00205ee:	83 ca 80             	or     edx,0xffffff80
c00205f1:	0f b6 d2             	movzx  edx,dl
c00205f4:	52                   	push   edx
c00205f5:	6a 0c                	push   0xc
c00205f7:	56                   	push   esi
c00205f8:	57                   	push   edi
c00205f9:	e8 c0 ff ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00205fe:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0020603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020607:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002060b:	ee                   	out    dx,al
c002060c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0020611:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0020615:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020619:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002061d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020625:	83 c4 2c             	add    esp,0x2c
c0020628:	5b                   	pop    ebx
c0020629:	5e                   	pop    esi
c002062a:	5f                   	pop    edi
c002062b:	5d                   	pop    ebp
c002062c:	eb 90                	jmp    c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c002062e:	80 fb 07             	cmp    bl,0x7
c0020631:	77 12                	ja     c0020645 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0020633:	0f b6 d2             	movzx  edx,dl
c0020636:	0f b6 db             	movzx  ebx,bl
c0020639:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020641:	89 da                	mov    edx,ebx
c0020643:	eb 2f                	jmp    c0020674 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020645:	80 fb 0d             	cmp    bl,0xd
c0020648:	77 13                	ja     c002065d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002064a:	0f b6 d2             	movzx  edx,dl
c002064d:	0f b6 db             	movzx  ebx,bl
c0020650:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020657:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002065b:	eb 17                	jmp    c0020674 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002065d:	80 fb 15             	cmp    bl,0x15
c0020660:	77 13                	ja     c0020675 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0020662:	0f b6 d2             	movzx  edx,dl
c0020665:	0f b6 db             	movzx  ebx,bl
c0020668:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0020670:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0020674:	ee                   	out    dx,al
c0020675:	83 c4 1c             	add    esp,0x1c
c0020678:	5b                   	pop    ebx
c0020679:	5e                   	pop    esi
c002067a:	5f                   	pop    edi
c002067b:	5d                   	pop    ebp
c002067c:	c3                   	ret    
c002067d:	90                   	nop

c002067e <IDE::read(unsigned char, unsigned char)>:
c002067e:	55                   	push   ebp
c002067f:	57                   	push   edi
c0020680:	56                   	push   esi
c0020681:	53                   	push   ebx
c0020682:	83 ec 1c             	sub    esp,0x1c
c0020685:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020689:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002068d:	8d 43 f8             	lea    eax,[ebx-0x8]
c0020690:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020694:	3c 03                	cmp    al,0x3
c0020696:	77 43                	ja     c00206db <IDE::read(unsigned char, unsigned char)+0x5d>
c0020698:	0f b6 f2             	movzx  esi,dl
c002069b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002069e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00206a2:	83 c8 80             	or     eax,0xffffff80
c00206a5:	0f b6 c0             	movzx  eax,al
c00206a8:	50                   	push   eax
c00206a9:	6a 0c                	push   0xc
c00206ab:	56                   	push   esi
c00206ac:	57                   	push   edi
c00206ad:	e8 0c ff ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206b2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00206b7:	0f b6 c3             	movzx  eax,bl
c00206ba:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00206be:	ec                   	in     al,dx
c00206bf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00206c3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00206c8:	52                   	push   edx
c00206c9:	6a 0c                	push   0xc
c00206cb:	56                   	push   esi
c00206cc:	57                   	push   edi
c00206cd:	e8 ec fe ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206d2:	83 c4 20             	add    esp,0x20
c00206d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00206d9:	eb 49                	jmp    c0020724 <IDE::read(unsigned char, unsigned char)+0xa6>
c00206db:	80 fb 07             	cmp    bl,0x7
c00206de:	77 12                	ja     c00206f2 <IDE::read(unsigned char, unsigned char)+0x74>
c00206e0:	0f b6 d2             	movzx  edx,dl
c00206e3:	0f b6 c3             	movzx  eax,bl
c00206e6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00206ee:	89 c2                	mov    edx,eax
c00206f0:	eb 31                	jmp    c0020723 <IDE::read(unsigned char, unsigned char)+0xa5>
c00206f2:	80 fb 0d             	cmp    bl,0xd
c00206f5:	77 13                	ja     c002070a <IDE::read(unsigned char, unsigned char)+0x8c>
c00206f7:	0f b6 d2             	movzx  edx,dl
c00206fa:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0020701:	0f b6 d3             	movzx  edx,bl
c0020704:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0020708:	eb 19                	jmp    c0020723 <IDE::read(unsigned char, unsigned char)+0xa5>
c002070a:	31 c0                	xor    eax,eax
c002070c:	80 fb 15             	cmp    bl,0x15
c002070f:	77 13                	ja     c0020724 <IDE::read(unsigned char, unsigned char)+0xa6>
c0020711:	0f b6 d2             	movzx  edx,dl
c0020714:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002071c:	0f b6 d3             	movzx  edx,bl
c002071f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020723:	ec                   	in     al,dx
c0020724:	83 c4 1c             	add    esp,0x1c
c0020727:	5b                   	pop    ebx
c0020728:	5e                   	pop    esi
c0020729:	5f                   	pop    edi
c002072a:	5d                   	pop    ebp
c002072b:	c3                   	ret    

c002072c <IDE::waitInterrupt(unsigned char)>:
c002072c:	55                   	push   ebp
c002072d:	57                   	push   edi
c002072e:	56                   	push   esi
c002072f:	53                   	push   ebx
c0020730:	31 db                	xor    ebx,ebx
c0020732:	83 ec 0c             	sub    esp,0xc
c0020735:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020739:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002073e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020746:	89 e8                	mov    eax,ebp
c0020748:	84 c0                	test   al,al
c002074a:	75 34                	jne    c0020780 <IDE::waitInterrupt(unsigned char)+0x54>
c002074c:	52                   	push   edx
c002074d:	6a 0c                	push   0xc
c002074f:	56                   	push   esi
c0020750:	57                   	push   edi
c0020751:	e8 28 ff ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020756:	83 c4 10             	add    esp,0x10
c0020759:	a8 01                	test   al,0x1
c002075b:	75 2b                	jne    c0020788 <IDE::waitInterrupt(unsigned char)+0x5c>
c002075d:	f6 c3 04             	test   bl,0x4
c0020760:	75 16                	jne    c0020778 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020762:	83 fb 32             	cmp    ebx,0x32
c0020765:	7e 11                	jle    c0020778 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020767:	50                   	push   eax
c0020768:	50                   	push   eax
c0020769:	6a 00                	push   0x0
c002076b:	68 80 96 98 00       	push   0x989680
c0020770:	e8 f9 c3 ff ff       	call   c001cb6e <nanoSleep(unsigned long long)>
c0020775:	83 c4 10             	add    esp,0x10
c0020778:	83 fb 3c             	cmp    ebx,0x3c
c002077b:	74 0b                	je     c0020788 <IDE::waitInterrupt(unsigned char)+0x5c>
c002077d:	43                   	inc    ebx
c002077e:	eb be                	jmp    c002073e <IDE::waitInterrupt(unsigned char)+0x12>
c0020780:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0020788:	83 c4 0c             	add    esp,0xc
c002078b:	89 e8                	mov    eax,ebp
c002078d:	5b                   	pop    ebx
c002078e:	5e                   	pop    esi
c002078f:	5f                   	pop    edi
c0020790:	5d                   	pop    ebp
c0020791:	c3                   	ret    

c0020792 <ideChannel0IRQHandler(regs*, void*)>:
c0020792:	83 ec 10             	sub    esp,0x10
c0020795:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020799:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00207a0:	6a 07                	push   0x7
c00207a2:	6a 00                	push   0x0
c00207a4:	50                   	push   eax
c00207a5:	e8 d4 fe ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c00207aa:	83 c4 1c             	add    esp,0x1c
c00207ad:	c3                   	ret    

c00207ae <ideChannel1IRQHandler(regs*, void*)>:
c00207ae:	83 ec 10             	sub    esp,0x10
c00207b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00207b5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00207bc:	6a 07                	push   0x7
c00207be:	6a 01                	push   0x1
c00207c0:	50                   	push   eax
c00207c1:	e8 b8 fe ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c00207c6:	83 c4 1c             	add    esp,0x1c
c00207c9:	c3                   	ret    

c00207ca <IDE::enableIRQs(unsigned char, bool)>:
c00207ca:	57                   	push   edi
c00207cb:	56                   	push   esi
c00207cc:	be 04 00 00 00       	mov    esi,0x4
c00207d1:	53                   	push   ebx
c00207d2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00207d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00207db:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00207e0:	0f 94 c0             	sete   al
c00207e3:	d1 e0                	shl    eax,1
c00207e5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00207ec:	0f b6 c0             	movzx  eax,al
c00207ef:	50                   	push   eax
c00207f0:	6a 0c                	push   0xc
c00207f2:	57                   	push   edi
c00207f3:	53                   	push   ebx
c00207f4:	e8 c5 fd ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207f9:	83 c4 10             	add    esp,0x10
c00207fc:	50                   	push   eax
c00207fd:	6a 0c                	push   0xc
c00207ff:	57                   	push   edi
c0020800:	53                   	push   ebx
c0020801:	e8 78 fe ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020806:	83 c4 10             	add    esp,0x10
c0020809:	4e                   	dec    esi
c002080a:	75 f0                	jne    c00207fc <IDE::enableIRQs(unsigned char, bool)+0x32>
c002080c:	5b                   	pop    ebx
c002080d:	5e                   	pop    esi
c002080e:	5f                   	pop    edi
c002080f:	c3                   	ret    

c0020810 <IDE::open(int, int, void*)>:
c0020810:	55                   	push   ebp
c0020811:	57                   	push   edi
c0020812:	56                   	push   esi
c0020813:	53                   	push   ebx
c0020814:	83 ec 1c             	sub    esp,0x1c
c0020817:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002081b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020824:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002082d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020834:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002083b:	0f 85 b0 02 00 00    	jne    c0020af1 <IDE::open(int, int, void*)+0x2e1>
c0020841:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020847:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002084b:	83 e0 7f             	and    eax,0x7f
c002084e:	3c 05                	cmp    al,0x5
c0020850:	74 04                	je     c0020856 <IDE::open(int, int, void*)+0x46>
c0020852:	3c 0f                	cmp    al,0xf
c0020854:	75 32                	jne    c0020888 <IDE::open(int, int, void*)+0x78>
c0020856:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002085c:	83 e0 fc             	and    eax,0xfffffffc
c002085f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020866:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002086c:	83 e0 fc             	and    eax,0xfffffffc
c002086f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020876:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002087c:	83 e0 fc             	and    eax,0xfffffffc
c002087f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020886:	eb 14                	jmp    c002089c <IDE::open(int, int, void*)+0x8c>
c0020888:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020892:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002089c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00208a3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00208aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00208ae:	89 c6                	mov    esi,eax
c00208b0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00208b5:	c1 e6 10             	shl    esi,0x10
c00208b8:	89 e8                	mov    eax,ebp
c00208ba:	89 fa                	mov    edx,edi
c00208bc:	c1 e0 0b             	shl    eax,0xb
c00208bf:	09 f0                	or     eax,esi
c00208c1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00208c8:	c1 e6 08             	shl    esi,0x8
c00208cb:	09 c6                	or     esi,eax
c00208cd:	89 f0                	mov    eax,esi
c00208cf:	0d 08 00 00 80       	or     eax,0x80000008
c00208d4:	ef                   	out    dx,eax
c00208d5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00208da:	89 ca                	mov    edx,ecx
c00208dc:	ed                   	in     eax,dx
c00208dd:	c1 e8 10             	shr    eax,0x10
c00208e0:	3d ff ff 00 00       	cmp    eax,0xffff
c00208e5:	0f 84 f5 00 00 00    	je     c00209e0 <IDE::open(int, int, void*)+0x1d0>
c00208eb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00208f1:	89 fa                	mov    edx,edi
c00208f3:	89 f0                	mov    eax,esi
c00208f5:	ef                   	out    dx,eax
c00208f6:	b0 fe                	mov    al,0xfe
c00208f8:	89 ca                	mov    edx,ecx
c00208fa:	ee                   	out    dx,al
c00208fb:	89 f0                	mov    eax,esi
c00208fd:	89 fa                	mov    edx,edi
c00208ff:	ef                   	out    dx,eax
c0020900:	89 ca                	mov    edx,ecx
c0020902:	ed                   	in     eax,dx
c0020903:	3c fe                	cmp    al,0xfe
c0020905:	0f 85 a9 00 00 00    	jne    c00209b4 <IDE::open(int, int, void*)+0x1a4>
c002090b:	8b 15 e8 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a4e8
c0020911:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020918:	74 33                	je     c002094d <IDE::open(int, int, void*)+0x13d>
c002091a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020920:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020924:	40                   	inc    eax
c0020925:	83 ec 0c             	sub    esp,0xc
c0020928:	0f b6 c0             	movzx  eax,al
c002092b:	50                   	push   eax
c002092c:	55                   	push   ebp
c002092d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020931:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020937:	51                   	push   ecx
c0020938:	e8 e7 64 ff ff       	call   c0016e24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002093d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020942:	83 c4 1c             	add    esp,0x1c
c0020945:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002094b:	eb 0a                	jmp    c0020957 <IDE::open(int, int, void*)+0x147>
c002094d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020957:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002095e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020965:	c1 e1 10             	shl    ecx,0x10
c0020968:	c1 e0 08             	shl    eax,0x8
c002096b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020970:	09 c1                	or     ecx,eax
c0020972:	89 fa                	mov    edx,edi
c0020974:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002097b:	c1 e0 0b             	shl    eax,0xb
c002097e:	09 c1                	or     ecx,eax
c0020980:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020986:	89 c8                	mov    eax,ecx
c0020988:	ef                   	out    dx,eax
c0020989:	be fc 0c 00 00       	mov    esi,0xcfc
c002098e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020994:	89 f2                	mov    edx,esi
c0020996:	ee                   	out    dx,al
c0020997:	89 c8                	mov    eax,ecx
c0020999:	89 fa                	mov    edx,edi
c002099b:	ef                   	out    dx,eax
c002099c:	89 f2                	mov    edx,esi
c002099e:	ed                   	in     eax,dx
c002099f:	0f b6 c0             	movzx  eax,al
c00209a2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00209a8:	74 46                	je     c00209f0 <IDE::open(int, int, void*)+0x1e0>
c00209aa:	83 ec 0c             	sub    esp,0xc
c00209ad:	68 50 8d 02 c0       	push   0xc0028d50
c00209b2:	eb 34                	jmp    c00209e8 <IDE::open(int, int, void*)+0x1d8>
c00209b4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00209bd:	75 17                	jne    c00209d6 <IDE::open(int, int, void*)+0x1c6>
c00209bf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00209c4:	74 07                	je     c00209cd <IDE::open(int, int, void*)+0x1bd>
c00209c6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00209cb:	75 09                	jne    c00209d6 <IDE::open(int, int, void*)+0x1c6>
c00209cd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00209d4:	eb 1a                	jmp    c00209f0 <IDE::open(int, int, void*)+0x1e0>
c00209d6:	83 ec 0c             	sub    esp,0xc
c00209d9:	68 58 8d 02 c0       	push   0xc0028d58
c00209de:	eb 08                	jmp    c00209e8 <IDE::open(int, int, void*)+0x1d8>
c00209e0:	83 ec 0c             	sub    esp,0xc
c00209e3:	68 89 8d 02 c0       	push   0xc0028d89
c00209e8:	e8 e6 8c ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c00209ed:	83 c4 10             	add    esp,0x10
c00209f0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00209f7:	79 1a                	jns    c0020a13 <IDE::open(int, int, void*)+0x203>
c00209f9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00209ff:	83 e0 fc             	and    eax,0xfffffffc
c0020a02:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020a09:	83 c0 08             	add    eax,0x8
c0020a0c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020a13:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020a19:	89 c2                	mov    edx,eax
c0020a1b:	83 e2 0f             	and    edx,0xf
c0020a1e:	66 83 fa 08          	cmp    dx,0x8
c0020a22:	75 0a                	jne    c0020a2e <IDE::open(int, int, void*)+0x21e>
c0020a24:	83 e8 02             	sub    eax,0x2
c0020a27:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020a2e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020a34:	89 c2                	mov    edx,eax
c0020a36:	83 e2 0f             	and    edx,0xf
c0020a39:	66 83 fa 08          	cmp    dx,0x8
c0020a3d:	75 0a                	jne    c0020a49 <IDE::open(int, int, void*)+0x239>
c0020a3f:	83 e8 02             	sub    eax,0x2
c0020a42:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020a49:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020a50:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020a57:	89 d0                	mov    eax,edx
c0020a59:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020a5c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020a60:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020a64:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020a67:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020a6c:	0f b6 c9             	movzx  ecx,cl
c0020a6f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020a76:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020a79:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020a7d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020a81:	8d 50 02             	lea    edx,[eax+0x2]
c0020a84:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020a89:	0f b6 d2             	movzx  edx,dl
c0020a8c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020a92:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020a95:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020a99:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020a9d:	8d 48 03             	lea    ecx,[eax+0x3]
c0020aa0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020aa5:	0f b6 c9             	movzx  ecx,cl
c0020aa8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020aae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020ab1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020ab5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020ab9:	8d 50 04             	lea    edx,[eax+0x4]
c0020abc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020ac2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020ac7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020ace:	66 85 f6             	test   si,si
c0020ad1:	74 3e                	je     c0020b11 <IDE::open(int, int, void*)+0x301>
c0020ad3:	0f b6 d2             	movzx  edx,dl
c0020ad6:	83 c0 05             	add    eax,0x5
c0020ad9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020adc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020ae0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020ae4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020aea:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020aef:	eb 20                	jmp    c0020b11 <IDE::open(int, int, void*)+0x301>
c0020af1:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020afb:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020b05:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020b0c:	e9 02 ff ff ff       	jmp    c0020a13 <IDE::open(int, int, void*)+0x203>
c0020b11:	52                   	push   edx
c0020b12:	52                   	push   edx
c0020b13:	6a 00                	push   0x0
c0020b15:	53                   	push   ebx
c0020b16:	e8 7d fa ff ff       	call   c0020598 <IDE::prepareInterrupt(unsigned char)>
c0020b1b:	59                   	pop    ecx
c0020b1c:	5e                   	pop    esi
c0020b1d:	6a 01                	push   0x1
c0020b1f:	53                   	push   ebx
c0020b20:	e8 73 fa ff ff       	call   c0020598 <IDE::prepareInterrupt(unsigned char)>
c0020b25:	83 c4 0c             	add    esp,0xc
c0020b28:	6a 00                	push   0x0
c0020b2a:	6a 00                	push   0x0
c0020b2c:	53                   	push   ebx
c0020b2d:	e8 98 fc ff ff       	call   c00207ca <IDE::enableIRQs(unsigned char, bool)>
c0020b32:	83 c4 0c             	add    esp,0xc
c0020b35:	6a 00                	push   0x0
c0020b37:	6a 01                	push   0x1
c0020b39:	53                   	push   ebx
c0020b3a:	e8 8b fc ff ff       	call   c00207ca <IDE::enableIRQs(unsigned char, bool)>
c0020b3f:	83 c4 10             	add    esp,0x10
c0020b42:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020b49:	74 40                	je     c0020b8b <IDE::open(int, int, void*)+0x37b>
c0020b4b:	83 ec 0c             	sub    esp,0xc
c0020b4e:	68 b3 8d 02 c0       	push   0xc0028db3
c0020b53:	e8 f9 16 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020b58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020b5b:	6a 01                	push   0x1
c0020b5d:	68 92 07 02 c0       	push   0xc0020792
c0020b62:	6a 0e                	push   0xe
c0020b64:	53                   	push   ebx
c0020b65:	e8 46 2a ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020b6a:	83 c4 14             	add    esp,0x14
c0020b6d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020b73:	53                   	push   ebx
c0020b74:	6a 01                	push   0x1
c0020b76:	68 ae 07 02 c0       	push   0xc00207ae
c0020b7b:	6a 0f                	push   0xf
c0020b7d:	53                   	push   ebx
c0020b7e:	e8 2d 2a ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020b83:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020b89:	eb 4a                	jmp    c0020bd5 <IDE::open(int, int, void*)+0x3c5>
c0020b8b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020b95:	50                   	push   eax
c0020b96:	6a 0f                	push   0xf
c0020b98:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020b9e:	68 cf 8d 02 c0       	push   0xc0028dcf
c0020ba3:	e8 a9 16 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020ba8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020bab:	6a 00                	push   0x0
c0020bad:	68 92 07 02 c0       	push   0xc0020792
c0020bb2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020bb8:	53                   	push   ebx
c0020bb9:	e8 f2 29 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020bbe:	83 c4 14             	add    esp,0x14
c0020bc1:	53                   	push   ebx
c0020bc2:	6a 00                	push   0x0
c0020bc4:	68 ae 07 02 c0       	push   0xc00207ae
c0020bc9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020bcf:	53                   	push   ebx
c0020bd0:	e8 db 29 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020bd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020bd7:	83 c4 20             	add    esp,0x20
c0020bda:	83 ec 0c             	sub    esp,0xc
c0020bdd:	53                   	push   ebx
c0020bde:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020be1:	83 c4 0c             	add    esp,0xc
c0020be4:	6a 07                	push   0x7
c0020be6:	6a 00                	push   0x0
c0020be8:	53                   	push   ebx
c0020be9:	e8 90 fa ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020bee:	83 c4 0c             	add    esp,0xc
c0020bf1:	6a 07                	push   0x7
c0020bf3:	6a 01                	push   0x1
c0020bf5:	53                   	push   ebx
c0020bf6:	e8 83 fa ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020bfb:	83 c4 0c             	add    esp,0xc
c0020bfe:	6a 01                	push   0x1
c0020c00:	6a 00                	push   0x0
c0020c02:	53                   	push   ebx
c0020c03:	e8 c2 fb ff ff       	call   c00207ca <IDE::enableIRQs(unsigned char, bool)>
c0020c08:	83 c4 0c             	add    esp,0xc
c0020c0b:	6a 01                	push   0x1
c0020c0d:	6a 01                	push   0x1
c0020c0f:	53                   	push   ebx
c0020c10:	e8 b5 fb ff ff       	call   c00207ca <IDE::enableIRQs(unsigned char, bool)>
c0020c15:	83 c4 2c             	add    esp,0x2c
c0020c18:	31 c0                	xor    eax,eax
c0020c1a:	5b                   	pop    ebx
c0020c1b:	5e                   	pop    esi
c0020c1c:	5f                   	pop    edi
c0020c1d:	5d                   	pop    ebp
c0020c1e:	c3                   	ret    
c0020c1f:	90                   	nop

c0020c20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020c20:	55                   	push   ebp
c0020c21:	57                   	push   edi
c0020c22:	56                   	push   esi
c0020c23:	53                   	push   ebx
c0020c24:	83 ec 1c             	sub    esp,0x1c
c0020c27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020c2f:	8d 50 f8             	lea    edx,[eax-0x8]
c0020c32:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020c36:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020c3a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020c3e:	80 fa 03             	cmp    dl,0x3
c0020c41:	77 5d                	ja     c0020ca0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020c43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c4b:	0f b6 db             	movzx  ebx,bl
c0020c4e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020c51:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020c55:	83 ca 80             	or     edx,0xffffff80
c0020c58:	0f b6 d2             	movzx  edx,dl
c0020c5b:	52                   	push   edx
c0020c5c:	6a 0c                	push   0xc
c0020c5e:	53                   	push   ebx
c0020c5f:	56                   	push   esi
c0020c60:	e8 59 f9 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020c65:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020c6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c6e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020c72:	0f b6 c0             	movzx  eax,al
c0020c75:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020c79:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020c7b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020c80:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020c84:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020c88:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020c8c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020c94:	83 c4 2c             	add    esp,0x2c
c0020c97:	5b                   	pop    ebx
c0020c98:	5e                   	pop    esi
c0020c99:	5f                   	pop    edi
c0020c9a:	5d                   	pop    ebp
c0020c9b:	e9 1e f9 ff ff       	jmp    c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020ca0:	3c 07                	cmp    al,0x7
c0020ca2:	77 10                	ja     c0020cb4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020ca4:	0f b6 db             	movzx  ebx,bl
c0020ca7:	0f b6 d0             	movzx  edx,al
c0020caa:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020cb2:	eb 2d                	jmp    c0020ce1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020cb4:	3c 0d                	cmp    al,0xd
c0020cb6:	77 13                	ja     c0020ccb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020cb8:	0f b6 db             	movzx  ebx,bl
c0020cbb:	0f b6 c0             	movzx  eax,al
c0020cbe:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020cc5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020cc9:	eb 16                	jmp    c0020ce1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ccb:	3c 15                	cmp    al,0x15
c0020ccd:	77 14                	ja     c0020ce3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020ccf:	0f b6 db             	movzx  ebx,bl
c0020cd2:	0f b6 c0             	movzx  eax,al
c0020cd5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020cdd:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020ce1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020ce3:	83 c4 1c             	add    esp,0x1c
c0020ce6:	5b                   	pop    ebx
c0020ce7:	5e                   	pop    esi
c0020ce8:	5f                   	pop    edi
c0020ce9:	5d                   	pop    ebp
c0020cea:	c3                   	ret    
c0020ceb:	90                   	nop

c0020cec <IDE::detect()>:
c0020cec:	55                   	push   ebp
c0020ced:	57                   	push   edi
c0020cee:	56                   	push   esi
c0020cef:	53                   	push   ebx
c0020cf0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020cf6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020cfd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0020d04:	0f 85 be 02 00 00    	jne    c0020fc8 <IDE::detect()+0x2dc>
c0020d0a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0020d11:	31 f6                	xor    esi,esi
c0020d13:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020d1b:	31 ed                	xor    ebp,ebp
c0020d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d21:	c1 e0 06             	shl    eax,0x6
c0020d24:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0020d2c:	89 e8                	mov    eax,ebp
c0020d2e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d32:	c1 e0 04             	shl    eax,0x4
c0020d35:	83 c8 a0             	or     eax,0xffffffa0
c0020d38:	0f b6 c0             	movzx  eax,al
c0020d3b:	50                   	push   eax
c0020d3c:	6a 06                	push   0x6
c0020d3e:	56                   	push   esi
c0020d3f:	53                   	push   ebx
c0020d40:	e8 79 f8 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020d45:	83 c4 0c             	add    esp,0xc
c0020d48:	6a 0c                	push   0xc
c0020d4a:	56                   	push   esi
c0020d4b:	53                   	push   ebx
c0020d4c:	e8 2d f9 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020d51:	83 c4 0c             	add    esp,0xc
c0020d54:	6a 0c                	push   0xc
c0020d56:	56                   	push   esi
c0020d57:	53                   	push   ebx
c0020d58:	e8 21 f9 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020d5d:	83 c4 0c             	add    esp,0xc
c0020d60:	6a 0c                	push   0xc
c0020d62:	56                   	push   esi
c0020d63:	53                   	push   ebx
c0020d64:	e8 15 f9 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020d69:	83 c4 0c             	add    esp,0xc
c0020d6c:	6a 0c                	push   0xc
c0020d6e:	56                   	push   esi
c0020d6f:	53                   	push   ebx
c0020d70:	e8 09 f9 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020d75:	68 ec 00 00 00       	push   0xec
c0020d7a:	6a 07                	push   0x7
c0020d7c:	56                   	push   esi
c0020d7d:	53                   	push   ebx
c0020d7e:	e8 3b f8 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020d83:	83 c4 1c             	add    esp,0x1c
c0020d86:	6a 0c                	push   0xc
c0020d88:	56                   	push   esi
c0020d89:	53                   	push   ebx
c0020d8a:	e8 ef f8 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020d8f:	83 c4 0c             	add    esp,0xc
c0020d92:	6a 0c                	push   0xc
c0020d94:	56                   	push   esi
c0020d95:	53                   	push   ebx
c0020d96:	e8 e3 f8 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020d9b:	83 c4 0c             	add    esp,0xc
c0020d9e:	6a 0c                	push   0xc
c0020da0:	56                   	push   esi
c0020da1:	53                   	push   ebx
c0020da2:	e8 d7 f8 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020da7:	83 c4 0c             	add    esp,0xc
c0020daa:	6a 0c                	push   0xc
c0020dac:	56                   	push   esi
c0020dad:	53                   	push   ebx
c0020dae:	e8 cb f8 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020db3:	83 c4 0c             	add    esp,0xc
c0020db6:	6a 0c                	push   0xc
c0020db8:	56                   	push   esi
c0020db9:	53                   	push   ebx
c0020dba:	e8 bf f8 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020dbf:	83 c4 10             	add    esp,0x10
c0020dc2:	84 c0                	test   al,al
c0020dc4:	0f 84 8b 01 00 00    	je     c0020f55 <IDE::detect()+0x269>
c0020dca:	31 ff                	xor    edi,edi
c0020dcc:	50                   	push   eax
c0020dcd:	6a 0c                	push   0xc
c0020dcf:	56                   	push   esi
c0020dd0:	53                   	push   ebx
c0020dd1:	e8 a8 f8 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020dd6:	83 c4 10             	add    esp,0x10
c0020dd9:	a8 01                	test   al,0x1
c0020ddb:	0f 85 8e 01 00 00    	jne    c0020f6f <IDE::detect()+0x283>
c0020de1:	84 c0                	test   al,al
c0020de3:	78 04                	js     c0020de9 <IDE::detect()+0xfd>
c0020de5:	a8 08                	test   al,0x8
c0020de7:	75 27                	jne    c0020e10 <IDE::detect()+0x124>
c0020de9:	47                   	inc    edi
c0020dea:	81 ff 17 01 00 00    	cmp    edi,0x117
c0020df0:	7e da                	jle    c0020dcc <IDE::detect()+0xe0>
c0020df2:	50                   	push   eax
c0020df3:	50                   	push   eax
c0020df4:	6a 00                	push   0x0
c0020df6:	68 40 4b 4c 00       	push   0x4c4b40
c0020dfb:	e8 6e bd ff ff       	call   c001cb6e <nanoSleep(unsigned long long)>
c0020e00:	83 c4 10             	add    esp,0x10
c0020e03:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0020e09:	75 c1                	jne    c0020dcc <IDE::detect()+0xe0>
c0020e0b:	e9 5f 01 00 00       	jmp    c0020f6f <IDE::detect()+0x283>
c0020e10:	31 c9                	xor    ecx,ecx
c0020e12:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0020e16:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0020e1a:	83 ec 0c             	sub    esp,0xc
c0020e1d:	68 80 00 00 00       	push   0x80
c0020e22:	57                   	push   edi
c0020e23:	6a 00                	push   0x0
c0020e25:	56                   	push   esi
c0020e26:	53                   	push   ebx
c0020e27:	e8 f4 fd ff ff       	call   c0020c20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0020e2c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0020e31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020e35:	89 d1                	mov    ecx,edx
c0020e37:	c1 e0 06             	shl    eax,0x6
c0020e3a:	01 d8                	add    eax,ebx
c0020e3c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0020e43:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0020e4a:	89 f2                	mov    edx,esi
c0020e4c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0020e52:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0020e56:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0020e5c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e60:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0020e67:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0020e6f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0020e76:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0020e7e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0020e84:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0020e8b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0020e91:	8d 54 24 58          	lea    edx,[esp+0x58]
c0020e95:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020e99:	83 c4 20             	add    esp,0x20
c0020e9c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0020e9f:	83 c0 02             	add    eax,0x2
c0020ea2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0020ea8:	83 c7 02             	add    edi,0x2
c0020eab:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0020eae:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0020eb4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0020eb8:	75 e2                	jne    c0020e9c <IDE::detect()+0x1b0>
c0020eba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ebe:	c1 e0 06             	shl    eax,0x6
c0020ec1:	01 d8                	add    eax,ebx
c0020ec3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0020ec9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0020ed0:	66 c1 ea 09          	shr    dx,0x9
c0020ed4:	83 e2 01             	and    edx,0x1
c0020ed7:	84 c9                	test   cl,cl
c0020ed9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0020edf:	75 2f                	jne    c0020f10 <IDE::detect()+0x224>
c0020ee1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0020ee7:	85 c0                	test   eax,eax
c0020ee9:	74 66                	je     c0020f51 <IDE::detect()+0x265>
c0020eeb:	50                   	push   eax
c0020eec:	55                   	push   ebp
c0020eed:	56                   	push   esi
c0020eee:	68 eb 8d 02 c0       	push   0xc0028deb
c0020ef3:	e8 59 13 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020ef8:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0020eff:	e8 5e 12 ff ff       	call   c0012162 <operator new(unsigned long)>
c0020f04:	89 c7                	mov    edi,eax
c0020f06:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f09:	e8 e8 02 00 00       	call   c00211f6 <ATA::ATA()>
c0020f0e:	eb 28                	jmp    c0020f38 <IDE::detect()+0x24c>
c0020f10:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0020f16:	55                   	push   ebp
c0020f17:	56                   	push   esi
c0020f18:	68 1a 8e 02 c0       	push   0xc0028e1a
c0020f1d:	e8 2f 13 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020f22:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0020f29:	e8 34 12 ff ff       	call   c0012162 <operator new(unsigned long)>
c0020f2e:	89 c7                	mov    edi,eax
c0020f30:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f33:	e8 ee 08 00 00       	call   c0021826 <ATAPI::ATAPI()>
c0020f38:	5a                   	pop    edx
c0020f39:	59                   	pop    ecx
c0020f3a:	57                   	push   edi
c0020f3b:	53                   	push   ebx
c0020f3c:	e8 1b 27 ff ff       	call   c001365c <Device::addChild(Device*)>
c0020f41:	8b 07                	mov    eax,DWORD PTR [edi]
c0020f43:	53                   	push   ebx
c0020f44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f48:	6a 00                	push   0x0
c0020f4a:	57                   	push   edi
c0020f4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020f4e:	83 c4 20             	add    esp,0x20
c0020f51:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0020f55:	4d                   	dec    ebp
c0020f56:	74 0a                	je     c0020f62 <IDE::detect()+0x276>
c0020f58:	bd 01 00 00 00       	mov    ebp,0x1
c0020f5d:	e9 bb fd ff ff       	jmp    c0020d1d <IDE::detect()+0x31>
c0020f62:	4e                   	dec    esi
c0020f63:	74 63                	je     c0020fc8 <IDE::detect()+0x2dc>
c0020f65:	be 01 00 00 00       	mov    esi,0x1
c0020f6a:	e9 ac fd ff ff       	jmp    c0020d1b <IDE::detect()+0x2f>
c0020f6f:	50                   	push   eax
c0020f70:	6a 04                	push   0x4
c0020f72:	56                   	push   esi
c0020f73:	53                   	push   ebx
c0020f74:	e8 05 f7 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020f79:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0020f7d:	83 c4 0c             	add    esp,0xc
c0020f80:	6a 05                	push   0x5
c0020f82:	56                   	push   esi
c0020f83:	53                   	push   ebx
c0020f84:	e8 f5 f6 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0020f89:	83 c4 10             	add    esp,0x10
c0020f8c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0020f90:	80 fa 14             	cmp    dl,0x14
c0020f93:	75 04                	jne    c0020f99 <IDE::detect()+0x2ad>
c0020f95:	3c eb                	cmp    al,0xeb
c0020f97:	eb 07                	jmp    c0020fa0 <IDE::detect()+0x2b4>
c0020f99:	3c 96                	cmp    al,0x96
c0020f9b:	75 b8                	jne    c0020f55 <IDE::detect()+0x269>
c0020f9d:	80 fa 69             	cmp    dl,0x69
c0020fa0:	75 b3                	jne    c0020f55 <IDE::detect()+0x269>
c0020fa2:	68 a1 00 00 00       	push   0xa1
c0020fa7:	6a 07                	push   0x7
c0020fa9:	56                   	push   esi
c0020faa:	53                   	push   ebx
c0020fab:	e8 0e f6 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020fb0:	5f                   	pop    edi
c0020fb1:	58                   	pop    eax
c0020fb2:	6a 00                	push   0x0
c0020fb4:	68 40 42 0f 00       	push   0xf4240
c0020fb9:	e8 b0 bb ff ff       	call   c001cb6e <nanoSleep(unsigned long long)>
c0020fbe:	83 c4 10             	add    esp,0x10
c0020fc1:	b1 01                	mov    cl,0x1
c0020fc3:	e9 4a fe ff ff       	jmp    c0020e12 <IDE::detect()+0x126>
c0020fc8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020fce:	5b                   	pop    ebx
c0020fcf:	5e                   	pop    esi
c0020fd0:	5f                   	pop    edi
c0020fd1:	5d                   	pop    ebp
c0020fd2:	c3                   	ret    
c0020fd3:	90                   	nop

c0020fd4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0020fd4:	55                   	push   ebp
c0020fd5:	57                   	push   edi
c0020fd6:	56                   	push   esi
c0020fd7:	53                   	push   ebx
c0020fd8:	83 ec 1c             	sub    esp,0x1c
c0020fdb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020fdf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020fe3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020fe7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0020feb:	88 c3                	mov    bl,al
c0020fed:	84 c0                	test   al,al
c0020fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ff3:	0f 84 67 01 00 00    	je     c0021160 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0020ff9:	83 ec 0c             	sub    esp,0xc
c0020ffc:	68 4b 8e 02 c0       	push   0xc0028e4b
c0021001:	e8 4b 12 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021006:	83 c4 10             	add    esp,0x10
c0021009:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002100d:	3c 01                	cmp    al,0x1
c002100f:	75 17                	jne    c0021028 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021011:	83 ec 0c             	sub    esp,0xc
c0021014:	b3 13                	mov    bl,0x13
c0021016:	68 57 8e 02 c0       	push   0xc0028e57
c002101b:	e8 31 12 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021020:	83 c4 10             	add    esp,0x10
c0021023:	e9 25 01 00 00       	jmp    c002114d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021028:	3c 02                	cmp    al,0x2
c002102a:	0f 85 ef 00 00 00    	jne    c002111f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021030:	d1 e6                	shl    esi,1
c0021032:	09 ee                	or     esi,ebp
c0021034:	52                   	push   edx
c0021035:	89 f0                	mov    eax,esi
c0021037:	6a 01                	push   0x1
c0021039:	0f b6 f0             	movzx  esi,al
c002103c:	c1 e6 06             	shl    esi,0x6
c002103f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021047:	50                   	push   eax
c0021048:	57                   	push   edi
c0021049:	e8 30 f6 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c002104e:	83 c4 10             	add    esp,0x10
c0021051:	89 c6                	mov    esi,eax
c0021053:	a8 01                	test   al,0x1
c0021055:	74 12                	je     c0021069 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021057:	83 ec 0c             	sub    esp,0xc
c002105a:	b3 07                	mov    bl,0x7
c002105c:	68 6c 8e 02 c0       	push   0xc0028e6c
c0021061:	e8 eb 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021066:	83 c4 10             	add    esp,0x10
c0021069:	f7 c6 02 00 00 00    	test   esi,0x2
c002106f:	74 12                	je     c0021083 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021071:	83 ec 0c             	sub    esp,0xc
c0021074:	b3 03                	mov    bl,0x3
c0021076:	68 8a 8e 02 c0       	push   0xc0028e8a
c002107b:	e8 d1 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021080:	83 c4 10             	add    esp,0x10
c0021083:	f7 c6 04 00 00 00    	test   esi,0x4
c0021089:	74 12                	je     c002109d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002108b:	83 ec 0c             	sub    esp,0xc
c002108e:	b3 14                	mov    bl,0x14
c0021090:	68 aa 8e 02 c0       	push   0xc0028eaa
c0021095:	e8 b7 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002109a:	83 c4 10             	add    esp,0x10
c002109d:	f7 c6 08 00 00 00    	test   esi,0x8
c00210a3:	74 12                	je     c00210b7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00210a5:	83 ec 0c             	sub    esp,0xc
c00210a8:	b3 03                	mov    bl,0x3
c00210aa:	68 8a 8e 02 c0       	push   0xc0028e8a
c00210af:	e8 9d 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00210b4:	83 c4 10             	add    esp,0x10
c00210b7:	f7 c6 10 00 00 00    	test   esi,0x10
c00210bd:	74 12                	je     c00210d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00210bf:	83 ec 0c             	sub    esp,0xc
c00210c2:	b3 15                	mov    bl,0x15
c00210c4:	68 c2 8e 02 c0       	push   0xc0028ec2
c00210c9:	e8 83 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00210ce:	83 c4 10             	add    esp,0x10
c00210d1:	f7 c6 20 00 00 00    	test   esi,0x20
c00210d7:	74 12                	je     c00210eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00210d9:	83 ec 0c             	sub    esp,0xc
c00210dc:	b3 03                	mov    bl,0x3
c00210de:	68 8a 8e 02 c0       	push   0xc0028e8a
c00210e3:	e8 69 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00210e8:	83 c4 10             	add    esp,0x10
c00210eb:	f7 c6 40 00 00 00    	test   esi,0x40
c00210f1:	74 12                	je     c0021105 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00210f3:	83 ec 0c             	sub    esp,0xc
c00210f6:	b3 16                	mov    bl,0x16
c00210f8:	68 dc 8e 02 c0       	push   0xc0028edc
c00210fd:	e8 4f 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021102:	83 c4 10             	add    esp,0x10
c0021105:	89 f0                	mov    eax,esi
c0021107:	84 c0                	test   al,al
c0021109:	79 42                	jns    c002114d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002110b:	83 ec 0c             	sub    esp,0xc
c002110e:	b3 0d                	mov    bl,0xd
c0021110:	68 fd 8e 02 c0       	push   0xc0028efd
c0021115:	e8 37 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002111a:	83 c4 10             	add    esp,0x10
c002111d:	eb 2e                	jmp    c002114d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002111f:	3c 03                	cmp    al,0x3
c0021121:	75 14                	jne    c0021137 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021123:	83 ec 0c             	sub    esp,0xc
c0021126:	b3 17                	mov    bl,0x17
c0021128:	68 11 8f 02 c0       	push   0xc0028f11
c002112d:	e8 1f 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021132:	83 c4 10             	add    esp,0x10
c0021135:	eb 16                	jmp    c002114d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021137:	3c 04                	cmp    al,0x4
c0021139:	75 12                	jne    c002114d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002113b:	83 ec 0c             	sub    esp,0xc
c002113e:	b3 08                	mov    bl,0x8
c0021140:	68 27 8f 02 c0       	push   0xc0028f27
c0021145:	e8 07 11 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002114a:	83 c4 10             	add    esp,0x10
c002114d:	50                   	push   eax
c002114e:	50                   	push   eax
c002114f:	0f b6 c3             	movzx  eax,bl
c0021152:	50                   	push   eax
c0021153:	68 3f 8f 02 c0       	push   0xc0028f3f
c0021158:	e8 f4 10 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002115d:	83 c4 10             	add    esp,0x10
c0021160:	83 c4 1c             	add    esp,0x1c
c0021163:	88 d8                	mov    al,bl
c0021165:	5b                   	pop    ebx
c0021166:	5e                   	pop    esi
c0021167:	5f                   	pop    edi
c0021168:	5d                   	pop    ebp
c0021169:	c3                   	ret    

c002116a <IDE::polling(unsigned char, unsigned int)>:
c002116a:	57                   	push   edi
c002116b:	56                   	push   esi
c002116c:	53                   	push   ebx
c002116d:	bb 04 00 00 00       	mov    ebx,0x4
c0021172:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021176:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002117b:	52                   	push   edx
c002117c:	6a 0c                	push   0xc
c002117e:	56                   	push   esi
c002117f:	57                   	push   edi
c0021180:	e8 f9 f4 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0021185:	83 c4 10             	add    esp,0x10
c0021188:	4b                   	dec    ebx
c0021189:	75 f0                	jne    c002117b <IDE::polling(unsigned char, unsigned int)+0x11>
c002118b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021190:	50                   	push   eax
c0021191:	6a 0c                	push   0xc
c0021193:	56                   	push   esi
c0021194:	57                   	push   edi
c0021195:	e8 e4 f4 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c002119a:	83 c4 10             	add    esp,0x10
c002119d:	a8 01                	test   al,0x1
c002119f:	74 12                	je     c00211b3 <IDE::polling(unsigned char, unsigned int)+0x49>
c00211a1:	83 ec 0c             	sub    esp,0xc
c00211a4:	68 59 8f 02 c0       	push   0xc0028f59
c00211a9:	e8 a3 10 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00211ae:	83 c4 10             	add    esp,0x10
c00211b1:	eb 17                	jmp    c00211ca <IDE::polling(unsigned char, unsigned int)+0x60>
c00211b3:	a8 20                	test   al,0x20
c00211b5:	75 0f                	jne    c00211c6 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00211b7:	4b                   	dec    ebx
c00211b8:	74 10                	je     c00211ca <IDE::polling(unsigned char, unsigned int)+0x60>
c00211ba:	84 c0                	test   al,al
c00211bc:	78 d2                	js     c0021190 <IDE::polling(unsigned char, unsigned int)+0x26>
c00211be:	a8 08                	test   al,0x8
c00211c0:	74 ce                	je     c0021190 <IDE::polling(unsigned char, unsigned int)+0x26>
c00211c2:	31 c0                	xor    eax,eax
c00211c4:	eb 06                	jmp    c00211cc <IDE::polling(unsigned char, unsigned int)+0x62>
c00211c6:	b0 01                	mov    al,0x1
c00211c8:	eb 02                	jmp    c00211cc <IDE::polling(unsigned char, unsigned int)+0x62>
c00211ca:	b0 02                	mov    al,0x2
c00211cc:	5b                   	pop    ebx
c00211cd:	5e                   	pop    esi
c00211ce:	5f                   	pop    edi
c00211cf:	c3                   	ret    

c00211d0 <ATA::close(int, int, void*)>:
c00211d0:	83 ec 0c             	sub    esp,0xc
c00211d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00211dd:	85 c0                	test   eax,eax
c00211df:	74 0c                	je     c00211ed <ATA::close(int, int, void*)+0x1d>
c00211e1:	83 ec 0c             	sub    esp,0xc
c00211e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00211e6:	50                   	push   eax
c00211e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00211ea:	83 c4 10             	add    esp,0x10
c00211ed:	31 c0                	xor    eax,eax
c00211ef:	83 c4 0c             	add    esp,0xc
c00211f2:	c3                   	ret    
c00211f3:	90                   	nop

c00211f4 <ATA::powerSaving(PowerSavingLevel)>:
c00211f4:	c3                   	ret    
c00211f5:	90                   	nop

c00211f6 <ATA::ATA()>:
c00211f6:	83 ec 0c             	sub    esp,0xc
c00211f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211fd:	83 ec 04             	sub    esp,0x4
c0021200:	68 00 02 00 00       	push   0x200
c0021205:	68 9c 8f 02 c0       	push   0xc0028f9c
c002120a:	50                   	push   eax
c002120b:	e8 52 28 ff ff       	call   c0013a62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021210:	83 c4 10             	add    esp,0x10
c0021213:	ba c8 8f 02 c0       	mov    edx,0xc0028fc8
c0021218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002121c:	89 10                	mov    DWORD PTR [eax],edx
c002121e:	90                   	nop
c002121f:	83 c4 0c             	add    esp,0xc
c0021222:	c3                   	ret    
c0021223:	90                   	nop

c0021224 <ATA::flush(bool)>:
c0021224:	53                   	push   ebx
c0021225:	83 ec 08             	sub    esp,0x8
c0021228:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002122d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021231:	19 c0                	sbb    eax,eax
c0021233:	83 e0 fd             	and    eax,0xfffffffd
c0021236:	05 ea 00 00 00       	add    eax,0xea
c002123b:	50                   	push   eax
c002123c:	6a 07                	push   0x7
c002123e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021245:	50                   	push   eax
c0021246:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002124c:	e8 6d f3 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021251:	83 c4 0c             	add    esp,0xc
c0021254:	6a 00                	push   0x0
c0021256:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002125d:	50                   	push   eax
c002125e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021264:	e8 01 ff ff ff       	call   c002116a <IDE::polling(unsigned char, unsigned int)>
c0021269:	83 c4 18             	add    esp,0x18
c002126c:	5b                   	pop    ebx
c002126d:	c3                   	ret    

c002126e <ATA::readyForCommand()>:
c002126e:	56                   	push   esi
c002126f:	53                   	push   ebx
c0021270:	31 db                	xor    ebx,ebx
c0021272:	50                   	push   eax
c0021273:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021277:	50                   	push   eax
c0021278:	6a 0c                	push   0xc
c002127a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021281:	50                   	push   eax
c0021282:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021288:	e8 f1 f3 ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c002128d:	83 c4 10             	add    esp,0x10
c0021290:	a8 88                	test   al,0x88
c0021292:	74 23                	je     c00212b7 <ATA::readyForCommand()+0x49>
c0021294:	43                   	inc    ebx
c0021295:	83 fb 63             	cmp    ebx,0x63
c0021298:	7e dd                	jle    c0021277 <ATA::readyForCommand()+0x9>
c002129a:	51                   	push   ecx
c002129b:	51                   	push   ecx
c002129c:	6a 00                	push   0x0
c002129e:	68 40 42 0f 00       	push   0xf4240
c00212a3:	e8 c6 b8 ff ff       	call   c001cb6e <nanoSleep(unsigned long long)>
c00212a8:	83 c4 10             	add    esp,0x10
c00212ab:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00212b1:	75 c4                	jne    c0021277 <ATA::readyForCommand()+0x9>
c00212b3:	31 c0                	xor    eax,eax
c00212b5:	eb 02                	jmp    c00212b9 <ATA::readyForCommand()+0x4b>
c00212b7:	b0 01                	mov    al,0x1
c00212b9:	5a                   	pop    edx
c00212ba:	5b                   	pop    ebx
c00212bb:	5e                   	pop    esi
c00212bc:	c3                   	ret    
c00212bd:	90                   	nop

c00212be <ATA::access(unsigned long long, int, void*, bool)>:
c00212be:	55                   	push   ebp
c00212bf:	57                   	push   edi
c00212c0:	56                   	push   esi
c00212c1:	53                   	push   ebx
c00212c2:	83 ec 2c             	sub    esp,0x2c
c00212c5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00212c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00212cd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00212d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00212d5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00212d9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00212dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00212e1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00212e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212eb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00212f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00212f5:	c1 e0 06             	shl    eax,0x6
c00212f8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0021300:	74 5d                	je     c002135f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0021302:	89 fa                	mov    edx,edi
c0021304:	89 f0                	mov    eax,esi
c0021306:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002130a:	c1 ea 1c             	shr    edx,0x1c
c002130d:	89 d1                	mov    ecx,edx
c002130f:	09 c1                	or     ecx,eax
c0021311:	74 25                	je     c0021338 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0021313:	31 ed                	xor    ebp,ebp
c0021315:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002131c:	89 fa                	mov    edx,edi
c002131e:	89 f0                	mov    eax,esi
c0021320:	0f ad d0             	shrd   eax,edx,cl
c0021323:	d3 ea                	shr    edx,cl
c0021325:	f6 c1 20             	test   cl,0x20
c0021328:	74 02                	je     c002132c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002132a:	89 d0                	mov    eax,edx
c002132c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021330:	45                   	inc    ebp
c0021331:	83 fd 06             	cmp    ebp,0x6
c0021334:	75 df                	jne    c0021315 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021336:	eb 76                	jmp    c00213ae <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021338:	89 f0                	mov    eax,esi
c002133a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002133f:	89 fa                	mov    edx,edi
c0021341:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021348:	0f ac d0 10          	shrd   eax,edx,0x10
c002134c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021351:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021355:	c1 ee 18             	shr    esi,0x18
c0021358:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002135d:	eb 56                	jmp    c00213b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002135f:	6a 00                	push   0x0
c0021361:	6a 3f                	push   0x3f
c0021363:	57                   	push   edi
c0021364:	56                   	push   esi
c0021365:	e8 66 20 00 00       	call   c00233d0 <__umoddi3>
c002136a:	83 c4 10             	add    esp,0x10
c002136d:	40                   	inc    eax
c002136e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0021372:	6a 00                	push   0x0
c0021374:	68 f0 03 00 00       	push   0x3f0
c0021379:	57                   	push   edi
c002137a:	56                   	push   esi
c002137b:	e8 50 1f 00 00       	call   c00232d0 <__udivdi3>
c0021380:	83 c4 10             	add    esp,0x10
c0021383:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0021388:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002138f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021394:	6a 00                	push   0x0
c0021396:	6a 3f                	push   0x3f
c0021398:	57                   	push   edi
c0021399:	56                   	push   esi
c002139a:	e8 31 1f 00 00       	call   c00232d0 <__udivdi3>
c002139f:	83 c4 10             	add    esp,0x10
c00213a2:	89 c6                	mov    esi,eax
c00213a4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00213a9:	83 e6 0f             	and    esi,0xf
c00213ac:	eb 07                	jmp    c00213b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00213ae:	31 f6                	xor    esi,esi
c00213b0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00213b5:	bf 01 00 00 00       	mov    edi,0x1
c00213ba:	50                   	push   eax
c00213bb:	6a 00                	push   0x0
c00213bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00213c4:	50                   	push   eax
c00213c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00213c9:	e8 fc f3 ff ff       	call   c00207ca <IDE::enableIRQs(unsigned char, bool)>
c00213ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00213d1:	e8 98 fe ff ff       	call   c002126e <ATA::readyForCommand()>
c00213d6:	83 c4 10             	add    esp,0x10
c00213d9:	84 c0                	test   al,al
c00213db:	0f 84 50 02 00 00    	je     c0021631 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00213e1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00213e7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00213ed:	c1 e0 04             	shl    eax,0x4
c00213f0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00213f7:	09 c6                	or     esi,eax
c00213f9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00213fe:	75 05                	jne    c0021405 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0021400:	83 ce a0             	or     esi,0xffffffa0
c0021403:	eb 03                	jmp    c0021408 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0021405:	83 ce e0             	or     esi,0xffffffe0
c0021408:	89 f0                	mov    eax,esi
c002140a:	0f b6 f0             	movzx  esi,al
c002140d:	56                   	push   esi
c002140e:	6a 06                	push   0x6
c0021410:	51                   	push   ecx
c0021411:	52                   	push   edx
c0021412:	e8 a7 f1 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021417:	83 c4 10             	add    esp,0x10
c002141a:	6a 00                	push   0x0
c002141c:	6a 01                	push   0x1
c002141e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021425:	50                   	push   eax
c0021426:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002142c:	e8 8d f1 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021431:	83 c4 10             	add    esp,0x10
c0021434:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021439:	75 6e                	jne    c00214a9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002143b:	6a 00                	push   0x0
c002143d:	6a 08                	push   0x8
c002143f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021446:	50                   	push   eax
c0021447:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002144d:	e8 6c f1 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021452:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021457:	50                   	push   eax
c0021458:	6a 09                	push   0x9
c002145a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021461:	50                   	push   eax
c0021462:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021468:	e8 51 f1 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c002146d:	83 c4 20             	add    esp,0x20
c0021470:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0021475:	50                   	push   eax
c0021476:	6a 0a                	push   0xa
c0021478:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002147f:	50                   	push   eax
c0021480:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021486:	e8 33 f1 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c002148b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0021490:	50                   	push   eax
c0021491:	6a 0b                	push   0xb
c0021493:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002149a:	50                   	push   eax
c002149b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00214a1:	e8 18 f1 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00214a6:	83 c4 20             	add    esp,0x20
c00214a9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00214ae:	50                   	push   eax
c00214af:	6a 02                	push   0x2
c00214b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00214b8:	50                   	push   eax
c00214b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00214bf:	e8 fa f0 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00214c4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00214c9:	50                   	push   eax
c00214ca:	6a 03                	push   0x3
c00214cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00214d3:	50                   	push   eax
c00214d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00214da:	e8 df f0 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00214df:	83 c4 20             	add    esp,0x20
c00214e2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00214e7:	50                   	push   eax
c00214e8:	6a 04                	push   0x4
c00214ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00214f1:	50                   	push   eax
c00214f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00214f8:	e8 c1 f0 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00214fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021502:	50                   	push   eax
c0021503:	6a 05                	push   0x5
c0021505:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002150c:	50                   	push   eax
c002150d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021513:	e8 a6 f0 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021518:	83 c4 20             	add    esp,0x20
c002151b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021520:	0f 94 c0             	sete   al
c0021523:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021528:	74 09                	je     c0021533 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002152a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021531:	eb 07                	jmp    c002153a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021533:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002153a:	0f b6 c0             	movzx  eax,al
c002153d:	50                   	push   eax
c002153e:	6a 07                	push   0x7
c0021540:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021547:	50                   	push   eax
c0021548:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002154e:	e8 6b f0 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021553:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021557:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002155b:	83 c4 10             	add    esp,0x10
c002155e:	85 f6                	test   esi,esi
c0021560:	0f 84 ac 00 00 00    	je     c0021612 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021566:	50                   	push   eax
c0021567:	6a 01                	push   0x1
c0021569:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021570:	50                   	push   eax
c0021571:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021577:	e8 ee fb ff ff       	call   c002116a <IDE::polling(unsigned char, unsigned int)>
c002157c:	83 c4 10             	add    esp,0x10
c002157f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021585:	84 c0                	test   al,al
c0021587:	74 20                	je     c00215a9 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0021589:	0f b6 f8             	movzx  edi,al
c002158c:	0f b6 d2             	movzx  edx,dl
c002158f:	57                   	push   edi
c0021590:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0021597:	50                   	push   eax
c0021598:	52                   	push   edx
c0021599:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002159f:	e8 30 fa ff ff       	call   c0020fd4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00215a4:	e9 85 00 00 00       	jmp    c002162e <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00215a9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00215ae:	74 41                	je     c00215f1 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00215b0:	31 c9                	xor    ecx,ecx
c00215b2:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00215b6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00215ba:	50                   	push   eax
c00215bb:	50                   	push   eax
c00215bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00215c3:	50                   	push   eax
c00215c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00215ca:	e8 dd ef ff ff       	call   c00205ac <IDE::getBase(unsigned char)>
c00215cf:	89 c2                	mov    edx,eax
c00215d1:	89 e8                	mov    eax,ebp
c00215d3:	66 ef                	out    dx,ax
c00215d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00215d9:	83 c4 10             	add    esp,0x10
c00215dc:	41                   	inc    ecx
c00215dd:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00215e3:	75 cd                	jne    c00215b2 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00215e5:	4e                   	dec    esi
c00215e6:	81 c7 00 02 00 00    	add    edi,0x200
c00215ec:	e9 6d ff ff ff       	jmp    c002155e <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00215f1:	0f b6 d2             	movzx  edx,dl
c00215f4:	51                   	push   ecx
c00215f5:	51                   	push   ecx
c00215f6:	52                   	push   edx
c00215f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00215fd:	e8 aa ef ff ff       	call   c00205ac <IDE::getBase(unsigned char)>
c0021602:	b9 00 01 00 00       	mov    ecx,0x100
c0021607:	89 c2                	mov    edx,eax
c0021609:	fc                   	cld    
c002160a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002160d:	83 c4 10             	add    esp,0x10
c0021610:	eb d3                	jmp    c00215e5 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0021612:	31 ff                	xor    edi,edi
c0021614:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021619:	74 16                	je     c0021631 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002161b:	50                   	push   eax
c002161c:	50                   	push   eax
c002161d:	31 c0                	xor    eax,eax
c002161f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0021624:	0f 94 c0             	sete   al
c0021627:	50                   	push   eax
c0021628:	53                   	push   ebx
c0021629:	e8 f6 fb ff ff       	call   c0021224 <ATA::flush(bool)>
c002162e:	83 c4 10             	add    esp,0x10
c0021631:	83 c4 2c             	add    esp,0x2c
c0021634:	89 f8                	mov    eax,edi
c0021636:	5b                   	pop    ebx
c0021637:	5e                   	pop    esi
c0021638:	5f                   	pop    edi
c0021639:	5d                   	pop    ebp
c002163a:	c3                   	ret    
c002163b:	90                   	nop

c002163c <ATA::read(unsigned long long, int, void*)>:
c002163c:	57                   	push   edi
c002163d:	b8 04 00 00 00       	mov    eax,0x4
c0021642:	56                   	push   esi
c0021643:	53                   	push   ebx
c0021644:	83 ec 10             	sub    esp,0x10
c0021647:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002164b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002164f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021652:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021656:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002165a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021660:	77 3b                	ja     c002169d <ATA::read(unsigned long long, int, void*)+0x61>
c0021662:	b8 06 00 00 00       	mov    eax,0x6
c0021667:	85 d2                	test   edx,edx
c0021669:	74 32                	je     c002169d <ATA::read(unsigned long long, int, void*)+0x61>
c002166b:	50                   	push   eax
c002166c:	50                   	push   eax
c002166d:	6a 00                	push   0x0
c002166f:	52                   	push   edx
c0021670:	53                   	push   ebx
c0021671:	57                   	push   edi
c0021672:	56                   	push   esi
c0021673:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021677:	e8 42 fc ff ff       	call   c00212be <ATA::access(unsigned long long, int, void*, bool)>
c002167c:	83 c4 20             	add    esp,0x20
c002167f:	85 c0                	test   eax,eax
c0021681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021685:	75 11                	jne    c0021698 <ATA::read(unsigned long long, int, void*)+0x5c>
c0021687:	01 1d e8 c6 02 c0    	add    DWORD PTR ds:0xc002c6e8,ebx
c002168d:	e8 aa ea fe ff       	call   c001013c <VgaText::updateDiskUsage()>
c0021692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021696:	eb 05                	jmp    c002169d <ATA::read(unsigned long long, int, void*)+0x61>
c0021698:	b8 01 00 00 00       	mov    eax,0x1
c002169d:	83 c4 10             	add    esp,0x10
c00216a0:	5b                   	pop    ebx
c00216a1:	5e                   	pop    esi
c00216a2:	5f                   	pop    edi
c00216a3:	c3                   	ret    

c00216a4 <ATA::write(unsigned long long, int, void*)>:
c00216a4:	57                   	push   edi
c00216a5:	b8 04 00 00 00       	mov    eax,0x4
c00216aa:	56                   	push   esi
c00216ab:	53                   	push   ebx
c00216ac:	83 ec 10             	sub    esp,0x10
c00216af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00216b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00216b7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00216ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00216be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00216c2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00216c8:	77 3b                	ja     c0021705 <ATA::write(unsigned long long, int, void*)+0x61>
c00216ca:	b8 06 00 00 00       	mov    eax,0x6
c00216cf:	85 d2                	test   edx,edx
c00216d1:	74 32                	je     c0021705 <ATA::write(unsigned long long, int, void*)+0x61>
c00216d3:	50                   	push   eax
c00216d4:	50                   	push   eax
c00216d5:	6a 01                	push   0x1
c00216d7:	52                   	push   edx
c00216d8:	53                   	push   ebx
c00216d9:	57                   	push   edi
c00216da:	56                   	push   esi
c00216db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00216df:	e8 da fb ff ff       	call   c00212be <ATA::access(unsigned long long, int, void*, bool)>
c00216e4:	83 c4 20             	add    esp,0x20
c00216e7:	85 c0                	test   eax,eax
c00216e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00216ed:	75 11                	jne    c0021700 <ATA::write(unsigned long long, int, void*)+0x5c>
c00216ef:	01 1d e4 c6 02 c0    	add    DWORD PTR ds:0xc002c6e4,ebx
c00216f5:	e8 42 ea fe ff       	call   c001013c <VgaText::updateDiskUsage()>
c00216fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216fe:	eb 05                	jmp    c0021705 <ATA::write(unsigned long long, int, void*)+0x61>
c0021700:	b8 01 00 00 00       	mov    eax,0x1
c0021705:	83 c4 10             	add    esp,0x10
c0021708:	5b                   	pop    ebx
c0021709:	5e                   	pop    esi
c002170a:	5f                   	pop    edi
c002170b:	c3                   	ret    

c002170c <ATA::detectCHS()>:
c002170c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021710:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0021716:	c1 e0 06             	shl    eax,0x6
c0021719:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002171f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021729:	c7 44 24 04 ab 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028fab
c0021731:	e9 9d 7f ff ff       	jmp    c00196d3 <Krnl::panic(char const*)>

c0021736 <ATA::open(int, int, void*)>:
c0021736:	53                   	push   ebx
c0021737:	83 ec 08             	sub    esp,0x8
c002173a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002173e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021742:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021746:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002174c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021752:	c1 e0 06             	shl    eax,0x6
c0021755:	01 d0                	add    eax,edx
c0021757:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002175e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021764:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002176b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021775:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002177b:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0021782:	75 0c                	jne    c0021790 <ATA::open(int, int, void*)+0x5a>
c0021784:	83 ec 0c             	sub    esp,0xc
c0021787:	53                   	push   ebx
c0021788:	e8 7f ff ff ff       	call   c002170c <ATA::detectCHS()>
c002178d:	83 c4 10             	add    esp,0x10
c0021790:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021796:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002179c:	c1 e0 06             	shl    eax,0x6
c002179f:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00217a6:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00217b0:	d1 e8                	shr    eax,1
c00217b2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00217b8:	6a 04                	push   0x4
c00217ba:	6a 0c                	push   0xc
c00217bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217c3:	50                   	push   eax
c00217c4:	52                   	push   edx
c00217c5:	e8 f4 ed ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217ca:	90                   	nop
c00217cb:	90                   	nop
c00217cc:	6a 00                	push   0x0
c00217ce:	6a 0c                	push   0xc
c00217d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217d7:	50                   	push   eax
c00217d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217de:	e8 db ed ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217e3:	83 c4 14             	add    esp,0x14
c00217e6:	53                   	push   ebx
c00217e7:	e8 de 22 ff ff       	call   c0013aca <PhysicalDisk::startCache()>
c00217ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217ef:	e8 62 42 ff ff       	call   c0015a56 <createPartitionsForDisk(PhysicalDisk*)>
c00217f4:	31 c0                	xor    eax,eax
c00217f6:	83 c4 18             	add    esp,0x18
c00217f9:	5b                   	pop    ebx
c00217fa:	c3                   	ret    
c00217fb:	90                   	nop

c00217fc <ATAPI::write(unsigned long long, int, void*)>:
c00217fc:	b8 03 00 00 00       	mov    eax,0x3
c0021801:	c3                   	ret    

c0021802 <ATAPI::close(int, int, void*)>:
c0021802:	83 ec 0c             	sub    esp,0xc
c0021805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021809:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002180f:	85 c0                	test   eax,eax
c0021811:	74 0c                	je     c002181f <ATAPI::close(int, int, void*)+0x1d>
c0021813:	83 ec 0c             	sub    esp,0xc
c0021816:	8b 10                	mov    edx,DWORD PTR [eax]
c0021818:	50                   	push   eax
c0021819:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002181c:	83 c4 10             	add    esp,0x10
c002181f:	31 c0                	xor    eax,eax
c0021821:	83 c4 0c             	add    esp,0xc
c0021824:	c3                   	ret    
c0021825:	90                   	nop

c0021826 <ATAPI::ATAPI()>:
c0021826:	83 ec 0c             	sub    esp,0xc
c0021829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002182d:	83 ec 04             	sub    esp,0x4
c0021830:	68 00 08 00 00       	push   0x800
c0021835:	68 f4 8f 02 c0       	push   0xc0028ff4
c002183a:	50                   	push   eax
c002183b:	e8 22 22 ff ff       	call   c0013a62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021840:	83 c4 10             	add    esp,0x10
c0021843:	ba 34 90 02 c0       	mov    edx,0xc0029034
c0021848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002184c:	89 10                	mov    DWORD PTR [eax],edx
c002184e:	90                   	nop
c002184f:	83 c4 0c             	add    esp,0xc
c0021852:	c3                   	ret    
c0021853:	90                   	nop

c0021854 <ATAPI::readyForCommand()>:
c0021854:	56                   	push   esi
c0021855:	53                   	push   ebx
c0021856:	31 db                	xor    ebx,ebx
c0021858:	50                   	push   eax
c0021859:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002185d:	50                   	push   eax
c002185e:	6a 0c                	push   0xc
c0021860:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021867:	50                   	push   eax
c0021868:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002186e:	e8 0b ee ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0021873:	83 c4 10             	add    esp,0x10
c0021876:	a8 88                	test   al,0x88
c0021878:	74 23                	je     c002189d <ATAPI::readyForCommand()+0x49>
c002187a:	43                   	inc    ebx
c002187b:	83 fb 63             	cmp    ebx,0x63
c002187e:	7e dd                	jle    c002185d <ATAPI::readyForCommand()+0x9>
c0021880:	51                   	push   ecx
c0021881:	51                   	push   ecx
c0021882:	6a 00                	push   0x0
c0021884:	68 40 42 0f 00       	push   0xf4240
c0021889:	e8 e0 b2 ff ff       	call   c001cb6e <nanoSleep(unsigned long long)>
c002188e:	83 c4 10             	add    esp,0x10
c0021891:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021897:	75 c4                	jne    c002185d <ATAPI::readyForCommand()+0x9>
c0021899:	31 c0                	xor    eax,eax
c002189b:	eb 02                	jmp    c002189f <ATAPI::readyForCommand()+0x4b>
c002189d:	b0 01                	mov    al,0x1
c002189f:	5a                   	pop    edx
c00218a0:	5b                   	pop    ebx
c00218a1:	5e                   	pop    esi
c00218a2:	c3                   	ret    
c00218a3:	90                   	nop

c00218a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00218a4:	55                   	push   ebp
c00218a5:	57                   	push   edi
c00218a6:	56                   	push   esi
c00218a7:	53                   	push   ebx
c00218a8:	83 ec 20             	sub    esp,0x20
c00218ab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00218af:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00218b3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00218b7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00218bb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00218bf:	6a 01                	push   0x1
c00218c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00218c8:	50                   	push   eax
c00218c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00218cf:	e8 f6 ee ff ff       	call   c00207ca <IDE::enableIRQs(unsigned char, bool)>
c00218d4:	5e                   	pop    esi
c00218d5:	58                   	pop    eax
c00218d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00218dd:	50                   	push   eax
c00218de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00218e4:	e8 af ec ff ff       	call   c0020598 <IDE::prepareInterrupt(unsigned char)>
c00218e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00218ec:	e8 63 ff ff ff       	call   c0021854 <ATAPI::readyForCommand()>
c00218f1:	83 c4 10             	add    esp,0x10
c00218f4:	84 c0                	test   al,al
c00218f6:	75 0a                	jne    c0021902 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00218f8:	bb 01 00 00 00       	mov    ebx,0x1
c00218fd:	e9 57 02 00 00       	jmp    c0021b59 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021902:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021908:	c1 e0 04             	shl    eax,0x4
c002190b:	0f b6 c0             	movzx  eax,al
c002190e:	50                   	push   eax
c002190f:	6a 06                	push   0x6
c0021911:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021918:	50                   	push   eax
c0021919:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002191f:	e8 9a ec ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021924:	6a 00                	push   0x0
c0021926:	6a 01                	push   0x1
c0021928:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002192f:	50                   	push   eax
c0021930:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021936:	e8 83 ec ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c002193b:	83 c4 20             	add    esp,0x20
c002193e:	0f b6 c3             	movzx  eax,bl
c0021941:	0f b6 df             	movzx  ebx,bh
c0021944:	50                   	push   eax
c0021945:	6a 04                	push   0x4
c0021947:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002194e:	50                   	push   eax
c002194f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021955:	e8 64 ec ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c002195a:	53                   	push   ebx
c002195b:	6a 05                	push   0x5
c002195d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021964:	50                   	push   eax
c0021965:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002196b:	e8 4e ec ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021970:	83 c4 20             	add    esp,0x20
c0021973:	68 a0 00 00 00       	push   0xa0
c0021978:	6a 07                	push   0x7
c002197a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021981:	50                   	push   eax
c0021982:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021988:	e8 31 ec ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c002198d:	83 c4 0c             	add    esp,0xc
c0021990:	6a 01                	push   0x1
c0021992:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021999:	50                   	push   eax
c002199a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00219a0:	e8 c5 f7 ff ff       	call   c002116a <IDE::polling(unsigned char, unsigned int)>
c00219a5:	83 c4 10             	add    esp,0x10
c00219a8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00219ae:	84 c0                	test   al,al
c00219b0:	74 23                	je     c00219d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00219b2:	0f b6 d8             	movzx  ebx,al
c00219b5:	0f b6 d2             	movzx  edx,dl
c00219b8:	53                   	push   ebx
c00219b9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00219c0:	50                   	push   eax
c00219c1:	52                   	push   edx
c00219c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00219c8:	e8 07 f6 ff ff       	call   c0020fd4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00219cd:	83 c4 10             	add    esp,0x10
c00219d0:	e9 84 01 00 00       	jmp    c0021b59 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00219d5:	0f b6 d2             	movzx  edx,dl
c00219d8:	53                   	push   ebx
c00219d9:	53                   	push   ebx
c00219da:	52                   	push   edx
c00219db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00219e1:	e8 c6 eb ff ff       	call   c00205ac <IDE::getBase(unsigned char)>
c00219e6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00219ea:	b9 06 00 00 00       	mov    ecx,0x6
c00219ef:	89 c2                	mov    edx,eax
c00219f1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00219f4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00219f8:	83 c4 10             	add    esp,0x10
c00219fb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021a01:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021a08:	85 db                	test   ebx,ebx
c0021a0a:	0f 84 ec 00 00 00    	je     c0021afc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021a10:	51                   	push   ecx
c0021a11:	51                   	push   ecx
c0021a12:	52                   	push   edx
c0021a13:	50                   	push   eax
c0021a14:	e8 13 ed ff ff       	call   c002072c <IDE::waitInterrupt(unsigned char)>
c0021a19:	83 c4 10             	add    esp,0x10
c0021a1c:	84 c0                	test   al,al
c0021a1e:	0f 84 d4 fe ff ff    	je     c00218f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021a24:	56                   	push   esi
c0021a25:	56                   	push   esi
c0021a26:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021a2d:	50                   	push   eax
c0021a2e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021a34:	e8 5f eb ff ff       	call   c0020598 <IDE::prepareInterrupt(unsigned char)>
c0021a39:	83 c4 0c             	add    esp,0xc
c0021a3c:	6a 04                	push   0x4
c0021a3e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021a45:	50                   	push   eax
c0021a46:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021a4c:	e8 2d ec ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0021a51:	83 c4 0c             	add    esp,0xc
c0021a54:	89 c6                	mov    esi,eax
c0021a56:	6a 05                	push   0x5
c0021a58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021a5f:	50                   	push   eax
c0021a60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021a66:	e8 13 ec ff ff       	call   c002067e <IDE::read(unsigned char, unsigned char)>
c0021a6b:	89 f1                	mov    ecx,esi
c0021a6d:	0f b6 c0             	movzx  eax,al
c0021a70:	0f b6 f1             	movzx  esi,cl
c0021a73:	c1 e0 08             	shl    eax,0x8
c0021a76:	09 c6                	or     esi,eax
c0021a78:	d1 fe                	sar    esi,1
c0021a7a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021a7e:	83 c4 10             	add    esp,0x10
c0021a81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021a86:	74 41                	je     c0021ac9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021a88:	31 c9                	xor    ecx,ecx
c0021a8a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021a90:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021a97:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021a9b:	75 0a                	jne    c0021aa7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021a9d:	01 c9                	add    ecx,ecx
c0021a9f:	01 cd                	add    ebp,ecx
c0021aa1:	4b                   	dec    ebx
c0021aa2:	e9 54 ff ff ff       	jmp    c00219fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021aa7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021aac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021ab0:	51                   	push   ecx
c0021ab1:	51                   	push   ecx
c0021ab2:	52                   	push   edx
c0021ab3:	50                   	push   eax
c0021ab4:	e8 f3 ea ff ff       	call   c00205ac <IDE::getBase(unsigned char)>
c0021ab9:	89 c2                	mov    edx,eax
c0021abb:	89 f0                	mov    eax,esi
c0021abd:	66 ef                	out    dx,ax
c0021abf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021ac3:	83 c4 10             	add    esp,0x10
c0021ac6:	41                   	inc    ecx
c0021ac7:	eb c1                	jmp    c0021a8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021ac9:	31 f6                	xor    esi,esi
c0021acb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021ad1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021ad8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021adc:	75 06                	jne    c0021ae4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021ade:	01 f6                	add    esi,esi
c0021ae0:	01 f5                	add    ebp,esi
c0021ae2:	eb bd                	jmp    c0021aa1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021ae4:	51                   	push   ecx
c0021ae5:	51                   	push   ecx
c0021ae6:	52                   	push   edx
c0021ae7:	50                   	push   eax
c0021ae8:	e8 bf ea ff ff       	call   c00205ac <IDE::getBase(unsigned char)>
c0021aed:	89 c2                	mov    edx,eax
c0021aef:	66 ed                	in     ax,dx
c0021af1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021af6:	83 c4 10             	add    esp,0x10
c0021af9:	46                   	inc    esi
c0021afa:	eb cf                	jmp    c0021acb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021afc:	51                   	push   ecx
c0021afd:	51                   	push   ecx
c0021afe:	52                   	push   edx
c0021aff:	50                   	push   eax
c0021b00:	e8 27 ec ff ff       	call   c002072c <IDE::waitInterrupt(unsigned char)>
c0021b05:	83 c4 10             	add    esp,0x10
c0021b08:	84 c0                	test   al,al
c0021b0a:	0f 84 e8 fd ff ff    	je     c00218f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021b10:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021b15:	52                   	push   edx
c0021b16:	52                   	push   edx
c0021b17:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b1e:	50                   	push   eax
c0021b1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b25:	e8 6e ea ff ff       	call   c0020598 <IDE::prepareInterrupt(unsigned char)>
c0021b2a:	83 c4 10             	add    esp,0x10
c0021b2d:	50                   	push   eax
c0021b2e:	50                   	push   eax
c0021b2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b36:	50                   	push   eax
c0021b37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b3d:	e8 6a ea ff ff       	call   c00205ac <IDE::getBase(unsigned char)>
c0021b42:	8d 50 07             	lea    edx,[eax+0x7]
c0021b45:	ec                   	in     al,dx
c0021b46:	83 c4 10             	add    esp,0x10
c0021b49:	a8 88                	test   al,0x88
c0021b4b:	74 0a                	je     c0021b57 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021b4d:	4b                   	dec    ebx
c0021b4e:	75 dd                	jne    c0021b2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021b50:	bb 02 00 00 00       	mov    ebx,0x2
c0021b55:	eb 02                	jmp    c0021b59 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021b57:	31 db                	xor    ebx,ebx
c0021b59:	83 c4 1c             	add    esp,0x1c
c0021b5c:	89 d8                	mov    eax,ebx
c0021b5e:	5b                   	pop    ebx
c0021b5f:	5e                   	pop    esi
c0021b60:	5f                   	pop    edi
c0021b61:	5d                   	pop    ebp
c0021b62:	c3                   	ret    
c0021b63:	90                   	nop

c0021b64 <ATAPI::diskRemoved()>:
c0021b64:	83 ec 18             	sub    esp,0x18
c0021b67:	68 ff 8f 02 c0       	push   0xc0028fff
c0021b6c:	e8 e0 06 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021b71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b75:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021b7c:	83 c4 1c             	add    esp,0x1c
c0021b7f:	c3                   	ret    

c0021b80 <ATAPI::eject()>:
c0021b80:	57                   	push   edi
c0021b81:	b9 03 00 00 00       	mov    ecx,0x3
c0021b86:	53                   	push   ebx
c0021b87:	83 ec 14             	sub    esp,0x14
c0021b8a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021b8e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021b92:	fc                   	cld    
c0021b93:	31 c0                	xor    eax,eax
c0021b95:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021b97:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021b9c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021ba1:	50                   	push   eax
c0021ba2:	50                   	push   eax
c0021ba3:	6a 00                	push   0x0
c0021ba5:	6a 00                	push   0x0
c0021ba7:	6a 00                	push   0x0
c0021ba9:	6a 02                	push   0x2
c0021bab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021baf:	50                   	push   eax
c0021bb0:	53                   	push   ebx
c0021bb1:	e8 ee fc ff ff       	call   c00218a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021bb6:	83 c4 14             	add    esp,0x14
c0021bb9:	53                   	push   ebx
c0021bba:	e8 a5 ff ff ff       	call   c0021b64 <ATAPI::diskRemoved()>
c0021bbf:	83 c4 24             	add    esp,0x24
c0021bc2:	5b                   	pop    ebx
c0021bc3:	5f                   	pop    edi
c0021bc4:	c3                   	ret    
c0021bc5:	90                   	nop

c0021bc6 <ATAPI::diskInserted()>:
c0021bc6:	53                   	push   ebx
c0021bc7:	83 ec 14             	sub    esp,0x14
c0021bca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021bce:	68 15 90 02 c0       	push   0xc0029015
c0021bd3:	e8 79 06 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021bd8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021bdf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021be2:	e8 e3 1e ff ff       	call   c0013aca <PhysicalDisk::startCache()>
c0021be7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021beb:	83 c4 18             	add    esp,0x18
c0021bee:	5b                   	pop    ebx
c0021bef:	e9 62 3e ff ff       	jmp    c0015a56 <createPartitionsForDisk(PhysicalDisk*)>

c0021bf4 <ATAPI::detectMedia()>:
c0021bf4:	56                   	push   esi
c0021bf5:	53                   	push   ebx
c0021bf6:	83 ec 28             	sub    esp,0x28
c0021bf9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021bfd:	6a 0c                	push   0xc
c0021bff:	6a 00                	push   0x0
c0021c01:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021c05:	56                   	push   esi
c0021c06:	e8 db ea fd ff       	call   c00006e6 <memset>
c0021c0b:	58                   	pop    eax
c0021c0c:	5a                   	pop    edx
c0021c0d:	6a 00                	push   0x0
c0021c0f:	6a 00                	push   0x0
c0021c11:	6a 00                	push   0x0
c0021c13:	6a 00                	push   0x0
c0021c15:	56                   	push   esi
c0021c16:	53                   	push   ebx
c0021c17:	e8 88 fc ff ff       	call   c00218a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021c1c:	83 c4 1c             	add    esp,0x1c
c0021c1f:	6a 0c                	push   0xc
c0021c21:	6a 00                	push   0x0
c0021c23:	56                   	push   esi
c0021c24:	e8 bd ea fd ff       	call   c00006e6 <memset>
c0021c29:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021c2e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021c33:	59                   	pop    ecx
c0021c34:	58                   	pop    eax
c0021c35:	6a 01                	push   0x1
c0021c37:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021c3b:	50                   	push   eax
c0021c3c:	6a 00                	push   0x0
c0021c3e:	6a 12                	push   0x12
c0021c40:	56                   	push   esi
c0021c41:	53                   	push   ebx
c0021c42:	e8 5d fc ff ff       	call   c00218a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021c47:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021c4b:	83 c4 20             	add    esp,0x20
c0021c4e:	83 e0 7f             	and    eax,0x7f
c0021c51:	3c 70                	cmp    al,0x70
c0021c53:	74 15                	je     c0021c6a <ATAPI::detectMedia()+0x76>
c0021c55:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021c5c:	75 0c                	jne    c0021c6a <ATAPI::detectMedia()+0x76>
c0021c5e:	83 ec 0c             	sub    esp,0xc
c0021c61:	53                   	push   ebx
c0021c62:	e8 5f ff ff ff       	call   c0021bc6 <ATAPI::diskInserted()>
c0021c67:	83 c4 10             	add    esp,0x10
c0021c6a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021c6e:	83 e0 0f             	and    eax,0xf
c0021c71:	3c 02                	cmp    al,0x2
c0021c73:	75 1b                	jne    c0021c90 <ATAPI::detectMedia()+0x9c>
c0021c75:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021c7a:	75 2d                	jne    c0021ca9 <ATAPI::detectMedia()+0xb5>
c0021c7c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021c83:	74 24                	je     c0021ca9 <ATAPI::detectMedia()+0xb5>
c0021c85:	83 ec 0c             	sub    esp,0xc
c0021c88:	53                   	push   ebx
c0021c89:	e8 d6 fe ff ff       	call   c0021b64 <ATAPI::diskRemoved()>
c0021c8e:	eb 16                	jmp    c0021ca6 <ATAPI::detectMedia()+0xb2>
c0021c90:	84 c0                	test   al,al
c0021c92:	75 15                	jne    c0021ca9 <ATAPI::detectMedia()+0xb5>
c0021c94:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021c9b:	75 0c                	jne    c0021ca9 <ATAPI::detectMedia()+0xb5>
c0021c9d:	83 ec 0c             	sub    esp,0xc
c0021ca0:	53                   	push   ebx
c0021ca1:	e8 20 ff ff ff       	call   c0021bc6 <ATAPI::diskInserted()>
c0021ca6:	83 c4 10             	add    esp,0x10
c0021ca9:	83 c4 24             	add    esp,0x24
c0021cac:	5b                   	pop    ebx
c0021cad:	5e                   	pop    esi
c0021cae:	c3                   	ret    
c0021caf:	90                   	nop

c0021cb0 <ATAPI::open(int, int, void*)>:
c0021cb0:	53                   	push   ebx
c0021cb1:	83 ec 08             	sub    esp,0x8
c0021cb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021cb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021cbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021cc0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021cc6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021ccc:	c1 e0 06             	shl    eax,0x6
c0021ccf:	01 d0                	add    eax,edx
c0021cd1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0021cd8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021cde:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021ce5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021cef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021cf5:	6a 04                	push   0x4
c0021cf7:	6a 0c                	push   0xc
c0021cf9:	51                   	push   ecx
c0021cfa:	52                   	push   edx
c0021cfb:	e8 be e8 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021d00:	90                   	nop
c0021d01:	90                   	nop
c0021d02:	6a 00                	push   0x0
c0021d04:	6a 0c                	push   0xc
c0021d06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021d0d:	50                   	push   eax
c0021d0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021d14:	e8 a5 e8 ff ff       	call   c00205be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021d19:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021d20:	83 c4 14             	add    esp,0x14
c0021d23:	53                   	push   ebx
c0021d24:	e8 cb fe ff ff       	call   c0021bf4 <ATAPI::detectMedia()>
c0021d29:	31 c0                	xor    eax,eax
c0021d2b:	83 c4 18             	add    esp,0x18
c0021d2e:	5b                   	pop    ebx
c0021d2f:	c3                   	ret    

c0021d30 <ATAPI::read(unsigned long long, int, void*)>:
c0021d30:	55                   	push   ebp
c0021d31:	57                   	push   edi
c0021d32:	56                   	push   esi
c0021d33:	53                   	push   ebx
c0021d34:	83 ec 1c             	sub    esp,0x1c
c0021d37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021d3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021d3f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021d43:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021d4a:	74 41                	je     c0021d8d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0021d4c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021d50:	b9 03 00 00 00       	mov    ecx,0x3
c0021d55:	fc                   	cld    
c0021d56:	31 c0                	xor    eax,eax
c0021d58:	86 fb                	xchg   bl,bh
c0021d5a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021d5c:	c1 c3 10             	rol    ebx,0x10
c0021d5f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021d64:	89 e8                	mov    eax,ebp
c0021d66:	86 fb                	xchg   bl,bh
c0021d68:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0021d6c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0021d70:	50                   	push   eax
c0021d71:	50                   	push   eax
c0021d72:	55                   	push   ebp
c0021d73:	c1 e5 0b             	shl    ebp,0xb
c0021d76:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021d7a:	6a 00                	push   0x0
c0021d7c:	55                   	push   ebp
c0021d7d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d81:	50                   	push   eax
c0021d82:	56                   	push   esi
c0021d83:	e8 1c fb ff ff       	call   c00218a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021d88:	83 c4 20             	add    esp,0x20
c0021d8b:	eb 1a                	jmp    c0021da7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0021d8d:	83 ec 0c             	sub    esp,0xc
c0021d90:	56                   	push   esi
c0021d91:	e8 5e fe ff ff       	call   c0021bf4 <ATAPI::detectMedia()>
c0021d96:	83 c4 10             	add    esp,0x10
c0021d99:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021da0:	75 aa                	jne    c0021d4c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0021da2:	b8 02 00 00 00       	mov    eax,0x2
c0021da7:	83 c4 1c             	add    esp,0x1c
c0021daa:	5b                   	pop    ebx
c0021dab:	5e                   	pop    esi
c0021dac:	5f                   	pop    edi
c0021dad:	5d                   	pop    ebp
c0021dae:	c3                   	ret    
c0021daf:	90                   	nop

c0021db0 <AVX::open(int, int, void*)>:
c0021db0:	83 ec 0c             	sub    esp,0xc
c0021db3:	e8 10 10 00 00       	call   c0022dc8 <avxInit>
c0021db8:	b8 00 00 00 00       	mov    eax,0x0
c0021dbd:	83 c4 0c             	add    esp,0xc
c0021dc0:	c3                   	ret    
c0021dc1:	90                   	nop

c0021dc2 <AVX::close(int, int, void*)>:
c0021dc2:	83 ec 0c             	sub    esp,0xc
c0021dc5:	e8 ff 0f 00 00       	call   c0022dc9 <avxClose>
c0021dca:	b8 00 00 00 00       	mov    eax,0x0
c0021dcf:	83 c4 0c             	add    esp,0xc
c0021dd2:	c3                   	ret    
c0021dd3:	90                   	nop

c0021dd4 <AVX::available()>:
c0021dd4:	83 ec 0c             	sub    esp,0xc
c0021dd7:	e8 e4 0f 00 00       	call   c0022dc0 <avxDetect>
c0021ddc:	85 c0                	test   eax,eax
c0021dde:	0f 95 c0             	setne  al
c0021de1:	83 c4 0c             	add    esp,0xc
c0021de4:	c3                   	ret    
c0021de5:	90                   	nop

c0021de6 <AVX::save(void*)>:
c0021de6:	83 ec 0c             	sub    esp,0xc
c0021de9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021ded:	83 ec 0c             	sub    esp,0xc
c0021df0:	50                   	push   eax
c0021df1:	e8 d0 0f 00 00       	call   c0022dc6 <avxSave>
c0021df6:	83 c4 10             	add    esp,0x10
c0021df9:	90                   	nop
c0021dfa:	83 c4 0c             	add    esp,0xc
c0021dfd:	c3                   	ret    

c0021dfe <AVX::load(void*)>:
c0021dfe:	83 ec 0c             	sub    esp,0xc
c0021e01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e05:	83 ec 0c             	sub    esp,0xc
c0021e08:	50                   	push   eax
c0021e09:	e8 b9 0f 00 00       	call   c0022dc7 <avxLoad>
c0021e0e:	83 c4 10             	add    esp,0x10
c0021e11:	90                   	nop
c0021e12:	83 c4 0c             	add    esp,0xc
c0021e15:	c3                   	ret    

c0021e16 <AVX::AVX()>:
c0021e16:	83 ec 0c             	sub    esp,0xc
c0021e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e1d:	83 ec 08             	sub    esp,0x8
c0021e20:	68 60 90 02 c0       	push   0xc0029060
c0021e25:	50                   	push   eax
c0021e26:	e8 15 1d ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c0021e2b:	83 c4 10             	add    esp,0x10
c0021e2e:	ba 70 90 02 c0       	mov    edx,0xc0029070
c0021e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e37:	89 10                	mov    DWORD PTR [eax],edx
c0021e39:	90                   	nop
c0021e3a:	83 c4 0c             	add    esp,0xc
c0021e3d:	c3                   	ret    

c0021e3e <MMX::available()>:
c0021e3e:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0021e43:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021e49:	83 e0 20             	and    eax,0x20
c0021e4c:	84 c0                	test   al,al
c0021e4e:	0f 95 c0             	setne  al
c0021e51:	c3                   	ret    

c0021e52 <MMX::open(int, int, void*)>:
c0021e52:	83 ec 0c             	sub    esp,0xc
c0021e55:	e8 e2 0f 00 00       	call   c0022e3c <x87Init>
c0021e5a:	b8 00 00 00 00       	mov    eax,0x0
c0021e5f:	83 c4 0c             	add    esp,0xc
c0021e62:	c3                   	ret    
c0021e63:	90                   	nop

c0021e64 <MMX::close(int, int, void*)>:
c0021e64:	83 ec 0c             	sub    esp,0xc
c0021e67:	e8 ea 0f 00 00       	call   c0022e56 <x87Close>
c0021e6c:	b8 00 00 00 00       	mov    eax,0x0
c0021e71:	83 c4 0c             	add    esp,0xc
c0021e74:	c3                   	ret    
c0021e75:	90                   	nop

c0021e76 <MMX::save(void*)>:
c0021e76:	83 ec 0c             	sub    esp,0xc
c0021e79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e7d:	83 ec 0c             	sub    esp,0xc
c0021e80:	50                   	push   eax
c0021e81:	e8 ab 0f 00 00       	call   c0022e31 <x87Save>
c0021e86:	83 c4 10             	add    esp,0x10
c0021e89:	90                   	nop
c0021e8a:	83 c4 0c             	add    esp,0xc
c0021e8d:	c3                   	ret    

c0021e8e <MMX::load(void*)>:
c0021e8e:	83 ec 0c             	sub    esp,0xc
c0021e91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e95:	83 ec 0c             	sub    esp,0xc
c0021e98:	50                   	push   eax
c0021e99:	e8 99 0f 00 00       	call   c0022e37 <x87Load>
c0021e9e:	83 c4 10             	add    esp,0x10
c0021ea1:	90                   	nop
c0021ea2:	83 c4 0c             	add    esp,0xc
c0021ea5:	c3                   	ret    

c0021ea6 <MMX::MMX()>:
c0021ea6:	83 ec 0c             	sub    esp,0xc
c0021ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ead:	83 ec 08             	sub    esp,0x8
c0021eb0:	68 a0 90 02 c0       	push   0xc00290a0
c0021eb5:	50                   	push   eax
c0021eb6:	e8 85 1c ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c0021ebb:	83 c4 10             	add    esp,0x10
c0021ebe:	ba b0 90 02 c0       	mov    edx,0xc00290b0
c0021ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ec7:	89 10                	mov    DWORD PTR [eax],edx
c0021ec9:	90                   	nop
c0021eca:	83 c4 0c             	add    esp,0xc
c0021ecd:	c3                   	ret    

c0021ece <SSE::open(int, int, void*)>:
c0021ece:	83 ec 0c             	sub    esp,0xc
c0021ed1:	e8 21 0f 00 00       	call   c0022df7 <sseInit>
c0021ed6:	b8 00 00 00 00       	mov    eax,0x0
c0021edb:	83 c4 0c             	add    esp,0xc
c0021ede:	c3                   	ret    
c0021edf:	90                   	nop

c0021ee0 <SSE::close(int, int, void*)>:
c0021ee0:	83 ec 0c             	sub    esp,0xc
c0021ee3:	e8 1f 0f 00 00       	call   c0022e07 <sseClose>
c0021ee8:	b8 00 00 00 00       	mov    eax,0x0
c0021eed:	83 c4 0c             	add    esp,0xc
c0021ef0:	c3                   	ret    
c0021ef1:	90                   	nop

c0021ef2 <SSE::available()>:
c0021ef2:	83 ec 1c             	sub    esp,0x1c
c0021ef5:	e8 d6 0e 00 00       	call   c0022dd0 <sseDetect>
c0021efa:	85 c0                	test   eax,eax
c0021efc:	0f 95 c0             	setne  al
c0021eff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021f03:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021f07:	83 c4 1c             	add    esp,0x1c
c0021f0a:	c3                   	ret    
c0021f0b:	90                   	nop

c0021f0c <SSE::save(void*)>:
c0021f0c:	83 ec 0c             	sub    esp,0xc
c0021f0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021f13:	83 ec 0c             	sub    esp,0xc
c0021f16:	50                   	push   eax
c0021f17:	e8 cf 0e 00 00       	call   c0022deb <sseSave>
c0021f1c:	83 c4 10             	add    esp,0x10
c0021f1f:	90                   	nop
c0021f20:	83 c4 0c             	add    esp,0xc
c0021f23:	c3                   	ret    

c0021f24 <SSE::load(void*)>:
c0021f24:	83 ec 0c             	sub    esp,0xc
c0021f27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021f2b:	83 ec 0c             	sub    esp,0xc
c0021f2e:	50                   	push   eax
c0021f2f:	e8 bd 0e 00 00       	call   c0022df1 <sseLoad>
c0021f34:	83 c4 10             	add    esp,0x10
c0021f37:	90                   	nop
c0021f38:	83 c4 0c             	add    esp,0xc
c0021f3b:	c3                   	ret    

c0021f3c <SSE::SSE()>:
c0021f3c:	83 ec 0c             	sub    esp,0xc
c0021f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f43:	83 ec 08             	sub    esp,0x8
c0021f46:	68 e0 90 02 c0       	push   0xc00290e0
c0021f4b:	50                   	push   eax
c0021f4c:	e8 ef 1b ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c0021f51:	83 c4 10             	add    esp,0x10
c0021f54:	ba f0 90 02 c0       	mov    edx,0xc00290f0
c0021f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f5d:	89 10                	mov    DWORD PTR [eax],edx
c0021f5f:	90                   	nop
c0021f60:	83 c4 0c             	add    esp,0xc
c0021f63:	c3                   	ret    

c0021f64 <x87::open(int, int, void*)>:
c0021f64:	83 ec 0c             	sub    esp,0xc
c0021f67:	e8 d0 0e 00 00       	call   c0022e3c <x87Init>
c0021f6c:	b8 00 00 00 00       	mov    eax,0x0
c0021f71:	83 c4 0c             	add    esp,0xc
c0021f74:	c3                   	ret    
c0021f75:	90                   	nop

c0021f76 <x87::close(int, int, void*)>:
c0021f76:	83 ec 0c             	sub    esp,0xc
c0021f79:	e8 d8 0e 00 00       	call   c0022e56 <x87Close>
c0021f7e:	b8 00 00 00 00       	mov    eax,0x0
c0021f83:	83 c4 0c             	add    esp,0xc
c0021f86:	c3                   	ret    
c0021f87:	90                   	nop

c0021f88 <x87::available()>:
c0021f88:	83 ec 0c             	sub    esp,0xc
c0021f8b:	e8 86 0e 00 00       	call   c0022e16 <x87Detect>
c0021f90:	85 c0                	test   eax,eax
c0021f92:	0f 95 c0             	setne  al
c0021f95:	83 c4 0c             	add    esp,0xc
c0021f98:	c3                   	ret    
c0021f99:	90                   	nop

c0021f9a <x87::save(void*)>:
c0021f9a:	83 ec 0c             	sub    esp,0xc
c0021f9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021fa1:	83 ec 0c             	sub    esp,0xc
c0021fa4:	50                   	push   eax
c0021fa5:	e8 87 0e 00 00       	call   c0022e31 <x87Save>
c0021faa:	83 c4 10             	add    esp,0x10
c0021fad:	90                   	nop
c0021fae:	83 c4 0c             	add    esp,0xc
c0021fb1:	c3                   	ret    

c0021fb2 <x87::load(void*)>:
c0021fb2:	83 ec 0c             	sub    esp,0xc
c0021fb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021fb9:	83 ec 0c             	sub    esp,0xc
c0021fbc:	50                   	push   eax
c0021fbd:	e8 75 0e 00 00       	call   c0022e37 <x87Load>
c0021fc2:	83 c4 10             	add    esp,0x10
c0021fc5:	90                   	nop
c0021fc6:	83 c4 0c             	add    esp,0xc
c0021fc9:	c3                   	ret    

c0021fca <x87::x87()>:
c0021fca:	83 ec 0c             	sub    esp,0xc
c0021fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd1:	83 ec 08             	sub    esp,0x8
c0021fd4:	68 20 91 02 c0       	push   0xc0029120
c0021fd9:	50                   	push   eax
c0021fda:	e8 61 1b ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c0021fdf:	83 c4 10             	add    esp,0x10
c0021fe2:	ba 30 91 02 c0       	mov    edx,0xc0029130
c0021fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021feb:	89 10                	mov    DWORD PTR [eax],edx
c0021fed:	90                   	nop
c0021fee:	83 c4 0c             	add    esp,0xc
c0021ff1:	c3                   	ret    

c0021ff2 <APIC::disable()>:
c0021ff2:	90                   	nop
c0021ff3:	c3                   	ret    

c0021ff4 <APIC::close(int, int, void*)>:
c0021ff4:	55                   	push   ebp
c0021ff5:	89 e5                	mov    ebp,esp
c0021ff7:	83 ec 08             	sub    esp,0x8
c0021ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ffd:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fff:	83 c0 3c             	add    eax,0x3c
c0022002:	8b 00                	mov    eax,DWORD PTR [eax]
c0022004:	83 ec 0c             	sub    esp,0xc
c0022007:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002200a:	ff d0                	call   eax
c002200c:	83 c4 10             	add    esp,0x10
c002200f:	b8 00 00 00 00       	mov    eax,0x0
c0022014:	c9                   	leave  
c0022015:	c3                   	ret    

c0022016 <IOAPIC::close(int, int, void*)>:
c0022016:	b8 00 00 00 00       	mov    eax,0x0
c002201b:	c3                   	ret    

c002201c <APIC::io_wait()>:
c002201c:	eb 00                	jmp    c002201e <APIC::io_wait()+0x2>
c002201e:	eb 00                	jmp    c0022020 <APIC::io_wait()+0x4>
c0022020:	90                   	nop
c0022021:	c3                   	ret    

c0022022 <APIC::getBase()>:
c0022022:	55                   	push   ebp
c0022023:	89 e5                	mov    ebp,esp
c0022025:	83 ec 18             	sub    esp,0x18
c0022028:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c002202d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022033:	83 e0 08             	and    eax,0x8
c0022036:	84 c0                	test   al,al
c0022038:	75 07                	jne    c0022041 <APIC::getBase()+0x1f>
c002203a:	b8 00 00 00 00       	mov    eax,0x0
c002203f:	eb 21                	jmp    c0022062 <APIC::getBase()+0x40>
c0022041:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c0022046:	83 ec 08             	sub    esp,0x8
c0022049:	6a 1b                	push   0x1b
c002204b:	50                   	push   eax
c002204c:	e8 af c6 fe ff       	call   c000e700 <Computer::rdmsr(unsigned int)>
c0022051:	83 c4 10             	add    esp,0x10
c0022054:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022057:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002205a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002205d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0022062:	c9                   	leave  
c0022063:	c3                   	ret    

c0022064 <APIC::eoi(unsigned char)>:
c0022064:	55                   	push   ebp
c0022065:	89 e5                	mov    ebp,esp
c0022067:	83 ec 28             	sub    esp,0x28
c002206a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002206d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022070:	83 ec 0c             	sub    esp,0xc
c0022073:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022076:	e8 a7 ff ff ff       	call   c0022022 <APIC::getBase()>
c002207b:	83 c4 10             	add    esp,0x10
c002207e:	05 b0 00 00 00       	add    eax,0xb0
c0022083:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022086:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022089:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002208f:	90                   	nop
c0022090:	c9                   	leave  
c0022091:	c3                   	ret    

c0022092 <APIC::open(int, int, void*)>:
c0022092:	55                   	push   ebp
c0022093:	89 e5                	mov    ebp,esp
c0022095:	57                   	push   edi
c0022096:	56                   	push   esi
c0022097:	53                   	push   ebx
c0022098:	83 ec 1c             	sub    esp,0x1c
c002209b:	83 ec 0c             	sub    esp,0xc
c002209e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00220a1:	e8 7c ff ff ff       	call   c0022022 <APIC::getBase()>
c00220a6:	83 c4 10             	add    esp,0x10
c00220a9:	05 f0 00 00 00       	add    eax,0xf0
c00220ae:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00220b1:	83 ec 0c             	sub    esp,0xc
c00220b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00220b7:	e8 66 ff ff ff       	call   c0022022 <APIC::getBase()>
c00220bc:	83 c4 10             	add    esp,0x10
c00220bf:	89 c2                	mov    edx,eax
c00220c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220c4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00220ca:	0f b6 f8             	movzx  edi,al
c00220cd:	89 d0                	mov    eax,edx
c00220cf:	ba 00 00 00 00       	mov    edx,0x0
c00220d4:	89 c1                	mov    ecx,eax
c00220d6:	80 e5 ff             	and    ch,0xff
c00220d9:	89 cb                	mov    ebx,ecx
c00220db:	0f b6 f2             	movzx  esi,dl
c00220de:	89 d8                	mov    eax,ebx
c00220e0:	89 f2                	mov    edx,esi
c00220e2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00220e5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00220e8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00220ec:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00220f0:	83 e0 00             	and    eax,0x0
c00220f3:	09 d0                	or     eax,edx
c00220f5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00220f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220fc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022102:	8d 50 01             	lea    edx,[eax+0x1]
c0022105:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022108:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002210e:	0f b6 d0             	movzx  edx,al
c0022111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022114:	83 c2 08             	add    edx,0x8
c0022117:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002211b:	0f b6 c9             	movzx  ecx,cl
c002211e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022124:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022128:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002212b:	8b 00                	mov    eax,DWORD PTR [eax]
c002212d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022130:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c0022137:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002213a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002213d:	89 10                	mov    DWORD PTR [eax],edx
c002213f:	b8 00 00 00 00       	mov    eax,0x0
c0022144:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022147:	5b                   	pop    ebx
c0022148:	5e                   	pop    esi
c0022149:	5f                   	pop    edi
c002214a:	5d                   	pop    ebp
c002214b:	c3                   	ret    

c002214c <IOAPIC::IOAPIC()>:
c002214c:	83 ec 0c             	sub    esp,0xc
c002214f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022153:	83 ec 08             	sub    esp,0x8
c0022156:	68 60 91 02 c0       	push   0xc0029160
c002215b:	50                   	push   eax
c002215c:	e8 eb 16 ff ff       	call   c001384c <Device::Device(char const*)>
c0022161:	83 c4 10             	add    esp,0x10
c0022164:	ba 88 92 02 c0       	mov    edx,0xc0029288
c0022169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216d:	89 10                	mov    DWORD PTR [eax],edx
c002216f:	90                   	nop
c0022170:	83 c4 0c             	add    esp,0xc
c0022173:	c3                   	ret    

c0022174 <APIC::APIC()>:
c0022174:	53                   	push   ebx
c0022175:	83 ec 18             	sub    esp,0x18
c0022178:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002217c:	83 ec 08             	sub    esp,0x8
c002217f:	68 68 91 02 c0       	push   0xc0029168
c0022184:	50                   	push   eax
c0022185:	e8 8c 1d ff ff       	call   c0013f16 <InterruptController::InterruptController(char const*)>
c002218a:	83 c4 10             	add    esp,0x10
c002218d:	ba 40 92 02 c0       	mov    edx,0xc0029240
c0022192:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022196:	89 10                	mov    DWORD PTR [eax],edx
c0022198:	a0 40 c7 02 c0       	mov    al,ds:0xc002c740
c002219d:	83 f0 01             	xor    eax,0x1
c00221a0:	84 c0                	test   al,al
c00221a2:	0f 84 96 00 00 00    	je     c002223e <APIC::APIC()+0xca>
c00221a8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00221ad:	a0 90 ad 02 c0       	mov    al,ds:0xc002ad90
c00221b2:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00221b6:	73 7f                	jae    c0022237 <APIC::APIC()+0xc3>
c00221b8:	83 ec 0c             	sub    esp,0xc
c00221bb:	68 68 01 00 00       	push   0x168
c00221c0:	e8 9d ff fe ff       	call   c0012162 <operator new(unsigned long)>
c00221c5:	83 c4 10             	add    esp,0x10
c00221c8:	89 c3                	mov    ebx,eax
c00221ca:	83 ec 0c             	sub    esp,0xc
c00221cd:	53                   	push   ebx
c00221ce:	e8 79 ff ff ff       	call   c002214c <IOAPIC::IOAPIC()>
c00221d3:	83 c4 10             	add    esp,0x10
c00221d6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00221da:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00221df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221e3:	89 14 85 20 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd38e0],edx
c00221ea:	a1 00 c7 02 c0       	mov    eax,ds:0xc002c700
c00221ef:	40                   	inc    eax
c00221f0:	a3 00 c7 02 c0       	mov    ds:0xc002c700,eax
c00221f5:	a1 e8 a4 02 c0       	mov    eax,ds:0xc002a4e8
c00221fa:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022200:	83 ec 08             	sub    esp,0x8
c0022203:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022207:	50                   	push   eax
c0022208:	e8 4f 14 ff ff       	call   c001365c <Device::addChild(Device*)>
c002220d:	83 c4 10             	add    esp,0x10
c0022210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022214:	8b 00                	mov    eax,DWORD PTR [eax]
c0022216:	83 c0 08             	add    eax,0x8
c0022219:	8b 00                	mov    eax,DWORD PTR [eax]
c002221b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0022220:	6a 00                	push   0x0
c0022222:	6a 00                	push   0x0
c0022224:	52                   	push   edx
c0022225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022229:	ff d0                	call   eax
c002222b:	83 c4 10             	add    esp,0x10
c002222e:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0022232:	e9 76 ff ff ff       	jmp    c00221ad <APIC::APIC()+0x39>
c0022237:	c6 05 40 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c740,0x1
c002223e:	90                   	nop
c002223f:	83 c4 18             	add    esp,0x18
c0022242:	5b                   	pop    ebx
c0022243:	c3                   	ret    

c0022244 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0022244:	55                   	push   ebp
c0022245:	89 e5                	mov    ebp,esp
c0022247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002224a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022250:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022253:	72 1d                	jb     c0022272 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022258:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002225e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022261:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0022267:	01 d0                	add    eax,edx
c0022269:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002226c:	73 04                	jae    c0022272 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002226e:	b0 01                	mov    al,0x1
c0022270:	eb 02                	jmp    c0022274 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0022272:	b0 00                	mov    al,0x0
c0022274:	5d                   	pop    ebp
c0022275:	c3                   	ret    

c0022276 <IOAPIC::read(int)>:
c0022276:	55                   	push   ebp
c0022277:	89 e5                	mov    ebp,esp
c0022279:	83 ec 10             	sub    esp,0x10
c002227c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002227f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022285:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022288:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002228b:	0f b6 d0             	movzx  edx,al
c002228e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022291:	89 10                	mov    DWORD PTR [eax],edx
c0022293:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022296:	83 c0 10             	add    eax,0x10
c0022299:	8b 00                	mov    eax,DWORD PTR [eax]
c002229b:	c9                   	leave  
c002229c:	c3                   	ret    
c002229d:	90                   	nop

c002229e <IOAPIC::open(int, int, void*)>:
c002229e:	55                   	push   ebp
c002229f:	89 e5                	mov    ebp,esp
c00222a1:	57                   	push   edi
c00222a2:	56                   	push   esi
c00222a3:	53                   	push   ebx
c00222a4:	83 ec 0c             	sub    esp,0xc
c00222a7:	83 ec 0c             	sub    esp,0xc
c00222aa:	68 93 91 02 c0       	push   0xc0029193
c00222af:	e8 9d ff fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00222b4:	83 c4 10             	add    esp,0x10
c00222b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222ba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00222bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00222c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00222cc:	8b 14 85 c0 ad 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5240]
c00222d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222d6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00222dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00222e5:	8b 14 85 40 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd51c0]
c00222ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222ef:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00222f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222f8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00222fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022301:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022307:	0f b6 f8             	movzx  edi,al
c002230a:	89 d0                	mov    eax,edx
c002230c:	ba 00 00 00 00       	mov    edx,0x0
c0022311:	89 c1                	mov    ecx,eax
c0022313:	80 e5 ff             	and    ch,0xff
c0022316:	89 cb                	mov    ebx,ecx
c0022318:	0f b6 f2             	movzx  esi,dl
c002231b:	89 d8                	mov    eax,ebx
c002231d:	89 f2                	mov    edx,esi
c002231f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022322:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022325:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022329:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002232d:	83 e0 00             	and    eax,0x0
c0022330:	09 d0                	or     eax,edx
c0022332:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022339:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002233f:	8d 50 01             	lea    edx,[eax+0x1]
c0022342:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022345:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002234b:	0f b6 d0             	movzx  edx,al
c002234e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022351:	83 c2 08             	add    edx,0x8
c0022354:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022358:	0f b6 c9             	movzx  ecx,cl
c002235b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022361:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022365:	83 ec 08             	sub    esp,0x8
c0022368:	6a 01                	push   0x1
c002236a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002236d:	e8 04 ff ff ff       	call   c0022276 <IOAPIC::read(int)>
c0022372:	83 c4 10             	add    esp,0x10
c0022375:	c1 f8 10             	sar    eax,0x10
c0022378:	0f b6 c0             	movzx  eax,al
c002237b:	8d 50 01             	lea    edx,[eax+0x1]
c002237e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022381:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0022387:	b8 00 00 00 00       	mov    eax,0x0
c002238c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002238f:	5b                   	pop    ebx
c0022390:	5e                   	pop    esi
c0022391:	5f                   	pop    edi
c0022392:	5d                   	pop    ebp
c0022393:	c3                   	ret    

c0022394 <IOAPIC::write(int, int)>:
c0022394:	55                   	push   ebp
c0022395:	89 e5                	mov    ebp,esp
c0022397:	83 ec 10             	sub    esp,0x10
c002239a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002239d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00223a3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00223a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223a9:	0f b6 d0             	movzx  edx,al
c00223ac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00223af:	89 10                	mov    DWORD PTR [eax],edx
c00223b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00223b4:	8d 50 10             	lea    edx,[eax+0x10]
c00223b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00223ba:	89 02                	mov    DWORD PTR [edx],eax
c00223bc:	90                   	nop
c00223bd:	c9                   	leave  
c00223be:	c3                   	ret    
c00223bf:	90                   	nop

c00223c0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c00223c0:	55                   	push   ebp
c00223c1:	89 e5                	mov    ebp,esp
c00223c3:	83 ec 20             	sub    esp,0x20
c00223c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223c9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00223cc:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00223cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00223d2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00223d5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00223d8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00223db:	88 d0                	mov    al,dl
c00223dd:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c00223e0:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c00223e4:	83 c0 08             	add    eax,0x8
c00223e7:	01 c0                	add    eax,eax
c00223e9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00223ec:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c00223f0:	83 c0 08             	add    eax,0x8
c00223f3:	01 c0                	add    eax,eax
c00223f5:	40                   	inc    eax
c00223f6:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c00223f9:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00223fc:	50                   	push   eax
c00223fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022400:	e8 71 fe ff ff       	call   c0022276 <IOAPIC::read(int)>
c0022405:	83 c4 08             	add    esp,0x8
c0022408:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002240b:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c0022412:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022415:	c1 e0 18             	shl    eax,0x18
c0022418:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002241b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002241e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0022421:	52                   	push   edx
c0022422:	50                   	push   eax
c0022423:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022426:	e8 69 ff ff ff       	call   c0022394 <IOAPIC::write(int, int)>
c002242b:	83 c4 0c             	add    esp,0xc
c002242e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022431:	50                   	push   eax
c0022432:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022435:	e8 3c fe ff ff       	call   c0022276 <IOAPIC::read(int)>
c002243a:	83 c4 08             	add    esp,0x8
c002243d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022440:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c0022447:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c002244e:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c0022455:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c002245c:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c0022460:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c0022463:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0022466:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022469:	52                   	push   edx
c002246a:	50                   	push   eax
c002246b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002246e:	e8 21 ff ff ff       	call   c0022394 <IOAPIC::write(int, int)>
c0022473:	83 c4 0c             	add    esp,0xc
c0022476:	90                   	nop
c0022477:	c9                   	leave  
c0022478:	c3                   	ret    
c0022479:	90                   	nop

c002247a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002247a:	55                   	push   ebp
c002247b:	89 e5                	mov    ebp,esp
c002247d:	56                   	push   esi
c002247e:	53                   	push   ebx
c002247f:	83 ec 20             	sub    esp,0x20
c0022482:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022485:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022488:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c002248c:	74 28                	je     c00224b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c002248e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0022492:	7f 12                	jg     c00224a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c0022494:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022497:	05 e0 96 02 c0       	add    eax,0xc00296e0
c002249c:	8a 00                	mov    al,BYTE PTR [eax]
c002249e:	0f b6 c0             	movzx  eax,al
c00224a1:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00224a4:	eb 10                	jmp    c00224b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00224a6:	83 ec 0c             	sub    esp,0xc
c00224a9:	68 a4 91 02 c0       	push   0xc00291a4
c00224ae:	e8 20 72 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c00224b3:	83 c4 10             	add    esp,0x10
c00224b6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00224ba:	a1 00 c7 02 c0       	mov    eax,ds:0xc002c700
c00224bf:	83 ec 08             	sub    esp,0x8
c00224c2:	50                   	push   eax
c00224c3:	68 dc 91 02 c0       	push   0xc00291dc
c00224c8:	e8 84 fd fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00224cd:	83 c4 10             	add    esp,0x10
c00224d0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00224d7:	a1 00 c7 02 c0       	mov    eax,ds:0xc002c700
c00224dc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00224df:	7d 58                	jge    c0022539 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c00224e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00224e4:	8b 04 85 20 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd38e0]
c00224eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00224ee:	83 ec 08             	sub    esp,0x8
c00224f1:	52                   	push   edx
c00224f2:	50                   	push   eax
c00224f3:	e8 4c fd ff ff       	call   c0022244 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00224f8:	83 c4 10             	add    esp,0x10
c00224fb:	84 c0                	test   al,al
c00224fd:	74 35                	je     c0022534 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c00224ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022502:	8b 1c 85 20 c7 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd38e0]
c0022509:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002250c:	83 c0 20             	add    eax,0x20
c002250f:	0f b6 f0             	movzx  esi,al
c0022512:	e8 20 53 ff ff       	call   c0017837 <getCPUNumber()>
c0022517:	99                   	cdq    
c0022518:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002251b:	0f b6 c9             	movzx  ecx,cl
c002251e:	83 ec 0c             	sub    esp,0xc
c0022521:	56                   	push   esi
c0022522:	52                   	push   edx
c0022523:	50                   	push   eax
c0022524:	51                   	push   ecx
c0022525:	53                   	push   ebx
c0022526:	e8 95 fe ff ff       	call   c00223c0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c002252b:	83 c4 20             	add    esp,0x20
c002252e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0022532:	eb 05                	jmp    c0022539 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c0022534:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c0022537:	eb 9e                	jmp    c00224d7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c0022539:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002253c:	83 f0 01             	xor    eax,0x1
c002253f:	84 c0                	test   al,al
c0022541:	74 10                	je     c0022553 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c0022543:	83 ec 0c             	sub    esp,0xc
c0022546:	68 f3 91 02 c0       	push   0xc00291f3
c002254b:	e8 83 71 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c0022550:	83 c4 10             	add    esp,0x10
c0022553:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022557:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002255e:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c0022562:	7f 65                	jg     c00225c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c0022564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022567:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002256a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022571:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022574:	01 ca                	add    edx,ecx
c0022576:	83 c2 54             	add    edx,0x54
c0022579:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002257d:	85 c0                	test   eax,eax
c002257f:	75 43                	jne    c00225c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c0022581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022584:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022587:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002258e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022591:	01 ca                	add    edx,ecx
c0022593:	8d 4a 54             	lea    ecx,[edx+0x54]
c0022596:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022599:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002259d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00225a3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00225aa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00225ad:	01 ca                	add    edx,ecx
c00225af:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00225b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00225b8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00225bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225bf:	83 e8 20             	sub    eax,0x20
c00225c2:	eb 1a                	jmp    c00225de <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c00225c4:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00225c7:	eb 95                	jmp    c002255e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c00225c9:	83 ec 0c             	sub    esp,0xc
c00225cc:	68 00 92 02 c0       	push   0xc0029200
c00225d1:	e8 fd 70 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c00225d6:	83 c4 10             	add    esp,0x10
c00225d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00225de:	8d 65 f8             	lea    esp,[ebp-0x8]
c00225e1:	5b                   	pop    ebx
c00225e2:	5e                   	pop    esi
c00225e3:	5d                   	pop    ebp
c00225e4:	c3                   	ret    
c00225e5:	90                   	nop

c00225e6 <PIC::disable()>:
c00225e6:	55                   	push   ebp
c00225e7:	89 e5                	mov    ebp,esp
c00225e9:	83 ec 10             	sub    esp,0x10
c00225ec:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00225f2:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00225f6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00225f9:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00225fd:	ee                   	out    dx,al
c00225fe:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022604:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022608:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002260b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002260f:	ee                   	out    dx,al
c0022610:	90                   	nop
c0022611:	c9                   	leave  
c0022612:	c3                   	ret    
c0022613:	90                   	nop

c0022614 <PIC::close(int, int, void*)>:
c0022614:	55                   	push   ebp
c0022615:	89 e5                	mov    ebp,esp
c0022617:	83 ec 08             	sub    esp,0x8
c002261a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002261d:	8b 00                	mov    eax,DWORD PTR [eax]
c002261f:	83 c0 3c             	add    eax,0x3c
c0022622:	8b 00                	mov    eax,DWORD PTR [eax]
c0022624:	83 ec 0c             	sub    esp,0xc
c0022627:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002262a:	ff d0                	call   eax
c002262c:	83 c4 10             	add    esp,0x10
c002262f:	b8 00 00 00 00       	mov    eax,0x0
c0022634:	c9                   	leave  
c0022635:	c3                   	ret    

c0022636 <PIC::PIC()>:
c0022636:	83 ec 0c             	sub    esp,0xc
c0022639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002263d:	83 ec 08             	sub    esp,0x8
c0022640:	68 ac 92 02 c0       	push   0xc00292ac
c0022645:	50                   	push   eax
c0022646:	e8 cb 18 ff ff       	call   c0013f16 <InterruptController::InterruptController(char const*)>
c002264b:	83 c4 10             	add    esp,0x10
c002264e:	ba d8 92 02 c0       	mov    edx,0xc00292d8
c0022653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022657:	89 10                	mov    DWORD PTR [eax],edx
c0022659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002265d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022663:	0f b6 d0             	movzx  edx,al
c0022666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002266a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022675:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002267b:	0f b6 d0             	movzx  edx,al
c002267e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022682:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002268b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022691:	8d 50 01             	lea    edx,[eax+0x1]
c0022694:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022698:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002269e:	0f b6 d0             	movzx  edx,al
c00226a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226a5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00226a9:	83 e1 3f             	and    ecx,0x3f
c00226ac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00226b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00226ba:	0f b6 d0             	movzx  edx,al
c00226bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226c1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00226c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00226d2:	0f b6 d0             	movzx  edx,al
c00226d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226d9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00226de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00226e8:	8d 50 01             	lea    edx,[eax+0x1]
c00226eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00226ef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00226f5:	0f b6 d0             	movzx  edx,al
c00226f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226fc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022700:	83 e1 3f             	and    ecx,0x3f
c0022703:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022707:	90                   	nop
c0022708:	83 c4 0c             	add    esp,0xc
c002270b:	c3                   	ret    

c002270c <PIC::ioWait()>:
c002270c:	eb 00                	jmp    c002270e <PIC::ioWait()+0x2>
c002270e:	eb 00                	jmp    c0022710 <PIC::ioWait()+0x4>
c0022710:	90                   	nop
c0022711:	c3                   	ret    

c0022712 <PIC::getIRQReg(int)>:
c0022712:	55                   	push   ebp
c0022713:	89 e5                	mov    ebp,esp
c0022715:	83 ec 10             	sub    esp,0x10
c0022718:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002271b:	0f b6 c0             	movzx  eax,al
c002271e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022724:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022727:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002272a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002272e:	ee                   	out    dx,al
c002272f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022732:	0f b6 c0             	movzx  eax,al
c0022735:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002273b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002273e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022741:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022745:	ee                   	out    dx,al
c0022746:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002274c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022750:	89 c2                	mov    edx,eax
c0022752:	ec                   	in     al,dx
c0022753:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022756:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022759:	0f b6 c0             	movzx  eax,al
c002275c:	c1 e0 08             	shl    eax,0x8
c002275f:	89 c1                	mov    ecx,eax
c0022761:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022767:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002276b:	89 c2                	mov    edx,eax
c002276d:	ec                   	in     al,dx
c002276e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022771:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022774:	0f b6 c0             	movzx  eax,al
c0022777:	09 c8                	or     eax,ecx
c0022779:	c9                   	leave  
c002277a:	c3                   	ret    
c002277b:	90                   	nop

c002277c <PIC::eoi(unsigned char)>:
c002277c:	55                   	push   ebp
c002277d:	89 e5                	mov    ebp,esp
c002277f:	83 ec 14             	sub    esp,0x14
c0022782:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022785:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022788:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002278c:	75 1e                	jne    c00227ac <PIC::eoi(unsigned char)+0x30>
c002278e:	6a 0b                	push   0xb
c0022790:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022793:	e8 7a ff ff ff       	call   c0022712 <PIC::getIRQReg(int)>
c0022798:	83 c4 08             	add    esp,0x8
c002279b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002279f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00227a3:	25 80 00 00 00       	and    eax,0x80
c00227a8:	85 c0                	test   eax,eax
c00227aa:	74 5f                	je     c002280b <PIC::eoi(unsigned char)+0x8f>
c00227ac:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00227b0:	75 2d                	jne    c00227df <PIC::eoi(unsigned char)+0x63>
c00227b2:	6a 0b                	push   0xb
c00227b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227b7:	e8 56 ff ff ff       	call   c0022712 <PIC::getIRQReg(int)>
c00227bc:	83 c4 08             	add    esp,0x8
c00227bf:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00227c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00227c6:	66 85 c0             	test   ax,ax
c00227c9:	78 14                	js     c00227df <PIC::eoi(unsigned char)+0x63>
c00227cb:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00227d1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00227d5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00227d8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00227dc:	ee                   	out    dx,al
c00227dd:	eb 2d                	jmp    c002280c <PIC::eoi(unsigned char)+0x90>
c00227df:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00227e3:	76 12                	jbe    c00227f7 <PIC::eoi(unsigned char)+0x7b>
c00227e5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00227eb:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00227ef:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00227f2:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00227f6:	ee                   	out    dx,al
c00227f7:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00227fd:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022801:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022804:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022808:	ee                   	out    dx,al
c0022809:	eb 01                	jmp    c002280c <PIC::eoi(unsigned char)+0x90>
c002280b:	90                   	nop
c002280c:	c9                   	leave  
c002280d:	c3                   	ret    

c002280e <PIC::remap()>:
c002280e:	55                   	push   ebp
c002280f:	89 e5                	mov    ebp,esp
c0022811:	83 ec 48             	sub    esp,0x48
c0022814:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002281b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022822:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022828:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002282b:	89 c2                	mov    edx,eax
c002282d:	ec                   	in     al,dx
c002282e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022831:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022834:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022837:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002283d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022840:	89 c2                	mov    edx,eax
c0022842:	ec                   	in     al,dx
c0022843:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022846:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022849:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002284c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022852:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022856:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022859:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002285c:	ee                   	out    dx,al
c002285d:	83 ec 0c             	sub    esp,0xc
c0022860:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022863:	e8 a4 fe ff ff       	call   c002270c <PIC::ioWait()>
c0022868:	83 c4 10             	add    esp,0x10
c002286b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022871:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022875:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022878:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002287b:	ee                   	out    dx,al
c002287c:	83 ec 0c             	sub    esp,0xc
c002287f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022882:	e8 85 fe ff ff       	call   c002270c <PIC::ioWait()>
c0022887:	83 c4 10             	add    esp,0x10
c002288a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002288d:	0f b6 c0             	movzx  eax,al
c0022890:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022896:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022899:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002289c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002289f:	ee                   	out    dx,al
c00228a0:	83 ec 0c             	sub    esp,0xc
c00228a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00228a6:	e8 61 fe ff ff       	call   c002270c <PIC::ioWait()>
c00228ab:	83 c4 10             	add    esp,0x10
c00228ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00228b1:	0f b6 c0             	movzx  eax,al
c00228b4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00228ba:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00228bd:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00228c0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00228c3:	ee                   	out    dx,al
c00228c4:	83 ec 0c             	sub    esp,0xc
c00228c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00228ca:	e8 3d fe ff ff       	call   c002270c <PIC::ioWait()>
c00228cf:	83 c4 10             	add    esp,0x10
c00228d2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00228d8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00228dc:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00228df:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00228e2:	ee                   	out    dx,al
c00228e3:	83 ec 0c             	sub    esp,0xc
c00228e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00228e9:	e8 1e fe ff ff       	call   c002270c <PIC::ioWait()>
c00228ee:	83 c4 10             	add    esp,0x10
c00228f1:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00228f7:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00228fb:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00228fe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022901:	ee                   	out    dx,al
c0022902:	83 ec 0c             	sub    esp,0xc
c0022905:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022908:	e8 ff fd ff ff       	call   c002270c <PIC::ioWait()>
c002290d:	83 c4 10             	add    esp,0x10
c0022910:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022916:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002291a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002291d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022920:	ee                   	out    dx,al
c0022921:	83 ec 0c             	sub    esp,0xc
c0022924:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022927:	e8 e0 fd ff ff       	call   c002270c <PIC::ioWait()>
c002292c:	83 c4 10             	add    esp,0x10
c002292f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022935:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022939:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002293c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002293f:	ee                   	out    dx,al
c0022940:	83 ec 0c             	sub    esp,0xc
c0022943:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022946:	e8 c1 fd ff ff       	call   c002270c <PIC::ioWait()>
c002294b:	83 c4 10             	add    esp,0x10
c002294e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022952:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022958:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002295b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002295e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022961:	ee                   	out    dx,al
c0022962:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022966:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002296c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002296f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022972:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022975:	ee                   	out    dx,al
c0022976:	90                   	nop
c0022977:	c9                   	leave  
c0022978:	c3                   	ret    
c0022979:	90                   	nop

c002297a <PIC::open(int, int, void*)>:
c002297a:	55                   	push   ebp
c002297b:	89 e5                	mov    ebp,esp
c002297d:	83 ec 18             	sub    esp,0x18
c0022980:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022986:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002298a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002298d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022991:	ee                   	out    dx,al
c0022992:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022998:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002299c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002299f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00229a3:	ee                   	out    dx,al
c00229a4:	83 ec 0c             	sub    esp,0xc
c00229a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229aa:	e8 5f fe ff ff       	call   c002280e <PIC::remap()>
c00229af:	83 c4 10             	add    esp,0x10
c00229b2:	b8 00 00 00 00       	mov    eax,0x0
c00229b7:	c9                   	leave  
c00229b8:	c3                   	ret    
c00229b9:	90                   	nop

c00229ba <APICTimer::close(int, int, void*)>:
c00229ba:	b8 00 00 00 00       	mov    eax,0x0
c00229bf:	c3                   	ret    

c00229c0 <apicTimerHandler(regs*, void*)>:
c00229c0:	83 ec 0c             	sub    esp,0xc
c00229c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00229c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00229c9:	99                   	cdq    
c00229ca:	52                   	push   edx
c00229cb:	50                   	push   eax
c00229cc:	6a 00                	push   0x0
c00229ce:	68 00 ca 9a 3b       	push   0x3b9aca00
c00229d3:	e8 f8 08 00 00       	call   c00232d0 <__udivdi3>
c00229d8:	83 c4 10             	add    esp,0x10
c00229db:	83 ec 08             	sub    esp,0x8
c00229de:	52                   	push   edx
c00229df:	50                   	push   eax
c00229e0:	e8 92 33 ff ff       	call   c0015d77 <timerHandler(unsigned long long)>
c00229e5:	83 c4 10             	add    esp,0x10
c00229e8:	90                   	nop
c00229e9:	83 c4 0c             	add    esp,0xc
c00229ec:	c3                   	ret    
c00229ed:	90                   	nop

c00229ee <APICTimer::write(int)>:
c00229ee:	53                   	push   ebx
c00229ef:	83 ec 28             	sub    esp,0x28
c00229f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00229f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00229fa:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022a00:	e8 35 4e ff ff       	call   c001783a <thisCPU()>
c0022a05:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022a0b:	83 ec 0c             	sub    esp,0xc
c0022a0e:	50                   	push   eax
c0022a0f:	e8 0e f6 ff ff       	call   c0022022 <APIC::getBase()>
c0022a14:	83 c4 10             	add    esp,0x10
c0022a17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022a1b:	a1 50 ab 02 c0       	mov    eax,ds:0xc002ab50
c0022a20:	8b 15 54 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab54
c0022a26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022a2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022a2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022a32:	05 e0 03 00 00       	add    eax,0x3e0
c0022a37:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022a3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022a41:	05 80 03 00 00       	add    eax,0x380
c0022a46:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022a4c:	fb                   	sti    
c0022a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a55:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022a5a:	83 d2 00             	adc    edx,0x0
c0022a5d:	89 c1                	mov    ecx,eax
c0022a5f:	89 d3                	mov    ebx,edx
c0022a61:	a1 50 ab 02 c0       	mov    eax,ds:0xc002ab50
c0022a66:	8b 15 54 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab54
c0022a6c:	39 c8                	cmp    eax,ecx
c0022a6e:	89 d0                	mov    eax,edx
c0022a70:	19 d8                	sbb    eax,ebx
c0022a72:	73 02                	jae    c0022a76 <APICTimer::write(int)+0x88>
c0022a74:	eb d7                	jmp    c0022a4d <APICTimer::write(int)+0x5f>
c0022a76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022a7a:	05 20 03 00 00       	add    eax,0x320
c0022a7f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022a85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022a89:	05 90 03 00 00       	add    eax,0x390
c0022a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a90:	f7 d0                	not    eax
c0022a92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022a96:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a9e:	ba 00 00 00 00       	mov    edx,0x0
c0022aa3:	f7 f3                	div    ebx
c0022aa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022aa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022aad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022ab3:	0d 00 00 02 00       	or     eax,0x20000
c0022ab8:	89 c2                	mov    edx,eax
c0022aba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022abe:	05 20 03 00 00       	add    eax,0x320
c0022ac3:	89 10                	mov    DWORD PTR [eax],edx
c0022ac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ac9:	05 e0 03 00 00       	add    eax,0x3e0
c0022ace:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022ad4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ad8:	05 80 03 00 00       	add    eax,0x380
c0022add:	89 c2                	mov    edx,eax
c0022adf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022ae3:	89 02                	mov    DWORD PTR [edx],eax
c0022ae5:	90                   	nop
c0022ae6:	83 c4 28             	add    esp,0x28
c0022ae9:	5b                   	pop    ebx
c0022aea:	c3                   	ret    
c0022aeb:	90                   	nop

c0022aec <APICTimer::open(int, int, void*)>:
c0022aec:	57                   	push   edi
c0022aed:	56                   	push   esi
c0022aee:	53                   	push   ebx
c0022aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af3:	8b 00                	mov    eax,DWORD PTR [eax]
c0022af5:	83 c0 24             	add    eax,0x24
c0022af8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022afa:	83 ec 08             	sub    esp,0x8
c0022afd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b05:	ff d0                	call   eax
c0022b07:	83 c4 10             	add    esp,0x10
c0022b0a:	e8 2b 4d ff ff       	call   c001783a <thisCPU()>
c0022b0f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022b15:	83 ec 0c             	sub    esp,0xc
c0022b18:	50                   	push   eax
c0022b19:	e8 04 f5 ff ff       	call   c0022022 <APIC::getBase()>
c0022b1e:	83 c4 10             	add    esp,0x10
c0022b21:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b2b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022b31:	0f b6 f8             	movzx  edi,al
c0022b34:	89 d0                	mov    eax,edx
c0022b36:	ba 00 00 00 00       	mov    edx,0x0
c0022b3b:	89 c1                	mov    ecx,eax
c0022b3d:	80 e5 ff             	and    ch,0xff
c0022b40:	89 cb                	mov    ebx,ecx
c0022b42:	0f b6 f2             	movzx  esi,dl
c0022b45:	89 d8                	mov    eax,ebx
c0022b47:	89 f2                	mov    edx,esi
c0022b49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b4d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022b50:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022b54:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022b58:	83 e0 00             	and    eax,0x0
c0022b5b:	09 d0                	or     eax,edx
c0022b5d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b65:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022b6b:	8d 50 01             	lea    edx,[eax+0x1]
c0022b6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b72:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022b78:	0f b6 d0             	movzx  edx,al
c0022b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7f:	83 c2 08             	add    edx,0x8
c0022b82:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022b86:	0f b6 c9             	movzx  ecx,cl
c0022b89:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022b8f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022b9b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ba9:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022baf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022bb3:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022bb9:	83 ec 0c             	sub    esp,0xc
c0022bbc:	51                   	push   ecx
c0022bbd:	6a 01                	push   0x1
c0022bbf:	68 c0 29 02 c0       	push   0xc00229c0
c0022bc4:	52                   	push   edx
c0022bc5:	50                   	push   eax
c0022bc6:	e8 e5 09 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022bcb:	83 c4 20             	add    esp,0x20
c0022bce:	89 c2                	mov    edx,eax
c0022bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022bda:	b8 00 00 00 00       	mov    eax,0x0
c0022bdf:	5b                   	pop    ebx
c0022be0:	5e                   	pop    esi
c0022be1:	5f                   	pop    edi
c0022be2:	c3                   	ret    
c0022be3:	90                   	nop

c0022be4 <APICTimer::APICTimer()>:
c0022be4:	83 ec 0c             	sub    esp,0xc
c0022be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022beb:	83 ec 08             	sub    esp,0x8
c0022bee:	68 18 93 02 c0       	push   0xc0029318
c0022bf3:	50                   	push   eax
c0022bf4:	e8 ef 30 ff ff       	call   c0015ce8 <Timer::Timer(char const*)>
c0022bf9:	83 c4 10             	add    esp,0x10
c0022bfc:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0022c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c05:	89 10                	mov    DWORD PTR [eax],edx
c0022c07:	90                   	nop
c0022c08:	83 c4 0c             	add    esp,0xc
c0022c0b:	c3                   	ret    

c0022c0c <PIT::write(int)>:
c0022c0c:	83 ec 10             	sub    esp,0x10
c0022c0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022c17:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022c21:	a3 44 c7 02 c0       	mov    ds:0xc002c744,eax
c0022c26:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022c2b:	99                   	cdq    
c0022c2c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022c34:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022c3b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022c40:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022c44:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022c49:	ee                   	out    dx,al
c0022c4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c4e:	0f b6 c0             	movzx  eax,al
c0022c51:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022c58:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022c5c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022c60:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022c65:	ee                   	out    dx,al
c0022c66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c6a:	c1 f8 08             	sar    eax,0x8
c0022c6d:	0f b6 c0             	movzx  eax,al
c0022c70:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022c77:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022c7b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022c7f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022c84:	ee                   	out    dx,al
c0022c85:	90                   	nop
c0022c86:	83 c4 10             	add    esp,0x10
c0022c89:	c3                   	ret    

c0022c8a <pitHandler(regs*, void*)>:
c0022c8a:	83 ec 0c             	sub    esp,0xc
c0022c8d:	a1 44 c7 02 c0       	mov    eax,ds:0xc002c744
c0022c92:	99                   	cdq    
c0022c93:	52                   	push   edx
c0022c94:	50                   	push   eax
c0022c95:	6a 00                	push   0x0
c0022c97:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022c9c:	e8 2f 06 00 00       	call   c00232d0 <__udivdi3>
c0022ca1:	83 c4 10             	add    esp,0x10
c0022ca4:	83 ec 08             	sub    esp,0x8
c0022ca7:	52                   	push   edx
c0022ca8:	50                   	push   eax
c0022ca9:	e8 c9 30 ff ff       	call   c0015d77 <timerHandler(unsigned long long)>
c0022cae:	83 c4 10             	add    esp,0x10
c0022cb1:	90                   	nop
c0022cb2:	83 c4 0c             	add    esp,0xc
c0022cb5:	c3                   	ret    

c0022cb6 <PIT::open(int, int, void*)>:
c0022cb6:	83 ec 0c             	sub    esp,0xc
c0022cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cbf:	83 c0 24             	add    eax,0x24
c0022cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cc4:	83 ec 08             	sub    esp,0x8
c0022cc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ccb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ccf:	ff d0                	call   eax
c0022cd1:	83 c4 10             	add    esp,0x10
c0022cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd8:	83 ec 0c             	sub    esp,0xc
c0022cdb:	6a 00                	push   0x0
c0022cdd:	6a 01                	push   0x1
c0022cdf:	68 8a 2c 02 c0       	push   0xc0022c8a
c0022ce4:	6a 00                	push   0x0
c0022ce6:	50                   	push   eax
c0022ce7:	e8 c4 08 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022cec:	83 c4 20             	add    esp,0x20
c0022cef:	89 c2                	mov    edx,eax
c0022cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022cfb:	b8 00 00 00 00       	mov    eax,0x0
c0022d00:	83 c4 0c             	add    esp,0xc
c0022d03:	c3                   	ret    

c0022d04 <PIT::close(int, int, void*)>:
c0022d04:	83 ec 0c             	sub    esp,0xc
c0022d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d0b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d19:	6a 01                	push   0x1
c0022d1b:	68 8a 2c 02 c0       	push   0xc0022c8a
c0022d20:	6a 00                	push   0x0
c0022d22:	50                   	push   eax
c0022d23:	e8 e6 08 ff ff       	call   c001360e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022d28:	83 c4 10             	add    esp,0x10
c0022d2b:	b8 00 00 00 00       	mov    eax,0x0
c0022d30:	83 c4 0c             	add    esp,0xc
c0022d33:	c3                   	ret    

c0022d34 <PIT::PIT()>:
c0022d34:	83 ec 0c             	sub    esp,0xc
c0022d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d3b:	83 ec 08             	sub    esp,0x8
c0022d3e:	68 54 93 02 c0       	push   0xc0029354
c0022d43:	50                   	push   eax
c0022d44:	e8 9f 2f ff ff       	call   c0015ce8 <Timer::Timer(char const*)>
c0022d49:	83 c4 10             	add    esp,0x10
c0022d4c:	ba 7c 93 02 c0       	mov    edx,0xc002937c
c0022d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d55:	89 10                	mov    DWORD PTR [eax],edx
c0022d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d61:	0f b6 d0             	movzx  edx,al
c0022d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d68:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d79:	0f b6 d0             	movzx  edx,al
c0022d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d80:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d8f:	8d 50 01             	lea    edx,[eax+0x1]
c0022d92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d96:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022d9c:	0f b6 d0             	movzx  edx,al
c0022d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022da7:	83 e1 3f             	and    ecx,0x3f
c0022daa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022dae:	90                   	nop
c0022daf:	83 c4 0c             	add    esp,0xc
c0022db2:	c3                   	ret    
c0022db3:	66 90                	xchg   ax,ax
c0022db5:	66 90                	xchg   ax,ax
c0022db7:	66 90                	xchg   ax,ax
c0022db9:	66 90                	xchg   ax,ax
c0022dbb:	66 90                	xchg   ax,ax
c0022dbd:	66 90                	xchg   ax,ax
c0022dbf:	90                   	nop

c0022dc0 <avxDetect>:
c0022dc0:	b8 00 00 00 00       	mov    eax,0x0
c0022dc5:	c3                   	ret    

c0022dc6 <avxSave>:
c0022dc6:	c3                   	ret    

c0022dc7 <avxLoad>:
c0022dc7:	c3                   	ret    

c0022dc8 <avxInit>:
c0022dc8:	c3                   	ret    

c0022dc9 <avxClose>:
c0022dc9:	c3                   	ret    
c0022dca:	66 90                	xchg   ax,ax
c0022dcc:	66 90                	xchg   ax,ax
c0022dce:	66 90                	xchg   ax,ax

c0022dd0 <sseDetect>:
c0022dd0:	b8 01 00 00 00       	mov    eax,0x1
c0022dd5:	0f a2                	cpuid  
c0022dd7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022ddd:	74 06                	je     c0022de5 <sseDetect.noSSE>
c0022ddf:	b8 01 00 00 00       	mov    eax,0x1
c0022de4:	c3                   	ret    

c0022de5 <sseDetect.noSSE>:
c0022de5:	b8 00 00 00 00       	mov    eax,0x0
c0022dea:	c3                   	ret    

c0022deb <sseSave>:
c0022deb:	0f ae 44 24 08       	fxsave [esp+0x8]
c0022df0:	c3                   	ret    

c0022df1 <sseLoad>:
c0022df1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0022df6:	c3                   	ret    

c0022df7 <sseInit>:
c0022df7:	e8 40 00 00 00       	call   c0022e3c <x87Init>
c0022dfc:	0f 20 e0             	mov    eax,cr4
c0022dff:	66 0d 00 06          	or     ax,0x600
c0022e03:	0f 22 e0             	mov    cr4,eax
c0022e06:	c3                   	ret    

c0022e07 <sseClose>:
c0022e07:	c3                   	ret    
c0022e08:	66 90                	xchg   ax,ax
c0022e0a:	66 90                	xchg   ax,ax
c0022e0c:	66 90                	xchg   ax,ax
c0022e0e:	66 90                	xchg   ax,ax

c0022e10 <value_37F>:
c0022e10:	7f 03                	jg     c0022e15 <value_37A+0x1>

c0022e12 <value_37E>:
c0022e12:	7e 03                	jle    c0022e17 <x87Detect+0x1>

c0022e14 <value_37A>:
c0022e14:	7a 03                	jp     c0022e19 <x87Detect+0x3>

c0022e16 <x87Detect>:
c0022e16:	b8 01 00 00 00       	mov    eax,0x1
c0022e1b:	0f a2                	cpuid  
c0022e1d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022e23:	74 06                	je     c0022e2b <x87Detect.nox87>
c0022e25:	b8 01 00 00 00       	mov    eax,0x1
c0022e2a:	c3                   	ret    

c0022e2b <x87Detect.nox87>:
c0022e2b:	b8 00 00 00 00       	mov    eax,0x0
c0022e30:	c3                   	ret    

c0022e31 <x87Save>:
c0022e31:	9b dd 74 24 08       	fsave  [esp+0x8]
c0022e36:	c3                   	ret    

c0022e37 <x87Load>:
c0022e37:	dd 64 24 08          	frstor [esp+0x8]
c0022e3b:	c3                   	ret    

c0022e3c <x87Init>:
c0022e3c:	9b db e3             	finit  
c0022e3f:	0f 20 c0             	mov    eax,cr0
c0022e42:	66 25 fb ff          	and    ax,0xfffb
c0022e46:	66 0d 22 00          	or     ax,0x22
c0022e4a:	0f 22 c0             	mov    cr0,eax
c0022e4d:	0f 06                	clts   
c0022e4f:	d9 2d 14 2e 02 c0    	fldcw  WORD PTR ds:0xc0022e14
c0022e55:	c3                   	ret    

c0022e56 <x87Close>:
c0022e56:	c3                   	ret    
c0022e57:	90                   	nop

c0022e58 <__do_global_ctors_aux>:
c0022e58:	a1 20 5b 02 c0       	mov    eax,ds:0xc0025b20
c0022e5d:	83 f8 ff             	cmp    eax,0xffffffff
c0022e60:	74 1a                	je     c0022e7c <__do_global_ctors_aux+0x24>
c0022e62:	55                   	push   ebp
c0022e63:	89 e5                	mov    ebp,esp
c0022e65:	53                   	push   ebx
c0022e66:	52                   	push   edx
c0022e67:	bb 20 5b 02 c0       	mov    ebx,0xc0025b20
c0022e6c:	ff d0                	call   eax
c0022e6e:	83 eb 04             	sub    ebx,0x4
c0022e71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022e73:	83 f8 ff             	cmp    eax,0xffffffff
c0022e76:	75 f4                	jne    c0022e6c <__do_global_ctors_aux+0x14>
c0022e78:	58                   	pop    eax
c0022e79:	5b                   	pop    ebx
c0022e7a:	5d                   	pop    ebp
c0022e7b:	c3                   	ret    
c0022e7c:	c3                   	ret    
c0022e7d:	66 90                	xchg   ax,ax
c0022e7f:	90                   	nop

c0022e80 <__fixunssfdi>:
c0022e80:	57                   	push   edi
c0022e81:	56                   	push   esi
c0022e82:	53                   	push   ebx
c0022e83:	83 ec 20             	sub    esp,0x20
c0022e86:	e8 81 2c 00 00       	call   c0025b0c <__x86.get_pc_thunk.bx>
c0022e8b:	81 c3 21 6b 00 00    	add    ebx,0x6b21
c0022e91:	d9 44 24 30          	fld    DWORD PTR [esp+0x30]
c0022e95:	d9 83 f8 f9 ff ff    	fld    DWORD PTR [ebx-0x608]
c0022e9b:	d8 c9                	fmul   st,st(1)
c0022e9d:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c0022ea1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0022ea6:	80 cc 0c             	or     ah,0xc
c0022ea9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0022eae:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0022eb2:	df 7c 24 08          	fistp  QWORD PTR [esp+0x8]
c0022eb6:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c0022eba:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0022ebe:	89 34 24             	mov    DWORD PTR [esp],esi
c0022ec1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022ec9:	df 2c 24             	fild   QWORD PTR [esp]
c0022ecc:	d9 83 fc f9 ff ff    	fld    DWORD PTR [ebx-0x604]
c0022ed2:	de c9                	fmulp  st(1),st
c0022ed4:	de e9                	fsubp  st(1),st
c0022ed6:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0022eda:	df 7c 24 08          	fistp  QWORD PTR [esp+0x8]
c0022ede:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c0022ee2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022ee6:	89 c8                	mov    eax,ecx
c0022ee8:	89 f2                	mov    edx,esi
c0022eea:	83 c4 20             	add    esp,0x20
c0022eed:	5b                   	pop    ebx
c0022eee:	5e                   	pop    esi
c0022eef:	5f                   	pop    edi
c0022ef0:	c3                   	ret    
c0022ef1:	66 90                	xchg   ax,ax
c0022ef3:	90                   	nop

c0022ef4 <__fixunsdfdi>:
c0022ef4:	57                   	push   edi
c0022ef5:	56                   	push   esi
c0022ef6:	53                   	push   ebx
c0022ef7:	83 ec 20             	sub    esp,0x20
c0022efa:	e8 0d 2c 00 00       	call   c0025b0c <__x86.get_pc_thunk.bx>
c0022eff:	81 c3 ad 6a 00 00    	add    ebx,0x6aad
c0022f05:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022f09:	d9 83 f8 f9 ff ff    	fld    DWORD PTR [ebx-0x608]
c0022f0f:	d8 c9                	fmul   st,st(1)
c0022f11:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c0022f15:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0022f1a:	80 cc 0c             	or     ah,0xc
c0022f1d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0022f22:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0022f26:	df 7c 24 08          	fistp  QWORD PTR [esp+0x8]
c0022f2a:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c0022f2e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0022f32:	89 34 24             	mov    DWORD PTR [esp],esi
c0022f35:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022f3d:	df 2c 24             	fild   QWORD PTR [esp]
c0022f40:	d9 83 fc f9 ff ff    	fld    DWORD PTR [ebx-0x604]
c0022f46:	de c9                	fmulp  st(1),st
c0022f48:	de e9                	fsubp  st(1),st
c0022f4a:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0022f4e:	df 7c 24 08          	fistp  QWORD PTR [esp+0x8]
c0022f52:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c0022f56:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022f5a:	89 c8                	mov    eax,ecx
c0022f5c:	89 f2                	mov    edx,esi
c0022f5e:	83 c4 20             	add    esp,0x20
c0022f61:	5b                   	pop    ebx
c0022f62:	5e                   	pop    esi
c0022f63:	5f                   	pop    edi
c0022f64:	c3                   	ret    
c0022f65:	66 90                	xchg   ax,ax
c0022f67:	90                   	nop

c0022f68 <__floatundisf>:
c0022f68:	83 ec 1c             	sub    esp,0x1c
c0022f6b:	e8 a0 2b 00 00       	call   c0025b10 <__x86.get_pc_thunk.cx>
c0022f70:	81 c1 3c 6a 00 00    	add    ecx,0x6a3c
c0022f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f7a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022f7e:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0022f84:	76 0f                	jbe    c0022f95 <__floatundisf+0x2d>
c0022f86:	a9 ff 07 00 00       	test   eax,0x7ff
c0022f8b:	74 08                	je     c0022f95 <__floatundisf+0x2d>
c0022f8d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0022f92:	80 cc 08             	or     ah,0x8
c0022f95:	89 14 24             	mov    DWORD PTR [esp],edx
c0022f98:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022fa0:	df 2c 24             	fild   QWORD PTR [esp]
c0022fa3:	d8 89 fc f9 ff ff    	fmul   DWORD PTR [ecx-0x604]
c0022fa9:	89 04 24             	mov    DWORD PTR [esp],eax
c0022fac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022fb4:	df 2c 24             	fild   QWORD PTR [esp]
c0022fb7:	de c1                	faddp  st(1),st
c0022fb9:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c0022fbd:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c0022fc1:	83 c4 1c             	add    esp,0x1c
c0022fc4:	c3                   	ret    
c0022fc5:	66 90                	xchg   ax,ax
c0022fc7:	90                   	nop

c0022fc8 <__floatundidf>:
c0022fc8:	83 ec 14             	sub    esp,0x14
c0022fcb:	e8 40 2b 00 00       	call   c0025b10 <__x86.get_pc_thunk.cx>
c0022fd0:	81 c1 dc 69 00 00    	add    ecx,0x69dc
c0022fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022fda:	31 d2                	xor    edx,edx
c0022fdc:	89 04 24             	mov    DWORD PTR [esp],eax
c0022fdf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022fe3:	df 2c 24             	fild   QWORD PTR [esp]
c0022fe6:	d9 81 fc f9 ff ff    	fld    DWORD PTR [ecx-0x604]
c0022fec:	de c9                	fmulp  st(1),st
c0022fee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ff2:	31 d2                	xor    edx,edx
c0022ff4:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ff7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022ffb:	df 2c 24             	fild   QWORD PTR [esp]
c0022ffe:	de c1                	faddp  st(1),st
c0023000:	83 c4 14             	add    esp,0x14
c0023003:	c3                   	ret    

c0023004 <__divdi3>:
c0023004:	55                   	push   ebp
c0023005:	57                   	push   edi
c0023006:	56                   	push   esi
c0023007:	53                   	push   ebx
c0023008:	83 ec 1c             	sub    esp,0x1c
c002300b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002300f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023013:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0023016:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002301a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002301e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023022:	85 db                	test   ebx,ebx
c0023024:	0f 88 8e 00 00 00    	js     c00230b8 <__divdi3+0xb4>
c002302a:	89 dd                	mov    ebp,ebx
c002302c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023034:	89 d3                	mov    ebx,edx
c0023036:	85 d2                	test   edx,edx
c0023038:	79 0d                	jns    c0023047 <__divdi3+0x43>
c002303a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002303e:	f7 d8                	neg    eax
c0023040:	83 d2 00             	adc    edx,0x0
c0023043:	f7 da                	neg    edx
c0023045:	89 d3                	mov    ebx,edx
c0023047:	89 c7                	mov    edi,eax
c0023049:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002304c:	85 db                	test   ebx,ebx
c002304e:	75 48                	jne    c0023098 <__divdi3+0x94>
c0023050:	39 ef                	cmp    edi,ebp
c0023052:	76 24                	jbe    c0023078 <__divdi3+0x74>
c0023054:	89 ea                	mov    edx,ebp
c0023056:	f7 f7                	div    edi
c0023058:	89 c1                	mov    ecx,eax
c002305a:	31 f6                	xor    esi,esi
c002305c:	89 c8                	mov    eax,ecx
c002305e:	89 f2                	mov    edx,esi
c0023060:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023064:	85 c9                	test   ecx,ecx
c0023066:	74 07                	je     c002306f <__divdi3+0x6b>
c0023068:	f7 d8                	neg    eax
c002306a:	83 d2 00             	adc    edx,0x0
c002306d:	f7 da                	neg    edx
c002306f:	83 c4 1c             	add    esp,0x1c
c0023072:	5b                   	pop    ebx
c0023073:	5e                   	pop    esi
c0023074:	5f                   	pop    edi
c0023075:	5d                   	pop    ebp
c0023076:	c3                   	ret    
c0023077:	90                   	nop
c0023078:	85 ff                	test   edi,edi
c002307a:	75 0b                	jne    c0023087 <__divdi3+0x83>
c002307c:	b8 01 00 00 00       	mov    eax,0x1
c0023081:	31 d2                	xor    edx,edx
c0023083:	f7 f3                	div    ebx
c0023085:	89 c7                	mov    edi,eax
c0023087:	31 d2                	xor    edx,edx
c0023089:	89 e8                	mov    eax,ebp
c002308b:	f7 f7                	div    edi
c002308d:	89 c6                	mov    esi,eax
c002308f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023092:	f7 f7                	div    edi
c0023094:	89 c1                	mov    ecx,eax
c0023096:	eb c4                	jmp    c002305c <__divdi3+0x58>
c0023098:	39 eb                	cmp    ebx,ebp
c002309a:	77 3c                	ja     c00230d8 <__divdi3+0xd4>
c002309c:	0f bd f3             	bsr    esi,ebx
c002309f:	83 f6 1f             	xor    esi,0x1f
c00230a2:	75 40                	jne    c00230e4 <__divdi3+0xe0>
c00230a4:	39 eb                	cmp    ebx,ebp
c00230a6:	72 09                	jb     c00230b1 <__divdi3+0xad>
c00230a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00230ab:	0f 87 97 00 00 00    	ja     c0023148 <__divdi3+0x144>
c00230b1:	b9 01 00 00 00       	mov    ecx,0x1
c00230b6:	eb a4                	jmp    c002305c <__divdi3+0x58>
c00230b8:	f7 d9                	neg    ecx
c00230ba:	83 d3 00             	adc    ebx,0x0
c00230bd:	f7 db                	neg    ebx
c00230bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00230c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00230c6:	89 dd                	mov    ebp,ebx
c00230c8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00230d0:	e9 5f ff ff ff       	jmp    c0023034 <__divdi3+0x30>
c00230d5:	8d 76 00             	lea    esi,[esi+0x0]
c00230d8:	31 f6                	xor    esi,esi
c00230da:	31 c9                	xor    ecx,ecx
c00230dc:	e9 7b ff ff ff       	jmp    c002305c <__divdi3+0x58>
c00230e1:	8d 76 00             	lea    esi,[esi+0x0]
c00230e4:	b8 20 00 00 00       	mov    eax,0x20
c00230e9:	29 f0                	sub    eax,esi
c00230eb:	89 f1                	mov    ecx,esi
c00230ed:	d3 e3                	shl    ebx,cl
c00230ef:	89 fa                	mov    edx,edi
c00230f1:	88 c1                	mov    cl,al
c00230f3:	d3 ea                	shr    edx,cl
c00230f5:	09 da                	or     edx,ebx
c00230f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00230fb:	89 f1                	mov    ecx,esi
c00230fd:	d3 e7                	shl    edi,cl
c00230ff:	89 eb                	mov    ebx,ebp
c0023101:	88 c1                	mov    cl,al
c0023103:	d3 eb                	shr    ebx,cl
c0023105:	89 f1                	mov    ecx,esi
c0023107:	d3 e5                	shl    ebp,cl
c0023109:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002310c:	88 c1                	mov    cl,al
c002310e:	d3 ea                	shr    edx,cl
c0023110:	09 d5                	or     ebp,edx
c0023112:	89 e8                	mov    eax,ebp
c0023114:	89 da                	mov    edx,ebx
c0023116:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002311a:	89 d3                	mov    ebx,edx
c002311c:	89 c5                	mov    ebp,eax
c002311e:	f7 e7                	mul    edi
c0023120:	39 d3                	cmp    ebx,edx
c0023122:	72 18                	jb     c002313c <__divdi3+0x138>
c0023124:	74 0a                	je     c0023130 <__divdi3+0x12c>
c0023126:	89 e9                	mov    ecx,ebp
c0023128:	31 f6                	xor    esi,esi
c002312a:	e9 2d ff ff ff       	jmp    c002305c <__divdi3+0x58>
c002312f:	90                   	nop
c0023130:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023133:	89 f1                	mov    ecx,esi
c0023135:	d3 e7                	shl    edi,cl
c0023137:	39 c7                	cmp    edi,eax
c0023139:	73 eb                	jae    c0023126 <__divdi3+0x122>
c002313b:	90                   	nop
c002313c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002313f:	31 f6                	xor    esi,esi
c0023141:	e9 16 ff ff ff       	jmp    c002305c <__divdi3+0x58>
c0023146:	66 90                	xchg   ax,ax
c0023148:	31 c9                	xor    ecx,ecx
c002314a:	e9 0d ff ff ff       	jmp    c002305c <__divdi3+0x58>
c002314f:	90                   	nop

c0023150 <__moddi3>:
c0023150:	55                   	push   ebp
c0023151:	57                   	push   edi
c0023152:	56                   	push   esi
c0023153:	53                   	push   ebx
c0023154:	83 ec 2c             	sub    esp,0x2c
c0023157:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002315b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002315f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0023163:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0023167:	85 db                	test   ebx,ebx
c0023169:	0f 88 85 00 00 00    	js     c00231f4 <__moddi3+0xa4>
c002316f:	89 de                	mov    esi,ebx
c0023171:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023179:	89 d7                	mov    edi,edx
c002317b:	85 d2                	test   edx,edx
c002317d:	79 09                	jns    c0023188 <__moddi3+0x38>
c002317f:	f7 d8                	neg    eax
c0023181:	83 d2 00             	adc    edx,0x0
c0023184:	f7 da                	neg    edx
c0023186:	89 d7                	mov    edi,edx
c0023188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002318c:	89 cd                	mov    ebp,ecx
c002318e:	85 ff                	test   edi,edi
c0023190:	75 52                	jne    c00231e4 <__moddi3+0x94>
c0023192:	89 c3                	mov    ebx,eax
c0023194:	39 f0                	cmp    eax,esi
c0023196:	76 24                	jbe    c00231bc <__moddi3+0x6c>
c0023198:	89 c8                	mov    eax,ecx
c002319a:	89 f2                	mov    edx,esi
c002319c:	f7 f3                	div    ebx
c002319e:	89 d6                	mov    esi,edx
c00231a0:	89 f0                	mov    eax,esi
c00231a2:	31 d2                	xor    edx,edx
c00231a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00231a8:	85 c9                	test   ecx,ecx
c00231aa:	74 07                	je     c00231b3 <__moddi3+0x63>
c00231ac:	f7 d8                	neg    eax
c00231ae:	83 d2 00             	adc    edx,0x0
c00231b1:	f7 da                	neg    edx
c00231b3:	83 c4 2c             	add    esp,0x2c
c00231b6:	5b                   	pop    ebx
c00231b7:	5e                   	pop    esi
c00231b8:	5f                   	pop    edi
c00231b9:	5d                   	pop    ebp
c00231ba:	c3                   	ret    
c00231bb:	90                   	nop
c00231bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00231c0:	85 db                	test   ebx,ebx
c00231c2:	75 0d                	jne    c00231d1 <__moddi3+0x81>
c00231c4:	b8 01 00 00 00       	mov    eax,0x1
c00231c9:	31 d2                	xor    edx,edx
c00231cb:	f7 f7                	div    edi
c00231cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00231d1:	89 f0                	mov    eax,esi
c00231d3:	31 d2                	xor    edx,edx
c00231d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00231d9:	f7 f7                	div    edi
c00231db:	89 e8                	mov    eax,ebp
c00231dd:	f7 f7                	div    edi
c00231df:	89 d6                	mov    esi,edx
c00231e1:	eb bd                	jmp    c00231a0 <__moddi3+0x50>
c00231e3:	90                   	nop
c00231e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00231e8:	39 f7                	cmp    edi,esi
c00231ea:	76 20                	jbe    c002320c <__moddi3+0xbc>
c00231ec:	89 c8                	mov    eax,ecx
c00231ee:	89 f2                	mov    edx,esi
c00231f0:	eb b2                	jmp    c00231a4 <__moddi3+0x54>
c00231f2:	66 90                	xchg   ax,ax
c00231f4:	f7 d9                	neg    ecx
c00231f6:	83 d3 00             	adc    ebx,0x0
c00231f9:	f7 db                	neg    ebx
c00231fb:	89 de                	mov    esi,ebx
c00231fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0023205:	e9 6f ff ff ff       	jmp    c0023179 <__moddi3+0x29>
c002320a:	66 90                	xchg   ax,ax
c002320c:	0f bd c7             	bsr    eax,edi
c002320f:	83 f0 1f             	xor    eax,0x1f
c0023212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023216:	75 24                	jne    c002323c <__moddi3+0xec>
c0023218:	39 f7                	cmp    edi,esi
c002321a:	72 06                	jb     c0023222 <__moddi3+0xd2>
c002321c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0023220:	77 0c                	ja     c002322e <__moddi3+0xde>
c0023222:	89 e9                	mov    ecx,ebp
c0023224:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0023228:	19 fe                	sbb    esi,edi
c002322a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002322e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023232:	89 f2                	mov    edx,esi
c0023234:	e9 6b ff ff ff       	jmp    c00231a4 <__moddi3+0x54>
c0023239:	8d 76 00             	lea    esi,[esi+0x0]
c002323c:	b8 20 00 00 00       	mov    eax,0x20
c0023241:	89 c2                	mov    edx,eax
c0023243:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023247:	29 da                	sub    edx,ebx
c0023249:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002324d:	88 d9                	mov    cl,bl
c002324f:	d3 e7                	shl    edi,cl
c0023251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023255:	88 d1                	mov    cl,dl
c0023257:	d3 e8                	shr    eax,cl
c0023259:	09 c7                	or     edi,eax
c002325b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002325f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023263:	89 d8                	mov    eax,ebx
c0023265:	88 d9                	mov    cl,bl
c0023267:	d3 e7                	shl    edi,cl
c0023269:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002326d:	89 f3                	mov    ebx,esi
c002326f:	88 d1                	mov    cl,dl
c0023271:	d3 eb                	shr    ebx,cl
c0023273:	89 c7                	mov    edi,eax
c0023275:	88 c1                	mov    cl,al
c0023277:	d3 e6                	shl    esi,cl
c0023279:	89 e8                	mov    eax,ebp
c002327b:	88 d1                	mov    cl,dl
c002327d:	d3 e8                	shr    eax,cl
c002327f:	09 f0                	or     eax,esi
c0023281:	89 f9                	mov    ecx,edi
c0023283:	d3 e5                	shl    ebp,cl
c0023285:	89 da                	mov    edx,ebx
c0023287:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002328b:	89 d3                	mov    ebx,edx
c002328d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023291:	89 c6                	mov    esi,eax
c0023293:	89 d1                	mov    ecx,edx
c0023295:	39 d3                	cmp    ebx,edx
c0023297:	72 27                	jb     c00232c0 <__moddi3+0x170>
c0023299:	74 21                	je     c00232bc <__moddi3+0x16c>
c002329b:	29 f5                	sub    ebp,esi
c002329d:	19 cb                	sbb    ebx,ecx
c002329f:	89 de                	mov    esi,ebx
c00232a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00232a5:	d3 e6                	shl    esi,cl
c00232a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00232ab:	89 f9                	mov    ecx,edi
c00232ad:	d3 ed                	shr    ebp,cl
c00232af:	09 ee                	or     esi,ebp
c00232b1:	89 f0                	mov    eax,esi
c00232b3:	d3 eb                	shr    ebx,cl
c00232b5:	89 da                	mov    edx,ebx
c00232b7:	e9 e8 fe ff ff       	jmp    c00231a4 <__moddi3+0x54>
c00232bc:	39 c5                	cmp    ebp,eax
c00232be:	73 db                	jae    c002329b <__moddi3+0x14b>
c00232c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00232c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00232c8:	89 d1                	mov    ecx,edx
c00232ca:	89 c6                	mov    esi,eax
c00232cc:	eb cd                	jmp    c002329b <__moddi3+0x14b>
c00232ce:	66 90                	xchg   ax,ax

c00232d0 <__udivdi3>:
c00232d0:	55                   	push   ebp
c00232d1:	57                   	push   edi
c00232d2:	56                   	push   esi
c00232d3:	53                   	push   ebx
c00232d4:	83 ec 1c             	sub    esp,0x1c
c00232d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00232db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00232df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00232e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00232e7:	85 d2                	test   edx,edx
c00232e9:	75 41                	jne    c002332c <__udivdi3+0x5c>
c00232eb:	39 f7                	cmp    edi,esi
c00232ed:	76 15                	jbe    c0023304 <__udivdi3+0x34>
c00232ef:	89 e8                	mov    eax,ebp
c00232f1:	89 f2                	mov    edx,esi
c00232f3:	f7 f7                	div    edi
c00232f5:	31 db                	xor    ebx,ebx
c00232f7:	89 da                	mov    edx,ebx
c00232f9:	83 c4 1c             	add    esp,0x1c
c00232fc:	5b                   	pop    ebx
c00232fd:	5e                   	pop    esi
c00232fe:	5f                   	pop    edi
c00232ff:	5d                   	pop    ebp
c0023300:	c3                   	ret    
c0023301:	8d 76 00             	lea    esi,[esi+0x0]
c0023304:	89 f9                	mov    ecx,edi
c0023306:	85 ff                	test   edi,edi
c0023308:	75 0b                	jne    c0023315 <__udivdi3+0x45>
c002330a:	b8 01 00 00 00       	mov    eax,0x1
c002330f:	31 d2                	xor    edx,edx
c0023311:	f7 f7                	div    edi
c0023313:	89 c1                	mov    ecx,eax
c0023315:	31 d2                	xor    edx,edx
c0023317:	89 f0                	mov    eax,esi
c0023319:	f7 f1                	div    ecx
c002331b:	89 c3                	mov    ebx,eax
c002331d:	89 e8                	mov    eax,ebp
c002331f:	f7 f1                	div    ecx
c0023321:	89 da                	mov    edx,ebx
c0023323:	83 c4 1c             	add    esp,0x1c
c0023326:	5b                   	pop    ebx
c0023327:	5e                   	pop    esi
c0023328:	5f                   	pop    edi
c0023329:	5d                   	pop    ebp
c002332a:	c3                   	ret    
c002332b:	90                   	nop
c002332c:	39 f2                	cmp    edx,esi
c002332e:	77 1c                	ja     c002334c <__udivdi3+0x7c>
c0023330:	0f bd da             	bsr    ebx,edx
c0023333:	83 f3 1f             	xor    ebx,0x1f
c0023336:	75 24                	jne    c002335c <__udivdi3+0x8c>
c0023338:	39 f2                	cmp    edx,esi
c002333a:	72 08                	jb     c0023344 <__udivdi3+0x74>
c002333c:	39 ef                	cmp    edi,ebp
c002333e:	0f 87 84 00 00 00    	ja     c00233c8 <__udivdi3+0xf8>
c0023344:	b8 01 00 00 00       	mov    eax,0x1
c0023349:	eb ac                	jmp    c00232f7 <__udivdi3+0x27>
c002334b:	90                   	nop
c002334c:	31 db                	xor    ebx,ebx
c002334e:	31 c0                	xor    eax,eax
c0023350:	89 da                	mov    edx,ebx
c0023352:	83 c4 1c             	add    esp,0x1c
c0023355:	5b                   	pop    ebx
c0023356:	5e                   	pop    esi
c0023357:	5f                   	pop    edi
c0023358:	5d                   	pop    ebp
c0023359:	c3                   	ret    
c002335a:	66 90                	xchg   ax,ax
c002335c:	b8 20 00 00 00       	mov    eax,0x20
c0023361:	29 d8                	sub    eax,ebx
c0023363:	88 d9                	mov    cl,bl
c0023365:	d3 e2                	shl    edx,cl
c0023367:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002336b:	89 fa                	mov    edx,edi
c002336d:	88 c1                	mov    cl,al
c002336f:	d3 ea                	shr    edx,cl
c0023371:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023375:	09 d1                	or     ecx,edx
c0023377:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002337b:	88 d9                	mov    cl,bl
c002337d:	d3 e7                	shl    edi,cl
c002337f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023383:	89 f7                	mov    edi,esi
c0023385:	88 c1                	mov    cl,al
c0023387:	d3 ef                	shr    edi,cl
c0023389:	88 d9                	mov    cl,bl
c002338b:	d3 e6                	shl    esi,cl
c002338d:	89 ea                	mov    edx,ebp
c002338f:	88 c1                	mov    cl,al
c0023391:	d3 ea                	shr    edx,cl
c0023393:	09 d6                	or     esi,edx
c0023395:	89 f0                	mov    eax,esi
c0023397:	89 fa                	mov    edx,edi
c0023399:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002339d:	89 d7                	mov    edi,edx
c002339f:	89 c6                	mov    esi,eax
c00233a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00233a5:	39 d7                	cmp    edi,edx
c00233a7:	72 13                	jb     c00233bc <__udivdi3+0xec>
c00233a9:	74 09                	je     c00233b4 <__udivdi3+0xe4>
c00233ab:	89 f0                	mov    eax,esi
c00233ad:	31 db                	xor    ebx,ebx
c00233af:	e9 43 ff ff ff       	jmp    c00232f7 <__udivdi3+0x27>
c00233b4:	88 d9                	mov    cl,bl
c00233b6:	d3 e5                	shl    ebp,cl
c00233b8:	39 c5                	cmp    ebp,eax
c00233ba:	73 ef                	jae    c00233ab <__udivdi3+0xdb>
c00233bc:	8d 46 ff             	lea    eax,[esi-0x1]
c00233bf:	31 db                	xor    ebx,ebx
c00233c1:	e9 31 ff ff ff       	jmp    c00232f7 <__udivdi3+0x27>
c00233c6:	66 90                	xchg   ax,ax
c00233c8:	31 c0                	xor    eax,eax
c00233ca:	e9 28 ff ff ff       	jmp    c00232f7 <__udivdi3+0x27>
c00233cf:	90                   	nop

c00233d0 <__umoddi3>:
c00233d0:	55                   	push   ebp
c00233d1:	57                   	push   edi
c00233d2:	56                   	push   esi
c00233d3:	53                   	push   ebx
c00233d4:	83 ec 1c             	sub    esp,0x1c
c00233d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00233db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00233df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00233e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00233e7:	89 da                	mov    edx,ebx
c00233e9:	85 c0                	test   eax,eax
c00233eb:	75 37                	jne    c0023424 <__umoddi3+0x54>
c00233ed:	39 df                	cmp    edi,ebx
c00233ef:	76 13                	jbe    c0023404 <__umoddi3+0x34>
c00233f1:	89 f0                	mov    eax,esi
c00233f3:	f7 f7                	div    edi
c00233f5:	89 d0                	mov    eax,edx
c00233f7:	31 d2                	xor    edx,edx
c00233f9:	83 c4 1c             	add    esp,0x1c
c00233fc:	5b                   	pop    ebx
c00233fd:	5e                   	pop    esi
c00233fe:	5f                   	pop    edi
c00233ff:	5d                   	pop    ebp
c0023400:	c3                   	ret    
c0023401:	8d 76 00             	lea    esi,[esi+0x0]
c0023404:	89 fd                	mov    ebp,edi
c0023406:	85 ff                	test   edi,edi
c0023408:	75 0b                	jne    c0023415 <__umoddi3+0x45>
c002340a:	b8 01 00 00 00       	mov    eax,0x1
c002340f:	31 d2                	xor    edx,edx
c0023411:	f7 f7                	div    edi
c0023413:	89 c5                	mov    ebp,eax
c0023415:	89 d8                	mov    eax,ebx
c0023417:	31 d2                	xor    edx,edx
c0023419:	f7 f5                	div    ebp
c002341b:	89 f0                	mov    eax,esi
c002341d:	f7 f5                	div    ebp
c002341f:	89 d0                	mov    eax,edx
c0023421:	eb d4                	jmp    c00233f7 <__umoddi3+0x27>
c0023423:	90                   	nop
c0023424:	89 f1                	mov    ecx,esi
c0023426:	39 d8                	cmp    eax,ebx
c0023428:	76 0a                	jbe    c0023434 <__umoddi3+0x64>
c002342a:	89 f0                	mov    eax,esi
c002342c:	83 c4 1c             	add    esp,0x1c
c002342f:	5b                   	pop    ebx
c0023430:	5e                   	pop    esi
c0023431:	5f                   	pop    edi
c0023432:	5d                   	pop    ebp
c0023433:	c3                   	ret    
c0023434:	0f bd e8             	bsr    ebp,eax
c0023437:	83 f5 1f             	xor    ebp,0x1f
c002343a:	75 1c                	jne    c0023458 <__umoddi3+0x88>
c002343c:	39 d8                	cmp    eax,ebx
c002343e:	72 04                	jb     c0023444 <__umoddi3+0x74>
c0023440:	39 f7                	cmp    edi,esi
c0023442:	77 08                	ja     c002344c <__umoddi3+0x7c>
c0023444:	89 da                	mov    edx,ebx
c0023446:	29 fe                	sub    esi,edi
c0023448:	19 c2                	sbb    edx,eax
c002344a:	89 f1                	mov    ecx,esi
c002344c:	89 c8                	mov    eax,ecx
c002344e:	83 c4 1c             	add    esp,0x1c
c0023451:	5b                   	pop    ebx
c0023452:	5e                   	pop    esi
c0023453:	5f                   	pop    edi
c0023454:	5d                   	pop    ebp
c0023455:	c3                   	ret    
c0023456:	66 90                	xchg   ax,ax
c0023458:	ba 20 00 00 00       	mov    edx,0x20
c002345d:	29 ea                	sub    edx,ebp
c002345f:	89 e9                	mov    ecx,ebp
c0023461:	d3 e0                	shl    eax,cl
c0023463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023467:	89 f8                	mov    eax,edi
c0023469:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002346d:	88 d1                	mov    cl,dl
c002346f:	d3 e8                	shr    eax,cl
c0023471:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023475:	09 c1                	or     ecx,eax
c0023477:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002347b:	89 e9                	mov    ecx,ebp
c002347d:	d3 e7                	shl    edi,cl
c002347f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023483:	89 d8                	mov    eax,ebx
c0023485:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023489:	88 d1                	mov    cl,dl
c002348b:	d3 e8                	shr    eax,cl
c002348d:	89 c7                	mov    edi,eax
c002348f:	89 e9                	mov    ecx,ebp
c0023491:	d3 e3                	shl    ebx,cl
c0023493:	89 f0                	mov    eax,esi
c0023495:	88 d1                	mov    cl,dl
c0023497:	d3 e8                	shr    eax,cl
c0023499:	09 d8                	or     eax,ebx
c002349b:	89 e9                	mov    ecx,ebp
c002349d:	d3 e6                	shl    esi,cl
c002349f:	89 f3                	mov    ebx,esi
c00234a1:	89 fa                	mov    edx,edi
c00234a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00234a7:	89 d1                	mov    ecx,edx
c00234a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00234ad:	89 c6                	mov    esi,eax
c00234af:	89 d7                	mov    edi,edx
c00234b1:	39 d1                	cmp    ecx,edx
c00234b3:	72 27                	jb     c00234dc <__umoddi3+0x10c>
c00234b5:	74 21                	je     c00234d8 <__umoddi3+0x108>
c00234b7:	89 ca                	mov    edx,ecx
c00234b9:	29 f3                	sub    ebx,esi
c00234bb:	19 fa                	sbb    edx,edi
c00234bd:	89 d0                	mov    eax,edx
c00234bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00234c3:	d3 e0                	shl    eax,cl
c00234c5:	89 e9                	mov    ecx,ebp
c00234c7:	d3 eb                	shr    ebx,cl
c00234c9:	09 d8                	or     eax,ebx
c00234cb:	d3 ea                	shr    edx,cl
c00234cd:	83 c4 1c             	add    esp,0x1c
c00234d0:	5b                   	pop    ebx
c00234d1:	5e                   	pop    esi
c00234d2:	5f                   	pop    edi
c00234d3:	5d                   	pop    ebp
c00234d4:	c3                   	ret    
c00234d5:	8d 76 00             	lea    esi,[esi+0x0]
c00234d8:	39 c3                	cmp    ebx,eax
c00234da:	73 db                	jae    c00234b7 <__umoddi3+0xe7>
c00234dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00234e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00234e4:	89 d7                	mov    edi,edx
c00234e6:	89 c6                	mov    esi,eax
c00234e8:	eb cd                	jmp    c00234b7 <__umoddi3+0xe7>

c00234ea <__addsf3>:
c00234ea:	55                   	push   ebp
c00234eb:	89 e5                	mov    ebp,esp
c00234ed:	57                   	push   edi
c00234ee:	56                   	push   esi
c00234ef:	53                   	push   ebx
c00234f0:	83 ec 08             	sub    esp,0x8
c00234f3:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00234f6:	89 fa                	mov    edx,edi
c00234f8:	89 f8                	mov    eax,edi
c00234fa:	c1 f8 17             	sar    eax,0x17
c00234fd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023500:	c1 e2 08             	shl    edx,0x8
c0023503:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023509:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002350c:	89 de                	mov    esi,ebx
c002350e:	c1 fe 17             	sar    esi,0x17
c0023511:	c1 e3 08             	shl    ebx,0x8
c0023514:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002351a:	31 f0                	xor    eax,esi
c002351c:	0f 88 3b 01 00 00    	js     c002365d <__addsf3+0x173>
c0023522:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0023525:	29 f1                	sub    ecx,esi
c0023527:	85 c9                	test   ecx,ecx
c0023529:	7e 54                	jle    c002357f <__addsf3+0x95>
c002352b:	89 f0                	mov    eax,esi
c002352d:	84 c0                	test   al,al
c002352f:	75 10                	jne    c0023541 <__addsf3+0x57>
c0023531:	85 db                	test   ebx,ebx
c0023533:	0f 84 aa 02 00 00    	je     c00237e3 <__addsf3+0x2f9>
c0023539:	49                   	dec    ecx
c002353a:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002353d:	74 38                	je     c0023577 <__addsf3+0x8d>
c002353f:	eb 13                	jmp    c0023554 <__addsf3+0x6a>
c0023541:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023544:	f7 d0                	not    eax
c0023546:	84 c0                	test   al,al
c0023548:	0f 84 95 02 00 00    	je     c00237e3 <__addsf3+0x2f9>
c002354e:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023554:	83 f9 1f             	cmp    ecx,0x1f
c0023557:	0f 8f 86 02 00 00    	jg     c00237e3 <__addsf3+0x2f9>
c002355d:	89 de                	mov    esi,ebx
c002355f:	d3 ee                	shr    esi,cl
c0023561:	b8 20 00 00 00       	mov    eax,0x20
c0023566:	29 c8                	sub    eax,ecx
c0023568:	89 c1                	mov    ecx,eax
c002356a:	d3 e3                	shl    ebx,cl
c002356c:	31 c0                	xor    eax,eax
c002356e:	85 db                	test   ebx,ebx
c0023570:	0f 95 c0             	setne  al
c0023573:	09 f0                	or     eax,esi
c0023575:	01 d0                	add    eax,edx
c0023577:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002357a:	e9 b6 00 00 00       	jmp    c0023635 <__addsf3+0x14b>
c002357f:	74 5c                	je     c00235dd <__addsf3+0xf3>
c0023581:	89 f1                	mov    ecx,esi
c0023583:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023586:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023589:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002358d:	75 14                	jne    c00235a3 <__addsf3+0xb9>
c002358f:	85 d2                	test   edx,edx
c0023591:	0f 84 4c 02 00 00    	je     c00237e3 <__addsf3+0x2f9>
c0023597:	49                   	dec    ecx
c0023598:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002359b:	0f 84 94 00 00 00    	je     c0023635 <__addsf3+0x14b>
c00235a1:	eb 12                	jmp    c00235b5 <__addsf3+0xcb>
c00235a3:	89 f0                	mov    eax,esi
c00235a5:	f7 d0                	not    eax
c00235a7:	84 c0                	test   al,al
c00235a9:	0f 84 34 02 00 00    	je     c00237e3 <__addsf3+0x2f9>
c00235af:	81 ca 00 00 00 80    	or     edx,0x80000000
c00235b5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00235b8:	83 f9 1f             	cmp    ecx,0x1f
c00235bb:	0f 8f 22 02 00 00    	jg     c00237e3 <__addsf3+0x2f9>
c00235c1:	89 d7                	mov    edi,edx
c00235c3:	d3 ef                	shr    edi,cl
c00235c5:	b8 20 00 00 00       	mov    eax,0x20
c00235ca:	29 c8                	sub    eax,ecx
c00235cc:	89 c1                	mov    ecx,eax
c00235ce:	d3 e2                	shl    edx,cl
c00235d0:	31 c0                	xor    eax,eax
c00235d2:	85 d2                	test   edx,edx
c00235d4:	0f 95 c0             	setne  al
c00235d7:	09 f8                	or     eax,edi
c00235d9:	01 d8                	add    eax,ebx
c00235db:	eb 58                	jmp    c0023635 <__addsf3+0x14b>
c00235dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00235e0:	8d 70 01             	lea    esi,[eax+0x1]
c00235e3:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00235e9:	75 32                	jne    c002361d <__addsf3+0x133>
c00235eb:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00235ef:	75 1f                	jne    c0023610 <__addsf3+0x126>
c00235f1:	85 d2                	test   edx,edx
c00235f3:	0f 84 e0 01 00 00    	je     c00237d9 <__addsf3+0x2ef>
c00235f9:	85 db                	test   ebx,ebx
c00235fb:	0f 84 e2 01 00 00    	je     c00237e3 <__addsf3+0x2f9>
c0023601:	89 d0                	mov    eax,edx
c0023603:	01 d8                	add    eax,ebx
c0023605:	0f 89 a9 01 00 00    	jns    c00237b4 <__addsf3+0x2ca>
c002360b:	e9 9d 01 00 00       	jmp    c00237ad <__addsf3+0x2c3>
c0023610:	85 d2                	test   edx,edx
c0023612:	0f 85 cb 01 00 00    	jne    c00237e3 <__addsf3+0x2f9>
c0023618:	e9 bc 01 00 00       	jmp    c00237d9 <__addsf3+0x2ef>
c002361d:	31 c0                	xor    eax,eax
c002361f:	89 f1                	mov    ecx,esi
c0023621:	f7 d1                	not    ecx
c0023623:	84 c9                	test   cl,cl
c0023625:	0f 84 90 01 00 00    	je     c00237bb <__addsf3+0x2d1>
c002362b:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002362e:	d1 e8                	shr    eax,1
c0023630:	e9 86 01 00 00       	jmp    c00237bb <__addsf3+0x2d1>
c0023635:	85 c0                	test   eax,eax
c0023637:	0f 89 7e 01 00 00    	jns    c00237bb <__addsf3+0x2d1>
c002363d:	46                   	inc    esi
c002363e:	89 f2                	mov    edx,esi
c0023640:	f7 d2                	not    edx
c0023642:	84 d2                	test   dl,dl
c0023644:	0f 84 6f 01 00 00    	je     c00237b9 <__addsf3+0x2cf>
c002364a:	89 c2                	mov    edx,eax
c002364c:	83 e2 01             	and    edx,0x1
c002364f:	d1 e8                	shr    eax,1
c0023651:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0023656:	09 d0                	or     eax,edx
c0023658:	e9 5e 01 00 00       	jmp    c00237bb <__addsf3+0x2d1>
c002365d:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0023661:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023664:	89 f0                	mov    eax,esi
c0023666:	0f b6 c0             	movzx  eax,al
c0023669:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002366c:	29 c1                	sub    ecx,eax
c002366e:	85 c9                	test   ecx,ecx
c0023670:	7e 55                	jle    c00236c7 <__addsf3+0x1dd>
c0023672:	85 c0                	test   eax,eax
c0023674:	75 11                	jne    c0023687 <__addsf3+0x19d>
c0023676:	85 db                	test   ebx,ebx
c0023678:	0f 84 65 01 00 00    	je     c00237e3 <__addsf3+0x2f9>
c002367e:	49                   	dec    ecx
c002367f:	75 19                	jne    c002369a <__addsf3+0x1b0>
c0023681:	89 d0                	mov    eax,edx
c0023683:	29 d8                	sub    eax,ebx
c0023685:	eb 38                	jmp    c00236bf <__addsf3+0x1d5>
c0023687:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002368a:	f7 d0                	not    eax
c002368c:	84 c0                	test   al,al
c002368e:	0f 84 4f 01 00 00    	je     c00237e3 <__addsf3+0x2f9>
c0023694:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002369a:	83 f9 1f             	cmp    ecx,0x1f
c002369d:	0f 8f 40 01 00 00    	jg     c00237e3 <__addsf3+0x2f9>
c00236a3:	89 de                	mov    esi,ebx
c00236a5:	d3 ee                	shr    esi,cl
c00236a7:	b8 20 00 00 00       	mov    eax,0x20
c00236ac:	29 c8                	sub    eax,ecx
c00236ae:	89 c1                	mov    ecx,eax
c00236b0:	d3 e3                	shl    ebx,cl
c00236b2:	31 c0                	xor    eax,eax
c00236b4:	85 db                	test   ebx,ebx
c00236b6:	0f 95 c0             	setne  al
c00236b9:	09 f0                	or     eax,esi
c00236bb:	29 c2                	sub    edx,eax
c00236bd:	89 d0                	mov    eax,edx
c00236bf:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00236c2:	e9 af 00 00 00       	jmp    c0023776 <__addsf3+0x28c>
c00236c7:	74 5c                	je     c0023725 <__addsf3+0x23b>
c00236c9:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00236cc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00236cf:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00236d3:	75 14                	jne    c00236e9 <__addsf3+0x1ff>
c00236d5:	85 d2                	test   edx,edx
c00236d7:	0f 84 06 01 00 00    	je     c00237e3 <__addsf3+0x2f9>
c00236dd:	48                   	dec    eax
c00236de:	75 1b                	jne    c00236fb <__addsf3+0x211>
c00236e0:	89 d8                	mov    eax,ebx
c00236e2:	29 d0                	sub    eax,edx
c00236e4:	e9 8d 00 00 00       	jmp    c0023776 <__addsf3+0x28c>
c00236e9:	89 f1                	mov    ecx,esi
c00236eb:	f7 d1                	not    ecx
c00236ed:	84 c9                	test   cl,cl
c00236ef:	0f 84 ee 00 00 00    	je     c00237e3 <__addsf3+0x2f9>
c00236f5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00236fb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00236fe:	83 f8 1f             	cmp    eax,0x1f
c0023701:	0f 8f dc 00 00 00    	jg     c00237e3 <__addsf3+0x2f9>
c0023707:	89 d7                	mov    edi,edx
c0023709:	88 c1                	mov    cl,al
c002370b:	d3 ef                	shr    edi,cl
c002370d:	b9 20 00 00 00       	mov    ecx,0x20
c0023712:	29 c1                	sub    ecx,eax
c0023714:	d3 e2                	shl    edx,cl
c0023716:	31 c0                	xor    eax,eax
c0023718:	85 d2                	test   edx,edx
c002371a:	0f 95 c0             	setne  al
c002371d:	09 f8                	or     eax,edi
c002371f:	29 c3                	sub    ebx,eax
c0023721:	89 d8                	mov    eax,ebx
c0023723:	eb 51                	jmp    c0023776 <__addsf3+0x28c>
c0023725:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023728:	40                   	inc    eax
c0023729:	a8 fe                	test   al,0xfe
c002372b:	75 3d                	jne    c002376a <__addsf3+0x280>
c002372d:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0023731:	0f 85 a7 00 00 00    	jne    c00237de <__addsf3+0x2f4>
c0023737:	85 d2                	test   edx,edx
c0023739:	75 12                	jne    c002374d <__addsf3+0x263>
c002373b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002373e:	85 db                	test   ebx,ebx
c0023740:	0f 85 9d 00 00 00    	jne    c00237e3 <__addsf3+0x2f9>
c0023746:	31 ff                	xor    edi,edi
c0023748:	e9 96 00 00 00       	jmp    c00237e3 <__addsf3+0x2f9>
c002374d:	85 db                	test   ebx,ebx
c002374f:	0f 84 8e 00 00 00    	je     c00237e3 <__addsf3+0x2f9>
c0023755:	89 d0                	mov    eax,edx
c0023757:	29 d8                	sub    eax,ebx
c0023759:	79 06                	jns    c0023761 <__addsf3+0x277>
c002375b:	89 d8                	mov    eax,ebx
c002375d:	29 d0                	sub    eax,edx
c002375f:	eb 5a                	jmp    c00237bb <__addsf3+0x2d1>
c0023761:	bf 00 00 00 00       	mov    edi,0x0
c0023766:	74 7b                	je     c00237e3 <__addsf3+0x2f9>
c0023768:	eb 4a                	jmp    c00237b4 <__addsf3+0x2ca>
c002376a:	89 d0                	mov    eax,edx
c002376c:	29 d8                	sub    eax,ebx
c002376e:	79 12                	jns    c0023782 <__addsf3+0x298>
c0023770:	89 d8                	mov    eax,ebx
c0023772:	29 d0                	sub    eax,edx
c0023774:	eb 09                	jmp    c002377f <__addsf3+0x295>
c0023776:	85 c0                	test   eax,eax
c0023778:	79 41                	jns    c00237bb <__addsf3+0x2d1>
c002377a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002377f:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0023782:	31 f6                	xor    esi,esi
c0023784:	85 c0                	test   eax,eax
c0023786:	74 33                	je     c00237bb <__addsf3+0x2d1>
c0023788:	0f bd c8             	bsr    ecx,eax
c002378b:	83 f1 1f             	xor    ecx,0x1f
c002378e:	d3 e0                	shl    eax,cl
c0023790:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023794:	39 ca                	cmp    edx,ecx
c0023796:	7f 10                	jg     c00237a8 <__addsf3+0x2be>
c0023798:	29 d1                	sub    ecx,edx
c002379a:	41                   	inc    ecx
c002379b:	d3 e8                	shr    eax,cl
c002379d:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00237a0:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00237a6:	eb 13                	jmp    c00237bb <__addsf3+0x2d1>
c00237a8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00237ab:	29 ce                	sub    esi,ecx
c00237ad:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00237b2:	eb 07                	jmp    c00237bb <__addsf3+0x2d1>
c00237b4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00237b7:	eb 02                	jmp    c00237bb <__addsf3+0x2d1>
c00237b9:	31 c0                	xor    eax,eax
c00237bb:	89 c2                	mov    edx,eax
c00237bd:	c1 ea 08             	shr    edx,0x8
c00237c0:	a8 7f                	test   al,0x7f
c00237c2:	0f 95 c1             	setne  cl
c00237c5:	09 d1                	or     ecx,edx
c00237c7:	83 e1 01             	and    ecx,0x1
c00237ca:	c1 e8 07             	shr    eax,0x7
c00237cd:	21 c8                	and    eax,ecx
c00237cf:	c1 e6 17             	shl    esi,0x17
c00237d2:	09 d6                	or     esi,edx
c00237d4:	8d 3c 30             	lea    edi,[eax+esi*1]
c00237d7:	eb 0a                	jmp    c00237e3 <__addsf3+0x2f9>
c00237d9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00237dc:	eb 05                	jmp    c00237e3 <__addsf3+0x2f9>
c00237de:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00237e3:	89 f8                	mov    eax,edi
c00237e5:	5a                   	pop    edx
c00237e6:	59                   	pop    ecx
c00237e7:	5b                   	pop    ebx
c00237e8:	5e                   	pop    esi
c00237e9:	5f                   	pop    edi
c00237ea:	5d                   	pop    ebp
c00237eb:	c3                   	ret    

c00237ec <__subsf3>:
c00237ec:	55                   	push   ebp
c00237ed:	89 e5                	mov    ebp,esp
c00237ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00237f2:	05 00 00 00 80       	add    eax,0x80000000
c00237f7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00237fa:	5d                   	pop    ebp
c00237fb:	e9 ea fc ff ff       	jmp    c00234ea <__addsf3>

c0023800 <__negsf2>:
c0023800:	55                   	push   ebp
c0023801:	89 e5                	mov    ebp,esp
c0023803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023806:	05 00 00 00 80       	add    eax,0x80000000
c002380b:	5d                   	pop    ebp
c002380c:	c3                   	ret    

c002380d <__mulsf3>:
c002380d:	55                   	push   ebp
c002380e:	89 e5                	mov    ebp,esp
c0023810:	57                   	push   edi
c0023811:	56                   	push   esi
c0023812:	53                   	push   ebx
c0023813:	83 ec 1c             	sub    esp,0x1c
c0023816:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0023819:	89 f0                	mov    eax,esi
c002381b:	89 f1                	mov    ecx,esi
c002381d:	c1 f9 17             	sar    ecx,0x17
c0023820:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023823:	c1 e0 08             	shl    eax,0x8
c0023826:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002382b:	89 c1                	mov    ecx,eax
c002382d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023830:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023833:	89 c7                	mov    edi,eax
c0023835:	c1 ff 17             	sar    edi,0x17
c0023838:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002383c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002383f:	89 f8                	mov    eax,edi
c0023841:	0f b6 c0             	movzx  eax,al
c0023844:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0023847:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002384b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002384e:	42                   	inc    edx
c002384f:	80 e2 fe             	and    dl,0xfe
c0023852:	75 7b                	jne    c00238cf <__mulsf3+0xc2>
c0023854:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023858:	74 54                	je     c00238ae <__mulsf3+0xa1>
c002385a:	85 c9                	test   ecx,ecx
c002385c:	0f 85 64 01 00 00    	jne    c00239c6 <__mulsf3+0x1b9>
c0023862:	8d 57 01             	lea    edx,[edi+0x1]
c0023865:	80 e2 fe             	and    dl,0xfe
c0023868:	75 1f                	jne    c0023889 <__mulsf3+0x7c>
c002386a:	85 c0                	test   eax,eax
c002386c:	b8 00 00 00 00       	mov    eax,0x0
c0023871:	74 29                	je     c002389c <__mulsf3+0x8f>
c0023873:	53                   	push   ebx
c0023874:	53                   	push   ebx
c0023875:	50                   	push   eax
c0023876:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023879:	e8 96 05 00 00       	call   c0023e14 <__nesf2>
c002387e:	83 c4 10             	add    esp,0x10
c0023881:	85 c0                	test   eax,eax
c0023883:	0f 85 3a 01 00 00    	jne    c00239c3 <__mulsf3+0x1b6>
c0023889:	85 ff                	test   edi,edi
c002388b:	0f 89 35 01 00 00    	jns    c00239c6 <__mulsf3+0x1b9>
c0023891:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023897:	e9 2a 01 00 00       	jmp    c00239c6 <__mulsf3+0x1b9>
c002389c:	51                   	push   ecx
c002389d:	51                   	push   ecx
c002389e:	50                   	push   eax
c002389f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00238a2:	e8 6d 05 00 00       	call   c0023e14 <__nesf2>
c00238a7:	83 c4 10             	add    esp,0x10
c00238aa:	85 c0                	test   eax,eax
c00238ac:	eb 15                	jmp    c00238c3 <__mulsf3+0xb6>
c00238ae:	85 c9                	test   ecx,ecx
c00238b0:	74 0b                	je     c00238bd <__mulsf3+0xb0>
c00238b2:	8d 53 ff             	lea    edx,[ebx-0x1]
c00238b5:	01 c9                	add    ecx,ecx
c00238b7:	78 16                	js     c00238cf <__mulsf3+0xc2>
c00238b9:	89 d3                	mov    ebx,edx
c00238bb:	eb f5                	jmp    c00238b2 <__mulsf3+0xa5>
c00238bd:	89 f8                	mov    eax,edi
c00238bf:	f7 d0                	not    eax
c00238c1:	84 c0                	test   al,al
c00238c3:	75 c4                	jne    c0023889 <__mulsf3+0x7c>
c00238c5:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00238ca:	e9 f7 00 00 00       	jmp    c00239c6 <__mulsf3+0x1b9>
c00238cf:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00238d2:	c1 e6 08             	shl    esi,0x8
c00238d5:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00238db:	8d 57 01             	lea    edx,[edi+0x1]
c00238de:	80 e2 fe             	and    dl,0xfe
c00238e1:	75 63                	jne    c0023946 <__mulsf3+0x139>
c00238e3:	85 c0                	test   eax,eax
c00238e5:	74 2f                	je     c0023916 <__mulsf3+0x109>
c00238e7:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00238eb:	0f 89 d2 00 00 00    	jns    c00239c3 <__mulsf3+0x1b6>
c00238f1:	52                   	push   edx
c00238f2:	52                   	push   edx
c00238f3:	6a 00                	push   0x0
c00238f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00238f8:	e8 dc 04 00 00       	call   c0023dd9 <__eqsf2>
c00238fd:	83 c4 10             	add    esp,0x10
c0023900:	85 c0                	test   eax,eax
c0023902:	0f 85 bb 00 00 00    	jne    c00239c3 <__mulsf3+0x1b6>
c0023908:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002390b:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0023911:	e9 b0 00 00 00       	jmp    c00239c6 <__mulsf3+0x1b9>
c0023916:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023919:	50                   	push   eax
c002391a:	50                   	push   eax
c002391b:	6a 00                	push   0x0
c002391d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023920:	e8 b4 04 00 00       	call   c0023dd9 <__eqsf2>
c0023925:	83 c4 10             	add    esp,0x10
c0023928:	85 c0                	test   eax,eax
c002392a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002392d:	75 0c                	jne    c002393b <__mulsf3+0x12e>
c002392f:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023933:	0f 89 8a 00 00 00    	jns    c00239c3 <__mulsf3+0x1b6>
c0023939:	eb cd                	jmp    c0023908 <__mulsf3+0xfb>
c002393b:	8d 43 ff             	lea    eax,[ebx-0x1]
c002393e:	01 f6                	add    esi,esi
c0023940:	78 04                	js     c0023946 <__mulsf3+0x139>
c0023942:	89 c3                	mov    ebx,eax
c0023944:	eb f5                	jmp    c002393b <__mulsf3+0x12e>
c0023946:	89 c8                	mov    eax,ecx
c0023948:	0d 00 00 00 80       	or     eax,0x80000000
c002394d:	81 ce 00 00 00 80    	or     esi,0x80000000
c0023953:	f7 e6                	mul    esi
c0023955:	85 c0                	test   eax,eax
c0023957:	0f 95 c0             	setne  al
c002395a:	0f b6 c0             	movzx  eax,al
c002395d:	09 c2                	or     edx,eax
c002395f:	78 03                	js     c0023964 <__mulsf3+0x157>
c0023961:	01 d2                	add    edx,edx
c0023963:	4b                   	dec    ebx
c0023964:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002396a:	7f 22                	jg     c002398e <__mulsf3+0x181>
c002396c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023972:	85 db                	test   ebx,ebx
c0023974:	7f 23                	jg     c0023999 <__mulsf3+0x18c>
c0023976:	83 fb e9             	cmp    ebx,0xffffffe9
c0023979:	7c 1a                	jl     c0023995 <__mulsf3+0x188>
c002397b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023981:	b9 01 00 00 00       	mov    ecx,0x1
c0023986:	29 d9                	sub    ecx,ebx
c0023988:	d3 ea                	shr    edx,cl
c002398a:	31 db                	xor    ebx,ebx
c002398c:	eb 0b                	jmp    c0023999 <__mulsf3+0x18c>
c002398e:	bb ff 00 00 00       	mov    ebx,0xff
c0023993:	eb 02                	jmp    c0023997 <__mulsf3+0x18a>
c0023995:	31 db                	xor    ebx,ebx
c0023997:	31 d2                	xor    edx,edx
c0023999:	89 d0                	mov    eax,edx
c002399b:	c1 e8 08             	shr    eax,0x8
c002399e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00239a1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00239a7:	09 fb                	or     ebx,edi
c00239a9:	c1 e3 17             	shl    ebx,0x17
c00239ac:	09 c3                	or     ebx,eax
c00239ae:	f6 c2 7f             	test   dl,0x7f
c00239b1:	0f 95 c1             	setne  cl
c00239b4:	09 c8                	or     eax,ecx
c00239b6:	83 e0 01             	and    eax,0x1
c00239b9:	c1 ea 07             	shr    edx,0x7
c00239bc:	21 c2                	and    edx,eax
c00239be:	8d 34 13             	lea    esi,[ebx+edx*1]
c00239c1:	eb 03                	jmp    c00239c6 <__mulsf3+0x1b9>
c00239c3:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00239c6:	89 f0                	mov    eax,esi
c00239c8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00239cb:	5b                   	pop    ebx
c00239cc:	5e                   	pop    esi
c00239cd:	5f                   	pop    edi
c00239ce:	5d                   	pop    ebp
c00239cf:	c3                   	ret    

c00239d0 <__divsf3>:
c00239d0:	55                   	push   ebp
c00239d1:	89 e5                	mov    ebp,esp
c00239d3:	57                   	push   edi
c00239d4:	56                   	push   esi
c00239d5:	53                   	push   ebx
c00239d6:	83 ec 1c             	sub    esp,0x1c
c00239d9:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00239dc:	89 d8                	mov    eax,ebx
c00239de:	89 d9                	mov    ecx,ebx
c00239e0:	c1 f9 17             	sar    ecx,0x17
c00239e3:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00239e6:	c1 e0 08             	shl    eax,0x8
c00239e9:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00239ee:	89 c1                	mov    ecx,eax
c00239f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00239f3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00239f6:	89 c7                	mov    edi,eax
c00239f8:	c1 ff 17             	sar    edi,0x17
c00239fb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00239ff:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023a02:	89 f8                	mov    eax,edi
c0023a04:	0f b6 c0             	movzx  eax,al
c0023a07:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023a0a:	29 c6                	sub    esi,eax
c0023a0c:	83 c6 7f             	add    esi,0x7f
c0023a0f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023a12:	42                   	inc    edx
c0023a13:	80 e2 fe             	and    dl,0xfe
c0023a16:	0f 85 9c 00 00 00    	jne    c0023ab8 <__divsf3+0xe8>
c0023a1c:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023a20:	74 33                	je     c0023a55 <__divsf3+0x85>
c0023a22:	85 c9                	test   ecx,ecx
c0023a24:	0f 85 c7 01 00 00    	jne    c0023bf1 <__divsf3+0x221>
c0023a2a:	8d 57 01             	lea    edx,[edi+0x1]
c0023a2d:	80 e2 fe             	and    dl,0xfe
c0023a30:	75 2f                	jne    c0023a61 <__divsf3+0x91>
c0023a32:	85 c0                	test   eax,eax
c0023a34:	74 2b                	je     c0023a61 <__divsf3+0x91>
c0023a36:	51                   	push   ecx
c0023a37:	51                   	push   ecx
c0023a38:	6a 00                	push   0x0
c0023a3a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023a3d:	e8 d2 03 00 00       	call   c0023e14 <__nesf2>
c0023a42:	83 c4 10             	add    esp,0x10
c0023a45:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023a48:	85 c0                	test   eax,eax
c0023a4a:	0f 85 a1 01 00 00    	jne    c0023bf1 <__divsf3+0x221>
c0023a50:	e9 92 01 00 00       	jmp    c0023be7 <__divsf3+0x217>
c0023a55:	85 c9                	test   ecx,ecx
c0023a57:	75 1b                	jne    c0023a74 <__divsf3+0xa4>
c0023a59:	8d 57 01             	lea    edx,[edi+0x1]
c0023a5c:	80 e2 fe             	and    dl,0xfe
c0023a5f:	74 1e                	je     c0023a7f <__divsf3+0xaf>
c0023a61:	85 ff                	test   edi,edi
c0023a63:	0f 89 88 01 00 00    	jns    c0023bf1 <__divsf3+0x221>
c0023a69:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023a6f:	e9 7d 01 00 00       	jmp    c0023bf1 <__divsf3+0x221>
c0023a74:	8d 56 ff             	lea    edx,[esi-0x1]
c0023a77:	01 c9                	add    ecx,ecx
c0023a79:	78 3d                	js     c0023ab8 <__divsf3+0xe8>
c0023a7b:	89 d6                	mov    esi,edx
c0023a7d:	eb f5                	jmp    c0023a74 <__divsf3+0xa4>
c0023a7f:	85 c0                	test   eax,eax
c0023a81:	b8 00 00 00 00       	mov    eax,0x0
c0023a86:	74 18                	je     c0023aa0 <__divsf3+0xd0>
c0023a88:	52                   	push   edx
c0023a89:	52                   	push   edx
c0023a8a:	50                   	push   eax
c0023a8b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023a8e:	e8 81 03 00 00       	call   c0023e14 <__nesf2>
c0023a93:	83 c4 10             	add    esp,0x10
c0023a96:	85 c0                	test   eax,eax
c0023a98:	0f 85 50 01 00 00    	jne    c0023bee <__divsf3+0x21e>
c0023a9e:	eb c1                	jmp    c0023a61 <__divsf3+0x91>
c0023aa0:	56                   	push   esi
c0023aa1:	56                   	push   esi
c0023aa2:	50                   	push   eax
c0023aa3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023aa6:	e8 69 03 00 00       	call   c0023e14 <__nesf2>
c0023aab:	83 c4 10             	add    esp,0x10
c0023aae:	85 c0                	test   eax,eax
c0023ab0:	0f 84 31 01 00 00    	je     c0023be7 <__divsf3+0x217>
c0023ab6:	eb a9                	jmp    c0023a61 <__divsf3+0x91>
c0023ab8:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023abb:	c1 e3 08             	shl    ebx,0x8
c0023abe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023ac4:	8d 57 01             	lea    edx,[edi+0x1]
c0023ac7:	80 e2 fe             	and    dl,0xfe
c0023aca:	75 71                	jne    c0023b3d <__divsf3+0x16d>
c0023acc:	85 c0                	test   eax,eax
c0023ace:	ba 00 00 00 00       	mov    edx,0x0
c0023ad3:	74 2f                	je     c0023b04 <__divsf3+0x134>
c0023ad5:	51                   	push   ecx
c0023ad6:	51                   	push   ecx
c0023ad7:	52                   	push   edx
c0023ad8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023adb:	e8 f9 02 00 00       	call   c0023dd9 <__eqsf2>
c0023ae0:	83 c4 10             	add    esp,0x10
c0023ae3:	85 c0                	test   eax,eax
c0023ae5:	0f 85 03 01 00 00    	jne    c0023bee <__divsf3+0x21e>
c0023aeb:	31 d2                	xor    edx,edx
c0023aed:	89 d3                	mov    ebx,edx
c0023aef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023af2:	31 f8                	xor    eax,edi
c0023af4:	0f 89 f7 00 00 00    	jns    c0023bf1 <__divsf3+0x221>
c0023afa:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023aff:	e9 ed 00 00 00       	jmp    c0023bf1 <__divsf3+0x221>
c0023b04:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023b07:	50                   	push   eax
c0023b08:	50                   	push   eax
c0023b09:	52                   	push   edx
c0023b0a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b0d:	e8 c7 02 00 00       	call   c0023dd9 <__eqsf2>
c0023b12:	83 c4 10             	add    esp,0x10
c0023b15:	85 c0                	test   eax,eax
c0023b17:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023b1a:	75 16                	jne    c0023b32 <__divsf3+0x162>
c0023b1c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023b1f:	31 fb                	xor    ebx,edi
c0023b21:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023b27:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023b2d:	e9 bf 00 00 00       	jmp    c0023bf1 <__divsf3+0x221>
c0023b32:	8d 46 01             	lea    eax,[esi+0x1]
c0023b35:	01 db                	add    ebx,ebx
c0023b37:	78 04                	js     c0023b3d <__divsf3+0x16d>
c0023b39:	89 c6                	mov    esi,eax
c0023b3b:	eb f5                	jmp    c0023b32 <__divsf3+0x162>
c0023b3d:	89 c8                	mov    eax,ecx
c0023b3f:	0d 00 00 00 80       	or     eax,0x80000000
c0023b44:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023b4a:	31 d2                	xor    edx,edx
c0023b4c:	39 d8                	cmp    eax,ebx
c0023b4e:	72 07                	jb     c0023b57 <__divsf3+0x187>
c0023b50:	29 d8                	sub    eax,ebx
c0023b52:	ba 01 00 00 00       	mov    edx,0x1
c0023b57:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023b5e:	01 d2                	add    edx,edx
c0023b60:	89 c1                	mov    ecx,eax
c0023b62:	01 c0                	add    eax,eax
c0023b64:	85 c9                	test   ecx,ecx
c0023b66:	78 04                	js     c0023b6c <__divsf3+0x19c>
c0023b68:	39 c3                	cmp    ebx,eax
c0023b6a:	77 05                	ja     c0023b71 <__divsf3+0x1a1>
c0023b6c:	29 d8                	sub    eax,ebx
c0023b6e:	83 ca 01             	or     edx,0x1
c0023b71:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023b74:	75 e8                	jne    c0023b5e <__divsf3+0x18e>
c0023b76:	85 c0                	test   eax,eax
c0023b78:	0f 95 c0             	setne  al
c0023b7b:	0f b6 c0             	movzx  eax,al
c0023b7e:	c1 e2 06             	shl    edx,0x6
c0023b81:	09 c2                	or     edx,eax
c0023b83:	78 03                	js     c0023b88 <__divsf3+0x1b8>
c0023b85:	01 d2                	add    edx,edx
c0023b87:	4e                   	dec    esi
c0023b88:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023b8e:	7f 22                	jg     c0023bb2 <__divsf3+0x1e2>
c0023b90:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023b96:	85 f6                	test   esi,esi
c0023b98:	7f 23                	jg     c0023bbd <__divsf3+0x1ed>
c0023b9a:	83 fe e9             	cmp    esi,0xffffffe9
c0023b9d:	7c 1a                	jl     c0023bb9 <__divsf3+0x1e9>
c0023b9f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0023baa:	29 f1                	sub    ecx,esi
c0023bac:	d3 ea                	shr    edx,cl
c0023bae:	31 f6                	xor    esi,esi
c0023bb0:	eb 0b                	jmp    c0023bbd <__divsf3+0x1ed>
c0023bb2:	be ff 00 00 00       	mov    esi,0xff
c0023bb7:	eb 02                	jmp    c0023bbb <__divsf3+0x1eb>
c0023bb9:	31 f6                	xor    esi,esi
c0023bbb:	31 d2                	xor    edx,edx
c0023bbd:	89 d0                	mov    eax,edx
c0023bbf:	c1 e8 08             	shr    eax,0x8
c0023bc2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023bc5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023bcb:	09 fe                	or     esi,edi
c0023bcd:	c1 e6 17             	shl    esi,0x17
c0023bd0:	09 c6                	or     esi,eax
c0023bd2:	f6 c2 7f             	test   dl,0x7f
c0023bd5:	0f 95 c1             	setne  cl
c0023bd8:	09 c8                	or     eax,ecx
c0023bda:	83 e0 01             	and    eax,0x1
c0023bdd:	c1 ea 07             	shr    edx,0x7
c0023be0:	21 c2                	and    edx,eax
c0023be2:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023be5:	eb 0a                	jmp    c0023bf1 <__divsf3+0x221>
c0023be7:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023bec:	eb 03                	jmp    c0023bf1 <__divsf3+0x221>
c0023bee:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023bf1:	89 d8                	mov    eax,ebx
c0023bf3:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023bf6:	5b                   	pop    ebx
c0023bf7:	5e                   	pop    esi
c0023bf8:	5f                   	pop    edi
c0023bf9:	5d                   	pop    ebp
c0023bfa:	c3                   	ret    

c0023bfb <__floatsisf>:
c0023bfb:	55                   	push   ebp
c0023bfc:	89 e5                	mov    ebp,esp
c0023bfe:	53                   	push   ebx
c0023bff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023c02:	85 d2                	test   edx,edx
c0023c04:	7e 2b                	jle    c0023c31 <__floatsisf+0x36>
c0023c06:	0f bd ca             	bsr    ecx,edx
c0023c09:	83 f1 1f             	xor    ecx,0x1f
c0023c0c:	d3 e2                	shl    edx,cl
c0023c0e:	89 d0                	mov    eax,edx
c0023c10:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023c15:	89 c3                	mov    ebx,eax
c0023c17:	c1 eb 08             	shr    ebx,0x8
c0023c1a:	80 e2 7f             	and    dl,0x7f
c0023c1d:	0f 95 c2             	setne  dl
c0023c20:	09 da                	or     edx,ebx
c0023c22:	83 e2 01             	and    edx,0x1
c0023c25:	c1 e8 07             	shr    eax,0x7
c0023c28:	21 c2                	and    edx,eax
c0023c2a:	b8 9e 00 00 00       	mov    eax,0x9e
c0023c2f:	eb 32                	jmp    c0023c63 <__floatsisf+0x68>
c0023c31:	b8 00 00 00 00       	mov    eax,0x0
c0023c36:	74 34                	je     c0023c6c <__floatsisf+0x71>
c0023c38:	f7 da                	neg    edx
c0023c3a:	0f bd ca             	bsr    ecx,edx
c0023c3d:	83 f1 1f             	xor    ecx,0x1f
c0023c40:	d3 e2                	shl    edx,cl
c0023c42:	89 d0                	mov    eax,edx
c0023c44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023c49:	89 c3                	mov    ebx,eax
c0023c4b:	c1 eb 08             	shr    ebx,0x8
c0023c4e:	80 e2 7f             	and    dl,0x7f
c0023c51:	0f 95 c2             	setne  dl
c0023c54:	09 da                	or     edx,ebx
c0023c56:	83 e2 01             	and    edx,0x1
c0023c59:	c1 e8 07             	shr    eax,0x7
c0023c5c:	21 c2                	and    edx,eax
c0023c5e:	b8 9e 01 00 00       	mov    eax,0x19e
c0023c63:	29 c8                	sub    eax,ecx
c0023c65:	c1 e0 17             	shl    eax,0x17
c0023c68:	09 d8                	or     eax,ebx
c0023c6a:	01 d0                	add    eax,edx
c0023c6c:	5b                   	pop    ebx
c0023c6d:	5d                   	pop    ebp
c0023c6e:	c3                   	ret    

c0023c6f <__floatunsisf>:
c0023c6f:	55                   	push   ebp
c0023c70:	89 e5                	mov    ebp,esp
c0023c72:	53                   	push   ebx
c0023c73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023c76:	31 c0                	xor    eax,eax
c0023c78:	85 d2                	test   edx,edx
c0023c7a:	74 32                	je     c0023cae <__floatunsisf+0x3f>
c0023c7c:	0f bd ca             	bsr    ecx,edx
c0023c7f:	83 f1 1f             	xor    ecx,0x1f
c0023c82:	d3 e2                	shl    edx,cl
c0023c84:	89 d0                	mov    eax,edx
c0023c86:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023c8b:	89 c3                	mov    ebx,eax
c0023c8d:	c1 eb 08             	shr    ebx,0x8
c0023c90:	80 e2 7f             	and    dl,0x7f
c0023c93:	0f 95 c2             	setne  dl
c0023c96:	09 da                	or     edx,ebx
c0023c98:	83 e2 01             	and    edx,0x1
c0023c9b:	c1 e8 07             	shr    eax,0x7
c0023c9e:	21 c2                	and    edx,eax
c0023ca0:	b8 9e 00 00 00       	mov    eax,0x9e
c0023ca5:	29 c8                	sub    eax,ecx
c0023ca7:	c1 e0 17             	shl    eax,0x17
c0023caa:	09 d8                	or     eax,ebx
c0023cac:	01 d0                	add    eax,edx
c0023cae:	5b                   	pop    ebx
c0023caf:	5d                   	pop    ebp
c0023cb0:	c3                   	ret    

c0023cb1 <__fixsfsi>:
c0023cb1:	55                   	push   ebp
c0023cb2:	89 e5                	mov    ebp,esp
c0023cb4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023cb7:	89 d1                	mov    ecx,edx
c0023cb9:	c1 e1 08             	shl    ecx,0x8
c0023cbc:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023cc2:	c1 fa 17             	sar    edx,0x17
c0023cc5:	78 1c                	js     c0023ce3 <__fixsfsi+0x32>
c0023cc7:	83 ea 7f             	sub    edx,0x7f
c0023cca:	31 c0                	xor    eax,eax
c0023ccc:	83 fa 1e             	cmp    edx,0x1e
c0023ccf:	77 40                	ja     c0023d11 <__fixsfsi+0x60>
c0023cd1:	89 c8                	mov    eax,ecx
c0023cd3:	0d 00 00 00 80       	or     eax,0x80000000
c0023cd8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023cdd:	29 d1                	sub    ecx,edx
c0023cdf:	d3 e8                	shr    eax,cl
c0023ce1:	eb 2e                	jmp    c0023d11 <__fixsfsi+0x60>
c0023ce3:	31 c0                	xor    eax,eax
c0023ce5:	81 c2 81 00 00 00    	add    edx,0x81
c0023ceb:	78 24                	js     c0023d11 <__fixsfsi+0x60>
c0023ced:	83 fa 1e             	cmp    edx,0x1e
c0023cf0:	7e 09                	jle    c0023cfb <__fixsfsi+0x4a>
c0023cf2:	83 fa 1f             	cmp    edx,0x1f
c0023cf5:	75 18                	jne    c0023d0f <__fixsfsi+0x5e>
c0023cf7:	85 c9                	test   ecx,ecx
c0023cf9:	75 14                	jne    c0023d0f <__fixsfsi+0x5e>
c0023cfb:	89 c8                	mov    eax,ecx
c0023cfd:	0d 00 00 00 80       	or     eax,0x80000000
c0023d02:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d07:	29 d1                	sub    ecx,edx
c0023d09:	d3 e8                	shr    eax,cl
c0023d0b:	f7 d8                	neg    eax
c0023d0d:	eb 02                	jmp    c0023d11 <__fixsfsi+0x60>
c0023d0f:	31 c0                	xor    eax,eax
c0023d11:	5d                   	pop    ebp
c0023d12:	c3                   	ret    

c0023d13 <__fixunssfsi>:
c0023d13:	55                   	push   ebp
c0023d14:	89 e5                	mov    ebp,esp
c0023d16:	53                   	push   ebx
c0023d17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d1a:	89 d3                	mov    ebx,edx
c0023d1c:	c1 fb 17             	sar    ebx,0x17
c0023d1f:	83 eb 7f             	sub    ebx,0x7f
c0023d22:	31 c0                	xor    eax,eax
c0023d24:	83 fb 1f             	cmp    ebx,0x1f
c0023d27:	77 18                	ja     c0023d41 <__fixunssfsi+0x2e>
c0023d29:	89 d0                	mov    eax,edx
c0023d2b:	c1 e0 08             	shl    eax,0x8
c0023d2e:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023d33:	0d 00 00 00 80       	or     eax,0x80000000
c0023d38:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d3d:	29 d9                	sub    ecx,ebx
c0023d3f:	d3 e8                	shr    eax,cl
c0023d41:	5b                   	pop    ebx
c0023d42:	5d                   	pop    ebp
c0023d43:	c3                   	ret    

c0023d44 <__cmpsf2>:
c0023d44:	55                   	push   ebp
c0023d45:	89 e5                	mov    ebp,esp
c0023d47:	57                   	push   edi
c0023d48:	56                   	push   esi
c0023d49:	53                   	push   ebx
c0023d4a:	83 ec 24             	sub    esp,0x24
c0023d4d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023d50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023d53:	e8 4f 10 00 00       	call   c0024da7 <__truncdfsf2>
c0023d58:	5a                   	pop    edx
c0023d59:	59                   	pop    ecx
c0023d5a:	89 c3                	mov    ebx,eax
c0023d5c:	c1 e8 17             	shr    eax,0x17
c0023d5f:	0f b6 f0             	movzx  esi,al
c0023d62:	89 d8                	mov    eax,ebx
c0023d64:	c1 e8 1f             	shr    eax,0x1f
c0023d67:	31 c6                	xor    esi,eax
c0023d69:	c1 e3 08             	shl    ebx,0x8
c0023d6c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023d6f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023d72:	e8 30 10 00 00       	call   c0024da7 <__truncdfsf2>
c0023d77:	83 c4 10             	add    esp,0x10
c0023d7a:	89 c1                	mov    ecx,eax
c0023d7c:	c1 e9 17             	shr    ecx,0x17
c0023d7f:	0f b6 c9             	movzx  ecx,cl
c0023d82:	89 c7                	mov    edi,eax
c0023d84:	c1 ef 1f             	shr    edi,0x1f
c0023d87:	89 ca                	mov    edx,ecx
c0023d89:	31 fa                	xor    edx,edi
c0023d8b:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0023d8e:	c1 e0 08             	shl    eax,0x8
c0023d91:	89 c2                	mov    edx,eax
c0023d93:	89 d8                	mov    eax,ebx
c0023d95:	09 d0                	or     eax,edx
c0023d97:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023d9c:	09 f0                	or     eax,esi
c0023d9e:	75 08                	jne    c0023da8 <__cmpsf2+0x64>
c0023da0:	31 c0                	xor    eax,eax
c0023da2:	39 f9                	cmp    ecx,edi
c0023da4:	75 0c                	jne    c0023db2 <__cmpsf2+0x6e>
c0023da6:	eb 29                	jmp    c0023dd1 <__cmpsf2+0x8d>
c0023da8:	b8 01 00 00 00       	mov    eax,0x1
c0023dad:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023db0:	7f 1f                	jg     c0023dd1 <__cmpsf2+0x8d>
c0023db2:	83 c8 ff             	or     eax,0xffffffff
c0023db5:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023db8:	7c 17                	jl     c0023dd1 <__cmpsf2+0x8d>
c0023dba:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023dc0:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023dc6:	b8 01 00 00 00       	mov    eax,0x1
c0023dcb:	39 d3                	cmp    ebx,edx
c0023dcd:	77 02                	ja     c0023dd1 <__cmpsf2+0x8d>
c0023dcf:	19 c0                	sbb    eax,eax
c0023dd1:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023dd4:	5b                   	pop    ebx
c0023dd5:	5e                   	pop    esi
c0023dd6:	5f                   	pop    edi
c0023dd7:	5d                   	pop    ebp
c0023dd8:	c3                   	ret    

c0023dd9 <__eqsf2>:
c0023dd9:	55                   	push   ebp
c0023dda:	89 e5                	mov    ebp,esp
c0023ddc:	83 ec 24             	sub    esp,0x24
c0023ddf:	6a 01                	push   0x1
c0023de1:	83 ec 0c             	sub    esp,0xc
c0023de4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023de7:	e8 df 10 00 00       	call   c0024ecb <__extendsfdf2>
c0023dec:	83 c4 10             	add    esp,0x10
c0023def:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023df2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023df5:	52                   	push   edx
c0023df6:	50                   	push   eax
c0023df7:	50                   	push   eax
c0023df8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023dfb:	e8 cb 10 00 00       	call   c0024ecb <__extendsfdf2>
c0023e00:	59                   	pop    ecx
c0023e01:	59                   	pop    ecx
c0023e02:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e05:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e08:	52                   	push   edx
c0023e09:	50                   	push   eax
c0023e0a:	e8 35 ff ff ff       	call   c0023d44 <__cmpsf2>
c0023e0f:	83 c4 20             	add    esp,0x20
c0023e12:	c9                   	leave  
c0023e13:	c3                   	ret    

c0023e14 <__nesf2>:
c0023e14:	eb c3                	jmp    c0023dd9 <__eqsf2>

c0023e16 <__gtsf2>:
c0023e16:	55                   	push   ebp
c0023e17:	89 e5                	mov    ebp,esp
c0023e19:	83 ec 24             	sub    esp,0x24
c0023e1c:	6a ff                	push   0xffffffff
c0023e1e:	83 ec 0c             	sub    esp,0xc
c0023e21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023e24:	e8 a2 10 00 00       	call   c0024ecb <__extendsfdf2>
c0023e29:	83 c4 10             	add    esp,0x10
c0023e2c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e2f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e32:	52                   	push   edx
c0023e33:	50                   	push   eax
c0023e34:	50                   	push   eax
c0023e35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e38:	e8 8e 10 00 00       	call   c0024ecb <__extendsfdf2>
c0023e3d:	59                   	pop    ecx
c0023e3e:	59                   	pop    ecx
c0023e3f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e42:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e45:	52                   	push   edx
c0023e46:	50                   	push   eax
c0023e47:	e8 f8 fe ff ff       	call   c0023d44 <__cmpsf2>
c0023e4c:	83 c4 20             	add    esp,0x20
c0023e4f:	c9                   	leave  
c0023e50:	c3                   	ret    

c0023e51 <__gesf2>:
c0023e51:	eb c3                	jmp    c0023e16 <__gtsf2>

c0023e53 <__ltsf2>:
c0023e53:	eb 84                	jmp    c0023dd9 <__eqsf2>

c0023e55 <__lesf2>:
c0023e55:	eb 82                	jmp    c0023dd9 <__eqsf2>

c0023e57 <__adddf3>:
c0023e57:	55                   	push   ebp
c0023e58:	89 e5                	mov    ebp,esp
c0023e5a:	57                   	push   edi
c0023e5b:	56                   	push   esi
c0023e5c:	53                   	push   ebx
c0023e5d:	83 ec 24             	sub    esp,0x24
c0023e60:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023e63:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023e66:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023e69:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023e6c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023e6f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023e72:	89 c8                	mov    eax,ecx
c0023e74:	89 ce                	mov    esi,ecx
c0023e76:	c1 fe 14             	sar    esi,0x14
c0023e79:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0023e7c:	89 fb                	mov    ebx,edi
c0023e7e:	89 fa                	mov    edx,edi
c0023e80:	c1 e2 0b             	shl    edx,0xb
c0023e83:	c1 e0 0b             	shl    eax,0xb
c0023e86:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0023e8b:	c1 eb 15             	shr    ebx,0x15
c0023e8e:	09 d8                	or     eax,ebx
c0023e90:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0023e93:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0023e96:	c1 fe 14             	sar    esi,0x14
c0023e99:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0023e9c:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023e9f:	89 f3                	mov    ebx,esi
c0023ea1:	c1 e3 0b             	shl    ebx,0xb
c0023ea4:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0023ea7:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0023eaa:	c1 e3 0b             	shl    ebx,0xb
c0023ead:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0023eb3:	c1 ee 15             	shr    esi,0x15
c0023eb6:	09 f3                	or     ebx,esi
c0023eb8:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0023ebb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023ebe:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0023ec1:	0f 88 5f 02 00 00    	js     c0024126 <__adddf3+0x2cf>
c0023ec7:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023eca:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0023ecd:	85 db                	test   ebx,ebx
c0023ecf:	0f 8e c7 00 00 00    	jle    c0023f9c <__adddf3+0x145>
c0023ed5:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0023edc:	75 1a                	jne    c0023ef8 <__adddf3+0xa1>
c0023ede:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023ee1:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0023ee4:	0f 84 b2 05 00 00    	je     c002449c <__adddf3+0x645>
c0023eea:	4b                   	dec    ebx
c0023eeb:	75 23                	jne    c0023f10 <__adddf3+0xb9>
c0023eed:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0023ef0:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0023ef3:	e9 99 00 00 00       	jmp    c0023f91 <__adddf3+0x13a>
c0023ef8:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023efb:	f7 d6                	not    esi
c0023efd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0023f03:	0f 84 93 05 00 00    	je     c002449c <__adddf3+0x645>
c0023f09:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0023f10:	83 fb 1f             	cmp    ebx,0x1f
c0023f13:	7e 42                	jle    c0023f57 <__adddf3+0x100>
c0023f15:	83 fb 3f             	cmp    ebx,0x3f
c0023f18:	0f 8f 7e 05 00 00    	jg     c002449c <__adddf3+0x645>
c0023f1e:	83 e3 1f             	and    ebx,0x1f
c0023f21:	89 d9                	mov    ecx,ebx
c0023f23:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0023f26:	d3 ef                	shr    edi,cl
c0023f28:	31 db                	xor    ebx,ebx
c0023f2a:	85 c9                	test   ecx,ecx
c0023f2c:	74 15                	je     c0023f43 <__adddf3+0xec>
c0023f2e:	be 20 00 00 00       	mov    esi,0x20
c0023f33:	29 ce                	sub    esi,ecx
c0023f35:	89 f1                	mov    ecx,esi
c0023f37:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023f3a:	d3 e6                	shl    esi,cl
c0023f3c:	31 db                	xor    ebx,ebx
c0023f3e:	85 f6                	test   esi,esi
c0023f40:	0f 95 c3             	setne  bl
c0023f43:	31 c9                	xor    ecx,ecx
c0023f45:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023f49:	0f 95 c1             	setne  cl
c0023f4c:	09 cf                	or     edi,ecx
c0023f4e:	09 fb                	or     ebx,edi
c0023f50:	01 da                	add    edx,ebx
c0023f52:	83 d0 00             	adc    eax,0x0
c0023f55:	eb 3a                	jmp    c0023f91 <__adddf3+0x13a>
c0023f57:	bf 20 00 00 00       	mov    edi,0x20
c0023f5c:	29 df                	sub    edi,ebx
c0023f5e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0023f61:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023f64:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0023f67:	d3 e6                	shl    esi,cl
c0023f69:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0023f6c:	88 d9                	mov    cl,bl
c0023f6e:	d3 ef                	shr    edi,cl
c0023f70:	09 fe                	or     esi,edi
c0023f72:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0023f75:	88 d9                	mov    cl,bl
c0023f77:	d3 ef                	shr    edi,cl
c0023f79:	89 fb                	mov    ebx,edi
c0023f7b:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0023f7e:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0023f81:	d3 e7                	shl    edi,cl
c0023f83:	85 ff                	test   edi,edi
c0023f85:	0f 95 c1             	setne  cl
c0023f88:	0f b6 c9             	movzx  ecx,cl
c0023f8b:	09 ce                	or     esi,ecx
c0023f8d:	01 f2                	add    edx,esi
c0023f8f:	11 d8                	adc    eax,ebx
c0023f91:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0023f94:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0023f97:	e9 52 01 00 00       	jmp    c00240ee <__adddf3+0x297>
c0023f9c:	0f 84 d5 00 00 00    	je     c0024077 <__adddf3+0x220>
c0023fa2:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0023fa5:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0023fa8:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0023fab:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0023fae:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0023fb5:	75 20                	jne    c0023fd7 <__adddf3+0x180>
c0023fb7:	89 d6                	mov    esi,edx
c0023fb9:	09 c6                	or     esi,eax
c0023fbb:	0f 84 db 04 00 00    	je     c002449c <__adddf3+0x645>
c0023fc1:	4b                   	dec    ebx
c0023fc2:	75 29                	jne    c0023fed <__adddf3+0x196>
c0023fc4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023fc7:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023fca:	01 d1                	add    ecx,edx
c0023fcc:	11 c6                	adc    esi,eax
c0023fce:	89 f0                	mov    eax,esi
c0023fd0:	89 ca                	mov    edx,ecx
c0023fd2:	e9 17 01 00 00       	jmp    c00240ee <__adddf3+0x297>
c0023fd7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0023fda:	f7 d6                	not    esi
c0023fdc:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0023fe2:	0f 84 b4 04 00 00    	je     c002449c <__adddf3+0x645>
c0023fe8:	0d 00 00 00 80       	or     eax,0x80000000
c0023fed:	83 fb 1f             	cmp    ebx,0x1f
c0023ff0:	7e 48                	jle    c002403a <__adddf3+0x1e3>
c0023ff2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0023ff5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0023ff8:	83 fb 3f             	cmp    ebx,0x3f
c0023ffb:	0f 8f 9b 04 00 00    	jg     c002449c <__adddf3+0x645>
c0024001:	83 e3 1f             	and    ebx,0x1f
c0024004:	89 d9                	mov    ecx,ebx
c0024006:	89 c7                	mov    edi,eax
c0024008:	d3 ef                	shr    edi,cl
c002400a:	31 db                	xor    ebx,ebx
c002400c:	85 c9                	test   ecx,ecx
c002400e:	74 12                	je     c0024022 <__adddf3+0x1cb>
c0024010:	be 20 00 00 00       	mov    esi,0x20
c0024015:	29 ce                	sub    esi,ecx
c0024017:	89 f1                	mov    ecx,esi
c0024019:	d3 e0                	shl    eax,cl
c002401b:	31 db                	xor    ebx,ebx
c002401d:	85 c0                	test   eax,eax
c002401f:	0f 95 c3             	setne  bl
c0024022:	31 c0                	xor    eax,eax
c0024024:	85 d2                	test   edx,edx
c0024026:	0f 95 c0             	setne  al
c0024029:	09 c7                	or     edi,eax
c002402b:	09 fb                	or     ebx,edi
c002402d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024030:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024033:	01 da                	add    edx,ebx
c0024035:	83 d6 00             	adc    esi,0x0
c0024038:	eb 39                	jmp    c0024073 <__adddf3+0x21c>
c002403a:	be 20 00 00 00       	mov    esi,0x20
c002403f:	29 de                	sub    esi,ebx
c0024041:	89 c7                	mov    edi,eax
c0024043:	89 f1                	mov    ecx,esi
c0024045:	d3 e7                	shl    edi,cl
c0024047:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002404a:	89 d7                	mov    edi,edx
c002404c:	88 d9                	mov    cl,bl
c002404e:	d3 ef                	shr    edi,cl
c0024050:	89 f9                	mov    ecx,edi
c0024052:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024055:	09 cf                	or     edi,ecx
c0024057:	88 d9                	mov    cl,bl
c0024059:	d3 e8                	shr    eax,cl
c002405b:	89 f1                	mov    ecx,esi
c002405d:	d3 e2                	shl    edx,cl
c002405f:	85 d2                	test   edx,edx
c0024061:	0f 95 c2             	setne  dl
c0024064:	0f b6 d2             	movzx  edx,dl
c0024067:	09 d7                	or     edi,edx
c0024069:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002406c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002406f:	01 fa                	add    edx,edi
c0024071:	11 c6                	adc    esi,eax
c0024073:	89 f0                	mov    eax,esi
c0024075:	eb 77                	jmp    c00240ee <__adddf3+0x297>
c0024077:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002407a:	46                   	inc    esi
c002407b:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002407e:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024084:	75 41                	jne    c00240c7 <__adddf3+0x270>
c0024086:	89 d3                	mov    ebx,edx
c0024088:	09 c3                	or     ebx,eax
c002408a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024091:	75 27                	jne    c00240ba <__adddf3+0x263>
c0024093:	85 db                	test   ebx,ebx
c0024095:	0f 84 fb 03 00 00    	je     c0024496 <__adddf3+0x63f>
c002409b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002409e:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00240a1:	0f 84 f5 03 00 00    	je     c002449c <__adddf3+0x645>
c00240a7:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00240aa:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00240ad:	85 c0                	test   eax,eax
c00240af:	0f 89 91 03 00 00    	jns    c0024446 <__adddf3+0x5ef>
c00240b5:	e9 85 03 00 00       	jmp    c002443f <__adddf3+0x5e8>
c00240ba:	85 db                	test   ebx,ebx
c00240bc:	0f 85 da 03 00 00    	jne    c002449c <__adddf3+0x645>
c00240c2:	e9 cf 03 00 00       	jmp    c0024496 <__adddf3+0x63f>
c00240c7:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00240ca:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00240cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00240d0:	f7 d1                	not    ecx
c00240d2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00240d8:	0f 84 70 03 00 00    	je     c002444e <__adddf3+0x5f7>
c00240de:	d1 ea                	shr    edx,1
c00240e0:	89 c1                	mov    ecx,eax
c00240e2:	c1 e1 1f             	shl    ecx,0x1f
c00240e5:	09 ca                	or     edx,ecx
c00240e7:	d1 e8                	shr    eax,1
c00240e9:	e9 6f 03 00 00       	jmp    c002445d <__adddf3+0x606>
c00240ee:	85 c0                	test   eax,eax
c00240f0:	0f 89 67 03 00 00    	jns    c002445d <__adddf3+0x606>
c00240f6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00240f9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00240fc:	f7 d1                	not    ecx
c00240fe:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024104:	0f 84 44 03 00 00    	je     c002444e <__adddf3+0x5f7>
c002410a:	89 d1                	mov    ecx,edx
c002410c:	d1 e9                	shr    ecx,1
c002410e:	83 e2 01             	and    edx,0x1
c0024111:	09 ca                	or     edx,ecx
c0024113:	89 c1                	mov    ecx,eax
c0024115:	c1 e1 1f             	shl    ecx,0x1f
c0024118:	09 ca                	or     edx,ecx
c002411a:	d1 e8                	shr    eax,1
c002411c:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0024121:	e9 37 03 00 00       	jmp    c002445d <__adddf3+0x606>
c0024126:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024129:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002412f:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0024132:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024135:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002413b:	29 de                	sub    esi,ebx
c002413d:	85 f6                	test   esi,esi
c002413f:	0f 8e bd 00 00 00    	jle    c0024202 <__adddf3+0x3ab>
c0024145:	85 db                	test   ebx,ebx
c0024147:	75 17                	jne    c0024160 <__adddf3+0x309>
c0024149:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002414c:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002414f:	0f 84 47 03 00 00    	je     c002449c <__adddf3+0x645>
c0024155:	4e                   	dec    esi
c0024156:	75 20                	jne    c0024178 <__adddf3+0x321>
c0024158:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002415b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002415e:	eb 5b                	jmp    c00241bb <__adddf3+0x364>
c0024160:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024163:	f7 d3                	not    ebx
c0024165:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002416b:	0f 84 2b 03 00 00    	je     c002449c <__adddf3+0x645>
c0024171:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024178:	83 fe 1f             	cmp    esi,0x1f
c002417b:	7e 49                	jle    c00241c6 <__adddf3+0x36f>
c002417d:	83 fe 3f             	cmp    esi,0x3f
c0024180:	0f 8f 16 03 00 00    	jg     c002449c <__adddf3+0x645>
c0024186:	83 e6 1f             	and    esi,0x1f
c0024189:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002418c:	89 f1                	mov    ecx,esi
c002418e:	d3 ef                	shr    edi,cl
c0024190:	31 db                	xor    ebx,ebx
c0024192:	85 f6                	test   esi,esi
c0024194:	74 13                	je     c00241a9 <__adddf3+0x352>
c0024196:	b9 20 00 00 00       	mov    ecx,0x20
c002419b:	29 f1                	sub    ecx,esi
c002419d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00241a0:	d3 e6                	shl    esi,cl
c00241a2:	31 db                	xor    ebx,ebx
c00241a4:	85 f6                	test   esi,esi
c00241a6:	0f 95 c3             	setne  bl
c00241a9:	31 c9                	xor    ecx,ecx
c00241ab:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00241af:	0f 95 c1             	setne  cl
c00241b2:	09 cf                	or     edi,ecx
c00241b4:	09 fb                	or     ebx,edi
c00241b6:	29 da                	sub    edx,ebx
c00241b8:	83 d8 00             	sbb    eax,0x0
c00241bb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00241be:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00241c1:	e9 aa 01 00 00       	jmp    c0024370 <__adddf3+0x519>
c00241c6:	bf 20 00 00 00       	mov    edi,0x20
c00241cb:	29 f7                	sub    edi,esi
c00241cd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00241d0:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00241d3:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00241d6:	d3 e3                	shl    ebx,cl
c00241d8:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00241db:	89 f1                	mov    ecx,esi
c00241dd:	d3 ef                	shr    edi,cl
c00241df:	09 fb                	or     ebx,edi
c00241e1:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00241e4:	89 f1                	mov    ecx,esi
c00241e6:	d3 ef                	shr    edi,cl
c00241e8:	89 fe                	mov    esi,edi
c00241ea:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00241ed:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00241f0:	d3 e7                	shl    edi,cl
c00241f2:	85 ff                	test   edi,edi
c00241f4:	0f 95 c1             	setne  cl
c00241f7:	0f b6 c9             	movzx  ecx,cl
c00241fa:	09 cb                	or     ebx,ecx
c00241fc:	29 da                	sub    edx,ebx
c00241fe:	19 f0                	sbb    eax,esi
c0024200:	eb b9                	jmp    c00241bb <__adddf3+0x364>
c0024202:	0f 84 cd 00 00 00    	je     c00242d5 <__adddf3+0x47e>
c0024208:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002420b:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002420e:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024211:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024215:	75 1b                	jne    c0024232 <__adddf3+0x3db>
c0024217:	89 d6                	mov    esi,edx
c0024219:	09 c6                	or     esi,eax
c002421b:	0f 84 7b 02 00 00    	je     c002449c <__adddf3+0x645>
c0024221:	4b                   	dec    ebx
c0024222:	75 24                	jne    c0024248 <__adddf3+0x3f1>
c0024224:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024227:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002422a:	29 d1                	sub    ecx,edx
c002422c:	19 c6                	sbb    esi,eax
c002422e:	89 ca                	mov    edx,ecx
c0024230:	eb 61                	jmp    c0024293 <__adddf3+0x43c>
c0024232:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024235:	f7 d6                	not    esi
c0024237:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002423d:	0f 84 59 02 00 00    	je     c002449c <__adddf3+0x645>
c0024243:	0d 00 00 00 80       	or     eax,0x80000000
c0024248:	83 fb 1f             	cmp    ebx,0x1f
c002424b:	7e 4d                	jle    c002429a <__adddf3+0x443>
c002424d:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024250:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024253:	83 fb 3f             	cmp    ebx,0x3f
c0024256:	0f 8f 40 02 00 00    	jg     c002449c <__adddf3+0x645>
c002425c:	83 e3 1f             	and    ebx,0x1f
c002425f:	89 d9                	mov    ecx,ebx
c0024261:	89 c7                	mov    edi,eax
c0024263:	d3 ef                	shr    edi,cl
c0024265:	31 db                	xor    ebx,ebx
c0024267:	85 c9                	test   ecx,ecx
c0024269:	74 12                	je     c002427d <__adddf3+0x426>
c002426b:	be 20 00 00 00       	mov    esi,0x20
c0024270:	29 ce                	sub    esi,ecx
c0024272:	89 f1                	mov    ecx,esi
c0024274:	d3 e0                	shl    eax,cl
c0024276:	31 db                	xor    ebx,ebx
c0024278:	85 c0                	test   eax,eax
c002427a:	0f 95 c3             	setne  bl
c002427d:	31 c0                	xor    eax,eax
c002427f:	85 d2                	test   edx,edx
c0024281:	0f 95 c0             	setne  al
c0024284:	09 c7                	or     edi,eax
c0024286:	09 fb                	or     ebx,edi
c0024288:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002428b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002428e:	29 da                	sub    edx,ebx
c0024290:	83 de 00             	sbb    esi,0x0
c0024293:	89 f0                	mov    eax,esi
c0024295:	e9 d6 00 00 00       	jmp    c0024370 <__adddf3+0x519>
c002429a:	be 20 00 00 00       	mov    esi,0x20
c002429f:	29 de                	sub    esi,ebx
c00242a1:	89 c7                	mov    edi,eax
c00242a3:	89 f1                	mov    ecx,esi
c00242a5:	d3 e7                	shl    edi,cl
c00242a7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00242aa:	89 d7                	mov    edi,edx
c00242ac:	88 d9                	mov    cl,bl
c00242ae:	d3 ef                	shr    edi,cl
c00242b0:	89 f9                	mov    ecx,edi
c00242b2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00242b5:	09 cf                	or     edi,ecx
c00242b7:	88 d9                	mov    cl,bl
c00242b9:	d3 e8                	shr    eax,cl
c00242bb:	89 f1                	mov    ecx,esi
c00242bd:	d3 e2                	shl    edx,cl
c00242bf:	85 d2                	test   edx,edx
c00242c1:	0f 95 c2             	setne  dl
c00242c4:	0f b6 d2             	movzx  edx,dl
c00242c7:	09 d7                	or     edi,edx
c00242c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00242cc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00242cf:	29 fa                	sub    edx,edi
c00242d1:	19 c6                	sbb    esi,eax
c00242d3:	eb be                	jmp    c0024293 <__adddf3+0x43c>
c00242d5:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00242d8:	8d 5e 01             	lea    ebx,[esi+0x1]
c00242db:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00242e1:	75 6a                	jne    c002434d <__adddf3+0x4f6>
c00242e3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00242e7:	75 58                	jne    c0024341 <__adddf3+0x4ea>
c00242e9:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00242ec:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00242ef:	89 d6                	mov    esi,edx
c00242f1:	09 c6                	or     esi,eax
c00242f3:	75 17                	jne    c002430c <__adddf3+0x4b5>
c00242f5:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00242f8:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00242fb:	85 db                	test   ebx,ebx
c00242fd:	0f 85 99 01 00 00    	jne    c002449c <__adddf3+0x645>
c0024303:	31 ff                	xor    edi,edi
c0024305:	31 c9                	xor    ecx,ecx
c0024307:	e9 90 01 00 00       	jmp    c002449c <__adddf3+0x645>
c002430c:	85 db                	test   ebx,ebx
c002430e:	0f 84 88 01 00 00    	je     c002449c <__adddf3+0x645>
c0024314:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024317:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002431a:	85 c0                	test   eax,eax
c002431c:	79 10                	jns    c002432e <__adddf3+0x4d7>
c002431e:	31 c9                	xor    ecx,ecx
c0024320:	f7 da                	neg    edx
c0024322:	0f 95 c1             	setne  cl
c0024325:	01 c8                	add    eax,ecx
c0024327:	f7 d8                	neg    eax
c0024329:	e9 2f 01 00 00       	jmp    c002445d <__adddf3+0x606>
c002432e:	31 ff                	xor    edi,edi
c0024330:	31 c9                	xor    ecx,ecx
c0024332:	89 c3                	mov    ebx,eax
c0024334:	09 d3                	or     ebx,edx
c0024336:	0f 84 60 01 00 00    	je     c002449c <__adddf3+0x645>
c002433c:	e9 05 01 00 00       	jmp    c0024446 <__adddf3+0x5ef>
c0024341:	31 ff                	xor    edi,edi
c0024343:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024348:	e9 4f 01 00 00       	jmp    c002449c <__adddf3+0x645>
c002434d:	89 c1                	mov    ecx,eax
c002434f:	89 d0                	mov    eax,edx
c0024351:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0024354:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0024357:	89 ca                	mov    edx,ecx
c0024359:	85 c9                	test   ecx,ecx
c002435b:	79 2c                	jns    c0024389 <__adddf3+0x532>
c002435d:	31 c9                	xor    ecx,ecx
c002435f:	f7 d8                	neg    eax
c0024361:	0f 95 c1             	setne  cl
c0024364:	01 ca                	add    edx,ecx
c0024366:	f7 da                	neg    edx
c0024368:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002436b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002436e:	eb 19                	jmp    c0024389 <__adddf3+0x532>
c0024370:	85 c0                	test   eax,eax
c0024372:	0f 89 e5 00 00 00    	jns    c002445d <__adddf3+0x606>
c0024378:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002437d:	89 c1                	mov    ecx,eax
c002437f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024382:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024385:	89 d0                	mov    eax,edx
c0024387:	89 ca                	mov    edx,ecx
c0024389:	85 d2                	test   edx,edx
c002438b:	74 59                	je     c00243e6 <__adddf3+0x58f>
c002438d:	0f bd da             	bsr    ebx,edx
c0024390:	83 f3 1f             	xor    ebx,0x1f
c0024393:	88 d9                	mov    cl,bl
c0024395:	d3 e2                	shl    edx,cl
c0024397:	bf 20 00 00 00       	mov    edi,0x20
c002439c:	89 f9                	mov    ecx,edi
c002439e:	29 d9                	sub    ecx,ebx
c00243a0:	89 c6                	mov    esi,eax
c00243a2:	d3 ee                	shr    esi,cl
c00243a4:	09 d6                	or     esi,edx
c00243a6:	88 d9                	mov    cl,bl
c00243a8:	d3 e0                	shl    eax,cl
c00243aa:	89 c2                	mov    edx,eax
c00243ac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00243af:	25 ff 07 00 00       	and    eax,0x7ff
c00243b4:	39 d8                	cmp    eax,ebx
c00243b6:	7f 22                	jg     c00243da <__adddf3+0x583>
c00243b8:	29 c3                	sub    ebx,eax
c00243ba:	43                   	inc    ebx
c00243bb:	88 d9                	mov    cl,bl
c00243bd:	d3 ea                	shr    edx,cl
c00243bf:	29 df                	sub    edi,ebx
c00243c1:	89 f9                	mov    ecx,edi
c00243c3:	89 f0                	mov    eax,esi
c00243c5:	d3 e0                	shl    eax,cl
c00243c7:	09 c2                	or     edx,eax
c00243c9:	89 f0                	mov    eax,esi
c00243cb:	88 d9                	mov    cl,bl
c00243cd:	d3 e8                	shr    eax,cl
c00243cf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00243d2:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00243d8:	eb 6f                	jmp    c0024449 <__adddf3+0x5f2>
c00243da:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00243dd:	29 d8                	sub    eax,ebx
c00243df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00243e2:	89 f0                	mov    eax,esi
c00243e4:	eb 59                	jmp    c002443f <__adddf3+0x5e8>
c00243e6:	85 c0                	test   eax,eax
c00243e8:	74 6a                	je     c0024454 <__adddf3+0x5fd>
c00243ea:	0f bd c8             	bsr    ecx,eax
c00243ed:	83 f1 1f             	xor    ecx,0x1f
c00243f0:	d3 e0                	shl    eax,cl
c00243f2:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00243f5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00243fb:	83 c1 20             	add    ecx,0x20
c00243fe:	39 cb                	cmp    ebx,ecx
c0024400:	7f 35                	jg     c0024437 <__adddf3+0x5e0>
c0024402:	29 d9                	sub    ecx,ebx
c0024404:	8d 71 01             	lea    esi,[ecx+0x1]
c0024407:	83 fe 1f             	cmp    esi,0x1f
c002440a:	7e 09                	jle    c0024415 <__adddf3+0x5be>
c002440c:	83 e9 1f             	sub    ecx,0x1f
c002440f:	d3 e8                	shr    eax,cl
c0024411:	89 c3                	mov    ebx,eax
c0024413:	eb 11                	jmp    c0024426 <__adddf3+0x5cf>
c0024415:	b9 20 00 00 00       	mov    ecx,0x20
c002441a:	29 f1                	sub    ecx,esi
c002441c:	89 c3                	mov    ebx,eax
c002441e:	d3 e3                	shl    ebx,cl
c0024420:	89 f1                	mov    ecx,esi
c0024422:	d3 e8                	shr    eax,cl
c0024424:	89 c2                	mov    edx,eax
c0024426:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024429:	25 00 f8 ff ff       	and    eax,0xfffff800
c002442e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024431:	89 d0                	mov    eax,edx
c0024433:	89 da                	mov    edx,ebx
c0024435:	eb 26                	jmp    c002445d <__adddf3+0x606>
c0024437:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002443a:	29 cf                	sub    edi,ecx
c002443c:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002443f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024444:	eb 17                	jmp    c002445d <__adddf3+0x606>
c0024446:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024449:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002444c:	eb 0f                	jmp    c002445d <__adddf3+0x606>
c002444e:	31 d2                	xor    edx,edx
c0024450:	31 c0                	xor    eax,eax
c0024452:	eb 09                	jmp    c002445d <__adddf3+0x606>
c0024454:	89 c2                	mov    edx,eax
c0024456:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002445d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024460:	c1 e1 14             	shl    ecx,0x14
c0024463:	89 c3                	mov    ebx,eax
c0024465:	c1 eb 0b             	shr    ebx,0xb
c0024468:	09 d9                	or     ecx,ebx
c002446a:	89 d3                	mov    ebx,edx
c002446c:	c1 eb 0b             	shr    ebx,0xb
c002446f:	c1 e0 15             	shl    eax,0x15
c0024472:	09 d8                	or     eax,ebx
c0024474:	89 c7                	mov    edi,eax
c0024476:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c002447c:	0f 95 c0             	setne  al
c002447f:	89 c6                	mov    esi,eax
c0024481:	09 f3                	or     ebx,esi
c0024483:	83 e3 01             	and    ebx,0x1
c0024486:	c1 ea 0a             	shr    edx,0xa
c0024489:	21 da                	and    edx,ebx
c002448b:	89 f8                	mov    eax,edi
c002448d:	01 d0                	add    eax,edx
c002448f:	83 d1 00             	adc    ecx,0x0
c0024492:	89 c7                	mov    edi,eax
c0024494:	eb 06                	jmp    c002449c <__adddf3+0x645>
c0024496:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024499:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002449c:	89 f8                	mov    eax,edi
c002449e:	89 ca                	mov    edx,ecx
c00244a0:	83 c4 24             	add    esp,0x24
c00244a3:	5b                   	pop    ebx
c00244a4:	5e                   	pop    esi
c00244a5:	5f                   	pop    edi
c00244a6:	5d                   	pop    ebp
c00244a7:	c3                   	ret    

c00244a8 <__subdf3>:
c00244a8:	55                   	push   ebp
c00244a9:	89 e5                	mov    ebp,esp
c00244ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00244ae:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00244b1:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00244b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00244ba:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00244bd:	5d                   	pop    ebp
c00244be:	e9 94 f9 ff ff       	jmp    c0023e57 <__adddf3>

c00244c3 <__negdf2>:
c00244c3:	55                   	push   ebp
c00244c4:	89 e5                	mov    ebp,esp
c00244c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244c9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00244cc:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00244d2:	5d                   	pop    ebp
c00244d3:	c3                   	ret    

c00244d4 <__muldf3>:
c00244d4:	55                   	push   ebp
c00244d5:	89 e5                	mov    ebp,esp
c00244d7:	57                   	push   edi
c00244d8:	56                   	push   esi
c00244d9:	53                   	push   ebx
c00244da:	83 ec 24             	sub    esp,0x24
c00244dd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00244e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00244e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00244e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00244e9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00244ec:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00244ef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00244f2:	89 c8                	mov    eax,ecx
c00244f4:	c1 f8 14             	sar    eax,0x14
c00244f7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00244fa:	89 f8                	mov    eax,edi
c00244fc:	89 fb                	mov    ebx,edi
c00244fe:	c1 e3 0b             	shl    ebx,0xb
c0024501:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024504:	c1 e1 0b             	shl    ecx,0xb
c0024507:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002450d:	c1 e8 15             	shr    eax,0x15
c0024510:	09 c1                	or     ecx,eax
c0024512:	89 d6                	mov    esi,edx
c0024514:	89 d0                	mov    eax,edx
c0024516:	c1 f8 14             	sar    eax,0x14
c0024519:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002451c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002451f:	89 c3                	mov    ebx,eax
c0024521:	c1 e3 0b             	shl    ebx,0xb
c0024524:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024527:	c1 e6 0b             	shl    esi,0xb
c002452a:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0024530:	c1 e8 15             	shr    eax,0x15
c0024533:	09 c6                	or     esi,eax
c0024535:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024538:	25 ff 07 00 00       	and    eax,0x7ff
c002453d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024540:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024543:	25 ff 07 00 00       	and    eax,0x7ff
c0024548:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002454b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002454e:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024551:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0024558:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002455b:	40                   	inc    eax
c002455c:	a9 fe 07 00 00       	test   eax,0x7fe
c0024561:	0f 85 8d 00 00 00    	jne    c00245f4 <__muldf3+0x120>
c0024567:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002456a:	09 c8                	or     eax,ecx
c002456c:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0024570:	74 44                	je     c00245b6 <__muldf3+0xe2>
c0024572:	85 c0                	test   eax,eax
c0024574:	0f 85 31 02 00 00    	jne    c00247ab <__muldf3+0x2d7>
c002457a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002457d:	40                   	inc    eax
c002457e:	a9 fe 07 00 00       	test   eax,0x7fe
c0024583:	75 13                	jne    c0024598 <__muldf3+0xc4>
c0024585:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024588:	09 f1                	or     ecx,esi
c002458a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002458e:	74 22                	je     c00245b2 <__muldf3+0xde>
c0024590:	85 c9                	test   ecx,ecx
c0024592:	0f 85 0d 02 00 00    	jne    c00247a5 <__muldf3+0x2d1>
c0024598:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c002459c:	0f 89 09 02 00 00    	jns    c00247ab <__muldf3+0x2d7>
c00245a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00245a5:	05 00 00 00 80       	add    eax,0x80000000
c00245aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00245ad:	e9 f9 01 00 00       	jmp    c00247ab <__muldf3+0x2d7>
c00245b2:	85 c9                	test   ecx,ecx
c00245b4:	eb 2e                	jmp    c00245e4 <__muldf3+0x110>
c00245b6:	85 c0                	test   eax,eax
c00245b8:	74 20                	je     c00245da <__muldf3+0x106>
c00245ba:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00245bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00245c0:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00245c3:	c1 ef 1f             	shr    edi,0x1f
c00245c6:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00245c9:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00245cc:	8d 43 ff             	lea    eax,[ebx-0x1]
c00245cf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00245d2:	09 f9                	or     ecx,edi
c00245d4:	78 1e                	js     c00245f4 <__muldf3+0x120>
c00245d6:	89 c3                	mov    ebx,eax
c00245d8:	eb e0                	jmp    c00245ba <__muldf3+0xe6>
c00245da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00245dd:	f7 d0                	not    eax
c00245df:	a9 ff 07 00 00       	test   eax,0x7ff
c00245e4:	75 b2                	jne    c0024598 <__muldf3+0xc4>
c00245e6:	31 ff                	xor    edi,edi
c00245e8:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00245ef:	e9 b7 01 00 00       	jmp    c00247ab <__muldf3+0x2d7>
c00245f4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00245f7:	40                   	inc    eax
c00245f8:	a9 fe 07 00 00       	test   eax,0x7fe
c00245fd:	75 57                	jne    c0024656 <__muldf3+0x182>
c00245ff:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024602:	09 f0                	or     eax,esi
c0024604:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024608:	74 23                	je     c002462d <__muldf3+0x159>
c002460a:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002460e:	0f 89 91 01 00 00    	jns    c00247a5 <__muldf3+0x2d1>
c0024614:	85 c0                	test   eax,eax
c0024616:	0f 85 89 01 00 00    	jne    c00247a5 <__muldf3+0x2d1>
c002461c:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002461f:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0024625:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024628:	e9 7e 01 00 00       	jmp    c00247ab <__muldf3+0x2d7>
c002462d:	85 c0                	test   eax,eax
c002462f:	75 0c                	jne    c002463d <__muldf3+0x169>
c0024631:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0024635:	0f 89 6a 01 00 00    	jns    c00247a5 <__muldf3+0x2d1>
c002463b:	eb df                	jmp    c002461c <__muldf3+0x148>
c002463d:	01 f6                	add    esi,esi
c002463f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024642:	c1 ea 1f             	shr    edx,0x1f
c0024645:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024648:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002464b:	8d 43 ff             	lea    eax,[ebx-0x1]
c002464e:	09 d6                	or     esi,edx
c0024650:	78 04                	js     c0024656 <__muldf3+0x182>
c0024652:	89 c3                	mov    ebx,eax
c0024654:	eb e7                	jmp    c002463d <__muldf3+0x169>
c0024656:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002465c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024662:	89 c8                	mov    eax,ecx
c0024664:	f7 e6                	mul    esi
c0024666:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0024669:	89 c7                	mov    edi,eax
c002466b:	89 c8                	mov    eax,ecx
c002466d:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024670:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0024673:	89 c1                	mov    ecx,eax
c0024675:	89 f0                	mov    eax,esi
c0024677:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002467a:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c002467d:	89 c6                	mov    esi,eax
c002467f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024682:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024685:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024688:	31 c0                	xor    eax,eax
c002468a:	01 f1                	add    ecx,esi
c002468c:	0f 92 c0             	setb   al
c002468f:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0024692:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024695:	83 d6 00             	adc    esi,0x0
c0024698:	01 c7                	add    edi,eax
c002469a:	83 d6 00             	adc    esi,0x0
c002469d:	01 ca                	add    edx,ecx
c002469f:	0f 92 c1             	setb   cl
c00246a2:	0f b6 c9             	movzx  ecx,cl
c00246a5:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00246a8:	83 d6 00             	adc    esi,0x0
c00246ab:	01 cf                	add    edi,ecx
c00246ad:	83 d6 00             	adc    esi,0x0
c00246b0:	31 c9                	xor    ecx,ecx
c00246b2:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00246b5:	0f 95 c1             	setne  cl
c00246b8:	09 cf                	or     edi,ecx
c00246ba:	85 f6                	test   esi,esi
c00246bc:	78 0c                	js     c00246ca <__muldf3+0x1f6>
c00246be:	01 f6                	add    esi,esi
c00246c0:	89 f8                	mov    eax,edi
c00246c2:	c1 e8 1f             	shr    eax,0x1f
c00246c5:	09 c6                	or     esi,eax
c00246c7:	01 ff                	add    edi,edi
c00246c9:	4b                   	dec    ebx
c00246ca:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00246d0:	0f 8f 85 00 00 00    	jg     c002475b <__muldf3+0x287>
c00246d6:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00246dc:	85 db                	test   ebx,ebx
c00246de:	0f 8f 84 00 00 00    	jg     c0024768 <__muldf3+0x294>
c00246e4:	83 fb cc             	cmp    ebx,0xffffffcc
c00246e7:	7c 79                	jl     c0024762 <__muldf3+0x28e>
c00246e9:	ba 01 00 00 00       	mov    edx,0x1
c00246ee:	29 da                	sub    edx,ebx
c00246f0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00246f6:	83 fa 1f             	cmp    edx,0x1f
c00246f9:	7e 30                	jle    c002472b <__muldf3+0x257>
c00246fb:	83 fa 20             	cmp    edx,0x20
c00246fe:	75 0b                	jne    c002470b <__muldf3+0x237>
c0024700:	31 c0                	xor    eax,eax
c0024702:	85 ff                	test   edi,edi
c0024704:	0f 95 c0             	setne  al
c0024707:	89 c7                	mov    edi,eax
c0024709:	eb 1a                	jmp    c0024725 <__muldf3+0x251>
c002470b:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002470e:	89 f0                	mov    eax,esi
c0024710:	d3 e0                	shl    eax,cl
c0024712:	09 f8                	or     eax,edi
c0024714:	0f 95 c0             	setne  al
c0024717:	0f b6 c0             	movzx  eax,al
c002471a:	89 c7                	mov    edi,eax
c002471c:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024721:	29 d9                	sub    ecx,ebx
c0024723:	d3 ee                	shr    esi,cl
c0024725:	09 f7                	or     edi,esi
c0024727:	31 db                	xor    ebx,ebx
c0024729:	eb 3b                	jmp    c0024766 <__muldf3+0x292>
c002472b:	83 c3 1f             	add    ebx,0x1f
c002472e:	89 f0                	mov    eax,esi
c0024730:	88 d9                	mov    cl,bl
c0024732:	d3 e0                	shl    eax,cl
c0024734:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024737:	89 f8                	mov    eax,edi
c0024739:	88 d1                	mov    cl,dl
c002473b:	d3 e8                	shr    eax,cl
c002473d:	89 c1                	mov    ecx,eax
c002473f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024742:	09 c8                	or     eax,ecx
c0024744:	88 d9                	mov    cl,bl
c0024746:	d3 e7                	shl    edi,cl
c0024748:	31 db                	xor    ebx,ebx
c002474a:	85 ff                	test   edi,edi
c002474c:	0f 95 c3             	setne  bl
c002474f:	89 df                	mov    edi,ebx
c0024751:	09 c7                	or     edi,eax
c0024753:	88 d1                	mov    cl,dl
c0024755:	d3 ee                	shr    esi,cl
c0024757:	31 db                	xor    ebx,ebx
c0024759:	eb 0d                	jmp    c0024768 <__muldf3+0x294>
c002475b:	bb ff 07 00 00       	mov    ebx,0x7ff
c0024760:	eb 02                	jmp    c0024764 <__muldf3+0x290>
c0024762:	31 db                	xor    ebx,ebx
c0024764:	31 ff                	xor    edi,edi
c0024766:	31 f6                	xor    esi,esi
c0024768:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002476b:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002476e:	25 00 f8 ff ff       	and    eax,0xfffff800
c0024773:	09 c3                	or     ebx,eax
c0024775:	c1 e3 14             	shl    ebx,0x14
c0024778:	89 f0                	mov    eax,esi
c002477a:	c1 e8 0b             	shr    eax,0xb
c002477d:	09 c3                	or     ebx,eax
c002477f:	89 f8                	mov    eax,edi
c0024781:	c1 e8 0b             	shr    eax,0xb
c0024784:	c1 e6 15             	shl    esi,0x15
c0024787:	09 c6                	or     esi,eax
c0024789:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002478f:	0f 95 c1             	setne  cl
c0024792:	09 c8                	or     eax,ecx
c0024794:	83 e0 01             	and    eax,0x1
c0024797:	c1 ef 0a             	shr    edi,0xa
c002479a:	21 c7                	and    edi,eax
c002479c:	01 f7                	add    edi,esi
c002479e:	83 d3 00             	adc    ebx,0x0
c00247a1:	89 da                	mov    edx,ebx
c00247a3:	eb 03                	jmp    c00247a8 <__muldf3+0x2d4>
c00247a5:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00247a8:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00247ab:	89 f8                	mov    eax,edi
c00247ad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00247b0:	83 c4 24             	add    esp,0x24
c00247b3:	5b                   	pop    ebx
c00247b4:	5e                   	pop    esi
c00247b5:	5f                   	pop    edi
c00247b6:	5d                   	pop    ebp
c00247b7:	c3                   	ret    

c00247b8 <__divdf3>:
c00247b8:	55                   	push   ebp
c00247b9:	89 e5                	mov    ebp,esp
c00247bb:	57                   	push   edi
c00247bc:	56                   	push   esi
c00247bd:	53                   	push   ebx
c00247be:	83 ec 2c             	sub    esp,0x2c
c00247c1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00247c4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00247c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00247ca:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00247cd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00247d0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00247d3:	89 ce                	mov    esi,ecx
c00247d5:	89 c8                	mov    eax,ecx
c00247d7:	c1 f8 14             	sar    eax,0x14
c00247da:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00247dd:	89 f8                	mov    eax,edi
c00247df:	89 fb                	mov    ebx,edi
c00247e1:	c1 e3 0b             	shl    ebx,0xb
c00247e4:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00247e7:	c1 e6 0b             	shl    esi,0xb
c00247ea:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00247f0:	c1 e8 15             	shr    eax,0x15
c00247f3:	09 c6                	or     esi,eax
c00247f5:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00247f8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00247fb:	89 c2                	mov    edx,eax
c00247fd:	c1 fa 14             	sar    edx,0x14
c0024800:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0024803:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024806:	89 de                	mov    esi,ebx
c0024808:	c1 e6 0b             	shl    esi,0xb
c002480b:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002480e:	c1 e0 0b             	shl    eax,0xb
c0024811:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024816:	c1 eb 15             	shr    ebx,0x15
c0024819:	09 d8                	or     eax,ebx
c002481b:	89 c2                	mov    edx,eax
c002481d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024820:	25 ff 07 00 00       	and    eax,0x7ff
c0024825:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024828:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002482b:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024831:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0024834:	29 d8                	sub    eax,ebx
c0024836:	05 ff 03 00 00       	add    eax,0x3ff
c002483b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002483e:	46                   	inc    esi
c002483f:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024845:	0f 85 a5 00 00 00    	jne    c00248f0 <__divdf3+0x138>
c002484b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002484e:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0024851:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0024855:	74 2a                	je     c0024881 <__divdf3+0xc9>
c0024857:	85 f6                	test   esi,esi
c0024859:	0f 85 cc 02 00 00    	jne    c0024b2b <__divdf3+0x373>
c002485f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024862:	40                   	inc    eax
c0024863:	a9 fe 07 00 00       	test   eax,0x7fe
c0024868:	75 26                	jne    c0024890 <__divdf3+0xd8>
c002486a:	85 db                	test   ebx,ebx
c002486c:	74 22                	je     c0024890 <__divdf3+0xd8>
c002486e:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024871:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024874:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024877:	09 d0                	or     eax,edx
c0024879:	0f 85 ac 02 00 00    	jne    c0024b2b <__divdf3+0x373>
c002487f:	eb 63                	jmp    c00248e4 <__divdf3+0x12c>
c0024881:	85 f6                	test   esi,esi
c0024883:	75 22                	jne    c00248a7 <__divdf3+0xef>
c0024885:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024888:	40                   	inc    eax
c0024889:	a9 fe 07 00 00       	test   eax,0x7fe
c002488e:	74 36                	je     c00248c6 <__divdf3+0x10e>
c0024890:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024894:	0f 89 91 02 00 00    	jns    c0024b2b <__divdf3+0x373>
c002489a:	89 f8                	mov    eax,edi
c002489c:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00248a2:	e9 80 02 00 00       	jmp    c0024b27 <__divdf3+0x36f>
c00248a7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00248aa:	01 f6                	add    esi,esi
c00248ac:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00248af:	c1 ef 1f             	shr    edi,0x1f
c00248b2:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00248b5:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00248b8:	8d 48 ff             	lea    ecx,[eax-0x1]
c00248bb:	09 f7                	or     edi,esi
c00248bd:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00248c0:	78 2e                	js     c00248f0 <__divdf3+0x138>
c00248c2:	89 c8                	mov    eax,ecx
c00248c4:	eb e1                	jmp    c00248a7 <__divdf3+0xef>
c00248c6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00248c9:	09 d0                	or     eax,edx
c00248cb:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00248cf:	74 0f                	je     c00248e0 <__divdf3+0x128>
c00248d1:	85 c0                	test   eax,eax
c00248d3:	74 bb                	je     c0024890 <__divdf3+0xd8>
c00248d5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00248d8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00248db:	e9 4b 02 00 00       	jmp    c0024b2b <__divdf3+0x373>
c00248e0:	85 c0                	test   eax,eax
c00248e2:	75 ac                	jne    c0024890 <__divdf3+0xd8>
c00248e4:	31 ff                	xor    edi,edi
c00248e6:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00248eb:	e9 3b 02 00 00       	jmp    c0024b2b <__divdf3+0x373>
c00248f0:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00248f3:	8d 4f 01             	lea    ecx,[edi+0x1]
c00248f6:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00248fc:	75 6b                	jne    c0024969 <__divdf3+0x1b1>
c00248fe:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024901:	09 d6                	or     esi,edx
c0024903:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024907:	74 28                	je     c0024931 <__divdf3+0x179>
c0024909:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002490c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002490f:	85 f6                	test   esi,esi
c0024911:	0f 85 14 02 00 00    	jne    c0024b2b <__divdf3+0x373>
c0024917:	31 ff                	xor    edi,edi
c0024919:	31 c9                	xor    ecx,ecx
c002491b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002491e:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024921:	0f 89 04 02 00 00    	jns    c0024b2b <__divdf3+0x373>
c0024927:	b9 00 00 00 80       	mov    ecx,0x80000000
c002492c:	e9 fa 01 00 00       	jmp    c0024b2b <__divdf3+0x373>
c0024931:	85 f6                	test   esi,esi
c0024933:	75 1b                	jne    c0024950 <__divdf3+0x198>
c0024935:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024938:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002493b:	25 00 00 00 80       	and    eax,0x80000000
c0024940:	31 c9                	xor    ecx,ecx
c0024942:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0024947:	89 cf                	mov    edi,ecx
c0024949:	89 c1                	mov    ecx,eax
c002494b:	e9 db 01 00 00       	jmp    c0024b2b <__divdf3+0x373>
c0024950:	01 d2                	add    edx,edx
c0024952:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024955:	c1 eb 1f             	shr    ebx,0x1f
c0024958:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002495b:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002495e:	8d 48 01             	lea    ecx,[eax+0x1]
c0024961:	09 da                	or     edx,ebx
c0024963:	78 04                	js     c0024969 <__divdf3+0x1b1>
c0024965:	89 c8                	mov    eax,ecx
c0024967:	eb e7                	jmp    c0024950 <__divdf3+0x198>
c0024969:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002496c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024972:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024978:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002497b:	39 d6                	cmp    esi,edx
c002497d:	77 0d                	ja     c002498c <__divdf3+0x1d4>
c002497f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024982:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024985:	72 1b                	jb     c00249a2 <__divdf3+0x1ea>
c0024987:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002498a:	75 16                	jne    c00249a2 <__divdf3+0x1ea>
c002498c:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002498f:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024992:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024995:	83 de 00             	sbb    esi,0x0
c0024998:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002499b:	ba 01 00 00 00       	mov    edx,0x1
c00249a0:	eb 02                	jmp    c00249a4 <__divdf3+0x1ec>
c00249a2:	31 d2                	xor    edx,edx
c00249a4:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00249ab:	31 ff                	xor    edi,edi
c00249ad:	01 ff                	add    edi,edi
c00249af:	89 d1                	mov    ecx,edx
c00249b1:	c1 e9 1f             	shr    ecx,0x1f
c00249b4:	09 cf                	or     edi,ecx
c00249b6:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00249b9:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00249bc:	89 da                	mov    edx,ebx
c00249be:	89 f3                	mov    ebx,esi
c00249c0:	8d 34 36             	lea    esi,[esi+esi*1]
c00249c3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00249c6:	c1 e9 1f             	shr    ecx,0x1f
c00249c9:	09 ce                	or     esi,ecx
c00249cb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00249ce:	01 c9                	add    ecx,ecx
c00249d0:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00249d3:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00249d6:	85 db                	test   ebx,ebx
c00249d8:	78 29                	js     c0024a03 <__divdf3+0x24b>
c00249da:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00249dd:	72 07                	jb     c00249e6 <__divdf3+0x22e>
c00249df:	75 3c                	jne    c0024a1d <__divdf3+0x265>
c00249e1:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00249e4:	77 37                	ja     c0024a1d <__divdf3+0x265>
c00249e6:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00249e9:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00249ec:	31 d2                	xor    edx,edx
c00249ee:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00249f1:	0f 97 c2             	seta   dl
c00249f4:	29 d6                	sub    esi,edx
c00249f6:	89 d9                	mov    ecx,ebx
c00249f8:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00249fb:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00249fe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024a01:	eb 17                	jmp    c0024a1a <__divdf3+0x262>
c0024a03:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a06:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a09:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024a0c:	0f 97 c1             	seta   cl
c0024a0f:	0f b6 c9             	movzx  ecx,cl
c0024a12:	29 ce                	sub    esi,ecx
c0024a14:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024a17:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024a1a:	83 ca 01             	or     edx,0x1
c0024a1d:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024a20:	75 8b                	jne    c00249ad <__divdf3+0x1f5>
c0024a22:	c1 e7 09             	shl    edi,0x9
c0024a25:	89 d1                	mov    ecx,edx
c0024a27:	c1 e9 17             	shr    ecx,0x17
c0024a2a:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024a2d:	09 f3                	or     ebx,esi
c0024a2f:	0f 95 c3             	setne  bl
c0024a32:	0f b6 db             	movzx  ebx,bl
c0024a35:	c1 e2 09             	shl    edx,0x9
c0024a38:	09 d3                	or     ebx,edx
c0024a3a:	89 ca                	mov    edx,ecx
c0024a3c:	09 fa                	or     edx,edi
c0024a3e:	78 0c                	js     c0024a4c <__divdf3+0x294>
c0024a40:	01 d2                	add    edx,edx
c0024a42:	89 d9                	mov    ecx,ebx
c0024a44:	c1 e9 1f             	shr    ecx,0x1f
c0024a47:	09 ca                	or     edx,ecx
c0024a49:	01 db                	add    ebx,ebx
c0024a4b:	48                   	dec    eax
c0024a4c:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024a51:	0f 8f 83 00 00 00    	jg     c0024ada <__divdf3+0x322>
c0024a57:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024a5d:	85 c0                	test   eax,eax
c0024a5f:	0f 8f 82 00 00 00    	jg     c0024ae7 <__divdf3+0x32f>
c0024a65:	83 f8 cc             	cmp    eax,0xffffffcc
c0024a68:	7c 77                	jl     c0024ae1 <__divdf3+0x329>
c0024a6a:	be 01 00 00 00       	mov    esi,0x1
c0024a6f:	29 c6                	sub    esi,eax
c0024a71:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024a77:	83 fe 1f             	cmp    esi,0x1f
c0024a7a:	7e 2f                	jle    c0024aab <__divdf3+0x2f3>
c0024a7c:	83 fe 20             	cmp    esi,0x20
c0024a7f:	75 0a                	jne    c0024a8b <__divdf3+0x2d3>
c0024a81:	85 db                	test   ebx,ebx
c0024a83:	0f 95 c3             	setne  bl
c0024a86:	0f b6 db             	movzx  ebx,bl
c0024a89:	eb 1a                	jmp    c0024aa5 <__divdf3+0x2ed>
c0024a8b:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024a8e:	89 d7                	mov    edi,edx
c0024a90:	d3 e7                	shl    edi,cl
c0024a92:	89 f9                	mov    ecx,edi
c0024a94:	09 d9                	or     ecx,ebx
c0024a96:	0f 95 c3             	setne  bl
c0024a99:	0f b6 db             	movzx  ebx,bl
c0024a9c:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024aa1:	29 c1                	sub    ecx,eax
c0024aa3:	d3 ea                	shr    edx,cl
c0024aa5:	09 d3                	or     ebx,edx
c0024aa7:	31 c0                	xor    eax,eax
c0024aa9:	eb 3a                	jmp    c0024ae5 <__divdf3+0x32d>
c0024aab:	83 c0 1f             	add    eax,0x1f
c0024aae:	89 d7                	mov    edi,edx
c0024ab0:	88 c1                	mov    cl,al
c0024ab2:	d3 e7                	shl    edi,cl
c0024ab4:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024ab7:	89 df                	mov    edi,ebx
c0024ab9:	89 f1                	mov    ecx,esi
c0024abb:	d3 ef                	shr    edi,cl
c0024abd:	89 f9                	mov    ecx,edi
c0024abf:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024ac2:	09 cf                	or     edi,ecx
c0024ac4:	88 c1                	mov    cl,al
c0024ac6:	d3 e3                	shl    ebx,cl
c0024ac8:	85 db                	test   ebx,ebx
c0024aca:	0f 95 c3             	setne  bl
c0024acd:	0f b6 db             	movzx  ebx,bl
c0024ad0:	09 fb                	or     ebx,edi
c0024ad2:	89 f1                	mov    ecx,esi
c0024ad4:	d3 ea                	shr    edx,cl
c0024ad6:	31 c0                	xor    eax,eax
c0024ad8:	eb 0d                	jmp    c0024ae7 <__divdf3+0x32f>
c0024ada:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024adf:	eb 02                	jmp    c0024ae3 <__divdf3+0x32b>
c0024ae1:	31 c0                	xor    eax,eax
c0024ae3:	31 db                	xor    ebx,ebx
c0024ae5:	31 d2                	xor    edx,edx
c0024ae7:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024aea:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024aed:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024af3:	09 c8                	or     eax,ecx
c0024af5:	c1 e0 14             	shl    eax,0x14
c0024af8:	89 d1                	mov    ecx,edx
c0024afa:	c1 e9 0b             	shr    ecx,0xb
c0024afd:	09 c8                	or     eax,ecx
c0024aff:	89 c6                	mov    esi,eax
c0024b01:	89 d9                	mov    ecx,ebx
c0024b03:	c1 e9 0b             	shr    ecx,0xb
c0024b06:	c1 e2 15             	shl    edx,0x15
c0024b09:	09 ca                	or     edx,ecx
c0024b0b:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024b11:	0f 95 c0             	setne  al
c0024b14:	09 c1                	or     ecx,eax
c0024b16:	83 e1 01             	and    ecx,0x1
c0024b19:	c1 eb 0a             	shr    ebx,0xa
c0024b1c:	21 cb                	and    ebx,ecx
c0024b1e:	01 d3                	add    ebx,edx
c0024b20:	89 d8                	mov    eax,ebx
c0024b22:	83 d6 00             	adc    esi,0x0
c0024b25:	89 f2                	mov    edx,esi
c0024b27:	89 c7                	mov    edi,eax
c0024b29:	89 d1                	mov    ecx,edx
c0024b2b:	89 f8                	mov    eax,edi
c0024b2d:	89 ca                	mov    edx,ecx
c0024b2f:	83 c4 2c             	add    esp,0x2c
c0024b32:	5b                   	pop    ebx
c0024b33:	5e                   	pop    esi
c0024b34:	5f                   	pop    edi
c0024b35:	5d                   	pop    ebp
c0024b36:	c3                   	ret    

c0024b37 <__floatsidf>:
c0024b37:	55                   	push   ebp
c0024b38:	89 e5                	mov    ebp,esp
c0024b3a:	56                   	push   esi
c0024b3b:	53                   	push   ebx
c0024b3c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024b3f:	85 db                	test   ebx,ebx
c0024b41:	7e 15                	jle    c0024b58 <__floatsidf+0x21>
c0024b43:	0f bd cb             	bsr    ecx,ebx
c0024b46:	83 f1 1f             	xor    ecx,0x1f
c0024b49:	d3 e3                	shl    ebx,cl
c0024b4b:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024b51:	b8 1e 04 00 00       	mov    eax,0x41e
c0024b56:	eb 21                	jmp    c0024b79 <__floatsidf+0x42>
c0024b58:	b8 00 00 00 00       	mov    eax,0x0
c0024b5d:	ba 00 00 00 00       	mov    edx,0x0
c0024b62:	74 2a                	je     c0024b8e <__floatsidf+0x57>
c0024b64:	f7 db                	neg    ebx
c0024b66:	0f bd cb             	bsr    ecx,ebx
c0024b69:	83 f1 1f             	xor    ecx,0x1f
c0024b6c:	d3 e3                	shl    ebx,cl
c0024b6e:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024b74:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024b79:	29 c8                	sub    eax,ecx
c0024b7b:	c1 e0 14             	shl    eax,0x14
c0024b7e:	89 c1                	mov    ecx,eax
c0024b80:	89 de                	mov    esi,ebx
c0024b82:	c1 ee 0b             	shr    esi,0xb
c0024b85:	09 f1                	or     ecx,esi
c0024b87:	89 ca                	mov    edx,ecx
c0024b89:	c1 e3 15             	shl    ebx,0x15
c0024b8c:	89 d8                	mov    eax,ebx
c0024b8e:	5b                   	pop    ebx
c0024b8f:	5e                   	pop    esi
c0024b90:	5d                   	pop    ebp
c0024b91:	c3                   	ret    

c0024b92 <__floatunsidf>:
c0024b92:	55                   	push   ebp
c0024b93:	89 e5                	mov    ebp,esp
c0024b95:	56                   	push   esi
c0024b96:	53                   	push   ebx
c0024b97:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024b9a:	85 db                	test   ebx,ebx
c0024b9c:	74 2a                	je     c0024bc8 <__floatunsidf+0x36>
c0024b9e:	0f bd cb             	bsr    ecx,ebx
c0024ba1:	83 f1 1f             	xor    ecx,0x1f
c0024ba4:	d3 e3                	shl    ebx,cl
c0024ba6:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024bac:	b8 1e 04 00 00       	mov    eax,0x41e
c0024bb1:	29 c8                	sub    eax,ecx
c0024bb3:	c1 e0 14             	shl    eax,0x14
c0024bb6:	89 c1                	mov    ecx,eax
c0024bb8:	89 de                	mov    esi,ebx
c0024bba:	c1 ee 0b             	shr    esi,0xb
c0024bbd:	09 f1                	or     ecx,esi
c0024bbf:	89 ca                	mov    edx,ecx
c0024bc1:	c1 e3 15             	shl    ebx,0x15
c0024bc4:	89 d8                	mov    eax,ebx
c0024bc6:	eb 04                	jmp    c0024bcc <__floatunsidf+0x3a>
c0024bc8:	31 c0                	xor    eax,eax
c0024bca:	31 d2                	xor    edx,edx
c0024bcc:	5b                   	pop    ebx
c0024bcd:	5e                   	pop    esi
c0024bce:	5d                   	pop    ebp
c0024bcf:	c3                   	ret    

c0024bd0 <__fixdfsi>:
c0024bd0:	55                   	push   ebp
c0024bd1:	89 e5                	mov    ebp,esp
c0024bd3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024bd6:	89 d1                	mov    ecx,edx
c0024bd8:	c1 e1 0b             	shl    ecx,0xb
c0024bdb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024be4:	c1 e8 15             	shr    eax,0x15
c0024be7:	09 c1                	or     ecx,eax
c0024be9:	c1 fa 14             	sar    edx,0x14
c0024bec:	78 1f                	js     c0024c0d <__fixdfsi+0x3d>
c0024bee:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024bf4:	31 c0                	xor    eax,eax
c0024bf6:	83 fa 1e             	cmp    edx,0x1e
c0024bf9:	77 40                	ja     c0024c3b <__fixdfsi+0x6b>
c0024bfb:	89 c8                	mov    eax,ecx
c0024bfd:	0d 00 00 00 80       	or     eax,0x80000000
c0024c02:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024c07:	29 d1                	sub    ecx,edx
c0024c09:	d3 e8                	shr    eax,cl
c0024c0b:	eb 2e                	jmp    c0024c3b <__fixdfsi+0x6b>
c0024c0d:	31 c0                	xor    eax,eax
c0024c0f:	81 c2 01 04 00 00    	add    edx,0x401
c0024c15:	78 24                	js     c0024c3b <__fixdfsi+0x6b>
c0024c17:	83 fa 1e             	cmp    edx,0x1e
c0024c1a:	7e 09                	jle    c0024c25 <__fixdfsi+0x55>
c0024c1c:	83 fa 1f             	cmp    edx,0x1f
c0024c1f:	75 18                	jne    c0024c39 <__fixdfsi+0x69>
c0024c21:	85 c9                	test   ecx,ecx
c0024c23:	75 14                	jne    c0024c39 <__fixdfsi+0x69>
c0024c25:	89 c8                	mov    eax,ecx
c0024c27:	0d 00 00 00 80       	or     eax,0x80000000
c0024c2c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024c31:	29 d1                	sub    ecx,edx
c0024c33:	d3 e8                	shr    eax,cl
c0024c35:	f7 d8                	neg    eax
c0024c37:	eb 02                	jmp    c0024c3b <__fixdfsi+0x6b>
c0024c39:	31 c0                	xor    eax,eax
c0024c3b:	5d                   	pop    ebp
c0024c3c:	c3                   	ret    

c0024c3d <__fixunsdfsi>:
c0024c3d:	55                   	push   ebp
c0024c3e:	89 e5                	mov    ebp,esp
c0024c40:	53                   	push   ebx
c0024c41:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024c44:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024c47:	89 d3                	mov    ebx,edx
c0024c49:	c1 fb 14             	sar    ebx,0x14
c0024c4c:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024c52:	31 c0                	xor    eax,eax
c0024c54:	83 fb 1f             	cmp    ebx,0x1f
c0024c57:	77 1d                	ja     c0024c76 <__fixunsdfsi+0x39>
c0024c59:	89 d0                	mov    eax,edx
c0024c5b:	c1 e0 0b             	shl    eax,0xb
c0024c5e:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024c63:	c1 e9 15             	shr    ecx,0x15
c0024c66:	09 c8                	or     eax,ecx
c0024c68:	0d 00 00 00 80       	or     eax,0x80000000
c0024c6d:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024c72:	29 d9                	sub    ecx,ebx
c0024c74:	d3 e8                	shr    eax,cl
c0024c76:	5b                   	pop    ebx
c0024c77:	5d                   	pop    ebp
c0024c78:	c3                   	ret    

c0024c79 <__cmpdf2>:
c0024c79:	55                   	push   ebp
c0024c7a:	89 e5                	mov    ebp,esp
c0024c7c:	57                   	push   edi
c0024c7d:	56                   	push   esi
c0024c7e:	53                   	push   ebx
c0024c7f:	83 ec 0c             	sub    esp,0xc
c0024c82:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024c85:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024c88:	89 ca                	mov    edx,ecx
c0024c8a:	c1 ea 14             	shr    edx,0x14
c0024c8d:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024c93:	89 cb                	mov    ebx,ecx
c0024c95:	c1 fb 1f             	sar    ebx,0x1f
c0024c98:	31 da                	xor    edx,ebx
c0024c9a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024c9d:	89 df                	mov    edi,ebx
c0024c9f:	c1 e7 0b             	shl    edi,0xb
c0024ca2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024ca5:	c1 e1 0b             	shl    ecx,0xb
c0024ca8:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024cae:	c1 eb 15             	shr    ebx,0x15
c0024cb1:	09 d9                	or     ecx,ebx
c0024cb3:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024cb6:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024cb9:	89 ce                	mov    esi,ecx
c0024cbb:	c1 ee 14             	shr    esi,0x14
c0024cbe:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024cc4:	89 cb                	mov    ebx,ecx
c0024cc6:	c1 fb 1f             	sar    ebx,0x1f
c0024cc9:	31 de                	xor    esi,ebx
c0024ccb:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024cce:	89 df                	mov    edi,ebx
c0024cd0:	c1 e7 0b             	shl    edi,0xb
c0024cd3:	c1 e1 0b             	shl    ecx,0xb
c0024cd6:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024cdc:	c1 eb 15             	shr    ebx,0x15
c0024cdf:	09 d9                	or     ecx,ebx
c0024ce1:	89 d3                	mov    ebx,edx
c0024ce3:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024ce9:	43                   	inc    ebx
c0024cea:	83 fb 01             	cmp    ebx,0x1
c0024ced:	77 08                	ja     c0024cf7 <__cmpdf2+0x7e>
c0024cef:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024cf2:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024cf5:	75 68                	jne    c0024d5f <__cmpdf2+0xe6>
c0024cf7:	89 f3                	mov    ebx,esi
c0024cf9:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024cff:	43                   	inc    ebx
c0024d00:	83 fb 01             	cmp    ebx,0x1
c0024d03:	77 06                	ja     c0024d0b <__cmpdf2+0x92>
c0024d05:	89 fb                	mov    ebx,edi
c0024d07:	09 cb                	or     ebx,ecx
c0024d09:	75 54                	jne    c0024d5f <__cmpdf2+0xe6>
c0024d0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024d0e:	09 f8                	or     eax,edi
c0024d10:	09 c8                	or     eax,ecx
c0024d12:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024d15:	75 12                	jne    c0024d29 <__cmpdf2+0xb0>
c0024d17:	8d 42 01             	lea    eax,[edx+0x1]
c0024d1a:	83 f8 01             	cmp    eax,0x1
c0024d1d:	77 0a                	ja     c0024d29 <__cmpdf2+0xb0>
c0024d1f:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024d22:	31 c0                	xor    eax,eax
c0024d24:	83 fb 01             	cmp    ebx,0x1
c0024d27:	76 36                	jbe    c0024d5f <__cmpdf2+0xe6>
c0024d29:	b8 01 00 00 00       	mov    eax,0x1
c0024d2e:	39 f2                	cmp    edx,esi
c0024d30:	7f 2d                	jg     c0024d5f <__cmpdf2+0xe6>
c0024d32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024d37:	7c 26                	jl     c0024d5f <__cmpdf2+0xe6>
c0024d39:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024d3c:	77 07                	ja     c0024d45 <__cmpdf2+0xcc>
c0024d3e:	72 16                	jb     c0024d56 <__cmpdf2+0xdd>
c0024d40:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0024d43:	76 0a                	jbe    c0024d4f <__cmpdf2+0xd6>
c0024d45:	89 d0                	mov    eax,edx
c0024d47:	c1 f8 1f             	sar    eax,0x1f
c0024d4a:	83 c8 01             	or     eax,0x1
c0024d4d:	eb 10                	jmp    c0024d5f <__cmpdf2+0xe6>
c0024d4f:	b8 00 00 00 00       	mov    eax,0x0
c0024d54:	73 09                	jae    c0024d5f <__cmpdf2+0xe6>
c0024d56:	89 d0                	mov    eax,edx
c0024d58:	c1 f8 1f             	sar    eax,0x1f
c0024d5b:	83 e0 02             	and    eax,0x2
c0024d5e:	48                   	dec    eax
c0024d5f:	83 c4 0c             	add    esp,0xc
c0024d62:	5b                   	pop    ebx
c0024d63:	5e                   	pop    esi
c0024d64:	5f                   	pop    edi
c0024d65:	5d                   	pop    ebp
c0024d66:	c3                   	ret    

c0024d67 <__eqdf2>:
c0024d67:	55                   	push   ebp
c0024d68:	89 e5                	mov    ebp,esp
c0024d6a:	50                   	push   eax
c0024d6b:	6a 01                	push   0x1
c0024d6d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024d70:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024d73:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024d76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d79:	e8 fb fe ff ff       	call   c0024c79 <__cmpdf2>
c0024d7e:	83 c4 18             	add    esp,0x18
c0024d81:	c9                   	leave  
c0024d82:	c3                   	ret    

c0024d83 <__nedf2>:
c0024d83:	eb e2                	jmp    c0024d67 <__eqdf2>

c0024d85 <__gtdf2>:
c0024d85:	55                   	push   ebp
c0024d86:	89 e5                	mov    ebp,esp
c0024d88:	50                   	push   eax
c0024d89:	6a ff                	push   0xffffffff
c0024d8b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024d8e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024d91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024d94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d97:	e8 dd fe ff ff       	call   c0024c79 <__cmpdf2>
c0024d9c:	83 c4 18             	add    esp,0x18
c0024d9f:	c9                   	leave  
c0024da0:	c3                   	ret    

c0024da1 <__gedf2>:
c0024da1:	eb e2                	jmp    c0024d85 <__gtdf2>

c0024da3 <__ltdf2>:
c0024da3:	eb c2                	jmp    c0024d67 <__eqdf2>

c0024da5 <__ledf2>:
c0024da5:	eb c0                	jmp    c0024d67 <__eqdf2>

c0024da7 <__truncdfsf2>:
c0024da7:	55                   	push   ebp
c0024da8:	89 e5                	mov    ebp,esp
c0024daa:	57                   	push   edi
c0024dab:	56                   	push   esi
c0024dac:	53                   	push   ebx
c0024dad:	83 ec 0c             	sub    esp,0xc
c0024db0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024db3:	89 d1                	mov    ecx,edx
c0024db5:	c1 f9 14             	sar    ecx,0x14
c0024db8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024dbb:	89 df                	mov    edi,ebx
c0024dbd:	c1 e7 0b             	shl    edi,0xb
c0024dc0:	89 d0                	mov    eax,edx
c0024dc2:	c1 e0 0b             	shl    eax,0xb
c0024dc5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024dca:	c1 eb 15             	shr    ebx,0x15
c0024dcd:	09 d8                	or     eax,ebx
c0024dcf:	89 cb                	mov    ebx,ecx
c0024dd1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024dd7:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0024ddd:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0024de3:	0f 86 9e 00 00 00    	jbe    c0024e87 <__truncdfsf2+0xe0>
c0024de9:	85 db                	test   ebx,ebx
c0024deb:	75 0a                	jne    c0024df7 <__truncdfsf2+0x50>
c0024ded:	c1 fa 17             	sar    edx,0x17
c0024df0:	30 d2                	xor    dl,dl
c0024df2:	e9 84 00 00 00       	jmp    c0024e7b <__truncdfsf2+0xd4>
c0024df7:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0024dfd:	83 fe 83             	cmp    esi,0xffffff83
c0024e00:	7d 4b                	jge    c0024e4d <__truncdfsf2+0xa6>
c0024e02:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0024e07:	29 f1                	sub    ecx,esi
c0024e09:	83 f9 1f             	cmp    ecx,0x1f
c0024e0c:	7f 6b                	jg     c0024e79 <__truncdfsf2+0xd2>
c0024e0e:	0d 00 00 00 80       	or     eax,0x80000000
c0024e13:	89 c3                	mov    ebx,eax
c0024e15:	d3 eb                	shr    ebx,cl
c0024e17:	be 01 00 00 00       	mov    esi,0x1
c0024e1c:	d3 e6                	shl    esi,cl
c0024e1e:	4e                   	dec    esi
c0024e1f:	21 f0                	and    eax,esi
c0024e21:	09 f8                	or     eax,edi
c0024e23:	0f 95 c0             	setne  al
c0024e26:	0f b6 c0             	movzx  eax,al
c0024e29:	09 c3                	or     ebx,eax
c0024e2b:	89 d9                	mov    ecx,ebx
c0024e2d:	c1 e9 08             	shr    ecx,0x8
c0024e30:	f6 c3 7f             	test   bl,0x7f
c0024e33:	0f 95 c0             	setne  al
c0024e36:	09 c8                	or     eax,ecx
c0024e38:	83 e0 01             	and    eax,0x1
c0024e3b:	c1 eb 07             	shr    ebx,0x7
c0024e3e:	21 c3                	and    ebx,eax
c0024e40:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024e46:	09 d1                	or     ecx,edx
c0024e48:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0024e4b:	eb 76                	jmp    c0024ec3 <__truncdfsf2+0x11c>
c0024e4d:	83 c6 80             	add    esi,0xffffff80
c0024e50:	7e 1d                	jle    c0024e6f <__truncdfsf2+0xc8>
c0024e52:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0024e58:	75 0b                	jne    c0024e65 <__truncdfsf2+0xbe>
c0024e5a:	09 f8                	or     eax,edi
c0024e5c:	74 09                	je     c0024e67 <__truncdfsf2+0xc0>
c0024e5e:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0024e63:	eb 02                	jmp    c0024e67 <__truncdfsf2+0xc0>
c0024e65:	31 c0                	xor    eax,eax
c0024e67:	c1 fa 17             	sar    edx,0x17
c0024e6a:	80 ca ff             	or     dl,0xff
c0024e6d:	eb 0e                	jmp    c0024e7d <__truncdfsf2+0xd6>
c0024e6f:	c1 fa 1f             	sar    edx,0x1f
c0024e72:	c1 e2 08             	shl    edx,0x8
c0024e75:	09 ca                	or     edx,ecx
c0024e77:	eb 04                	jmp    c0024e7d <__truncdfsf2+0xd6>
c0024e79:	31 d2                	xor    edx,edx
c0024e7b:	31 c0                	xor    eax,eax
c0024e7d:	c1 e2 17             	shl    edx,0x17
c0024e80:	c1 e8 08             	shr    eax,0x8
c0024e83:	09 d0                	or     eax,edx
c0024e85:	eb 3c                	jmp    c0024ec3 <__truncdfsf2+0x11c>
c0024e87:	81 e9 80 03 00 00    	sub    ecx,0x380
c0024e8d:	89 ca                	mov    edx,ecx
c0024e8f:	c1 fa 0b             	sar    edx,0xb
c0024e92:	c1 e2 08             	shl    edx,0x8
c0024e95:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024e98:	31 db                	xor    ebx,ebx
c0024e9a:	85 ff                	test   edi,edi
c0024e9c:	0f 95 c3             	setne  bl
c0024e9f:	09 d8                	or     eax,ebx
c0024ea1:	89 c3                	mov    ebx,eax
c0024ea3:	c1 eb 08             	shr    ebx,0x8
c0024ea6:	a8 7f                	test   al,0x7f
c0024ea8:	0f 95 c2             	setne  dl
c0024eab:	89 d6                	mov    esi,edx
c0024ead:	09 de                	or     esi,ebx
c0024eaf:	83 e6 01             	and    esi,0x1
c0024eb2:	c1 e8 07             	shr    eax,0x7
c0024eb5:	21 f0                	and    eax,esi
c0024eb7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024eba:	09 ca                	or     edx,ecx
c0024ebc:	c1 e2 17             	shl    edx,0x17
c0024ebf:	09 da                	or     edx,ebx
c0024ec1:	01 d0                	add    eax,edx
c0024ec3:	83 c4 0c             	add    esp,0xc
c0024ec6:	5b                   	pop    ebx
c0024ec7:	5e                   	pop    esi
c0024ec8:	5f                   	pop    edi
c0024ec9:	5d                   	pop    ebp
c0024eca:	c3                   	ret    

c0024ecb <__extendsfdf2>:
c0024ecb:	55                   	push   ebp
c0024ecc:	89 e5                	mov    ebp,esp
c0024ece:	57                   	push   edi
c0024ecf:	56                   	push   esi
c0024ed0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024ed3:	89 d1                	mov    ecx,edx
c0024ed5:	c1 f9 17             	sar    ecx,0x17
c0024ed8:	c1 e2 08             	shl    edx,0x8
c0024edb:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024ee1:	89 c8                	mov    eax,ecx
c0024ee3:	80 e4 f8             	and    ah,0xf8
c0024ee6:	8d 71 01             	lea    esi,[ecx+0x1]
c0024ee9:	81 e6 fe 00 00 00    	and    esi,0xfe
c0024eef:	75 27                	jne    c0024f18 <__extendsfdf2+0x4d>
c0024ef1:	81 e1 ff 00 00 00    	and    ecx,0xff
c0024ef7:	75 18                	jne    c0024f11 <__extendsfdf2+0x46>
c0024ef9:	85 d2                	test   edx,edx
c0024efb:	74 20                	je     c0024f1d <__extendsfdf2+0x52>
c0024efd:	41                   	inc    ecx
c0024efe:	01 d2                	add    edx,edx
c0024f00:	79 fb                	jns    c0024efd <__extendsfdf2+0x32>
c0024f02:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024f08:	29 c8                	sub    eax,ecx
c0024f0a:	05 81 03 00 00       	add    eax,0x381
c0024f0f:	eb 0c                	jmp    c0024f1d <__extendsfdf2+0x52>
c0024f11:	05 00 07 00 00       	add    eax,0x700
c0024f16:	eb 05                	jmp    c0024f1d <__extendsfdf2+0x52>
c0024f18:	05 80 03 00 00       	add    eax,0x380
c0024f1d:	c1 e0 14             	shl    eax,0x14
c0024f20:	89 c1                	mov    ecx,eax
c0024f22:	89 d0                	mov    eax,edx
c0024f24:	c1 e8 0b             	shr    eax,0xb
c0024f27:	09 c1                	or     ecx,eax
c0024f29:	c1 e2 15             	shl    edx,0x15
c0024f2c:	89 d0                	mov    eax,edx
c0024f2e:	89 ca                	mov    edx,ecx
c0024f30:	5e                   	pop    esi
c0024f31:	5f                   	pop    edi
c0024f32:	5d                   	pop    ebp
c0024f33:	c3                   	ret    
c0024f34:	66 90                	xchg   ax,ax
c0024f36:	66 90                	xchg   ax,ax
c0024f38:	66 90                	xchg   ax,ax
c0024f3a:	66 90                	xchg   ax,ax
c0024f3c:	66 90                	xchg   ax,ax
c0024f3e:	66 90                	xchg   ax,ax

c0024f40 <fabs>:
c0024f40:	83 ec 0c             	sub    esp,0xc
c0024f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f47:	89 04 24             	mov    DWORD PTR [esp],eax
c0024f4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f4e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024f53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024f57:	dd 04 24             	fld    QWORD PTR [esp]
c0024f5a:	83 c4 0c             	add    esp,0xc
c0024f5d:	c3                   	ret    
c0024f5e:	66 90                	xchg   ax,ax

c0024f60 <lrint>:
c0024f60:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024f64:	83 ec 04             	sub    esp,0x4
c0024f67:	db 1c 24             	fistp  DWORD PTR [esp]
c0024f6a:	58                   	pop    eax
c0024f6b:	c3                   	ret    

c0024f6c <lrintf>:
c0024f6c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0024f70:	83 ec 04             	sub    esp,0x4
c0024f73:	db 1c 24             	fistp  DWORD PTR [esp]
c0024f76:	58                   	pop    eax
c0024f77:	c3                   	ret    

Disassembly of section .init:

c0024f78 <_init>:
c0024f78:	55                   	push   ebp
c0024f79:	89 e5                	mov    ebp,esp
c0024f7b:	e8 98 b1 fd ff       	call   c0000118 <frame_dummy>
c0024f80:	e8 d3 de ff ff       	call   c0022e58 <__do_global_ctors_aux>
c0024f85:	5d                   	pop    ebp
c0024f86:	c3                   	ret    

Disassembly of section .fini:

c0024f87 <_fini>:
c0024f87:	55                   	push   ebp
c0024f88:	89 e5                	mov    ebp,esp
c0024f8a:	e8 19 b1 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0024f8f:	5d                   	pop    ebp
c0024f90:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0024f92 <Computer::~Computer()>:
c0024f92:	83 ec 0c             	sub    esp,0xc
c0024f95:	ba 70 6a 02 c0       	mov    edx,0xc0026a70
c0024f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f9e:	89 10                	mov    DWORD PTR [eax],edx
c0024fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fa4:	83 ec 0c             	sub    esp,0xc
c0024fa7:	50                   	push   eax
c0024fa8:	e8 51 e5 fe ff       	call   c00134fe <Device::~Device()>
c0024fad:	83 c4 10             	add    esp,0x10
c0024fb0:	90                   	nop
c0024fb1:	83 c4 0c             	add    esp,0xc
c0024fb4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0024fb6 <Computer::~Computer()>:
c0024fb6:	83 ec 0c             	sub    esp,0xc
c0024fb9:	83 ec 0c             	sub    esp,0xc
c0024fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024fc0:	e8 cd ff ff ff       	call   c0024f92 <Computer::~Computer()>
c0024fc5:	83 c4 10             	add    esp,0x10
c0024fc8:	83 ec 08             	sub    esp,0x8
c0024fcb:	68 ec 01 00 00       	push   0x1ec
c0024fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024fd4:	e8 98 d1 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024fd9:	83 c4 10             	add    esp,0x10
c0024fdc:	83 c4 0c             	add    esp,0xc
c0024fdf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0024fe0 <idleCommon()>:
c0024fe0:	83 ec 0c             	sub    esp,0xc
c0024fe3:	e8 3e 76 ff ff       	call   c001c626 <lockScheduler()>
c0024fe8:	e8 6d 79 ff ff       	call   c001c95a <schedule()>
c0024fed:	83 c4 0c             	add    esp,0xc
c0024ff0:	e9 33 76 ff ff       	jmp    c001c628 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c0024ff5 <CPU::readCR3()>:
c0024ff5:	83 ec 10             	sub    esp,0x10
c0024ff8:	0f 20 d8             	mov    eax,cr3
c0024ffb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025003:	83 c4 10             	add    esp,0x10
c0025006:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c0025007 <CPU::writeCR3(unsigned long)>:
c0025007:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002500b:	0f 22 d8             	mov    cr3,eax
c002500e:	90                   	nop
c002500f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025010 <LinkedList<UnixFile>::~LinkedList()>:
c0025010:	90                   	nop
c0025011:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025012 <LinkedList<UnixFile>::LinkedList()>:
c0025012:	83 ec 0c             	sub    esp,0xc
c0025015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025019:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002501f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025023:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002502a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002502e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025039:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002503f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025043:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002504a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002504e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025055:	83 ec 0c             	sub    esp,0xc
c0025058:	68 e6 6c 02 c0       	push   0xc0026ce6
c002505d:	e8 ef d1 fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0025062:	83 c4 10             	add    esp,0x10
c0025065:	90                   	nop
c0025066:	83 c4 0c             	add    esp,0xc
c0025069:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002506a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002506a:	83 ec 0c             	sub    esp,0xc
c002506d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025072:	75 10                	jne    c0025084 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0025074:	83 ec 0c             	sub    esp,0xc
c0025077:	68 00 6d 02 c0       	push   0xc0026d00
c002507c:	e8 52 46 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c0025081:	83 c4 10             	add    esp,0x10
c0025084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025088:	8b 00                	mov    eax,DWORD PTR [eax]
c002508a:	85 c0                	test   eax,eax
c002508c:	74 34                	je     c00250c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002508e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025092:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025095:	85 c0                	test   eax,eax
c0025097:	74 29                	je     c00250c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002509d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00250a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00250a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00250a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00250af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00250b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00250b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250c0:	eb 65                	jmp    c0025127 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00250c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00250c8:	85 c0                	test   eax,eax
c00250ca:	75 4b                	jne    c0025117 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00250cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00250d3:	85 c0                	test   eax,eax
c00250d5:	75 40                	jne    c0025117 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00250d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00250df:	89 10                	mov    DWORD PTR [eax],edx
c00250e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00250e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00250ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00250f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025101:	85 c0                	test   eax,eax
c0025103:	74 22                	je     c0025127 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025105:	83 ec 0c             	sub    esp,0xc
c0025108:	68 22 6d 02 c0       	push   0xc0026d22
c002510d:	e8 c1 45 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c0025112:	83 c4 10             	add    esp,0x10
c0025115:	eb 10                	jmp    c0025127 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025117:	83 ec 0c             	sub    esp,0xc
c002511a:	68 2c 6d 02 c0       	push   0xc0026d2c
c002511f:	e8 af 45 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c0025124:	83 c4 10             	add    esp,0x10
c0025127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002512e:	8d 50 01             	lea    edx,[eax+0x1]
c0025131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025135:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025138:	90                   	nop
c0025139:	83 c4 0c             	add    esp,0xc
c002513c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002513e <LinkedList<UnixFile>::getFirstElement()>:
c002513e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025142:	8b 00                	mov    eax,DWORD PTR [eax]
c0025144:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0025146 <LinkedList<UnixFile>::removeFirst()>:
c0025146:	83 ec 0c             	sub    esp,0xc
c0025149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002514d:	8b 00                	mov    eax,DWORD PTR [eax]
c002514f:	85 c0                	test   eax,eax
c0025151:	75 12                	jne    c0025165 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0025153:	83 ec 0c             	sub    esp,0xc
c0025156:	68 38 6d 02 c0       	push   0xc0026d38
c002515b:	e8 73 45 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c0025160:	83 c4 10             	add    esp,0x10
c0025163:	eb 7e                	jmp    c00251e3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0025165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025169:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002516c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002516f:	85 c0                	test   eax,eax
c0025171:	74 10                	je     c0025183 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0025173:	83 ec 0c             	sub    esp,0xc
c0025176:	68 83 6d 02 c0       	push   0xc0026d83
c002517b:	e8 53 45 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c0025180:	83 c4 10             	add    esp,0x10
c0025183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025187:	8b 00                	mov    eax,DWORD PTR [eax]
c0025189:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002518c:	85 c0                	test   eax,eax
c002518e:	75 33                	jne    c00251c3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025194:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002519a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002519e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00251a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ac:	83 f8 01             	cmp    eax,0x1
c00251af:	74 21                	je     c00251d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00251b1:	83 ec 0c             	sub    esp,0xc
c00251b4:	68 5c 6d 02 c0       	push   0xc0026d5c
c00251b9:	e8 15 45 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c00251be:	83 c4 10             	add    esp,0x10
c00251c1:	eb 0f                	jmp    c00251d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00251c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00251c9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00251cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251d0:	89 10                	mov    DWORD PTR [eax],edx
c00251d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251d9:	8d 50 ff             	lea    edx,[eax-0x1]
c00251dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00251e3:	83 c4 0c             	add    esp,0xc
c00251e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00251e8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00251e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00251ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ef:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00251f0 <DriverlessDevice::~DriverlessDevice()>:
c00251f0:	ba 04 74 02 c0       	mov    edx,0xc0027404
c00251f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00251f9:	89 10                	mov    DWORD PTR [eax],edx
c00251fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00251ff:	50                   	push   eax
c0025200:	e8 f9 e2 fe ff       	call   c00134fe <Device::~Device()>
c0025205:	83 c4 04             	add    esp,0x4
c0025208:	90                   	nop
c0025209:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002520a <DriverlessDevice::~DriverlessDevice()>:
c002520a:	83 ec 0c             	sub    esp,0xc
c002520d:	83 ec 0c             	sub    esp,0xc
c0025210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025214:	e8 d7 ff ff ff       	call   c00251f0 <DriverlessDevice::~DriverlessDevice()>
c0025219:	83 c4 10             	add    esp,0x10
c002521c:	83 ec 08             	sub    esp,0x8
c002521f:	68 58 01 00 00       	push   0x158
c0025224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025228:	e8 44 cf fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c002522d:	83 c4 10             	add    esp,0x10
c0025230:	83 c4 0c             	add    esp,0xc
c0025233:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0025234 <LinkedList<Device>::addElement(Device*)>:
c0025234:	83 ec 0c             	sub    esp,0xc
c0025237:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002523c:	75 10                	jne    c002524e <LinkedList<Device>::addElement(Device*)+0x1a>
c002523e:	83 ec 0c             	sub    esp,0xc
c0025241:	68 00 6d 02 c0       	push   0xc0026d00
c0025246:	e8 88 44 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c002524b:	83 c4 10             	add    esp,0x10
c002524e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025252:	8b 00                	mov    eax,DWORD PTR [eax]
c0025254:	85 c0                	test   eax,eax
c0025256:	74 3a                	je     c0025292 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002525c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002525f:	85 c0                	test   eax,eax
c0025261:	74 2f                	je     c0025292 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025267:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002526a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002526e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0025274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002527c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002527f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025283:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025286:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025290:	eb 68                	jmp    c00252fa <LinkedList<Device>::addElement(Device*)+0xc6>
c0025292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025296:	8b 00                	mov    eax,DWORD PTR [eax]
c0025298:	85 c0                	test   eax,eax
c002529a:	75 4e                	jne    c00252ea <LinkedList<Device>::addElement(Device*)+0xb6>
c002529c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252a3:	85 c0                	test   eax,eax
c00252a5:	75 43                	jne    c00252ea <LinkedList<Device>::addElement(Device*)+0xb6>
c00252a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252af:	89 10                	mov    DWORD PTR [eax],edx
c00252b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252b9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00252bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252c3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00252cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00252d4:	85 c0                	test   eax,eax
c00252d6:	74 22                	je     c00252fa <LinkedList<Device>::addElement(Device*)+0xc6>
c00252d8:	83 ec 0c             	sub    esp,0xc
c00252db:	68 22 6d 02 c0       	push   0xc0026d22
c00252e0:	e8 ee 43 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c00252e5:	83 c4 10             	add    esp,0x10
c00252e8:	eb 10                	jmp    c00252fa <LinkedList<Device>::addElement(Device*)+0xc6>
c00252ea:	83 ec 0c             	sub    esp,0xc
c00252ed:	68 2c 6d 02 c0       	push   0xc0026d2c
c00252f2:	e8 dc 43 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c00252f7:	83 c4 10             	add    esp,0x10
c00252fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025301:	8d 50 01             	lea    edx,[eax+0x1]
c0025304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025308:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002530b:	90                   	nop
c002530c:	83 c4 0c             	add    esp,0xc
c002530f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025310 <LinkedList<Device>::LinkedList()>:
c0025310:	83 ec 0c             	sub    esp,0xc
c0025313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025317:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002531d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025321:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025337:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002533d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025341:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002534c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025353:	83 ec 0c             	sub    esp,0xc
c0025356:	68 e6 6c 02 c0       	push   0xc0026ce6
c002535b:	e8 f1 ce fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0025360:	83 c4 10             	add    esp,0x10
c0025363:	90                   	nop
c0025364:	83 c4 0c             	add    esp,0xc
c0025367:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c0025368 <CPU::readCR0()>:
c0025368:	83 ec 10             	sub    esp,0x10
c002536b:	0f 20 c0             	mov    eax,cr0
c002536e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025372:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025376:	83 c4 10             	add    esp,0x10
c0025379:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c002537a <CPU::writeCR0(unsigned long)>:
c002537a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002537e:	0f 22 c0             	mov    cr0,eax
c0025381:	90                   	nop
c0025382:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c0025383 <CPU::readDR0()>:
c0025383:	83 ec 10             	sub    esp,0x10
c0025386:	0f 21 c0             	mov    eax,db0
c0025389:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002538d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025391:	83 c4 10             	add    esp,0x10
c0025394:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c0025395 <CPU::readDR1()>:
c0025395:	83 ec 10             	sub    esp,0x10
c0025398:	0f 21 c8             	mov    eax,db1
c002539b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002539f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253a3:	83 c4 10             	add    esp,0x10
c00253a6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c00253a7 <CPU::readDR2()>:
c00253a7:	83 ec 10             	sub    esp,0x10
c00253aa:	0f 21 d0             	mov    eax,db2
c00253ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00253b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253b5:	83 c4 10             	add    esp,0x10
c00253b8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c00253b9 <CPU::readDR3()>:
c00253b9:	83 ec 10             	sub    esp,0x10
c00253bc:	0f 21 d8             	mov    eax,db3
c00253bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00253c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253c7:	83 c4 10             	add    esp,0x10
c00253ca:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c00253cb <CPU::readDR6()>:
c00253cb:	83 ec 10             	sub    esp,0x10
c00253ce:	0f 21 f0             	mov    eax,db6
c00253d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00253d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253d9:	83 c4 10             	add    esp,0x10
c00253dc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c00253dd <CPU::readDR7()>:
c00253dd:	83 ec 10             	sub    esp,0x10
c00253e0:	0f 21 f8             	mov    eax,db7
c00253e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00253e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253eb:	83 c4 10             	add    esp,0x10
c00253ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00253f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00253f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00253f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00253f6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00253f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00253f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00253fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00253fe:	85 c0                	test   eax,eax
c0025400:	75 0e                	jne    c0025410 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025409:	85 c0                	test   eax,eax
c002540b:	75 03                	jne    c0025410 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002540d:	b0 01                	mov    al,0x1
c002540f:	c3                   	ret    
c0025410:	b0 00                	mov    al,0x0
c0025412:	90                   	nop
c0025413:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025414 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025414:	83 ec 0c             	sub    esp,0xc
c0025417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002541b:	8b 00                	mov    eax,DWORD PTR [eax]
c002541d:	85 c0                	test   eax,eax
c002541f:	75 15                	jne    c0025436 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0025421:	83 ec 0c             	sub    esp,0xc
c0025424:	68 38 6d 02 c0       	push   0xc0026d38
c0025429:	e8 a5 42 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c002542e:	83 c4 10             	add    esp,0x10
c0025431:	e9 88 00 00 00       	jmp    c00254be <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0025436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002543a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002543d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025440:	85 c0                	test   eax,eax
c0025442:	0f 95 c0             	setne  al
c0025445:	84 c0                	test   al,al
c0025447:	74 10                	je     c0025459 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0025449:	83 ec 0c             	sub    esp,0xc
c002544c:	68 83 6d 02 c0       	push   0xc0026d83
c0025451:	e8 7d 42 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c0025456:	83 c4 10             	add    esp,0x10
c0025459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002545d:	8b 00                	mov    eax,DWORD PTR [eax]
c002545f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025462:	85 c0                	test   eax,eax
c0025464:	0f 94 c0             	sete   al
c0025467:	84 c0                	test   al,al
c0025469:	74 33                	je     c002549e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c002546b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002546f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025479:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025484:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025487:	83 f8 01             	cmp    eax,0x1
c002548a:	74 21                	je     c00254ad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002548c:	83 ec 0c             	sub    esp,0xc
c002548f:	68 5c 6d 02 c0       	push   0xc0026d5c
c0025494:	e8 3a 42 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c0025499:	83 c4 10             	add    esp,0x10
c002549c:	eb 0f                	jmp    c00254ad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002549e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00254a4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00254a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ab:	89 10                	mov    DWORD PTR [eax],edx
c00254ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00254b4:	8d 50 ff             	lea    edx,[eax-0x1]
c00254b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00254be:	83 c4 0c             	add    esp,0xc
c00254c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00254c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00254c2:	83 ec 0c             	sub    esp,0xc
c00254c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00254ca:	75 10                	jne    c00254dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00254cc:	83 ec 0c             	sub    esp,0xc
c00254cf:	68 00 6d 02 c0       	push   0xc0026d00
c00254d4:	e8 fa 41 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c00254d9:	83 c4 10             	add    esp,0x10
c00254dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00254e2:	85 c0                	test   eax,eax
c00254e4:	74 34                	je     c002551a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00254e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254ed:	85 c0                	test   eax,eax
c00254ef:	74 29                	je     c002551a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00254f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00254fc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00254ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025503:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025507:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002550a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002550e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025511:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025518:	eb 65                	jmp    c002557f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002551a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002551e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025520:	85 c0                	test   eax,eax
c0025522:	75 4b                	jne    c002556f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002552b:	85 c0                	test   eax,eax
c002552d:	75 40                	jne    c002556f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002552f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025533:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025537:	89 10                	mov    DWORD PTR [eax],edx
c0025539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002553d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025541:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002554b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025556:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025559:	85 c0                	test   eax,eax
c002555b:	74 22                	je     c002557f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002555d:	83 ec 0c             	sub    esp,0xc
c0025560:	68 22 6d 02 c0       	push   0xc0026d22
c0025565:	e8 69 41 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c002556a:	83 c4 10             	add    esp,0x10
c002556d:	eb 10                	jmp    c002557f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002556f:	83 ec 0c             	sub    esp,0xc
c0025572:	68 2c 6d 02 c0       	push   0xc0026d2c
c0025577:	e8 57 41 ff ff       	call   c00196d3 <Krnl::panic(char const*)>
c002557c:	83 c4 10             	add    esp,0x10
c002557f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025583:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025586:	8d 50 01             	lea    edx,[eax+0x1]
c0025589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025590:	90                   	nop
c0025591:	83 c4 0c             	add    esp,0xc
c0025594:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025596 <ACPI::~ACPI()>:
c0025596:	83 ec 0c             	sub    esp,0xc
c0025599:	ba 90 7b 02 c0       	mov    edx,0xc0027b90
c002559e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a2:	89 10                	mov    DWORD PTR [eax],edx
c00255a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a8:	83 ec 0c             	sub    esp,0xc
c00255ab:	50                   	push   eax
c00255ac:	e8 4d df fe ff       	call   c00134fe <Device::~Device()>
c00255b1:	83 c4 10             	add    esp,0x10
c00255b4:	90                   	nop
c00255b5:	83 c4 0c             	add    esp,0xc
c00255b8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00255ba <ACPI::~ACPI()>:
c00255ba:	83 ec 0c             	sub    esp,0xc
c00255bd:	83 ec 0c             	sub    esp,0xc
c00255c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00255c4:	e8 cd ff ff ff       	call   c0025596 <ACPI::~ACPI()>
c00255c9:	83 c4 10             	add    esp,0x10
c00255cc:	83 ec 08             	sub    esp,0x8
c00255cf:	68 68 22 00 00       	push   0x2268
c00255d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00255d8:	e8 94 cb fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00255dd:	83 c4 10             	add    esp,0x10
c00255e0:	83 c4 0c             	add    esp,0xc
c00255e3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00255e4 <CPU::~CPU()>:
c00255e4:	83 ec 0c             	sub    esp,0xc
c00255e7:	ba 80 7f 02 c0       	mov    edx,0xc0027f80
c00255ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f0:	89 10                	mov    DWORD PTR [eax],edx
c00255f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f6:	83 ec 0c             	sub    esp,0xc
c00255f9:	50                   	push   eax
c00255fa:	e8 ff de fe ff       	call   c00134fe <Device::~Device()>
c00255ff:	83 c4 10             	add    esp,0x10
c0025602:	90                   	nop
c0025603:	83 c4 0c             	add    esp,0xc
c0025606:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0025608 <CPU::~CPU()>:
c0025608:	83 ec 0c             	sub    esp,0xc
c002560b:	83 ec 0c             	sub    esp,0xc
c002560e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025612:	e8 cd ff ff ff       	call   c00255e4 <CPU::~CPU()>
c0025617:	83 c4 10             	add    esp,0x10
c002561a:	83 ec 08             	sub    esp,0x8
c002561d:	68 98 11 00 00       	push   0x1198
c0025622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025626:	e8 46 cb fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c002562b:	83 c4 10             	add    esp,0x10
c002562e:	83 c4 0c             	add    esp,0xc
c0025631:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c0025632 <CPU::readCR4()>:
c0025632:	83 ec 10             	sub    esp,0x10
c0025635:	0f 20 e0             	mov    eax,cr4
c0025638:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002563c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025640:	83 c4 10             	add    esp,0x10
c0025643:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c0025644 <CPU::writeDR7(unsigned long)>:
c0025644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025648:	0f 23 f8             	mov    db7,eax
c002564b:	90                   	nop
c002564c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c002564d <CPU::writeCR4(unsigned long)>:
c002564d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025651:	0f 22 e0             	mov    cr4,eax
c0025654:	90                   	nop
c0025655:	c3                   	ret    

Disassembly of section .text._ZN9_FPUStateC2Ev:

c0025656 <_FPUState::_FPUState()>:
c0025656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002565a:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025661:	90                   	nop
c0025662:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c0025663 <CPU::readCR2()>:
c0025663:	83 ec 10             	sub    esp,0x10
c0025666:	0f 20 d0             	mov    eax,cr2
c0025669:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002566d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025671:	83 c4 10             	add    esp,0x10
c0025674:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0025676 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0025676:	90                   	nop
c0025677:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0025678 <ThreadControlBlock::ThreadControlBlock()>:
c0025678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002567c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025683:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025687:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002568e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025692:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0025699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002569d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00256a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256a8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00256ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256b0:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00256b4:	90                   	nop
c00256b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00256b6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00256b6:	83 ec 0c             	sub    esp,0xc
c00256b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00256c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00256ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00256d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00256e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00256ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00256f9:	83 ec 0c             	sub    esp,0xc
c00256fc:	68 e6 6c 02 c0       	push   0xc0026ce6
c0025701:	e8 4b cb fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0025706:	83 c4 10             	add    esp,0x10
c0025709:	90                   	nop
c002570a:	83 c4 0c             	add    esp,0xc
c002570d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002570e <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002570e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025712:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025715:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025716 <PCI::~PCI()>:
c0025716:	83 ec 0c             	sub    esp,0xc
c0025719:	ba 14 8d 02 c0       	mov    edx,0xc0028d14
c002571e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025722:	89 10                	mov    DWORD PTR [eax],edx
c0025724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025728:	83 ec 0c             	sub    esp,0xc
c002572b:	50                   	push   eax
c002572c:	e8 dd d7 fe ff       	call   c0012f0e <Bus::~Bus()>
c0025731:	83 c4 10             	add    esp,0x10
c0025734:	90                   	nop
c0025735:	83 c4 0c             	add    esp,0xc
c0025738:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002573a <PCI::~PCI()>:
c002573a:	83 ec 0c             	sub    esp,0xc
c002573d:	83 ec 0c             	sub    esp,0xc
c0025740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025744:	e8 cd ff ff ff       	call   c0025716 <PCI::~PCI()>
c0025749:	83 c4 10             	add    esp,0x10
c002574c:	83 ec 08             	sub    esp,0x8
c002574f:	68 58 01 00 00       	push   0x158
c0025754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025758:	e8 14 ca fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c002575d:	83 c4 10             	add    esp,0x10
c0025760:	83 c4 0c             	add    esp,0xc
c0025763:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0025764 <IDE::~IDE()>:
c0025764:	83 ec 0c             	sub    esp,0xc
c0025767:	ba 78 8f 02 c0       	mov    edx,0xc0028f78
c002576c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025770:	89 10                	mov    DWORD PTR [eax],edx
c0025772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025776:	83 ec 0c             	sub    esp,0xc
c0025779:	50                   	push   eax
c002577a:	e8 95 e2 fe ff       	call   c0013a14 <HardDiskController::~HardDiskController()>
c002577f:	83 c4 10             	add    esp,0x10
c0025782:	90                   	nop
c0025783:	83 c4 0c             	add    esp,0xc
c0025786:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025788 <IDE::~IDE()>:
c0025788:	83 ec 0c             	sub    esp,0xc
c002578b:	83 ec 0c             	sub    esp,0xc
c002578e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025792:	e8 cd ff ff ff       	call   c0025764 <IDE::~IDE()>
c0025797:	83 c4 10             	add    esp,0x10
c002579a:	83 ec 08             	sub    esp,0x8
c002579d:	68 70 02 00 00       	push   0x270
c00257a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257a6:	e8 c6 c9 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00257ab:	83 c4 10             	add    esp,0x10
c00257ae:	83 c4 0c             	add    esp,0xc
c00257b1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00257b2 <ATA::~ATA()>:
c00257b2:	83 ec 0c             	sub    esp,0xc
c00257b5:	ba c8 8f 02 c0       	mov    edx,0xc0028fc8
c00257ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257be:	89 10                	mov    DWORD PTR [eax],edx
c00257c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257c4:	83 ec 0c             	sub    esp,0xc
c00257c7:	50                   	push   eax
c00257c8:	e8 25 e3 fe ff       	call   c0013af2 <PhysicalDisk::~PhysicalDisk()>
c00257cd:	83 c4 10             	add    esp,0x10
c00257d0:	90                   	nop
c00257d1:	83 c4 0c             	add    esp,0xc
c00257d4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00257d6 <ATA::~ATA()>:
c00257d6:	83 ec 0c             	sub    esp,0xc
c00257d9:	83 ec 0c             	sub    esp,0xc
c00257dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257e0:	e8 cd ff ff ff       	call   c00257b2 <ATA::~ATA()>
c00257e5:	83 c4 10             	add    esp,0x10
c00257e8:	83 ec 08             	sub    esp,0x8
c00257eb:	68 7c 01 00 00       	push   0x17c
c00257f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257f4:	e8 78 c9 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00257f9:	83 c4 10             	add    esp,0x10
c00257fc:	83 c4 0c             	add    esp,0xc
c00257ff:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025800 <ATAPI::~ATAPI()>:
c0025800:	83 ec 0c             	sub    esp,0xc
c0025803:	ba 34 90 02 c0       	mov    edx,0xc0029034
c0025808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002580c:	89 10                	mov    DWORD PTR [eax],edx
c002580e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025812:	83 ec 0c             	sub    esp,0xc
c0025815:	50                   	push   eax
c0025816:	e8 d7 e2 fe ff       	call   c0013af2 <PhysicalDisk::~PhysicalDisk()>
c002581b:	83 c4 10             	add    esp,0x10
c002581e:	90                   	nop
c002581f:	83 c4 0c             	add    esp,0xc
c0025822:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0025824 <ATAPI::~ATAPI()>:
c0025824:	83 ec 0c             	sub    esp,0xc
c0025827:	83 ec 0c             	sub    esp,0xc
c002582a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002582e:	e8 cd ff ff ff       	call   c0025800 <ATAPI::~ATAPI()>
c0025833:	83 c4 10             	add    esp,0x10
c0025836:	83 ec 08             	sub    esp,0x8
c0025839:	68 80 01 00 00       	push   0x180
c002583e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025842:	e8 2a c9 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025847:	83 c4 10             	add    esp,0x10
c002584a:	83 c4 0c             	add    esp,0xc
c002584d:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002584e <AVX::~AVX()>:
c002584e:	83 ec 0c             	sub    esp,0xc
c0025851:	ba 70 90 02 c0       	mov    edx,0xc0029070
c0025856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002585a:	89 10                	mov    DWORD PTR [eax],edx
c002585c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025860:	83 ec 0c             	sub    esp,0xc
c0025863:	50                   	push   eax
c0025864:	e8 0d e3 fe ff       	call   c0013b76 <FPU::~FPU()>
c0025869:	83 c4 10             	add    esp,0x10
c002586c:	90                   	nop
c002586d:	83 c4 0c             	add    esp,0xc
c0025870:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0025872 <AVX::~AVX()>:
c0025872:	83 ec 0c             	sub    esp,0xc
c0025875:	83 ec 0c             	sub    esp,0xc
c0025878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002587c:	e8 cd ff ff ff       	call   c002584e <AVX::~AVX()>
c0025881:	83 c4 10             	add    esp,0x10
c0025884:	83 ec 08             	sub    esp,0x8
c0025887:	68 58 01 00 00       	push   0x158
c002588c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025890:	e8 dc c8 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025895:	83 c4 10             	add    esp,0x10
c0025898:	83 c4 0c             	add    esp,0xc
c002589b:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002589c <MMX::~MMX()>:
c002589c:	83 ec 0c             	sub    esp,0xc
c002589f:	ba b0 90 02 c0       	mov    edx,0xc00290b0
c00258a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258a8:	89 10                	mov    DWORD PTR [eax],edx
c00258aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ae:	83 ec 0c             	sub    esp,0xc
c00258b1:	50                   	push   eax
c00258b2:	e8 bf e2 fe ff       	call   c0013b76 <FPU::~FPU()>
c00258b7:	83 c4 10             	add    esp,0x10
c00258ba:	90                   	nop
c00258bb:	83 c4 0c             	add    esp,0xc
c00258be:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00258c0 <MMX::~MMX()>:
c00258c0:	83 ec 0c             	sub    esp,0xc
c00258c3:	83 ec 0c             	sub    esp,0xc
c00258c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258ca:	e8 cd ff ff ff       	call   c002589c <MMX::~MMX()>
c00258cf:	83 c4 10             	add    esp,0x10
c00258d2:	83 ec 08             	sub    esp,0x8
c00258d5:	68 58 01 00 00       	push   0x158
c00258da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258de:	e8 8e c8 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00258e3:	83 c4 10             	add    esp,0x10
c00258e6:	83 c4 0c             	add    esp,0xc
c00258e9:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00258ea <SSE::~SSE()>:
c00258ea:	83 ec 0c             	sub    esp,0xc
c00258ed:	ba f0 90 02 c0       	mov    edx,0xc00290f0
c00258f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258f6:	89 10                	mov    DWORD PTR [eax],edx
c00258f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258fc:	83 ec 0c             	sub    esp,0xc
c00258ff:	50                   	push   eax
c0025900:	e8 71 e2 fe ff       	call   c0013b76 <FPU::~FPU()>
c0025905:	83 c4 10             	add    esp,0x10
c0025908:	90                   	nop
c0025909:	83 c4 0c             	add    esp,0xc
c002590c:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002590e <SSE::~SSE()>:
c002590e:	83 ec 0c             	sub    esp,0xc
c0025911:	83 ec 0c             	sub    esp,0xc
c0025914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025918:	e8 cd ff ff ff       	call   c00258ea <SSE::~SSE()>
c002591d:	83 c4 10             	add    esp,0x10
c0025920:	83 ec 08             	sub    esp,0x8
c0025923:	68 58 01 00 00       	push   0x158
c0025928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002592c:	e8 40 c8 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025931:	83 c4 10             	add    esp,0x10
c0025934:	83 c4 0c             	add    esp,0xc
c0025937:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0025938 <x87::~x87()>:
c0025938:	83 ec 0c             	sub    esp,0xc
c002593b:	ba 30 91 02 c0       	mov    edx,0xc0029130
c0025940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025944:	89 10                	mov    DWORD PTR [eax],edx
c0025946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002594a:	83 ec 0c             	sub    esp,0xc
c002594d:	50                   	push   eax
c002594e:	e8 23 e2 fe ff       	call   c0013b76 <FPU::~FPU()>
c0025953:	83 c4 10             	add    esp,0x10
c0025956:	90                   	nop
c0025957:	83 c4 0c             	add    esp,0xc
c002595a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002595c <x87::~x87()>:
c002595c:	83 ec 0c             	sub    esp,0xc
c002595f:	83 ec 0c             	sub    esp,0xc
c0025962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025966:	e8 cd ff ff ff       	call   c0025938 <x87::~x87()>
c002596b:	83 c4 10             	add    esp,0x10
c002596e:	83 ec 08             	sub    esp,0x8
c0025971:	68 58 01 00 00       	push   0x158
c0025976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002597a:	e8 f2 c7 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c002597f:	83 c4 10             	add    esp,0x10
c0025982:	83 c4 0c             	add    esp,0xc
c0025985:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025986 <IOAPIC::~IOAPIC()>:
c0025986:	83 ec 0c             	sub    esp,0xc
c0025989:	ba 88 92 02 c0       	mov    edx,0xc0029288
c002598e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025992:	89 10                	mov    DWORD PTR [eax],edx
c0025994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025998:	83 ec 0c             	sub    esp,0xc
c002599b:	50                   	push   eax
c002599c:	e8 5d db fe ff       	call   c00134fe <Device::~Device()>
c00259a1:	83 c4 10             	add    esp,0x10
c00259a4:	90                   	nop
c00259a5:	83 c4 0c             	add    esp,0xc
c00259a8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00259aa <IOAPIC::~IOAPIC()>:
c00259aa:	83 ec 0c             	sub    esp,0xc
c00259ad:	83 ec 0c             	sub    esp,0xc
c00259b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259b4:	e8 cd ff ff ff       	call   c0025986 <IOAPIC::~IOAPIC()>
c00259b9:	83 c4 10             	add    esp,0x10
c00259bc:	83 ec 08             	sub    esp,0x8
c00259bf:	68 68 01 00 00       	push   0x168
c00259c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259c8:	e8 a4 c7 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00259cd:	83 c4 10             	add    esp,0x10
c00259d0:	83 c4 0c             	add    esp,0xc
c00259d3:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00259d4 <APIC::~APIC()>:
c00259d4:	83 ec 0c             	sub    esp,0xc
c00259d7:	ba 40 92 02 c0       	mov    edx,0xc0029240
c00259dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e0:	89 10                	mov    DWORD PTR [eax],edx
c00259e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e6:	83 ec 0c             	sub    esp,0xc
c00259e9:	50                   	push   eax
c00259ea:	e8 cd e5 fe ff       	call   c0013fbc <InterruptController::~InterruptController()>
c00259ef:	83 c4 10             	add    esp,0x10
c00259f2:	90                   	nop
c00259f3:	83 c4 0c             	add    esp,0xc
c00259f6:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00259f8 <APIC::~APIC()>:
c00259f8:	83 ec 0c             	sub    esp,0xc
c00259fb:	83 ec 0c             	sub    esp,0xc
c00259fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a02:	e8 cd ff ff ff       	call   c00259d4 <APIC::~APIC()>
c0025a07:	83 c4 10             	add    esp,0x10
c0025a0a:	83 ec 08             	sub    esp,0x8
c0025a0d:	68 58 21 00 00       	push   0x2158
c0025a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a16:	e8 56 c7 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025a1b:	83 c4 10             	add    esp,0x10
c0025a1e:	83 c4 0c             	add    esp,0xc
c0025a21:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025a22 <PIC::~PIC()>:
c0025a22:	83 ec 0c             	sub    esp,0xc
c0025a25:	ba d8 92 02 c0       	mov    edx,0xc00292d8
c0025a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a2e:	89 10                	mov    DWORD PTR [eax],edx
c0025a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a34:	83 ec 0c             	sub    esp,0xc
c0025a37:	50                   	push   eax
c0025a38:	e8 7f e5 fe ff       	call   c0013fbc <InterruptController::~InterruptController()>
c0025a3d:	83 c4 10             	add    esp,0x10
c0025a40:	90                   	nop
c0025a41:	83 c4 0c             	add    esp,0xc
c0025a44:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025a46 <PIC::~PIC()>:
c0025a46:	83 ec 0c             	sub    esp,0xc
c0025a49:	83 ec 0c             	sub    esp,0xc
c0025a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a50:	e8 cd ff ff ff       	call   c0025a22 <PIC::~PIC()>
c0025a55:	83 c4 10             	add    esp,0x10
c0025a58:	83 ec 08             	sub    esp,0x8
c0025a5b:	68 58 21 00 00       	push   0x2158
c0025a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a64:	e8 08 c7 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025a69:	83 c4 10             	add    esp,0x10
c0025a6c:	83 c4 0c             	add    esp,0xc
c0025a6f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025a70 <APICTimer::~APICTimer()>:
c0025a70:	83 ec 0c             	sub    esp,0xc
c0025a73:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0025a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a7c:	89 10                	mov    DWORD PTR [eax],edx
c0025a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a82:	83 ec 0c             	sub    esp,0xc
c0025a85:	50                   	push   eax
c0025a86:	e8 93 02 ff ff       	call   c0015d1e <Timer::~Timer()>
c0025a8b:	83 c4 10             	add    esp,0x10
c0025a8e:	90                   	nop
c0025a8f:	83 c4 0c             	add    esp,0xc
c0025a92:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025a94 <APICTimer::~APICTimer()>:
c0025a94:	83 ec 0c             	sub    esp,0xc
c0025a97:	83 ec 0c             	sub    esp,0xc
c0025a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a9e:	e8 cd ff ff ff       	call   c0025a70 <APICTimer::~APICTimer()>
c0025aa3:	83 c4 10             	add    esp,0x10
c0025aa6:	83 ec 08             	sub    esp,0x8
c0025aa9:	68 60 01 00 00       	push   0x160
c0025aae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ab2:	e8 ba c6 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025ab7:	83 c4 10             	add    esp,0x10
c0025aba:	83 c4 0c             	add    esp,0xc
c0025abd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025abe <PIT::~PIT()>:
c0025abe:	83 ec 0c             	sub    esp,0xc
c0025ac1:	ba 7c 93 02 c0       	mov    edx,0xc002937c
c0025ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aca:	89 10                	mov    DWORD PTR [eax],edx
c0025acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad0:	83 ec 0c             	sub    esp,0xc
c0025ad3:	50                   	push   eax
c0025ad4:	e8 45 02 ff ff       	call   c0015d1e <Timer::~Timer()>
c0025ad9:	83 c4 10             	add    esp,0x10
c0025adc:	90                   	nop
c0025add:	83 c4 0c             	add    esp,0xc
c0025ae0:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025ae2 <PIT::~PIT()>:
c0025ae2:	83 ec 0c             	sub    esp,0xc
c0025ae5:	83 ec 0c             	sub    esp,0xc
c0025ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aec:	e8 cd ff ff ff       	call   c0025abe <PIT::~PIT()>
c0025af1:	83 c4 10             	add    esp,0x10
c0025af4:	83 ec 08             	sub    esp,0x8
c0025af7:	68 5c 01 00 00       	push   0x15c
c0025afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b00:	e8 6c c6 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0025b05:	83 c4 10             	add    esp,0x10
c0025b08:	83 c4 0c             	add    esp,0xc
c0025b0b:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.bx:

c0025b0c <__x86.get_pc_thunk.bx>:
c0025b0c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0025b0f:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

c0025b10 <__x86.get_pc_thunk.cx>:
c0025b10:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0025b13:	c3                   	ret    
